# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'ArcAutoProvisioningConfigurationArgs',
    'AwsEnvironmentDataArgs',
    'AwsOrganizationalDataMasterArgs',
    'AwsOrganizationalDataMemberArgs',
    'AzureDevOpsScopeEnvironmentDataArgs',
    'CspmMonitorAwsOfferingNativeCloudConnectionArgs',
    'CspmMonitorAwsOfferingArgs',
    'CspmMonitorAzureDevOpsOfferingArgs',
    'CspmMonitorGcpOfferingNativeCloudConnectionArgs',
    'CspmMonitorGcpOfferingArgs',
    'CspmMonitorGitLabOfferingArgs',
    'CspmMonitorGithubOfferingArgs',
    'DefenderCspmAwsOfferingCiemDiscoveryArgs',
    'DefenderCspmAwsOfferingCiemOidcArgs',
    'DefenderCspmAwsOfferingCiemArgs',
    'DefenderCspmAwsOfferingDataSensitivityDiscoveryArgs',
    'DefenderCspmAwsOfferingDatabasesDspmArgs',
    'DefenderCspmAwsOfferingMdcContainersAgentlessDiscoveryK8sArgs',
    'DefenderCspmAwsOfferingMdcContainersImageAssessmentArgs',
    'DefenderCspmAwsOfferingVmScannersArgs',
    'DefenderCspmAwsOfferingArgs',
    'DefenderCspmGcpOfferingCiemDiscoveryArgs',
    'DefenderCspmGcpOfferingDataSensitivityDiscoveryArgs',
    'DefenderCspmGcpOfferingMdcContainersAgentlessDiscoveryK8sArgs',
    'DefenderCspmGcpOfferingMdcContainersImageAssessmentArgs',
    'DefenderCspmGcpOfferingVmScannersArgs',
    'DefenderCspmGcpOfferingArgs',
    'DefenderFoDatabasesAwsOfferingArcAutoProvisioningArgs',
    'DefenderFoDatabasesAwsOfferingDatabasesDspmArgs',
    'DefenderFoDatabasesAwsOfferingRdsArgs',
    'DefenderFoDatabasesAwsOfferingArgs',
    'DefenderForContainersAwsOfferingCloudWatchToKinesisArgs',
    'DefenderForContainersAwsOfferingKinesisToS3Args',
    'DefenderForContainersAwsOfferingKubernetesDataCollectionArgs',
    'DefenderForContainersAwsOfferingKubernetesServiceArgs',
    'DefenderForContainersAwsOfferingMdcContainersAgentlessDiscoveryK8sArgs',
    'DefenderForContainersAwsOfferingMdcContainersImageAssessmentArgs',
    'DefenderForContainersAwsOfferingVmScannersArgs',
    'DefenderForContainersAwsOfferingArgs',
    'DefenderForContainersGcpOfferingDataPipelineNativeCloudConnectionArgs',
    'DefenderForContainersGcpOfferingMdcContainersAgentlessDiscoveryK8sArgs',
    'DefenderForContainersGcpOfferingMdcContainersImageAssessmentArgs',
    'DefenderForContainersGcpOfferingNativeCloudConnectionArgs',
    'DefenderForContainersGcpOfferingVmScannersArgs',
    'DefenderForContainersGcpOfferingArgs',
    'DefenderForDatabasesGcpOfferingArcAutoProvisioningArgs',
    'DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioningArgs',
    'DefenderForDatabasesGcpOfferingArgs',
    'DefenderForServersAwsOfferingArcAutoProvisioningArgs',
    'DefenderForServersAwsOfferingConfigurationArgs',
    'DefenderForServersAwsOfferingDefenderForServersArgs',
    'DefenderForServersAwsOfferingMdeAutoProvisioningArgs',
    'DefenderForServersAwsOfferingSubPlanArgs',
    'DefenderForServersAwsOfferingVaAutoProvisioningArgs',
    'DefenderForServersAwsOfferingVmScannersArgs',
    'DefenderForServersAwsOfferingArgs',
    'DefenderForServersGcpOfferingArcAutoProvisioningArgs',
    'DefenderForServersGcpOfferingConfigurationArgs',
    'DefenderForServersGcpOfferingDefenderForServersArgs',
    'DefenderForServersGcpOfferingMdeAutoProvisioningArgs',
    'DefenderForServersGcpOfferingSubPlanArgs',
    'DefenderForServersGcpOfferingVaAutoProvisioningArgs',
    'DefenderForServersGcpOfferingVmScannersArgs',
    'DefenderForServersGcpOfferingArgs',
    'GcpOrganizationalDataMemberArgs',
    'GcpOrganizationalDataOrganizationArgs',
    'GcpProjectDetailsArgs',
    'GcpProjectEnvironmentDataArgs',
    'GithubScopeEnvironmentDataArgs',
    'GitlabScopeEnvironmentDataArgs',
    'VmScannersBaseConfigurationArgs',
]

@pulumi.input_type
class ArcAutoProvisioningConfigurationArgs:
    def __init__(__self__, *,
                 private_link_scope: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None):
        """
        Configuration for servers Arc auto provisioning for a given environment
        :param pulumi.Input[str] private_link_scope: Optional Arc private link scope resource id to link the Arc agent
        :param pulumi.Input[str] proxy: Optional HTTP proxy endpoint to use for the Arc agent
        """
        if private_link_scope is not None:
            pulumi.set(__self__, "private_link_scope", private_link_scope)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)

    @property
    @pulumi.getter(name="privateLinkScope")
    def private_link_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Optional Arc private link scope resource id to link the Arc agent
        """
        return pulumi.get(self, "private_link_scope")

    @private_link_scope.setter
    def private_link_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_scope", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Optional HTTP proxy endpoint to use for the Arc agent
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)


@pulumi.input_type
class AwsEnvironmentDataArgs:
    def __init__(__self__, *,
                 environment_type: pulumi.Input[str],
                 organizational_data: Optional[pulumi.Input[Union['AwsOrganizationalDataMasterArgs', 'AwsOrganizationalDataMemberArgs']]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scan_interval: Optional[pulumi.Input[float]] = None):
        """
        The AWS connector environment data
        :param pulumi.Input[str] environment_type: The type of the environment data.
               Expected value is 'AwsAccount'.
        :param pulumi.Input[Union['AwsOrganizationalDataMasterArgs', 'AwsOrganizationalDataMemberArgs']] organizational_data: The AWS account's organizational data
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: list of regions to scan
        :param pulumi.Input[float] scan_interval: Scan interval in hours (value should be between 1-hour to 24-hours)
        """
        pulumi.set(__self__, "environment_type", 'AwsAccount')
        if organizational_data is not None:
            pulumi.set(__self__, "organizational_data", organizational_data)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if scan_interval is not None:
            pulumi.set(__self__, "scan_interval", scan_interval)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> pulumi.Input[str]:
        """
        The type of the environment data.
        Expected value is 'AwsAccount'.
        """
        return pulumi.get(self, "environment_type")

    @environment_type.setter
    def environment_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_type", value)

    @property
    @pulumi.getter(name="organizationalData")
    def organizational_data(self) -> Optional[pulumi.Input[Union['AwsOrganizationalDataMasterArgs', 'AwsOrganizationalDataMemberArgs']]]:
        """
        The AWS account's organizational data
        """
        return pulumi.get(self, "organizational_data")

    @organizational_data.setter
    def organizational_data(self, value: Optional[pulumi.Input[Union['AwsOrganizationalDataMasterArgs', 'AwsOrganizationalDataMemberArgs']]]):
        pulumi.set(self, "organizational_data", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of regions to scan
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="scanInterval")
    def scan_interval(self) -> Optional[pulumi.Input[float]]:
        """
        Scan interval in hours (value should be between 1-hour to 24-hours)
        """
        return pulumi.get(self, "scan_interval")

    @scan_interval.setter
    def scan_interval(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "scan_interval", value)


@pulumi.input_type
class AwsOrganizationalDataMasterArgs:
    def __init__(__self__, *,
                 organization_membership_type: pulumi.Input[str],
                 excluded_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 stackset_name: Optional[pulumi.Input[str]] = None):
        """
        The AWS organization data for the master account
        :param pulumi.Input[str] organization_membership_type: The multi cloud account's membership type in the organization
               Expected value is 'Organization'.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_account_ids: If the multi cloud account is of membership type organization, list of accounts excluded from offering
        :param pulumi.Input[str] stackset_name: If the multi cloud account is of membership type organization, this will be the name of the onboarding stackset
        """
        pulumi.set(__self__, "organization_membership_type", 'Organization')
        if excluded_account_ids is not None:
            pulumi.set(__self__, "excluded_account_ids", excluded_account_ids)
        if stackset_name is not None:
            pulumi.set(__self__, "stackset_name", stackset_name)

    @property
    @pulumi.getter(name="organizationMembershipType")
    def organization_membership_type(self) -> pulumi.Input[str]:
        """
        The multi cloud account's membership type in the organization
        Expected value is 'Organization'.
        """
        return pulumi.get(self, "organization_membership_type")

    @organization_membership_type.setter
    def organization_membership_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_membership_type", value)

    @property
    @pulumi.getter(name="excludedAccountIds")
    def excluded_account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        If the multi cloud account is of membership type organization, list of accounts excluded from offering
        """
        return pulumi.get(self, "excluded_account_ids")

    @excluded_account_ids.setter
    def excluded_account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_account_ids", value)

    @property
    @pulumi.getter(name="stacksetName")
    def stackset_name(self) -> Optional[pulumi.Input[str]]:
        """
        If the multi cloud account is of membership type organization, this will be the name of the onboarding stackset
        """
        return pulumi.get(self, "stackset_name")

    @stackset_name.setter
    def stackset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stackset_name", value)


@pulumi.input_type
class AwsOrganizationalDataMemberArgs:
    def __init__(__self__, *,
                 organization_membership_type: pulumi.Input[str],
                 parent_hierarchy_id: Optional[pulumi.Input[str]] = None):
        """
        The AWS organization data for the member account
        :param pulumi.Input[str] organization_membership_type: The multi cloud account's membership type in the organization
               Expected value is 'Member'.
        :param pulumi.Input[str] parent_hierarchy_id: If the multi cloud account is not of membership type organization, this will be the ID of the account's parent
        """
        pulumi.set(__self__, "organization_membership_type", 'Member')
        if parent_hierarchy_id is not None:
            pulumi.set(__self__, "parent_hierarchy_id", parent_hierarchy_id)

    @property
    @pulumi.getter(name="organizationMembershipType")
    def organization_membership_type(self) -> pulumi.Input[str]:
        """
        The multi cloud account's membership type in the organization
        Expected value is 'Member'.
        """
        return pulumi.get(self, "organization_membership_type")

    @organization_membership_type.setter
    def organization_membership_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_membership_type", value)

    @property
    @pulumi.getter(name="parentHierarchyId")
    def parent_hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        """
        If the multi cloud account is not of membership type organization, this will be the ID of the account's parent
        """
        return pulumi.get(self, "parent_hierarchy_id")

    @parent_hierarchy_id.setter
    def parent_hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_hierarchy_id", value)


@pulumi.input_type
class AzureDevOpsScopeEnvironmentDataArgs:
    def __init__(__self__, *,
                 environment_type: pulumi.Input[str]):
        """
        The AzureDevOps scope connector's environment data
        :param pulumi.Input[str] environment_type: The type of the environment data.
               Expected value is 'AzureDevOpsScope'.
        """
        pulumi.set(__self__, "environment_type", 'AzureDevOpsScope')

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> pulumi.Input[str]:
        """
        The type of the environment data.
        Expected value is 'AzureDevOpsScope'.
        """
        return pulumi.get(self, "environment_type")

    @environment_type.setter
    def environment_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_type", value)


@pulumi.input_type
class CspmMonitorAwsOfferingNativeCloudConnectionArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None):
        """
        The native cloud connection configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)


@pulumi.input_type
class CspmMonitorAwsOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str],
                 native_cloud_connection: Optional[pulumi.Input['CspmMonitorAwsOfferingNativeCloudConnectionArgs']] = None):
        """
        The CSPM monitoring for AWS offering
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'CspmMonitorAws'.
        :param pulumi.Input['CspmMonitorAwsOfferingNativeCloudConnectionArgs'] native_cloud_connection: The native cloud connection configuration
        """
        pulumi.set(__self__, "offering_type", 'CspmMonitorAws')
        if native_cloud_connection is not None:
            pulumi.set(__self__, "native_cloud_connection", native_cloud_connection)

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'CspmMonitorAws'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)

    @property
    @pulumi.getter(name="nativeCloudConnection")
    def native_cloud_connection(self) -> Optional[pulumi.Input['CspmMonitorAwsOfferingNativeCloudConnectionArgs']]:
        """
        The native cloud connection configuration
        """
        return pulumi.get(self, "native_cloud_connection")

    @native_cloud_connection.setter
    def native_cloud_connection(self, value: Optional[pulumi.Input['CspmMonitorAwsOfferingNativeCloudConnectionArgs']]):
        pulumi.set(self, "native_cloud_connection", value)


@pulumi.input_type
class CspmMonitorAzureDevOpsOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str]):
        """
        The CSPM monitoring for AzureDevOps offering
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'CspmMonitorAzureDevOps'.
        """
        pulumi.set(__self__, "offering_type", 'CspmMonitorAzureDevOps')

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'CspmMonitorAzureDevOps'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)


@pulumi.input_type
class CspmMonitorGcpOfferingNativeCloudConnectionArgs:
    def __init__(__self__, *,
                 service_account_email_address: Optional[pulumi.Input[str]] = None,
                 workload_identity_provider_id: Optional[pulumi.Input[str]] = None):
        """
        The native cloud connection configuration
        :param pulumi.Input[str] service_account_email_address: The service account email address in GCP for this offering
        :param pulumi.Input[str] workload_identity_provider_id: The GCP workload identity provider id for the offering
        """
        if service_account_email_address is not None:
            pulumi.set(__self__, "service_account_email_address", service_account_email_address)
        if workload_identity_provider_id is not None:
            pulumi.set(__self__, "workload_identity_provider_id", workload_identity_provider_id)

    @property
    @pulumi.getter(name="serviceAccountEmailAddress")
    def service_account_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The service account email address in GCP for this offering
        """
        return pulumi.get(self, "service_account_email_address")

    @service_account_email_address.setter
    def service_account_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email_address", value)

    @property
    @pulumi.getter(name="workloadIdentityProviderId")
    def workload_identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The GCP workload identity provider id for the offering
        """
        return pulumi.get(self, "workload_identity_provider_id")

    @workload_identity_provider_id.setter
    def workload_identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity_provider_id", value)


@pulumi.input_type
class CspmMonitorGcpOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str],
                 native_cloud_connection: Optional[pulumi.Input['CspmMonitorGcpOfferingNativeCloudConnectionArgs']] = None):
        """
        The CSPM monitoring for GCP offering
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'CspmMonitorGcp'.
        :param pulumi.Input['CspmMonitorGcpOfferingNativeCloudConnectionArgs'] native_cloud_connection: The native cloud connection configuration
        """
        pulumi.set(__self__, "offering_type", 'CspmMonitorGcp')
        if native_cloud_connection is not None:
            pulumi.set(__self__, "native_cloud_connection", native_cloud_connection)

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'CspmMonitorGcp'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)

    @property
    @pulumi.getter(name="nativeCloudConnection")
    def native_cloud_connection(self) -> Optional[pulumi.Input['CspmMonitorGcpOfferingNativeCloudConnectionArgs']]:
        """
        The native cloud connection configuration
        """
        return pulumi.get(self, "native_cloud_connection")

    @native_cloud_connection.setter
    def native_cloud_connection(self, value: Optional[pulumi.Input['CspmMonitorGcpOfferingNativeCloudConnectionArgs']]):
        pulumi.set(self, "native_cloud_connection", value)


@pulumi.input_type
class CspmMonitorGitLabOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str]):
        """
        The CSPM (Cloud security posture management) monitoring for gitlab offering
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'CspmMonitorGitLab'.
        """
        pulumi.set(__self__, "offering_type", 'CspmMonitorGitLab')

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'CspmMonitorGitLab'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)


@pulumi.input_type
class CspmMonitorGithubOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str]):
        """
        The CSPM monitoring for github offering
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'CspmMonitorGithub'.
        """
        pulumi.set(__self__, "offering_type", 'CspmMonitorGithub')

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'CspmMonitorGithub'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)


@pulumi.input_type
class DefenderCspmAwsOfferingCiemDiscoveryArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None):
        """
        Defender CSPM Permissions Management discovery configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for Permissions Management discovery
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for Permissions Management discovery
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)


@pulumi.input_type
class DefenderCspmAwsOfferingCiemOidcArgs:
    def __init__(__self__, *,
                 azure_active_directory_app_name: Optional[pulumi.Input[str]] = None,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None):
        """
        AWS Defender CSPM Permissions Management OIDC (open id connect) connection configurations
        :param pulumi.Input[str] azure_active_directory_app_name: the azure active directory app name used of authenticating against AWS
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for Permissions Management used for oidc connection
        """
        if azure_active_directory_app_name is not None:
            pulumi.set(__self__, "azure_active_directory_app_name", azure_active_directory_app_name)
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)

    @property
    @pulumi.getter(name="azureActiveDirectoryAppName")
    def azure_active_directory_app_name(self) -> Optional[pulumi.Input[str]]:
        """
        the azure active directory app name used of authenticating against AWS
        """
        return pulumi.get(self, "azure_active_directory_app_name")

    @azure_active_directory_app_name.setter
    def azure_active_directory_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_active_directory_app_name", value)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for Permissions Management used for oidc connection
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)


@pulumi.input_type
class DefenderCspmAwsOfferingCiemArgs:
    def __init__(__self__, *,
                 ciem_discovery: Optional[pulumi.Input['DefenderCspmAwsOfferingCiemDiscoveryArgs']] = None,
                 ciem_oidc: Optional[pulumi.Input['DefenderCspmAwsOfferingCiemOidcArgs']] = None):
        """
        Defenders CSPM Permissions Management offering configurations
        :param pulumi.Input['DefenderCspmAwsOfferingCiemDiscoveryArgs'] ciem_discovery: Defender CSPM Permissions Management discovery configuration
        :param pulumi.Input['DefenderCspmAwsOfferingCiemOidcArgs'] ciem_oidc: AWS Defender CSPM Permissions Management OIDC (open id connect) connection configurations
        """
        if ciem_discovery is not None:
            pulumi.set(__self__, "ciem_discovery", ciem_discovery)
        if ciem_oidc is not None:
            pulumi.set(__self__, "ciem_oidc", ciem_oidc)

    @property
    @pulumi.getter(name="ciemDiscovery")
    def ciem_discovery(self) -> Optional[pulumi.Input['DefenderCspmAwsOfferingCiemDiscoveryArgs']]:
        """
        Defender CSPM Permissions Management discovery configuration
        """
        return pulumi.get(self, "ciem_discovery")

    @ciem_discovery.setter
    def ciem_discovery(self, value: Optional[pulumi.Input['DefenderCspmAwsOfferingCiemDiscoveryArgs']]):
        pulumi.set(self, "ciem_discovery", value)

    @property
    @pulumi.getter(name="ciemOidc")
    def ciem_oidc(self) -> Optional[pulumi.Input['DefenderCspmAwsOfferingCiemOidcArgs']]:
        """
        AWS Defender CSPM Permissions Management OIDC (open id connect) connection configurations
        """
        return pulumi.get(self, "ciem_oidc")

    @ciem_oidc.setter
    def ciem_oidc(self, value: Optional[pulumi.Input['DefenderCspmAwsOfferingCiemOidcArgs']]):
        pulumi.set(self, "ciem_oidc", value)


@pulumi.input_type
class DefenderCspmAwsOfferingDataSensitivityDiscoveryArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender Data Sensitivity discovery configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input[bool] enabled: Is Microsoft Defender Data Sensitivity discovery enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender Data Sensitivity discovery enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderCspmAwsOfferingDatabasesDspmArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The databases DSPM configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input[bool] enabled: Is databases DSPM protection enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is databases DSPM protection enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderCspmAwsOfferingMdcContainersAgentlessDiscoveryK8sArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender container agentless discovery K8s configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input[bool] enabled: Is Microsoft Defender container agentless discovery K8s enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender container agentless discovery K8s enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderCspmAwsOfferingMdcContainersImageAssessmentArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender container image assessment configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input[bool] enabled: Is Microsoft Defender container image assessment enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender container image assessment enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderCspmAwsOfferingVmScannersArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input['VmScannersBaseConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender for CSPM offering VM scanning configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input['VmScannersBaseConfigurationArgs'] configuration: Configuration for VM scanning
        :param pulumi.Input[bool] enabled: Is VM scanning enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['VmScannersBaseConfigurationArgs']]:
        """
        Configuration for VM scanning
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['VmScannersBaseConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is VM scanning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderCspmAwsOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str],
                 ciem: Optional[pulumi.Input['DefenderCspmAwsOfferingCiemArgs']] = None,
                 data_sensitivity_discovery: Optional[pulumi.Input['DefenderCspmAwsOfferingDataSensitivityDiscoveryArgs']] = None,
                 databases_dspm: Optional[pulumi.Input['DefenderCspmAwsOfferingDatabasesDspmArgs']] = None,
                 mdc_containers_agentless_discovery_k8s: Optional[pulumi.Input['DefenderCspmAwsOfferingMdcContainersAgentlessDiscoveryK8sArgs']] = None,
                 mdc_containers_image_assessment: Optional[pulumi.Input['DefenderCspmAwsOfferingMdcContainersImageAssessmentArgs']] = None,
                 vm_scanners: Optional[pulumi.Input['DefenderCspmAwsOfferingVmScannersArgs']] = None):
        """
        The CSPM P1 for AWS offering
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'DefenderCspmAws'.
        :param pulumi.Input['DefenderCspmAwsOfferingCiemArgs'] ciem: Defenders CSPM Permissions Management offering configurations
        :param pulumi.Input['DefenderCspmAwsOfferingDataSensitivityDiscoveryArgs'] data_sensitivity_discovery: The Microsoft Defender Data Sensitivity discovery configuration
        :param pulumi.Input['DefenderCspmAwsOfferingDatabasesDspmArgs'] databases_dspm: The databases DSPM configuration
        :param pulumi.Input['DefenderCspmAwsOfferingMdcContainersAgentlessDiscoveryK8sArgs'] mdc_containers_agentless_discovery_k8s: The Microsoft Defender container agentless discovery K8s configuration
        :param pulumi.Input['DefenderCspmAwsOfferingMdcContainersImageAssessmentArgs'] mdc_containers_image_assessment: The Microsoft Defender container image assessment configuration
        :param pulumi.Input['DefenderCspmAwsOfferingVmScannersArgs'] vm_scanners: The Microsoft Defender for CSPM offering VM scanning configuration
        """
        pulumi.set(__self__, "offering_type", 'DefenderCspmAws')
        if ciem is not None:
            pulumi.set(__self__, "ciem", ciem)
        if data_sensitivity_discovery is not None:
            pulumi.set(__self__, "data_sensitivity_discovery", data_sensitivity_discovery)
        if databases_dspm is not None:
            pulumi.set(__self__, "databases_dspm", databases_dspm)
        if mdc_containers_agentless_discovery_k8s is not None:
            pulumi.set(__self__, "mdc_containers_agentless_discovery_k8s", mdc_containers_agentless_discovery_k8s)
        if mdc_containers_image_assessment is not None:
            pulumi.set(__self__, "mdc_containers_image_assessment", mdc_containers_image_assessment)
        if vm_scanners is not None:
            pulumi.set(__self__, "vm_scanners", vm_scanners)

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'DefenderCspmAws'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)

    @property
    @pulumi.getter
    def ciem(self) -> Optional[pulumi.Input['DefenderCspmAwsOfferingCiemArgs']]:
        """
        Defenders CSPM Permissions Management offering configurations
        """
        return pulumi.get(self, "ciem")

    @ciem.setter
    def ciem(self, value: Optional[pulumi.Input['DefenderCspmAwsOfferingCiemArgs']]):
        pulumi.set(self, "ciem", value)

    @property
    @pulumi.getter(name="dataSensitivityDiscovery")
    def data_sensitivity_discovery(self) -> Optional[pulumi.Input['DefenderCspmAwsOfferingDataSensitivityDiscoveryArgs']]:
        """
        The Microsoft Defender Data Sensitivity discovery configuration
        """
        return pulumi.get(self, "data_sensitivity_discovery")

    @data_sensitivity_discovery.setter
    def data_sensitivity_discovery(self, value: Optional[pulumi.Input['DefenderCspmAwsOfferingDataSensitivityDiscoveryArgs']]):
        pulumi.set(self, "data_sensitivity_discovery", value)

    @property
    @pulumi.getter(name="databasesDspm")
    def databases_dspm(self) -> Optional[pulumi.Input['DefenderCspmAwsOfferingDatabasesDspmArgs']]:
        """
        The databases DSPM configuration
        """
        return pulumi.get(self, "databases_dspm")

    @databases_dspm.setter
    def databases_dspm(self, value: Optional[pulumi.Input['DefenderCspmAwsOfferingDatabasesDspmArgs']]):
        pulumi.set(self, "databases_dspm", value)

    @property
    @pulumi.getter(name="mdcContainersAgentlessDiscoveryK8s")
    def mdc_containers_agentless_discovery_k8s(self) -> Optional[pulumi.Input['DefenderCspmAwsOfferingMdcContainersAgentlessDiscoveryK8sArgs']]:
        """
        The Microsoft Defender container agentless discovery K8s configuration
        """
        return pulumi.get(self, "mdc_containers_agentless_discovery_k8s")

    @mdc_containers_agentless_discovery_k8s.setter
    def mdc_containers_agentless_discovery_k8s(self, value: Optional[pulumi.Input['DefenderCspmAwsOfferingMdcContainersAgentlessDiscoveryK8sArgs']]):
        pulumi.set(self, "mdc_containers_agentless_discovery_k8s", value)

    @property
    @pulumi.getter(name="mdcContainersImageAssessment")
    def mdc_containers_image_assessment(self) -> Optional[pulumi.Input['DefenderCspmAwsOfferingMdcContainersImageAssessmentArgs']]:
        """
        The Microsoft Defender container image assessment configuration
        """
        return pulumi.get(self, "mdc_containers_image_assessment")

    @mdc_containers_image_assessment.setter
    def mdc_containers_image_assessment(self, value: Optional[pulumi.Input['DefenderCspmAwsOfferingMdcContainersImageAssessmentArgs']]):
        pulumi.set(self, "mdc_containers_image_assessment", value)

    @property
    @pulumi.getter(name="vmScanners")
    def vm_scanners(self) -> Optional[pulumi.Input['DefenderCspmAwsOfferingVmScannersArgs']]:
        """
        The Microsoft Defender for CSPM offering VM scanning configuration
        """
        return pulumi.get(self, "vm_scanners")

    @vm_scanners.setter
    def vm_scanners(self, value: Optional[pulumi.Input['DefenderCspmAwsOfferingVmScannersArgs']]):
        pulumi.set(self, "vm_scanners", value)


@pulumi.input_type
class DefenderCspmGcpOfferingCiemDiscoveryArgs:
    def __init__(__self__, *,
                 azure_active_directory_app_name: Optional[pulumi.Input[str]] = None,
                 service_account_email_address: Optional[pulumi.Input[str]] = None,
                 workload_identity_provider_id: Optional[pulumi.Input[str]] = None):
        """
        GCP Defenders CSPM Permissions Management OIDC (Open ID connect) connection configurations
        :param pulumi.Input[str] azure_active_directory_app_name: the azure active directory app name used of authenticating against GCP workload identity federation
        :param pulumi.Input[str] service_account_email_address: The service account email address in GCP for Permissions Management offering
        :param pulumi.Input[str] workload_identity_provider_id: The GCP workload identity provider id for Permissions Management offering
        """
        if azure_active_directory_app_name is not None:
            pulumi.set(__self__, "azure_active_directory_app_name", azure_active_directory_app_name)
        if service_account_email_address is not None:
            pulumi.set(__self__, "service_account_email_address", service_account_email_address)
        if workload_identity_provider_id is not None:
            pulumi.set(__self__, "workload_identity_provider_id", workload_identity_provider_id)

    @property
    @pulumi.getter(name="azureActiveDirectoryAppName")
    def azure_active_directory_app_name(self) -> Optional[pulumi.Input[str]]:
        """
        the azure active directory app name used of authenticating against GCP workload identity federation
        """
        return pulumi.get(self, "azure_active_directory_app_name")

    @azure_active_directory_app_name.setter
    def azure_active_directory_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_active_directory_app_name", value)

    @property
    @pulumi.getter(name="serviceAccountEmailAddress")
    def service_account_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The service account email address in GCP for Permissions Management offering
        """
        return pulumi.get(self, "service_account_email_address")

    @service_account_email_address.setter
    def service_account_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email_address", value)

    @property
    @pulumi.getter(name="workloadIdentityProviderId")
    def workload_identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The GCP workload identity provider id for Permissions Management offering
        """
        return pulumi.get(self, "workload_identity_provider_id")

    @workload_identity_provider_id.setter
    def workload_identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity_provider_id", value)


@pulumi.input_type
class DefenderCspmGcpOfferingDataSensitivityDiscoveryArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 service_account_email_address: Optional[pulumi.Input[str]] = None,
                 workload_identity_provider_id: Optional[pulumi.Input[str]] = None):
        """
        The Microsoft Defender Data Sensitivity discovery configuration
        :param pulumi.Input[bool] enabled: Is Microsoft Defender Data Sensitivity discovery enabled
        :param pulumi.Input[str] service_account_email_address: The service account email address in GCP for this feature
        :param pulumi.Input[str] workload_identity_provider_id: The workload identity provider id in GCP for this feature
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if service_account_email_address is not None:
            pulumi.set(__self__, "service_account_email_address", service_account_email_address)
        if workload_identity_provider_id is not None:
            pulumi.set(__self__, "workload_identity_provider_id", workload_identity_provider_id)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender Data Sensitivity discovery enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="serviceAccountEmailAddress")
    def service_account_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The service account email address in GCP for this feature
        """
        return pulumi.get(self, "service_account_email_address")

    @service_account_email_address.setter
    def service_account_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email_address", value)

    @property
    @pulumi.getter(name="workloadIdentityProviderId")
    def workload_identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workload identity provider id in GCP for this feature
        """
        return pulumi.get(self, "workload_identity_provider_id")

    @workload_identity_provider_id.setter
    def workload_identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity_provider_id", value)


@pulumi.input_type
class DefenderCspmGcpOfferingMdcContainersAgentlessDiscoveryK8sArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 service_account_email_address: Optional[pulumi.Input[str]] = None,
                 workload_identity_provider_id: Optional[pulumi.Input[str]] = None):
        """
        The Microsoft Defender Container agentless discovery configuration
        :param pulumi.Input[bool] enabled: Is Microsoft Defender container agentless discovery enabled
        :param pulumi.Input[str] service_account_email_address: The service account email address in GCP for this feature
        :param pulumi.Input[str] workload_identity_provider_id: The workload identity provider id in GCP for this feature
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if service_account_email_address is not None:
            pulumi.set(__self__, "service_account_email_address", service_account_email_address)
        if workload_identity_provider_id is not None:
            pulumi.set(__self__, "workload_identity_provider_id", workload_identity_provider_id)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender container agentless discovery enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="serviceAccountEmailAddress")
    def service_account_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The service account email address in GCP for this feature
        """
        return pulumi.get(self, "service_account_email_address")

    @service_account_email_address.setter
    def service_account_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email_address", value)

    @property
    @pulumi.getter(name="workloadIdentityProviderId")
    def workload_identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workload identity provider id in GCP for this feature
        """
        return pulumi.get(self, "workload_identity_provider_id")

    @workload_identity_provider_id.setter
    def workload_identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity_provider_id", value)


@pulumi.input_type
class DefenderCspmGcpOfferingMdcContainersImageAssessmentArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 service_account_email_address: Optional[pulumi.Input[str]] = None,
                 workload_identity_provider_id: Optional[pulumi.Input[str]] = None):
        """
        The Microsoft Defender Container image assessment configuration
        :param pulumi.Input[bool] enabled: Is Microsoft Defender container image assessment enabled
        :param pulumi.Input[str] service_account_email_address: The service account email address in GCP for this feature
        :param pulumi.Input[str] workload_identity_provider_id: The workload identity provider id in GCP for this feature
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if service_account_email_address is not None:
            pulumi.set(__self__, "service_account_email_address", service_account_email_address)
        if workload_identity_provider_id is not None:
            pulumi.set(__self__, "workload_identity_provider_id", workload_identity_provider_id)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender container image assessment enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="serviceAccountEmailAddress")
    def service_account_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The service account email address in GCP for this feature
        """
        return pulumi.get(self, "service_account_email_address")

    @service_account_email_address.setter
    def service_account_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email_address", value)

    @property
    @pulumi.getter(name="workloadIdentityProviderId")
    def workload_identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workload identity provider id in GCP for this feature
        """
        return pulumi.get(self, "workload_identity_provider_id")

    @workload_identity_provider_id.setter
    def workload_identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity_provider_id", value)


@pulumi.input_type
class DefenderCspmGcpOfferingVmScannersArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['VmScannersBaseConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender for CSPM VM scanning configuration
        :param pulumi.Input['VmScannersBaseConfigurationArgs'] configuration: Configuration for VM scanning
        :param pulumi.Input[bool] enabled: Is VM scanning enabled
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['VmScannersBaseConfigurationArgs']]:
        """
        Configuration for VM scanning
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['VmScannersBaseConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is VM scanning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderCspmGcpOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str],
                 ciem_discovery: Optional[pulumi.Input['DefenderCspmGcpOfferingCiemDiscoveryArgs']] = None,
                 data_sensitivity_discovery: Optional[pulumi.Input['DefenderCspmGcpOfferingDataSensitivityDiscoveryArgs']] = None,
                 mdc_containers_agentless_discovery_k8s: Optional[pulumi.Input['DefenderCspmGcpOfferingMdcContainersAgentlessDiscoveryK8sArgs']] = None,
                 mdc_containers_image_assessment: Optional[pulumi.Input['DefenderCspmGcpOfferingMdcContainersImageAssessmentArgs']] = None,
                 vm_scanners: Optional[pulumi.Input['DefenderCspmGcpOfferingVmScannersArgs']] = None):
        """
        The CSPM P1 for GCP offering
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'DefenderCspmGcp'.
        :param pulumi.Input['DefenderCspmGcpOfferingCiemDiscoveryArgs'] ciem_discovery: GCP Defenders CSPM Permissions Management OIDC (Open ID connect) connection configurations
        :param pulumi.Input['DefenderCspmGcpOfferingDataSensitivityDiscoveryArgs'] data_sensitivity_discovery: The Microsoft Defender Data Sensitivity discovery configuration
        :param pulumi.Input['DefenderCspmGcpOfferingMdcContainersAgentlessDiscoveryK8sArgs'] mdc_containers_agentless_discovery_k8s: The Microsoft Defender Container agentless discovery configuration
        :param pulumi.Input['DefenderCspmGcpOfferingMdcContainersImageAssessmentArgs'] mdc_containers_image_assessment: The Microsoft Defender Container image assessment configuration
        :param pulumi.Input['DefenderCspmGcpOfferingVmScannersArgs'] vm_scanners: The Microsoft Defender for CSPM VM scanning configuration
        """
        pulumi.set(__self__, "offering_type", 'DefenderCspmGcp')
        if ciem_discovery is not None:
            pulumi.set(__self__, "ciem_discovery", ciem_discovery)
        if data_sensitivity_discovery is not None:
            pulumi.set(__self__, "data_sensitivity_discovery", data_sensitivity_discovery)
        if mdc_containers_agentless_discovery_k8s is not None:
            pulumi.set(__self__, "mdc_containers_agentless_discovery_k8s", mdc_containers_agentless_discovery_k8s)
        if mdc_containers_image_assessment is not None:
            pulumi.set(__self__, "mdc_containers_image_assessment", mdc_containers_image_assessment)
        if vm_scanners is not None:
            pulumi.set(__self__, "vm_scanners", vm_scanners)

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'DefenderCspmGcp'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)

    @property
    @pulumi.getter(name="ciemDiscovery")
    def ciem_discovery(self) -> Optional[pulumi.Input['DefenderCspmGcpOfferingCiemDiscoveryArgs']]:
        """
        GCP Defenders CSPM Permissions Management OIDC (Open ID connect) connection configurations
        """
        return pulumi.get(self, "ciem_discovery")

    @ciem_discovery.setter
    def ciem_discovery(self, value: Optional[pulumi.Input['DefenderCspmGcpOfferingCiemDiscoveryArgs']]):
        pulumi.set(self, "ciem_discovery", value)

    @property
    @pulumi.getter(name="dataSensitivityDiscovery")
    def data_sensitivity_discovery(self) -> Optional[pulumi.Input['DefenderCspmGcpOfferingDataSensitivityDiscoveryArgs']]:
        """
        The Microsoft Defender Data Sensitivity discovery configuration
        """
        return pulumi.get(self, "data_sensitivity_discovery")

    @data_sensitivity_discovery.setter
    def data_sensitivity_discovery(self, value: Optional[pulumi.Input['DefenderCspmGcpOfferingDataSensitivityDiscoveryArgs']]):
        pulumi.set(self, "data_sensitivity_discovery", value)

    @property
    @pulumi.getter(name="mdcContainersAgentlessDiscoveryK8s")
    def mdc_containers_agentless_discovery_k8s(self) -> Optional[pulumi.Input['DefenderCspmGcpOfferingMdcContainersAgentlessDiscoveryK8sArgs']]:
        """
        The Microsoft Defender Container agentless discovery configuration
        """
        return pulumi.get(self, "mdc_containers_agentless_discovery_k8s")

    @mdc_containers_agentless_discovery_k8s.setter
    def mdc_containers_agentless_discovery_k8s(self, value: Optional[pulumi.Input['DefenderCspmGcpOfferingMdcContainersAgentlessDiscoveryK8sArgs']]):
        pulumi.set(self, "mdc_containers_agentless_discovery_k8s", value)

    @property
    @pulumi.getter(name="mdcContainersImageAssessment")
    def mdc_containers_image_assessment(self) -> Optional[pulumi.Input['DefenderCspmGcpOfferingMdcContainersImageAssessmentArgs']]:
        """
        The Microsoft Defender Container image assessment configuration
        """
        return pulumi.get(self, "mdc_containers_image_assessment")

    @mdc_containers_image_assessment.setter
    def mdc_containers_image_assessment(self, value: Optional[pulumi.Input['DefenderCspmGcpOfferingMdcContainersImageAssessmentArgs']]):
        pulumi.set(self, "mdc_containers_image_assessment", value)

    @property
    @pulumi.getter(name="vmScanners")
    def vm_scanners(self) -> Optional[pulumi.Input['DefenderCspmGcpOfferingVmScannersArgs']]:
        """
        The Microsoft Defender for CSPM VM scanning configuration
        """
        return pulumi.get(self, "vm_scanners")

    @vm_scanners.setter
    def vm_scanners(self, value: Optional[pulumi.Input['DefenderCspmGcpOfferingVmScannersArgs']]):
        pulumi.set(self, "vm_scanners", value)


@pulumi.input_type
class DefenderFoDatabasesAwsOfferingArcAutoProvisioningArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input['ArcAutoProvisioningConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The ARC autoprovisioning configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input['ArcAutoProvisioningConfigurationArgs'] configuration: Configuration for servers Arc auto provisioning for a given environment
        :param pulumi.Input[bool] enabled: Is arc auto provisioning enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['ArcAutoProvisioningConfigurationArgs']]:
        """
        Configuration for servers Arc auto provisioning for a given environment
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['ArcAutoProvisioningConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is arc auto provisioning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderFoDatabasesAwsOfferingDatabasesDspmArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The databases data security posture management (DSPM) configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input[bool] enabled: Is databases data security posture management (DSPM) protection enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is databases data security posture management (DSPM) protection enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderFoDatabasesAwsOfferingRdsArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The RDS configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input[bool] enabled: Is RDS protection enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is RDS protection enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderFoDatabasesAwsOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str],
                 arc_auto_provisioning: Optional[pulumi.Input['DefenderFoDatabasesAwsOfferingArcAutoProvisioningArgs']] = None,
                 databases_dspm: Optional[pulumi.Input['DefenderFoDatabasesAwsOfferingDatabasesDspmArgs']] = None,
                 rds: Optional[pulumi.Input['DefenderFoDatabasesAwsOfferingRdsArgs']] = None):
        """
        The Defender for Databases AWS offering
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'DefenderForDatabasesAws'.
        :param pulumi.Input['DefenderFoDatabasesAwsOfferingArcAutoProvisioningArgs'] arc_auto_provisioning: The ARC autoprovisioning configuration
        :param pulumi.Input['DefenderFoDatabasesAwsOfferingDatabasesDspmArgs'] databases_dspm: The databases data security posture management (DSPM) configuration
        :param pulumi.Input['DefenderFoDatabasesAwsOfferingRdsArgs'] rds: The RDS configuration
        """
        pulumi.set(__self__, "offering_type", 'DefenderForDatabasesAws')
        if arc_auto_provisioning is not None:
            pulumi.set(__self__, "arc_auto_provisioning", arc_auto_provisioning)
        if databases_dspm is not None:
            pulumi.set(__self__, "databases_dspm", databases_dspm)
        if rds is not None:
            pulumi.set(__self__, "rds", rds)

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'DefenderForDatabasesAws'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)

    @property
    @pulumi.getter(name="arcAutoProvisioning")
    def arc_auto_provisioning(self) -> Optional[pulumi.Input['DefenderFoDatabasesAwsOfferingArcAutoProvisioningArgs']]:
        """
        The ARC autoprovisioning configuration
        """
        return pulumi.get(self, "arc_auto_provisioning")

    @arc_auto_provisioning.setter
    def arc_auto_provisioning(self, value: Optional[pulumi.Input['DefenderFoDatabasesAwsOfferingArcAutoProvisioningArgs']]):
        pulumi.set(self, "arc_auto_provisioning", value)

    @property
    @pulumi.getter(name="databasesDspm")
    def databases_dspm(self) -> Optional[pulumi.Input['DefenderFoDatabasesAwsOfferingDatabasesDspmArgs']]:
        """
        The databases data security posture management (DSPM) configuration
        """
        return pulumi.get(self, "databases_dspm")

    @databases_dspm.setter
    def databases_dspm(self, value: Optional[pulumi.Input['DefenderFoDatabasesAwsOfferingDatabasesDspmArgs']]):
        pulumi.set(self, "databases_dspm", value)

    @property
    @pulumi.getter
    def rds(self) -> Optional[pulumi.Input['DefenderFoDatabasesAwsOfferingRdsArgs']]:
        """
        The RDS configuration
        """
        return pulumi.get(self, "rds")

    @rds.setter
    def rds(self, value: Optional[pulumi.Input['DefenderFoDatabasesAwsOfferingRdsArgs']]):
        pulumi.set(self, "rds", value)


@pulumi.input_type
class DefenderForContainersAwsOfferingCloudWatchToKinesisArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None):
        """
        The cloudwatch to kinesis connection configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS used by CloudWatch to transfer data into Kinesis
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS used by CloudWatch to transfer data into Kinesis
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)


@pulumi.input_type
class DefenderForContainersAwsOfferingKinesisToS3Args:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None):
        """
        The kinesis to s3 connection configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS used by Kinesis to transfer data into S3
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS used by Kinesis to transfer data into S3
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)


@pulumi.input_type
class DefenderForContainersAwsOfferingKubernetesDataCollectionArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None):
        """
        The kubernetes data collection connection configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature used for reading data
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature used for reading data
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)


@pulumi.input_type
class DefenderForContainersAwsOfferingKubernetesServiceArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None):
        """
        The kubernetes service connection configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature used for provisioning resources
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature used for provisioning resources
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)


@pulumi.input_type
class DefenderForContainersAwsOfferingMdcContainersAgentlessDiscoveryK8sArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender container agentless discovery K8s configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input[bool] enabled: Is Microsoft Defender container agentless discovery K8s enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender container agentless discovery K8s enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForContainersAwsOfferingMdcContainersImageAssessmentArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender container image assessment configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input[bool] enabled: Is Microsoft Defender container image assessment enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender container image assessment enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForContainersAwsOfferingVmScannersArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input['VmScannersBaseConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender for Container K8s VM host scanning configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input['VmScannersBaseConfigurationArgs'] configuration: Configuration for VM scanning
        :param pulumi.Input[bool] enabled: Is VM scanning enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['VmScannersBaseConfigurationArgs']]:
        """
        Configuration for VM scanning
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['VmScannersBaseConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is VM scanning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForContainersAwsOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str],
                 cloud_watch_to_kinesis: Optional[pulumi.Input['DefenderForContainersAwsOfferingCloudWatchToKinesisArgs']] = None,
                 data_collection_external_id: Optional[pulumi.Input[str]] = None,
                 enable_audit_logs_auto_provisioning: Optional[pulumi.Input[bool]] = None,
                 enable_defender_agent_auto_provisioning: Optional[pulumi.Input[bool]] = None,
                 enable_policy_agent_auto_provisioning: Optional[pulumi.Input[bool]] = None,
                 kinesis_to_s3: Optional[pulumi.Input['DefenderForContainersAwsOfferingKinesisToS3Args']] = None,
                 kube_audit_retention_time: Optional[pulumi.Input[float]] = None,
                 kubernetes_data_collection: Optional[pulumi.Input['DefenderForContainersAwsOfferingKubernetesDataCollectionArgs']] = None,
                 kubernetes_service: Optional[pulumi.Input['DefenderForContainersAwsOfferingKubernetesServiceArgs']] = None,
                 mdc_containers_agentless_discovery_k8s: Optional[pulumi.Input['DefenderForContainersAwsOfferingMdcContainersAgentlessDiscoveryK8sArgs']] = None,
                 mdc_containers_image_assessment: Optional[pulumi.Input['DefenderForContainersAwsOfferingMdcContainersImageAssessmentArgs']] = None,
                 vm_scanners: Optional[pulumi.Input['DefenderForContainersAwsOfferingVmScannersArgs']] = None):
        """
        The Defender for Containers AWS offering
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'DefenderForContainersAws'.
        :param pulumi.Input['DefenderForContainersAwsOfferingCloudWatchToKinesisArgs'] cloud_watch_to_kinesis: The cloudwatch to kinesis connection configuration
        :param pulumi.Input[str] data_collection_external_id: The externalId used by the data reader to prevent the confused deputy attack
        :param pulumi.Input[bool] enable_audit_logs_auto_provisioning: Is audit logs data collection enabled
        :param pulumi.Input[bool] enable_defender_agent_auto_provisioning: Is Microsoft Defender for Cloud Kubernetes agent auto provisioning enabled
        :param pulumi.Input[bool] enable_policy_agent_auto_provisioning: Is Policy Kubernetes agent auto provisioning enabled
        :param pulumi.Input['DefenderForContainersAwsOfferingKinesisToS3Args'] kinesis_to_s3: The kinesis to s3 connection configuration
        :param pulumi.Input[float] kube_audit_retention_time: The retention time in days of kube audit logs set on the CloudWatch log group
        :param pulumi.Input['DefenderForContainersAwsOfferingKubernetesDataCollectionArgs'] kubernetes_data_collection: The kubernetes data collection connection configuration
        :param pulumi.Input['DefenderForContainersAwsOfferingKubernetesServiceArgs'] kubernetes_service: The kubernetes service connection configuration
        :param pulumi.Input['DefenderForContainersAwsOfferingMdcContainersAgentlessDiscoveryK8sArgs'] mdc_containers_agentless_discovery_k8s: The Microsoft Defender container agentless discovery K8s configuration
        :param pulumi.Input['DefenderForContainersAwsOfferingMdcContainersImageAssessmentArgs'] mdc_containers_image_assessment: The Microsoft Defender container image assessment configuration
        :param pulumi.Input['DefenderForContainersAwsOfferingVmScannersArgs'] vm_scanners: The Microsoft Defender for Container K8s VM host scanning configuration
        """
        pulumi.set(__self__, "offering_type", 'DefenderForContainersAws')
        if cloud_watch_to_kinesis is not None:
            pulumi.set(__self__, "cloud_watch_to_kinesis", cloud_watch_to_kinesis)
        if data_collection_external_id is not None:
            pulumi.set(__self__, "data_collection_external_id", data_collection_external_id)
        if enable_audit_logs_auto_provisioning is not None:
            pulumi.set(__self__, "enable_audit_logs_auto_provisioning", enable_audit_logs_auto_provisioning)
        if enable_defender_agent_auto_provisioning is not None:
            pulumi.set(__self__, "enable_defender_agent_auto_provisioning", enable_defender_agent_auto_provisioning)
        if enable_policy_agent_auto_provisioning is not None:
            pulumi.set(__self__, "enable_policy_agent_auto_provisioning", enable_policy_agent_auto_provisioning)
        if kinesis_to_s3 is not None:
            pulumi.set(__self__, "kinesis_to_s3", kinesis_to_s3)
        if kube_audit_retention_time is not None:
            pulumi.set(__self__, "kube_audit_retention_time", kube_audit_retention_time)
        if kubernetes_data_collection is not None:
            pulumi.set(__self__, "kubernetes_data_collection", kubernetes_data_collection)
        if kubernetes_service is not None:
            pulumi.set(__self__, "kubernetes_service", kubernetes_service)
        if mdc_containers_agentless_discovery_k8s is not None:
            pulumi.set(__self__, "mdc_containers_agentless_discovery_k8s", mdc_containers_agentless_discovery_k8s)
        if mdc_containers_image_assessment is not None:
            pulumi.set(__self__, "mdc_containers_image_assessment", mdc_containers_image_assessment)
        if vm_scanners is not None:
            pulumi.set(__self__, "vm_scanners", vm_scanners)

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'DefenderForContainersAws'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)

    @property
    @pulumi.getter(name="cloudWatchToKinesis")
    def cloud_watch_to_kinesis(self) -> Optional[pulumi.Input['DefenderForContainersAwsOfferingCloudWatchToKinesisArgs']]:
        """
        The cloudwatch to kinesis connection configuration
        """
        return pulumi.get(self, "cloud_watch_to_kinesis")

    @cloud_watch_to_kinesis.setter
    def cloud_watch_to_kinesis(self, value: Optional[pulumi.Input['DefenderForContainersAwsOfferingCloudWatchToKinesisArgs']]):
        pulumi.set(self, "cloud_watch_to_kinesis", value)

    @property
    @pulumi.getter(name="dataCollectionExternalId")
    def data_collection_external_id(self) -> Optional[pulumi.Input[str]]:
        """
        The externalId used by the data reader to prevent the confused deputy attack
        """
        return pulumi.get(self, "data_collection_external_id")

    @data_collection_external_id.setter
    def data_collection_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_collection_external_id", value)

    @property
    @pulumi.getter(name="enableAuditLogsAutoProvisioning")
    def enable_audit_logs_auto_provisioning(self) -> Optional[pulumi.Input[bool]]:
        """
        Is audit logs data collection enabled
        """
        return pulumi.get(self, "enable_audit_logs_auto_provisioning")

    @enable_audit_logs_auto_provisioning.setter
    def enable_audit_logs_auto_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_audit_logs_auto_provisioning", value)

    @property
    @pulumi.getter(name="enableDefenderAgentAutoProvisioning")
    def enable_defender_agent_auto_provisioning(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender for Cloud Kubernetes agent auto provisioning enabled
        """
        return pulumi.get(self, "enable_defender_agent_auto_provisioning")

    @enable_defender_agent_auto_provisioning.setter
    def enable_defender_agent_auto_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_defender_agent_auto_provisioning", value)

    @property
    @pulumi.getter(name="enablePolicyAgentAutoProvisioning")
    def enable_policy_agent_auto_provisioning(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Policy Kubernetes agent auto provisioning enabled
        """
        return pulumi.get(self, "enable_policy_agent_auto_provisioning")

    @enable_policy_agent_auto_provisioning.setter
    def enable_policy_agent_auto_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_policy_agent_auto_provisioning", value)

    @property
    @pulumi.getter(name="kinesisToS3")
    def kinesis_to_s3(self) -> Optional[pulumi.Input['DefenderForContainersAwsOfferingKinesisToS3Args']]:
        """
        The kinesis to s3 connection configuration
        """
        return pulumi.get(self, "kinesis_to_s3")

    @kinesis_to_s3.setter
    def kinesis_to_s3(self, value: Optional[pulumi.Input['DefenderForContainersAwsOfferingKinesisToS3Args']]):
        pulumi.set(self, "kinesis_to_s3", value)

    @property
    @pulumi.getter(name="kubeAuditRetentionTime")
    def kube_audit_retention_time(self) -> Optional[pulumi.Input[float]]:
        """
        The retention time in days of kube audit logs set on the CloudWatch log group
        """
        return pulumi.get(self, "kube_audit_retention_time")

    @kube_audit_retention_time.setter
    def kube_audit_retention_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "kube_audit_retention_time", value)

    @property
    @pulumi.getter(name="kubernetesDataCollection")
    def kubernetes_data_collection(self) -> Optional[pulumi.Input['DefenderForContainersAwsOfferingKubernetesDataCollectionArgs']]:
        """
        The kubernetes data collection connection configuration
        """
        return pulumi.get(self, "kubernetes_data_collection")

    @kubernetes_data_collection.setter
    def kubernetes_data_collection(self, value: Optional[pulumi.Input['DefenderForContainersAwsOfferingKubernetesDataCollectionArgs']]):
        pulumi.set(self, "kubernetes_data_collection", value)

    @property
    @pulumi.getter(name="kubernetesService")
    def kubernetes_service(self) -> Optional[pulumi.Input['DefenderForContainersAwsOfferingKubernetesServiceArgs']]:
        """
        The kubernetes service connection configuration
        """
        return pulumi.get(self, "kubernetes_service")

    @kubernetes_service.setter
    def kubernetes_service(self, value: Optional[pulumi.Input['DefenderForContainersAwsOfferingKubernetesServiceArgs']]):
        pulumi.set(self, "kubernetes_service", value)

    @property
    @pulumi.getter(name="mdcContainersAgentlessDiscoveryK8s")
    def mdc_containers_agentless_discovery_k8s(self) -> Optional[pulumi.Input['DefenderForContainersAwsOfferingMdcContainersAgentlessDiscoveryK8sArgs']]:
        """
        The Microsoft Defender container agentless discovery K8s configuration
        """
        return pulumi.get(self, "mdc_containers_agentless_discovery_k8s")

    @mdc_containers_agentless_discovery_k8s.setter
    def mdc_containers_agentless_discovery_k8s(self, value: Optional[pulumi.Input['DefenderForContainersAwsOfferingMdcContainersAgentlessDiscoveryK8sArgs']]):
        pulumi.set(self, "mdc_containers_agentless_discovery_k8s", value)

    @property
    @pulumi.getter(name="mdcContainersImageAssessment")
    def mdc_containers_image_assessment(self) -> Optional[pulumi.Input['DefenderForContainersAwsOfferingMdcContainersImageAssessmentArgs']]:
        """
        The Microsoft Defender container image assessment configuration
        """
        return pulumi.get(self, "mdc_containers_image_assessment")

    @mdc_containers_image_assessment.setter
    def mdc_containers_image_assessment(self, value: Optional[pulumi.Input['DefenderForContainersAwsOfferingMdcContainersImageAssessmentArgs']]):
        pulumi.set(self, "mdc_containers_image_assessment", value)

    @property
    @pulumi.getter(name="vmScanners")
    def vm_scanners(self) -> Optional[pulumi.Input['DefenderForContainersAwsOfferingVmScannersArgs']]:
        """
        The Microsoft Defender for Container K8s VM host scanning configuration
        """
        return pulumi.get(self, "vm_scanners")

    @vm_scanners.setter
    def vm_scanners(self, value: Optional[pulumi.Input['DefenderForContainersAwsOfferingVmScannersArgs']]):
        pulumi.set(self, "vm_scanners", value)


@pulumi.input_type
class DefenderForContainersGcpOfferingDataPipelineNativeCloudConnectionArgs:
    def __init__(__self__, *,
                 service_account_email_address: Optional[pulumi.Input[str]] = None,
                 workload_identity_provider_id: Optional[pulumi.Input[str]] = None):
        """
        The native cloud connection configuration
        :param pulumi.Input[str] service_account_email_address: The data collection service account email address in GCP for this offering
        :param pulumi.Input[str] workload_identity_provider_id: The data collection GCP workload identity provider id for this offering
        """
        if service_account_email_address is not None:
            pulumi.set(__self__, "service_account_email_address", service_account_email_address)
        if workload_identity_provider_id is not None:
            pulumi.set(__self__, "workload_identity_provider_id", workload_identity_provider_id)

    @property
    @pulumi.getter(name="serviceAccountEmailAddress")
    def service_account_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The data collection service account email address in GCP for this offering
        """
        return pulumi.get(self, "service_account_email_address")

    @service_account_email_address.setter
    def service_account_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email_address", value)

    @property
    @pulumi.getter(name="workloadIdentityProviderId")
    def workload_identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The data collection GCP workload identity provider id for this offering
        """
        return pulumi.get(self, "workload_identity_provider_id")

    @workload_identity_provider_id.setter
    def workload_identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity_provider_id", value)


@pulumi.input_type
class DefenderForContainersGcpOfferingMdcContainersAgentlessDiscoveryK8sArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 service_account_email_address: Optional[pulumi.Input[str]] = None,
                 workload_identity_provider_id: Optional[pulumi.Input[str]] = None):
        """
        The Microsoft Defender Container agentless discovery configuration
        :param pulumi.Input[bool] enabled: Is Microsoft Defender container agentless discovery enabled
        :param pulumi.Input[str] service_account_email_address: The service account email address in GCP for this feature
        :param pulumi.Input[str] workload_identity_provider_id: The workload identity provider id in GCP for this feature
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if service_account_email_address is not None:
            pulumi.set(__self__, "service_account_email_address", service_account_email_address)
        if workload_identity_provider_id is not None:
            pulumi.set(__self__, "workload_identity_provider_id", workload_identity_provider_id)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender container agentless discovery enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="serviceAccountEmailAddress")
    def service_account_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The service account email address in GCP for this feature
        """
        return pulumi.get(self, "service_account_email_address")

    @service_account_email_address.setter
    def service_account_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email_address", value)

    @property
    @pulumi.getter(name="workloadIdentityProviderId")
    def workload_identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workload identity provider id in GCP for this feature
        """
        return pulumi.get(self, "workload_identity_provider_id")

    @workload_identity_provider_id.setter
    def workload_identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity_provider_id", value)


@pulumi.input_type
class DefenderForContainersGcpOfferingMdcContainersImageAssessmentArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 service_account_email_address: Optional[pulumi.Input[str]] = None,
                 workload_identity_provider_id: Optional[pulumi.Input[str]] = None):
        """
        The Microsoft Defender Container image assessment configuration
        :param pulumi.Input[bool] enabled: Is Microsoft Defender container image assessment enabled
        :param pulumi.Input[str] service_account_email_address: The service account email address in GCP for this feature
        :param pulumi.Input[str] workload_identity_provider_id: The workload identity provider id in GCP for this feature
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if service_account_email_address is not None:
            pulumi.set(__self__, "service_account_email_address", service_account_email_address)
        if workload_identity_provider_id is not None:
            pulumi.set(__self__, "workload_identity_provider_id", workload_identity_provider_id)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender container image assessment enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="serviceAccountEmailAddress")
    def service_account_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The service account email address in GCP for this feature
        """
        return pulumi.get(self, "service_account_email_address")

    @service_account_email_address.setter
    def service_account_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email_address", value)

    @property
    @pulumi.getter(name="workloadIdentityProviderId")
    def workload_identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workload identity provider id in GCP for this feature
        """
        return pulumi.get(self, "workload_identity_provider_id")

    @workload_identity_provider_id.setter
    def workload_identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity_provider_id", value)


@pulumi.input_type
class DefenderForContainersGcpOfferingNativeCloudConnectionArgs:
    def __init__(__self__, *,
                 service_account_email_address: Optional[pulumi.Input[str]] = None,
                 workload_identity_provider_id: Optional[pulumi.Input[str]] = None):
        """
        The native cloud connection configuration
        :param pulumi.Input[str] service_account_email_address: The service account email address in GCP for this offering
        :param pulumi.Input[str] workload_identity_provider_id: The GCP workload identity provider id for this offering
        """
        if service_account_email_address is not None:
            pulumi.set(__self__, "service_account_email_address", service_account_email_address)
        if workload_identity_provider_id is not None:
            pulumi.set(__self__, "workload_identity_provider_id", workload_identity_provider_id)

    @property
    @pulumi.getter(name="serviceAccountEmailAddress")
    def service_account_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The service account email address in GCP for this offering
        """
        return pulumi.get(self, "service_account_email_address")

    @service_account_email_address.setter
    def service_account_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email_address", value)

    @property
    @pulumi.getter(name="workloadIdentityProviderId")
    def workload_identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The GCP workload identity provider id for this offering
        """
        return pulumi.get(self, "workload_identity_provider_id")

    @workload_identity_provider_id.setter
    def workload_identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity_provider_id", value)


@pulumi.input_type
class DefenderForContainersGcpOfferingVmScannersArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['VmScannersBaseConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender for Container K8s VM host scanning configuration
        :param pulumi.Input['VmScannersBaseConfigurationArgs'] configuration: Configuration for VM scanning
        :param pulumi.Input[bool] enabled: Is VM scanning enabled
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['VmScannersBaseConfigurationArgs']]:
        """
        Configuration for VM scanning
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['VmScannersBaseConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is VM scanning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForContainersGcpOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str],
                 data_pipeline_native_cloud_connection: Optional[pulumi.Input['DefenderForContainersGcpOfferingDataPipelineNativeCloudConnectionArgs']] = None,
                 enable_audit_logs_auto_provisioning: Optional[pulumi.Input[bool]] = None,
                 enable_defender_agent_auto_provisioning: Optional[pulumi.Input[bool]] = None,
                 enable_policy_agent_auto_provisioning: Optional[pulumi.Input[bool]] = None,
                 mdc_containers_agentless_discovery_k8s: Optional[pulumi.Input['DefenderForContainersGcpOfferingMdcContainersAgentlessDiscoveryK8sArgs']] = None,
                 mdc_containers_image_assessment: Optional[pulumi.Input['DefenderForContainersGcpOfferingMdcContainersImageAssessmentArgs']] = None,
                 native_cloud_connection: Optional[pulumi.Input['DefenderForContainersGcpOfferingNativeCloudConnectionArgs']] = None,
                 vm_scanners: Optional[pulumi.Input['DefenderForContainersGcpOfferingVmScannersArgs']] = None):
        """
        The containers GCP offering
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'DefenderForContainersGcp'.
        :param pulumi.Input['DefenderForContainersGcpOfferingDataPipelineNativeCloudConnectionArgs'] data_pipeline_native_cloud_connection: The native cloud connection configuration
        :param pulumi.Input[bool] enable_audit_logs_auto_provisioning: Is audit logs data collection enabled
        :param pulumi.Input[bool] enable_defender_agent_auto_provisioning: Is Microsoft Defender for Cloud Kubernetes agent auto provisioning enabled
        :param pulumi.Input[bool] enable_policy_agent_auto_provisioning: Is Policy Kubernetes agent auto provisioning enabled
        :param pulumi.Input['DefenderForContainersGcpOfferingMdcContainersAgentlessDiscoveryK8sArgs'] mdc_containers_agentless_discovery_k8s: The Microsoft Defender Container agentless discovery configuration
        :param pulumi.Input['DefenderForContainersGcpOfferingMdcContainersImageAssessmentArgs'] mdc_containers_image_assessment: The Microsoft Defender Container image assessment configuration
        :param pulumi.Input['DefenderForContainersGcpOfferingNativeCloudConnectionArgs'] native_cloud_connection: The native cloud connection configuration
        :param pulumi.Input['DefenderForContainersGcpOfferingVmScannersArgs'] vm_scanners: The Microsoft Defender for Container K8s VM host scanning configuration
        """
        pulumi.set(__self__, "offering_type", 'DefenderForContainersGcp')
        if data_pipeline_native_cloud_connection is not None:
            pulumi.set(__self__, "data_pipeline_native_cloud_connection", data_pipeline_native_cloud_connection)
        if enable_audit_logs_auto_provisioning is not None:
            pulumi.set(__self__, "enable_audit_logs_auto_provisioning", enable_audit_logs_auto_provisioning)
        if enable_defender_agent_auto_provisioning is not None:
            pulumi.set(__self__, "enable_defender_agent_auto_provisioning", enable_defender_agent_auto_provisioning)
        if enable_policy_agent_auto_provisioning is not None:
            pulumi.set(__self__, "enable_policy_agent_auto_provisioning", enable_policy_agent_auto_provisioning)
        if mdc_containers_agentless_discovery_k8s is not None:
            pulumi.set(__self__, "mdc_containers_agentless_discovery_k8s", mdc_containers_agentless_discovery_k8s)
        if mdc_containers_image_assessment is not None:
            pulumi.set(__self__, "mdc_containers_image_assessment", mdc_containers_image_assessment)
        if native_cloud_connection is not None:
            pulumi.set(__self__, "native_cloud_connection", native_cloud_connection)
        if vm_scanners is not None:
            pulumi.set(__self__, "vm_scanners", vm_scanners)

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'DefenderForContainersGcp'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)

    @property
    @pulumi.getter(name="dataPipelineNativeCloudConnection")
    def data_pipeline_native_cloud_connection(self) -> Optional[pulumi.Input['DefenderForContainersGcpOfferingDataPipelineNativeCloudConnectionArgs']]:
        """
        The native cloud connection configuration
        """
        return pulumi.get(self, "data_pipeline_native_cloud_connection")

    @data_pipeline_native_cloud_connection.setter
    def data_pipeline_native_cloud_connection(self, value: Optional[pulumi.Input['DefenderForContainersGcpOfferingDataPipelineNativeCloudConnectionArgs']]):
        pulumi.set(self, "data_pipeline_native_cloud_connection", value)

    @property
    @pulumi.getter(name="enableAuditLogsAutoProvisioning")
    def enable_audit_logs_auto_provisioning(self) -> Optional[pulumi.Input[bool]]:
        """
        Is audit logs data collection enabled
        """
        return pulumi.get(self, "enable_audit_logs_auto_provisioning")

    @enable_audit_logs_auto_provisioning.setter
    def enable_audit_logs_auto_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_audit_logs_auto_provisioning", value)

    @property
    @pulumi.getter(name="enableDefenderAgentAutoProvisioning")
    def enable_defender_agent_auto_provisioning(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender for Cloud Kubernetes agent auto provisioning enabled
        """
        return pulumi.get(self, "enable_defender_agent_auto_provisioning")

    @enable_defender_agent_auto_provisioning.setter
    def enable_defender_agent_auto_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_defender_agent_auto_provisioning", value)

    @property
    @pulumi.getter(name="enablePolicyAgentAutoProvisioning")
    def enable_policy_agent_auto_provisioning(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Policy Kubernetes agent auto provisioning enabled
        """
        return pulumi.get(self, "enable_policy_agent_auto_provisioning")

    @enable_policy_agent_auto_provisioning.setter
    def enable_policy_agent_auto_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_policy_agent_auto_provisioning", value)

    @property
    @pulumi.getter(name="mdcContainersAgentlessDiscoveryK8s")
    def mdc_containers_agentless_discovery_k8s(self) -> Optional[pulumi.Input['DefenderForContainersGcpOfferingMdcContainersAgentlessDiscoveryK8sArgs']]:
        """
        The Microsoft Defender Container agentless discovery configuration
        """
        return pulumi.get(self, "mdc_containers_agentless_discovery_k8s")

    @mdc_containers_agentless_discovery_k8s.setter
    def mdc_containers_agentless_discovery_k8s(self, value: Optional[pulumi.Input['DefenderForContainersGcpOfferingMdcContainersAgentlessDiscoveryK8sArgs']]):
        pulumi.set(self, "mdc_containers_agentless_discovery_k8s", value)

    @property
    @pulumi.getter(name="mdcContainersImageAssessment")
    def mdc_containers_image_assessment(self) -> Optional[pulumi.Input['DefenderForContainersGcpOfferingMdcContainersImageAssessmentArgs']]:
        """
        The Microsoft Defender Container image assessment configuration
        """
        return pulumi.get(self, "mdc_containers_image_assessment")

    @mdc_containers_image_assessment.setter
    def mdc_containers_image_assessment(self, value: Optional[pulumi.Input['DefenderForContainersGcpOfferingMdcContainersImageAssessmentArgs']]):
        pulumi.set(self, "mdc_containers_image_assessment", value)

    @property
    @pulumi.getter(name="nativeCloudConnection")
    def native_cloud_connection(self) -> Optional[pulumi.Input['DefenderForContainersGcpOfferingNativeCloudConnectionArgs']]:
        """
        The native cloud connection configuration
        """
        return pulumi.get(self, "native_cloud_connection")

    @native_cloud_connection.setter
    def native_cloud_connection(self, value: Optional[pulumi.Input['DefenderForContainersGcpOfferingNativeCloudConnectionArgs']]):
        pulumi.set(self, "native_cloud_connection", value)

    @property
    @pulumi.getter(name="vmScanners")
    def vm_scanners(self) -> Optional[pulumi.Input['DefenderForContainersGcpOfferingVmScannersArgs']]:
        """
        The Microsoft Defender for Container K8s VM host scanning configuration
        """
        return pulumi.get(self, "vm_scanners")

    @vm_scanners.setter
    def vm_scanners(self, value: Optional[pulumi.Input['DefenderForContainersGcpOfferingVmScannersArgs']]):
        pulumi.set(self, "vm_scanners", value)


@pulumi.input_type
class DefenderForDatabasesGcpOfferingArcAutoProvisioningArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['ArcAutoProvisioningConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The ARC autoprovisioning configuration
        :param pulumi.Input['ArcAutoProvisioningConfigurationArgs'] configuration: Configuration for servers Arc auto provisioning for a given environment
        :param pulumi.Input[bool] enabled: Is arc auto provisioning enabled
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['ArcAutoProvisioningConfigurationArgs']]:
        """
        Configuration for servers Arc auto provisioning for a given environment
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['ArcAutoProvisioningConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is arc auto provisioning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioningArgs:
    def __init__(__self__, *,
                 service_account_email_address: Optional[pulumi.Input[str]] = None,
                 workload_identity_provider_id: Optional[pulumi.Input[str]] = None):
        """
        The native cloud connection configuration
        :param pulumi.Input[str] service_account_email_address: The service account email address in GCP for this offering
        :param pulumi.Input[str] workload_identity_provider_id: The GCP workload identity provider id for this offering
        """
        if service_account_email_address is not None:
            pulumi.set(__self__, "service_account_email_address", service_account_email_address)
        if workload_identity_provider_id is not None:
            pulumi.set(__self__, "workload_identity_provider_id", workload_identity_provider_id)

    @property
    @pulumi.getter(name="serviceAccountEmailAddress")
    def service_account_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The service account email address in GCP for this offering
        """
        return pulumi.get(self, "service_account_email_address")

    @service_account_email_address.setter
    def service_account_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email_address", value)

    @property
    @pulumi.getter(name="workloadIdentityProviderId")
    def workload_identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The GCP workload identity provider id for this offering
        """
        return pulumi.get(self, "workload_identity_provider_id")

    @workload_identity_provider_id.setter
    def workload_identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity_provider_id", value)


@pulumi.input_type
class DefenderForDatabasesGcpOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str],
                 arc_auto_provisioning: Optional[pulumi.Input['DefenderForDatabasesGcpOfferingArcAutoProvisioningArgs']] = None,
                 defender_for_databases_arc_auto_provisioning: Optional[pulumi.Input['DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioningArgs']] = None):
        """
        The Defender for Databases GCP offering configurations
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'DefenderForDatabasesGcp'.
        :param pulumi.Input['DefenderForDatabasesGcpOfferingArcAutoProvisioningArgs'] arc_auto_provisioning: The ARC autoprovisioning configuration
        :param pulumi.Input['DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioningArgs'] defender_for_databases_arc_auto_provisioning: The native cloud connection configuration
        """
        pulumi.set(__self__, "offering_type", 'DefenderForDatabasesGcp')
        if arc_auto_provisioning is not None:
            pulumi.set(__self__, "arc_auto_provisioning", arc_auto_provisioning)
        if defender_for_databases_arc_auto_provisioning is not None:
            pulumi.set(__self__, "defender_for_databases_arc_auto_provisioning", defender_for_databases_arc_auto_provisioning)

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'DefenderForDatabasesGcp'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)

    @property
    @pulumi.getter(name="arcAutoProvisioning")
    def arc_auto_provisioning(self) -> Optional[pulumi.Input['DefenderForDatabasesGcpOfferingArcAutoProvisioningArgs']]:
        """
        The ARC autoprovisioning configuration
        """
        return pulumi.get(self, "arc_auto_provisioning")

    @arc_auto_provisioning.setter
    def arc_auto_provisioning(self, value: Optional[pulumi.Input['DefenderForDatabasesGcpOfferingArcAutoProvisioningArgs']]):
        pulumi.set(self, "arc_auto_provisioning", value)

    @property
    @pulumi.getter(name="defenderForDatabasesArcAutoProvisioning")
    def defender_for_databases_arc_auto_provisioning(self) -> Optional[pulumi.Input['DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioningArgs']]:
        """
        The native cloud connection configuration
        """
        return pulumi.get(self, "defender_for_databases_arc_auto_provisioning")

    @defender_for_databases_arc_auto_provisioning.setter
    def defender_for_databases_arc_auto_provisioning(self, value: Optional[pulumi.Input['DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioningArgs']]):
        pulumi.set(self, "defender_for_databases_arc_auto_provisioning", value)


@pulumi.input_type
class DefenderForServersAwsOfferingArcAutoProvisioningArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input['ArcAutoProvisioningConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The ARC autoprovisioning configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input['ArcAutoProvisioningConfigurationArgs'] configuration: Configuration for servers Arc auto provisioning for a given environment
        :param pulumi.Input[bool] enabled: Is arc auto provisioning enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['ArcAutoProvisioningConfigurationArgs']]:
        """
        Configuration for servers Arc auto provisioning for a given environment
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['ArcAutoProvisioningConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is arc auto provisioning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForServersAwsOfferingConfigurationArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[Union[str, 'Type']]] = None):
        """
        configuration for Vulnerability Assessment autoprovisioning
        :param pulumi.Input[Union[str, 'Type']] type: The Vulnerability Assessment solution to be provisioned. Can be either 'TVM' or 'Qualys'
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'Type']]]:
        """
        The Vulnerability Assessment solution to be provisioned. Can be either 'TVM' or 'Qualys'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'Type']]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DefenderForServersAwsOfferingDefenderForServersArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None):
        """
        The Defender for servers connection configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)


@pulumi.input_type
class DefenderForServersAwsOfferingMdeAutoProvisioningArgs:
    def __init__(__self__, *,
                 configuration: Optional[Any] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender for Endpoint autoprovisioning configuration
        :param Any configuration: configuration for Microsoft Defender for Endpoint autoprovisioning
        :param pulumi.Input[bool] enabled: Is Microsoft Defender for Endpoint auto provisioning enabled
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[Any]:
        """
        configuration for Microsoft Defender for Endpoint autoprovisioning
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[Any]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender for Endpoint auto provisioning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForServersAwsOfferingSubPlanArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[Union[str, 'SubPlan']]] = None):
        """
        configuration for the servers offering subPlan
        :param pulumi.Input[Union[str, 'SubPlan']] type: The available sub plans
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'SubPlan']]]:
        """
        The available sub plans
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'SubPlan']]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DefenderForServersAwsOfferingVaAutoProvisioningArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['DefenderForServersAwsOfferingConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Vulnerability Assessment autoprovisioning configuration
        :param pulumi.Input['DefenderForServersAwsOfferingConfigurationArgs'] configuration: configuration for Vulnerability Assessment autoprovisioning
        :param pulumi.Input[bool] enabled: Is Vulnerability Assessment auto provisioning enabled
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['DefenderForServersAwsOfferingConfigurationArgs']]:
        """
        configuration for Vulnerability Assessment autoprovisioning
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['DefenderForServersAwsOfferingConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Vulnerability Assessment auto provisioning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForServersAwsOfferingVmScannersArgs:
    def __init__(__self__, *,
                 cloud_role_arn: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input['VmScannersBaseConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender for Server VM scanning configuration
        :param pulumi.Input[str] cloud_role_arn: The cloud role ARN in AWS for this feature
        :param pulumi.Input['VmScannersBaseConfigurationArgs'] configuration: Configuration for VM scanning
        :param pulumi.Input[bool] enabled: Is VM scanning enabled
        """
        if cloud_role_arn is not None:
            pulumi.set(__self__, "cloud_role_arn", cloud_role_arn)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cloudRoleArn")
    def cloud_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud role ARN in AWS for this feature
        """
        return pulumi.get(self, "cloud_role_arn")

    @cloud_role_arn.setter
    def cloud_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_role_arn", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['VmScannersBaseConfigurationArgs']]:
        """
        Configuration for VM scanning
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['VmScannersBaseConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is VM scanning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForServersAwsOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str],
                 arc_auto_provisioning: Optional[pulumi.Input['DefenderForServersAwsOfferingArcAutoProvisioningArgs']] = None,
                 defender_for_servers: Optional[pulumi.Input['DefenderForServersAwsOfferingDefenderForServersArgs']] = None,
                 mde_auto_provisioning: Optional[pulumi.Input['DefenderForServersAwsOfferingMdeAutoProvisioningArgs']] = None,
                 sub_plan: Optional[pulumi.Input['DefenderForServersAwsOfferingSubPlanArgs']] = None,
                 va_auto_provisioning: Optional[pulumi.Input['DefenderForServersAwsOfferingVaAutoProvisioningArgs']] = None,
                 vm_scanners: Optional[pulumi.Input['DefenderForServersAwsOfferingVmScannersArgs']] = None):
        """
        The Defender for Servers AWS offering
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'DefenderForServersAws'.
        :param pulumi.Input['DefenderForServersAwsOfferingArcAutoProvisioningArgs'] arc_auto_provisioning: The ARC autoprovisioning configuration
        :param pulumi.Input['DefenderForServersAwsOfferingDefenderForServersArgs'] defender_for_servers: The Defender for servers connection configuration
        :param pulumi.Input['DefenderForServersAwsOfferingMdeAutoProvisioningArgs'] mde_auto_provisioning: The Microsoft Defender for Endpoint autoprovisioning configuration
        :param pulumi.Input['DefenderForServersAwsOfferingSubPlanArgs'] sub_plan: configuration for the servers offering subPlan
        :param pulumi.Input['DefenderForServersAwsOfferingVaAutoProvisioningArgs'] va_auto_provisioning: The Vulnerability Assessment autoprovisioning configuration
        :param pulumi.Input['DefenderForServersAwsOfferingVmScannersArgs'] vm_scanners: The Microsoft Defender for Server VM scanning configuration
        """
        pulumi.set(__self__, "offering_type", 'DefenderForServersAws')
        if arc_auto_provisioning is not None:
            pulumi.set(__self__, "arc_auto_provisioning", arc_auto_provisioning)
        if defender_for_servers is not None:
            pulumi.set(__self__, "defender_for_servers", defender_for_servers)
        if mde_auto_provisioning is not None:
            pulumi.set(__self__, "mde_auto_provisioning", mde_auto_provisioning)
        if sub_plan is not None:
            pulumi.set(__self__, "sub_plan", sub_plan)
        if va_auto_provisioning is not None:
            pulumi.set(__self__, "va_auto_provisioning", va_auto_provisioning)
        if vm_scanners is not None:
            pulumi.set(__self__, "vm_scanners", vm_scanners)

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'DefenderForServersAws'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)

    @property
    @pulumi.getter(name="arcAutoProvisioning")
    def arc_auto_provisioning(self) -> Optional[pulumi.Input['DefenderForServersAwsOfferingArcAutoProvisioningArgs']]:
        """
        The ARC autoprovisioning configuration
        """
        return pulumi.get(self, "arc_auto_provisioning")

    @arc_auto_provisioning.setter
    def arc_auto_provisioning(self, value: Optional[pulumi.Input['DefenderForServersAwsOfferingArcAutoProvisioningArgs']]):
        pulumi.set(self, "arc_auto_provisioning", value)

    @property
    @pulumi.getter(name="defenderForServers")
    def defender_for_servers(self) -> Optional[pulumi.Input['DefenderForServersAwsOfferingDefenderForServersArgs']]:
        """
        The Defender for servers connection configuration
        """
        return pulumi.get(self, "defender_for_servers")

    @defender_for_servers.setter
    def defender_for_servers(self, value: Optional[pulumi.Input['DefenderForServersAwsOfferingDefenderForServersArgs']]):
        pulumi.set(self, "defender_for_servers", value)

    @property
    @pulumi.getter(name="mdeAutoProvisioning")
    def mde_auto_provisioning(self) -> Optional[pulumi.Input['DefenderForServersAwsOfferingMdeAutoProvisioningArgs']]:
        """
        The Microsoft Defender for Endpoint autoprovisioning configuration
        """
        return pulumi.get(self, "mde_auto_provisioning")

    @mde_auto_provisioning.setter
    def mde_auto_provisioning(self, value: Optional[pulumi.Input['DefenderForServersAwsOfferingMdeAutoProvisioningArgs']]):
        pulumi.set(self, "mde_auto_provisioning", value)

    @property
    @pulumi.getter(name="subPlan")
    def sub_plan(self) -> Optional[pulumi.Input['DefenderForServersAwsOfferingSubPlanArgs']]:
        """
        configuration for the servers offering subPlan
        """
        return pulumi.get(self, "sub_plan")

    @sub_plan.setter
    def sub_plan(self, value: Optional[pulumi.Input['DefenderForServersAwsOfferingSubPlanArgs']]):
        pulumi.set(self, "sub_plan", value)

    @property
    @pulumi.getter(name="vaAutoProvisioning")
    def va_auto_provisioning(self) -> Optional[pulumi.Input['DefenderForServersAwsOfferingVaAutoProvisioningArgs']]:
        """
        The Vulnerability Assessment autoprovisioning configuration
        """
        return pulumi.get(self, "va_auto_provisioning")

    @va_auto_provisioning.setter
    def va_auto_provisioning(self, value: Optional[pulumi.Input['DefenderForServersAwsOfferingVaAutoProvisioningArgs']]):
        pulumi.set(self, "va_auto_provisioning", value)

    @property
    @pulumi.getter(name="vmScanners")
    def vm_scanners(self) -> Optional[pulumi.Input['DefenderForServersAwsOfferingVmScannersArgs']]:
        """
        The Microsoft Defender for Server VM scanning configuration
        """
        return pulumi.get(self, "vm_scanners")

    @vm_scanners.setter
    def vm_scanners(self, value: Optional[pulumi.Input['DefenderForServersAwsOfferingVmScannersArgs']]):
        pulumi.set(self, "vm_scanners", value)


@pulumi.input_type
class DefenderForServersGcpOfferingArcAutoProvisioningArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['ArcAutoProvisioningConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The ARC autoprovisioning configuration
        :param pulumi.Input['ArcAutoProvisioningConfigurationArgs'] configuration: Configuration for servers Arc auto provisioning for a given environment
        :param pulumi.Input[bool] enabled: Is arc auto provisioning enabled
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['ArcAutoProvisioningConfigurationArgs']]:
        """
        Configuration for servers Arc auto provisioning for a given environment
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['ArcAutoProvisioningConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is arc auto provisioning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForServersGcpOfferingConfigurationArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[Union[str, 'Type']]] = None):
        """
        configuration for Vulnerability Assessment autoprovisioning
        :param pulumi.Input[Union[str, 'Type']] type: The Vulnerability Assessment solution to be provisioned. Can be either 'TVM' or 'Qualys'
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'Type']]]:
        """
        The Vulnerability Assessment solution to be provisioned. Can be either 'TVM' or 'Qualys'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'Type']]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DefenderForServersGcpOfferingDefenderForServersArgs:
    def __init__(__self__, *,
                 service_account_email_address: Optional[pulumi.Input[str]] = None,
                 workload_identity_provider_id: Optional[pulumi.Input[str]] = None):
        """
        The Defender for servers connection configuration
        :param pulumi.Input[str] service_account_email_address: The service account email address in GCP for this feature
        :param pulumi.Input[str] workload_identity_provider_id: The workload identity provider id in GCP for this feature
        """
        if service_account_email_address is not None:
            pulumi.set(__self__, "service_account_email_address", service_account_email_address)
        if workload_identity_provider_id is not None:
            pulumi.set(__self__, "workload_identity_provider_id", workload_identity_provider_id)

    @property
    @pulumi.getter(name="serviceAccountEmailAddress")
    def service_account_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The service account email address in GCP for this feature
        """
        return pulumi.get(self, "service_account_email_address")

    @service_account_email_address.setter
    def service_account_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email_address", value)

    @property
    @pulumi.getter(name="workloadIdentityProviderId")
    def workload_identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workload identity provider id in GCP for this feature
        """
        return pulumi.get(self, "workload_identity_provider_id")

    @workload_identity_provider_id.setter
    def workload_identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity_provider_id", value)


@pulumi.input_type
class DefenderForServersGcpOfferingMdeAutoProvisioningArgs:
    def __init__(__self__, *,
                 configuration: Optional[Any] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender for Endpoint autoprovisioning configuration
        :param Any configuration: configuration for Microsoft Defender for Endpoint autoprovisioning
        :param pulumi.Input[bool] enabled: Is Microsoft Defender for Endpoint auto provisioning enabled
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[Any]:
        """
        configuration for Microsoft Defender for Endpoint autoprovisioning
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[Any]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Microsoft Defender for Endpoint auto provisioning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForServersGcpOfferingSubPlanArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[Union[str, 'SubPlan']]] = None):
        """
        configuration for the servers offering subPlan
        :param pulumi.Input[Union[str, 'SubPlan']] type: The available sub plans
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'SubPlan']]]:
        """
        The available sub plans
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'SubPlan']]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DefenderForServersGcpOfferingVaAutoProvisioningArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['DefenderForServersGcpOfferingConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Vulnerability Assessment autoprovisioning configuration
        :param pulumi.Input['DefenderForServersGcpOfferingConfigurationArgs'] configuration: configuration for Vulnerability Assessment autoprovisioning
        :param pulumi.Input[bool] enabled: Is Vulnerability Assessment auto provisioning enabled
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['DefenderForServersGcpOfferingConfigurationArgs']]:
        """
        configuration for Vulnerability Assessment autoprovisioning
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['DefenderForServersGcpOfferingConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Vulnerability Assessment auto provisioning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForServersGcpOfferingVmScannersArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['VmScannersBaseConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The Microsoft Defender for Server VM scanning configuration
        :param pulumi.Input['VmScannersBaseConfigurationArgs'] configuration: Configuration for VM scanning
        :param pulumi.Input[bool] enabled: Is VM scanning enabled
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['VmScannersBaseConfigurationArgs']]:
        """
        Configuration for VM scanning
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['VmScannersBaseConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is VM scanning enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DefenderForServersGcpOfferingArgs:
    def __init__(__self__, *,
                 offering_type: pulumi.Input[str],
                 arc_auto_provisioning: Optional[pulumi.Input['DefenderForServersGcpOfferingArcAutoProvisioningArgs']] = None,
                 defender_for_servers: Optional[pulumi.Input['DefenderForServersGcpOfferingDefenderForServersArgs']] = None,
                 mde_auto_provisioning: Optional[pulumi.Input['DefenderForServersGcpOfferingMdeAutoProvisioningArgs']] = None,
                 sub_plan: Optional[pulumi.Input['DefenderForServersGcpOfferingSubPlanArgs']] = None,
                 va_auto_provisioning: Optional[pulumi.Input['DefenderForServersGcpOfferingVaAutoProvisioningArgs']] = None,
                 vm_scanners: Optional[pulumi.Input['DefenderForServersGcpOfferingVmScannersArgs']] = None):
        """
        The Defender for Servers GCP offering configurations
        :param pulumi.Input[str] offering_type: The type of the security offering.
               Expected value is 'DefenderForServersGcp'.
        :param pulumi.Input['DefenderForServersGcpOfferingArcAutoProvisioningArgs'] arc_auto_provisioning: The ARC autoprovisioning configuration
        :param pulumi.Input['DefenderForServersGcpOfferingDefenderForServersArgs'] defender_for_servers: The Defender for servers connection configuration
        :param pulumi.Input['DefenderForServersGcpOfferingMdeAutoProvisioningArgs'] mde_auto_provisioning: The Microsoft Defender for Endpoint autoprovisioning configuration
        :param pulumi.Input['DefenderForServersGcpOfferingSubPlanArgs'] sub_plan: configuration for the servers offering subPlan
        :param pulumi.Input['DefenderForServersGcpOfferingVaAutoProvisioningArgs'] va_auto_provisioning: The Vulnerability Assessment autoprovisioning configuration
        :param pulumi.Input['DefenderForServersGcpOfferingVmScannersArgs'] vm_scanners: The Microsoft Defender for Server VM scanning configuration
        """
        pulumi.set(__self__, "offering_type", 'DefenderForServersGcp')
        if arc_auto_provisioning is not None:
            pulumi.set(__self__, "arc_auto_provisioning", arc_auto_provisioning)
        if defender_for_servers is not None:
            pulumi.set(__self__, "defender_for_servers", defender_for_servers)
        if mde_auto_provisioning is not None:
            pulumi.set(__self__, "mde_auto_provisioning", mde_auto_provisioning)
        if sub_plan is not None:
            pulumi.set(__self__, "sub_plan", sub_plan)
        if va_auto_provisioning is not None:
            pulumi.set(__self__, "va_auto_provisioning", va_auto_provisioning)
        if vm_scanners is not None:
            pulumi.set(__self__, "vm_scanners", vm_scanners)

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> pulumi.Input[str]:
        """
        The type of the security offering.
        Expected value is 'DefenderForServersGcp'.
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "offering_type", value)

    @property
    @pulumi.getter(name="arcAutoProvisioning")
    def arc_auto_provisioning(self) -> Optional[pulumi.Input['DefenderForServersGcpOfferingArcAutoProvisioningArgs']]:
        """
        The ARC autoprovisioning configuration
        """
        return pulumi.get(self, "arc_auto_provisioning")

    @arc_auto_provisioning.setter
    def arc_auto_provisioning(self, value: Optional[pulumi.Input['DefenderForServersGcpOfferingArcAutoProvisioningArgs']]):
        pulumi.set(self, "arc_auto_provisioning", value)

    @property
    @pulumi.getter(name="defenderForServers")
    def defender_for_servers(self) -> Optional[pulumi.Input['DefenderForServersGcpOfferingDefenderForServersArgs']]:
        """
        The Defender for servers connection configuration
        """
        return pulumi.get(self, "defender_for_servers")

    @defender_for_servers.setter
    def defender_for_servers(self, value: Optional[pulumi.Input['DefenderForServersGcpOfferingDefenderForServersArgs']]):
        pulumi.set(self, "defender_for_servers", value)

    @property
    @pulumi.getter(name="mdeAutoProvisioning")
    def mde_auto_provisioning(self) -> Optional[pulumi.Input['DefenderForServersGcpOfferingMdeAutoProvisioningArgs']]:
        """
        The Microsoft Defender for Endpoint autoprovisioning configuration
        """
        return pulumi.get(self, "mde_auto_provisioning")

    @mde_auto_provisioning.setter
    def mde_auto_provisioning(self, value: Optional[pulumi.Input['DefenderForServersGcpOfferingMdeAutoProvisioningArgs']]):
        pulumi.set(self, "mde_auto_provisioning", value)

    @property
    @pulumi.getter(name="subPlan")
    def sub_plan(self) -> Optional[pulumi.Input['DefenderForServersGcpOfferingSubPlanArgs']]:
        """
        configuration for the servers offering subPlan
        """
        return pulumi.get(self, "sub_plan")

    @sub_plan.setter
    def sub_plan(self, value: Optional[pulumi.Input['DefenderForServersGcpOfferingSubPlanArgs']]):
        pulumi.set(self, "sub_plan", value)

    @property
    @pulumi.getter(name="vaAutoProvisioning")
    def va_auto_provisioning(self) -> Optional[pulumi.Input['DefenderForServersGcpOfferingVaAutoProvisioningArgs']]:
        """
        The Vulnerability Assessment autoprovisioning configuration
        """
        return pulumi.get(self, "va_auto_provisioning")

    @va_auto_provisioning.setter
    def va_auto_provisioning(self, value: Optional[pulumi.Input['DefenderForServersGcpOfferingVaAutoProvisioningArgs']]):
        pulumi.set(self, "va_auto_provisioning", value)

    @property
    @pulumi.getter(name="vmScanners")
    def vm_scanners(self) -> Optional[pulumi.Input['DefenderForServersGcpOfferingVmScannersArgs']]:
        """
        The Microsoft Defender for Server VM scanning configuration
        """
        return pulumi.get(self, "vm_scanners")

    @vm_scanners.setter
    def vm_scanners(self, value: Optional[pulumi.Input['DefenderForServersGcpOfferingVmScannersArgs']]):
        pulumi.set(self, "vm_scanners", value)


@pulumi.input_type
class GcpOrganizationalDataMemberArgs:
    def __init__(__self__, *,
                 organization_membership_type: pulumi.Input[str],
                 management_project_number: Optional[pulumi.Input[str]] = None,
                 parent_hierarchy_id: Optional[pulumi.Input[str]] = None):
        """
        The gcpOrganization data for the member account
        :param pulumi.Input[str] organization_membership_type: The multi cloud account's membership type in the organization
               Expected value is 'Member'.
        :param pulumi.Input[str] management_project_number: The GCP management project number from organizational onboarding
        :param pulumi.Input[str] parent_hierarchy_id: If the multi cloud account is not of membership type organization, this will be the ID of the project's parent
        """
        pulumi.set(__self__, "organization_membership_type", 'Member')
        if management_project_number is not None:
            pulumi.set(__self__, "management_project_number", management_project_number)
        if parent_hierarchy_id is not None:
            pulumi.set(__self__, "parent_hierarchy_id", parent_hierarchy_id)

    @property
    @pulumi.getter(name="organizationMembershipType")
    def organization_membership_type(self) -> pulumi.Input[str]:
        """
        The multi cloud account's membership type in the organization
        Expected value is 'Member'.
        """
        return pulumi.get(self, "organization_membership_type")

    @organization_membership_type.setter
    def organization_membership_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_membership_type", value)

    @property
    @pulumi.getter(name="managementProjectNumber")
    def management_project_number(self) -> Optional[pulumi.Input[str]]:
        """
        The GCP management project number from organizational onboarding
        """
        return pulumi.get(self, "management_project_number")

    @management_project_number.setter
    def management_project_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_project_number", value)

    @property
    @pulumi.getter(name="parentHierarchyId")
    def parent_hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        """
        If the multi cloud account is not of membership type organization, this will be the ID of the project's parent
        """
        return pulumi.get(self, "parent_hierarchy_id")

    @parent_hierarchy_id.setter
    def parent_hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_hierarchy_id", value)


@pulumi.input_type
class GcpOrganizationalDataOrganizationArgs:
    def __init__(__self__, *,
                 organization_membership_type: pulumi.Input[str],
                 excluded_project_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_account_email_address: Optional[pulumi.Input[str]] = None,
                 workload_identity_provider_id: Optional[pulumi.Input[str]] = None):
        """
        The gcpOrganization data for the parent account
        :param pulumi.Input[str] organization_membership_type: The multi cloud account's membership type in the organization
               Expected value is 'Organization'.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_project_numbers: If the multi cloud account is of membership type organization, list of accounts excluded from offering
        :param pulumi.Input[str] service_account_email_address: The service account email address which represents the organization level permissions container.
        :param pulumi.Input[str] workload_identity_provider_id: The GCP workload identity provider id which represents the permissions required to auto provision security connectors
        """
        pulumi.set(__self__, "organization_membership_type", 'Organization')
        if excluded_project_numbers is not None:
            pulumi.set(__self__, "excluded_project_numbers", excluded_project_numbers)
        if service_account_email_address is not None:
            pulumi.set(__self__, "service_account_email_address", service_account_email_address)
        if workload_identity_provider_id is not None:
            pulumi.set(__self__, "workload_identity_provider_id", workload_identity_provider_id)

    @property
    @pulumi.getter(name="organizationMembershipType")
    def organization_membership_type(self) -> pulumi.Input[str]:
        """
        The multi cloud account's membership type in the organization
        Expected value is 'Organization'.
        """
        return pulumi.get(self, "organization_membership_type")

    @organization_membership_type.setter
    def organization_membership_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_membership_type", value)

    @property
    @pulumi.getter(name="excludedProjectNumbers")
    def excluded_project_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        If the multi cloud account is of membership type organization, list of accounts excluded from offering
        """
        return pulumi.get(self, "excluded_project_numbers")

    @excluded_project_numbers.setter
    def excluded_project_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_project_numbers", value)

    @property
    @pulumi.getter(name="serviceAccountEmailAddress")
    def service_account_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The service account email address which represents the organization level permissions container.
        """
        return pulumi.get(self, "service_account_email_address")

    @service_account_email_address.setter
    def service_account_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email_address", value)

    @property
    @pulumi.getter(name="workloadIdentityProviderId")
    def workload_identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The GCP workload identity provider id which represents the permissions required to auto provision security connectors
        """
        return pulumi.get(self, "workload_identity_provider_id")

    @workload_identity_provider_id.setter
    def workload_identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity_provider_id", value)


@pulumi.input_type
class GcpProjectDetailsArgs:
    def __init__(__self__, *,
                 project_id: Optional[pulumi.Input[str]] = None,
                 project_number: Optional[pulumi.Input[str]] = None):
        """
        The details about the project represented by the security connector
        :param pulumi.Input[str] project_id: The GCP Project id
        :param pulumi.Input[str] project_number: The unique GCP Project number
        """
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if project_number is not None:
            pulumi.set(__self__, "project_number", project_number)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The GCP Project id
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="projectNumber")
    def project_number(self) -> Optional[pulumi.Input[str]]:
        """
        The unique GCP Project number
        """
        return pulumi.get(self, "project_number")

    @project_number.setter
    def project_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_number", value)


@pulumi.input_type
class GcpProjectEnvironmentDataArgs:
    def __init__(__self__, *,
                 environment_type: pulumi.Input[str],
                 organizational_data: Optional[pulumi.Input[Union['GcpOrganizationalDataMemberArgs', 'GcpOrganizationalDataOrganizationArgs']]] = None,
                 project_details: Optional[pulumi.Input['GcpProjectDetailsArgs']] = None,
                 scan_interval: Optional[pulumi.Input[float]] = None):
        """
        The GCP project connector environment data
        :param pulumi.Input[str] environment_type: The type of the environment data.
               Expected value is 'GcpProject'.
        :param pulumi.Input[Union['GcpOrganizationalDataMemberArgs', 'GcpOrganizationalDataOrganizationArgs']] organizational_data: The Gcp project's organizational data
        :param pulumi.Input['GcpProjectDetailsArgs'] project_details: The Gcp project's details
        :param pulumi.Input[float] scan_interval: Scan interval in hours (value should be between 1-hour to 24-hours)
        """
        pulumi.set(__self__, "environment_type", 'GcpProject')
        if organizational_data is not None:
            pulumi.set(__self__, "organizational_data", organizational_data)
        if project_details is not None:
            pulumi.set(__self__, "project_details", project_details)
        if scan_interval is not None:
            pulumi.set(__self__, "scan_interval", scan_interval)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> pulumi.Input[str]:
        """
        The type of the environment data.
        Expected value is 'GcpProject'.
        """
        return pulumi.get(self, "environment_type")

    @environment_type.setter
    def environment_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_type", value)

    @property
    @pulumi.getter(name="organizationalData")
    def organizational_data(self) -> Optional[pulumi.Input[Union['GcpOrganizationalDataMemberArgs', 'GcpOrganizationalDataOrganizationArgs']]]:
        """
        The Gcp project's organizational data
        """
        return pulumi.get(self, "organizational_data")

    @organizational_data.setter
    def organizational_data(self, value: Optional[pulumi.Input[Union['GcpOrganizationalDataMemberArgs', 'GcpOrganizationalDataOrganizationArgs']]]):
        pulumi.set(self, "organizational_data", value)

    @property
    @pulumi.getter(name="projectDetails")
    def project_details(self) -> Optional[pulumi.Input['GcpProjectDetailsArgs']]:
        """
        The Gcp project's details
        """
        return pulumi.get(self, "project_details")

    @project_details.setter
    def project_details(self, value: Optional[pulumi.Input['GcpProjectDetailsArgs']]):
        pulumi.set(self, "project_details", value)

    @property
    @pulumi.getter(name="scanInterval")
    def scan_interval(self) -> Optional[pulumi.Input[float]]:
        """
        Scan interval in hours (value should be between 1-hour to 24-hours)
        """
        return pulumi.get(self, "scan_interval")

    @scan_interval.setter
    def scan_interval(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "scan_interval", value)


@pulumi.input_type
class GithubScopeEnvironmentDataArgs:
    def __init__(__self__, *,
                 environment_type: pulumi.Input[str]):
        """
        The github scope connector's environment data
        :param pulumi.Input[str] environment_type: The type of the environment data.
               Expected value is 'GithubScope'.
        """
        pulumi.set(__self__, "environment_type", 'GithubScope')

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> pulumi.Input[str]:
        """
        The type of the environment data.
        Expected value is 'GithubScope'.
        """
        return pulumi.get(self, "environment_type")

    @environment_type.setter
    def environment_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_type", value)


@pulumi.input_type
class GitlabScopeEnvironmentDataArgs:
    def __init__(__self__, *,
                 environment_type: pulumi.Input[str]):
        """
        The GitLab scope connector's environment data
        :param pulumi.Input[str] environment_type: The type of the environment data.
               Expected value is 'GitlabScope'.
        """
        pulumi.set(__self__, "environment_type", 'GitlabScope')

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> pulumi.Input[str]:
        """
        The type of the environment data.
        Expected value is 'GitlabScope'.
        """
        return pulumi.get(self, "environment_type")

    @environment_type.setter
    def environment_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_type", value)


@pulumi.input_type
class VmScannersBaseConfigurationArgs:
    def __init__(__self__, *,
                 exclusion_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 scanning_mode: Optional[pulumi.Input[Union[str, 'ScanningMode']]] = None):
        """
        Configuration for VM scanning
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] exclusion_tags: Tags that indicates that a resource should not be scanned
        :param pulumi.Input[Union[str, 'ScanningMode']] scanning_mode: The scanning mode for the VM scan.
        """
        if exclusion_tags is not None:
            pulumi.set(__self__, "exclusion_tags", exclusion_tags)
        if scanning_mode is not None:
            pulumi.set(__self__, "scanning_mode", scanning_mode)

    @property
    @pulumi.getter(name="exclusionTags")
    def exclusion_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags that indicates that a resource should not be scanned
        """
        return pulumi.get(self, "exclusion_tags")

    @exclusion_tags.setter
    def exclusion_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "exclusion_tags", value)

    @property
    @pulumi.getter(name="scanningMode")
    def scanning_mode(self) -> Optional[pulumi.Input[Union[str, 'ScanningMode']]]:
        """
        The scanning mode for the VM scan.
        """
        return pulumi.get(self, "scanning_mode")

    @scanning_mode.setter
    def scanning_mode(self, value: Optional[pulumi.Input[Union[str, 'ScanningMode']]]):
        pulumi.set(self, "scanning_mode", value)


