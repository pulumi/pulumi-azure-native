# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetSecurityContactResult',
    'AwaitableGetSecurityContactResult',
    'get_security_contact',
    'get_security_contact_output',
]

@pulumi.output_type
class GetSecurityContactResult:
    """
    Contact details and configurations for notifications coming from Microsoft Defender for Cloud.
    """
    def __init__(__self__, emails=None, id=None, is_enabled=None, name=None, notifications_by_role=None, notifications_sources=None, phone=None, type=None):
        if emails and not isinstance(emails, str):
            raise TypeError("Expected argument 'emails' to be a str")
        pulumi.set(__self__, "emails", emails)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_enabled and not isinstance(is_enabled, bool):
            raise TypeError("Expected argument 'is_enabled' to be a bool")
        pulumi.set(__self__, "is_enabled", is_enabled)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notifications_by_role and not isinstance(notifications_by_role, dict):
            raise TypeError("Expected argument 'notifications_by_role' to be a dict")
        pulumi.set(__self__, "notifications_by_role", notifications_by_role)
        if notifications_sources and not isinstance(notifications_sources, list):
            raise TypeError("Expected argument 'notifications_sources' to be a list")
        pulumi.set(__self__, "notifications_sources", notifications_sources)
        if phone and not isinstance(phone, str):
            raise TypeError("Expected argument 'phone' to be a str")
        pulumi.set(__self__, "phone", phone)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def emails(self) -> Optional[str]:
        """
        List of email addresses which will get notifications from Microsoft Defender for Cloud by the configurations defined in this security contact.
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        Indicates whether the security contact is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationsByRole")
    def notifications_by_role(self) -> Optional['outputs.SecurityContactPropertiesResponseNotificationsByRole']:
        """
        Defines whether to send email notifications from Microsoft Defender for Cloud to persons with specific RBAC roles on the subscription.
        """
        return pulumi.get(self, "notifications_by_role")

    @property
    @pulumi.getter(name="notificationsSources")
    def notifications_sources(self) -> Optional[Sequence[Any]]:
        """
        A collection of sources types which evaluate the email notification.
        """
        return pulumi.get(self, "notifications_sources")

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        """
        The security contact's phone number
        """
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")


class AwaitableGetSecurityContactResult(GetSecurityContactResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityContactResult(
            emails=self.emails,
            id=self.id,
            is_enabled=self.is_enabled,
            name=self.name,
            notifications_by_role=self.notifications_by_role,
            notifications_sources=self.notifications_sources,
            phone=self.phone,
            type=self.type)


def get_security_contact(security_contact_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityContactResult:
    """
    Get Default Security contact configurations for the subscription


    :param str security_contact_name: Name of the security contact object
    """
    __args__ = dict()
    __args__['securityContactName'] = security_contact_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:security/v20231201preview:getSecurityContact', __args__, opts=opts, typ=GetSecurityContactResult).value

    return AwaitableGetSecurityContactResult(
        emails=pulumi.get(__ret__, 'emails'),
        id=pulumi.get(__ret__, 'id'),
        is_enabled=pulumi.get(__ret__, 'is_enabled'),
        name=pulumi.get(__ret__, 'name'),
        notifications_by_role=pulumi.get(__ret__, 'notifications_by_role'),
        notifications_sources=pulumi.get(__ret__, 'notifications_sources'),
        phone=pulumi.get(__ret__, 'phone'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_security_contact)
def get_security_contact_output(security_contact_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecurityContactResult]:
    """
    Get Default Security contact configurations for the subscription


    :param str security_contact_name: Name of the security contact object
    """
    ...
