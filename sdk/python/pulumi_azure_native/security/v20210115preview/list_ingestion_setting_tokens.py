# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'ListIngestionSettingTokensResult',
    'AwaitableListIngestionSettingTokensResult',
    'list_ingestion_setting_tokens',
]

@pulumi.output_type
class ListIngestionSettingTokensResult:
    """
    Configures how to correlate scan data and logs with resources associated with the subscription.
    """
    def __init__(__self__, token=None):
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The token is used for correlating security data and logs with the resources in the subscription.
        """
        return pulumi.get(self, "token")


class AwaitableListIngestionSettingTokensResult(ListIngestionSettingTokensResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListIngestionSettingTokensResult(
            token=self.token)


def list_ingestion_setting_tokens(ingestion_setting_name: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListIngestionSettingTokensResult:
    """
    Configures how to correlate scan data and logs with resources associated with the subscription.


    :param str ingestion_setting_name: Name of the ingestion setting
    """
    __args__ = dict()
    __args__['ingestionSettingName'] = ingestion_setting_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-native:security/v20210115preview:listIngestionSettingTokens', __args__, opts=opts, typ=ListIngestionSettingTokensResult).value

    return AwaitableListIngestionSettingTokensResult(
        token=__ret__.token)
