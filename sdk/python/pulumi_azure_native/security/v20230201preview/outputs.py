# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'RuleResultsPropertiesResponse',
]

@pulumi.output_type
class RuleResultsPropertiesResponse(dict):
    """
    Rule results properties.
    """
    def __init__(__self__, *,
                 results: Optional[Sequence[Sequence[str]]] = None):
        """
        Rule results properties.
        :param Sequence[Sequence[str]] results: Expected results in the baseline.
        """
        RuleResultsPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            results=results,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             results: Optional[Sequence[Sequence[str]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if results is not None:
            _setter("results", results)

    @property
    @pulumi.getter
    def results(self) -> Optional[Sequence[Sequence[str]]]:
        """
        Expected results in the baseline.
        """
        return pulumi.get(self, "results")


