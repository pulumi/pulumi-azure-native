# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from ._enums import *
from .deployment import *
from .deployment_at_management_group_scope import *
from .deployment_at_scope import *
from .deployment_at_subscription_scope import *
from .deployment_at_tenant_scope import *
from .deployment_script import *
from .get_deployment import *
from .get_deployment_at_management_group_scope import *
from .get_deployment_at_scope import *
from .get_deployment_at_subscription_scope import *
from .get_deployment_at_tenant_scope import *
from .get_deployment_script import *
from .get_resource import *
from .get_resource_group import *
from .get_tag_at_scope import *
from .get_template_spec import *
from .get_template_spec_version import *
from .resource import *
from .resource_group import *
from .tag_at_scope import *
from .template_spec import *
from .template_spec_version import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    v20151101,
    v20160201,
    v20160701,
    v20160901,
    v20170510,
    v20180201,
    v20180501,
    v20190301,
    v20190501,
    v20190510,
    v20190601preview,
    v20190701,
    v20190801,
    v20191001,
    v20191001preview,
    v20200601,
    v20200801,
    v20201001,
    v20210101,
)

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "azure-native:resources:Deployment":
                return Deployment(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:resources:DeploymentAtManagementGroupScope":
                return DeploymentAtManagementGroupScope(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:resources:DeploymentAtScope":
                return DeploymentAtScope(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:resources:DeploymentAtSubscriptionScope":
                return DeploymentAtSubscriptionScope(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:resources:DeploymentAtTenantScope":
                return DeploymentAtTenantScope(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:resources:DeploymentScript":
                return DeploymentScript(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:resources:Resource":
                return Resource(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:resources:ResourceGroup":
                return ResourceGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:resources:TagAtScope":
                return TagAtScope(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:resources:TemplateSpec":
                return TemplateSpec(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:resources:TemplateSpecVersion":
                return TemplateSpecVersion(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("azure-native", "resources", _module_instance)

_register_module()
