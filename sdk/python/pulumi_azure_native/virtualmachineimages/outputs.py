# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'DistributeVersionerLatestResponse',
    'DistributeVersionerSourceResponse',
    'ImageTemplateAutoRunResponse',
    'ImageTemplateFileCustomizerResponse',
    'ImageTemplateFileValidatorResponse',
    'ImageTemplateIdentityResponse',
    'ImageTemplateLastRunStatusResponse',
    'ImageTemplateManagedImageDistributorResponse',
    'ImageTemplateManagedImageSourceResponse',
    'ImageTemplatePlatformImageSourceResponse',
    'ImageTemplatePowerShellCustomizerResponse',
    'ImageTemplatePowerShellValidatorResponse',
    'ImageTemplatePropertiesResponseErrorHandling',
    'ImageTemplatePropertiesResponseOptimize',
    'ImageTemplatePropertiesResponseValidate',
    'ImageTemplatePropertiesResponseVmBoot',
    'ImageTemplateRestartCustomizerResponse',
    'ImageTemplateSharedImageDistributorResponse',
    'ImageTemplateSharedImageVersionSourceResponse',
    'ImageTemplateShellCustomizerResponse',
    'ImageTemplateShellValidatorResponse',
    'ImageTemplateVhdDistributorResponse',
    'ImageTemplateVmProfileResponse',
    'ImageTemplateWindowsUpdateCustomizerResponse',
    'PlatformImagePurchasePlanResponse',
    'ProvisioningErrorResponse',
    'SystemDataResponse',
    'TargetRegionResponse',
    'TriggerStatusResponse',
    'UserAssignedIdentityResponse',
    'VirtualNetworkConfigResponse',
]

@pulumi.output_type
class DistributeVersionerLatestResponse(dict):
    """
    Generates version number that will be latest based on existing version numbers.
    """
    def __init__(__self__, *,
                 scheme: builtins.str,
                 major: Optional[builtins.int] = None):
        """
        Generates version number that will be latest based on existing version numbers.
        :param builtins.str scheme: Version numbering scheme to be used.
               Expected value is 'Latest'.
        :param builtins.int major: Major version for the generated version number. Determine what is "latest" based on versions with this value as the major version. -1 is equivalent to leaving it unset.
        """
        pulumi.set(__self__, "scheme", 'Latest')
        if major is None:
            major = -1
        if major is not None:
            pulumi.set(__self__, "major", major)

    @property
    @pulumi.getter
    def scheme(self) -> builtins.str:
        """
        Version numbering scheme to be used.
        Expected value is 'Latest'.
        """
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter
    def major(self) -> Optional[builtins.int]:
        """
        Major version for the generated version number. Determine what is "latest" based on versions with this value as the major version. -1 is equivalent to leaving it unset.
        """
        return pulumi.get(self, "major")


@pulumi.output_type
class DistributeVersionerSourceResponse(dict):
    """
    Generates version number based on version number of source image
    """
    def __init__(__self__, *,
                 scheme: builtins.str):
        """
        Generates version number based on version number of source image
        :param builtins.str scheme: Version numbering scheme to be used.
               Expected value is 'Source'.
        """
        pulumi.set(__self__, "scheme", 'Source')

    @property
    @pulumi.getter
    def scheme(self) -> builtins.str:
        """
        Version numbering scheme to be used.
        Expected value is 'Source'.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class ImageTemplateAutoRunResponse(dict):
    """
    Indicates if the image template needs to be built on create/update
    """
    def __init__(__self__, *,
                 state: Optional[builtins.str] = None):
        """
        Indicates if the image template needs to be built on create/update
        :param builtins.str state: Enabling this field will trigger an automatic build on image template creation or update.
        """
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> Optional[builtins.str]:
        """
        Enabling this field will trigger an automatic build on image template creation or update.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ImageTemplateFileCustomizerResponse(dict):
    """
    Uploads files to VMs (Linux, Windows). Corresponds to Packer file provisioner
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sha256Checksum":
            suggest = "sha256_checksum"
        elif key == "sourceUri":
            suggest = "source_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateFileCustomizerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateFileCustomizerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateFileCustomizerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 destination: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 sha256_checksum: Optional[builtins.str] = None,
                 source_uri: Optional[builtins.str] = None):
        """
        Uploads files to VMs (Linux, Windows). Corresponds to Packer file provisioner
        :param builtins.str type: The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
               Expected value is 'File'.
        :param builtins.str destination: The absolute path to a file (with nested directory structures already created) where the file (from sourceUri) will be uploaded to in the VM
        :param builtins.str name: Friendly Name to provide context on what this customization step does
        :param builtins.str sha256_checksum: SHA256 checksum of the file provided in the sourceUri field above
        :param builtins.str source_uri: The URI of the file to be uploaded for customizing the VM. It can be a github link, SAS URI for Azure Storage, etc
        """
        pulumi.set(__self__, "type", 'File')
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sha256_checksum is None:
            sha256_checksum = ''
        if sha256_checksum is not None:
            pulumi.set(__self__, "sha256_checksum", sha256_checksum)
        if source_uri is not None:
            pulumi.set(__self__, "source_uri", source_uri)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
        Expected value is 'File'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def destination(self) -> Optional[builtins.str]:
        """
        The absolute path to a file (with nested directory structures already created) where the file (from sourceUri) will be uploaded to in the VM
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Friendly Name to provide context on what this customization step does
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sha256Checksum")
    def sha256_checksum(self) -> Optional[builtins.str]:
        """
        SHA256 checksum of the file provided in the sourceUri field above
        """
        return pulumi.get(self, "sha256_checksum")

    @property
    @pulumi.getter(name="sourceUri")
    def source_uri(self) -> Optional[builtins.str]:
        """
        The URI of the file to be uploaded for customizing the VM. It can be a github link, SAS URI for Azure Storage, etc
        """
        return pulumi.get(self, "source_uri")


@pulumi.output_type
class ImageTemplateFileValidatorResponse(dict):
    """
    Uploads files required for validation to VMs (Linux, Windows). Corresponds to Packer file provisioner
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sha256Checksum":
            suggest = "sha256_checksum"
        elif key == "sourceUri":
            suggest = "source_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateFileValidatorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateFileValidatorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateFileValidatorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 destination: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 sha256_checksum: Optional[builtins.str] = None,
                 source_uri: Optional[builtins.str] = None):
        """
        Uploads files required for validation to VMs (Linux, Windows). Corresponds to Packer file provisioner
        :param builtins.str type: The type of validation you want to use on the Image. For example, "Shell" can be shell validation
               Expected value is 'File'.
        :param builtins.str destination: The absolute path to a file (with nested directory structures already created) where the file (from sourceUri) will be uploaded to in the VM
        :param builtins.str name: Friendly Name to provide context on what this validation step does
        :param builtins.str sha256_checksum: SHA256 checksum of the file provided in the sourceUri field above
        :param builtins.str source_uri: The URI of the file to be uploaded to the VM for validation. It can be a github link, Azure Storage URI (authorized or SAS), etc
        """
        pulumi.set(__self__, "type", 'File')
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sha256_checksum is None:
            sha256_checksum = ''
        if sha256_checksum is not None:
            pulumi.set(__self__, "sha256_checksum", sha256_checksum)
        if source_uri is not None:
            pulumi.set(__self__, "source_uri", source_uri)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of validation you want to use on the Image. For example, "Shell" can be shell validation
        Expected value is 'File'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def destination(self) -> Optional[builtins.str]:
        """
        The absolute path to a file (with nested directory structures already created) where the file (from sourceUri) will be uploaded to in the VM
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Friendly Name to provide context on what this validation step does
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sha256Checksum")
    def sha256_checksum(self) -> Optional[builtins.str]:
        """
        SHA256 checksum of the file provided in the sourceUri field above
        """
        return pulumi.get(self, "sha256_checksum")

    @property
    @pulumi.getter(name="sourceUri")
    def source_uri(self) -> Optional[builtins.str]:
        """
        The URI of the file to be uploaded to the VM for validation. It can be a github link, Azure Storage URI (authorized or SAS), etc
        """
        return pulumi.get(self, "source_uri")


@pulumi.output_type
class ImageTemplateIdentityResponse(dict):
    """
    Identity for the image template.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: Optional[builtins.str] = None,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Identity for the image template.
        :param builtins.str type: The type of identity used for the image template. The type 'None' will remove any identities from the image template.
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The type of identity used for the image template. The type 'None' will remove any identities from the image template.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class ImageTemplateLastRunStatusResponse(dict):
    """
    Describes the latest status of running an image template
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "runState":
            suggest = "run_state"
        elif key == "runSubState":
            suggest = "run_sub_state"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateLastRunStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateLastRunStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateLastRunStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: Optional[builtins.str] = None,
                 message: Optional[builtins.str] = None,
                 run_state: Optional[builtins.str] = None,
                 run_sub_state: Optional[builtins.str] = None,
                 start_time: Optional[builtins.str] = None):
        """
        Describes the latest status of running an image template
        :param builtins.str end_time: End time of the last run (UTC)
        :param builtins.str message: Verbose information about the last run state
        :param builtins.str run_state: State of the last run
        :param builtins.str run_sub_state: Sub-state of the last run
        :param builtins.str start_time: Start time of the last run (UTC)
        """
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if run_state is not None:
            pulumi.set(__self__, "run_state", run_state)
        if run_sub_state is not None:
            pulumi.set(__self__, "run_sub_state", run_sub_state)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[builtins.str]:
        """
        End time of the last run (UTC)
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[builtins.str]:
        """
        Verbose information about the last run state
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="runState")
    def run_state(self) -> Optional[builtins.str]:
        """
        State of the last run
        """
        return pulumi.get(self, "run_state")

    @property
    @pulumi.getter(name="runSubState")
    def run_sub_state(self) -> Optional[builtins.str]:
        """
        Sub-state of the last run
        """
        return pulumi.get(self, "run_sub_state")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[builtins.str]:
        """
        Start time of the last run (UTC)
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class ImageTemplateManagedImageDistributorResponse(dict):
    """
    Distribute as a Managed Disk Image.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageId":
            suggest = "image_id"
        elif key == "runOutputName":
            suggest = "run_output_name"
        elif key == "artifactTags":
            suggest = "artifact_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateManagedImageDistributorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateManagedImageDistributorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateManagedImageDistributorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_id: builtins.str,
                 location: builtins.str,
                 run_output_name: builtins.str,
                 type: builtins.str,
                 artifact_tags: Optional[Mapping[str, builtins.str]] = None):
        """
        Distribute as a Managed Disk Image.
        :param builtins.str image_id: Resource Id of the Managed Disk Image
        :param builtins.str location: Azure location for the image, should match if image already exists
        :param builtins.str run_output_name: The name to be used for the associated RunOutput.
        :param builtins.str type: Type of distribution.
               Expected value is 'ManagedImage'.
        :param Mapping[str, builtins.str] artifact_tags: Tags that will be applied to the artifact once it has been created/updated by the distributor.
        """
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "run_output_name", run_output_name)
        pulumi.set(__self__, "type", 'ManagedImage')
        if artifact_tags is not None:
            pulumi.set(__self__, "artifact_tags", artifact_tags)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> builtins.str:
        """
        Resource Id of the Managed Disk Image
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Azure location for the image, should match if image already exists
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="runOutputName")
    def run_output_name(self) -> builtins.str:
        """
        The name to be used for the associated RunOutput.
        """
        return pulumi.get(self, "run_output_name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of distribution.
        Expected value is 'ManagedImage'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="artifactTags")
    def artifact_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Tags that will be applied to the artifact once it has been created/updated by the distributor.
        """
        return pulumi.get(self, "artifact_tags")


@pulumi.output_type
class ImageTemplateManagedImageSourceResponse(dict):
    """
    Describes an image source that is a managed image in customer subscription. This image must reside in the same subscription and region as the Image Builder template.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageId":
            suggest = "image_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateManagedImageSourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateManagedImageSourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateManagedImageSourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_id: builtins.str,
                 type: builtins.str):
        """
        Describes an image source that is a managed image in customer subscription. This image must reside in the same subscription and region as the Image Builder template.
        :param builtins.str image_id: ARM resource id of the managed image in customer subscription
        :param builtins.str type: Specifies the type of source image you want to start with.
               Expected value is 'ManagedImage'.
        """
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "type", 'ManagedImage')

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> builtins.str:
        """
        ARM resource id of the managed image in customer subscription
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Specifies the type of source image you want to start with.
        Expected value is 'ManagedImage'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ImageTemplatePlatformImageSourceResponse(dict):
    """
    Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactVersion":
            suggest = "exact_version"
        elif key == "planInfo":
            suggest = "plan_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplatePlatformImageSourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplatePlatformImageSourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplatePlatformImageSourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_version: builtins.str,
                 type: builtins.str,
                 offer: Optional[builtins.str] = None,
                 plan_info: Optional['outputs.PlatformImagePurchasePlanResponse'] = None,
                 publisher: Optional[builtins.str] = None,
                 sku: Optional[builtins.str] = None,
                 version: Optional[builtins.str] = None):
        """
        Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
        :param builtins.str exact_version: Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages). This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
        :param builtins.str type: Specifies the type of source image you want to start with.
               Expected value is 'PlatformImage'.
        :param builtins.str offer: Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
        :param 'PlatformImagePurchasePlanResponse' plan_info: Optional configuration of purchase plan for platform image.
        :param builtins.str publisher: Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
        :param builtins.str sku: Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
        :param builtins.str version: Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages). If 'latest' is specified here, the version is evaluated when the image build takes place, not when the template is submitted.
        """
        pulumi.set(__self__, "exact_version", exact_version)
        pulumi.set(__self__, "type", 'PlatformImage')
        if offer is not None:
            pulumi.set(__self__, "offer", offer)
        if plan_info is not None:
            pulumi.set(__self__, "plan_info", plan_info)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="exactVersion")
    def exact_version(self) -> builtins.str:
        """
        Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages). This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
        """
        return pulumi.get(self, "exact_version")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Specifies the type of source image you want to start with.
        Expected value is 'PlatformImage'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def offer(self) -> Optional[builtins.str]:
        """
        Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
        """
        return pulumi.get(self, "offer")

    @property
    @pulumi.getter(name="planInfo")
    def plan_info(self) -> Optional['outputs.PlatformImagePurchasePlanResponse']:
        """
        Optional configuration of purchase plan for platform image.
        """
        return pulumi.get(self, "plan_info")

    @property
    @pulumi.getter
    def publisher(self) -> Optional[builtins.str]:
        """
        Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter
    def sku(self) -> Optional[builtins.str]:
        """
        Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        """
        Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages). If 'latest' is specified here, the version is evaluated when the image build takes place, not when the template is submitted.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ImageTemplatePowerShellCustomizerResponse(dict):
    """
    Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'scriptUri' or 'inline' can be specified.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runAsSystem":
            suggest = "run_as_system"
        elif key == "runElevated":
            suggest = "run_elevated"
        elif key == "scriptUri":
            suggest = "script_uri"
        elif key == "sha256Checksum":
            suggest = "sha256_checksum"
        elif key == "validExitCodes":
            suggest = "valid_exit_codes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplatePowerShellCustomizerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplatePowerShellCustomizerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplatePowerShellCustomizerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 inline: Optional[Sequence[builtins.str]] = None,
                 name: Optional[builtins.str] = None,
                 run_as_system: Optional[builtins.bool] = None,
                 run_elevated: Optional[builtins.bool] = None,
                 script_uri: Optional[builtins.str] = None,
                 sha256_checksum: Optional[builtins.str] = None,
                 valid_exit_codes: Optional[Sequence[builtins.int]] = None):
        """
        Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'scriptUri' or 'inline' can be specified.
        :param builtins.str type: The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
               Expected value is 'PowerShell'.
        :param Sequence[builtins.str] inline: Array of PowerShell commands to execute
        :param builtins.str name: Friendly Name to provide context on what this customization step does
        :param builtins.bool run_as_system: If specified, the PowerShell script will be run with elevated privileges using the Local System user. Can only be true when the runElevated field above is set to true.
        :param builtins.bool run_elevated: If specified, the PowerShell script will be run with elevated privileges
        :param builtins.str script_uri: URI of the PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
        :param builtins.str sha256_checksum: SHA256 checksum of the power shell script provided in the scriptUri field above
        :param Sequence[builtins.int] valid_exit_codes: Valid exit codes for the PowerShell script. [Default: 0]
        """
        pulumi.set(__self__, "type", 'PowerShell')
        if inline is not None:
            pulumi.set(__self__, "inline", inline)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if run_as_system is None:
            run_as_system = False
        if run_as_system is not None:
            pulumi.set(__self__, "run_as_system", run_as_system)
        if run_elevated is None:
            run_elevated = False
        if run_elevated is not None:
            pulumi.set(__self__, "run_elevated", run_elevated)
        if script_uri is not None:
            pulumi.set(__self__, "script_uri", script_uri)
        if sha256_checksum is None:
            sha256_checksum = ''
        if sha256_checksum is not None:
            pulumi.set(__self__, "sha256_checksum", sha256_checksum)
        if valid_exit_codes is not None:
            pulumi.set(__self__, "valid_exit_codes", valid_exit_codes)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
        Expected value is 'PowerShell'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def inline(self) -> Optional[Sequence[builtins.str]]:
        """
        Array of PowerShell commands to execute
        """
        return pulumi.get(self, "inline")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Friendly Name to provide context on what this customization step does
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="runAsSystem")
    def run_as_system(self) -> Optional[builtins.bool]:
        """
        If specified, the PowerShell script will be run with elevated privileges using the Local System user. Can only be true when the runElevated field above is set to true.
        """
        return pulumi.get(self, "run_as_system")

    @property
    @pulumi.getter(name="runElevated")
    def run_elevated(self) -> Optional[builtins.bool]:
        """
        If specified, the PowerShell script will be run with elevated privileges
        """
        return pulumi.get(self, "run_elevated")

    @property
    @pulumi.getter(name="scriptUri")
    def script_uri(self) -> Optional[builtins.str]:
        """
        URI of the PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
        """
        return pulumi.get(self, "script_uri")

    @property
    @pulumi.getter(name="sha256Checksum")
    def sha256_checksum(self) -> Optional[builtins.str]:
        """
        SHA256 checksum of the power shell script provided in the scriptUri field above
        """
        return pulumi.get(self, "sha256_checksum")

    @property
    @pulumi.getter(name="validExitCodes")
    def valid_exit_codes(self) -> Optional[Sequence[builtins.int]]:
        """
        Valid exit codes for the PowerShell script. [Default: 0]
        """
        return pulumi.get(self, "valid_exit_codes")


@pulumi.output_type
class ImageTemplatePowerShellValidatorResponse(dict):
    """
    Runs the specified PowerShell script during the validation phase (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'scriptUri' or 'inline' can be specified.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runAsSystem":
            suggest = "run_as_system"
        elif key == "runElevated":
            suggest = "run_elevated"
        elif key == "scriptUri":
            suggest = "script_uri"
        elif key == "sha256Checksum":
            suggest = "sha256_checksum"
        elif key == "validExitCodes":
            suggest = "valid_exit_codes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplatePowerShellValidatorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplatePowerShellValidatorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplatePowerShellValidatorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 inline: Optional[Sequence[builtins.str]] = None,
                 name: Optional[builtins.str] = None,
                 run_as_system: Optional[builtins.bool] = None,
                 run_elevated: Optional[builtins.bool] = None,
                 script_uri: Optional[builtins.str] = None,
                 sha256_checksum: Optional[builtins.str] = None,
                 valid_exit_codes: Optional[Sequence[builtins.int]] = None):
        """
        Runs the specified PowerShell script during the validation phase (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'scriptUri' or 'inline' can be specified.
        :param builtins.str type: The type of validation you want to use on the Image. For example, "Shell" can be shell validation
               Expected value is 'PowerShell'.
        :param Sequence[builtins.str] inline: Array of PowerShell commands to execute
        :param builtins.str name: Friendly Name to provide context on what this validation step does
        :param builtins.bool run_as_system: If specified, the PowerShell script will be run with elevated privileges using the Local System user. Can only be true when the runElevated field above is set to true.
        :param builtins.bool run_elevated: If specified, the PowerShell script will be run with elevated privileges
        :param builtins.str script_uri: URI of the PowerShell script to be run for validation. It can be a github link, Azure Storage URI, etc
        :param builtins.str sha256_checksum: SHA256 checksum of the power shell script provided in the scriptUri field above
        :param Sequence[builtins.int] valid_exit_codes: Valid exit codes for the PowerShell script. [Default: 0]
        """
        pulumi.set(__self__, "type", 'PowerShell')
        if inline is not None:
            pulumi.set(__self__, "inline", inline)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if run_as_system is None:
            run_as_system = False
        if run_as_system is not None:
            pulumi.set(__self__, "run_as_system", run_as_system)
        if run_elevated is None:
            run_elevated = False
        if run_elevated is not None:
            pulumi.set(__self__, "run_elevated", run_elevated)
        if script_uri is not None:
            pulumi.set(__self__, "script_uri", script_uri)
        if sha256_checksum is None:
            sha256_checksum = ''
        if sha256_checksum is not None:
            pulumi.set(__self__, "sha256_checksum", sha256_checksum)
        if valid_exit_codes is not None:
            pulumi.set(__self__, "valid_exit_codes", valid_exit_codes)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of validation you want to use on the Image. For example, "Shell" can be shell validation
        Expected value is 'PowerShell'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def inline(self) -> Optional[Sequence[builtins.str]]:
        """
        Array of PowerShell commands to execute
        """
        return pulumi.get(self, "inline")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Friendly Name to provide context on what this validation step does
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="runAsSystem")
    def run_as_system(self) -> Optional[builtins.bool]:
        """
        If specified, the PowerShell script will be run with elevated privileges using the Local System user. Can only be true when the runElevated field above is set to true.
        """
        return pulumi.get(self, "run_as_system")

    @property
    @pulumi.getter(name="runElevated")
    def run_elevated(self) -> Optional[builtins.bool]:
        """
        If specified, the PowerShell script will be run with elevated privileges
        """
        return pulumi.get(self, "run_elevated")

    @property
    @pulumi.getter(name="scriptUri")
    def script_uri(self) -> Optional[builtins.str]:
        """
        URI of the PowerShell script to be run for validation. It can be a github link, Azure Storage URI, etc
        """
        return pulumi.get(self, "script_uri")

    @property
    @pulumi.getter(name="sha256Checksum")
    def sha256_checksum(self) -> Optional[builtins.str]:
        """
        SHA256 checksum of the power shell script provided in the scriptUri field above
        """
        return pulumi.get(self, "sha256_checksum")

    @property
    @pulumi.getter(name="validExitCodes")
    def valid_exit_codes(self) -> Optional[Sequence[builtins.int]]:
        """
        Valid exit codes for the PowerShell script. [Default: 0]
        """
        return pulumi.get(self, "valid_exit_codes")


@pulumi.output_type
class ImageTemplatePropertiesResponseErrorHandling(dict):
    """
    Error handling options upon a build failure
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "onCustomizerError":
            suggest = "on_customizer_error"
        elif key == "onValidationError":
            suggest = "on_validation_error"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplatePropertiesResponseErrorHandling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplatePropertiesResponseErrorHandling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplatePropertiesResponseErrorHandling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 on_customizer_error: Optional[builtins.str] = None,
                 on_validation_error: Optional[builtins.str] = None):
        """
        Error handling options upon a build failure
        :param builtins.str on_customizer_error: If there is a customizer error and this field is set to 'cleanup', the build VM and associated network resources will be cleaned up. This is the default behavior. If there is a customizer error and this field is set to 'abort', the build VM will be preserved.
        :param builtins.str on_validation_error: If there is a validation error and this field is set to 'cleanup', the build VM and associated network resources will be cleaned up. This is the default behavior. If there is a validation error and this field is set to 'abort', the build VM will be preserved.
        """
        if on_customizer_error is None:
            on_customizer_error = 'cleanup'
        if on_customizer_error is not None:
            pulumi.set(__self__, "on_customizer_error", on_customizer_error)
        if on_validation_error is None:
            on_validation_error = 'cleanup'
        if on_validation_error is not None:
            pulumi.set(__self__, "on_validation_error", on_validation_error)

    @property
    @pulumi.getter(name="onCustomizerError")
    def on_customizer_error(self) -> Optional[builtins.str]:
        """
        If there is a customizer error and this field is set to 'cleanup', the build VM and associated network resources will be cleaned up. This is the default behavior. If there is a customizer error and this field is set to 'abort', the build VM will be preserved.
        """
        return pulumi.get(self, "on_customizer_error")

    @property
    @pulumi.getter(name="onValidationError")
    def on_validation_error(self) -> Optional[builtins.str]:
        """
        If there is a validation error and this field is set to 'cleanup', the build VM and associated network resources will be cleaned up. This is the default behavior. If there is a validation error and this field is set to 'abort', the build VM will be preserved.
        """
        return pulumi.get(self, "on_validation_error")


@pulumi.output_type
class ImageTemplatePropertiesResponseOptimize(dict):
    """
    Specifies optimization to be performed on image.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmBoot":
            suggest = "vm_boot"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplatePropertiesResponseOptimize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplatePropertiesResponseOptimize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplatePropertiesResponseOptimize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vm_boot: Optional['outputs.ImageTemplatePropertiesResponseVmBoot'] = None):
        """
        Specifies optimization to be performed on image.
        :param 'ImageTemplatePropertiesResponseVmBoot' vm_boot: Optimization is applied on the image for a faster VM boot.
        """
        if vm_boot is not None:
            pulumi.set(__self__, "vm_boot", vm_boot)

    @property
    @pulumi.getter(name="vmBoot")
    def vm_boot(self) -> Optional['outputs.ImageTemplatePropertiesResponseVmBoot']:
        """
        Optimization is applied on the image for a faster VM boot.
        """
        return pulumi.get(self, "vm_boot")


@pulumi.output_type
class ImageTemplatePropertiesResponseValidate(dict):
    """
    Configuration options and list of validations to be performed on the resulting image.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continueDistributeOnFailure":
            suggest = "continue_distribute_on_failure"
        elif key == "inVMValidations":
            suggest = "in_vm_validations"
        elif key == "sourceValidationOnly":
            suggest = "source_validation_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplatePropertiesResponseValidate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplatePropertiesResponseValidate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplatePropertiesResponseValidate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continue_distribute_on_failure: Optional[builtins.bool] = None,
                 in_vm_validations: Optional[Sequence[Any]] = None,
                 source_validation_only: Optional[builtins.bool] = None):
        """
        Configuration options and list of validations to be performed on the resulting image.
        :param builtins.bool continue_distribute_on_failure: If validation fails and this field is set to false, output image(s) will not be distributed. This is the default behavior. If validation fails and this field is set to true, output image(s) will still be distributed. Please use this option with caution as it may result in bad images being distributed for use. In either case (true or false), the end to end image run will be reported as having failed in case of a validation failure. [Note: This field has no effect if validation succeeds.]
        :param Sequence[Union['ImageTemplateFileValidatorResponse', 'ImageTemplatePowerShellValidatorResponse', 'ImageTemplateShellValidatorResponse']] in_vm_validations: List of validations to be performed.
        :param builtins.bool source_validation_only: If this field is set to true, the image specified in the 'source' section will directly be validated. No separate build will be run to generate and then validate a customized image.
        """
        if continue_distribute_on_failure is None:
            continue_distribute_on_failure = False
        if continue_distribute_on_failure is not None:
            pulumi.set(__self__, "continue_distribute_on_failure", continue_distribute_on_failure)
        if in_vm_validations is not None:
            pulumi.set(__self__, "in_vm_validations", in_vm_validations)
        if source_validation_only is None:
            source_validation_only = False
        if source_validation_only is not None:
            pulumi.set(__self__, "source_validation_only", source_validation_only)

    @property
    @pulumi.getter(name="continueDistributeOnFailure")
    def continue_distribute_on_failure(self) -> Optional[builtins.bool]:
        """
        If validation fails and this field is set to false, output image(s) will not be distributed. This is the default behavior. If validation fails and this field is set to true, output image(s) will still be distributed. Please use this option with caution as it may result in bad images being distributed for use. In either case (true or false), the end to end image run will be reported as having failed in case of a validation failure. [Note: This field has no effect if validation succeeds.]
        """
        return pulumi.get(self, "continue_distribute_on_failure")

    @property
    @pulumi.getter(name="inVMValidations")
    def in_vm_validations(self) -> Optional[Sequence[Any]]:
        """
        List of validations to be performed.
        """
        return pulumi.get(self, "in_vm_validations")

    @property
    @pulumi.getter(name="sourceValidationOnly")
    def source_validation_only(self) -> Optional[builtins.bool]:
        """
        If this field is set to true, the image specified in the 'source' section will directly be validated. No separate build will be run to generate and then validate a customized image.
        """
        return pulumi.get(self, "source_validation_only")


@pulumi.output_type
class ImageTemplatePropertiesResponseVmBoot(dict):
    """
    Optimization is applied on the image for a faster VM boot.
    """
    def __init__(__self__, *,
                 state: Optional[builtins.str] = None):
        """
        Optimization is applied on the image for a faster VM boot.
        :param builtins.str state: Enabling this field will improve VM boot time by optimizing the final customized image output.
        """
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> Optional[builtins.str]:
        """
        Enabling this field will improve VM boot time by optimizing the final customized image output.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ImageTemplateRestartCustomizerResponse(dict):
    """
    Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restartCheckCommand":
            suggest = "restart_check_command"
        elif key == "restartCommand":
            suggest = "restart_command"
        elif key == "restartTimeout":
            suggest = "restart_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateRestartCustomizerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateRestartCustomizerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateRestartCustomizerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 name: Optional[builtins.str] = None,
                 restart_check_command: Optional[builtins.str] = None,
                 restart_command: Optional[builtins.str] = None,
                 restart_timeout: Optional[builtins.str] = None):
        """
        Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
        :param builtins.str type: The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
               Expected value is 'WindowsRestart'.
        :param builtins.str name: Friendly Name to provide context on what this customization step does
        :param builtins.str restart_check_command: Command to check if restart succeeded [Default: '']
        :param builtins.str restart_command: Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
        :param builtins.str restart_timeout: Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
        """
        pulumi.set(__self__, "type", 'WindowsRestart')
        if name is not None:
            pulumi.set(__self__, "name", name)
        if restart_check_command is not None:
            pulumi.set(__self__, "restart_check_command", restart_check_command)
        if restart_command is not None:
            pulumi.set(__self__, "restart_command", restart_command)
        if restart_timeout is not None:
            pulumi.set(__self__, "restart_timeout", restart_timeout)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
        Expected value is 'WindowsRestart'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Friendly Name to provide context on what this customization step does
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="restartCheckCommand")
    def restart_check_command(self) -> Optional[builtins.str]:
        """
        Command to check if restart succeeded [Default: '']
        """
        return pulumi.get(self, "restart_check_command")

    @property
    @pulumi.getter(name="restartCommand")
    def restart_command(self) -> Optional[builtins.str]:
        """
        Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
        """
        return pulumi.get(self, "restart_command")

    @property
    @pulumi.getter(name="restartTimeout")
    def restart_timeout(self) -> Optional[builtins.str]:
        """
        Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
        """
        return pulumi.get(self, "restart_timeout")


@pulumi.output_type
class ImageTemplateSharedImageDistributorResponse(dict):
    """
    Distribute via Azure Compute Gallery.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "galleryImageId":
            suggest = "gallery_image_id"
        elif key == "runOutputName":
            suggest = "run_output_name"
        elif key == "artifactTags":
            suggest = "artifact_tags"
        elif key == "excludeFromLatest":
            suggest = "exclude_from_latest"
        elif key == "replicationRegions":
            suggest = "replication_regions"
        elif key == "storageAccountType":
            suggest = "storage_account_type"
        elif key == "targetRegions":
            suggest = "target_regions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateSharedImageDistributorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateSharedImageDistributorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateSharedImageDistributorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gallery_image_id: builtins.str,
                 run_output_name: builtins.str,
                 type: builtins.str,
                 artifact_tags: Optional[Mapping[str, builtins.str]] = None,
                 exclude_from_latest: Optional[builtins.bool] = None,
                 replication_regions: Optional[Sequence[builtins.str]] = None,
                 storage_account_type: Optional[builtins.str] = None,
                 target_regions: Optional[Sequence['outputs.TargetRegionResponse']] = None,
                 versioning: Optional[Any] = None):
        """
        Distribute via Azure Compute Gallery.
        :param builtins.str gallery_image_id: Resource Id of the Azure Compute Gallery image
        :param builtins.str run_output_name: The name to be used for the associated RunOutput.
        :param builtins.str type: Type of distribution.
               Expected value is 'SharedImage'.
        :param Mapping[str, builtins.str] artifact_tags: Tags that will be applied to the artifact once it has been created/updated by the distributor.
        :param builtins.bool exclude_from_latest: Flag that indicates whether created image version should be excluded from latest. Omit to use the default (false).
        :param Sequence[builtins.str] replication_regions: [Deprecated] A list of regions that the image will be replicated to. This list can be specified only if targetRegions is not specified. This field is deprecated - use targetRegions instead.
        :param builtins.str storage_account_type: [Deprecated] Storage account type to be used to store the shared image. Omit to use the default (Standard_LRS). This field can be specified only if replicationRegions is specified. This field is deprecated - use targetRegions instead.
        :param Sequence['TargetRegionResponse'] target_regions: The target regions where the distributed Image Version is going to be replicated to. This object supersedes replicationRegions and can be specified only if replicationRegions is not specified.
        :param Union['DistributeVersionerLatestResponse', 'DistributeVersionerSourceResponse'] versioning: Describes how to generate new x.y.z version number for distribution.
        """
        pulumi.set(__self__, "gallery_image_id", gallery_image_id)
        pulumi.set(__self__, "run_output_name", run_output_name)
        pulumi.set(__self__, "type", 'SharedImage')
        if artifact_tags is not None:
            pulumi.set(__self__, "artifact_tags", artifact_tags)
        if exclude_from_latest is None:
            exclude_from_latest = False
        if exclude_from_latest is not None:
            pulumi.set(__self__, "exclude_from_latest", exclude_from_latest)
        if replication_regions is not None:
            pulumi.set(__self__, "replication_regions", replication_regions)
        if storage_account_type is not None:
            pulumi.set(__self__, "storage_account_type", storage_account_type)
        if target_regions is not None:
            pulumi.set(__self__, "target_regions", target_regions)
        if versioning is not None:
            pulumi.set(__self__, "versioning", versioning)

    @property
    @pulumi.getter(name="galleryImageId")
    def gallery_image_id(self) -> builtins.str:
        """
        Resource Id of the Azure Compute Gallery image
        """
        return pulumi.get(self, "gallery_image_id")

    @property
    @pulumi.getter(name="runOutputName")
    def run_output_name(self) -> builtins.str:
        """
        The name to be used for the associated RunOutput.
        """
        return pulumi.get(self, "run_output_name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of distribution.
        Expected value is 'SharedImage'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="artifactTags")
    def artifact_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Tags that will be applied to the artifact once it has been created/updated by the distributor.
        """
        return pulumi.get(self, "artifact_tags")

    @property
    @pulumi.getter(name="excludeFromLatest")
    def exclude_from_latest(self) -> Optional[builtins.bool]:
        """
        Flag that indicates whether created image version should be excluded from latest. Omit to use the default (false).
        """
        return pulumi.get(self, "exclude_from_latest")

    @property
    @pulumi.getter(name="replicationRegions")
    def replication_regions(self) -> Optional[Sequence[builtins.str]]:
        """
        [Deprecated] A list of regions that the image will be replicated to. This list can be specified only if targetRegions is not specified. This field is deprecated - use targetRegions instead.
        """
        return pulumi.get(self, "replication_regions")

    @property
    @pulumi.getter(name="storageAccountType")
    def storage_account_type(self) -> Optional[builtins.str]:
        """
        [Deprecated] Storage account type to be used to store the shared image. Omit to use the default (Standard_LRS). This field can be specified only if replicationRegions is specified. This field is deprecated - use targetRegions instead.
        """
        return pulumi.get(self, "storage_account_type")

    @property
    @pulumi.getter(name="targetRegions")
    def target_regions(self) -> Optional[Sequence['outputs.TargetRegionResponse']]:
        """
        The target regions where the distributed Image Version is going to be replicated to. This object supersedes replicationRegions and can be specified only if replicationRegions is not specified.
        """
        return pulumi.get(self, "target_regions")

    @property
    @pulumi.getter
    def versioning(self) -> Optional[Any]:
        """
        Describes how to generate new x.y.z version number for distribution.
        """
        return pulumi.get(self, "versioning")


@pulumi.output_type
class ImageTemplateSharedImageVersionSourceResponse(dict):
    """
    Describes an image source that is an image version in an Azure Compute Gallery or a Direct Shared Gallery.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactVersion":
            suggest = "exact_version"
        elif key == "imageVersionId":
            suggest = "image_version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateSharedImageVersionSourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateSharedImageVersionSourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateSharedImageVersionSourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_version: builtins.str,
                 image_version_id: builtins.str,
                 type: builtins.str):
        """
        Describes an image source that is an image version in an Azure Compute Gallery or a Direct Shared Gallery.
        :param builtins.str exact_version: Exact ARM resource id of the image version. This readonly field differs from the image version Id in 'imageVersionId' only if the version name specified in 'imageVersionId' field is 'latest'.
        :param builtins.str image_version_id: ARM resource id of the image version. When image version name is 'latest', the version is evaluated when the image build takes place.
        :param builtins.str type: Specifies the type of source image you want to start with.
               Expected value is 'SharedImageVersion'.
        """
        pulumi.set(__self__, "exact_version", exact_version)
        pulumi.set(__self__, "image_version_id", image_version_id)
        pulumi.set(__self__, "type", 'SharedImageVersion')

    @property
    @pulumi.getter(name="exactVersion")
    def exact_version(self) -> builtins.str:
        """
        Exact ARM resource id of the image version. This readonly field differs from the image version Id in 'imageVersionId' only if the version name specified in 'imageVersionId' field is 'latest'.
        """
        return pulumi.get(self, "exact_version")

    @property
    @pulumi.getter(name="imageVersionId")
    def image_version_id(self) -> builtins.str:
        """
        ARM resource id of the image version. When image version name is 'latest', the version is evaluated when the image build takes place.
        """
        return pulumi.get(self, "image_version_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Specifies the type of source image you want to start with.
        Expected value is 'SharedImageVersion'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ImageTemplateShellCustomizerResponse(dict):
    """
    Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'scriptUri' or 'inline' can be specified.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scriptUri":
            suggest = "script_uri"
        elif key == "sha256Checksum":
            suggest = "sha256_checksum"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateShellCustomizerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateShellCustomizerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateShellCustomizerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 inline: Optional[Sequence[builtins.str]] = None,
                 name: Optional[builtins.str] = None,
                 script_uri: Optional[builtins.str] = None,
                 sha256_checksum: Optional[builtins.str] = None):
        """
        Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'scriptUri' or 'inline' can be specified.
        :param builtins.str type: The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
               Expected value is 'Shell'.
        :param Sequence[builtins.str] inline: Array of shell commands to execute
        :param builtins.str name: Friendly Name to provide context on what this customization step does
        :param builtins.str script_uri: URI of the shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
        :param builtins.str sha256_checksum: SHA256 checksum of the shell script provided in the scriptUri field
        """
        pulumi.set(__self__, "type", 'Shell')
        if inline is not None:
            pulumi.set(__self__, "inline", inline)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if script_uri is not None:
            pulumi.set(__self__, "script_uri", script_uri)
        if sha256_checksum is None:
            sha256_checksum = ''
        if sha256_checksum is not None:
            pulumi.set(__self__, "sha256_checksum", sha256_checksum)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
        Expected value is 'Shell'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def inline(self) -> Optional[Sequence[builtins.str]]:
        """
        Array of shell commands to execute
        """
        return pulumi.get(self, "inline")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Friendly Name to provide context on what this customization step does
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scriptUri")
    def script_uri(self) -> Optional[builtins.str]:
        """
        URI of the shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
        """
        return pulumi.get(self, "script_uri")

    @property
    @pulumi.getter(name="sha256Checksum")
    def sha256_checksum(self) -> Optional[builtins.str]:
        """
        SHA256 checksum of the shell script provided in the scriptUri field
        """
        return pulumi.get(self, "sha256_checksum")


@pulumi.output_type
class ImageTemplateShellValidatorResponse(dict):
    """
    Runs the specified shell script during the validation phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'scriptUri' or 'inline' can be specified.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scriptUri":
            suggest = "script_uri"
        elif key == "sha256Checksum":
            suggest = "sha256_checksum"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateShellValidatorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateShellValidatorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateShellValidatorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 inline: Optional[Sequence[builtins.str]] = None,
                 name: Optional[builtins.str] = None,
                 script_uri: Optional[builtins.str] = None,
                 sha256_checksum: Optional[builtins.str] = None):
        """
        Runs the specified shell script during the validation phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'scriptUri' or 'inline' can be specified.
        :param builtins.str type: The type of validation you want to use on the Image. For example, "Shell" can be shell validation
               Expected value is 'Shell'.
        :param Sequence[builtins.str] inline: Array of shell commands to execute
        :param builtins.str name: Friendly Name to provide context on what this validation step does
        :param builtins.str script_uri: URI of the shell script to be run for validation. It can be a github link, Azure Storage URI, etc
        :param builtins.str sha256_checksum: SHA256 checksum of the shell script provided in the scriptUri field
        """
        pulumi.set(__self__, "type", 'Shell')
        if inline is not None:
            pulumi.set(__self__, "inline", inline)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if script_uri is not None:
            pulumi.set(__self__, "script_uri", script_uri)
        if sha256_checksum is None:
            sha256_checksum = ''
        if sha256_checksum is not None:
            pulumi.set(__self__, "sha256_checksum", sha256_checksum)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of validation you want to use on the Image. For example, "Shell" can be shell validation
        Expected value is 'Shell'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def inline(self) -> Optional[Sequence[builtins.str]]:
        """
        Array of shell commands to execute
        """
        return pulumi.get(self, "inline")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Friendly Name to provide context on what this validation step does
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scriptUri")
    def script_uri(self) -> Optional[builtins.str]:
        """
        URI of the shell script to be run for validation. It can be a github link, Azure Storage URI, etc
        """
        return pulumi.get(self, "script_uri")

    @property
    @pulumi.getter(name="sha256Checksum")
    def sha256_checksum(self) -> Optional[builtins.str]:
        """
        SHA256 checksum of the shell script provided in the scriptUri field
        """
        return pulumi.get(self, "sha256_checksum")


@pulumi.output_type
class ImageTemplateVhdDistributorResponse(dict):
    """
    Distribute via VHD in a storage account.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runOutputName":
            suggest = "run_output_name"
        elif key == "artifactTags":
            suggest = "artifact_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateVhdDistributorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateVhdDistributorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateVhdDistributorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 run_output_name: builtins.str,
                 type: builtins.str,
                 artifact_tags: Optional[Mapping[str, builtins.str]] = None,
                 uri: Optional[builtins.str] = None):
        """
        Distribute via VHD in a storage account.
        :param builtins.str run_output_name: The name to be used for the associated RunOutput.
        :param builtins.str type: Type of distribution.
               Expected value is 'VHD'.
        :param Mapping[str, builtins.str] artifact_tags: Tags that will be applied to the artifact once it has been created/updated by the distributor.
        :param builtins.str uri: Optional Azure Storage URI for the distributed VHD blob. Omit to use the default (empty string) in which case VHD would be published to the storage account in the staging resource group.
        """
        pulumi.set(__self__, "run_output_name", run_output_name)
        pulumi.set(__self__, "type", 'VHD')
        if artifact_tags is not None:
            pulumi.set(__self__, "artifact_tags", artifact_tags)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="runOutputName")
    def run_output_name(self) -> builtins.str:
        """
        The name to be used for the associated RunOutput.
        """
        return pulumi.get(self, "run_output_name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of distribution.
        Expected value is 'VHD'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="artifactTags")
    def artifact_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Tags that will be applied to the artifact once it has been created/updated by the distributor.
        """
        return pulumi.get(self, "artifact_tags")

    @property
    @pulumi.getter
    def uri(self) -> Optional[builtins.str]:
        """
        Optional Azure Storage URI for the distributed VHD blob. Omit to use the default (empty string) in which case VHD would be published to the storage account in the staging resource group.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class ImageTemplateVmProfileResponse(dict):
    """
    Describes the virtual machines used to build and validate images
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osDiskSizeGB":
            suggest = "os_disk_size_gb"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"
        elif key == "vmSize":
            suggest = "vm_size"
        elif key == "vnetConfig":
            suggest = "vnet_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateVmProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateVmProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateVmProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 os_disk_size_gb: Optional[builtins.int] = None,
                 user_assigned_identities: Optional[Sequence[builtins.str]] = None,
                 vm_size: Optional[builtins.str] = None,
                 vnet_config: Optional['outputs.VirtualNetworkConfigResponse'] = None):
        """
        Describes the virtual machines used to build and validate images
        :param builtins.int os_disk_size_gb: Size of the OS disk in GB. Omit or specify 0 to use Azure's default OS disk size.
        :param Sequence[builtins.str] user_assigned_identities: Optional array of resource IDs of user assigned managed identities to be configured on the build VM and validation VM. This may include the identity of the image template.
        :param builtins.str vm_size: Size of the virtual machine used to build, customize and capture images. Omit or specify empty string to use the default (Standard_D1_v2 for Gen1 images and Standard_D2ds_v4 for Gen2 images).
        :param 'VirtualNetworkConfigResponse' vnet_config: Optional configuration of the virtual network to use to deploy the build VM and validation VM in. Omit if no specific virtual network needs to be used.
        """
        if os_disk_size_gb is None:
            os_disk_size_gb = 0
        if os_disk_size_gb is not None:
            pulumi.set(__self__, "os_disk_size_gb", os_disk_size_gb)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)
        if vm_size is None:
            vm_size = ''
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)
        if vnet_config is not None:
            pulumi.set(__self__, "vnet_config", vnet_config)

    @property
    @pulumi.getter(name="osDiskSizeGB")
    def os_disk_size_gb(self) -> Optional[builtins.int]:
        """
        Size of the OS disk in GB. Omit or specify 0 to use Azure's default OS disk size.
        """
        return pulumi.get(self, "os_disk_size_gb")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Sequence[builtins.str]]:
        """
        Optional array of resource IDs of user assigned managed identities to be configured on the build VM and validation VM. This may include the identity of the image template.
        """
        return pulumi.get(self, "user_assigned_identities")

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[builtins.str]:
        """
        Size of the virtual machine used to build, customize and capture images. Omit or specify empty string to use the default (Standard_D1_v2 for Gen1 images and Standard_D2ds_v4 for Gen2 images).
        """
        return pulumi.get(self, "vm_size")

    @property
    @pulumi.getter(name="vnetConfig")
    def vnet_config(self) -> Optional['outputs.VirtualNetworkConfigResponse']:
        """
        Optional configuration of the virtual network to use to deploy the build VM and validation VM in. Omit if no specific virtual network needs to be used.
        """
        return pulumi.get(self, "vnet_config")


@pulumi.output_type
class ImageTemplateWindowsUpdateCustomizerResponse(dict):
    """
    Installs Windows Updates. Corresponds to Packer Windows Update Provisioner (https://github.com/rgl/packer-provisioner-windows-update)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "searchCriteria":
            suggest = "search_criteria"
        elif key == "updateLimit":
            suggest = "update_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageTemplateWindowsUpdateCustomizerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageTemplateWindowsUpdateCustomizerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageTemplateWindowsUpdateCustomizerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 filters: Optional[Sequence[builtins.str]] = None,
                 name: Optional[builtins.str] = None,
                 search_criteria: Optional[builtins.str] = None,
                 update_limit: Optional[builtins.int] = None):
        """
        Installs Windows Updates. Corresponds to Packer Windows Update Provisioner (https://github.com/rgl/packer-provisioner-windows-update)
        :param builtins.str type: The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
               Expected value is 'WindowsUpdate'.
        :param Sequence[builtins.str] filters: Array of filters to select updates to apply. Omit or specify empty array to use the default (no filter). Refer to above link for examples and detailed description of this field.
        :param builtins.str name: Friendly Name to provide context on what this customization step does
        :param builtins.str search_criteria: Criteria to search updates. Omit or specify empty string to use the default (search all). Refer to above link for examples and detailed description of this field.
        :param builtins.int update_limit: Maximum number of updates to apply at a time. Omit or specify 0 to use the default (1000)
        """
        pulumi.set(__self__, "type", 'WindowsUpdate')
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if search_criteria is not None:
            pulumi.set(__self__, "search_criteria", search_criteria)
        if update_limit is None:
            update_limit = 0
        if update_limit is not None:
            pulumi.set(__self__, "update_limit", update_limit)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
        Expected value is 'WindowsUpdate'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence[builtins.str]]:
        """
        Array of filters to select updates to apply. Omit or specify empty array to use the default (no filter). Refer to above link for examples and detailed description of this field.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Friendly Name to provide context on what this customization step does
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="searchCriteria")
    def search_criteria(self) -> Optional[builtins.str]:
        """
        Criteria to search updates. Omit or specify empty string to use the default (search all). Refer to above link for examples and detailed description of this field.
        """
        return pulumi.get(self, "search_criteria")

    @property
    @pulumi.getter(name="updateLimit")
    def update_limit(self) -> Optional[builtins.int]:
        """
        Maximum number of updates to apply at a time. Omit or specify 0 to use the default (1000)
        """
        return pulumi.get(self, "update_limit")


@pulumi.output_type
class PlatformImagePurchasePlanResponse(dict):
    """
    Purchase plan configuration for platform image.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planName":
            suggest = "plan_name"
        elif key == "planProduct":
            suggest = "plan_product"
        elif key == "planPublisher":
            suggest = "plan_publisher"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlatformImagePurchasePlanResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlatformImagePurchasePlanResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlatformImagePurchasePlanResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 plan_name: builtins.str,
                 plan_product: builtins.str,
                 plan_publisher: builtins.str):
        """
        Purchase plan configuration for platform image.
        :param builtins.str plan_name: Name of the purchase plan.
        :param builtins.str plan_product: Product of the purchase plan.
        :param builtins.str plan_publisher: Publisher of the purchase plan.
        """
        pulumi.set(__self__, "plan_name", plan_name)
        pulumi.set(__self__, "plan_product", plan_product)
        pulumi.set(__self__, "plan_publisher", plan_publisher)

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> builtins.str:
        """
        Name of the purchase plan.
        """
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="planProduct")
    def plan_product(self) -> builtins.str:
        """
        Product of the purchase plan.
        """
        return pulumi.get(self, "plan_product")

    @property
    @pulumi.getter(name="planPublisher")
    def plan_publisher(self) -> builtins.str:
        """
        Publisher of the purchase plan.
        """
        return pulumi.get(self, "plan_publisher")


@pulumi.output_type
class ProvisioningErrorResponse(dict):
    """
    Describes the error happened when create or update an image template
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningErrorCode":
            suggest = "provisioning_error_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisioningErrorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisioningErrorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisioningErrorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message: Optional[builtins.str] = None,
                 provisioning_error_code: Optional[builtins.str] = None):
        """
        Describes the error happened when create or update an image template
        :param builtins.str message: Verbose error message about the provisioning failure
        :param builtins.str provisioning_error_code: Error code of the provisioning failure
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if provisioning_error_code is not None:
            pulumi.set(__self__, "provisioning_error_code", provisioning_error_code)

    @property
    @pulumi.getter
    def message(self) -> Optional[builtins.str]:
        """
        Verbose error message about the provisioning failure
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="provisioningErrorCode")
    def provisioning_error_code(self) -> Optional[builtins.str]:
        """
        Error code of the provisioning failure
        """
        return pulumi.get(self, "provisioning_error_code")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[builtins.str] = None,
                 created_by: Optional[builtins.str] = None,
                 created_by_type: Optional[builtins.str] = None,
                 last_modified_at: Optional[builtins.str] = None,
                 last_modified_by: Optional[builtins.str] = None,
                 last_modified_by_type: Optional[builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param builtins.str created_at: The timestamp of resource creation (UTC).
        :param builtins.str created_by: The identity that created the resource.
        :param builtins.str created_by_type: The type of identity that created the resource.
        :param builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param builtins.str last_modified_by: The identity that last modified the resource.
        :param builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TargetRegionResponse(dict):
    """
    Describes the target region information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicaCount":
            suggest = "replica_count"
        elif key == "storageAccountType":
            suggest = "storage_account_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetRegionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetRegionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetRegionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 replica_count: Optional[builtins.int] = None,
                 storage_account_type: Optional[builtins.str] = None):
        """
        Describes the target region information.
        :param builtins.str name: The name of the region.
        :param builtins.int replica_count: The number of replicas of the Image Version to be created in this region. Omit to use the default (1).
        :param builtins.str storage_account_type: Specifies the storage account type to be used to store the image in this region. Omit to use the default (Standard_LRS).
        """
        pulumi.set(__self__, "name", name)
        if replica_count is None:
            replica_count = 1
        if replica_count is not None:
            pulumi.set(__self__, "replica_count", replica_count)
        if storage_account_type is not None:
            pulumi.set(__self__, "storage_account_type", storage_account_type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the region.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> Optional[builtins.int]:
        """
        The number of replicas of the Image Version to be created in this region. Omit to use the default (1).
        """
        return pulumi.get(self, "replica_count")

    @property
    @pulumi.getter(name="storageAccountType")
    def storage_account_type(self) -> Optional[builtins.str]:
        """
        Specifies the storage account type to be used to store the image in this region. Omit to use the default (Standard_LRS).
        """
        return pulumi.get(self, "storage_account_type")


@pulumi.output_type
class TriggerStatusResponse(dict):
    """
    Describes the status of a trigger
    """
    def __init__(__self__, *,
                 code: builtins.str,
                 message: builtins.str,
                 time: builtins.str):
        """
        Describes the status of a trigger
        :param builtins.str code: The status code.
        :param builtins.str message: The detailed status message, including for alerts and error messages.
        :param builtins.str time: The time of the status.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def code(self) -> builtins.str:
        """
        The status code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        The detailed status message, including for alerts and error messages.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def time(self) -> builtins.str:
        """
        The time of the status.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: builtins.str,
                 principal_id: builtins.str):
        """
        User assigned identity properties
        :param builtins.str client_id: The client ID of the assigned identity.
        :param builtins.str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> builtins.str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> builtins.str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class VirtualNetworkConfigResponse(dict):
    """
    Virtual Network configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerInstanceSubnetId":
            suggest = "container_instance_subnet_id"
        elif key == "proxyVmSize":
            suggest = "proxy_vm_size"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_instance_subnet_id: Optional[builtins.str] = None,
                 proxy_vm_size: Optional[builtins.str] = None,
                 subnet_id: Optional[builtins.str] = None):
        """
        Virtual Network configuration.
        :param builtins.str container_instance_subnet_id: Resource id of a pre-existing subnet on which Azure Container Instance will be deployed for Isolated Builds. This field may be specified only if `subnetId` is also specified and must be on the same Virtual Network as the subnet specified in `subnetId`.
        :param builtins.str proxy_vm_size: Size of the proxy virtual machine used to pass traffic to the build VM and validation VM. This must not be specified if `containerInstanceSubnetId` is specified because no proxy virtual machine is deployed in that case. Omit or specify empty string to use the default (Standard_A1_v2).
        :param builtins.str subnet_id: Resource id of a pre-existing subnet on which the build VM and validation VM will be deployed
        """
        if container_instance_subnet_id is not None:
            pulumi.set(__self__, "container_instance_subnet_id", container_instance_subnet_id)
        if proxy_vm_size is None:
            proxy_vm_size = ''
        if proxy_vm_size is not None:
            pulumi.set(__self__, "proxy_vm_size", proxy_vm_size)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="containerInstanceSubnetId")
    def container_instance_subnet_id(self) -> Optional[builtins.str]:
        """
        Resource id of a pre-existing subnet on which Azure Container Instance will be deployed for Isolated Builds. This field may be specified only if `subnetId` is also specified and must be on the same Virtual Network as the subnet specified in `subnetId`.
        """
        return pulumi.get(self, "container_instance_subnet_id")

    @property
    @pulumi.getter(name="proxyVmSize")
    def proxy_vm_size(self) -> Optional[builtins.str]:
        """
        Size of the proxy virtual machine used to pass traffic to the build VM and validation VM. This must not be specified if `containerInstanceSubnetId` is specified because no proxy virtual machine is deployed in that case. Omit or specify empty string to use the default (Standard_A1_v2).
        """
        return pulumi.get(self, "proxy_vm_size")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.str]:
        """
        Resource id of a pre-existing subnet on which the build VM and validation VM will be deployed
        """
        return pulumi.get(self, "subnet_id")


