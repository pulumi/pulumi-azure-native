# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ChannelTypeDescriptionResponse',
    'KeyDescriptionResponse',
    'SKUResponse',
]

@pulumi.output_type
class ChannelTypeDescriptionResponse(dict):
    """
    EngagementFabric channel description
    """
    def __init__(__self__, *,
                 channel_description: Optional[_builtins.str] = None,
                 channel_functions: Optional[Sequence[_builtins.str]] = None,
                 channel_type: Optional[_builtins.str] = None):
        """
        EngagementFabric channel description
        :param _builtins.str channel_description: Text description for the channel
        :param Sequence[_builtins.str] channel_functions: All the available functions for the channel
        :param _builtins.str channel_type: Channel type
        """
        if channel_description is not None:
            pulumi.set(__self__, "channel_description", channel_description)
        if channel_functions is not None:
            pulumi.set(__self__, "channel_functions", channel_functions)
        if channel_type is not None:
            pulumi.set(__self__, "channel_type", channel_type)

    @_builtins.property
    @pulumi.getter(name="channelDescription")
    def channel_description(self) -> Optional[_builtins.str]:
        """
        Text description for the channel
        """
        return pulumi.get(self, "channel_description")

    @_builtins.property
    @pulumi.getter(name="channelFunctions")
    def channel_functions(self) -> Optional[Sequence[_builtins.str]]:
        """
        All the available functions for the channel
        """
        return pulumi.get(self, "channel_functions")

    @_builtins.property
    @pulumi.getter(name="channelType")
    def channel_type(self) -> Optional[_builtins.str]:
        """
        Channel type
        """
        return pulumi.get(self, "channel_type")


@pulumi.output_type
class KeyDescriptionResponse(dict):
    """
    The description of the EngagementFabric account key
    """
    def __init__(__self__, *,
                 name: _builtins.str,
                 rank: _builtins.str,
                 value: _builtins.str):
        """
        The description of the EngagementFabric account key
        :param _builtins.str name: The name of the key
        :param _builtins.str rank: The rank of the key
        :param _builtins.str value: The value of the key
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rank", rank)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the key
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def rank(self) -> _builtins.str:
        """
        The rank of the key
        """
        return pulumi.get(self, "rank")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the key
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SKUResponse(dict):
    """
    The EngagementFabric SKU
    """
    def __init__(__self__, *,
                 name: _builtins.str,
                 tier: Optional[_builtins.str] = None):
        """
        The EngagementFabric SKU
        :param _builtins.str name: The name of the SKU
        :param _builtins.str tier: The price tier of the SKU
        """
        pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the SKU
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tier(self) -> Optional[_builtins.str]:
        """
        The price tier of the SKU
        """
        return pulumi.get(self, "tier")


