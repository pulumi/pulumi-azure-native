# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'EmployeePropertiesArgs',
    'EmployeePropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class EmployeePropertiesArgsDict(TypedDict):
        """
        Employee properties
        """
        age: NotRequired[pulumi.Input[_builtins.int]]
        """
        Age of employee
        """
        city: NotRequired[pulumi.Input[_builtins.str]]
        """
        City of employee
        """
        profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Profile of employee
        """
elif False:
    EmployeePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EmployeePropertiesArgs:
    def __init__(__self__, *,
                 age: Optional[pulumi.Input[_builtins.int]] = None,
                 city: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Employee properties
        :param pulumi.Input[_builtins.int] age: Age of employee
        :param pulumi.Input[_builtins.str] city: City of employee
        :param pulumi.Input[_builtins.str] profile: Profile of employee
        """
        if age is not None:
            pulumi.set(__self__, "age", age)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @_builtins.property
    @pulumi.getter
    def age(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Age of employee
        """
        return pulumi.get(self, "age")

    @age.setter
    def age(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "age", value)

    @_builtins.property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        City of employee
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "city", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Profile of employee
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)


