# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ActivityTimelineItemResponse',
    'AgentSystemResponse',
    'AnomalyTimelineItemResponse',
    'BookmarkTimelineItemResponse',
    'EnrichmentDomainWhoisContactResponse',
    'EnrichmentDomainWhoisContactsResponse',
    'EnrichmentDomainWhoisDetailsResponse',
    'EnrichmentDomainWhoisRegistrarDetailsResponse',
    'EntityInsightItemResponse',
    'EntityInsightItemResponseQueryTimeInterval',
    'GetInsightsErrorKindResponse',
    'GetInsightsResultsMetadataResponse',
    'InsightsTableResultResponse',
    'InsightsTableResultResponseColumns',
    'LockUserActionResponse',
    'LogResponse',
    'RepoResponse',
    'RfcConnectorResponse',
    'SapAgentConfigurationResponse',
    'SapControlConnectorResponse',
    'SapSystemsConfigurationResponse',
    'SecurityAlertTimelineItemResponse',
    'SystemDataResponse',
    'TimelineAggregationResponse',
    'TimelineErrorResponse',
    'TimelineResultsMetadataResponse',
    'UnlockUserActionResponse',
    'UserInfoResponse',
]

@pulumi.output_type
class ActivityTimelineItemResponse(dict):
    """
    Represents Activity timeline item.
    """
    def __init__(__self__, *,
                 bucket_end_time_utc: str,
                 bucket_start_time_utc: str,
                 content: str,
                 first_activity_time_utc: str,
                 kind: str,
                 last_activity_time_utc: str,
                 query_id: str,
                 title: str):
        """
        Represents Activity timeline item.
        :param str bucket_end_time_utc: The grouping bucket end time.
        :param str bucket_start_time_utc: The grouping bucket start time.
        :param str content: The activity timeline content.
        :param str first_activity_time_utc: The time of the first activity in the grouping bucket.
        :param str kind: The entity query kind
               Expected value is 'Activity'.
        :param str last_activity_time_utc: The time of the last activity in the grouping bucket.
        :param str query_id: The activity query id.
        :param str title: The activity timeline title.
        """
        pulumi.set(__self__, "bucket_end_time_utc", bucket_end_time_utc)
        pulumi.set(__self__, "bucket_start_time_utc", bucket_start_time_utc)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "first_activity_time_utc", first_activity_time_utc)
        pulumi.set(__self__, "kind", 'Activity')
        pulumi.set(__self__, "last_activity_time_utc", last_activity_time_utc)
        pulumi.set(__self__, "query_id", query_id)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="bucketEndTimeUTC")
    def bucket_end_time_utc(self) -> str:
        """
        The grouping bucket end time.
        """
        return pulumi.get(self, "bucket_end_time_utc")

    @property
    @pulumi.getter(name="bucketStartTimeUTC")
    def bucket_start_time_utc(self) -> str:
        """
        The grouping bucket start time.
        """
        return pulumi.get(self, "bucket_start_time_utc")

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The activity timeline content.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="firstActivityTimeUTC")
    def first_activity_time_utc(self) -> str:
        """
        The time of the first activity in the grouping bucket.
        """
        return pulumi.get(self, "first_activity_time_utc")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The entity query kind
        Expected value is 'Activity'.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="lastActivityTimeUTC")
    def last_activity_time_utc(self) -> str:
        """
        The time of the last activity in the grouping bucket.
        """
        return pulumi.get(self, "last_activity_time_utc")

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> str:
        """
        The activity query id.
        """
        return pulumi.get(self, "query_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The activity timeline title.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class AgentSystemResponse(dict):
    """
    Describes the configuration of a system inside the agent.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemDisplayName":
            suggest = "system_display_name"
        elif key == "systemResourceName":
            suggest = "system_resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentSystemResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentSystemResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentSystemResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 system_display_name: Optional[str] = None,
                 system_resource_name: Optional[str] = None):
        """
        Describes the configuration of a system inside the agent.
        """
        if system_display_name is not None:
            pulumi.set(__self__, "system_display_name", system_display_name)
        if system_resource_name is not None:
            pulumi.set(__self__, "system_resource_name", system_resource_name)

    @property
    @pulumi.getter(name="systemDisplayName")
    def system_display_name(self) -> Optional[str]:
        return pulumi.get(self, "system_display_name")

    @property
    @pulumi.getter(name="systemResourceName")
    def system_resource_name(self) -> Optional[str]:
        return pulumi.get(self, "system_resource_name")


@pulumi.output_type
class AnomalyTimelineItemResponse(dict):
    """
    Represents anomaly timeline item.
    """
    def __init__(__self__, *,
                 azure_resource_id: str,
                 display_name: str,
                 end_time_utc: str,
                 kind: str,
                 start_time_utc: str,
                 time_generated: str,
                 description: Optional[str] = None,
                 intent: Optional[str] = None,
                 product_name: Optional[str] = None,
                 reasons: Optional[Sequence[str]] = None,
                 techniques: Optional[Sequence[str]] = None,
                 vendor: Optional[str] = None):
        """
        Represents anomaly timeline item.
        :param str azure_resource_id: The anomaly azure resource id.
        :param str display_name: The anomaly name.
        :param str end_time_utc: The anomaly end time.
        :param str kind: The entity query kind
               Expected value is 'Anomaly'.
        :param str start_time_utc: The anomaly start time.
        :param str time_generated: The anomaly generated time.
        :param str description: The anomaly description.
        :param str intent: The intent of the anomaly.
        :param str product_name: The anomaly product name.
        :param Sequence[str] reasons: The reasons that cause the anomaly.
        :param Sequence[str] techniques: The techniques of the anomaly.
        :param str vendor: The name of the anomaly vendor.
        """
        pulumi.set(__self__, "azure_resource_id", azure_resource_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "end_time_utc", end_time_utc)
        pulumi.set(__self__, "kind", 'Anomaly')
        pulumi.set(__self__, "start_time_utc", start_time_utc)
        pulumi.set(__self__, "time_generated", time_generated)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if reasons is not None:
            pulumi.set(__self__, "reasons", reasons)
        if techniques is not None:
            pulumi.set(__self__, "techniques", techniques)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="azureResourceId")
    def azure_resource_id(self) -> str:
        """
        The anomaly azure resource id.
        """
        return pulumi.get(self, "azure_resource_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The anomaly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> str:
        """
        The anomaly end time.
        """
        return pulumi.get(self, "end_time_utc")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The entity query kind
        Expected value is 'Anomaly'.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> str:
        """
        The anomaly start time.
        """
        return pulumi.get(self, "start_time_utc")

    @property
    @pulumi.getter(name="timeGenerated")
    def time_generated(self) -> str:
        """
        The anomaly generated time.
        """
        return pulumi.get(self, "time_generated")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The anomaly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def intent(self) -> Optional[str]:
        """
        The intent of the anomaly.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        """
        The anomaly product name.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter
    def reasons(self) -> Optional[Sequence[str]]:
        """
        The reasons that cause the anomaly.
        """
        return pulumi.get(self, "reasons")

    @property
    @pulumi.getter
    def techniques(self) -> Optional[Sequence[str]]:
        """
        The techniques of the anomaly.
        """
        return pulumi.get(self, "techniques")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        """
        The name of the anomaly vendor.
        """
        return pulumi.get(self, "vendor")


@pulumi.output_type
class BookmarkTimelineItemResponse(dict):
    """
    Represents bookmark timeline item.
    """
    def __init__(__self__, *,
                 azure_resource_id: str,
                 kind: str,
                 created_by: Optional['outputs.UserInfoResponse'] = None,
                 display_name: Optional[str] = None,
                 end_time_utc: Optional[str] = None,
                 event_time: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 notes: Optional[str] = None,
                 start_time_utc: Optional[str] = None):
        """
        Represents bookmark timeline item.
        :param str azure_resource_id: The bookmark azure resource id.
        :param str kind: The entity query kind
               Expected value is 'Bookmark'.
        :param 'UserInfoResponse' created_by: Describes a user that created the bookmark
        :param str display_name: The bookmark display name.
        :param str end_time_utc: The bookmark end time.
        :param str event_time: The bookmark event time.
        :param Sequence[str] labels: List of labels relevant to this bookmark
        :param str notes: The notes of the bookmark
        :param str start_time_utc: The bookmark start time.
        """
        pulumi.set(__self__, "azure_resource_id", azure_resource_id)
        pulumi.set(__self__, "kind", 'Bookmark')
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if end_time_utc is not None:
            pulumi.set(__self__, "end_time_utc", end_time_utc)
        if event_time is not None:
            pulumi.set(__self__, "event_time", event_time)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if start_time_utc is not None:
            pulumi.set(__self__, "start_time_utc", start_time_utc)

    @property
    @pulumi.getter(name="azureResourceId")
    def azure_resource_id(self) -> str:
        """
        The bookmark azure resource id.
        """
        return pulumi.get(self, "azure_resource_id")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The entity query kind
        Expected value is 'Bookmark'.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional['outputs.UserInfoResponse']:
        """
        Describes a user that created the bookmark
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The bookmark display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> Optional[str]:
        """
        The bookmark end time.
        """
        return pulumi.get(self, "end_time_utc")

    @property
    @pulumi.getter(name="eventTime")
    def event_time(self) -> Optional[str]:
        """
        The bookmark event time.
        """
        return pulumi.get(self, "event_time")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        List of labels relevant to this bookmark
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes of the bookmark
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> Optional[str]:
        """
        The bookmark start time.
        """
        return pulumi.get(self, "start_time_utc")


@pulumi.output_type
class EnrichmentDomainWhoisContactResponse(dict):
    """
    An individual contact associated with this domain
    """
    def __init__(__self__, *,
                 city: Optional[str] = None,
                 country: Optional[str] = None,
                 email: Optional[str] = None,
                 fax: Optional[str] = None,
                 name: Optional[str] = None,
                 org: Optional[str] = None,
                 phone: Optional[str] = None,
                 postal: Optional[str] = None,
                 state: Optional[str] = None,
                 street: Optional[Sequence[str]] = None):
        """
        An individual contact associated with this domain
        :param str city: The city for this contact
        :param str country: The country for this contact
        :param str email: The email address for this contact
        :param str fax: The fax number for this contact
        :param str name: The name of this contact
        :param str org: The organization for this contact
        :param str phone: The phone number for this contact
        :param str postal: The postal code for this contact
        :param str state: The state for this contact
        :param Sequence[str] street: A list describing the street address for this contact
        """
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if fax is not None:
            pulumi.set(__self__, "fax", fax)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if postal is not None:
            pulumi.set(__self__, "postal", postal)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if street is not None:
            pulumi.set(__self__, "street", street)

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        """
        The city for this contact
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        """
        The country for this contact
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        The email address for this contact
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def fax(self) -> Optional[str]:
        """
        The fax number for this contact
        """
        return pulumi.get(self, "fax")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this contact
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        """
        The organization for this contact
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        """
        The phone number for this contact
        """
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter
    def postal(self) -> Optional[str]:
        """
        The postal code for this contact
        """
        return pulumi.get(self, "postal")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The state for this contact
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def street(self) -> Optional[Sequence[str]]:
        """
        A list describing the street address for this contact
        """
        return pulumi.get(self, "street")


@pulumi.output_type
class EnrichmentDomainWhoisContactsResponse(dict):
    """
    The set of contacts associated with this domain
    """
    def __init__(__self__, *,
                 admin: Optional['outputs.EnrichmentDomainWhoisContactResponse'] = None,
                 billing: Optional['outputs.EnrichmentDomainWhoisContactResponse'] = None,
                 registrant: Optional['outputs.EnrichmentDomainWhoisContactResponse'] = None,
                 tech: Optional['outputs.EnrichmentDomainWhoisContactResponse'] = None):
        """
        The set of contacts associated with this domain
        :param 'EnrichmentDomainWhoisContactResponse' admin: The admin contact for this whois record
        :param 'EnrichmentDomainWhoisContactResponse' billing: The billing contact for this whois record
        :param 'EnrichmentDomainWhoisContactResponse' registrant: The registrant contact for this whois record
        :param 'EnrichmentDomainWhoisContactResponse' tech: The technical contact for this whois record
        """
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if billing is not None:
            pulumi.set(__self__, "billing", billing)
        if registrant is not None:
            pulumi.set(__self__, "registrant", registrant)
        if tech is not None:
            pulumi.set(__self__, "tech", tech)

    @property
    @pulumi.getter
    def admin(self) -> Optional['outputs.EnrichmentDomainWhoisContactResponse']:
        """
        The admin contact for this whois record
        """
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter
    def billing(self) -> Optional['outputs.EnrichmentDomainWhoisContactResponse']:
        """
        The billing contact for this whois record
        """
        return pulumi.get(self, "billing")

    @property
    @pulumi.getter
    def registrant(self) -> Optional['outputs.EnrichmentDomainWhoisContactResponse']:
        """
        The registrant contact for this whois record
        """
        return pulumi.get(self, "registrant")

    @property
    @pulumi.getter
    def tech(self) -> Optional['outputs.EnrichmentDomainWhoisContactResponse']:
        """
        The technical contact for this whois record
        """
        return pulumi.get(self, "tech")


@pulumi.output_type
class EnrichmentDomainWhoisDetailsResponse(dict):
    """
    The whois record for a given domain
    """
    def __init__(__self__, *,
                 contacts: Optional['outputs.EnrichmentDomainWhoisContactsResponse'] = None,
                 name_servers: Optional[Sequence[str]] = None,
                 registrar: Optional['outputs.EnrichmentDomainWhoisRegistrarDetailsResponse'] = None,
                 statuses: Optional[Sequence[str]] = None):
        """
        The whois record for a given domain
        :param 'EnrichmentDomainWhoisContactsResponse' contacts: The set of contacts associated with this domain
        :param Sequence[str] name_servers: A list of name servers associated with this domain
        :param 'EnrichmentDomainWhoisRegistrarDetailsResponse' registrar: The registrar associated with this domain
        :param Sequence[str] statuses: The set of status flags for this whois record
        """
        if contacts is not None:
            pulumi.set(__self__, "contacts", contacts)
        if name_servers is not None:
            pulumi.set(__self__, "name_servers", name_servers)
        if registrar is not None:
            pulumi.set(__self__, "registrar", registrar)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def contacts(self) -> Optional['outputs.EnrichmentDomainWhoisContactsResponse']:
        """
        The set of contacts associated with this domain
        """
        return pulumi.get(self, "contacts")

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> Optional[Sequence[str]]:
        """
        A list of name servers associated with this domain
        """
        return pulumi.get(self, "name_servers")

    @property
    @pulumi.getter
    def registrar(self) -> Optional['outputs.EnrichmentDomainWhoisRegistrarDetailsResponse']:
        """
        The registrar associated with this domain
        """
        return pulumi.get(self, "registrar")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[str]]:
        """
        The set of status flags for this whois record
        """
        return pulumi.get(self, "statuses")


@pulumi.output_type
class EnrichmentDomainWhoisRegistrarDetailsResponse(dict):
    """
    The registrar associated with this domain
    """
    def __init__(__self__, *,
                 abuse_contact_email: Optional[str] = None,
                 abuse_contact_phone: Optional[str] = None,
                 iana_id: Optional[str] = None,
                 name: Optional[str] = None,
                 url: Optional[str] = None,
                 whois_server: Optional[str] = None):
        """
        The registrar associated with this domain
        :param str abuse_contact_email: This registrar's abuse contact email
        :param str abuse_contact_phone: This registrar's abuse contact phone number
        :param str iana_id: This registrar's Internet Assigned Numbers Authority id
        :param str name: The name of this registrar
        :param str url: This registrar's URL
        :param str whois_server: The hostname of this registrar's whois server
        """
        if abuse_contact_email is not None:
            pulumi.set(__self__, "abuse_contact_email", abuse_contact_email)
        if abuse_contact_phone is not None:
            pulumi.set(__self__, "abuse_contact_phone", abuse_contact_phone)
        if iana_id is not None:
            pulumi.set(__self__, "iana_id", iana_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if whois_server is not None:
            pulumi.set(__self__, "whois_server", whois_server)

    @property
    @pulumi.getter(name="abuseContactEmail")
    def abuse_contact_email(self) -> Optional[str]:
        """
        This registrar's abuse contact email
        """
        return pulumi.get(self, "abuse_contact_email")

    @property
    @pulumi.getter(name="abuseContactPhone")
    def abuse_contact_phone(self) -> Optional[str]:
        """
        This registrar's abuse contact phone number
        """
        return pulumi.get(self, "abuse_contact_phone")

    @property
    @pulumi.getter(name="ianaId")
    def iana_id(self) -> Optional[str]:
        """
        This registrar's Internet Assigned Numbers Authority id
        """
        return pulumi.get(self, "iana_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this registrar
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        This registrar's URL
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="whoisServer")
    def whois_server(self) -> Optional[str]:
        """
        The hostname of this registrar's whois server
        """
        return pulumi.get(self, "whois_server")


@pulumi.output_type
class EntityInsightItemResponse(dict):
    """
    Entity insight Item.
    """
    def __init__(__self__, *,
                 chart_query_results: Optional[Sequence['outputs.InsightsTableResultResponse']] = None,
                 query_id: Optional[str] = None,
                 query_time_interval: Optional['outputs.EntityInsightItemResponseQueryTimeInterval'] = None,
                 table_query_results: Optional['outputs.InsightsTableResultResponse'] = None):
        """
        Entity insight Item.
        :param Sequence['InsightsTableResultResponse'] chart_query_results: Query results for table insights query.
        :param str query_id: The query id of the insight
        :param 'EntityInsightItemResponseQueryTimeInterval' query_time_interval: The Time interval that the query actually executed on.
        :param 'InsightsTableResultResponse' table_query_results: Query results for table insights query.
        """
        if chart_query_results is not None:
            pulumi.set(__self__, "chart_query_results", chart_query_results)
        if query_id is not None:
            pulumi.set(__self__, "query_id", query_id)
        if query_time_interval is not None:
            pulumi.set(__self__, "query_time_interval", query_time_interval)
        if table_query_results is not None:
            pulumi.set(__self__, "table_query_results", table_query_results)

    @property
    @pulumi.getter(name="chartQueryResults")
    def chart_query_results(self) -> Optional[Sequence['outputs.InsightsTableResultResponse']]:
        """
        Query results for table insights query.
        """
        return pulumi.get(self, "chart_query_results")

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> Optional[str]:
        """
        The query id of the insight
        """
        return pulumi.get(self, "query_id")

    @property
    @pulumi.getter(name="queryTimeInterval")
    def query_time_interval(self) -> Optional['outputs.EntityInsightItemResponseQueryTimeInterval']:
        """
        The Time interval that the query actually executed on.
        """
        return pulumi.get(self, "query_time_interval")

    @property
    @pulumi.getter(name="tableQueryResults")
    def table_query_results(self) -> Optional['outputs.InsightsTableResultResponse']:
        """
        Query results for table insights query.
        """
        return pulumi.get(self, "table_query_results")


@pulumi.output_type
class EntityInsightItemResponseQueryTimeInterval(dict):
    """
    The Time interval that the query actually executed on.
    """
    def __init__(__self__, *,
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None):
        """
        The Time interval that the query actually executed on.
        :param str end_time: Insight query end time
        :param str start_time: Insight query start time
        """
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        Insight query end time
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        Insight query start time
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetInsightsErrorKindResponse(dict):
    """
    GetInsights Query Errors.
    """
    def __init__(__self__, *,
                 error_message: str,
                 kind: str,
                 query_id: Optional[str] = None):
        """
        GetInsights Query Errors.
        :param str error_message: the error message
        :param str kind: the query kind
        :param str query_id: the query id
        """
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "kind", kind)
        if query_id is not None:
            pulumi.set(__self__, "query_id", query_id)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        """
        the error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        the query kind
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> Optional[str]:
        """
        the query id
        """
        return pulumi.get(self, "query_id")


@pulumi.output_type
class GetInsightsResultsMetadataResponse(dict):
    """
    Get Insights result metadata.
    """
    def __init__(__self__, *,
                 total_count: int,
                 errors: Optional[Sequence['outputs.GetInsightsErrorKindResponse']] = None):
        """
        Get Insights result metadata.
        :param int total_count: the total items found for the insights request
        :param Sequence['GetInsightsErrorKindResponse'] errors: information about the failed queries
        """
        pulumi.set(__self__, "total_count", total_count)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        the total items found for the insights request
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.GetInsightsErrorKindResponse']]:
        """
        information about the failed queries
        """
        return pulumi.get(self, "errors")


@pulumi.output_type
class InsightsTableResultResponse(dict):
    """
    Query results for table insights query.
    """
    def __init__(__self__, *,
                 columns: Optional[Sequence['outputs.InsightsTableResultResponseColumns']] = None,
                 rows: Optional[Sequence[Sequence[str]]] = None):
        """
        Query results for table insights query.
        :param Sequence['InsightsTableResultResponseColumns'] columns: Columns Metadata of the table
        :param Sequence[Sequence[str]] rows: Rows data of the table
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if rows is not None:
            pulumi.set(__self__, "rows", rows)

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence['outputs.InsightsTableResultResponseColumns']]:
        """
        Columns Metadata of the table
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def rows(self) -> Optional[Sequence[Sequence[str]]]:
        """
        Rows data of the table
        """
        return pulumi.get(self, "rows")


@pulumi.output_type
class InsightsTableResultResponseColumns(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: the name of the colum
        :param str type: the type of the colum
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        the name of the colum
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        the type of the colum
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class LockUserActionResponse(dict):
    """
    Represents lock user action.
    """
    def __init__(__self__, *,
                 kind: str,
                 failure_reason: Optional[str] = None,
                 user: Optional[str] = None):
        """
        Represents lock user action.
        :param str kind: The kind of the action
               Expected value is 'LockUser'.
        :param str failure_reason: The reason of the failure of the action. Empty if the action is successful.
        :param str user: The user to lock
        """
        pulumi.set(__self__, "kind", 'LockUser')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The kind of the action
        Expected value is 'LockUser'.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[str]:
        """
        The reason of the failure of the action. Empty if the action is successful.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        The user to lock
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class LogResponse(dict):
    """
    Describes a log.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bulkSize":
            suggest = "bulk_size"
        elif key == "ingestionType":
            suggest = "ingestion_type"
        elif key == "scheduleInterval":
            suggest = "schedule_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 bulk_size: Optional[int] = None,
                 filters: Optional[Sequence[str]] = None,
                 ingestion_type: Optional[str] = None,
                 schedule_interval: Optional[int] = None,
                 status: Optional[str] = None):
        """
        Describes a log.
        :param str type: Types of logs and tables.
        :param int bulk_size: The bulk size for the log.
        :param Sequence[str] filters: The filters for the log.
        :param str ingestion_type: Types of ingestion.
        :param int schedule_interval: The schedule interval in seconds.
        :param str status: Types of log status.
        """
        pulumi.set(__self__, "type", type)
        if bulk_size is not None:
            pulumi.set(__self__, "bulk_size", bulk_size)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if ingestion_type is not None:
            pulumi.set(__self__, "ingestion_type", ingestion_type)
        if schedule_interval is not None:
            pulumi.set(__self__, "schedule_interval", schedule_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Types of logs and tables.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="bulkSize")
    def bulk_size(self) -> Optional[int]:
        """
        The bulk size for the log.
        """
        return pulumi.get(self, "bulk_size")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence[str]]:
        """
        The filters for the log.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="ingestionType")
    def ingestion_type(self) -> Optional[str]:
        """
        Types of ingestion.
        """
        return pulumi.get(self, "ingestion_type")

    @property
    @pulumi.getter(name="scheduleInterval")
    def schedule_interval(self) -> Optional[int]:
        """
        The schedule interval in seconds.
        """
        return pulumi.get(self, "schedule_interval")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Types of log status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class RepoResponse(dict):
    """
    Represents a repository.
    """
    def __init__(__self__, *,
                 branches: Optional[Sequence[str]] = None,
                 full_name: Optional[str] = None,
                 installation_id: Optional[float] = None,
                 url: Optional[str] = None):
        """
        Represents a repository.
        :param Sequence[str] branches: Array of branches.
        :param str full_name: The name of the repository.
        :param float installation_id: The installation id of the repository.
        :param str url: The url to access the repository.
        """
        if branches is not None:
            pulumi.set(__self__, "branches", branches)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if installation_id is not None:
            pulumi.set(__self__, "installation_id", installation_id)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def branches(self) -> Optional[Sequence[str]]:
        """
        Array of branches.
        """
        return pulumi.get(self, "branches")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter(name="installationId")
    def installation_id(self) -> Optional[float]:
        """
        The installation id of the repository.
        """
        return pulumi.get(self, "installation_id")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The url to access the repository.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class RfcConnectorResponse(dict):
    """
    Describes the Rfc connector.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemId":
            suggest = "system_id"
        elif key == "systemNumber":
            suggest = "system_number"
        elif key == "abapServerHost":
            suggest = "abap_server_host"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "codePage":
            suggest = "code_page"
        elif key == "messageServerHost":
            suggest = "message_server_host"
        elif key == "messageServerService":
            suggest = "message_server_service"
        elif key == "sncQop":
            suggest = "snc_qop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RfcConnectorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RfcConnectorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RfcConnectorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client: str,
                 system_id: str,
                 system_number: str,
                 type: str,
                 abap_server_host: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 code_page: Optional[str] = None,
                 group: Optional[str] = None,
                 message_server_host: Optional[str] = None,
                 message_server_service: Optional[str] = None,
                 snc_qop: Optional[str] = None):
        """
        Describes the Rfc connector.
        :param str client: Client number of the ABAP server.
               Example - 001
        :param str system_id: System ID of the ABAP server.
               Example - A4H
        :param str system_number: System number of the ABAP server.
        :param str type: Represents the types of SAP systems.
               Expected value is 'Rfc'.
        :param str abap_server_host: FQDN, hostname, or IP address of the ABAP server.
        :param str authentication_type: The authentication type to SAP.
        :param str code_page: The SAP code page used for character encoding.
               Example - 1100
        :param str group: Logon group of the message server.
        :param str message_server_host: FQDN, hostname, or IP address of the Message server.
        :param str message_server_service: Port number, or service name (from /etc/services) of the message server.
        :param str snc_qop: SNC QOP.
               Options are 1, 2, 3, 8, 9.
        """
        pulumi.set(__self__, "client", client)
        pulumi.set(__self__, "system_id", system_id)
        pulumi.set(__self__, "system_number", system_number)
        pulumi.set(__self__, "type", 'Rfc')
        if abap_server_host is not None:
            pulumi.set(__self__, "abap_server_host", abap_server_host)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if code_page is not None:
            pulumi.set(__self__, "code_page", code_page)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if message_server_host is not None:
            pulumi.set(__self__, "message_server_host", message_server_host)
        if message_server_service is not None:
            pulumi.set(__self__, "message_server_service", message_server_service)
        if snc_qop is not None:
            pulumi.set(__self__, "snc_qop", snc_qop)

    @property
    @pulumi.getter
    def client(self) -> str:
        """
        Client number of the ABAP server.
        Example - 001
        """
        return pulumi.get(self, "client")

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> str:
        """
        System ID of the ABAP server.
        Example - A4H
        """
        return pulumi.get(self, "system_id")

    @property
    @pulumi.getter(name="systemNumber")
    def system_number(self) -> str:
        """
        System number of the ABAP server.
        """
        return pulumi.get(self, "system_number")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Represents the types of SAP systems.
        Expected value is 'Rfc'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="abapServerHost")
    def abap_server_host(self) -> Optional[str]:
        """
        FQDN, hostname, or IP address of the ABAP server.
        """
        return pulumi.get(self, "abap_server_host")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        """
        The authentication type to SAP.
        """
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="codePage")
    def code_page(self) -> Optional[str]:
        """
        The SAP code page used for character encoding.
        Example - 1100
        """
        return pulumi.get(self, "code_page")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Logon group of the message server.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="messageServerHost")
    def message_server_host(self) -> Optional[str]:
        """
        FQDN, hostname, or IP address of the Message server.
        """
        return pulumi.get(self, "message_server_host")

    @property
    @pulumi.getter(name="messageServerService")
    def message_server_service(self) -> Optional[str]:
        """
        Port number, or service name (from /etc/services) of the message server.
        """
        return pulumi.get(self, "message_server_service")

    @property
    @pulumi.getter(name="sncQop")
    def snc_qop(self) -> Optional[str]:
        """
        SNC QOP.
        Options are 1, 2, 3, 8, 9.
        """
        return pulumi.get(self, "snc_qop")


@pulumi.output_type
class SapAgentConfigurationResponse(dict):
    """
    Describes the configuration of a SAP Docker agent.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentContainerName":
            suggest = "agent_container_name"
        elif key == "keyVaultAuthenticationMode":
            suggest = "key_vault_authentication_mode"
        elif key == "keyVaultResourceId":
            suggest = "key_vault_resource_id"
        elif key == "sdkPath":
            suggest = "sdk_path"
        elif key == "secretSource":
            suggest = "secret_source"
        elif key == "sncPath":
            suggest = "snc_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SapAgentConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SapAgentConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SapAgentConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 agent_container_name: Optional[str] = None,
                 key_vault_authentication_mode: Optional[str] = None,
                 key_vault_resource_id: Optional[str] = None,
                 sdk_path: Optional[str] = None,
                 secret_source: Optional[str] = None,
                 snc_path: Optional[str] = None):
        """
        Describes the configuration of a SAP Docker agent.
        :param str type: Type of the agent
               Expected value is 'SAP'.
        :param str agent_container_name: The name of the docker agent.
               only letters with numbers, underscores and hyphens are allowed
               example: "my-agent"
        :param str key_vault_authentication_mode: The key mode of the agent.
               ManagedIdentity|ApplicationIdentity are the options
        :param str key_vault_resource_id: The key vault resource id to access the key vault.
               example: "/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.KeyVault/vaults/myVault"
        :param str sdk_path: The SDK path (a file not a folder) on the agent machine.
               example: "/path/to/nwrfc750P_8-70002755.zip"
        :param str secret_source: The secret source of the agent.
               AzureKeyVault is the option
        :param str snc_path: The SNC path (a folder not a file) on the agent machine.
               example: "/path/to/snc"
        """
        pulumi.set(__self__, "type", 'SAP')
        if agent_container_name is not None:
            pulumi.set(__self__, "agent_container_name", agent_container_name)
        if key_vault_authentication_mode is not None:
            pulumi.set(__self__, "key_vault_authentication_mode", key_vault_authentication_mode)
        if key_vault_resource_id is not None:
            pulumi.set(__self__, "key_vault_resource_id", key_vault_resource_id)
        if sdk_path is not None:
            pulumi.set(__self__, "sdk_path", sdk_path)
        if secret_source is not None:
            pulumi.set(__self__, "secret_source", secret_source)
        if snc_path is not None:
            pulumi.set(__self__, "snc_path", snc_path)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the agent
        Expected value is 'SAP'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="agentContainerName")
    def agent_container_name(self) -> Optional[str]:
        """
        The name of the docker agent.
        only letters with numbers, underscores and hyphens are allowed
        example: "my-agent"
        """
        return pulumi.get(self, "agent_container_name")

    @property
    @pulumi.getter(name="keyVaultAuthenticationMode")
    def key_vault_authentication_mode(self) -> Optional[str]:
        """
        The key mode of the agent.
        ManagedIdentity|ApplicationIdentity are the options
        """
        return pulumi.get(self, "key_vault_authentication_mode")

    @property
    @pulumi.getter(name="keyVaultResourceId")
    def key_vault_resource_id(self) -> Optional[str]:
        """
        The key vault resource id to access the key vault.
        example: "/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.KeyVault/vaults/myVault"
        """
        return pulumi.get(self, "key_vault_resource_id")

    @property
    @pulumi.getter(name="sdkPath")
    def sdk_path(self) -> Optional[str]:
        """
        The SDK path (a file not a folder) on the agent machine.
        example: "/path/to/nwrfc750P_8-70002755.zip"
        """
        return pulumi.get(self, "sdk_path")

    @property
    @pulumi.getter(name="secretSource")
    def secret_source(self) -> Optional[str]:
        """
        The secret source of the agent.
        AzureKeyVault is the option
        """
        return pulumi.get(self, "secret_source")

    @property
    @pulumi.getter(name="sncPath")
    def snc_path(self) -> Optional[str]:
        """
        The SNC path (a folder not a file) on the agent machine.
        example: "/path/to/snc"
        """
        return pulumi.get(self, "snc_path")


@pulumi.output_type
class SapControlConnectorResponse(dict):
    """
    Describes the SapControl connector configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpsConfiguration":
            suggest = "https_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SapControlConnectorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SapControlConnectorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SapControlConnectorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance: str,
                 server: str,
                 type: str,
                 https_configuration: Optional[str] = None,
                 port: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        Describes the SapControl connector configuration.
        :param str instance: The instance number. Only 2 digits are allowed.
        :param str server: The server name.
               FQDN or IP address.
        :param str type: Represents the types of SAP systems.
               Expected value is 'SapControl'.
        :param str https_configuration: Represents the types of HTTPS configuration to connect to the SapControl service.
        :param str port: The port of the SOAP connection to SAP Control.
        :param str timezone: The timezone.
               example: "GMT+0" or "GMT-8"
               default: "GMT+0"
        """
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "type", 'SapControl')
        if https_configuration is not None:
            pulumi.set(__self__, "https_configuration", https_configuration)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if timezone is None:
            timezone = 'GMT+0'
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def instance(self) -> str:
        """
        The instance number. Only 2 digits are allowed.
        """
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        The server name.
        FQDN or IP address.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Represents the types of SAP systems.
        Expected value is 'SapControl'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="httpsConfiguration")
    def https_configuration(self) -> Optional[str]:
        """
        Represents the types of HTTPS configuration to connect to the SapControl service.
        """
        return pulumi.get(self, "https_configuration")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        The port of the SOAP connection to SAP Control.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        The timezone.
        example: "GMT+0" or "GMT-8"
        default: "GMT+0"
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class SapSystemsConfigurationResponse(dict):
    """
    Describes the SAP configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureResourceId":
            suggest = "azure_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SapSystemsConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SapSystemsConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SapSystemsConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connector: Any,
                 type: str,
                 azure_resource_id: Optional[str] = None,
                 logs: Optional[Sequence['outputs.LogResponse']] = None):
        """
        Describes the SAP configuration.
        :param Union['RfcConnectorResponse', 'SapControlConnectorResponse'] connector: Base Model for SAP System Connector.
        :param str type: Represents the types of configuration for a system.
               Expected value is 'SAP'.
        :param str azure_resource_id: azure resource id
               example: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"
        :param Sequence['LogResponse'] logs: The logs configuration.
        """
        pulumi.set(__self__, "connector", connector)
        pulumi.set(__self__, "type", 'SAP')
        if azure_resource_id is not None:
            pulumi.set(__self__, "azure_resource_id", azure_resource_id)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)

    @property
    @pulumi.getter
    def connector(self) -> Any:
        """
        Base Model for SAP System Connector.
        """
        return pulumi.get(self, "connector")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Represents the types of configuration for a system.
        Expected value is 'SAP'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="azureResourceId")
    def azure_resource_id(self) -> Optional[str]:
        """
        azure resource id
        example: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"
        """
        return pulumi.get(self, "azure_resource_id")

    @property
    @pulumi.getter
    def logs(self) -> Optional[Sequence['outputs.LogResponse']]:
        """
        The logs configuration.
        """
        return pulumi.get(self, "logs")


@pulumi.output_type
class SecurityAlertTimelineItemResponse(dict):
    """
    Represents security alert timeline item.
    """
    def __init__(__self__, *,
                 alert_type: str,
                 azure_resource_id: str,
                 display_name: str,
                 end_time_utc: str,
                 intent: str,
                 kind: str,
                 severity: str,
                 start_time_utc: str,
                 time_generated: str,
                 description: Optional[str] = None,
                 product_name: Optional[str] = None,
                 techniques: Optional[Sequence[str]] = None):
        """
        Represents security alert timeline item.
        :param str alert_type: The name of the alert type.
        :param str azure_resource_id: The alert azure resource id.
        :param str display_name: The alert name.
        :param str end_time_utc: The alert end time.
        :param str intent: The intent of the alert.
        :param str kind: The entity query kind
               Expected value is 'SecurityAlert'.
        :param str severity: The alert severity.
        :param str start_time_utc: The alert start time.
        :param str time_generated: The alert generated time.
        :param str description: The alert description.
        :param str product_name: The alert product name.
        :param Sequence[str] techniques: The techniques of the alert.
        """
        pulumi.set(__self__, "alert_type", alert_type)
        pulumi.set(__self__, "azure_resource_id", azure_resource_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "end_time_utc", end_time_utc)
        pulumi.set(__self__, "intent", intent)
        pulumi.set(__self__, "kind", 'SecurityAlert')
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "start_time_utc", start_time_utc)
        pulumi.set(__self__, "time_generated", time_generated)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if techniques is not None:
            pulumi.set(__self__, "techniques", techniques)

    @property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> str:
        """
        The name of the alert type.
        """
        return pulumi.get(self, "alert_type")

    @property
    @pulumi.getter(name="azureResourceId")
    def azure_resource_id(self) -> str:
        """
        The alert azure resource id.
        """
        return pulumi.get(self, "azure_resource_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The alert name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> str:
        """
        The alert end time.
        """
        return pulumi.get(self, "end_time_utc")

    @property
    @pulumi.getter
    def intent(self) -> str:
        """
        The intent of the alert.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The entity query kind
        Expected value is 'SecurityAlert'.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        The alert severity.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> str:
        """
        The alert start time.
        """
        return pulumi.get(self, "start_time_utc")

    @property
    @pulumi.getter(name="timeGenerated")
    def time_generated(self) -> str:
        """
        The alert generated time.
        """
        return pulumi.get(self, "time_generated")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The alert description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        """
        The alert product name.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter
    def techniques(self) -> Optional[Sequence[str]]:
        """
        The techniques of the alert.
        """
        return pulumi.get(self, "techniques")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TimelineAggregationResponse(dict):
    """
    timeline aggregation information per kind
    """
    def __init__(__self__, *,
                 count: int,
                 kind: str):
        """
        timeline aggregation information per kind
        :param int count: the total items found for a kind
        :param str kind: the query kind
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        the total items found for a kind
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        the query kind
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class TimelineErrorResponse(dict):
    """
    Timeline Query Errors.
    """
    def __init__(__self__, *,
                 error_message: str,
                 kind: str,
                 query_id: Optional[str] = None):
        """
        Timeline Query Errors.
        :param str error_message: the error message
        :param str kind: the query kind
        :param str query_id: the query id
        """
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "kind", kind)
        if query_id is not None:
            pulumi.set(__self__, "query_id", query_id)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        """
        the error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        the query kind
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> Optional[str]:
        """
        the query id
        """
        return pulumi.get(self, "query_id")


@pulumi.output_type
class TimelineResultsMetadataResponse(dict):
    """
    Expansion result metadata.
    """
    def __init__(__self__, *,
                 aggregations: Sequence['outputs.TimelineAggregationResponse'],
                 total_count: int,
                 errors: Optional[Sequence['outputs.TimelineErrorResponse']] = None):
        """
        Expansion result metadata.
        :param Sequence['TimelineAggregationResponse'] aggregations: timeline aggregation per kind
        :param int total_count: the total items found for the timeline request
        :param Sequence['TimelineErrorResponse'] errors: information about the failure queries
        """
        pulumi.set(__self__, "aggregations", aggregations)
        pulumi.set(__self__, "total_count", total_count)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)

    @property
    @pulumi.getter
    def aggregations(self) -> Sequence['outputs.TimelineAggregationResponse']:
        """
        timeline aggregation per kind
        """
        return pulumi.get(self, "aggregations")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        the total items found for the timeline request
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.TimelineErrorResponse']]:
        """
        information about the failure queries
        """
        return pulumi.get(self, "errors")


@pulumi.output_type
class UnlockUserActionResponse(dict):
    """
    Represents an unlock user action.
    """
    def __init__(__self__, *,
                 kind: str,
                 failure_reason: Optional[str] = None,
                 user: Optional[str] = None):
        """
        Represents an unlock user action.
        :param str kind: The kind of the action
               Expected value is 'UnlockUser'.
        :param str failure_reason: The reason of the failure of the action. Empty if the action is successful.
        :param str user: The user to unlock
        """
        pulumi.set(__self__, "kind", 'UnlockUser')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The kind of the action
        Expected value is 'UnlockUser'.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[str]:
        """
        The reason of the failure of the action. Empty if the action is successful.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        The user to unlock
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class UserInfoResponse(dict):
    """
    User information that made some action
    """
    def __init__(__self__, *,
                 email: str,
                 name: str,
                 object_id: Optional[str] = None):
        """
        User information that made some action
        :param str email: The email of the user.
        :param str name: The name of the user.
        :param str object_id: The object id of the user.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "name", name)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email of the user.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the user.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[str]:
        """
        The object id of the user.
        """
        return pulumi.get(self, "object_id")


