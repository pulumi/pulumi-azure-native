# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AlertsDataTypeOfDataConnectorArgs',
    'AlertsDataTypeOfDataConnectorArgsDict',
    'AwsCloudTrailDataConnectorDataTypesLogsArgs',
    'AwsCloudTrailDataConnectorDataTypesLogsArgsDict',
    'AwsCloudTrailDataConnectorDataTypesArgs',
    'AwsCloudTrailDataConnectorDataTypesArgsDict',
    'DataConnectorDataTypeCommonArgs',
    'DataConnectorDataTypeCommonArgsDict',
    'MCASDataConnectorDataTypesArgs',
    'MCASDataConnectorDataTypesArgsDict',
    'MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs',
    'MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgsDict',
    'MSTIDataConnectorDataTypesArgs',
    'MSTIDataConnectorDataTypesArgsDict',
    'OfficeDataConnectorDataTypesExchangeArgs',
    'OfficeDataConnectorDataTypesExchangeArgsDict',
    'OfficeDataConnectorDataTypesSharePointArgs',
    'OfficeDataConnectorDataTypesSharePointArgsDict',
    'OfficeDataConnectorDataTypesTeamsArgs',
    'OfficeDataConnectorDataTypesTeamsArgsDict',
    'OfficeDataConnectorDataTypesArgs',
    'OfficeDataConnectorDataTypesArgsDict',
    'PremiumMdtiDataConnectorDataTypesConnectorArgs',
    'PremiumMdtiDataConnectorDataTypesConnectorArgsDict',
    'PremiumMdtiDataConnectorDataTypesArgs',
    'PremiumMdtiDataConnectorDataTypesArgsDict',
    'TIDataConnectorDataTypesIndicatorsArgs',
    'TIDataConnectorDataTypesIndicatorsArgsDict',
    'TIDataConnectorDataTypesArgs',
    'TIDataConnectorDataTypesArgsDict',
]

MYPY = False

if not MYPY:
    class AlertsDataTypeOfDataConnectorArgsDict(TypedDict):
        """
        Alerts data type for data connectors.
        """
        alerts: NotRequired[pulumi.Input['DataConnectorDataTypeCommonArgsDict']]
        """
        Alerts data type connection.
        """
elif False:
    AlertsDataTypeOfDataConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertsDataTypeOfDataConnectorArgs:
    def __init__(__self__, *,
                 alerts: Optional[pulumi.Input['DataConnectorDataTypeCommonArgs']] = None):
        """
        Alerts data type for data connectors.
        :param pulumi.Input['DataConnectorDataTypeCommonArgs'] alerts: Alerts data type connection.
        """
        if alerts is not None:
            pulumi.set(__self__, "alerts", alerts)

    @property
    @pulumi.getter
    def alerts(self) -> Optional[pulumi.Input['DataConnectorDataTypeCommonArgs']]:
        """
        Alerts data type connection.
        """
        return pulumi.get(self, "alerts")

    @alerts.setter
    def alerts(self, value: Optional[pulumi.Input['DataConnectorDataTypeCommonArgs']]):
        pulumi.set(self, "alerts", value)


if not MYPY:
    class AwsCloudTrailDataConnectorDataTypesLogsArgsDict(TypedDict):
        """
        Logs data type.
        """
        state: NotRequired[pulumi.Input[Union[str, 'DataTypeState']]]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    AwsCloudTrailDataConnectorDataTypesLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudTrailDataConnectorDataTypesLogsArgs:
    def __init__(__self__, *,
                 state: Optional[pulumi.Input[Union[str, 'DataTypeState']]] = None):
        """
        Logs data type.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'DataTypeState']]]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'DataTypeState']]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class AwsCloudTrailDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for Amazon Web Services CloudTrail data connector.
        """
        logs: NotRequired[pulumi.Input['AwsCloudTrailDataConnectorDataTypesLogsArgsDict']]
        """
        Logs data type.
        """
elif False:
    AwsCloudTrailDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudTrailDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 logs: Optional[pulumi.Input['AwsCloudTrailDataConnectorDataTypesLogsArgs']] = None):
        """
        The available data types for Amazon Web Services CloudTrail data connector.
        :param pulumi.Input['AwsCloudTrailDataConnectorDataTypesLogsArgs'] logs: Logs data type.
        """
        if logs is not None:
            pulumi.set(__self__, "logs", logs)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input['AwsCloudTrailDataConnectorDataTypesLogsArgs']]:
        """
        Logs data type.
        """
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input['AwsCloudTrailDataConnectorDataTypesLogsArgs']]):
        pulumi.set(self, "logs", value)


if not MYPY:
    class DataConnectorDataTypeCommonArgsDict(TypedDict):
        """
        Common field for data type in data connectors.
        """
        state: NotRequired[pulumi.Input[Union[str, 'DataTypeState']]]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    DataConnectorDataTypeCommonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataConnectorDataTypeCommonArgs:
    def __init__(__self__, *,
                 state: Optional[pulumi.Input[Union[str, 'DataTypeState']]] = None):
        """
        Common field for data type in data connectors.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'DataTypeState']]]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'DataTypeState']]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class MCASDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for MCAS (Microsoft Cloud App Security) data connector.
        """
        alerts: NotRequired[pulumi.Input['DataConnectorDataTypeCommonArgsDict']]
        """
        Alerts data type connection.
        """
        discovery_logs: NotRequired[pulumi.Input['DataConnectorDataTypeCommonArgsDict']]
        """
        Discovery log data type connection.
        """
elif False:
    MCASDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MCASDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 alerts: Optional[pulumi.Input['DataConnectorDataTypeCommonArgs']] = None,
                 discovery_logs: Optional[pulumi.Input['DataConnectorDataTypeCommonArgs']] = None):
        """
        The available data types for MCAS (Microsoft Cloud App Security) data connector.
        :param pulumi.Input['DataConnectorDataTypeCommonArgs'] alerts: Alerts data type connection.
        :param pulumi.Input['DataConnectorDataTypeCommonArgs'] discovery_logs: Discovery log data type connection.
        """
        if alerts is not None:
            pulumi.set(__self__, "alerts", alerts)
        if discovery_logs is not None:
            pulumi.set(__self__, "discovery_logs", discovery_logs)

    @property
    @pulumi.getter
    def alerts(self) -> Optional[pulumi.Input['DataConnectorDataTypeCommonArgs']]:
        """
        Alerts data type connection.
        """
        return pulumi.get(self, "alerts")

    @alerts.setter
    def alerts(self, value: Optional[pulumi.Input['DataConnectorDataTypeCommonArgs']]):
        pulumi.set(self, "alerts", value)

    @property
    @pulumi.getter(name="discoveryLogs")
    def discovery_logs(self) -> Optional[pulumi.Input['DataConnectorDataTypeCommonArgs']]:
        """
        Discovery log data type connection.
        """
        return pulumi.get(self, "discovery_logs")

    @discovery_logs.setter
    def discovery_logs(self, value: Optional[pulumi.Input['DataConnectorDataTypeCommonArgs']]):
        pulumi.set(self, "discovery_logs", value)


if not MYPY:
    class MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgsDict(TypedDict):
        """
        Data type for Microsoft Threat Intelligence data connector.
        """
        lookback_period: pulumi.Input[str]
        """
        The lookback period for the feed to be imported. The date-time to begin importing the feed from, for example: 2024-01-01T00:00:00.000Z.
        """
        state: NotRequired[pulumi.Input[Union[str, 'DataTypeState']]]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs:
    def __init__(__self__, *,
                 lookback_period: pulumi.Input[str],
                 state: Optional[pulumi.Input[Union[str, 'DataTypeState']]] = None):
        """
        Data type for Microsoft Threat Intelligence data connector.
        :param pulumi.Input[str] lookback_period: The lookback period for the feed to be imported. The date-time to begin importing the feed from, for example: 2024-01-01T00:00:00.000Z.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "lookback_period", lookback_period)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="lookbackPeriod")
    def lookback_period(self) -> pulumi.Input[str]:
        """
        The lookback period for the feed to be imported. The date-time to begin importing the feed from, for example: 2024-01-01T00:00:00.000Z.
        """
        return pulumi.get(self, "lookback_period")

    @lookback_period.setter
    def lookback_period(self, value: pulumi.Input[str]):
        pulumi.set(self, "lookback_period", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'DataTypeState']]]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'DataTypeState']]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class MSTIDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for Microsoft Threat Intelligence data connector.
        """
        microsoft_emerging_threat_feed: pulumi.Input['MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgsDict']
        """
        Data type for Microsoft Threat Intelligence data connector.
        """
elif False:
    MSTIDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MSTIDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 microsoft_emerging_threat_feed: pulumi.Input['MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs']):
        """
        The available data types for Microsoft Threat Intelligence data connector.
        :param pulumi.Input['MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs'] microsoft_emerging_threat_feed: Data type for Microsoft Threat Intelligence data connector.
        """
        pulumi.set(__self__, "microsoft_emerging_threat_feed", microsoft_emerging_threat_feed)

    @property
    @pulumi.getter(name="microsoftEmergingThreatFeed")
    def microsoft_emerging_threat_feed(self) -> pulumi.Input['MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs']:
        """
        Data type for Microsoft Threat Intelligence data connector.
        """
        return pulumi.get(self, "microsoft_emerging_threat_feed")

    @microsoft_emerging_threat_feed.setter
    def microsoft_emerging_threat_feed(self, value: pulumi.Input['MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs']):
        pulumi.set(self, "microsoft_emerging_threat_feed", value)


if not MYPY:
    class OfficeDataConnectorDataTypesExchangeArgsDict(TypedDict):
        """
        Exchange data type connection.
        """
        state: NotRequired[pulumi.Input[Union[str, 'DataTypeState']]]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    OfficeDataConnectorDataTypesExchangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OfficeDataConnectorDataTypesExchangeArgs:
    def __init__(__self__, *,
                 state: Optional[pulumi.Input[Union[str, 'DataTypeState']]] = None):
        """
        Exchange data type connection.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'DataTypeState']]]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'DataTypeState']]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class OfficeDataConnectorDataTypesSharePointArgsDict(TypedDict):
        """
        SharePoint data type connection.
        """
        state: NotRequired[pulumi.Input[Union[str, 'DataTypeState']]]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    OfficeDataConnectorDataTypesSharePointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OfficeDataConnectorDataTypesSharePointArgs:
    def __init__(__self__, *,
                 state: Optional[pulumi.Input[Union[str, 'DataTypeState']]] = None):
        """
        SharePoint data type connection.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'DataTypeState']]]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'DataTypeState']]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class OfficeDataConnectorDataTypesTeamsArgsDict(TypedDict):
        """
        Teams data type connection.
        """
        state: NotRequired[pulumi.Input[Union[str, 'DataTypeState']]]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    OfficeDataConnectorDataTypesTeamsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OfficeDataConnectorDataTypesTeamsArgs:
    def __init__(__self__, *,
                 state: Optional[pulumi.Input[Union[str, 'DataTypeState']]] = None):
        """
        Teams data type connection.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'DataTypeState']]]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'DataTypeState']]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class OfficeDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for office data connector.
        """
        exchange: NotRequired[pulumi.Input['OfficeDataConnectorDataTypesExchangeArgsDict']]
        """
        Exchange data type connection.
        """
        share_point: NotRequired[pulumi.Input['OfficeDataConnectorDataTypesSharePointArgsDict']]
        """
        SharePoint data type connection.
        """
        teams: NotRequired[pulumi.Input['OfficeDataConnectorDataTypesTeamsArgsDict']]
        """
        Teams data type connection.
        """
elif False:
    OfficeDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OfficeDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 exchange: Optional[pulumi.Input['OfficeDataConnectorDataTypesExchangeArgs']] = None,
                 share_point: Optional[pulumi.Input['OfficeDataConnectorDataTypesSharePointArgs']] = None,
                 teams: Optional[pulumi.Input['OfficeDataConnectorDataTypesTeamsArgs']] = None):
        """
        The available data types for office data connector.
        :param pulumi.Input['OfficeDataConnectorDataTypesExchangeArgs'] exchange: Exchange data type connection.
        :param pulumi.Input['OfficeDataConnectorDataTypesSharePointArgs'] share_point: SharePoint data type connection.
        :param pulumi.Input['OfficeDataConnectorDataTypesTeamsArgs'] teams: Teams data type connection.
        """
        if exchange is not None:
            pulumi.set(__self__, "exchange", exchange)
        if share_point is not None:
            pulumi.set(__self__, "share_point", share_point)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter
    def exchange(self) -> Optional[pulumi.Input['OfficeDataConnectorDataTypesExchangeArgs']]:
        """
        Exchange data type connection.
        """
        return pulumi.get(self, "exchange")

    @exchange.setter
    def exchange(self, value: Optional[pulumi.Input['OfficeDataConnectorDataTypesExchangeArgs']]):
        pulumi.set(self, "exchange", value)

    @property
    @pulumi.getter(name="sharePoint")
    def share_point(self) -> Optional[pulumi.Input['OfficeDataConnectorDataTypesSharePointArgs']]:
        """
        SharePoint data type connection.
        """
        return pulumi.get(self, "share_point")

    @share_point.setter
    def share_point(self, value: Optional[pulumi.Input['OfficeDataConnectorDataTypesSharePointArgs']]):
        pulumi.set(self, "share_point", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input['OfficeDataConnectorDataTypesTeamsArgs']]:
        """
        Teams data type connection.
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input['OfficeDataConnectorDataTypesTeamsArgs']]):
        pulumi.set(self, "teams", value)


if not MYPY:
    class PremiumMdtiDataConnectorDataTypesConnectorArgsDict(TypedDict):
        """
        Data type for Premium Microsoft Defender for Threat Intelligence data connector.
        """
        state: NotRequired[pulumi.Input[Union[str, 'DataTypeState']]]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    PremiumMdtiDataConnectorDataTypesConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PremiumMdtiDataConnectorDataTypesConnectorArgs:
    def __init__(__self__, *,
                 state: Optional[pulumi.Input[Union[str, 'DataTypeState']]] = None):
        """
        Data type for Premium Microsoft Defender for Threat Intelligence data connector.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'DataTypeState']]]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'DataTypeState']]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class PremiumMdtiDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for Premium Microsoft Defender for Threat Intelligence data connector.
        """
        connector: pulumi.Input['PremiumMdtiDataConnectorDataTypesConnectorArgsDict']
        """
        Data type for Premium Microsoft Defender for Threat Intelligence data connector.
        """
elif False:
    PremiumMdtiDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PremiumMdtiDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 connector: pulumi.Input['PremiumMdtiDataConnectorDataTypesConnectorArgs']):
        """
        The available data types for Premium Microsoft Defender for Threat Intelligence data connector.
        :param pulumi.Input['PremiumMdtiDataConnectorDataTypesConnectorArgs'] connector: Data type for Premium Microsoft Defender for Threat Intelligence data connector.
        """
        pulumi.set(__self__, "connector", connector)

    @property
    @pulumi.getter
    def connector(self) -> pulumi.Input['PremiumMdtiDataConnectorDataTypesConnectorArgs']:
        """
        Data type for Premium Microsoft Defender for Threat Intelligence data connector.
        """
        return pulumi.get(self, "connector")

    @connector.setter
    def connector(self, value: pulumi.Input['PremiumMdtiDataConnectorDataTypesConnectorArgs']):
        pulumi.set(self, "connector", value)


if not MYPY:
    class TIDataConnectorDataTypesIndicatorsArgsDict(TypedDict):
        """
        Data type for indicators connection.
        """
        state: NotRequired[pulumi.Input[Union[str, 'DataTypeState']]]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    TIDataConnectorDataTypesIndicatorsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TIDataConnectorDataTypesIndicatorsArgs:
    def __init__(__self__, *,
                 state: Optional[pulumi.Input[Union[str, 'DataTypeState']]] = None):
        """
        Data type for indicators connection.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'DataTypeState']]]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'DataTypeState']]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class TIDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for TI (Threat Intelligence) data connector.
        """
        indicators: NotRequired[pulumi.Input['TIDataConnectorDataTypesIndicatorsArgsDict']]
        """
        Data type for indicators connection.
        """
elif False:
    TIDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TIDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 indicators: Optional[pulumi.Input['TIDataConnectorDataTypesIndicatorsArgs']] = None):
        """
        The available data types for TI (Threat Intelligence) data connector.
        :param pulumi.Input['TIDataConnectorDataTypesIndicatorsArgs'] indicators: Data type for indicators connection.
        """
        if indicators is not None:
            pulumi.set(__self__, "indicators", indicators)

    @property
    @pulumi.getter
    def indicators(self) -> Optional[pulumi.Input['TIDataConnectorDataTypesIndicatorsArgs']]:
        """
        Data type for indicators connection.
        """
        return pulumi.get(self, "indicators")

    @indicators.setter
    def indicators(self, value: Optional[pulumi.Input['TIDataConnectorDataTypesIndicatorsArgs']]):
        pulumi.set(self, "indicators", value)


