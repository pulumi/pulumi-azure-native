# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['SystemArgs', 'System']

@pulumi.input_type
class SystemArgs:
    def __init__(__self__, *,
                 agent_resource_name: pulumi.Input[str],
                 configuration: pulumi.Input['SapSystemsConfigurationArgs'],
                 display_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 workspace_name: pulumi.Input[str],
                 status: Optional[pulumi.Input[Union[str, 'SystemStatusType']]] = None,
                 system_resource_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a System resource.
        :param pulumi.Input[str] agent_resource_name: Business Application Agent Name
        :param pulumi.Input['SapSystemsConfigurationArgs'] configuration: The configuration of the system.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] workspace_name: The name of the workspace.
        :param pulumi.Input[Union[str, 'SystemStatusType']] status: The status of the system.
        :param pulumi.Input[str] system_resource_name: The name of the system.
        """
        pulumi.set(__self__, "agent_resource_name", agent_resource_name)
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "workspace_name", workspace_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_resource_name is not None:
            pulumi.set(__self__, "system_resource_name", system_resource_name)

    @property
    @pulumi.getter(name="agentResourceName")
    def agent_resource_name(self) -> pulumi.Input[str]:
        """
        Business Application Agent Name
        """
        return pulumi.get(self, "agent_resource_name")

    @agent_resource_name.setter
    def agent_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "agent_resource_name", value)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['SapSystemsConfigurationArgs']:
        """
        The configuration of the system.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['SapSystemsConfigurationArgs']):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> pulumi.Input[str]:
        """
        The name of the workspace.
        """
        return pulumi.get(self, "workspace_name")

    @workspace_name.setter
    def workspace_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'SystemStatusType']]]:
        """
        The status of the system.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'SystemStatusType']]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="systemResourceName")
    def system_resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the system.
        """
        return pulumi.get(self, "system_resource_name")

    @system_resource_name.setter
    def system_resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_resource_name", value)


class System(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_resource_name: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input[Union['SapSystemsConfigurationArgs', 'SapSystemsConfigurationArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'SystemStatusType']]] = None,
                 system_resource_name: Optional[pulumi.Input[str]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Describes the system within the agent.
        Azure REST API version: 2024-04-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] agent_resource_name: Business Application Agent Name
        :param pulumi.Input[Union['SapSystemsConfigurationArgs', 'SapSystemsConfigurationArgsDict']] configuration: The configuration of the system.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[str, 'SystemStatusType']] status: The status of the system.
        :param pulumi.Input[str] system_resource_name: The name of the system.
        :param pulumi.Input[str] workspace_name: The name of the workspace.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Describes the system within the agent.
        Azure REST API version: 2024-04-01-preview.

        :param str resource_name: The name of the resource.
        :param SystemArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_resource_name: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input[Union['SapSystemsConfigurationArgs', 'SapSystemsConfigurationArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'SystemStatusType']]] = None,
                 system_resource_name: Optional[pulumi.Input[str]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemArgs.__new__(SystemArgs)

            if agent_resource_name is None and not opts.urn:
                raise TypeError("Missing required property 'agent_resource_name'")
            __props__.__dict__["agent_resource_name"] = agent_resource_name
            if configuration is None and not opts.urn:
                raise TypeError("Missing required property 'configuration'")
            __props__.__dict__["configuration"] = configuration
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["status"] = status
            __props__.__dict__["system_resource_name"] = system_resource_name
            if workspace_name is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_name'")
            __props__.__dict__["workspace_name"] = workspace_name
            __props__.__dict__["etag"] = None
            __props__.__dict__["last_modified_time_utc"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:securityinsights/v20240401preview:System")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(System, __self__).__init__(
            'azure-native:securityinsights:System',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'System':
        """
        Get an existing System resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SystemArgs.__new__(SystemArgs)

        __props__.__dict__["configuration"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["last_modified_time_utc"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        return System(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output['outputs.SapSystemsConfigurationResponse']:
        """
        The configuration of the system.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[Optional[str]]:
        """
        Etag of the azure resource
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="lastModifiedTimeUtc")
    def last_modified_time_utc(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_modified_time_utc")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        """
        The status of the system.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

