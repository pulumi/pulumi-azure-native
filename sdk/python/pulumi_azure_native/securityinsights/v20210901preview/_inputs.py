# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'ActivityEntityQueriesPropertiesQueryDefinitionsArgs',
    'ActivityEntityQueriesPropertiesQueryDefinitionsArgsDict',
    'AlertDetailsOverrideArgs',
    'AlertDetailsOverrideArgsDict',
    'AlertsDataTypeOfDataConnectorArgs',
    'AlertsDataTypeOfDataConnectorArgsDict',
    'AutomationRuleModifyPropertiesActionActionConfigurationArgs',
    'AutomationRuleModifyPropertiesActionActionConfigurationArgsDict',
    'AutomationRuleModifyPropertiesActionArgs',
    'AutomationRuleModifyPropertiesActionArgsDict',
    'AutomationRulePropertyValuesConditionConditionPropertiesArgs',
    'AutomationRulePropertyValuesConditionConditionPropertiesArgsDict',
    'AutomationRulePropertyValuesConditionArgs',
    'AutomationRulePropertyValuesConditionArgsDict',
    'AutomationRuleRunPlaybookActionActionConfigurationArgs',
    'AutomationRuleRunPlaybookActionActionConfigurationArgsDict',
    'AutomationRuleRunPlaybookActionArgs',
    'AutomationRuleRunPlaybookActionArgsDict',
    'AutomationRuleTriggeringLogicArgs',
    'AutomationRuleTriggeringLogicArgsDict',
    'AvailabilityArgs',
    'AvailabilityArgsDict',
    'AwsCloudTrailDataConnectorDataTypesLogsArgs',
    'AwsCloudTrailDataConnectorDataTypesLogsArgsDict',
    'AwsCloudTrailDataConnectorDataTypesArgs',
    'AwsCloudTrailDataConnectorDataTypesArgsDict',
    'AwsS3DataConnectorDataTypesLogsArgs',
    'AwsS3DataConnectorDataTypesLogsArgsDict',
    'AwsS3DataConnectorDataTypesArgs',
    'AwsS3DataConnectorDataTypesArgsDict',
    'CodelessConnectorPollingAuthPropertiesArgs',
    'CodelessConnectorPollingAuthPropertiesArgsDict',
    'CodelessConnectorPollingConfigPropertiesArgs',
    'CodelessConnectorPollingConfigPropertiesArgsDict',
    'CodelessConnectorPollingPagingPropertiesArgs',
    'CodelessConnectorPollingPagingPropertiesArgsDict',
    'CodelessConnectorPollingRequestPropertiesArgs',
    'CodelessConnectorPollingRequestPropertiesArgsDict',
    'CodelessConnectorPollingResponsePropertiesArgs',
    'CodelessConnectorPollingResponsePropertiesArgsDict',
    'CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs',
    'CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgsDict',
    'CodelessUiConnectorConfigPropertiesDataTypesArgs',
    'CodelessUiConnectorConfigPropertiesDataTypesArgsDict',
    'CodelessUiConnectorConfigPropertiesGraphQueriesArgs',
    'CodelessUiConnectorConfigPropertiesGraphQueriesArgsDict',
    'CodelessUiConnectorConfigPropertiesInstructionStepsArgs',
    'CodelessUiConnectorConfigPropertiesInstructionStepsArgsDict',
    'CodelessUiConnectorConfigPropertiesSampleQueriesArgs',
    'CodelessUiConnectorConfigPropertiesSampleQueriesArgsDict',
    'CodelessUiConnectorConfigPropertiesArgs',
    'CodelessUiConnectorConfigPropertiesArgsDict',
    'ContentPathMapArgs',
    'ContentPathMapArgsDict',
    'DataConnectorDataTypeCommonArgs',
    'DataConnectorDataTypeCommonArgsDict',
    'Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs',
    'Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgsDict',
    'Dynamics365DataConnectorDataTypesArgs',
    'Dynamics365DataConnectorDataTypesArgsDict',
    'EntityMappingArgs',
    'EntityMappingArgsDict',
    'EventGroupingSettingsArgs',
    'EventGroupingSettingsArgsDict',
    'FieldMappingArgs',
    'FieldMappingArgsDict',
    'GroupingConfigurationArgs',
    'GroupingConfigurationArgsDict',
    'IncidentConfigurationArgs',
    'IncidentConfigurationArgsDict',
    'IncidentInfoArgs',
    'IncidentInfoArgsDict',
    'IncidentLabelArgs',
    'IncidentLabelArgsDict',
    'IncidentOwnerInfoArgs',
    'IncidentOwnerInfoArgsDict',
    'InstructionStepsInstructionsArgs',
    'InstructionStepsInstructionsArgsDict',
    'MCASDataConnectorDataTypesArgs',
    'MCASDataConnectorDataTypesArgsDict',
    'MSTIDataConnectorDataTypesBingSafetyPhishingURLArgs',
    'MSTIDataConnectorDataTypesBingSafetyPhishingURLArgsDict',
    'MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs',
    'MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgsDict',
    'MSTIDataConnectorDataTypesArgs',
    'MSTIDataConnectorDataTypesArgsDict',
    'MTPDataConnectorDataTypesIncidentsArgs',
    'MTPDataConnectorDataTypesIncidentsArgsDict',
    'MTPDataConnectorDataTypesArgs',
    'MTPDataConnectorDataTypesArgsDict',
    'MetadataAuthorArgs',
    'MetadataAuthorArgsDict',
    'MetadataCategoriesArgs',
    'MetadataCategoriesArgsDict',
    'MetadataDependenciesArgs',
    'MetadataDependenciesArgsDict',
    'MetadataSourceArgs',
    'MetadataSourceArgsDict',
    'MetadataSupportArgs',
    'MetadataSupportArgsDict',
    'OfficeDataConnectorDataTypesExchangeArgs',
    'OfficeDataConnectorDataTypesExchangeArgsDict',
    'OfficeDataConnectorDataTypesSharePointArgs',
    'OfficeDataConnectorDataTypesSharePointArgsDict',
    'OfficeDataConnectorDataTypesTeamsArgs',
    'OfficeDataConnectorDataTypesTeamsArgsDict',
    'OfficeDataConnectorDataTypesArgs',
    'OfficeDataConnectorDataTypesArgsDict',
    'PermissionsCustomsArgs',
    'PermissionsCustomsArgsDict',
    'PermissionsResourceProviderArgs',
    'PermissionsResourceProviderArgsDict',
    'PermissionsArgs',
    'PermissionsArgsDict',
    'RepositoryArgs',
    'RepositoryArgsDict',
    'RequiredPermissionsArgs',
    'RequiredPermissionsArgsDict',
    'TIDataConnectorDataTypesIndicatorsArgs',
    'TIDataConnectorDataTypesIndicatorsArgsDict',
    'TIDataConnectorDataTypesArgs',
    'TIDataConnectorDataTypesArgsDict',
    'ThreatIntelligenceExternalReferenceArgs',
    'ThreatIntelligenceExternalReferenceArgsDict',
    'ThreatIntelligenceGranularMarkingModelArgs',
    'ThreatIntelligenceGranularMarkingModelArgsDict',
    'ThreatIntelligenceKillChainPhaseArgs',
    'ThreatIntelligenceKillChainPhaseArgsDict',
    'ThreatIntelligenceParsedPatternTypeValueArgs',
    'ThreatIntelligenceParsedPatternTypeValueArgsDict',
    'ThreatIntelligenceParsedPatternArgs',
    'ThreatIntelligenceParsedPatternArgsDict',
    'TiTaxiiDataConnectorDataTypesTaxiiClientArgs',
    'TiTaxiiDataConnectorDataTypesTaxiiClientArgsDict',
    'TiTaxiiDataConnectorDataTypesArgs',
    'TiTaxiiDataConnectorDataTypesArgsDict',
    'UserInfoArgs',
    'UserInfoArgsDict',
    'WatchlistUserInfoArgs',
    'WatchlistUserInfoArgsDict',
]

MYPY = False

if not MYPY:
    class ActivityEntityQueriesPropertiesQueryDefinitionsArgsDict(TypedDict):
        """
        The Activity query definitions
        """
        query: NotRequired[pulumi.Input[str]]
        """
        The Activity query to run on a given entity
        """
elif False:
    ActivityEntityQueriesPropertiesQueryDefinitionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActivityEntityQueriesPropertiesQueryDefinitionsArgs:
    def __init__(__self__, *,
                 query: Optional[pulumi.Input[str]] = None):
        """
        The Activity query definitions
        :param pulumi.Input[str] query: The Activity query to run on a given entity
        """
        if query is not None:
            pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        The Activity query to run on a given entity
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)


if not MYPY:
    class AlertDetailsOverrideArgsDict(TypedDict):
        """
        Settings for how to dynamically override alert static details
        """
        alert_description_format: NotRequired[pulumi.Input[str]]
        """
        the format containing columns name(s) to override the alert description
        """
        alert_display_name_format: NotRequired[pulumi.Input[str]]
        """
        the format containing columns name(s) to override the alert name
        """
        alert_severity_column_name: NotRequired[pulumi.Input[str]]
        """
        the column name to take the alert severity from
        """
        alert_tactics_column_name: NotRequired[pulumi.Input[str]]
        """
        the column name to take the alert tactics from
        """
elif False:
    AlertDetailsOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertDetailsOverrideArgs:
    def __init__(__self__, *,
                 alert_description_format: Optional[pulumi.Input[str]] = None,
                 alert_display_name_format: Optional[pulumi.Input[str]] = None,
                 alert_severity_column_name: Optional[pulumi.Input[str]] = None,
                 alert_tactics_column_name: Optional[pulumi.Input[str]] = None):
        """
        Settings for how to dynamically override alert static details
        :param pulumi.Input[str] alert_description_format: the format containing columns name(s) to override the alert description
        :param pulumi.Input[str] alert_display_name_format: the format containing columns name(s) to override the alert name
        :param pulumi.Input[str] alert_severity_column_name: the column name to take the alert severity from
        :param pulumi.Input[str] alert_tactics_column_name: the column name to take the alert tactics from
        """
        if alert_description_format is not None:
            pulumi.set(__self__, "alert_description_format", alert_description_format)
        if alert_display_name_format is not None:
            pulumi.set(__self__, "alert_display_name_format", alert_display_name_format)
        if alert_severity_column_name is not None:
            pulumi.set(__self__, "alert_severity_column_name", alert_severity_column_name)
        if alert_tactics_column_name is not None:
            pulumi.set(__self__, "alert_tactics_column_name", alert_tactics_column_name)

    @property
    @pulumi.getter(name="alertDescriptionFormat")
    def alert_description_format(self) -> Optional[pulumi.Input[str]]:
        """
        the format containing columns name(s) to override the alert description
        """
        return pulumi.get(self, "alert_description_format")

    @alert_description_format.setter
    def alert_description_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_description_format", value)

    @property
    @pulumi.getter(name="alertDisplayNameFormat")
    def alert_display_name_format(self) -> Optional[pulumi.Input[str]]:
        """
        the format containing columns name(s) to override the alert name
        """
        return pulumi.get(self, "alert_display_name_format")

    @alert_display_name_format.setter
    def alert_display_name_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_display_name_format", value)

    @property
    @pulumi.getter(name="alertSeverityColumnName")
    def alert_severity_column_name(self) -> Optional[pulumi.Input[str]]:
        """
        the column name to take the alert severity from
        """
        return pulumi.get(self, "alert_severity_column_name")

    @alert_severity_column_name.setter
    def alert_severity_column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_severity_column_name", value)

    @property
    @pulumi.getter(name="alertTacticsColumnName")
    def alert_tactics_column_name(self) -> Optional[pulumi.Input[str]]:
        """
        the column name to take the alert tactics from
        """
        return pulumi.get(self, "alert_tactics_column_name")

    @alert_tactics_column_name.setter
    def alert_tactics_column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_tactics_column_name", value)


if not MYPY:
    class AlertsDataTypeOfDataConnectorArgsDict(TypedDict):
        """
        Alerts data type for data connectors.
        """
        alerts: pulumi.Input['DataConnectorDataTypeCommonArgsDict']
        """
        Alerts data type connection.
        """
elif False:
    AlertsDataTypeOfDataConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertsDataTypeOfDataConnectorArgs:
    def __init__(__self__, *,
                 alerts: pulumi.Input['DataConnectorDataTypeCommonArgs']):
        """
        Alerts data type for data connectors.
        :param pulumi.Input['DataConnectorDataTypeCommonArgs'] alerts: Alerts data type connection.
        """
        pulumi.set(__self__, "alerts", alerts)

    @property
    @pulumi.getter
    def alerts(self) -> pulumi.Input['DataConnectorDataTypeCommonArgs']:
        """
        Alerts data type connection.
        """
        return pulumi.get(self, "alerts")

    @alerts.setter
    def alerts(self, value: pulumi.Input['DataConnectorDataTypeCommonArgs']):
        pulumi.set(self, "alerts", value)


if not MYPY:
    class AutomationRuleModifyPropertiesActionActionConfigurationArgsDict(TypedDict):
        """
        The configuration of the modify properties automation rule action
        """
        classification: NotRequired[pulumi.Input[Union[str, 'IncidentClassification']]]
        """
        The reason the incident was closed
        """
        classification_comment: NotRequired[pulumi.Input[str]]
        """
        Describes the reason the incident was closed
        """
        classification_reason: NotRequired[pulumi.Input[Union[str, 'IncidentClassificationReason']]]
        """
        The classification reason the incident was closed with
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input['IncidentLabelArgsDict']]]]
        """
        List of labels to add to the incident
        """
        owner: NotRequired[pulumi.Input['IncidentOwnerInfoArgsDict']]
        """
        Describes a user that the incident is assigned to
        """
        severity: NotRequired[pulumi.Input[Union[str, 'IncidentSeverity']]]
        """
        The severity of the incident
        """
        status: NotRequired[pulumi.Input[Union[str, 'IncidentStatus']]]
        """
        The status of the incident
        """
elif False:
    AutomationRuleModifyPropertiesActionActionConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutomationRuleModifyPropertiesActionActionConfigurationArgs:
    def __init__(__self__, *,
                 classification: Optional[pulumi.Input[Union[str, 'IncidentClassification']]] = None,
                 classification_comment: Optional[pulumi.Input[str]] = None,
                 classification_reason: Optional[pulumi.Input[Union[str, 'IncidentClassificationReason']]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['IncidentLabelArgs']]]] = None,
                 owner: Optional[pulumi.Input['IncidentOwnerInfoArgs']] = None,
                 severity: Optional[pulumi.Input[Union[str, 'IncidentSeverity']]] = None,
                 status: Optional[pulumi.Input[Union[str, 'IncidentStatus']]] = None):
        """
        The configuration of the modify properties automation rule action
        :param pulumi.Input[Union[str, 'IncidentClassification']] classification: The reason the incident was closed
        :param pulumi.Input[str] classification_comment: Describes the reason the incident was closed
        :param pulumi.Input[Union[str, 'IncidentClassificationReason']] classification_reason: The classification reason the incident was closed with
        :param pulumi.Input[Sequence[pulumi.Input['IncidentLabelArgs']]] labels: List of labels to add to the incident
        :param pulumi.Input['IncidentOwnerInfoArgs'] owner: Describes a user that the incident is assigned to
        :param pulumi.Input[Union[str, 'IncidentSeverity']] severity: The severity of the incident
        :param pulumi.Input[Union[str, 'IncidentStatus']] status: The status of the incident
        """
        if classification is not None:
            pulumi.set(__self__, "classification", classification)
        if classification_comment is not None:
            pulumi.set(__self__, "classification_comment", classification_comment)
        if classification_reason is not None:
            pulumi.set(__self__, "classification_reason", classification_reason)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def classification(self) -> Optional[pulumi.Input[Union[str, 'IncidentClassification']]]:
        """
        The reason the incident was closed
        """
        return pulumi.get(self, "classification")

    @classification.setter
    def classification(self, value: Optional[pulumi.Input[Union[str, 'IncidentClassification']]]):
        pulumi.set(self, "classification", value)

    @property
    @pulumi.getter(name="classificationComment")
    def classification_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Describes the reason the incident was closed
        """
        return pulumi.get(self, "classification_comment")

    @classification_comment.setter
    def classification_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "classification_comment", value)

    @property
    @pulumi.getter(name="classificationReason")
    def classification_reason(self) -> Optional[pulumi.Input[Union[str, 'IncidentClassificationReason']]]:
        """
        The classification reason the incident was closed with
        """
        return pulumi.get(self, "classification_reason")

    @classification_reason.setter
    def classification_reason(self, value: Optional[pulumi.Input[Union[str, 'IncidentClassificationReason']]]):
        pulumi.set(self, "classification_reason", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IncidentLabelArgs']]]]:
        """
        List of labels to add to the incident
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IncidentLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input['IncidentOwnerInfoArgs']]:
        """
        Describes a user that the incident is assigned to
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input['IncidentOwnerInfoArgs']]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[Union[str, 'IncidentSeverity']]]:
        """
        The severity of the incident
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[Union[str, 'IncidentSeverity']]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'IncidentStatus']]]:
        """
        The status of the incident
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'IncidentStatus']]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class AutomationRuleModifyPropertiesActionArgsDict(TypedDict):
        """
        Describes an automation rule action to modify an object's properties
        """
        action_configuration: pulumi.Input['AutomationRuleModifyPropertiesActionActionConfigurationArgsDict']
        """
        The configuration of the modify properties automation rule action
        """
        action_type: pulumi.Input[str]
        """
        The type of the automation rule action
        Expected value is 'ModifyProperties'.
        """
        order: pulumi.Input[int]
        """
        The order of execution of the automation rule action
        """
elif False:
    AutomationRuleModifyPropertiesActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutomationRuleModifyPropertiesActionArgs:
    def __init__(__self__, *,
                 action_configuration: pulumi.Input['AutomationRuleModifyPropertiesActionActionConfigurationArgs'],
                 action_type: pulumi.Input[str],
                 order: pulumi.Input[int]):
        """
        Describes an automation rule action to modify an object's properties
        :param pulumi.Input['AutomationRuleModifyPropertiesActionActionConfigurationArgs'] action_configuration: The configuration of the modify properties automation rule action
        :param pulumi.Input[str] action_type: The type of the automation rule action
               Expected value is 'ModifyProperties'.
        :param pulumi.Input[int] order: The order of execution of the automation rule action
        """
        pulumi.set(__self__, "action_configuration", action_configuration)
        pulumi.set(__self__, "action_type", 'ModifyProperties')
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter(name="actionConfiguration")
    def action_configuration(self) -> pulumi.Input['AutomationRuleModifyPropertiesActionActionConfigurationArgs']:
        """
        The configuration of the modify properties automation rule action
        """
        return pulumi.get(self, "action_configuration")

    @action_configuration.setter
    def action_configuration(self, value: pulumi.Input['AutomationRuleModifyPropertiesActionActionConfigurationArgs']):
        pulumi.set(self, "action_configuration", value)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        """
        The type of the automation rule action
        Expected value is 'ModifyProperties'.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        """
        The order of execution of the automation rule action
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)


if not MYPY:
    class AutomationRulePropertyValuesConditionConditionPropertiesArgsDict(TypedDict):
        """
        The configuration of the automation rule condition
        """
        operator: NotRequired[pulumi.Input[Union[str, 'AutomationRulePropertyConditionSupportedOperator']]]
        """
        The operator to use for evaluation the condition
        """
        property_name: NotRequired[pulumi.Input[Union[str, 'AutomationRulePropertyConditionSupportedProperty']]]
        """
        The property to evaluate
        """
        property_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The values to use for evaluating the condition
        """
elif False:
    AutomationRulePropertyValuesConditionConditionPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutomationRulePropertyValuesConditionConditionPropertiesArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[Union[str, 'AutomationRulePropertyConditionSupportedOperator']]] = None,
                 property_name: Optional[pulumi.Input[Union[str, 'AutomationRulePropertyConditionSupportedProperty']]] = None,
                 property_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The configuration of the automation rule condition
        :param pulumi.Input[Union[str, 'AutomationRulePropertyConditionSupportedOperator']] operator: The operator to use for evaluation the condition
        :param pulumi.Input[Union[str, 'AutomationRulePropertyConditionSupportedProperty']] property_name: The property to evaluate
        :param pulumi.Input[Sequence[pulumi.Input[str]]] property_values: The values to use for evaluating the condition
        """
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if property_name is not None:
            pulumi.set(__self__, "property_name", property_name)
        if property_values is not None:
            pulumi.set(__self__, "property_values", property_values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[Union[str, 'AutomationRulePropertyConditionSupportedOperator']]]:
        """
        The operator to use for evaluation the condition
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[Union[str, 'AutomationRulePropertyConditionSupportedOperator']]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> Optional[pulumi.Input[Union[str, 'AutomationRulePropertyConditionSupportedProperty']]]:
        """
        The property to evaluate
        """
        return pulumi.get(self, "property_name")

    @property_name.setter
    def property_name(self, value: Optional[pulumi.Input[Union[str, 'AutomationRulePropertyConditionSupportedProperty']]]):
        pulumi.set(self, "property_name", value)

    @property
    @pulumi.getter(name="propertyValues")
    def property_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The values to use for evaluating the condition
        """
        return pulumi.get(self, "property_values")

    @property_values.setter
    def property_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_values", value)


if not MYPY:
    class AutomationRulePropertyValuesConditionArgsDict(TypedDict):
        """
        Describes an automation rule condition that evaluates a property's value
        """
        condition_properties: pulumi.Input['AutomationRulePropertyValuesConditionConditionPropertiesArgsDict']
        """
        The configuration of the automation rule condition
        """
        condition_type: pulumi.Input[str]
        """
        The type of the automation rule condition
        Expected value is 'Property'.
        """
elif False:
    AutomationRulePropertyValuesConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutomationRulePropertyValuesConditionArgs:
    def __init__(__self__, *,
                 condition_properties: pulumi.Input['AutomationRulePropertyValuesConditionConditionPropertiesArgs'],
                 condition_type: pulumi.Input[str]):
        """
        Describes an automation rule condition that evaluates a property's value
        :param pulumi.Input['AutomationRulePropertyValuesConditionConditionPropertiesArgs'] condition_properties: The configuration of the automation rule condition
        :param pulumi.Input[str] condition_type: The type of the automation rule condition
               Expected value is 'Property'.
        """
        pulumi.set(__self__, "condition_properties", condition_properties)
        pulumi.set(__self__, "condition_type", 'Property')

    @property
    @pulumi.getter(name="conditionProperties")
    def condition_properties(self) -> pulumi.Input['AutomationRulePropertyValuesConditionConditionPropertiesArgs']:
        """
        The configuration of the automation rule condition
        """
        return pulumi.get(self, "condition_properties")

    @condition_properties.setter
    def condition_properties(self, value: pulumi.Input['AutomationRulePropertyValuesConditionConditionPropertiesArgs']):
        pulumi.set(self, "condition_properties", value)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> pulumi.Input[str]:
        """
        The type of the automation rule condition
        Expected value is 'Property'.
        """
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition_type", value)


if not MYPY:
    class AutomationRuleRunPlaybookActionActionConfigurationArgsDict(TypedDict):
        """
        The configuration of the run playbook automation rule action
        """
        logic_app_resource_id: NotRequired[pulumi.Input[str]]
        """
        The resource id of the playbook resource
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        The tenant id of the playbook resource
        """
elif False:
    AutomationRuleRunPlaybookActionActionConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutomationRuleRunPlaybookActionActionConfigurationArgs:
    def __init__(__self__, *,
                 logic_app_resource_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        The configuration of the run playbook automation rule action
        :param pulumi.Input[str] logic_app_resource_id: The resource id of the playbook resource
        :param pulumi.Input[str] tenant_id: The tenant id of the playbook resource
        """
        if logic_app_resource_id is not None:
            pulumi.set(__self__, "logic_app_resource_id", logic_app_resource_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="logicAppResourceId")
    def logic_app_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource id of the playbook resource
        """
        return pulumi.get(self, "logic_app_resource_id")

    @logic_app_resource_id.setter
    def logic_app_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logic_app_resource_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The tenant id of the playbook resource
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:
    class AutomationRuleRunPlaybookActionArgsDict(TypedDict):
        """
        Describes an automation rule action to run a playbook
        """
        action_configuration: pulumi.Input['AutomationRuleRunPlaybookActionActionConfigurationArgsDict']
        """
        The configuration of the run playbook automation rule action
        """
        action_type: pulumi.Input[str]
        """
        The type of the automation rule action
        Expected value is 'RunPlaybook'.
        """
        order: pulumi.Input[int]
        """
        The order of execution of the automation rule action
        """
elif False:
    AutomationRuleRunPlaybookActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutomationRuleRunPlaybookActionArgs:
    def __init__(__self__, *,
                 action_configuration: pulumi.Input['AutomationRuleRunPlaybookActionActionConfigurationArgs'],
                 action_type: pulumi.Input[str],
                 order: pulumi.Input[int]):
        """
        Describes an automation rule action to run a playbook
        :param pulumi.Input['AutomationRuleRunPlaybookActionActionConfigurationArgs'] action_configuration: The configuration of the run playbook automation rule action
        :param pulumi.Input[str] action_type: The type of the automation rule action
               Expected value is 'RunPlaybook'.
        :param pulumi.Input[int] order: The order of execution of the automation rule action
        """
        pulumi.set(__self__, "action_configuration", action_configuration)
        pulumi.set(__self__, "action_type", 'RunPlaybook')
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter(name="actionConfiguration")
    def action_configuration(self) -> pulumi.Input['AutomationRuleRunPlaybookActionActionConfigurationArgs']:
        """
        The configuration of the run playbook automation rule action
        """
        return pulumi.get(self, "action_configuration")

    @action_configuration.setter
    def action_configuration(self, value: pulumi.Input['AutomationRuleRunPlaybookActionActionConfigurationArgs']):
        pulumi.set(self, "action_configuration", value)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        """
        The type of the automation rule action
        Expected value is 'RunPlaybook'.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        """
        The order of execution of the automation rule action
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)


if not MYPY:
    class AutomationRuleTriggeringLogicArgsDict(TypedDict):
        """
        Describes automation rule triggering logic
        """
        is_enabled: pulumi.Input[bool]
        """
        Determines whether the automation rule is enabled or disabled.
        """
        triggers_on: pulumi.Input[Union[str, 'TriggersOn']]
        """
        The type of object the automation rule triggers on
        """
        triggers_when: pulumi.Input[Union[str, 'TriggersWhen']]
        """
        The type of event the automation rule triggers on
        """
        conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['AutomationRulePropertyValuesConditionArgsDict']]]]
        """
        The conditions to evaluate to determine if the automation rule should be triggered on a given object
        """
        expiration_time_utc: NotRequired[pulumi.Input[str]]
        """
        Determines when the automation rule should automatically expire and be disabled.
        """
elif False:
    AutomationRuleTriggeringLogicArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutomationRuleTriggeringLogicArgs:
    def __init__(__self__, *,
                 is_enabled: pulumi.Input[bool],
                 triggers_on: pulumi.Input[Union[str, 'TriggersOn']],
                 triggers_when: pulumi.Input[Union[str, 'TriggersWhen']],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRulePropertyValuesConditionArgs']]]] = None,
                 expiration_time_utc: Optional[pulumi.Input[str]] = None):
        """
        Describes automation rule triggering logic
        :param pulumi.Input[bool] is_enabled: Determines whether the automation rule is enabled or disabled.
        :param pulumi.Input[Union[str, 'TriggersOn']] triggers_on: The type of object the automation rule triggers on
        :param pulumi.Input[Union[str, 'TriggersWhen']] triggers_when: The type of event the automation rule triggers on
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRulePropertyValuesConditionArgs']]] conditions: The conditions to evaluate to determine if the automation rule should be triggered on a given object
        :param pulumi.Input[str] expiration_time_utc: Determines when the automation rule should automatically expire and be disabled.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "triggers_on", triggers_on)
        pulumi.set(__self__, "triggers_when", triggers_when)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if expiration_time_utc is not None:
            pulumi.set(__self__, "expiration_time_utc", expiration_time_utc)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Determines whether the automation rule is enabled or disabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="triggersOn")
    def triggers_on(self) -> pulumi.Input[Union[str, 'TriggersOn']]:
        """
        The type of object the automation rule triggers on
        """
        return pulumi.get(self, "triggers_on")

    @triggers_on.setter
    def triggers_on(self, value: pulumi.Input[Union[str, 'TriggersOn']]):
        pulumi.set(self, "triggers_on", value)

    @property
    @pulumi.getter(name="triggersWhen")
    def triggers_when(self) -> pulumi.Input[Union[str, 'TriggersWhen']]:
        """
        The type of event the automation rule triggers on
        """
        return pulumi.get(self, "triggers_when")

    @triggers_when.setter
    def triggers_when(self, value: pulumi.Input[Union[str, 'TriggersWhen']]):
        pulumi.set(self, "triggers_when", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRulePropertyValuesConditionArgs']]]]:
        """
        The conditions to evaluate to determine if the automation rule should be triggered on a given object
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRulePropertyValuesConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="expirationTimeUtc")
    def expiration_time_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Determines when the automation rule should automatically expire and be disabled.
        """
        return pulumi.get(self, "expiration_time_utc")

    @expiration_time_utc.setter
    def expiration_time_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_time_utc", value)


if not MYPY:
    class AvailabilityArgsDict(TypedDict):
        """
        Connector Availability Status
        """
        is_preview: NotRequired[pulumi.Input[bool]]
        """
        Set connector as preview
        """
        status: NotRequired[pulumi.Input[int]]
        """
        The connector Availability Status
        """
elif False:
    AvailabilityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AvailabilityArgs:
    def __init__(__self__, *,
                 is_preview: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[int]] = None):
        """
        Connector Availability Status
        :param pulumi.Input[bool] is_preview: Set connector as preview
        :param pulumi.Input[int] status: The connector Availability Status
        """
        if is_preview is not None:
            pulumi.set(__self__, "is_preview", is_preview)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="isPreview")
    def is_preview(self) -> Optional[pulumi.Input[bool]]:
        """
        Set connector as preview
        """
        return pulumi.get(self, "is_preview")

    @is_preview.setter
    def is_preview(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_preview", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        The connector Availability Status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class AwsCloudTrailDataConnectorDataTypesLogsArgsDict(TypedDict):
        """
        Logs data type.
        """
        state: pulumi.Input[Union[str, 'DataTypeState']]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    AwsCloudTrailDataConnectorDataTypesLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudTrailDataConnectorDataTypesLogsArgs:
    def __init__(__self__, *,
                 state: pulumi.Input[Union[str, 'DataTypeState']]):
        """
        Logs data type.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Union[str, 'DataTypeState']]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Union[str, 'DataTypeState']]):
        pulumi.set(self, "state", value)


if not MYPY:
    class AwsCloudTrailDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for Amazon Web Services CloudTrail data connector.
        """
        logs: pulumi.Input['AwsCloudTrailDataConnectorDataTypesLogsArgsDict']
        """
        Logs data type.
        """
elif False:
    AwsCloudTrailDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudTrailDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 logs: pulumi.Input['AwsCloudTrailDataConnectorDataTypesLogsArgs']):
        """
        The available data types for Amazon Web Services CloudTrail data connector.
        :param pulumi.Input['AwsCloudTrailDataConnectorDataTypesLogsArgs'] logs: Logs data type.
        """
        pulumi.set(__self__, "logs", logs)

    @property
    @pulumi.getter
    def logs(self) -> pulumi.Input['AwsCloudTrailDataConnectorDataTypesLogsArgs']:
        """
        Logs data type.
        """
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: pulumi.Input['AwsCloudTrailDataConnectorDataTypesLogsArgs']):
        pulumi.set(self, "logs", value)


if not MYPY:
    class AwsS3DataConnectorDataTypesLogsArgsDict(TypedDict):
        """
        Logs data type.
        """
        state: pulumi.Input[Union[str, 'DataTypeState']]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    AwsS3DataConnectorDataTypesLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsS3DataConnectorDataTypesLogsArgs:
    def __init__(__self__, *,
                 state: pulumi.Input[Union[str, 'DataTypeState']]):
        """
        Logs data type.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Union[str, 'DataTypeState']]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Union[str, 'DataTypeState']]):
        pulumi.set(self, "state", value)


if not MYPY:
    class AwsS3DataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for Amazon Web Services S3 data connector.
        """
        logs: pulumi.Input['AwsS3DataConnectorDataTypesLogsArgsDict']
        """
        Logs data type.
        """
elif False:
    AwsS3DataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsS3DataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 logs: pulumi.Input['AwsS3DataConnectorDataTypesLogsArgs']):
        """
        The available data types for Amazon Web Services S3 data connector.
        :param pulumi.Input['AwsS3DataConnectorDataTypesLogsArgs'] logs: Logs data type.
        """
        pulumi.set(__self__, "logs", logs)

    @property
    @pulumi.getter
    def logs(self) -> pulumi.Input['AwsS3DataConnectorDataTypesLogsArgs']:
        """
        Logs data type.
        """
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: pulumi.Input['AwsS3DataConnectorDataTypesLogsArgs']):
        pulumi.set(self, "logs", value)


if not MYPY:
    class CodelessConnectorPollingAuthPropertiesArgsDict(TypedDict):
        """
        Describe the authentication properties needed to successfully authenticate with the server
        """
        auth_type: pulumi.Input[str]
        """
        The authentication type
        """
        api_key_identifier: NotRequired[pulumi.Input[str]]
        """
        A prefix send in the header before the actual token
        """
        api_key_name: NotRequired[pulumi.Input[str]]
        """
        The header name which the token is sent with
        """
        authorization_endpoint: NotRequired[pulumi.Input[str]]
        """
        The endpoint used to authorize the user, used in Oauth 2.0 flow
        """
        authorization_endpoint_query_parameters: NotRequired[Any]
        """
        The query parameters used in authorization request, used in Oauth 2.0 flow
        """
        flow_name: NotRequired[pulumi.Input[str]]
        """
        Describes the flow name, for example 'AuthCode' for Oauth 2.0
        """
        is_api_key_in_post_payload: NotRequired[pulumi.Input[str]]
        """
        Marks if the key should sent in header
        """
        is_client_secret_in_header: NotRequired[pulumi.Input[bool]]
        """
        Marks if we should send the client secret in header or payload, used in Oauth 2.0 flow
        """
        redirection_endpoint: NotRequired[pulumi.Input[str]]
        """
        The redirect endpoint where we will get the authorization code, used in Oauth 2.0 flow
        """
        scope: NotRequired[pulumi.Input[str]]
        """
        The OAuth token scope
        """
        token_endpoint: NotRequired[pulumi.Input[str]]
        """
        The endpoint used to issue a token, used in Oauth 2.0 flow
        """
        token_endpoint_headers: NotRequired[Any]
        """
        The query headers used in token request, used in Oauth 2.0 flow
        """
        token_endpoint_query_parameters: NotRequired[Any]
        """
        The query parameters used in token request, used in Oauth 2.0 flow
        """
elif False:
    CodelessConnectorPollingAuthPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodelessConnectorPollingAuthPropertiesArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 api_key_identifier: Optional[pulumi.Input[str]] = None,
                 api_key_name: Optional[pulumi.Input[str]] = None,
                 authorization_endpoint: Optional[pulumi.Input[str]] = None,
                 authorization_endpoint_query_parameters: Optional[Any] = None,
                 flow_name: Optional[pulumi.Input[str]] = None,
                 is_api_key_in_post_payload: Optional[pulumi.Input[str]] = None,
                 is_client_secret_in_header: Optional[pulumi.Input[bool]] = None,
                 redirection_endpoint: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 token_endpoint: Optional[pulumi.Input[str]] = None,
                 token_endpoint_headers: Optional[Any] = None,
                 token_endpoint_query_parameters: Optional[Any] = None):
        """
        Describe the authentication properties needed to successfully authenticate with the server
        :param pulumi.Input[str] auth_type: The authentication type
        :param pulumi.Input[str] api_key_identifier: A prefix send in the header before the actual token
        :param pulumi.Input[str] api_key_name: The header name which the token is sent with
        :param pulumi.Input[str] authorization_endpoint: The endpoint used to authorize the user, used in Oauth 2.0 flow
        :param Any authorization_endpoint_query_parameters: The query parameters used in authorization request, used in Oauth 2.0 flow
        :param pulumi.Input[str] flow_name: Describes the flow name, for example 'AuthCode' for Oauth 2.0
        :param pulumi.Input[str] is_api_key_in_post_payload: Marks if the key should sent in header
        :param pulumi.Input[bool] is_client_secret_in_header: Marks if we should send the client secret in header or payload, used in Oauth 2.0 flow
        :param pulumi.Input[str] redirection_endpoint: The redirect endpoint where we will get the authorization code, used in Oauth 2.0 flow
        :param pulumi.Input[str] scope: The OAuth token scope
        :param pulumi.Input[str] token_endpoint: The endpoint used to issue a token, used in Oauth 2.0 flow
        :param Any token_endpoint_headers: The query headers used in token request, used in Oauth 2.0 flow
        :param Any token_endpoint_query_parameters: The query parameters used in token request, used in Oauth 2.0 flow
        """
        pulumi.set(__self__, "auth_type", auth_type)
        if api_key_identifier is not None:
            pulumi.set(__self__, "api_key_identifier", api_key_identifier)
        if api_key_name is not None:
            pulumi.set(__self__, "api_key_name", api_key_name)
        if authorization_endpoint is not None:
            pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        if authorization_endpoint_query_parameters is not None:
            pulumi.set(__self__, "authorization_endpoint_query_parameters", authorization_endpoint_query_parameters)
        if flow_name is not None:
            pulumi.set(__self__, "flow_name", flow_name)
        if is_api_key_in_post_payload is not None:
            pulumi.set(__self__, "is_api_key_in_post_payload", is_api_key_in_post_payload)
        if is_client_secret_in_header is not None:
            pulumi.set(__self__, "is_client_secret_in_header", is_client_secret_in_header)
        if redirection_endpoint is not None:
            pulumi.set(__self__, "redirection_endpoint", redirection_endpoint)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if token_endpoint is not None:
            pulumi.set(__self__, "token_endpoint", token_endpoint)
        if token_endpoint_headers is not None:
            pulumi.set(__self__, "token_endpoint_headers", token_endpoint_headers)
        if token_endpoint_query_parameters is not None:
            pulumi.set(__self__, "token_endpoint_query_parameters", token_endpoint_query_parameters)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        """
        The authentication type
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="apiKeyIdentifier")
    def api_key_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        A prefix send in the header before the actual token
        """
        return pulumi.get(self, "api_key_identifier")

    @api_key_identifier.setter
    def api_key_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_identifier", value)

    @property
    @pulumi.getter(name="apiKeyName")
    def api_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The header name which the token is sent with
        """
        return pulumi.get(self, "api_key_name")

    @api_key_name.setter
    def api_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_name", value)

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint used to authorize the user, used in Oauth 2.0 flow
        """
        return pulumi.get(self, "authorization_endpoint")

    @authorization_endpoint.setter
    def authorization_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_endpoint", value)

    @property
    @pulumi.getter(name="authorizationEndpointQueryParameters")
    def authorization_endpoint_query_parameters(self) -> Optional[Any]:
        """
        The query parameters used in authorization request, used in Oauth 2.0 flow
        """
        return pulumi.get(self, "authorization_endpoint_query_parameters")

    @authorization_endpoint_query_parameters.setter
    def authorization_endpoint_query_parameters(self, value: Optional[Any]):
        pulumi.set(self, "authorization_endpoint_query_parameters", value)

    @property
    @pulumi.getter(name="flowName")
    def flow_name(self) -> Optional[pulumi.Input[str]]:
        """
        Describes the flow name, for example 'AuthCode' for Oauth 2.0
        """
        return pulumi.get(self, "flow_name")

    @flow_name.setter
    def flow_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_name", value)

    @property
    @pulumi.getter(name="isApiKeyInPostPayload")
    def is_api_key_in_post_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Marks if the key should sent in header
        """
        return pulumi.get(self, "is_api_key_in_post_payload")

    @is_api_key_in_post_payload.setter
    def is_api_key_in_post_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_api_key_in_post_payload", value)

    @property
    @pulumi.getter(name="isClientSecretInHeader")
    def is_client_secret_in_header(self) -> Optional[pulumi.Input[bool]]:
        """
        Marks if we should send the client secret in header or payload, used in Oauth 2.0 flow
        """
        return pulumi.get(self, "is_client_secret_in_header")

    @is_client_secret_in_header.setter
    def is_client_secret_in_header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_client_secret_in_header", value)

    @property
    @pulumi.getter(name="redirectionEndpoint")
    def redirection_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect endpoint where we will get the authorization code, used in Oauth 2.0 flow
        """
        return pulumi.get(self, "redirection_endpoint")

    @redirection_endpoint.setter
    def redirection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirection_endpoint", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The OAuth token scope
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint used to issue a token, used in Oauth 2.0 flow
        """
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_endpoint", value)

    @property
    @pulumi.getter(name="tokenEndpointHeaders")
    def token_endpoint_headers(self) -> Optional[Any]:
        """
        The query headers used in token request, used in Oauth 2.0 flow
        """
        return pulumi.get(self, "token_endpoint_headers")

    @token_endpoint_headers.setter
    def token_endpoint_headers(self, value: Optional[Any]):
        pulumi.set(self, "token_endpoint_headers", value)

    @property
    @pulumi.getter(name="tokenEndpointQueryParameters")
    def token_endpoint_query_parameters(self) -> Optional[Any]:
        """
        The query parameters used in token request, used in Oauth 2.0 flow
        """
        return pulumi.get(self, "token_endpoint_query_parameters")

    @token_endpoint_query_parameters.setter
    def token_endpoint_query_parameters(self, value: Optional[Any]):
        pulumi.set(self, "token_endpoint_query_parameters", value)


if not MYPY:
    class CodelessConnectorPollingConfigPropertiesArgsDict(TypedDict):
        """
        Config to describe the polling config for API poller connector
        """
        auth: pulumi.Input['CodelessConnectorPollingAuthPropertiesArgsDict']
        """
        Describe the authentication type of the poller
        """
        request: pulumi.Input['CodelessConnectorPollingRequestPropertiesArgsDict']
        """
        Describe the poll request config parameters of the poller
        """
        is_active: NotRequired[pulumi.Input[bool]]
        """
        The poller active status
        """
        paging: NotRequired[pulumi.Input['CodelessConnectorPollingPagingPropertiesArgsDict']]
        """
        Describe the poll request paging config of the poller
        """
        response: NotRequired[pulumi.Input['CodelessConnectorPollingResponsePropertiesArgsDict']]
        """
        Describe the response config parameters of the poller
        """
elif False:
    CodelessConnectorPollingConfigPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodelessConnectorPollingConfigPropertiesArgs:
    def __init__(__self__, *,
                 auth: pulumi.Input['CodelessConnectorPollingAuthPropertiesArgs'],
                 request: pulumi.Input['CodelessConnectorPollingRequestPropertiesArgs'],
                 is_active: Optional[pulumi.Input[bool]] = None,
                 paging: Optional[pulumi.Input['CodelessConnectorPollingPagingPropertiesArgs']] = None,
                 response: Optional[pulumi.Input['CodelessConnectorPollingResponsePropertiesArgs']] = None):
        """
        Config to describe the polling config for API poller connector
        :param pulumi.Input['CodelessConnectorPollingAuthPropertiesArgs'] auth: Describe the authentication type of the poller
        :param pulumi.Input['CodelessConnectorPollingRequestPropertiesArgs'] request: Describe the poll request config parameters of the poller
        :param pulumi.Input[bool] is_active: The poller active status
        :param pulumi.Input['CodelessConnectorPollingPagingPropertiesArgs'] paging: Describe the poll request paging config of the poller
        :param pulumi.Input['CodelessConnectorPollingResponsePropertiesArgs'] response: Describe the response config parameters of the poller
        """
        pulumi.set(__self__, "auth", auth)
        pulumi.set(__self__, "request", request)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if paging is not None:
            pulumi.set(__self__, "paging", paging)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def auth(self) -> pulumi.Input['CodelessConnectorPollingAuthPropertiesArgs']:
        """
        Describe the authentication type of the poller
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: pulumi.Input['CodelessConnectorPollingAuthPropertiesArgs']):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def request(self) -> pulumi.Input['CodelessConnectorPollingRequestPropertiesArgs']:
        """
        Describe the poll request config parameters of the poller
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: pulumi.Input['CodelessConnectorPollingRequestPropertiesArgs']):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        """
        The poller active status
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter
    def paging(self) -> Optional[pulumi.Input['CodelessConnectorPollingPagingPropertiesArgs']]:
        """
        Describe the poll request paging config of the poller
        """
        return pulumi.get(self, "paging")

    @paging.setter
    def paging(self, value: Optional[pulumi.Input['CodelessConnectorPollingPagingPropertiesArgs']]):
        pulumi.set(self, "paging", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['CodelessConnectorPollingResponsePropertiesArgs']]:
        """
        Describe the response config parameters of the poller
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['CodelessConnectorPollingResponsePropertiesArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class CodelessConnectorPollingPagingPropertiesArgsDict(TypedDict):
        """
        Describe the properties needed to make a pagination call
        """
        paging_type: pulumi.Input[str]
        """
        Describes the type. could be 'None', 'PageToken', 'PageCount', 'TimeStamp'
        """
        next_page_para_name: NotRequired[pulumi.Input[str]]
        """
        Defines the name of a next page attribute
        """
        next_page_token_json_path: NotRequired[pulumi.Input[str]]
        """
        Defines the path to a next page token JSON
        """
        page_count_attribute_path: NotRequired[pulumi.Input[str]]
        """
        Defines the path to a page count attribute
        """
        page_size: NotRequired[pulumi.Input[int]]
        """
        Defines the paging size
        """
        page_size_para_name: NotRequired[pulumi.Input[str]]
        """
        Defines the name of the page size parameter
        """
        page_time_stamp_attribute_path: NotRequired[pulumi.Input[str]]
        """
        Defines the path to a paging time stamp attribute
        """
        page_total_count_attribute_path: NotRequired[pulumi.Input[str]]
        """
        Defines the path to a page total count attribute
        """
        search_the_latest_time_stamp_from_events_list: NotRequired[pulumi.Input[str]]
        """
        Determines whether to search for the latest time stamp in the events list
        """
elif False:
    CodelessConnectorPollingPagingPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodelessConnectorPollingPagingPropertiesArgs:
    def __init__(__self__, *,
                 paging_type: pulumi.Input[str],
                 next_page_para_name: Optional[pulumi.Input[str]] = None,
                 next_page_token_json_path: Optional[pulumi.Input[str]] = None,
                 page_count_attribute_path: Optional[pulumi.Input[str]] = None,
                 page_size: Optional[pulumi.Input[int]] = None,
                 page_size_para_name: Optional[pulumi.Input[str]] = None,
                 page_time_stamp_attribute_path: Optional[pulumi.Input[str]] = None,
                 page_total_count_attribute_path: Optional[pulumi.Input[str]] = None,
                 search_the_latest_time_stamp_from_events_list: Optional[pulumi.Input[str]] = None):
        """
        Describe the properties needed to make a pagination call
        :param pulumi.Input[str] paging_type: Describes the type. could be 'None', 'PageToken', 'PageCount', 'TimeStamp'
        :param pulumi.Input[str] next_page_para_name: Defines the name of a next page attribute
        :param pulumi.Input[str] next_page_token_json_path: Defines the path to a next page token JSON
        :param pulumi.Input[str] page_count_attribute_path: Defines the path to a page count attribute
        :param pulumi.Input[int] page_size: Defines the paging size
        :param pulumi.Input[str] page_size_para_name: Defines the name of the page size parameter
        :param pulumi.Input[str] page_time_stamp_attribute_path: Defines the path to a paging time stamp attribute
        :param pulumi.Input[str] page_total_count_attribute_path: Defines the path to a page total count attribute
        :param pulumi.Input[str] search_the_latest_time_stamp_from_events_list: Determines whether to search for the latest time stamp in the events list
        """
        pulumi.set(__self__, "paging_type", paging_type)
        if next_page_para_name is not None:
            pulumi.set(__self__, "next_page_para_name", next_page_para_name)
        if next_page_token_json_path is not None:
            pulumi.set(__self__, "next_page_token_json_path", next_page_token_json_path)
        if page_count_attribute_path is not None:
            pulumi.set(__self__, "page_count_attribute_path", page_count_attribute_path)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if page_size_para_name is not None:
            pulumi.set(__self__, "page_size_para_name", page_size_para_name)
        if page_time_stamp_attribute_path is not None:
            pulumi.set(__self__, "page_time_stamp_attribute_path", page_time_stamp_attribute_path)
        if page_total_count_attribute_path is not None:
            pulumi.set(__self__, "page_total_count_attribute_path", page_total_count_attribute_path)
        if search_the_latest_time_stamp_from_events_list is not None:
            pulumi.set(__self__, "search_the_latest_time_stamp_from_events_list", search_the_latest_time_stamp_from_events_list)

    @property
    @pulumi.getter(name="pagingType")
    def paging_type(self) -> pulumi.Input[str]:
        """
        Describes the type. could be 'None', 'PageToken', 'PageCount', 'TimeStamp'
        """
        return pulumi.get(self, "paging_type")

    @paging_type.setter
    def paging_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "paging_type", value)

    @property
    @pulumi.getter(name="nextPageParaName")
    def next_page_para_name(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the name of a next page attribute
        """
        return pulumi.get(self, "next_page_para_name")

    @next_page_para_name.setter
    def next_page_para_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_page_para_name", value)

    @property
    @pulumi.getter(name="nextPageTokenJsonPath")
    def next_page_token_json_path(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the path to a next page token JSON
        """
        return pulumi.get(self, "next_page_token_json_path")

    @next_page_token_json_path.setter
    def next_page_token_json_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_page_token_json_path", value)

    @property
    @pulumi.getter(name="pageCountAttributePath")
    def page_count_attribute_path(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the path to a page count attribute
        """
        return pulumi.get(self, "page_count_attribute_path")

    @page_count_attribute_path.setter
    def page_count_attribute_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_count_attribute_path", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[pulumi.Input[int]]:
        """
        Defines the paging size
        """
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_size", value)

    @property
    @pulumi.getter(name="pageSizeParaName")
    def page_size_para_name(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the name of the page size parameter
        """
        return pulumi.get(self, "page_size_para_name")

    @page_size_para_name.setter
    def page_size_para_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_size_para_name", value)

    @property
    @pulumi.getter(name="pageTimeStampAttributePath")
    def page_time_stamp_attribute_path(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the path to a paging time stamp attribute
        """
        return pulumi.get(self, "page_time_stamp_attribute_path")

    @page_time_stamp_attribute_path.setter
    def page_time_stamp_attribute_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_time_stamp_attribute_path", value)

    @property
    @pulumi.getter(name="pageTotalCountAttributePath")
    def page_total_count_attribute_path(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the path to a page total count attribute
        """
        return pulumi.get(self, "page_total_count_attribute_path")

    @page_total_count_attribute_path.setter
    def page_total_count_attribute_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_total_count_attribute_path", value)

    @property
    @pulumi.getter(name="searchTheLatestTimeStampFromEventsList")
    def search_the_latest_time_stamp_from_events_list(self) -> Optional[pulumi.Input[str]]:
        """
        Determines whether to search for the latest time stamp in the events list
        """
        return pulumi.get(self, "search_the_latest_time_stamp_from_events_list")

    @search_the_latest_time_stamp_from_events_list.setter
    def search_the_latest_time_stamp_from_events_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_the_latest_time_stamp_from_events_list", value)


if not MYPY:
    class CodelessConnectorPollingRequestPropertiesArgsDict(TypedDict):
        """
        Describe the request properties needed to successfully pull from the server
        """
        api_endpoint: pulumi.Input[str]
        """
        Describe the endpoint we should pull the data from
        """
        http_method: pulumi.Input[str]
        """
        The http method type we will use in the poll request, GET or POST
        """
        query_time_format: pulumi.Input[str]
        """
        The time format will be used the query events in a specific window
        """
        query_window_in_min: pulumi.Input[int]
        """
        The window interval we will use the pull the data
        """
        end_time_attribute_name: NotRequired[pulumi.Input[str]]
        """
        This will be used the query events from the end of the time window
        """
        headers: NotRequired[Any]
        """
        Describe the headers sent in the poll request
        """
        query_parameters: NotRequired[Any]
        """
        Describe the query parameters sent in the poll request
        """
        query_parameters_template: NotRequired[pulumi.Input[str]]
        """
        For advanced scenarios for example user name/password embedded in nested JSON payload
        """
        rate_limit_qps: NotRequired[pulumi.Input[int]]
        """
        Defines the rate limit QPS
        """
        retry_count: NotRequired[pulumi.Input[int]]
        """
        Describe the amount of time we should try and poll the data in case of failure
        """
        start_time_attribute_name: NotRequired[pulumi.Input[str]]
        """
        This will be used the query events from a start of the time window
        """
        timeout_in_seconds: NotRequired[pulumi.Input[int]]
        """
        The number of seconds we will consider as a request timeout
        """
elif False:
    CodelessConnectorPollingRequestPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodelessConnectorPollingRequestPropertiesArgs:
    def __init__(__self__, *,
                 api_endpoint: pulumi.Input[str],
                 http_method: pulumi.Input[str],
                 query_time_format: pulumi.Input[str],
                 query_window_in_min: pulumi.Input[int],
                 end_time_attribute_name: Optional[pulumi.Input[str]] = None,
                 headers: Optional[Any] = None,
                 query_parameters: Optional[Any] = None,
                 query_parameters_template: Optional[pulumi.Input[str]] = None,
                 rate_limit_qps: Optional[pulumi.Input[int]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 start_time_attribute_name: Optional[pulumi.Input[str]] = None,
                 timeout_in_seconds: Optional[pulumi.Input[int]] = None):
        """
        Describe the request properties needed to successfully pull from the server
        :param pulumi.Input[str] api_endpoint: Describe the endpoint we should pull the data from
        :param pulumi.Input[str] http_method: The http method type we will use in the poll request, GET or POST
        :param pulumi.Input[str] query_time_format: The time format will be used the query events in a specific window
        :param pulumi.Input[int] query_window_in_min: The window interval we will use the pull the data
        :param pulumi.Input[str] end_time_attribute_name: This will be used the query events from the end of the time window
        :param Any headers: Describe the headers sent in the poll request
        :param Any query_parameters: Describe the query parameters sent in the poll request
        :param pulumi.Input[str] query_parameters_template: For advanced scenarios for example user name/password embedded in nested JSON payload
        :param pulumi.Input[int] rate_limit_qps: Defines the rate limit QPS
        :param pulumi.Input[int] retry_count: Describe the amount of time we should try and poll the data in case of failure
        :param pulumi.Input[str] start_time_attribute_name: This will be used the query events from a start of the time window
        :param pulumi.Input[int] timeout_in_seconds: The number of seconds we will consider as a request timeout
        """
        pulumi.set(__self__, "api_endpoint", api_endpoint)
        pulumi.set(__self__, "http_method", http_method)
        pulumi.set(__self__, "query_time_format", query_time_format)
        pulumi.set(__self__, "query_window_in_min", query_window_in_min)
        if end_time_attribute_name is not None:
            pulumi.set(__self__, "end_time_attribute_name", end_time_attribute_name)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if query_parameters is not None:
            pulumi.set(__self__, "query_parameters", query_parameters)
        if query_parameters_template is not None:
            pulumi.set(__self__, "query_parameters_template", query_parameters_template)
        if rate_limit_qps is not None:
            pulumi.set(__self__, "rate_limit_qps", rate_limit_qps)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if start_time_attribute_name is not None:
            pulumi.set(__self__, "start_time_attribute_name", start_time_attribute_name)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="apiEndpoint")
    def api_endpoint(self) -> pulumi.Input[str]:
        """
        Describe the endpoint we should pull the data from
        """
        return pulumi.get(self, "api_endpoint")

    @api_endpoint.setter
    def api_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_endpoint", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> pulumi.Input[str]:
        """
        The http method type we will use in the poll request, GET or POST
        """
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter(name="queryTimeFormat")
    def query_time_format(self) -> pulumi.Input[str]:
        """
        The time format will be used the query events in a specific window
        """
        return pulumi.get(self, "query_time_format")

    @query_time_format.setter
    def query_time_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_time_format", value)

    @property
    @pulumi.getter(name="queryWindowInMin")
    def query_window_in_min(self) -> pulumi.Input[int]:
        """
        The window interval we will use the pull the data
        """
        return pulumi.get(self, "query_window_in_min")

    @query_window_in_min.setter
    def query_window_in_min(self, value: pulumi.Input[int]):
        pulumi.set(self, "query_window_in_min", value)

    @property
    @pulumi.getter(name="endTimeAttributeName")
    def end_time_attribute_name(self) -> Optional[pulumi.Input[str]]:
        """
        This will be used the query events from the end of the time window
        """
        return pulumi.get(self, "end_time_attribute_name")

    @end_time_attribute_name.setter
    def end_time_attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time_attribute_name", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[Any]:
        """
        Describe the headers sent in the poll request
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[Any]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="queryParameters")
    def query_parameters(self) -> Optional[Any]:
        """
        Describe the query parameters sent in the poll request
        """
        return pulumi.get(self, "query_parameters")

    @query_parameters.setter
    def query_parameters(self, value: Optional[Any]):
        pulumi.set(self, "query_parameters", value)

    @property
    @pulumi.getter(name="queryParametersTemplate")
    def query_parameters_template(self) -> Optional[pulumi.Input[str]]:
        """
        For advanced scenarios for example user name/password embedded in nested JSON payload
        """
        return pulumi.get(self, "query_parameters_template")

    @query_parameters_template.setter
    def query_parameters_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_parameters_template", value)

    @property
    @pulumi.getter(name="rateLimitQps")
    def rate_limit_qps(self) -> Optional[pulumi.Input[int]]:
        """
        Defines the rate limit QPS
        """
        return pulumi.get(self, "rate_limit_qps")

    @rate_limit_qps.setter
    def rate_limit_qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_limit_qps", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        """
        Describe the amount of time we should try and poll the data in case of failure
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="startTimeAttributeName")
    def start_time_attribute_name(self) -> Optional[pulumi.Input[str]]:
        """
        This will be used the query events from a start of the time window
        """
        return pulumi.get(self, "start_time_attribute_name")

    @start_time_attribute_name.setter
    def start_time_attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time_attribute_name", value)

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The number of seconds we will consider as a request timeout
        """
        return pulumi.get(self, "timeout_in_seconds")

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_in_seconds", value)


if not MYPY:
    class CodelessConnectorPollingResponsePropertiesArgsDict(TypedDict):
        """
        Describes the response from the external server
        """
        events_json_paths: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Describes the path we should extract the data in the response
        """
        is_gzip_compressed: NotRequired[pulumi.Input[bool]]
        """
        Describes if the data in the response is Gzip
        """
        success_status_json_path: NotRequired[pulumi.Input[str]]
        """
        Describes the path we should extract the status code in the response
        """
        success_status_value: NotRequired[pulumi.Input[str]]
        """
        Describes the path we should extract the status value in the response
        """
elif False:
    CodelessConnectorPollingResponsePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodelessConnectorPollingResponsePropertiesArgs:
    def __init__(__self__, *,
                 events_json_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_gzip_compressed: Optional[pulumi.Input[bool]] = None,
                 success_status_json_path: Optional[pulumi.Input[str]] = None,
                 success_status_value: Optional[pulumi.Input[str]] = None):
        """
        Describes the response from the external server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events_json_paths: Describes the path we should extract the data in the response
        :param pulumi.Input[bool] is_gzip_compressed: Describes if the data in the response is Gzip
        :param pulumi.Input[str] success_status_json_path: Describes the path we should extract the status code in the response
        :param pulumi.Input[str] success_status_value: Describes the path we should extract the status value in the response
        """
        pulumi.set(__self__, "events_json_paths", events_json_paths)
        if is_gzip_compressed is not None:
            pulumi.set(__self__, "is_gzip_compressed", is_gzip_compressed)
        if success_status_json_path is not None:
            pulumi.set(__self__, "success_status_json_path", success_status_json_path)
        if success_status_value is not None:
            pulumi.set(__self__, "success_status_value", success_status_value)

    @property
    @pulumi.getter(name="eventsJsonPaths")
    def events_json_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Describes the path we should extract the data in the response
        """
        return pulumi.get(self, "events_json_paths")

    @events_json_paths.setter
    def events_json_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "events_json_paths", value)

    @property
    @pulumi.getter(name="isGzipCompressed")
    def is_gzip_compressed(self) -> Optional[pulumi.Input[bool]]:
        """
        Describes if the data in the response is Gzip
        """
        return pulumi.get(self, "is_gzip_compressed")

    @is_gzip_compressed.setter
    def is_gzip_compressed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_gzip_compressed", value)

    @property
    @pulumi.getter(name="successStatusJsonPath")
    def success_status_json_path(self) -> Optional[pulumi.Input[str]]:
        """
        Describes the path we should extract the status code in the response
        """
        return pulumi.get(self, "success_status_json_path")

    @success_status_json_path.setter
    def success_status_json_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_status_json_path", value)

    @property
    @pulumi.getter(name="successStatusValue")
    def success_status_value(self) -> Optional[pulumi.Input[str]]:
        """
        Describes the path we should extract the status value in the response
        """
        return pulumi.get(self, "success_status_value")

    @success_status_value.setter
    def success_status_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_status_value", value)


if not MYPY:
    class CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgsDict(TypedDict):
        type: NotRequired[pulumi.Input[Union[str, 'ConnectivityType']]]
        """
        type of connectivity
        """
        value: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Queries for checking connectivity
        """
elif False:
    CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[Union[str, 'ConnectivityType']]] = None,
                 value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Union[str, 'ConnectivityType']] type: type of connectivity
        :param pulumi.Input[Sequence[pulumi.Input[str]]] value: Queries for checking connectivity
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ConnectivityType']]]:
        """
        type of connectivity
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ConnectivityType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Queries for checking connectivity
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class CodelessUiConnectorConfigPropertiesDataTypesArgsDict(TypedDict):
        last_data_received_query: NotRequired[pulumi.Input[str]]
        """
        Query for indicate last data received
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the data type to show in the graph. can be use with {{graphQueriesTableName}} placeholder
        """
elif False:
    CodelessUiConnectorConfigPropertiesDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodelessUiConnectorConfigPropertiesDataTypesArgs:
    def __init__(__self__, *,
                 last_data_received_query: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] last_data_received_query: Query for indicate last data received
        :param pulumi.Input[str] name: Name of the data type to show in the graph. can be use with {{graphQueriesTableName}} placeholder
        """
        if last_data_received_query is not None:
            pulumi.set(__self__, "last_data_received_query", last_data_received_query)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="lastDataReceivedQuery")
    def last_data_received_query(self) -> Optional[pulumi.Input[str]]:
        """
        Query for indicate last data received
        """
        return pulumi.get(self, "last_data_received_query")

    @last_data_received_query.setter
    def last_data_received_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_data_received_query", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the data type to show in the graph. can be use with {{graphQueriesTableName}} placeholder
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class CodelessUiConnectorConfigPropertiesGraphQueriesArgsDict(TypedDict):
        base_query: NotRequired[pulumi.Input[str]]
        """
        The base query for the graph
        """
        legend: NotRequired[pulumi.Input[str]]
        """
        The legend for the graph
        """
        metric_name: NotRequired[pulumi.Input[str]]
        """
        the metric that the query is checking
        """
elif False:
    CodelessUiConnectorConfigPropertiesGraphQueriesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodelessUiConnectorConfigPropertiesGraphQueriesArgs:
    def __init__(__self__, *,
                 base_query: Optional[pulumi.Input[str]] = None,
                 legend: Optional[pulumi.Input[str]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] base_query: The base query for the graph
        :param pulumi.Input[str] legend: The legend for the graph
        :param pulumi.Input[str] metric_name: the metric that the query is checking
        """
        if base_query is not None:
            pulumi.set(__self__, "base_query", base_query)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)

    @property
    @pulumi.getter(name="baseQuery")
    def base_query(self) -> Optional[pulumi.Input[str]]:
        """
        The base query for the graph
        """
        return pulumi.get(self, "base_query")

    @base_query.setter
    def base_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_query", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input[str]]:
        """
        The legend for the graph
        """
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        """
        the metric that the query is checking
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)


if not MYPY:
    class CodelessUiConnectorConfigPropertiesInstructionStepsArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        Instruction step description
        """
        instructions: NotRequired[pulumi.Input[Sequence[pulumi.Input['InstructionStepsInstructionsArgsDict']]]]
        """
        Instruction step details
        """
        title: NotRequired[pulumi.Input[str]]
        """
        Instruction step title
        """
elif False:
    CodelessUiConnectorConfigPropertiesInstructionStepsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodelessUiConnectorConfigPropertiesInstructionStepsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 instructions: Optional[pulumi.Input[Sequence[pulumi.Input['InstructionStepsInstructionsArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Instruction step description
        :param pulumi.Input[Sequence[pulumi.Input['InstructionStepsInstructionsArgs']]] instructions: Instruction step details
        :param pulumi.Input[str] title: Instruction step title
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instructions is not None:
            pulumi.set(__self__, "instructions", instructions)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Instruction step description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def instructions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstructionStepsInstructionsArgs']]]]:
        """
        Instruction step details
        """
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstructionStepsInstructionsArgs']]]]):
        pulumi.set(self, "instructions", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Instruction step title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class CodelessUiConnectorConfigPropertiesSampleQueriesArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        The sample query description
        """
        query: NotRequired[pulumi.Input[str]]
        """
        the sample query
        """
elif False:
    CodelessUiConnectorConfigPropertiesSampleQueriesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodelessUiConnectorConfigPropertiesSampleQueriesArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: The sample query description
        :param pulumi.Input[str] query: the sample query
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The sample query description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        the sample query
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)


if not MYPY:
    class CodelessUiConnectorConfigPropertiesArgsDict(TypedDict):
        """
        Config to describe the instructions blade
        """
        availability: pulumi.Input['AvailabilityArgsDict']
        """
        Connector Availability Status
        """
        connectivity_criteria: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgsDict']]]
        """
        Define the way the connector check connectivity
        """
        data_types: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesDataTypesArgsDict']]]
        """
        Data types to check for last data received
        """
        description_markdown: pulumi.Input[str]
        """
        Connector description
        """
        graph_queries: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesGraphQueriesArgsDict']]]
        """
        The graph query to show the current data status
        """
        graph_queries_table_name: pulumi.Input[str]
        """
        Name of the table the connector will insert the data to
        """
        instruction_steps: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesInstructionStepsArgsDict']]]
        """
        Instruction steps to enable the connector
        """
        permissions: pulumi.Input['PermissionsArgsDict']
        """
        Permissions required for the connector
        """
        publisher: pulumi.Input[str]
        """
        Connector publisher name
        """
        sample_queries: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesSampleQueriesArgsDict']]]
        """
        The sample queries for the connector
        """
        title: pulumi.Input[str]
        """
        Connector blade title
        """
        custom_image: NotRequired[pulumi.Input[str]]
        """
        An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery
        """
elif False:
    CodelessUiConnectorConfigPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodelessUiConnectorConfigPropertiesArgs:
    def __init__(__self__, *,
                 availability: pulumi.Input['AvailabilityArgs'],
                 connectivity_criteria: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs']]],
                 data_types: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesDataTypesArgs']]],
                 description_markdown: pulumi.Input[str],
                 graph_queries: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesGraphQueriesArgs']]],
                 graph_queries_table_name: pulumi.Input[str],
                 instruction_steps: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesInstructionStepsArgs']]],
                 permissions: pulumi.Input['PermissionsArgs'],
                 publisher: pulumi.Input[str],
                 sample_queries: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesSampleQueriesArgs']]],
                 title: pulumi.Input[str],
                 custom_image: Optional[pulumi.Input[str]] = None):
        """
        Config to describe the instructions blade
        :param pulumi.Input['AvailabilityArgs'] availability: Connector Availability Status
        :param pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs']]] connectivity_criteria: Define the way the connector check connectivity
        :param pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesDataTypesArgs']]] data_types: Data types to check for last data received
        :param pulumi.Input[str] description_markdown: Connector description
        :param pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesGraphQueriesArgs']]] graph_queries: The graph query to show the current data status
        :param pulumi.Input[str] graph_queries_table_name: Name of the table the connector will insert the data to
        :param pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesInstructionStepsArgs']]] instruction_steps: Instruction steps to enable the connector
        :param pulumi.Input['PermissionsArgs'] permissions: Permissions required for the connector
        :param pulumi.Input[str] publisher: Connector publisher name
        :param pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesSampleQueriesArgs']]] sample_queries: The sample queries for the connector
        :param pulumi.Input[str] title: Connector blade title
        :param pulumi.Input[str] custom_image: An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery
        """
        pulumi.set(__self__, "availability", availability)
        pulumi.set(__self__, "connectivity_criteria", connectivity_criteria)
        pulumi.set(__self__, "data_types", data_types)
        pulumi.set(__self__, "description_markdown", description_markdown)
        pulumi.set(__self__, "graph_queries", graph_queries)
        pulumi.set(__self__, "graph_queries_table_name", graph_queries_table_name)
        pulumi.set(__self__, "instruction_steps", instruction_steps)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "sample_queries", sample_queries)
        pulumi.set(__self__, "title", title)
        if custom_image is not None:
            pulumi.set(__self__, "custom_image", custom_image)

    @property
    @pulumi.getter
    def availability(self) -> pulumi.Input['AvailabilityArgs']:
        """
        Connector Availability Status
        """
        return pulumi.get(self, "availability")

    @availability.setter
    def availability(self, value: pulumi.Input['AvailabilityArgs']):
        pulumi.set(self, "availability", value)

    @property
    @pulumi.getter(name="connectivityCriteria")
    def connectivity_criteria(self) -> pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs']]]:
        """
        Define the way the connector check connectivity
        """
        return pulumi.get(self, "connectivity_criteria")

    @connectivity_criteria.setter
    def connectivity_criteria(self, value: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs']]]):
        pulumi.set(self, "connectivity_criteria", value)

    @property
    @pulumi.getter(name="dataTypes")
    def data_types(self) -> pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesDataTypesArgs']]]:
        """
        Data types to check for last data received
        """
        return pulumi.get(self, "data_types")

    @data_types.setter
    def data_types(self, value: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesDataTypesArgs']]]):
        pulumi.set(self, "data_types", value)

    @property
    @pulumi.getter(name="descriptionMarkdown")
    def description_markdown(self) -> pulumi.Input[str]:
        """
        Connector description
        """
        return pulumi.get(self, "description_markdown")

    @description_markdown.setter
    def description_markdown(self, value: pulumi.Input[str]):
        pulumi.set(self, "description_markdown", value)

    @property
    @pulumi.getter(name="graphQueries")
    def graph_queries(self) -> pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesGraphQueriesArgs']]]:
        """
        The graph query to show the current data status
        """
        return pulumi.get(self, "graph_queries")

    @graph_queries.setter
    def graph_queries(self, value: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesGraphQueriesArgs']]]):
        pulumi.set(self, "graph_queries", value)

    @property
    @pulumi.getter(name="graphQueriesTableName")
    def graph_queries_table_name(self) -> pulumi.Input[str]:
        """
        Name of the table the connector will insert the data to
        """
        return pulumi.get(self, "graph_queries_table_name")

    @graph_queries_table_name.setter
    def graph_queries_table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "graph_queries_table_name", value)

    @property
    @pulumi.getter(name="instructionSteps")
    def instruction_steps(self) -> pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesInstructionStepsArgs']]]:
        """
        Instruction steps to enable the connector
        """
        return pulumi.get(self, "instruction_steps")

    @instruction_steps.setter
    def instruction_steps(self, value: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesInstructionStepsArgs']]]):
        pulumi.set(self, "instruction_steps", value)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input['PermissionsArgs']:
        """
        Permissions required for the connector
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input['PermissionsArgs']):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[str]:
        """
        Connector publisher name
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter(name="sampleQueries")
    def sample_queries(self) -> pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesSampleQueriesArgs']]]:
        """
        The sample queries for the connector
        """
        return pulumi.get(self, "sample_queries")

    @sample_queries.setter
    def sample_queries(self, value: pulumi.Input[Sequence[pulumi.Input['CodelessUiConnectorConfigPropertiesSampleQueriesArgs']]]):
        pulumi.set(self, "sample_queries", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Connector blade title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="customImage")
    def custom_image(self) -> Optional[pulumi.Input[str]]:
        """
        An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery
        """
        return pulumi.get(self, "custom_image")

    @custom_image.setter
    def custom_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_image", value)


if not MYPY:
    class ContentPathMapArgsDict(TypedDict):
        """
        The mapping of content type to a repo path.
        """
        content_type: NotRequired[pulumi.Input[Union[str, 'ContentType']]]
        """
        Content type.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        The path to the content.
        """
elif False:
    ContentPathMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContentPathMapArgs:
    def __init__(__self__, *,
                 content_type: Optional[pulumi.Input[Union[str, 'ContentType']]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        The mapping of content type to a repo path.
        :param pulumi.Input[Union[str, 'ContentType']] content_type: Content type.
        :param pulumi.Input[str] path: The path to the content.
        """
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[Union[str, 'ContentType']]]:
        """
        Content type.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[Union[str, 'ContentType']]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the content.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class DataConnectorDataTypeCommonArgsDict(TypedDict):
        """
        Common field for data type in data connectors.
        """
        state: pulumi.Input[Union[str, 'DataTypeState']]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    DataConnectorDataTypeCommonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataConnectorDataTypeCommonArgs:
    def __init__(__self__, *,
                 state: pulumi.Input[Union[str, 'DataTypeState']]):
        """
        Common field for data type in data connectors.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Union[str, 'DataTypeState']]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Union[str, 'DataTypeState']]):
        pulumi.set(self, "state", value)


if not MYPY:
    class Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgsDict(TypedDict):
        """
        Common Data Service data type connection.
        """
        state: pulumi.Input[Union[str, 'DataTypeState']]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs:
    def __init__(__self__, *,
                 state: pulumi.Input[Union[str, 'DataTypeState']]):
        """
        Common Data Service data type connection.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Union[str, 'DataTypeState']]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Union[str, 'DataTypeState']]):
        pulumi.set(self, "state", value)


if not MYPY:
    class Dynamics365DataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for Dynamics365 data connector.
        """
        dynamics365_cds_activities: pulumi.Input['Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgsDict']
        """
        Common Data Service data type connection.
        """
elif False:
    Dynamics365DataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Dynamics365DataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 dynamics365_cds_activities: pulumi.Input['Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs']):
        """
        The available data types for Dynamics365 data connector.
        :param pulumi.Input['Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs'] dynamics365_cds_activities: Common Data Service data type connection.
        """
        pulumi.set(__self__, "dynamics365_cds_activities", dynamics365_cds_activities)

    @property
    @pulumi.getter(name="dynamics365CdsActivities")
    def dynamics365_cds_activities(self) -> pulumi.Input['Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs']:
        """
        Common Data Service data type connection.
        """
        return pulumi.get(self, "dynamics365_cds_activities")

    @dynamics365_cds_activities.setter
    def dynamics365_cds_activities(self, value: pulumi.Input['Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs']):
        pulumi.set(self, "dynamics365_cds_activities", value)


if not MYPY:
    class EntityMappingArgsDict(TypedDict):
        """
        Single entity mapping for the alert rule
        """
        entity_type: NotRequired[pulumi.Input[Union[str, 'EntityMappingType']]]
        """
        The V3 type of the mapped entity
        """
        field_mappings: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldMappingArgsDict']]]]
        """
        array of field mappings for the given entity mapping
        """
elif False:
    EntityMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EntityMappingArgs:
    def __init__(__self__, *,
                 entity_type: Optional[pulumi.Input[Union[str, 'EntityMappingType']]] = None,
                 field_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['FieldMappingArgs']]]] = None):
        """
        Single entity mapping for the alert rule
        :param pulumi.Input[Union[str, 'EntityMappingType']] entity_type: The V3 type of the mapped entity
        :param pulumi.Input[Sequence[pulumi.Input['FieldMappingArgs']]] field_mappings: array of field mappings for the given entity mapping
        """
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if field_mappings is not None:
            pulumi.set(__self__, "field_mappings", field_mappings)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[Union[str, 'EntityMappingType']]]:
        """
        The V3 type of the mapped entity
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[Union[str, 'EntityMappingType']]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="fieldMappings")
    def field_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldMappingArgs']]]]:
        """
        array of field mappings for the given entity mapping
        """
        return pulumi.get(self, "field_mappings")

    @field_mappings.setter
    def field_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldMappingArgs']]]]):
        pulumi.set(self, "field_mappings", value)


if not MYPY:
    class EventGroupingSettingsArgsDict(TypedDict):
        """
        Event grouping settings property bag.
        """
        aggregation_kind: NotRequired[pulumi.Input[Union[str, 'EventGroupingAggregationKind']]]
        """
        The event grouping aggregation kinds
        """
elif False:
    EventGroupingSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EventGroupingSettingsArgs:
    def __init__(__self__, *,
                 aggregation_kind: Optional[pulumi.Input[Union[str, 'EventGroupingAggregationKind']]] = None):
        """
        Event grouping settings property bag.
        :param pulumi.Input[Union[str, 'EventGroupingAggregationKind']] aggregation_kind: The event grouping aggregation kinds
        """
        if aggregation_kind is not None:
            pulumi.set(__self__, "aggregation_kind", aggregation_kind)

    @property
    @pulumi.getter(name="aggregationKind")
    def aggregation_kind(self) -> Optional[pulumi.Input[Union[str, 'EventGroupingAggregationKind']]]:
        """
        The event grouping aggregation kinds
        """
        return pulumi.get(self, "aggregation_kind")

    @aggregation_kind.setter
    def aggregation_kind(self, value: Optional[pulumi.Input[Union[str, 'EventGroupingAggregationKind']]]):
        pulumi.set(self, "aggregation_kind", value)


if not MYPY:
    class FieldMappingArgsDict(TypedDict):
        """
        A single field mapping of the mapped entity
        """
        column_name: NotRequired[pulumi.Input[str]]
        """
        the column name to be mapped to the identifier
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        the V3 identifier of the entity
        """
elif False:
    FieldMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FieldMappingArgs:
    def __init__(__self__, *,
                 column_name: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None):
        """
        A single field mapping of the mapped entity
        :param pulumi.Input[str] column_name: the column name to be mapped to the identifier
        :param pulumi.Input[str] identifier: the V3 identifier of the entity
        """
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[str]]:
        """
        the column name to be mapped to the identifier
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        the V3 identifier of the entity
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)


if not MYPY:
    class GroupingConfigurationArgsDict(TypedDict):
        """
        Grouping configuration property bag.
        """
        enabled: pulumi.Input[bool]
        """
        Grouping enabled
        """
        lookback_duration: pulumi.Input[str]
        """
        Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
        """
        matching_method: pulumi.Input[Union[str, 'MatchingMethod']]
        """
        Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
        """
        reopen_closed_incident: pulumi.Input[bool]
        """
        Re-open closed matching incidents
        """
        group_by_alert_details: NotRequired[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AlertDetail']]]]]
        """
        A list of alert details to group by (when matchingMethod is Selected)
        """
        group_by_custom_details: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
        """
        group_by_entities: NotRequired[pulumi.Input[Sequence[pulumi.Input[Union[str, 'EntityMappingType']]]]]
        """
        A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
        """
elif False:
    GroupingConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupingConfigurationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 lookback_duration: pulumi.Input[str],
                 matching_method: pulumi.Input[Union[str, 'MatchingMethod']],
                 reopen_closed_incident: pulumi.Input[bool],
                 group_by_alert_details: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AlertDetail']]]]] = None,
                 group_by_custom_details: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_by_entities: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'EntityMappingType']]]]] = None):
        """
        Grouping configuration property bag.
        :param pulumi.Input[bool] enabled: Grouping enabled
        :param pulumi.Input[str] lookback_duration: Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
        :param pulumi.Input[Union[str, 'MatchingMethod']] matching_method: Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
        :param pulumi.Input[bool] reopen_closed_incident: Re-open closed matching incidents
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'AlertDetail']]]] group_by_alert_details: A list of alert details to group by (when matchingMethod is Selected)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_by_custom_details: A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'EntityMappingType']]]] group_by_entities: A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "lookback_duration", lookback_duration)
        pulumi.set(__self__, "matching_method", matching_method)
        pulumi.set(__self__, "reopen_closed_incident", reopen_closed_incident)
        if group_by_alert_details is not None:
            pulumi.set(__self__, "group_by_alert_details", group_by_alert_details)
        if group_by_custom_details is not None:
            pulumi.set(__self__, "group_by_custom_details", group_by_custom_details)
        if group_by_entities is not None:
            pulumi.set(__self__, "group_by_entities", group_by_entities)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Grouping enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="lookbackDuration")
    def lookback_duration(self) -> pulumi.Input[str]:
        """
        Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
        """
        return pulumi.get(self, "lookback_duration")

    @lookback_duration.setter
    def lookback_duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "lookback_duration", value)

    @property
    @pulumi.getter(name="matchingMethod")
    def matching_method(self) -> pulumi.Input[Union[str, 'MatchingMethod']]:
        """
        Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
        """
        return pulumi.get(self, "matching_method")

    @matching_method.setter
    def matching_method(self, value: pulumi.Input[Union[str, 'MatchingMethod']]):
        pulumi.set(self, "matching_method", value)

    @property
    @pulumi.getter(name="reopenClosedIncident")
    def reopen_closed_incident(self) -> pulumi.Input[bool]:
        """
        Re-open closed matching incidents
        """
        return pulumi.get(self, "reopen_closed_incident")

    @reopen_closed_incident.setter
    def reopen_closed_incident(self, value: pulumi.Input[bool]):
        pulumi.set(self, "reopen_closed_incident", value)

    @property
    @pulumi.getter(name="groupByAlertDetails")
    def group_by_alert_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AlertDetail']]]]]:
        """
        A list of alert details to group by (when matchingMethod is Selected)
        """
        return pulumi.get(self, "group_by_alert_details")

    @group_by_alert_details.setter
    def group_by_alert_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AlertDetail']]]]]):
        pulumi.set(self, "group_by_alert_details", value)

    @property
    @pulumi.getter(name="groupByCustomDetails")
    def group_by_custom_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
        """
        return pulumi.get(self, "group_by_custom_details")

    @group_by_custom_details.setter
    def group_by_custom_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_by_custom_details", value)

    @property
    @pulumi.getter(name="groupByEntities")
    def group_by_entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'EntityMappingType']]]]]:
        """
        A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
        """
        return pulumi.get(self, "group_by_entities")

    @group_by_entities.setter
    def group_by_entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'EntityMappingType']]]]]):
        pulumi.set(self, "group_by_entities", value)


if not MYPY:
    class IncidentConfigurationArgsDict(TypedDict):
        """
        Incident Configuration property bag.
        """
        create_incident: pulumi.Input[bool]
        """
        Create incidents from alerts triggered by this analytics rule
        """
        grouping_configuration: NotRequired[pulumi.Input['GroupingConfigurationArgsDict']]
        """
        Set how the alerts that are triggered by this analytics rule, are grouped into incidents
        """
elif False:
    IncidentConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IncidentConfigurationArgs:
    def __init__(__self__, *,
                 create_incident: pulumi.Input[bool],
                 grouping_configuration: Optional[pulumi.Input['GroupingConfigurationArgs']] = None):
        """
        Incident Configuration property bag.
        :param pulumi.Input[bool] create_incident: Create incidents from alerts triggered by this analytics rule
        :param pulumi.Input['GroupingConfigurationArgs'] grouping_configuration: Set how the alerts that are triggered by this analytics rule, are grouped into incidents
        """
        pulumi.set(__self__, "create_incident", create_incident)
        if grouping_configuration is not None:
            pulumi.set(__self__, "grouping_configuration", grouping_configuration)

    @property
    @pulumi.getter(name="createIncident")
    def create_incident(self) -> pulumi.Input[bool]:
        """
        Create incidents from alerts triggered by this analytics rule
        """
        return pulumi.get(self, "create_incident")

    @create_incident.setter
    def create_incident(self, value: pulumi.Input[bool]):
        pulumi.set(self, "create_incident", value)

    @property
    @pulumi.getter(name="groupingConfiguration")
    def grouping_configuration(self) -> Optional[pulumi.Input['GroupingConfigurationArgs']]:
        """
        Set how the alerts that are triggered by this analytics rule, are grouped into incidents
        """
        return pulumi.get(self, "grouping_configuration")

    @grouping_configuration.setter
    def grouping_configuration(self, value: Optional[pulumi.Input['GroupingConfigurationArgs']]):
        pulumi.set(self, "grouping_configuration", value)


if not MYPY:
    class IncidentInfoArgsDict(TypedDict):
        """
        Describes related incident information for the bookmark
        """
        incident_id: NotRequired[pulumi.Input[str]]
        """
        Incident Id
        """
        relation_name: NotRequired[pulumi.Input[str]]
        """
        Relation Name
        """
        severity: NotRequired[pulumi.Input[Union[str, 'IncidentSeverity']]]
        """
        The severity of the incident
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the incident
        """
elif False:
    IncidentInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IncidentInfoArgs:
    def __init__(__self__, *,
                 incident_id: Optional[pulumi.Input[str]] = None,
                 relation_name: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[Union[str, 'IncidentSeverity']]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Describes related incident information for the bookmark
        :param pulumi.Input[str] incident_id: Incident Id
        :param pulumi.Input[str] relation_name: Relation Name
        :param pulumi.Input[Union[str, 'IncidentSeverity']] severity: The severity of the incident
        :param pulumi.Input[str] title: The title of the incident
        """
        if incident_id is not None:
            pulumi.set(__self__, "incident_id", incident_id)
        if relation_name is not None:
            pulumi.set(__self__, "relation_name", relation_name)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="incidentId")
    def incident_id(self) -> Optional[pulumi.Input[str]]:
        """
        Incident Id
        """
        return pulumi.get(self, "incident_id")

    @incident_id.setter
    def incident_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_id", value)

    @property
    @pulumi.getter(name="relationName")
    def relation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Relation Name
        """
        return pulumi.get(self, "relation_name")

    @relation_name.setter
    def relation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relation_name", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[Union[str, 'IncidentSeverity']]]:
        """
        The severity of the incident
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[Union[str, 'IncidentSeverity']]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the incident
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class IncidentLabelArgsDict(TypedDict):
        """
        Represents an incident label
        """
        label_name: pulumi.Input[str]
        """
        The name of the label
        """
elif False:
    IncidentLabelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IncidentLabelArgs:
    def __init__(__self__, *,
                 label_name: pulumi.Input[str]):
        """
        Represents an incident label
        :param pulumi.Input[str] label_name: The name of the label
        """
        pulumi.set(__self__, "label_name", label_name)

    @property
    @pulumi.getter(name="labelName")
    def label_name(self) -> pulumi.Input[str]:
        """
        The name of the label
        """
        return pulumi.get(self, "label_name")

    @label_name.setter
    def label_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "label_name", value)


if not MYPY:
    class IncidentOwnerInfoArgsDict(TypedDict):
        """
        Information on the user an incident is assigned to
        """
        assigned_to: NotRequired[pulumi.Input[str]]
        """
        The name of the user the incident is assigned to.
        """
        email: NotRequired[pulumi.Input[str]]
        """
        The email of the user the incident is assigned to.
        """
        object_id: NotRequired[pulumi.Input[str]]
        """
        The object id of the user the incident is assigned to.
        """
        user_principal_name: NotRequired[pulumi.Input[str]]
        """
        The user principal name of the user the incident is assigned to.
        """
elif False:
    IncidentOwnerInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IncidentOwnerInfoArgs:
    def __init__(__self__, *,
                 assigned_to: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 user_principal_name: Optional[pulumi.Input[str]] = None):
        """
        Information on the user an incident is assigned to
        :param pulumi.Input[str] assigned_to: The name of the user the incident is assigned to.
        :param pulumi.Input[str] email: The email of the user the incident is assigned to.
        :param pulumi.Input[str] object_id: The object id of the user the incident is assigned to.
        :param pulumi.Input[str] user_principal_name: The user principal name of the user the incident is assigned to.
        """
        if assigned_to is not None:
            pulumi.set(__self__, "assigned_to", assigned_to)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if user_principal_name is not None:
            pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="assignedTo")
    def assigned_to(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the user the incident is assigned to.
        """
        return pulumi.get(self, "assigned_to")

    @assigned_to.setter
    def assigned_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assigned_to", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The email of the user the incident is assigned to.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        The object id of the user the incident is assigned to.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user principal name of the user the incident is assigned to.
        """
        return pulumi.get(self, "user_principal_name")

    @user_principal_name.setter
    def user_principal_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_principal_name", value)


if not MYPY:
    class InstructionStepsInstructionsArgsDict(TypedDict):
        type: pulumi.Input[Union[str, 'SettingType']]
        """
        The kind of the setting
        """
        parameters: NotRequired[Any]
        """
        The parameters for the setting
        """
elif False:
    InstructionStepsInstructionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstructionStepsInstructionsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'SettingType']],
                 parameters: Optional[Any] = None):
        """
        :param pulumi.Input[Union[str, 'SettingType']] type: The kind of the setting
        :param Any parameters: The parameters for the setting
        """
        pulumi.set(__self__, "type", type)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'SettingType']]:
        """
        The kind of the setting
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'SettingType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Any]:
        """
        The parameters for the setting
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[Any]):
        pulumi.set(self, "parameters", value)


if not MYPY:
    class MCASDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for MCAS (Microsoft Cloud App Security) data connector.
        """
        alerts: pulumi.Input['DataConnectorDataTypeCommonArgsDict']
        """
        Alerts data type connection.
        """
        discovery_logs: NotRequired[pulumi.Input['DataConnectorDataTypeCommonArgsDict']]
        """
        Discovery log data type connection.
        """
elif False:
    MCASDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MCASDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 alerts: pulumi.Input['DataConnectorDataTypeCommonArgs'],
                 discovery_logs: Optional[pulumi.Input['DataConnectorDataTypeCommonArgs']] = None):
        """
        The available data types for MCAS (Microsoft Cloud App Security) data connector.
        :param pulumi.Input['DataConnectorDataTypeCommonArgs'] alerts: Alerts data type connection.
        :param pulumi.Input['DataConnectorDataTypeCommonArgs'] discovery_logs: Discovery log data type connection.
        """
        pulumi.set(__self__, "alerts", alerts)
        if discovery_logs is not None:
            pulumi.set(__self__, "discovery_logs", discovery_logs)

    @property
    @pulumi.getter
    def alerts(self) -> pulumi.Input['DataConnectorDataTypeCommonArgs']:
        """
        Alerts data type connection.
        """
        return pulumi.get(self, "alerts")

    @alerts.setter
    def alerts(self, value: pulumi.Input['DataConnectorDataTypeCommonArgs']):
        pulumi.set(self, "alerts", value)

    @property
    @pulumi.getter(name="discoveryLogs")
    def discovery_logs(self) -> Optional[pulumi.Input['DataConnectorDataTypeCommonArgs']]:
        """
        Discovery log data type connection.
        """
        return pulumi.get(self, "discovery_logs")

    @discovery_logs.setter
    def discovery_logs(self, value: Optional[pulumi.Input['DataConnectorDataTypeCommonArgs']]):
        pulumi.set(self, "discovery_logs", value)


if not MYPY:
    class MSTIDataConnectorDataTypesBingSafetyPhishingURLArgsDict(TypedDict):
        """
        Data type for Microsoft Threat Intelligence Platforms data connector.
        """
        lookback_period: pulumi.Input[str]
        """
        lookback period
        """
        state: pulumi.Input[Union[str, 'DataTypeState']]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    MSTIDataConnectorDataTypesBingSafetyPhishingURLArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MSTIDataConnectorDataTypesBingSafetyPhishingURLArgs:
    def __init__(__self__, *,
                 lookback_period: pulumi.Input[str],
                 state: pulumi.Input[Union[str, 'DataTypeState']]):
        """
        Data type for Microsoft Threat Intelligence Platforms data connector.
        :param pulumi.Input[str] lookback_period: lookback period
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "lookback_period", lookback_period)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="lookbackPeriod")
    def lookback_period(self) -> pulumi.Input[str]:
        """
        lookback period
        """
        return pulumi.get(self, "lookback_period")

    @lookback_period.setter
    def lookback_period(self, value: pulumi.Input[str]):
        pulumi.set(self, "lookback_period", value)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Union[str, 'DataTypeState']]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Union[str, 'DataTypeState']]):
        pulumi.set(self, "state", value)


if not MYPY:
    class MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgsDict(TypedDict):
        """
        Data type for Microsoft Threat Intelligence Platforms data connector.
        """
        lookback_period: pulumi.Input[str]
        """
        lookback period
        """
        state: pulumi.Input[Union[str, 'DataTypeState']]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs:
    def __init__(__self__, *,
                 lookback_period: pulumi.Input[str],
                 state: pulumi.Input[Union[str, 'DataTypeState']]):
        """
        Data type for Microsoft Threat Intelligence Platforms data connector.
        :param pulumi.Input[str] lookback_period: lookback period
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "lookback_period", lookback_period)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="lookbackPeriod")
    def lookback_period(self) -> pulumi.Input[str]:
        """
        lookback period
        """
        return pulumi.get(self, "lookback_period")

    @lookback_period.setter
    def lookback_period(self, value: pulumi.Input[str]):
        pulumi.set(self, "lookback_period", value)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Union[str, 'DataTypeState']]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Union[str, 'DataTypeState']]):
        pulumi.set(self, "state", value)


if not MYPY:
    class MSTIDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for Microsoft Threat Intelligence Platforms data connector.
        """
        bing_safety_phishing_url: pulumi.Input['MSTIDataConnectorDataTypesBingSafetyPhishingURLArgsDict']
        """
        Data type for Microsoft Threat Intelligence Platforms data connector.
        """
        microsoft_emerging_threat_feed: pulumi.Input['MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgsDict']
        """
        Data type for Microsoft Threat Intelligence Platforms data connector.
        """
elif False:
    MSTIDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MSTIDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 bing_safety_phishing_url: pulumi.Input['MSTIDataConnectorDataTypesBingSafetyPhishingURLArgs'],
                 microsoft_emerging_threat_feed: pulumi.Input['MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs']):
        """
        The available data types for Microsoft Threat Intelligence Platforms data connector.
        :param pulumi.Input['MSTIDataConnectorDataTypesBingSafetyPhishingURLArgs'] bing_safety_phishing_url: Data type for Microsoft Threat Intelligence Platforms data connector.
        :param pulumi.Input['MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs'] microsoft_emerging_threat_feed: Data type for Microsoft Threat Intelligence Platforms data connector.
        """
        pulumi.set(__self__, "bing_safety_phishing_url", bing_safety_phishing_url)
        pulumi.set(__self__, "microsoft_emerging_threat_feed", microsoft_emerging_threat_feed)

    @property
    @pulumi.getter(name="bingSafetyPhishingURL")
    def bing_safety_phishing_url(self) -> pulumi.Input['MSTIDataConnectorDataTypesBingSafetyPhishingURLArgs']:
        """
        Data type for Microsoft Threat Intelligence Platforms data connector.
        """
        return pulumi.get(self, "bing_safety_phishing_url")

    @bing_safety_phishing_url.setter
    def bing_safety_phishing_url(self, value: pulumi.Input['MSTIDataConnectorDataTypesBingSafetyPhishingURLArgs']):
        pulumi.set(self, "bing_safety_phishing_url", value)

    @property
    @pulumi.getter(name="microsoftEmergingThreatFeed")
    def microsoft_emerging_threat_feed(self) -> pulumi.Input['MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs']:
        """
        Data type for Microsoft Threat Intelligence Platforms data connector.
        """
        return pulumi.get(self, "microsoft_emerging_threat_feed")

    @microsoft_emerging_threat_feed.setter
    def microsoft_emerging_threat_feed(self, value: pulumi.Input['MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs']):
        pulumi.set(self, "microsoft_emerging_threat_feed", value)


if not MYPY:
    class MTPDataConnectorDataTypesIncidentsArgsDict(TypedDict):
        """
        Data type for Microsoft Threat Protection Platforms data connector.
        """
        state: pulumi.Input[Union[str, 'DataTypeState']]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    MTPDataConnectorDataTypesIncidentsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MTPDataConnectorDataTypesIncidentsArgs:
    def __init__(__self__, *,
                 state: pulumi.Input[Union[str, 'DataTypeState']]):
        """
        Data type for Microsoft Threat Protection Platforms data connector.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Union[str, 'DataTypeState']]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Union[str, 'DataTypeState']]):
        pulumi.set(self, "state", value)


if not MYPY:
    class MTPDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for Microsoft Threat Protection Platforms data connector.
        """
        incidents: pulumi.Input['MTPDataConnectorDataTypesIncidentsArgsDict']
        """
        Data type for Microsoft Threat Protection Platforms data connector.
        """
elif False:
    MTPDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MTPDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 incidents: pulumi.Input['MTPDataConnectorDataTypesIncidentsArgs']):
        """
        The available data types for Microsoft Threat Protection Platforms data connector.
        :param pulumi.Input['MTPDataConnectorDataTypesIncidentsArgs'] incidents: Data type for Microsoft Threat Protection Platforms data connector.
        """
        pulumi.set(__self__, "incidents", incidents)

    @property
    @pulumi.getter
    def incidents(self) -> pulumi.Input['MTPDataConnectorDataTypesIncidentsArgs']:
        """
        Data type for Microsoft Threat Protection Platforms data connector.
        """
        return pulumi.get(self, "incidents")

    @incidents.setter
    def incidents(self, value: pulumi.Input['MTPDataConnectorDataTypesIncidentsArgs']):
        pulumi.set(self, "incidents", value)


if not MYPY:
    class MetadataAuthorArgsDict(TypedDict):
        """
        Publisher or creator of the content item.
        """
        email: NotRequired[pulumi.Input[str]]
        """
        Email of author contact
        """
        link: NotRequired[pulumi.Input[str]]
        """
        Link for author/vendor page
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the author. Company or person.
        """
elif False:
    MetadataAuthorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MetadataAuthorArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Publisher or creator of the content item.
        :param pulumi.Input[str] email: Email of author contact
        :param pulumi.Input[str] link: Link for author/vendor page
        :param pulumi.Input[str] name: Name of the author. Company or person.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of author contact
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        Link for author/vendor page
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the author. Company or person.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class MetadataCategoriesArgsDict(TypedDict):
        """
        ies for the solution content item
        """
        domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        domain for the solution content item
        """
        verticals: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Industry verticals for the solution content item
        """
elif False:
    MetadataCategoriesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MetadataCategoriesArgs:
    def __init__(__self__, *,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 verticals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        ies for the solution content item
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domains: domain for the solution content item
        :param pulumi.Input[Sequence[pulumi.Input[str]]] verticals: Industry verticals for the solution content item
        """
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if verticals is not None:
            pulumi.set(__self__, "verticals", verticals)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        domain for the solution content item
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def verticals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Industry verticals for the solution content item
        """
        return pulumi.get(self, "verticals")

    @verticals.setter
    def verticals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "verticals", value)


if not MYPY:
    class MetadataDependenciesArgsDict(TypedDict):
        """
        Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies.
        """
        content_id: NotRequired[pulumi.Input[str]]
        """
        Id of the content item we depend on
        """
        criteria: NotRequired[pulumi.Input[Sequence[pulumi.Input['MetadataDependenciesArgsDict']]]]
        """
        This is the list of dependencies we must fulfill, according to the AND/OR operator
        """
        kind: NotRequired[pulumi.Input[Union[str, 'Kind']]]
        """
        Type of the content item we depend on
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the content item
        """
        operator: NotRequired[pulumi.Input[Union[str, 'Operator']]]
        """
        Operator used for list of dependencies in criteria array.
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
        """
elif False:
    MetadataDependenciesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MetadataDependenciesArgs:
    def __init__(__self__, *,
                 content_id: Optional[pulumi.Input[str]] = None,
                 criteria: Optional[pulumi.Input[Sequence[pulumi.Input['MetadataDependenciesArgs']]]] = None,
                 kind: Optional[pulumi.Input[Union[str, 'Kind']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[Union[str, 'Operator']]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies.
        :param pulumi.Input[str] content_id: Id of the content item we depend on
        :param pulumi.Input[Sequence[pulumi.Input['MetadataDependenciesArgs']]] criteria: This is the list of dependencies we must fulfill, according to the AND/OR operator
        :param pulumi.Input[Union[str, 'Kind']] kind: Type of the content item we depend on
        :param pulumi.Input[str] name: Name of the content item
        :param pulumi.Input[Union[str, 'Operator']] operator: Operator used for list of dependencies in criteria array.
        :param pulumi.Input[str] version: Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
        """
        if content_id is not None:
            pulumi.set(__self__, "content_id", content_id)
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="contentId")
    def content_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the content item we depend on
        """
        return pulumi.get(self, "content_id")

    @content_id.setter
    def content_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_id", value)

    @property
    @pulumi.getter
    def criteria(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetadataDependenciesArgs']]]]:
        """
        This is the list of dependencies we must fulfill, according to the AND/OR operator
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetadataDependenciesArgs']]]]):
        pulumi.set(self, "criteria", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[Union[str, 'Kind']]]:
        """
        Type of the content item we depend on
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[Union[str, 'Kind']]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the content item
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[Union[str, 'Operator']]]:
        """
        Operator used for list of dependencies in criteria array.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[Union[str, 'Operator']]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class MetadataSourceArgsDict(TypedDict):
        """
        The original source of the content item, where it comes from.
        """
        kind: pulumi.Input[Union[str, 'SourceKind']]
        """
        Source type of the content
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the content source.  The repo name, solution name, LA workspace name etc.
        """
        source_id: NotRequired[pulumi.Input[str]]
        """
        ID of the content source.  The solution ID, workspace ID, etc
        """
elif False:
    MetadataSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MetadataSourceArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[Union[str, 'SourceKind']],
                 name: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[str]] = None):
        """
        The original source of the content item, where it comes from.
        :param pulumi.Input[Union[str, 'SourceKind']] kind: Source type of the content
        :param pulumi.Input[str] name: Name of the content source.  The repo name, solution name, LA workspace name etc.
        :param pulumi.Input[str] source_id: ID of the content source.  The solution ID, workspace ID, etc
        """
        pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[Union[str, 'SourceKind']]:
        """
        Source type of the content
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[Union[str, 'SourceKind']]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the content source.  The repo name, solution name, LA workspace name etc.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the content source.  The solution ID, workspace ID, etc
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)


if not MYPY:
    class MetadataSupportArgsDict(TypedDict):
        """
        Support information for the content item.
        """
        tier: pulumi.Input[Union[str, 'SupportTier']]
        """
        Type of support for content item
        """
        email: NotRequired[pulumi.Input[str]]
        """
        Email of support contact
        """
        link: NotRequired[pulumi.Input[str]]
        """
        Link for support help, like to support page to open a ticket etc.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the support contact. Company or person.
        """
elif False:
    MetadataSupportArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MetadataSupportArgs:
    def __init__(__self__, *,
                 tier: pulumi.Input[Union[str, 'SupportTier']],
                 email: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Support information for the content item.
        :param pulumi.Input[Union[str, 'SupportTier']] tier: Type of support for content item
        :param pulumi.Input[str] email: Email of support contact
        :param pulumi.Input[str] link: Link for support help, like to support page to open a ticket etc.
        :param pulumi.Input[str] name: Name of the support contact. Company or person.
        """
        pulumi.set(__self__, "tier", tier)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def tier(self) -> pulumi.Input[Union[str, 'SupportTier']]:
        """
        Type of support for content item
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: pulumi.Input[Union[str, 'SupportTier']]):
        pulumi.set(self, "tier", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of support contact
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        Link for support help, like to support page to open a ticket etc.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the support contact. Company or person.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OfficeDataConnectorDataTypesExchangeArgsDict(TypedDict):
        """
        Exchange data type connection.
        """
        state: pulumi.Input[Union[str, 'DataTypeState']]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    OfficeDataConnectorDataTypesExchangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OfficeDataConnectorDataTypesExchangeArgs:
    def __init__(__self__, *,
                 state: pulumi.Input[Union[str, 'DataTypeState']]):
        """
        Exchange data type connection.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Union[str, 'DataTypeState']]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Union[str, 'DataTypeState']]):
        pulumi.set(self, "state", value)


if not MYPY:
    class OfficeDataConnectorDataTypesSharePointArgsDict(TypedDict):
        """
        SharePoint data type connection.
        """
        state: pulumi.Input[Union[str, 'DataTypeState']]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    OfficeDataConnectorDataTypesSharePointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OfficeDataConnectorDataTypesSharePointArgs:
    def __init__(__self__, *,
                 state: pulumi.Input[Union[str, 'DataTypeState']]):
        """
        SharePoint data type connection.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Union[str, 'DataTypeState']]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Union[str, 'DataTypeState']]):
        pulumi.set(self, "state", value)


if not MYPY:
    class OfficeDataConnectorDataTypesTeamsArgsDict(TypedDict):
        """
        Teams data type connection.
        """
        state: pulumi.Input[Union[str, 'DataTypeState']]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    OfficeDataConnectorDataTypesTeamsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OfficeDataConnectorDataTypesTeamsArgs:
    def __init__(__self__, *,
                 state: pulumi.Input[Union[str, 'DataTypeState']]):
        """
        Teams data type connection.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Union[str, 'DataTypeState']]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Union[str, 'DataTypeState']]):
        pulumi.set(self, "state", value)


if not MYPY:
    class OfficeDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for office data connector.
        """
        exchange: pulumi.Input['OfficeDataConnectorDataTypesExchangeArgsDict']
        """
        Exchange data type connection.
        """
        share_point: pulumi.Input['OfficeDataConnectorDataTypesSharePointArgsDict']
        """
        SharePoint data type connection.
        """
        teams: pulumi.Input['OfficeDataConnectorDataTypesTeamsArgsDict']
        """
        Teams data type connection.
        """
elif False:
    OfficeDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OfficeDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 exchange: pulumi.Input['OfficeDataConnectorDataTypesExchangeArgs'],
                 share_point: pulumi.Input['OfficeDataConnectorDataTypesSharePointArgs'],
                 teams: pulumi.Input['OfficeDataConnectorDataTypesTeamsArgs']):
        """
        The available data types for office data connector.
        :param pulumi.Input['OfficeDataConnectorDataTypesExchangeArgs'] exchange: Exchange data type connection.
        :param pulumi.Input['OfficeDataConnectorDataTypesSharePointArgs'] share_point: SharePoint data type connection.
        :param pulumi.Input['OfficeDataConnectorDataTypesTeamsArgs'] teams: Teams data type connection.
        """
        pulumi.set(__self__, "exchange", exchange)
        pulumi.set(__self__, "share_point", share_point)
        pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter
    def exchange(self) -> pulumi.Input['OfficeDataConnectorDataTypesExchangeArgs']:
        """
        Exchange data type connection.
        """
        return pulumi.get(self, "exchange")

    @exchange.setter
    def exchange(self, value: pulumi.Input['OfficeDataConnectorDataTypesExchangeArgs']):
        pulumi.set(self, "exchange", value)

    @property
    @pulumi.getter(name="sharePoint")
    def share_point(self) -> pulumi.Input['OfficeDataConnectorDataTypesSharePointArgs']:
        """
        SharePoint data type connection.
        """
        return pulumi.get(self, "share_point")

    @share_point.setter
    def share_point(self, value: pulumi.Input['OfficeDataConnectorDataTypesSharePointArgs']):
        pulumi.set(self, "share_point", value)

    @property
    @pulumi.getter
    def teams(self) -> pulumi.Input['OfficeDataConnectorDataTypesTeamsArgs']:
        """
        Teams data type connection.
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: pulumi.Input['OfficeDataConnectorDataTypesTeamsArgs']):
        pulumi.set(self, "teams", value)


if not MYPY:
    class PermissionsCustomsArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        Customs permissions description
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Customs permissions name
        """
elif False:
    PermissionsCustomsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PermissionsCustomsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Customs permissions description
        :param pulumi.Input[str] name: Customs permissions name
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Customs permissions description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Customs permissions name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class PermissionsResourceProviderArgsDict(TypedDict):
        permissions_display_text: NotRequired[pulumi.Input[str]]
        """
        Permission description text
        """
        provider: NotRequired[pulumi.Input[Union[str, 'ProviderName']]]
        """
        Provider name
        """
        provider_display_name: NotRequired[pulumi.Input[str]]
        """
        Permission provider display name
        """
        required_permissions: NotRequired[pulumi.Input['RequiredPermissionsArgsDict']]
        """
        Required permissions for the connector
        """
        scope: NotRequired[pulumi.Input[Union[str, 'PermissionProviderScope']]]
        """
        Permission provider scope
        """
elif False:
    PermissionsResourceProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PermissionsResourceProviderArgs:
    def __init__(__self__, *,
                 permissions_display_text: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[Union[str, 'ProviderName']]] = None,
                 provider_display_name: Optional[pulumi.Input[str]] = None,
                 required_permissions: Optional[pulumi.Input['RequiredPermissionsArgs']] = None,
                 scope: Optional[pulumi.Input[Union[str, 'PermissionProviderScope']]] = None):
        """
        :param pulumi.Input[str] permissions_display_text: Permission description text
        :param pulumi.Input[Union[str, 'ProviderName']] provider: Provider name
        :param pulumi.Input[str] provider_display_name: Permission provider display name
        :param pulumi.Input['RequiredPermissionsArgs'] required_permissions: Required permissions for the connector
        :param pulumi.Input[Union[str, 'PermissionProviderScope']] scope: Permission provider scope
        """
        if permissions_display_text is not None:
            pulumi.set(__self__, "permissions_display_text", permissions_display_text)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if provider_display_name is not None:
            pulumi.set(__self__, "provider_display_name", provider_display_name)
        if required_permissions is not None:
            pulumi.set(__self__, "required_permissions", required_permissions)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="permissionsDisplayText")
    def permissions_display_text(self) -> Optional[pulumi.Input[str]]:
        """
        Permission description text
        """
        return pulumi.get(self, "permissions_display_text")

    @permissions_display_text.setter
    def permissions_display_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permissions_display_text", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[Union[str, 'ProviderName']]]:
        """
        Provider name
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[Union[str, 'ProviderName']]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="providerDisplayName")
    def provider_display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Permission provider display name
        """
        return pulumi.get(self, "provider_display_name")

    @provider_display_name.setter
    def provider_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_display_name", value)

    @property
    @pulumi.getter(name="requiredPermissions")
    def required_permissions(self) -> Optional[pulumi.Input['RequiredPermissionsArgs']]:
        """
        Required permissions for the connector
        """
        return pulumi.get(self, "required_permissions")

    @required_permissions.setter
    def required_permissions(self, value: Optional[pulumi.Input['RequiredPermissionsArgs']]):
        pulumi.set(self, "required_permissions", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[Union[str, 'PermissionProviderScope']]]:
        """
        Permission provider scope
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[Union[str, 'PermissionProviderScope']]]):
        pulumi.set(self, "scope", value)


if not MYPY:
    class PermissionsArgsDict(TypedDict):
        """
        Permissions required for the connector
        """
        customs: NotRequired[pulumi.Input[Sequence[pulumi.Input['PermissionsCustomsArgsDict']]]]
        """
        Customs permissions required for the connector
        """
        resource_provider: NotRequired[pulumi.Input[Sequence[pulumi.Input['PermissionsResourceProviderArgsDict']]]]
        """
        Resource provider permissions required for the connector
        """
elif False:
    PermissionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PermissionsArgs:
    def __init__(__self__, *,
                 customs: Optional[pulumi.Input[Sequence[pulumi.Input['PermissionsCustomsArgs']]]] = None,
                 resource_provider: Optional[pulumi.Input[Sequence[pulumi.Input['PermissionsResourceProviderArgs']]]] = None):
        """
        Permissions required for the connector
        :param pulumi.Input[Sequence[pulumi.Input['PermissionsCustomsArgs']]] customs: Customs permissions required for the connector
        :param pulumi.Input[Sequence[pulumi.Input['PermissionsResourceProviderArgs']]] resource_provider: Resource provider permissions required for the connector
        """
        if customs is not None:
            pulumi.set(__self__, "customs", customs)
        if resource_provider is not None:
            pulumi.set(__self__, "resource_provider", resource_provider)

    @property
    @pulumi.getter
    def customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PermissionsCustomsArgs']]]]:
        """
        Customs permissions required for the connector
        """
        return pulumi.get(self, "customs")

    @customs.setter
    def customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PermissionsCustomsArgs']]]]):
        pulumi.set(self, "customs", value)

    @property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PermissionsResourceProviderArgs']]]]:
        """
        Resource provider permissions required for the connector
        """
        return pulumi.get(self, "resource_provider")

    @resource_provider.setter
    def resource_provider(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PermissionsResourceProviderArgs']]]]):
        pulumi.set(self, "resource_provider", value)


if not MYPY:
    class RepositoryArgsDict(TypedDict):
        """
        metadata of a repository.
        """
        branch: NotRequired[pulumi.Input[str]]
        """
        Branch name of repository.
        """
        deployment_logs_url: NotRequired[pulumi.Input[str]]
        """
        Url to access repository action logs.
        """
        display_url: NotRequired[pulumi.Input[str]]
        """
        Display url of repository.
        """
        path_mapping: NotRequired[pulumi.Input[Sequence[pulumi.Input['ContentPathMapArgsDict']]]]
        """
        Dictionary of source control content type and path mapping.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        Url of repository.
        """
elif False:
    RepositoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RepositoryArgs:
    def __init__(__self__, *,
                 branch: Optional[pulumi.Input[str]] = None,
                 deployment_logs_url: Optional[pulumi.Input[str]] = None,
                 display_url: Optional[pulumi.Input[str]] = None,
                 path_mapping: Optional[pulumi.Input[Sequence[pulumi.Input['ContentPathMapArgs']]]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        metadata of a repository.
        :param pulumi.Input[str] branch: Branch name of repository.
        :param pulumi.Input[str] deployment_logs_url: Url to access repository action logs.
        :param pulumi.Input[str] display_url: Display url of repository.
        :param pulumi.Input[Sequence[pulumi.Input['ContentPathMapArgs']]] path_mapping: Dictionary of source control content type and path mapping.
        :param pulumi.Input[str] url: Url of repository.
        """
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if deployment_logs_url is not None:
            pulumi.set(__self__, "deployment_logs_url", deployment_logs_url)
        if display_url is not None:
            pulumi.set(__self__, "display_url", display_url)
        if path_mapping is not None:
            pulumi.set(__self__, "path_mapping", path_mapping)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        """
        Branch name of repository.
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="deploymentLogsUrl")
    def deployment_logs_url(self) -> Optional[pulumi.Input[str]]:
        """
        Url to access repository action logs.
        """
        return pulumi.get(self, "deployment_logs_url")

    @deployment_logs_url.setter
    def deployment_logs_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_logs_url", value)

    @property
    @pulumi.getter(name="displayUrl")
    def display_url(self) -> Optional[pulumi.Input[str]]:
        """
        Display url of repository.
        """
        return pulumi.get(self, "display_url")

    @display_url.setter
    def display_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_url", value)

    @property
    @pulumi.getter(name="pathMapping")
    def path_mapping(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContentPathMapArgs']]]]:
        """
        Dictionary of source control content type and path mapping.
        """
        return pulumi.get(self, "path_mapping")

    @path_mapping.setter
    def path_mapping(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContentPathMapArgs']]]]):
        pulumi.set(self, "path_mapping", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Url of repository.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class RequiredPermissionsArgsDict(TypedDict):
        """
        Required permissions for the connector
        """
        action: NotRequired[pulumi.Input[bool]]
        """
        action permission
        """
        delete: NotRequired[pulumi.Input[bool]]
        """
        delete permission
        """
        read: NotRequired[pulumi.Input[bool]]
        """
        read permission
        """
        write: NotRequired[pulumi.Input[bool]]
        """
        write permission
        """
elif False:
    RequiredPermissionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RequiredPermissionsArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[bool]] = None,
                 delete: Optional[pulumi.Input[bool]] = None,
                 read: Optional[pulumi.Input[bool]] = None,
                 write: Optional[pulumi.Input[bool]] = None):
        """
        Required permissions for the connector
        :param pulumi.Input[bool] action: action permission
        :param pulumi.Input[bool] delete: delete permission
        :param pulumi.Input[bool] read: read permission
        :param pulumi.Input[bool] write: write permission
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if write is not None:
            pulumi.set(__self__, "write", write)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[bool]]:
        """
        action permission
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[bool]]:
        """
        delete permission
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def read(self) -> Optional[pulumi.Input[bool]]:
        """
        read permission
        """
        return pulumi.get(self, "read")

    @read.setter
    def read(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read", value)

    @property
    @pulumi.getter
    def write(self) -> Optional[pulumi.Input[bool]]:
        """
        write permission
        """
        return pulumi.get(self, "write")

    @write.setter
    def write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "write", value)


if not MYPY:
    class TIDataConnectorDataTypesIndicatorsArgsDict(TypedDict):
        """
        Data type for indicators connection.
        """
        state: pulumi.Input[Union[str, 'DataTypeState']]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    TIDataConnectorDataTypesIndicatorsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TIDataConnectorDataTypesIndicatorsArgs:
    def __init__(__self__, *,
                 state: pulumi.Input[Union[str, 'DataTypeState']]):
        """
        Data type for indicators connection.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Union[str, 'DataTypeState']]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Union[str, 'DataTypeState']]):
        pulumi.set(self, "state", value)


if not MYPY:
    class TIDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for TI (Threat Intelligence) data connector.
        """
        indicators: pulumi.Input['TIDataConnectorDataTypesIndicatorsArgsDict']
        """
        Data type for indicators connection.
        """
elif False:
    TIDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TIDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 indicators: pulumi.Input['TIDataConnectorDataTypesIndicatorsArgs']):
        """
        The available data types for TI (Threat Intelligence) data connector.
        :param pulumi.Input['TIDataConnectorDataTypesIndicatorsArgs'] indicators: Data type for indicators connection.
        """
        pulumi.set(__self__, "indicators", indicators)

    @property
    @pulumi.getter
    def indicators(self) -> pulumi.Input['TIDataConnectorDataTypesIndicatorsArgs']:
        """
        Data type for indicators connection.
        """
        return pulumi.get(self, "indicators")

    @indicators.setter
    def indicators(self, value: pulumi.Input['TIDataConnectorDataTypesIndicatorsArgs']):
        pulumi.set(self, "indicators", value)


if not MYPY:
    class ThreatIntelligenceExternalReferenceArgsDict(TypedDict):
        """
        Describes external reference
        """
        description: NotRequired[pulumi.Input[str]]
        """
        External reference description
        """
        external_id: NotRequired[pulumi.Input[str]]
        """
        External reference ID
        """
        hashes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        External reference hashes
        """
        source_name: NotRequired[pulumi.Input[str]]
        """
        External reference source name
        """
        url: NotRequired[pulumi.Input[str]]
        """
        External reference URL
        """
elif False:
    ThreatIntelligenceExternalReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThreatIntelligenceExternalReferenceArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 hashes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Describes external reference
        :param pulumi.Input[str] description: External reference description
        :param pulumi.Input[str] external_id: External reference ID
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] hashes: External reference hashes
        :param pulumi.Input[str] source_name: External reference source name
        :param pulumi.Input[str] url: External reference URL
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if hashes is not None:
            pulumi.set(__self__, "hashes", hashes)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        External reference description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        External reference ID
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def hashes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        External reference hashes
        """
        return pulumi.get(self, "hashes")

    @hashes.setter
    def hashes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "hashes", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        """
        External reference source name
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        External reference URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class ThreatIntelligenceGranularMarkingModelArgsDict(TypedDict):
        """
        Describes threat granular marking model entity
        """
        language: NotRequired[pulumi.Input[str]]
        """
        Language granular marking model
        """
        marking_ref: NotRequired[pulumi.Input[int]]
        """
        marking reference granular marking model
        """
        selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        granular marking model selectors
        """
elif False:
    ThreatIntelligenceGranularMarkingModelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThreatIntelligenceGranularMarkingModelArgs:
    def __init__(__self__, *,
                 language: Optional[pulumi.Input[str]] = None,
                 marking_ref: Optional[pulumi.Input[int]] = None,
                 selectors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Describes threat granular marking model entity
        :param pulumi.Input[str] language: Language granular marking model
        :param pulumi.Input[int] marking_ref: marking reference granular marking model
        :param pulumi.Input[Sequence[pulumi.Input[str]]] selectors: granular marking model selectors
        """
        if language is not None:
            pulumi.set(__self__, "language", language)
        if marking_ref is not None:
            pulumi.set(__self__, "marking_ref", marking_ref)
        if selectors is not None:
            pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        """
        Language granular marking model
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter(name="markingRef")
    def marking_ref(self) -> Optional[pulumi.Input[int]]:
        """
        marking reference granular marking model
        """
        return pulumi.get(self, "marking_ref")

    @marking_ref.setter
    def marking_ref(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "marking_ref", value)

    @property
    @pulumi.getter
    def selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        granular marking model selectors
        """
        return pulumi.get(self, "selectors")

    @selectors.setter
    def selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "selectors", value)


if not MYPY:
    class ThreatIntelligenceKillChainPhaseArgsDict(TypedDict):
        """
        Describes threat kill chain phase entity
        """
        kill_chain_name: NotRequired[pulumi.Input[str]]
        """
        Kill chainName name
        """
        phase_name: NotRequired[pulumi.Input[str]]
        """
        Phase name
        """
elif False:
    ThreatIntelligenceKillChainPhaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThreatIntelligenceKillChainPhaseArgs:
    def __init__(__self__, *,
                 kill_chain_name: Optional[pulumi.Input[str]] = None,
                 phase_name: Optional[pulumi.Input[str]] = None):
        """
        Describes threat kill chain phase entity
        :param pulumi.Input[str] kill_chain_name: Kill chainName name
        :param pulumi.Input[str] phase_name: Phase name
        """
        if kill_chain_name is not None:
            pulumi.set(__self__, "kill_chain_name", kill_chain_name)
        if phase_name is not None:
            pulumi.set(__self__, "phase_name", phase_name)

    @property
    @pulumi.getter(name="killChainName")
    def kill_chain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Kill chainName name
        """
        return pulumi.get(self, "kill_chain_name")

    @kill_chain_name.setter
    def kill_chain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kill_chain_name", value)

    @property
    @pulumi.getter(name="phaseName")
    def phase_name(self) -> Optional[pulumi.Input[str]]:
        """
        Phase name
        """
        return pulumi.get(self, "phase_name")

    @phase_name.setter
    def phase_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase_name", value)


if not MYPY:
    class ThreatIntelligenceParsedPatternTypeValueArgsDict(TypedDict):
        """
        Describes threat kill chain phase entity
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of parsed pattern
        """
        value_type: NotRequired[pulumi.Input[str]]
        """
        Type of the value
        """
elif False:
    ThreatIntelligenceParsedPatternTypeValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThreatIntelligenceParsedPatternTypeValueArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[str]] = None,
                 value_type: Optional[pulumi.Input[str]] = None):
        """
        Describes threat kill chain phase entity
        :param pulumi.Input[str] value: Value of parsed pattern
        :param pulumi.Input[str] value_type: Type of the value
        """
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of parsed pattern
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the value
        """
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_type", value)


if not MYPY:
    class ThreatIntelligenceParsedPatternArgsDict(TypedDict):
        """
        Describes parsed pattern entity
        """
        pattern_type_key: NotRequired[pulumi.Input[str]]
        """
        Pattern type key
        """
        pattern_type_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['ThreatIntelligenceParsedPatternTypeValueArgsDict']]]]
        """
        Pattern type keys
        """
elif False:
    ThreatIntelligenceParsedPatternArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThreatIntelligenceParsedPatternArgs:
    def __init__(__self__, *,
                 pattern_type_key: Optional[pulumi.Input[str]] = None,
                 pattern_type_values: Optional[pulumi.Input[Sequence[pulumi.Input['ThreatIntelligenceParsedPatternTypeValueArgs']]]] = None):
        """
        Describes parsed pattern entity
        :param pulumi.Input[str] pattern_type_key: Pattern type key
        :param pulumi.Input[Sequence[pulumi.Input['ThreatIntelligenceParsedPatternTypeValueArgs']]] pattern_type_values: Pattern type keys
        """
        if pattern_type_key is not None:
            pulumi.set(__self__, "pattern_type_key", pattern_type_key)
        if pattern_type_values is not None:
            pulumi.set(__self__, "pattern_type_values", pattern_type_values)

    @property
    @pulumi.getter(name="patternTypeKey")
    def pattern_type_key(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern type key
        """
        return pulumi.get(self, "pattern_type_key")

    @pattern_type_key.setter
    def pattern_type_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type_key", value)

    @property
    @pulumi.getter(name="patternTypeValues")
    def pattern_type_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ThreatIntelligenceParsedPatternTypeValueArgs']]]]:
        """
        Pattern type keys
        """
        return pulumi.get(self, "pattern_type_values")

    @pattern_type_values.setter
    def pattern_type_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ThreatIntelligenceParsedPatternTypeValueArgs']]]]):
        pulumi.set(self, "pattern_type_values", value)


if not MYPY:
    class TiTaxiiDataConnectorDataTypesTaxiiClientArgsDict(TypedDict):
        """
        Data type for TAXII connector.
        """
        state: pulumi.Input[Union[str, 'DataTypeState']]
        """
        Describe whether this data type connection is enabled or not.
        """
elif False:
    TiTaxiiDataConnectorDataTypesTaxiiClientArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TiTaxiiDataConnectorDataTypesTaxiiClientArgs:
    def __init__(__self__, *,
                 state: pulumi.Input[Union[str, 'DataTypeState']]):
        """
        Data type for TAXII connector.
        :param pulumi.Input[Union[str, 'DataTypeState']] state: Describe whether this data type connection is enabled or not.
        """
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Union[str, 'DataTypeState']]:
        """
        Describe whether this data type connection is enabled or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Union[str, 'DataTypeState']]):
        pulumi.set(self, "state", value)


if not MYPY:
    class TiTaxiiDataConnectorDataTypesArgsDict(TypedDict):
        """
        The available data types for Threat Intelligence TAXII data connector.
        """
        taxii_client: pulumi.Input['TiTaxiiDataConnectorDataTypesTaxiiClientArgsDict']
        """
        Data type for TAXII connector.
        """
elif False:
    TiTaxiiDataConnectorDataTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TiTaxiiDataConnectorDataTypesArgs:
    def __init__(__self__, *,
                 taxii_client: pulumi.Input['TiTaxiiDataConnectorDataTypesTaxiiClientArgs']):
        """
        The available data types for Threat Intelligence TAXII data connector.
        :param pulumi.Input['TiTaxiiDataConnectorDataTypesTaxiiClientArgs'] taxii_client: Data type for TAXII connector.
        """
        pulumi.set(__self__, "taxii_client", taxii_client)

    @property
    @pulumi.getter(name="taxiiClient")
    def taxii_client(self) -> pulumi.Input['TiTaxiiDataConnectorDataTypesTaxiiClientArgs']:
        """
        Data type for TAXII connector.
        """
        return pulumi.get(self, "taxii_client")

    @taxii_client.setter
    def taxii_client(self, value: pulumi.Input['TiTaxiiDataConnectorDataTypesTaxiiClientArgs']):
        pulumi.set(self, "taxii_client", value)


if not MYPY:
    class UserInfoArgsDict(TypedDict):
        """
        User information that made some action
        """
        object_id: NotRequired[pulumi.Input[str]]
        """
        The object id of the user.
        """
elif False:
    UserInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserInfoArgs:
    def __init__(__self__, *,
                 object_id: Optional[pulumi.Input[str]] = None):
        """
        User information that made some action
        :param pulumi.Input[str] object_id: The object id of the user.
        """
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        The object id of the user.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)


if not MYPY:
    class WatchlistUserInfoArgsDict(TypedDict):
        """
        User information that made some action
        """
        object_id: NotRequired[pulumi.Input[str]]
        """
        The object id of the user.
        """
elif False:
    WatchlistUserInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WatchlistUserInfoArgs:
    def __init__(__self__, *,
                 object_id: Optional[pulumi.Input[str]] = None):
        """
        User information that made some action
        :param pulumi.Input[str] object_id: The object id of the user.
        """
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        The object id of the user.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)


