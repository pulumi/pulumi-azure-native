# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ListWhoisByDomainResult',
    'AwaitableListWhoisByDomainResult',
    'list_whois_by_domain',
    'list_whois_by_domain_output',
]

@pulumi.output_type
class ListWhoisByDomainResult:
    """
    Whois information for a given domain and associated metadata
    """
    def __init__(__self__, created=None, domain=None, expires=None, parsed_whois=None, server=None, updated=None):
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if expires and not isinstance(expires, str):
            raise TypeError("Expected argument 'expires' to be a str")
        pulumi.set(__self__, "expires", expires)
        if parsed_whois and not isinstance(parsed_whois, dict):
            raise TypeError("Expected argument 'parsed_whois' to be a dict")
        pulumi.set(__self__, "parsed_whois", parsed_whois)
        if server and not isinstance(server, str):
            raise TypeError("Expected argument 'server' to be a str")
        pulumi.set(__self__, "server", server)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The timestamp at which this record was created
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        The domain for this whois record
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def expires(self) -> Optional[str]:
        """
        The timestamp at which this record will expire
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter(name="parsedWhois")
    def parsed_whois(self) -> Optional['outputs.EnrichmentDomainWhoisDetailsResponse']:
        """
        The whois record for a given domain
        """
        return pulumi.get(self, "parsed_whois")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        The hostname of this registrar's whois server
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def updated(self) -> Optional[str]:
        """
        The timestamp at which this record was last updated
        """
        return pulumi.get(self, "updated")


class AwaitableListWhoisByDomainResult(ListWhoisByDomainResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListWhoisByDomainResult(
            created=self.created,
            domain=self.domain,
            expires=self.expires,
            parsed_whois=self.parsed_whois,
            server=self.server,
            updated=self.updated)


def list_whois_by_domain(domain: Optional[str] = None,
                         enrichment_type: Optional[str] = None,
                         resource_group_name: Optional[str] = None,
                         workspace_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListWhoisByDomainResult:
    """
    Get whois information for a single domain name


    :param str domain: The domain name
    :param str enrichment_type: Enrichment type
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workspace_name: The name of the workspace.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['enrichmentType'] = enrichment_type
    __args__['resourceGroupName'] = resource_group_name
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:securityinsights/v20240101preview:listWhoisByDomain', __args__, opts=opts, typ=ListWhoisByDomainResult).value

    return AwaitableListWhoisByDomainResult(
        created=pulumi.get(__ret__, 'created'),
        domain=pulumi.get(__ret__, 'domain'),
        expires=pulumi.get(__ret__, 'expires'),
        parsed_whois=pulumi.get(__ret__, 'parsed_whois'),
        server=pulumi.get(__ret__, 'server'),
        updated=pulumi.get(__ret__, 'updated'))


@_utilities.lift_output_func(list_whois_by_domain)
def list_whois_by_domain_output(domain: Optional[pulumi.Input[Optional[str]]] = None,
                                enrichment_type: Optional[pulumi.Input[str]] = None,
                                resource_group_name: Optional[pulumi.Input[str]] = None,
                                workspace_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListWhoisByDomainResult]:
    """
    Get whois information for a single domain name


    :param str domain: The domain name
    :param str enrichment_type: Enrichment type
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workspace_name: The name of the workspace.
    """
    ...
