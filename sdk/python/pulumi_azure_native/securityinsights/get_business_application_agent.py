# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBusinessApplicationAgentResult',
    'AwaitableGetBusinessApplicationAgentResult',
    'get_business_application_agent',
    'get_business_application_agent_output',
]

@pulumi.output_type
class GetBusinessApplicationAgentResult:
    """
    Describes the configuration of a Business Application Agent.
    """
    def __init__(__self__, agent_systems=None, configuration=None, display_name=None, etag=None, id=None, last_modified_time_utc=None, name=None, system_data=None, type=None):
        if agent_systems and not isinstance(agent_systems, list):
            raise TypeError("Expected argument 'agent_systems' to be a list")
        pulumi.set(__self__, "agent_systems", agent_systems)
        if configuration and not isinstance(configuration, dict):
            raise TypeError("Expected argument 'configuration' to be a dict")
        pulumi.set(__self__, "configuration", configuration)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_modified_time_utc and not isinstance(last_modified_time_utc, str):
            raise TypeError("Expected argument 'last_modified_time_utc' to be a str")
        pulumi.set(__self__, "last_modified_time_utc", last_modified_time_utc)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="agentSystems")
    def agent_systems(self) -> Sequence['outputs.AgentSystemResponse']:
        return pulumi.get(self, "agent_systems")

    @property
    @pulumi.getter
    def configuration(self) -> 'outputs.SapAgentConfigurationResponse':
        """
        Describes the configuration of a Business Application Agent.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> Optional[str]:
        """
        Etag of the azure resource
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedTimeUtc")
    def last_modified_time_utc(self) -> str:
        return pulumi.get(self, "last_modified_time_utc")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetBusinessApplicationAgentResult(GetBusinessApplicationAgentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBusinessApplicationAgentResult(
            agent_systems=self.agent_systems,
            configuration=self.configuration,
            display_name=self.display_name,
            etag=self.etag,
            id=self.id,
            last_modified_time_utc=self.last_modified_time_utc,
            name=self.name,
            system_data=self.system_data,
            type=self.type)


def get_business_application_agent(agent_resource_name: Optional[str] = None,
                                   resource_group_name: Optional[str] = None,
                                   workspace_name: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBusinessApplicationAgentResult:
    """
    Gets Business Application Agent.
    Azure REST API version: 2024-04-01-preview.


    :param str agent_resource_name: Business Application Agent Name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workspace_name: The name of the workspace.
    """
    __args__ = dict()
    __args__['agentResourceName'] = agent_resource_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:securityinsights:getBusinessApplicationAgent', __args__, opts=opts, typ=GetBusinessApplicationAgentResult).value

    return AwaitableGetBusinessApplicationAgentResult(
        agent_systems=pulumi.get(__ret__, 'agent_systems'),
        configuration=pulumi.get(__ret__, 'configuration'),
        display_name=pulumi.get(__ret__, 'display_name'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        last_modified_time_utc=pulumi.get(__ret__, 'last_modified_time_utc'),
        name=pulumi.get(__ret__, 'name'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))
def get_business_application_agent_output(agent_resource_name: Optional[pulumi.Input[str]] = None,
                                          resource_group_name: Optional[pulumi.Input[str]] = None,
                                          workspace_name: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBusinessApplicationAgentResult]:
    """
    Gets Business Application Agent.
    Azure REST API version: 2024-04-01-preview.


    :param str agent_resource_name: Business Application Agent Name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workspace_name: The name of the workspace.
    """
    __args__ = dict()
    __args__['agentResourceName'] = agent_resource_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:securityinsights:getBusinessApplicationAgent', __args__, opts=opts, typ=GetBusinessApplicationAgentResult)
    return __ret__.apply(lambda __response__: GetBusinessApplicationAgentResult(
        agent_systems=pulumi.get(__response__, 'agent_systems'),
        configuration=pulumi.get(__response__, 'configuration'),
        display_name=pulumi.get(__response__, 'display_name'),
        etag=pulumi.get(__response__, 'etag'),
        id=pulumi.get(__response__, 'id'),
        last_modified_time_utc=pulumi.get(__response__, 'last_modified_time_utc'),
        name=pulumi.get(__response__, 'name'),
        system_data=pulumi.get(__response__, 'system_data'),
        type=pulumi.get(__response__, 'type')))
