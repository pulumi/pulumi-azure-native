# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetPurviewAuditDataConnectorResult',
    'AwaitableGetPurviewAuditDataConnectorResult',
    'get_purview_audit_data_connector',
    'get_purview_audit_data_connector_output',
]

@pulumi.output_type
class GetPurviewAuditDataConnectorResult:
    """
    Represents PurviewAudit data connector.
    """
    def __init__(__self__, connector_definition_name=None, data_types=None, dcr_config=None, etag=None, id=None, kind=None, name=None, source_type=None, system_data=None, tenant_id=None, type=None):
        if connector_definition_name and not isinstance(connector_definition_name, str):
            raise TypeError("Expected argument 'connector_definition_name' to be a str")
        pulumi.set(__self__, "connector_definition_name", connector_definition_name)
        if data_types and not isinstance(data_types, dict):
            raise TypeError("Expected argument 'data_types' to be a dict")
        pulumi.set(__self__, "data_types", data_types)
        if dcr_config and not isinstance(dcr_config, dict):
            raise TypeError("Expected argument 'dcr_config' to be a dict")
        pulumi.set(__self__, "dcr_config", dcr_config)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if source_type and not isinstance(source_type, str):
            raise TypeError("Expected argument 'source_type' to be a str")
        pulumi.set(__self__, "source_type", source_type)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="connectorDefinitionName")
    def connector_definition_name(self) -> Optional[str]:
        """
        The connector definition name (the dataConnectorDefinition resource id).
        """
        return pulumi.get(self, "connector_definition_name")

    @property
    @pulumi.getter(name="dataTypes")
    def data_types(self) -> 'outputs.PurviewAuditConnectorDataTypesResponse':
        """
        The available data types for the connector.
        """
        return pulumi.get(self, "data_types")

    @property
    @pulumi.getter(name="dcrConfig")
    def dcr_config(self) -> Optional['outputs.DCRConfigurationResponse']:
        """
        The DCR related properties.
        """
        return pulumi.get(self, "dcr_config")

    @property
    @pulumi.getter
    def etag(self) -> Optional[str]:
        """
        Etag of the azure resource
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The kind of the data connector
        Expected value is 'PurviewAudit'.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        """
        The source type indicates which kind of data is relevant for this connector.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant id to connect to, and get the data from.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetPurviewAuditDataConnectorResult(GetPurviewAuditDataConnectorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPurviewAuditDataConnectorResult(
            connector_definition_name=self.connector_definition_name,
            data_types=self.data_types,
            dcr_config=self.dcr_config,
            etag=self.etag,
            id=self.id,
            kind=self.kind,
            name=self.name,
            source_type=self.source_type,
            system_data=self.system_data,
            tenant_id=self.tenant_id,
            type=self.type)


def get_purview_audit_data_connector(data_connector_id: Optional[str] = None,
                                     resource_group_name: Optional[str] = None,
                                     workspace_name: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPurviewAuditDataConnectorResult:
    """
    Gets a data connector.


    :param str data_connector_id: Connector ID
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workspace_name: The name of the workspace.
    """
    __args__ = dict()
    __args__['dataConnectorId'] = data_connector_id
    __args__['resourceGroupName'] = resource_group_name
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:securityinsights/v20241001preview:getPurviewAuditDataConnector', __args__, opts=opts, typ=GetPurviewAuditDataConnectorResult).value

    return AwaitableGetPurviewAuditDataConnectorResult(
        connector_definition_name=pulumi.get(__ret__, 'connector_definition_name'),
        data_types=pulumi.get(__ret__, 'data_types'),
        dcr_config=pulumi.get(__ret__, 'dcr_config'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        kind=pulumi.get(__ret__, 'kind'),
        name=pulumi.get(__ret__, 'name'),
        source_type=pulumi.get(__ret__, 'source_type'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        type=pulumi.get(__ret__, 'type'))
def get_purview_audit_data_connector_output(data_connector_id: Optional[pulumi.Input[str]] = None,
                                            resource_group_name: Optional[pulumi.Input[str]] = None,
                                            workspace_name: Optional[pulumi.Input[str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPurviewAuditDataConnectorResult]:
    """
    Gets a data connector.


    :param str data_connector_id: Connector ID
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workspace_name: The name of the workspace.
    """
    __args__ = dict()
    __args__['dataConnectorId'] = data_connector_id
    __args__['resourceGroupName'] = resource_group_name
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:securityinsights/v20241001preview:getPurviewAuditDataConnector', __args__, opts=opts, typ=GetPurviewAuditDataConnectorResult)
    return __ret__.apply(lambda __response__: GetPurviewAuditDataConnectorResult(
        connector_definition_name=pulumi.get(__response__, 'connector_definition_name'),
        data_types=pulumi.get(__response__, 'data_types'),
        dcr_config=pulumi.get(__response__, 'dcr_config'),
        etag=pulumi.get(__response__, 'etag'),
        id=pulumi.get(__response__, 'id'),
        kind=pulumi.get(__response__, 'kind'),
        name=pulumi.get(__response__, 'name'),
        source_type=pulumi.get(__response__, 'source_type'),
        system_data=pulumi.get(__response__, 'system_data'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        type=pulumi.get(__response__, 'type')))
