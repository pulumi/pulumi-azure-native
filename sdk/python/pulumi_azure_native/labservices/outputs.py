# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AutoShutdownProfileResponse',
    'ConnectionProfileResponse',
    'CredentialsResponse',
    'EnvironmentDetailsResponse',
    'EnvironmentSizeResponse',
    'GalleryImageReferenceResponse',
    'IdentityResponse',
    'ImageReferenceResponse',
    'LabDetailsResponse',
    'LabNetworkProfileResponse',
    'LabPlanNetworkProfileResponse',
    'LatestOperationResultResponse',
    'NetworkInterfaceResponse',
    'OperationBatchStatusResponseItemResponse',
    'RecurrencePatternResponse',
    'ReferenceVmResponse',
    'RegionalAvailabilityResponse',
    'ResourceSetResponse',
    'ResourceSettingsResponse',
    'RosterProfileResponse',
    'SecurityProfileResponse',
    'SizeAvailabilityResponse',
    'SizeConfigurationPropertiesResponse',
    'SizeInfoResponse',
    'SkuResponse',
    'SupportInfoResponse',
    'SystemDataResponse',
    'VirtualMachineAdditionalCapabilitiesResponse',
    'VirtualMachineDetailsResponse',
    'VirtualMachineProfileResponse',
    'VmStateDetailsResponse',
]

@pulumi.output_type
class AutoShutdownProfileResponse(dict):
    """
    Profile for how to handle shutting down virtual machines.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disconnectDelay":
            suggest = "disconnect_delay"
        elif key == "idleDelay":
            suggest = "idle_delay"
        elif key == "noConnectDelay":
            suggest = "no_connect_delay"
        elif key == "shutdownOnDisconnect":
            suggest = "shutdown_on_disconnect"
        elif key == "shutdownOnIdle":
            suggest = "shutdown_on_idle"
        elif key == "shutdownWhenNotConnected":
            suggest = "shutdown_when_not_connected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoShutdownProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoShutdownProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoShutdownProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disconnect_delay: Optional[str] = None,
                 idle_delay: Optional[str] = None,
                 no_connect_delay: Optional[str] = None,
                 shutdown_on_disconnect: Optional[str] = None,
                 shutdown_on_idle: Optional[str] = None,
                 shutdown_when_not_connected: Optional[str] = None):
        """
        Profile for how to handle shutting down virtual machines.
        :param str disconnect_delay: The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
        :param str idle_delay: The amount of time a VM will idle before it is shutdown if this behavior is enabled.
        :param str no_connect_delay: The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
        :param str shutdown_on_disconnect: Whether shutdown on disconnect is enabled
        :param str shutdown_on_idle: Whether a VM will get shutdown when it has idled for a period of time.
        :param str shutdown_when_not_connected: Whether a VM will get shutdown when it hasn't been connected to after a period of time.
        """
        AutoShutdownProfileResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disconnect_delay=disconnect_delay,
            idle_delay=idle_delay,
            no_connect_delay=no_connect_delay,
            shutdown_on_disconnect=shutdown_on_disconnect,
            shutdown_on_idle=shutdown_on_idle,
            shutdown_when_not_connected=shutdown_when_not_connected,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disconnect_delay: Optional[str] = None,
             idle_delay: Optional[str] = None,
             no_connect_delay: Optional[str] = None,
             shutdown_on_disconnect: Optional[str] = None,
             shutdown_on_idle: Optional[str] = None,
             shutdown_when_not_connected: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disconnect_delay is not None:
            _setter("disconnect_delay", disconnect_delay)
        if idle_delay is not None:
            _setter("idle_delay", idle_delay)
        if no_connect_delay is not None:
            _setter("no_connect_delay", no_connect_delay)
        if shutdown_on_disconnect is None:
            shutdown_on_disconnect = 'Disabled'
        if shutdown_on_disconnect is not None:
            _setter("shutdown_on_disconnect", shutdown_on_disconnect)
        if shutdown_on_idle is None:
            shutdown_on_idle = 'None'
        if shutdown_on_idle is not None:
            _setter("shutdown_on_idle", shutdown_on_idle)
        if shutdown_when_not_connected is None:
            shutdown_when_not_connected = 'Disabled'
        if shutdown_when_not_connected is not None:
            _setter("shutdown_when_not_connected", shutdown_when_not_connected)

    @property
    @pulumi.getter(name="disconnectDelay")
    def disconnect_delay(self) -> Optional[str]:
        """
        The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
        """
        return pulumi.get(self, "disconnect_delay")

    @property
    @pulumi.getter(name="idleDelay")
    def idle_delay(self) -> Optional[str]:
        """
        The amount of time a VM will idle before it is shutdown if this behavior is enabled.
        """
        return pulumi.get(self, "idle_delay")

    @property
    @pulumi.getter(name="noConnectDelay")
    def no_connect_delay(self) -> Optional[str]:
        """
        The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
        """
        return pulumi.get(self, "no_connect_delay")

    @property
    @pulumi.getter(name="shutdownOnDisconnect")
    def shutdown_on_disconnect(self) -> Optional[str]:
        """
        Whether shutdown on disconnect is enabled
        """
        return pulumi.get(self, "shutdown_on_disconnect")

    @property
    @pulumi.getter(name="shutdownOnIdle")
    def shutdown_on_idle(self) -> Optional[str]:
        """
        Whether a VM will get shutdown when it has idled for a period of time.
        """
        return pulumi.get(self, "shutdown_on_idle")

    @property
    @pulumi.getter(name="shutdownWhenNotConnected")
    def shutdown_when_not_connected(self) -> Optional[str]:
        """
        Whether a VM will get shutdown when it hasn't been connected to after a period of time.
        """
        return pulumi.get(self, "shutdown_when_not_connected")


@pulumi.output_type
class ConnectionProfileResponse(dict):
    """
    Connection profile for how users connect to lab virtual machines.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientRdpAccess":
            suggest = "client_rdp_access"
        elif key == "clientSshAccess":
            suggest = "client_ssh_access"
        elif key == "webRdpAccess":
            suggest = "web_rdp_access"
        elif key == "webSshAccess":
            suggest = "web_ssh_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_rdp_access: Optional[str] = None,
                 client_ssh_access: Optional[str] = None,
                 web_rdp_access: Optional[str] = None,
                 web_ssh_access: Optional[str] = None):
        """
        Connection profile for how users connect to lab virtual machines.
        :param str client_rdp_access: The enabled access level for Client Access over RDP.
        :param str client_ssh_access: The enabled access level for Client Access over SSH.
        :param str web_rdp_access: The enabled access level for Web Access over RDP.
        :param str web_ssh_access: The enabled access level for Web Access over SSH.
        """
        ConnectionProfileResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_rdp_access=client_rdp_access,
            client_ssh_access=client_ssh_access,
            web_rdp_access=web_rdp_access,
            web_ssh_access=web_ssh_access,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_rdp_access: Optional[str] = None,
             client_ssh_access: Optional[str] = None,
             web_rdp_access: Optional[str] = None,
             web_ssh_access: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if client_rdp_access is None:
            client_rdp_access = 'None'
        if client_rdp_access is not None:
            _setter("client_rdp_access", client_rdp_access)
        if client_ssh_access is None:
            client_ssh_access = 'None'
        if client_ssh_access is not None:
            _setter("client_ssh_access", client_ssh_access)
        if web_rdp_access is None:
            web_rdp_access = 'None'
        if web_rdp_access is not None:
            _setter("web_rdp_access", web_rdp_access)
        if web_ssh_access is None:
            web_ssh_access = 'None'
        if web_ssh_access is not None:
            _setter("web_ssh_access", web_ssh_access)

    @property
    @pulumi.getter(name="clientRdpAccess")
    def client_rdp_access(self) -> Optional[str]:
        """
        The enabled access level for Client Access over RDP.
        """
        return pulumi.get(self, "client_rdp_access")

    @property
    @pulumi.getter(name="clientSshAccess")
    def client_ssh_access(self) -> Optional[str]:
        """
        The enabled access level for Client Access over SSH.
        """
        return pulumi.get(self, "client_ssh_access")

    @property
    @pulumi.getter(name="webRdpAccess")
    def web_rdp_access(self) -> Optional[str]:
        """
        The enabled access level for Web Access over RDP.
        """
        return pulumi.get(self, "web_rdp_access")

    @property
    @pulumi.getter(name="webSshAccess")
    def web_ssh_access(self) -> Optional[str]:
        """
        The enabled access level for Web Access over SSH.
        """
        return pulumi.get(self, "web_ssh_access")


@pulumi.output_type
class CredentialsResponse(dict):
    """
    Credentials for a user on a lab VM.
    """
    def __init__(__self__, *,
                 username: str):
        """
        Credentials for a user on a lab VM.
        :param str username: The username to use when signing in to lab VMs.
        """
        CredentialsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("username", username)

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username to use when signing in to lab VMs.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class EnvironmentDetailsResponse(dict):
    """
    This represents the details about a User's environment and its state.
    """
    def __init__(__self__, *,
                 description: str,
                 environment_state: str,
                 id: str,
                 latest_operation_result: 'outputs.LatestOperationResultResponse',
                 name: str,
                 password_last_reset: str,
                 provisioning_state: str,
                 total_usage: str,
                 virtual_machine_details: 'outputs.VirtualMachineDetailsResponse'):
        """
        This represents the details about a User's environment and its state.
        :param str description: Description of the Environment
        :param str environment_state: Publishing state of the environment setting Possible values are Creating, Created, Failed
        :param str id: Resource Id of the environment
        :param 'LatestOperationResultResponse' latest_operation_result: The details of the latest operation. ex: status, error
        :param str name: Name of the Environment
        :param str password_last_reset: When the password was last reset on the environment.
        :param str provisioning_state: The provisioning state of the environment. This also includes LabIsFull and NotYetProvisioned status.
        :param str total_usage: How long the environment has been used by a lab user
        :param 'VirtualMachineDetailsResponse' virtual_machine_details: Details of backing DTL virtual machine with compute and network details.
        """
        EnvironmentDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            environment_state=environment_state,
            id=id,
            latest_operation_result=latest_operation_result,
            name=name,
            password_last_reset=password_last_reset,
            provisioning_state=provisioning_state,
            total_usage=total_usage,
            virtual_machine_details=virtual_machine_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             environment_state: str,
             id: str,
             latest_operation_result: 'outputs.LatestOperationResultResponse',
             name: str,
             password_last_reset: str,
             provisioning_state: str,
             total_usage: str,
             virtual_machine_details: 'outputs.VirtualMachineDetailsResponse',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("description", description)
        _setter("environment_state", environment_state)
        _setter("id", id)
        _setter("latest_operation_result", latest_operation_result)
        _setter("name", name)
        _setter("password_last_reset", password_last_reset)
        _setter("provisioning_state", provisioning_state)
        _setter("total_usage", total_usage)
        _setter("virtual_machine_details", virtual_machine_details)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the Environment
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentState")
    def environment_state(self) -> str:
        """
        Publishing state of the environment setting Possible values are Creating, Created, Failed
        """
        return pulumi.get(self, "environment_state")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id of the environment
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="latestOperationResult")
    def latest_operation_result(self) -> 'outputs.LatestOperationResultResponse':
        """
        The details of the latest operation. ex: status, error
        """
        return pulumi.get(self, "latest_operation_result")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Environment
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwordLastReset")
    def password_last_reset(self) -> str:
        """
        When the password was last reset on the environment.
        """
        return pulumi.get(self, "password_last_reset")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the environment. This also includes LabIsFull and NotYetProvisioned status.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="totalUsage")
    def total_usage(self) -> str:
        """
        How long the environment has been used by a lab user
        """
        return pulumi.get(self, "total_usage")

    @property
    @pulumi.getter(name="virtualMachineDetails")
    def virtual_machine_details(self) -> 'outputs.VirtualMachineDetailsResponse':
        """
        Details of backing DTL virtual machine with compute and network details.
        """
        return pulumi.get(self, "virtual_machine_details")


@pulumi.output_type
class EnvironmentSizeResponse(dict):
    """
    Represents a size category supported by this Lab Account (small, medium or large)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxPrice":
            suggest = "max_price"
        elif key == "minMemory":
            suggest = "min_memory"
        elif key == "minNumberOfCores":
            suggest = "min_number_of_cores"
        elif key == "vmSizes":
            suggest = "vm_sizes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentSizeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentSizeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentSizeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_price: float,
                 min_memory: float,
                 min_number_of_cores: int,
                 name: Optional[str] = None,
                 vm_sizes: Optional[Sequence['outputs.SizeInfoResponse']] = None):
        """
        Represents a size category supported by this Lab Account (small, medium or large)
        :param float max_price: The pay-as-you-go dollar price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost. This is the maximum price of all prices within this tier.
        :param float min_memory: The amount of memory available (in GB). This is the minimum amount of memory within this tier.
        :param int min_number_of_cores: The number of cores a VM of this size has. This is the minimum number of cores within this tier.
        :param str name: The size category
        :param Sequence['SizeInfoResponse'] vm_sizes: Represents a set of compute sizes that can serve this given size type
        """
        EnvironmentSizeResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_price=max_price,
            min_memory=min_memory,
            min_number_of_cores=min_number_of_cores,
            name=name,
            vm_sizes=vm_sizes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_price: float,
             min_memory: float,
             min_number_of_cores: int,
             name: Optional[str] = None,
             vm_sizes: Optional[Sequence['outputs.SizeInfoResponse']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_price", max_price)
        _setter("min_memory", min_memory)
        _setter("min_number_of_cores", min_number_of_cores)
        if name is not None:
            _setter("name", name)
        if vm_sizes is not None:
            _setter("vm_sizes", vm_sizes)

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> float:
        """
        The pay-as-you-go dollar price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost. This is the maximum price of all prices within this tier.
        """
        return pulumi.get(self, "max_price")

    @property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> float:
        """
        The amount of memory available (in GB). This is the minimum amount of memory within this tier.
        """
        return pulumi.get(self, "min_memory")

    @property
    @pulumi.getter(name="minNumberOfCores")
    def min_number_of_cores(self) -> int:
        """
        The number of cores a VM of this size has. This is the minimum number of cores within this tier.
        """
        return pulumi.get(self, "min_number_of_cores")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The size category
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="vmSizes")
    def vm_sizes(self) -> Optional[Sequence['outputs.SizeInfoResponse']]:
        """
        Represents a set of compute sizes that can serve this given size type
        """
        return pulumi.get(self, "vm_sizes")


@pulumi.output_type
class GalleryImageReferenceResponse(dict):
    """
    The reference information for an Azure Marketplace image.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osType":
            suggest = "os_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 offer: Optional[str] = None,
                 os_type: Optional[str] = None,
                 publisher: Optional[str] = None,
                 sku: Optional[str] = None,
                 version: Optional[str] = None):
        """
        The reference information for an Azure Marketplace image.
        :param str offer: The offer of the gallery image.
        :param str os_type: The OS type of the gallery image.
        :param str publisher: The publisher of the gallery image.
        :param str sku: The SKU of the gallery image.
        :param str version: The version of the gallery image.
        """
        GalleryImageReferenceResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            offer=offer,
            os_type=os_type,
            publisher=publisher,
            sku=sku,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             offer: Optional[str] = None,
             os_type: Optional[str] = None,
             publisher: Optional[str] = None,
             sku: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if offer is not None:
            _setter("offer", offer)
        if os_type is not None:
            _setter("os_type", os_type)
        if publisher is not None:
            _setter("publisher", publisher)
        if sku is not None:
            _setter("sku", sku)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def offer(self) -> Optional[str]:
        """
        The offer of the gallery image.
        """
        return pulumi.get(self, "offer")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[str]:
        """
        The OS type of the gallery image.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def publisher(self) -> Optional[str]:
        """
        The publisher of the gallery image.
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter
    def sku(self) -> Optional[str]:
        """
        The SKU of the gallery image.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the gallery image.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class IdentityResponse(dict):
    """
    Identity for the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None):
        """
        Identity for the resource.
        :param str principal_id: The principal ID of resource identity.
        :param str tenant_id: The tenant ID of resource.
        :param str type: The identity type.
        """
        IdentityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            principal_id=principal_id,
            tenant_id=tenant_id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             principal_id: str,
             tenant_id: str,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("principal_id", principal_id)
        _setter("tenant_id", tenant_id)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of resource identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of resource.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ImageReferenceResponse(dict):
    """
    Image reference information. Used in the virtual machine profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactVersion":
            suggest = "exact_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_version: str,
                 id: Optional[str] = None,
                 offer: Optional[str] = None,
                 publisher: Optional[str] = None,
                 sku: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Image reference information. Used in the virtual machine profile.
        :param str exact_version: The actual version of the image after use.
        :param str id: Image resource ID
        :param str offer: The image offer if applicable.
        :param str publisher: The image publisher
        :param str sku: The image SKU
        :param str version: The image version specified on creation.
        """
        ImageReferenceResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact_version=exact_version,
            id=id,
            offer=offer,
            publisher=publisher,
            sku=sku,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact_version: str,
             id: Optional[str] = None,
             offer: Optional[str] = None,
             publisher: Optional[str] = None,
             sku: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("exact_version", exact_version)
        if id is not None:
            _setter("id", id)
        if offer is not None:
            _setter("offer", offer)
        if publisher is not None:
            _setter("publisher", publisher)
        if sku is not None:
            _setter("sku", sku)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter(name="exactVersion")
    def exact_version(self) -> str:
        """
        The actual version of the image after use.
        """
        return pulumi.get(self, "exact_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Image resource ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def offer(self) -> Optional[str]:
        """
        The image offer if applicable.
        """
        return pulumi.get(self, "offer")

    @property
    @pulumi.getter
    def publisher(self) -> Optional[str]:
        """
        The image publisher
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter
    def sku(self) -> Optional[str]:
        """
        The image SKU
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The image version specified on creation.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class LabDetailsResponse(dict):
    """
    This represents the details about a lab that the User is in, and its state.
    """
    def __init__(__self__, *,
                 usage_quota: str,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 provisioning_state: Optional[str] = None):
        """
        This represents the details about a lab that the User is in, and its state.
        :param str usage_quota: The maximum duration a user can use a VM in this lab.
        :param str id: The Id of the lab.
        :param str name: Name of the lab
        :param str provisioning_state: The provisioning state of the lab.
        """
        LabDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            usage_quota=usage_quota,
            id=id,
            name=name,
            provisioning_state=provisioning_state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             usage_quota: str,
             id: Optional[str] = None,
             name: Optional[str] = None,
             provisioning_state: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("usage_quota", usage_quota)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if provisioning_state is not None:
            _setter("provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="usageQuota")
    def usage_quota(self) -> str:
        """
        The maximum duration a user can use a VM in this lab.
        """
        return pulumi.get(self, "usage_quota")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The Id of the lab.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the lab
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        """
        The provisioning state of the lab.
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class LabNetworkProfileResponse(dict):
    """
    Profile for how to handle networking for Labs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loadBalancerId":
            suggest = "load_balancer_id"
        elif key == "publicIpId":
            suggest = "public_ip_id"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LabNetworkProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LabNetworkProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LabNetworkProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 load_balancer_id: Optional[str] = None,
                 public_ip_id: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        Profile for how to handle networking for Labs.
        :param str load_balancer_id: The external load balancer resource id
        :param str public_ip_id: The external public IP resource id
        :param str subnet_id: The external subnet resource id
        """
        LabNetworkProfileResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            load_balancer_id=load_balancer_id,
            public_ip_id=public_ip_id,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             load_balancer_id: Optional[str] = None,
             public_ip_id: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if load_balancer_id is not None:
            _setter("load_balancer_id", load_balancer_id)
        if public_ip_id is not None:
            _setter("public_ip_id", public_ip_id)
        if subnet_id is not None:
            _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        """
        The external load balancer resource id
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[str]:
        """
        The external public IP resource id
        """
        return pulumi.get(self, "public_ip_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The external subnet resource id
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class LabPlanNetworkProfileResponse(dict):
    """
    Profile for how to handle networking for Lab Plans.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LabPlanNetworkProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LabPlanNetworkProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LabPlanNetworkProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: Optional[str] = None):
        """
        Profile for how to handle networking for Lab Plans.
        :param str subnet_id: The external subnet resource id
        """
        LabPlanNetworkProfileResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if subnet_id is not None:
            _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The external subnet resource id
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class LatestOperationResultResponse(dict):
    """
    Details of the status of an operation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "httpMethod":
            suggest = "http_method"
        elif key == "operationUrl":
            suggest = "operation_url"
        elif key == "requestUri":
            suggest = "request_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LatestOperationResultResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LatestOperationResultResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LatestOperationResultResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: str,
                 error_message: str,
                 http_method: str,
                 operation_url: str,
                 request_uri: str,
                 status: str):
        """
        Details of the status of an operation.
        :param str error_code: Error code on failure.
        :param str error_message: The error message.
        :param str http_method: The HttpMethod - PUT/POST/DELETE for the operation.
        :param str operation_url: The URL to use to check long-running operation status
        :param str request_uri: Request URI of the operation.
        :param str status: The current status of the operation.
        """
        LatestOperationResultResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            error_code=error_code,
            error_message=error_message,
            http_method=http_method,
            operation_url=operation_url,
            request_uri=request_uri,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             error_code: str,
             error_message: str,
             http_method: str,
             operation_url: str,
             request_uri: str,
             status: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("error_code", error_code)
        _setter("error_message", error_message)
        _setter("http_method", http_method)
        _setter("operation_url", operation_url)
        _setter("request_uri", request_uri)
        _setter("status", status)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> str:
        """
        Error code on failure.
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        """
        The error message.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> str:
        """
        The HttpMethod - PUT/POST/DELETE for the operation.
        """
        return pulumi.get(self, "http_method")

    @property
    @pulumi.getter(name="operationUrl")
    def operation_url(self) -> str:
        """
        The URL to use to check long-running operation status
        """
        return pulumi.get(self, "operation_url")

    @property
    @pulumi.getter(name="requestUri")
    def request_uri(self) -> str:
        """
        Request URI of the operation.
        """
        return pulumi.get(self, "request_uri")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current status of the operation.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class NetworkInterfaceResponse(dict):
    """
    Network details of the environment
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIpAddress":
            suggest = "private_ip_address"
        elif key == "rdpAuthority":
            suggest = "rdp_authority"
        elif key == "sshAuthority":
            suggest = "ssh_authority"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInterfaceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInterfaceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInterfaceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_ip_address: str,
                 rdp_authority: str,
                 ssh_authority: str,
                 username: str):
        """
        Network details of the environment
        :param str private_ip_address: PrivateIp address of the Compute VM
        :param str rdp_authority: Connection information for Windows
        :param str ssh_authority: Connection information for Linux
        :param str username: Username of the VM
        """
        NetworkInterfaceResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            private_ip_address=private_ip_address,
            rdp_authority=rdp_authority,
            ssh_authority=ssh_authority,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             private_ip_address: str,
             rdp_authority: str,
             ssh_authority: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("private_ip_address", private_ip_address)
        _setter("rdp_authority", rdp_authority)
        _setter("ssh_authority", ssh_authority)
        _setter("username", username)

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> str:
        """
        PrivateIp address of the Compute VM
        """
        return pulumi.get(self, "private_ip_address")

    @property
    @pulumi.getter(name="rdpAuthority")
    def rdp_authority(self) -> str:
        """
        Connection information for Windows
        """
        return pulumi.get(self, "rdp_authority")

    @property
    @pulumi.getter(name="sshAuthority")
    def ssh_authority(self) -> str:
        """
        Connection information for Linux
        """
        return pulumi.get(self, "ssh_authority")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username of the VM
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class OperationBatchStatusResponseItemResponse(dict):
    """
    Represents the status of an operation that used the batch API.
    """
    def __init__(__self__, *,
                 operation_url: str,
                 status: str):
        """
        Represents the status of an operation that used the batch API.
        :param str operation_url: status of the long running operation for an environment
        :param str status: status of the long running operation for an environment
        """
        OperationBatchStatusResponseItemResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation_url=operation_url,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation_url: str,
             status: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operation_url", operation_url)
        _setter("status", status)

    @property
    @pulumi.getter(name="operationUrl")
    def operation_url(self) -> str:
        """
        status of the long running operation for an environment
        """
        return pulumi.get(self, "operation_url")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of the long running operation for an environment
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class RecurrencePatternResponse(dict):
    """
    Recurrence pattern of a lab schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationDate":
            suggest = "expiration_date"
        elif key == "weekDays":
            suggest = "week_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecurrencePatternResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecurrencePatternResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecurrencePatternResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiration_date: str,
                 frequency: str,
                 interval: Optional[int] = None,
                 week_days: Optional[Sequence[str]] = None):
        """
        Recurrence pattern of a lab schedule.
        :param str expiration_date: When the recurrence will expire. This date is inclusive.
        :param str frequency: The frequency of the recurrence.
        :param int interval: The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
        :param Sequence[str] week_days: The week days the schedule runs. Used for when the Frequency is set to Weekly.
        """
        RecurrencePatternResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expiration_date=expiration_date,
            frequency=frequency,
            interval=interval,
            week_days=week_days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expiration_date: str,
             frequency: str,
             interval: Optional[int] = None,
             week_days: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expiration_date", expiration_date)
        _setter("frequency", frequency)
        if interval is not None:
            _setter("interval", interval)
        if week_days is not None:
            _setter("week_days", week_days)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> str:
        """
        When the recurrence will expire. This date is inclusive.
        """
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter
    def frequency(self) -> str:
        """
        The frequency of the recurrence.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[Sequence[str]]:
        """
        The week days the schedule runs. Used for when the Frequency is set to Weekly.
        """
        return pulumi.get(self, "week_days")


@pulumi.output_type
class ReferenceVmResponse(dict):
    """
    Details of a Reference Vm
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"
        elif key == "vmResourceId":
            suggest = "vm_resource_id"
        elif key == "vmStateDetails":
            suggest = "vm_state_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReferenceVmResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReferenceVmResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReferenceVmResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_name: str,
                 vm_resource_id: str,
                 vm_state_details: 'outputs.VmStateDetailsResponse',
                 password: Optional[str] = None):
        """
        Details of a Reference Vm
        :param str user_name: The username of the virtual machine
        :param str vm_resource_id: VM resource Id for the environment
        :param 'VmStateDetailsResponse' vm_state_details: The state details for the reference virtual machine.
        :param str password: The password of the virtual machine. This will be set to null in GET resource API
        """
        ReferenceVmResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            user_name=user_name,
            vm_resource_id=vm_resource_id,
            vm_state_details=vm_state_details,
            password=password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             user_name: str,
             vm_resource_id: str,
             vm_state_details: 'outputs.VmStateDetailsResponse',
             password: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("user_name", user_name)
        _setter("vm_resource_id", vm_resource_id)
        _setter("vm_state_details", vm_state_details)
        if password is not None:
            _setter("password", password)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        The username of the virtual machine
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="vmResourceId")
    def vm_resource_id(self) -> str:
        """
        VM resource Id for the environment
        """
        return pulumi.get(self, "vm_resource_id")

    @property
    @pulumi.getter(name="vmStateDetails")
    def vm_state_details(self) -> 'outputs.VmStateDetailsResponse':
        """
        The state details for the reference virtual machine.
        """
        return pulumi.get(self, "vm_state_details")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password of the virtual machine. This will be set to null in GET resource API
        """
        return pulumi.get(self, "password")


@pulumi.output_type
class RegionalAvailabilityResponse(dict):
    """
    The availability information of sizes across regions
    """
    def __init__(__self__, *,
                 region: Optional[str] = None,
                 size_availabilities: Optional[Sequence['outputs.SizeAvailabilityResponse']] = None):
        """
        The availability information of sizes across regions
        :param str region: Corresponding region
        :param Sequence['SizeAvailabilityResponse'] size_availabilities: List of all the size information for the region
        """
        RegionalAvailabilityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            region=region,
            size_availabilities=size_availabilities,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             region: Optional[str] = None,
             size_availabilities: Optional[Sequence['outputs.SizeAvailabilityResponse']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if region is not None:
            _setter("region", region)
        if size_availabilities is not None:
            _setter("size_availabilities", size_availabilities)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Corresponding region
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sizeAvailabilities")
    def size_availabilities(self) -> Optional[Sequence['outputs.SizeAvailabilityResponse']]:
        """
        List of all the size information for the region
        """
        return pulumi.get(self, "size_availabilities")


@pulumi.output_type
class ResourceSetResponse(dict):
    """
    Represents a VM and the setting Id it was created for.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceSettingId":
            suggest = "resource_setting_id"
        elif key == "vmResourceId":
            suggest = "vm_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceSetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceSetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceSetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_setting_id: Optional[str] = None,
                 vm_resource_id: Optional[str] = None):
        """
        Represents a VM and the setting Id it was created for.
        :param str resource_setting_id: resourceSettingId for the environment
        :param str vm_resource_id: VM resource Id for the environment
        """
        ResourceSetResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_setting_id=resource_setting_id,
            vm_resource_id=vm_resource_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_setting_id: Optional[str] = None,
             vm_resource_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if resource_setting_id is not None:
            _setter("resource_setting_id", resource_setting_id)
        if vm_resource_id is not None:
            _setter("vm_resource_id", vm_resource_id)

    @property
    @pulumi.getter(name="resourceSettingId")
    def resource_setting_id(self) -> Optional[str]:
        """
        resourceSettingId for the environment
        """
        return pulumi.get(self, "resource_setting_id")

    @property
    @pulumi.getter(name="vmResourceId")
    def vm_resource_id(self) -> Optional[str]:
        """
        VM resource Id for the environment
        """
        return pulumi.get(self, "vm_resource_id")


@pulumi.output_type
class ResourceSettingsResponse(dict):
    """
    Represents resource specific settings
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageName":
            suggest = "image_name"
        elif key == "referenceVm":
            suggest = "reference_vm"
        elif key == "galleryImageResourceId":
            suggest = "gallery_image_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cores: int,
                 id: str,
                 image_name: str,
                 reference_vm: 'outputs.ReferenceVmResponse',
                 gallery_image_resource_id: Optional[str] = None,
                 size: Optional[str] = None):
        """
        Represents resource specific settings
        :param int cores: The translated compute cores of the virtual machine
        :param str id: The unique id of the resource setting
        :param str image_name: The name of the image used to created the environment setting
        :param 'ReferenceVmResponse' reference_vm: Details specific to Reference Vm
        :param str gallery_image_resource_id: The resource id of the gallery image used for creating the virtual machine
        :param str size: The size of the virtual machine
        """
        ResourceSettingsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cores=cores,
            id=id,
            image_name=image_name,
            reference_vm=reference_vm,
            gallery_image_resource_id=gallery_image_resource_id,
            size=size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cores: int,
             id: str,
             image_name: str,
             reference_vm: 'outputs.ReferenceVmResponse',
             gallery_image_resource_id: Optional[str] = None,
             size: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cores", cores)
        _setter("id", id)
        _setter("image_name", image_name)
        _setter("reference_vm", reference_vm)
        if gallery_image_resource_id is not None:
            _setter("gallery_image_resource_id", gallery_image_resource_id)
        if size is not None:
            _setter("size", size)

    @property
    @pulumi.getter
    def cores(self) -> int:
        """
        The translated compute cores of the virtual machine
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique id of the resource setting
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        The name of the image used to created the environment setting
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="referenceVm")
    def reference_vm(self) -> 'outputs.ReferenceVmResponse':
        """
        Details specific to Reference Vm
        """
        return pulumi.get(self, "reference_vm")

    @property
    @pulumi.getter(name="galleryImageResourceId")
    def gallery_image_resource_id(self) -> Optional[str]:
        """
        The resource id of the gallery image used for creating the virtual machine
        """
        return pulumi.get(self, "gallery_image_resource_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The size of the virtual machine
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class RosterProfileResponse(dict):
    """
    The lab user list management profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeDirectoryGroupId":
            suggest = "active_directory_group_id"
        elif key == "lmsInstance":
            suggest = "lms_instance"
        elif key == "ltiClientId":
            suggest = "lti_client_id"
        elif key == "ltiContextId":
            suggest = "lti_context_id"
        elif key == "ltiRosterEndpoint":
            suggest = "lti_roster_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RosterProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RosterProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RosterProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_directory_group_id: Optional[str] = None,
                 lms_instance: Optional[str] = None,
                 lti_client_id: Optional[str] = None,
                 lti_context_id: Optional[str] = None,
                 lti_roster_endpoint: Optional[str] = None):
        """
        The lab user list management profile.
        :param str active_directory_group_id: The AAD group ID which this lab roster is populated from. Having this set enables AAD sync mode.
        :param str lms_instance: The base URI identifying the lms instance.
        :param str lti_client_id: The unique id of the azure lab services tool in the lms.
        :param str lti_context_id: The unique context identifier for the lab in the lms.
        :param str lti_roster_endpoint: The uri of the names and roles service endpoint on the lms for the class attached to this lab.
        """
        RosterProfileResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            active_directory_group_id=active_directory_group_id,
            lms_instance=lms_instance,
            lti_client_id=lti_client_id,
            lti_context_id=lti_context_id,
            lti_roster_endpoint=lti_roster_endpoint,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             active_directory_group_id: Optional[str] = None,
             lms_instance: Optional[str] = None,
             lti_client_id: Optional[str] = None,
             lti_context_id: Optional[str] = None,
             lti_roster_endpoint: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if active_directory_group_id is not None:
            _setter("active_directory_group_id", active_directory_group_id)
        if lms_instance is not None:
            _setter("lms_instance", lms_instance)
        if lti_client_id is not None:
            _setter("lti_client_id", lti_client_id)
        if lti_context_id is not None:
            _setter("lti_context_id", lti_context_id)
        if lti_roster_endpoint is not None:
            _setter("lti_roster_endpoint", lti_roster_endpoint)

    @property
    @pulumi.getter(name="activeDirectoryGroupId")
    def active_directory_group_id(self) -> Optional[str]:
        """
        The AAD group ID which this lab roster is populated from. Having this set enables AAD sync mode.
        """
        return pulumi.get(self, "active_directory_group_id")

    @property
    @pulumi.getter(name="lmsInstance")
    def lms_instance(self) -> Optional[str]:
        """
        The base URI identifying the lms instance.
        """
        return pulumi.get(self, "lms_instance")

    @property
    @pulumi.getter(name="ltiClientId")
    def lti_client_id(self) -> Optional[str]:
        """
        The unique id of the azure lab services tool in the lms.
        """
        return pulumi.get(self, "lti_client_id")

    @property
    @pulumi.getter(name="ltiContextId")
    def lti_context_id(self) -> Optional[str]:
        """
        The unique context identifier for the lab in the lms.
        """
        return pulumi.get(self, "lti_context_id")

    @property
    @pulumi.getter(name="ltiRosterEndpoint")
    def lti_roster_endpoint(self) -> Optional[str]:
        """
        The uri of the names and roles service endpoint on the lms for the class attached to this lab.
        """
        return pulumi.get(self, "lti_roster_endpoint")


@pulumi.output_type
class SecurityProfileResponse(dict):
    """
    The lab security profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "registrationCode":
            suggest = "registration_code"
        elif key == "openAccess":
            suggest = "open_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 registration_code: str,
                 open_access: Optional[str] = None):
        """
        The lab security profile.
        :param str registration_code: The registration code for the lab.
        :param str open_access: Whether any user or only specified users can register to a lab.
        """
        SecurityProfileResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            registration_code=registration_code,
            open_access=open_access,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             registration_code: str,
             open_access: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("registration_code", registration_code)
        if open_access is not None:
            _setter("open_access", open_access)

    @property
    @pulumi.getter(name="registrationCode")
    def registration_code(self) -> str:
        """
        The registration code for the lab.
        """
        return pulumi.get(self, "registration_code")

    @property
    @pulumi.getter(name="openAccess")
    def open_access(self) -> Optional[str]:
        """
        Whether any user or only specified users can register to a lab.
        """
        return pulumi.get(self, "open_access")


@pulumi.output_type
class SizeAvailabilityResponse(dict):
    """
    Represents the size information
    """
    def __init__(__self__, *,
                 is_available: Optional[bool] = None,
                 size_category: Optional[str] = None):
        """
        Represents the size information
        :param bool is_available: Whether or not this size category is available
        :param str size_category: The category of the size (Basic, Standard, Performance).
        """
        SizeAvailabilityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_available=is_available,
            size_category=size_category,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_available: Optional[bool] = None,
             size_category: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if is_available is not None:
            _setter("is_available", is_available)
        if size_category is not None:
            _setter("size_category", size_category)

    @property
    @pulumi.getter(name="isAvailable")
    def is_available(self) -> Optional[bool]:
        """
        Whether or not this size category is available
        """
        return pulumi.get(self, "is_available")

    @property
    @pulumi.getter(name="sizeCategory")
    def size_category(self) -> Optional[str]:
        """
        The category of the size (Basic, Standard, Performance).
        """
        return pulumi.get(self, "size_category")


@pulumi.output_type
class SizeConfigurationPropertiesResponse(dict):
    """
    Represents the size configuration under the lab account
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentSizes":
            suggest = "environment_sizes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SizeConfigurationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SizeConfigurationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SizeConfigurationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_sizes: Optional[Sequence['outputs.EnvironmentSizeResponse']] = None):
        """
        Represents the size configuration under the lab account
        :param Sequence['EnvironmentSizeResponse'] environment_sizes: Represents a list of size categories supported by this Lab Account (Small, Medium, Large)
        """
        SizeConfigurationPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            environment_sizes=environment_sizes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             environment_sizes: Optional[Sequence['outputs.EnvironmentSizeResponse']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if environment_sizes is not None:
            _setter("environment_sizes", environment_sizes)

    @property
    @pulumi.getter(name="environmentSizes")
    def environment_sizes(self) -> Optional[Sequence['outputs.EnvironmentSizeResponse']]:
        """
        Represents a list of size categories supported by this Lab Account (Small, Medium, Large)
        """
        return pulumi.get(self, "environment_sizes")


@pulumi.output_type
class SizeInfoResponse(dict):
    """
    Contains detailed information about a size
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeSize":
            suggest = "compute_size"
        elif key == "numberOfCores":
            suggest = "number_of_cores"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SizeInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SizeInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SizeInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_size: Optional[str] = None,
                 memory: Optional[float] = None,
                 number_of_cores: Optional[int] = None,
                 price: Optional[float] = None):
        """
        Contains detailed information about a size
        :param str compute_size: Represents the actual compute size, e.g. Standard_A2_v2.
        :param float memory: The amount of memory available (in GB).
        :param int number_of_cores: The number of cores a VM of this size has.
        :param float price: The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
        """
        SizeInfoResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compute_size=compute_size,
            memory=memory,
            number_of_cores=number_of_cores,
            price=price,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compute_size: Optional[str] = None,
             memory: Optional[float] = None,
             number_of_cores: Optional[int] = None,
             price: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if compute_size is not None:
            _setter("compute_size", compute_size)
        if memory is not None:
            _setter("memory", memory)
        if number_of_cores is not None:
            _setter("number_of_cores", number_of_cores)
        if price is not None:
            _setter("price", price)

    @property
    @pulumi.getter(name="computeSize")
    def compute_size(self) -> Optional[str]:
        """
        Represents the actual compute size, e.g. Standard_A2_v2.
        """
        return pulumi.get(self, "compute_size")

    @property
    @pulumi.getter
    def memory(self) -> Optional[float]:
        """
        The amount of memory available (in GB).
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="numberOfCores")
    def number_of_cores(self) -> Optional[int]:
        """
        The number of cores a VM of this size has.
        """
        return pulumi.get(self, "number_of_cores")

    @property
    @pulumi.getter
    def price(self) -> Optional[float]:
        """
        The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
        """
        return pulumi.get(self, "price")


@pulumi.output_type
class SkuResponse(dict):
    """
    The resource model definition representing SKU
    """
    def __init__(__self__, *,
                 name: str,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        The resource model definition representing SKU
        :param str name: The name of the SKU. Ex - P3. It is typically a letter+number code
        :param int capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param str family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param str size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param str tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        SkuResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            capacity=capacity,
            family=family,
            size=size,
            tier=tier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             capacity: Optional[int] = None,
             family: Optional[str] = None,
             size: Optional[str] = None,
             tier: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if capacity is not None:
            _setter("capacity", capacity)
        if family is not None:
            _setter("family", family)
        if size is not None:
            _setter("size", size)
        if tier is not None:
            _setter("tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class SupportInfoResponse(dict):
    """
    Support contact information and instructions.
    """
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 instructions: Optional[str] = None,
                 phone: Optional[str] = None,
                 url: Optional[str] = None):
        """
        Support contact information and instructions.
        :param str email: Support contact email address.
        :param str instructions: Support instructions.
        :param str phone: Support contact phone number.
        :param str url: Support web address.
        """
        SupportInfoResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            instructions=instructions,
            phone=phone,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: Optional[str] = None,
             instructions: Optional[str] = None,
             phone: Optional[str] = None,
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if email is not None:
            _setter("email", email)
        if instructions is not None:
            _setter("instructions", instructions)
        if phone is not None:
            _setter("phone", phone)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Support contact email address.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def instructions(self) -> Optional[str]:
        """
        Support instructions.
        """
        return pulumi.get(self, "instructions")

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        """
        Support contact phone number.
        """
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Support web address.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        SystemDataResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_at=created_at,
            created_by=created_by,
            created_by_type=created_by_type,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            last_modified_by_type=last_modified_by_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_at: Optional[str] = None,
             created_by: Optional[str] = None,
             created_by_type: Optional[str] = None,
             last_modified_at: Optional[str] = None,
             last_modified_by: Optional[str] = None,
             last_modified_by_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if created_at is not None:
            _setter("created_at", created_at)
        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_type is not None:
            _setter("created_by_type", created_by_type)
        if last_modified_at is not None:
            _setter("last_modified_at", last_modified_at)
        if last_modified_by is not None:
            _setter("last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            _setter("last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class VirtualMachineAdditionalCapabilitiesResponse(dict):
    """
    The additional capabilities for a lab VM.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "installGpuDrivers":
            suggest = "install_gpu_drivers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineAdditionalCapabilitiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineAdditionalCapabilitiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineAdditionalCapabilitiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 install_gpu_drivers: Optional[str] = None):
        """
        The additional capabilities for a lab VM.
        :param str install_gpu_drivers: Flag to pre-install dedicated GPU drivers.
        """
        VirtualMachineAdditionalCapabilitiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            install_gpu_drivers=install_gpu_drivers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             install_gpu_drivers: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if install_gpu_drivers is None:
            install_gpu_drivers = 'Disabled'
        if install_gpu_drivers is not None:
            _setter("install_gpu_drivers", install_gpu_drivers)

    @property
    @pulumi.getter(name="installGpuDrivers")
    def install_gpu_drivers(self) -> Optional[str]:
        """
        Flag to pre-install dedicated GPU drivers.
        """
        return pulumi.get(self, "install_gpu_drivers")


@pulumi.output_type
class VirtualMachineDetailsResponse(dict):
    """
    Details of the backing virtual machine.
    """
    def __init__(__self__, *,
                 last_known_power_state: str,
                 private_ip_address: str,
                 provisioning_state: str,
                 rdp_authority: str,
                 ssh_authority: str,
                 user_name: str):
        """
        Details of the backing virtual machine.
        :param str last_known_power_state: Last known compute power state captured in DTL
        :param str private_ip_address: PrivateIp address of the compute VM
        :param str provisioning_state: Provisioning state of the Dtl VM
        :param str rdp_authority: Connection information for Windows
        :param str ssh_authority: Connection information for Linux
        :param str user_name: Compute VM login user name
        """
        VirtualMachineDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            last_known_power_state=last_known_power_state,
            private_ip_address=private_ip_address,
            provisioning_state=provisioning_state,
            rdp_authority=rdp_authority,
            ssh_authority=ssh_authority,
            user_name=user_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             last_known_power_state: str,
             private_ip_address: str,
             provisioning_state: str,
             rdp_authority: str,
             ssh_authority: str,
             user_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("last_known_power_state", last_known_power_state)
        _setter("private_ip_address", private_ip_address)
        _setter("provisioning_state", provisioning_state)
        _setter("rdp_authority", rdp_authority)
        _setter("ssh_authority", ssh_authority)
        _setter("user_name", user_name)

    @property
    @pulumi.getter(name="lastKnownPowerState")
    def last_known_power_state(self) -> str:
        """
        Last known compute power state captured in DTL
        """
        return pulumi.get(self, "last_known_power_state")

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> str:
        """
        PrivateIp address of the compute VM
        """
        return pulumi.get(self, "private_ip_address")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the Dtl VM
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="rdpAuthority")
    def rdp_authority(self) -> str:
        """
        Connection information for Windows
        """
        return pulumi.get(self, "rdp_authority")

    @property
    @pulumi.getter(name="sshAuthority")
    def ssh_authority(self) -> str:
        """
        Connection information for Linux
        """
        return pulumi.get(self, "ssh_authority")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        Compute VM login user name
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class VirtualMachineProfileResponse(dict):
    """
    The base virtual machine configuration for a lab.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminUser":
            suggest = "admin_user"
        elif key == "createOption":
            suggest = "create_option"
        elif key == "imageReference":
            suggest = "image_reference"
        elif key == "osType":
            suggest = "os_type"
        elif key == "usageQuota":
            suggest = "usage_quota"
        elif key == "additionalCapabilities":
            suggest = "additional_capabilities"
        elif key == "nonAdminUser":
            suggest = "non_admin_user"
        elif key == "useSharedPassword":
            suggest = "use_shared_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_user: 'outputs.CredentialsResponse',
                 create_option: str,
                 image_reference: 'outputs.ImageReferenceResponse',
                 os_type: str,
                 sku: 'outputs.SkuResponse',
                 usage_quota: str,
                 additional_capabilities: Optional['outputs.VirtualMachineAdditionalCapabilitiesResponse'] = None,
                 non_admin_user: Optional['outputs.CredentialsResponse'] = None,
                 use_shared_password: Optional[str] = None):
        """
        The base virtual machine configuration for a lab.
        :param 'CredentialsResponse' admin_user: Credentials for the admin user on the VM.
        :param str create_option: Indicates what lab virtual machines are created from.
        :param 'ImageReferenceResponse' image_reference: The image configuration for lab virtual machines.
        :param str os_type: The OS type of the image
        :param 'SkuResponse' sku: The SKU for the lab. Defines the type of virtual machines used in the lab.
        :param str usage_quota: The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours.
        :param 'VirtualMachineAdditionalCapabilitiesResponse' additional_capabilities: Additional VM capabilities.
        :param 'CredentialsResponse' non_admin_user: Credentials for the non-admin user on the VM, if one exists.
        :param str use_shared_password: Enabling this option will use the same password for all user VMs.
        """
        VirtualMachineProfileResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            admin_user=admin_user,
            create_option=create_option,
            image_reference=image_reference,
            os_type=os_type,
            sku=sku,
            usage_quota=usage_quota,
            additional_capabilities=additional_capabilities,
            non_admin_user=non_admin_user,
            use_shared_password=use_shared_password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             admin_user: 'outputs.CredentialsResponse',
             create_option: str,
             image_reference: 'outputs.ImageReferenceResponse',
             os_type: str,
             sku: 'outputs.SkuResponse',
             usage_quota: str,
             additional_capabilities: Optional['outputs.VirtualMachineAdditionalCapabilitiesResponse'] = None,
             non_admin_user: Optional['outputs.CredentialsResponse'] = None,
             use_shared_password: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("admin_user", admin_user)
        _setter("create_option", create_option)
        _setter("image_reference", image_reference)
        _setter("os_type", os_type)
        _setter("sku", sku)
        _setter("usage_quota", usage_quota)
        if additional_capabilities is not None:
            _setter("additional_capabilities", additional_capabilities)
        if non_admin_user is not None:
            _setter("non_admin_user", non_admin_user)
        if use_shared_password is None:
            use_shared_password = 'Disabled'
        if use_shared_password is not None:
            _setter("use_shared_password", use_shared_password)

    @property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> 'outputs.CredentialsResponse':
        """
        Credentials for the admin user on the VM.
        """
        return pulumi.get(self, "admin_user")

    @property
    @pulumi.getter(name="createOption")
    def create_option(self) -> str:
        """
        Indicates what lab virtual machines are created from.
        """
        return pulumi.get(self, "create_option")

    @property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> 'outputs.ImageReferenceResponse':
        """
        The image configuration for lab virtual machines.
        """
        return pulumi.get(self, "image_reference")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        The OS type of the image
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def sku(self) -> 'outputs.SkuResponse':
        """
        The SKU for the lab. Defines the type of virtual machines used in the lab.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="usageQuota")
    def usage_quota(self) -> str:
        """
        The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours.
        """
        return pulumi.get(self, "usage_quota")

    @property
    @pulumi.getter(name="additionalCapabilities")
    def additional_capabilities(self) -> Optional['outputs.VirtualMachineAdditionalCapabilitiesResponse']:
        """
        Additional VM capabilities.
        """
        return pulumi.get(self, "additional_capabilities")

    @property
    @pulumi.getter(name="nonAdminUser")
    def non_admin_user(self) -> Optional['outputs.CredentialsResponse']:
        """
        Credentials for the non-admin user on the VM, if one exists.
        """
        return pulumi.get(self, "non_admin_user")

    @property
    @pulumi.getter(name="useSharedPassword")
    def use_shared_password(self) -> Optional[str]:
        """
        Enabling this option will use the same password for all user VMs.
        """
        return pulumi.get(self, "use_shared_password")


@pulumi.output_type
class VmStateDetailsResponse(dict):
    """
    Details about the state of the reference virtual machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastKnownPowerState":
            suggest = "last_known_power_state"
        elif key == "powerState":
            suggest = "power_state"
        elif key == "rdpAuthority":
            suggest = "rdp_authority"
        elif key == "sshAuthority":
            suggest = "ssh_authority"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmStateDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmStateDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmStateDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_known_power_state: str,
                 power_state: str,
                 rdp_authority: str,
                 ssh_authority: str):
        """
        Details about the state of the reference virtual machine.
        :param str last_known_power_state: Last known compute power state captured in DTL
        :param str power_state: The power state of the reference virtual machine.
        :param str rdp_authority: The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
        :param str ssh_authority: The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
        """
        VmStateDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            last_known_power_state=last_known_power_state,
            power_state=power_state,
            rdp_authority=rdp_authority,
            ssh_authority=ssh_authority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             last_known_power_state: str,
             power_state: str,
             rdp_authority: str,
             ssh_authority: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("last_known_power_state", last_known_power_state)
        _setter("power_state", power_state)
        _setter("rdp_authority", rdp_authority)
        _setter("ssh_authority", ssh_authority)

    @property
    @pulumi.getter(name="lastKnownPowerState")
    def last_known_power_state(self) -> str:
        """
        Last known compute power state captured in DTL
        """
        return pulumi.get(self, "last_known_power_state")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> str:
        """
        The power state of the reference virtual machine.
        """
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter(name="rdpAuthority")
    def rdp_authority(self) -> str:
        """
        The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
        """
        return pulumi.get(self, "rdp_authority")

    @property
    @pulumi.getter(name="sshAuthority")
    def ssh_authority(self) -> str:
        """
        The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
        """
        return pulumi.get(self, "ssh_authority")


