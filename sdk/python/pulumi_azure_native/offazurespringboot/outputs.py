# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ErrorResponse',
    'SpringbootserversPropertiesResponse',
    'SpringbootsitesModelResponseExtendedLocation',
    'SpringbootsitesPropertiesResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class ErrorResponse(dict):
    """
    Defines the error.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "possibleCauses":
            suggest = "possible_causes"
        elif key == "recommendedAction":
            suggest = "recommended_action"
        elif key == "runAsAccountId":
            suggest = "run_as_account_id"
        elif key == "summaryMessage":
            suggest = "summary_message"
        elif key == "updatedTimeStamp":
            suggest = "updated_time_stamp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ErrorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ErrorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ErrorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[str] = None,
                 id: Optional[float] = None,
                 message: Optional[str] = None,
                 possible_causes: Optional[str] = None,
                 recommended_action: Optional[str] = None,
                 run_as_account_id: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary_message: Optional[str] = None,
                 updated_time_stamp: Optional[str] = None):
        """
        Defines the error.
        :param str code: The error code.
        :param float id: The error ID.
        :param str message: The detailed error message.
        :param str possible_causes: The error possible causes.
        :param str recommended_action: The error recommended action
        :param str run_as_account_id: The account ID used to login.
        :param str severity: The error severity
        :param str summary_message: The summarized error message.
        :param str updated_time_stamp: Time when this error was last updated.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if possible_causes is not None:
            pulumi.set(__self__, "possible_causes", possible_causes)
        if recommended_action is not None:
            pulumi.set(__self__, "recommended_action", recommended_action)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary_message is not None:
            pulumi.set(__self__, "summary_message", summary_message)
        if updated_time_stamp is not None:
            pulumi.set(__self__, "updated_time_stamp", updated_time_stamp)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def id(self) -> Optional[float]:
        """
        The error ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        The detailed error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="possibleCauses")
    def possible_causes(self) -> Optional[str]:
        """
        The error possible causes.
        """
        return pulumi.get(self, "possible_causes")

    @property
    @pulumi.getter(name="recommendedAction")
    def recommended_action(self) -> Optional[str]:
        """
        The error recommended action
        """
        return pulumi.get(self, "recommended_action")

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[str]:
        """
        The account ID used to login.
        """
        return pulumi.get(self, "run_as_account_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        The error severity
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="summaryMessage")
    def summary_message(self) -> Optional[str]:
        """
        The summarized error message.
        """
        return pulumi.get(self, "summary_message")

    @property
    @pulumi.getter(name="updatedTimeStamp")
    def updated_time_stamp(self) -> Optional[str]:
        """
        Time when this error was last updated.
        """
        return pulumi.get(self, "updated_time_stamp")


@pulumi.output_type
class SpringbootserversPropertiesResponse(dict):
    """
    The springbootservers resource definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fqdnAndIpAddressList":
            suggest = "fqdn_and_ip_address_list"
        elif key == "machineArmId":
            suggest = "machine_arm_id"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "springBootApps":
            suggest = "spring_boot_apps"
        elif key == "totalApps":
            suggest = "total_apps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpringbootserversPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpringbootserversPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpringbootserversPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server: str,
                 errors: Optional[Sequence['outputs.ErrorResponse']] = None,
                 fqdn_and_ip_address_list: Optional[Sequence[str]] = None,
                 machine_arm_id: Optional[str] = None,
                 port: Optional[int] = None,
                 provisioning_state: Optional[str] = None,
                 spring_boot_apps: Optional[int] = None,
                 total_apps: Optional[int] = None):
        """
        The springbootservers resource definition.
        :param str server: Server is the target server name or ip address to discover of SpringBootServer.
        :param Sequence['ErrorResponse'] errors: The list of errors.
        :param Sequence[str] fqdn_and_ip_address_list: The alternative FQDN or IP addresses to discover for this server
        :param str machine_arm_id: The machine Id from ARM
        :param int port: Target server port for remote login
        :param str provisioning_state: The resource provisioning state.
        :param int spring_boot_apps: The total number of spring boot apps been discovered
        :param int total_apps: The total number of apps been discovered
        """
        pulumi.set(__self__, "server", server)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if fqdn_and_ip_address_list is not None:
            pulumi.set(__self__, "fqdn_and_ip_address_list", fqdn_and_ip_address_list)
        if machine_arm_id is not None:
            pulumi.set(__self__, "machine_arm_id", machine_arm_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)
        if spring_boot_apps is not None:
            pulumi.set(__self__, "spring_boot_apps", spring_boot_apps)
        if total_apps is not None:
            pulumi.set(__self__, "total_apps", total_apps)

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        Server is the target server name or ip address to discover of SpringBootServer.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.ErrorResponse']]:
        """
        The list of errors.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="fqdnAndIpAddressList")
    def fqdn_and_ip_address_list(self) -> Optional[Sequence[str]]:
        """
        The alternative FQDN or IP addresses to discover for this server
        """
        return pulumi.get(self, "fqdn_and_ip_address_list")

    @property
    @pulumi.getter(name="machineArmId")
    def machine_arm_id(self) -> Optional[str]:
        """
        The machine Id from ARM
        """
        return pulumi.get(self, "machine_arm_id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Target server port for remote login
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        """
        The resource provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="springBootApps")
    def spring_boot_apps(self) -> Optional[int]:
        """
        The total number of spring boot apps been discovered
        """
        return pulumi.get(self, "spring_boot_apps")

    @property
    @pulumi.getter(name="totalApps")
    def total_apps(self) -> Optional[int]:
        """
        The total number of apps been discovered
        """
        return pulumi.get(self, "total_apps")


@pulumi.output_type
class SpringbootsitesModelResponseExtendedLocation(dict):
    """
    The extended location definition.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        The extended location definition.
        :param str name: The extended location name.
        :param str type: The extended location type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The extended location name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SpringbootsitesPropertiesResponse(dict):
    """
    The springbootsites resource definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "masterSiteId":
            suggest = "master_site_id"
        elif key == "migrateProjectId":
            suggest = "migrate_project_id"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpringbootsitesPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpringbootsitesPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpringbootsitesPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 master_site_id: Optional[str] = None,
                 migrate_project_id: Optional[str] = None,
                 provisioning_state: Optional[str] = None):
        """
        The springbootsites resource definition.
        :param str master_site_id: The master site ID from Azure Migrate.
        :param str migrate_project_id: The migrate project ID from Azure Migrate.
        :param str provisioning_state: The resource provisioning state.
        """
        if master_site_id is not None:
            pulumi.set(__self__, "master_site_id", master_site_id)
        if migrate_project_id is not None:
            pulumi.set(__self__, "migrate_project_id", migrate_project_id)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="masterSiteId")
    def master_site_id(self) -> Optional[str]:
        """
        The master site ID from Azure Migrate.
        """
        return pulumi.get(self, "master_site_id")

    @property
    @pulumi.getter(name="migrateProjectId")
    def migrate_project_id(self) -> Optional[str]:
        """
        The migrate project ID from Azure Migrate.
        """
        return pulumi.get(self, "migrate_project_id")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        """
        The resource provisioning state.
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


