# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'FileShareLimitsOutputResponse',
    'FileShareLimitsResponse',
    'FileSharePropertiesResponse',
    'FileShareProvisioningConstantsResponse',
    'FileShareProvisioningRecommendationOutputResponse',
    'FileShareUsageDataOutputResponse',
    'LiveSharesUsageDataResponse',
    'NfsProtocolPropertiesResponse',
    'PrivateEndpointConnectionResponse',
    'PrivateEndpointResponse',
    'PrivateLinkServiceConnectionStateResponse',
    'PublicAccessPropertiesResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class FileShareLimitsOutputResponse(dict):
    """
    File share limits API result.
    """
    def __init__(__self__, *,
                 limits: 'outputs.FileShareLimitsResponse',
                 provisioning_constants: 'outputs.FileShareProvisioningConstantsResponse'):
        """
        File share limits API result.
        :param 'FileShareLimitsResponse' limits: The limits for the file share.
        :param 'FileShareProvisioningConstantsResponse' provisioning_constants: The provisioning constants for the file share.
        """
        pulumi.set(__self__, "limits", limits)
        pulumi.set(__self__, "provisioning_constants", provisioning_constants)

    @property
    @pulumi.getter
    def limits(self) -> 'outputs.FileShareLimitsResponse':
        """
        The limits for the file share.
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter(name="provisioningConstants")
    def provisioning_constants(self) -> 'outputs.FileShareProvisioningConstantsResponse':
        """
        The provisioning constants for the file share.
        """
        return pulumi.get(self, "provisioning_constants")


@pulumi.output_type
class FileShareLimitsResponse(dict):
    """
    File share-related limits in the specified subscription/location.
    """
    def __init__(__self__, *,
                 max_file_share_private_endpoint_connections: builtins.int,
                 max_file_share_snapshots: builtins.int,
                 max_file_share_subnets: builtins.int,
                 max_file_shares: builtins.int,
                 max_provisioned_io_per_sec: builtins.int,
                 max_provisioned_storage_gi_b: builtins.int,
                 max_provisioned_throughput_mi_b_per_sec: builtins.int,
                 min_provisioned_io_per_sec: builtins.int,
                 min_provisioned_storage_gi_b: builtins.int,
                 min_provisioned_throughput_mi_b_per_sec: builtins.int):
        """
        File share-related limits in the specified subscription/location.
        :param builtins.int max_file_share_private_endpoint_connections: The maximum number of private endpoint connections allowed for a file share.
        :param builtins.int max_file_share_snapshots: The maximum number of snapshots allowed per file share.
        :param builtins.int max_file_share_subnets: The maximum number of subnets that can be associated with a file share.
        :param builtins.int max_file_shares: The maximum number of file shares that can be created.
        :param builtins.int max_provisioned_io_per_sec: The maximum provisioned IOPS (Input/Output Operations Per Second) for a file share.
        :param builtins.int max_provisioned_storage_gi_b: The maximum provisioned storage in GiB for a file share.
        :param builtins.int max_provisioned_throughput_mi_b_per_sec: The maximum provisioned throughput in MiB/s for a file share.
        :param builtins.int min_provisioned_io_per_sec: The minimum provisioned IOPS (Input/Output Operations Per Second) for a file share.
        :param builtins.int min_provisioned_storage_gi_b: The minimum provisioned storage in GiB for a file share.
        :param builtins.int min_provisioned_throughput_mi_b_per_sec: The minimum provisioned throughput in MiB/s for a file share.
        """
        pulumi.set(__self__, "max_file_share_private_endpoint_connections", max_file_share_private_endpoint_connections)
        pulumi.set(__self__, "max_file_share_snapshots", max_file_share_snapshots)
        pulumi.set(__self__, "max_file_share_subnets", max_file_share_subnets)
        pulumi.set(__self__, "max_file_shares", max_file_shares)
        pulumi.set(__self__, "max_provisioned_io_per_sec", max_provisioned_io_per_sec)
        pulumi.set(__self__, "max_provisioned_storage_gi_b", max_provisioned_storage_gi_b)
        pulumi.set(__self__, "max_provisioned_throughput_mi_b_per_sec", max_provisioned_throughput_mi_b_per_sec)
        pulumi.set(__self__, "min_provisioned_io_per_sec", min_provisioned_io_per_sec)
        pulumi.set(__self__, "min_provisioned_storage_gi_b", min_provisioned_storage_gi_b)
        pulumi.set(__self__, "min_provisioned_throughput_mi_b_per_sec", min_provisioned_throughput_mi_b_per_sec)

    @property
    @pulumi.getter(name="maxFileSharePrivateEndpointConnections")
    def max_file_share_private_endpoint_connections(self) -> builtins.int:
        """
        The maximum number of private endpoint connections allowed for a file share.
        """
        return pulumi.get(self, "max_file_share_private_endpoint_connections")

    @property
    @pulumi.getter(name="maxFileShareSnapshots")
    def max_file_share_snapshots(self) -> builtins.int:
        """
        The maximum number of snapshots allowed per file share.
        """
        return pulumi.get(self, "max_file_share_snapshots")

    @property
    @pulumi.getter(name="maxFileShareSubnets")
    def max_file_share_subnets(self) -> builtins.int:
        """
        The maximum number of subnets that can be associated with a file share.
        """
        return pulumi.get(self, "max_file_share_subnets")

    @property
    @pulumi.getter(name="maxFileShares")
    def max_file_shares(self) -> builtins.int:
        """
        The maximum number of file shares that can be created.
        """
        return pulumi.get(self, "max_file_shares")

    @property
    @pulumi.getter(name="maxProvisionedIOPerSec")
    def max_provisioned_io_per_sec(self) -> builtins.int:
        """
        The maximum provisioned IOPS (Input/Output Operations Per Second) for a file share.
        """
        return pulumi.get(self, "max_provisioned_io_per_sec")

    @property
    @pulumi.getter(name="maxProvisionedStorageGiB")
    def max_provisioned_storage_gi_b(self) -> builtins.int:
        """
        The maximum provisioned storage in GiB for a file share.
        """
        return pulumi.get(self, "max_provisioned_storage_gi_b")

    @property
    @pulumi.getter(name="maxProvisionedThroughputMiBPerSec")
    def max_provisioned_throughput_mi_b_per_sec(self) -> builtins.int:
        """
        The maximum provisioned throughput in MiB/s for a file share.
        """
        return pulumi.get(self, "max_provisioned_throughput_mi_b_per_sec")

    @property
    @pulumi.getter(name="minProvisionedIOPerSec")
    def min_provisioned_io_per_sec(self) -> builtins.int:
        """
        The minimum provisioned IOPS (Input/Output Operations Per Second) for a file share.
        """
        return pulumi.get(self, "min_provisioned_io_per_sec")

    @property
    @pulumi.getter(name="minProvisionedStorageGiB")
    def min_provisioned_storage_gi_b(self) -> builtins.int:
        """
        The minimum provisioned storage in GiB for a file share.
        """
        return pulumi.get(self, "min_provisioned_storage_gi_b")

    @property
    @pulumi.getter(name="minProvisionedThroughputMiBPerSec")
    def min_provisioned_throughput_mi_b_per_sec(self) -> builtins.int:
        """
        The minimum provisioned throughput in MiB/s for a file share.
        """
        return pulumi.get(self, "min_provisioned_throughput_mi_b_per_sec")


@pulumi.output_type
class FileSharePropertiesResponse(dict):
    """
    File share properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "includedBurstIOPerSec":
            suggest = "included_burst_io_per_sec"
        elif key == "maxBurstIOPerSecCredits":
            suggest = "max_burst_io_per_sec_credits"
        elif key == "privateEndpointConnections":
            suggest = "private_endpoint_connections"
        elif key == "provisionedIOPerSecNextAllowedDowngrade":
            suggest = "provisioned_io_per_sec_next_allowed_downgrade"
        elif key == "provisionedStorageNextAllowedDowngrade":
            suggest = "provisioned_storage_next_allowed_downgrade"
        elif key == "provisionedThroughputNextAllowedDowngrade":
            suggest = "provisioned_throughput_next_allowed_downgrade"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "mediaTier":
            suggest = "media_tier"
        elif key == "mountName":
            suggest = "mount_name"
        elif key == "nfsProtocolProperties":
            suggest = "nfs_protocol_properties"
        elif key == "provisionedIOPerSec":
            suggest = "provisioned_io_per_sec"
        elif key == "provisionedStorageGiB":
            suggest = "provisioned_storage_gi_b"
        elif key == "provisionedThroughputMiBPerSec":
            suggest = "provisioned_throughput_mi_b_per_sec"
        elif key == "publicAccessProperties":
            suggest = "public_access_properties"
        elif key == "publicNetworkAccess":
            suggest = "public_network_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileSharePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileSharePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileSharePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: builtins.str,
                 included_burst_io_per_sec: builtins.int,
                 max_burst_io_per_sec_credits: builtins.float,
                 private_endpoint_connections: Sequence['outputs.PrivateEndpointConnectionResponse'],
                 provisioned_io_per_sec_next_allowed_downgrade: builtins.str,
                 provisioned_storage_next_allowed_downgrade: builtins.str,
                 provisioned_throughput_next_allowed_downgrade: builtins.str,
                 provisioning_state: builtins.str,
                 media_tier: Optional[builtins.str] = None,
                 mount_name: Optional[builtins.str] = None,
                 nfs_protocol_properties: Optional['outputs.NfsProtocolPropertiesResponse'] = None,
                 protocol: Optional[builtins.str] = None,
                 provisioned_io_per_sec: Optional[builtins.int] = None,
                 provisioned_storage_gi_b: Optional[builtins.int] = None,
                 provisioned_throughput_mi_b_per_sec: Optional[builtins.int] = None,
                 public_access_properties: Optional['outputs.PublicAccessPropertiesResponse'] = None,
                 public_network_access: Optional[builtins.str] = None,
                 redundancy: Optional[builtins.str] = None):
        """
        File share properties
        :param builtins.str host_name: The host name of the file share.
        :param builtins.int included_burst_io_per_sec: Burst IOPS are extra buffer IOPS enabling you to consume more than your provisioned IOPS for a short period of time, depending on the burst credits available for your share.
        :param builtins.float max_burst_io_per_sec_credits: Max burst IOPS credits shows the maximum number of burst credits the share can have at the current IOPS provisioning level.
        :param Sequence['PrivateEndpointConnectionResponse'] private_endpoint_connections: The list of associated private endpoint connections.
        :param builtins.str provisioned_io_per_sec_next_allowed_downgrade: A date/time value that specifies when the provisioned IOPS for the file share is permitted to be reduced.
        :param builtins.str provisioned_storage_next_allowed_downgrade: A date/time value that specifies when the provisioned storage for the file share is permitted to be reduced.
        :param builtins.str provisioned_throughput_next_allowed_downgrade: A date/time value that specifies when the provisioned throughput for the file share is permitted to be reduced.
        :param builtins.str provisioning_state: The status of the last operation.
        :param builtins.str media_tier: The storage media tier of the file share.
        :param builtins.str mount_name: The name of the file share as seen by the end user when mounting the share, such as in a URI or UNC format in their operating system.
        :param 'NfsProtocolPropertiesResponse' nfs_protocol_properties: Protocol settings specific NFS.
        :param builtins.str protocol: The file sharing protocol for this file share.
        :param builtins.int provisioned_io_per_sec: The provisioned IO / sec of the share.
        :param builtins.int provisioned_storage_gi_b: The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount of used storage.
        :param builtins.int provisioned_throughput_mi_b_per_sec: The provisioned throughput / sec of the share.
        :param 'PublicAccessPropertiesResponse' public_access_properties: The set of properties for control public access.
        :param builtins.str public_network_access: Gets or sets allow or disallow public network access to azure managed file share
        :param builtins.str redundancy: The chosen redundancy level of the file share.
        """
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "included_burst_io_per_sec", included_burst_io_per_sec)
        pulumi.set(__self__, "max_burst_io_per_sec_credits", max_burst_io_per_sec_credits)
        pulumi.set(__self__, "private_endpoint_connections", private_endpoint_connections)
        pulumi.set(__self__, "provisioned_io_per_sec_next_allowed_downgrade", provisioned_io_per_sec_next_allowed_downgrade)
        pulumi.set(__self__, "provisioned_storage_next_allowed_downgrade", provisioned_storage_next_allowed_downgrade)
        pulumi.set(__self__, "provisioned_throughput_next_allowed_downgrade", provisioned_throughput_next_allowed_downgrade)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if media_tier is not None:
            pulumi.set(__self__, "media_tier", media_tier)
        if mount_name is not None:
            pulumi.set(__self__, "mount_name", mount_name)
        if nfs_protocol_properties is not None:
            pulumi.set(__self__, "nfs_protocol_properties", nfs_protocol_properties)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if provisioned_io_per_sec is not None:
            pulumi.set(__self__, "provisioned_io_per_sec", provisioned_io_per_sec)
        if provisioned_storage_gi_b is not None:
            pulumi.set(__self__, "provisioned_storage_gi_b", provisioned_storage_gi_b)
        if provisioned_throughput_mi_b_per_sec is not None:
            pulumi.set(__self__, "provisioned_throughput_mi_b_per_sec", provisioned_throughput_mi_b_per_sec)
        if public_access_properties is not None:
            pulumi.set(__self__, "public_access_properties", public_access_properties)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if redundancy is not None:
            pulumi.set(__self__, "redundancy", redundancy)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        """
        The host name of the file share.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="includedBurstIOPerSec")
    def included_burst_io_per_sec(self) -> builtins.int:
        """
        Burst IOPS are extra buffer IOPS enabling you to consume more than your provisioned IOPS for a short period of time, depending on the burst credits available for your share.
        """
        return pulumi.get(self, "included_burst_io_per_sec")

    @property
    @pulumi.getter(name="maxBurstIOPerSecCredits")
    def max_burst_io_per_sec_credits(self) -> builtins.float:
        """
        Max burst IOPS credits shows the maximum number of burst credits the share can have at the current IOPS provisioning level.
        """
        return pulumi.get(self, "max_burst_io_per_sec_credits")

    @property
    @pulumi.getter(name="privateEndpointConnections")
    def private_endpoint_connections(self) -> Sequence['outputs.PrivateEndpointConnectionResponse']:
        """
        The list of associated private endpoint connections.
        """
        return pulumi.get(self, "private_endpoint_connections")

    @property
    @pulumi.getter(name="provisionedIOPerSecNextAllowedDowngrade")
    def provisioned_io_per_sec_next_allowed_downgrade(self) -> builtins.str:
        """
        A date/time value that specifies when the provisioned IOPS for the file share is permitted to be reduced.
        """
        return pulumi.get(self, "provisioned_io_per_sec_next_allowed_downgrade")

    @property
    @pulumi.getter(name="provisionedStorageNextAllowedDowngrade")
    def provisioned_storage_next_allowed_downgrade(self) -> builtins.str:
        """
        A date/time value that specifies when the provisioned storage for the file share is permitted to be reduced.
        """
        return pulumi.get(self, "provisioned_storage_next_allowed_downgrade")

    @property
    @pulumi.getter(name="provisionedThroughputNextAllowedDowngrade")
    def provisioned_throughput_next_allowed_downgrade(self) -> builtins.str:
        """
        A date/time value that specifies when the provisioned throughput for the file share is permitted to be reduced.
        """
        return pulumi.get(self, "provisioned_throughput_next_allowed_downgrade")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="mediaTier")
    def media_tier(self) -> Optional[builtins.str]:
        """
        The storage media tier of the file share.
        """
        return pulumi.get(self, "media_tier")

    @property
    @pulumi.getter(name="mountName")
    def mount_name(self) -> Optional[builtins.str]:
        """
        The name of the file share as seen by the end user when mounting the share, such as in a URI or UNC format in their operating system.
        """
        return pulumi.get(self, "mount_name")

    @property
    @pulumi.getter(name="nfsProtocolProperties")
    def nfs_protocol_properties(self) -> Optional['outputs.NfsProtocolPropertiesResponse']:
        """
        Protocol settings specific NFS.
        """
        return pulumi.get(self, "nfs_protocol_properties")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        """
        The file sharing protocol for this file share.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="provisionedIOPerSec")
    def provisioned_io_per_sec(self) -> Optional[builtins.int]:
        """
        The provisioned IO / sec of the share.
        """
        return pulumi.get(self, "provisioned_io_per_sec")

    @property
    @pulumi.getter(name="provisionedStorageGiB")
    def provisioned_storage_gi_b(self) -> Optional[builtins.int]:
        """
        The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount of used storage.
        """
        return pulumi.get(self, "provisioned_storage_gi_b")

    @property
    @pulumi.getter(name="provisionedThroughputMiBPerSec")
    def provisioned_throughput_mi_b_per_sec(self) -> Optional[builtins.int]:
        """
        The provisioned throughput / sec of the share.
        """
        return pulumi.get(self, "provisioned_throughput_mi_b_per_sec")

    @property
    @pulumi.getter(name="publicAccessProperties")
    def public_access_properties(self) -> Optional['outputs.PublicAccessPropertiesResponse']:
        """
        The set of properties for control public access.
        """
        return pulumi.get(self, "public_access_properties")

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[builtins.str]:
        """
        Gets or sets allow or disallow public network access to azure managed file share
        """
        return pulumi.get(self, "public_network_access")

    @property
    @pulumi.getter
    def redundancy(self) -> Optional[builtins.str]:
        """
        The chosen redundancy level of the file share.
        """
        return pulumi.get(self, "redundancy")


@pulumi.output_type
class FileShareProvisioningConstantsResponse(dict):
    """
    Constants used for calculating recommended values of file share provisioning properties.
    """
    def __init__(__self__, *,
                 base_io_per_sec: builtins.int,
                 base_throughput_mi_b_per_sec: builtins.int,
                 scalar_io_per_sec: builtins.float,
                 scalar_throughput_mi_b_per_sec: builtins.float):
        """
        Constants used for calculating recommended values of file share provisioning properties.
        :param builtins.int base_io_per_sec: Base IO per second.
        :param builtins.int base_throughput_mi_b_per_sec: Base throughput in MiB per second.
        :param builtins.float scalar_io_per_sec: Scalar IO per second.
        :param builtins.float scalar_throughput_mi_b_per_sec: Scalar throughput in MiB per second.
        """
        pulumi.set(__self__, "base_io_per_sec", base_io_per_sec)
        pulumi.set(__self__, "base_throughput_mi_b_per_sec", base_throughput_mi_b_per_sec)
        pulumi.set(__self__, "scalar_io_per_sec", scalar_io_per_sec)
        pulumi.set(__self__, "scalar_throughput_mi_b_per_sec", scalar_throughput_mi_b_per_sec)

    @property
    @pulumi.getter(name="baseIOPerSec")
    def base_io_per_sec(self) -> builtins.int:
        """
        Base IO per second.
        """
        return pulumi.get(self, "base_io_per_sec")

    @property
    @pulumi.getter(name="baseThroughputMiBPerSec")
    def base_throughput_mi_b_per_sec(self) -> builtins.int:
        """
        Base throughput in MiB per second.
        """
        return pulumi.get(self, "base_throughput_mi_b_per_sec")

    @property
    @pulumi.getter(name="scalarIOPerSec")
    def scalar_io_per_sec(self) -> builtins.float:
        """
        Scalar IO per second.
        """
        return pulumi.get(self, "scalar_io_per_sec")

    @property
    @pulumi.getter(name="scalarThroughputMiBPerSec")
    def scalar_throughput_mi_b_per_sec(self) -> builtins.float:
        """
        Scalar throughput in MiB per second.
        """
        return pulumi.get(self, "scalar_throughput_mi_b_per_sec")


@pulumi.output_type
class FileShareProvisioningRecommendationOutputResponse(dict):
    """
    File share provisioning parameters recommendation API result.
    """
    def __init__(__self__, *,
                 available_redundancy_options: Sequence[builtins.str],
                 provisioned_io_per_sec: builtins.int,
                 provisioned_throughput_mi_b_per_sec: builtins.int):
        """
        File share provisioning parameters recommendation API result.
        :param Sequence[builtins.str] available_redundancy_options: Redundancy options for the share.
        :param builtins.int provisioned_io_per_sec: The recommended value of provisioned IO / sec of the share.
        :param builtins.int provisioned_throughput_mi_b_per_sec: The recommended value of provisioned throughput / sec of the share.
        """
        pulumi.set(__self__, "available_redundancy_options", available_redundancy_options)
        pulumi.set(__self__, "provisioned_io_per_sec", provisioned_io_per_sec)
        pulumi.set(__self__, "provisioned_throughput_mi_b_per_sec", provisioned_throughput_mi_b_per_sec)

    @property
    @pulumi.getter(name="availableRedundancyOptions")
    def available_redundancy_options(self) -> Sequence[builtins.str]:
        """
        Redundancy options for the share.
        """
        return pulumi.get(self, "available_redundancy_options")

    @property
    @pulumi.getter(name="provisionedIOPerSec")
    def provisioned_io_per_sec(self) -> builtins.int:
        """
        The recommended value of provisioned IO / sec of the share.
        """
        return pulumi.get(self, "provisioned_io_per_sec")

    @property
    @pulumi.getter(name="provisionedThroughputMiBPerSec")
    def provisioned_throughput_mi_b_per_sec(self) -> builtins.int:
        """
        The recommended value of provisioned throughput / sec of the share.
        """
        return pulumi.get(self, "provisioned_throughput_mi_b_per_sec")


@pulumi.output_type
class FileShareUsageDataOutputResponse(dict):
    """
    File shares usage result.
    """
    def __init__(__self__, *,
                 live_shares: 'outputs.LiveSharesUsageDataResponse'):
        """
        File shares usage result.
        :param 'LiveSharesUsageDataResponse' live_shares: File share usage data for active file shares.
        """
        pulumi.set(__self__, "live_shares", live_shares)

    @property
    @pulumi.getter(name="liveShares")
    def live_shares(self) -> 'outputs.LiveSharesUsageDataResponse':
        """
        File share usage data for active file shares.
        """
        return pulumi.get(self, "live_shares")


@pulumi.output_type
class LiveSharesUsageDataResponse(dict):
    """
    Usage data for live shares.
    """
    def __init__(__self__, *,
                 file_share_count: builtins.int):
        """
        Usage data for live shares.
        :param builtins.int file_share_count: The number of active file shares.
        """
        pulumi.set(__self__, "file_share_count", file_share_count)

    @property
    @pulumi.getter(name="fileShareCount")
    def file_share_count(self) -> builtins.int:
        """
        The number of active file shares.
        """
        return pulumi.get(self, "file_share_count")


@pulumi.output_type
class NfsProtocolPropertiesResponse(dict):
    """
    Properties specific to the NFS protocol.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rootSquash":
            suggest = "root_squash"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NfsProtocolPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NfsProtocolPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NfsProtocolPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 root_squash: Optional[builtins.str] = None):
        """
        Properties specific to the NFS protocol.
        :param builtins.str root_squash: Root squash defines how root users on clients are mapped to the NFS share.
        """
        if root_squash is not None:
            pulumi.set(__self__, "root_squash", root_squash)

    @property
    @pulumi.getter(name="rootSquash")
    def root_squash(self) -> Optional[builtins.str]:
        """
        Root squash defines how root users on clients are mapped to the NFS share.
        """
        return pulumi.get(self, "root_squash")


@pulumi.output_type
class PrivateEndpointConnectionResponse(dict):
    """
    The private endpoint connection resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupIds":
            suggest = "group_ids"
        elif key == "privateLinkServiceConnectionState":
            suggest = "private_link_service_connection_state"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "systemData":
            suggest = "system_data"
        elif key == "privateEndpoint":
            suggest = "private_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointConnectionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointConnectionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointConnectionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_ids: Sequence[builtins.str],
                 id: builtins.str,
                 name: builtins.str,
                 private_link_service_connection_state: 'outputs.PrivateLinkServiceConnectionStateResponse',
                 provisioning_state: builtins.str,
                 system_data: 'outputs.SystemDataResponse',
                 type: builtins.str,
                 private_endpoint: Optional['outputs.PrivateEndpointResponse'] = None):
        """
        The private endpoint connection resource.
        :param Sequence[builtins.str] group_ids: The group ids for the private endpoint resource.
        :param builtins.str id: Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        :param builtins.str name: The name of the resource
        :param 'PrivateLinkServiceConnectionStateResponse' private_link_service_connection_state: A collection of information about the state of the connection between service consumer and provider.
        :param builtins.str provisioning_state: The provisioning state of the private endpoint connection resource.
        :param 'SystemDataResponse' system_data: Azure Resource Manager metadata containing createdBy and modifiedBy information.
        :param builtins.str type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        :param 'PrivateEndpointResponse' private_endpoint: The private endpoint resource.
        """
        pulumi.set(__self__, "group_ids", group_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "system_data", system_data)
        pulumi.set(__self__, "type", type)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Sequence[builtins.str]:
        """
        The group ids for the private endpoint resource.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> 'outputs.PrivateLinkServiceConnectionStateResponse':
        """
        A collection of information about the state of the connection between service consumer and provider.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The provisioning state of the private endpoint connection resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional['outputs.PrivateEndpointResponse']:
        """
        The private endpoint resource.
        """
        return pulumi.get(self, "private_endpoint")


@pulumi.output_type
class PrivateEndpointResponse(dict):
    """
    The private endpoint resource.
    """
    def __init__(__self__, *,
                 id: builtins.str):
        """
        The private endpoint resource.
        :param builtins.str id: The ARM identifier for private endpoint.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ARM identifier for private endpoint.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PrivateLinkServiceConnectionStateResponse(dict):
    """
    A collection of information about the state of the connection between service consumer and provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionsRequired":
            suggest = "actions_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkServiceConnectionStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions_required: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None):
        """
        A collection of information about the state of the connection between service consumer and provider.
        :param builtins.str actions_required: A message indicating if changes on the service provider require any updates on the consumer.
        :param builtins.str description: The reason for approval/rejection of the connection.
        :param builtins.str status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[builtins.str]:
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        return pulumi.get(self, "actions_required")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The reason for approval/rejection of the connection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class PublicAccessPropertiesResponse(dict):
    """
    The set of properties for control public access.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedSubnets":
            suggest = "allowed_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PublicAccessPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PublicAccessPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PublicAccessPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_subnets: Optional[Sequence[builtins.str]] = None):
        """
        The set of properties for control public access.
        :param Sequence[builtins.str] allowed_subnets: The allowed set of subnets when access is restricted.
        """
        if allowed_subnets is not None:
            pulumi.set(__self__, "allowed_subnets", allowed_subnets)

    @property
    @pulumi.getter(name="allowedSubnets")
    def allowed_subnets(self) -> Optional[Sequence[builtins.str]]:
        """
        The allowed set of subnets when access is restricted.
        """
        return pulumi.get(self, "allowed_subnets")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[builtins.str] = None,
                 created_by: Optional[builtins.str] = None,
                 created_by_type: Optional[builtins.str] = None,
                 last_modified_at: Optional[builtins.str] = None,
                 last_modified_by: Optional[builtins.str] = None,
                 last_modified_by_type: Optional[builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param builtins.str created_at: The timestamp of resource creation (UTC).
        :param builtins.str created_by: The identity that created the resource.
        :param builtins.str created_by_type: The type of identity that created the resource.
        :param builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param builtins.str last_modified_by: The identity that last modified the resource.
        :param builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


