# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'FileSharePropertiesArgs',
    'FileSharePropertiesArgsDict',
    'FileShareProvisioningRecommendationInput',
    'FileShareProvisioningRecommendationInputDict',
    'NfsProtocolPropertiesArgs',
    'NfsProtocolPropertiesArgsDict',
    'PublicAccessPropertiesArgs',
    'PublicAccessPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class FileSharePropertiesArgsDict(TypedDict):
        """
        File share properties
        """
        media_tier: NotRequired[pulumi.Input[Union[builtins.str, 'MediaTier']]]
        """
        The storage media tier of the file share.
        """
        mount_name: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the file share as seen by the end user when mounting the share, such as in a URI or UNC format in their operating system.
        """
        nfs_protocol_properties: NotRequired[pulumi.Input['NfsProtocolPropertiesArgsDict']]
        """
        Protocol settings specific NFS.
        """
        protocol: NotRequired[pulumi.Input[Union[builtins.str, 'Protocol']]]
        """
        The file sharing protocol for this file share.
        """
        provisioned_io_per_sec: NotRequired[pulumi.Input[builtins.int]]
        """
        The provisioned IO / sec of the share.
        """
        provisioned_storage_gi_b: NotRequired[pulumi.Input[builtins.int]]
        """
        The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount of used storage.
        """
        provisioned_throughput_mi_b_per_sec: NotRequired[pulumi.Input[builtins.int]]
        """
        The provisioned throughput / sec of the share.
        """
        public_access_properties: NotRequired[pulumi.Input['PublicAccessPropertiesArgsDict']]
        """
        The set of properties for control public access.
        """
        public_network_access: NotRequired[pulumi.Input[Union[builtins.str, 'PublicNetworkAccess']]]
        """
        Gets or sets allow or disallow public network access to azure managed file share
        """
        redundancy: NotRequired[pulumi.Input[Union[builtins.str, 'Redundancy']]]
        """
        The chosen redundancy level of the file share.
        """
elif False:
    FileSharePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FileSharePropertiesArgs:
    def __init__(__self__, *,
                 media_tier: Optional[pulumi.Input[Union[builtins.str, 'MediaTier']]] = None,
                 mount_name: Optional[pulumi.Input[builtins.str]] = None,
                 nfs_protocol_properties: Optional[pulumi.Input['NfsProtocolPropertiesArgs']] = None,
                 protocol: Optional[pulumi.Input[Union[builtins.str, 'Protocol']]] = None,
                 provisioned_io_per_sec: Optional[pulumi.Input[builtins.int]] = None,
                 provisioned_storage_gi_b: Optional[pulumi.Input[builtins.int]] = None,
                 provisioned_throughput_mi_b_per_sec: Optional[pulumi.Input[builtins.int]] = None,
                 public_access_properties: Optional[pulumi.Input['PublicAccessPropertiesArgs']] = None,
                 public_network_access: Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccess']]] = None,
                 redundancy: Optional[pulumi.Input[Union[builtins.str, 'Redundancy']]] = None):
        """
        File share properties
        :param pulumi.Input[Union[builtins.str, 'MediaTier']] media_tier: The storage media tier of the file share.
        :param pulumi.Input[builtins.str] mount_name: The name of the file share as seen by the end user when mounting the share, such as in a URI or UNC format in their operating system.
        :param pulumi.Input['NfsProtocolPropertiesArgs'] nfs_protocol_properties: Protocol settings specific NFS.
        :param pulumi.Input[Union[builtins.str, 'Protocol']] protocol: The file sharing protocol for this file share.
        :param pulumi.Input[builtins.int] provisioned_io_per_sec: The provisioned IO / sec of the share.
        :param pulumi.Input[builtins.int] provisioned_storage_gi_b: The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount of used storage.
        :param pulumi.Input[builtins.int] provisioned_throughput_mi_b_per_sec: The provisioned throughput / sec of the share.
        :param pulumi.Input['PublicAccessPropertiesArgs'] public_access_properties: The set of properties for control public access.
        :param pulumi.Input[Union[builtins.str, 'PublicNetworkAccess']] public_network_access: Gets or sets allow or disallow public network access to azure managed file share
        :param pulumi.Input[Union[builtins.str, 'Redundancy']] redundancy: The chosen redundancy level of the file share.
        """
        if media_tier is not None:
            pulumi.set(__self__, "media_tier", media_tier)
        if mount_name is not None:
            pulumi.set(__self__, "mount_name", mount_name)
        if nfs_protocol_properties is not None:
            pulumi.set(__self__, "nfs_protocol_properties", nfs_protocol_properties)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if provisioned_io_per_sec is not None:
            pulumi.set(__self__, "provisioned_io_per_sec", provisioned_io_per_sec)
        if provisioned_storage_gi_b is not None:
            pulumi.set(__self__, "provisioned_storage_gi_b", provisioned_storage_gi_b)
        if provisioned_throughput_mi_b_per_sec is not None:
            pulumi.set(__self__, "provisioned_throughput_mi_b_per_sec", provisioned_throughput_mi_b_per_sec)
        if public_access_properties is not None:
            pulumi.set(__self__, "public_access_properties", public_access_properties)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if redundancy is not None:
            pulumi.set(__self__, "redundancy", redundancy)

    @property
    @pulumi.getter(name="mediaTier")
    def media_tier(self) -> Optional[pulumi.Input[Union[builtins.str, 'MediaTier']]]:
        """
        The storage media tier of the file share.
        """
        return pulumi.get(self, "media_tier")

    @media_tier.setter
    def media_tier(self, value: Optional[pulumi.Input[Union[builtins.str, 'MediaTier']]]):
        pulumi.set(self, "media_tier", value)

    @property
    @pulumi.getter(name="mountName")
    def mount_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the file share as seen by the end user when mounting the share, such as in a URI or UNC format in their operating system.
        """
        return pulumi.get(self, "mount_name")

    @mount_name.setter
    def mount_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mount_name", value)

    @property
    @pulumi.getter(name="nfsProtocolProperties")
    def nfs_protocol_properties(self) -> Optional[pulumi.Input['NfsProtocolPropertiesArgs']]:
        """
        Protocol settings specific NFS.
        """
        return pulumi.get(self, "nfs_protocol_properties")

    @nfs_protocol_properties.setter
    def nfs_protocol_properties(self, value: Optional[pulumi.Input['NfsProtocolPropertiesArgs']]):
        pulumi.set(self, "nfs_protocol_properties", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[Union[builtins.str, 'Protocol']]]:
        """
        The file sharing protocol for this file share.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[Union[builtins.str, 'Protocol']]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="provisionedIOPerSec")
    def provisioned_io_per_sec(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The provisioned IO / sec of the share.
        """
        return pulumi.get(self, "provisioned_io_per_sec")

    @provisioned_io_per_sec.setter
    def provisioned_io_per_sec(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "provisioned_io_per_sec", value)

    @property
    @pulumi.getter(name="provisionedStorageGiB")
    def provisioned_storage_gi_b(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount of used storage.
        """
        return pulumi.get(self, "provisioned_storage_gi_b")

    @provisioned_storage_gi_b.setter
    def provisioned_storage_gi_b(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "provisioned_storage_gi_b", value)

    @property
    @pulumi.getter(name="provisionedThroughputMiBPerSec")
    def provisioned_throughput_mi_b_per_sec(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The provisioned throughput / sec of the share.
        """
        return pulumi.get(self, "provisioned_throughput_mi_b_per_sec")

    @provisioned_throughput_mi_b_per_sec.setter
    def provisioned_throughput_mi_b_per_sec(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "provisioned_throughput_mi_b_per_sec", value)

    @property
    @pulumi.getter(name="publicAccessProperties")
    def public_access_properties(self) -> Optional[pulumi.Input['PublicAccessPropertiesArgs']]:
        """
        The set of properties for control public access.
        """
        return pulumi.get(self, "public_access_properties")

    @public_access_properties.setter
    def public_access_properties(self, value: Optional[pulumi.Input['PublicAccessPropertiesArgs']]):
        pulumi.set(self, "public_access_properties", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccess']]]:
        """
        Gets or sets allow or disallow public network access to azure managed file share
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccess']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter
    def redundancy(self) -> Optional[pulumi.Input[Union[builtins.str, 'Redundancy']]]:
        """
        The chosen redundancy level of the file share.
        """
        return pulumi.get(self, "redundancy")

    @redundancy.setter
    def redundancy(self, value: Optional[pulumi.Input[Union[builtins.str, 'Redundancy']]]):
        pulumi.set(self, "redundancy", value)


if not MYPY:
    class FileShareProvisioningRecommendationInputDict(TypedDict):
        """
        File share provisioning parameters recommendation API input structure.
        """
        provisioned_storage_gi_b: builtins.int
        """
        The desired provisioned storage size of the share in GiB. Will be use to calculate the values of remaining provisioning parameters.
        """
elif False:
    FileShareProvisioningRecommendationInputDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FileShareProvisioningRecommendationInput:
    def __init__(__self__, *,
                 provisioned_storage_gi_b: builtins.int):
        """
        File share provisioning parameters recommendation API input structure.
        :param builtins.int provisioned_storage_gi_b: The desired provisioned storage size of the share in GiB. Will be use to calculate the values of remaining provisioning parameters.
        """
        pulumi.set(__self__, "provisioned_storage_gi_b", provisioned_storage_gi_b)

    @property
    @pulumi.getter(name="provisionedStorageGiB")
    def provisioned_storage_gi_b(self) -> builtins.int:
        """
        The desired provisioned storage size of the share in GiB. Will be use to calculate the values of remaining provisioning parameters.
        """
        return pulumi.get(self, "provisioned_storage_gi_b")

    @provisioned_storage_gi_b.setter
    def provisioned_storage_gi_b(self, value: builtins.int):
        pulumi.set(self, "provisioned_storage_gi_b", value)


if not MYPY:
    class NfsProtocolPropertiesArgsDict(TypedDict):
        """
        Properties specific to the NFS protocol.
        """
        root_squash: NotRequired[pulumi.Input[Union[builtins.str, 'ShareRootSquash']]]
        """
        Root squash defines how root users on clients are mapped to the NFS share.
        """
elif False:
    NfsProtocolPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NfsProtocolPropertiesArgs:
    def __init__(__self__, *,
                 root_squash: Optional[pulumi.Input[Union[builtins.str, 'ShareRootSquash']]] = None):
        """
        Properties specific to the NFS protocol.
        :param pulumi.Input[Union[builtins.str, 'ShareRootSquash']] root_squash: Root squash defines how root users on clients are mapped to the NFS share.
        """
        if root_squash is not None:
            pulumi.set(__self__, "root_squash", root_squash)

    @property
    @pulumi.getter(name="rootSquash")
    def root_squash(self) -> Optional[pulumi.Input[Union[builtins.str, 'ShareRootSquash']]]:
        """
        Root squash defines how root users on clients are mapped to the NFS share.
        """
        return pulumi.get(self, "root_squash")

    @root_squash.setter
    def root_squash(self, value: Optional[pulumi.Input[Union[builtins.str, 'ShareRootSquash']]]):
        pulumi.set(self, "root_squash", value)


if not MYPY:
    class PublicAccessPropertiesArgsDict(TypedDict):
        """
        The set of properties for control public access.
        """
        allowed_subnets: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The allowed set of subnets when access is restricted.
        """
elif False:
    PublicAccessPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PublicAccessPropertiesArgs:
    def __init__(__self__, *,
                 allowed_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The set of properties for control public access.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] allowed_subnets: The allowed set of subnets when access is restricted.
        """
        if allowed_subnets is not None:
            pulumi.set(__self__, "allowed_subnets", allowed_subnets)

    @property
    @pulumi.getter(name="allowedSubnets")
    def allowed_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The allowed set of subnets when access is restricted.
        """
        return pulumi.get(self, "allowed_subnets")

    @allowed_subnets.setter
    def allowed_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "allowed_subnets", value)


