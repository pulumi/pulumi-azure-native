# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'ProjectFilePropertiesResponse',
]

@pulumi.output_type
class ProjectFilePropertiesResponse(dict):
    """
    Base class for file properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "filePath":
            suggest = "file_path"
        elif key == "mediaType":
            suggest = "media_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectFilePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectFilePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectFilePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_modified: str,
                 size: float,
                 extension: Optional[str] = None,
                 file_path: Optional[str] = None,
                 media_type: Optional[str] = None):
        """
        Base class for file properties.
        :param str last_modified: Modification DateTime.
        :param float size: File size.
        :param str extension: Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
        :param str file_path: Relative path of this file resource. This property can be set when creating or updating the file resource.
        :param str media_type: File content type. This property can be modified to reflect the file content type.
        """
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "size", size)
        if extension is not None:
            pulumi.set(__self__, "extension", extension)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        Modification DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def size(self) -> float:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def extension(self) -> Optional[str]:
        """
        Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
        """
        return pulumi.get(self, "extension")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[str]:
        """
        Relative path of this file resource. This property can be set when creating or updating the file resource.
        """
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[str]:
        """
        File content type. This property can be modified to reflect the file content type.
        """
        return pulumi.get(self, "media_type")


