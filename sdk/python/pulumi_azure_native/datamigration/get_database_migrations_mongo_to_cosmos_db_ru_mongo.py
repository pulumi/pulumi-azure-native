# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDatabaseMigrationsMongoToCosmosDbRUMongoResult',
    'AwaitableGetDatabaseMigrationsMongoToCosmosDbRUMongoResult',
    'get_database_migrations_mongo_to_cosmos_db_ru_mongo',
    'get_database_migrations_mongo_to_cosmos_db_ru_mongo_output',
]

@pulumi.output_type
class GetDatabaseMigrationsMongoToCosmosDbRUMongoResult:
    """
    Database Migration Resource for Mongo to CosmosDb.
    """
    def __init__(__self__, collection_list=None, ended_on=None, id=None, kind=None, migration_failure_error=None, migration_operation_id=None, migration_service=None, migration_status=None, name=None, provisioning_error=None, provisioning_state=None, scope=None, source_mongo_connection=None, started_on=None, system_data=None, target_mongo_connection=None, type=None):
        if collection_list and not isinstance(collection_list, list):
            raise TypeError("Expected argument 'collection_list' to be a list")
        pulumi.set(__self__, "collection_list", collection_list)
        if ended_on and not isinstance(ended_on, str):
            raise TypeError("Expected argument 'ended_on' to be a str")
        pulumi.set(__self__, "ended_on", ended_on)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if migration_failure_error and not isinstance(migration_failure_error, dict):
            raise TypeError("Expected argument 'migration_failure_error' to be a dict")
        pulumi.set(__self__, "migration_failure_error", migration_failure_error)
        if migration_operation_id and not isinstance(migration_operation_id, str):
            raise TypeError("Expected argument 'migration_operation_id' to be a str")
        pulumi.set(__self__, "migration_operation_id", migration_operation_id)
        if migration_service and not isinstance(migration_service, str):
            raise TypeError("Expected argument 'migration_service' to be a str")
        pulumi.set(__self__, "migration_service", migration_service)
        if migration_status and not isinstance(migration_status, str):
            raise TypeError("Expected argument 'migration_status' to be a str")
        pulumi.set(__self__, "migration_status", migration_status)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_error and not isinstance(provisioning_error, str):
            raise TypeError("Expected argument 'provisioning_error' to be a str")
        pulumi.set(__self__, "provisioning_error", provisioning_error)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if source_mongo_connection and not isinstance(source_mongo_connection, dict):
            raise TypeError("Expected argument 'source_mongo_connection' to be a dict")
        pulumi.set(__self__, "source_mongo_connection", source_mongo_connection)
        if started_on and not isinstance(started_on, str):
            raise TypeError("Expected argument 'started_on' to be a str")
        pulumi.set(__self__, "started_on", started_on)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if target_mongo_connection and not isinstance(target_mongo_connection, dict):
            raise TypeError("Expected argument 'target_mongo_connection' to be a dict")
        pulumi.set(__self__, "target_mongo_connection", target_mongo_connection)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="collectionList")
    def collection_list(self) -> Optional[Sequence['outputs.MongoMigrationCollectionResponse']]:
        """
        List of Mongo Collections to be migrated.
        """
        return pulumi.get(self, "collection_list")

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Database migration end time.
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """

        Expected value is 'MongoToCosmosDbMongo'.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="migrationFailureError")
    def migration_failure_error(self) -> 'outputs.ErrorInfoResponse':
        """
        Error details in case of migration failure.
        """
        return pulumi.get(self, "migration_failure_error")

    @property
    @pulumi.getter(name="migrationOperationId")
    def migration_operation_id(self) -> Optional[str]:
        """
        ID for current migration operation.
        """
        return pulumi.get(self, "migration_operation_id")

    @property
    @pulumi.getter(name="migrationService")
    def migration_service(self) -> Optional[str]:
        """
        Resource Id of the Migration Service.
        """
        return pulumi.get(self, "migration_service")

    @property
    @pulumi.getter(name="migrationStatus")
    def migration_status(self) -> str:
        """
        Migration status.
        """
        return pulumi.get(self, "migration_status")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningError")
    def provisioning_error(self) -> Optional[str]:
        """
        Error message for migration provisioning failure, if any.
        """
        return pulumi.get(self, "provisioning_error")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration has started.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        Resource Id of the target resource.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="sourceMongoConnection")
    def source_mongo_connection(self) -> Optional['outputs.MongoConnectionInformationResponse']:
        """
        Source Mongo connection details.
        """
        return pulumi.get(self, "source_mongo_connection")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Database migration start time.
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="targetMongoConnection")
    def target_mongo_connection(self) -> Optional['outputs.MongoConnectionInformationResponse']:
        """
        Target Cosmos DB Mongo connection details.
        """
        return pulumi.get(self, "target_mongo_connection")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetDatabaseMigrationsMongoToCosmosDbRUMongoResult(GetDatabaseMigrationsMongoToCosmosDbRUMongoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseMigrationsMongoToCosmosDbRUMongoResult(
            collection_list=self.collection_list,
            ended_on=self.ended_on,
            id=self.id,
            kind=self.kind,
            migration_failure_error=self.migration_failure_error,
            migration_operation_id=self.migration_operation_id,
            migration_service=self.migration_service,
            migration_status=self.migration_status,
            name=self.name,
            provisioning_error=self.provisioning_error,
            provisioning_state=self.provisioning_state,
            scope=self.scope,
            source_mongo_connection=self.source_mongo_connection,
            started_on=self.started_on,
            system_data=self.system_data,
            target_mongo_connection=self.target_mongo_connection,
            type=self.type)


def get_database_migrations_mongo_to_cosmos_db_ru_mongo(migration_name: Optional[str] = None,
                                                        resource_group_name: Optional[str] = None,
                                                        target_resource_name: Optional[str] = None,
                                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseMigrationsMongoToCosmosDbRUMongoResult:
    """
    Get Database Migration resource.
    Azure REST API version: 2023-07-15-preview.


    :param str migration_name: Name of the migration.
    :param str resource_group_name: Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
    :param str target_resource_name: The name of the target resource/account.
    """
    __args__ = dict()
    __args__['migrationName'] = migration_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['targetResourceName'] = target_resource_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:datamigration:getDatabaseMigrationsMongoToCosmosDbRUMongo', __args__, opts=opts, typ=GetDatabaseMigrationsMongoToCosmosDbRUMongoResult).value

    return AwaitableGetDatabaseMigrationsMongoToCosmosDbRUMongoResult(
        collection_list=pulumi.get(__ret__, 'collection_list'),
        ended_on=pulumi.get(__ret__, 'ended_on'),
        id=pulumi.get(__ret__, 'id'),
        kind=pulumi.get(__ret__, 'kind'),
        migration_failure_error=pulumi.get(__ret__, 'migration_failure_error'),
        migration_operation_id=pulumi.get(__ret__, 'migration_operation_id'),
        migration_service=pulumi.get(__ret__, 'migration_service'),
        migration_status=pulumi.get(__ret__, 'migration_status'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_error=pulumi.get(__ret__, 'provisioning_error'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        scope=pulumi.get(__ret__, 'scope'),
        source_mongo_connection=pulumi.get(__ret__, 'source_mongo_connection'),
        started_on=pulumi.get(__ret__, 'started_on'),
        system_data=pulumi.get(__ret__, 'system_data'),
        target_mongo_connection=pulumi.get(__ret__, 'target_mongo_connection'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_database_migrations_mongo_to_cosmos_db_ru_mongo)
def get_database_migrations_mongo_to_cosmos_db_ru_mongo_output(migration_name: Optional[pulumi.Input[str]] = None,
                                                               resource_group_name: Optional[pulumi.Input[str]] = None,
                                                               target_resource_name: Optional[pulumi.Input[str]] = None,
                                                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatabaseMigrationsMongoToCosmosDbRUMongoResult]:
    """
    Get Database Migration resource.
    Azure REST API version: 2023-07-15-preview.


    :param str migration_name: Name of the migration.
    :param str resource_group_name: Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
    :param str target_resource_name: The name of the target resource/account.
    """
    ...
