# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'AzureActiveDirectoryAppArgs',
    'AzureActiveDirectoryAppArgsDict',
    'BlobShareArgs',
    'BlobShareArgsDict',
    'ConnectToMongoDbTaskPropertiesArgs',
    'ConnectToMongoDbTaskPropertiesArgsDict',
    'ConnectToSourceMySqlTaskInputArgs',
    'ConnectToSourceMySqlTaskInputArgsDict',
    'ConnectToSourceMySqlTaskPropertiesArgs',
    'ConnectToSourceMySqlTaskPropertiesArgsDict',
    'ConnectToSourceOracleSyncTaskInputArgs',
    'ConnectToSourceOracleSyncTaskInputArgsDict',
    'ConnectToSourceOracleSyncTaskPropertiesArgs',
    'ConnectToSourceOracleSyncTaskPropertiesArgsDict',
    'ConnectToSourcePostgreSqlSyncTaskInputArgs',
    'ConnectToSourcePostgreSqlSyncTaskInputArgsDict',
    'ConnectToSourcePostgreSqlSyncTaskPropertiesArgs',
    'ConnectToSourcePostgreSqlSyncTaskPropertiesArgsDict',
    'ConnectToSourceSqlServerSyncTaskPropertiesArgs',
    'ConnectToSourceSqlServerSyncTaskPropertiesArgsDict',
    'ConnectToSourceSqlServerTaskInputArgs',
    'ConnectToSourceSqlServerTaskInputArgsDict',
    'ConnectToSourceSqlServerTaskPropertiesArgs',
    'ConnectToSourceSqlServerTaskPropertiesArgsDict',
    'ConnectToTargetAzureDbForMySqlTaskInputArgs',
    'ConnectToTargetAzureDbForMySqlTaskInputArgsDict',
    'ConnectToTargetAzureDbForMySqlTaskPropertiesArgs',
    'ConnectToTargetAzureDbForMySqlTaskPropertiesArgsDict',
    'ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs',
    'ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgsDict',
    'ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs',
    'ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgsDict',
    'ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs',
    'ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgsDict',
    'ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs',
    'ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgsDict',
    'ConnectToTargetSqlDbTaskInputArgs',
    'ConnectToTargetSqlDbTaskInputArgsDict',
    'ConnectToTargetSqlDbTaskPropertiesArgs',
    'ConnectToTargetSqlDbTaskPropertiesArgsDict',
    'ConnectToTargetSqlMISyncTaskInputArgs',
    'ConnectToTargetSqlMISyncTaskInputArgsDict',
    'ConnectToTargetSqlMISyncTaskPropertiesArgs',
    'ConnectToTargetSqlMISyncTaskPropertiesArgsDict',
    'ConnectToTargetSqlMITaskInputArgs',
    'ConnectToTargetSqlMITaskInputArgsDict',
    'ConnectToTargetSqlMITaskPropertiesArgs',
    'ConnectToTargetSqlMITaskPropertiesArgsDict',
    'ConnectToTargetSqlSqlDbSyncTaskInputArgs',
    'ConnectToTargetSqlSqlDbSyncTaskInputArgsDict',
    'ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs',
    'ConnectToTargetSqlSqlDbSyncTaskPropertiesArgsDict',
    'DatabaseInfoArgs',
    'DatabaseInfoArgsDict',
    'DatabaseMigrationPropertiesSqlDbArgs',
    'DatabaseMigrationPropertiesSqlDbArgsDict',
    'FileShareArgs',
    'FileShareArgsDict',
    'GetTdeCertificatesSqlTaskInputArgs',
    'GetTdeCertificatesSqlTaskInputArgsDict',
    'GetTdeCertificatesSqlTaskPropertiesArgs',
    'GetTdeCertificatesSqlTaskPropertiesArgsDict',
    'GetUserTablesMySqlTaskInputArgs',
    'GetUserTablesMySqlTaskInputArgsDict',
    'GetUserTablesMySqlTaskPropertiesArgs',
    'GetUserTablesMySqlTaskPropertiesArgsDict',
    'GetUserTablesOracleTaskInputArgs',
    'GetUserTablesOracleTaskInputArgsDict',
    'GetUserTablesOracleTaskPropertiesArgs',
    'GetUserTablesOracleTaskPropertiesArgsDict',
    'GetUserTablesPostgreSqlTaskInputArgs',
    'GetUserTablesPostgreSqlTaskInputArgsDict',
    'GetUserTablesPostgreSqlTaskPropertiesArgs',
    'GetUserTablesPostgreSqlTaskPropertiesArgsDict',
    'GetUserTablesSqlSyncTaskInputArgs',
    'GetUserTablesSqlSyncTaskInputArgsDict',
    'GetUserTablesSqlSyncTaskPropertiesArgs',
    'GetUserTablesSqlSyncTaskPropertiesArgsDict',
    'GetUserTablesSqlTaskInputArgs',
    'GetUserTablesSqlTaskInputArgsDict',
    'GetUserTablesSqlTaskPropertiesArgs',
    'GetUserTablesSqlTaskPropertiesArgsDict',
    'MiSqlConnectionInfoArgs',
    'MiSqlConnectionInfoArgsDict',
    'MigrateMongoDbTaskPropertiesArgs',
    'MigrateMongoDbTaskPropertiesArgsDict',
    'MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs',
    'MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgsDict',
    'MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs',
    'MigrateMySqlAzureDbForMySqlOfflineTaskInputArgsDict',
    'MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs',
    'MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgsDict',
    'MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs',
    'MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgsDict',
    'MigrateMySqlAzureDbForMySqlSyncTaskInputArgs',
    'MigrateMySqlAzureDbForMySqlSyncTaskInputArgsDict',
    'MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs',
    'MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgsDict',
    'MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs',
    'MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgsDict',
    'MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs',
    'MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgsDict',
    'MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs',
    'MigrateOracleAzureDbPostgreSqlSyncTaskInputArgsDict',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgsDict',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgsDict',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgsDict',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgsDict',
    'MigrateSqlServerSqlDbDatabaseInputArgs',
    'MigrateSqlServerSqlDbDatabaseInputArgsDict',
    'MigrateSqlServerSqlDbSyncDatabaseInputArgs',
    'MigrateSqlServerSqlDbSyncDatabaseInputArgsDict',
    'MigrateSqlServerSqlDbSyncTaskInputArgs',
    'MigrateSqlServerSqlDbSyncTaskInputArgsDict',
    'MigrateSqlServerSqlDbSyncTaskPropertiesArgs',
    'MigrateSqlServerSqlDbSyncTaskPropertiesArgsDict',
    'MigrateSqlServerSqlDbTaskInputArgs',
    'MigrateSqlServerSqlDbTaskInputArgsDict',
    'MigrateSqlServerSqlDbTaskPropertiesArgs',
    'MigrateSqlServerSqlDbTaskPropertiesArgsDict',
    'MigrateSqlServerSqlMIDatabaseInputArgs',
    'MigrateSqlServerSqlMIDatabaseInputArgsDict',
    'MigrateSqlServerSqlMISyncTaskInputArgs',
    'MigrateSqlServerSqlMISyncTaskInputArgsDict',
    'MigrateSqlServerSqlMISyncTaskPropertiesArgs',
    'MigrateSqlServerSqlMISyncTaskPropertiesArgsDict',
    'MigrateSqlServerSqlMITaskInputArgs',
    'MigrateSqlServerSqlMITaskInputArgsDict',
    'MigrateSqlServerSqlMITaskPropertiesArgs',
    'MigrateSqlServerSqlMITaskPropertiesArgsDict',
    'MigrateSsisTaskInputArgs',
    'MigrateSsisTaskInputArgsDict',
    'MigrateSsisTaskPropertiesArgs',
    'MigrateSsisTaskPropertiesArgsDict',
    'MigrationValidationOptionsArgs',
    'MigrationValidationOptionsArgsDict',
    'MongoConnectionInformationArgs',
    'MongoConnectionInformationArgsDict',
    'MongoDbCollectionSettingsArgs',
    'MongoDbCollectionSettingsArgsDict',
    'MongoDbConnectionInfoArgs',
    'MongoDbConnectionInfoArgsDict',
    'MongoDbDatabaseSettingsArgs',
    'MongoDbDatabaseSettingsArgsDict',
    'MongoDbMigrationSettingsArgs',
    'MongoDbMigrationSettingsArgsDict',
    'MongoDbShardKeyFieldArgs',
    'MongoDbShardKeyFieldArgsDict',
    'MongoDbShardKeySettingArgs',
    'MongoDbShardKeySettingArgsDict',
    'MongoDbThrottlingSettingsArgs',
    'MongoDbThrottlingSettingsArgsDict',
    'MongoMigrationCollectionArgs',
    'MongoMigrationCollectionArgsDict',
    'MySqlConnectionInfoArgs',
    'MySqlConnectionInfoArgsDict',
    'OracleConnectionInfoArgs',
    'OracleConnectionInfoArgsDict',
    'PostgreSqlConnectionInfoArgs',
    'PostgreSqlConnectionInfoArgsDict',
    'ProjectFilePropertiesArgs',
    'ProjectFilePropertiesArgsDict',
    'SelectedCertificateInputArgs',
    'SelectedCertificateInputArgsDict',
    'ServiceSkuArgs',
    'ServiceSkuArgsDict',
    'SqlConnectionInformationArgs',
    'SqlConnectionInformationArgsDict',
    'SqlConnectionInfoArgs',
    'SqlConnectionInfoArgsDict',
    'SsisMigrationInfoArgs',
    'SsisMigrationInfoArgsDict',
    'ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs',
    'ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgsDict',
    'ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs',
    'ValidateMigrationInputSqlServerSqlMISyncTaskInputArgsDict',
    'ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs',
    'ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgsDict',
    'ValidateMigrationInputSqlServerSqlMITaskInputArgs',
    'ValidateMigrationInputSqlServerSqlMITaskInputArgsDict',
    'ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs',
    'ValidateMigrationInputSqlServerSqlMITaskPropertiesArgsDict',
    'ValidateMongoDbTaskPropertiesArgs',
    'ValidateMongoDbTaskPropertiesArgsDict',
    'ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs',
    'ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgsDict',
    'ValidateSyncMigrationInputSqlServerTaskInputArgs',
    'ValidateSyncMigrationInputSqlServerTaskInputArgsDict',
]

MYPY = False

if not MYPY:
    class AzureActiveDirectoryAppArgsDict(TypedDict):
        """
        Azure Active Directory Application
        """
        app_key: pulumi.Input[str]
        """
        Key used to authenticate to the Azure Active Directory Application
        """
        application_id: pulumi.Input[str]
        """
        Application ID of the Azure Active Directory Application
        """
        tenant_id: pulumi.Input[str]
        """
        Tenant id of the customer
        """
elif False:
    AzureActiveDirectoryAppArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureActiveDirectoryAppArgs:
    def __init__(__self__, *,
                 app_key: pulumi.Input[str],
                 application_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str]):
        """
        Azure Active Directory Application
        :param pulumi.Input[str] app_key: Key used to authenticate to the Azure Active Directory Application
        :param pulumi.Input[str] application_id: Application ID of the Azure Active Directory Application
        :param pulumi.Input[str] tenant_id: Tenant id of the customer
        """
        pulumi.set(__self__, "app_key", app_key)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> pulumi.Input[str]:
        """
        Key used to authenticate to the Azure Active Directory Application
        """
        return pulumi.get(self, "app_key")

    @app_key.setter
    def app_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_key", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        Application ID of the Azure Active Directory Application
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        Tenant id of the customer
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:
    class BlobShareArgsDict(TypedDict):
        """
        Blob container storage information.
        """
        sas_uri: pulumi.Input[str]
        """
        SAS URI of Azure Storage Account Container.
        """
elif False:
    BlobShareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlobShareArgs:
    def __init__(__self__, *,
                 sas_uri: pulumi.Input[str]):
        """
        Blob container storage information.
        :param pulumi.Input[str] sas_uri: SAS URI of Azure Storage Account Container.
        """
        pulumi.set(__self__, "sas_uri", sas_uri)

    @property
    @pulumi.getter(name="sasUri")
    def sas_uri(self) -> pulumi.Input[str]:
        """
        SAS URI of Azure Storage Account Container.
        """
        return pulumi.get(self, "sas_uri")

    @sas_uri.setter
    def sas_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "sas_uri", value)


if not MYPY:
    class ConnectToMongoDbTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates the connection to and provides information about a MongoDB server
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Connect.MongoDb'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MongoDbConnectionInfoArgsDict']]
        """
        Describes a connection to a MongoDB data source
        """
elif False:
    ConnectToMongoDbTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToMongoDbTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MongoDbConnectionInfoArgs']] = None):
        """
        Properties for the task that validates the connection to and provides information about a MongoDB server
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Connect.MongoDb'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MongoDbConnectionInfoArgs'] input: Describes a connection to a MongoDB data source
        """
        pulumi.set(__self__, "task_type", 'Connect.MongoDb')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Connect.MongoDb'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MongoDbConnectionInfoArgs']]:
        """
        Describes a connection to a MongoDB data source
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MongoDbConnectionInfoArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ConnectToSourceMySqlTaskInputArgsDict(TypedDict):
        """
        Input for the task that validates MySQL database connection
        """
        source_connection_info: pulumi.Input['MySqlConnectionInfoArgsDict']
        """
        Information for connecting to MySQL source
        """
        check_permissions_group: NotRequired[pulumi.Input[Union[str, 'ServerLevelPermissionsGroup']]]
        """
        Permission group for validations
        """
        is_offline_migration: NotRequired[pulumi.Input[bool]]
        """
        Flag for whether or not the migration is offline
        """
        target_platform: NotRequired[pulumi.Input[Union[str, 'MySqlTargetPlatformType']]]
        """
        Target Platform for the migration
        """
elif False:
    ConnectToSourceMySqlTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToSourceMySqlTaskInputArgs:
    def __init__(__self__, *,
                 source_connection_info: pulumi.Input['MySqlConnectionInfoArgs'],
                 check_permissions_group: Optional[pulumi.Input[Union[str, 'ServerLevelPermissionsGroup']]] = None,
                 is_offline_migration: Optional[pulumi.Input[bool]] = None,
                 target_platform: Optional[pulumi.Input[Union[str, 'MySqlTargetPlatformType']]] = None):
        """
        Input for the task that validates MySQL database connection
        :param pulumi.Input['MySqlConnectionInfoArgs'] source_connection_info: Information for connecting to MySQL source
        :param pulumi.Input[Union[str, 'ServerLevelPermissionsGroup']] check_permissions_group: Permission group for validations
        :param pulumi.Input[bool] is_offline_migration: Flag for whether or not the migration is offline
        :param pulumi.Input[Union[str, 'MySqlTargetPlatformType']] target_platform: Target Platform for the migration
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        if check_permissions_group is not None:
            pulumi.set(__self__, "check_permissions_group", check_permissions_group)
        if is_offline_migration is None:
            is_offline_migration = False
        if is_offline_migration is not None:
            pulumi.set(__self__, "is_offline_migration", is_offline_migration)
        if target_platform is not None:
            pulumi.set(__self__, "target_platform", target_platform)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['MySqlConnectionInfoArgs']:
        """
        Information for connecting to MySQL source
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['MySqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="checkPermissionsGroup")
    def check_permissions_group(self) -> Optional[pulumi.Input[Union[str, 'ServerLevelPermissionsGroup']]]:
        """
        Permission group for validations
        """
        return pulumi.get(self, "check_permissions_group")

    @check_permissions_group.setter
    def check_permissions_group(self, value: Optional[pulumi.Input[Union[str, 'ServerLevelPermissionsGroup']]]):
        pulumi.set(self, "check_permissions_group", value)

    @property
    @pulumi.getter(name="isOfflineMigration")
    def is_offline_migration(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag for whether or not the migration is offline
        """
        return pulumi.get(self, "is_offline_migration")

    @is_offline_migration.setter
    def is_offline_migration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_offline_migration", value)

    @property
    @pulumi.getter(name="targetPlatform")
    def target_platform(self) -> Optional[pulumi.Input[Union[str, 'MySqlTargetPlatformType']]]:
        """
        Target Platform for the migration
        """
        return pulumi.get(self, "target_platform")

    @target_platform.setter
    def target_platform(self, value: Optional[pulumi.Input[Union[str, 'MySqlTargetPlatformType']]]):
        pulumi.set(self, "target_platform", value)


if not MYPY:
    class ConnectToSourceMySqlTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates MySQL database connection
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ConnectToSource.MySql'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ConnectToSourceMySqlTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ConnectToSourceMySqlTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToSourceMySqlTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ConnectToSourceMySqlTaskInputArgs']] = None):
        """
        Properties for the task that validates MySQL database connection
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ConnectToSource.MySql'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ConnectToSourceMySqlTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ConnectToSource.MySql')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ConnectToSource.MySql'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ConnectToSourceMySqlTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ConnectToSourceMySqlTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ConnectToSourceOracleSyncTaskInputArgsDict(TypedDict):
        """
        Input for the task that validates Oracle database connection
        """
        source_connection_info: pulumi.Input['OracleConnectionInfoArgsDict']
        """
        Information for connecting to Oracle source
        """
elif False:
    ConnectToSourceOracleSyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToSourceOracleSyncTaskInputArgs:
    def __init__(__self__, *,
                 source_connection_info: pulumi.Input['OracleConnectionInfoArgs']):
        """
        Input for the task that validates Oracle database connection
        :param pulumi.Input['OracleConnectionInfoArgs'] source_connection_info: Information for connecting to Oracle source
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['OracleConnectionInfoArgs']:
        """
        Information for connecting to Oracle source
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['OracleConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)


if not MYPY:
    class ConnectToSourceOracleSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates Oracle database connection
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ConnectToSource.Oracle.Sync'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ConnectToSourceOracleSyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ConnectToSourceOracleSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToSourceOracleSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ConnectToSourceOracleSyncTaskInputArgs']] = None):
        """
        Properties for the task that validates Oracle database connection
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ConnectToSource.Oracle.Sync'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ConnectToSourceOracleSyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ConnectToSource.Oracle.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ConnectToSource.Oracle.Sync'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ConnectToSourceOracleSyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ConnectToSourceOracleSyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ConnectToSourcePostgreSqlSyncTaskInputArgsDict(TypedDict):
        """
        Input for the task that validates connection to PostgreSQL and source server requirements
        """
        source_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgsDict']
        """
        Connection information for source PostgreSQL server
        """
elif False:
    ConnectToSourcePostgreSqlSyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToSourcePostgreSqlSyncTaskInputArgs:
    def __init__(__self__, *,
                 source_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        """
        Input for the task that validates connection to PostgreSQL and source server requirements
        :param pulumi.Input['PostgreSqlConnectionInfoArgs'] source_connection_info: Connection information for source PostgreSQL server
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['PostgreSqlConnectionInfoArgs']:
        """
        Connection information for source PostgreSQL server
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)


if not MYPY:
    class ConnectToSourcePostgreSqlSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ConnectToSource.PostgreSql.Sync'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ConnectToSourcePostgreSqlSyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ConnectToSourcePostgreSqlSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToSourcePostgreSqlSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ConnectToSourcePostgreSqlSyncTaskInputArgs']] = None):
        """
        Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ConnectToSource.PostgreSql.Sync'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ConnectToSourcePostgreSqlSyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ConnectToSource.PostgreSql.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ConnectToSource.PostgreSql.Sync'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ConnectToSourcePostgreSqlSyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ConnectToSourcePostgreSqlSyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ConnectToSourceSqlServerSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates connection to SQL Server and source server requirements for online migration
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ConnectToSource.SqlServer.Sync'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ConnectToSourceSqlServerTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ConnectToSourceSqlServerSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToSourceSqlServerSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ConnectToSourceSqlServerTaskInputArgs']] = None):
        """
        Properties for the task that validates connection to SQL Server and source server requirements for online migration
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ConnectToSource.SqlServer.Sync'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ConnectToSourceSqlServerTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ConnectToSource.SqlServer.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ConnectToSource.SqlServer.Sync'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ConnectToSourceSqlServerTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ConnectToSourceSqlServerTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ConnectToSourceSqlServerTaskInputArgsDict(TypedDict):
        """
        Input for the task that validates connection to SQL Server and also validates source server requirements
        """
        source_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Connection information for Source SQL Server
        """
        check_permissions_group: NotRequired[pulumi.Input[Union[str, 'ServerLevelPermissionsGroup']]]
        """
        Permission group for validations
        """
        collect_agent_jobs: NotRequired[pulumi.Input[bool]]
        """
        Flag for whether to collect agent jobs from source server.
        """
        collect_databases: NotRequired[pulumi.Input[bool]]
        """
        Flag for whether to collect databases from source server.
        """
        collect_logins: NotRequired[pulumi.Input[bool]]
        """
        Flag for whether to collect logins from source server.
        """
        collect_tde_certificate_info: NotRequired[pulumi.Input[bool]]
        """
        Flag for whether to collect TDE Certificate names from source server.
        """
        validate_ssis_catalog_only: NotRequired[pulumi.Input[bool]]
        """
        Flag for whether to validate SSIS catalog is reachable on the source server.
        """
elif False:
    ConnectToSourceSqlServerTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToSourceSqlServerTaskInputArgs:
    def __init__(__self__, *,
                 source_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 check_permissions_group: Optional[pulumi.Input[Union[str, 'ServerLevelPermissionsGroup']]] = None,
                 collect_agent_jobs: Optional[pulumi.Input[bool]] = None,
                 collect_databases: Optional[pulumi.Input[bool]] = None,
                 collect_logins: Optional[pulumi.Input[bool]] = None,
                 collect_tde_certificate_info: Optional[pulumi.Input[bool]] = None,
                 validate_ssis_catalog_only: Optional[pulumi.Input[bool]] = None):
        """
        Input for the task that validates connection to SQL Server and also validates source server requirements
        :param pulumi.Input['SqlConnectionInfoArgs'] source_connection_info: Connection information for Source SQL Server
        :param pulumi.Input[Union[str, 'ServerLevelPermissionsGroup']] check_permissions_group: Permission group for validations
        :param pulumi.Input[bool] collect_agent_jobs: Flag for whether to collect agent jobs from source server.
        :param pulumi.Input[bool] collect_databases: Flag for whether to collect databases from source server.
        :param pulumi.Input[bool] collect_logins: Flag for whether to collect logins from source server.
        :param pulumi.Input[bool] collect_tde_certificate_info: Flag for whether to collect TDE Certificate names from source server.
        :param pulumi.Input[bool] validate_ssis_catalog_only: Flag for whether to validate SSIS catalog is reachable on the source server.
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        if check_permissions_group is not None:
            pulumi.set(__self__, "check_permissions_group", check_permissions_group)
        if collect_agent_jobs is None:
            collect_agent_jobs = False
        if collect_agent_jobs is not None:
            pulumi.set(__self__, "collect_agent_jobs", collect_agent_jobs)
        if collect_databases is None:
            collect_databases = True
        if collect_databases is not None:
            pulumi.set(__self__, "collect_databases", collect_databases)
        if collect_logins is None:
            collect_logins = False
        if collect_logins is not None:
            pulumi.set(__self__, "collect_logins", collect_logins)
        if collect_tde_certificate_info is None:
            collect_tde_certificate_info = False
        if collect_tde_certificate_info is not None:
            pulumi.set(__self__, "collect_tde_certificate_info", collect_tde_certificate_info)
        if validate_ssis_catalog_only is None:
            validate_ssis_catalog_only = False
        if validate_ssis_catalog_only is not None:
            pulumi.set(__self__, "validate_ssis_catalog_only", validate_ssis_catalog_only)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Connection information for Source SQL Server
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="checkPermissionsGroup")
    def check_permissions_group(self) -> Optional[pulumi.Input[Union[str, 'ServerLevelPermissionsGroup']]]:
        """
        Permission group for validations
        """
        return pulumi.get(self, "check_permissions_group")

    @check_permissions_group.setter
    def check_permissions_group(self, value: Optional[pulumi.Input[Union[str, 'ServerLevelPermissionsGroup']]]):
        pulumi.set(self, "check_permissions_group", value)

    @property
    @pulumi.getter(name="collectAgentJobs")
    def collect_agent_jobs(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag for whether to collect agent jobs from source server.
        """
        return pulumi.get(self, "collect_agent_jobs")

    @collect_agent_jobs.setter
    def collect_agent_jobs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "collect_agent_jobs", value)

    @property
    @pulumi.getter(name="collectDatabases")
    def collect_databases(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag for whether to collect databases from source server.
        """
        return pulumi.get(self, "collect_databases")

    @collect_databases.setter
    def collect_databases(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "collect_databases", value)

    @property
    @pulumi.getter(name="collectLogins")
    def collect_logins(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag for whether to collect logins from source server.
        """
        return pulumi.get(self, "collect_logins")

    @collect_logins.setter
    def collect_logins(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "collect_logins", value)

    @property
    @pulumi.getter(name="collectTdeCertificateInfo")
    def collect_tde_certificate_info(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag for whether to collect TDE Certificate names from source server.
        """
        return pulumi.get(self, "collect_tde_certificate_info")

    @collect_tde_certificate_info.setter
    def collect_tde_certificate_info(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "collect_tde_certificate_info", value)

    @property
    @pulumi.getter(name="validateSsisCatalogOnly")
    def validate_ssis_catalog_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag for whether to validate SSIS catalog is reachable on the source server.
        """
        return pulumi.get(self, "validate_ssis_catalog_only")

    @validate_ssis_catalog_only.setter
    def validate_ssis_catalog_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_ssis_catalog_only", value)


if not MYPY:
    class ConnectToSourceSqlServerTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates connection to SQL Server and also validates source server requirements
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ConnectToSource.SqlServer'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ConnectToSourceSqlServerTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ConnectToSourceSqlServerTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToSourceSqlServerTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ConnectToSourceSqlServerTaskInputArgs']] = None):
        """
        Properties for the task that validates connection to SQL Server and also validates source server requirements
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ConnectToSource.SqlServer'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ConnectToSourceSqlServerTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ConnectToSource.SqlServer')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ConnectToSource.SqlServer'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ConnectToSourceSqlServerTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ConnectToSourceSqlServerTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ConnectToTargetAzureDbForMySqlTaskInputArgsDict(TypedDict):
        """
        Input for the task that validates connection to Azure Database for MySQL and target server requirements
        """
        source_connection_info: pulumi.Input['MySqlConnectionInfoArgsDict']
        """
        Connection information for source MySQL server
        """
        target_connection_info: pulumi.Input['MySqlConnectionInfoArgsDict']
        """
        Connection information for target Azure Database for MySQL server
        """
        is_offline_migration: NotRequired[pulumi.Input[bool]]
        """
        Flag for whether or not the migration is offline
        """
elif False:
    ConnectToTargetAzureDbForMySqlTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetAzureDbForMySqlTaskInputArgs:
    def __init__(__self__, *,
                 source_connection_info: pulumi.Input['MySqlConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['MySqlConnectionInfoArgs'],
                 is_offline_migration: Optional[pulumi.Input[bool]] = None):
        """
        Input for the task that validates connection to Azure Database for MySQL and target server requirements
        :param pulumi.Input['MySqlConnectionInfoArgs'] source_connection_info: Connection information for source MySQL server
        :param pulumi.Input['MySqlConnectionInfoArgs'] target_connection_info: Connection information for target Azure Database for MySQL server
        :param pulumi.Input[bool] is_offline_migration: Flag for whether or not the migration is offline
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if is_offline_migration is None:
            is_offline_migration = False
        if is_offline_migration is not None:
            pulumi.set(__self__, "is_offline_migration", is_offline_migration)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['MySqlConnectionInfoArgs']:
        """
        Connection information for source MySQL server
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['MySqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['MySqlConnectionInfoArgs']:
        """
        Connection information for target Azure Database for MySQL server
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['MySqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)

    @property
    @pulumi.getter(name="isOfflineMigration")
    def is_offline_migration(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag for whether or not the migration is offline
        """
        return pulumi.get(self, "is_offline_migration")

    @is_offline_migration.setter
    def is_offline_migration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_offline_migration", value)


if not MYPY:
    class ConnectToTargetAzureDbForMySqlTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates connection to Azure Database for MySQL and target server requirements
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ConnectToTarget.AzureDbForMySql'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ConnectToTargetAzureDbForMySqlTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ConnectToTargetAzureDbForMySqlTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetAzureDbForMySqlTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ConnectToTargetAzureDbForMySqlTaskInputArgs']] = None):
        """
        Properties for the task that validates connection to Azure Database for MySQL and target server requirements
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ConnectToTarget.AzureDbForMySql'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ConnectToTargetAzureDbForMySqlTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ConnectToTarget.AzureDbForMySql')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ConnectToTarget.AzureDbForMySql'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ConnectToTargetAzureDbForMySqlTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ConnectToTargetAzureDbForMySqlTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgsDict(TypedDict):
        """
        Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
        """
        source_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgsDict']
        """
        Connection information for source PostgreSQL server
        """
        target_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgsDict']
        """
        Connection information for target Azure Database for PostgreSQL server
        """
elif False:
    ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs:
    def __init__(__self__, *,
                 source_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        """
        Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
        :param pulumi.Input['PostgreSqlConnectionInfoArgs'] source_connection_info: Connection information for source PostgreSQL server
        :param pulumi.Input['PostgreSqlConnectionInfoArgs'] target_connection_info: Connection information for target Azure Database for PostgreSQL server
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['PostgreSqlConnectionInfoArgs']:
        """
        Connection information for source PostgreSQL server
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['PostgreSqlConnectionInfoArgs']:
        """
        Connection information for target Azure Database for PostgreSQL server
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)


if not MYPY:
    class ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ConnectToTarget.AzureDbForPostgreSql.Sync'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs']] = None):
        """
        Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ConnectToTarget.AzureDbForPostgreSql.Sync'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ConnectToTarget.AzureDbForPostgreSql.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ConnectToTarget.AzureDbForPostgreSql.Sync'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgsDict(TypedDict):
        """
        Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
        """
        target_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgsDict']
        """
        Connection information for target Azure Database for PostgreSQL server
        """
elif False:
    ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs:
    def __init__(__self__, *,
                 target_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        """
        Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
        :param pulumi.Input['PostgreSqlConnectionInfoArgs'] target_connection_info: Connection information for target Azure Database for PostgreSQL server
        """
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['PostgreSqlConnectionInfoArgs']:
        """
        Connection information for target Azure Database for PostgreSQL server
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)


if not MYPY:
    class ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs']] = None):
        """
        Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ConnectToTargetSqlDbTaskInputArgsDict(TypedDict):
        """
        Input for the task that validates connection to SQL DB and target server requirements
        """
        target_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Connection information for target SQL DB
        """
elif False:
    ConnectToTargetSqlDbTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetSqlDbTaskInputArgs:
    def __init__(__self__, *,
                 target_connection_info: pulumi.Input['SqlConnectionInfoArgs']):
        """
        Input for the task that validates connection to SQL DB and target server requirements
        :param pulumi.Input['SqlConnectionInfoArgs'] target_connection_info: Connection information for target SQL DB
        """
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Connection information for target SQL DB
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)


if not MYPY:
    class ConnectToTargetSqlDbTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates connection to SQL DB and target server requirements
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ConnectToTarget.SqlDb'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ConnectToTargetSqlDbTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ConnectToTargetSqlDbTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetSqlDbTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ConnectToTargetSqlDbTaskInputArgs']] = None):
        """
        Properties for the task that validates connection to SQL DB and target server requirements
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ConnectToTarget.SqlDb'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ConnectToTargetSqlDbTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ConnectToTarget.SqlDb')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ConnectToTarget.SqlDb'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ConnectToTargetSqlDbTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ConnectToTargetSqlDbTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ConnectToTargetSqlMISyncTaskInputArgsDict(TypedDict):
        """
        Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
        """
        azure_app: pulumi.Input['AzureActiveDirectoryAppArgsDict']
        """
        Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        """
        target_connection_info: pulumi.Input['MiSqlConnectionInfoArgsDict']
        """
        Connection information for Azure SQL Database Managed Instance
        """
elif False:
    ConnectToTargetSqlMISyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetSqlMISyncTaskInputArgs:
    def __init__(__self__, *,
                 azure_app: pulumi.Input['AzureActiveDirectoryAppArgs'],
                 target_connection_info: pulumi.Input['MiSqlConnectionInfoArgs']):
        """
        Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
        :param pulumi.Input['AzureActiveDirectoryAppArgs'] azure_app: Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        :param pulumi.Input['MiSqlConnectionInfoArgs'] target_connection_info: Connection information for Azure SQL Database Managed Instance
        """
        pulumi.set(__self__, "azure_app", azure_app)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="azureApp")
    def azure_app(self) -> pulumi.Input['AzureActiveDirectoryAppArgs']:
        """
        Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        """
        return pulumi.get(self, "azure_app")

    @azure_app.setter
    def azure_app(self, value: pulumi.Input['AzureActiveDirectoryAppArgs']):
        pulumi.set(self, "azure_app", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['MiSqlConnectionInfoArgs']:
        """
        Connection information for Azure SQL Database Managed Instance
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['MiSqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)


if not MYPY:
    class ConnectToTargetSqlMISyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates connection to Azure SQL Database Managed Instance
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ConnectToTarget.AzureSqlDbMI.Sync.LRS'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ConnectToTargetSqlMISyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ConnectToTargetSqlMISyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetSqlMISyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ConnectToTargetSqlMISyncTaskInputArgs']] = None):
        """
        Properties for the task that validates connection to Azure SQL Database Managed Instance
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ConnectToTarget.AzureSqlDbMI.Sync.LRS'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ConnectToTargetSqlMISyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ConnectToTarget.AzureSqlDbMI.Sync.LRS')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ConnectToTarget.AzureSqlDbMI.Sync.LRS'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ConnectToTargetSqlMISyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ConnectToTargetSqlMISyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ConnectToTargetSqlMITaskInputArgsDict(TypedDict):
        """
        Input for the task that validates connection to Azure SQL Database Managed Instance.
        """
        target_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Connection information for target SQL Server
        """
        collect_agent_jobs: NotRequired[pulumi.Input[bool]]
        """
        Flag for whether to collect agent jobs from target SQL MI server.
        """
        collect_logins: NotRequired[pulumi.Input[bool]]
        """
        Flag for whether to collect logins from target SQL MI server.
        """
        validate_ssis_catalog_only: NotRequired[pulumi.Input[bool]]
        """
        Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
        """
elif False:
    ConnectToTargetSqlMITaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetSqlMITaskInputArgs:
    def __init__(__self__, *,
                 target_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 collect_agent_jobs: Optional[pulumi.Input[bool]] = None,
                 collect_logins: Optional[pulumi.Input[bool]] = None,
                 validate_ssis_catalog_only: Optional[pulumi.Input[bool]] = None):
        """
        Input for the task that validates connection to Azure SQL Database Managed Instance.
        :param pulumi.Input['SqlConnectionInfoArgs'] target_connection_info: Connection information for target SQL Server
        :param pulumi.Input[bool] collect_agent_jobs: Flag for whether to collect agent jobs from target SQL MI server.
        :param pulumi.Input[bool] collect_logins: Flag for whether to collect logins from target SQL MI server.
        :param pulumi.Input[bool] validate_ssis_catalog_only: Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
        """
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if collect_agent_jobs is None:
            collect_agent_jobs = True
        if collect_agent_jobs is not None:
            pulumi.set(__self__, "collect_agent_jobs", collect_agent_jobs)
        if collect_logins is None:
            collect_logins = True
        if collect_logins is not None:
            pulumi.set(__self__, "collect_logins", collect_logins)
        if validate_ssis_catalog_only is None:
            validate_ssis_catalog_only = False
        if validate_ssis_catalog_only is not None:
            pulumi.set(__self__, "validate_ssis_catalog_only", validate_ssis_catalog_only)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Connection information for target SQL Server
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)

    @property
    @pulumi.getter(name="collectAgentJobs")
    def collect_agent_jobs(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag for whether to collect agent jobs from target SQL MI server.
        """
        return pulumi.get(self, "collect_agent_jobs")

    @collect_agent_jobs.setter
    def collect_agent_jobs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "collect_agent_jobs", value)

    @property
    @pulumi.getter(name="collectLogins")
    def collect_logins(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag for whether to collect logins from target SQL MI server.
        """
        return pulumi.get(self, "collect_logins")

    @collect_logins.setter
    def collect_logins(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "collect_logins", value)

    @property
    @pulumi.getter(name="validateSsisCatalogOnly")
    def validate_ssis_catalog_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
        """
        return pulumi.get(self, "validate_ssis_catalog_only")

    @validate_ssis_catalog_only.setter
    def validate_ssis_catalog_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_ssis_catalog_only", value)


if not MYPY:
    class ConnectToTargetSqlMITaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates connection to Azure SQL Database Managed Instance
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ConnectToTarget.AzureSqlDbMI'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ConnectToTargetSqlMITaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ConnectToTargetSqlMITaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetSqlMITaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ConnectToTargetSqlMITaskInputArgs']] = None):
        """
        Properties for the task that validates connection to Azure SQL Database Managed Instance
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ConnectToTarget.AzureSqlDbMI'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ConnectToTargetSqlMITaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ConnectToTarget.AzureSqlDbMI')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ConnectToTarget.AzureSqlDbMI'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ConnectToTargetSqlMITaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ConnectToTargetSqlMITaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ConnectToTargetSqlSqlDbSyncTaskInputArgsDict(TypedDict):
        """
        Input for the task that validates connection to Azure SQL DB and target server requirements
        """
        source_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Connection information for source SQL Server
        """
        target_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Connection information for target SQL DB
        """
elif False:
    ConnectToTargetSqlSqlDbSyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetSqlSqlDbSyncTaskInputArgs:
    def __init__(__self__, *,
                 source_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['SqlConnectionInfoArgs']):
        """
        Input for the task that validates connection to Azure SQL DB and target server requirements
        :param pulumi.Input['SqlConnectionInfoArgs'] source_connection_info: Connection information for source SQL Server
        :param pulumi.Input['SqlConnectionInfoArgs'] target_connection_info: Connection information for target SQL DB
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Connection information for source SQL Server
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Connection information for target SQL DB
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)


if not MYPY:
    class ConnectToTargetSqlSqlDbSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates connection to SQL DB and target server requirements for online migration
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ConnectToTarget.SqlDb.Sync'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ConnectToTargetSqlSqlDbSyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ConnectToTargetSqlSqlDbSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ConnectToTargetSqlSqlDbSyncTaskInputArgs']] = None):
        """
        Properties for the task that validates connection to SQL DB and target server requirements for online migration
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ConnectToTarget.SqlDb.Sync'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ConnectToTargetSqlSqlDbSyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ConnectToTarget.SqlDb.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ConnectToTarget.SqlDb.Sync'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ConnectToTargetSqlSqlDbSyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ConnectToTargetSqlSqlDbSyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class DatabaseInfoArgsDict(TypedDict):
        """
        Project Database Details
        """
        source_database_name: pulumi.Input[str]
        """
        Name of the database
        """
elif False:
    DatabaseInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseInfoArgs:
    def __init__(__self__, *,
                 source_database_name: pulumi.Input[str]):
        """
        Project Database Details
        :param pulumi.Input[str] source_database_name: Name of the database
        """
        pulumi.set(__self__, "source_database_name", source_database_name)

    @property
    @pulumi.getter(name="sourceDatabaseName")
    def source_database_name(self) -> pulumi.Input[str]:
        """
        Name of the database
        """
        return pulumi.get(self, "source_database_name")

    @source_database_name.setter
    def source_database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_database_name", value)


if not MYPY:
    class DatabaseMigrationPropertiesSqlDbArgsDict(TypedDict):
        """
        Database Migration Resource properties for SQL database.
        """
        kind: pulumi.Input[str]
        """

        Expected value is 'SqlDb'.
        """
        migration_operation_id: NotRequired[pulumi.Input[str]]
        """
        ID tracking current migration operation.
        """
        migration_service: NotRequired[pulumi.Input[str]]
        """
        Resource Id of the Migration Service.
        """
        provisioning_error: NotRequired[pulumi.Input[str]]
        """
        Error message for migration provisioning failure, if any.
        """
        scope: NotRequired[pulumi.Input[str]]
        """
        Resource Id of the target resource (SQL VM or SQL Managed Instance).
        """
        source_database_name: NotRequired[pulumi.Input[str]]
        """
        Name of the source database.
        """
        source_sql_connection: NotRequired[pulumi.Input['SqlConnectionInformationArgsDict']]
        """
        Source SQL Server connection details.
        """
        table_list: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of tables to copy.
        """
        target_database_collation: NotRequired[pulumi.Input[str]]
        """
        Database collation to be used for the target database.
        """
        target_sql_connection: NotRequired[pulumi.Input['SqlConnectionInformationArgsDict']]
        """
        Target SQL DB connection details.
        """
elif False:
    DatabaseMigrationPropertiesSqlDbArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseMigrationPropertiesSqlDbArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 migration_operation_id: Optional[pulumi.Input[str]] = None,
                 migration_service: Optional[pulumi.Input[str]] = None,
                 provisioning_error: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 source_database_name: Optional[pulumi.Input[str]] = None,
                 source_sql_connection: Optional[pulumi.Input['SqlConnectionInformationArgs']] = None,
                 table_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 target_database_collation: Optional[pulumi.Input[str]] = None,
                 target_sql_connection: Optional[pulumi.Input['SqlConnectionInformationArgs']] = None):
        """
        Database Migration Resource properties for SQL database.
        :param pulumi.Input[str] kind: 
               Expected value is 'SqlDb'.
        :param pulumi.Input[str] migration_operation_id: ID tracking current migration operation.
        :param pulumi.Input[str] migration_service: Resource Id of the Migration Service.
        :param pulumi.Input[str] provisioning_error: Error message for migration provisioning failure, if any.
        :param pulumi.Input[str] scope: Resource Id of the target resource (SQL VM or SQL Managed Instance).
        :param pulumi.Input[str] source_database_name: Name of the source database.
        :param pulumi.Input['SqlConnectionInformationArgs'] source_sql_connection: Source SQL Server connection details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] table_list: List of tables to copy.
        :param pulumi.Input[str] target_database_collation: Database collation to be used for the target database.
        :param pulumi.Input['SqlConnectionInformationArgs'] target_sql_connection: Target SQL DB connection details.
        """
        pulumi.set(__self__, "kind", 'SqlDb')
        if migration_operation_id is not None:
            pulumi.set(__self__, "migration_operation_id", migration_operation_id)
        if migration_service is not None:
            pulumi.set(__self__, "migration_service", migration_service)
        if provisioning_error is not None:
            pulumi.set(__self__, "provisioning_error", provisioning_error)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if source_database_name is not None:
            pulumi.set(__self__, "source_database_name", source_database_name)
        if source_sql_connection is not None:
            pulumi.set(__self__, "source_sql_connection", source_sql_connection)
        if table_list is not None:
            pulumi.set(__self__, "table_list", table_list)
        if target_database_collation is not None:
            pulumi.set(__self__, "target_database_collation", target_database_collation)
        if target_sql_connection is not None:
            pulumi.set(__self__, "target_sql_connection", target_sql_connection)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """

        Expected value is 'SqlDb'.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="migrationOperationId")
    def migration_operation_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID tracking current migration operation.
        """
        return pulumi.get(self, "migration_operation_id")

    @migration_operation_id.setter
    def migration_operation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_operation_id", value)

    @property
    @pulumi.getter(name="migrationService")
    def migration_service(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Id of the Migration Service.
        """
        return pulumi.get(self, "migration_service")

    @migration_service.setter
    def migration_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_service", value)

    @property
    @pulumi.getter(name="provisioningError")
    def provisioning_error(self) -> Optional[pulumi.Input[str]]:
        """
        Error message for migration provisioning failure, if any.
        """
        return pulumi.get(self, "provisioning_error")

    @provisioning_error.setter
    def provisioning_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioning_error", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Id of the target resource (SQL VM or SQL Managed Instance).
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sourceDatabaseName")
    def source_database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the source database.
        """
        return pulumi.get(self, "source_database_name")

    @source_database_name.setter
    def source_database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_database_name", value)

    @property
    @pulumi.getter(name="sourceSqlConnection")
    def source_sql_connection(self) -> Optional[pulumi.Input['SqlConnectionInformationArgs']]:
        """
        Source SQL Server connection details.
        """
        return pulumi.get(self, "source_sql_connection")

    @source_sql_connection.setter
    def source_sql_connection(self, value: Optional[pulumi.Input['SqlConnectionInformationArgs']]):
        pulumi.set(self, "source_sql_connection", value)

    @property
    @pulumi.getter(name="tableList")
    def table_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of tables to copy.
        """
        return pulumi.get(self, "table_list")

    @table_list.setter
    def table_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "table_list", value)

    @property
    @pulumi.getter(name="targetDatabaseCollation")
    def target_database_collation(self) -> Optional[pulumi.Input[str]]:
        """
        Database collation to be used for the target database.
        """
        return pulumi.get(self, "target_database_collation")

    @target_database_collation.setter
    def target_database_collation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_database_collation", value)

    @property
    @pulumi.getter(name="targetSqlConnection")
    def target_sql_connection(self) -> Optional[pulumi.Input['SqlConnectionInformationArgs']]:
        """
        Target SQL DB connection details.
        """
        return pulumi.get(self, "target_sql_connection")

    @target_sql_connection.setter
    def target_sql_connection(self, value: Optional[pulumi.Input['SqlConnectionInformationArgs']]):
        pulumi.set(self, "target_sql_connection", value)


if not MYPY:
    class FileShareArgsDict(TypedDict):
        """
        File share information with Path, Username, and Password.
        """
        path: pulumi.Input[str]
        """
        The folder path for this share.
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password credential used to connect to the share location.
        """
        user_name: NotRequired[pulumi.Input[str]]
        """
        User name credential to connect to the share location
        """
elif False:
    FileShareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FileShareArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        File share information with Path, Username, and Password.
        :param pulumi.Input[str] path: The folder path for this share.
        :param pulumi.Input[str] password: Password credential used to connect to the share location.
        :param pulumi.Input[str] user_name: User name credential to connect to the share location
        """
        pulumi.set(__self__, "path", path)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The folder path for this share.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password credential used to connect to the share location.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name credential to connect to the share location
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class GetTdeCertificatesSqlTaskInputArgsDict(TypedDict):
        """
        Input for the task that gets TDE certificates in Base64 encoded format.
        """
        backup_file_share: pulumi.Input['FileShareArgsDict']
        """
        Backup file share information for file share to be used for temporarily storing files.
        """
        connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Connection information for SQL Server
        """
        selected_certificates: pulumi.Input[Sequence[pulumi.Input['SelectedCertificateInputArgsDict']]]
        """
        List containing certificate names and corresponding password to use for encrypting the exported certificate.
        """
elif False:
    GetTdeCertificatesSqlTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetTdeCertificatesSqlTaskInputArgs:
    def __init__(__self__, *,
                 backup_file_share: pulumi.Input['FileShareArgs'],
                 connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 selected_certificates: pulumi.Input[Sequence[pulumi.Input['SelectedCertificateInputArgs']]]):
        """
        Input for the task that gets TDE certificates in Base64 encoded format.
        :param pulumi.Input['FileShareArgs'] backup_file_share: Backup file share information for file share to be used for temporarily storing files.
        :param pulumi.Input['SqlConnectionInfoArgs'] connection_info: Connection information for SQL Server
        :param pulumi.Input[Sequence[pulumi.Input['SelectedCertificateInputArgs']]] selected_certificates: List containing certificate names and corresponding password to use for encrypting the exported certificate.
        """
        pulumi.set(__self__, "backup_file_share", backup_file_share)
        pulumi.set(__self__, "connection_info", connection_info)
        pulumi.set(__self__, "selected_certificates", selected_certificates)

    @property
    @pulumi.getter(name="backupFileShare")
    def backup_file_share(self) -> pulumi.Input['FileShareArgs']:
        """
        Backup file share information for file share to be used for temporarily storing files.
        """
        return pulumi.get(self, "backup_file_share")

    @backup_file_share.setter
    def backup_file_share(self, value: pulumi.Input['FileShareArgs']):
        pulumi.set(self, "backup_file_share", value)

    @property
    @pulumi.getter(name="connectionInfo")
    def connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Connection information for SQL Server
        """
        return pulumi.get(self, "connection_info")

    @connection_info.setter
    def connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "connection_info", value)

    @property
    @pulumi.getter(name="selectedCertificates")
    def selected_certificates(self) -> pulumi.Input[Sequence[pulumi.Input['SelectedCertificateInputArgs']]]:
        """
        List containing certificate names and corresponding password to use for encrypting the exported certificate.
        """
        return pulumi.get(self, "selected_certificates")

    @selected_certificates.setter
    def selected_certificates(self, value: pulumi.Input[Sequence[pulumi.Input['SelectedCertificateInputArgs']]]):
        pulumi.set(self, "selected_certificates", value)


if not MYPY:
    class GetTdeCertificatesSqlTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that gets TDE certificates in Base64 encoded format.
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'GetTDECertificates.Sql'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['GetTdeCertificatesSqlTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    GetTdeCertificatesSqlTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetTdeCertificatesSqlTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['GetTdeCertificatesSqlTaskInputArgs']] = None):
        """
        Properties for the task that gets TDE certificates in Base64 encoded format.
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'GetTDECertificates.Sql'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['GetTdeCertificatesSqlTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'GetTDECertificates.Sql')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'GetTDECertificates.Sql'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['GetTdeCertificatesSqlTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['GetTdeCertificatesSqlTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class GetUserTablesMySqlTaskInputArgsDict(TypedDict):
        """
        Input for the task that collects user tables for the given list of databases
        """
        connection_info: pulumi.Input['MySqlConnectionInfoArgsDict']
        """
        Connection information for SQL Server
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of database names to collect tables for
        """
elif False:
    GetUserTablesMySqlTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserTablesMySqlTaskInputArgs:
    def __init__(__self__, *,
                 connection_info: pulumi.Input['MySqlConnectionInfoArgs'],
                 selected_databases: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Input for the task that collects user tables for the given list of databases
        :param pulumi.Input['MySqlConnectionInfoArgs'] connection_info: Connection information for SQL Server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] selected_databases: List of database names to collect tables for
        """
        pulumi.set(__self__, "connection_info", connection_info)
        pulumi.set(__self__, "selected_databases", selected_databases)

    @property
    @pulumi.getter(name="connectionInfo")
    def connection_info(self) -> pulumi.Input['MySqlConnectionInfoArgs']:
        """
        Connection information for SQL Server
        """
        return pulumi.get(self, "connection_info")

    @connection_info.setter
    def connection_info(self, value: pulumi.Input['MySqlConnectionInfoArgs']):
        pulumi.set(self, "connection_info", value)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of database names to collect tables for
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "selected_databases", value)


if not MYPY:
    class GetUserTablesMySqlTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that collects user tables for the given list of databases
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'GetUserTablesMySql'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['GetUserTablesMySqlTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    GetUserTablesMySqlTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserTablesMySqlTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['GetUserTablesMySqlTaskInputArgs']] = None):
        """
        Properties for the task that collects user tables for the given list of databases
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'GetUserTablesMySql'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['GetUserTablesMySqlTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'GetUserTablesMySql')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'GetUserTablesMySql'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['GetUserTablesMySqlTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['GetUserTablesMySqlTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class GetUserTablesOracleTaskInputArgsDict(TypedDict):
        """
        Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
        """
        connection_info: pulumi.Input['OracleConnectionInfoArgsDict']
        """
        Information for connecting to Oracle source
        """
        selected_schemas: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of Oracle schemas for which to collect tables
        """
elif False:
    GetUserTablesOracleTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserTablesOracleTaskInputArgs:
    def __init__(__self__, *,
                 connection_info: pulumi.Input['OracleConnectionInfoArgs'],
                 selected_schemas: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
        :param pulumi.Input['OracleConnectionInfoArgs'] connection_info: Information for connecting to Oracle source
        :param pulumi.Input[Sequence[pulumi.Input[str]]] selected_schemas: List of Oracle schemas for which to collect tables
        """
        pulumi.set(__self__, "connection_info", connection_info)
        pulumi.set(__self__, "selected_schemas", selected_schemas)

    @property
    @pulumi.getter(name="connectionInfo")
    def connection_info(self) -> pulumi.Input['OracleConnectionInfoArgs']:
        """
        Information for connecting to Oracle source
        """
        return pulumi.get(self, "connection_info")

    @connection_info.setter
    def connection_info(self, value: pulumi.Input['OracleConnectionInfoArgs']):
        pulumi.set(self, "connection_info", value)

    @property
    @pulumi.getter(name="selectedSchemas")
    def selected_schemas(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of Oracle schemas for which to collect tables
        """
        return pulumi.get(self, "selected_schemas")

    @selected_schemas.setter
    def selected_schemas(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "selected_schemas", value)


if not MYPY:
    class GetUserTablesOracleTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that collects user tables for the given list of Oracle schemas
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'GetUserTablesOracle'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['GetUserTablesOracleTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    GetUserTablesOracleTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserTablesOracleTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['GetUserTablesOracleTaskInputArgs']] = None):
        """
        Properties for the task that collects user tables for the given list of Oracle schemas
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'GetUserTablesOracle'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['GetUserTablesOracleTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'GetUserTablesOracle')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'GetUserTablesOracle'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['GetUserTablesOracleTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['GetUserTablesOracleTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class GetUserTablesPostgreSqlTaskInputArgsDict(TypedDict):
        """
        Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
        """
        connection_info: pulumi.Input['PostgreSqlConnectionInfoArgsDict']
        """
        Information for connecting to PostgreSQL source
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of PostgreSQL databases for which to collect tables
        """
elif False:
    GetUserTablesPostgreSqlTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserTablesPostgreSqlTaskInputArgs:
    def __init__(__self__, *,
                 connection_info: pulumi.Input['PostgreSqlConnectionInfoArgs'],
                 selected_databases: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
        :param pulumi.Input['PostgreSqlConnectionInfoArgs'] connection_info: Information for connecting to PostgreSQL source
        :param pulumi.Input[Sequence[pulumi.Input[str]]] selected_databases: List of PostgreSQL databases for which to collect tables
        """
        pulumi.set(__self__, "connection_info", connection_info)
        pulumi.set(__self__, "selected_databases", selected_databases)

    @property
    @pulumi.getter(name="connectionInfo")
    def connection_info(self) -> pulumi.Input['PostgreSqlConnectionInfoArgs']:
        """
        Information for connecting to PostgreSQL source
        """
        return pulumi.get(self, "connection_info")

    @connection_info.setter
    def connection_info(self, value: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        pulumi.set(self, "connection_info", value)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of PostgreSQL databases for which to collect tables
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "selected_databases", value)


if not MYPY:
    class GetUserTablesPostgreSqlTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that collects user tables for the given list of databases
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'GetUserTablesPostgreSql'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['GetUserTablesPostgreSqlTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    GetUserTablesPostgreSqlTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserTablesPostgreSqlTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['GetUserTablesPostgreSqlTaskInputArgs']] = None):
        """
        Properties for the task that collects user tables for the given list of databases
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'GetUserTablesPostgreSql'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['GetUserTablesPostgreSqlTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'GetUserTablesPostgreSql')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'GetUserTablesPostgreSql'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['GetUserTablesPostgreSqlTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['GetUserTablesPostgreSqlTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class GetUserTablesSqlSyncTaskInputArgsDict(TypedDict):
        """
        Input for the task that collects user tables for the given list of databases
        """
        selected_source_databases: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of source database names to collect tables for
        """
        selected_target_databases: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of target database names to collect tables for
        """
        source_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Connection information for SQL Server
        """
        target_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Connection information for SQL DB
        """
elif False:
    GetUserTablesSqlSyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserTablesSqlSyncTaskInputArgs:
    def __init__(__self__, *,
                 selected_source_databases: pulumi.Input[Sequence[pulumi.Input[str]]],
                 selected_target_databases: pulumi.Input[Sequence[pulumi.Input[str]]],
                 source_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['SqlConnectionInfoArgs']):
        """
        Input for the task that collects user tables for the given list of databases
        :param pulumi.Input[Sequence[pulumi.Input[str]]] selected_source_databases: List of source database names to collect tables for
        :param pulumi.Input[Sequence[pulumi.Input[str]]] selected_target_databases: List of target database names to collect tables for
        :param pulumi.Input['SqlConnectionInfoArgs'] source_connection_info: Connection information for SQL Server
        :param pulumi.Input['SqlConnectionInfoArgs'] target_connection_info: Connection information for SQL DB
        """
        pulumi.set(__self__, "selected_source_databases", selected_source_databases)
        pulumi.set(__self__, "selected_target_databases", selected_target_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="selectedSourceDatabases")
    def selected_source_databases(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source database names to collect tables for
        """
        return pulumi.get(self, "selected_source_databases")

    @selected_source_databases.setter
    def selected_source_databases(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "selected_source_databases", value)

    @property
    @pulumi.getter(name="selectedTargetDatabases")
    def selected_target_databases(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of target database names to collect tables for
        """
        return pulumi.get(self, "selected_target_databases")

    @selected_target_databases.setter
    def selected_target_databases(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "selected_target_databases", value)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Connection information for SQL Server
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Connection information for SQL DB
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)


if not MYPY:
    class GetUserTablesSqlSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that collects user tables for the given list of databases
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'GetUserTables.AzureSqlDb.Sync'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['GetUserTablesSqlSyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    GetUserTablesSqlSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserTablesSqlSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['GetUserTablesSqlSyncTaskInputArgs']] = None):
        """
        Properties for the task that collects user tables for the given list of databases
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'GetUserTables.AzureSqlDb.Sync'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['GetUserTablesSqlSyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'GetUserTables.AzureSqlDb.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'GetUserTables.AzureSqlDb.Sync'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['GetUserTablesSqlSyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['GetUserTablesSqlSyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class GetUserTablesSqlTaskInputArgsDict(TypedDict):
        """
        Input for the task that collects user tables for the given list of databases
        """
        connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Connection information for SQL Server
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of database names to collect tables for
        """
elif False:
    GetUserTablesSqlTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserTablesSqlTaskInputArgs:
    def __init__(__self__, *,
                 connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 selected_databases: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Input for the task that collects user tables for the given list of databases
        :param pulumi.Input['SqlConnectionInfoArgs'] connection_info: Connection information for SQL Server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] selected_databases: List of database names to collect tables for
        """
        pulumi.set(__self__, "connection_info", connection_info)
        pulumi.set(__self__, "selected_databases", selected_databases)

    @property
    @pulumi.getter(name="connectionInfo")
    def connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Connection information for SQL Server
        """
        return pulumi.get(self, "connection_info")

    @connection_info.setter
    def connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "connection_info", value)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of database names to collect tables for
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "selected_databases", value)


if not MYPY:
    class GetUserTablesSqlTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that collects user tables for the given list of databases
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'GetUserTables.Sql'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['GetUserTablesSqlTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    GetUserTablesSqlTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserTablesSqlTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['GetUserTablesSqlTaskInputArgs']] = None):
        """
        Properties for the task that collects user tables for the given list of databases
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'GetUserTables.Sql'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['GetUserTablesSqlTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'GetUserTables.Sql')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'GetUserTables.Sql'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['GetUserTablesSqlTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['GetUserTablesSqlTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class MiSqlConnectionInfoArgsDict(TypedDict):
        """
        Properties required to create a connection to Azure SQL database Managed instance
        """
        managed_instance_resource_id: pulumi.Input[str]
        """
        Resource id for Azure SQL database Managed instance
        """
        type: pulumi.Input[str]
        """
        Type of connection info
        Expected value is 'MiSqlConnectionInfo'.
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password credential.
        """
        user_name: NotRequired[pulumi.Input[str]]
        """
        User name
        """
elif False:
    MiSqlConnectionInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MiSqlConnectionInfoArgs:
    def __init__(__self__, *,
                 managed_instance_resource_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Properties required to create a connection to Azure SQL database Managed instance
        :param pulumi.Input[str] managed_instance_resource_id: Resource id for Azure SQL database Managed instance
        :param pulumi.Input[str] type: Type of connection info
               Expected value is 'MiSqlConnectionInfo'.
        :param pulumi.Input[str] password: Password credential.
        :param pulumi.Input[str] user_name: User name
        """
        pulumi.set(__self__, "managed_instance_resource_id", managed_instance_resource_id)
        pulumi.set(__self__, "type", 'MiSqlConnectionInfo')
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="managedInstanceResourceId")
    def managed_instance_resource_id(self) -> pulumi.Input[str]:
        """
        Resource id for Azure SQL database Managed instance
        """
        return pulumi.get(self, "managed_instance_resource_id")

    @managed_instance_resource_id.setter
    def managed_instance_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "managed_instance_resource_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of connection info
        Expected value is 'MiSqlConnectionInfo'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class MigrateMongoDbTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that migrates data between MongoDB data sources
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Migrate.MongoDb'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MongoDbMigrationSettingsArgsDict']]
        """
        Describes how a MongoDB data migration should be performed
        """
elif False:
    MigrateMongoDbTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateMongoDbTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MongoDbMigrationSettingsArgs']] = None):
        """
        Properties for the task that migrates data between MongoDB data sources
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Migrate.MongoDb'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MongoDbMigrationSettingsArgs'] input: Describes how a MongoDB data migration should be performed
        """
        pulumi.set(__self__, "task_type", 'Migrate.MongoDb')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Migrate.MongoDb'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MongoDbMigrationSettingsArgs']]:
        """
        Describes how a MongoDB data migration should be performed
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MongoDbMigrationSettingsArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgsDict(TypedDict):
        """
        Database specific information for offline MySQL to Azure Database for MySQL migration task inputs
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the database
        """
        table_map: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Mapping of source to target tables
        """
        target_database_name: NotRequired[pulumi.Input[str]]
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
elif False:
    MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 table_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_database_name: Optional[pulumi.Input[str]] = None):
        """
        Database specific information for offline MySQL to Azure Database for MySQL migration task inputs
        :param pulumi.Input[str] name: Name of the database
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] table_map: Mapping of source to target tables
        :param pulumi.Input[str] target_database_name: Name of target database. Note: Target database will be truncated before starting migration.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if table_map is not None:
            pulumi.set(__self__, "table_map", table_map)
        if target_database_name is not None:
            pulumi.set(__self__, "target_database_name", target_database_name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tableMap")
    def table_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Mapping of source to target tables
        """
        return pulumi.get(self, "table_map")

    @table_map.setter
    def table_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "table_map", value)

    @property
    @pulumi.getter(name="targetDatabaseName")
    def target_database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
        return pulumi.get(self, "target_database_name")

    @target_database_name.setter
    def target_database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_database_name", value)


if not MYPY:
    class MigrateMySqlAzureDbForMySqlOfflineTaskInputArgsDict(TypedDict):
        """
        Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgsDict']]]
        """
        Databases to migrate
        """
        source_connection_info: pulumi.Input['MySqlConnectionInfoArgsDict']
        """
        Connection information for source MySQL
        """
        target_connection_info: pulumi.Input['MySqlConnectionInfoArgsDict']
        """
        Connection information for target Azure Database for MySQL
        """
        make_source_server_read_only: NotRequired[pulumi.Input[bool]]
        """
        Setting to set the source server read only
        """
        optional_agent_settings: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Optional parameters for fine tuning the data transfer rate during migration
        """
        started_on: NotRequired[pulumi.Input[str]]
        """
        Parameter to specify when the migration started
        """
elif False:
    MigrateMySqlAzureDbForMySqlOfflineTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs:
    def __init__(__self__, *,
                 selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs']]],
                 source_connection_info: pulumi.Input['MySqlConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['MySqlConnectionInfoArgs'],
                 make_source_server_read_only: Optional[pulumi.Input[bool]] = None,
                 optional_agent_settings: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 started_on: Optional[pulumi.Input[str]] = None):
        """
        Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
        :param pulumi.Input[Sequence[pulumi.Input['MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs']]] selected_databases: Databases to migrate
        :param pulumi.Input['MySqlConnectionInfoArgs'] source_connection_info: Connection information for source MySQL
        :param pulumi.Input['MySqlConnectionInfoArgs'] target_connection_info: Connection information for target Azure Database for MySQL
        :param pulumi.Input[bool] make_source_server_read_only: Setting to set the source server read only
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] optional_agent_settings: Optional parameters for fine tuning the data transfer rate during migration
        :param pulumi.Input[str] started_on: Parameter to specify when the migration started
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if make_source_server_read_only is None:
            make_source_server_read_only = False
        if make_source_server_read_only is not None:
            pulumi.set(__self__, "make_source_server_read_only", make_source_server_read_only)
        if optional_agent_settings is not None:
            pulumi.set(__self__, "optional_agent_settings", optional_agent_settings)
        if started_on is not None:
            pulumi.set(__self__, "started_on", started_on)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input['MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs']]]:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input['MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs']]]):
        pulumi.set(self, "selected_databases", value)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['MySqlConnectionInfoArgs']:
        """
        Connection information for source MySQL
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['MySqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['MySqlConnectionInfoArgs']:
        """
        Connection information for target Azure Database for MySQL
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['MySqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)

    @property
    @pulumi.getter(name="makeSourceServerReadOnly")
    def make_source_server_read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting to set the source server read only
        """
        return pulumi.get(self, "make_source_server_read_only")

    @make_source_server_read_only.setter
    def make_source_server_read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "make_source_server_read_only", value)

    @property
    @pulumi.getter(name="optionalAgentSettings")
    def optional_agent_settings(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional parameters for fine tuning the data transfer rate during migration
        """
        return pulumi.get(self, "optional_agent_settings")

    @optional_agent_settings.setter
    def optional_agent_settings(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "optional_agent_settings", value)

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter to specify when the migration started
        """
        return pulumi.get(self, "started_on")

    @started_on.setter
    def started_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_on", value)


if not MYPY:
    class MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Migrate.MySql.AzureDbForMySql'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MigrateMySqlAzureDbForMySqlOfflineTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs']] = None):
        """
        Properties for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Migrate.MySql.AzureDbForMySql'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'Migrate.MySql.AzureDbForMySql')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Migrate.MySql.AzureDbForMySql'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgsDict(TypedDict):
        """
        Database specific information for MySQL to Azure Database for MySQL migration task inputs
        """
        migration_setting: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Migration settings which tune the migration behavior
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the database
        """
        source_setting: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Source settings to tune source endpoint migration behavior
        """
        table_map: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Mapping of source to target tables
        """
        target_database_name: NotRequired[pulumi.Input[str]]
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
        target_setting: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Target settings to tune target endpoint migration behavior
        """
elif False:
    MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs:
    def __init__(__self__, *,
                 migration_setting: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source_setting: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 table_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_database_name: Optional[pulumi.Input[str]] = None,
                 target_setting: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Database specific information for MySQL to Azure Database for MySQL migration task inputs
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] migration_setting: Migration settings which tune the migration behavior
        :param pulumi.Input[str] name: Name of the database
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] source_setting: Source settings to tune source endpoint migration behavior
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] table_map: Mapping of source to target tables
        :param pulumi.Input[str] target_database_name: Name of target database. Note: Target database will be truncated before starting migration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_setting: Target settings to tune target endpoint migration behavior
        """
        if migration_setting is not None:
            pulumi.set(__self__, "migration_setting", migration_setting)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_setting is not None:
            pulumi.set(__self__, "source_setting", source_setting)
        if table_map is not None:
            pulumi.set(__self__, "table_map", table_map)
        if target_database_name is not None:
            pulumi.set(__self__, "target_database_name", target_database_name)
        if target_setting is not None:
            pulumi.set(__self__, "target_setting", target_setting)

    @property
    @pulumi.getter(name="migrationSetting")
    def migration_setting(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Migration settings which tune the migration behavior
        """
        return pulumi.get(self, "migration_setting")

    @migration_setting.setter
    def migration_setting(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "migration_setting", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceSetting")
    def source_setting(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Source settings to tune source endpoint migration behavior
        """
        return pulumi.get(self, "source_setting")

    @source_setting.setter
    def source_setting(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "source_setting", value)

    @property
    @pulumi.getter(name="tableMap")
    def table_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Mapping of source to target tables
        """
        return pulumi.get(self, "table_map")

    @table_map.setter
    def table_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "table_map", value)

    @property
    @pulumi.getter(name="targetDatabaseName")
    def target_database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
        return pulumi.get(self, "target_database_name")

    @target_database_name.setter
    def target_database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_database_name", value)

    @property
    @pulumi.getter(name="targetSetting")
    def target_setting(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Target settings to tune target endpoint migration behavior
        """
        return pulumi.get(self, "target_setting")

    @target_setting.setter
    def target_setting(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_setting", value)


if not MYPY:
    class MigrateMySqlAzureDbForMySqlSyncTaskInputArgsDict(TypedDict):
        """
        Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgsDict']]]
        """
        Databases to migrate
        """
        source_connection_info: pulumi.Input['MySqlConnectionInfoArgsDict']
        """
        Connection information for source MySQL
        """
        target_connection_info: pulumi.Input['MySqlConnectionInfoArgsDict']
        """
        Connection information for target Azure Database for MySQL
        """
elif False:
    MigrateMySqlAzureDbForMySqlSyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateMySqlAzureDbForMySqlSyncTaskInputArgs:
    def __init__(__self__, *,
                 selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs']]],
                 source_connection_info: pulumi.Input['MySqlConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['MySqlConnectionInfoArgs']):
        """
        Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
        :param pulumi.Input[Sequence[pulumi.Input['MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs']]] selected_databases: Databases to migrate
        :param pulumi.Input['MySqlConnectionInfoArgs'] source_connection_info: Connection information for source MySQL
        :param pulumi.Input['MySqlConnectionInfoArgs'] target_connection_info: Connection information for target Azure Database for MySQL
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input['MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs']]]:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input['MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs']]]):
        pulumi.set(self, "selected_databases", value)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['MySqlConnectionInfoArgs']:
        """
        Connection information for source MySQL
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['MySqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['MySqlConnectionInfoArgs']:
        """
        Connection information for target Azure Database for MySQL
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['MySqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)


if not MYPY:
    class MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Migrate.MySql.AzureDbForMySql.Sync'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MigrateMySqlAzureDbForMySqlSyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MigrateMySqlAzureDbForMySqlSyncTaskInputArgs']] = None):
        """
        Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Migrate.MySql.AzureDbForMySql.Sync'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MigrateMySqlAzureDbForMySqlSyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'Migrate.MySql.AzureDbForMySql.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Migrate.MySql.AzureDbForMySql.Sync'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MigrateMySqlAzureDbForMySqlSyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MigrateMySqlAzureDbForMySqlSyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Migrate.Oracle.AzureDbForPostgreSql.Sync'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs']] = None):
        """
        Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Migrate.Oracle.AzureDbForPostgreSql.Sync'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'Migrate.Oracle.AzureDbForPostgreSql.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Migrate.Oracle.AzureDbForPostgreSql.Sync'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgsDict(TypedDict):
        """
        Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
        """
        case_manipulation: NotRequired[pulumi.Input[str]]
        """
        How to handle object name casing: either Preserve or ToLower
        """
        migration_setting: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Migration settings which tune the migration behavior
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the migration pipeline
        """
        schema_name: NotRequired[pulumi.Input[str]]
        """
        Name of the source schema
        """
        source_setting: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Source settings to tune source endpoint migration behavior
        """
        table_map: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Mapping of source to target tables
        """
        target_database_name: NotRequired[pulumi.Input[str]]
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
        target_setting: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Target settings to tune target endpoint migration behavior
        """
elif False:
    MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs:
    def __init__(__self__, *,
                 case_manipulation: Optional[pulumi.Input[str]] = None,
                 migration_setting: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 source_setting: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 table_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_database_name: Optional[pulumi.Input[str]] = None,
                 target_setting: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
        :param pulumi.Input[str] case_manipulation: How to handle object name casing: either Preserve or ToLower
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] migration_setting: Migration settings which tune the migration behavior
        :param pulumi.Input[str] name: Name of the migration pipeline
        :param pulumi.Input[str] schema_name: Name of the source schema
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] source_setting: Source settings to tune source endpoint migration behavior
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] table_map: Mapping of source to target tables
        :param pulumi.Input[str] target_database_name: Name of target database. Note: Target database will be truncated before starting migration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_setting: Target settings to tune target endpoint migration behavior
        """
        if case_manipulation is not None:
            pulumi.set(__self__, "case_manipulation", case_manipulation)
        if migration_setting is not None:
            pulumi.set(__self__, "migration_setting", migration_setting)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_setting is not None:
            pulumi.set(__self__, "source_setting", source_setting)
        if table_map is not None:
            pulumi.set(__self__, "table_map", table_map)
        if target_database_name is not None:
            pulumi.set(__self__, "target_database_name", target_database_name)
        if target_setting is not None:
            pulumi.set(__self__, "target_setting", target_setting)

    @property
    @pulumi.getter(name="caseManipulation")
    def case_manipulation(self) -> Optional[pulumi.Input[str]]:
        """
        How to handle object name casing: either Preserve or ToLower
        """
        return pulumi.get(self, "case_manipulation")

    @case_manipulation.setter
    def case_manipulation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_manipulation", value)

    @property
    @pulumi.getter(name="migrationSetting")
    def migration_setting(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Migration settings which tune the migration behavior
        """
        return pulumi.get(self, "migration_setting")

    @migration_setting.setter
    def migration_setting(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "migration_setting", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the migration pipeline
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the source schema
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sourceSetting")
    def source_setting(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Source settings to tune source endpoint migration behavior
        """
        return pulumi.get(self, "source_setting")

    @source_setting.setter
    def source_setting(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "source_setting", value)

    @property
    @pulumi.getter(name="tableMap")
    def table_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Mapping of source to target tables
        """
        return pulumi.get(self, "table_map")

    @table_map.setter
    def table_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "table_map", value)

    @property
    @pulumi.getter(name="targetDatabaseName")
    def target_database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
        return pulumi.get(self, "target_database_name")

    @target_database_name.setter
    def target_database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_database_name", value)

    @property
    @pulumi.getter(name="targetSetting")
    def target_setting(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Target settings to tune target endpoint migration behavior
        """
        return pulumi.get(self, "target_setting")

    @target_setting.setter
    def target_setting(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_setting", value)


if not MYPY:
    class MigrateOracleAzureDbPostgreSqlSyncTaskInputArgsDict(TypedDict):
        """
        Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgsDict']]]
        """
        Databases to migrate
        """
        source_connection_info: pulumi.Input['OracleConnectionInfoArgsDict']
        """
        Connection information for source Oracle
        """
        target_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgsDict']
        """
        Connection information for target Azure Database for PostgreSQL
        """
elif False:
    MigrateOracleAzureDbPostgreSqlSyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs:
    def __init__(__self__, *,
                 selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs']]],
                 source_connection_info: pulumi.Input['OracleConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        """
        Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
        :param pulumi.Input[Sequence[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs']]] selected_databases: Databases to migrate
        :param pulumi.Input['OracleConnectionInfoArgs'] source_connection_info: Connection information for source Oracle
        :param pulumi.Input['PostgreSqlConnectionInfoArgs'] target_connection_info: Connection information for target Azure Database for PostgreSQL
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs']]]:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs']]]):
        pulumi.set(self, "selected_databases", value)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['OracleConnectionInfoArgs']:
        """
        Connection information for source Oracle
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['OracleConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['PostgreSqlConnectionInfoArgs']:
        """
        Connection information for target Azure Database for PostgreSQL
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)


if not MYPY:
    class MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgsDict(TypedDict):
        """
        Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
        """
        migration_setting: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Migration settings which tune the migration behavior
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the database
        """
        selected_tables: NotRequired[pulumi.Input[Sequence[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgsDict']]]]
        """
        Tables selected for migration
        """
        source_setting: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Source settings to tune source endpoint migration behavior
        """
        target_database_name: NotRequired[pulumi.Input[str]]
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
        target_setting: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Target settings to tune target endpoint migration behavior
        """
elif False:
    MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs:
    def __init__(__self__, *,
                 migration_setting: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 selected_tables: Optional[pulumi.Input[Sequence[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs']]]] = None,
                 source_setting: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_database_name: Optional[pulumi.Input[str]] = None,
                 target_setting: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] migration_setting: Migration settings which tune the migration behavior
        :param pulumi.Input[str] name: Name of the database
        :param pulumi.Input[Sequence[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs']]] selected_tables: Tables selected for migration
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] source_setting: Source settings to tune source endpoint migration behavior
        :param pulumi.Input[str] target_database_name: Name of target database. Note: Target database will be truncated before starting migration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_setting: Target settings to tune target endpoint migration behavior
        """
        if migration_setting is not None:
            pulumi.set(__self__, "migration_setting", migration_setting)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if selected_tables is not None:
            pulumi.set(__self__, "selected_tables", selected_tables)
        if source_setting is not None:
            pulumi.set(__self__, "source_setting", source_setting)
        if target_database_name is not None:
            pulumi.set(__self__, "target_database_name", target_database_name)
        if target_setting is not None:
            pulumi.set(__self__, "target_setting", target_setting)

    @property
    @pulumi.getter(name="migrationSetting")
    def migration_setting(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Migration settings which tune the migration behavior
        """
        return pulumi.get(self, "migration_setting")

    @migration_setting.setter
    def migration_setting(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "migration_setting", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="selectedTables")
    def selected_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs']]]]:
        """
        Tables selected for migration
        """
        return pulumi.get(self, "selected_tables")

    @selected_tables.setter
    def selected_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs']]]]):
        pulumi.set(self, "selected_tables", value)

    @property
    @pulumi.getter(name="sourceSetting")
    def source_setting(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Source settings to tune source endpoint migration behavior
        """
        return pulumi.get(self, "source_setting")

    @source_setting.setter
    def source_setting(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "source_setting", value)

    @property
    @pulumi.getter(name="targetDatabaseName")
    def target_database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
        return pulumi.get(self, "target_database_name")

    @target_database_name.setter
    def target_database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_database_name", value)

    @property
    @pulumi.getter(name="targetSetting")
    def target_setting(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Target settings to tune target endpoint migration behavior
        """
        return pulumi.get(self, "target_setting")

    @target_setting.setter
    def target_setting(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_setting", value)


if not MYPY:
    class MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgsDict(TypedDict):
        """
        Selected tables for the migration
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the table to migrate
        """
elif False:
    MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Selected tables for the migration
        :param pulumi.Input[str] name: Name of the table to migrate
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the table to migrate
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgsDict(TypedDict):
        """
        Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgsDict']]]
        """
        Databases to migrate
        """
        source_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgsDict']
        """
        Connection information for source PostgreSQL
        """
        target_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgsDict']
        """
        Connection information for target Azure Database for PostgreSQL
        """
elif False:
    MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs:
    def __init__(__self__, *,
                 selected_databases: pulumi.Input[Sequence[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs']]],
                 source_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        """
        Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
        :param pulumi.Input[Sequence[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs']]] selected_databases: Databases to migrate
        :param pulumi.Input['PostgreSqlConnectionInfoArgs'] source_connection_info: Connection information for source PostgreSQL
        :param pulumi.Input['PostgreSqlConnectionInfoArgs'] target_connection_info: Connection information for target Azure Database for PostgreSQL
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs']]]:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs']]]):
        pulumi.set(self, "selected_databases", value)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['PostgreSqlConnectionInfoArgs']:
        """
        Connection information for source PostgreSQL
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['PostgreSqlConnectionInfoArgs']:
        """
        Connection information for target Azure Database for PostgreSQL
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['PostgreSqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)


if not MYPY:
    class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs']] = None):
        """
        Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class MigrateSqlServerSqlDbDatabaseInputArgsDict(TypedDict):
        """
        Database specific information for SQL to Azure SQL DB migration task inputs
        """
        make_source_db_read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to set database read only before migration
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the database
        """
        table_map: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Mapping of source to target tables
        """
        target_database_name: NotRequired[pulumi.Input[str]]
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
elif False:
    MigrateSqlServerSqlDbDatabaseInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSqlServerSqlDbDatabaseInputArgs:
    def __init__(__self__, *,
                 make_source_db_read_only: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 table_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_database_name: Optional[pulumi.Input[str]] = None):
        """
        Database specific information for SQL to Azure SQL DB migration task inputs
        :param pulumi.Input[bool] make_source_db_read_only: Whether to set database read only before migration
        :param pulumi.Input[str] name: Name of the database
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] table_map: Mapping of source to target tables
        :param pulumi.Input[str] target_database_name: Name of target database. Note: Target database will be truncated before starting migration.
        """
        if make_source_db_read_only is not None:
            pulumi.set(__self__, "make_source_db_read_only", make_source_db_read_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if table_map is not None:
            pulumi.set(__self__, "table_map", table_map)
        if target_database_name is not None:
            pulumi.set(__self__, "target_database_name", target_database_name)

    @property
    @pulumi.getter(name="makeSourceDbReadOnly")
    def make_source_db_read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to set database read only before migration
        """
        return pulumi.get(self, "make_source_db_read_only")

    @make_source_db_read_only.setter
    def make_source_db_read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "make_source_db_read_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tableMap")
    def table_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Mapping of source to target tables
        """
        return pulumi.get(self, "table_map")

    @table_map.setter
    def table_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "table_map", value)

    @property
    @pulumi.getter(name="targetDatabaseName")
    def target_database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
        return pulumi.get(self, "target_database_name")

    @target_database_name.setter
    def target_database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_database_name", value)


if not MYPY:
    class MigrateSqlServerSqlDbSyncDatabaseInputArgsDict(TypedDict):
        """
        Database specific information for SQL to Azure SQL DB sync migration task inputs
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Unique identifier for database
        """
        migration_setting: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Migration settings which tune the migration behavior
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database
        """
        schema_name: NotRequired[pulumi.Input[str]]
        """
        Schema name to be migrated
        """
        source_setting: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Source settings to tune source endpoint migration behavior
        """
        table_map: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Mapping of source to target tables
        """
        target_database_name: NotRequired[pulumi.Input[str]]
        """
        Target database name
        """
        target_setting: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Target settings to tune target endpoint migration behavior
        """
elif False:
    MigrateSqlServerSqlDbSyncDatabaseInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSqlServerSqlDbSyncDatabaseInputArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 migration_setting: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 source_setting: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 table_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_database_name: Optional[pulumi.Input[str]] = None,
                 target_setting: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Database specific information for SQL to Azure SQL DB sync migration task inputs
        :param pulumi.Input[str] id: Unique identifier for database
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] migration_setting: Migration settings which tune the migration behavior
        :param pulumi.Input[str] name: Name of database
        :param pulumi.Input[str] schema_name: Schema name to be migrated
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] source_setting: Source settings to tune source endpoint migration behavior
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] table_map: Mapping of source to target tables
        :param pulumi.Input[str] target_database_name: Target database name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_setting: Target settings to tune target endpoint migration behavior
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if migration_setting is not None:
            pulumi.set(__self__, "migration_setting", migration_setting)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_setting is not None:
            pulumi.set(__self__, "source_setting", source_setting)
        if table_map is not None:
            pulumi.set(__self__, "table_map", table_map)
        if target_database_name is not None:
            pulumi.set(__self__, "target_database_name", target_database_name)
        if target_setting is not None:
            pulumi.set(__self__, "target_setting", target_setting)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier for database
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="migrationSetting")
    def migration_setting(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Migration settings which tune the migration behavior
        """
        return pulumi.get(self, "migration_setting")

    @migration_setting.setter
    def migration_setting(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "migration_setting", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        Schema name to be migrated
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sourceSetting")
    def source_setting(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Source settings to tune source endpoint migration behavior
        """
        return pulumi.get(self, "source_setting")

    @source_setting.setter
    def source_setting(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "source_setting", value)

    @property
    @pulumi.getter(name="tableMap")
    def table_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Mapping of source to target tables
        """
        return pulumi.get(self, "table_map")

    @table_map.setter
    def table_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "table_map", value)

    @property
    @pulumi.getter(name="targetDatabaseName")
    def target_database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Target database name
        """
        return pulumi.get(self, "target_database_name")

    @target_database_name.setter
    def target_database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_database_name", value)

    @property
    @pulumi.getter(name="targetSetting")
    def target_setting(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Target settings to tune target endpoint migration behavior
        """
        return pulumi.get(self, "target_setting")

    @target_setting.setter
    def target_setting(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_setting", value)


if not MYPY:
    class MigrateSqlServerSqlDbSyncTaskInputArgsDict(TypedDict):
        """
        Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbSyncDatabaseInputArgsDict']]]
        """
        Databases to migrate
        """
        source_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Information for connecting to source
        """
        target_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Information for connecting to target
        """
        validation_options: NotRequired[pulumi.Input['MigrationValidationOptionsArgsDict']]
        """
        Validation options
        """
elif False:
    MigrateSqlServerSqlDbSyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSqlServerSqlDbSyncTaskInputArgs:
    def __init__(__self__, *,
                 selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbSyncDatabaseInputArgs']]],
                 source_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 validation_options: Optional[pulumi.Input['MigrationValidationOptionsArgs']] = None):
        """
        Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
        :param pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbSyncDatabaseInputArgs']]] selected_databases: Databases to migrate
        :param pulumi.Input['SqlConnectionInfoArgs'] source_connection_info: Information for connecting to source
        :param pulumi.Input['SqlConnectionInfoArgs'] target_connection_info: Information for connecting to target
        :param pulumi.Input['MigrationValidationOptionsArgs'] validation_options: Validation options
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if validation_options is not None:
            pulumi.set(__self__, "validation_options", validation_options)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbSyncDatabaseInputArgs']]]:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbSyncDatabaseInputArgs']]]):
        pulumi.set(self, "selected_databases", value)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Information for connecting to source
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Information for connecting to target
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)

    @property
    @pulumi.getter(name="validationOptions")
    def validation_options(self) -> Optional[pulumi.Input['MigrationValidationOptionsArgs']]:
        """
        Validation options
        """
        return pulumi.get(self, "validation_options")

    @validation_options.setter
    def validation_options(self, value: Optional[pulumi.Input['MigrationValidationOptionsArgs']]):
        pulumi.set(self, "validation_options", value)


if not MYPY:
    class MigrateSqlServerSqlDbSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Migrate.SqlServer.AzureSqlDb.Sync'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MigrateSqlServerSqlDbSyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    MigrateSqlServerSqlDbSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSqlServerSqlDbSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MigrateSqlServerSqlDbSyncTaskInputArgs']] = None):
        """
        Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Migrate.SqlServer.AzureSqlDb.Sync'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MigrateSqlServerSqlDbSyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'Migrate.SqlServer.AzureSqlDb.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Migrate.SqlServer.AzureSqlDb.Sync'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MigrateSqlServerSqlDbSyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MigrateSqlServerSqlDbSyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class MigrateSqlServerSqlDbTaskInputArgsDict(TypedDict):
        """
        Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbDatabaseInputArgsDict']]]
        """
        Databases to migrate
        """
        source_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Information for connecting to source
        """
        target_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Information for connecting to target
        """
        validation_options: NotRequired[pulumi.Input['MigrationValidationOptionsArgsDict']]
        """
        Options for enabling various post migration validations. Available options, 
         1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data. 
         2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
        """
elif False:
    MigrateSqlServerSqlDbTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSqlServerSqlDbTaskInputArgs:
    def __init__(__self__, *,
                 selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbDatabaseInputArgs']]],
                 source_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 validation_options: Optional[pulumi.Input['MigrationValidationOptionsArgs']] = None):
        """
        Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
        :param pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbDatabaseInputArgs']]] selected_databases: Databases to migrate
        :param pulumi.Input['SqlConnectionInfoArgs'] source_connection_info: Information for connecting to source
        :param pulumi.Input['SqlConnectionInfoArgs'] target_connection_info: Information for connecting to target
        :param pulumi.Input['MigrationValidationOptionsArgs'] validation_options: Options for enabling various post migration validations. Available options, 
                1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data. 
                2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if validation_options is not None:
            pulumi.set(__self__, "validation_options", validation_options)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbDatabaseInputArgs']]]:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbDatabaseInputArgs']]]):
        pulumi.set(self, "selected_databases", value)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Information for connecting to source
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Information for connecting to target
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)

    @property
    @pulumi.getter(name="validationOptions")
    def validation_options(self) -> Optional[pulumi.Input['MigrationValidationOptionsArgs']]:
        """
        Options for enabling various post migration validations. Available options, 
         1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data. 
         2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
        """
        return pulumi.get(self, "validation_options")

    @validation_options.setter
    def validation_options(self, value: Optional[pulumi.Input['MigrationValidationOptionsArgs']]):
        pulumi.set(self, "validation_options", value)


if not MYPY:
    class MigrateSqlServerSqlDbTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Migrate.SqlServer.SqlDb'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MigrateSqlServerSqlDbTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    MigrateSqlServerSqlDbTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSqlServerSqlDbTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MigrateSqlServerSqlDbTaskInputArgs']] = None):
        """
        Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Migrate.SqlServer.SqlDb'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MigrateSqlServerSqlDbTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'Migrate.SqlServer.SqlDb')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Migrate.SqlServer.SqlDb'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MigrateSqlServerSqlDbTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MigrateSqlServerSqlDbTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class MigrateSqlServerSqlMIDatabaseInputArgsDict(TypedDict):
        """
        Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
        """
        name: pulumi.Input[str]
        """
        Name of the database
        """
        restore_database_name: pulumi.Input[str]
        """
        Name of the database at destination
        """
        backup_file_paths: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The list of backup files to be used in case of existing backups.
        """
        backup_file_share: NotRequired[pulumi.Input['FileShareArgsDict']]
        """
        Backup file share information for backing up this database.
        """
elif False:
    MigrateSqlServerSqlMIDatabaseInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSqlServerSqlMIDatabaseInputArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 restore_database_name: pulumi.Input[str],
                 backup_file_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 backup_file_share: Optional[pulumi.Input['FileShareArgs']] = None):
        """
        Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
        :param pulumi.Input[str] name: Name of the database
        :param pulumi.Input[str] restore_database_name: Name of the database at destination
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_file_paths: The list of backup files to be used in case of existing backups.
        :param pulumi.Input['FileShareArgs'] backup_file_share: Backup file share information for backing up this database.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "restore_database_name", restore_database_name)
        if backup_file_paths is not None:
            pulumi.set(__self__, "backup_file_paths", backup_file_paths)
        if backup_file_share is not None:
            pulumi.set(__self__, "backup_file_share", backup_file_share)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="restoreDatabaseName")
    def restore_database_name(self) -> pulumi.Input[str]:
        """
        Name of the database at destination
        """
        return pulumi.get(self, "restore_database_name")

    @restore_database_name.setter
    def restore_database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "restore_database_name", value)

    @property
    @pulumi.getter(name="backupFilePaths")
    def backup_file_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of backup files to be used in case of existing backups.
        """
        return pulumi.get(self, "backup_file_paths")

    @backup_file_paths.setter
    def backup_file_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_file_paths", value)

    @property
    @pulumi.getter(name="backupFileShare")
    def backup_file_share(self) -> Optional[pulumi.Input['FileShareArgs']]:
        """
        Backup file share information for backing up this database.
        """
        return pulumi.get(self, "backup_file_share")

    @backup_file_share.setter
    def backup_file_share(self, value: Optional[pulumi.Input['FileShareArgs']]):
        pulumi.set(self, "backup_file_share", value)


if not MYPY:
    class MigrateSqlServerSqlMISyncTaskInputArgsDict(TypedDict):
        """
        Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
        """
        azure_app: pulumi.Input['AzureActiveDirectoryAppArgsDict']
        """
        Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgsDict']]]
        """
        Databases to migrate
        """
        source_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Connection information for source SQL Server
        """
        storage_resource_id: pulumi.Input[str]
        """
        Fully qualified resourceId of storage
        """
        target_connection_info: pulumi.Input['MiSqlConnectionInfoArgsDict']
        """
        Connection information for Azure SQL Database Managed Instance
        """
        backup_file_share: NotRequired[pulumi.Input['FileShareArgsDict']]
        """
        Backup file share information for all selected databases.
        """
elif False:
    MigrateSqlServerSqlMISyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSqlServerSqlMISyncTaskInputArgs:
    def __init__(__self__, *,
                 azure_app: pulumi.Input['AzureActiveDirectoryAppArgs'],
                 selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]],
                 source_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 storage_resource_id: pulumi.Input[str],
                 target_connection_info: pulumi.Input['MiSqlConnectionInfoArgs'],
                 backup_file_share: Optional[pulumi.Input['FileShareArgs']] = None):
        """
        Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
        :param pulumi.Input['AzureActiveDirectoryAppArgs'] azure_app: Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        :param pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]] selected_databases: Databases to migrate
        :param pulumi.Input['SqlConnectionInfoArgs'] source_connection_info: Connection information for source SQL Server
        :param pulumi.Input[str] storage_resource_id: Fully qualified resourceId of storage
        :param pulumi.Input['MiSqlConnectionInfoArgs'] target_connection_info: Connection information for Azure SQL Database Managed Instance
        :param pulumi.Input['FileShareArgs'] backup_file_share: Backup file share information for all selected databases.
        """
        pulumi.set(__self__, "azure_app", azure_app)
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "storage_resource_id", storage_resource_id)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if backup_file_share is not None:
            pulumi.set(__self__, "backup_file_share", backup_file_share)

    @property
    @pulumi.getter(name="azureApp")
    def azure_app(self) -> pulumi.Input['AzureActiveDirectoryAppArgs']:
        """
        Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        """
        return pulumi.get(self, "azure_app")

    @azure_app.setter
    def azure_app(self, value: pulumi.Input['AzureActiveDirectoryAppArgs']):
        pulumi.set(self, "azure_app", value)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]]:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]]):
        pulumi.set(self, "selected_databases", value)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Connection information for source SQL Server
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="storageResourceId")
    def storage_resource_id(self) -> pulumi.Input[str]:
        """
        Fully qualified resourceId of storage
        """
        return pulumi.get(self, "storage_resource_id")

    @storage_resource_id.setter
    def storage_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_resource_id", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['MiSqlConnectionInfoArgs']:
        """
        Connection information for Azure SQL Database Managed Instance
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['MiSqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)

    @property
    @pulumi.getter(name="backupFileShare")
    def backup_file_share(self) -> Optional[pulumi.Input['FileShareArgs']]:
        """
        Backup file share information for all selected databases.
        """
        return pulumi.get(self, "backup_file_share")

    @backup_file_share.setter
    def backup_file_share(self, value: Optional[pulumi.Input['FileShareArgs']]):
        pulumi.set(self, "backup_file_share", value)


if not MYPY:
    class MigrateSqlServerSqlMISyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MigrateSqlServerSqlMISyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    MigrateSqlServerSqlMISyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSqlServerSqlMISyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MigrateSqlServerSqlMISyncTaskInputArgs']] = None):
        """
        Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MigrateSqlServerSqlMISyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MigrateSqlServerSqlMISyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MigrateSqlServerSqlMISyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class MigrateSqlServerSqlMITaskInputArgsDict(TypedDict):
        """
        Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
        """
        backup_blob_share: pulumi.Input['BlobShareArgsDict']
        """
        SAS URI of Azure Storage Account Container to be used for storing backup files.
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgsDict']]]
        """
        Databases to migrate
        """
        source_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Information for connecting to source
        """
        target_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Information for connecting to target
        """
        aad_domain_name: NotRequired[pulumi.Input[str]]
        """
        Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
        """
        backup_file_share: NotRequired[pulumi.Input['FileShareArgsDict']]
        """
        Backup file share information for all selected databases.
        """
        backup_mode: NotRequired[pulumi.Input[Union[str, 'BackupMode']]]
        """
        Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
        """
        selected_agent_jobs: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Agent Jobs to migrate.
        """
        selected_logins: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Logins to migrate.
        """
elif False:
    MigrateSqlServerSqlMITaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSqlServerSqlMITaskInputArgs:
    def __init__(__self__, *,
                 backup_blob_share: pulumi.Input['BlobShareArgs'],
                 selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]],
                 source_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 aad_domain_name: Optional[pulumi.Input[str]] = None,
                 backup_file_share: Optional[pulumi.Input['FileShareArgs']] = None,
                 backup_mode: Optional[pulumi.Input[Union[str, 'BackupMode']]] = None,
                 selected_agent_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 selected_logins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
        :param pulumi.Input['BlobShareArgs'] backup_blob_share: SAS URI of Azure Storage Account Container to be used for storing backup files.
        :param pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]] selected_databases: Databases to migrate
        :param pulumi.Input['SqlConnectionInfoArgs'] source_connection_info: Information for connecting to source
        :param pulumi.Input['SqlConnectionInfoArgs'] target_connection_info: Information for connecting to target
        :param pulumi.Input[str] aad_domain_name: Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
        :param pulumi.Input['FileShareArgs'] backup_file_share: Backup file share information for all selected databases.
        :param pulumi.Input[Union[str, 'BackupMode']] backup_mode: Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] selected_agent_jobs: Agent Jobs to migrate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] selected_logins: Logins to migrate.
        """
        pulumi.set(__self__, "backup_blob_share", backup_blob_share)
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if aad_domain_name is not None:
            pulumi.set(__self__, "aad_domain_name", aad_domain_name)
        if backup_file_share is not None:
            pulumi.set(__self__, "backup_file_share", backup_file_share)
        if backup_mode is not None:
            pulumi.set(__self__, "backup_mode", backup_mode)
        if selected_agent_jobs is not None:
            pulumi.set(__self__, "selected_agent_jobs", selected_agent_jobs)
        if selected_logins is not None:
            pulumi.set(__self__, "selected_logins", selected_logins)

    @property
    @pulumi.getter(name="backupBlobShare")
    def backup_blob_share(self) -> pulumi.Input['BlobShareArgs']:
        """
        SAS URI of Azure Storage Account Container to be used for storing backup files.
        """
        return pulumi.get(self, "backup_blob_share")

    @backup_blob_share.setter
    def backup_blob_share(self, value: pulumi.Input['BlobShareArgs']):
        pulumi.set(self, "backup_blob_share", value)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]]:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]]):
        pulumi.set(self, "selected_databases", value)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Information for connecting to source
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Information for connecting to target
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)

    @property
    @pulumi.getter(name="aadDomainName")
    def aad_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
        """
        return pulumi.get(self, "aad_domain_name")

    @aad_domain_name.setter
    def aad_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_domain_name", value)

    @property
    @pulumi.getter(name="backupFileShare")
    def backup_file_share(self) -> Optional[pulumi.Input['FileShareArgs']]:
        """
        Backup file share information for all selected databases.
        """
        return pulumi.get(self, "backup_file_share")

    @backup_file_share.setter
    def backup_file_share(self, value: Optional[pulumi.Input['FileShareArgs']]):
        pulumi.set(self, "backup_file_share", value)

    @property
    @pulumi.getter(name="backupMode")
    def backup_mode(self) -> Optional[pulumi.Input[Union[str, 'BackupMode']]]:
        """
        Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
        """
        return pulumi.get(self, "backup_mode")

    @backup_mode.setter
    def backup_mode(self, value: Optional[pulumi.Input[Union[str, 'BackupMode']]]):
        pulumi.set(self, "backup_mode", value)

    @property
    @pulumi.getter(name="selectedAgentJobs")
    def selected_agent_jobs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Agent Jobs to migrate.
        """
        return pulumi.get(self, "selected_agent_jobs")

    @selected_agent_jobs.setter
    def selected_agent_jobs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "selected_agent_jobs", value)

    @property
    @pulumi.getter(name="selectedLogins")
    def selected_logins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Logins to migrate.
        """
        return pulumi.get(self, "selected_logins")

    @selected_logins.setter
    def selected_logins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "selected_logins", value)


if not MYPY:
    class MigrateSqlServerSqlMITaskPropertiesArgsDict(TypedDict):
        """
        Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MigrateSqlServerSqlMITaskInputArgsDict']]
        """
        Task input
        """
elif False:
    MigrateSqlServerSqlMITaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSqlServerSqlMITaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MigrateSqlServerSqlMITaskInputArgs']] = None):
        """
        Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MigrateSqlServerSqlMITaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'Migrate.SqlServer.AzureSqlDbMI')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MigrateSqlServerSqlMITaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MigrateSqlServerSqlMITaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class MigrateSsisTaskInputArgsDict(TypedDict):
        """
        Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
        """
        source_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Information for connecting to source
        """
        ssis_migration_info: pulumi.Input['SsisMigrationInfoArgsDict']
        """
        SSIS package migration information.
        """
        target_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Information for connecting to target
        """
elif False:
    MigrateSsisTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSsisTaskInputArgs:
    def __init__(__self__, *,
                 source_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 ssis_migration_info: pulumi.Input['SsisMigrationInfoArgs'],
                 target_connection_info: pulumi.Input['SqlConnectionInfoArgs']):
        """
        Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
        :param pulumi.Input['SqlConnectionInfoArgs'] source_connection_info: Information for connecting to source
        :param pulumi.Input['SsisMigrationInfoArgs'] ssis_migration_info: SSIS package migration information.
        :param pulumi.Input['SqlConnectionInfoArgs'] target_connection_info: Information for connecting to target
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "ssis_migration_info", ssis_migration_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Information for connecting to source
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="ssisMigrationInfo")
    def ssis_migration_info(self) -> pulumi.Input['SsisMigrationInfoArgs']:
        """
        SSIS package migration information.
        """
        return pulumi.get(self, "ssis_migration_info")

    @ssis_migration_info.setter
    def ssis_migration_info(self, value: pulumi.Input['SsisMigrationInfoArgs']):
        pulumi.set(self, "ssis_migration_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Information for connecting to target
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)


if not MYPY:
    class MigrateSsisTaskPropertiesArgsDict(TypedDict):
        """
        Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Migrate.Ssis'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MigrateSsisTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    MigrateSsisTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrateSsisTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MigrateSsisTaskInputArgs']] = None):
        """
        Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Migrate.Ssis'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MigrateSsisTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'Migrate.Ssis')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Migrate.Ssis'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MigrateSsisTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MigrateSsisTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class MigrationValidationOptionsArgsDict(TypedDict):
        """
        Types of validations to run after the migration
        """
        enable_data_integrity_validation: NotRequired[pulumi.Input[bool]]
        """
        Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
        """
        enable_query_analysis_validation: NotRequired[pulumi.Input[bool]]
        """
        Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
        """
        enable_schema_validation: NotRequired[pulumi.Input[bool]]
        """
        Allows to compare the schema information between source and target.
        """
elif False:
    MigrationValidationOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrationValidationOptionsArgs:
    def __init__(__self__, *,
                 enable_data_integrity_validation: Optional[pulumi.Input[bool]] = None,
                 enable_query_analysis_validation: Optional[pulumi.Input[bool]] = None,
                 enable_schema_validation: Optional[pulumi.Input[bool]] = None):
        """
        Types of validations to run after the migration
        :param pulumi.Input[bool] enable_data_integrity_validation: Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
        :param pulumi.Input[bool] enable_query_analysis_validation: Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
        :param pulumi.Input[bool] enable_schema_validation: Allows to compare the schema information between source and target.
        """
        if enable_data_integrity_validation is not None:
            pulumi.set(__self__, "enable_data_integrity_validation", enable_data_integrity_validation)
        if enable_query_analysis_validation is not None:
            pulumi.set(__self__, "enable_query_analysis_validation", enable_query_analysis_validation)
        if enable_schema_validation is not None:
            pulumi.set(__self__, "enable_schema_validation", enable_schema_validation)

    @property
    @pulumi.getter(name="enableDataIntegrityValidation")
    def enable_data_integrity_validation(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
        """
        return pulumi.get(self, "enable_data_integrity_validation")

    @enable_data_integrity_validation.setter
    def enable_data_integrity_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_data_integrity_validation", value)

    @property
    @pulumi.getter(name="enableQueryAnalysisValidation")
    def enable_query_analysis_validation(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
        """
        return pulumi.get(self, "enable_query_analysis_validation")

    @enable_query_analysis_validation.setter
    def enable_query_analysis_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_query_analysis_validation", value)

    @property
    @pulumi.getter(name="enableSchemaValidation")
    def enable_schema_validation(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows to compare the schema information between source and target.
        """
        return pulumi.get(self, "enable_schema_validation")

    @enable_schema_validation.setter
    def enable_schema_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_schema_validation", value)


if not MYPY:
    class MongoConnectionInformationArgsDict(TypedDict):
        """
        Mongo Connection
        """
        connection_string: NotRequired[pulumi.Input[str]]
        """
        ConnectionString to connect to Mongo.
        """
        host: NotRequired[pulumi.Input[str]]
        """
        Host of mongo connection.
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password to connect to Mongo.
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Port of mongo connection.
        """
        use_ssl: NotRequired[pulumi.Input[bool]]
        """
        Whether to UseSsl or UseTls to connect to Mongo. Default is true.
        """
        user_name: NotRequired[pulumi.Input[str]]
        """
        User name to connect to Mongo.
        """
elif False:
    MongoConnectionInformationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoConnectionInformationArgs:
    def __init__(__self__, *,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Mongo Connection
        :param pulumi.Input[str] connection_string: ConnectionString to connect to Mongo.
        :param pulumi.Input[str] host: Host of mongo connection.
        :param pulumi.Input[str] password: Password to connect to Mongo.
        :param pulumi.Input[int] port: Port of mongo connection.
        :param pulumi.Input[bool] use_ssl: Whether to UseSsl or UseTls to connect to Mongo. Default is true.
        :param pulumi.Input[str] user_name: User name to connect to Mongo.
        """
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if use_ssl is not None:
            pulumi.set(__self__, "use_ssl", use_ssl)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        """
        ConnectionString to connect to Mongo.
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host of mongo connection.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to connect to Mongo.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of mongo connection.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to UseSsl or UseTls to connect to Mongo. Default is true.
        """
        return pulumi.get(self, "use_ssl")

    @use_ssl.setter
    def use_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ssl", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name to connect to Mongo.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class MongoDbCollectionSettingsArgsDict(TypedDict):
        """
        Describes how an individual MongoDB collection should be migrated
        """
        can_delete: NotRequired[pulumi.Input[bool]]
        """
        Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
        """
        shard_key: NotRequired[pulumi.Input['MongoDbShardKeySettingArgsDict']]
        """
        Describes a MongoDB shard key
        """
        target_rus: NotRequired[pulumi.Input[int]]
        """
        The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
        """
elif False:
    MongoDbCollectionSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoDbCollectionSettingsArgs:
    def __init__(__self__, *,
                 can_delete: Optional[pulumi.Input[bool]] = None,
                 shard_key: Optional[pulumi.Input['MongoDbShardKeySettingArgs']] = None,
                 target_rus: Optional[pulumi.Input[int]] = None):
        """
        Describes how an individual MongoDB collection should be migrated
        :param pulumi.Input[bool] can_delete: Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
        :param pulumi.Input['MongoDbShardKeySettingArgs'] shard_key: Describes a MongoDB shard key
        :param pulumi.Input[int] target_rus: The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
        """
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if shard_key is not None:
            pulumi.set(__self__, "shard_key", shard_key)
        if target_rus is not None:
            pulumi.set(__self__, "target_rus", target_rus)

    @property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
        """
        return pulumi.get(self, "can_delete")

    @can_delete.setter
    def can_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_delete", value)

    @property
    @pulumi.getter(name="shardKey")
    def shard_key(self) -> Optional[pulumi.Input['MongoDbShardKeySettingArgs']]:
        """
        Describes a MongoDB shard key
        """
        return pulumi.get(self, "shard_key")

    @shard_key.setter
    def shard_key(self, value: Optional[pulumi.Input['MongoDbShardKeySettingArgs']]):
        pulumi.set(self, "shard_key", value)

    @property
    @pulumi.getter(name="targetRUs")
    def target_rus(self) -> Optional[pulumi.Input[int]]:
        """
        The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
        """
        return pulumi.get(self, "target_rus")

    @target_rus.setter
    def target_rus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_rus", value)


if not MYPY:
    class MongoDbConnectionInfoArgsDict(TypedDict):
        """
        Describes a connection to a MongoDB data source
        """
        connection_string: pulumi.Input[str]
        """
        A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
        """
        type: pulumi.Input[str]
        """
        Type of connection info
        Expected value is 'MongoDbConnectionInfo'.
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password credential.
        """
        user_name: NotRequired[pulumi.Input[str]]
        """
        User name
        """
elif False:
    MongoDbConnectionInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoDbConnectionInfoArgs:
    def __init__(__self__, *,
                 connection_string: pulumi.Input[str],
                 type: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Describes a connection to a MongoDB data source
        :param pulumi.Input[str] connection_string: A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
        :param pulumi.Input[str] type: Type of connection info
               Expected value is 'MongoDbConnectionInfo'.
        :param pulumi.Input[str] password: Password credential.
        :param pulumi.Input[str] user_name: User name
        """
        pulumi.set(__self__, "connection_string", connection_string)
        pulumi.set(__self__, "type", 'MongoDbConnectionInfo')
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> pulumi.Input[str]:
        """
        A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of connection info
        Expected value is 'MongoDbConnectionInfo'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class MongoDbDatabaseSettingsArgsDict(TypedDict):
        """
        Describes how an individual MongoDB database should be migrated
        """
        collections: pulumi.Input[Mapping[str, pulumi.Input['MongoDbCollectionSettingsArgsDict']]]
        """
        The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
        """
        target_rus: NotRequired[pulumi.Input[int]]
        """
        The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
        """
elif False:
    MongoDbDatabaseSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoDbDatabaseSettingsArgs:
    def __init__(__self__, *,
                 collections: pulumi.Input[Mapping[str, pulumi.Input['MongoDbCollectionSettingsArgs']]],
                 target_rus: Optional[pulumi.Input[int]] = None):
        """
        Describes how an individual MongoDB database should be migrated
        :param pulumi.Input[Mapping[str, pulumi.Input['MongoDbCollectionSettingsArgs']]] collections: The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
        :param pulumi.Input[int] target_rus: The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
        """
        pulumi.set(__self__, "collections", collections)
        if target_rus is not None:
            pulumi.set(__self__, "target_rus", target_rus)

    @property
    @pulumi.getter
    def collections(self) -> pulumi.Input[Mapping[str, pulumi.Input['MongoDbCollectionSettingsArgs']]]:
        """
        The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
        """
        return pulumi.get(self, "collections")

    @collections.setter
    def collections(self, value: pulumi.Input[Mapping[str, pulumi.Input['MongoDbCollectionSettingsArgs']]]):
        pulumi.set(self, "collections", value)

    @property
    @pulumi.getter(name="targetRUs")
    def target_rus(self) -> Optional[pulumi.Input[int]]:
        """
        The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
        """
        return pulumi.get(self, "target_rus")

    @target_rus.setter
    def target_rus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_rus", value)


if not MYPY:
    class MongoDbMigrationSettingsArgsDict(TypedDict):
        """
        Describes how a MongoDB data migration should be performed
        """
        databases: pulumi.Input[Mapping[str, pulumi.Input['MongoDbDatabaseSettingsArgsDict']]]
        """
        The databases on the source cluster to migrate to the target. The keys are the names of the databases.
        """
        source: pulumi.Input['MongoDbConnectionInfoArgsDict']
        """
        Settings used to connect to the source cluster
        """
        target: pulumi.Input['MongoDbConnectionInfoArgsDict']
        """
        Settings used to connect to the target cluster
        """
        boost_rus: NotRequired[pulumi.Input[int]]
        """
        The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
        """
        replication: NotRequired[pulumi.Input[Union[str, 'MongoDbReplication']]]
        """
        Describes how changes will be replicated from the source to the target. The default is OneTime.
        """
        throttling: NotRequired[pulumi.Input['MongoDbThrottlingSettingsArgsDict']]
        """
        Settings used to limit the resource usage of the migration
        """
elif False:
    MongoDbMigrationSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoDbMigrationSettingsArgs:
    def __init__(__self__, *,
                 databases: pulumi.Input[Mapping[str, pulumi.Input['MongoDbDatabaseSettingsArgs']]],
                 source: pulumi.Input['MongoDbConnectionInfoArgs'],
                 target: pulumi.Input['MongoDbConnectionInfoArgs'],
                 boost_rus: Optional[pulumi.Input[int]] = None,
                 replication: Optional[pulumi.Input[Union[str, 'MongoDbReplication']]] = None,
                 throttling: Optional[pulumi.Input['MongoDbThrottlingSettingsArgs']] = None):
        """
        Describes how a MongoDB data migration should be performed
        :param pulumi.Input[Mapping[str, pulumi.Input['MongoDbDatabaseSettingsArgs']]] databases: The databases on the source cluster to migrate to the target. The keys are the names of the databases.
        :param pulumi.Input['MongoDbConnectionInfoArgs'] source: Settings used to connect to the source cluster
        :param pulumi.Input['MongoDbConnectionInfoArgs'] target: Settings used to connect to the target cluster
        :param pulumi.Input[int] boost_rus: The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
        :param pulumi.Input[Union[str, 'MongoDbReplication']] replication: Describes how changes will be replicated from the source to the target. The default is OneTime.
        :param pulumi.Input['MongoDbThrottlingSettingsArgs'] throttling: Settings used to limit the resource usage of the migration
        """
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if boost_rus is not None:
            pulumi.set(__self__, "boost_rus", boost_rus)
        if replication is not None:
            pulumi.set(__self__, "replication", replication)
        if throttling is not None:
            pulumi.set(__self__, "throttling", throttling)

    @property
    @pulumi.getter
    def databases(self) -> pulumi.Input[Mapping[str, pulumi.Input['MongoDbDatabaseSettingsArgs']]]:
        """
        The databases on the source cluster to migrate to the target. The keys are the names of the databases.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: pulumi.Input[Mapping[str, pulumi.Input['MongoDbDatabaseSettingsArgs']]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['MongoDbConnectionInfoArgs']:
        """
        Settings used to connect to the source cluster
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['MongoDbConnectionInfoArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['MongoDbConnectionInfoArgs']:
        """
        Settings used to connect to the target cluster
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['MongoDbConnectionInfoArgs']):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="boostRUs")
    def boost_rus(self) -> Optional[pulumi.Input[int]]:
        """
        The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
        """
        return pulumi.get(self, "boost_rus")

    @boost_rus.setter
    def boost_rus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "boost_rus", value)

    @property
    @pulumi.getter
    def replication(self) -> Optional[pulumi.Input[Union[str, 'MongoDbReplication']]]:
        """
        Describes how changes will be replicated from the source to the target. The default is OneTime.
        """
        return pulumi.get(self, "replication")

    @replication.setter
    def replication(self, value: Optional[pulumi.Input[Union[str, 'MongoDbReplication']]]):
        pulumi.set(self, "replication", value)

    @property
    @pulumi.getter
    def throttling(self) -> Optional[pulumi.Input['MongoDbThrottlingSettingsArgs']]:
        """
        Settings used to limit the resource usage of the migration
        """
        return pulumi.get(self, "throttling")

    @throttling.setter
    def throttling(self, value: Optional[pulumi.Input['MongoDbThrottlingSettingsArgs']]):
        pulumi.set(self, "throttling", value)


if not MYPY:
    class MongoDbShardKeyFieldArgsDict(TypedDict):
        """
        Describes a field reference within a MongoDB shard key
        """
        name: pulumi.Input[str]
        """
        The name of the field
        """
        order: pulumi.Input[Union[str, 'MongoDbShardKeyOrder']]
        """
        The field ordering
        """
elif False:
    MongoDbShardKeyFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoDbShardKeyFieldArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 order: pulumi.Input[Union[str, 'MongoDbShardKeyOrder']]):
        """
        Describes a field reference within a MongoDB shard key
        :param pulumi.Input[str] name: The name of the field
        :param pulumi.Input[Union[str, 'MongoDbShardKeyOrder']] order: The field ordering
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the field
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[Union[str, 'MongoDbShardKeyOrder']]:
        """
        The field ordering
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[Union[str, 'MongoDbShardKeyOrder']]):
        pulumi.set(self, "order", value)


if not MYPY:
    class MongoDbShardKeySettingArgsDict(TypedDict):
        """
        Describes a MongoDB shard key
        """
        fields: pulumi.Input[Sequence[pulumi.Input['MongoDbShardKeyFieldArgsDict']]]
        """
        The fields within the shard key
        """
        is_unique: pulumi.Input[bool]
        """
        Whether the shard key is unique
        """
elif False:
    MongoDbShardKeySettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoDbShardKeySettingArgs:
    def __init__(__self__, *,
                 fields: pulumi.Input[Sequence[pulumi.Input['MongoDbShardKeyFieldArgs']]],
                 is_unique: pulumi.Input[bool]):
        """
        Describes a MongoDB shard key
        :param pulumi.Input[Sequence[pulumi.Input['MongoDbShardKeyFieldArgs']]] fields: The fields within the shard key
        :param pulumi.Input[bool] is_unique: Whether the shard key is unique
        """
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "is_unique", is_unique)

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Input[Sequence[pulumi.Input['MongoDbShardKeyFieldArgs']]]:
        """
        The fields within the shard key
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: pulumi.Input[Sequence[pulumi.Input['MongoDbShardKeyFieldArgs']]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="isUnique")
    def is_unique(self) -> pulumi.Input[bool]:
        """
        Whether the shard key is unique
        """
        return pulumi.get(self, "is_unique")

    @is_unique.setter
    def is_unique(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_unique", value)


if not MYPY:
    class MongoDbThrottlingSettingsArgsDict(TypedDict):
        """
        Specifies resource limits for the migration
        """
        max_parallelism: NotRequired[pulumi.Input[int]]
        """
        The maximum number of work items (e.g. collection copies) that will be processed in parallel
        """
        min_free_cpu: NotRequired[pulumi.Input[int]]
        """
        The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
        """
        min_free_memory_mb: NotRequired[pulumi.Input[int]]
        """
        The number of megabytes of RAM that the migrator will try to avoid using
        """
elif False:
    MongoDbThrottlingSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoDbThrottlingSettingsArgs:
    def __init__(__self__, *,
                 max_parallelism: Optional[pulumi.Input[int]] = None,
                 min_free_cpu: Optional[pulumi.Input[int]] = None,
                 min_free_memory_mb: Optional[pulumi.Input[int]] = None):
        """
        Specifies resource limits for the migration
        :param pulumi.Input[int] max_parallelism: The maximum number of work items (e.g. collection copies) that will be processed in parallel
        :param pulumi.Input[int] min_free_cpu: The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
        :param pulumi.Input[int] min_free_memory_mb: The number of megabytes of RAM that the migrator will try to avoid using
        """
        if max_parallelism is not None:
            pulumi.set(__self__, "max_parallelism", max_parallelism)
        if min_free_cpu is not None:
            pulumi.set(__self__, "min_free_cpu", min_free_cpu)
        if min_free_memory_mb is not None:
            pulumi.set(__self__, "min_free_memory_mb", min_free_memory_mb)

    @property
    @pulumi.getter(name="maxParallelism")
    def max_parallelism(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of work items (e.g. collection copies) that will be processed in parallel
        """
        return pulumi.get(self, "max_parallelism")

    @max_parallelism.setter
    def max_parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_parallelism", value)

    @property
    @pulumi.getter(name="minFreeCpu")
    def min_free_cpu(self) -> Optional[pulumi.Input[int]]:
        """
        The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
        """
        return pulumi.get(self, "min_free_cpu")

    @min_free_cpu.setter
    def min_free_cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_free_cpu", value)

    @property
    @pulumi.getter(name="minFreeMemoryMb")
    def min_free_memory_mb(self) -> Optional[pulumi.Input[int]]:
        """
        The number of megabytes of RAM that the migrator will try to avoid using
        """
        return pulumi.get(self, "min_free_memory_mb")

    @min_free_memory_mb.setter
    def min_free_memory_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_free_memory_mb", value)


if not MYPY:
    class MongoMigrationCollectionArgsDict(TypedDict):
        """
        Mongo source and target database and collection details.
        """
        source_collection: NotRequired[pulumi.Input[str]]
        """
        Source collection name.
        """
        source_database: NotRequired[pulumi.Input[str]]
        """
        Source database name.
        """
        target_collection: NotRequired[pulumi.Input[str]]
        """
        Target collection name.
        """
        target_database: NotRequired[pulumi.Input[str]]
        """
        Target database name.
        """
elif False:
    MongoMigrationCollectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoMigrationCollectionArgs:
    def __init__(__self__, *,
                 source_collection: Optional[pulumi.Input[str]] = None,
                 source_database: Optional[pulumi.Input[str]] = None,
                 target_collection: Optional[pulumi.Input[str]] = None,
                 target_database: Optional[pulumi.Input[str]] = None):
        """
        Mongo source and target database and collection details.
        :param pulumi.Input[str] source_collection: Source collection name.
        :param pulumi.Input[str] source_database: Source database name.
        :param pulumi.Input[str] target_collection: Target collection name.
        :param pulumi.Input[str] target_database: Target database name.
        """
        if source_collection is not None:
            pulumi.set(__self__, "source_collection", source_collection)
        if source_database is not None:
            pulumi.set(__self__, "source_database", source_database)
        if target_collection is not None:
            pulumi.set(__self__, "target_collection", target_collection)
        if target_database is not None:
            pulumi.set(__self__, "target_database", target_database)

    @property
    @pulumi.getter(name="sourceCollection")
    def source_collection(self) -> Optional[pulumi.Input[str]]:
        """
        Source collection name.
        """
        return pulumi.get(self, "source_collection")

    @source_collection.setter
    def source_collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_collection", value)

    @property
    @pulumi.getter(name="sourceDatabase")
    def source_database(self) -> Optional[pulumi.Input[str]]:
        """
        Source database name.
        """
        return pulumi.get(self, "source_database")

    @source_database.setter
    def source_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_database", value)

    @property
    @pulumi.getter(name="targetCollection")
    def target_collection(self) -> Optional[pulumi.Input[str]]:
        """
        Target collection name.
        """
        return pulumi.get(self, "target_collection")

    @target_collection.setter
    def target_collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_collection", value)

    @property
    @pulumi.getter(name="targetDatabase")
    def target_database(self) -> Optional[pulumi.Input[str]]:
        """
        Target database name.
        """
        return pulumi.get(self, "target_database")

    @target_database.setter
    def target_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_database", value)


if not MYPY:
    class MySqlConnectionInfoArgsDict(TypedDict):
        """
        Information for connecting to MySQL server
        """
        port: pulumi.Input[int]
        """
        Port for Server
        """
        server_name: pulumi.Input[str]
        """
        Name of the server
        """
        type: pulumi.Input[str]
        """
        Type of connection info
        Expected value is 'MySqlConnectionInfo'.
        """
        encrypt_connection: NotRequired[pulumi.Input[bool]]
        """
        Whether to encrypt the connection
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password credential.
        """
        user_name: NotRequired[pulumi.Input[str]]
        """
        User name
        """
elif False:
    MySqlConnectionInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MySqlConnectionInfoArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 server_name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 encrypt_connection: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Information for connecting to MySQL server
        :param pulumi.Input[int] port: Port for Server
        :param pulumi.Input[str] server_name: Name of the server
        :param pulumi.Input[str] type: Type of connection info
               Expected value is 'MySqlConnectionInfo'.
        :param pulumi.Input[bool] encrypt_connection: Whether to encrypt the connection
        :param pulumi.Input[str] password: Password credential.
        :param pulumi.Input[str] user_name: User name
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "type", 'MySqlConnectionInfo')
        if encrypt_connection is None:
            encrypt_connection = True
        if encrypt_connection is not None:
            pulumi.set(__self__, "encrypt_connection", encrypt_connection)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port for Server
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> pulumi.Input[str]:
        """
        Name of the server
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of connection info
        Expected value is 'MySqlConnectionInfo'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="encryptConnection")
    def encrypt_connection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to encrypt the connection
        """
        return pulumi.get(self, "encrypt_connection")

    @encrypt_connection.setter
    def encrypt_connection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt_connection", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class OracleConnectionInfoArgsDict(TypedDict):
        """
        Information for connecting to Oracle server
        """
        data_source: pulumi.Input[str]
        """
        EZConnect or TNSName connection string.
        """
        type: pulumi.Input[str]
        """
        Type of connection info
        Expected value is 'OracleConnectionInfo'.
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password credential.
        """
        user_name: NotRequired[pulumi.Input[str]]
        """
        User name
        """
elif False:
    OracleConnectionInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OracleConnectionInfoArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 type: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Information for connecting to Oracle server
        :param pulumi.Input[str] data_source: EZConnect or TNSName connection string.
        :param pulumi.Input[str] type: Type of connection info
               Expected value is 'OracleConnectionInfo'.
        :param pulumi.Input[str] password: Password credential.
        :param pulumi.Input[str] user_name: User name
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "type", 'OracleConnectionInfo')
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        EZConnect or TNSName connection string.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of connection info
        Expected value is 'OracleConnectionInfo'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class PostgreSqlConnectionInfoArgsDict(TypedDict):
        """
        Information for connecting to PostgreSQL server
        """
        port: pulumi.Input[int]
        """
        Port for Server
        """
        server_name: pulumi.Input[str]
        """
        Name of the server
        """
        type: pulumi.Input[str]
        """
        Type of connection info
        Expected value is 'PostgreSqlConnectionInfo'.
        """
        database_name: NotRequired[pulumi.Input[str]]
        """
        Name of the database
        """
        encrypt_connection: NotRequired[pulumi.Input[bool]]
        """
        Whether to encrypt the connection
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password credential.
        """
        trust_server_certificate: NotRequired[pulumi.Input[bool]]
        """
        Whether to trust the server certificate
        """
        user_name: NotRequired[pulumi.Input[str]]
        """
        User name
        """
elif False:
    PostgreSqlConnectionInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PostgreSqlConnectionInfoArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 server_name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 encrypt_connection: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 trust_server_certificate: Optional[pulumi.Input[bool]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Information for connecting to PostgreSQL server
        :param pulumi.Input[int] port: Port for Server
        :param pulumi.Input[str] server_name: Name of the server
        :param pulumi.Input[str] type: Type of connection info
               Expected value is 'PostgreSqlConnectionInfo'.
        :param pulumi.Input[str] database_name: Name of the database
        :param pulumi.Input[bool] encrypt_connection: Whether to encrypt the connection
        :param pulumi.Input[str] password: Password credential.
        :param pulumi.Input[bool] trust_server_certificate: Whether to trust the server certificate
        :param pulumi.Input[str] user_name: User name
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "type", 'PostgreSqlConnectionInfo')
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if encrypt_connection is None:
            encrypt_connection = True
        if encrypt_connection is not None:
            pulumi.set(__self__, "encrypt_connection", encrypt_connection)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if trust_server_certificate is None:
            trust_server_certificate = False
        if trust_server_certificate is not None:
            pulumi.set(__self__, "trust_server_certificate", trust_server_certificate)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port for Server
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> pulumi.Input[str]:
        """
        Name of the server
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of connection info
        Expected value is 'PostgreSqlConnectionInfo'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="encryptConnection")
    def encrypt_connection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to encrypt the connection
        """
        return pulumi.get(self, "encrypt_connection")

    @encrypt_connection.setter
    def encrypt_connection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt_connection", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="trustServerCertificate")
    def trust_server_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to trust the server certificate
        """
        return pulumi.get(self, "trust_server_certificate")

    @trust_server_certificate.setter
    def trust_server_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_server_certificate", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class ProjectFilePropertiesArgsDict(TypedDict):
        """
        Base class for file properties.
        """
        extension: NotRequired[pulumi.Input[str]]
        """
        Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
        """
        file_path: NotRequired[pulumi.Input[str]]
        """
        Relative path of this file resource. This property can be set when creating or updating the file resource.
        """
        media_type: NotRequired[pulumi.Input[str]]
        """
        File content type. This property can be modified to reflect the file content type.
        """
elif False:
    ProjectFilePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectFilePropertiesArgs:
    def __init__(__self__, *,
                 extension: Optional[pulumi.Input[str]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 media_type: Optional[pulumi.Input[str]] = None):
        """
        Base class for file properties.
        :param pulumi.Input[str] extension: Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
        :param pulumi.Input[str] file_path: Relative path of this file resource. This property can be set when creating or updating the file resource.
        :param pulumi.Input[str] media_type: File content type. This property can be modified to reflect the file content type.
        """
        if extension is not None:
            pulumi.set(__self__, "extension", extension)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)

    @property
    @pulumi.getter
    def extension(self) -> Optional[pulumi.Input[str]]:
        """
        Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
        """
        return pulumi.get(self, "extension")

    @extension.setter
    def extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[str]]:
        """
        Relative path of this file resource. This property can be set when creating or updating the file resource.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[pulumi.Input[str]]:
        """
        File content type. This property can be modified to reflect the file content type.
        """
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "media_type", value)


if not MYPY:
    class SelectedCertificateInputArgsDict(TypedDict):
        """
        Info for certificate to be exported for TDE enabled databases.
        """
        certificate_name: pulumi.Input[str]
        """
        Name of certificate to be exported.
        """
        password: pulumi.Input[str]
        """
        Password to use for encrypting the exported certificate.
        """
elif False:
    SelectedCertificateInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SelectedCertificateInputArgs:
    def __init__(__self__, *,
                 certificate_name: pulumi.Input[str],
                 password: pulumi.Input[str]):
        """
        Info for certificate to be exported for TDE enabled databases.
        :param pulumi.Input[str] certificate_name: Name of certificate to be exported.
        :param pulumi.Input[str] password: Password to use for encrypting the exported certificate.
        """
        pulumi.set(__self__, "certificate_name", certificate_name)
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> pulumi.Input[str]:
        """
        Name of certificate to be exported.
        """
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Password to use for encrypting the exported certificate.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)


if not MYPY:
    class ServiceSkuArgsDict(TypedDict):
        """
        An Azure SKU instance
        """
        capacity: NotRequired[pulumi.Input[int]]
        """
        The capacity of the SKU, if it supports scaling
        """
        family: NotRequired[pulumi.Input[str]]
        """
        The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The unique name of the SKU, such as 'P3'
        """
        size: NotRequired[pulumi.Input[str]]
        """
        The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
        """
        tier: NotRequired[pulumi.Input[str]]
        """
        The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
        """
elif False:
    ServiceSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceSkuArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        """
        An Azure SKU instance
        :param pulumi.Input[int] capacity: The capacity of the SKU, if it supports scaling
        :param pulumi.Input[str] family: The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
        :param pulumi.Input[str] name: The unique name of the SKU, such as 'P3'
        :param pulumi.Input[str] size: The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
        :param pulumi.Input[str] tier: The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        The capacity of the SKU, if it supports scaling
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique name of the SKU, such as 'P3'
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class SqlConnectionInformationArgsDict(TypedDict):
        """
        Source SQL Connection
        """
        authentication: NotRequired[pulumi.Input[str]]
        """
        Authentication type.
        """
        data_source: NotRequired[pulumi.Input[str]]
        """
        Data source.
        """
        encrypt_connection: NotRequired[pulumi.Input[bool]]
        """
        Whether to encrypt connection or not.
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password to connect to source SQL.
        """
        trust_server_certificate: NotRequired[pulumi.Input[bool]]
        """
        Whether to trust server certificate or not.
        """
        user_name: NotRequired[pulumi.Input[str]]
        """
        User name to connect to source SQL.
        """
elif False:
    SqlConnectionInformationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SqlConnectionInformationArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None,
                 encrypt_connection: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 trust_server_certificate: Optional[pulumi.Input[bool]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Source SQL Connection
        :param pulumi.Input[str] authentication: Authentication type.
        :param pulumi.Input[str] data_source: Data source.
        :param pulumi.Input[bool] encrypt_connection: Whether to encrypt connection or not.
        :param pulumi.Input[str] password: Password to connect to source SQL.
        :param pulumi.Input[bool] trust_server_certificate: Whether to trust server certificate or not.
        :param pulumi.Input[str] user_name: User name to connect to source SQL.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if encrypt_connection is not None:
            pulumi.set(__self__, "encrypt_connection", encrypt_connection)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if trust_server_certificate is not None:
            pulumi.set(__self__, "trust_server_certificate", trust_server_certificate)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        Data source.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter(name="encryptConnection")
    def encrypt_connection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to encrypt connection or not.
        """
        return pulumi.get(self, "encrypt_connection")

    @encrypt_connection.setter
    def encrypt_connection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt_connection", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to connect to source SQL.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="trustServerCertificate")
    def trust_server_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to trust server certificate or not.
        """
        return pulumi.get(self, "trust_server_certificate")

    @trust_server_certificate.setter
    def trust_server_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_server_certificate", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name to connect to source SQL.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class SqlConnectionInfoArgsDict(TypedDict):
        """
        Information for connecting to SQL database server
        """
        data_source: pulumi.Input[str]
        """
        Data source in the format Protocol:MachineName\\SQLServerInstanceName,PortNumber
        """
        type: pulumi.Input[str]
        """
        Type of connection info
        Expected value is 'SqlConnectionInfo'.
        """
        additional_settings: NotRequired[pulumi.Input[str]]
        """
        Additional connection settings
        """
        authentication: NotRequired[pulumi.Input[Union[str, 'AuthenticationType']]]
        """
        Authentication type to use for connection
        """
        encrypt_connection: NotRequired[pulumi.Input[bool]]
        """
        Whether to encrypt the connection
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password credential.
        """
        platform: NotRequired[pulumi.Input[Union[str, 'SqlSourcePlatform']]]
        """
        Server platform type for connection
        """
        trust_server_certificate: NotRequired[pulumi.Input[bool]]
        """
        Whether to trust the server certificate
        """
        user_name: NotRequired[pulumi.Input[str]]
        """
        User name
        """
elif False:
    SqlConnectionInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SqlConnectionInfoArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 type: pulumi.Input[str],
                 additional_settings: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
                 encrypt_connection: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input[Union[str, 'SqlSourcePlatform']]] = None,
                 trust_server_certificate: Optional[pulumi.Input[bool]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Information for connecting to SQL database server
        :param pulumi.Input[str] data_source: Data source in the format Protocol:MachineName\\SQLServerInstanceName,PortNumber
        :param pulumi.Input[str] type: Type of connection info
               Expected value is 'SqlConnectionInfo'.
        :param pulumi.Input[str] additional_settings: Additional connection settings
        :param pulumi.Input[Union[str, 'AuthenticationType']] authentication: Authentication type to use for connection
        :param pulumi.Input[bool] encrypt_connection: Whether to encrypt the connection
        :param pulumi.Input[str] password: Password credential.
        :param pulumi.Input[Union[str, 'SqlSourcePlatform']] platform: Server platform type for connection
        :param pulumi.Input[bool] trust_server_certificate: Whether to trust the server certificate
        :param pulumi.Input[str] user_name: User name
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "type", 'SqlConnectionInfo')
        if additional_settings is not None:
            pulumi.set(__self__, "additional_settings", additional_settings)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if encrypt_connection is None:
            encrypt_connection = True
        if encrypt_connection is not None:
            pulumi.set(__self__, "encrypt_connection", encrypt_connection)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if trust_server_certificate is None:
            trust_server_certificate = False
        if trust_server_certificate is not None:
            pulumi.set(__self__, "trust_server_certificate", trust_server_certificate)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        Data source in the format Protocol:MachineName\\SQLServerInstanceName,PortNumber
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of connection info
        Expected value is 'SqlConnectionInfo'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="additionalSettings")
    def additional_settings(self) -> Optional[pulumi.Input[str]]:
        """
        Additional connection settings
        """
        return pulumi.get(self, "additional_settings")

    @additional_settings.setter
    def additional_settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_settings", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[Union[str, 'AuthenticationType']]]:
        """
        Authentication type to use for connection
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[Union[str, 'AuthenticationType']]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="encryptConnection")
    def encrypt_connection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to encrypt the connection
        """
        return pulumi.get(self, "encrypt_connection")

    @encrypt_connection.setter
    def encrypt_connection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt_connection", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[Union[str, 'SqlSourcePlatform']]]:
        """
        Server platform type for connection
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[Union[str, 'SqlSourcePlatform']]]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="trustServerCertificate")
    def trust_server_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to trust the server certificate
        """
        return pulumi.get(self, "trust_server_certificate")

    @trust_server_certificate.setter
    def trust_server_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_server_certificate", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class SsisMigrationInfoArgsDict(TypedDict):
        """
        SSIS migration info with SSIS store type, overwrite policy.
        """
        environment_overwrite_option: NotRequired[pulumi.Input[Union[str, 'SsisMigrationOverwriteOption']]]
        """
        The overwrite option for the SSIS environment migration
        """
        project_overwrite_option: NotRequired[pulumi.Input[Union[str, 'SsisMigrationOverwriteOption']]]
        """
        The overwrite option for the SSIS project migration
        """
        ssis_store_type: NotRequired[pulumi.Input[Union[str, 'SsisStoreType']]]
        """
        The SSIS store type of source, only SSIS catalog is supported now in DMS
        """
elif False:
    SsisMigrationInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SsisMigrationInfoArgs:
    def __init__(__self__, *,
                 environment_overwrite_option: Optional[pulumi.Input[Union[str, 'SsisMigrationOverwriteOption']]] = None,
                 project_overwrite_option: Optional[pulumi.Input[Union[str, 'SsisMigrationOverwriteOption']]] = None,
                 ssis_store_type: Optional[pulumi.Input[Union[str, 'SsisStoreType']]] = None):
        """
        SSIS migration info with SSIS store type, overwrite policy.
        :param pulumi.Input[Union[str, 'SsisMigrationOverwriteOption']] environment_overwrite_option: The overwrite option for the SSIS environment migration
        :param pulumi.Input[Union[str, 'SsisMigrationOverwriteOption']] project_overwrite_option: The overwrite option for the SSIS project migration
        :param pulumi.Input[Union[str, 'SsisStoreType']] ssis_store_type: The SSIS store type of source, only SSIS catalog is supported now in DMS
        """
        if environment_overwrite_option is not None:
            pulumi.set(__self__, "environment_overwrite_option", environment_overwrite_option)
        if project_overwrite_option is not None:
            pulumi.set(__self__, "project_overwrite_option", project_overwrite_option)
        if ssis_store_type is not None:
            pulumi.set(__self__, "ssis_store_type", ssis_store_type)

    @property
    @pulumi.getter(name="environmentOverwriteOption")
    def environment_overwrite_option(self) -> Optional[pulumi.Input[Union[str, 'SsisMigrationOverwriteOption']]]:
        """
        The overwrite option for the SSIS environment migration
        """
        return pulumi.get(self, "environment_overwrite_option")

    @environment_overwrite_option.setter
    def environment_overwrite_option(self, value: Optional[pulumi.Input[Union[str, 'SsisMigrationOverwriteOption']]]):
        pulumi.set(self, "environment_overwrite_option", value)

    @property
    @pulumi.getter(name="projectOverwriteOption")
    def project_overwrite_option(self) -> Optional[pulumi.Input[Union[str, 'SsisMigrationOverwriteOption']]]:
        """
        The overwrite option for the SSIS project migration
        """
        return pulumi.get(self, "project_overwrite_option")

    @project_overwrite_option.setter
    def project_overwrite_option(self, value: Optional[pulumi.Input[Union[str, 'SsisMigrationOverwriteOption']]]):
        pulumi.set(self, "project_overwrite_option", value)

    @property
    @pulumi.getter(name="ssisStoreType")
    def ssis_store_type(self) -> Optional[pulumi.Input[Union[str, 'SsisStoreType']]]:
        """
        The SSIS store type of source, only SSIS catalog is supported now in DMS
        """
        return pulumi.get(self, "ssis_store_type")

    @ssis_store_type.setter
    def ssis_store_type(self, value: Optional[pulumi.Input[Union[str, 'SsisStoreType']]]):
        pulumi.set(self, "ssis_store_type", value)


if not MYPY:
    class ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ValidateMigrationInput.SqlServer.SqlDb.Sync'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ValidateSyncMigrationInputSqlServerTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ValidateSyncMigrationInputSqlServerTaskInputArgs']] = None):
        """
        Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ValidateMigrationInput.SqlServer.SqlDb.Sync'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ValidateSyncMigrationInputSqlServerTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ValidateMigrationInput.SqlServer.SqlDb.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ValidateMigrationInput.SqlServer.SqlDb.Sync'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ValidateSyncMigrationInputSqlServerTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ValidateSyncMigrationInputSqlServerTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ValidateMigrationInputSqlServerSqlMISyncTaskInputArgsDict(TypedDict):
        """
        Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
        """
        azure_app: pulumi.Input['AzureActiveDirectoryAppArgsDict']
        """
        Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgsDict']]]
        """
        Databases to migrate
        """
        source_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Connection information for source SQL Server
        """
        storage_resource_id: pulumi.Input[str]
        """
        Fully qualified resourceId of storage
        """
        target_connection_info: pulumi.Input['MiSqlConnectionInfoArgsDict']
        """
        Connection information for Azure SQL Database Managed Instance
        """
        backup_file_share: NotRequired[pulumi.Input['FileShareArgsDict']]
        """
        Backup file share information for all selected databases.
        """
elif False:
    ValidateMigrationInputSqlServerSqlMISyncTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs:
    def __init__(__self__, *,
                 azure_app: pulumi.Input['AzureActiveDirectoryAppArgs'],
                 selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]],
                 source_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 storage_resource_id: pulumi.Input[str],
                 target_connection_info: pulumi.Input['MiSqlConnectionInfoArgs'],
                 backup_file_share: Optional[pulumi.Input['FileShareArgs']] = None):
        """
        Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
        :param pulumi.Input['AzureActiveDirectoryAppArgs'] azure_app: Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        :param pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]] selected_databases: Databases to migrate
        :param pulumi.Input['SqlConnectionInfoArgs'] source_connection_info: Connection information for source SQL Server
        :param pulumi.Input[str] storage_resource_id: Fully qualified resourceId of storage
        :param pulumi.Input['MiSqlConnectionInfoArgs'] target_connection_info: Connection information for Azure SQL Database Managed Instance
        :param pulumi.Input['FileShareArgs'] backup_file_share: Backup file share information for all selected databases.
        """
        pulumi.set(__self__, "azure_app", azure_app)
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "storage_resource_id", storage_resource_id)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if backup_file_share is not None:
            pulumi.set(__self__, "backup_file_share", backup_file_share)

    @property
    @pulumi.getter(name="azureApp")
    def azure_app(self) -> pulumi.Input['AzureActiveDirectoryAppArgs']:
        """
        Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        """
        return pulumi.get(self, "azure_app")

    @azure_app.setter
    def azure_app(self, value: pulumi.Input['AzureActiveDirectoryAppArgs']):
        pulumi.set(self, "azure_app", value)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]]:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]]):
        pulumi.set(self, "selected_databases", value)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Connection information for source SQL Server
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="storageResourceId")
    def storage_resource_id(self) -> pulumi.Input[str]:
        """
        Fully qualified resourceId of storage
        """
        return pulumi.get(self, "storage_resource_id")

    @storage_resource_id.setter
    def storage_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_resource_id", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['MiSqlConnectionInfoArgs']:
        """
        Connection information for Azure SQL Database Managed Instance
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['MiSqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)

    @property
    @pulumi.getter(name="backupFileShare")
    def backup_file_share(self) -> Optional[pulumi.Input['FileShareArgs']]:
        """
        Backup file share information for all selected databases.
        """
        return pulumi.get(self, "backup_file_share")

    @backup_file_share.setter
    def backup_file_share(self, value: Optional[pulumi.Input['FileShareArgs']]):
        pulumi.set(self, "backup_file_share", value)


if not MYPY:
    class ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ValidateMigrationInputSqlServerSqlMISyncTaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs']] = None):
        """
        Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ValidateMigrationInputSqlServerSqlMITaskInputArgsDict(TypedDict):
        """
        Input for task that validates migration input for SQL to Azure SQL Managed Instance
        """
        backup_blob_share: pulumi.Input['BlobShareArgsDict']
        """
        SAS URI of Azure Storage Account Container to be used for storing backup files.
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgsDict']]]
        """
        Databases to migrate
        """
        source_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Information for connecting to source
        """
        target_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Information for connecting to target
        """
        backup_file_share: NotRequired[pulumi.Input['FileShareArgsDict']]
        """
        Backup file share information for all selected databases.
        """
        backup_mode: NotRequired[pulumi.Input[Union[str, 'BackupMode']]]
        """
        Backup Mode to specify whether to use existing backup or create new backup.
        """
        selected_logins: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Logins to migrate
        """
elif False:
    ValidateMigrationInputSqlServerSqlMITaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ValidateMigrationInputSqlServerSqlMITaskInputArgs:
    def __init__(__self__, *,
                 backup_blob_share: pulumi.Input['BlobShareArgs'],
                 selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]],
                 source_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 backup_file_share: Optional[pulumi.Input['FileShareArgs']] = None,
                 backup_mode: Optional[pulumi.Input[Union[str, 'BackupMode']]] = None,
                 selected_logins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input for task that validates migration input for SQL to Azure SQL Managed Instance
        :param pulumi.Input['BlobShareArgs'] backup_blob_share: SAS URI of Azure Storage Account Container to be used for storing backup files.
        :param pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]] selected_databases: Databases to migrate
        :param pulumi.Input['SqlConnectionInfoArgs'] source_connection_info: Information for connecting to source
        :param pulumi.Input['SqlConnectionInfoArgs'] target_connection_info: Information for connecting to target
        :param pulumi.Input['FileShareArgs'] backup_file_share: Backup file share information for all selected databases.
        :param pulumi.Input[Union[str, 'BackupMode']] backup_mode: Backup Mode to specify whether to use existing backup or create new backup.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] selected_logins: Logins to migrate
        """
        pulumi.set(__self__, "backup_blob_share", backup_blob_share)
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if backup_file_share is not None:
            pulumi.set(__self__, "backup_file_share", backup_file_share)
        if backup_mode is not None:
            pulumi.set(__self__, "backup_mode", backup_mode)
        if selected_logins is not None:
            pulumi.set(__self__, "selected_logins", selected_logins)

    @property
    @pulumi.getter(name="backupBlobShare")
    def backup_blob_share(self) -> pulumi.Input['BlobShareArgs']:
        """
        SAS URI of Azure Storage Account Container to be used for storing backup files.
        """
        return pulumi.get(self, "backup_blob_share")

    @backup_blob_share.setter
    def backup_blob_share(self, value: pulumi.Input['BlobShareArgs']):
        pulumi.set(self, "backup_blob_share", value)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]]:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlMIDatabaseInputArgs']]]):
        pulumi.set(self, "selected_databases", value)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Information for connecting to source
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Information for connecting to target
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)

    @property
    @pulumi.getter(name="backupFileShare")
    def backup_file_share(self) -> Optional[pulumi.Input['FileShareArgs']]:
        """
        Backup file share information for all selected databases.
        """
        return pulumi.get(self, "backup_file_share")

    @backup_file_share.setter
    def backup_file_share(self, value: Optional[pulumi.Input['FileShareArgs']]):
        pulumi.set(self, "backup_file_share", value)

    @property
    @pulumi.getter(name="backupMode")
    def backup_mode(self) -> Optional[pulumi.Input[Union[str, 'BackupMode']]]:
        """
        Backup Mode to specify whether to use existing backup or create new backup.
        """
        return pulumi.get(self, "backup_mode")

    @backup_mode.setter
    def backup_mode(self, value: Optional[pulumi.Input[Union[str, 'BackupMode']]]):
        pulumi.set(self, "backup_mode", value)

    @property
    @pulumi.getter(name="selectedLogins")
    def selected_logins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Logins to migrate
        """
        return pulumi.get(self, "selected_logins")

    @selected_logins.setter
    def selected_logins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "selected_logins", value)


if not MYPY:
    class ValidateMigrationInputSqlServerSqlMITaskPropertiesArgsDict(TypedDict):
        """
        Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['ValidateMigrationInputSqlServerSqlMITaskInputArgsDict']]
        """
        Task input
        """
elif False:
    ValidateMigrationInputSqlServerSqlMITaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['ValidateMigrationInputSqlServerSqlMITaskInputArgs']] = None):
        """
        Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['ValidateMigrationInputSqlServerSqlMITaskInputArgs'] input: Task input
        """
        pulumi.set(__self__, "task_type", 'ValidateMigrationInput.SqlServer.AzureSqlDbMI')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['ValidateMigrationInputSqlServerSqlMITaskInputArgs']]:
        """
        Task input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['ValidateMigrationInputSqlServerSqlMITaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ValidateMongoDbTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates a migration between MongoDB data sources
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Validate.MongoDb'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MongoDbMigrationSettingsArgsDict']]
        """
        Describes how a MongoDB data migration should be performed
        """
elif False:
    ValidateMongoDbTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ValidateMongoDbTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MongoDbMigrationSettingsArgs']] = None):
        """
        Properties for the task that validates a migration between MongoDB data sources
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Validate.MongoDb'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MongoDbMigrationSettingsArgs'] input: Describes how a MongoDB data migration should be performed
        """
        pulumi.set(__self__, "task_type", 'Validate.MongoDb')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Validate.MongoDb'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MongoDbMigrationSettingsArgs']]:
        """
        Describes how a MongoDB data migration should be performed
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MongoDbMigrationSettingsArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgsDict(TypedDict):
        """
        Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
        """
        task_type: pulumi.Input[str]
        """
        Task type.
        Expected value is 'Validate.Oracle.AzureDbPostgreSql.Sync'.
        """
        client_data: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key value pairs of client data to attach meta data information to task
        """
        input: NotRequired[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncTaskInputArgsDict']]
        """
        Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
        """
elif False:
    ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs:
    def __init__(__self__, *,
                 task_type: pulumi.Input[str],
                 client_data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs']] = None):
        """
        Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
        :param pulumi.Input[str] task_type: Task type.
               Expected value is 'Validate.Oracle.AzureDbPostgreSql.Sync'.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] client_data: Key value pairs of client data to attach meta data information to task
        :param pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs'] input: Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
        """
        pulumi.set(__self__, "task_type", 'Validate.Oracle.AzureDbPostgreSql.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Task type.
        Expected value is 'Validate.Oracle.AzureDbPostgreSql.Sync'.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @client_data.setter
    def client_data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "client_data", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs']]:
        """
        Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs']]):
        pulumi.set(self, "input", value)


if not MYPY:
    class ValidateSyncMigrationInputSqlServerTaskInputArgsDict(TypedDict):
        """
        Input for task that validates migration input for SQL sync migrations
        """
        selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbSyncDatabaseInputArgsDict']]]
        """
        Databases to migrate
        """
        source_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Information for connecting to source SQL server
        """
        target_connection_info: pulumi.Input['SqlConnectionInfoArgsDict']
        """
        Information for connecting to target
        """
elif False:
    ValidateSyncMigrationInputSqlServerTaskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ValidateSyncMigrationInputSqlServerTaskInputArgs:
    def __init__(__self__, *,
                 selected_databases: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbSyncDatabaseInputArgs']]],
                 source_connection_info: pulumi.Input['SqlConnectionInfoArgs'],
                 target_connection_info: pulumi.Input['SqlConnectionInfoArgs']):
        """
        Input for task that validates migration input for SQL sync migrations
        :param pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbSyncDatabaseInputArgs']]] selected_databases: Databases to migrate
        :param pulumi.Input['SqlConnectionInfoArgs'] source_connection_info: Information for connecting to source SQL server
        :param pulumi.Input['SqlConnectionInfoArgs'] target_connection_info: Information for connecting to target
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbSyncDatabaseInputArgs']]]:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @selected_databases.setter
    def selected_databases(self, value: pulumi.Input[Sequence[pulumi.Input['MigrateSqlServerSqlDbSyncDatabaseInputArgs']]]):
        pulumi.set(self, "selected_databases", value)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Information for connecting to source SQL server
        """
        return pulumi.get(self, "source_connection_info")

    @source_connection_info.setter
    def source_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "source_connection_info", value)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> pulumi.Input['SqlConnectionInfoArgs']:
        """
        Information for connecting to target
        """
        return pulumi.get(self, "target_connection_info")

    @target_connection_info.setter
    def target_connection_info(self, value: pulumi.Input['SqlConnectionInfoArgs']):
        pulumi.set(self, "target_connection_info", value)


