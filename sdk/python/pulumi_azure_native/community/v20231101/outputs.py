# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'IdentityConfigurationPropertiesResponse',
    'SkuResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class IdentityConfigurationPropertiesResponse(dict):
    """
    Details of the Community CommunityTraining Identity Configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "domainName":
            suggest = "domain_name"
        elif key == "identityType":
            suggest = "identity_type"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "b2cAuthenticationPolicy":
            suggest = "b2c_authentication_policy"
        elif key == "b2cPasswordResetPolicy":
            suggest = "b2c_password_reset_policy"
        elif key == "customLoginParameters":
            suggest = "custom_login_parameters"
        elif key == "teamsEnabled":
            suggest = "teams_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityConfigurationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityConfigurationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityConfigurationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 domain_name: str,
                 identity_type: str,
                 tenant_id: str,
                 b2c_authentication_policy: Optional[str] = None,
                 b2c_password_reset_policy: Optional[str] = None,
                 custom_login_parameters: Optional[str] = None,
                 teams_enabled: Optional[bool] = None):
        """
        Details of the Community CommunityTraining Identity Configuration
        :param str client_id: The clientId of the application registered in the selected identity provider for the Community Training Resource
        :param str client_secret: The client secret of the application registered in the selected identity provider for the Community Training Resource
        :param str domain_name: The domain name of the selected identity provider for the Community Training Resource
        :param str identity_type: The identity type of the Community Training Resource
        :param str tenant_id: The tenantId of the selected identity provider for the Community Training Resource
        :param str b2c_authentication_policy: The name of the authentication policy registered in ADB2C for the Community Training Resource
        :param str b2c_password_reset_policy: The name of the password reset policy registered in ADB2C for the Community Training Resource
        :param str custom_login_parameters: The custom login parameters for the Community Training Resource
        :param bool teams_enabled: To indicate whether the Community Training Resource has Teams enabled
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "identity_type", identity_type)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if b2c_authentication_policy is not None:
            pulumi.set(__self__, "b2c_authentication_policy", b2c_authentication_policy)
        if b2c_password_reset_policy is not None:
            pulumi.set(__self__, "b2c_password_reset_policy", b2c_password_reset_policy)
        if custom_login_parameters is not None:
            pulumi.set(__self__, "custom_login_parameters", custom_login_parameters)
        if teams_enabled is None:
            teams_enabled = False
        if teams_enabled is not None:
            pulumi.set(__self__, "teams_enabled", teams_enabled)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The clientId of the application registered in the selected identity provider for the Community Training Resource
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        The client secret of the application registered in the selected identity provider for the Community Training Resource
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        The domain name of the selected identity provider for the Community Training Resource
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="identityType")
    def identity_type(self) -> str:
        """
        The identity type of the Community Training Resource
        """
        return pulumi.get(self, "identity_type")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenantId of the selected identity provider for the Community Training Resource
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="b2cAuthenticationPolicy")
    def b2c_authentication_policy(self) -> Optional[str]:
        """
        The name of the authentication policy registered in ADB2C for the Community Training Resource
        """
        return pulumi.get(self, "b2c_authentication_policy")

    @property
    @pulumi.getter(name="b2cPasswordResetPolicy")
    def b2c_password_reset_policy(self) -> Optional[str]:
        """
        The name of the password reset policy registered in ADB2C for the Community Training Resource
        """
        return pulumi.get(self, "b2c_password_reset_policy")

    @property
    @pulumi.getter(name="customLoginParameters")
    def custom_login_parameters(self) -> Optional[str]:
        """
        The custom login parameters for the Community Training Resource
        """
        return pulumi.get(self, "custom_login_parameters")

    @property
    @pulumi.getter(name="teamsEnabled")
    def teams_enabled(self) -> Optional[bool]:
        """
        To indicate whether the Community Training Resource has Teams enabled
        """
        return pulumi.get(self, "teams_enabled")


@pulumi.output_type
class SkuResponse(dict):
    """
    The resource model definition representing SKU
    """
    def __init__(__self__, *,
                 name: str,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        The resource model definition representing SKU
        :param str name: The name of the SKU. Ex - P3. It is typically a letter+number code
        :param int capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param str family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param str size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param str tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


