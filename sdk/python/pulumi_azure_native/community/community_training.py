# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['CommunityTrainingArgs', 'CommunityTraining']

@pulumi.input_type
class CommunityTrainingArgs:
    def __init__(__self__, *,
                 disaster_recovery_enabled: pulumi.Input[bool],
                 identity_configuration: pulumi.Input['IdentityConfigurationPropertiesArgs'],
                 portal_admin_email_address: pulumi.Input[str],
                 portal_name: pulumi.Input[str],
                 portal_owner_email_address: pulumi.Input[str],
                 portal_owner_organization_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 zone_redundancy_enabled: pulumi.Input[bool],
                 community_training_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input['SkuArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a CommunityTraining resource.
        :param pulumi.Input[bool] disaster_recovery_enabled: To indicate whether the Community Training instance has Disaster Recovery enabled
        :param pulumi.Input['IdentityConfigurationPropertiesArgs'] identity_configuration: The identity configuration of the Community Training resource
        :param pulumi.Input[str] portal_admin_email_address: The email address of the portal admin
        :param pulumi.Input[str] portal_name: The portal name (website name) of the Community Training instance
        :param pulumi.Input[str] portal_owner_email_address: The email address of the portal owner. Will be used as the primary contact
        :param pulumi.Input[str] portal_owner_organization_name: The organization name of the portal owner
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[bool] zone_redundancy_enabled: To indicate whether the Community Training instance has Zone Redundancy enabled
        :param pulumi.Input[str] community_training_name: The name of the Community Training Resource
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input['SkuArgs'] sku: The SKU (Stock Keeping Unit) assigned to this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "disaster_recovery_enabled", disaster_recovery_enabled)
        pulumi.set(__self__, "identity_configuration", identity_configuration)
        pulumi.set(__self__, "portal_admin_email_address", portal_admin_email_address)
        pulumi.set(__self__, "portal_name", portal_name)
        pulumi.set(__self__, "portal_owner_email_address", portal_owner_email_address)
        pulumi.set(__self__, "portal_owner_organization_name", portal_owner_organization_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "zone_redundancy_enabled", zone_redundancy_enabled)
        if community_training_name is not None:
            pulumi.set(__self__, "community_training_name", community_training_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="disasterRecoveryEnabled")
    def disaster_recovery_enabled(self) -> pulumi.Input[bool]:
        """
        To indicate whether the Community Training instance has Disaster Recovery enabled
        """
        return pulumi.get(self, "disaster_recovery_enabled")

    @disaster_recovery_enabled.setter
    def disaster_recovery_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "disaster_recovery_enabled", value)

    @property
    @pulumi.getter(name="identityConfiguration")
    def identity_configuration(self) -> pulumi.Input['IdentityConfigurationPropertiesArgs']:
        """
        The identity configuration of the Community Training resource
        """
        return pulumi.get(self, "identity_configuration")

    @identity_configuration.setter
    def identity_configuration(self, value: pulumi.Input['IdentityConfigurationPropertiesArgs']):
        pulumi.set(self, "identity_configuration", value)

    @property
    @pulumi.getter(name="portalAdminEmailAddress")
    def portal_admin_email_address(self) -> pulumi.Input[str]:
        """
        The email address of the portal admin
        """
        return pulumi.get(self, "portal_admin_email_address")

    @portal_admin_email_address.setter
    def portal_admin_email_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "portal_admin_email_address", value)

    @property
    @pulumi.getter(name="portalName")
    def portal_name(self) -> pulumi.Input[str]:
        """
        The portal name (website name) of the Community Training instance
        """
        return pulumi.get(self, "portal_name")

    @portal_name.setter
    def portal_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "portal_name", value)

    @property
    @pulumi.getter(name="portalOwnerEmailAddress")
    def portal_owner_email_address(self) -> pulumi.Input[str]:
        """
        The email address of the portal owner. Will be used as the primary contact
        """
        return pulumi.get(self, "portal_owner_email_address")

    @portal_owner_email_address.setter
    def portal_owner_email_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "portal_owner_email_address", value)

    @property
    @pulumi.getter(name="portalOwnerOrganizationName")
    def portal_owner_organization_name(self) -> pulumi.Input[str]:
        """
        The organization name of the portal owner
        """
        return pulumi.get(self, "portal_owner_organization_name")

    @portal_owner_organization_name.setter
    def portal_owner_organization_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "portal_owner_organization_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="zoneRedundancyEnabled")
    def zone_redundancy_enabled(self) -> pulumi.Input[bool]:
        """
        To indicate whether the Community Training instance has Zone Redundancy enabled
        """
        return pulumi.get(self, "zone_redundancy_enabled")

    @zone_redundancy_enabled.setter
    def zone_redundancy_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "zone_redundancy_enabled", value)

    @property
    @pulumi.getter(name="communityTrainingName")
    def community_training_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Community Training Resource
        """
        return pulumi.get(self, "community_training_name")

    @community_training_name.setter
    def community_training_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_training_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['SkuArgs']]:
        """
        The SKU (Stock Keeping Unit) assigned to this resource.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['SkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class CommunityTraining(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 community_training_name: Optional[pulumi.Input[str]] = None,
                 disaster_recovery_enabled: Optional[pulumi.Input[bool]] = None,
                 identity_configuration: Optional[pulumi.Input[pulumi.InputType['IdentityConfigurationPropertiesArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 portal_admin_email_address: Optional[pulumi.Input[str]] = None,
                 portal_name: Optional[pulumi.Input[str]] = None,
                 portal_owner_email_address: Optional[pulumi.Input[str]] = None,
                 portal_owner_organization_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[pulumi.InputType['SkuArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone_redundancy_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        A CommunityProviderHub resource
        Azure REST API version: 2023-11-01.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] community_training_name: The name of the Community Training Resource
        :param pulumi.Input[bool] disaster_recovery_enabled: To indicate whether the Community Training instance has Disaster Recovery enabled
        :param pulumi.Input[pulumi.InputType['IdentityConfigurationPropertiesArgs']] identity_configuration: The identity configuration of the Community Training resource
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] portal_admin_email_address: The email address of the portal admin
        :param pulumi.Input[str] portal_name: The portal name (website name) of the Community Training instance
        :param pulumi.Input[str] portal_owner_email_address: The email address of the portal owner. Will be used as the primary contact
        :param pulumi.Input[str] portal_owner_organization_name: The organization name of the portal owner
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[pulumi.InputType['SkuArgs']] sku: The SKU (Stock Keeping Unit) assigned to this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[bool] zone_redundancy_enabled: To indicate whether the Community Training instance has Zone Redundancy enabled
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CommunityTrainingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A CommunityProviderHub resource
        Azure REST API version: 2023-11-01.

        :param str resource_name: The name of the resource.
        :param CommunityTrainingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CommunityTrainingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 community_training_name: Optional[pulumi.Input[str]] = None,
                 disaster_recovery_enabled: Optional[pulumi.Input[bool]] = None,
                 identity_configuration: Optional[pulumi.Input[pulumi.InputType['IdentityConfigurationPropertiesArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 portal_admin_email_address: Optional[pulumi.Input[str]] = None,
                 portal_name: Optional[pulumi.Input[str]] = None,
                 portal_owner_email_address: Optional[pulumi.Input[str]] = None,
                 portal_owner_organization_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[pulumi.InputType['SkuArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone_redundancy_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CommunityTrainingArgs.__new__(CommunityTrainingArgs)

            __props__.__dict__["community_training_name"] = community_training_name
            if disaster_recovery_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'disaster_recovery_enabled'")
            __props__.__dict__["disaster_recovery_enabled"] = disaster_recovery_enabled
            if identity_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'identity_configuration'")
            __props__.__dict__["identity_configuration"] = identity_configuration
            __props__.__dict__["location"] = location
            if portal_admin_email_address is None and not opts.urn:
                raise TypeError("Missing required property 'portal_admin_email_address'")
            __props__.__dict__["portal_admin_email_address"] = portal_admin_email_address
            if portal_name is None and not opts.urn:
                raise TypeError("Missing required property 'portal_name'")
            __props__.__dict__["portal_name"] = portal_name
            if portal_owner_email_address is None and not opts.urn:
                raise TypeError("Missing required property 'portal_owner_email_address'")
            __props__.__dict__["portal_owner_email_address"] = portal_owner_email_address
            if portal_owner_organization_name is None and not opts.urn:
                raise TypeError("Missing required property 'portal_owner_organization_name'")
            __props__.__dict__["portal_owner_organization_name"] = portal_owner_organization_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["sku"] = sku
            __props__.__dict__["tags"] = tags
            if zone_redundancy_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'zone_redundancy_enabled'")
            __props__.__dict__["zone_redundancy_enabled"] = zone_redundancy_enabled
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:community/v20231101:CommunityTraining")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(CommunityTraining, __self__).__init__(
            'azure-native:community:CommunityTraining',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CommunityTraining':
        """
        Get an existing CommunityTraining resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CommunityTrainingArgs.__new__(CommunityTrainingArgs)

        __props__.__dict__["disaster_recovery_enabled"] = None
        __props__.__dict__["identity_configuration"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["portal_admin_email_address"] = None
        __props__.__dict__["portal_name"] = None
        __props__.__dict__["portal_owner_email_address"] = None
        __props__.__dict__["portal_owner_organization_name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["sku"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["zone_redundancy_enabled"] = None
        return CommunityTraining(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="disasterRecoveryEnabled")
    def disaster_recovery_enabled(self) -> pulumi.Output[bool]:
        """
        To indicate whether the Community Training instance has Disaster Recovery enabled
        """
        return pulumi.get(self, "disaster_recovery_enabled")

    @property
    @pulumi.getter(name="identityConfiguration")
    def identity_configuration(self) -> pulumi.Output['outputs.IdentityConfigurationPropertiesResponse']:
        """
        The identity configuration of the Community Training resource
        """
        return pulumi.get(self, "identity_configuration")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="portalAdminEmailAddress")
    def portal_admin_email_address(self) -> pulumi.Output[str]:
        """
        The email address of the portal admin
        """
        return pulumi.get(self, "portal_admin_email_address")

    @property
    @pulumi.getter(name="portalName")
    def portal_name(self) -> pulumi.Output[str]:
        """
        The portal name (website name) of the Community Training instance
        """
        return pulumi.get(self, "portal_name")

    @property
    @pulumi.getter(name="portalOwnerEmailAddress")
    def portal_owner_email_address(self) -> pulumi.Output[str]:
        """
        The email address of the portal owner. Will be used as the primary contact
        """
        return pulumi.get(self, "portal_owner_email_address")

    @property
    @pulumi.getter(name="portalOwnerOrganizationName")
    def portal_owner_organization_name(self) -> pulumi.Output[str]:
        """
        The organization name of the portal owner
        """
        return pulumi.get(self, "portal_owner_organization_name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Output[Optional['outputs.SkuResponse']]:
        """
        The SKU (Stock Keeping Unit) assigned to this resource.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="zoneRedundancyEnabled")
    def zone_redundancy_enabled(self) -> pulumi.Output[bool]:
        """
        To indicate whether the Community Training instance has Zone Redundancy enabled
        """
        return pulumi.get(self, "zone_redundancy_enabled")

