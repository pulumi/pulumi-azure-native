# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'IdentityConfigurationPropertiesArgs',
    'IdentityConfigurationPropertiesArgsDict',
    'SkuArgs',
    'SkuArgsDict',
]

MYPY = False

if not MYPY:
    class IdentityConfigurationPropertiesArgsDict(TypedDict):
        """
        Details of the Community CommunityTraining Identity Configuration
        """
        client_id: pulumi.Input[_builtins.str]
        """
        The clientId of the application registered in the selected identity provider for the Community Training Resource
        """
        client_secret: pulumi.Input[_builtins.str]
        """
        The client secret of the application registered in the selected identity provider for the Community Training Resource
        """
        domain_name: pulumi.Input[_builtins.str]
        """
        The domain name of the selected identity provider for the Community Training Resource
        """
        identity_type: pulumi.Input[_builtins.str]
        """
        The identity type of the Community Training Resource
        """
        tenant_id: pulumi.Input[_builtins.str]
        """
        The tenantId of the selected identity provider for the Community Training Resource
        """
        b2c_authentication_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the authentication policy registered in ADB2C for the Community Training Resource
        """
        b2c_password_reset_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the password reset policy registered in ADB2C for the Community Training Resource
        """
        custom_login_parameters: NotRequired[pulumi.Input[_builtins.str]]
        """
        The custom login parameters for the Community Training Resource
        """
        teams_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        To indicate whether the Community Training Resource has Teams enabled
        """
elif False:
    IdentityConfigurationPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityConfigurationPropertiesArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[_builtins.str],
                 client_secret: pulumi.Input[_builtins.str],
                 domain_name: pulumi.Input[_builtins.str],
                 identity_type: pulumi.Input[_builtins.str],
                 tenant_id: pulumi.Input[_builtins.str],
                 b2c_authentication_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 b2c_password_reset_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_login_parameters: Optional[pulumi.Input[_builtins.str]] = None,
                 teams_enabled: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Details of the Community CommunityTraining Identity Configuration
        :param pulumi.Input[_builtins.str] client_id: The clientId of the application registered in the selected identity provider for the Community Training Resource
        :param pulumi.Input[_builtins.str] client_secret: The client secret of the application registered in the selected identity provider for the Community Training Resource
        :param pulumi.Input[_builtins.str] domain_name: The domain name of the selected identity provider for the Community Training Resource
        :param pulumi.Input[_builtins.str] identity_type: The identity type of the Community Training Resource
        :param pulumi.Input[_builtins.str] tenant_id: The tenantId of the selected identity provider for the Community Training Resource
        :param pulumi.Input[_builtins.str] b2c_authentication_policy: The name of the authentication policy registered in ADB2C for the Community Training Resource
        :param pulumi.Input[_builtins.str] b2c_password_reset_policy: The name of the password reset policy registered in ADB2C for the Community Training Resource
        :param pulumi.Input[_builtins.str] custom_login_parameters: The custom login parameters for the Community Training Resource
        :param pulumi.Input[_builtins.bool] teams_enabled: To indicate whether the Community Training Resource has Teams enabled
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "identity_type", identity_type)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if b2c_authentication_policy is not None:
            pulumi.set(__self__, "b2c_authentication_policy", b2c_authentication_policy)
        if b2c_password_reset_policy is not None:
            pulumi.set(__self__, "b2c_password_reset_policy", b2c_password_reset_policy)
        if custom_login_parameters is not None:
            pulumi.set(__self__, "custom_login_parameters", custom_login_parameters)
        if teams_enabled is None:
            teams_enabled = False
        if teams_enabled is not None:
            pulumi.set(__self__, "teams_enabled", teams_enabled)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[_builtins.str]:
        """
        The clientId of the application registered in the selected identity provider for the Community Training Resource
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[_builtins.str]:
        """
        The client secret of the application registered in the selected identity provider for the Community Training Resource
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_secret", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        The domain name of the selected identity provider for the Community Training Resource
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="identityType")
    def identity_type(self) -> pulumi.Input[_builtins.str]:
        """
        The identity type of the Community Training Resource
        """
        return pulumi.get(self, "identity_type")

    @identity_type.setter
    def identity_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "identity_type", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        The tenantId of the selected identity provider for the Community Training Resource
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="b2cAuthenticationPolicy")
    def b2c_authentication_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the authentication policy registered in ADB2C for the Community Training Resource
        """
        return pulumi.get(self, "b2c_authentication_policy")

    @b2c_authentication_policy.setter
    def b2c_authentication_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "b2c_authentication_policy", value)

    @_builtins.property
    @pulumi.getter(name="b2cPasswordResetPolicy")
    def b2c_password_reset_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the password reset policy registered in ADB2C for the Community Training Resource
        """
        return pulumi.get(self, "b2c_password_reset_policy")

    @b2c_password_reset_policy.setter
    def b2c_password_reset_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "b2c_password_reset_policy", value)

    @_builtins.property
    @pulumi.getter(name="customLoginParameters")
    def custom_login_parameters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The custom login parameters for the Community Training Resource
        """
        return pulumi.get(self, "custom_login_parameters")

    @custom_login_parameters.setter
    def custom_login_parameters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "custom_login_parameters", value)

    @_builtins.property
    @pulumi.getter(name="teamsEnabled")
    def teams_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        To indicate whether the Community Training Resource has Teams enabled
        """
        return pulumi.get(self, "teams_enabled")

    @teams_enabled.setter
    def teams_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teams_enabled", value)


if not MYPY:
    class SkuArgsDict(TypedDict):
        """
        The resource model definition representing SKU
        """
        name: pulumi.Input[_builtins.str]
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        capacity: NotRequired[pulumi.Input[_builtins.int]]
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        family: NotRequired[pulumi.Input[_builtins.str]]
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        size: NotRequired[pulumi.Input[_builtins.str]]
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        tier: NotRequired[pulumi.Input['SkuTier']]
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
elif False:
    SkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 family: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.str]] = None,
                 tier: Optional[pulumi.Input['SkuTier']] = None):
        """
        The resource model definition representing SKU
        :param pulumi.Input[_builtins.str] name: The name of the SKU. Ex - P3. It is typically a letter+number code
        :param pulumi.Input[_builtins.int] capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param pulumi.Input[_builtins.str] family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param pulumi.Input[_builtins.str] size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param pulumi.Input['SkuTier'] tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "family", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input['SkuTier']]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input['SkuTier']]):
        pulumi.set(self, "tier", value)


