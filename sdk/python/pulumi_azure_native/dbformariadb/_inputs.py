# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'PrivateEndpointPropertyArgs',
    'PrivateEndpointPropertyArgsDict',
    'PrivateLinkServiceConnectionStatePropertyArgs',
    'PrivateLinkServiceConnectionStatePropertyArgsDict',
    'ServerPropertiesForDefaultCreateArgs',
    'ServerPropertiesForDefaultCreateArgsDict',
    'ServerPropertiesForGeoRestoreArgs',
    'ServerPropertiesForGeoRestoreArgsDict',
    'ServerPropertiesForReplicaArgs',
    'ServerPropertiesForReplicaArgsDict',
    'ServerPropertiesForRestoreArgs',
    'ServerPropertiesForRestoreArgsDict',
    'SkuArgs',
    'SkuArgsDict',
    'StorageProfileArgs',
    'StorageProfileArgsDict',
]

MYPY = False

if not MYPY:
    class PrivateEndpointPropertyArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        """
        Resource id of the private endpoint.
        """
elif False:
    PrivateEndpointPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateEndpointPropertyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] id: Resource id of the private endpoint.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Resource id of the private endpoint.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class PrivateLinkServiceConnectionStatePropertyArgsDict(TypedDict):
        description: pulumi.Input[builtins.str]
        """
        The private link service connection description.
        """
        status: pulumi.Input[builtins.str]
        """
        The private link service connection status.
        """
elif False:
    PrivateLinkServiceConnectionStatePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateLinkServiceConnectionStatePropertyArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[builtins.str],
                 status: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] description: The private link service connection description.
        :param pulumi.Input[builtins.str] status: The private link service connection status.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[builtins.str]:
        """
        The private link service connection description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[builtins.str]:
        """
        The private link service connection status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "status", value)


if not MYPY:
    class ServerPropertiesForDefaultCreateArgsDict(TypedDict):
        """
        The properties used to create a new server.
        """
        administrator_login: pulumi.Input[builtins.str]
        """
        The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
        """
        administrator_login_password: pulumi.Input[builtins.str]
        """
        The password of the administrator login.
        """
        create_mode: pulumi.Input[builtins.str]
        """
        The mode to create a new server.
        Expected value is 'Default'.
        """
        minimal_tls_version: NotRequired[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]]
        """
        Enforce a minimal Tls version for the server.
        """
        public_network_access: NotRequired[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]]
        """
        Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        """
        ssl_enforcement: NotRequired[pulumi.Input['SslEnforcementEnum']]
        """
        Enable ssl enforcement or not when connect to server.
        """
        storage_profile: NotRequired[pulumi.Input['StorageProfileArgsDict']]
        """
        Storage profile of a server.
        """
        version: NotRequired[pulumi.Input[Union[builtins.str, 'ServerVersion']]]
        """
        Server version.
        """
elif False:
    ServerPropertiesForDefaultCreateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerPropertiesForDefaultCreateArgs:
    def __init__(__self__, *,
                 administrator_login: pulumi.Input[builtins.str],
                 administrator_login_password: pulumi.Input[builtins.str],
                 create_mode: pulumi.Input[builtins.str],
                 minimal_tls_version: Optional[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]] = None,
                 public_network_access: Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]] = None,
                 ssl_enforcement: Optional[pulumi.Input['SslEnforcementEnum']] = None,
                 storage_profile: Optional[pulumi.Input['StorageProfileArgs']] = None,
                 version: Optional[pulumi.Input[Union[builtins.str, 'ServerVersion']]] = None):
        """
        The properties used to create a new server.
        :param pulumi.Input[builtins.str] administrator_login: The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
        :param pulumi.Input[builtins.str] administrator_login_password: The password of the administrator login.
        :param pulumi.Input[builtins.str] create_mode: The mode to create a new server.
               Expected value is 'Default'.
        :param pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']] minimal_tls_version: Enforce a minimal Tls version for the server.
        :param pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']] public_network_access: Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        :param pulumi.Input['SslEnforcementEnum'] ssl_enforcement: Enable ssl enforcement or not when connect to server.
        :param pulumi.Input['StorageProfileArgs'] storage_profile: Storage profile of a server.
        :param pulumi.Input[Union[builtins.str, 'ServerVersion']] version: Server version.
        """
        pulumi.set(__self__, "administrator_login", administrator_login)
        pulumi.set(__self__, "administrator_login_password", administrator_login_password)
        pulumi.set(__self__, "create_mode", 'Default')
        if minimal_tls_version is not None:
            pulumi.set(__self__, "minimal_tls_version", minimal_tls_version)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if ssl_enforcement is not None:
            pulumi.set(__self__, "ssl_enforcement", ssl_enforcement)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="administratorLogin")
    def administrator_login(self) -> pulumi.Input[builtins.str]:
        """
        The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
        """
        return pulumi.get(self, "administrator_login")

    @administrator_login.setter
    def administrator_login(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "administrator_login", value)

    @property
    @pulumi.getter(name="administratorLoginPassword")
    def administrator_login_password(self) -> pulumi.Input[builtins.str]:
        """
        The password of the administrator login.
        """
        return pulumi.get(self, "administrator_login_password")

    @administrator_login_password.setter
    def administrator_login_password(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "administrator_login_password", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> pulumi.Input[builtins.str]:
        """
        The mode to create a new server.
        Expected value is 'Default'.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="minimalTlsVersion")
    def minimal_tls_version(self) -> Optional[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]]:
        """
        Enforce a minimal Tls version for the server.
        """
        return pulumi.get(self, "minimal_tls_version")

    @minimal_tls_version.setter
    def minimal_tls_version(self, value: Optional[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]]):
        pulumi.set(self, "minimal_tls_version", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]]:
        """
        Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter(name="sslEnforcement")
    def ssl_enforcement(self) -> Optional[pulumi.Input['SslEnforcementEnum']]:
        """
        Enable ssl enforcement or not when connect to server.
        """
        return pulumi.get(self, "ssl_enforcement")

    @ssl_enforcement.setter
    def ssl_enforcement(self, value: Optional[pulumi.Input['SslEnforcementEnum']]):
        pulumi.set(self, "ssl_enforcement", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input['StorageProfileArgs']]:
        """
        Storage profile of a server.
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input['StorageProfileArgs']]):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[Union[builtins.str, 'ServerVersion']]]:
        """
        Server version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[Union[builtins.str, 'ServerVersion']]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ServerPropertiesForGeoRestoreArgsDict(TypedDict):
        """
        The properties used to create a new server by restoring to a different region from a geo replicated backup.
        """
        create_mode: pulumi.Input[builtins.str]
        """
        The mode to create a new server.
        Expected value is 'GeoRestore'.
        """
        source_server_id: pulumi.Input[builtins.str]
        """
        The source server id to restore from.
        """
        minimal_tls_version: NotRequired[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]]
        """
        Enforce a minimal Tls version for the server.
        """
        public_network_access: NotRequired[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]]
        """
        Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        """
        ssl_enforcement: NotRequired[pulumi.Input['SslEnforcementEnum']]
        """
        Enable ssl enforcement or not when connect to server.
        """
        storage_profile: NotRequired[pulumi.Input['StorageProfileArgsDict']]
        """
        Storage profile of a server.
        """
        version: NotRequired[pulumi.Input[Union[builtins.str, 'ServerVersion']]]
        """
        Server version.
        """
elif False:
    ServerPropertiesForGeoRestoreArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerPropertiesForGeoRestoreArgs:
    def __init__(__self__, *,
                 create_mode: pulumi.Input[builtins.str],
                 source_server_id: pulumi.Input[builtins.str],
                 minimal_tls_version: Optional[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]] = None,
                 public_network_access: Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]] = None,
                 ssl_enforcement: Optional[pulumi.Input['SslEnforcementEnum']] = None,
                 storage_profile: Optional[pulumi.Input['StorageProfileArgs']] = None,
                 version: Optional[pulumi.Input[Union[builtins.str, 'ServerVersion']]] = None):
        """
        The properties used to create a new server by restoring to a different region from a geo replicated backup.
        :param pulumi.Input[builtins.str] create_mode: The mode to create a new server.
               Expected value is 'GeoRestore'.
        :param pulumi.Input[builtins.str] source_server_id: The source server id to restore from.
        :param pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']] minimal_tls_version: Enforce a minimal Tls version for the server.
        :param pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']] public_network_access: Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        :param pulumi.Input['SslEnforcementEnum'] ssl_enforcement: Enable ssl enforcement or not when connect to server.
        :param pulumi.Input['StorageProfileArgs'] storage_profile: Storage profile of a server.
        :param pulumi.Input[Union[builtins.str, 'ServerVersion']] version: Server version.
        """
        pulumi.set(__self__, "create_mode", 'GeoRestore')
        pulumi.set(__self__, "source_server_id", source_server_id)
        if minimal_tls_version is not None:
            pulumi.set(__self__, "minimal_tls_version", minimal_tls_version)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if ssl_enforcement is not None:
            pulumi.set(__self__, "ssl_enforcement", ssl_enforcement)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> pulumi.Input[builtins.str]:
        """
        The mode to create a new server.
        Expected value is 'GeoRestore'.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> pulumi.Input[builtins.str]:
        """
        The source server id to restore from.
        """
        return pulumi.get(self, "source_server_id")

    @source_server_id.setter
    def source_server_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "source_server_id", value)

    @property
    @pulumi.getter(name="minimalTlsVersion")
    def minimal_tls_version(self) -> Optional[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]]:
        """
        Enforce a minimal Tls version for the server.
        """
        return pulumi.get(self, "minimal_tls_version")

    @minimal_tls_version.setter
    def minimal_tls_version(self, value: Optional[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]]):
        pulumi.set(self, "minimal_tls_version", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]]:
        """
        Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter(name="sslEnforcement")
    def ssl_enforcement(self) -> Optional[pulumi.Input['SslEnforcementEnum']]:
        """
        Enable ssl enforcement or not when connect to server.
        """
        return pulumi.get(self, "ssl_enforcement")

    @ssl_enforcement.setter
    def ssl_enforcement(self, value: Optional[pulumi.Input['SslEnforcementEnum']]):
        pulumi.set(self, "ssl_enforcement", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input['StorageProfileArgs']]:
        """
        Storage profile of a server.
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input['StorageProfileArgs']]):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[Union[builtins.str, 'ServerVersion']]]:
        """
        Server version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[Union[builtins.str, 'ServerVersion']]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ServerPropertiesForReplicaArgsDict(TypedDict):
        """
        The properties to create a new replica.
        """
        create_mode: pulumi.Input[builtins.str]
        """
        The mode to create a new server.
        Expected value is 'Replica'.
        """
        source_server_id: pulumi.Input[builtins.str]
        """
        The master server id to create replica from.
        """
        minimal_tls_version: NotRequired[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]]
        """
        Enforce a minimal Tls version for the server.
        """
        public_network_access: NotRequired[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]]
        """
        Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        """
        ssl_enforcement: NotRequired[pulumi.Input['SslEnforcementEnum']]
        """
        Enable ssl enforcement or not when connect to server.
        """
        storage_profile: NotRequired[pulumi.Input['StorageProfileArgsDict']]
        """
        Storage profile of a server.
        """
        version: NotRequired[pulumi.Input[Union[builtins.str, 'ServerVersion']]]
        """
        Server version.
        """
elif False:
    ServerPropertiesForReplicaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerPropertiesForReplicaArgs:
    def __init__(__self__, *,
                 create_mode: pulumi.Input[builtins.str],
                 source_server_id: pulumi.Input[builtins.str],
                 minimal_tls_version: Optional[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]] = None,
                 public_network_access: Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]] = None,
                 ssl_enforcement: Optional[pulumi.Input['SslEnforcementEnum']] = None,
                 storage_profile: Optional[pulumi.Input['StorageProfileArgs']] = None,
                 version: Optional[pulumi.Input[Union[builtins.str, 'ServerVersion']]] = None):
        """
        The properties to create a new replica.
        :param pulumi.Input[builtins.str] create_mode: The mode to create a new server.
               Expected value is 'Replica'.
        :param pulumi.Input[builtins.str] source_server_id: The master server id to create replica from.
        :param pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']] minimal_tls_version: Enforce a minimal Tls version for the server.
        :param pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']] public_network_access: Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        :param pulumi.Input['SslEnforcementEnum'] ssl_enforcement: Enable ssl enforcement or not when connect to server.
        :param pulumi.Input['StorageProfileArgs'] storage_profile: Storage profile of a server.
        :param pulumi.Input[Union[builtins.str, 'ServerVersion']] version: Server version.
        """
        pulumi.set(__self__, "create_mode", 'Replica')
        pulumi.set(__self__, "source_server_id", source_server_id)
        if minimal_tls_version is not None:
            pulumi.set(__self__, "minimal_tls_version", minimal_tls_version)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if ssl_enforcement is not None:
            pulumi.set(__self__, "ssl_enforcement", ssl_enforcement)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> pulumi.Input[builtins.str]:
        """
        The mode to create a new server.
        Expected value is 'Replica'.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> pulumi.Input[builtins.str]:
        """
        The master server id to create replica from.
        """
        return pulumi.get(self, "source_server_id")

    @source_server_id.setter
    def source_server_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "source_server_id", value)

    @property
    @pulumi.getter(name="minimalTlsVersion")
    def minimal_tls_version(self) -> Optional[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]]:
        """
        Enforce a minimal Tls version for the server.
        """
        return pulumi.get(self, "minimal_tls_version")

    @minimal_tls_version.setter
    def minimal_tls_version(self, value: Optional[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]]):
        pulumi.set(self, "minimal_tls_version", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]]:
        """
        Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter(name="sslEnforcement")
    def ssl_enforcement(self) -> Optional[pulumi.Input['SslEnforcementEnum']]:
        """
        Enable ssl enforcement or not when connect to server.
        """
        return pulumi.get(self, "ssl_enforcement")

    @ssl_enforcement.setter
    def ssl_enforcement(self, value: Optional[pulumi.Input['SslEnforcementEnum']]):
        pulumi.set(self, "ssl_enforcement", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input['StorageProfileArgs']]:
        """
        Storage profile of a server.
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input['StorageProfileArgs']]):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[Union[builtins.str, 'ServerVersion']]]:
        """
        Server version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[Union[builtins.str, 'ServerVersion']]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ServerPropertiesForRestoreArgsDict(TypedDict):
        """
        The properties used to create a new server by restoring from a backup.
        """
        create_mode: pulumi.Input[builtins.str]
        """
        The mode to create a new server.
        Expected value is 'PointInTimeRestore'.
        """
        restore_point_in_time: pulumi.Input[builtins.str]
        """
        Restore point creation time (ISO8601 format), specifying the time to restore from.
        """
        source_server_id: pulumi.Input[builtins.str]
        """
        The source server id to restore from.
        """
        minimal_tls_version: NotRequired[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]]
        """
        Enforce a minimal Tls version for the server.
        """
        public_network_access: NotRequired[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]]
        """
        Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        """
        ssl_enforcement: NotRequired[pulumi.Input['SslEnforcementEnum']]
        """
        Enable ssl enforcement or not when connect to server.
        """
        storage_profile: NotRequired[pulumi.Input['StorageProfileArgsDict']]
        """
        Storage profile of a server.
        """
        version: NotRequired[pulumi.Input[Union[builtins.str, 'ServerVersion']]]
        """
        Server version.
        """
elif False:
    ServerPropertiesForRestoreArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerPropertiesForRestoreArgs:
    def __init__(__self__, *,
                 create_mode: pulumi.Input[builtins.str],
                 restore_point_in_time: pulumi.Input[builtins.str],
                 source_server_id: pulumi.Input[builtins.str],
                 minimal_tls_version: Optional[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]] = None,
                 public_network_access: Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]] = None,
                 ssl_enforcement: Optional[pulumi.Input['SslEnforcementEnum']] = None,
                 storage_profile: Optional[pulumi.Input['StorageProfileArgs']] = None,
                 version: Optional[pulumi.Input[Union[builtins.str, 'ServerVersion']]] = None):
        """
        The properties used to create a new server by restoring from a backup.
        :param pulumi.Input[builtins.str] create_mode: The mode to create a new server.
               Expected value is 'PointInTimeRestore'.
        :param pulumi.Input[builtins.str] restore_point_in_time: Restore point creation time (ISO8601 format), specifying the time to restore from.
        :param pulumi.Input[builtins.str] source_server_id: The source server id to restore from.
        :param pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']] minimal_tls_version: Enforce a minimal Tls version for the server.
        :param pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']] public_network_access: Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        :param pulumi.Input['SslEnforcementEnum'] ssl_enforcement: Enable ssl enforcement or not when connect to server.
        :param pulumi.Input['StorageProfileArgs'] storage_profile: Storage profile of a server.
        :param pulumi.Input[Union[builtins.str, 'ServerVersion']] version: Server version.
        """
        pulumi.set(__self__, "create_mode", 'PointInTimeRestore')
        pulumi.set(__self__, "restore_point_in_time", restore_point_in_time)
        pulumi.set(__self__, "source_server_id", source_server_id)
        if minimal_tls_version is not None:
            pulumi.set(__self__, "minimal_tls_version", minimal_tls_version)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if ssl_enforcement is not None:
            pulumi.set(__self__, "ssl_enforcement", ssl_enforcement)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> pulumi.Input[builtins.str]:
        """
        The mode to create a new server.
        Expected value is 'PointInTimeRestore'.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="restorePointInTime")
    def restore_point_in_time(self) -> pulumi.Input[builtins.str]:
        """
        Restore point creation time (ISO8601 format), specifying the time to restore from.
        """
        return pulumi.get(self, "restore_point_in_time")

    @restore_point_in_time.setter
    def restore_point_in_time(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "restore_point_in_time", value)

    @property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> pulumi.Input[builtins.str]:
        """
        The source server id to restore from.
        """
        return pulumi.get(self, "source_server_id")

    @source_server_id.setter
    def source_server_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "source_server_id", value)

    @property
    @pulumi.getter(name="minimalTlsVersion")
    def minimal_tls_version(self) -> Optional[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]]:
        """
        Enforce a minimal Tls version for the server.
        """
        return pulumi.get(self, "minimal_tls_version")

    @minimal_tls_version.setter
    def minimal_tls_version(self, value: Optional[pulumi.Input[Union[builtins.str, 'MinimalTlsVersionEnum']]]):
        pulumi.set(self, "minimal_tls_version", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]]:
        """
        Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[builtins.str, 'PublicNetworkAccessEnum']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter(name="sslEnforcement")
    def ssl_enforcement(self) -> Optional[pulumi.Input['SslEnforcementEnum']]:
        """
        Enable ssl enforcement or not when connect to server.
        """
        return pulumi.get(self, "ssl_enforcement")

    @ssl_enforcement.setter
    def ssl_enforcement(self, value: Optional[pulumi.Input['SslEnforcementEnum']]):
        pulumi.set(self, "ssl_enforcement", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input['StorageProfileArgs']]:
        """
        Storage profile of a server.
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input['StorageProfileArgs']]):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[Union[builtins.str, 'ServerVersion']]]:
        """
        Server version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[Union[builtins.str, 'ServerVersion']]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class SkuArgsDict(TypedDict):
        """
        Billing information related properties of a server.
        """
        name: pulumi.Input[builtins.str]
        """
        The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        """
        capacity: NotRequired[pulumi.Input[builtins.int]]
        """
        The scale up/out capacity, representing server's compute units.
        """
        family: NotRequired[pulumi.Input[builtins.str]]
        """
        The family of hardware.
        """
        size: NotRequired[pulumi.Input[builtins.str]]
        """
        The size code, to be interpreted by resource as appropriate.
        """
        tier: NotRequired[pulumi.Input[Union[builtins.str, 'SkuTier']]]
        """
        The tier of the particular SKU, e.g. Basic.
        """
elif False:
    SkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 capacity: Optional[pulumi.Input[builtins.int]] = None,
                 family: Optional[pulumi.Input[builtins.str]] = None,
                 size: Optional[pulumi.Input[builtins.str]] = None,
                 tier: Optional[pulumi.Input[Union[builtins.str, 'SkuTier']]] = None):
        """
        Billing information related properties of a server.
        :param pulumi.Input[builtins.str] name: The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        :param pulumi.Input[builtins.int] capacity: The scale up/out capacity, representing server's compute units.
        :param pulumi.Input[builtins.str] family: The family of hardware.
        :param pulumi.Input[builtins.str] size: The size code, to be interpreted by resource as appropriate.
        :param pulumi.Input[Union[builtins.str, 'SkuTier']] tier: The tier of the particular SKU, e.g. Basic.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The scale up/out capacity, representing server's compute units.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The family of hardware.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The size code, to be interpreted by resource as appropriate.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[Union[builtins.str, 'SkuTier']]]:
        """
        The tier of the particular SKU, e.g. Basic.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[Union[builtins.str, 'SkuTier']]]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class StorageProfileArgsDict(TypedDict):
        """
        Storage Profile properties of a server
        """
        backup_retention_days: NotRequired[pulumi.Input[builtins.int]]
        """
        Backup retention days for the server.
        """
        geo_redundant_backup: NotRequired[pulumi.Input[Union[builtins.str, 'GeoRedundantBackup']]]
        """
        Enable Geo-redundant or not for server backup.
        """
        storage_autogrow: NotRequired[pulumi.Input[Union[builtins.str, 'StorageAutogrow']]]
        """
        Enable Storage Auto Grow.
        """
        storage_mb: NotRequired[pulumi.Input[builtins.int]]
        """
        Max storage allowed for a server.
        """
elif False:
    StorageProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageProfileArgs:
    def __init__(__self__, *,
                 backup_retention_days: Optional[pulumi.Input[builtins.int]] = None,
                 geo_redundant_backup: Optional[pulumi.Input[Union[builtins.str, 'GeoRedundantBackup']]] = None,
                 storage_autogrow: Optional[pulumi.Input[Union[builtins.str, 'StorageAutogrow']]] = None,
                 storage_mb: Optional[pulumi.Input[builtins.int]] = None):
        """
        Storage Profile properties of a server
        :param pulumi.Input[builtins.int] backup_retention_days: Backup retention days for the server.
        :param pulumi.Input[Union[builtins.str, 'GeoRedundantBackup']] geo_redundant_backup: Enable Geo-redundant or not for server backup.
        :param pulumi.Input[Union[builtins.str, 'StorageAutogrow']] storage_autogrow: Enable Storage Auto Grow.
        :param pulumi.Input[builtins.int] storage_mb: Max storage allowed for a server.
        """
        if backup_retention_days is not None:
            pulumi.set(__self__, "backup_retention_days", backup_retention_days)
        if geo_redundant_backup is not None:
            pulumi.set(__self__, "geo_redundant_backup", geo_redundant_backup)
        if storage_autogrow is not None:
            pulumi.set(__self__, "storage_autogrow", storage_autogrow)
        if storage_mb is not None:
            pulumi.set(__self__, "storage_mb", storage_mb)

    @property
    @pulumi.getter(name="backupRetentionDays")
    def backup_retention_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Backup retention days for the server.
        """
        return pulumi.get(self, "backup_retention_days")

    @backup_retention_days.setter
    def backup_retention_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "backup_retention_days", value)

    @property
    @pulumi.getter(name="geoRedundantBackup")
    def geo_redundant_backup(self) -> Optional[pulumi.Input[Union[builtins.str, 'GeoRedundantBackup']]]:
        """
        Enable Geo-redundant or not for server backup.
        """
        return pulumi.get(self, "geo_redundant_backup")

    @geo_redundant_backup.setter
    def geo_redundant_backup(self, value: Optional[pulumi.Input[Union[builtins.str, 'GeoRedundantBackup']]]):
        pulumi.set(self, "geo_redundant_backup", value)

    @property
    @pulumi.getter(name="storageAutogrow")
    def storage_autogrow(self) -> Optional[pulumi.Input[Union[builtins.str, 'StorageAutogrow']]]:
        """
        Enable Storage Auto Grow.
        """
        return pulumi.get(self, "storage_autogrow")

    @storage_autogrow.setter
    def storage_autogrow(self, value: Optional[pulumi.Input[Union[builtins.str, 'StorageAutogrow']]]):
        pulumi.set(self, "storage_autogrow", value)

    @property
    @pulumi.getter(name="storageMB")
    def storage_mb(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Max storage allowed for a server.
        """
        return pulumi.get(self, "storage_mb")

    @storage_mb.setter
    def storage_mb(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "storage_mb", value)


