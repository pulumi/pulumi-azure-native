# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetNamespacePnsCredentialsResult',
    'AwaitableGetNamespacePnsCredentialsResult',
    'get_namespace_pns_credentials',
    'get_namespace_pns_credentials_output',
]

@pulumi.output_type
class GetNamespacePnsCredentialsResult:
    """
    Description of a NotificationHub PNS Credentials. This is a response of the POST requests that return namespace or hubs
    PNS credentials.
    """
    def __init__(__self__, adm_credential=None, apns_credential=None, baidu_credential=None, browser_credential=None, fcm_v1_credential=None, gcm_credential=None, id=None, location=None, mpns_credential=None, name=None, system_data=None, tags=None, type=None, wns_credential=None, xiaomi_credential=None):
        if adm_credential and not isinstance(adm_credential, dict):
            raise TypeError("Expected argument 'adm_credential' to be a dict")
        pulumi.set(__self__, "adm_credential", adm_credential)
        if apns_credential and not isinstance(apns_credential, dict):
            raise TypeError("Expected argument 'apns_credential' to be a dict")
        pulumi.set(__self__, "apns_credential", apns_credential)
        if baidu_credential and not isinstance(baidu_credential, dict):
            raise TypeError("Expected argument 'baidu_credential' to be a dict")
        pulumi.set(__self__, "baidu_credential", baidu_credential)
        if browser_credential and not isinstance(browser_credential, dict):
            raise TypeError("Expected argument 'browser_credential' to be a dict")
        pulumi.set(__self__, "browser_credential", browser_credential)
        if fcm_v1_credential and not isinstance(fcm_v1_credential, dict):
            raise TypeError("Expected argument 'fcm_v1_credential' to be a dict")
        pulumi.set(__self__, "fcm_v1_credential", fcm_v1_credential)
        if gcm_credential and not isinstance(gcm_credential, dict):
            raise TypeError("Expected argument 'gcm_credential' to be a dict")
        pulumi.set(__self__, "gcm_credential", gcm_credential)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if mpns_credential and not isinstance(mpns_credential, dict):
            raise TypeError("Expected argument 'mpns_credential' to be a dict")
        pulumi.set(__self__, "mpns_credential", mpns_credential)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if wns_credential and not isinstance(wns_credential, dict):
            raise TypeError("Expected argument 'wns_credential' to be a dict")
        pulumi.set(__self__, "wns_credential", wns_credential)
        if xiaomi_credential and not isinstance(xiaomi_credential, dict):
            raise TypeError("Expected argument 'xiaomi_credential' to be a dict")
        pulumi.set(__self__, "xiaomi_credential", xiaomi_credential)

    @property
    @pulumi.getter(name="admCredential")
    def adm_credential(self) -> Optional['outputs.AdmCredentialResponse']:
        """
        Description of a NotificationHub AdmCredential.
        """
        return pulumi.get(self, "adm_credential")

    @property
    @pulumi.getter(name="apnsCredential")
    def apns_credential(self) -> Optional['outputs.ApnsCredentialResponse']:
        """
        Description of a NotificationHub ApnsCredential.
        """
        return pulumi.get(self, "apns_credential")

    @property
    @pulumi.getter(name="baiduCredential")
    def baidu_credential(self) -> Optional['outputs.BaiduCredentialResponse']:
        """
        Description of a NotificationHub BaiduCredential.
        """
        return pulumi.get(self, "baidu_credential")

    @property
    @pulumi.getter(name="browserCredential")
    def browser_credential(self) -> Optional['outputs.BrowserCredentialResponse']:
        """
        Description of a NotificationHub BrowserCredential.
        """
        return pulumi.get(self, "browser_credential")

    @property
    @pulumi.getter(name="fcmV1Credential")
    def fcm_v1_credential(self) -> Optional['outputs.FcmV1CredentialResponse']:
        """
        Description of a NotificationHub FcmV1Credential.
        """
        return pulumi.get(self, "fcm_v1_credential")

    @property
    @pulumi.getter(name="gcmCredential")
    def gcm_credential(self) -> Optional['outputs.GcmCredentialResponse']:
        """
        Description of a NotificationHub GcmCredential.
        """
        return pulumi.get(self, "gcm_credential")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Deprecated - only for compatibility.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="mpnsCredential")
    def mpns_credential(self) -> Optional['outputs.MpnsCredentialResponse']:
        """
        Description of a NotificationHub MpnsCredential.
        """
        return pulumi.get(self, "mpns_credential")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Deprecated - only for compatibility.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="wnsCredential")
    def wns_credential(self) -> Optional['outputs.WnsCredentialResponse']:
        """
        Description of a NotificationHub WnsCredential.
        """
        return pulumi.get(self, "wns_credential")

    @property
    @pulumi.getter(name="xiaomiCredential")
    def xiaomi_credential(self) -> Optional['outputs.XiaomiCredentialResponse']:
        """
        Description of a NotificationHub XiaomiCredential.
        """
        return pulumi.get(self, "xiaomi_credential")


class AwaitableGetNamespacePnsCredentialsResult(GetNamespacePnsCredentialsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNamespacePnsCredentialsResult(
            adm_credential=self.adm_credential,
            apns_credential=self.apns_credential,
            baidu_credential=self.baidu_credential,
            browser_credential=self.browser_credential,
            fcm_v1_credential=self.fcm_v1_credential,
            gcm_credential=self.gcm_credential,
            id=self.id,
            location=self.location,
            mpns_credential=self.mpns_credential,
            name=self.name,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type,
            wns_credential=self.wns_credential,
            xiaomi_credential=self.xiaomi_credential)


def get_namespace_pns_credentials(namespace_name: Optional[str] = None,
                                  resource_group_name: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNamespacePnsCredentialsResult:
    """
    Description of a NotificationHub PNS Credentials. This is a response of the POST requests that return namespace or hubs
    PNS credentials.


    :param str namespace_name: Namespace name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['namespaceName'] = namespace_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:notificationhubs/v20231001preview:getNamespacePnsCredentials', __args__, opts=opts, typ=GetNamespacePnsCredentialsResult).value

    return AwaitableGetNamespacePnsCredentialsResult(
        adm_credential=pulumi.get(__ret__, 'adm_credential'),
        apns_credential=pulumi.get(__ret__, 'apns_credential'),
        baidu_credential=pulumi.get(__ret__, 'baidu_credential'),
        browser_credential=pulumi.get(__ret__, 'browser_credential'),
        fcm_v1_credential=pulumi.get(__ret__, 'fcm_v1_credential'),
        gcm_credential=pulumi.get(__ret__, 'gcm_credential'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        mpns_credential=pulumi.get(__ret__, 'mpns_credential'),
        name=pulumi.get(__ret__, 'name'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        wns_credential=pulumi.get(__ret__, 'wns_credential'),
        xiaomi_credential=pulumi.get(__ret__, 'xiaomi_credential'))


@_utilities.lift_output_func(get_namespace_pns_credentials)
def get_namespace_pns_credentials_output(namespace_name: Optional[pulumi.Input[str]] = None,
                                         resource_group_name: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNamespacePnsCredentialsResult]:
    """
    Description of a NotificationHub PNS Credentials. This is a response of the POST requests that return namespace or hubs
    PNS credentials.


    :param str namespace_name: Namespace name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
