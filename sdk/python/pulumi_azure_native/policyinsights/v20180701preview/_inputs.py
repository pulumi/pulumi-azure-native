# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'RemediationDeploymentSummaryArgs',
    'RemediationFiltersArgs',
]

@pulumi.input_type
class RemediationDeploymentSummaryArgs:
    def __init__(__self__, *,
                 failed_deployments: Optional[pulumi.Input[int]] = None,
                 successful_deployments: Optional[pulumi.Input[int]] = None,
                 total_deployments: Optional[pulumi.Input[int]] = None):
        """
        The deployment status summary for all deployments created by the remediation.
        :param pulumi.Input[int] failed_deployments: The number of deployments required by the remediation that have failed.
        :param pulumi.Input[int] successful_deployments: The number of deployments required by the remediation that have succeeded.
        :param pulumi.Input[int] total_deployments: The number of deployments required by the remediation.
        """
        if failed_deployments is not None:
            pulumi.set(__self__, "failed_deployments", failed_deployments)
        if successful_deployments is not None:
            pulumi.set(__self__, "successful_deployments", successful_deployments)
        if total_deployments is not None:
            pulumi.set(__self__, "total_deployments", total_deployments)

    @property
    @pulumi.getter(name="failedDeployments")
    def failed_deployments(self) -> Optional[pulumi.Input[int]]:
        """
        The number of deployments required by the remediation that have failed.
        """
        return pulumi.get(self, "failed_deployments")

    @failed_deployments.setter
    def failed_deployments(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failed_deployments", value)

    @property
    @pulumi.getter(name="successfulDeployments")
    def successful_deployments(self) -> Optional[pulumi.Input[int]]:
        """
        The number of deployments required by the remediation that have succeeded.
        """
        return pulumi.get(self, "successful_deployments")

    @successful_deployments.setter
    def successful_deployments(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "successful_deployments", value)

    @property
    @pulumi.getter(name="totalDeployments")
    def total_deployments(self) -> Optional[pulumi.Input[int]]:
        """
        The number of deployments required by the remediation.
        """
        return pulumi.get(self, "total_deployments")

    @total_deployments.setter
    def total_deployments(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_deployments", value)


@pulumi.input_type
class RemediationFiltersArgs:
    def __init__(__self__, *,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The filters that will be applied to determine which resources to remediate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: The resource locations that will be remediated.
        """
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The resource locations that will be remediated.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)


