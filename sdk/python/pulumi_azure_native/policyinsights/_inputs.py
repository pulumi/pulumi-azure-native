# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'AttestationEvidenceArgs',
    'AttestationEvidenceArgsDict',
    'RemediationFiltersArgs',
    'RemediationFiltersArgsDict',
    'RemediationPropertiesFailureThresholdArgs',
    'RemediationPropertiesFailureThresholdArgsDict',
]

MYPY = False

if not MYPY:
    class AttestationEvidenceArgsDict(TypedDict):
        """
        A piece of evidence supporting the compliance state set in the attestation.
        """
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        The description for this piece of evidence.
        """
        source_uri: NotRequired[pulumi.Input[builtins.str]]
        """
        The URI location of the evidence.
        """
elif False:
    AttestationEvidenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AttestationEvidenceArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 source_uri: Optional[pulumi.Input[builtins.str]] = None):
        """
        A piece of evidence supporting the compliance state set in the attestation.
        :param pulumi.Input[builtins.str] description: The description for this piece of evidence.
        :param pulumi.Input[builtins.str] source_uri: The URI location of the evidence.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if source_uri is not None:
            pulumi.set(__self__, "source_uri", source_uri)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description for this piece of evidence.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="sourceUri")
    def source_uri(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The URI location of the evidence.
        """
        return pulumi.get(self, "source_uri")

    @source_uri.setter
    def source_uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source_uri", value)


if not MYPY:
    class RemediationFiltersArgsDict(TypedDict):
        """
        The filters that will be applied to determine which resources to remediate.
        """
        locations: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The resource locations that will be remediated.
        """
        resource_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The IDs of the resources that will be remediated. Can specify at most 100 IDs. This filter cannot be used when ReEvaluateCompliance is set to ReEvaluateCompliance, and cannot be empty if provided.
        """
elif False:
    RemediationFiltersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemediationFiltersArgs:
    def __init__(__self__, *,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The filters that will be applied to determine which resources to remediate.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] locations: The resource locations that will be remediated.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] resource_ids: The IDs of the resources that will be remediated. Can specify at most 100 IDs. This filter cannot be used when ReEvaluateCompliance is set to ReEvaluateCompliance, and cannot be empty if provided.
        """
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The resource locations that will be remediated.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The IDs of the resources that will be remediated. Can specify at most 100 IDs. This filter cannot be used when ReEvaluateCompliance is set to ReEvaluateCompliance, and cannot be empty if provided.
        """
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "resource_ids", value)


if not MYPY:
    class RemediationPropertiesFailureThresholdArgsDict(TypedDict):
        """
        The remediation failure threshold settings
        """
        percentage: NotRequired[pulumi.Input[builtins.float]]
        """
        A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
        """
elif False:
    RemediationPropertiesFailureThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemediationPropertiesFailureThresholdArgs:
    def __init__(__self__, *,
                 percentage: Optional[pulumi.Input[builtins.float]] = None):
        """
        The remediation failure threshold settings
        :param pulumi.Input[builtins.float] percentage: A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
        """
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "percentage", value)


