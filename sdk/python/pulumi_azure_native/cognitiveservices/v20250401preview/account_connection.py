# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['AccountConnectionArgs', 'AccountConnection']

@pulumi.input_type
class AccountConnectionArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 properties: pulumi.Input[Union['AADAuthTypeConnectionPropertiesArgs', 'AccessKeyAuthTypeConnectionPropertiesArgs', 'AccountKeyAuthTypeConnectionPropertiesArgs', 'ApiKeyAuthConnectionPropertiesArgs', 'CustomKeysConnectionPropertiesArgs', 'ManagedIdentityAuthTypeConnectionPropertiesArgs', 'NoneAuthTypeConnectionPropertiesArgs', 'OAuth2AuthTypeConnectionPropertiesArgs', 'PATAuthTypeConnectionPropertiesArgs', 'SASAuthTypeConnectionPropertiesArgs', 'ServicePrincipalAuthTypeConnectionPropertiesArgs', 'UsernamePasswordAuthTypeConnectionPropertiesArgs']],
                 resource_group_name: pulumi.Input[str],
                 connection_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AccountConnection resource.
        :param pulumi.Input[str] account_name: The name of Cognitive Services account.
        :param pulumi.Input[Union['AADAuthTypeConnectionPropertiesArgs', 'AccessKeyAuthTypeConnectionPropertiesArgs', 'AccountKeyAuthTypeConnectionPropertiesArgs', 'ApiKeyAuthConnectionPropertiesArgs', 'CustomKeysConnectionPropertiesArgs', 'ManagedIdentityAuthTypeConnectionPropertiesArgs', 'NoneAuthTypeConnectionPropertiesArgs', 'OAuth2AuthTypeConnectionPropertiesArgs', 'PATAuthTypeConnectionPropertiesArgs', 'SASAuthTypeConnectionPropertiesArgs', 'ServicePrincipalAuthTypeConnectionPropertiesArgs', 'UsernamePasswordAuthTypeConnectionPropertiesArgs']] properties: Connection property base schema.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] connection_name: Friendly name of the connection
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if connection_name is not None:
            pulumi.set(__self__, "connection_name", connection_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        The name of Cognitive Services account.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Input[Union['AADAuthTypeConnectionPropertiesArgs', 'AccessKeyAuthTypeConnectionPropertiesArgs', 'AccountKeyAuthTypeConnectionPropertiesArgs', 'ApiKeyAuthConnectionPropertiesArgs', 'CustomKeysConnectionPropertiesArgs', 'ManagedIdentityAuthTypeConnectionPropertiesArgs', 'NoneAuthTypeConnectionPropertiesArgs', 'OAuth2AuthTypeConnectionPropertiesArgs', 'PATAuthTypeConnectionPropertiesArgs', 'SASAuthTypeConnectionPropertiesArgs', 'ServicePrincipalAuthTypeConnectionPropertiesArgs', 'UsernamePasswordAuthTypeConnectionPropertiesArgs']]:
        """
        Connection property base schema.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input[Union['AADAuthTypeConnectionPropertiesArgs', 'AccessKeyAuthTypeConnectionPropertiesArgs', 'AccountKeyAuthTypeConnectionPropertiesArgs', 'ApiKeyAuthConnectionPropertiesArgs', 'CustomKeysConnectionPropertiesArgs', 'ManagedIdentityAuthTypeConnectionPropertiesArgs', 'NoneAuthTypeConnectionPropertiesArgs', 'OAuth2AuthTypeConnectionPropertiesArgs', 'PATAuthTypeConnectionPropertiesArgs', 'SASAuthTypeConnectionPropertiesArgs', 'ServicePrincipalAuthTypeConnectionPropertiesArgs', 'UsernamePasswordAuthTypeConnectionPropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="connectionName")
    def connection_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the connection
        """
        return pulumi.get(self, "connection_name")

    @connection_name.setter
    def connection_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_name", value)


class AccountConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 connection_name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Union[Union['AADAuthTypeConnectionPropertiesArgs', 'AADAuthTypeConnectionPropertiesArgsDict'], Union['AccessKeyAuthTypeConnectionPropertiesArgs', 'AccessKeyAuthTypeConnectionPropertiesArgsDict'], Union['AccountKeyAuthTypeConnectionPropertiesArgs', 'AccountKeyAuthTypeConnectionPropertiesArgsDict'], Union['ApiKeyAuthConnectionPropertiesArgs', 'ApiKeyAuthConnectionPropertiesArgsDict'], Union['CustomKeysConnectionPropertiesArgs', 'CustomKeysConnectionPropertiesArgsDict'], Union['ManagedIdentityAuthTypeConnectionPropertiesArgs', 'ManagedIdentityAuthTypeConnectionPropertiesArgsDict'], Union['NoneAuthTypeConnectionPropertiesArgs', 'NoneAuthTypeConnectionPropertiesArgsDict'], Union['OAuth2AuthTypeConnectionPropertiesArgs', 'OAuth2AuthTypeConnectionPropertiesArgsDict'], Union['PATAuthTypeConnectionPropertiesArgs', 'PATAuthTypeConnectionPropertiesArgsDict'], Union['SASAuthTypeConnectionPropertiesArgs', 'SASAuthTypeConnectionPropertiesArgsDict'], Union['ServicePrincipalAuthTypeConnectionPropertiesArgs', 'ServicePrincipalAuthTypeConnectionPropertiesArgsDict'], Union['UsernamePasswordAuthTypeConnectionPropertiesArgs', 'UsernamePasswordAuthTypeConnectionPropertiesArgsDict']]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Connection base resource schema.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: The name of Cognitive Services account.
        :param pulumi.Input[str] connection_name: Friendly name of the connection
        :param pulumi.Input[Union[Union['AADAuthTypeConnectionPropertiesArgs', 'AADAuthTypeConnectionPropertiesArgsDict'], Union['AccessKeyAuthTypeConnectionPropertiesArgs', 'AccessKeyAuthTypeConnectionPropertiesArgsDict'], Union['AccountKeyAuthTypeConnectionPropertiesArgs', 'AccountKeyAuthTypeConnectionPropertiesArgsDict'], Union['ApiKeyAuthConnectionPropertiesArgs', 'ApiKeyAuthConnectionPropertiesArgsDict'], Union['CustomKeysConnectionPropertiesArgs', 'CustomKeysConnectionPropertiesArgsDict'], Union['ManagedIdentityAuthTypeConnectionPropertiesArgs', 'ManagedIdentityAuthTypeConnectionPropertiesArgsDict'], Union['NoneAuthTypeConnectionPropertiesArgs', 'NoneAuthTypeConnectionPropertiesArgsDict'], Union['OAuth2AuthTypeConnectionPropertiesArgs', 'OAuth2AuthTypeConnectionPropertiesArgsDict'], Union['PATAuthTypeConnectionPropertiesArgs', 'PATAuthTypeConnectionPropertiesArgsDict'], Union['SASAuthTypeConnectionPropertiesArgs', 'SASAuthTypeConnectionPropertiesArgsDict'], Union['ServicePrincipalAuthTypeConnectionPropertiesArgs', 'ServicePrincipalAuthTypeConnectionPropertiesArgsDict'], Union['UsernamePasswordAuthTypeConnectionPropertiesArgs', 'UsernamePasswordAuthTypeConnectionPropertiesArgsDict']]] properties: Connection property base schema.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Connection base resource schema.

        :param str resource_name: The name of the resource.
        :param AccountConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 connection_name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Union[Union['AADAuthTypeConnectionPropertiesArgs', 'AADAuthTypeConnectionPropertiesArgsDict'], Union['AccessKeyAuthTypeConnectionPropertiesArgs', 'AccessKeyAuthTypeConnectionPropertiesArgsDict'], Union['AccountKeyAuthTypeConnectionPropertiesArgs', 'AccountKeyAuthTypeConnectionPropertiesArgsDict'], Union['ApiKeyAuthConnectionPropertiesArgs', 'ApiKeyAuthConnectionPropertiesArgsDict'], Union['CustomKeysConnectionPropertiesArgs', 'CustomKeysConnectionPropertiesArgsDict'], Union['ManagedIdentityAuthTypeConnectionPropertiesArgs', 'ManagedIdentityAuthTypeConnectionPropertiesArgsDict'], Union['NoneAuthTypeConnectionPropertiesArgs', 'NoneAuthTypeConnectionPropertiesArgsDict'], Union['OAuth2AuthTypeConnectionPropertiesArgs', 'OAuth2AuthTypeConnectionPropertiesArgsDict'], Union['PATAuthTypeConnectionPropertiesArgs', 'PATAuthTypeConnectionPropertiesArgsDict'], Union['SASAuthTypeConnectionPropertiesArgs', 'SASAuthTypeConnectionPropertiesArgsDict'], Union['ServicePrincipalAuthTypeConnectionPropertiesArgs', 'ServicePrincipalAuthTypeConnectionPropertiesArgsDict'], Union['UsernamePasswordAuthTypeConnectionPropertiesArgs', 'UsernamePasswordAuthTypeConnectionPropertiesArgsDict']]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountConnectionArgs.__new__(AccountConnectionArgs)

            if account_name is None and not opts.urn:
                raise TypeError("Missing required property 'account_name'")
            __props__.__dict__["account_name"] = account_name
            __props__.__dict__["connection_name"] = connection_name
            if properties is None and not opts.urn:
                raise TypeError("Missing required property 'properties'")
            __props__.__dict__["properties"] = properties
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["name"] = None
            __props__.__dict__["type"] = None
        super(AccountConnection, __self__).__init__(
            'azure-native:cognitiveservices/v20250401preview:AccountConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AccountConnection':
        """
        Get an existing AccountConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AccountConnectionArgs.__new__(AccountConnectionArgs)

        __props__.__dict__["name"] = None
        __props__.__dict__["properties"] = None
        __props__.__dict__["type"] = None
        return AccountConnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output[Any]:
        """
        Connection property base schema.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

