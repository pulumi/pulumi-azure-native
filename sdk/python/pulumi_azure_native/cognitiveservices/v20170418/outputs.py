# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CognitiveServicesAccountApiPropertiesResponse',
    'CognitiveServicesAccountPropertiesResponse',
    'CognitiveServicesAccountSkuChangeInfoResponse',
    'EncryptionResponse',
    'IdentityResponse',
    'IpRuleResponse',
    'KeyVaultPropertiesResponse',
    'NetworkRuleSetResponse',
    'PrivateEndpointConnectionPropertiesResponse',
    'PrivateEndpointConnectionResponse',
    'PrivateEndpointResponse',
    'PrivateLinkServiceConnectionStateResponse',
    'SkuCapabilityResponse',
    'SkuResponse',
    'UserAssignedIdentityResponse',
    'UserOwnedStorageResponse',
    'VirtualNetworkRuleResponse',
]

@pulumi.output_type
class CognitiveServicesAccountApiPropertiesResponse(dict):
    """
    The api properties for special APIs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aadClientId":
            suggest = "aad_client_id"
        elif key == "aadTenantId":
            suggest = "aad_tenant_id"
        elif key == "eventHubConnectionString":
            suggest = "event_hub_connection_string"
        elif key == "qnaAzureSearchEndpointId":
            suggest = "qna_azure_search_endpoint_id"
        elif key == "qnaAzureSearchEndpointKey":
            suggest = "qna_azure_search_endpoint_key"
        elif key == "qnaRuntimeEndpoint":
            suggest = "qna_runtime_endpoint"
        elif key == "statisticsEnabled":
            suggest = "statistics_enabled"
        elif key == "storageAccountConnectionString":
            suggest = "storage_account_connection_string"
        elif key == "superUser":
            suggest = "super_user"
        elif key == "websiteName":
            suggest = "website_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CognitiveServicesAccountApiPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CognitiveServicesAccountApiPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CognitiveServicesAccountApiPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aad_client_id: Optional[str] = None,
                 aad_tenant_id: Optional[str] = None,
                 event_hub_connection_string: Optional[str] = None,
                 qna_azure_search_endpoint_id: Optional[str] = None,
                 qna_azure_search_endpoint_key: Optional[str] = None,
                 qna_runtime_endpoint: Optional[str] = None,
                 statistics_enabled: Optional[bool] = None,
                 storage_account_connection_string: Optional[str] = None,
                 super_user: Optional[str] = None,
                 website_name: Optional[str] = None):
        """
        The api properties for special APIs.
        :param str aad_client_id: (Metrics Advisor Only) The Azure AD Client Id (Application Id).
        :param str aad_tenant_id: (Metrics Advisor Only) The Azure AD Tenant Id.
        :param str event_hub_connection_string: (Personalization Only) The flag to enable statistics of Bing Search.
        :param str qna_azure_search_endpoint_id: (QnAMaker Only) The Azure Search endpoint id of QnAMaker.
        :param str qna_azure_search_endpoint_key: (QnAMaker Only) The Azure Search endpoint key of QnAMaker.
        :param str qna_runtime_endpoint: (QnAMaker Only) The runtime endpoint of QnAMaker.
        :param bool statistics_enabled: (Bing Search Only) The flag to enable statistics of Bing Search.
        :param str storage_account_connection_string: (Personalization Only) The storage account connection string.
        :param str super_user: (Metrics Advisor Only) The super user of Metrics Advisor.
        :param str website_name: (Metrics Advisor Only) The website name of Metrics Advisor.
        """
        CognitiveServicesAccountApiPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aad_client_id=aad_client_id,
            aad_tenant_id=aad_tenant_id,
            event_hub_connection_string=event_hub_connection_string,
            qna_azure_search_endpoint_id=qna_azure_search_endpoint_id,
            qna_azure_search_endpoint_key=qna_azure_search_endpoint_key,
            qna_runtime_endpoint=qna_runtime_endpoint,
            statistics_enabled=statistics_enabled,
            storage_account_connection_string=storage_account_connection_string,
            super_user=super_user,
            website_name=website_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aad_client_id: Optional[str] = None,
             aad_tenant_id: Optional[str] = None,
             event_hub_connection_string: Optional[str] = None,
             qna_azure_search_endpoint_id: Optional[str] = None,
             qna_azure_search_endpoint_key: Optional[str] = None,
             qna_runtime_endpoint: Optional[str] = None,
             statistics_enabled: Optional[bool] = None,
             storage_account_connection_string: Optional[str] = None,
             super_user: Optional[str] = None,
             website_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aad_client_id is not None:
            _setter("aad_client_id", aad_client_id)
        if aad_tenant_id is not None:
            _setter("aad_tenant_id", aad_tenant_id)
        if event_hub_connection_string is not None:
            _setter("event_hub_connection_string", event_hub_connection_string)
        if qna_azure_search_endpoint_id is not None:
            _setter("qna_azure_search_endpoint_id", qna_azure_search_endpoint_id)
        if qna_azure_search_endpoint_key is not None:
            _setter("qna_azure_search_endpoint_key", qna_azure_search_endpoint_key)
        if qna_runtime_endpoint is not None:
            _setter("qna_runtime_endpoint", qna_runtime_endpoint)
        if statistics_enabled is not None:
            _setter("statistics_enabled", statistics_enabled)
        if storage_account_connection_string is not None:
            _setter("storage_account_connection_string", storage_account_connection_string)
        if super_user is not None:
            _setter("super_user", super_user)
        if website_name is not None:
            _setter("website_name", website_name)

    @property
    @pulumi.getter(name="aadClientId")
    def aad_client_id(self) -> Optional[str]:
        """
        (Metrics Advisor Only) The Azure AD Client Id (Application Id).
        """
        return pulumi.get(self, "aad_client_id")

    @property
    @pulumi.getter(name="aadTenantId")
    def aad_tenant_id(self) -> Optional[str]:
        """
        (Metrics Advisor Only) The Azure AD Tenant Id.
        """
        return pulumi.get(self, "aad_tenant_id")

    @property
    @pulumi.getter(name="eventHubConnectionString")
    def event_hub_connection_string(self) -> Optional[str]:
        """
        (Personalization Only) The flag to enable statistics of Bing Search.
        """
        return pulumi.get(self, "event_hub_connection_string")

    @property
    @pulumi.getter(name="qnaAzureSearchEndpointId")
    def qna_azure_search_endpoint_id(self) -> Optional[str]:
        """
        (QnAMaker Only) The Azure Search endpoint id of QnAMaker.
        """
        return pulumi.get(self, "qna_azure_search_endpoint_id")

    @property
    @pulumi.getter(name="qnaAzureSearchEndpointKey")
    def qna_azure_search_endpoint_key(self) -> Optional[str]:
        """
        (QnAMaker Only) The Azure Search endpoint key of QnAMaker.
        """
        return pulumi.get(self, "qna_azure_search_endpoint_key")

    @property
    @pulumi.getter(name="qnaRuntimeEndpoint")
    def qna_runtime_endpoint(self) -> Optional[str]:
        """
        (QnAMaker Only) The runtime endpoint of QnAMaker.
        """
        return pulumi.get(self, "qna_runtime_endpoint")

    @property
    @pulumi.getter(name="statisticsEnabled")
    def statistics_enabled(self) -> Optional[bool]:
        """
        (Bing Search Only) The flag to enable statistics of Bing Search.
        """
        return pulumi.get(self, "statistics_enabled")

    @property
    @pulumi.getter(name="storageAccountConnectionString")
    def storage_account_connection_string(self) -> Optional[str]:
        """
        (Personalization Only) The storage account connection string.
        """
        return pulumi.get(self, "storage_account_connection_string")

    @property
    @pulumi.getter(name="superUser")
    def super_user(self) -> Optional[str]:
        """
        (Metrics Advisor Only) The super user of Metrics Advisor.
        """
        return pulumi.get(self, "super_user")

    @property
    @pulumi.getter(name="websiteName")
    def website_name(self) -> Optional[str]:
        """
        (Metrics Advisor Only) The website name of Metrics Advisor.
        """
        return pulumi.get(self, "website_name")


@pulumi.output_type
class CognitiveServicesAccountPropertiesResponse(dict):
    """
    Properties of Cognitive Services account.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateCreated":
            suggest = "date_created"
        elif key == "internalId":
            suggest = "internal_id"
        elif key == "isMigrated":
            suggest = "is_migrated"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "skuChangeInfo":
            suggest = "sku_change_info"
        elif key == "apiProperties":
            suggest = "api_properties"
        elif key == "customSubDomainName":
            suggest = "custom_sub_domain_name"
        elif key == "networkAcls":
            suggest = "network_acls"
        elif key == "privateEndpointConnections":
            suggest = "private_endpoint_connections"
        elif key == "publicNetworkAccess":
            suggest = "public_network_access"
        elif key == "userOwnedStorage":
            suggest = "user_owned_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CognitiveServicesAccountPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CognitiveServicesAccountPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CognitiveServicesAccountPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capabilities: Sequence['outputs.SkuCapabilityResponse'],
                 date_created: str,
                 endpoint: str,
                 internal_id: str,
                 is_migrated: bool,
                 provisioning_state: str,
                 sku_change_info: 'outputs.CognitiveServicesAccountSkuChangeInfoResponse',
                 api_properties: Optional['outputs.CognitiveServicesAccountApiPropertiesResponse'] = None,
                 custom_sub_domain_name: Optional[str] = None,
                 encryption: Optional['outputs.EncryptionResponse'] = None,
                 network_acls: Optional['outputs.NetworkRuleSetResponse'] = None,
                 private_endpoint_connections: Optional[Sequence['outputs.PrivateEndpointConnectionResponse']] = None,
                 public_network_access: Optional[str] = None,
                 user_owned_storage: Optional[Sequence['outputs.UserOwnedStorageResponse']] = None):
        """
        Properties of Cognitive Services account.
        :param Sequence['SkuCapabilityResponse'] capabilities: Gets the capabilities of the cognitive services account. Each item indicates the capability of a specific feature. The values are read-only and for reference only.
        :param str date_created: Gets the date of cognitive services account creation.
        :param str endpoint: Endpoint of the created account.
        :param str internal_id: The internal identifier.
        :param bool is_migrated: If the resource is migrated from an existing key.
        :param str provisioning_state: Gets the status of the cognitive services account at the time the operation was called.
        :param 'CognitiveServicesAccountSkuChangeInfoResponse' sku_change_info: Sku change info of account.
        :param 'CognitiveServicesAccountApiPropertiesResponse' api_properties: The api properties for special APIs.
        :param str custom_sub_domain_name: Optional subdomain name used for token-based authentication.
        :param 'EncryptionResponse' encryption: The encryption properties for this resource.
        :param 'NetworkRuleSetResponse' network_acls: A collection of rules governing the accessibility from specific network locations.
        :param Sequence['PrivateEndpointConnectionResponse'] private_endpoint_connections: The private endpoint connection associated with the Cognitive Services account.
        :param str public_network_access: Whether or not public endpoint access is allowed for this account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        :param Sequence['UserOwnedStorageResponse'] user_owned_storage: The storage accounts for this resource.
        """
        CognitiveServicesAccountPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capabilities=capabilities,
            date_created=date_created,
            endpoint=endpoint,
            internal_id=internal_id,
            is_migrated=is_migrated,
            provisioning_state=provisioning_state,
            sku_change_info=sku_change_info,
            api_properties=api_properties,
            custom_sub_domain_name=custom_sub_domain_name,
            encryption=encryption,
            network_acls=network_acls,
            private_endpoint_connections=private_endpoint_connections,
            public_network_access=public_network_access,
            user_owned_storage=user_owned_storage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capabilities: Sequence['outputs.SkuCapabilityResponse'],
             date_created: str,
             endpoint: str,
             internal_id: str,
             is_migrated: bool,
             provisioning_state: str,
             sku_change_info: 'outputs.CognitiveServicesAccountSkuChangeInfoResponse',
             api_properties: Optional['outputs.CognitiveServicesAccountApiPropertiesResponse'] = None,
             custom_sub_domain_name: Optional[str] = None,
             encryption: Optional['outputs.EncryptionResponse'] = None,
             network_acls: Optional['outputs.NetworkRuleSetResponse'] = None,
             private_endpoint_connections: Optional[Sequence['outputs.PrivateEndpointConnectionResponse']] = None,
             public_network_access: Optional[str] = None,
             user_owned_storage: Optional[Sequence['outputs.UserOwnedStorageResponse']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("capabilities", capabilities)
        _setter("date_created", date_created)
        _setter("endpoint", endpoint)
        _setter("internal_id", internal_id)
        _setter("is_migrated", is_migrated)
        _setter("provisioning_state", provisioning_state)
        _setter("sku_change_info", sku_change_info)
        if api_properties is not None:
            _setter("api_properties", api_properties)
        if custom_sub_domain_name is not None:
            _setter("custom_sub_domain_name", custom_sub_domain_name)
        if encryption is not None:
            _setter("encryption", encryption)
        if network_acls is not None:
            _setter("network_acls", network_acls)
        if private_endpoint_connections is not None:
            _setter("private_endpoint_connections", private_endpoint_connections)
        if public_network_access is not None:
            _setter("public_network_access", public_network_access)
        if user_owned_storage is not None:
            _setter("user_owned_storage", user_owned_storage)

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.SkuCapabilityResponse']:
        """
        Gets the capabilities of the cognitive services account. Each item indicates the capability of a specific feature. The values are read-only and for reference only.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        Gets the date of cognitive services account creation.
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        Endpoint of the created account.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> str:
        """
        The internal identifier.
        """
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="isMigrated")
    def is_migrated(self) -> bool:
        """
        If the resource is migrated from an existing key.
        """
        return pulumi.get(self, "is_migrated")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets the status of the cognitive services account at the time the operation was called.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="skuChangeInfo")
    def sku_change_info(self) -> 'outputs.CognitiveServicesAccountSkuChangeInfoResponse':
        """
        Sku change info of account.
        """
        return pulumi.get(self, "sku_change_info")

    @property
    @pulumi.getter(name="apiProperties")
    def api_properties(self) -> Optional['outputs.CognitiveServicesAccountApiPropertiesResponse']:
        """
        The api properties for special APIs.
        """
        return pulumi.get(self, "api_properties")

    @property
    @pulumi.getter(name="customSubDomainName")
    def custom_sub_domain_name(self) -> Optional[str]:
        """
        Optional subdomain name used for token-based authentication.
        """
        return pulumi.get(self, "custom_sub_domain_name")

    @property
    @pulumi.getter
    def encryption(self) -> Optional['outputs.EncryptionResponse']:
        """
        The encryption properties for this resource.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="networkAcls")
    def network_acls(self) -> Optional['outputs.NetworkRuleSetResponse']:
        """
        A collection of rules governing the accessibility from specific network locations.
        """
        return pulumi.get(self, "network_acls")

    @property
    @pulumi.getter(name="privateEndpointConnections")
    def private_endpoint_connections(self) -> Optional[Sequence['outputs.PrivateEndpointConnectionResponse']]:
        """
        The private endpoint connection associated with the Cognitive Services account.
        """
        return pulumi.get(self, "private_endpoint_connections")

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[str]:
        """
        Whether or not public endpoint access is allowed for this account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        """
        return pulumi.get(self, "public_network_access")

    @property
    @pulumi.getter(name="userOwnedStorage")
    def user_owned_storage(self) -> Optional[Sequence['outputs.UserOwnedStorageResponse']]:
        """
        The storage accounts for this resource.
        """
        return pulumi.get(self, "user_owned_storage")


@pulumi.output_type
class CognitiveServicesAccountSkuChangeInfoResponse(dict):
    """
    Sku change info of account.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countOfDowngrades":
            suggest = "count_of_downgrades"
        elif key == "countOfUpgradesAfterDowngrades":
            suggest = "count_of_upgrades_after_downgrades"
        elif key == "lastChangeDate":
            suggest = "last_change_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CognitiveServicesAccountSkuChangeInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CognitiveServicesAccountSkuChangeInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CognitiveServicesAccountSkuChangeInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count_of_downgrades: float,
                 count_of_upgrades_after_downgrades: float,
                 last_change_date: str):
        """
        Sku change info of account.
        :param float count_of_downgrades: Gets the count of downgrades.
        :param float count_of_upgrades_after_downgrades: Gets the count of upgrades after downgrades.
        :param str last_change_date: Gets the last change date.
        """
        CognitiveServicesAccountSkuChangeInfoResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count_of_downgrades=count_of_downgrades,
            count_of_upgrades_after_downgrades=count_of_upgrades_after_downgrades,
            last_change_date=last_change_date,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count_of_downgrades: float,
             count_of_upgrades_after_downgrades: float,
             last_change_date: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count_of_downgrades", count_of_downgrades)
        _setter("count_of_upgrades_after_downgrades", count_of_upgrades_after_downgrades)
        _setter("last_change_date", last_change_date)

    @property
    @pulumi.getter(name="countOfDowngrades")
    def count_of_downgrades(self) -> float:
        """
        Gets the count of downgrades.
        """
        return pulumi.get(self, "count_of_downgrades")

    @property
    @pulumi.getter(name="countOfUpgradesAfterDowngrades")
    def count_of_upgrades_after_downgrades(self) -> float:
        """
        Gets the count of upgrades after downgrades.
        """
        return pulumi.get(self, "count_of_upgrades_after_downgrades")

    @property
    @pulumi.getter(name="lastChangeDate")
    def last_change_date(self) -> str:
        """
        Gets the last change date.
        """
        return pulumi.get(self, "last_change_date")


@pulumi.output_type
class EncryptionResponse(dict):
    """
    Properties to configure Encryption
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keySource":
            suggest = "key_source"
        elif key == "keyVaultProperties":
            suggest = "key_vault_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_source: Optional[str] = None,
                 key_vault_properties: Optional['outputs.KeyVaultPropertiesResponse'] = None):
        """
        Properties to configure Encryption
        :param str key_source: Enumerates the possible value of keySource for Encryption
        :param 'KeyVaultPropertiesResponse' key_vault_properties: Properties of KeyVault
        """
        EncryptionResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_source=key_source,
            key_vault_properties=key_vault_properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_source: Optional[str] = None,
             key_vault_properties: Optional['outputs.KeyVaultPropertiesResponse'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if key_source is None:
            key_source = 'Microsoft.KeyVault'
        if key_source is not None:
            _setter("key_source", key_source)
        if key_vault_properties is not None:
            _setter("key_vault_properties", key_vault_properties)

    @property
    @pulumi.getter(name="keySource")
    def key_source(self) -> Optional[str]:
        """
        Enumerates the possible value of keySource for Encryption
        """
        return pulumi.get(self, "key_source")

    @property
    @pulumi.getter(name="keyVaultProperties")
    def key_vault_properties(self) -> Optional['outputs.KeyVaultPropertiesResponse']:
        """
        Properties of KeyVault
        """
        return pulumi.get(self, "key_vault_properties")


@pulumi.output_type
class IdentityResponse(dict):
    """
    Managed service identity.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity.
        :param str principal_id: Principal Id of managed service identity.
        :param str tenant_id: Tenant of managed service identity.
        :param str type: Type of managed service identity.
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
        """
        IdentityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            principal_id=principal_id,
            tenant_id=tenant_id,
            type=type,
            user_assigned_identities=user_assigned_identities,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             principal_id: str,
             tenant_id: str,
             type: Optional[str] = None,
             user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("principal_id", principal_id)
        _setter("tenant_id", tenant_id)
        if type is not None:
            _setter("type", type)
        if user_assigned_identities is not None:
            _setter("user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        Principal Id of managed service identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        Tenant of managed service identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of managed service identity.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class IpRuleResponse(dict):
    """
    A rule governing the accessibility from a specific ip address or ip range.
    """
    def __init__(__self__, *,
                 value: str):
        """
        A rule governing the accessibility from a specific ip address or ip range.
        :param str value: An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
        """
        IpRuleResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class KeyVaultPropertiesResponse(dict):
    """
    Properties to configure keyVault Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyName":
            suggest = "key_name"
        elif key == "keyVaultUri":
            suggest = "key_vault_uri"
        elif key == "keyVersion":
            suggest = "key_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyVaultPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyVaultPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyVaultPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_name: Optional[str] = None,
                 key_vault_uri: Optional[str] = None,
                 key_version: Optional[str] = None):
        """
        Properties to configure keyVault Properties
        :param str key_name: Name of the Key from KeyVault
        :param str key_vault_uri: Uri of KeyVault
        :param str key_version: Version of the Key from KeyVault
        """
        KeyVaultPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_name=key_name,
            key_vault_uri=key_vault_uri,
            key_version=key_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_name: Optional[str] = None,
             key_vault_uri: Optional[str] = None,
             key_version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if key_name is not None:
            _setter("key_name", key_name)
        if key_vault_uri is not None:
            _setter("key_vault_uri", key_vault_uri)
        if key_version is not None:
            _setter("key_version", key_version)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[str]:
        """
        Name of the Key from KeyVault
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keyVaultUri")
    def key_vault_uri(self) -> Optional[str]:
        """
        Uri of KeyVault
        """
        return pulumi.get(self, "key_vault_uri")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> Optional[str]:
        """
        Version of the Key from KeyVault
        """
        return pulumi.get(self, "key_version")


@pulumi.output_type
class NetworkRuleSetResponse(dict):
    """
    A set of rules governing the network accessibility.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultAction":
            suggest = "default_action"
        elif key == "ipRules":
            suggest = "ip_rules"
        elif key == "virtualNetworkRules":
            suggest = "virtual_network_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkRuleSetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkRuleSetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkRuleSetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_action: Optional[str] = None,
                 ip_rules: Optional[Sequence['outputs.IpRuleResponse']] = None,
                 virtual_network_rules: Optional[Sequence['outputs.VirtualNetworkRuleResponse']] = None):
        """
        A set of rules governing the network accessibility.
        :param str default_action: The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
        :param Sequence['IpRuleResponse'] ip_rules: The list of IP address rules.
        :param Sequence['VirtualNetworkRuleResponse'] virtual_network_rules: The list of virtual network rules.
        """
        NetworkRuleSetResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_action=default_action,
            ip_rules=ip_rules,
            virtual_network_rules=virtual_network_rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_action: Optional[str] = None,
             ip_rules: Optional[Sequence['outputs.IpRuleResponse']] = None,
             virtual_network_rules: Optional[Sequence['outputs.VirtualNetworkRuleResponse']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if default_action is not None:
            _setter("default_action", default_action)
        if ip_rules is not None:
            _setter("ip_rules", ip_rules)
        if virtual_network_rules is not None:
            _setter("virtual_network_rules", virtual_network_rules)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[str]:
        """
        The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
        """
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Optional[Sequence['outputs.IpRuleResponse']]:
        """
        The list of IP address rules.
        """
        return pulumi.get(self, "ip_rules")

    @property
    @pulumi.getter(name="virtualNetworkRules")
    def virtual_network_rules(self) -> Optional[Sequence['outputs.VirtualNetworkRuleResponse']]:
        """
        The list of virtual network rules.
        """
        return pulumi.get(self, "virtual_network_rules")


@pulumi.output_type
class PrivateEndpointConnectionPropertiesResponse(dict):
    """
    Properties of the PrivateEndpointConnectProperties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateLinkServiceConnectionState":
            suggest = "private_link_service_connection_state"
        elif key == "groupIds":
            suggest = "group_ids"
        elif key == "privateEndpoint":
            suggest = "private_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointConnectionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointConnectionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointConnectionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_link_service_connection_state: 'outputs.PrivateLinkServiceConnectionStateResponse',
                 group_ids: Optional[Sequence[str]] = None,
                 private_endpoint: Optional['outputs.PrivateEndpointResponse'] = None):
        """
        Properties of the PrivateEndpointConnectProperties.
        :param 'PrivateLinkServiceConnectionStateResponse' private_link_service_connection_state: A collection of information about the state of the connection between service consumer and provider.
        :param Sequence[str] group_ids: The private link resource group ids.
        :param 'PrivateEndpointResponse' private_endpoint: The resource of private end point.
        """
        PrivateEndpointConnectionPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            private_link_service_connection_state=private_link_service_connection_state,
            group_ids=group_ids,
            private_endpoint=private_endpoint,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             private_link_service_connection_state: 'outputs.PrivateLinkServiceConnectionStateResponse',
             group_ids: Optional[Sequence[str]] = None,
             private_endpoint: Optional['outputs.PrivateEndpointResponse'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("private_link_service_connection_state", private_link_service_connection_state)
        if group_ids is not None:
            _setter("group_ids", group_ids)
        if private_endpoint is not None:
            _setter("private_endpoint", private_endpoint)

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> 'outputs.PrivateLinkServiceConnectionStateResponse':
        """
        A collection of information about the state of the connection between service consumer and provider.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[Sequence[str]]:
        """
        The private link resource group ids.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional['outputs.PrivateEndpointResponse']:
        """
        The resource of private end point.
        """
        return pulumi.get(self, "private_endpoint")


@pulumi.output_type
class PrivateEndpointConnectionResponse(dict):
    """
    The Private Endpoint Connection resource.
    """
    def __init__(__self__, *,
                 etag: str,
                 id: str,
                 name: str,
                 type: str,
                 location: Optional[str] = None,
                 properties: Optional['outputs.PrivateEndpointConnectionPropertiesResponse'] = None):
        """
        The Private Endpoint Connection resource.
        :param str etag: Entity Tag
        :param str id: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        :param str name: The name of the resource
        :param str type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        :param str location: The location of the private endpoint connection
        :param 'PrivateEndpointConnectionPropertiesResponse' properties: Resource properties.
        """
        PrivateEndpointConnectionResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            etag=etag,
            id=id,
            name=name,
            type=type,
            location=location,
            properties=properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             etag: str,
             id: str,
             name: str,
             type: str,
             location: Optional[str] = None,
             properties: Optional['outputs.PrivateEndpointConnectionPropertiesResponse'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("etag", etag)
        _setter("id", id)
        _setter("name", name)
        _setter("type", type)
        if location is not None:
            _setter("location", location)
        if properties is not None:
            _setter("properties", properties)

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Entity Tag
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The location of the private endpoint connection
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.PrivateEndpointConnectionPropertiesResponse']:
        """
        Resource properties.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class PrivateEndpointResponse(dict):
    """
    The Private Endpoint resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        The Private Endpoint resource.
        :param str id: The ARM identifier for Private Endpoint
        """
        PrivateEndpointResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ARM identifier for Private Endpoint
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PrivateLinkServiceConnectionStateResponse(dict):
    """
    A collection of information about the state of the connection between service consumer and provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionsRequired":
            suggest = "actions_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkServiceConnectionStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions_required: Optional[str] = None,
                 description: Optional[str] = None,
                 status: Optional[str] = None):
        """
        A collection of information about the state of the connection between service consumer and provider.
        :param str actions_required: A message indicating if changes on the service provider require any updates on the consumer.
        :param str description: The reason for approval/rejection of the connection.
        :param str status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        PrivateLinkServiceConnectionStateResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions_required=actions_required,
            description=description,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions_required: Optional[str] = None,
             description: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if actions_required is not None:
            _setter("actions_required", actions_required)
        if description is not None:
            _setter("description", description)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[str]:
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        return pulumi.get(self, "actions_required")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The reason for approval/rejection of the connection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SkuCapabilityResponse(dict):
    """
    SkuCapability indicates the capability of a certain feature.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        SkuCapability indicates the capability of a certain feature.
        :param str name: The name of the SkuCapability.
        :param str value: The value of the SkuCapability.
        """
        SkuCapabilityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the SkuCapability.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the SkuCapability.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SkuResponse(dict):
    """
    The SKU of the cognitive services account.
    """
    def __init__(__self__, *,
                 name: str,
                 tier: str):
        """
        The SKU of the cognitive services account.
        :param str name: Gets or sets the sku name. Required for account creation, optional for update.
        :param str tier: Gets the sku tier. This is based on the SKU name.
        """
        SkuResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            tier=tier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             tier: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Gets or sets the sku name. Required for account creation, optional for update.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tier(self) -> str:
        """
        Gets the sku tier. This is based on the SKU name.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User-assigned managed identity.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 principal_id: Optional[str] = None):
        """
        User-assigned managed identity.
        :param str client_id: Client App Id associated with this identity.
        :param str principal_id: Azure Active Directory principal ID associated with this Identity.
        """
        UserAssignedIdentityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_id=client_id,
            principal_id=principal_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_id: Optional[str] = None,
             principal_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if client_id is not None:
            _setter("client_id", client_id)
        if principal_id is not None:
            _setter("principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        Client App Id associated with this identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        """
        Azure Active Directory principal ID associated with this Identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class UserOwnedStorageResponse(dict):
    """
    The user owned storage for Cognitive Services account.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserOwnedStorageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserOwnedStorageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserOwnedStorageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: Optional[str] = None):
        """
        The user owned storage for Cognitive Services account.
        :param str resource_id: Full resource id of a Microsoft.Storage resource.
        """
        UserOwnedStorageResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_id=resource_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if resource_id is not None:
            _setter("resource_id", resource_id)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        """
        Full resource id of a Microsoft.Storage resource.
        """
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class VirtualNetworkRuleResponse(dict):
    """
    A rule governing the accessibility from a specific virtual network.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreMissingVnetServiceEndpoint":
            suggest = "ignore_missing_vnet_service_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 ignore_missing_vnet_service_endpoint: Optional[bool] = None,
                 state: Optional[str] = None):
        """
        A rule governing the accessibility from a specific virtual network.
        :param str id: Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
        :param bool ignore_missing_vnet_service_endpoint: Ignore missing vnet service endpoint or not.
        :param str state: Gets the state of virtual network rule.
        """
        VirtualNetworkRuleResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            ignore_missing_vnet_service_endpoint=ignore_missing_vnet_service_endpoint,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             ignore_missing_vnet_service_endpoint: Optional[bool] = None,
             state: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        if ignore_missing_vnet_service_endpoint is not None:
            _setter("ignore_missing_vnet_service_endpoint", ignore_missing_vnet_service_endpoint)
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ignoreMissingVnetServiceEndpoint")
    def ignore_missing_vnet_service_endpoint(self) -> Optional[bool]:
        """
        Ignore missing vnet service endpoint or not.
        """
        return pulumi.get(self, "ignore_missing_vnet_service_endpoint")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Gets the state of virtual network rule.
        """
        return pulumi.get(self, "state")


