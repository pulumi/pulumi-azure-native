# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CommitmentPeriodResponse',
    'CommitmentPlanPropertiesResponse',
    'CommitmentQuotaResponse',
    'DeploymentModelResponse',
    'DeploymentPropertiesResponse',
    'DeploymentScaleSettingsResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class CommitmentPeriodResponse(dict):
    """
    Cognitive Services account commitment period.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CommitmentPeriodResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CommitmentPeriodResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CommitmentPeriodResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_date: str,
                 quota: 'outputs.CommitmentQuotaResponse',
                 start_date: str,
                 count: Optional[int] = None,
                 tier: Optional[str] = None):
        """
        Cognitive Services account commitment period.
        :param str end_date: Commitment period end date.
        :param 'CommitmentQuotaResponse' quota: Cognitive Services account commitment quota.
        :param str start_date: Commitment period start date.
        :param int count: Commitment period commitment count.
        :param str tier: Commitment period commitment tier.
        """
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "start_date", start_date)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        """
        Commitment period end date.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def quota(self) -> 'outputs.CommitmentQuotaResponse':
        """
        Cognitive Services account commitment quota.
        """
        return pulumi.get(self, "quota")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        """
        Commitment period start date.
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Commitment period commitment count.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        Commitment period commitment tier.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class CommitmentPlanPropertiesResponse(dict):
    """
    Properties of Cognitive Services account commitment plan.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoRenew":
            suggest = "auto_renew"
        elif key == "hostingModel":
            suggest = "hosting_model"
        elif key == "planType":
            suggest = "plan_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CommitmentPlanPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CommitmentPlanPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CommitmentPlanPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last: 'outputs.CommitmentPeriodResponse',
                 auto_renew: Optional[bool] = None,
                 current: Optional['outputs.CommitmentPeriodResponse'] = None,
                 hosting_model: Optional[str] = None,
                 next: Optional['outputs.CommitmentPeriodResponse'] = None,
                 plan_type: Optional[str] = None):
        """
        Properties of Cognitive Services account commitment plan.
        :param 'CommitmentPeriodResponse' last: Cognitive Services account commitment period.
        :param bool auto_renew: AutoRenew commitment plan.
        :param 'CommitmentPeriodResponse' current: Cognitive Services account commitment period.
        :param str hosting_model: Account hosting model.
        :param 'CommitmentPeriodResponse' next: Cognitive Services account commitment period.
        :param str plan_type: Commitment plan type.
        """
        pulumi.set(__self__, "last", last)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if current is not None:
            pulumi.set(__self__, "current", current)
        if hosting_model is not None:
            pulumi.set(__self__, "hosting_model", hosting_model)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if plan_type is not None:
            pulumi.set(__self__, "plan_type", plan_type)

    @property
    @pulumi.getter
    def last(self) -> 'outputs.CommitmentPeriodResponse':
        """
        Cognitive Services account commitment period.
        """
        return pulumi.get(self, "last")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[bool]:
        """
        AutoRenew commitment plan.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter
    def current(self) -> Optional['outputs.CommitmentPeriodResponse']:
        """
        Cognitive Services account commitment period.
        """
        return pulumi.get(self, "current")

    @property
    @pulumi.getter(name="hostingModel")
    def hosting_model(self) -> Optional[str]:
        """
        Account hosting model.
        """
        return pulumi.get(self, "hosting_model")

    @property
    @pulumi.getter
    def next(self) -> Optional['outputs.CommitmentPeriodResponse']:
        """
        Cognitive Services account commitment period.
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> Optional[str]:
        """
        Commitment plan type.
        """
        return pulumi.get(self, "plan_type")


@pulumi.output_type
class CommitmentQuotaResponse(dict):
    """
    Cognitive Services account commitment quota.
    """
    def __init__(__self__, *,
                 quantity: Optional[float] = None,
                 unit: Optional[str] = None):
        """
        Cognitive Services account commitment quota.
        :param float quantity: Commitment quota quantity.
        :param str unit: Commitment quota unit.
        """
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def quantity(self) -> Optional[float]:
        """
        Commitment quota quantity.
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        Commitment quota unit.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class DeploymentModelResponse(dict):
    """
    Properties of Cognitive Services account deployment model.
    """
    def __init__(__self__, *,
                 format: Optional[str] = None,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Properties of Cognitive Services account deployment model.
        :param str format: Deployment model format.
        :param str name: Deployment model name.
        :param str version: Deployment model version.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Deployment model format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Deployment model name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Deployment model version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentPropertiesResponse(dict):
    """
    Properties of Cognitive Services account deployment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "scaleSettings":
            suggest = "scale_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 model: Optional['outputs.DeploymentModelResponse'] = None,
                 scale_settings: Optional['outputs.DeploymentScaleSettingsResponse'] = None):
        """
        Properties of Cognitive Services account deployment.
        :param str provisioning_state: Gets the status of the resource at the time the operation was called.
        :param 'DeploymentModelResponse' model: Properties of Cognitive Services account deployment model.
        :param 'DeploymentScaleSettingsResponse' scale_settings: Properties of Cognitive Services account deployment model.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if scale_settings is not None:
            pulumi.set(__self__, "scale_settings", scale_settings)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets the status of the resource at the time the operation was called.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def model(self) -> Optional['outputs.DeploymentModelResponse']:
        """
        Properties of Cognitive Services account deployment model.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="scaleSettings")
    def scale_settings(self) -> Optional['outputs.DeploymentScaleSettingsResponse']:
        """
        Properties of Cognitive Services account deployment model.
        """
        return pulumi.get(self, "scale_settings")


@pulumi.output_type
class DeploymentScaleSettingsResponse(dict):
    """
    Properties of Cognitive Services account deployment model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scaleType":
            suggest = "scale_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentScaleSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentScaleSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentScaleSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity: Optional[int] = None,
                 scale_type: Optional[str] = None):
        """
        Properties of Cognitive Services account deployment model.
        :param int capacity: Deployment capacity.
        :param str scale_type: Deployment scale type.
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if scale_type is not None:
            pulumi.set(__self__, "scale_type", scale_type)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        Deployment capacity.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="scaleType")
    def scale_type(self) -> Optional[str]:
        """
        Deployment scale type.
        """
        return pulumi.get(self, "scale_type")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


