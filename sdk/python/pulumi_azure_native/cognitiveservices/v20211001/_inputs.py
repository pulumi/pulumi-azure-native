# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'CommitmentPeriodArgs',
    'CommitmentPlanPropertiesArgs',
    'DeploymentModelArgs',
    'DeploymentPropertiesArgs',
    'DeploymentScaleSettingsArgs',
]

@pulumi.input_type
class CommitmentPeriodArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        """
        Cognitive Services account commitment period.
        :param pulumi.Input[int] count: Commitment period commitment count.
        :param pulumi.Input[str] tier: Commitment period commitment tier.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Commitment period commitment count.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        Commitment period commitment tier.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


@pulumi.input_type
class CommitmentPlanPropertiesArgs:
    def __init__(__self__, *,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 current: Optional[pulumi.Input['CommitmentPeriodArgs']] = None,
                 hosting_model: Optional[pulumi.Input[Union[str, 'HostingModel']]] = None,
                 next: Optional[pulumi.Input['CommitmentPeriodArgs']] = None,
                 plan_type: Optional[pulumi.Input[str]] = None):
        """
        Properties of Cognitive Services account commitment plan.
        :param pulumi.Input[bool] auto_renew: AutoRenew commitment plan.
        :param pulumi.Input['CommitmentPeriodArgs'] current: Cognitive Services account commitment period.
        :param pulumi.Input[Union[str, 'HostingModel']] hosting_model: Account hosting model.
        :param pulumi.Input['CommitmentPeriodArgs'] next: Cognitive Services account commitment period.
        :param pulumi.Input[str] plan_type: Commitment plan type.
        """
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if current is not None:
            pulumi.set(__self__, "current", current)
        if hosting_model is not None:
            pulumi.set(__self__, "hosting_model", hosting_model)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if plan_type is not None:
            pulumi.set(__self__, "plan_type", plan_type)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        AutoRenew commitment plan.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter
    def current(self) -> Optional[pulumi.Input['CommitmentPeriodArgs']]:
        """
        Cognitive Services account commitment period.
        """
        return pulumi.get(self, "current")

    @current.setter
    def current(self, value: Optional[pulumi.Input['CommitmentPeriodArgs']]):
        pulumi.set(self, "current", value)

    @property
    @pulumi.getter(name="hostingModel")
    def hosting_model(self) -> Optional[pulumi.Input[Union[str, 'HostingModel']]]:
        """
        Account hosting model.
        """
        return pulumi.get(self, "hosting_model")

    @hosting_model.setter
    def hosting_model(self, value: Optional[pulumi.Input[Union[str, 'HostingModel']]]):
        pulumi.set(self, "hosting_model", value)

    @property
    @pulumi.getter
    def next(self) -> Optional[pulumi.Input['CommitmentPeriodArgs']]:
        """
        Cognitive Services account commitment period.
        """
        return pulumi.get(self, "next")

    @next.setter
    def next(self, value: Optional[pulumi.Input['CommitmentPeriodArgs']]):
        pulumi.set(self, "next", value)

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> Optional[pulumi.Input[str]]:
        """
        Commitment plan type.
        """
        return pulumi.get(self, "plan_type")

    @plan_type.setter
    def plan_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_type", value)


@pulumi.input_type
class DeploymentModelArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Properties of Cognitive Services account deployment model.
        :param pulumi.Input[str] format: Deployment model format.
        :param pulumi.Input[str] name: Deployment model name.
        :param pulumi.Input[str] version: Deployment model version.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment model format.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment model name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment model version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentPropertiesArgs:
    def __init__(__self__, *,
                 model: Optional[pulumi.Input['DeploymentModelArgs']] = None,
                 scale_settings: Optional[pulumi.Input['DeploymentScaleSettingsArgs']] = None):
        """
        Properties of Cognitive Services account deployment.
        :param pulumi.Input['DeploymentModelArgs'] model: Properties of Cognitive Services account deployment model.
        :param pulumi.Input['DeploymentScaleSettingsArgs'] scale_settings: Properties of Cognitive Services account deployment model.
        """
        if model is not None:
            pulumi.set(__self__, "model", model)
        if scale_settings is not None:
            pulumi.set(__self__, "scale_settings", scale_settings)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input['DeploymentModelArgs']]:
        """
        Properties of Cognitive Services account deployment model.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input['DeploymentModelArgs']]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="scaleSettings")
    def scale_settings(self) -> Optional[pulumi.Input['DeploymentScaleSettingsArgs']]:
        """
        Properties of Cognitive Services account deployment model.
        """
        return pulumi.get(self, "scale_settings")

    @scale_settings.setter
    def scale_settings(self, value: Optional[pulumi.Input['DeploymentScaleSettingsArgs']]):
        pulumi.set(self, "scale_settings", value)


@pulumi.input_type
class DeploymentScaleSettingsArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[int]] = None,
                 scale_type: Optional[pulumi.Input[Union[str, 'DeploymentScaleType']]] = None):
        """
        Properties of Cognitive Services account deployment model.
        :param pulumi.Input[int] capacity: Deployment capacity.
        :param pulumi.Input[Union[str, 'DeploymentScaleType']] scale_type: Deployment scale type.
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if scale_type is not None:
            pulumi.set(__self__, "scale_type", scale_type)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Deployment capacity.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter(name="scaleType")
    def scale_type(self) -> Optional[pulumi.Input[Union[str, 'DeploymentScaleType']]]:
        """
        Deployment scale type.
        """
        return pulumi.get(self, "scale_type")

    @scale_type.setter
    def scale_type(self, value: Optional[pulumi.Input[Union[str, 'DeploymentScaleType']]]):
        pulumi.set(self, "scale_type", value)


