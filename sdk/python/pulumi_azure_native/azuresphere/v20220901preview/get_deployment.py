# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetDeploymentResult',
    'AwaitableGetDeploymentResult',
    'get_deployment',
    'get_deployment_output',
]

@pulumi.output_type
class GetDeploymentResult:
    """
    An deployment resource belonging to a device group resource.
    """
    def __init__(__self__, deployed_images=None, deployment_date_utc=None, deployment_id=None, id=None, name=None, provisioning_state=None, system_data=None, type=None):
        if deployed_images and not isinstance(deployed_images, list):
            raise TypeError("Expected argument 'deployed_images' to be a list")
        pulumi.set(__self__, "deployed_images", deployed_images)
        if deployment_date_utc and not isinstance(deployment_date_utc, str):
            raise TypeError("Expected argument 'deployment_date_utc' to be a str")
        pulumi.set(__self__, "deployment_date_utc", deployment_date_utc)
        if deployment_id and not isinstance(deployment_id, str):
            raise TypeError("Expected argument 'deployment_id' to be a str")
        pulumi.set(__self__, "deployment_id", deployment_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="deployedImages")
    def deployed_images(self) -> Optional[Sequence['outputs.ImageResponse']]:
        """
        Images deployed
        """
        return pulumi.get(self, "deployed_images")

    @property
    @pulumi.getter(name="deploymentDateUtc")
    def deployment_date_utc(self) -> str:
        """
        Deployment date UTC
        """
        return pulumi.get(self, "deployment_date_utc")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[str]:
        """
        Deployment ID
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetDeploymentResult(GetDeploymentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeploymentResult(
            deployed_images=self.deployed_images,
            deployment_date_utc=self.deployment_date_utc,
            deployment_id=self.deployment_id,
            id=self.id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            type=self.type)


def get_deployment(catalog_name: Optional[str] = None,
                   deployment_name: Optional[str] = None,
                   device_group_name: Optional[str] = None,
                   product_name: Optional[str] = None,
                   resource_group_name: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeploymentResult:
    """
    Get a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or device group name.


    :param str catalog_name: Name of catalog
    :param str deployment_name: Deployment name. Use .default for deployment creation and to get the current deployment for the associated device group.
    :param str device_group_name: Name of device group.
    :param str product_name: Name of product.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['catalogName'] = catalog_name
    __args__['deploymentName'] = deployment_name
    __args__['deviceGroupName'] = device_group_name
    __args__['productName'] = product_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:azuresphere/v20220901preview:getDeployment', __args__, opts=opts, typ=GetDeploymentResult).value

    return AwaitableGetDeploymentResult(
        deployed_images=pulumi.get(__ret__, 'deployed_images'),
        deployment_date_utc=pulumi.get(__ret__, 'deployment_date_utc'),
        deployment_id=pulumi.get(__ret__, 'deployment_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_deployment)
def get_deployment_output(catalog_name: Optional[pulumi.Input[str]] = None,
                          deployment_name: Optional[pulumi.Input[str]] = None,
                          device_group_name: Optional[pulumi.Input[str]] = None,
                          product_name: Optional[pulumi.Input[str]] = None,
                          resource_group_name: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDeploymentResult]:
    """
    Get a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or device group name.


    :param str catalog_name: Name of catalog
    :param str deployment_name: Deployment name. Use .default for deployment creation and to get the current deployment for the associated device group.
    :param str device_group_name: Name of device group.
    :param str product_name: Name of product.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
