# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ControllerConnectionDetailsResponse',
    'ControllerPropertiesResponse',
    'KubernetesConnectionDetailsResponse',
    'SkuResponse',
]

@pulumi.output_type
class ControllerConnectionDetailsResponse(dict):
    def __init__(__self__, *,
                 orchestrator_specific_connection_details: Optional['outputs.KubernetesConnectionDetailsResponse'] = None):
        """
        :param 'KubernetesConnectionDetailsResponse' orchestrator_specific_connection_details: Base class for types that supply values used to connect to container orchestrators
        """
        if orchestrator_specific_connection_details is not None:
            pulumi.set(__self__, "orchestrator_specific_connection_details", orchestrator_specific_connection_details)

    @property
    @pulumi.getter(name="orchestratorSpecificConnectionDetails")
    def orchestrator_specific_connection_details(self) -> Optional['outputs.KubernetesConnectionDetailsResponse']:
        """
        Base class for types that supply values used to connect to container orchestrators
        """
        return pulumi.get(self, "orchestrator_specific_connection_details")


@pulumi.output_type
class ControllerPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataPlaneFqdn":
            suggest = "data_plane_fqdn"
        elif key == "hostSuffix":
            suggest = "host_suffix"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "targetContainerHostApiServerFqdn":
            suggest = "target_container_host_api_server_fqdn"
        elif key == "targetContainerHostResourceId":
            suggest = "target_container_host_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ControllerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ControllerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ControllerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_plane_fqdn: str,
                 host_suffix: str,
                 provisioning_state: str,
                 target_container_host_api_server_fqdn: str,
                 target_container_host_resource_id: str):
        """
        :param str data_plane_fqdn: DNS name for accessing DataPlane services
        :param str host_suffix: DNS suffix for public endpoints running in the Azure Dev Spaces Controller.
        :param str provisioning_state: Provisioning state of the Azure Dev Spaces Controller.
        :param str target_container_host_api_server_fqdn: DNS of the target container host's API server
        :param str target_container_host_resource_id: Resource ID of the target container host
        """
        pulumi.set(__self__, "data_plane_fqdn", data_plane_fqdn)
        pulumi.set(__self__, "host_suffix", host_suffix)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "target_container_host_api_server_fqdn", target_container_host_api_server_fqdn)
        pulumi.set(__self__, "target_container_host_resource_id", target_container_host_resource_id)

    @property
    @pulumi.getter(name="dataPlaneFqdn")
    def data_plane_fqdn(self) -> str:
        """
        DNS name for accessing DataPlane services
        """
        return pulumi.get(self, "data_plane_fqdn")

    @property
    @pulumi.getter(name="hostSuffix")
    def host_suffix(self) -> str:
        """
        DNS suffix for public endpoints running in the Azure Dev Spaces Controller.
        """
        return pulumi.get(self, "host_suffix")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the Azure Dev Spaces Controller.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="targetContainerHostApiServerFqdn")
    def target_container_host_api_server_fqdn(self) -> str:
        """
        DNS of the target container host's API server
        """
        return pulumi.get(self, "target_container_host_api_server_fqdn")

    @property
    @pulumi.getter(name="targetContainerHostResourceId")
    def target_container_host_resource_id(self) -> str:
        """
        Resource ID of the target container host
        """
        return pulumi.get(self, "target_container_host_resource_id")


@pulumi.output_type
class KubernetesConnectionDetailsResponse(dict):
    """
    Contains information used to connect to a Kubernetes cluster
    """
    def __init__(__self__, *,
                 instance_type: str,
                 kube_config: Optional[str] = None):
        """
        Contains information used to connect to a Kubernetes cluster
        :param str instance_type: Gets the Instance type.
               Expected value is 'Kubernetes'.
        :param str kube_config: Gets the kubeconfig for the cluster.
        """
        pulumi.set(__self__, "instance_type", 'Kubernetes')
        if kube_config is not None:
            pulumi.set(__self__, "kube_config", kube_config)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        Expected value is 'Kubernetes'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="kubeConfig")
    def kube_config(self) -> Optional[str]:
        """
        Gets the kubeconfig for the cluster.
        """
        return pulumi.get(self, "kube_config")


@pulumi.output_type
class SkuResponse(dict):
    """
    Model representing SKU for Azure Dev Spaces Controller.
    """
    def __init__(__self__, *,
                 name: str,
                 tier: Optional[str] = None):
        """
        Model representing SKU for Azure Dev Spaces Controller.
        :param str name: The name of the SKU for Azure Dev Spaces Controller.
        :param str tier: The tier of the SKU for Azure Dev Spaces Controller.
        """
        pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SKU for Azure Dev Spaces Controller.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        The tier of the SKU for Azure Dev Spaces Controller.
        """
        return pulumi.get(self, "tier")


