# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from ._enums import *
from .account import *
from .backup import *
from .backup_policy import *
from .get_account import *
from .get_backup import *
from .get_backup_policy import *
from .get_pool import *
from .get_snapshot import *
from .get_snapshot_policy import *
from .get_volume import *
from .pool import *
from .snapshot import *
from .snapshot_policy import *
from .volume import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    latest,
    v20170815,
    v20190501,
    v20190601,
    v20190701,
    v20190801,
    v20191001,
    v20191101,
    v20200201,
    v20200301,
    v20200501,
    v20200601,
    v20200701,
    v20200801,
    v20200901,
    v20201101,
    v20201201,
)

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "azure-native:netapp:Account":
                return Account(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:netapp:Backup":
                return Backup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:netapp:BackupPolicy":
                return BackupPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:netapp:Pool":
                return Pool(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:netapp:Snapshot":
                return Snapshot(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:netapp:SnapshotPolicy":
                return SnapshotPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:netapp:Volume":
                return Volume(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("azure-native", "netapp", _module_instance)

_register_module()
