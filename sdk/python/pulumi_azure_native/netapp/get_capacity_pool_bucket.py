# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCapacityPoolBucketResult',
    'AwaitableGetCapacityPoolBucketResult',
    'get_capacity_pool_bucket',
    'get_capacity_pool_bucket_output',
]

@pulumi.output_type
class GetCapacityPoolBucketResult:
    """
    Bucket resource
    """
    def __init__(__self__, azure_api_version=None, file_system_user=None, id=None, name=None, path=None, provisioning_state=None, server=None, status=None, system_data=None, type=None):
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if file_system_user and not isinstance(file_system_user, dict):
            raise TypeError("Expected argument 'file_system_user' to be a dict")
        pulumi.set(__self__, "file_system_user", file_system_user)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if server and not isinstance(server, dict):
            raise TypeError("Expected argument 'server' to be a dict")
        pulumi.set(__self__, "server", server)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> builtins.str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="fileSystemUser")
    def file_system_user(self) -> Optional['outputs.FileSystemUserResponse']:
        """
        File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be supplied, but not both.
        """
        return pulumi.get(self, "file_system_user")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[builtins.str]:
        """
        The volume path mounted inside the bucket. The default is the root path '/' if no value is provided when the bucket is created.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        Provisioning state of the resource
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def server(self) -> Optional['outputs.BucketServerPropertiesResponse']:
        """
        Properties of the server managing the lifecycle of volume buckets
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The bucket credentials status. There states:

        "NoCredentialsSet": Access and Secret key pair have not been generated.
        "CredentialsExpired": Access and Secret key pair have expired.
        "Active": The certificate has been installed and credentials are unexpired.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetCapacityPoolBucketResult(GetCapacityPoolBucketResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCapacityPoolBucketResult(
            azure_api_version=self.azure_api_version,
            file_system_user=self.file_system_user,
            id=self.id,
            name=self.name,
            path=self.path,
            provisioning_state=self.provisioning_state,
            server=self.server,
            status=self.status,
            system_data=self.system_data,
            type=self.type)


def get_capacity_pool_bucket(account_name: Optional[builtins.str] = None,
                             bucket_name: Optional[builtins.str] = None,
                             pool_name: Optional[builtins.str] = None,
                             resource_group_name: Optional[builtins.str] = None,
                             volume_name: Optional[builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCapacityPoolBucketResult:
    """
    Get the details of the specified volume's bucket. A bucket allows additional services, such as AI services, connect to the volume data contained in those buckets.

    Uses Azure REST API version 2025-01-01-preview.


    :param builtins.str account_name: The name of the NetApp account
    :param builtins.str bucket_name: The name of the bucket
    :param builtins.str pool_name: The name of the capacity pool
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    :param builtins.str volume_name: The name of the volume
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['bucketName'] = bucket_name
    __args__['poolName'] = pool_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['volumeName'] = volume_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:netapp:getCapacityPoolBucket', __args__, opts=opts, typ=GetCapacityPoolBucketResult).value

    return AwaitableGetCapacityPoolBucketResult(
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        file_system_user=pulumi.get(__ret__, 'file_system_user'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        path=pulumi.get(__ret__, 'path'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        server=pulumi.get(__ret__, 'server'),
        status=pulumi.get(__ret__, 'status'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))
def get_capacity_pool_bucket_output(account_name: Optional[pulumi.Input[builtins.str]] = None,
                                    bucket_name: Optional[pulumi.Input[builtins.str]] = None,
                                    pool_name: Optional[pulumi.Input[builtins.str]] = None,
                                    resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                                    volume_name: Optional[pulumi.Input[builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCapacityPoolBucketResult]:
    """
    Get the details of the specified volume's bucket. A bucket allows additional services, such as AI services, connect to the volume data contained in those buckets.

    Uses Azure REST API version 2025-01-01-preview.


    :param builtins.str account_name: The name of the NetApp account
    :param builtins.str bucket_name: The name of the bucket
    :param builtins.str pool_name: The name of the capacity pool
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    :param builtins.str volume_name: The name of the volume
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['bucketName'] = bucket_name
    __args__['poolName'] = pool_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['volumeName'] = volume_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:netapp:getCapacityPoolBucket', __args__, opts=opts, typ=GetCapacityPoolBucketResult)
    return __ret__.apply(lambda __response__: GetCapacityPoolBucketResult(
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        file_system_user=pulumi.get(__response__, 'file_system_user'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        path=pulumi.get(__response__, 'path'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        server=pulumi.get(__response__, 'server'),
        status=pulumi.get(__response__, 'status'),
        system_data=pulumi.get(__response__, 'system_data'),
        type=pulumi.get(__response__, 'type')))
