# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'VolumeBackupsArgs',
]

@pulumi.input_type
class VolumeBackupsArgs:
    def __init__(__self__, *,
                 backups_count: Optional[pulumi.Input[int]] = None,
                 policy_enabled: Optional[pulumi.Input[bool]] = None,
                 volume_name: Optional[pulumi.Input[str]] = None):
        """
        Volume details using the backup policy
        :param pulumi.Input[int] backups_count: Total count of backups for volume
        :param pulumi.Input[bool] policy_enabled: Policy enabled
        :param pulumi.Input[str] volume_name: Volume name
        """
        if backups_count is not None:
            pulumi.set(__self__, "backups_count", backups_count)
        if policy_enabled is not None:
            pulumi.set(__self__, "policy_enabled", policy_enabled)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter(name="backupsCount")
    def backups_count(self) -> Optional[pulumi.Input[int]]:
        """
        Total count of backups for volume
        """
        return pulumi.get(self, "backups_count")

    @backups_count.setter
    def backups_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backups_count", value)

    @property
    @pulumi.getter(name="policyEnabled")
    def policy_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Policy enabled
        """
        return pulumi.get(self, "policy_enabled")

    @policy_enabled.setter
    def policy_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "policy_enabled", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        Volume name
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)


