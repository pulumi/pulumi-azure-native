# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AutoStorageBasePropertiesArgs',
    'BatchAccountIdentityArgs',
    'ComputeNodeIdentityReferenceArgs',
    'EncryptionPropertiesArgs',
    'KeyVaultPropertiesArgs',
    'KeyVaultReferenceArgs',
]

@pulumi.input_type
class AutoStorageBasePropertiesArgs:
    def __init__(__self__, *,
                 storage_account_id: pulumi.Input[str],
                 authentication_mode: Optional[pulumi.Input['AutoStorageAuthenticationMode']] = None,
                 node_identity_reference: Optional[pulumi.Input['ComputeNodeIdentityReferenceArgs']] = None):
        """
        The properties related to the auto-storage account.
        :param pulumi.Input[str] storage_account_id: The resource ID of the storage account to be used for auto-storage account.
        :param pulumi.Input['AutoStorageAuthenticationMode'] authentication_mode: The authentication mode which the Batch service will use to manage the auto-storage account.
        :param pulumi.Input['ComputeNodeIdentityReferenceArgs'] node_identity_reference: The identity referenced here must be assigned to pools which have compute nodes that need access to auto-storage.
        """
        pulumi.set(__self__, "storage_account_id", storage_account_id)
        if authentication_mode is None:
            authentication_mode = 'StorageKeys'
        if authentication_mode is not None:
            pulumi.set(__self__, "authentication_mode", authentication_mode)
        if node_identity_reference is not None:
            pulumi.set(__self__, "node_identity_reference", node_identity_reference)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the storage account to be used for auto-storage account.
        """
        return pulumi.get(self, "storage_account_id")

    @storage_account_id.setter
    def storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account_id", value)

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> Optional[pulumi.Input['AutoStorageAuthenticationMode']]:
        """
        The authentication mode which the Batch service will use to manage the auto-storage account.
        """
        return pulumi.get(self, "authentication_mode")

    @authentication_mode.setter
    def authentication_mode(self, value: Optional[pulumi.Input['AutoStorageAuthenticationMode']]):
        pulumi.set(self, "authentication_mode", value)

    @property
    @pulumi.getter(name="nodeIdentityReference")
    def node_identity_reference(self) -> Optional[pulumi.Input['ComputeNodeIdentityReferenceArgs']]:
        """
        The identity referenced here must be assigned to pools which have compute nodes that need access to auto-storage.
        """
        return pulumi.get(self, "node_identity_reference")

    @node_identity_reference.setter
    def node_identity_reference(self, value: Optional[pulumi.Input['ComputeNodeIdentityReferenceArgs']]):
        pulumi.set(self, "node_identity_reference", value)


@pulumi.input_type
class BatchAccountIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['ResourceIdentityType'],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The identity of the Batch account, if configured. This is used when the user specifies 'Microsoft.KeyVault' as their Batch account encryption configuration or when `ManagedIdentity` is selected as the auto-storage authentication mode.
        :param pulumi.Input['ResourceIdentityType'] type: The type of identity used for the Batch account.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The list of user identities associated with the Batch account.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ResourceIdentityType']:
        """
        The type of identity used for the Batch account.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ResourceIdentityType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of user identities associated with the Batch account.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


@pulumi.input_type
class ComputeNodeIdentityReferenceArgs:
    def __init__(__self__, *,
                 resource_id: Optional[pulumi.Input[str]] = None):
        """
        The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        :param pulumi.Input[str] resource_id: The ARM resource id of the user assigned identity.
        """
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM resource id of the user assigned identity.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)


@pulumi.input_type
class EncryptionPropertiesArgs:
    def __init__(__self__, *,
                 key_source: Optional[pulumi.Input['KeySource']] = None,
                 key_vault_properties: Optional[pulumi.Input['KeyVaultPropertiesArgs']] = None):
        """
        Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
        :param pulumi.Input['KeySource'] key_source: Type of the key source.
        :param pulumi.Input['KeyVaultPropertiesArgs'] key_vault_properties: Additional details when using Microsoft.KeyVault
        """
        if key_source is not None:
            pulumi.set(__self__, "key_source", key_source)
        if key_vault_properties is not None:
            pulumi.set(__self__, "key_vault_properties", key_vault_properties)

    @property
    @pulumi.getter(name="keySource")
    def key_source(self) -> Optional[pulumi.Input['KeySource']]:
        """
        Type of the key source.
        """
        return pulumi.get(self, "key_source")

    @key_source.setter
    def key_source(self, value: Optional[pulumi.Input['KeySource']]):
        pulumi.set(self, "key_source", value)

    @property
    @pulumi.getter(name="keyVaultProperties")
    def key_vault_properties(self) -> Optional[pulumi.Input['KeyVaultPropertiesArgs']]:
        """
        Additional details when using Microsoft.KeyVault
        """
        return pulumi.get(self, "key_vault_properties")

    @key_vault_properties.setter
    def key_vault_properties(self, value: Optional[pulumi.Input['KeyVaultPropertiesArgs']]):
        pulumi.set(self, "key_vault_properties", value)


@pulumi.input_type
class KeyVaultPropertiesArgs:
    def __init__(__self__, *,
                 key_identifier: Optional[pulumi.Input[str]] = None):
        """
        KeyVault configuration when using an encryption KeySource of Microsoft.KeyVault.
        :param pulumi.Input[str] key_identifier: Full path to the versioned secret. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. To be usable the following prerequisites must be met:
               
                The Batch Account has a System Assigned identity
                The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
                The KeyVault has soft-delete and purge protection enabled
        """
        if key_identifier is not None:
            pulumi.set(__self__, "key_identifier", key_identifier)

    @property
    @pulumi.getter(name="keyIdentifier")
    def key_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Full path to the versioned secret. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. To be usable the following prerequisites must be met:

         The Batch Account has a System Assigned identity
         The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
         The KeyVault has soft-delete and purge protection enabled
        """
        return pulumi.get(self, "key_identifier")

    @key_identifier.setter
    def key_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_identifier", value)


@pulumi.input_type
class KeyVaultReferenceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 url: pulumi.Input[str]):
        """
        Identifies the Azure key vault associated with a Batch account.
        :param pulumi.Input[str] id: The resource ID of the Azure key vault associated with the Batch account.
        :param pulumi.Input[str] url: The URL of the Azure key vault associated with the Batch account.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The resource ID of the Azure key vault associated with the Batch account.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the Azure key vault associated with the Batch account.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


