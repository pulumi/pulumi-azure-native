# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from ._enums import *
from .application import *
from .application_package import *
from .batch_account import *
from .certificate import *
from .get_application import *
from .get_application_package import *
from .get_batch_account import *
from .get_certificate import *
from .get_pool import *
from .list_batch_account_keys import *
from .pool import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    latest,
    v20151201,
    v20170101,
    v20170501,
    v20170901,
    v20181201,
    v20190401,
    v20190801,
    v20200301,
    v20200501,
    v20200901,
    v20210101,
)

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "azure-native:batch:Application":
                return Application(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:batch:ApplicationPackage":
                return ApplicationPackage(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:batch:BatchAccount":
                return BatchAccount(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:batch:Certificate":
                return Certificate(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:batch:Pool":
                return Pool(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("azure-native", "batch", _module_instance)

_register_module()
