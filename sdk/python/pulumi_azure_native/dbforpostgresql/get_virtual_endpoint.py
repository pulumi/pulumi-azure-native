# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetVirtualEndpointResult',
    'AwaitableGetVirtualEndpointResult',
    'get_virtual_endpoint',
    'get_virtual_endpoint_output',
]

@pulumi.output_type
class GetVirtualEndpointResult:
    """
    Represents a virtual endpoint for a server.
    """
    def __init__(__self__, endpoint_type=None, id=None, members=None, name=None, system_data=None, type=None, virtual_endpoints=None):
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if virtual_endpoints and not isinstance(virtual_endpoints, list):
            raise TypeError("Expected argument 'virtual_endpoints' to be a list")
        pulumi.set(__self__, "virtual_endpoints", virtual_endpoints)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[str]:
        """
        The endpoint type for the virtual endpoint.
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence[str]]:
        """
        List of members for a virtual endpoint
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualEndpoints")
    def virtual_endpoints(self) -> Sequence[str]:
        """
        List of virtual endpoints for a server
        """
        return pulumi.get(self, "virtual_endpoints")


class AwaitableGetVirtualEndpointResult(GetVirtualEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualEndpointResult(
            endpoint_type=self.endpoint_type,
            id=self.id,
            members=self.members,
            name=self.name,
            system_data=self.system_data,
            type=self.type,
            virtual_endpoints=self.virtual_endpoints)


def get_virtual_endpoint(resource_group_name: Optional[str] = None,
                         server_name: Optional[str] = None,
                         virtual_endpoint_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualEndpointResult:
    """
    Gets information about a virtual endpoint.
    Azure REST API version: 2023-06-01-preview.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str server_name: The name of the server.
    :param str virtual_endpoint_name: The name of the virtual endpoint.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['serverName'] = server_name
    __args__['virtualEndpointName'] = virtual_endpoint_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:dbforpostgresql:getVirtualEndpoint', __args__, opts=opts, typ=GetVirtualEndpointResult).value

    return AwaitableGetVirtualEndpointResult(
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        id=pulumi.get(__ret__, 'id'),
        members=pulumi.get(__ret__, 'members'),
        name=pulumi.get(__ret__, 'name'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'),
        virtual_endpoints=pulumi.get(__ret__, 'virtual_endpoints'))


@_utilities.lift_output_func(get_virtual_endpoint)
def get_virtual_endpoint_output(resource_group_name: Optional[pulumi.Input[str]] = None,
                                server_name: Optional[pulumi.Input[str]] = None,
                                virtual_endpoint_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVirtualEndpointResult]:
    """
    Gets information about a virtual endpoint.
    Azure REST API version: 2023-06-01-preview.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str server_name: The name of the server.
    :param str virtual_endpoint_name: The name of the virtual endpoint.
    """
    ...
