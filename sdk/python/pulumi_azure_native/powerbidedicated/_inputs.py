# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'AutoScaleVCoreSkuArgs',
    'AutoScaleVCoreSkuArgsDict',
    'CapacitySkuArgs',
    'CapacitySkuArgsDict',
    'DedicatedCapacityAdministratorsArgs',
    'DedicatedCapacityAdministratorsArgsDict',
]

MYPY = False

if not MYPY:
    class AutoScaleVCoreSkuArgsDict(TypedDict):
        """
        Represents the SKU name and Azure pricing tier for auto scale v-core resource.
        """
        name: pulumi.Input[builtins.str]
        """
        Name of the SKU level.
        """
        capacity: NotRequired[pulumi.Input[builtins.int]]
        """
        The capacity of an auto scale v-core resource.
        """
        tier: NotRequired[pulumi.Input[Union[builtins.str, 'VCoreSkuTier']]]
        """
        The name of the Azure pricing tier to which the SKU applies.
        """
elif False:
    AutoScaleVCoreSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutoScaleVCoreSkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 capacity: Optional[pulumi.Input[builtins.int]] = None,
                 tier: Optional[pulumi.Input[Union[builtins.str, 'VCoreSkuTier']]] = None):
        """
        Represents the SKU name and Azure pricing tier for auto scale v-core resource.
        :param pulumi.Input[builtins.str] name: Name of the SKU level.
        :param pulumi.Input[builtins.int] capacity: The capacity of an auto scale v-core resource.
        :param pulumi.Input[Union[builtins.str, 'VCoreSkuTier']] tier: The name of the Azure pricing tier to which the SKU applies.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the SKU level.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The capacity of an auto scale v-core resource.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[Union[builtins.str, 'VCoreSkuTier']]]:
        """
        The name of the Azure pricing tier to which the SKU applies.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[Union[builtins.str, 'VCoreSkuTier']]]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class CapacitySkuArgsDict(TypedDict):
        """
        Represents the SKU name and Azure pricing tier for PowerBI Dedicated capacity resource.
        """
        name: pulumi.Input[builtins.str]
        """
        Name of the SKU level.
        """
        capacity: NotRequired[pulumi.Input[builtins.int]]
        """
        The capacity of the SKU.
        """
        tier: NotRequired[pulumi.Input[Union[builtins.str, 'CapacitySkuTier']]]
        """
        The name of the Azure pricing tier to which the SKU applies.
        """
elif False:
    CapacitySkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CapacitySkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 capacity: Optional[pulumi.Input[builtins.int]] = None,
                 tier: Optional[pulumi.Input[Union[builtins.str, 'CapacitySkuTier']]] = None):
        """
        Represents the SKU name and Azure pricing tier for PowerBI Dedicated capacity resource.
        :param pulumi.Input[builtins.str] name: Name of the SKU level.
        :param pulumi.Input[builtins.int] capacity: The capacity of the SKU.
        :param pulumi.Input[Union[builtins.str, 'CapacitySkuTier']] tier: The name of the Azure pricing tier to which the SKU applies.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the SKU level.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The capacity of the SKU.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[Union[builtins.str, 'CapacitySkuTier']]]:
        """
        The name of the Azure pricing tier to which the SKU applies.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[Union[builtins.str, 'CapacitySkuTier']]]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class DedicatedCapacityAdministratorsArgsDict(TypedDict):
        """
        An array of administrator user identities
        """
        members: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        An array of administrator user identities.
        """
elif False:
    DedicatedCapacityAdministratorsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DedicatedCapacityAdministratorsArgs:
    def __init__(__self__, *,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        An array of administrator user identities
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] members: An array of administrator user identities.
        """
        if members is not None:
            pulumi.set(__self__, "members", members)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        An array of administrator user identities.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "members", value)


