# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'A2AProtectedManagedDiskDetailsResponse',
    'A2AReplicationProtectionClusterDetailsResponse',
    'A2ASharedDiskIRErrorDetailsResponse',
    'A2ASharedDiskReplicationDetailsResponse',
    'A2AUnprotectedDiskDetailsResponse',
    'CurrentScenarioDetailsResponse',
    'ExtendedLocationResponse',
    'HealthErrorResponse',
    'InnerHealthErrorResponse',
    'RegisteredClusterNodesResponse',
    'ReplicationProtectionClusterPropertiesResponse',
    'SharedDiskReplicationItemPropertiesResponse',
]

@pulumi.output_type
class A2AProtectedManagedDiskDetailsResponse(dict):
    """
    A2A protected managed disk details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedDiskLevelOperation":
            suggest = "allowed_disk_level_operation"
        elif key == "dataPendingAtSourceAgentInMB":
            suggest = "data_pending_at_source_agent_in_mb"
        elif key == "dataPendingInStagingStorageAccountInMB":
            suggest = "data_pending_in_staging_storage_account_in_mb"
        elif key == "dekKeyVaultArmId":
            suggest = "dek_key_vault_arm_id"
        elif key == "diskCapacityInBytes":
            suggest = "disk_capacity_in_bytes"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "diskName":
            suggest = "disk_name"
        elif key == "diskState":
            suggest = "disk_state"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "failoverDiskName":
            suggest = "failover_disk_name"
        elif key == "isDiskEncrypted":
            suggest = "is_disk_encrypted"
        elif key == "isDiskKeyEncrypted":
            suggest = "is_disk_key_encrypted"
        elif key == "kekKeyVaultArmId":
            suggest = "kek_key_vault_arm_id"
        elif key == "keyIdentifier":
            suggest = "key_identifier"
        elif key == "monitoringJobType":
            suggest = "monitoring_job_type"
        elif key == "monitoringPercentageCompletion":
            suggest = "monitoring_percentage_completion"
        elif key == "primaryDiskEncryptionSetId":
            suggest = "primary_disk_encryption_set_id"
        elif key == "primaryStagingAzureStorageAccountId":
            suggest = "primary_staging_azure_storage_account_id"
        elif key == "recoveryDiskEncryptionSetId":
            suggest = "recovery_disk_encryption_set_id"
        elif key == "recoveryOrignalTargetDiskId":
            suggest = "recovery_orignal_target_disk_id"
        elif key == "recoveryReplicaDiskAccountType":
            suggest = "recovery_replica_disk_account_type"
        elif key == "recoveryReplicaDiskId":
            suggest = "recovery_replica_disk_id"
        elif key == "recoveryResourceGroupId":
            suggest = "recovery_resource_group_id"
        elif key == "recoveryTargetDiskAccountType":
            suggest = "recovery_target_disk_account_type"
        elif key == "recoveryTargetDiskId":
            suggest = "recovery_target_disk_id"
        elif key == "resyncRequired":
            suggest = "resync_required"
        elif key == "secretIdentifier":
            suggest = "secret_identifier"
        elif key == "tfoDiskName":
            suggest = "tfo_disk_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in A2AProtectedManagedDiskDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        A2AProtectedManagedDiskDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        A2AProtectedManagedDiskDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_disk_level_operation: Optional[Sequence[str]] = None,
                 data_pending_at_source_agent_in_mb: Optional[float] = None,
                 data_pending_in_staging_storage_account_in_mb: Optional[float] = None,
                 dek_key_vault_arm_id: Optional[str] = None,
                 disk_capacity_in_bytes: Optional[float] = None,
                 disk_id: Optional[str] = None,
                 disk_name: Optional[str] = None,
                 disk_state: Optional[str] = None,
                 disk_type: Optional[str] = None,
                 failover_disk_name: Optional[str] = None,
                 is_disk_encrypted: Optional[bool] = None,
                 is_disk_key_encrypted: Optional[bool] = None,
                 kek_key_vault_arm_id: Optional[str] = None,
                 key_identifier: Optional[str] = None,
                 monitoring_job_type: Optional[str] = None,
                 monitoring_percentage_completion: Optional[int] = None,
                 primary_disk_encryption_set_id: Optional[str] = None,
                 primary_staging_azure_storage_account_id: Optional[str] = None,
                 recovery_disk_encryption_set_id: Optional[str] = None,
                 recovery_orignal_target_disk_id: Optional[str] = None,
                 recovery_replica_disk_account_type: Optional[str] = None,
                 recovery_replica_disk_id: Optional[str] = None,
                 recovery_resource_group_id: Optional[str] = None,
                 recovery_target_disk_account_type: Optional[str] = None,
                 recovery_target_disk_id: Optional[str] = None,
                 resync_required: Optional[bool] = None,
                 secret_identifier: Optional[str] = None,
                 tfo_disk_name: Optional[str] = None):
        """
        A2A protected managed disk details.
        :param Sequence[str] allowed_disk_level_operation: The disk level operations list.
        :param float data_pending_at_source_agent_in_mb: The data pending at source virtual machine in MB.
        :param float data_pending_in_staging_storage_account_in_mb: The data pending for replication in MB at staging account.
        :param str dek_key_vault_arm_id: The KeyVault resource id for secret (BEK).
        :param float disk_capacity_in_bytes: The disk capacity in bytes.
        :param str disk_id: The managed disk Arm id.
        :param str disk_name: The disk name.
        :param str disk_state: The disk state.
        :param str disk_type: The type of disk.
        :param str failover_disk_name: The failover name for the managed disk.
        :param bool is_disk_encrypted: A value indicating whether vm has encrypted os disk or not.
        :param bool is_disk_key_encrypted: A value indicating whether disk key got encrypted or not.
        :param str kek_key_vault_arm_id: The KeyVault resource id for key (KEK).
        :param str key_identifier: The key URL / identifier (KEK).
        :param str monitoring_job_type: The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
        :param int monitoring_percentage_completion: The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
        :param str primary_disk_encryption_set_id: The primary disk encryption set Id.
        :param str primary_staging_azure_storage_account_id: The primary staging storage account.
        :param str recovery_disk_encryption_set_id: The recovery disk encryption set Id.
        :param str recovery_orignal_target_disk_id: Recovery original target disk Arm Id.
        :param str recovery_replica_disk_account_type: The replica disk type. Its an optional value and will be same as source disk type if not user provided.
        :param str recovery_replica_disk_id: Recovery replica disk Arm Id.
        :param str recovery_resource_group_id: The recovery disk resource group Arm Id.
        :param str recovery_target_disk_account_type: The target disk type after failover. Its an optional value and will be same as source disk type if not user provided.
        :param str recovery_target_disk_id: Recovery target disk Arm Id.
        :param bool resync_required: A value indicating whether resync is required for this disk.
        :param str secret_identifier: The secret URL / identifier (BEK).
        :param str tfo_disk_name: The test failover name for the managed disk.
        """
        if allowed_disk_level_operation is not None:
            pulumi.set(__self__, "allowed_disk_level_operation", allowed_disk_level_operation)
        if data_pending_at_source_agent_in_mb is not None:
            pulumi.set(__self__, "data_pending_at_source_agent_in_mb", data_pending_at_source_agent_in_mb)
        if data_pending_in_staging_storage_account_in_mb is not None:
            pulumi.set(__self__, "data_pending_in_staging_storage_account_in_mb", data_pending_in_staging_storage_account_in_mb)
        if dek_key_vault_arm_id is not None:
            pulumi.set(__self__, "dek_key_vault_arm_id", dek_key_vault_arm_id)
        if disk_capacity_in_bytes is not None:
            pulumi.set(__self__, "disk_capacity_in_bytes", disk_capacity_in_bytes)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_name is not None:
            pulumi.set(__self__, "disk_name", disk_name)
        if disk_state is not None:
            pulumi.set(__self__, "disk_state", disk_state)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if failover_disk_name is not None:
            pulumi.set(__self__, "failover_disk_name", failover_disk_name)
        if is_disk_encrypted is not None:
            pulumi.set(__self__, "is_disk_encrypted", is_disk_encrypted)
        if is_disk_key_encrypted is not None:
            pulumi.set(__self__, "is_disk_key_encrypted", is_disk_key_encrypted)
        if kek_key_vault_arm_id is not None:
            pulumi.set(__self__, "kek_key_vault_arm_id", kek_key_vault_arm_id)
        if key_identifier is not None:
            pulumi.set(__self__, "key_identifier", key_identifier)
        if monitoring_job_type is not None:
            pulumi.set(__self__, "monitoring_job_type", monitoring_job_type)
        if monitoring_percentage_completion is not None:
            pulumi.set(__self__, "monitoring_percentage_completion", monitoring_percentage_completion)
        if primary_disk_encryption_set_id is not None:
            pulumi.set(__self__, "primary_disk_encryption_set_id", primary_disk_encryption_set_id)
        if primary_staging_azure_storage_account_id is not None:
            pulumi.set(__self__, "primary_staging_azure_storage_account_id", primary_staging_azure_storage_account_id)
        if recovery_disk_encryption_set_id is not None:
            pulumi.set(__self__, "recovery_disk_encryption_set_id", recovery_disk_encryption_set_id)
        if recovery_orignal_target_disk_id is not None:
            pulumi.set(__self__, "recovery_orignal_target_disk_id", recovery_orignal_target_disk_id)
        if recovery_replica_disk_account_type is not None:
            pulumi.set(__self__, "recovery_replica_disk_account_type", recovery_replica_disk_account_type)
        if recovery_replica_disk_id is not None:
            pulumi.set(__self__, "recovery_replica_disk_id", recovery_replica_disk_id)
        if recovery_resource_group_id is not None:
            pulumi.set(__self__, "recovery_resource_group_id", recovery_resource_group_id)
        if recovery_target_disk_account_type is not None:
            pulumi.set(__self__, "recovery_target_disk_account_type", recovery_target_disk_account_type)
        if recovery_target_disk_id is not None:
            pulumi.set(__self__, "recovery_target_disk_id", recovery_target_disk_id)
        if resync_required is not None:
            pulumi.set(__self__, "resync_required", resync_required)
        if secret_identifier is not None:
            pulumi.set(__self__, "secret_identifier", secret_identifier)
        if tfo_disk_name is not None:
            pulumi.set(__self__, "tfo_disk_name", tfo_disk_name)

    @property
    @pulumi.getter(name="allowedDiskLevelOperation")
    def allowed_disk_level_operation(self) -> Optional[Sequence[str]]:
        """
        The disk level operations list.
        """
        return pulumi.get(self, "allowed_disk_level_operation")

    @property
    @pulumi.getter(name="dataPendingAtSourceAgentInMB")
    def data_pending_at_source_agent_in_mb(self) -> Optional[float]:
        """
        The data pending at source virtual machine in MB.
        """
        return pulumi.get(self, "data_pending_at_source_agent_in_mb")

    @property
    @pulumi.getter(name="dataPendingInStagingStorageAccountInMB")
    def data_pending_in_staging_storage_account_in_mb(self) -> Optional[float]:
        """
        The data pending for replication in MB at staging account.
        """
        return pulumi.get(self, "data_pending_in_staging_storage_account_in_mb")

    @property
    @pulumi.getter(name="dekKeyVaultArmId")
    def dek_key_vault_arm_id(self) -> Optional[str]:
        """
        The KeyVault resource id for secret (BEK).
        """
        return pulumi.get(self, "dek_key_vault_arm_id")

    @property
    @pulumi.getter(name="diskCapacityInBytes")
    def disk_capacity_in_bytes(self) -> Optional[float]:
        """
        The disk capacity in bytes.
        """
        return pulumi.get(self, "disk_capacity_in_bytes")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        """
        The managed disk Arm id.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> Optional[str]:
        """
        The disk name.
        """
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskState")
    def disk_state(self) -> Optional[str]:
        """
        The disk state.
        """
        return pulumi.get(self, "disk_state")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        The type of disk.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="failoverDiskName")
    def failover_disk_name(self) -> Optional[str]:
        """
        The failover name for the managed disk.
        """
        return pulumi.get(self, "failover_disk_name")

    @property
    @pulumi.getter(name="isDiskEncrypted")
    def is_disk_encrypted(self) -> Optional[bool]:
        """
        A value indicating whether vm has encrypted os disk or not.
        """
        return pulumi.get(self, "is_disk_encrypted")

    @property
    @pulumi.getter(name="isDiskKeyEncrypted")
    def is_disk_key_encrypted(self) -> Optional[bool]:
        """
        A value indicating whether disk key got encrypted or not.
        """
        return pulumi.get(self, "is_disk_key_encrypted")

    @property
    @pulumi.getter(name="kekKeyVaultArmId")
    def kek_key_vault_arm_id(self) -> Optional[str]:
        """
        The KeyVault resource id for key (KEK).
        """
        return pulumi.get(self, "kek_key_vault_arm_id")

    @property
    @pulumi.getter(name="keyIdentifier")
    def key_identifier(self) -> Optional[str]:
        """
        The key URL / identifier (KEK).
        """
        return pulumi.get(self, "key_identifier")

    @property
    @pulumi.getter(name="monitoringJobType")
    def monitoring_job_type(self) -> Optional[str]:
        """
        The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
        """
        return pulumi.get(self, "monitoring_job_type")

    @property
    @pulumi.getter(name="monitoringPercentageCompletion")
    def monitoring_percentage_completion(self) -> Optional[int]:
        """
        The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
        """
        return pulumi.get(self, "monitoring_percentage_completion")

    @property
    @pulumi.getter(name="primaryDiskEncryptionSetId")
    def primary_disk_encryption_set_id(self) -> Optional[str]:
        """
        The primary disk encryption set Id.
        """
        return pulumi.get(self, "primary_disk_encryption_set_id")

    @property
    @pulumi.getter(name="primaryStagingAzureStorageAccountId")
    def primary_staging_azure_storage_account_id(self) -> Optional[str]:
        """
        The primary staging storage account.
        """
        return pulumi.get(self, "primary_staging_azure_storage_account_id")

    @property
    @pulumi.getter(name="recoveryDiskEncryptionSetId")
    def recovery_disk_encryption_set_id(self) -> Optional[str]:
        """
        The recovery disk encryption set Id.
        """
        return pulumi.get(self, "recovery_disk_encryption_set_id")

    @property
    @pulumi.getter(name="recoveryOrignalTargetDiskId")
    def recovery_orignal_target_disk_id(self) -> Optional[str]:
        """
        Recovery original target disk Arm Id.
        """
        return pulumi.get(self, "recovery_orignal_target_disk_id")

    @property
    @pulumi.getter(name="recoveryReplicaDiskAccountType")
    def recovery_replica_disk_account_type(self) -> Optional[str]:
        """
        The replica disk type. Its an optional value and will be same as source disk type if not user provided.
        """
        return pulumi.get(self, "recovery_replica_disk_account_type")

    @property
    @pulumi.getter(name="recoveryReplicaDiskId")
    def recovery_replica_disk_id(self) -> Optional[str]:
        """
        Recovery replica disk Arm Id.
        """
        return pulumi.get(self, "recovery_replica_disk_id")

    @property
    @pulumi.getter(name="recoveryResourceGroupId")
    def recovery_resource_group_id(self) -> Optional[str]:
        """
        The recovery disk resource group Arm Id.
        """
        return pulumi.get(self, "recovery_resource_group_id")

    @property
    @pulumi.getter(name="recoveryTargetDiskAccountType")
    def recovery_target_disk_account_type(self) -> Optional[str]:
        """
        The target disk type after failover. Its an optional value and will be same as source disk type if not user provided.
        """
        return pulumi.get(self, "recovery_target_disk_account_type")

    @property
    @pulumi.getter(name="recoveryTargetDiskId")
    def recovery_target_disk_id(self) -> Optional[str]:
        """
        Recovery target disk Arm Id.
        """
        return pulumi.get(self, "recovery_target_disk_id")

    @property
    @pulumi.getter(name="resyncRequired")
    def resync_required(self) -> Optional[bool]:
        """
        A value indicating whether resync is required for this disk.
        """
        return pulumi.get(self, "resync_required")

    @property
    @pulumi.getter(name="secretIdentifier")
    def secret_identifier(self) -> Optional[str]:
        """
        The secret URL / identifier (BEK).
        """
        return pulumi.get(self, "secret_identifier")

    @property
    @pulumi.getter(name="tfoDiskName")
    def tfo_disk_name(self) -> Optional[str]:
        """
        The test failover name for the managed disk.
        """
        return pulumi.get(self, "tfo_disk_name")


@pulumi.output_type
class A2AReplicationProtectionClusterDetailsResponse(dict):
    """
    A2A provider specific settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "clusterManagementId":
            suggest = "cluster_management_id"
        elif key == "failoverRecoveryPointId":
            suggest = "failover_recovery_point_id"
        elif key == "initialPrimaryExtendedLocation":
            suggest = "initial_primary_extended_location"
        elif key == "initialPrimaryFabricLocation":
            suggest = "initial_primary_fabric_location"
        elif key == "initialPrimaryZone":
            suggest = "initial_primary_zone"
        elif key == "initialRecoveryExtendedLocation":
            suggest = "initial_recovery_extended_location"
        elif key == "initialRecoveryFabricLocation":
            suggest = "initial_recovery_fabric_location"
        elif key == "initialRecoveryZone":
            suggest = "initial_recovery_zone"
        elif key == "lastRpoCalculatedTime":
            suggest = "last_rpo_calculated_time"
        elif key == "lifecycleId":
            suggest = "lifecycle_id"
        elif key == "multiVmGroupCreateOption":
            suggest = "multi_vm_group_create_option"
        elif key == "multiVmGroupId":
            suggest = "multi_vm_group_id"
        elif key == "multiVmGroupName":
            suggest = "multi_vm_group_name"
        elif key == "primaryAvailabilityZone":
            suggest = "primary_availability_zone"
        elif key == "primaryExtendedLocation":
            suggest = "primary_extended_location"
        elif key == "primaryFabricLocation":
            suggest = "primary_fabric_location"
        elif key == "recoveryAvailabilityZone":
            suggest = "recovery_availability_zone"
        elif key == "recoveryExtendedLocation":
            suggest = "recovery_extended_location"
        elif key == "recoveryFabricLocation":
            suggest = "recovery_fabric_location"
        elif key == "rpoInSeconds":
            suggest = "rpo_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in A2AReplicationProtectionClusterDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        A2AReplicationProtectionClusterDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        A2AReplicationProtectionClusterDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 cluster_management_id: Optional[str] = None,
                 failover_recovery_point_id: Optional[str] = None,
                 initial_primary_extended_location: Optional['outputs.ExtendedLocationResponse'] = None,
                 initial_primary_fabric_location: Optional[str] = None,
                 initial_primary_zone: Optional[str] = None,
                 initial_recovery_extended_location: Optional['outputs.ExtendedLocationResponse'] = None,
                 initial_recovery_fabric_location: Optional[str] = None,
                 initial_recovery_zone: Optional[str] = None,
                 last_rpo_calculated_time: Optional[str] = None,
                 lifecycle_id: Optional[str] = None,
                 multi_vm_group_create_option: Optional[str] = None,
                 multi_vm_group_id: Optional[str] = None,
                 multi_vm_group_name: Optional[str] = None,
                 primary_availability_zone: Optional[str] = None,
                 primary_extended_location: Optional['outputs.ExtendedLocationResponse'] = None,
                 primary_fabric_location: Optional[str] = None,
                 recovery_availability_zone: Optional[str] = None,
                 recovery_extended_location: Optional['outputs.ExtendedLocationResponse'] = None,
                 recovery_fabric_location: Optional[str] = None,
                 rpo_in_seconds: Optional[float] = None):
        """
        A2A provider specific settings.
        :param str instance_type: Gets the Instance type.
               Expected value is 'A2A'.
        :param str cluster_management_id: The cluster management Id.
        :param str failover_recovery_point_id: The recovery point Id to which the cluster was failed over.
        :param 'ExtendedLocationResponse' initial_primary_extended_location: The initial primary extended location.
        :param str initial_primary_fabric_location: The initial primary fabric location.
        :param str initial_primary_zone: The initial primary availability zone.
        :param 'ExtendedLocationResponse' initial_recovery_extended_location: The initial recovery extended location.
        :param str initial_recovery_fabric_location: The initial recovery fabric location.
        :param str initial_recovery_zone: The initial recovery availability zone.
        :param str last_rpo_calculated_time: The time (in UTC) when the last RPO value was calculated by Protection Service.
        :param str lifecycle_id: An id that survives actions like switch protection which change the backing PE/CPE objects internally.The lifecycle id gets carried forward to have a link/continuity in being able to have an Id that denotes the "same" protected cluster even though other internal Ids/ARM Id might be changing.
        :param str multi_vm_group_create_option: Whether Multi VM group is auto created or specified by user.
        :param str multi_vm_group_id: The multi vm group Id.
        :param str multi_vm_group_name: The multi vm group name.
        :param str primary_availability_zone: The primary availability zone.
        :param 'ExtendedLocationResponse' primary_extended_location: The primary Extended Location.
        :param str primary_fabric_location: Primary fabric location.
        :param str recovery_availability_zone: The recovery availability zone.
        :param 'ExtendedLocationResponse' recovery_extended_location: The recovery Extended Location.
        :param str recovery_fabric_location: The recovery fabric location.
        :param float rpo_in_seconds: The last RPO value in seconds.
        """
        pulumi.set(__self__, "instance_type", 'A2A')
        if cluster_management_id is not None:
            pulumi.set(__self__, "cluster_management_id", cluster_management_id)
        if failover_recovery_point_id is not None:
            pulumi.set(__self__, "failover_recovery_point_id", failover_recovery_point_id)
        if initial_primary_extended_location is not None:
            pulumi.set(__self__, "initial_primary_extended_location", initial_primary_extended_location)
        if initial_primary_fabric_location is not None:
            pulumi.set(__self__, "initial_primary_fabric_location", initial_primary_fabric_location)
        if initial_primary_zone is not None:
            pulumi.set(__self__, "initial_primary_zone", initial_primary_zone)
        if initial_recovery_extended_location is not None:
            pulumi.set(__self__, "initial_recovery_extended_location", initial_recovery_extended_location)
        if initial_recovery_fabric_location is not None:
            pulumi.set(__self__, "initial_recovery_fabric_location", initial_recovery_fabric_location)
        if initial_recovery_zone is not None:
            pulumi.set(__self__, "initial_recovery_zone", initial_recovery_zone)
        if last_rpo_calculated_time is not None:
            pulumi.set(__self__, "last_rpo_calculated_time", last_rpo_calculated_time)
        if lifecycle_id is not None:
            pulumi.set(__self__, "lifecycle_id", lifecycle_id)
        if multi_vm_group_create_option is not None:
            pulumi.set(__self__, "multi_vm_group_create_option", multi_vm_group_create_option)
        if multi_vm_group_id is not None:
            pulumi.set(__self__, "multi_vm_group_id", multi_vm_group_id)
        if multi_vm_group_name is not None:
            pulumi.set(__self__, "multi_vm_group_name", multi_vm_group_name)
        if primary_availability_zone is not None:
            pulumi.set(__self__, "primary_availability_zone", primary_availability_zone)
        if primary_extended_location is not None:
            pulumi.set(__self__, "primary_extended_location", primary_extended_location)
        if primary_fabric_location is not None:
            pulumi.set(__self__, "primary_fabric_location", primary_fabric_location)
        if recovery_availability_zone is not None:
            pulumi.set(__self__, "recovery_availability_zone", recovery_availability_zone)
        if recovery_extended_location is not None:
            pulumi.set(__self__, "recovery_extended_location", recovery_extended_location)
        if recovery_fabric_location is not None:
            pulumi.set(__self__, "recovery_fabric_location", recovery_fabric_location)
        if rpo_in_seconds is not None:
            pulumi.set(__self__, "rpo_in_seconds", rpo_in_seconds)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        Expected value is 'A2A'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="clusterManagementId")
    def cluster_management_id(self) -> Optional[str]:
        """
        The cluster management Id.
        """
        return pulumi.get(self, "cluster_management_id")

    @property
    @pulumi.getter(name="failoverRecoveryPointId")
    def failover_recovery_point_id(self) -> Optional[str]:
        """
        The recovery point Id to which the cluster was failed over.
        """
        return pulumi.get(self, "failover_recovery_point_id")

    @property
    @pulumi.getter(name="initialPrimaryExtendedLocation")
    def initial_primary_extended_location(self) -> Optional['outputs.ExtendedLocationResponse']:
        """
        The initial primary extended location.
        """
        return pulumi.get(self, "initial_primary_extended_location")

    @property
    @pulumi.getter(name="initialPrimaryFabricLocation")
    def initial_primary_fabric_location(self) -> Optional[str]:
        """
        The initial primary fabric location.
        """
        return pulumi.get(self, "initial_primary_fabric_location")

    @property
    @pulumi.getter(name="initialPrimaryZone")
    def initial_primary_zone(self) -> Optional[str]:
        """
        The initial primary availability zone.
        """
        return pulumi.get(self, "initial_primary_zone")

    @property
    @pulumi.getter(name="initialRecoveryExtendedLocation")
    def initial_recovery_extended_location(self) -> Optional['outputs.ExtendedLocationResponse']:
        """
        The initial recovery extended location.
        """
        return pulumi.get(self, "initial_recovery_extended_location")

    @property
    @pulumi.getter(name="initialRecoveryFabricLocation")
    def initial_recovery_fabric_location(self) -> Optional[str]:
        """
        The initial recovery fabric location.
        """
        return pulumi.get(self, "initial_recovery_fabric_location")

    @property
    @pulumi.getter(name="initialRecoveryZone")
    def initial_recovery_zone(self) -> Optional[str]:
        """
        The initial recovery availability zone.
        """
        return pulumi.get(self, "initial_recovery_zone")

    @property
    @pulumi.getter(name="lastRpoCalculatedTime")
    def last_rpo_calculated_time(self) -> Optional[str]:
        """
        The time (in UTC) when the last RPO value was calculated by Protection Service.
        """
        return pulumi.get(self, "last_rpo_calculated_time")

    @property
    @pulumi.getter(name="lifecycleId")
    def lifecycle_id(self) -> Optional[str]:
        """
        An id that survives actions like switch protection which change the backing PE/CPE objects internally.The lifecycle id gets carried forward to have a link/continuity in being able to have an Id that denotes the "same" protected cluster even though other internal Ids/ARM Id might be changing.
        """
        return pulumi.get(self, "lifecycle_id")

    @property
    @pulumi.getter(name="multiVmGroupCreateOption")
    def multi_vm_group_create_option(self) -> Optional[str]:
        """
        Whether Multi VM group is auto created or specified by user.
        """
        return pulumi.get(self, "multi_vm_group_create_option")

    @property
    @pulumi.getter(name="multiVmGroupId")
    def multi_vm_group_id(self) -> Optional[str]:
        """
        The multi vm group Id.
        """
        return pulumi.get(self, "multi_vm_group_id")

    @property
    @pulumi.getter(name="multiVmGroupName")
    def multi_vm_group_name(self) -> Optional[str]:
        """
        The multi vm group name.
        """
        return pulumi.get(self, "multi_vm_group_name")

    @property
    @pulumi.getter(name="primaryAvailabilityZone")
    def primary_availability_zone(self) -> Optional[str]:
        """
        The primary availability zone.
        """
        return pulumi.get(self, "primary_availability_zone")

    @property
    @pulumi.getter(name="primaryExtendedLocation")
    def primary_extended_location(self) -> Optional['outputs.ExtendedLocationResponse']:
        """
        The primary Extended Location.
        """
        return pulumi.get(self, "primary_extended_location")

    @property
    @pulumi.getter(name="primaryFabricLocation")
    def primary_fabric_location(self) -> Optional[str]:
        """
        Primary fabric location.
        """
        return pulumi.get(self, "primary_fabric_location")

    @property
    @pulumi.getter(name="recoveryAvailabilityZone")
    def recovery_availability_zone(self) -> Optional[str]:
        """
        The recovery availability zone.
        """
        return pulumi.get(self, "recovery_availability_zone")

    @property
    @pulumi.getter(name="recoveryExtendedLocation")
    def recovery_extended_location(self) -> Optional['outputs.ExtendedLocationResponse']:
        """
        The recovery Extended Location.
        """
        return pulumi.get(self, "recovery_extended_location")

    @property
    @pulumi.getter(name="recoveryFabricLocation")
    def recovery_fabric_location(self) -> Optional[str]:
        """
        The recovery fabric location.
        """
        return pulumi.get(self, "recovery_fabric_location")

    @property
    @pulumi.getter(name="rpoInSeconds")
    def rpo_in_seconds(self) -> Optional[float]:
        """
        The last RPO value in seconds.
        """
        return pulumi.get(self, "rpo_in_seconds")


@pulumi.output_type
class A2ASharedDiskIRErrorDetailsResponse(dict):
    """
    Extended location of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorCodeEnum":
            suggest = "error_code_enum"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "possibleCauses":
            suggest = "possible_causes"
        elif key == "recommendedAction":
            suggest = "recommended_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in A2ASharedDiskIRErrorDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        A2ASharedDiskIRErrorDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        A2ASharedDiskIRErrorDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: str,
                 error_code_enum: str,
                 error_message: str,
                 possible_causes: str,
                 recommended_action: str):
        """
        Extended location of the resource.
        :param str error_code: The error code.
        :param str error_code_enum: The error code enum.
        :param str error_message: The error message.
        :param str possible_causes: The possible causes.
        :param str recommended_action: The recommended action.
        """
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "error_code_enum", error_code_enum)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "possible_causes", possible_causes)
        pulumi.set(__self__, "recommended_action", recommended_action)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> str:
        """
        The error code.
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorCodeEnum")
    def error_code_enum(self) -> str:
        """
        The error code enum.
        """
        return pulumi.get(self, "error_code_enum")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        """
        The error message.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="possibleCauses")
    def possible_causes(self) -> str:
        """
        The possible causes.
        """
        return pulumi.get(self, "possible_causes")

    @property
    @pulumi.getter(name="recommendedAction")
    def recommended_action(self) -> str:
        """
        The recommended action.
        """
        return pulumi.get(self, "recommended_action")


@pulumi.output_type
class A2ASharedDiskReplicationDetailsResponse(dict):
    """
    A2A provider specific settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "failoverRecoveryPointId":
            suggest = "failover_recovery_point_id"
        elif key == "lastRpoCalculatedTime":
            suggest = "last_rpo_calculated_time"
        elif key == "managementId":
            suggest = "management_id"
        elif key == "monitoringJobType":
            suggest = "monitoring_job_type"
        elif key == "monitoringPercentageCompletion":
            suggest = "monitoring_percentage_completion"
        elif key == "primaryFabricLocation":
            suggest = "primary_fabric_location"
        elif key == "protectedManagedDisks":
            suggest = "protected_managed_disks"
        elif key == "recoveryFabricLocation":
            suggest = "recovery_fabric_location"
        elif key == "rpoInSeconds":
            suggest = "rpo_in_seconds"
        elif key == "sharedDiskIRErrors":
            suggest = "shared_disk_ir_errors"
        elif key == "unprotectedDisks":
            suggest = "unprotected_disks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in A2ASharedDiskReplicationDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        A2ASharedDiskReplicationDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        A2ASharedDiskReplicationDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 failover_recovery_point_id: Optional[str] = None,
                 last_rpo_calculated_time: Optional[str] = None,
                 management_id: Optional[str] = None,
                 monitoring_job_type: Optional[str] = None,
                 monitoring_percentage_completion: Optional[int] = None,
                 primary_fabric_location: Optional[str] = None,
                 protected_managed_disks: Optional[Sequence['outputs.A2AProtectedManagedDiskDetailsResponse']] = None,
                 recovery_fabric_location: Optional[str] = None,
                 rpo_in_seconds: Optional[float] = None,
                 shared_disk_ir_errors: Optional[Sequence['outputs.A2ASharedDiskIRErrorDetailsResponse']] = None,
                 unprotected_disks: Optional[Sequence['outputs.A2AUnprotectedDiskDetailsResponse']] = None):
        """
        A2A provider specific settings.
        :param str instance_type: Gets the Instance type.
               Expected value is 'A2A'.
        :param str failover_recovery_point_id: The recovery point id to which the Virtual node was failed over.
        :param str last_rpo_calculated_time: The time (in UTC) when the last RPO value was calculated by Protection Service.
        :param str management_id: The management Id.
        :param str monitoring_job_type: The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
        :param int monitoring_percentage_completion: The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
        :param str primary_fabric_location: Primary fabric location.
        :param Sequence['A2AProtectedManagedDiskDetailsResponse'] protected_managed_disks: The list of protected managed disks.
        :param str recovery_fabric_location: The recovery fabric location.
        :param float rpo_in_seconds: The last RPO value in seconds.
        :param Sequence['A2ASharedDiskIRErrorDetailsResponse'] shared_disk_ir_errors: The IR Errors.
        :param Sequence['A2AUnprotectedDiskDetailsResponse'] unprotected_disks: The list of unprotected disks.
        """
        pulumi.set(__self__, "instance_type", 'A2A')
        if failover_recovery_point_id is not None:
            pulumi.set(__self__, "failover_recovery_point_id", failover_recovery_point_id)
        if last_rpo_calculated_time is not None:
            pulumi.set(__self__, "last_rpo_calculated_time", last_rpo_calculated_time)
        if management_id is not None:
            pulumi.set(__self__, "management_id", management_id)
        if monitoring_job_type is not None:
            pulumi.set(__self__, "monitoring_job_type", monitoring_job_type)
        if monitoring_percentage_completion is not None:
            pulumi.set(__self__, "monitoring_percentage_completion", monitoring_percentage_completion)
        if primary_fabric_location is not None:
            pulumi.set(__self__, "primary_fabric_location", primary_fabric_location)
        if protected_managed_disks is not None:
            pulumi.set(__self__, "protected_managed_disks", protected_managed_disks)
        if recovery_fabric_location is not None:
            pulumi.set(__self__, "recovery_fabric_location", recovery_fabric_location)
        if rpo_in_seconds is not None:
            pulumi.set(__self__, "rpo_in_seconds", rpo_in_seconds)
        if shared_disk_ir_errors is not None:
            pulumi.set(__self__, "shared_disk_ir_errors", shared_disk_ir_errors)
        if unprotected_disks is not None:
            pulumi.set(__self__, "unprotected_disks", unprotected_disks)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        Expected value is 'A2A'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="failoverRecoveryPointId")
    def failover_recovery_point_id(self) -> Optional[str]:
        """
        The recovery point id to which the Virtual node was failed over.
        """
        return pulumi.get(self, "failover_recovery_point_id")

    @property
    @pulumi.getter(name="lastRpoCalculatedTime")
    def last_rpo_calculated_time(self) -> Optional[str]:
        """
        The time (in UTC) when the last RPO value was calculated by Protection Service.
        """
        return pulumi.get(self, "last_rpo_calculated_time")

    @property
    @pulumi.getter(name="managementId")
    def management_id(self) -> Optional[str]:
        """
        The management Id.
        """
        return pulumi.get(self, "management_id")

    @property
    @pulumi.getter(name="monitoringJobType")
    def monitoring_job_type(self) -> Optional[str]:
        """
        The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
        """
        return pulumi.get(self, "monitoring_job_type")

    @property
    @pulumi.getter(name="monitoringPercentageCompletion")
    def monitoring_percentage_completion(self) -> Optional[int]:
        """
        The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
        """
        return pulumi.get(self, "monitoring_percentage_completion")

    @property
    @pulumi.getter(name="primaryFabricLocation")
    def primary_fabric_location(self) -> Optional[str]:
        """
        Primary fabric location.
        """
        return pulumi.get(self, "primary_fabric_location")

    @property
    @pulumi.getter(name="protectedManagedDisks")
    def protected_managed_disks(self) -> Optional[Sequence['outputs.A2AProtectedManagedDiskDetailsResponse']]:
        """
        The list of protected managed disks.
        """
        return pulumi.get(self, "protected_managed_disks")

    @property
    @pulumi.getter(name="recoveryFabricLocation")
    def recovery_fabric_location(self) -> Optional[str]:
        """
        The recovery fabric location.
        """
        return pulumi.get(self, "recovery_fabric_location")

    @property
    @pulumi.getter(name="rpoInSeconds")
    def rpo_in_seconds(self) -> Optional[float]:
        """
        The last RPO value in seconds.
        """
        return pulumi.get(self, "rpo_in_seconds")

    @property
    @pulumi.getter(name="sharedDiskIRErrors")
    def shared_disk_ir_errors(self) -> Optional[Sequence['outputs.A2ASharedDiskIRErrorDetailsResponse']]:
        """
        The IR Errors.
        """
        return pulumi.get(self, "shared_disk_ir_errors")

    @property
    @pulumi.getter(name="unprotectedDisks")
    def unprotected_disks(self) -> Optional[Sequence['outputs.A2AUnprotectedDiskDetailsResponse']]:
        """
        The list of unprotected disks.
        """
        return pulumi.get(self, "unprotected_disks")


@pulumi.output_type
class A2AUnprotectedDiskDetailsResponse(dict):
    """
    A2A unprotected disk details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskAutoProtectionStatus":
            suggest = "disk_auto_protection_status"
        elif key == "diskLunId":
            suggest = "disk_lun_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in A2AUnprotectedDiskDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        A2AUnprotectedDiskDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        A2AUnprotectedDiskDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_auto_protection_status: Optional[str] = None,
                 disk_lun_id: Optional[int] = None):
        """
        A2A unprotected disk details.
        :param str disk_auto_protection_status: A value indicating whether the disk auto protection is enabled.
        :param int disk_lun_id: The source lun Id for the data disk.
        """
        if disk_auto_protection_status is not None:
            pulumi.set(__self__, "disk_auto_protection_status", disk_auto_protection_status)
        if disk_lun_id is not None:
            pulumi.set(__self__, "disk_lun_id", disk_lun_id)

    @property
    @pulumi.getter(name="diskAutoProtectionStatus")
    def disk_auto_protection_status(self) -> Optional[str]:
        """
        A value indicating whether the disk auto protection is enabled.
        """
        return pulumi.get(self, "disk_auto_protection_status")

    @property
    @pulumi.getter(name="diskLunId")
    def disk_lun_id(self) -> Optional[int]:
        """
        The source lun Id for the data disk.
        """
        return pulumi.get(self, "disk_lun_id")


@pulumi.output_type
class CurrentScenarioDetailsResponse(dict):
    """
    Current scenario details of the protected entity.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobId":
            suggest = "job_id"
        elif key == "scenarioName":
            suggest = "scenario_name"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CurrentScenarioDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CurrentScenarioDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CurrentScenarioDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_id: Optional[str] = None,
                 scenario_name: Optional[str] = None,
                 start_time: Optional[str] = None):
        """
        Current scenario details of the protected entity.
        :param str job_id: ARM Id of the job being executed.
        :param str scenario_name: Scenario name.
        :param str start_time: Start time of the workflow.
        """
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if scenario_name is not None:
            pulumi.set(__self__, "scenario_name", scenario_name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[str]:
        """
        ARM Id of the job being executed.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="scenarioName")
    def scenario_name(self) -> Optional[str]:
        """
        Scenario name.
        """
        return pulumi.get(self, "scenario_name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        Start time of the workflow.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class ExtendedLocationResponse(dict):
    """
    Extended location of the resource.
    """
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        Extended location of the resource.
        :param str name: The name of the extended location.
        :param str type: The extended location type.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the extended location.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class HealthErrorResponse(dict):
    """
    Health Error.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTimeUtc":
            suggest = "creation_time_utc"
        elif key == "customerResolvability":
            suggest = "customer_resolvability"
        elif key == "entityId":
            suggest = "entity_id"
        elif key == "errorCategory":
            suggest = "error_category"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorId":
            suggest = "error_id"
        elif key == "errorLevel":
            suggest = "error_level"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "errorSource":
            suggest = "error_source"
        elif key == "errorType":
            suggest = "error_type"
        elif key == "innerHealthErrors":
            suggest = "inner_health_errors"
        elif key == "possibleCauses":
            suggest = "possible_causes"
        elif key == "recommendedAction":
            suggest = "recommended_action"
        elif key == "recoveryProviderErrorMessage":
            suggest = "recovery_provider_error_message"
        elif key == "summaryMessage":
            suggest = "summary_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HealthErrorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HealthErrorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HealthErrorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time_utc: Optional[str] = None,
                 customer_resolvability: Optional[str] = None,
                 entity_id: Optional[str] = None,
                 error_category: Optional[str] = None,
                 error_code: Optional[str] = None,
                 error_id: Optional[str] = None,
                 error_level: Optional[str] = None,
                 error_message: Optional[str] = None,
                 error_source: Optional[str] = None,
                 error_type: Optional[str] = None,
                 inner_health_errors: Optional[Sequence['outputs.InnerHealthErrorResponse']] = None,
                 possible_causes: Optional[str] = None,
                 recommended_action: Optional[str] = None,
                 recovery_provider_error_message: Optional[str] = None,
                 summary_message: Optional[str] = None):
        """
        Health Error.
        :param str creation_time_utc: Error creation time (UTC).
        :param str customer_resolvability: Value indicating whether the health error is customer resolvable.
        :param str entity_id: ID of the entity.
        :param str error_category: Category of error.
        :param str error_code: Error code.
        :param str error_id: The health error unique id.
        :param str error_level: Level of error.
        :param str error_message: Error message.
        :param str error_source: Source of error.
        :param str error_type: Type of error.
        :param Sequence['InnerHealthErrorResponse'] inner_health_errors: The inner health errors. HealthError having a list of HealthError as child errors is problematic. InnerHealthError is used because this will prevent an infinite loop of structures when Hydra tries to auto-generate the contract. We are exposing the related health errors as inner health errors and all API consumers can utilize this in the same fashion as Exception -&gt; InnerException.
        :param str possible_causes: Possible causes of error.
        :param str recommended_action: Recommended action to resolve error.
        :param str recovery_provider_error_message: DRA error message.
        :param str summary_message: Summary message of the entity.
        """
        if creation_time_utc is not None:
            pulumi.set(__self__, "creation_time_utc", creation_time_utc)
        if customer_resolvability is not None:
            pulumi.set(__self__, "customer_resolvability", customer_resolvability)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if error_category is not None:
            pulumi.set(__self__, "error_category", error_category)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_id is not None:
            pulumi.set(__self__, "error_id", error_id)
        if error_level is not None:
            pulumi.set(__self__, "error_level", error_level)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if error_source is not None:
            pulumi.set(__self__, "error_source", error_source)
        if error_type is not None:
            pulumi.set(__self__, "error_type", error_type)
        if inner_health_errors is not None:
            pulumi.set(__self__, "inner_health_errors", inner_health_errors)
        if possible_causes is not None:
            pulumi.set(__self__, "possible_causes", possible_causes)
        if recommended_action is not None:
            pulumi.set(__self__, "recommended_action", recommended_action)
        if recovery_provider_error_message is not None:
            pulumi.set(__self__, "recovery_provider_error_message", recovery_provider_error_message)
        if summary_message is not None:
            pulumi.set(__self__, "summary_message", summary_message)

    @property
    @pulumi.getter(name="creationTimeUtc")
    def creation_time_utc(self) -> Optional[str]:
        """
        Error creation time (UTC).
        """
        return pulumi.get(self, "creation_time_utc")

    @property
    @pulumi.getter(name="customerResolvability")
    def customer_resolvability(self) -> Optional[str]:
        """
        Value indicating whether the health error is customer resolvable.
        """
        return pulumi.get(self, "customer_resolvability")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        """
        ID of the entity.
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="errorCategory")
    def error_category(self) -> Optional[str]:
        """
        Category of error.
        """
        return pulumi.get(self, "error_category")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        Error code.
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorId")
    def error_id(self) -> Optional[str]:
        """
        The health error unique id.
        """
        return pulumi.get(self, "error_id")

    @property
    @pulumi.getter(name="errorLevel")
    def error_level(self) -> Optional[str]:
        """
        Level of error.
        """
        return pulumi.get(self, "error_level")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error message.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="errorSource")
    def error_source(self) -> Optional[str]:
        """
        Source of error.
        """
        return pulumi.get(self, "error_source")

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[str]:
        """
        Type of error.
        """
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter(name="innerHealthErrors")
    def inner_health_errors(self) -> Optional[Sequence['outputs.InnerHealthErrorResponse']]:
        """
        The inner health errors. HealthError having a list of HealthError as child errors is problematic. InnerHealthError is used because this will prevent an infinite loop of structures when Hydra tries to auto-generate the contract. We are exposing the related health errors as inner health errors and all API consumers can utilize this in the same fashion as Exception -&gt; InnerException.
        """
        return pulumi.get(self, "inner_health_errors")

    @property
    @pulumi.getter(name="possibleCauses")
    def possible_causes(self) -> Optional[str]:
        """
        Possible causes of error.
        """
        return pulumi.get(self, "possible_causes")

    @property
    @pulumi.getter(name="recommendedAction")
    def recommended_action(self) -> Optional[str]:
        """
        Recommended action to resolve error.
        """
        return pulumi.get(self, "recommended_action")

    @property
    @pulumi.getter(name="recoveryProviderErrorMessage")
    def recovery_provider_error_message(self) -> Optional[str]:
        """
        DRA error message.
        """
        return pulumi.get(self, "recovery_provider_error_message")

    @property
    @pulumi.getter(name="summaryMessage")
    def summary_message(self) -> Optional[str]:
        """
        Summary message of the entity.
        """
        return pulumi.get(self, "summary_message")


@pulumi.output_type
class InnerHealthErrorResponse(dict):
    """
    Implements InnerHealthError class. HealthError object has a list of InnerHealthErrors as child errors. InnerHealthError is used because this will prevent an infinite loop of structures when Hydra tries to auto-generate the contract. We are exposing the related health errors as inner health errors and all API consumers can utilize this in the same fashion as Exception -&gt; InnerException.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTimeUtc":
            suggest = "creation_time_utc"
        elif key == "customerResolvability":
            suggest = "customer_resolvability"
        elif key == "entityId":
            suggest = "entity_id"
        elif key == "errorCategory":
            suggest = "error_category"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorId":
            suggest = "error_id"
        elif key == "errorLevel":
            suggest = "error_level"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "errorSource":
            suggest = "error_source"
        elif key == "errorType":
            suggest = "error_type"
        elif key == "possibleCauses":
            suggest = "possible_causes"
        elif key == "recommendedAction":
            suggest = "recommended_action"
        elif key == "recoveryProviderErrorMessage":
            suggest = "recovery_provider_error_message"
        elif key == "summaryMessage":
            suggest = "summary_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InnerHealthErrorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InnerHealthErrorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InnerHealthErrorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time_utc: Optional[str] = None,
                 customer_resolvability: Optional[str] = None,
                 entity_id: Optional[str] = None,
                 error_category: Optional[str] = None,
                 error_code: Optional[str] = None,
                 error_id: Optional[str] = None,
                 error_level: Optional[str] = None,
                 error_message: Optional[str] = None,
                 error_source: Optional[str] = None,
                 error_type: Optional[str] = None,
                 possible_causes: Optional[str] = None,
                 recommended_action: Optional[str] = None,
                 recovery_provider_error_message: Optional[str] = None,
                 summary_message: Optional[str] = None):
        """
        Implements InnerHealthError class. HealthError object has a list of InnerHealthErrors as child errors. InnerHealthError is used because this will prevent an infinite loop of structures when Hydra tries to auto-generate the contract. We are exposing the related health errors as inner health errors and all API consumers can utilize this in the same fashion as Exception -&gt; InnerException.
        :param str creation_time_utc: Error creation time (UTC).
        :param str customer_resolvability: Value indicating whether the health error is customer resolvable.
        :param str entity_id: ID of the entity.
        :param str error_category: Category of error.
        :param str error_code: Error code.
        :param str error_id: The health error unique id.
        :param str error_level: Level of error.
        :param str error_message: Error message.
        :param str error_source: Source of error.
        :param str error_type: Type of error.
        :param str possible_causes: Possible causes of error.
        :param str recommended_action: Recommended action to resolve error.
        :param str recovery_provider_error_message: DRA error message.
        :param str summary_message: Summary message of the entity.
        """
        if creation_time_utc is not None:
            pulumi.set(__self__, "creation_time_utc", creation_time_utc)
        if customer_resolvability is not None:
            pulumi.set(__self__, "customer_resolvability", customer_resolvability)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if error_category is not None:
            pulumi.set(__self__, "error_category", error_category)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_id is not None:
            pulumi.set(__self__, "error_id", error_id)
        if error_level is not None:
            pulumi.set(__self__, "error_level", error_level)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if error_source is not None:
            pulumi.set(__self__, "error_source", error_source)
        if error_type is not None:
            pulumi.set(__self__, "error_type", error_type)
        if possible_causes is not None:
            pulumi.set(__self__, "possible_causes", possible_causes)
        if recommended_action is not None:
            pulumi.set(__self__, "recommended_action", recommended_action)
        if recovery_provider_error_message is not None:
            pulumi.set(__self__, "recovery_provider_error_message", recovery_provider_error_message)
        if summary_message is not None:
            pulumi.set(__self__, "summary_message", summary_message)

    @property
    @pulumi.getter(name="creationTimeUtc")
    def creation_time_utc(self) -> Optional[str]:
        """
        Error creation time (UTC).
        """
        return pulumi.get(self, "creation_time_utc")

    @property
    @pulumi.getter(name="customerResolvability")
    def customer_resolvability(self) -> Optional[str]:
        """
        Value indicating whether the health error is customer resolvable.
        """
        return pulumi.get(self, "customer_resolvability")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        """
        ID of the entity.
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="errorCategory")
    def error_category(self) -> Optional[str]:
        """
        Category of error.
        """
        return pulumi.get(self, "error_category")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        Error code.
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorId")
    def error_id(self) -> Optional[str]:
        """
        The health error unique id.
        """
        return pulumi.get(self, "error_id")

    @property
    @pulumi.getter(name="errorLevel")
    def error_level(self) -> Optional[str]:
        """
        Level of error.
        """
        return pulumi.get(self, "error_level")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error message.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="errorSource")
    def error_source(self) -> Optional[str]:
        """
        Source of error.
        """
        return pulumi.get(self, "error_source")

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[str]:
        """
        Type of error.
        """
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter(name="possibleCauses")
    def possible_causes(self) -> Optional[str]:
        """
        Possible causes of error.
        """
        return pulumi.get(self, "possible_causes")

    @property
    @pulumi.getter(name="recommendedAction")
    def recommended_action(self) -> Optional[str]:
        """
        Recommended action to resolve error.
        """
        return pulumi.get(self, "recommended_action")

    @property
    @pulumi.getter(name="recoveryProviderErrorMessage")
    def recovery_provider_error_message(self) -> Optional[str]:
        """
        DRA error message.
        """
        return pulumi.get(self, "recovery_provider_error_message")

    @property
    @pulumi.getter(name="summaryMessage")
    def summary_message(self) -> Optional[str]:
        """
        Summary message of the entity.
        """
        return pulumi.get(self, "summary_message")


@pulumi.output_type
class RegisteredClusterNodesResponse(dict):
    """
    Extended location of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "biosId":
            suggest = "bios_id"
        elif key == "clusterNodeFqdn":
            suggest = "cluster_node_fqdn"
        elif key == "isSharedDiskVirtualNode":
            suggest = "is_shared_disk_virtual_node"
        elif key == "machineId":
            suggest = "machine_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegisteredClusterNodesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegisteredClusterNodesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegisteredClusterNodesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bios_id: Optional[str] = None,
                 cluster_node_fqdn: Optional[str] = None,
                 is_shared_disk_virtual_node: Optional[bool] = None,
                 machine_id: Optional[str] = None):
        """
        Extended location of the resource.
        :param str bios_id: The BIOS ID.
        :param str cluster_node_fqdn: The cluster node name.
        :param bool is_shared_disk_virtual_node: A value indicating whether this represents virtual entity hosting all the shared disks.
        :param str machine_id: The machine ID.
        """
        if bios_id is not None:
            pulumi.set(__self__, "bios_id", bios_id)
        if cluster_node_fqdn is not None:
            pulumi.set(__self__, "cluster_node_fqdn", cluster_node_fqdn)
        if is_shared_disk_virtual_node is not None:
            pulumi.set(__self__, "is_shared_disk_virtual_node", is_shared_disk_virtual_node)
        if machine_id is not None:
            pulumi.set(__self__, "machine_id", machine_id)

    @property
    @pulumi.getter(name="biosId")
    def bios_id(self) -> Optional[str]:
        """
        The BIOS ID.
        """
        return pulumi.get(self, "bios_id")

    @property
    @pulumi.getter(name="clusterNodeFqdn")
    def cluster_node_fqdn(self) -> Optional[str]:
        """
        The cluster node name.
        """
        return pulumi.get(self, "cluster_node_fqdn")

    @property
    @pulumi.getter(name="isSharedDiskVirtualNode")
    def is_shared_disk_virtual_node(self) -> Optional[bool]:
        """
        A value indicating whether this represents virtual entity hosting all the shared disks.
        """
        return pulumi.get(self, "is_shared_disk_virtual_node")

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> Optional[str]:
        """
        The machine ID.
        """
        return pulumi.get(self, "machine_id")


@pulumi.output_type
class ReplicationProtectionClusterPropertiesResponse(dict):
    """
    Replication protection cluster custom data details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "activeLocation":
            suggest = "active_location"
        elif key == "agentClusterId":
            suggest = "agent_cluster_id"
        elif key == "allowedOperations":
            suggest = "allowed_operations"
        elif key == "areAllClusterNodesRegistered":
            suggest = "are_all_cluster_nodes_registered"
        elif key == "clusterFqdn":
            suggest = "cluster_fqdn"
        elif key == "clusterNodeFqdns":
            suggest = "cluster_node_fqdns"
        elif key == "clusterProtectedItemIds":
            suggest = "cluster_protected_item_ids"
        elif key == "clusterRegisteredNodes":
            suggest = "cluster_registered_nodes"
        elif key == "currentScenario":
            suggest = "current_scenario"
        elif key == "healthErrors":
            suggest = "health_errors"
        elif key == "lastSuccessfulFailoverTime":
            suggest = "last_successful_failover_time"
        elif key == "lastSuccessfulTestFailoverTime":
            suggest = "last_successful_test_failover_time"
        elif key == "policyFriendlyName":
            suggest = "policy_friendly_name"
        elif key == "policyId":
            suggest = "policy_id"
        elif key == "primaryFabricFriendlyName":
            suggest = "primary_fabric_friendly_name"
        elif key == "primaryFabricProvider":
            suggest = "primary_fabric_provider"
        elif key == "primaryProtectionContainerFriendlyName":
            suggest = "primary_protection_container_friendly_name"
        elif key == "protectionClusterType":
            suggest = "protection_cluster_type"
        elif key == "protectionState":
            suggest = "protection_state"
        elif key == "protectionStateDescription":
            suggest = "protection_state_description"
        elif key == "providerSpecificDetails":
            suggest = "provider_specific_details"
        elif key == "recoveryContainerId":
            suggest = "recovery_container_id"
        elif key == "recoveryFabricFriendlyName":
            suggest = "recovery_fabric_friendly_name"
        elif key == "recoveryFabricId":
            suggest = "recovery_fabric_id"
        elif key == "recoveryProtectionContainerFriendlyName":
            suggest = "recovery_protection_container_friendly_name"
        elif key == "replicationHealth":
            suggest = "replication_health"
        elif key == "sharedDiskProperties":
            suggest = "shared_disk_properties"
        elif key == "testFailoverState":
            suggest = "test_failover_state"
        elif key == "testFailoverStateDescription":
            suggest = "test_failover_state_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicationProtectionClusterPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicationProtectionClusterPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicationProtectionClusterPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 active_location: Optional[str] = None,
                 agent_cluster_id: Optional[str] = None,
                 allowed_operations: Optional[Sequence[str]] = None,
                 are_all_cluster_nodes_registered: Optional[bool] = None,
                 cluster_fqdn: Optional[str] = None,
                 cluster_node_fqdns: Optional[Sequence[str]] = None,
                 cluster_protected_item_ids: Optional[Sequence[str]] = None,
                 cluster_registered_nodes: Optional[Sequence['outputs.RegisteredClusterNodesResponse']] = None,
                 current_scenario: Optional['outputs.CurrentScenarioDetailsResponse'] = None,
                 health_errors: Optional[Sequence['outputs.HealthErrorResponse']] = None,
                 last_successful_failover_time: Optional[str] = None,
                 last_successful_test_failover_time: Optional[str] = None,
                 policy_friendly_name: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 primary_fabric_friendly_name: Optional[str] = None,
                 primary_fabric_provider: Optional[str] = None,
                 primary_protection_container_friendly_name: Optional[str] = None,
                 protection_cluster_type: Optional[str] = None,
                 protection_state: Optional[str] = None,
                 protection_state_description: Optional[str] = None,
                 provider_specific_details: Optional['outputs.A2AReplicationProtectionClusterDetailsResponse'] = None,
                 recovery_container_id: Optional[str] = None,
                 recovery_fabric_friendly_name: Optional[str] = None,
                 recovery_fabric_id: Optional[str] = None,
                 recovery_protection_container_friendly_name: Optional[str] = None,
                 replication_health: Optional[str] = None,
                 shared_disk_properties: Optional['outputs.SharedDiskReplicationItemPropertiesResponse'] = None,
                 test_failover_state: Optional[str] = None,
                 test_failover_state_description: Optional[str] = None):
        """
        Replication protection cluster custom data details.
        :param str provisioning_state: The provisioning state of the cluster.
        :param str active_location: The Current active location of the Protection cluster.
        :param str agent_cluster_id: The Agent cluster Id.
        :param Sequence[str] allowed_operations: The allowed operations on the Replication protection cluster.
        :param bool are_all_cluster_nodes_registered: A value indicating whether all nodes of the cluster are registered or not.
        :param str cluster_fqdn: The cluster FQDN.
        :param Sequence[str] cluster_node_fqdns: The List of cluster Node FQDNs.
        :param Sequence[str] cluster_protected_item_ids: The List of Protected Item Id's.
        :param Sequence['RegisteredClusterNodesResponse'] cluster_registered_nodes: The registered node details.
        :param 'CurrentScenarioDetailsResponse' current_scenario: The current scenario.
        :param Sequence['HealthErrorResponse'] health_errors: List of health errors.
        :param str last_successful_failover_time: The last successful failover time.
        :param str last_successful_test_failover_time: The last successful test failover time.
        :param str policy_friendly_name: The name of Policy governing this PE.
        :param str policy_id: The Policy Id.
        :param str primary_fabric_friendly_name: The friendly name of the primary fabric.
        :param str primary_fabric_provider: The fabric provider of the primary fabric.
        :param str primary_protection_container_friendly_name: The name of primary protection container friendly name.
        :param str protection_cluster_type: The type of protection cluster type.
        :param str protection_state: The protection status.
        :param str protection_state_description: The protection state description.
        :param 'A2AReplicationProtectionClusterDetailsResponse' provider_specific_details: The Replication cluster provider custom settings.
        :param str recovery_container_id: The recovery container Id.
        :param str recovery_fabric_friendly_name: The friendly name of recovery fabric.
        :param str recovery_fabric_id: The Arm Id of recovery fabric.
        :param str recovery_protection_container_friendly_name: The name of recovery container friendly name.
        :param str replication_health: The consolidated protection health for the VM taking any issues with SRS as well as all the replication units associated with the VM's replication group into account. This is a string representation of the ProtectionHealth enumeration.
        :param 'SharedDiskReplicationItemPropertiesResponse' shared_disk_properties: The shared disk properties.
        :param str test_failover_state: The Test failover state.
        :param str test_failover_state_description: The Test failover state description.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if active_location is not None:
            pulumi.set(__self__, "active_location", active_location)
        if agent_cluster_id is not None:
            pulumi.set(__self__, "agent_cluster_id", agent_cluster_id)
        if allowed_operations is not None:
            pulumi.set(__self__, "allowed_operations", allowed_operations)
        if are_all_cluster_nodes_registered is not None:
            pulumi.set(__self__, "are_all_cluster_nodes_registered", are_all_cluster_nodes_registered)
        if cluster_fqdn is not None:
            pulumi.set(__self__, "cluster_fqdn", cluster_fqdn)
        if cluster_node_fqdns is not None:
            pulumi.set(__self__, "cluster_node_fqdns", cluster_node_fqdns)
        if cluster_protected_item_ids is not None:
            pulumi.set(__self__, "cluster_protected_item_ids", cluster_protected_item_ids)
        if cluster_registered_nodes is not None:
            pulumi.set(__self__, "cluster_registered_nodes", cluster_registered_nodes)
        if current_scenario is not None:
            pulumi.set(__self__, "current_scenario", current_scenario)
        if health_errors is not None:
            pulumi.set(__self__, "health_errors", health_errors)
        if last_successful_failover_time is not None:
            pulumi.set(__self__, "last_successful_failover_time", last_successful_failover_time)
        if last_successful_test_failover_time is not None:
            pulumi.set(__self__, "last_successful_test_failover_time", last_successful_test_failover_time)
        if policy_friendly_name is not None:
            pulumi.set(__self__, "policy_friendly_name", policy_friendly_name)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if primary_fabric_friendly_name is not None:
            pulumi.set(__self__, "primary_fabric_friendly_name", primary_fabric_friendly_name)
        if primary_fabric_provider is not None:
            pulumi.set(__self__, "primary_fabric_provider", primary_fabric_provider)
        if primary_protection_container_friendly_name is not None:
            pulumi.set(__self__, "primary_protection_container_friendly_name", primary_protection_container_friendly_name)
        if protection_cluster_type is not None:
            pulumi.set(__self__, "protection_cluster_type", protection_cluster_type)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if protection_state_description is not None:
            pulumi.set(__self__, "protection_state_description", protection_state_description)
        if provider_specific_details is not None:
            pulumi.set(__self__, "provider_specific_details", provider_specific_details)
        if recovery_container_id is not None:
            pulumi.set(__self__, "recovery_container_id", recovery_container_id)
        if recovery_fabric_friendly_name is not None:
            pulumi.set(__self__, "recovery_fabric_friendly_name", recovery_fabric_friendly_name)
        if recovery_fabric_id is not None:
            pulumi.set(__self__, "recovery_fabric_id", recovery_fabric_id)
        if recovery_protection_container_friendly_name is not None:
            pulumi.set(__self__, "recovery_protection_container_friendly_name", recovery_protection_container_friendly_name)
        if replication_health is not None:
            pulumi.set(__self__, "replication_health", replication_health)
        if shared_disk_properties is not None:
            pulumi.set(__self__, "shared_disk_properties", shared_disk_properties)
        if test_failover_state is not None:
            pulumi.set(__self__, "test_failover_state", test_failover_state)
        if test_failover_state_description is not None:
            pulumi.set(__self__, "test_failover_state_description", test_failover_state_description)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the cluster.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="activeLocation")
    def active_location(self) -> Optional[str]:
        """
        The Current active location of the Protection cluster.
        """
        return pulumi.get(self, "active_location")

    @property
    @pulumi.getter(name="agentClusterId")
    def agent_cluster_id(self) -> Optional[str]:
        """
        The Agent cluster Id.
        """
        return pulumi.get(self, "agent_cluster_id")

    @property
    @pulumi.getter(name="allowedOperations")
    def allowed_operations(self) -> Optional[Sequence[str]]:
        """
        The allowed operations on the Replication protection cluster.
        """
        return pulumi.get(self, "allowed_operations")

    @property
    @pulumi.getter(name="areAllClusterNodesRegistered")
    def are_all_cluster_nodes_registered(self) -> Optional[bool]:
        """
        A value indicating whether all nodes of the cluster are registered or not.
        """
        return pulumi.get(self, "are_all_cluster_nodes_registered")

    @property
    @pulumi.getter(name="clusterFqdn")
    def cluster_fqdn(self) -> Optional[str]:
        """
        The cluster FQDN.
        """
        return pulumi.get(self, "cluster_fqdn")

    @property
    @pulumi.getter(name="clusterNodeFqdns")
    def cluster_node_fqdns(self) -> Optional[Sequence[str]]:
        """
        The List of cluster Node FQDNs.
        """
        return pulumi.get(self, "cluster_node_fqdns")

    @property
    @pulumi.getter(name="clusterProtectedItemIds")
    def cluster_protected_item_ids(self) -> Optional[Sequence[str]]:
        """
        The List of Protected Item Id's.
        """
        return pulumi.get(self, "cluster_protected_item_ids")

    @property
    @pulumi.getter(name="clusterRegisteredNodes")
    def cluster_registered_nodes(self) -> Optional[Sequence['outputs.RegisteredClusterNodesResponse']]:
        """
        The registered node details.
        """
        return pulumi.get(self, "cluster_registered_nodes")

    @property
    @pulumi.getter(name="currentScenario")
    def current_scenario(self) -> Optional['outputs.CurrentScenarioDetailsResponse']:
        """
        The current scenario.
        """
        return pulumi.get(self, "current_scenario")

    @property
    @pulumi.getter(name="healthErrors")
    def health_errors(self) -> Optional[Sequence['outputs.HealthErrorResponse']]:
        """
        List of health errors.
        """
        return pulumi.get(self, "health_errors")

    @property
    @pulumi.getter(name="lastSuccessfulFailoverTime")
    def last_successful_failover_time(self) -> Optional[str]:
        """
        The last successful failover time.
        """
        return pulumi.get(self, "last_successful_failover_time")

    @property
    @pulumi.getter(name="lastSuccessfulTestFailoverTime")
    def last_successful_test_failover_time(self) -> Optional[str]:
        """
        The last successful test failover time.
        """
        return pulumi.get(self, "last_successful_test_failover_time")

    @property
    @pulumi.getter(name="policyFriendlyName")
    def policy_friendly_name(self) -> Optional[str]:
        """
        The name of Policy governing this PE.
        """
        return pulumi.get(self, "policy_friendly_name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        """
        The Policy Id.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="primaryFabricFriendlyName")
    def primary_fabric_friendly_name(self) -> Optional[str]:
        """
        The friendly name of the primary fabric.
        """
        return pulumi.get(self, "primary_fabric_friendly_name")

    @property
    @pulumi.getter(name="primaryFabricProvider")
    def primary_fabric_provider(self) -> Optional[str]:
        """
        The fabric provider of the primary fabric.
        """
        return pulumi.get(self, "primary_fabric_provider")

    @property
    @pulumi.getter(name="primaryProtectionContainerFriendlyName")
    def primary_protection_container_friendly_name(self) -> Optional[str]:
        """
        The name of primary protection container friendly name.
        """
        return pulumi.get(self, "primary_protection_container_friendly_name")

    @property
    @pulumi.getter(name="protectionClusterType")
    def protection_cluster_type(self) -> Optional[str]:
        """
        The type of protection cluster type.
        """
        return pulumi.get(self, "protection_cluster_type")

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[str]:
        """
        The protection status.
        """
        return pulumi.get(self, "protection_state")

    @property
    @pulumi.getter(name="protectionStateDescription")
    def protection_state_description(self) -> Optional[str]:
        """
        The protection state description.
        """
        return pulumi.get(self, "protection_state_description")

    @property
    @pulumi.getter(name="providerSpecificDetails")
    def provider_specific_details(self) -> Optional['outputs.A2AReplicationProtectionClusterDetailsResponse']:
        """
        The Replication cluster provider custom settings.
        """
        return pulumi.get(self, "provider_specific_details")

    @property
    @pulumi.getter(name="recoveryContainerId")
    def recovery_container_id(self) -> Optional[str]:
        """
        The recovery container Id.
        """
        return pulumi.get(self, "recovery_container_id")

    @property
    @pulumi.getter(name="recoveryFabricFriendlyName")
    def recovery_fabric_friendly_name(self) -> Optional[str]:
        """
        The friendly name of recovery fabric.
        """
        return pulumi.get(self, "recovery_fabric_friendly_name")

    @property
    @pulumi.getter(name="recoveryFabricId")
    def recovery_fabric_id(self) -> Optional[str]:
        """
        The Arm Id of recovery fabric.
        """
        return pulumi.get(self, "recovery_fabric_id")

    @property
    @pulumi.getter(name="recoveryProtectionContainerFriendlyName")
    def recovery_protection_container_friendly_name(self) -> Optional[str]:
        """
        The name of recovery container friendly name.
        """
        return pulumi.get(self, "recovery_protection_container_friendly_name")

    @property
    @pulumi.getter(name="replicationHealth")
    def replication_health(self) -> Optional[str]:
        """
        The consolidated protection health for the VM taking any issues with SRS as well as all the replication units associated with the VM's replication group into account. This is a string representation of the ProtectionHealth enumeration.
        """
        return pulumi.get(self, "replication_health")

    @property
    @pulumi.getter(name="sharedDiskProperties")
    def shared_disk_properties(self) -> Optional['outputs.SharedDiskReplicationItemPropertiesResponse']:
        """
        The shared disk properties.
        """
        return pulumi.get(self, "shared_disk_properties")

    @property
    @pulumi.getter(name="testFailoverState")
    def test_failover_state(self) -> Optional[str]:
        """
        The Test failover state.
        """
        return pulumi.get(self, "test_failover_state")

    @property
    @pulumi.getter(name="testFailoverStateDescription")
    def test_failover_state_description(self) -> Optional[str]:
        """
        The Test failover state description.
        """
        return pulumi.get(self, "test_failover_state_description")


@pulumi.output_type
class SharedDiskReplicationItemPropertiesResponse(dict):
    """
    Shared Disk Replication item custom data details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeLocation":
            suggest = "active_location"
        elif key == "allowedOperations":
            suggest = "allowed_operations"
        elif key == "currentScenario":
            suggest = "current_scenario"
        elif key == "healthErrors":
            suggest = "health_errors"
        elif key == "protectionState":
            suggest = "protection_state"
        elif key == "replicationHealth":
            suggest = "replication_health"
        elif key == "sharedDiskProviderSpecificDetails":
            suggest = "shared_disk_provider_specific_details"
        elif key == "testFailoverState":
            suggest = "test_failover_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SharedDiskReplicationItemPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SharedDiskReplicationItemPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SharedDiskReplicationItemPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_location: Optional[str] = None,
                 allowed_operations: Optional[Sequence[str]] = None,
                 current_scenario: Optional['outputs.CurrentScenarioDetailsResponse'] = None,
                 health_errors: Optional[Sequence['outputs.HealthErrorResponse']] = None,
                 protection_state: Optional[str] = None,
                 replication_health: Optional[str] = None,
                 shared_disk_provider_specific_details: Optional['outputs.A2ASharedDiskReplicationDetailsResponse'] = None,
                 test_failover_state: Optional[str] = None):
        """
        Shared Disk Replication item custom data details.
        :param str active_location: The Current active location of the PE.
        :param Sequence[str] allowed_operations: The allowed operations on the Replication protected item.
        :param 'CurrentScenarioDetailsResponse' current_scenario: The current scenario.
        :param Sequence['HealthErrorResponse'] health_errors: List of health errors.
        :param str protection_state: The protection state of shared disk.
        :param str replication_health: The consolidated protection health for the VM taking any issues with SRS as well as all the replication units associated with the VM's replication group into account. This is a string representation of the ProtectionHealth enumeration.
        :param 'A2ASharedDiskReplicationDetailsResponse' shared_disk_provider_specific_details: The Replication provider custom settings.
        :param str test_failover_state: The tfo state of shared disk.
        """
        if active_location is not None:
            pulumi.set(__self__, "active_location", active_location)
        if allowed_operations is not None:
            pulumi.set(__self__, "allowed_operations", allowed_operations)
        if current_scenario is not None:
            pulumi.set(__self__, "current_scenario", current_scenario)
        if health_errors is not None:
            pulumi.set(__self__, "health_errors", health_errors)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if replication_health is not None:
            pulumi.set(__self__, "replication_health", replication_health)
        if shared_disk_provider_specific_details is not None:
            pulumi.set(__self__, "shared_disk_provider_specific_details", shared_disk_provider_specific_details)
        if test_failover_state is not None:
            pulumi.set(__self__, "test_failover_state", test_failover_state)

    @property
    @pulumi.getter(name="activeLocation")
    def active_location(self) -> Optional[str]:
        """
        The Current active location of the PE.
        """
        return pulumi.get(self, "active_location")

    @property
    @pulumi.getter(name="allowedOperations")
    def allowed_operations(self) -> Optional[Sequence[str]]:
        """
        The allowed operations on the Replication protected item.
        """
        return pulumi.get(self, "allowed_operations")

    @property
    @pulumi.getter(name="currentScenario")
    def current_scenario(self) -> Optional['outputs.CurrentScenarioDetailsResponse']:
        """
        The current scenario.
        """
        return pulumi.get(self, "current_scenario")

    @property
    @pulumi.getter(name="healthErrors")
    def health_errors(self) -> Optional[Sequence['outputs.HealthErrorResponse']]:
        """
        List of health errors.
        """
        return pulumi.get(self, "health_errors")

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[str]:
        """
        The protection state of shared disk.
        """
        return pulumi.get(self, "protection_state")

    @property
    @pulumi.getter(name="replicationHealth")
    def replication_health(self) -> Optional[str]:
        """
        The consolidated protection health for the VM taking any issues with SRS as well as all the replication units associated with the VM's replication group into account. This is a string representation of the ProtectionHealth enumeration.
        """
        return pulumi.get(self, "replication_health")

    @property
    @pulumi.getter(name="sharedDiskProviderSpecificDetails")
    def shared_disk_provider_specific_details(self) -> Optional['outputs.A2ASharedDiskReplicationDetailsResponse']:
        """
        The Replication provider custom settings.
        """
        return pulumi.get(self, "shared_disk_provider_specific_details")

    @property
    @pulumi.getter(name="testFailoverState")
    def test_failover_state(self) -> Optional[str]:
        """
        The tfo state of shared disk.
        """
        return pulumi.get(self, "test_failover_state")


