# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'A2AContainerMappingInputArgs',
    'A2ACrossClusterMigrationEnableProtectionInputArgs',
    'A2ACrossClusterMigrationPolicyCreationInputArgs',
    'A2AEnableProtectionInputArgs',
    'A2APolicyCreationInputArgs',
    'A2AVmDiskInputDetailsArgs',
    'A2AVmManagedDiskInputDetailsArgs',
    'AddRecoveryServicesProviderInputPropertiesArgs',
    'AddVCenterRequestPropertiesArgs',
    'AzureBackupServerContainerArgs',
    'AzureFabricCreationInputArgs',
    'AzureFileShareProtectionPolicyArgs',
    'AzureFileshareProtectedItemExtendedInfoArgs',
    'AzureFileshareProtectedItemArgs',
    'AzureIaaSClassicComputeVMContainerArgs',
    'AzureIaaSClassicComputeVMProtectedItemArgs',
    'AzureIaaSComputeVMContainerArgs',
    'AzureIaaSComputeVMProtectedItemArgs',
    'AzureIaaSVMProtectedItemExtendedInfoArgs',
    'AzureIaaSVMProtectedItemArgs',
    'AzureIaaSVMProtectionPolicyArgs',
    'AzureRecoveryServiceVaultProtectionIntentArgs',
    'AzureResourceProtectionIntentArgs',
    'AzureSQLAGWorkloadContainerProtectionContainerArgs',
    'AzureSqlContainerArgs',
    'AzureSqlProtectedItemExtendedInfoArgs',
    'AzureSqlProtectedItemArgs',
    'AzureSqlProtectionPolicyArgs',
    'AzureStorageContainerArgs',
    'AzureToAzureCreateNetworkMappingInputArgs',
    'AzureVMAppContainerProtectionContainerArgs',
    'AzureVmWorkloadProtectedItemExtendedInfoArgs',
    'AzureVmWorkloadProtectedItemArgs',
    'AzureVmWorkloadProtectionPolicyArgs',
    'AzureVmWorkloadSAPAseDatabaseProtectedItemArgs',
    'AzureVmWorkloadSAPHanaDatabaseProtectedItemArgs',
    'AzureVmWorkloadSQLDatabaseProtectedItemArgs',
    'AzureWorkloadAutoProtectionIntentArgs',
    'AzureWorkloadContainerAutoProtectionIntentArgs',
    'AzureWorkloadContainerExtendedInfoArgs',
    'AzureWorkloadContainerArgs',
    'AzureWorkloadSQLAutoProtectionIntentArgs',
    'CmkKekIdentityArgs',
    'CmkKeyVaultPropertiesArgs',
    'ContainerIdentityInfoArgs',
    'CreateNetworkMappingInputPropertiesArgs',
    'CreatePolicyInputPropertiesArgs',
    'CreateProtectionContainerMappingInputPropertiesArgs',
    'CreateRecoveryPlanInputPropertiesArgs',
    'DPMContainerExtendedInfoArgs',
    'DPMProtectedItemExtendedInfoArgs',
    'DPMProtectedItemArgs',
    'DailyRetentionFormatArgs',
    'DailyRetentionScheduleArgs',
    'DailyScheduleArgs',
    'DayArgs',
    'DiskEncryptionInfoArgs',
    'DiskEncryptionKeyInfoArgs',
    'DiskExclusionPropertiesArgs',
    'DistributedNodesInfoArgs',
    'DpmContainerArgs',
    'EnableMigrationInputPropertiesArgs',
    'EnableProtectionInputPropertiesArgs',
    'ExtendedLocationArgs',
    'ExtendedPropertiesArgs',
    'FabricCreationInputPropertiesArgs',
    'GenericContainerExtendedInfoArgs',
    'GenericContainerArgs',
    'GenericProtectedItemArgs',
    'GenericProtectionPolicyArgs',
    'HourlyScheduleArgs',
    'HyperVReplicaAzureDiskInputDetailsArgs',
    'HyperVReplicaAzureEnableProtectionInputArgs',
    'HyperVReplicaAzurePolicyInputArgs',
    'HyperVReplicaBluePolicyInputArgs',
    'HyperVReplicaPolicyInputArgs',
    'IaaSVMContainerArgs',
    'IdentityDataArgs',
    'IdentityProviderInputArgs',
    'InMageAzureV2DiskInputDetailsArgs',
    'InMageAzureV2EnableProtectionInputArgs',
    'InMageAzureV2PolicyInputArgs',
    'InMageDiskExclusionInputArgs',
    'InMageDiskSignatureExclusionOptionsArgs',
    'InMageEnableProtectionInputArgs',
    'InMagePolicyInputArgs',
    'InMageRcmDiskInputArgs',
    'InMageRcmDisksDefaultInputArgs',
    'InMageRcmEnableProtectionInputArgs',
    'InMageRcmFabricCreationInputArgs',
    'InMageRcmFailbackPolicyCreationInputArgs',
    'InMageRcmPolicyCreationInputArgs',
    'InMageVolumeExclusionOptionsArgs',
    'InquiryInfoArgs',
    'InquiryValidationArgs',
    'InstantRPAdditionalDetailsArgs',
    'KPIResourceHealthDetailsArgs',
    'KeyEncryptionKeyInfoArgs',
    'LogSchedulePolicyArgs',
    'LongTermRetentionPolicyArgs',
    'LongTermSchedulePolicyArgs',
    'MABContainerHealthDetailsArgs',
    'MabContainerExtendedInfoArgs',
    'MabContainerArgs',
    'MabFileFolderProtectedItemExtendedInfoArgs',
    'MabFileFolderProtectedItemArgs',
    'MabProtectionPolicyArgs',
    'MonthlyRetentionScheduleArgs',
    'PrivateEndpointConnectionArgs',
    'PrivateEndpointArgs',
    'PrivateLinkServiceConnectionStateArgs',
    'RecoveryPlanA2AInputArgs',
    'RecoveryPlanActionArgs',
    'RecoveryPlanAutomationRunbookActionDetailsArgs',
    'RecoveryPlanGroupArgs',
    'RecoveryPlanManualActionDetailsArgs',
    'RecoveryPlanProtectedItemArgs',
    'RecoveryPlanScriptActionDetailsArgs',
    'RetentionDurationArgs',
    'SettingsArgs',
    'SimpleRetentionPolicyArgs',
    'SimpleSchedulePolicyV2Args',
    'SimpleSchedulePolicyArgs',
    'SkuArgs',
    'StorageMappingInputPropertiesArgs',
    'SubProtectionPolicyArgs',
    'TieringPolicyArgs',
    'VMwareCbtContainerMappingInputArgs',
    'VMwareCbtDiskInputArgs',
    'VMwareCbtEnableMigrationInputArgs',
    'VMwareCbtPolicyCreationInputArgs',
    'VMwareV2FabricCreationInputArgs',
    'VaultPropertiesEncryptionArgs',
    'VaultPropertiesArgs',
    'VmmToAzureCreateNetworkMappingInputArgs',
    'VmmToVmmCreateNetworkMappingInputArgs',
    'WeeklyRetentionFormatArgs',
    'WeeklyRetentionScheduleArgs',
    'WeeklyScheduleArgs',
    'WorkloadInquiryDetailsArgs',
    'YearlyRetentionScheduleArgs',
]

@pulumi.input_type
class A2AContainerMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 agent_auto_update_status: Optional[pulumi.Input[Union[str, 'AgentAutoUpdateStatus']]] = None,
                 automation_account_arm_id: Optional[pulumi.Input[str]] = None,
                 automation_account_authentication_type: Optional[pulumi.Input[Union[str, 'AutomationAccountAuthenticationType']]] = None):
        """
        A2A container mapping input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'A2A'.
        :param pulumi.Input[Union[str, 'AgentAutoUpdateStatus']] agent_auto_update_status: A value indicating whether the auto update is enabled.
        :param pulumi.Input[str] automation_account_arm_id: The automation account arm id.
        :param pulumi.Input[Union[str, 'AutomationAccountAuthenticationType']] automation_account_authentication_type: A value indicating the type authentication to use for automation Account.
        """
        pulumi.set(__self__, "instance_type", 'A2A')
        if agent_auto_update_status is not None:
            pulumi.set(__self__, "agent_auto_update_status", agent_auto_update_status)
        if automation_account_arm_id is not None:
            pulumi.set(__self__, "automation_account_arm_id", automation_account_arm_id)
        if automation_account_authentication_type is None:
            automation_account_authentication_type = 'RunAsAccount'
        if automation_account_authentication_type is not None:
            pulumi.set(__self__, "automation_account_authentication_type", automation_account_authentication_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'A2A'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="agentAutoUpdateStatus")
    def agent_auto_update_status(self) -> Optional[pulumi.Input[Union[str, 'AgentAutoUpdateStatus']]]:
        """
        A value indicating whether the auto update is enabled.
        """
        return pulumi.get(self, "agent_auto_update_status")

    @agent_auto_update_status.setter
    def agent_auto_update_status(self, value: Optional[pulumi.Input[Union[str, 'AgentAutoUpdateStatus']]]):
        pulumi.set(self, "agent_auto_update_status", value)

    @property
    @pulumi.getter(name="automationAccountArmId")
    def automation_account_arm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The automation account arm id.
        """
        return pulumi.get(self, "automation_account_arm_id")

    @automation_account_arm_id.setter
    def automation_account_arm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "automation_account_arm_id", value)

    @property
    @pulumi.getter(name="automationAccountAuthenticationType")
    def automation_account_authentication_type(self) -> Optional[pulumi.Input[Union[str, 'AutomationAccountAuthenticationType']]]:
        """
        A value indicating the type authentication to use for automation Account.
        """
        return pulumi.get(self, "automation_account_authentication_type")

    @automation_account_authentication_type.setter
    def automation_account_authentication_type(self, value: Optional[pulumi.Input[Union[str, 'AutomationAccountAuthenticationType']]]):
        pulumi.set(self, "automation_account_authentication_type", value)


@pulumi.input_type
class A2ACrossClusterMigrationEnableProtectionInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 fabric_object_id: Optional[pulumi.Input[str]] = None,
                 recovery_container_id: Optional[pulumi.Input[str]] = None):
        """
        A2A Cross-Cluster Migration enable protection input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'A2ACrossClusterMigration'.
        :param pulumi.Input[str] fabric_object_id: The fabric specific object Id of the virtual machine.
        :param pulumi.Input[str] recovery_container_id: The recovery container Id.
        """
        pulumi.set(__self__, "instance_type", 'A2ACrossClusterMigration')
        if fabric_object_id is not None:
            pulumi.set(__self__, "fabric_object_id", fabric_object_id)
        if recovery_container_id is not None:
            pulumi.set(__self__, "recovery_container_id", recovery_container_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'A2ACrossClusterMigration'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="fabricObjectId")
    def fabric_object_id(self) -> Optional[pulumi.Input[str]]:
        """
        The fabric specific object Id of the virtual machine.
        """
        return pulumi.get(self, "fabric_object_id")

    @fabric_object_id.setter
    def fabric_object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_object_id", value)

    @property
    @pulumi.getter(name="recoveryContainerId")
    def recovery_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery container Id.
        """
        return pulumi.get(self, "recovery_container_id")

    @recovery_container_id.setter
    def recovery_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_container_id", value)


@pulumi.input_type
class A2ACrossClusterMigrationPolicyCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str]):
        """
        A2A Cross-Cluster Migration Policy creation input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'A2ACrossClusterMigration'.
        """
        pulumi.set(__self__, "instance_type", 'A2ACrossClusterMigration')

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'A2ACrossClusterMigration'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class A2AEnableProtectionInputArgs:
    def __init__(__self__, *,
                 fabric_object_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 disk_encryption_info: Optional[pulumi.Input['DiskEncryptionInfoArgs']] = None,
                 multi_vm_group_id: Optional[pulumi.Input[str]] = None,
                 multi_vm_group_name: Optional[pulumi.Input[str]] = None,
                 recovery_availability_set_id: Optional[pulumi.Input[str]] = None,
                 recovery_availability_zone: Optional[pulumi.Input[str]] = None,
                 recovery_azure_network_id: Optional[pulumi.Input[str]] = None,
                 recovery_boot_diag_storage_account_id: Optional[pulumi.Input[str]] = None,
                 recovery_capacity_reservation_group_id: Optional[pulumi.Input[str]] = None,
                 recovery_cloud_service_id: Optional[pulumi.Input[str]] = None,
                 recovery_container_id: Optional[pulumi.Input[str]] = None,
                 recovery_extended_location: Optional[pulumi.Input['ExtendedLocationArgs']] = None,
                 recovery_proximity_placement_group_id: Optional[pulumi.Input[str]] = None,
                 recovery_resource_group_id: Optional[pulumi.Input[str]] = None,
                 recovery_subnet_name: Optional[pulumi.Input[str]] = None,
                 recovery_virtual_machine_scale_set_id: Optional[pulumi.Input[str]] = None,
                 vm_disks: Optional[pulumi.Input[Sequence[pulumi.Input['A2AVmDiskInputDetailsArgs']]]] = None,
                 vm_managed_disks: Optional[pulumi.Input[Sequence[pulumi.Input['A2AVmManagedDiskInputDetailsArgs']]]] = None):
        """
        A2A enable protection input.
        :param pulumi.Input[str] fabric_object_id: The fabric specific object Id of the virtual machine.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'A2A'.
        :param pulumi.Input['DiskEncryptionInfoArgs'] disk_encryption_info: The recovery disk encryption information (for two pass flows).
        :param pulumi.Input[str] multi_vm_group_id: The multi vm group id.
        :param pulumi.Input[str] multi_vm_group_name: The multi vm group name.
        :param pulumi.Input[str] recovery_availability_set_id: The recovery availability set Id.
        :param pulumi.Input[str] recovery_availability_zone: The recovery availability zone.
        :param pulumi.Input[str] recovery_azure_network_id: The recovery Azure virtual network ARM id.
        :param pulumi.Input[str] recovery_boot_diag_storage_account_id: The boot diagnostic storage account.
        :param pulumi.Input[str] recovery_capacity_reservation_group_id: The recovery capacity reservation group Id.
        :param pulumi.Input[str] recovery_cloud_service_id: The recovery cloud service Id. Valid for V1 scenarios.
        :param pulumi.Input[str] recovery_container_id: The recovery container Id.
        :param pulumi.Input['ExtendedLocationArgs'] recovery_extended_location: The recovery extended location.
        :param pulumi.Input[str] recovery_proximity_placement_group_id: The recovery proximity placement group Id.
        :param pulumi.Input[str] recovery_resource_group_id: The recovery resource group Id. Valid for V2 scenarios.
        :param pulumi.Input[str] recovery_subnet_name: The recovery subnet name.
        :param pulumi.Input[str] recovery_virtual_machine_scale_set_id: The virtual machine scale set Id.
        :param pulumi.Input[Sequence[pulumi.Input['A2AVmDiskInputDetailsArgs']]] vm_disks: The list of vm disk details.
        :param pulumi.Input[Sequence[pulumi.Input['A2AVmManagedDiskInputDetailsArgs']]] vm_managed_disks: The list of vm managed disk details.
        """
        pulumi.set(__self__, "fabric_object_id", fabric_object_id)
        pulumi.set(__self__, "instance_type", 'A2A')
        if disk_encryption_info is not None:
            pulumi.set(__self__, "disk_encryption_info", disk_encryption_info)
        if multi_vm_group_id is not None:
            pulumi.set(__self__, "multi_vm_group_id", multi_vm_group_id)
        if multi_vm_group_name is not None:
            pulumi.set(__self__, "multi_vm_group_name", multi_vm_group_name)
        if recovery_availability_set_id is not None:
            pulumi.set(__self__, "recovery_availability_set_id", recovery_availability_set_id)
        if recovery_availability_zone is not None:
            pulumi.set(__self__, "recovery_availability_zone", recovery_availability_zone)
        if recovery_azure_network_id is not None:
            pulumi.set(__self__, "recovery_azure_network_id", recovery_azure_network_id)
        if recovery_boot_diag_storage_account_id is not None:
            pulumi.set(__self__, "recovery_boot_diag_storage_account_id", recovery_boot_diag_storage_account_id)
        if recovery_capacity_reservation_group_id is not None:
            pulumi.set(__self__, "recovery_capacity_reservation_group_id", recovery_capacity_reservation_group_id)
        if recovery_cloud_service_id is not None:
            pulumi.set(__self__, "recovery_cloud_service_id", recovery_cloud_service_id)
        if recovery_container_id is not None:
            pulumi.set(__self__, "recovery_container_id", recovery_container_id)
        if recovery_extended_location is not None:
            pulumi.set(__self__, "recovery_extended_location", recovery_extended_location)
        if recovery_proximity_placement_group_id is not None:
            pulumi.set(__self__, "recovery_proximity_placement_group_id", recovery_proximity_placement_group_id)
        if recovery_resource_group_id is not None:
            pulumi.set(__self__, "recovery_resource_group_id", recovery_resource_group_id)
        if recovery_subnet_name is not None:
            pulumi.set(__self__, "recovery_subnet_name", recovery_subnet_name)
        if recovery_virtual_machine_scale_set_id is not None:
            pulumi.set(__self__, "recovery_virtual_machine_scale_set_id", recovery_virtual_machine_scale_set_id)
        if vm_disks is not None:
            pulumi.set(__self__, "vm_disks", vm_disks)
        if vm_managed_disks is not None:
            pulumi.set(__self__, "vm_managed_disks", vm_managed_disks)

    @property
    @pulumi.getter(name="fabricObjectId")
    def fabric_object_id(self) -> pulumi.Input[str]:
        """
        The fabric specific object Id of the virtual machine.
        """
        return pulumi.get(self, "fabric_object_id")

    @fabric_object_id.setter
    def fabric_object_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "fabric_object_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'A2A'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="diskEncryptionInfo")
    def disk_encryption_info(self) -> Optional[pulumi.Input['DiskEncryptionInfoArgs']]:
        """
        The recovery disk encryption information (for two pass flows).
        """
        return pulumi.get(self, "disk_encryption_info")

    @disk_encryption_info.setter
    def disk_encryption_info(self, value: Optional[pulumi.Input['DiskEncryptionInfoArgs']]):
        pulumi.set(self, "disk_encryption_info", value)

    @property
    @pulumi.getter(name="multiVmGroupId")
    def multi_vm_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The multi vm group id.
        """
        return pulumi.get(self, "multi_vm_group_id")

    @multi_vm_group_id.setter
    def multi_vm_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_vm_group_id", value)

    @property
    @pulumi.getter(name="multiVmGroupName")
    def multi_vm_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The multi vm group name.
        """
        return pulumi.get(self, "multi_vm_group_name")

    @multi_vm_group_name.setter
    def multi_vm_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_vm_group_name", value)

    @property
    @pulumi.getter(name="recoveryAvailabilitySetId")
    def recovery_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery availability set Id.
        """
        return pulumi.get(self, "recovery_availability_set_id")

    @recovery_availability_set_id.setter
    def recovery_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_availability_set_id", value)

    @property
    @pulumi.getter(name="recoveryAvailabilityZone")
    def recovery_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery availability zone.
        """
        return pulumi.get(self, "recovery_availability_zone")

    @recovery_availability_zone.setter
    def recovery_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_availability_zone", value)

    @property
    @pulumi.getter(name="recoveryAzureNetworkId")
    def recovery_azure_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery Azure virtual network ARM id.
        """
        return pulumi.get(self, "recovery_azure_network_id")

    @recovery_azure_network_id.setter
    def recovery_azure_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_azure_network_id", value)

    @property
    @pulumi.getter(name="recoveryBootDiagStorageAccountId")
    def recovery_boot_diag_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The boot diagnostic storage account.
        """
        return pulumi.get(self, "recovery_boot_diag_storage_account_id")

    @recovery_boot_diag_storage_account_id.setter
    def recovery_boot_diag_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_boot_diag_storage_account_id", value)

    @property
    @pulumi.getter(name="recoveryCapacityReservationGroupId")
    def recovery_capacity_reservation_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery capacity reservation group Id.
        """
        return pulumi.get(self, "recovery_capacity_reservation_group_id")

    @recovery_capacity_reservation_group_id.setter
    def recovery_capacity_reservation_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_capacity_reservation_group_id", value)

    @property
    @pulumi.getter(name="recoveryCloudServiceId")
    def recovery_cloud_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery cloud service Id. Valid for V1 scenarios.
        """
        return pulumi.get(self, "recovery_cloud_service_id")

    @recovery_cloud_service_id.setter
    def recovery_cloud_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_cloud_service_id", value)

    @property
    @pulumi.getter(name="recoveryContainerId")
    def recovery_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery container Id.
        """
        return pulumi.get(self, "recovery_container_id")

    @recovery_container_id.setter
    def recovery_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_container_id", value)

    @property
    @pulumi.getter(name="recoveryExtendedLocation")
    def recovery_extended_location(self) -> Optional[pulumi.Input['ExtendedLocationArgs']]:
        """
        The recovery extended location.
        """
        return pulumi.get(self, "recovery_extended_location")

    @recovery_extended_location.setter
    def recovery_extended_location(self, value: Optional[pulumi.Input['ExtendedLocationArgs']]):
        pulumi.set(self, "recovery_extended_location", value)

    @property
    @pulumi.getter(name="recoveryProximityPlacementGroupId")
    def recovery_proximity_placement_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery proximity placement group Id.
        """
        return pulumi.get(self, "recovery_proximity_placement_group_id")

    @recovery_proximity_placement_group_id.setter
    def recovery_proximity_placement_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_proximity_placement_group_id", value)

    @property
    @pulumi.getter(name="recoveryResourceGroupId")
    def recovery_resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery resource group Id. Valid for V2 scenarios.
        """
        return pulumi.get(self, "recovery_resource_group_id")

    @recovery_resource_group_id.setter
    def recovery_resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_resource_group_id", value)

    @property
    @pulumi.getter(name="recoverySubnetName")
    def recovery_subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery subnet name.
        """
        return pulumi.get(self, "recovery_subnet_name")

    @recovery_subnet_name.setter
    def recovery_subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_subnet_name", value)

    @property
    @pulumi.getter(name="recoveryVirtualMachineScaleSetId")
    def recovery_virtual_machine_scale_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The virtual machine scale set Id.
        """
        return pulumi.get(self, "recovery_virtual_machine_scale_set_id")

    @recovery_virtual_machine_scale_set_id.setter
    def recovery_virtual_machine_scale_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_virtual_machine_scale_set_id", value)

    @property
    @pulumi.getter(name="vmDisks")
    def vm_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['A2AVmDiskInputDetailsArgs']]]]:
        """
        The list of vm disk details.
        """
        return pulumi.get(self, "vm_disks")

    @vm_disks.setter
    def vm_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['A2AVmDiskInputDetailsArgs']]]]):
        pulumi.set(self, "vm_disks", value)

    @property
    @pulumi.getter(name="vmManagedDisks")
    def vm_managed_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['A2AVmManagedDiskInputDetailsArgs']]]]:
        """
        The list of vm managed disk details.
        """
        return pulumi.get(self, "vm_managed_disks")

    @vm_managed_disks.setter
    def vm_managed_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['A2AVmManagedDiskInputDetailsArgs']]]]):
        pulumi.set(self, "vm_managed_disks", value)


@pulumi.input_type
class A2APolicyCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 multi_vm_sync_status: pulumi.Input[Union[str, 'SetMultiVmSyncStatus']],
                 app_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 crash_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 recovery_point_history: Optional[pulumi.Input[int]] = None):
        """
        A2A Policy creation input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'A2A'.
        :param pulumi.Input[Union[str, 'SetMultiVmSyncStatus']] multi_vm_sync_status: A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: The app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: The crash consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] recovery_point_history: The duration in minutes until which the recovery points need to be stored.
        """
        pulumi.set(__self__, "instance_type", 'A2A')
        pulumi.set(__self__, "multi_vm_sync_status", multi_vm_sync_status)
        if app_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        if crash_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        if recovery_point_history is not None:
            pulumi.set(__self__, "recovery_point_history", recovery_point_history)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'A2A'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="multiVmSyncStatus")
    def multi_vm_sync_status(self) -> pulumi.Input[Union[str, 'SetMultiVmSyncStatus']]:
        """
        A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        """
        return pulumi.get(self, "multi_vm_sync_status")

    @multi_vm_sync_status.setter
    def multi_vm_sync_status(self, value: pulumi.Input[Union[str, 'SetMultiVmSyncStatus']]):
        pulumi.set(self, "multi_vm_sync_status", value)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="recoveryPointHistory")
    def recovery_point_history(self) -> Optional[pulumi.Input[int]]:
        """
        The duration in minutes until which the recovery points need to be stored.
        """
        return pulumi.get(self, "recovery_point_history")

    @recovery_point_history.setter
    def recovery_point_history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_history", value)


@pulumi.input_type
class A2AVmDiskInputDetailsArgs:
    def __init__(__self__, *,
                 disk_uri: pulumi.Input[str],
                 primary_staging_azure_storage_account_id: pulumi.Input[str],
                 recovery_azure_storage_account_id: pulumi.Input[str]):
        """
        A2A disk input details.
        :param pulumi.Input[str] disk_uri: The disk Uri.
        :param pulumi.Input[str] primary_staging_azure_storage_account_id: The primary staging storage account Id.
        :param pulumi.Input[str] recovery_azure_storage_account_id: The recovery VHD storage account Id.
        """
        pulumi.set(__self__, "disk_uri", disk_uri)
        pulumi.set(__self__, "primary_staging_azure_storage_account_id", primary_staging_azure_storage_account_id)
        pulumi.set(__self__, "recovery_azure_storage_account_id", recovery_azure_storage_account_id)

    @property
    @pulumi.getter(name="diskUri")
    def disk_uri(self) -> pulumi.Input[str]:
        """
        The disk Uri.
        """
        return pulumi.get(self, "disk_uri")

    @disk_uri.setter
    def disk_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_uri", value)

    @property
    @pulumi.getter(name="primaryStagingAzureStorageAccountId")
    def primary_staging_azure_storage_account_id(self) -> pulumi.Input[str]:
        """
        The primary staging storage account Id.
        """
        return pulumi.get(self, "primary_staging_azure_storage_account_id")

    @primary_staging_azure_storage_account_id.setter
    def primary_staging_azure_storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_staging_azure_storage_account_id", value)

    @property
    @pulumi.getter(name="recoveryAzureStorageAccountId")
    def recovery_azure_storage_account_id(self) -> pulumi.Input[str]:
        """
        The recovery VHD storage account Id.
        """
        return pulumi.get(self, "recovery_azure_storage_account_id")

    @recovery_azure_storage_account_id.setter
    def recovery_azure_storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "recovery_azure_storage_account_id", value)


@pulumi.input_type
class A2AVmManagedDiskInputDetailsArgs:
    def __init__(__self__, *,
                 disk_id: pulumi.Input[str],
                 primary_staging_azure_storage_account_id: pulumi.Input[str],
                 recovery_resource_group_id: pulumi.Input[str],
                 disk_encryption_info: Optional[pulumi.Input['DiskEncryptionInfoArgs']] = None,
                 recovery_disk_encryption_set_id: Optional[pulumi.Input[str]] = None,
                 recovery_replica_disk_account_type: Optional[pulumi.Input[str]] = None,
                 recovery_target_disk_account_type: Optional[pulumi.Input[str]] = None):
        """
        A2A managed disk input details.
        :param pulumi.Input[str] disk_id: The disk Id.
        :param pulumi.Input[str] primary_staging_azure_storage_account_id: The primary staging storage account Arm Id.
        :param pulumi.Input[str] recovery_resource_group_id: The target resource group Arm Id.
        :param pulumi.Input['DiskEncryptionInfoArgs'] disk_encryption_info: The recovery disk encryption information (for one / single pass flows).
        :param pulumi.Input[str] recovery_disk_encryption_set_id: The recovery disk encryption set Id.
        :param pulumi.Input[str] recovery_replica_disk_account_type: The replica disk type. Its an optional value and will be same as source disk type if not user provided.
        :param pulumi.Input[str] recovery_target_disk_account_type: The target disk type after failover. Its an optional value and will be same as source disk type if not user provided.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "primary_staging_azure_storage_account_id", primary_staging_azure_storage_account_id)
        pulumi.set(__self__, "recovery_resource_group_id", recovery_resource_group_id)
        if disk_encryption_info is not None:
            pulumi.set(__self__, "disk_encryption_info", disk_encryption_info)
        if recovery_disk_encryption_set_id is not None:
            pulumi.set(__self__, "recovery_disk_encryption_set_id", recovery_disk_encryption_set_id)
        if recovery_replica_disk_account_type is not None:
            pulumi.set(__self__, "recovery_replica_disk_account_type", recovery_replica_disk_account_type)
        if recovery_target_disk_account_type is not None:
            pulumi.set(__self__, "recovery_target_disk_account_type", recovery_target_disk_account_type)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        The disk Id.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="primaryStagingAzureStorageAccountId")
    def primary_staging_azure_storage_account_id(self) -> pulumi.Input[str]:
        """
        The primary staging storage account Arm Id.
        """
        return pulumi.get(self, "primary_staging_azure_storage_account_id")

    @primary_staging_azure_storage_account_id.setter
    def primary_staging_azure_storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_staging_azure_storage_account_id", value)

    @property
    @pulumi.getter(name="recoveryResourceGroupId")
    def recovery_resource_group_id(self) -> pulumi.Input[str]:
        """
        The target resource group Arm Id.
        """
        return pulumi.get(self, "recovery_resource_group_id")

    @recovery_resource_group_id.setter
    def recovery_resource_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "recovery_resource_group_id", value)

    @property
    @pulumi.getter(name="diskEncryptionInfo")
    def disk_encryption_info(self) -> Optional[pulumi.Input['DiskEncryptionInfoArgs']]:
        """
        The recovery disk encryption information (for one / single pass flows).
        """
        return pulumi.get(self, "disk_encryption_info")

    @disk_encryption_info.setter
    def disk_encryption_info(self, value: Optional[pulumi.Input['DiskEncryptionInfoArgs']]):
        pulumi.set(self, "disk_encryption_info", value)

    @property
    @pulumi.getter(name="recoveryDiskEncryptionSetId")
    def recovery_disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery disk encryption set Id.
        """
        return pulumi.get(self, "recovery_disk_encryption_set_id")

    @recovery_disk_encryption_set_id.setter
    def recovery_disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_disk_encryption_set_id", value)

    @property
    @pulumi.getter(name="recoveryReplicaDiskAccountType")
    def recovery_replica_disk_account_type(self) -> Optional[pulumi.Input[str]]:
        """
        The replica disk type. Its an optional value and will be same as source disk type if not user provided.
        """
        return pulumi.get(self, "recovery_replica_disk_account_type")

    @recovery_replica_disk_account_type.setter
    def recovery_replica_disk_account_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_replica_disk_account_type", value)

    @property
    @pulumi.getter(name="recoveryTargetDiskAccountType")
    def recovery_target_disk_account_type(self) -> Optional[pulumi.Input[str]]:
        """
        The target disk type after failover. Its an optional value and will be same as source disk type if not user provided.
        """
        return pulumi.get(self, "recovery_target_disk_account_type")

    @recovery_target_disk_account_type.setter
    def recovery_target_disk_account_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_target_disk_account_type", value)


@pulumi.input_type
class AddRecoveryServicesProviderInputPropertiesArgs:
    def __init__(__self__, *,
                 authentication_identity_input: pulumi.Input['IdentityProviderInputArgs'],
                 machine_name: pulumi.Input[str],
                 resource_access_identity_input: pulumi.Input['IdentityProviderInputArgs'],
                 bios_id: Optional[pulumi.Input[str]] = None,
                 data_plane_authentication_identity_input: Optional[pulumi.Input['IdentityProviderInputArgs']] = None,
                 machine_id: Optional[pulumi.Input[str]] = None):
        """
        The properties of an add provider request.
        :param pulumi.Input['IdentityProviderInputArgs'] authentication_identity_input: The identity provider input for DRA authentication.
        :param pulumi.Input[str] machine_name: The name of the machine where the provider is getting added.
        :param pulumi.Input['IdentityProviderInputArgs'] resource_access_identity_input: The identity provider input for resource access.
        :param pulumi.Input[str] bios_id: The Bios Id of the machine.
        :param pulumi.Input['IdentityProviderInputArgs'] data_plane_authentication_identity_input: The identity provider input for data plane authentication.
        :param pulumi.Input[str] machine_id: The Id of the machine where the provider is getting added.
        """
        pulumi.set(__self__, "authentication_identity_input", authentication_identity_input)
        pulumi.set(__self__, "machine_name", machine_name)
        pulumi.set(__self__, "resource_access_identity_input", resource_access_identity_input)
        if bios_id is not None:
            pulumi.set(__self__, "bios_id", bios_id)
        if data_plane_authentication_identity_input is not None:
            pulumi.set(__self__, "data_plane_authentication_identity_input", data_plane_authentication_identity_input)
        if machine_id is not None:
            pulumi.set(__self__, "machine_id", machine_id)

    @property
    @pulumi.getter(name="authenticationIdentityInput")
    def authentication_identity_input(self) -> pulumi.Input['IdentityProviderInputArgs']:
        """
        The identity provider input for DRA authentication.
        """
        return pulumi.get(self, "authentication_identity_input")

    @authentication_identity_input.setter
    def authentication_identity_input(self, value: pulumi.Input['IdentityProviderInputArgs']):
        pulumi.set(self, "authentication_identity_input", value)

    @property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> pulumi.Input[str]:
        """
        The name of the machine where the provider is getting added.
        """
        return pulumi.get(self, "machine_name")

    @machine_name.setter
    def machine_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_name", value)

    @property
    @pulumi.getter(name="resourceAccessIdentityInput")
    def resource_access_identity_input(self) -> pulumi.Input['IdentityProviderInputArgs']:
        """
        The identity provider input for resource access.
        """
        return pulumi.get(self, "resource_access_identity_input")

    @resource_access_identity_input.setter
    def resource_access_identity_input(self, value: pulumi.Input['IdentityProviderInputArgs']):
        pulumi.set(self, "resource_access_identity_input", value)

    @property
    @pulumi.getter(name="biosId")
    def bios_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Bios Id of the machine.
        """
        return pulumi.get(self, "bios_id")

    @bios_id.setter
    def bios_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bios_id", value)

    @property
    @pulumi.getter(name="dataPlaneAuthenticationIdentityInput")
    def data_plane_authentication_identity_input(self) -> Optional[pulumi.Input['IdentityProviderInputArgs']]:
        """
        The identity provider input for data plane authentication.
        """
        return pulumi.get(self, "data_plane_authentication_identity_input")

    @data_plane_authentication_identity_input.setter
    def data_plane_authentication_identity_input(self, value: Optional[pulumi.Input['IdentityProviderInputArgs']]):
        pulumi.set(self, "data_plane_authentication_identity_input", value)

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of the machine where the provider is getting added.
        """
        return pulumi.get(self, "machine_id")

    @machine_id.setter
    def machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_id", value)


@pulumi.input_type
class AddVCenterRequestPropertiesArgs:
    def __init__(__self__, *,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 process_server_id: Optional[pulumi.Input[str]] = None,
                 run_as_account_id: Optional[pulumi.Input[str]] = None):
        """
        The properties of an add vCenter request.
        :param pulumi.Input[str] friendly_name: The friendly name of the vCenter.
        :param pulumi.Input[str] ip_address: The IP address of the vCenter to be discovered.
        :param pulumi.Input[str] port: The port number for discovery.
        :param pulumi.Input[str] process_server_id: The process server Id from where the discovery is orchestrated.
        :param pulumi.Input[str] run_as_account_id: The account Id which has privileges to discover the vCenter.
        """
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if process_server_id is not None:
            pulumi.set(__self__, "process_server_id", process_server_id)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of the vCenter.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the vCenter to be discovered.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        The port number for discovery.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="processServerId")
    def process_server_id(self) -> Optional[pulumi.Input[str]]:
        """
        The process server Id from where the discovery is orchestrated.
        """
        return pulumi.get(self, "process_server_id")

    @process_server_id.setter
    def process_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_server_id", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account Id which has privileges to discover the vCenter.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_account_id", value)


@pulumi.input_type
class AzureBackupServerContainerArgs:
    def __init__(__self__, *,
                 container_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 can_re_register: Optional[pulumi.Input[bool]] = None,
                 container_id: Optional[pulumi.Input[str]] = None,
                 dpm_agent_version: Optional[pulumi.Input[str]] = None,
                 dpm_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extended_info: Optional[pulumi.Input['DPMContainerExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 protectable_object_type: Optional[pulumi.Input[str]] = None,
                 protected_item_count: Optional[pulumi.Input[float]] = None,
                 protection_status: Optional[pulumi.Input[str]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None,
                 upgrade_available: Optional[pulumi.Input[bool]] = None):
        """
        AzureBackupServer (DPMVenus) workload-specific protection container.
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
               Expected value is 'AzureBackupServerContainer'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the container.
        :param pulumi.Input[bool] can_re_register: Specifies whether the container is re-registrable.
        :param pulumi.Input[str] container_id: ID of container.
        :param pulumi.Input[str] dpm_agent_version: Backup engine Agent version
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dpm_servers: List of BackupEngines protecting the container
        :param pulumi.Input['DPMContainerExtendedInfoArgs'] extended_info: Extended Info of the container.
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[str] protectable_object_type: Type of the protectable object associated with this container
        :param pulumi.Input[float] protected_item_count: Number of protected items in the BackupEngine
        :param pulumi.Input[str] protection_status: Protection status of the container.
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        :param pulumi.Input[bool] upgrade_available: To check if upgrade available
        """
        pulumi.set(__self__, "container_type", 'AzureBackupServerContainer')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if can_re_register is not None:
            pulumi.set(__self__, "can_re_register", can_re_register)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if dpm_agent_version is not None:
            pulumi.set(__self__, "dpm_agent_version", dpm_agent_version)
        if dpm_servers is not None:
            pulumi.set(__self__, "dpm_servers", dpm_servers)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if protectable_object_type is not None:
            pulumi.set(__self__, "protectable_object_type", protectable_object_type)
        if protected_item_count is not None:
            pulumi.set(__self__, "protected_item_count", protected_item_count)
        if protection_status is not None:
            pulumi.set(__self__, "protection_status", protection_status)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)
        if upgrade_available is not None:
            pulumi.set(__self__, "upgrade_available", upgrade_available)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Input[str]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        Expected value is 'AzureBackupServerContainer'.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="canReRegister")
    def can_re_register(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the container is re-registrable.
        """
        return pulumi.get(self, "can_re_register")

    @can_re_register.setter
    def can_re_register(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_re_register", value)

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of container.
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="dpmAgentVersion")
    def dpm_agent_version(self) -> Optional[pulumi.Input[str]]:
        """
        Backup engine Agent version
        """
        return pulumi.get(self, "dpm_agent_version")

    @dpm_agent_version.setter
    def dpm_agent_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpm_agent_version", value)

    @property
    @pulumi.getter(name="dpmServers")
    def dpm_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of BackupEngines protecting the container
        """
        return pulumi.get(self, "dpm_servers")

    @dpm_servers.setter
    def dpm_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dpm_servers", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['DPMContainerExtendedInfoArgs']]:
        """
        Extended Info of the container.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['DPMContainerExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="protectableObjectType")
    def protectable_object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the protectable object associated with this container
        """
        return pulumi.get(self, "protectable_object_type")

    @protectable_object_type.setter
    def protectable_object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_object_type", value)

    @property
    @pulumi.getter(name="protectedItemCount")
    def protected_item_count(self) -> Optional[pulumi.Input[float]]:
        """
        Number of protected items in the BackupEngine
        """
        return pulumi.get(self, "protected_item_count")

    @protected_item_count.setter
    def protected_item_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "protected_item_count", value)

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> Optional[pulumi.Input[str]]:
        """
        Protection status of the container.
        """
        return pulumi.get(self, "protection_status")

    @protection_status.setter
    def protection_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_status", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)

    @property
    @pulumi.getter(name="upgradeAvailable")
    def upgrade_available(self) -> Optional[pulumi.Input[bool]]:
        """
        To check if upgrade available
        """
        return pulumi.get(self, "upgrade_available")

    @upgrade_available.setter
    def upgrade_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_available", value)


@pulumi.input_type
class AzureFabricCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 location: Optional[pulumi.Input[str]] = None):
        """
        Fabric provider specific settings.
        :param pulumi.Input[str] instance_type: Gets the class type.
               Expected value is 'Azure'.
        :param pulumi.Input[str] location: The Location.
        """
        pulumi.set(__self__, "instance_type", 'Azure')
        if location is not None:
            pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the class type.
        Expected value is 'Azure'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The Location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)


@pulumi.input_type
class AzureFileShareProtectionPolicyArgs:
    def __init__(__self__, *,
                 backup_management_type: pulumi.Input[str],
                 protected_items_count: Optional[pulumi.Input[int]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retention_policy: Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]] = None,
                 schedule_policy: Optional[pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 work_load_type: Optional[pulumi.Input[Union[str, 'WorkloadType']]] = None):
        """
        AzureStorage backup policy.
        :param pulumi.Input[str] backup_management_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'AzureStorage'.
        :param pulumi.Input[int] protected_items_count: Number of items associated with this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuard Operation Requests
        :param pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']] retention_policy: Retention policy with the details on backup copy retention ranges.
        :param pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']] schedule_policy: Backup schedule specified as part of backup policy.
        :param pulumi.Input[str] time_zone: TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
        :param pulumi.Input[Union[str, 'WorkloadType']] work_load_type: Type of workload for the backup management
        """
        pulumi.set(__self__, "backup_management_type", 'AzureStorage')
        if protected_items_count is not None:
            pulumi.set(__self__, "protected_items_count", protected_items_count)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)
        if schedule_policy is not None:
            pulumi.set(__self__, "schedule_policy", schedule_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if work_load_type is not None:
            pulumi.set(__self__, "work_load_type", work_load_type)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> pulumi.Input[str]:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'AzureStorage'.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="protectedItemsCount")
    def protected_items_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of items associated with this policy.
        """
        return pulumi.get(self, "protected_items_count")

    @protected_items_count.setter
    def protected_items_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protected_items_count", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuard Operation Requests
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]]:
        """
        Retention policy with the details on backup copy retention ranges.
        """
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]]):
        pulumi.set(self, "retention_policy", value)

    @property
    @pulumi.getter(name="schedulePolicy")
    def schedule_policy(self) -> Optional[pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']]]:
        """
        Backup schedule specified as part of backup policy.
        """
        return pulumi.get(self, "schedule_policy")

    @schedule_policy.setter
    def schedule_policy(self, value: Optional[pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']]]):
        pulumi.set(self, "schedule_policy", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="workLoadType")
    def work_load_type(self) -> Optional[pulumi.Input[Union[str, 'WorkloadType']]]:
        """
        Type of workload for the backup management
        """
        return pulumi.get(self, "work_load_type")

    @work_load_type.setter
    def work_load_type(self, value: Optional[pulumi.Input[Union[str, 'WorkloadType']]]):
        pulumi.set(self, "work_load_type", value)


@pulumi.input_type
class AzureFileshareProtectedItemExtendedInfoArgs:
    def __init__(__self__, *,
                 oldest_recovery_point: Optional[pulumi.Input[str]] = None,
                 policy_state: Optional[pulumi.Input[str]] = None,
                 recovery_point_count: Optional[pulumi.Input[int]] = None):
        """
        Additional information about Azure File Share backup item.
        :param pulumi.Input[str] oldest_recovery_point: The oldest backup copy available for this item in the service.
        :param pulumi.Input[str] policy_state: Indicates consistency of policy object and policy applied to this backup item.
        :param pulumi.Input[int] recovery_point_count: Number of available backup copies associated with this backup item.
        """
        if oldest_recovery_point is not None:
            pulumi.set(__self__, "oldest_recovery_point", oldest_recovery_point)
        if policy_state is not None:
            pulumi.set(__self__, "policy_state", policy_state)
        if recovery_point_count is not None:
            pulumi.set(__self__, "recovery_point_count", recovery_point_count)

    @property
    @pulumi.getter(name="oldestRecoveryPoint")
    def oldest_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        The oldest backup copy available for this item in the service.
        """
        return pulumi.get(self, "oldest_recovery_point")

    @oldest_recovery_point.setter
    def oldest_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oldest_recovery_point", value)

    @property
    @pulumi.getter(name="policyState")
    def policy_state(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates consistency of policy object and policy applied to this backup item.
        """
        return pulumi.get(self, "policy_state")

    @policy_state.setter
    def policy_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_state", value)

    @property
    @pulumi.getter(name="recoveryPointCount")
    def recovery_point_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of available backup copies associated with this backup item.
        """
        return pulumi.get(self, "recovery_point_count")

    @recovery_point_count.setter
    def recovery_point_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_count", value)


@pulumi.input_type
class AzureFileshareProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 extended_info: Optional[pulumi.Input['AzureFileshareProtectedItemExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 is_archive_enabled: Optional[pulumi.Input[bool]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 kpis_healths: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]] = None,
                 last_backup_status: Optional[pulumi.Input[str]] = None,
                 last_backup_time: Optional[pulumi.Input[str]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionState']]] = None,
                 protection_status: Optional[pulumi.Input[str]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'DataSourceType']]] = None):
        """
        Azure File Share workload-specific backup item.
        :param pulumi.Input[str] protected_item_type: backup item type.
               Expected value is 'AzureFileShareProtectedItem'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input['AzureFileshareProtectedItemExtendedInfoArgs'] extended_info: Additional information with this backup item.
        :param pulumi.Input[str] friendly_name: Friendly name of the fileshare represented by this backup item.
        :param pulumi.Input[bool] is_archive_enabled: Flag to identify whether datasource is protected in archive
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]] kpis_healths: Health details of different KPIs
        :param pulumi.Input[str] last_backup_status: Last backup operation status. Possible values: Healthy, Unhealthy.
        :param pulumi.Input[str] last_backup_time: Timestamp of the last backup operation on this backup item.
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] policy_name: Name of the policy used for protection
        :param pulumi.Input[Union[str, 'ProtectionState']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] protection_status: Backup status of this backup item.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuardOperationRequests on which LAC check will be performed
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[Union[str, 'DataSourceType']] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", 'AzureFileShareProtectedItem')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if is_archive_enabled is not None:
            pulumi.set(__self__, "is_archive_enabled", is_archive_enabled)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if kpis_healths is not None:
            pulumi.set(__self__, "kpis_healths", kpis_healths)
        if last_backup_status is not None:
            pulumi.set(__self__, "last_backup_status", last_backup_status)
        if last_backup_time is not None:
            pulumi.set(__self__, "last_backup_time", last_backup_time)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if protection_status is not None:
            pulumi.set(__self__, "protection_status", protection_status)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        Expected value is 'AzureFileShareProtectedItem'.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['AzureFileshareProtectedItemExtendedInfoArgs']]:
        """
        Additional information with this backup item.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['AzureFileshareProtectedItemExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the fileshare represented by this backup item.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="isArchiveEnabled")
    def is_archive_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether datasource is protected in archive
        """
        return pulumi.get(self, "is_archive_enabled")

    @is_archive_enabled.setter
    def is_archive_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archive_enabled", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="kpisHealths")
    def kpis_healths(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]:
        """
        Health details of different KPIs
        """
        return pulumi.get(self, "kpis_healths")

    @kpis_healths.setter
    def kpis_healths(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]):
        pulumi.set(self, "kpis_healths", value)

    @property
    @pulumi.getter(name="lastBackupStatus")
    def last_backup_status(self) -> Optional[pulumi.Input[str]]:
        """
        Last backup operation status. Possible values: Healthy, Unhealthy.
        """
        return pulumi.get(self, "last_backup_status")

    @last_backup_status.setter
    def last_backup_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_status", value)

    @property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the last backup operation on this backup item.
        """
        return pulumi.get(self, "last_backup_time")

    @last_backup_time.setter
    def last_backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_time", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the policy used for protection
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionState']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionState']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> Optional[pulumi.Input[str]]:
        """
        Backup status of this backup item.
        """
        return pulumi.get(self, "protection_status")

    @protection_status.setter
    def protection_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_status", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuardOperationRequests on which LAC check will be performed
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'DataSourceType']]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'DataSourceType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class AzureIaaSClassicComputeVMContainerArgs:
    def __init__(__self__, *,
                 container_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 protectable_object_type: Optional[pulumi.Input[str]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None,
                 virtual_machine_version: Optional[pulumi.Input[str]] = None):
        """
        IaaS VM workload-specific backup item representing a classic virtual machine.
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
               Expected value is 'Microsoft.ClassicCompute/virtualMachines'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the container.
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[str] protectable_object_type: Type of the protectable object associated with this container
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        :param pulumi.Input[str] resource_group: Resource group name of Recovery Services Vault.
        :param pulumi.Input[str] virtual_machine_id: Fully qualified ARM url of the virtual machine represented by this Azure IaaS VM container.
        :param pulumi.Input[str] virtual_machine_version: Specifies whether the container represents a Classic or an Azure Resource Manager VM.
        """
        pulumi.set(__self__, "container_type", 'Microsoft.ClassicCompute/virtualMachines')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if protectable_object_type is not None:
            pulumi.set(__self__, "protectable_object_type", protectable_object_type)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if virtual_machine_id is not None:
            pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)
        if virtual_machine_version is not None:
            pulumi.set(__self__, "virtual_machine_version", virtual_machine_version)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Input[str]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        Expected value is 'Microsoft.ClassicCompute/virtualMachines'.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="protectableObjectType")
    def protectable_object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the protectable object associated with this container
        """
        return pulumi.get(self, "protectable_object_type")

    @protectable_object_type.setter
    def protectable_object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_object_type", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Resource group name of Recovery Services Vault.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified ARM url of the virtual machine represented by this Azure IaaS VM container.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_id", value)

    @property
    @pulumi.getter(name="virtualMachineVersion")
    def virtual_machine_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the container represents a Classic or an Azure Resource Manager VM.
        """
        return pulumi.get(self, "virtual_machine_version")

    @virtual_machine_version.setter
    def virtual_machine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_version", value)


@pulumi.input_type
class AzureIaaSClassicComputeVMProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 extended_info: Optional[pulumi.Input['AzureIaaSVMProtectedItemExtendedInfoArgs']] = None,
                 extended_properties: Optional[pulumi.Input['ExtendedPropertiesArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[Union[str, 'HealthStatus']]] = None,
                 is_archive_enabled: Optional[pulumi.Input[bool]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 kpis_healths: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]] = None,
                 last_backup_status: Optional[pulumi.Input[str]] = None,
                 last_backup_time: Optional[pulumi.Input[str]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 protected_item_data_id: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionState']]] = None,
                 protection_status: Optional[pulumi.Input[str]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'DataSourceType']]] = None):
        """
        IaaS VM workload-specific backup item representing the Classic Compute VM.
        :param pulumi.Input[str] protected_item_type: backup item type.
               Expected value is 'Microsoft.ClassicCompute/virtualMachines'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input['AzureIaaSVMProtectedItemExtendedInfoArgs'] extended_info: Additional information for this backup item.
        :param pulumi.Input['ExtendedPropertiesArgs'] extended_properties: Extended Properties for Azure IaasVM Backup.
        :param pulumi.Input[str] friendly_name: Friendly name of the VM represented by this backup item.
        :param pulumi.Input[Union[str, 'HealthStatus']] health_status: Health status of protected item.
        :param pulumi.Input[bool] is_archive_enabled: Flag to identify whether datasource is protected in archive
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]] kpis_healths: Health details of different KPIs
        :param pulumi.Input[str] last_backup_status: Last backup operation status.
        :param pulumi.Input[str] last_backup_time: Timestamp of the last backup operation on this backup item.
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] policy_name: Name of the policy used for protection
        :param pulumi.Input[str] protected_item_data_id: Data ID of the protected item.
        :param pulumi.Input[Union[str, 'ProtectionState']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] protection_status: Backup status of this backup item.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuardOperationRequests on which LAC check will be performed
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[str] virtual_machine_id: Fully qualified ARM ID of the virtual machine represented by this item.
        :param pulumi.Input[Union[str, 'DataSourceType']] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", 'Microsoft.ClassicCompute/virtualMachines')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if extended_properties is not None:
            pulumi.set(__self__, "extended_properties", extended_properties)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if is_archive_enabled is not None:
            pulumi.set(__self__, "is_archive_enabled", is_archive_enabled)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if kpis_healths is not None:
            pulumi.set(__self__, "kpis_healths", kpis_healths)
        if last_backup_status is not None:
            pulumi.set(__self__, "last_backup_status", last_backup_status)
        if last_backup_time is not None:
            pulumi.set(__self__, "last_backup_time", last_backup_time)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if protected_item_data_id is not None:
            pulumi.set(__self__, "protected_item_data_id", protected_item_data_id)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if protection_status is not None:
            pulumi.set(__self__, "protection_status", protection_status)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if virtual_machine_id is not None:
            pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        Expected value is 'Microsoft.ClassicCompute/virtualMachines'.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['AzureIaaSVMProtectedItemExtendedInfoArgs']]:
        """
        Additional information for this backup item.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['AzureIaaSVMProtectedItemExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="extendedProperties")
    def extended_properties(self) -> Optional[pulumi.Input['ExtendedPropertiesArgs']]:
        """
        Extended Properties for Azure IaasVM Backup.
        """
        return pulumi.get(self, "extended_properties")

    @extended_properties.setter
    def extended_properties(self, value: Optional[pulumi.Input['ExtendedPropertiesArgs']]):
        pulumi.set(self, "extended_properties", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the VM represented by this backup item.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[Union[str, 'HealthStatus']]]:
        """
        Health status of protected item.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[Union[str, 'HealthStatus']]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="isArchiveEnabled")
    def is_archive_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether datasource is protected in archive
        """
        return pulumi.get(self, "is_archive_enabled")

    @is_archive_enabled.setter
    def is_archive_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archive_enabled", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="kpisHealths")
    def kpis_healths(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]:
        """
        Health details of different KPIs
        """
        return pulumi.get(self, "kpis_healths")

    @kpis_healths.setter
    def kpis_healths(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]):
        pulumi.set(self, "kpis_healths", value)

    @property
    @pulumi.getter(name="lastBackupStatus")
    def last_backup_status(self) -> Optional[pulumi.Input[str]]:
        """
        Last backup operation status.
        """
        return pulumi.get(self, "last_backup_status")

    @last_backup_status.setter
    def last_backup_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_status", value)

    @property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the last backup operation on this backup item.
        """
        return pulumi.get(self, "last_backup_time")

    @last_backup_time.setter
    def last_backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_time", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the policy used for protection
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="protectedItemDataId")
    def protected_item_data_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data ID of the protected item.
        """
        return pulumi.get(self, "protected_item_data_id")

    @protected_item_data_id.setter
    def protected_item_data_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protected_item_data_id", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionState']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionState']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> Optional[pulumi.Input[str]]:
        """
        Backup status of this backup item.
        """
        return pulumi.get(self, "protection_status")

    @protection_status.setter
    def protection_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_status", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuardOperationRequests on which LAC check will be performed
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified ARM ID of the virtual machine represented by this item.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'DataSourceType']]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'DataSourceType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class AzureIaaSComputeVMContainerArgs:
    def __init__(__self__, *,
                 container_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 protectable_object_type: Optional[pulumi.Input[str]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None,
                 virtual_machine_version: Optional[pulumi.Input[str]] = None):
        """
        IaaS VM workload-specific backup item representing an Azure Resource Manager virtual machine.
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
               Expected value is 'Microsoft.Compute/virtualMachines'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the container.
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[str] protectable_object_type: Type of the protectable object associated with this container
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        :param pulumi.Input[str] resource_group: Resource group name of Recovery Services Vault.
        :param pulumi.Input[str] virtual_machine_id: Fully qualified ARM url of the virtual machine represented by this Azure IaaS VM container.
        :param pulumi.Input[str] virtual_machine_version: Specifies whether the container represents a Classic or an Azure Resource Manager VM.
        """
        pulumi.set(__self__, "container_type", 'Microsoft.Compute/virtualMachines')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if protectable_object_type is not None:
            pulumi.set(__self__, "protectable_object_type", protectable_object_type)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if virtual_machine_id is not None:
            pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)
        if virtual_machine_version is not None:
            pulumi.set(__self__, "virtual_machine_version", virtual_machine_version)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Input[str]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        Expected value is 'Microsoft.Compute/virtualMachines'.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="protectableObjectType")
    def protectable_object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the protectable object associated with this container
        """
        return pulumi.get(self, "protectable_object_type")

    @protectable_object_type.setter
    def protectable_object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_object_type", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Resource group name of Recovery Services Vault.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified ARM url of the virtual machine represented by this Azure IaaS VM container.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_id", value)

    @property
    @pulumi.getter(name="virtualMachineVersion")
    def virtual_machine_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the container represents a Classic or an Azure Resource Manager VM.
        """
        return pulumi.get(self, "virtual_machine_version")

    @virtual_machine_version.setter
    def virtual_machine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_version", value)


@pulumi.input_type
class AzureIaaSComputeVMProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 extended_info: Optional[pulumi.Input['AzureIaaSVMProtectedItemExtendedInfoArgs']] = None,
                 extended_properties: Optional[pulumi.Input['ExtendedPropertiesArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[Union[str, 'HealthStatus']]] = None,
                 is_archive_enabled: Optional[pulumi.Input[bool]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 kpis_healths: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]] = None,
                 last_backup_status: Optional[pulumi.Input[str]] = None,
                 last_backup_time: Optional[pulumi.Input[str]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 protected_item_data_id: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionState']]] = None,
                 protection_status: Optional[pulumi.Input[str]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'DataSourceType']]] = None):
        """
        IaaS VM workload-specific backup item representing the Azure Resource Manager VM.
        :param pulumi.Input[str] protected_item_type: backup item type.
               Expected value is 'Microsoft.Compute/virtualMachines'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input['AzureIaaSVMProtectedItemExtendedInfoArgs'] extended_info: Additional information for this backup item.
        :param pulumi.Input['ExtendedPropertiesArgs'] extended_properties: Extended Properties for Azure IaasVM Backup.
        :param pulumi.Input[str] friendly_name: Friendly name of the VM represented by this backup item.
        :param pulumi.Input[Union[str, 'HealthStatus']] health_status: Health status of protected item.
        :param pulumi.Input[bool] is_archive_enabled: Flag to identify whether datasource is protected in archive
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]] kpis_healths: Health details of different KPIs
        :param pulumi.Input[str] last_backup_status: Last backup operation status.
        :param pulumi.Input[str] last_backup_time: Timestamp of the last backup operation on this backup item.
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] policy_name: Name of the policy used for protection
        :param pulumi.Input[str] protected_item_data_id: Data ID of the protected item.
        :param pulumi.Input[Union[str, 'ProtectionState']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] protection_status: Backup status of this backup item.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuardOperationRequests on which LAC check will be performed
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[str] virtual_machine_id: Fully qualified ARM ID of the virtual machine represented by this item.
        :param pulumi.Input[Union[str, 'DataSourceType']] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", 'Microsoft.Compute/virtualMachines')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if extended_properties is not None:
            pulumi.set(__self__, "extended_properties", extended_properties)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if is_archive_enabled is not None:
            pulumi.set(__self__, "is_archive_enabled", is_archive_enabled)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if kpis_healths is not None:
            pulumi.set(__self__, "kpis_healths", kpis_healths)
        if last_backup_status is not None:
            pulumi.set(__self__, "last_backup_status", last_backup_status)
        if last_backup_time is not None:
            pulumi.set(__self__, "last_backup_time", last_backup_time)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if protected_item_data_id is not None:
            pulumi.set(__self__, "protected_item_data_id", protected_item_data_id)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if protection_status is not None:
            pulumi.set(__self__, "protection_status", protection_status)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if virtual_machine_id is not None:
            pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        Expected value is 'Microsoft.Compute/virtualMachines'.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['AzureIaaSVMProtectedItemExtendedInfoArgs']]:
        """
        Additional information for this backup item.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['AzureIaaSVMProtectedItemExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="extendedProperties")
    def extended_properties(self) -> Optional[pulumi.Input['ExtendedPropertiesArgs']]:
        """
        Extended Properties for Azure IaasVM Backup.
        """
        return pulumi.get(self, "extended_properties")

    @extended_properties.setter
    def extended_properties(self, value: Optional[pulumi.Input['ExtendedPropertiesArgs']]):
        pulumi.set(self, "extended_properties", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the VM represented by this backup item.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[Union[str, 'HealthStatus']]]:
        """
        Health status of protected item.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[Union[str, 'HealthStatus']]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="isArchiveEnabled")
    def is_archive_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether datasource is protected in archive
        """
        return pulumi.get(self, "is_archive_enabled")

    @is_archive_enabled.setter
    def is_archive_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archive_enabled", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="kpisHealths")
    def kpis_healths(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]:
        """
        Health details of different KPIs
        """
        return pulumi.get(self, "kpis_healths")

    @kpis_healths.setter
    def kpis_healths(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]):
        pulumi.set(self, "kpis_healths", value)

    @property
    @pulumi.getter(name="lastBackupStatus")
    def last_backup_status(self) -> Optional[pulumi.Input[str]]:
        """
        Last backup operation status.
        """
        return pulumi.get(self, "last_backup_status")

    @last_backup_status.setter
    def last_backup_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_status", value)

    @property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the last backup operation on this backup item.
        """
        return pulumi.get(self, "last_backup_time")

    @last_backup_time.setter
    def last_backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_time", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the policy used for protection
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="protectedItemDataId")
    def protected_item_data_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data ID of the protected item.
        """
        return pulumi.get(self, "protected_item_data_id")

    @protected_item_data_id.setter
    def protected_item_data_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protected_item_data_id", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionState']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionState']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> Optional[pulumi.Input[str]]:
        """
        Backup status of this backup item.
        """
        return pulumi.get(self, "protection_status")

    @protection_status.setter
    def protection_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_status", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuardOperationRequests on which LAC check will be performed
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified ARM ID of the virtual machine represented by this item.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'DataSourceType']]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'DataSourceType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class AzureIaaSVMProtectedItemExtendedInfoArgs:
    def __init__(__self__, *,
                 newest_recovery_point_in_archive: Optional[pulumi.Input[str]] = None,
                 oldest_recovery_point: Optional[pulumi.Input[str]] = None,
                 oldest_recovery_point_in_archive: Optional[pulumi.Input[str]] = None,
                 oldest_recovery_point_in_vault: Optional[pulumi.Input[str]] = None,
                 policy_inconsistent: Optional[pulumi.Input[bool]] = None,
                 recovery_point_count: Optional[pulumi.Input[int]] = None):
        """
        Additional information on Azure IaaS VM specific backup item.
        :param pulumi.Input[str] newest_recovery_point_in_archive: The latest backup copy available for this backup item in archive tier
        :param pulumi.Input[str] oldest_recovery_point: The oldest backup copy available for this backup item across all tiers.
        :param pulumi.Input[str] oldest_recovery_point_in_archive: The oldest backup copy available for this backup item in archive tier
        :param pulumi.Input[str] oldest_recovery_point_in_vault: The oldest backup copy available for this backup item in vault tier
        :param pulumi.Input[bool] policy_inconsistent: Specifies if backup policy associated with the backup item is inconsistent.
        :param pulumi.Input[int] recovery_point_count: Number of backup copies available for this backup item.
        """
        if newest_recovery_point_in_archive is not None:
            pulumi.set(__self__, "newest_recovery_point_in_archive", newest_recovery_point_in_archive)
        if oldest_recovery_point is not None:
            pulumi.set(__self__, "oldest_recovery_point", oldest_recovery_point)
        if oldest_recovery_point_in_archive is not None:
            pulumi.set(__self__, "oldest_recovery_point_in_archive", oldest_recovery_point_in_archive)
        if oldest_recovery_point_in_vault is not None:
            pulumi.set(__self__, "oldest_recovery_point_in_vault", oldest_recovery_point_in_vault)
        if policy_inconsistent is not None:
            pulumi.set(__self__, "policy_inconsistent", policy_inconsistent)
        if recovery_point_count is not None:
            pulumi.set(__self__, "recovery_point_count", recovery_point_count)

    @property
    @pulumi.getter(name="newestRecoveryPointInArchive")
    def newest_recovery_point_in_archive(self) -> Optional[pulumi.Input[str]]:
        """
        The latest backup copy available for this backup item in archive tier
        """
        return pulumi.get(self, "newest_recovery_point_in_archive")

    @newest_recovery_point_in_archive.setter
    def newest_recovery_point_in_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "newest_recovery_point_in_archive", value)

    @property
    @pulumi.getter(name="oldestRecoveryPoint")
    def oldest_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        The oldest backup copy available for this backup item across all tiers.
        """
        return pulumi.get(self, "oldest_recovery_point")

    @oldest_recovery_point.setter
    def oldest_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oldest_recovery_point", value)

    @property
    @pulumi.getter(name="oldestRecoveryPointInArchive")
    def oldest_recovery_point_in_archive(self) -> Optional[pulumi.Input[str]]:
        """
        The oldest backup copy available for this backup item in archive tier
        """
        return pulumi.get(self, "oldest_recovery_point_in_archive")

    @oldest_recovery_point_in_archive.setter
    def oldest_recovery_point_in_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oldest_recovery_point_in_archive", value)

    @property
    @pulumi.getter(name="oldestRecoveryPointInVault")
    def oldest_recovery_point_in_vault(self) -> Optional[pulumi.Input[str]]:
        """
        The oldest backup copy available for this backup item in vault tier
        """
        return pulumi.get(self, "oldest_recovery_point_in_vault")

    @oldest_recovery_point_in_vault.setter
    def oldest_recovery_point_in_vault(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oldest_recovery_point_in_vault", value)

    @property
    @pulumi.getter(name="policyInconsistent")
    def policy_inconsistent(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if backup policy associated with the backup item is inconsistent.
        """
        return pulumi.get(self, "policy_inconsistent")

    @policy_inconsistent.setter
    def policy_inconsistent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "policy_inconsistent", value)

    @property
    @pulumi.getter(name="recoveryPointCount")
    def recovery_point_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of backup copies available for this backup item.
        """
        return pulumi.get(self, "recovery_point_count")

    @recovery_point_count.setter
    def recovery_point_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_count", value)


@pulumi.input_type
class AzureIaaSVMProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 extended_info: Optional[pulumi.Input['AzureIaaSVMProtectedItemExtendedInfoArgs']] = None,
                 extended_properties: Optional[pulumi.Input['ExtendedPropertiesArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[Union[str, 'HealthStatus']]] = None,
                 is_archive_enabled: Optional[pulumi.Input[bool]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 kpis_healths: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]] = None,
                 last_backup_status: Optional[pulumi.Input[str]] = None,
                 last_backup_time: Optional[pulumi.Input[str]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 protected_item_data_id: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionState']]] = None,
                 protection_status: Optional[pulumi.Input[str]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'DataSourceType']]] = None):
        """
        IaaS VM workload-specific backup item.
        :param pulumi.Input[str] protected_item_type: backup item type.
               Expected value is 'AzureIaaSVMProtectedItem'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input['AzureIaaSVMProtectedItemExtendedInfoArgs'] extended_info: Additional information for this backup item.
        :param pulumi.Input['ExtendedPropertiesArgs'] extended_properties: Extended Properties for Azure IaasVM Backup.
        :param pulumi.Input[str] friendly_name: Friendly name of the VM represented by this backup item.
        :param pulumi.Input[Union[str, 'HealthStatus']] health_status: Health status of protected item.
        :param pulumi.Input[bool] is_archive_enabled: Flag to identify whether datasource is protected in archive
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]] kpis_healths: Health details of different KPIs
        :param pulumi.Input[str] last_backup_status: Last backup operation status.
        :param pulumi.Input[str] last_backup_time: Timestamp of the last backup operation on this backup item.
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] policy_name: Name of the policy used for protection
        :param pulumi.Input[str] protected_item_data_id: Data ID of the protected item.
        :param pulumi.Input[Union[str, 'ProtectionState']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] protection_status: Backup status of this backup item.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuardOperationRequests on which LAC check will be performed
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[str] virtual_machine_id: Fully qualified ARM ID of the virtual machine represented by this item.
        :param pulumi.Input[Union[str, 'DataSourceType']] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", 'AzureIaaSVMProtectedItem')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if extended_properties is not None:
            pulumi.set(__self__, "extended_properties", extended_properties)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if is_archive_enabled is not None:
            pulumi.set(__self__, "is_archive_enabled", is_archive_enabled)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if kpis_healths is not None:
            pulumi.set(__self__, "kpis_healths", kpis_healths)
        if last_backup_status is not None:
            pulumi.set(__self__, "last_backup_status", last_backup_status)
        if last_backup_time is not None:
            pulumi.set(__self__, "last_backup_time", last_backup_time)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if protected_item_data_id is not None:
            pulumi.set(__self__, "protected_item_data_id", protected_item_data_id)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if protection_status is not None:
            pulumi.set(__self__, "protection_status", protection_status)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if virtual_machine_id is not None:
            pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        Expected value is 'AzureIaaSVMProtectedItem'.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['AzureIaaSVMProtectedItemExtendedInfoArgs']]:
        """
        Additional information for this backup item.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['AzureIaaSVMProtectedItemExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="extendedProperties")
    def extended_properties(self) -> Optional[pulumi.Input['ExtendedPropertiesArgs']]:
        """
        Extended Properties for Azure IaasVM Backup.
        """
        return pulumi.get(self, "extended_properties")

    @extended_properties.setter
    def extended_properties(self, value: Optional[pulumi.Input['ExtendedPropertiesArgs']]):
        pulumi.set(self, "extended_properties", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the VM represented by this backup item.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[Union[str, 'HealthStatus']]]:
        """
        Health status of protected item.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[Union[str, 'HealthStatus']]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="isArchiveEnabled")
    def is_archive_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether datasource is protected in archive
        """
        return pulumi.get(self, "is_archive_enabled")

    @is_archive_enabled.setter
    def is_archive_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archive_enabled", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="kpisHealths")
    def kpis_healths(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]:
        """
        Health details of different KPIs
        """
        return pulumi.get(self, "kpis_healths")

    @kpis_healths.setter
    def kpis_healths(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]):
        pulumi.set(self, "kpis_healths", value)

    @property
    @pulumi.getter(name="lastBackupStatus")
    def last_backup_status(self) -> Optional[pulumi.Input[str]]:
        """
        Last backup operation status.
        """
        return pulumi.get(self, "last_backup_status")

    @last_backup_status.setter
    def last_backup_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_status", value)

    @property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the last backup operation on this backup item.
        """
        return pulumi.get(self, "last_backup_time")

    @last_backup_time.setter
    def last_backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_time", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the policy used for protection
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="protectedItemDataId")
    def protected_item_data_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data ID of the protected item.
        """
        return pulumi.get(self, "protected_item_data_id")

    @protected_item_data_id.setter
    def protected_item_data_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protected_item_data_id", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionState']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionState']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> Optional[pulumi.Input[str]]:
        """
        Backup status of this backup item.
        """
        return pulumi.get(self, "protection_status")

    @protection_status.setter
    def protection_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_status", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuardOperationRequests on which LAC check will be performed
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified ARM ID of the virtual machine represented by this item.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'DataSourceType']]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'DataSourceType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class AzureIaaSVMProtectionPolicyArgs:
    def __init__(__self__, *,
                 backup_management_type: pulumi.Input[str],
                 instant_rp_details: Optional[pulumi.Input['InstantRPAdditionalDetailsArgs']] = None,
                 instant_rp_retention_range_in_days: Optional[pulumi.Input[int]] = None,
                 policy_type: Optional[pulumi.Input[Union[str, 'IAASVMPolicyType']]] = None,
                 protected_items_count: Optional[pulumi.Input[int]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retention_policy: Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]] = None,
                 schedule_policy: Optional[pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']]] = None,
                 tiering_policy: Optional[pulumi.Input[Mapping[str, pulumi.Input['TieringPolicyArgs']]]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        """
        IaaS VM workload-specific backup policy.
        :param pulumi.Input[str] backup_management_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'AzureIaasVM'.
        :param pulumi.Input[int] instant_rp_retention_range_in_days: Instant RP retention policy range in days
        :param pulumi.Input[int] protected_items_count: Number of items associated with this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuard Operation Requests
        :param pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']] retention_policy: Retention policy with the details on backup copy retention ranges.
        :param pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']] schedule_policy: Backup schedule specified as part of backup policy.
        :param pulumi.Input[Mapping[str, pulumi.Input['TieringPolicyArgs']]] tiering_policy: Tiering policy to automatically move RPs to another tier
               Key is Target Tier, defined in RecoveryPointTierType enum.
               Tiering policy specifies the criteria to move RP to the target tier.
        :param pulumi.Input[str] time_zone: TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
        """
        pulumi.set(__self__, "backup_management_type", 'AzureIaasVM')
        if instant_rp_details is not None:
            pulumi.set(__self__, "instant_rp_details", instant_rp_details)
        if instant_rp_retention_range_in_days is not None:
            pulumi.set(__self__, "instant_rp_retention_range_in_days", instant_rp_retention_range_in_days)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if protected_items_count is not None:
            pulumi.set(__self__, "protected_items_count", protected_items_count)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)
        if schedule_policy is not None:
            pulumi.set(__self__, "schedule_policy", schedule_policy)
        if tiering_policy is not None:
            pulumi.set(__self__, "tiering_policy", tiering_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> pulumi.Input[str]:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'AzureIaasVM'.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="instantRPDetails")
    def instant_rp_details(self) -> Optional[pulumi.Input['InstantRPAdditionalDetailsArgs']]:
        return pulumi.get(self, "instant_rp_details")

    @instant_rp_details.setter
    def instant_rp_details(self, value: Optional[pulumi.Input['InstantRPAdditionalDetailsArgs']]):
        pulumi.set(self, "instant_rp_details", value)

    @property
    @pulumi.getter(name="instantRpRetentionRangeInDays")
    def instant_rp_retention_range_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Instant RP retention policy range in days
        """
        return pulumi.get(self, "instant_rp_retention_range_in_days")

    @instant_rp_retention_range_in_days.setter
    def instant_rp_retention_range_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instant_rp_retention_range_in_days", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[Union[str, 'IAASVMPolicyType']]]:
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[Union[str, 'IAASVMPolicyType']]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="protectedItemsCount")
    def protected_items_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of items associated with this policy.
        """
        return pulumi.get(self, "protected_items_count")

    @protected_items_count.setter
    def protected_items_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protected_items_count", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuard Operation Requests
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]]:
        """
        Retention policy with the details on backup copy retention ranges.
        """
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]]):
        pulumi.set(self, "retention_policy", value)

    @property
    @pulumi.getter(name="schedulePolicy")
    def schedule_policy(self) -> Optional[pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']]]:
        """
        Backup schedule specified as part of backup policy.
        """
        return pulumi.get(self, "schedule_policy")

    @schedule_policy.setter
    def schedule_policy(self, value: Optional[pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']]]):
        pulumi.set(self, "schedule_policy", value)

    @property
    @pulumi.getter(name="tieringPolicy")
    def tiering_policy(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['TieringPolicyArgs']]]]:
        """
        Tiering policy to automatically move RPs to another tier
        Key is Target Tier, defined in RecoveryPointTierType enum.
        Tiering policy specifies the criteria to move RP to the target tier.
        """
        return pulumi.get(self, "tiering_policy")

    @tiering_policy.setter
    def tiering_policy(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['TieringPolicyArgs']]]]):
        pulumi.set(self, "tiering_policy", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class AzureRecoveryServiceVaultProtectionIntentArgs:
    def __init__(__self__, *,
                 protection_intent_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 item_id: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionStatus']]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None):
        """
        Azure Recovery Services Vault specific protection intent item.
        :param pulumi.Input[str] protection_intent_item_type: backup protectionIntent type.
               Expected value is 'RecoveryServiceVaultItem'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] item_id: ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[Union[str, 'ProtectionStatus']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        """
        pulumi.set(__self__, "protection_intent_item_type", 'RecoveryServiceVaultItem')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if item_id is not None:
            pulumi.set(__self__, "item_id", item_id)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)

    @property
    @pulumi.getter(name="protectionIntentItemType")
    def protection_intent_item_type(self) -> pulumi.Input[str]:
        """
        backup protectionIntent type.
        Expected value is 'RecoveryServiceVaultItem'.
        """
        return pulumi.get(self, "protection_intent_item_type")

    @protection_intent_item_type.setter
    def protection_intent_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protection_intent_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
        """
        return pulumi.get(self, "item_id")

    @item_id.setter
    def item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "item_id", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionStatus']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionStatus']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)


@pulumi.input_type
class AzureResourceProtectionIntentArgs:
    def __init__(__self__, *,
                 protection_intent_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 item_id: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionStatus']]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None):
        """
        IaaS VM specific backup protection intent item.
        :param pulumi.Input[str] protection_intent_item_type: backup protectionIntent type.
               Expected value is 'AzureResourceItem'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] friendly_name: Friendly name of the VM represented by this backup item.
        :param pulumi.Input[str] item_id: ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[Union[str, 'ProtectionStatus']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        """
        pulumi.set(__self__, "protection_intent_item_type", 'AzureResourceItem')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if item_id is not None:
            pulumi.set(__self__, "item_id", item_id)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)

    @property
    @pulumi.getter(name="protectionIntentItemType")
    def protection_intent_item_type(self) -> pulumi.Input[str]:
        """
        backup protectionIntent type.
        Expected value is 'AzureResourceItem'.
        """
        return pulumi.get(self, "protection_intent_item_type")

    @protection_intent_item_type.setter
    def protection_intent_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protection_intent_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the VM represented by this backup item.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
        """
        return pulumi.get(self, "item_id")

    @item_id.setter
    def item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "item_id", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionStatus']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionStatus']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)


@pulumi.input_type
class AzureSQLAGWorkloadContainerProtectionContainerArgs:
    def __init__(__self__, *,
                 container_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 extended_info: Optional[pulumi.Input['AzureWorkloadContainerExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 last_updated_time: Optional[pulumi.Input[str]] = None,
                 operation_type: Optional[pulumi.Input[Union[str, 'OperationType']]] = None,
                 protectable_object_type: Optional[pulumi.Input[str]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'WorkloadType']]] = None):
        """
        Container for SQL workloads under SQL Availability Group.
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
               Expected value is 'SQLAGWorkLoadContainer'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the container.
        :param pulumi.Input['AzureWorkloadContainerExtendedInfoArgs'] extended_info: Additional details of a workload container.
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[str] last_updated_time: Time stamp when this container was updated.
        :param pulumi.Input[Union[str, 'OperationType']] operation_type: Re-Do Operation
        :param pulumi.Input[str] protectable_object_type: Type of the protectable object associated with this container
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        :param pulumi.Input[str] source_resource_id: ARM ID of the virtual machine represented by this Azure Workload Container
        :param pulumi.Input[Union[str, 'WorkloadType']] workload_type: Workload type for which registration was sent.
        """
        pulumi.set(__self__, "container_type", 'SQLAGWorkLoadContainer')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if last_updated_time is not None:
            pulumi.set(__self__, "last_updated_time", last_updated_time)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if protectable_object_type is not None:
            pulumi.set(__self__, "protectable_object_type", protectable_object_type)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Input[str]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        Expected value is 'SQLAGWorkLoadContainer'.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['AzureWorkloadContainerExtendedInfoArgs']]:
        """
        Additional details of a workload container.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['AzureWorkloadContainerExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="lastUpdatedTime")
    def last_updated_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time stamp when this container was updated.
        """
        return pulumi.get(self, "last_updated_time")

    @last_updated_time.setter
    def last_updated_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated_time", value)

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[pulumi.Input[Union[str, 'OperationType']]]:
        """
        Re-Do Operation
        """
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: Optional[pulumi.Input[Union[str, 'OperationType']]]):
        pulumi.set(self, "operation_type", value)

    @property
    @pulumi.getter(name="protectableObjectType")
    def protectable_object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the protectable object associated with this container
        """
        return pulumi.get(self, "protectable_object_type")

    @protectable_object_type.setter
    def protectable_object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_object_type", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the virtual machine represented by this Azure Workload Container
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'WorkloadType']]]:
        """
        Workload type for which registration was sent.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'WorkloadType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class AzureSqlContainerArgs:
    def __init__(__self__, *,
                 container_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 protectable_object_type: Optional[pulumi.Input[str]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None):
        """
        Azure Sql workload-specific container.
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
               Expected value is 'AzureSqlContainer'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the container.
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[str] protectable_object_type: Type of the protectable object associated with this container
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        """
        pulumi.set(__self__, "container_type", 'AzureSqlContainer')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if protectable_object_type is not None:
            pulumi.set(__self__, "protectable_object_type", protectable_object_type)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Input[str]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        Expected value is 'AzureSqlContainer'.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="protectableObjectType")
    def protectable_object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the protectable object associated with this container
        """
        return pulumi.get(self, "protectable_object_type")

    @protectable_object_type.setter
    def protectable_object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_object_type", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)


@pulumi.input_type
class AzureSqlProtectedItemExtendedInfoArgs:
    def __init__(__self__, *,
                 oldest_recovery_point: Optional[pulumi.Input[str]] = None,
                 policy_state: Optional[pulumi.Input[str]] = None,
                 recovery_point_count: Optional[pulumi.Input[int]] = None):
        """
        Additional information on Azure Sql specific protected item.
        :param pulumi.Input[str] oldest_recovery_point: The oldest backup copy available for this item in the service.
        :param pulumi.Input[str] policy_state: State of the backup policy associated with this backup item.
        :param pulumi.Input[int] recovery_point_count: Number of available backup copies associated with this backup item.
        """
        if oldest_recovery_point is not None:
            pulumi.set(__self__, "oldest_recovery_point", oldest_recovery_point)
        if policy_state is not None:
            pulumi.set(__self__, "policy_state", policy_state)
        if recovery_point_count is not None:
            pulumi.set(__self__, "recovery_point_count", recovery_point_count)

    @property
    @pulumi.getter(name="oldestRecoveryPoint")
    def oldest_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        The oldest backup copy available for this item in the service.
        """
        return pulumi.get(self, "oldest_recovery_point")

    @oldest_recovery_point.setter
    def oldest_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oldest_recovery_point", value)

    @property
    @pulumi.getter(name="policyState")
    def policy_state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the backup policy associated with this backup item.
        """
        return pulumi.get(self, "policy_state")

    @policy_state.setter
    def policy_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_state", value)

    @property
    @pulumi.getter(name="recoveryPointCount")
    def recovery_point_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of available backup copies associated with this backup item.
        """
        return pulumi.get(self, "recovery_point_count")

    @recovery_point_count.setter
    def recovery_point_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_count", value)


@pulumi.input_type
class AzureSqlProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 extended_info: Optional[pulumi.Input['AzureSqlProtectedItemExtendedInfoArgs']] = None,
                 is_archive_enabled: Optional[pulumi.Input[bool]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 protected_item_data_id: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectedItemState']]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'DataSourceType']]] = None):
        """
        Azure SQL workload-specific backup item.
        :param pulumi.Input[str] protected_item_type: backup item type.
               Expected value is 'Microsoft.Sql/servers/databases'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input['AzureSqlProtectedItemExtendedInfoArgs'] extended_info: Additional information for this backup item.
        :param pulumi.Input[bool] is_archive_enabled: Flag to identify whether datasource is protected in archive
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] policy_name: Name of the policy used for protection
        :param pulumi.Input[str] protected_item_data_id: Internal ID of a backup item. Used by Azure SQL Backup engine to contact Recovery Services.
        :param pulumi.Input[Union[str, 'ProtectedItemState']] protection_state: Backup state of the backed up item.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuardOperationRequests on which LAC check will be performed
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[Union[str, 'DataSourceType']] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", 'Microsoft.Sql/servers/databases')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if is_archive_enabled is not None:
            pulumi.set(__self__, "is_archive_enabled", is_archive_enabled)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if protected_item_data_id is not None:
            pulumi.set(__self__, "protected_item_data_id", protected_item_data_id)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        Expected value is 'Microsoft.Sql/servers/databases'.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['AzureSqlProtectedItemExtendedInfoArgs']]:
        """
        Additional information for this backup item.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['AzureSqlProtectedItemExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="isArchiveEnabled")
    def is_archive_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether datasource is protected in archive
        """
        return pulumi.get(self, "is_archive_enabled")

    @is_archive_enabled.setter
    def is_archive_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archive_enabled", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the policy used for protection
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="protectedItemDataId")
    def protected_item_data_id(self) -> Optional[pulumi.Input[str]]:
        """
        Internal ID of a backup item. Used by Azure SQL Backup engine to contact Recovery Services.
        """
        return pulumi.get(self, "protected_item_data_id")

    @protected_item_data_id.setter
    def protected_item_data_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protected_item_data_id", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectedItemState']]]:
        """
        Backup state of the backed up item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectedItemState']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuardOperationRequests on which LAC check will be performed
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'DataSourceType']]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'DataSourceType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class AzureSqlProtectionPolicyArgs:
    def __init__(__self__, *,
                 backup_management_type: pulumi.Input[str],
                 protected_items_count: Optional[pulumi.Input[int]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retention_policy: Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]] = None):
        """
        Azure SQL workload-specific backup policy.
        :param pulumi.Input[str] backup_management_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'AzureSql'.
        :param pulumi.Input[int] protected_items_count: Number of items associated with this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuard Operation Requests
        :param pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']] retention_policy: Retention policy details.
        """
        pulumi.set(__self__, "backup_management_type", 'AzureSql')
        if protected_items_count is not None:
            pulumi.set(__self__, "protected_items_count", protected_items_count)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> pulumi.Input[str]:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'AzureSql'.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="protectedItemsCount")
    def protected_items_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of items associated with this policy.
        """
        return pulumi.get(self, "protected_items_count")

    @protected_items_count.setter
    def protected_items_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protected_items_count", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuard Operation Requests
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]]:
        """
        Retention policy details.
        """
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]]):
        pulumi.set(self, "retention_policy", value)


@pulumi.input_type
class AzureStorageContainerArgs:
    def __init__(__self__, *,
                 container_type: pulumi.Input[str],
                 acquire_storage_account_lock: Optional[pulumi.Input[Union[str, 'AcquireStorageAccountLock']]] = None,
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 protectable_object_type: Optional[pulumi.Input[str]] = None,
                 protected_item_count: Optional[pulumi.Input[float]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 storage_account_version: Optional[pulumi.Input[str]] = None):
        """
        Azure Storage Account workload-specific container.
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
               Expected value is 'StorageContainer'.
        :param pulumi.Input[Union[str, 'AcquireStorageAccountLock']] acquire_storage_account_lock: Whether storage account lock is to be acquired for this container or not.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the container.
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[str] protectable_object_type: Type of the protectable object associated with this container
        :param pulumi.Input[float] protected_item_count: Number of items backed up in this container.
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        :param pulumi.Input[str] resource_group: Resource group name of Recovery Services Vault.
        :param pulumi.Input[str] source_resource_id: Fully qualified ARM url.
        :param pulumi.Input[str] storage_account_version: Storage account version.
        """
        pulumi.set(__self__, "container_type", 'StorageContainer')
        if acquire_storage_account_lock is not None:
            pulumi.set(__self__, "acquire_storage_account_lock", acquire_storage_account_lock)
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if protectable_object_type is not None:
            pulumi.set(__self__, "protectable_object_type", protectable_object_type)
        if protected_item_count is not None:
            pulumi.set(__self__, "protected_item_count", protected_item_count)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if storage_account_version is not None:
            pulumi.set(__self__, "storage_account_version", storage_account_version)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Input[str]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        Expected value is 'StorageContainer'.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="acquireStorageAccountLock")
    def acquire_storage_account_lock(self) -> Optional[pulumi.Input[Union[str, 'AcquireStorageAccountLock']]]:
        """
        Whether storage account lock is to be acquired for this container or not.
        """
        return pulumi.get(self, "acquire_storage_account_lock")

    @acquire_storage_account_lock.setter
    def acquire_storage_account_lock(self, value: Optional[pulumi.Input[Union[str, 'AcquireStorageAccountLock']]]):
        pulumi.set(self, "acquire_storage_account_lock", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="protectableObjectType")
    def protectable_object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the protectable object associated with this container
        """
        return pulumi.get(self, "protectable_object_type")

    @protectable_object_type.setter
    def protectable_object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_object_type", value)

    @property
    @pulumi.getter(name="protectedItemCount")
    def protected_item_count(self) -> Optional[pulumi.Input[float]]:
        """
        Number of items backed up in this container.
        """
        return pulumi.get(self, "protected_item_count")

    @protected_item_count.setter
    def protected_item_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "protected_item_count", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Resource group name of Recovery Services Vault.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified ARM url.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="storageAccountVersion")
    def storage_account_version(self) -> Optional[pulumi.Input[str]]:
        """
        Storage account version.
        """
        return pulumi.get(self, "storage_account_version")

    @storage_account_version.setter
    def storage_account_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_version", value)


@pulumi.input_type
class AzureToAzureCreateNetworkMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 primary_network_id: pulumi.Input[str]):
        """
        Create network mappings input properties/behavior specific to Azure to Azure Network mapping.
        :param pulumi.Input[str] instance_type: The instance type.
               Expected value is 'AzureToAzure'.
        :param pulumi.Input[str] primary_network_id: The primary azure vnet Id.
        """
        pulumi.set(__self__, "instance_type", 'AzureToAzure')
        pulumi.set(__self__, "primary_network_id", primary_network_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The instance type.
        Expected value is 'AzureToAzure'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="primaryNetworkId")
    def primary_network_id(self) -> pulumi.Input[str]:
        """
        The primary azure vnet Id.
        """
        return pulumi.get(self, "primary_network_id")

    @primary_network_id.setter
    def primary_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_network_id", value)


@pulumi.input_type
class AzureVMAppContainerProtectionContainerArgs:
    def __init__(__self__, *,
                 container_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 extended_info: Optional[pulumi.Input['AzureWorkloadContainerExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 last_updated_time: Optional[pulumi.Input[str]] = None,
                 operation_type: Optional[pulumi.Input[Union[str, 'OperationType']]] = None,
                 protectable_object_type: Optional[pulumi.Input[str]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'WorkloadType']]] = None):
        """
        Container for SQL workloads under Azure Virtual Machines.
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
               Expected value is 'VMAppContainer'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the container.
        :param pulumi.Input['AzureWorkloadContainerExtendedInfoArgs'] extended_info: Additional details of a workload container.
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[str] last_updated_time: Time stamp when this container was updated.
        :param pulumi.Input[Union[str, 'OperationType']] operation_type: Re-Do Operation
        :param pulumi.Input[str] protectable_object_type: Type of the protectable object associated with this container
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        :param pulumi.Input[str] source_resource_id: ARM ID of the virtual machine represented by this Azure Workload Container
        :param pulumi.Input[Union[str, 'WorkloadType']] workload_type: Workload type for which registration was sent.
        """
        pulumi.set(__self__, "container_type", 'VMAppContainer')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if last_updated_time is not None:
            pulumi.set(__self__, "last_updated_time", last_updated_time)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if protectable_object_type is not None:
            pulumi.set(__self__, "protectable_object_type", protectable_object_type)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Input[str]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        Expected value is 'VMAppContainer'.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['AzureWorkloadContainerExtendedInfoArgs']]:
        """
        Additional details of a workload container.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['AzureWorkloadContainerExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="lastUpdatedTime")
    def last_updated_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time stamp when this container was updated.
        """
        return pulumi.get(self, "last_updated_time")

    @last_updated_time.setter
    def last_updated_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated_time", value)

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[pulumi.Input[Union[str, 'OperationType']]]:
        """
        Re-Do Operation
        """
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: Optional[pulumi.Input[Union[str, 'OperationType']]]):
        pulumi.set(self, "operation_type", value)

    @property
    @pulumi.getter(name="protectableObjectType")
    def protectable_object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the protectable object associated with this container
        """
        return pulumi.get(self, "protectable_object_type")

    @protectable_object_type.setter
    def protectable_object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_object_type", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the virtual machine represented by this Azure Workload Container
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'WorkloadType']]]:
        """
        Workload type for which registration was sent.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'WorkloadType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class AzureVmWorkloadProtectedItemExtendedInfoArgs:
    def __init__(__self__, *,
                 newest_recovery_point_in_archive: Optional[pulumi.Input[str]] = None,
                 oldest_recovery_point: Optional[pulumi.Input[str]] = None,
                 oldest_recovery_point_in_archive: Optional[pulumi.Input[str]] = None,
                 oldest_recovery_point_in_vault: Optional[pulumi.Input[str]] = None,
                 policy_state: Optional[pulumi.Input[str]] = None,
                 recovery_model: Optional[pulumi.Input[str]] = None,
                 recovery_point_count: Optional[pulumi.Input[int]] = None):
        """
        Additional information on Azure Workload for SQL specific backup item.
        :param pulumi.Input[str] newest_recovery_point_in_archive: The latest backup copy available for this backup item in archive tier
        :param pulumi.Input[str] oldest_recovery_point: The oldest backup copy available for this backup item across all tiers.
        :param pulumi.Input[str] oldest_recovery_point_in_archive: The oldest backup copy available for this backup item in archive tier
        :param pulumi.Input[str] oldest_recovery_point_in_vault: The oldest backup copy available for this backup item in vault tier
        :param pulumi.Input[str] policy_state: Indicates consistency of policy object and policy applied to this backup item.
        :param pulumi.Input[str] recovery_model: Indicates consistency of policy object and policy applied to this backup item.
        :param pulumi.Input[int] recovery_point_count: Number of backup copies available for this backup item.
        """
        if newest_recovery_point_in_archive is not None:
            pulumi.set(__self__, "newest_recovery_point_in_archive", newest_recovery_point_in_archive)
        if oldest_recovery_point is not None:
            pulumi.set(__self__, "oldest_recovery_point", oldest_recovery_point)
        if oldest_recovery_point_in_archive is not None:
            pulumi.set(__self__, "oldest_recovery_point_in_archive", oldest_recovery_point_in_archive)
        if oldest_recovery_point_in_vault is not None:
            pulumi.set(__self__, "oldest_recovery_point_in_vault", oldest_recovery_point_in_vault)
        if policy_state is not None:
            pulumi.set(__self__, "policy_state", policy_state)
        if recovery_model is not None:
            pulumi.set(__self__, "recovery_model", recovery_model)
        if recovery_point_count is not None:
            pulumi.set(__self__, "recovery_point_count", recovery_point_count)

    @property
    @pulumi.getter(name="newestRecoveryPointInArchive")
    def newest_recovery_point_in_archive(self) -> Optional[pulumi.Input[str]]:
        """
        The latest backup copy available for this backup item in archive tier
        """
        return pulumi.get(self, "newest_recovery_point_in_archive")

    @newest_recovery_point_in_archive.setter
    def newest_recovery_point_in_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "newest_recovery_point_in_archive", value)

    @property
    @pulumi.getter(name="oldestRecoveryPoint")
    def oldest_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        The oldest backup copy available for this backup item across all tiers.
        """
        return pulumi.get(self, "oldest_recovery_point")

    @oldest_recovery_point.setter
    def oldest_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oldest_recovery_point", value)

    @property
    @pulumi.getter(name="oldestRecoveryPointInArchive")
    def oldest_recovery_point_in_archive(self) -> Optional[pulumi.Input[str]]:
        """
        The oldest backup copy available for this backup item in archive tier
        """
        return pulumi.get(self, "oldest_recovery_point_in_archive")

    @oldest_recovery_point_in_archive.setter
    def oldest_recovery_point_in_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oldest_recovery_point_in_archive", value)

    @property
    @pulumi.getter(name="oldestRecoveryPointInVault")
    def oldest_recovery_point_in_vault(self) -> Optional[pulumi.Input[str]]:
        """
        The oldest backup copy available for this backup item in vault tier
        """
        return pulumi.get(self, "oldest_recovery_point_in_vault")

    @oldest_recovery_point_in_vault.setter
    def oldest_recovery_point_in_vault(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oldest_recovery_point_in_vault", value)

    @property
    @pulumi.getter(name="policyState")
    def policy_state(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates consistency of policy object and policy applied to this backup item.
        """
        return pulumi.get(self, "policy_state")

    @policy_state.setter
    def policy_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_state", value)

    @property
    @pulumi.getter(name="recoveryModel")
    def recovery_model(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates consistency of policy object and policy applied to this backup item.
        """
        return pulumi.get(self, "recovery_model")

    @recovery_model.setter
    def recovery_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_model", value)

    @property
    @pulumi.getter(name="recoveryPointCount")
    def recovery_point_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of backup copies available for this backup item.
        """
        return pulumi.get(self, "recovery_point_count")

    @recovery_point_count.setter
    def recovery_point_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_count", value)


@pulumi.input_type
class AzureVmWorkloadProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 extended_info: Optional[pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 is_archive_enabled: Optional[pulumi.Input[bool]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 kpis_healths: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]] = None,
                 last_backup_status: Optional[pulumi.Input[Union[str, 'LastBackupStatus']]] = None,
                 last_backup_time: Optional[pulumi.Input[str]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 parent_name: Optional[pulumi.Input[str]] = None,
                 parent_type: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 protected_item_data_source_id: Optional[pulumi.Input[str]] = None,
                 protected_item_health_status: Optional[pulumi.Input[Union[str, 'ProtectedItemHealthStatus']]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionState']]] = None,
                 protection_status: Optional[pulumi.Input[str]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'DataSourceType']]] = None):
        """
        Azure VM workload-specific protected item.
        :param pulumi.Input[str] protected_item_type: backup item type.
               Expected value is 'AzureVmWorkloadProtectedItem'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs'] extended_info: Additional information for this backup item.
        :param pulumi.Input[str] friendly_name: Friendly name of the DB represented by this backup item.
        :param pulumi.Input[bool] is_archive_enabled: Flag to identify whether datasource is protected in archive
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]] kpis_healths: Health details of different KPIs
        :param pulumi.Input[Union[str, 'LastBackupStatus']] last_backup_status: Last backup operation status. Possible values: Healthy, Unhealthy.
        :param pulumi.Input[str] last_backup_time: Timestamp of the last backup operation on this backup item.
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] parent_name: Parent name of the DB such as Instance or Availability Group.
        :param pulumi.Input[str] parent_type: Parent type of protected item, example: for a DB, standalone server or distributed
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] policy_name: Name of the policy used for protection
        :param pulumi.Input[str] protected_item_data_source_id: Data ID of the protected item.
        :param pulumi.Input[Union[str, 'ProtectedItemHealthStatus']] protected_item_health_status: Health status of the backup item, evaluated based on last heartbeat received
        :param pulumi.Input[Union[str, 'ProtectionState']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] protection_status: Backup status of this backup item.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuardOperationRequests on which LAC check will be performed
        :param pulumi.Input[str] server_name: Host/Cluster Name for instance or AG
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[Union[str, 'DataSourceType']] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", 'AzureVmWorkloadProtectedItem')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if is_archive_enabled is not None:
            pulumi.set(__self__, "is_archive_enabled", is_archive_enabled)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if kpis_healths is not None:
            pulumi.set(__self__, "kpis_healths", kpis_healths)
        if last_backup_status is not None:
            pulumi.set(__self__, "last_backup_status", last_backup_status)
        if last_backup_time is not None:
            pulumi.set(__self__, "last_backup_time", last_backup_time)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if parent_name is not None:
            pulumi.set(__self__, "parent_name", parent_name)
        if parent_type is not None:
            pulumi.set(__self__, "parent_type", parent_type)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if protected_item_data_source_id is not None:
            pulumi.set(__self__, "protected_item_data_source_id", protected_item_data_source_id)
        if protected_item_health_status is not None:
            pulumi.set(__self__, "protected_item_health_status", protected_item_health_status)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if protection_status is not None:
            pulumi.set(__self__, "protection_status", protection_status)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        Expected value is 'AzureVmWorkloadProtectedItem'.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs']]:
        """
        Additional information for this backup item.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the DB represented by this backup item.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="isArchiveEnabled")
    def is_archive_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether datasource is protected in archive
        """
        return pulumi.get(self, "is_archive_enabled")

    @is_archive_enabled.setter
    def is_archive_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archive_enabled", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="kpisHealths")
    def kpis_healths(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]:
        """
        Health details of different KPIs
        """
        return pulumi.get(self, "kpis_healths")

    @kpis_healths.setter
    def kpis_healths(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]):
        pulumi.set(self, "kpis_healths", value)

    @property
    @pulumi.getter(name="lastBackupStatus")
    def last_backup_status(self) -> Optional[pulumi.Input[Union[str, 'LastBackupStatus']]]:
        """
        Last backup operation status. Possible values: Healthy, Unhealthy.
        """
        return pulumi.get(self, "last_backup_status")

    @last_backup_status.setter
    def last_backup_status(self, value: Optional[pulumi.Input[Union[str, 'LastBackupStatus']]]):
        pulumi.set(self, "last_backup_status", value)

    @property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the last backup operation on this backup item.
        """
        return pulumi.get(self, "last_backup_time")

    @last_backup_time.setter
    def last_backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_time", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="parentName")
    def parent_name(self) -> Optional[pulumi.Input[str]]:
        """
        Parent name of the DB such as Instance or Availability Group.
        """
        return pulumi.get(self, "parent_name")

    @parent_name.setter
    def parent_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_name", value)

    @property
    @pulumi.getter(name="parentType")
    def parent_type(self) -> Optional[pulumi.Input[str]]:
        """
        Parent type of protected item, example: for a DB, standalone server or distributed
        """
        return pulumi.get(self, "parent_type")

    @parent_type.setter
    def parent_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_type", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the policy used for protection
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="protectedItemDataSourceId")
    def protected_item_data_source_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data ID of the protected item.
        """
        return pulumi.get(self, "protected_item_data_source_id")

    @protected_item_data_source_id.setter
    def protected_item_data_source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protected_item_data_source_id", value)

    @property
    @pulumi.getter(name="protectedItemHealthStatus")
    def protected_item_health_status(self) -> Optional[pulumi.Input[Union[str, 'ProtectedItemHealthStatus']]]:
        """
        Health status of the backup item, evaluated based on last heartbeat received
        """
        return pulumi.get(self, "protected_item_health_status")

    @protected_item_health_status.setter
    def protected_item_health_status(self, value: Optional[pulumi.Input[Union[str, 'ProtectedItemHealthStatus']]]):
        pulumi.set(self, "protected_item_health_status", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionState']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionState']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> Optional[pulumi.Input[str]]:
        """
        Backup status of this backup item.
        """
        return pulumi.get(self, "protection_status")

    @protection_status.setter
    def protection_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_status", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuardOperationRequests on which LAC check will be performed
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Host/Cluster Name for instance or AG
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'DataSourceType']]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'DataSourceType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class AzureVmWorkloadProtectionPolicyArgs:
    def __init__(__self__, *,
                 backup_management_type: pulumi.Input[str],
                 make_policy_consistent: Optional[pulumi.Input[bool]] = None,
                 protected_items_count: Optional[pulumi.Input[int]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 settings: Optional[pulumi.Input['SettingsArgs']] = None,
                 sub_protection_policy: Optional[pulumi.Input[Sequence[pulumi.Input['SubProtectionPolicyArgs']]]] = None,
                 work_load_type: Optional[pulumi.Input[Union[str, 'WorkloadType']]] = None):
        """
        Azure VM (Mercury) workload-specific backup policy.
        :param pulumi.Input[str] backup_management_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'AzureWorkload'.
        :param pulumi.Input[bool] make_policy_consistent: Fix the policy inconsistency
        :param pulumi.Input[int] protected_items_count: Number of items associated with this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuard Operation Requests
        :param pulumi.Input['SettingsArgs'] settings: Common settings for the backup management
        :param pulumi.Input[Sequence[pulumi.Input['SubProtectionPolicyArgs']]] sub_protection_policy: List of sub-protection policies which includes schedule and retention
        :param pulumi.Input[Union[str, 'WorkloadType']] work_load_type: Type of workload for the backup management
        """
        pulumi.set(__self__, "backup_management_type", 'AzureWorkload')
        if make_policy_consistent is not None:
            pulumi.set(__self__, "make_policy_consistent", make_policy_consistent)
        if protected_items_count is not None:
            pulumi.set(__self__, "protected_items_count", protected_items_count)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)
        if sub_protection_policy is not None:
            pulumi.set(__self__, "sub_protection_policy", sub_protection_policy)
        if work_load_type is not None:
            pulumi.set(__self__, "work_load_type", work_load_type)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> pulumi.Input[str]:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'AzureWorkload'.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="makePolicyConsistent")
    def make_policy_consistent(self) -> Optional[pulumi.Input[bool]]:
        """
        Fix the policy inconsistency
        """
        return pulumi.get(self, "make_policy_consistent")

    @make_policy_consistent.setter
    def make_policy_consistent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "make_policy_consistent", value)

    @property
    @pulumi.getter(name="protectedItemsCount")
    def protected_items_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of items associated with this policy.
        """
        return pulumi.get(self, "protected_items_count")

    @protected_items_count.setter
    def protected_items_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protected_items_count", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuard Operation Requests
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['SettingsArgs']]:
        """
        Common settings for the backup management
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['SettingsArgs']]):
        pulumi.set(self, "settings", value)

    @property
    @pulumi.getter(name="subProtectionPolicy")
    def sub_protection_policy(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubProtectionPolicyArgs']]]]:
        """
        List of sub-protection policies which includes schedule and retention
        """
        return pulumi.get(self, "sub_protection_policy")

    @sub_protection_policy.setter
    def sub_protection_policy(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubProtectionPolicyArgs']]]]):
        pulumi.set(self, "sub_protection_policy", value)

    @property
    @pulumi.getter(name="workLoadType")
    def work_load_type(self) -> Optional[pulumi.Input[Union[str, 'WorkloadType']]]:
        """
        Type of workload for the backup management
        """
        return pulumi.get(self, "work_load_type")

    @work_load_type.setter
    def work_load_type(self, value: Optional[pulumi.Input[Union[str, 'WorkloadType']]]):
        pulumi.set(self, "work_load_type", value)


@pulumi.input_type
class AzureVmWorkloadSAPAseDatabaseProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 extended_info: Optional[pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 is_archive_enabled: Optional[pulumi.Input[bool]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 kpis_healths: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]] = None,
                 last_backup_status: Optional[pulumi.Input[Union[str, 'LastBackupStatus']]] = None,
                 last_backup_time: Optional[pulumi.Input[str]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 parent_name: Optional[pulumi.Input[str]] = None,
                 parent_type: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 protected_item_data_source_id: Optional[pulumi.Input[str]] = None,
                 protected_item_health_status: Optional[pulumi.Input[Union[str, 'ProtectedItemHealthStatus']]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionState']]] = None,
                 protection_status: Optional[pulumi.Input[str]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'DataSourceType']]] = None):
        """
        Azure VM workload-specific protected item representing SAP ASE Database.
        :param pulumi.Input[str] protected_item_type: backup item type.
               Expected value is 'AzureVmWorkloadSAPAseDatabase'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs'] extended_info: Additional information for this backup item.
        :param pulumi.Input[str] friendly_name: Friendly name of the DB represented by this backup item.
        :param pulumi.Input[bool] is_archive_enabled: Flag to identify whether datasource is protected in archive
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]] kpis_healths: Health details of different KPIs
        :param pulumi.Input[Union[str, 'LastBackupStatus']] last_backup_status: Last backup operation status. Possible values: Healthy, Unhealthy.
        :param pulumi.Input[str] last_backup_time: Timestamp of the last backup operation on this backup item.
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] parent_name: Parent name of the DB such as Instance or Availability Group.
        :param pulumi.Input[str] parent_type: Parent type of protected item, example: for a DB, standalone server or distributed
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] policy_name: Name of the policy used for protection
        :param pulumi.Input[str] protected_item_data_source_id: Data ID of the protected item.
        :param pulumi.Input[Union[str, 'ProtectedItemHealthStatus']] protected_item_health_status: Health status of the backup item, evaluated based on last heartbeat received
        :param pulumi.Input[Union[str, 'ProtectionState']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] protection_status: Backup status of this backup item.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuardOperationRequests on which LAC check will be performed
        :param pulumi.Input[str] server_name: Host/Cluster Name for instance or AG
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[Union[str, 'DataSourceType']] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", 'AzureVmWorkloadSAPAseDatabase')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if is_archive_enabled is not None:
            pulumi.set(__self__, "is_archive_enabled", is_archive_enabled)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if kpis_healths is not None:
            pulumi.set(__self__, "kpis_healths", kpis_healths)
        if last_backup_status is not None:
            pulumi.set(__self__, "last_backup_status", last_backup_status)
        if last_backup_time is not None:
            pulumi.set(__self__, "last_backup_time", last_backup_time)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if parent_name is not None:
            pulumi.set(__self__, "parent_name", parent_name)
        if parent_type is not None:
            pulumi.set(__self__, "parent_type", parent_type)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if protected_item_data_source_id is not None:
            pulumi.set(__self__, "protected_item_data_source_id", protected_item_data_source_id)
        if protected_item_health_status is not None:
            pulumi.set(__self__, "protected_item_health_status", protected_item_health_status)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if protection_status is not None:
            pulumi.set(__self__, "protection_status", protection_status)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        Expected value is 'AzureVmWorkloadSAPAseDatabase'.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs']]:
        """
        Additional information for this backup item.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the DB represented by this backup item.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="isArchiveEnabled")
    def is_archive_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether datasource is protected in archive
        """
        return pulumi.get(self, "is_archive_enabled")

    @is_archive_enabled.setter
    def is_archive_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archive_enabled", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="kpisHealths")
    def kpis_healths(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]:
        """
        Health details of different KPIs
        """
        return pulumi.get(self, "kpis_healths")

    @kpis_healths.setter
    def kpis_healths(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]):
        pulumi.set(self, "kpis_healths", value)

    @property
    @pulumi.getter(name="lastBackupStatus")
    def last_backup_status(self) -> Optional[pulumi.Input[Union[str, 'LastBackupStatus']]]:
        """
        Last backup operation status. Possible values: Healthy, Unhealthy.
        """
        return pulumi.get(self, "last_backup_status")

    @last_backup_status.setter
    def last_backup_status(self, value: Optional[pulumi.Input[Union[str, 'LastBackupStatus']]]):
        pulumi.set(self, "last_backup_status", value)

    @property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the last backup operation on this backup item.
        """
        return pulumi.get(self, "last_backup_time")

    @last_backup_time.setter
    def last_backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_time", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="parentName")
    def parent_name(self) -> Optional[pulumi.Input[str]]:
        """
        Parent name of the DB such as Instance or Availability Group.
        """
        return pulumi.get(self, "parent_name")

    @parent_name.setter
    def parent_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_name", value)

    @property
    @pulumi.getter(name="parentType")
    def parent_type(self) -> Optional[pulumi.Input[str]]:
        """
        Parent type of protected item, example: for a DB, standalone server or distributed
        """
        return pulumi.get(self, "parent_type")

    @parent_type.setter
    def parent_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_type", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the policy used for protection
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="protectedItemDataSourceId")
    def protected_item_data_source_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data ID of the protected item.
        """
        return pulumi.get(self, "protected_item_data_source_id")

    @protected_item_data_source_id.setter
    def protected_item_data_source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protected_item_data_source_id", value)

    @property
    @pulumi.getter(name="protectedItemHealthStatus")
    def protected_item_health_status(self) -> Optional[pulumi.Input[Union[str, 'ProtectedItemHealthStatus']]]:
        """
        Health status of the backup item, evaluated based on last heartbeat received
        """
        return pulumi.get(self, "protected_item_health_status")

    @protected_item_health_status.setter
    def protected_item_health_status(self, value: Optional[pulumi.Input[Union[str, 'ProtectedItemHealthStatus']]]):
        pulumi.set(self, "protected_item_health_status", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionState']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionState']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> Optional[pulumi.Input[str]]:
        """
        Backup status of this backup item.
        """
        return pulumi.get(self, "protection_status")

    @protection_status.setter
    def protection_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_status", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuardOperationRequests on which LAC check will be performed
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Host/Cluster Name for instance or AG
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'DataSourceType']]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'DataSourceType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class AzureVmWorkloadSAPHanaDatabaseProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 extended_info: Optional[pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 is_archive_enabled: Optional[pulumi.Input[bool]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 kpis_healths: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]] = None,
                 last_backup_status: Optional[pulumi.Input[Union[str, 'LastBackupStatus']]] = None,
                 last_backup_time: Optional[pulumi.Input[str]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 parent_name: Optional[pulumi.Input[str]] = None,
                 parent_type: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 protected_item_data_source_id: Optional[pulumi.Input[str]] = None,
                 protected_item_health_status: Optional[pulumi.Input[Union[str, 'ProtectedItemHealthStatus']]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionState']]] = None,
                 protection_status: Optional[pulumi.Input[str]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'DataSourceType']]] = None):
        """
        Azure VM workload-specific protected item representing SAP HANA Database.
        :param pulumi.Input[str] protected_item_type: backup item type.
               Expected value is 'AzureVmWorkloadSAPHanaDatabase'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs'] extended_info: Additional information for this backup item.
        :param pulumi.Input[str] friendly_name: Friendly name of the DB represented by this backup item.
        :param pulumi.Input[bool] is_archive_enabled: Flag to identify whether datasource is protected in archive
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]] kpis_healths: Health details of different KPIs
        :param pulumi.Input[Union[str, 'LastBackupStatus']] last_backup_status: Last backup operation status. Possible values: Healthy, Unhealthy.
        :param pulumi.Input[str] last_backup_time: Timestamp of the last backup operation on this backup item.
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] parent_name: Parent name of the DB such as Instance or Availability Group.
        :param pulumi.Input[str] parent_type: Parent type of protected item, example: for a DB, standalone server or distributed
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] policy_name: Name of the policy used for protection
        :param pulumi.Input[str] protected_item_data_source_id: Data ID of the protected item.
        :param pulumi.Input[Union[str, 'ProtectedItemHealthStatus']] protected_item_health_status: Health status of the backup item, evaluated based on last heartbeat received
        :param pulumi.Input[Union[str, 'ProtectionState']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] protection_status: Backup status of this backup item.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuardOperationRequests on which LAC check will be performed
        :param pulumi.Input[str] server_name: Host/Cluster Name for instance or AG
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[Union[str, 'DataSourceType']] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", 'AzureVmWorkloadSAPHanaDatabase')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if is_archive_enabled is not None:
            pulumi.set(__self__, "is_archive_enabled", is_archive_enabled)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if kpis_healths is not None:
            pulumi.set(__self__, "kpis_healths", kpis_healths)
        if last_backup_status is not None:
            pulumi.set(__self__, "last_backup_status", last_backup_status)
        if last_backup_time is not None:
            pulumi.set(__self__, "last_backup_time", last_backup_time)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if parent_name is not None:
            pulumi.set(__self__, "parent_name", parent_name)
        if parent_type is not None:
            pulumi.set(__self__, "parent_type", parent_type)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if protected_item_data_source_id is not None:
            pulumi.set(__self__, "protected_item_data_source_id", protected_item_data_source_id)
        if protected_item_health_status is not None:
            pulumi.set(__self__, "protected_item_health_status", protected_item_health_status)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if protection_status is not None:
            pulumi.set(__self__, "protection_status", protection_status)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        Expected value is 'AzureVmWorkloadSAPHanaDatabase'.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs']]:
        """
        Additional information for this backup item.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the DB represented by this backup item.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="isArchiveEnabled")
    def is_archive_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether datasource is protected in archive
        """
        return pulumi.get(self, "is_archive_enabled")

    @is_archive_enabled.setter
    def is_archive_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archive_enabled", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="kpisHealths")
    def kpis_healths(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]:
        """
        Health details of different KPIs
        """
        return pulumi.get(self, "kpis_healths")

    @kpis_healths.setter
    def kpis_healths(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]):
        pulumi.set(self, "kpis_healths", value)

    @property
    @pulumi.getter(name="lastBackupStatus")
    def last_backup_status(self) -> Optional[pulumi.Input[Union[str, 'LastBackupStatus']]]:
        """
        Last backup operation status. Possible values: Healthy, Unhealthy.
        """
        return pulumi.get(self, "last_backup_status")

    @last_backup_status.setter
    def last_backup_status(self, value: Optional[pulumi.Input[Union[str, 'LastBackupStatus']]]):
        pulumi.set(self, "last_backup_status", value)

    @property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the last backup operation on this backup item.
        """
        return pulumi.get(self, "last_backup_time")

    @last_backup_time.setter
    def last_backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_time", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="parentName")
    def parent_name(self) -> Optional[pulumi.Input[str]]:
        """
        Parent name of the DB such as Instance or Availability Group.
        """
        return pulumi.get(self, "parent_name")

    @parent_name.setter
    def parent_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_name", value)

    @property
    @pulumi.getter(name="parentType")
    def parent_type(self) -> Optional[pulumi.Input[str]]:
        """
        Parent type of protected item, example: for a DB, standalone server or distributed
        """
        return pulumi.get(self, "parent_type")

    @parent_type.setter
    def parent_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_type", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the policy used for protection
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="protectedItemDataSourceId")
    def protected_item_data_source_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data ID of the protected item.
        """
        return pulumi.get(self, "protected_item_data_source_id")

    @protected_item_data_source_id.setter
    def protected_item_data_source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protected_item_data_source_id", value)

    @property
    @pulumi.getter(name="protectedItemHealthStatus")
    def protected_item_health_status(self) -> Optional[pulumi.Input[Union[str, 'ProtectedItemHealthStatus']]]:
        """
        Health status of the backup item, evaluated based on last heartbeat received
        """
        return pulumi.get(self, "protected_item_health_status")

    @protected_item_health_status.setter
    def protected_item_health_status(self, value: Optional[pulumi.Input[Union[str, 'ProtectedItemHealthStatus']]]):
        pulumi.set(self, "protected_item_health_status", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionState']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionState']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> Optional[pulumi.Input[str]]:
        """
        Backup status of this backup item.
        """
        return pulumi.get(self, "protection_status")

    @protection_status.setter
    def protection_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_status", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuardOperationRequests on which LAC check will be performed
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Host/Cluster Name for instance or AG
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'DataSourceType']]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'DataSourceType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class AzureVmWorkloadSQLDatabaseProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 extended_info: Optional[pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 is_archive_enabled: Optional[pulumi.Input[bool]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 kpis_healths: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]] = None,
                 last_backup_status: Optional[pulumi.Input[Union[str, 'LastBackupStatus']]] = None,
                 last_backup_time: Optional[pulumi.Input[str]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 parent_name: Optional[pulumi.Input[str]] = None,
                 parent_type: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 protected_item_data_source_id: Optional[pulumi.Input[str]] = None,
                 protected_item_health_status: Optional[pulumi.Input[Union[str, 'ProtectedItemHealthStatus']]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionState']]] = None,
                 protection_status: Optional[pulumi.Input[str]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'DataSourceType']]] = None):
        """
        Azure VM workload-specific protected item representing SQL Database.
        :param pulumi.Input[str] protected_item_type: backup item type.
               Expected value is 'AzureVmWorkloadSQLDatabase'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs'] extended_info: Additional information for this backup item.
        :param pulumi.Input[str] friendly_name: Friendly name of the DB represented by this backup item.
        :param pulumi.Input[bool] is_archive_enabled: Flag to identify whether datasource is protected in archive
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]] kpis_healths: Health details of different KPIs
        :param pulumi.Input[Union[str, 'LastBackupStatus']] last_backup_status: Last backup operation status. Possible values: Healthy, Unhealthy.
        :param pulumi.Input[str] last_backup_time: Timestamp of the last backup operation on this backup item.
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] parent_name: Parent name of the DB such as Instance or Availability Group.
        :param pulumi.Input[str] parent_type: Parent type of protected item, example: for a DB, standalone server or distributed
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] policy_name: Name of the policy used for protection
        :param pulumi.Input[str] protected_item_data_source_id: Data ID of the protected item.
        :param pulumi.Input[Union[str, 'ProtectedItemHealthStatus']] protected_item_health_status: Health status of the backup item, evaluated based on last heartbeat received
        :param pulumi.Input[Union[str, 'ProtectionState']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] protection_status: Backup status of this backup item.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuardOperationRequests on which LAC check will be performed
        :param pulumi.Input[str] server_name: Host/Cluster Name for instance or AG
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[Union[str, 'DataSourceType']] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", 'AzureVmWorkloadSQLDatabase')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if is_archive_enabled is not None:
            pulumi.set(__self__, "is_archive_enabled", is_archive_enabled)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if kpis_healths is not None:
            pulumi.set(__self__, "kpis_healths", kpis_healths)
        if last_backup_status is not None:
            pulumi.set(__self__, "last_backup_status", last_backup_status)
        if last_backup_time is not None:
            pulumi.set(__self__, "last_backup_time", last_backup_time)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if parent_name is not None:
            pulumi.set(__self__, "parent_name", parent_name)
        if parent_type is not None:
            pulumi.set(__self__, "parent_type", parent_type)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if protected_item_data_source_id is not None:
            pulumi.set(__self__, "protected_item_data_source_id", protected_item_data_source_id)
        if protected_item_health_status is not None:
            pulumi.set(__self__, "protected_item_health_status", protected_item_health_status)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if protection_status is not None:
            pulumi.set(__self__, "protection_status", protection_status)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        Expected value is 'AzureVmWorkloadSQLDatabase'.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs']]:
        """
        Additional information for this backup item.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['AzureVmWorkloadProtectedItemExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the DB represented by this backup item.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="isArchiveEnabled")
    def is_archive_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether datasource is protected in archive
        """
        return pulumi.get(self, "is_archive_enabled")

    @is_archive_enabled.setter
    def is_archive_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archive_enabled", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="kpisHealths")
    def kpis_healths(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]:
        """
        Health details of different KPIs
        """
        return pulumi.get(self, "kpis_healths")

    @kpis_healths.setter
    def kpis_healths(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KPIResourceHealthDetailsArgs']]]]):
        pulumi.set(self, "kpis_healths", value)

    @property
    @pulumi.getter(name="lastBackupStatus")
    def last_backup_status(self) -> Optional[pulumi.Input[Union[str, 'LastBackupStatus']]]:
        """
        Last backup operation status. Possible values: Healthy, Unhealthy.
        """
        return pulumi.get(self, "last_backup_status")

    @last_backup_status.setter
    def last_backup_status(self, value: Optional[pulumi.Input[Union[str, 'LastBackupStatus']]]):
        pulumi.set(self, "last_backup_status", value)

    @property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the last backup operation on this backup item.
        """
        return pulumi.get(self, "last_backup_time")

    @last_backup_time.setter
    def last_backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_time", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="parentName")
    def parent_name(self) -> Optional[pulumi.Input[str]]:
        """
        Parent name of the DB such as Instance or Availability Group.
        """
        return pulumi.get(self, "parent_name")

    @parent_name.setter
    def parent_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_name", value)

    @property
    @pulumi.getter(name="parentType")
    def parent_type(self) -> Optional[pulumi.Input[str]]:
        """
        Parent type of protected item, example: for a DB, standalone server or distributed
        """
        return pulumi.get(self, "parent_type")

    @parent_type.setter
    def parent_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_type", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the policy used for protection
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="protectedItemDataSourceId")
    def protected_item_data_source_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data ID of the protected item.
        """
        return pulumi.get(self, "protected_item_data_source_id")

    @protected_item_data_source_id.setter
    def protected_item_data_source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protected_item_data_source_id", value)

    @property
    @pulumi.getter(name="protectedItemHealthStatus")
    def protected_item_health_status(self) -> Optional[pulumi.Input[Union[str, 'ProtectedItemHealthStatus']]]:
        """
        Health status of the backup item, evaluated based on last heartbeat received
        """
        return pulumi.get(self, "protected_item_health_status")

    @protected_item_health_status.setter
    def protected_item_health_status(self, value: Optional[pulumi.Input[Union[str, 'ProtectedItemHealthStatus']]]):
        pulumi.set(self, "protected_item_health_status", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionState']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionState']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> Optional[pulumi.Input[str]]:
        """
        Backup status of this backup item.
        """
        return pulumi.get(self, "protection_status")

    @protection_status.setter
    def protection_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_status", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuardOperationRequests on which LAC check will be performed
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Host/Cluster Name for instance or AG
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'DataSourceType']]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'DataSourceType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class AzureWorkloadAutoProtectionIntentArgs:
    def __init__(__self__, *,
                 protection_intent_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 item_id: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionStatus']]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None):
        """
        Azure Recovery Services Vault specific protection intent item.
        :param pulumi.Input[str] protection_intent_item_type: backup protectionIntent type.
               Expected value is 'AzureWorkloadAutoProtectionIntent'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] item_id: ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[Union[str, 'ProtectionStatus']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        """
        pulumi.set(__self__, "protection_intent_item_type", 'AzureWorkloadAutoProtectionIntent')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if item_id is not None:
            pulumi.set(__self__, "item_id", item_id)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)

    @property
    @pulumi.getter(name="protectionIntentItemType")
    def protection_intent_item_type(self) -> pulumi.Input[str]:
        """
        backup protectionIntent type.
        Expected value is 'AzureWorkloadAutoProtectionIntent'.
        """
        return pulumi.get(self, "protection_intent_item_type")

    @protection_intent_item_type.setter
    def protection_intent_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protection_intent_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
        """
        return pulumi.get(self, "item_id")

    @item_id.setter
    def item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "item_id", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionStatus']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionStatus']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)


@pulumi.input_type
class AzureWorkloadContainerAutoProtectionIntentArgs:
    def __init__(__self__, *,
                 protection_intent_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 item_id: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionStatus']]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None):
        """
        Azure workload specific protection intent item.
        :param pulumi.Input[str] protection_intent_item_type: backup protectionIntent type.
               Expected value is 'AzureWorkloadContainerAutoProtectionIntent'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] item_id: ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[Union[str, 'ProtectionStatus']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        """
        pulumi.set(__self__, "protection_intent_item_type", 'AzureWorkloadContainerAutoProtectionIntent')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if item_id is not None:
            pulumi.set(__self__, "item_id", item_id)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)

    @property
    @pulumi.getter(name="protectionIntentItemType")
    def protection_intent_item_type(self) -> pulumi.Input[str]:
        """
        backup protectionIntent type.
        Expected value is 'AzureWorkloadContainerAutoProtectionIntent'.
        """
        return pulumi.get(self, "protection_intent_item_type")

    @protection_intent_item_type.setter
    def protection_intent_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protection_intent_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
        """
        return pulumi.get(self, "item_id")

    @item_id.setter
    def item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "item_id", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionStatus']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionStatus']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)


@pulumi.input_type
class AzureWorkloadContainerExtendedInfoArgs:
    def __init__(__self__, *,
                 host_server_name: Optional[pulumi.Input[str]] = None,
                 inquiry_info: Optional[pulumi.Input['InquiryInfoArgs']] = None,
                 nodes_list: Optional[pulumi.Input[Sequence[pulumi.Input['DistributedNodesInfoArgs']]]] = None):
        """
        Extended information of the container.
        :param pulumi.Input[str] host_server_name: Host Os Name in case of Stand Alone and Cluster Name in case of distributed container.
        :param pulumi.Input['InquiryInfoArgs'] inquiry_info: Inquiry Status for the container.
        :param pulumi.Input[Sequence[pulumi.Input['DistributedNodesInfoArgs']]] nodes_list: List of the nodes in case of distributed container.
        """
        if host_server_name is not None:
            pulumi.set(__self__, "host_server_name", host_server_name)
        if inquiry_info is not None:
            pulumi.set(__self__, "inquiry_info", inquiry_info)
        if nodes_list is not None:
            pulumi.set(__self__, "nodes_list", nodes_list)

    @property
    @pulumi.getter(name="hostServerName")
    def host_server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Host Os Name in case of Stand Alone and Cluster Name in case of distributed container.
        """
        return pulumi.get(self, "host_server_name")

    @host_server_name.setter
    def host_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_server_name", value)

    @property
    @pulumi.getter(name="inquiryInfo")
    def inquiry_info(self) -> Optional[pulumi.Input['InquiryInfoArgs']]:
        """
        Inquiry Status for the container.
        """
        return pulumi.get(self, "inquiry_info")

    @inquiry_info.setter
    def inquiry_info(self, value: Optional[pulumi.Input['InquiryInfoArgs']]):
        pulumi.set(self, "inquiry_info", value)

    @property
    @pulumi.getter(name="nodesList")
    def nodes_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DistributedNodesInfoArgs']]]]:
        """
        List of the nodes in case of distributed container.
        """
        return pulumi.get(self, "nodes_list")

    @nodes_list.setter
    def nodes_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DistributedNodesInfoArgs']]]]):
        pulumi.set(self, "nodes_list", value)


@pulumi.input_type
class AzureWorkloadContainerArgs:
    def __init__(__self__, *,
                 container_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 extended_info: Optional[pulumi.Input['AzureWorkloadContainerExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 last_updated_time: Optional[pulumi.Input[str]] = None,
                 operation_type: Optional[pulumi.Input[Union[str, 'OperationType']]] = None,
                 protectable_object_type: Optional[pulumi.Input[str]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'WorkloadType']]] = None):
        """
        Container for the workloads running inside Azure Compute or Classic Compute.
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
               Expected value is 'AzureWorkloadContainer'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the container.
        :param pulumi.Input['AzureWorkloadContainerExtendedInfoArgs'] extended_info: Additional details of a workload container.
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[str] last_updated_time: Time stamp when this container was updated.
        :param pulumi.Input[Union[str, 'OperationType']] operation_type: Re-Do Operation
        :param pulumi.Input[str] protectable_object_type: Type of the protectable object associated with this container
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        :param pulumi.Input[str] source_resource_id: ARM ID of the virtual machine represented by this Azure Workload Container
        :param pulumi.Input[Union[str, 'WorkloadType']] workload_type: Workload type for which registration was sent.
        """
        pulumi.set(__self__, "container_type", 'AzureWorkloadContainer')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if last_updated_time is not None:
            pulumi.set(__self__, "last_updated_time", last_updated_time)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if protectable_object_type is not None:
            pulumi.set(__self__, "protectable_object_type", protectable_object_type)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Input[str]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        Expected value is 'AzureWorkloadContainer'.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['AzureWorkloadContainerExtendedInfoArgs']]:
        """
        Additional details of a workload container.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['AzureWorkloadContainerExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="lastUpdatedTime")
    def last_updated_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time stamp when this container was updated.
        """
        return pulumi.get(self, "last_updated_time")

    @last_updated_time.setter
    def last_updated_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated_time", value)

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[pulumi.Input[Union[str, 'OperationType']]]:
        """
        Re-Do Operation
        """
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: Optional[pulumi.Input[Union[str, 'OperationType']]]):
        pulumi.set(self, "operation_type", value)

    @property
    @pulumi.getter(name="protectableObjectType")
    def protectable_object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the protectable object associated with this container
        """
        return pulumi.get(self, "protectable_object_type")

    @protectable_object_type.setter
    def protectable_object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_object_type", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the virtual machine represented by this Azure Workload Container
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'WorkloadType']]]:
        """
        Workload type for which registration was sent.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'WorkloadType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class AzureWorkloadSQLAutoProtectionIntentArgs:
    def __init__(__self__, *,
                 protection_intent_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 item_id: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionStatus']]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_item_type: Optional[pulumi.Input[Union[str, 'WorkloadItemType']]] = None):
        """
        Azure Workload SQL Auto Protection intent item.
        :param pulumi.Input[str] protection_intent_item_type: backup protectionIntent type.
               Expected value is 'AzureWorkloadSQLAutoProtectionIntent'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] item_id: ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[Union[str, 'ProtectionStatus']] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[Union[str, 'WorkloadItemType']] workload_item_type: Workload item type of the item for which intent is to be set
        """
        pulumi.set(__self__, "protection_intent_item_type", 'AzureWorkloadSQLAutoProtectionIntent')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if item_id is not None:
            pulumi.set(__self__, "item_id", item_id)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_item_type is not None:
            pulumi.set(__self__, "workload_item_type", workload_item_type)

    @property
    @pulumi.getter(name="protectionIntentItemType")
    def protection_intent_item_type(self) -> pulumi.Input[str]:
        """
        backup protectionIntent type.
        Expected value is 'AzureWorkloadSQLAutoProtectionIntent'.
        """
        return pulumi.get(self, "protection_intent_item_type")

    @protection_intent_item_type.setter
    def protection_intent_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protection_intent_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
        """
        return pulumi.get(self, "item_id")

    @item_id.setter
    def item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "item_id", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionStatus']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionStatus']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadItemType")
    def workload_item_type(self) -> Optional[pulumi.Input[Union[str, 'WorkloadItemType']]]:
        """
        Workload item type of the item for which intent is to be set
        """
        return pulumi.get(self, "workload_item_type")

    @workload_item_type.setter
    def workload_item_type(self, value: Optional[pulumi.Input[Union[str, 'WorkloadItemType']]]):
        pulumi.set(self, "workload_item_type", value)


@pulumi.input_type
class CmkKekIdentityArgs:
    def __init__(__self__, *,
                 use_system_assigned_identity: Optional[pulumi.Input[bool]] = None,
                 user_assigned_identity: Optional[pulumi.Input[str]] = None):
        """
        The details of the identity used for CMK
        :param pulumi.Input[bool] use_system_assigned_identity: Indicate that system assigned identity should be used. Mutually exclusive with 'userAssignedIdentity' field
        :param pulumi.Input[str] user_assigned_identity: The user assigned identity to be used to grant permissions in case the type of identity used is UserAssigned
        """
        if use_system_assigned_identity is not None:
            pulumi.set(__self__, "use_system_assigned_identity", use_system_assigned_identity)
        if user_assigned_identity is not None:
            pulumi.set(__self__, "user_assigned_identity", user_assigned_identity)

    @property
    @pulumi.getter(name="useSystemAssignedIdentity")
    def use_system_assigned_identity(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate that system assigned identity should be used. Mutually exclusive with 'userAssignedIdentity' field
        """
        return pulumi.get(self, "use_system_assigned_identity")

    @use_system_assigned_identity.setter
    def use_system_assigned_identity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_system_assigned_identity", value)

    @property
    @pulumi.getter(name="userAssignedIdentity")
    def user_assigned_identity(self) -> Optional[pulumi.Input[str]]:
        """
        The user assigned identity to be used to grant permissions in case the type of identity used is UserAssigned
        """
        return pulumi.get(self, "user_assigned_identity")

    @user_assigned_identity.setter
    def user_assigned_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_assigned_identity", value)


@pulumi.input_type
class CmkKeyVaultPropertiesArgs:
    def __init__(__self__, *,
                 key_uri: Optional[pulumi.Input[str]] = None):
        """
        The properties of the Key Vault which hosts CMK
        :param pulumi.Input[str] key_uri: The key uri of the Customer Managed Key
        """
        if key_uri is not None:
            pulumi.set(__self__, "key_uri", key_uri)

    @property
    @pulumi.getter(name="keyUri")
    def key_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The key uri of the Customer Managed Key
        """
        return pulumi.get(self, "key_uri")

    @key_uri.setter
    def key_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_uri", value)


@pulumi.input_type
class ContainerIdentityInfoArgs:
    def __init__(__self__, *,
                 aad_tenant_id: Optional[pulumi.Input[str]] = None,
                 audience: Optional[pulumi.Input[str]] = None,
                 service_principal_client_id: Optional[pulumi.Input[str]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None):
        """
        Container identity information
        :param pulumi.Input[str] aad_tenant_id: Protection container identity - AAD Tenant
        :param pulumi.Input[str] audience: Protection container identity - Audience
        :param pulumi.Input[str] service_principal_client_id: Protection container identity - AAD Service Principal
        :param pulumi.Input[str] unique_name: Unique name of the container
        """
        if aad_tenant_id is not None:
            pulumi.set(__self__, "aad_tenant_id", aad_tenant_id)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if service_principal_client_id is not None:
            pulumi.set(__self__, "service_principal_client_id", service_principal_client_id)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)

    @property
    @pulumi.getter(name="aadTenantId")
    def aad_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Protection container identity - AAD Tenant
        """
        return pulumi.get(self, "aad_tenant_id")

    @aad_tenant_id.setter
    def aad_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_tenant_id", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Protection container identity - Audience
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="servicePrincipalClientId")
    def service_principal_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Protection container identity - AAD Service Principal
        """
        return pulumi.get(self, "service_principal_client_id")

    @service_principal_client_id.setter
    def service_principal_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_principal_client_id", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of the container
        """
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)


@pulumi.input_type
class CreateNetworkMappingInputPropertiesArgs:
    def __init__(__self__, *,
                 recovery_network_id: pulumi.Input[str],
                 fabric_specific_details: Optional[pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']]] = None,
                 recovery_fabric_name: Optional[pulumi.Input[str]] = None):
        """
        Common input details for network mapping operation.
        :param pulumi.Input[str] recovery_network_id: Recovery network Id.
        :param pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']] fabric_specific_details: Fabric specific input properties.
        :param pulumi.Input[str] recovery_fabric_name: Recovery fabric Name.
        """
        pulumi.set(__self__, "recovery_network_id", recovery_network_id)
        if fabric_specific_details is not None:
            pulumi.set(__self__, "fabric_specific_details", fabric_specific_details)
        if recovery_fabric_name is not None:
            pulumi.set(__self__, "recovery_fabric_name", recovery_fabric_name)

    @property
    @pulumi.getter(name="recoveryNetworkId")
    def recovery_network_id(self) -> pulumi.Input[str]:
        """
        Recovery network Id.
        """
        return pulumi.get(self, "recovery_network_id")

    @recovery_network_id.setter
    def recovery_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "recovery_network_id", value)

    @property
    @pulumi.getter(name="fabricSpecificDetails")
    def fabric_specific_details(self) -> Optional[pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']]]:
        """
        Fabric specific input properties.
        """
        return pulumi.get(self, "fabric_specific_details")

    @fabric_specific_details.setter
    def fabric_specific_details(self, value: Optional[pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']]]):
        pulumi.set(self, "fabric_specific_details", value)

    @property
    @pulumi.getter(name="recoveryFabricName")
    def recovery_fabric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery fabric Name.
        """
        return pulumi.get(self, "recovery_fabric_name")

    @recovery_fabric_name.setter
    def recovery_fabric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_fabric_name", value)


@pulumi.input_type
class CreatePolicyInputPropertiesArgs:
    def __init__(__self__, *,
                 provider_specific_input: Optional[pulumi.Input[Union['A2ACrossClusterMigrationPolicyCreationInputArgs', 'A2APolicyCreationInputArgs', 'HyperVReplicaAzurePolicyInputArgs', 'HyperVReplicaBluePolicyInputArgs', 'HyperVReplicaPolicyInputArgs', 'InMageAzureV2PolicyInputArgs', 'InMagePolicyInputArgs', 'InMageRcmFailbackPolicyCreationInputArgs', 'InMageRcmPolicyCreationInputArgs', 'VMwareCbtPolicyCreationInputArgs']]] = None):
        """
        Policy creation properties.
        :param pulumi.Input[Union['A2ACrossClusterMigrationPolicyCreationInputArgs', 'A2APolicyCreationInputArgs', 'HyperVReplicaAzurePolicyInputArgs', 'HyperVReplicaBluePolicyInputArgs', 'HyperVReplicaPolicyInputArgs', 'InMageAzureV2PolicyInputArgs', 'InMagePolicyInputArgs', 'InMageRcmFailbackPolicyCreationInputArgs', 'InMageRcmPolicyCreationInputArgs', 'VMwareCbtPolicyCreationInputArgs']] provider_specific_input: The ReplicationProviderSettings.
        """
        if provider_specific_input is not None:
            pulumi.set(__self__, "provider_specific_input", provider_specific_input)

    @property
    @pulumi.getter(name="providerSpecificInput")
    def provider_specific_input(self) -> Optional[pulumi.Input[Union['A2ACrossClusterMigrationPolicyCreationInputArgs', 'A2APolicyCreationInputArgs', 'HyperVReplicaAzurePolicyInputArgs', 'HyperVReplicaBluePolicyInputArgs', 'HyperVReplicaPolicyInputArgs', 'InMageAzureV2PolicyInputArgs', 'InMagePolicyInputArgs', 'InMageRcmFailbackPolicyCreationInputArgs', 'InMageRcmPolicyCreationInputArgs', 'VMwareCbtPolicyCreationInputArgs']]]:
        """
        The ReplicationProviderSettings.
        """
        return pulumi.get(self, "provider_specific_input")

    @provider_specific_input.setter
    def provider_specific_input(self, value: Optional[pulumi.Input[Union['A2ACrossClusterMigrationPolicyCreationInputArgs', 'A2APolicyCreationInputArgs', 'HyperVReplicaAzurePolicyInputArgs', 'HyperVReplicaBluePolicyInputArgs', 'HyperVReplicaPolicyInputArgs', 'InMageAzureV2PolicyInputArgs', 'InMagePolicyInputArgs', 'InMageRcmFailbackPolicyCreationInputArgs', 'InMageRcmPolicyCreationInputArgs', 'VMwareCbtPolicyCreationInputArgs']]]):
        pulumi.set(self, "provider_specific_input", value)


@pulumi.input_type
class CreateProtectionContainerMappingInputPropertiesArgs:
    def __init__(__self__, *,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 provider_specific_input: Optional[pulumi.Input[Union['A2AContainerMappingInputArgs', 'VMwareCbtContainerMappingInputArgs']]] = None,
                 target_protection_container_id: Optional[pulumi.Input[str]] = None):
        """
        Configure pairing input properties.
        :param pulumi.Input[str] policy_id: Applicable policy.
        :param pulumi.Input[Union['A2AContainerMappingInputArgs', 'VMwareCbtContainerMappingInputArgs']] provider_specific_input: Provider specific input for pairing.
        :param pulumi.Input[str] target_protection_container_id: The target unique protection container name.
        """
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if provider_specific_input is not None:
            pulumi.set(__self__, "provider_specific_input", provider_specific_input)
        if target_protection_container_id is not None:
            pulumi.set(__self__, "target_protection_container_id", target_protection_container_id)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Applicable policy.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="providerSpecificInput")
    def provider_specific_input(self) -> Optional[pulumi.Input[Union['A2AContainerMappingInputArgs', 'VMwareCbtContainerMappingInputArgs']]]:
        """
        Provider specific input for pairing.
        """
        return pulumi.get(self, "provider_specific_input")

    @provider_specific_input.setter
    def provider_specific_input(self, value: Optional[pulumi.Input[Union['A2AContainerMappingInputArgs', 'VMwareCbtContainerMappingInputArgs']]]):
        pulumi.set(self, "provider_specific_input", value)

    @property
    @pulumi.getter(name="targetProtectionContainerId")
    def target_protection_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target unique protection container name.
        """
        return pulumi.get(self, "target_protection_container_id")

    @target_protection_container_id.setter
    def target_protection_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_protection_container_id", value)


@pulumi.input_type
class CreateRecoveryPlanInputPropertiesArgs:
    def __init__(__self__, *,
                 groups: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanGroupArgs']]],
                 primary_fabric_id: pulumi.Input[str],
                 recovery_fabric_id: pulumi.Input[str],
                 failover_deployment_model: Optional[pulumi.Input[Union[str, 'FailoverDeploymentModel']]] = None,
                 provider_specific_input: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanA2AInputArgs']]]] = None):
        """
        Recovery plan creation properties.
        :param pulumi.Input[Sequence[pulumi.Input['RecoveryPlanGroupArgs']]] groups: The recovery plan groups.
        :param pulumi.Input[str] primary_fabric_id: The primary fabric Id.
        :param pulumi.Input[str] recovery_fabric_id: The recovery fabric Id.
        :param pulumi.Input[Union[str, 'FailoverDeploymentModel']] failover_deployment_model: The failover deployment model.
        :param pulumi.Input[Sequence[pulumi.Input['RecoveryPlanA2AInputArgs']]] provider_specific_input: The provider specific input.
        """
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "primary_fabric_id", primary_fabric_id)
        pulumi.set(__self__, "recovery_fabric_id", recovery_fabric_id)
        if failover_deployment_model is not None:
            pulumi.set(__self__, "failover_deployment_model", failover_deployment_model)
        if provider_specific_input is not None:
            pulumi.set(__self__, "provider_specific_input", provider_specific_input)

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Input[Sequence[pulumi.Input['RecoveryPlanGroupArgs']]]:
        """
        The recovery plan groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanGroupArgs']]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="primaryFabricId")
    def primary_fabric_id(self) -> pulumi.Input[str]:
        """
        The primary fabric Id.
        """
        return pulumi.get(self, "primary_fabric_id")

    @primary_fabric_id.setter
    def primary_fabric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_fabric_id", value)

    @property
    @pulumi.getter(name="recoveryFabricId")
    def recovery_fabric_id(self) -> pulumi.Input[str]:
        """
        The recovery fabric Id.
        """
        return pulumi.get(self, "recovery_fabric_id")

    @recovery_fabric_id.setter
    def recovery_fabric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "recovery_fabric_id", value)

    @property
    @pulumi.getter(name="failoverDeploymentModel")
    def failover_deployment_model(self) -> Optional[pulumi.Input[Union[str, 'FailoverDeploymentModel']]]:
        """
        The failover deployment model.
        """
        return pulumi.get(self, "failover_deployment_model")

    @failover_deployment_model.setter
    def failover_deployment_model(self, value: Optional[pulumi.Input[Union[str, 'FailoverDeploymentModel']]]):
        pulumi.set(self, "failover_deployment_model", value)

    @property
    @pulumi.getter(name="providerSpecificInput")
    def provider_specific_input(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanA2AInputArgs']]]]:
        """
        The provider specific input.
        """
        return pulumi.get(self, "provider_specific_input")

    @provider_specific_input.setter
    def provider_specific_input(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanA2AInputArgs']]]]):
        pulumi.set(self, "provider_specific_input", value)


@pulumi.input_type
class DPMContainerExtendedInfoArgs:
    def __init__(__self__, *,
                 last_refreshed_at: Optional[pulumi.Input[str]] = None):
        """
        Additional information of the DPMContainer.
        :param pulumi.Input[str] last_refreshed_at: Last refresh time of the DPMContainer.
        """
        if last_refreshed_at is not None:
            pulumi.set(__self__, "last_refreshed_at", last_refreshed_at)

    @property
    @pulumi.getter(name="lastRefreshedAt")
    def last_refreshed_at(self) -> Optional[pulumi.Input[str]]:
        """
        Last refresh time of the DPMContainer.
        """
        return pulumi.get(self, "last_refreshed_at")

    @last_refreshed_at.setter
    def last_refreshed_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_refreshed_at", value)


@pulumi.input_type
class DPMProtectedItemExtendedInfoArgs:
    def __init__(__self__, *,
                 disk_storage_used_in_bytes: Optional[pulumi.Input[str]] = None,
                 is_collocated: Optional[pulumi.Input[bool]] = None,
                 is_present_on_cloud: Optional[pulumi.Input[bool]] = None,
                 last_backup_status: Optional[pulumi.Input[str]] = None,
                 last_refreshed_at: Optional[pulumi.Input[str]] = None,
                 oldest_recovery_point: Optional[pulumi.Input[str]] = None,
                 on_premise_latest_recovery_point: Optional[pulumi.Input[str]] = None,
                 on_premise_oldest_recovery_point: Optional[pulumi.Input[str]] = None,
                 on_premise_recovery_point_count: Optional[pulumi.Input[int]] = None,
                 protectable_object_load_path: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 protected: Optional[pulumi.Input[bool]] = None,
                 protection_group_name: Optional[pulumi.Input[str]] = None,
                 recovery_point_count: Optional[pulumi.Input[int]] = None,
                 total_disk_storage_size_in_bytes: Optional[pulumi.Input[str]] = None):
        """
        Additional information of DPM Protected item.
        :param pulumi.Input[str] disk_storage_used_in_bytes: Used Disk storage in bytes.
        :param pulumi.Input[bool] is_collocated: To check if backup item is collocated.
        :param pulumi.Input[bool] is_present_on_cloud: To check if backup item is cloud protected.
        :param pulumi.Input[str] last_backup_status: Last backup status information on backup item.
        :param pulumi.Input[str] last_refreshed_at: Last refresh time on backup item.
        :param pulumi.Input[str] oldest_recovery_point: Oldest cloud recovery point time.
        :param pulumi.Input[str] on_premise_latest_recovery_point: latest disk recovery point time.
        :param pulumi.Input[str] on_premise_oldest_recovery_point: Oldest disk recovery point time.
        :param pulumi.Input[int] on_premise_recovery_point_count: disk recovery point count.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] protectable_object_load_path: Attribute to provide information on various DBs.
        :param pulumi.Input[bool] protected: To check if backup item is disk protected.
        :param pulumi.Input[str] protection_group_name: Protection group name of the backup item.
        :param pulumi.Input[int] recovery_point_count: cloud recovery point count.
        :param pulumi.Input[str] total_disk_storage_size_in_bytes: total Disk storage in bytes.
        """
        if disk_storage_used_in_bytes is not None:
            pulumi.set(__self__, "disk_storage_used_in_bytes", disk_storage_used_in_bytes)
        if is_collocated is not None:
            pulumi.set(__self__, "is_collocated", is_collocated)
        if is_present_on_cloud is not None:
            pulumi.set(__self__, "is_present_on_cloud", is_present_on_cloud)
        if last_backup_status is not None:
            pulumi.set(__self__, "last_backup_status", last_backup_status)
        if last_refreshed_at is not None:
            pulumi.set(__self__, "last_refreshed_at", last_refreshed_at)
        if oldest_recovery_point is not None:
            pulumi.set(__self__, "oldest_recovery_point", oldest_recovery_point)
        if on_premise_latest_recovery_point is not None:
            pulumi.set(__self__, "on_premise_latest_recovery_point", on_premise_latest_recovery_point)
        if on_premise_oldest_recovery_point is not None:
            pulumi.set(__self__, "on_premise_oldest_recovery_point", on_premise_oldest_recovery_point)
        if on_premise_recovery_point_count is not None:
            pulumi.set(__self__, "on_premise_recovery_point_count", on_premise_recovery_point_count)
        if protectable_object_load_path is not None:
            pulumi.set(__self__, "protectable_object_load_path", protectable_object_load_path)
        if protected is not None:
            pulumi.set(__self__, "protected", protected)
        if protection_group_name is not None:
            pulumi.set(__self__, "protection_group_name", protection_group_name)
        if recovery_point_count is not None:
            pulumi.set(__self__, "recovery_point_count", recovery_point_count)
        if total_disk_storage_size_in_bytes is not None:
            pulumi.set(__self__, "total_disk_storage_size_in_bytes", total_disk_storage_size_in_bytes)

    @property
    @pulumi.getter(name="diskStorageUsedInBytes")
    def disk_storage_used_in_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        Used Disk storage in bytes.
        """
        return pulumi.get(self, "disk_storage_used_in_bytes")

    @disk_storage_used_in_bytes.setter
    def disk_storage_used_in_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_storage_used_in_bytes", value)

    @property
    @pulumi.getter(name="isCollocated")
    def is_collocated(self) -> Optional[pulumi.Input[bool]]:
        """
        To check if backup item is collocated.
        """
        return pulumi.get(self, "is_collocated")

    @is_collocated.setter
    def is_collocated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_collocated", value)

    @property
    @pulumi.getter(name="isPresentOnCloud")
    def is_present_on_cloud(self) -> Optional[pulumi.Input[bool]]:
        """
        To check if backup item is cloud protected.
        """
        return pulumi.get(self, "is_present_on_cloud")

    @is_present_on_cloud.setter
    def is_present_on_cloud(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_present_on_cloud", value)

    @property
    @pulumi.getter(name="lastBackupStatus")
    def last_backup_status(self) -> Optional[pulumi.Input[str]]:
        """
        Last backup status information on backup item.
        """
        return pulumi.get(self, "last_backup_status")

    @last_backup_status.setter
    def last_backup_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_status", value)

    @property
    @pulumi.getter(name="lastRefreshedAt")
    def last_refreshed_at(self) -> Optional[pulumi.Input[str]]:
        """
        Last refresh time on backup item.
        """
        return pulumi.get(self, "last_refreshed_at")

    @last_refreshed_at.setter
    def last_refreshed_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_refreshed_at", value)

    @property
    @pulumi.getter(name="oldestRecoveryPoint")
    def oldest_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Oldest cloud recovery point time.
        """
        return pulumi.get(self, "oldest_recovery_point")

    @oldest_recovery_point.setter
    def oldest_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oldest_recovery_point", value)

    @property
    @pulumi.getter(name="onPremiseLatestRecoveryPoint")
    def on_premise_latest_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        latest disk recovery point time.
        """
        return pulumi.get(self, "on_premise_latest_recovery_point")

    @on_premise_latest_recovery_point.setter
    def on_premise_latest_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_premise_latest_recovery_point", value)

    @property
    @pulumi.getter(name="onPremiseOldestRecoveryPoint")
    def on_premise_oldest_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Oldest disk recovery point time.
        """
        return pulumi.get(self, "on_premise_oldest_recovery_point")

    @on_premise_oldest_recovery_point.setter
    def on_premise_oldest_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_premise_oldest_recovery_point", value)

    @property
    @pulumi.getter(name="onPremiseRecoveryPointCount")
    def on_premise_recovery_point_count(self) -> Optional[pulumi.Input[int]]:
        """
        disk recovery point count.
        """
        return pulumi.get(self, "on_premise_recovery_point_count")

    @on_premise_recovery_point_count.setter
    def on_premise_recovery_point_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "on_premise_recovery_point_count", value)

    @property
    @pulumi.getter(name="protectableObjectLoadPath")
    def protectable_object_load_path(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Attribute to provide information on various DBs.
        """
        return pulumi.get(self, "protectable_object_load_path")

    @protectable_object_load_path.setter
    def protectable_object_load_path(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "protectable_object_load_path", value)

    @property
    @pulumi.getter
    def protected(self) -> Optional[pulumi.Input[bool]]:
        """
        To check if backup item is disk protected.
        """
        return pulumi.get(self, "protected")

    @protected.setter
    def protected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "protected", value)

    @property
    @pulumi.getter(name="protectionGroupName")
    def protection_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Protection group name of the backup item.
        """
        return pulumi.get(self, "protection_group_name")

    @protection_group_name.setter
    def protection_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_group_name", value)

    @property
    @pulumi.getter(name="recoveryPointCount")
    def recovery_point_count(self) -> Optional[pulumi.Input[int]]:
        """
        cloud recovery point count.
        """
        return pulumi.get(self, "recovery_point_count")

    @recovery_point_count.setter
    def recovery_point_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_count", value)

    @property
    @pulumi.getter(name="totalDiskStorageSizeInBytes")
    def total_disk_storage_size_in_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        total Disk storage in bytes.
        """
        return pulumi.get(self, "total_disk_storage_size_in_bytes")

    @total_disk_storage_size_in_bytes.setter
    def total_disk_storage_size_in_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "total_disk_storage_size_in_bytes", value)


@pulumi.input_type
class DPMProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_engine_name: Optional[pulumi.Input[str]] = None,
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 extended_info: Optional[pulumi.Input['DPMProtectedItemExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 is_archive_enabled: Optional[pulumi.Input[bool]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectedItemState']]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'DataSourceType']]] = None):
        """
        Additional information on Backup engine specific backup item.
        :param pulumi.Input[str] protected_item_type: backup item type.
               Expected value is 'DPMProtectedItem'.
        :param pulumi.Input[str] backup_engine_name: Backup Management server protecting this backup item
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input['DPMProtectedItemExtendedInfoArgs'] extended_info: Extended info of the backup item.
        :param pulumi.Input[str] friendly_name: Friendly name of the managed item
        :param pulumi.Input[bool] is_archive_enabled: Flag to identify whether datasource is protected in archive
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] policy_name: Name of the policy used for protection
        :param pulumi.Input[Union[str, 'ProtectedItemState']] protection_state: Protection state of the backup engine
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuardOperationRequests on which LAC check will be performed
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[Union[str, 'DataSourceType']] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", 'DPMProtectedItem')
        if backup_engine_name is not None:
            pulumi.set(__self__, "backup_engine_name", backup_engine_name)
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if is_archive_enabled is not None:
            pulumi.set(__self__, "is_archive_enabled", is_archive_enabled)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        Expected value is 'DPMProtectedItem'.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupEngineName")
    def backup_engine_name(self) -> Optional[pulumi.Input[str]]:
        """
        Backup Management server protecting this backup item
        """
        return pulumi.get(self, "backup_engine_name")

    @backup_engine_name.setter
    def backup_engine_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_engine_name", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['DPMProtectedItemExtendedInfoArgs']]:
        """
        Extended info of the backup item.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['DPMProtectedItemExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the managed item
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="isArchiveEnabled")
    def is_archive_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether datasource is protected in archive
        """
        return pulumi.get(self, "is_archive_enabled")

    @is_archive_enabled.setter
    def is_archive_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archive_enabled", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the policy used for protection
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectedItemState']]]:
        """
        Protection state of the backup engine
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectedItemState']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuardOperationRequests on which LAC check will be performed
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'DataSourceType']]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'DataSourceType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class DailyRetentionFormatArgs:
    def __init__(__self__, *,
                 days_of_the_month: Optional[pulumi.Input[Sequence[pulumi.Input['DayArgs']]]] = None):
        """
        Daily retention format.
        :param pulumi.Input[Sequence[pulumi.Input['DayArgs']]] days_of_the_month: List of days of the month.
        """
        if days_of_the_month is not None:
            pulumi.set(__self__, "days_of_the_month", days_of_the_month)

    @property
    @pulumi.getter(name="daysOfTheMonth")
    def days_of_the_month(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DayArgs']]]]:
        """
        List of days of the month.
        """
        return pulumi.get(self, "days_of_the_month")

    @days_of_the_month.setter
    def days_of_the_month(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DayArgs']]]]):
        pulumi.set(self, "days_of_the_month", value)


@pulumi.input_type
class DailyRetentionScheduleArgs:
    def __init__(__self__, *,
                 retention_duration: Optional[pulumi.Input['RetentionDurationArgs']] = None,
                 retention_times: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Daily retention schedule.
        :param pulumi.Input['RetentionDurationArgs'] retention_duration: Retention duration of retention Policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] retention_times: Retention times of retention policy.
        """
        if retention_duration is not None:
            pulumi.set(__self__, "retention_duration", retention_duration)
        if retention_times is not None:
            pulumi.set(__self__, "retention_times", retention_times)

    @property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional[pulumi.Input['RetentionDurationArgs']]:
        """
        Retention duration of retention Policy.
        """
        return pulumi.get(self, "retention_duration")

    @retention_duration.setter
    def retention_duration(self, value: Optional[pulumi.Input['RetentionDurationArgs']]):
        pulumi.set(self, "retention_duration", value)

    @property
    @pulumi.getter(name="retentionTimes")
    def retention_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Retention times of retention policy.
        """
        return pulumi.get(self, "retention_times")

    @retention_times.setter
    def retention_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "retention_times", value)


@pulumi.input_type
class DailyScheduleArgs:
    def __init__(__self__, *,
                 schedule_run_times: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] schedule_run_times: List of times of day this schedule has to be run.
        """
        if schedule_run_times is not None:
            pulumi.set(__self__, "schedule_run_times", schedule_run_times)

    @property
    @pulumi.getter(name="scheduleRunTimes")
    def schedule_run_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of times of day this schedule has to be run.
        """
        return pulumi.get(self, "schedule_run_times")

    @schedule_run_times.setter
    def schedule_run_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schedule_run_times", value)


@pulumi.input_type
class DayArgs:
    def __init__(__self__, *,
                 date: Optional[pulumi.Input[int]] = None,
                 is_last: Optional[pulumi.Input[bool]] = None):
        """
        Day of the week.
        :param pulumi.Input[int] date: Date of the month
        :param pulumi.Input[bool] is_last: Whether Date is last date of month
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if is_last is not None:
            pulumi.set(__self__, "is_last", is_last)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[int]]:
        """
        Date of the month
        """
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter(name="isLast")
    def is_last(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether Date is last date of month
        """
        return pulumi.get(self, "is_last")

    @is_last.setter
    def is_last(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_last", value)


@pulumi.input_type
class DiskEncryptionInfoArgs:
    def __init__(__self__, *,
                 disk_encryption_key_info: Optional[pulumi.Input['DiskEncryptionKeyInfoArgs']] = None,
                 key_encryption_key_info: Optional[pulumi.Input['KeyEncryptionKeyInfoArgs']] = None):
        """
        Recovery disk encryption info (BEK and KEK).
        :param pulumi.Input['DiskEncryptionKeyInfoArgs'] disk_encryption_key_info: The recovery KeyVault reference for secret.
        :param pulumi.Input['KeyEncryptionKeyInfoArgs'] key_encryption_key_info: The recovery KeyVault reference for key.
        """
        if disk_encryption_key_info is not None:
            pulumi.set(__self__, "disk_encryption_key_info", disk_encryption_key_info)
        if key_encryption_key_info is not None:
            pulumi.set(__self__, "key_encryption_key_info", key_encryption_key_info)

    @property
    @pulumi.getter(name="diskEncryptionKeyInfo")
    def disk_encryption_key_info(self) -> Optional[pulumi.Input['DiskEncryptionKeyInfoArgs']]:
        """
        The recovery KeyVault reference for secret.
        """
        return pulumi.get(self, "disk_encryption_key_info")

    @disk_encryption_key_info.setter
    def disk_encryption_key_info(self, value: Optional[pulumi.Input['DiskEncryptionKeyInfoArgs']]):
        pulumi.set(self, "disk_encryption_key_info", value)

    @property
    @pulumi.getter(name="keyEncryptionKeyInfo")
    def key_encryption_key_info(self) -> Optional[pulumi.Input['KeyEncryptionKeyInfoArgs']]:
        """
        The recovery KeyVault reference for key.
        """
        return pulumi.get(self, "key_encryption_key_info")

    @key_encryption_key_info.setter
    def key_encryption_key_info(self, value: Optional[pulumi.Input['KeyEncryptionKeyInfoArgs']]):
        pulumi.set(self, "key_encryption_key_info", value)


@pulumi.input_type
class DiskEncryptionKeyInfoArgs:
    def __init__(__self__, *,
                 key_vault_resource_arm_id: Optional[pulumi.Input[str]] = None,
                 secret_identifier: Optional[pulumi.Input[str]] = None):
        """
        Disk Encryption Key Information (BitLocker Encryption Key (BEK) on Windows).
        :param pulumi.Input[str] key_vault_resource_arm_id: The KeyVault resource ARM id for secret.
        :param pulumi.Input[str] secret_identifier: The secret url / identifier.
        """
        if key_vault_resource_arm_id is not None:
            pulumi.set(__self__, "key_vault_resource_arm_id", key_vault_resource_arm_id)
        if secret_identifier is not None:
            pulumi.set(__self__, "secret_identifier", secret_identifier)

    @property
    @pulumi.getter(name="keyVaultResourceArmId")
    def key_vault_resource_arm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The KeyVault resource ARM id for secret.
        """
        return pulumi.get(self, "key_vault_resource_arm_id")

    @key_vault_resource_arm_id.setter
    def key_vault_resource_arm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_resource_arm_id", value)

    @property
    @pulumi.getter(name="secretIdentifier")
    def secret_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The secret url / identifier.
        """
        return pulumi.get(self, "secret_identifier")

    @secret_identifier.setter
    def secret_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_identifier", value)


@pulumi.input_type
class DiskExclusionPropertiesArgs:
    def __init__(__self__, *,
                 disk_lun_list: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 is_inclusion_list: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] disk_lun_list: List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
        :param pulumi.Input[bool] is_inclusion_list: Flag to indicate whether DiskLunList is to be included/ excluded from backup.
        """
        if disk_lun_list is not None:
            pulumi.set(__self__, "disk_lun_list", disk_lun_list)
        if is_inclusion_list is not None:
            pulumi.set(__self__, "is_inclusion_list", is_inclusion_list)

    @property
    @pulumi.getter(name="diskLunList")
    def disk_lun_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
        """
        return pulumi.get(self, "disk_lun_list")

    @disk_lun_list.setter
    def disk_lun_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "disk_lun_list", value)

    @property
    @pulumi.getter(name="isInclusionList")
    def is_inclusion_list(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to indicate whether DiskLunList is to be included/ excluded from backup.
        """
        return pulumi.get(self, "is_inclusion_list")

    @is_inclusion_list.setter
    def is_inclusion_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_inclusion_list", value)


@pulumi.input_type
class DistributedNodesInfoArgs:
    def __init__(__self__, *,
                 node_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        This is used to represent the various nodes of the distributed container.
        :param pulumi.Input[str] node_name: Name of the node under a distributed container.
        :param pulumi.Input[str] status: Status of this Node.
               Failed | Succeeded
        """
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the node under a distributed container.
        """
        return pulumi.get(self, "node_name")

    @node_name.setter
    def node_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of this Node.
        Failed | Succeeded
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DpmContainerArgs:
    def __init__(__self__, *,
                 container_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 can_re_register: Optional[pulumi.Input[bool]] = None,
                 container_id: Optional[pulumi.Input[str]] = None,
                 dpm_agent_version: Optional[pulumi.Input[str]] = None,
                 dpm_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extended_info: Optional[pulumi.Input['DPMContainerExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 protectable_object_type: Optional[pulumi.Input[str]] = None,
                 protected_item_count: Optional[pulumi.Input[float]] = None,
                 protection_status: Optional[pulumi.Input[str]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None,
                 upgrade_available: Optional[pulumi.Input[bool]] = None):
        """
        DPM workload-specific protection container.
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
               Expected value is 'DPMContainer'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the container.
        :param pulumi.Input[bool] can_re_register: Specifies whether the container is re-registrable.
        :param pulumi.Input[str] container_id: ID of container.
        :param pulumi.Input[str] dpm_agent_version: Backup engine Agent version
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dpm_servers: List of BackupEngines protecting the container
        :param pulumi.Input['DPMContainerExtendedInfoArgs'] extended_info: Extended Info of the container.
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[str] protectable_object_type: Type of the protectable object associated with this container
        :param pulumi.Input[float] protected_item_count: Number of protected items in the BackupEngine
        :param pulumi.Input[str] protection_status: Protection status of the container.
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        :param pulumi.Input[bool] upgrade_available: To check if upgrade available
        """
        pulumi.set(__self__, "container_type", 'DPMContainer')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if can_re_register is not None:
            pulumi.set(__self__, "can_re_register", can_re_register)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if dpm_agent_version is not None:
            pulumi.set(__self__, "dpm_agent_version", dpm_agent_version)
        if dpm_servers is not None:
            pulumi.set(__self__, "dpm_servers", dpm_servers)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if protectable_object_type is not None:
            pulumi.set(__self__, "protectable_object_type", protectable_object_type)
        if protected_item_count is not None:
            pulumi.set(__self__, "protected_item_count", protected_item_count)
        if protection_status is not None:
            pulumi.set(__self__, "protection_status", protection_status)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)
        if upgrade_available is not None:
            pulumi.set(__self__, "upgrade_available", upgrade_available)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Input[str]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        Expected value is 'DPMContainer'.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="canReRegister")
    def can_re_register(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the container is re-registrable.
        """
        return pulumi.get(self, "can_re_register")

    @can_re_register.setter
    def can_re_register(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_re_register", value)

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of container.
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="dpmAgentVersion")
    def dpm_agent_version(self) -> Optional[pulumi.Input[str]]:
        """
        Backup engine Agent version
        """
        return pulumi.get(self, "dpm_agent_version")

    @dpm_agent_version.setter
    def dpm_agent_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpm_agent_version", value)

    @property
    @pulumi.getter(name="dpmServers")
    def dpm_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of BackupEngines protecting the container
        """
        return pulumi.get(self, "dpm_servers")

    @dpm_servers.setter
    def dpm_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dpm_servers", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['DPMContainerExtendedInfoArgs']]:
        """
        Extended Info of the container.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['DPMContainerExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="protectableObjectType")
    def protectable_object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the protectable object associated with this container
        """
        return pulumi.get(self, "protectable_object_type")

    @protectable_object_type.setter
    def protectable_object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_object_type", value)

    @property
    @pulumi.getter(name="protectedItemCount")
    def protected_item_count(self) -> Optional[pulumi.Input[float]]:
        """
        Number of protected items in the BackupEngine
        """
        return pulumi.get(self, "protected_item_count")

    @protected_item_count.setter
    def protected_item_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "protected_item_count", value)

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> Optional[pulumi.Input[str]]:
        """
        Protection status of the container.
        """
        return pulumi.get(self, "protection_status")

    @protection_status.setter
    def protection_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_status", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)

    @property
    @pulumi.getter(name="upgradeAvailable")
    def upgrade_available(self) -> Optional[pulumi.Input[bool]]:
        """
        To check if upgrade available
        """
        return pulumi.get(self, "upgrade_available")

    @upgrade_available.setter
    def upgrade_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_available", value)


@pulumi.input_type
class EnableMigrationInputPropertiesArgs:
    def __init__(__self__, *,
                 policy_id: pulumi.Input[str],
                 provider_specific_details: pulumi.Input['VMwareCbtEnableMigrationInputArgs']):
        """
        Enable migration input properties.
        :param pulumi.Input[str] policy_id: The policy Id.
        :param pulumi.Input['VMwareCbtEnableMigrationInputArgs'] provider_specific_details: The provider specific details.
        """
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "provider_specific_details", provider_specific_details)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[str]:
        """
        The policy Id.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="providerSpecificDetails")
    def provider_specific_details(self) -> pulumi.Input['VMwareCbtEnableMigrationInputArgs']:
        """
        The provider specific details.
        """
        return pulumi.get(self, "provider_specific_details")

    @provider_specific_details.setter
    def provider_specific_details(self, value: pulumi.Input['VMwareCbtEnableMigrationInputArgs']):
        pulumi.set(self, "provider_specific_details", value)


@pulumi.input_type
class EnableProtectionInputPropertiesArgs:
    def __init__(__self__, *,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 protectable_item_id: Optional[pulumi.Input[str]] = None,
                 provider_specific_details: Optional[pulumi.Input[Union['A2ACrossClusterMigrationEnableProtectionInputArgs', 'A2AEnableProtectionInputArgs', 'HyperVReplicaAzureEnableProtectionInputArgs', 'InMageAzureV2EnableProtectionInputArgs', 'InMageEnableProtectionInputArgs', 'InMageRcmEnableProtectionInputArgs']]] = None):
        """
        Enable protection input properties.
        :param pulumi.Input[str] policy_id: The Policy Id.
        :param pulumi.Input[str] protectable_item_id: The protectable item Id.
        :param pulumi.Input[Union['A2ACrossClusterMigrationEnableProtectionInputArgs', 'A2AEnableProtectionInputArgs', 'HyperVReplicaAzureEnableProtectionInputArgs', 'InMageAzureV2EnableProtectionInputArgs', 'InMageEnableProtectionInputArgs', 'InMageRcmEnableProtectionInputArgs']] provider_specific_details: The ReplicationProviderInput. For HyperVReplicaAzure provider, it will be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For HyperVReplicaAzure provider, it can be null.
        """
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protectable_item_id is not None:
            pulumi.set(__self__, "protectable_item_id", protectable_item_id)
        if provider_specific_details is not None:
            pulumi.set(__self__, "provider_specific_details", provider_specific_details)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Policy Id.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="protectableItemId")
    def protectable_item_id(self) -> Optional[pulumi.Input[str]]:
        """
        The protectable item Id.
        """
        return pulumi.get(self, "protectable_item_id")

    @protectable_item_id.setter
    def protectable_item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_item_id", value)

    @property
    @pulumi.getter(name="providerSpecificDetails")
    def provider_specific_details(self) -> Optional[pulumi.Input[Union['A2ACrossClusterMigrationEnableProtectionInputArgs', 'A2AEnableProtectionInputArgs', 'HyperVReplicaAzureEnableProtectionInputArgs', 'InMageAzureV2EnableProtectionInputArgs', 'InMageEnableProtectionInputArgs', 'InMageRcmEnableProtectionInputArgs']]]:
        """
        The ReplicationProviderInput. For HyperVReplicaAzure provider, it will be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For HyperVReplicaAzure provider, it can be null.
        """
        return pulumi.get(self, "provider_specific_details")

    @provider_specific_details.setter
    def provider_specific_details(self, value: Optional[pulumi.Input[Union['A2ACrossClusterMigrationEnableProtectionInputArgs', 'A2AEnableProtectionInputArgs', 'HyperVReplicaAzureEnableProtectionInputArgs', 'InMageAzureV2EnableProtectionInputArgs', 'InMageEnableProtectionInputArgs', 'InMageRcmEnableProtectionInputArgs']]]):
        pulumi.set(self, "provider_specific_details", value)


@pulumi.input_type
class ExtendedLocationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[Union[str, 'ExtendedLocationType']]):
        """
        Extended location of the resource.
        :param pulumi.Input[str] name: The name of the extended location.
        :param pulumi.Input[Union[str, 'ExtendedLocationType']] type: The extended location type.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the extended location.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ExtendedLocationType']]:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ExtendedLocationType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ExtendedPropertiesArgs:
    def __init__(__self__, *,
                 disk_exclusion_properties: Optional[pulumi.Input['DiskExclusionPropertiesArgs']] = None,
                 linux_vm_application_name: Optional[pulumi.Input[str]] = None):
        """
        Extended Properties for Azure IaasVM Backup.
        :param pulumi.Input['DiskExclusionPropertiesArgs'] disk_exclusion_properties: Extended Properties for Disk Exclusion.
        :param pulumi.Input[str] linux_vm_application_name: Linux VM name
        """
        if disk_exclusion_properties is not None:
            pulumi.set(__self__, "disk_exclusion_properties", disk_exclusion_properties)
        if linux_vm_application_name is not None:
            pulumi.set(__self__, "linux_vm_application_name", linux_vm_application_name)

    @property
    @pulumi.getter(name="diskExclusionProperties")
    def disk_exclusion_properties(self) -> Optional[pulumi.Input['DiskExclusionPropertiesArgs']]:
        """
        Extended Properties for Disk Exclusion.
        """
        return pulumi.get(self, "disk_exclusion_properties")

    @disk_exclusion_properties.setter
    def disk_exclusion_properties(self, value: Optional[pulumi.Input['DiskExclusionPropertiesArgs']]):
        pulumi.set(self, "disk_exclusion_properties", value)

    @property
    @pulumi.getter(name="linuxVmApplicationName")
    def linux_vm_application_name(self) -> Optional[pulumi.Input[str]]:
        """
        Linux VM name
        """
        return pulumi.get(self, "linux_vm_application_name")

    @linux_vm_application_name.setter
    def linux_vm_application_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linux_vm_application_name", value)


@pulumi.input_type
class FabricCreationInputPropertiesArgs:
    def __init__(__self__, *,
                 custom_details: Optional[pulumi.Input[Union['AzureFabricCreationInputArgs', 'InMageRcmFabricCreationInputArgs', 'VMwareV2FabricCreationInputArgs']]] = None):
        """
        Properties of site details provided during the time of site creation.
        :param pulumi.Input[Union['AzureFabricCreationInputArgs', 'InMageRcmFabricCreationInputArgs', 'VMwareV2FabricCreationInputArgs']] custom_details: Fabric provider specific creation input.
        """
        if custom_details is not None:
            pulumi.set(__self__, "custom_details", custom_details)

    @property
    @pulumi.getter(name="customDetails")
    def custom_details(self) -> Optional[pulumi.Input[Union['AzureFabricCreationInputArgs', 'InMageRcmFabricCreationInputArgs', 'VMwareV2FabricCreationInputArgs']]]:
        """
        Fabric provider specific creation input.
        """
        return pulumi.get(self, "custom_details")

    @custom_details.setter
    def custom_details(self, value: Optional[pulumi.Input[Union['AzureFabricCreationInputArgs', 'InMageRcmFabricCreationInputArgs', 'VMwareV2FabricCreationInputArgs']]]):
        pulumi.set(self, "custom_details", value)


@pulumi.input_type
class GenericContainerExtendedInfoArgs:
    def __init__(__self__, *,
                 container_identity_info: Optional[pulumi.Input['ContainerIdentityInfoArgs']] = None,
                 raw_cert_data: Optional[pulumi.Input[str]] = None,
                 service_endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Container extended information
        :param pulumi.Input['ContainerIdentityInfoArgs'] container_identity_info: Container identity information
        :param pulumi.Input[str] raw_cert_data: Public key of container cert
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_endpoints: Azure Backup Service Endpoints for the container
        """
        if container_identity_info is not None:
            pulumi.set(__self__, "container_identity_info", container_identity_info)
        if raw_cert_data is not None:
            pulumi.set(__self__, "raw_cert_data", raw_cert_data)
        if service_endpoints is not None:
            pulumi.set(__self__, "service_endpoints", service_endpoints)

    @property
    @pulumi.getter(name="containerIdentityInfo")
    def container_identity_info(self) -> Optional[pulumi.Input['ContainerIdentityInfoArgs']]:
        """
        Container identity information
        """
        return pulumi.get(self, "container_identity_info")

    @container_identity_info.setter
    def container_identity_info(self, value: Optional[pulumi.Input['ContainerIdentityInfoArgs']]):
        pulumi.set(self, "container_identity_info", value)

    @property
    @pulumi.getter(name="rawCertData")
    def raw_cert_data(self) -> Optional[pulumi.Input[str]]:
        """
        Public key of container cert
        """
        return pulumi.get(self, "raw_cert_data")

    @raw_cert_data.setter
    def raw_cert_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_cert_data", value)

    @property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Azure Backup Service Endpoints for the container
        """
        return pulumi.get(self, "service_endpoints")

    @service_endpoints.setter
    def service_endpoints(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service_endpoints", value)


@pulumi.input_type
class GenericContainerArgs:
    def __init__(__self__, *,
                 container_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 extended_information: Optional[pulumi.Input['GenericContainerExtendedInfoArgs']] = None,
                 fabric_name: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 protectable_object_type: Optional[pulumi.Input[str]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None):
        """
        Base class for generic container of backup items
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
               Expected value is 'GenericContainer'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the container.
        :param pulumi.Input['GenericContainerExtendedInfoArgs'] extended_information: Extended information (not returned in List container API calls)
        :param pulumi.Input[str] fabric_name: Name of the container's fabric
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[str] protectable_object_type: Type of the protectable object associated with this container
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        """
        pulumi.set(__self__, "container_type", 'GenericContainer')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if extended_information is not None:
            pulumi.set(__self__, "extended_information", extended_information)
        if fabric_name is not None:
            pulumi.set(__self__, "fabric_name", fabric_name)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if protectable_object_type is not None:
            pulumi.set(__self__, "protectable_object_type", protectable_object_type)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Input[str]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        Expected value is 'GenericContainer'.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="extendedInformation")
    def extended_information(self) -> Optional[pulumi.Input['GenericContainerExtendedInfoArgs']]:
        """
        Extended information (not returned in List container API calls)
        """
        return pulumi.get(self, "extended_information")

    @extended_information.setter
    def extended_information(self, value: Optional[pulumi.Input['GenericContainerExtendedInfoArgs']]):
        pulumi.set(self, "extended_information", value)

    @property
    @pulumi.getter(name="fabricName")
    def fabric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the container's fabric
        """
        return pulumi.get(self, "fabric_name")

    @fabric_name.setter
    def fabric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_name", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="protectableObjectType")
    def protectable_object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the protectable object associated with this container
        """
        return pulumi.get(self, "protectable_object_type")

    @protectable_object_type.setter
    def protectable_object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_object_type", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)


@pulumi.input_type
class GenericProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 fabric_name: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 is_archive_enabled: Optional[pulumi.Input[bool]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 policy_state: Optional[pulumi.Input[str]] = None,
                 protected_item_id: Optional[pulumi.Input[float]] = None,
                 protection_state: Optional[pulumi.Input[Union[str, 'ProtectionState']]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_associations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'DataSourceType']]] = None):
        """
        Base class for backup items.
        :param pulumi.Input[str] protected_item_type: backup item type.
               Expected value is 'GenericProtectedItem'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input[str] fabric_name: Name of this backup item's fabric.
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[bool] is_archive_enabled: Flag to identify whether datasource is protected in archive
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] policy_name: Name of the policy used for protection
        :param pulumi.Input[str] policy_state: Indicates consistency of policy object and policy applied to this backup item.
        :param pulumi.Input[float] protected_item_id: Data Plane Service ID of the protected item.
        :param pulumi.Input[Union[str, 'ProtectionState']] protection_state: Backup state of this backup item.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuardOperationRequests on which LAC check will be performed
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] source_associations: Loosely coupled (type, value) associations (example - parent of a protected item)
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[Union[str, 'DataSourceType']] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", 'GenericProtectedItem')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if fabric_name is not None:
            pulumi.set(__self__, "fabric_name", fabric_name)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if is_archive_enabled is not None:
            pulumi.set(__self__, "is_archive_enabled", is_archive_enabled)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_state is not None:
            pulumi.set(__self__, "policy_state", policy_state)
        if protected_item_id is not None:
            pulumi.set(__self__, "protected_item_id", protected_item_id)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if source_associations is not None:
            pulumi.set(__self__, "source_associations", source_associations)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        Expected value is 'GenericProtectedItem'.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="fabricName")
    def fabric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of this backup item's fabric.
        """
        return pulumi.get(self, "fabric_name")

    @fabric_name.setter
    def fabric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_name", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="isArchiveEnabled")
    def is_archive_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether datasource is protected in archive
        """
        return pulumi.get(self, "is_archive_enabled")

    @is_archive_enabled.setter
    def is_archive_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archive_enabled", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the policy used for protection
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="policyState")
    def policy_state(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates consistency of policy object and policy applied to this backup item.
        """
        return pulumi.get(self, "policy_state")

    @policy_state.setter
    def policy_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_state", value)

    @property
    @pulumi.getter(name="protectedItemId")
    def protected_item_id(self) -> Optional[pulumi.Input[float]]:
        """
        Data Plane Service ID of the protected item.
        """
        return pulumi.get(self, "protected_item_id")

    @protected_item_id.setter
    def protected_item_id(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "protected_item_id", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[Union[str, 'ProtectionState']]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[Union[str, 'ProtectionState']]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuardOperationRequests on which LAC check will be performed
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="sourceAssociations")
    def source_associations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Loosely coupled (type, value) associations (example - parent of a protected item)
        """
        return pulumi.get(self, "source_associations")

    @source_associations.setter
    def source_associations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "source_associations", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'DataSourceType']]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'DataSourceType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class GenericProtectionPolicyArgs:
    def __init__(__self__, *,
                 backup_management_type: pulumi.Input[str],
                 fabric_name: Optional[pulumi.Input[str]] = None,
                 protected_items_count: Optional[pulumi.Input[int]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sub_protection_policy: Optional[pulumi.Input[Sequence[pulumi.Input['SubProtectionPolicyArgs']]]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        """
        Azure VM (Mercury) workload-specific backup policy.
        :param pulumi.Input[str] backup_management_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'GenericProtectionPolicy'.
        :param pulumi.Input[str] fabric_name: Name of this policy's fabric.
        :param pulumi.Input[int] protected_items_count: Number of items associated with this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuard Operation Requests
        :param pulumi.Input[Sequence[pulumi.Input['SubProtectionPolicyArgs']]] sub_protection_policy: List of sub-protection policies which includes schedule and retention
        :param pulumi.Input[str] time_zone: TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
        """
        pulumi.set(__self__, "backup_management_type", 'GenericProtectionPolicy')
        if fabric_name is not None:
            pulumi.set(__self__, "fabric_name", fabric_name)
        if protected_items_count is not None:
            pulumi.set(__self__, "protected_items_count", protected_items_count)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if sub_protection_policy is not None:
            pulumi.set(__self__, "sub_protection_policy", sub_protection_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> pulumi.Input[str]:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'GenericProtectionPolicy'.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="fabricName")
    def fabric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of this policy's fabric.
        """
        return pulumi.get(self, "fabric_name")

    @fabric_name.setter
    def fabric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_name", value)

    @property
    @pulumi.getter(name="protectedItemsCount")
    def protected_items_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of items associated with this policy.
        """
        return pulumi.get(self, "protected_items_count")

    @protected_items_count.setter
    def protected_items_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protected_items_count", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuard Operation Requests
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="subProtectionPolicy")
    def sub_protection_policy(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubProtectionPolicyArgs']]]]:
        """
        List of sub-protection policies which includes schedule and retention
        """
        return pulumi.get(self, "sub_protection_policy")

    @sub_protection_policy.setter
    def sub_protection_policy(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubProtectionPolicyArgs']]]]):
        pulumi.set(self, "sub_protection_policy", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class HourlyScheduleArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 schedule_window_duration: Optional[pulumi.Input[int]] = None,
                 schedule_window_start_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] interval: Interval at which backup needs to be triggered. For hourly the value
                can be 4/6/8/12
        :param pulumi.Input[int] schedule_window_duration: To specify duration of the backup window
        :param pulumi.Input[str] schedule_window_start_time: To specify start time of the backup window
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if schedule_window_duration is not None:
            pulumi.set(__self__, "schedule_window_duration", schedule_window_duration)
        if schedule_window_start_time is not None:
            pulumi.set(__self__, "schedule_window_start_time", schedule_window_start_time)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval at which backup needs to be triggered. For hourly the value
         can be 4/6/8/12
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="scheduleWindowDuration")
    def schedule_window_duration(self) -> Optional[pulumi.Input[int]]:
        """
        To specify duration of the backup window
        """
        return pulumi.get(self, "schedule_window_duration")

    @schedule_window_duration.setter
    def schedule_window_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "schedule_window_duration", value)

    @property
    @pulumi.getter(name="scheduleWindowStartTime")
    def schedule_window_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        To specify start time of the backup window
        """
        return pulumi.get(self, "schedule_window_start_time")

    @schedule_window_start_time.setter
    def schedule_window_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_window_start_time", value)


@pulumi.input_type
class HyperVReplicaAzureDiskInputDetailsArgs:
    def __init__(__self__, *,
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[Union[str, 'DiskAccountType']]] = None,
                 log_storage_account_id: Optional[pulumi.Input[str]] = None):
        """
        Disk input details.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM ID.
        :param pulumi.Input[str] disk_id: The DiskId.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The DiskType.
        :param pulumi.Input[str] log_storage_account_id: The LogStorageAccountId.
        """
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if log_storage_account_id is not None:
            pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM ID.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskId.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[Union[str, 'DiskAccountType']]]:
        """
        The DiskType.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[Union[str, 'DiskAccountType']]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The LogStorageAccountId.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_storage_account_id", value)


@pulumi.input_type
class HyperVReplicaAzureEnableProtectionInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[Union[str, 'DiskAccountType']]] = None,
                 disks_to_include: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disks_to_include_for_managed_disks: Optional[pulumi.Input[Sequence[pulumi.Input['HyperVReplicaAzureDiskInputDetailsArgs']]]] = None,
                 enable_rdp_on_target_option: Optional[pulumi.Input[str]] = None,
                 hv_host_vm_id: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[Union[str, 'LicenseType']]] = None,
                 log_storage_account_id: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 seed_managed_disk_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 sql_server_license_type: Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_availability_zone: Optional[pulumi.Input[str]] = None,
                 target_azure_network_id: Optional[pulumi.Input[str]] = None,
                 target_azure_subnet_id: Optional[pulumi.Input[str]] = None,
                 target_azure_v1_resource_group_id: Optional[pulumi.Input[str]] = None,
                 target_azure_v2_resource_group_id: Optional[pulumi.Input[str]] = None,
                 target_azure_vm_name: Optional[pulumi.Input[str]] = None,
                 target_managed_disk_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_nic_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_proximity_placement_group_id: Optional[pulumi.Input[str]] = None,
                 target_storage_account_id: Optional[pulumi.Input[str]] = None,
                 target_vm_size: Optional[pulumi.Input[str]] = None,
                 target_vm_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 use_managed_disks: Optional[pulumi.Input[str]] = None,
                 use_managed_disks_for_replication: Optional[pulumi.Input[str]] = None,
                 vhd_id: Optional[pulumi.Input[str]] = None,
                 vm_name: Optional[pulumi.Input[str]] = None):
        """
        HyperVReplicaAzure specific enable protection input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'HyperVReplicaAzure'.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM Id.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The DiskType.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disks_to_include: The list of VHD Ids of disks to be protected.
        :param pulumi.Input[Sequence[pulumi.Input['HyperVReplicaAzureDiskInputDetailsArgs']]] disks_to_include_for_managed_disks: The disks to include list for managed disks.
        :param pulumi.Input[str] enable_rdp_on_target_option: The selected option to enable RDP\SSH on target vm after failover. String value of SrsDataContract.EnableRDPOnTargetOption enum.
        :param pulumi.Input[str] hv_host_vm_id: The Hyper-V host VM Id.
        :param pulumi.Input[Union[str, 'LicenseType']] license_type: License type.
        :param pulumi.Input[str] log_storage_account_id: The storage account to be used for logging during replication.
        :param pulumi.Input[str] os_type: The OS type associated with VM.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] seed_managed_disk_tags: The tags for the seed managed disks.
        :param pulumi.Input[Union[str, 'SqlServerLicenseType']] sql_server_license_type: The SQL Server license type.
        :param pulumi.Input[str] target_availability_set_id: The target availability set ARM Id for resource manager deployment.
        :param pulumi.Input[str] target_availability_zone: The target availability zone.
        :param pulumi.Input[str] target_azure_network_id: The selected target Azure network Id.
        :param pulumi.Input[str] target_azure_subnet_id: The selected target Azure subnet Id.
        :param pulumi.Input[str] target_azure_v1_resource_group_id: The Id of the target resource group (for classic deployment) in which the failover VM is to be created.
        :param pulumi.Input[str] target_azure_v2_resource_group_id: The Id of the target resource group (for resource manager deployment) in which the failover VM is to be created.
        :param pulumi.Input[str] target_azure_vm_name: The target azure VM Name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_managed_disk_tags: The tags for the target managed disks.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_nic_tags: The tags for the target NICs.
        :param pulumi.Input[str] target_proximity_placement_group_id: The proximity placement group ARM Id.
        :param pulumi.Input[str] target_storage_account_id: The storage account Id.
        :param pulumi.Input[str] target_vm_size: The target VM size.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_vm_tags: The target VM tags.
        :param pulumi.Input[str] use_managed_disks: A value indicating whether managed disks should be used during failover.
        :param pulumi.Input[str] use_managed_disks_for_replication: A value indicating whether managed disks should be used during replication.
        :param pulumi.Input[str] vhd_id: The OS disk VHD id associated with VM.
        :param pulumi.Input[str] vm_name: The VM Name.
        """
        pulumi.set(__self__, "instance_type", 'HyperVReplicaAzure')
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if disks_to_include is not None:
            pulumi.set(__self__, "disks_to_include", disks_to_include)
        if disks_to_include_for_managed_disks is not None:
            pulumi.set(__self__, "disks_to_include_for_managed_disks", disks_to_include_for_managed_disks)
        if enable_rdp_on_target_option is not None:
            pulumi.set(__self__, "enable_rdp_on_target_option", enable_rdp_on_target_option)
        if hv_host_vm_id is not None:
            pulumi.set(__self__, "hv_host_vm_id", hv_host_vm_id)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if log_storage_account_id is not None:
            pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if seed_managed_disk_tags is not None:
            pulumi.set(__self__, "seed_managed_disk_tags", seed_managed_disk_tags)
        if sql_server_license_type is not None:
            pulumi.set(__self__, "sql_server_license_type", sql_server_license_type)
        if target_availability_set_id is not None:
            pulumi.set(__self__, "target_availability_set_id", target_availability_set_id)
        if target_availability_zone is not None:
            pulumi.set(__self__, "target_availability_zone", target_availability_zone)
        if target_azure_network_id is not None:
            pulumi.set(__self__, "target_azure_network_id", target_azure_network_id)
        if target_azure_subnet_id is not None:
            pulumi.set(__self__, "target_azure_subnet_id", target_azure_subnet_id)
        if target_azure_v1_resource_group_id is not None:
            pulumi.set(__self__, "target_azure_v1_resource_group_id", target_azure_v1_resource_group_id)
        if target_azure_v2_resource_group_id is not None:
            pulumi.set(__self__, "target_azure_v2_resource_group_id", target_azure_v2_resource_group_id)
        if target_azure_vm_name is not None:
            pulumi.set(__self__, "target_azure_vm_name", target_azure_vm_name)
        if target_managed_disk_tags is not None:
            pulumi.set(__self__, "target_managed_disk_tags", target_managed_disk_tags)
        if target_nic_tags is not None:
            pulumi.set(__self__, "target_nic_tags", target_nic_tags)
        if target_proximity_placement_group_id is not None:
            pulumi.set(__self__, "target_proximity_placement_group_id", target_proximity_placement_group_id)
        if target_storage_account_id is not None:
            pulumi.set(__self__, "target_storage_account_id", target_storage_account_id)
        if target_vm_size is not None:
            pulumi.set(__self__, "target_vm_size", target_vm_size)
        if target_vm_tags is not None:
            pulumi.set(__self__, "target_vm_tags", target_vm_tags)
        if use_managed_disks is not None:
            pulumi.set(__self__, "use_managed_disks", use_managed_disks)
        if use_managed_disks_for_replication is not None:
            pulumi.set(__self__, "use_managed_disks_for_replication", use_managed_disks_for_replication)
        if vhd_id is not None:
            pulumi.set(__self__, "vhd_id", vhd_id)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'HyperVReplicaAzure'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM Id.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[Union[str, 'DiskAccountType']]]:
        """
        The DiskType.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[Union[str, 'DiskAccountType']]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of VHD Ids of disks to be protected.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="disksToIncludeForManagedDisks")
    def disks_to_include_for_managed_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HyperVReplicaAzureDiskInputDetailsArgs']]]]:
        """
        The disks to include list for managed disks.
        """
        return pulumi.get(self, "disks_to_include_for_managed_disks")

    @disks_to_include_for_managed_disks.setter
    def disks_to_include_for_managed_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HyperVReplicaAzureDiskInputDetailsArgs']]]]):
        pulumi.set(self, "disks_to_include_for_managed_disks", value)

    @property
    @pulumi.getter(name="enableRdpOnTargetOption")
    def enable_rdp_on_target_option(self) -> Optional[pulumi.Input[str]]:
        """
        The selected option to enable RDP\SSH on target vm after failover. String value of SrsDataContract.EnableRDPOnTargetOption enum.
        """
        return pulumi.get(self, "enable_rdp_on_target_option")

    @enable_rdp_on_target_option.setter
    def enable_rdp_on_target_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_rdp_on_target_option", value)

    @property
    @pulumi.getter(name="hvHostVmId")
    def hv_host_vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Hyper-V host VM Id.
        """
        return pulumi.get(self, "hv_host_vm_id")

    @hv_host_vm_id.setter
    def hv_host_vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hv_host_vm_id", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[Union[str, 'LicenseType']]]:
        """
        License type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[Union[str, 'LicenseType']]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The storage account to be used for logging during replication.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_storage_account_id", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        The OS type associated with VM.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="seedManagedDiskTags")
    def seed_managed_disk_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the seed managed disks.
        """
        return pulumi.get(self, "seed_managed_disk_tags")

    @seed_managed_disk_tags.setter
    def seed_managed_disk_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "seed_managed_disk_tags", value)

    @property
    @pulumi.getter(name="sqlServerLicenseType")
    def sql_server_license_type(self) -> Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]]:
        """
        The SQL Server license type.
        """
        return pulumi.get(self, "sql_server_license_type")

    @sql_server_license_type.setter
    def sql_server_license_type(self, value: Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]]):
        pulumi.set(self, "sql_server_license_type", value)

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability set ARM Id for resource manager deployment.
        """
        return pulumi.get(self, "target_availability_set_id")

    @target_availability_set_id.setter
    def target_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_set_id", value)

    @property
    @pulumi.getter(name="targetAvailabilityZone")
    def target_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability zone.
        """
        return pulumi.get(self, "target_availability_zone")

    @target_availability_zone.setter
    def target_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_zone", value)

    @property
    @pulumi.getter(name="targetAzureNetworkId")
    def target_azure_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected target Azure network Id.
        """
        return pulumi.get(self, "target_azure_network_id")

    @target_azure_network_id.setter
    def target_azure_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_network_id", value)

    @property
    @pulumi.getter(name="targetAzureSubnetId")
    def target_azure_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected target Azure subnet Id.
        """
        return pulumi.get(self, "target_azure_subnet_id")

    @target_azure_subnet_id.setter
    def target_azure_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_subnet_id", value)

    @property
    @pulumi.getter(name="targetAzureV1ResourceGroupId")
    def target_azure_v1_resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of the target resource group (for classic deployment) in which the failover VM is to be created.
        """
        return pulumi.get(self, "target_azure_v1_resource_group_id")

    @target_azure_v1_resource_group_id.setter
    def target_azure_v1_resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_v1_resource_group_id", value)

    @property
    @pulumi.getter(name="targetAzureV2ResourceGroupId")
    def target_azure_v2_resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of the target resource group (for resource manager deployment) in which the failover VM is to be created.
        """
        return pulumi.get(self, "target_azure_v2_resource_group_id")

    @target_azure_v2_resource_group_id.setter
    def target_azure_v2_resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_v2_resource_group_id", value)

    @property
    @pulumi.getter(name="targetAzureVmName")
    def target_azure_vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target azure VM Name.
        """
        return pulumi.get(self, "target_azure_vm_name")

    @target_azure_vm_name.setter
    def target_azure_vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_vm_name", value)

    @property
    @pulumi.getter(name="targetManagedDiskTags")
    def target_managed_disk_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the target managed disks.
        """
        return pulumi.get(self, "target_managed_disk_tags")

    @target_managed_disk_tags.setter
    def target_managed_disk_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_managed_disk_tags", value)

    @property
    @pulumi.getter(name="targetNicTags")
    def target_nic_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the target NICs.
        """
        return pulumi.get(self, "target_nic_tags")

    @target_nic_tags.setter
    def target_nic_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_nic_tags", value)

    @property
    @pulumi.getter(name="targetProximityPlacementGroupId")
    def target_proximity_placement_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The proximity placement group ARM Id.
        """
        return pulumi.get(self, "target_proximity_placement_group_id")

    @target_proximity_placement_group_id.setter
    def target_proximity_placement_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_proximity_placement_group_id", value)

    @property
    @pulumi.getter(name="targetStorageAccountId")
    def target_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The storage account Id.
        """
        return pulumi.get(self, "target_storage_account_id")

    @target_storage_account_id.setter
    def target_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_storage_account_id", value)

    @property
    @pulumi.getter(name="targetVmSize")
    def target_vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        The target VM size.
        """
        return pulumi.get(self, "target_vm_size")

    @target_vm_size.setter
    def target_vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_size", value)

    @property
    @pulumi.getter(name="targetVmTags")
    def target_vm_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The target VM tags.
        """
        return pulumi.get(self, "target_vm_tags")

    @target_vm_tags.setter
    def target_vm_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_vm_tags", value)

    @property
    @pulumi.getter(name="useManagedDisks")
    def use_managed_disks(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether managed disks should be used during failover.
        """
        return pulumi.get(self, "use_managed_disks")

    @use_managed_disks.setter
    def use_managed_disks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_managed_disks", value)

    @property
    @pulumi.getter(name="useManagedDisksForReplication")
    def use_managed_disks_for_replication(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether managed disks should be used during replication.
        """
        return pulumi.get(self, "use_managed_disks_for_replication")

    @use_managed_disks_for_replication.setter
    def use_managed_disks_for_replication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_managed_disks_for_replication", value)

    @property
    @pulumi.getter(name="vhdId")
    def vhd_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OS disk VHD id associated with VM.
        """
        return pulumi.get(self, "vhd_id")

    @vhd_id.setter
    def vhd_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vhd_id", value)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        The VM Name.
        """
        return pulumi.get(self, "vm_name")

    @vm_name.setter
    def vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name", value)


@pulumi.input_type
class HyperVReplicaAzurePolicyInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 application_consistent_snapshot_frequency_in_hours: Optional[pulumi.Input[int]] = None,
                 online_replication_start_time: Optional[pulumi.Input[str]] = None,
                 recovery_point_history_duration: Optional[pulumi.Input[int]] = None,
                 replication_interval: Optional[pulumi.Input[int]] = None,
                 storage_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Hyper-V Replica Azure specific input for creating a protection profile.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'HyperVReplicaAzure'.
        :param pulumi.Input[int] application_consistent_snapshot_frequency_in_hours: The interval (in hours) at which Hyper-V Replica should create an application consistent snapshot within the VM.
        :param pulumi.Input[str] online_replication_start_time: The scheduled start time for the initial replication. If this parameter is Null, the initial replication starts immediately.
        :param pulumi.Input[int] recovery_point_history_duration: The duration (in hours) to which point the recovery history needs to be maintained.
        :param pulumi.Input[int] replication_interval: The replication interval.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_accounts: The list of storage accounts to which the VMs in the primary cloud can replicate to.
        """
        pulumi.set(__self__, "instance_type", 'HyperVReplicaAzure')
        if application_consistent_snapshot_frequency_in_hours is not None:
            pulumi.set(__self__, "application_consistent_snapshot_frequency_in_hours", application_consistent_snapshot_frequency_in_hours)
        if online_replication_start_time is not None:
            pulumi.set(__self__, "online_replication_start_time", online_replication_start_time)
        if recovery_point_history_duration is not None:
            pulumi.set(__self__, "recovery_point_history_duration", recovery_point_history_duration)
        if replication_interval is not None:
            pulumi.set(__self__, "replication_interval", replication_interval)
        if storage_accounts is not None:
            pulumi.set(__self__, "storage_accounts", storage_accounts)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'HyperVReplicaAzure'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="applicationConsistentSnapshotFrequencyInHours")
    def application_consistent_snapshot_frequency_in_hours(self) -> Optional[pulumi.Input[int]]:
        """
        The interval (in hours) at which Hyper-V Replica should create an application consistent snapshot within the VM.
        """
        return pulumi.get(self, "application_consistent_snapshot_frequency_in_hours")

    @application_consistent_snapshot_frequency_in_hours.setter
    def application_consistent_snapshot_frequency_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "application_consistent_snapshot_frequency_in_hours", value)

    @property
    @pulumi.getter(name="onlineReplicationStartTime")
    def online_replication_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The scheduled start time for the initial replication. If this parameter is Null, the initial replication starts immediately.
        """
        return pulumi.get(self, "online_replication_start_time")

    @online_replication_start_time.setter
    def online_replication_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "online_replication_start_time", value)

    @property
    @pulumi.getter(name="recoveryPointHistoryDuration")
    def recovery_point_history_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The duration (in hours) to which point the recovery history needs to be maintained.
        """
        return pulumi.get(self, "recovery_point_history_duration")

    @recovery_point_history_duration.setter
    def recovery_point_history_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_history_duration", value)

    @property
    @pulumi.getter(name="replicationInterval")
    def replication_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The replication interval.
        """
        return pulumi.get(self, "replication_interval")

    @replication_interval.setter
    def replication_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_interval", value)

    @property
    @pulumi.getter(name="storageAccounts")
    def storage_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of storage accounts to which the VMs in the primary cloud can replicate to.
        """
        return pulumi.get(self, "storage_accounts")

    @storage_accounts.setter
    def storage_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "storage_accounts", value)


@pulumi.input_type
class HyperVReplicaBluePolicyInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 allowed_authentication_type: Optional[pulumi.Input[int]] = None,
                 application_consistent_snapshot_frequency_in_hours: Optional[pulumi.Input[int]] = None,
                 compression: Optional[pulumi.Input[str]] = None,
                 initial_replication_method: Optional[pulumi.Input[str]] = None,
                 offline_replication_export_path: Optional[pulumi.Input[str]] = None,
                 offline_replication_import_path: Optional[pulumi.Input[str]] = None,
                 online_replication_start_time: Optional[pulumi.Input[str]] = None,
                 recovery_points: Optional[pulumi.Input[int]] = None,
                 replica_deletion: Optional[pulumi.Input[str]] = None,
                 replication_frequency_in_seconds: Optional[pulumi.Input[int]] = None,
                 replication_port: Optional[pulumi.Input[int]] = None):
        """
        HyperV Replica Blue policy input.
        :param pulumi.Input[str] instance_type: 
               Expected value is 'HyperVReplica2012R2'.
        :param pulumi.Input[int] allowed_authentication_type: A value indicating the authentication type.
        :param pulumi.Input[int] application_consistent_snapshot_frequency_in_hours: A value indicating the application consistent frequency.
        :param pulumi.Input[str] compression: A value indicating whether compression has to be enabled.
        :param pulumi.Input[str] initial_replication_method: A value indicating whether IR is online.
        :param pulumi.Input[str] offline_replication_export_path: A value indicating the offline IR export path.
        :param pulumi.Input[str] offline_replication_import_path: A value indicating the offline IR import path.
        :param pulumi.Input[str] online_replication_start_time: A value indicating the online IR start time.
        :param pulumi.Input[int] recovery_points: A value indicating the number of recovery points.
        :param pulumi.Input[str] replica_deletion: A value indicating whether the VM has to be auto deleted.
        :param pulumi.Input[int] replication_frequency_in_seconds: A value indicating the replication interval.
        :param pulumi.Input[int] replication_port: A value indicating the recovery HTTPS port.
        """
        pulumi.set(__self__, "instance_type", 'HyperVReplica2012R2')
        if allowed_authentication_type is not None:
            pulumi.set(__self__, "allowed_authentication_type", allowed_authentication_type)
        if application_consistent_snapshot_frequency_in_hours is not None:
            pulumi.set(__self__, "application_consistent_snapshot_frequency_in_hours", application_consistent_snapshot_frequency_in_hours)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if initial_replication_method is not None:
            pulumi.set(__self__, "initial_replication_method", initial_replication_method)
        if offline_replication_export_path is not None:
            pulumi.set(__self__, "offline_replication_export_path", offline_replication_export_path)
        if offline_replication_import_path is not None:
            pulumi.set(__self__, "offline_replication_import_path", offline_replication_import_path)
        if online_replication_start_time is not None:
            pulumi.set(__self__, "online_replication_start_time", online_replication_start_time)
        if recovery_points is not None:
            pulumi.set(__self__, "recovery_points", recovery_points)
        if replica_deletion is not None:
            pulumi.set(__self__, "replica_deletion", replica_deletion)
        if replication_frequency_in_seconds is not None:
            pulumi.set(__self__, "replication_frequency_in_seconds", replication_frequency_in_seconds)
        if replication_port is not None:
            pulumi.set(__self__, "replication_port", replication_port)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """

        Expected value is 'HyperVReplica2012R2'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="allowedAuthenticationType")
    def allowed_authentication_type(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the authentication type.
        """
        return pulumi.get(self, "allowed_authentication_type")

    @allowed_authentication_type.setter
    def allowed_authentication_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowed_authentication_type", value)

    @property
    @pulumi.getter(name="applicationConsistentSnapshotFrequencyInHours")
    def application_consistent_snapshot_frequency_in_hours(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the application consistent frequency.
        """
        return pulumi.get(self, "application_consistent_snapshot_frequency_in_hours")

    @application_consistent_snapshot_frequency_in_hours.setter
    def application_consistent_snapshot_frequency_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "application_consistent_snapshot_frequency_in_hours", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether compression has to be enabled.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter(name="initialReplicationMethod")
    def initial_replication_method(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether IR is online.
        """
        return pulumi.get(self, "initial_replication_method")

    @initial_replication_method.setter
    def initial_replication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initial_replication_method", value)

    @property
    @pulumi.getter(name="offlineReplicationExportPath")
    def offline_replication_export_path(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating the offline IR export path.
        """
        return pulumi.get(self, "offline_replication_export_path")

    @offline_replication_export_path.setter
    def offline_replication_export_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offline_replication_export_path", value)

    @property
    @pulumi.getter(name="offlineReplicationImportPath")
    def offline_replication_import_path(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating the offline IR import path.
        """
        return pulumi.get(self, "offline_replication_import_path")

    @offline_replication_import_path.setter
    def offline_replication_import_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offline_replication_import_path", value)

    @property
    @pulumi.getter(name="onlineReplicationStartTime")
    def online_replication_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating the online IR start time.
        """
        return pulumi.get(self, "online_replication_start_time")

    @online_replication_start_time.setter
    def online_replication_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "online_replication_start_time", value)

    @property
    @pulumi.getter(name="recoveryPoints")
    def recovery_points(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the number of recovery points.
        """
        return pulumi.get(self, "recovery_points")

    @recovery_points.setter
    def recovery_points(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_points", value)

    @property
    @pulumi.getter(name="replicaDeletion")
    def replica_deletion(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether the VM has to be auto deleted.
        """
        return pulumi.get(self, "replica_deletion")

    @replica_deletion.setter
    def replica_deletion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_deletion", value)

    @property
    @pulumi.getter(name="replicationFrequencyInSeconds")
    def replication_frequency_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the replication interval.
        """
        return pulumi.get(self, "replication_frequency_in_seconds")

    @replication_frequency_in_seconds.setter
    def replication_frequency_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_frequency_in_seconds", value)

    @property
    @pulumi.getter(name="replicationPort")
    def replication_port(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the recovery HTTPS port.
        """
        return pulumi.get(self, "replication_port")

    @replication_port.setter
    def replication_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_port", value)


@pulumi.input_type
class HyperVReplicaPolicyInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 allowed_authentication_type: Optional[pulumi.Input[int]] = None,
                 application_consistent_snapshot_frequency_in_hours: Optional[pulumi.Input[int]] = None,
                 compression: Optional[pulumi.Input[str]] = None,
                 initial_replication_method: Optional[pulumi.Input[str]] = None,
                 offline_replication_export_path: Optional[pulumi.Input[str]] = None,
                 offline_replication_import_path: Optional[pulumi.Input[str]] = None,
                 online_replication_start_time: Optional[pulumi.Input[str]] = None,
                 recovery_points: Optional[pulumi.Input[int]] = None,
                 replica_deletion: Optional[pulumi.Input[str]] = None,
                 replication_port: Optional[pulumi.Input[int]] = None):
        """
        Hyper-V Replica specific policy Input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'HyperVReplica2012'.
        :param pulumi.Input[int] allowed_authentication_type: A value indicating the authentication type.
        :param pulumi.Input[int] application_consistent_snapshot_frequency_in_hours: A value indicating the application consistent frequency.
        :param pulumi.Input[str] compression: A value indicating whether compression has to be enabled.
        :param pulumi.Input[str] initial_replication_method: A value indicating whether IR is online.
        :param pulumi.Input[str] offline_replication_export_path: A value indicating the offline IR export path.
        :param pulumi.Input[str] offline_replication_import_path: A value indicating the offline IR import path.
        :param pulumi.Input[str] online_replication_start_time: A value indicating the online IR start time.
        :param pulumi.Input[int] recovery_points: A value indicating the number of recovery points.
        :param pulumi.Input[str] replica_deletion: A value indicating whether the VM has to be auto deleted.
        :param pulumi.Input[int] replication_port: A value indicating the recovery HTTPS port.
        """
        pulumi.set(__self__, "instance_type", 'HyperVReplica2012')
        if allowed_authentication_type is not None:
            pulumi.set(__self__, "allowed_authentication_type", allowed_authentication_type)
        if application_consistent_snapshot_frequency_in_hours is not None:
            pulumi.set(__self__, "application_consistent_snapshot_frequency_in_hours", application_consistent_snapshot_frequency_in_hours)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if initial_replication_method is not None:
            pulumi.set(__self__, "initial_replication_method", initial_replication_method)
        if offline_replication_export_path is not None:
            pulumi.set(__self__, "offline_replication_export_path", offline_replication_export_path)
        if offline_replication_import_path is not None:
            pulumi.set(__self__, "offline_replication_import_path", offline_replication_import_path)
        if online_replication_start_time is not None:
            pulumi.set(__self__, "online_replication_start_time", online_replication_start_time)
        if recovery_points is not None:
            pulumi.set(__self__, "recovery_points", recovery_points)
        if replica_deletion is not None:
            pulumi.set(__self__, "replica_deletion", replica_deletion)
        if replication_port is not None:
            pulumi.set(__self__, "replication_port", replication_port)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'HyperVReplica2012'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="allowedAuthenticationType")
    def allowed_authentication_type(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the authentication type.
        """
        return pulumi.get(self, "allowed_authentication_type")

    @allowed_authentication_type.setter
    def allowed_authentication_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowed_authentication_type", value)

    @property
    @pulumi.getter(name="applicationConsistentSnapshotFrequencyInHours")
    def application_consistent_snapshot_frequency_in_hours(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the application consistent frequency.
        """
        return pulumi.get(self, "application_consistent_snapshot_frequency_in_hours")

    @application_consistent_snapshot_frequency_in_hours.setter
    def application_consistent_snapshot_frequency_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "application_consistent_snapshot_frequency_in_hours", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether compression has to be enabled.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter(name="initialReplicationMethod")
    def initial_replication_method(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether IR is online.
        """
        return pulumi.get(self, "initial_replication_method")

    @initial_replication_method.setter
    def initial_replication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initial_replication_method", value)

    @property
    @pulumi.getter(name="offlineReplicationExportPath")
    def offline_replication_export_path(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating the offline IR export path.
        """
        return pulumi.get(self, "offline_replication_export_path")

    @offline_replication_export_path.setter
    def offline_replication_export_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offline_replication_export_path", value)

    @property
    @pulumi.getter(name="offlineReplicationImportPath")
    def offline_replication_import_path(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating the offline IR import path.
        """
        return pulumi.get(self, "offline_replication_import_path")

    @offline_replication_import_path.setter
    def offline_replication_import_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offline_replication_import_path", value)

    @property
    @pulumi.getter(name="onlineReplicationStartTime")
    def online_replication_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating the online IR start time.
        """
        return pulumi.get(self, "online_replication_start_time")

    @online_replication_start_time.setter
    def online_replication_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "online_replication_start_time", value)

    @property
    @pulumi.getter(name="recoveryPoints")
    def recovery_points(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the number of recovery points.
        """
        return pulumi.get(self, "recovery_points")

    @recovery_points.setter
    def recovery_points(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_points", value)

    @property
    @pulumi.getter(name="replicaDeletion")
    def replica_deletion(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether the VM has to be auto deleted.
        """
        return pulumi.get(self, "replica_deletion")

    @replica_deletion.setter
    def replica_deletion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_deletion", value)

    @property
    @pulumi.getter(name="replicationPort")
    def replication_port(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the recovery HTTPS port.
        """
        return pulumi.get(self, "replication_port")

    @replication_port.setter
    def replication_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_port", value)


@pulumi.input_type
class IaaSVMContainerArgs:
    def __init__(__self__, *,
                 container_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 protectable_object_type: Optional[pulumi.Input[str]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None,
                 virtual_machine_version: Optional[pulumi.Input[str]] = None):
        """
        IaaS VM workload-specific container.
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
               Expected value is 'IaasVMContainer'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the container.
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[str] protectable_object_type: Type of the protectable object associated with this container
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        :param pulumi.Input[str] resource_group: Resource group name of Recovery Services Vault.
        :param pulumi.Input[str] virtual_machine_id: Fully qualified ARM url of the virtual machine represented by this Azure IaaS VM container.
        :param pulumi.Input[str] virtual_machine_version: Specifies whether the container represents a Classic or an Azure Resource Manager VM.
        """
        pulumi.set(__self__, "container_type", 'IaasVMContainer')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if protectable_object_type is not None:
            pulumi.set(__self__, "protectable_object_type", protectable_object_type)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if virtual_machine_id is not None:
            pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)
        if virtual_machine_version is not None:
            pulumi.set(__self__, "virtual_machine_version", virtual_machine_version)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Input[str]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        Expected value is 'IaasVMContainer'.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="protectableObjectType")
    def protectable_object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the protectable object associated with this container
        """
        return pulumi.get(self, "protectable_object_type")

    @protectable_object_type.setter
    def protectable_object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_object_type", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Resource group name of Recovery Services Vault.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified ARM url of the virtual machine represented by this Azure IaaS VM container.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_id", value)

    @property
    @pulumi.getter(name="virtualMachineVersion")
    def virtual_machine_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the container represents a Classic or an Azure Resource Manager VM.
        """
        return pulumi.get(self, "virtual_machine_version")

    @virtual_machine_version.setter
    def virtual_machine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_version", value)


@pulumi.input_type
class IdentityDataArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ResourceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Identity for the resource.
        :param pulumi.Input[Union[str, 'ResourceIdentityType']] type: The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
        :param pulumi.Input[Mapping[str, Any]] user_assigned_identities: The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ResourceIdentityType']]:
        """
        The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ResourceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "user_assigned_identities", value)


@pulumi.input_type
class IdentityProviderInputArgs:
    def __init__(__self__, *,
                 aad_authority: pulumi.Input[str],
                 application_id: pulumi.Input[str],
                 audience: pulumi.Input[str],
                 object_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str]):
        """
        Identity provider input.
        :param pulumi.Input[str] aad_authority: The base authority for Azure Active Directory authentication.
        :param pulumi.Input[str] application_id: The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param pulumi.Input[str] audience: The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param pulumi.Input[str] object_id: The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param pulumi.Input[str] tenant_id: The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        pulumi.set(__self__, "aad_authority", aad_authority)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="aadAuthority")
    def aad_authority(self) -> pulumi.Input[str]:
        """
        The base authority for Azure Active Directory authentication.
        """
        return pulumi.get(self, "aad_authority")

    @aad_authority.setter
    def aad_authority(self, value: pulumi.Input[str]):
        pulumi.set(self, "aad_authority", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def audience(self) -> pulumi.Input[str]:
        """
        The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: pulumi.Input[str]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Input[str]:
        """
        The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class InMageAzureV2DiskInputDetailsArgs:
    def __init__(__self__, *,
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[Union[str, 'DiskAccountType']]] = None,
                 log_storage_account_id: Optional[pulumi.Input[str]] = None):
        """
        Disk input details.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM ID.
        :param pulumi.Input[str] disk_id: The DiskId.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The DiskType.
        :param pulumi.Input[str] log_storage_account_id: The LogStorageAccountId.
        """
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if log_storage_account_id is not None:
            pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM ID.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskId.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[Union[str, 'DiskAccountType']]]:
        """
        The DiskType.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[Union[str, 'DiskAccountType']]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The LogStorageAccountId.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_storage_account_id", value)


@pulumi.input_type
class InMageAzureV2EnableProtectionInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[Union[str, 'DiskAccountType']]] = None,
                 disks_to_include: Optional[pulumi.Input[Sequence[pulumi.Input['InMageAzureV2DiskInputDetailsArgs']]]] = None,
                 enable_rdp_on_target_option: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[Union[str, 'LicenseType']]] = None,
                 log_storage_account_id: Optional[pulumi.Input[str]] = None,
                 master_target_id: Optional[pulumi.Input[str]] = None,
                 multi_vm_group_id: Optional[pulumi.Input[str]] = None,
                 multi_vm_group_name: Optional[pulumi.Input[str]] = None,
                 process_server_id: Optional[pulumi.Input[str]] = None,
                 run_as_account_id: Optional[pulumi.Input[str]] = None,
                 seed_managed_disk_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 sql_server_license_type: Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]] = None,
                 storage_account_id: Optional[pulumi.Input[str]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_availability_zone: Optional[pulumi.Input[str]] = None,
                 target_azure_network_id: Optional[pulumi.Input[str]] = None,
                 target_azure_subnet_id: Optional[pulumi.Input[str]] = None,
                 target_azure_v1_resource_group_id: Optional[pulumi.Input[str]] = None,
                 target_azure_v2_resource_group_id: Optional[pulumi.Input[str]] = None,
                 target_azure_vm_name: Optional[pulumi.Input[str]] = None,
                 target_managed_disk_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_nic_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_proximity_placement_group_id: Optional[pulumi.Input[str]] = None,
                 target_vm_size: Optional[pulumi.Input[str]] = None,
                 target_vm_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        VMware Azure specific enable protection input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMageAzureV2'.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM Id.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The DiskType.
        :param pulumi.Input[Sequence[pulumi.Input['InMageAzureV2DiskInputDetailsArgs']]] disks_to_include: The disks to include list.
        :param pulumi.Input[str] enable_rdp_on_target_option: The selected option to enable RDP\SSH on target VM after failover. String value of SrsDataContract.EnableRDPOnTargetOption enum.
        :param pulumi.Input[Union[str, 'LicenseType']] license_type: License type.
        :param pulumi.Input[str] log_storage_account_id: The storage account to be used for logging during replication.
        :param pulumi.Input[str] master_target_id: The Master target Id.
        :param pulumi.Input[str] multi_vm_group_id: The multi VM group Id.
        :param pulumi.Input[str] multi_vm_group_name: The multi VM group name.
        :param pulumi.Input[str] process_server_id: The Process Server Id.
        :param pulumi.Input[str] run_as_account_id: The CS account Id.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] seed_managed_disk_tags: The tags for the seed managed disks.
        :param pulumi.Input[Union[str, 'SqlServerLicenseType']] sql_server_license_type: The SQL Server license type.
        :param pulumi.Input[str] storage_account_id: The storage account Id.
        :param pulumi.Input[str] target_availability_set_id: The target availability set ARM Id for resource manager deployment.
        :param pulumi.Input[str] target_availability_zone: The target availability zone.
        :param pulumi.Input[str] target_azure_network_id: The selected target Azure network Id.
        :param pulumi.Input[str] target_azure_subnet_id: The selected target Azure subnet Id.
        :param pulumi.Input[str] target_azure_v1_resource_group_id: The Id of the target resource group (for classic deployment) in which the failover VM is to be created.
        :param pulumi.Input[str] target_azure_v2_resource_group_id: The Id of the target resource group (for resource manager deployment) in which the failover VM is to be created.
        :param pulumi.Input[str] target_azure_vm_name: The target azure VM Name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_managed_disk_tags: The tags for the target managed disks.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_nic_tags: The tags for the target NICs.
        :param pulumi.Input[str] target_proximity_placement_group_id: The proximity placement group ARM Id.
        :param pulumi.Input[str] target_vm_size: The target VM size.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_vm_tags: The target VM tags.
        """
        pulumi.set(__self__, "instance_type", 'InMageAzureV2')
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if disks_to_include is not None:
            pulumi.set(__self__, "disks_to_include", disks_to_include)
        if enable_rdp_on_target_option is not None:
            pulumi.set(__self__, "enable_rdp_on_target_option", enable_rdp_on_target_option)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if log_storage_account_id is not None:
            pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)
        if master_target_id is not None:
            pulumi.set(__self__, "master_target_id", master_target_id)
        if multi_vm_group_id is not None:
            pulumi.set(__self__, "multi_vm_group_id", multi_vm_group_id)
        if multi_vm_group_name is not None:
            pulumi.set(__self__, "multi_vm_group_name", multi_vm_group_name)
        if process_server_id is not None:
            pulumi.set(__self__, "process_server_id", process_server_id)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        if seed_managed_disk_tags is not None:
            pulumi.set(__self__, "seed_managed_disk_tags", seed_managed_disk_tags)
        if sql_server_license_type is not None:
            pulumi.set(__self__, "sql_server_license_type", sql_server_license_type)
        if storage_account_id is not None:
            pulumi.set(__self__, "storage_account_id", storage_account_id)
        if target_availability_set_id is not None:
            pulumi.set(__self__, "target_availability_set_id", target_availability_set_id)
        if target_availability_zone is not None:
            pulumi.set(__self__, "target_availability_zone", target_availability_zone)
        if target_azure_network_id is not None:
            pulumi.set(__self__, "target_azure_network_id", target_azure_network_id)
        if target_azure_subnet_id is not None:
            pulumi.set(__self__, "target_azure_subnet_id", target_azure_subnet_id)
        if target_azure_v1_resource_group_id is not None:
            pulumi.set(__self__, "target_azure_v1_resource_group_id", target_azure_v1_resource_group_id)
        if target_azure_v2_resource_group_id is not None:
            pulumi.set(__self__, "target_azure_v2_resource_group_id", target_azure_v2_resource_group_id)
        if target_azure_vm_name is not None:
            pulumi.set(__self__, "target_azure_vm_name", target_azure_vm_name)
        if target_managed_disk_tags is not None:
            pulumi.set(__self__, "target_managed_disk_tags", target_managed_disk_tags)
        if target_nic_tags is not None:
            pulumi.set(__self__, "target_nic_tags", target_nic_tags)
        if target_proximity_placement_group_id is not None:
            pulumi.set(__self__, "target_proximity_placement_group_id", target_proximity_placement_group_id)
        if target_vm_size is not None:
            pulumi.set(__self__, "target_vm_size", target_vm_size)
        if target_vm_tags is not None:
            pulumi.set(__self__, "target_vm_tags", target_vm_tags)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMageAzureV2'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM Id.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[Union[str, 'DiskAccountType']]]:
        """
        The DiskType.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[Union[str, 'DiskAccountType']]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InMageAzureV2DiskInputDetailsArgs']]]]:
        """
        The disks to include list.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InMageAzureV2DiskInputDetailsArgs']]]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="enableRdpOnTargetOption")
    def enable_rdp_on_target_option(self) -> Optional[pulumi.Input[str]]:
        """
        The selected option to enable RDP\SSH on target VM after failover. String value of SrsDataContract.EnableRDPOnTargetOption enum.
        """
        return pulumi.get(self, "enable_rdp_on_target_option")

    @enable_rdp_on_target_option.setter
    def enable_rdp_on_target_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_rdp_on_target_option", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[Union[str, 'LicenseType']]]:
        """
        License type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[Union[str, 'LicenseType']]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The storage account to be used for logging during replication.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_storage_account_id", value)

    @property
    @pulumi.getter(name="masterTargetId")
    def master_target_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Master target Id.
        """
        return pulumi.get(self, "master_target_id")

    @master_target_id.setter
    def master_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_target_id", value)

    @property
    @pulumi.getter(name="multiVmGroupId")
    def multi_vm_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The multi VM group Id.
        """
        return pulumi.get(self, "multi_vm_group_id")

    @multi_vm_group_id.setter
    def multi_vm_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_vm_group_id", value)

    @property
    @pulumi.getter(name="multiVmGroupName")
    def multi_vm_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The multi VM group name.
        """
        return pulumi.get(self, "multi_vm_group_name")

    @multi_vm_group_name.setter
    def multi_vm_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_vm_group_name", value)

    @property
    @pulumi.getter(name="processServerId")
    def process_server_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Process Server Id.
        """
        return pulumi.get(self, "process_server_id")

    @process_server_id.setter
    def process_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_server_id", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The CS account Id.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_account_id", value)

    @property
    @pulumi.getter(name="seedManagedDiskTags")
    def seed_managed_disk_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the seed managed disks.
        """
        return pulumi.get(self, "seed_managed_disk_tags")

    @seed_managed_disk_tags.setter
    def seed_managed_disk_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "seed_managed_disk_tags", value)

    @property
    @pulumi.getter(name="sqlServerLicenseType")
    def sql_server_license_type(self) -> Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]]:
        """
        The SQL Server license type.
        """
        return pulumi.get(self, "sql_server_license_type")

    @sql_server_license_type.setter
    def sql_server_license_type(self, value: Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]]):
        pulumi.set(self, "sql_server_license_type", value)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The storage account Id.
        """
        return pulumi.get(self, "storage_account_id")

    @storage_account_id.setter
    def storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_id", value)

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability set ARM Id for resource manager deployment.
        """
        return pulumi.get(self, "target_availability_set_id")

    @target_availability_set_id.setter
    def target_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_set_id", value)

    @property
    @pulumi.getter(name="targetAvailabilityZone")
    def target_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability zone.
        """
        return pulumi.get(self, "target_availability_zone")

    @target_availability_zone.setter
    def target_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_zone", value)

    @property
    @pulumi.getter(name="targetAzureNetworkId")
    def target_azure_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected target Azure network Id.
        """
        return pulumi.get(self, "target_azure_network_id")

    @target_azure_network_id.setter
    def target_azure_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_network_id", value)

    @property
    @pulumi.getter(name="targetAzureSubnetId")
    def target_azure_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected target Azure subnet Id.
        """
        return pulumi.get(self, "target_azure_subnet_id")

    @target_azure_subnet_id.setter
    def target_azure_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_subnet_id", value)

    @property
    @pulumi.getter(name="targetAzureV1ResourceGroupId")
    def target_azure_v1_resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of the target resource group (for classic deployment) in which the failover VM is to be created.
        """
        return pulumi.get(self, "target_azure_v1_resource_group_id")

    @target_azure_v1_resource_group_id.setter
    def target_azure_v1_resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_v1_resource_group_id", value)

    @property
    @pulumi.getter(name="targetAzureV2ResourceGroupId")
    def target_azure_v2_resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of the target resource group (for resource manager deployment) in which the failover VM is to be created.
        """
        return pulumi.get(self, "target_azure_v2_resource_group_id")

    @target_azure_v2_resource_group_id.setter
    def target_azure_v2_resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_v2_resource_group_id", value)

    @property
    @pulumi.getter(name="targetAzureVmName")
    def target_azure_vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target azure VM Name.
        """
        return pulumi.get(self, "target_azure_vm_name")

    @target_azure_vm_name.setter
    def target_azure_vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_vm_name", value)

    @property
    @pulumi.getter(name="targetManagedDiskTags")
    def target_managed_disk_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the target managed disks.
        """
        return pulumi.get(self, "target_managed_disk_tags")

    @target_managed_disk_tags.setter
    def target_managed_disk_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_managed_disk_tags", value)

    @property
    @pulumi.getter(name="targetNicTags")
    def target_nic_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the target NICs.
        """
        return pulumi.get(self, "target_nic_tags")

    @target_nic_tags.setter
    def target_nic_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_nic_tags", value)

    @property
    @pulumi.getter(name="targetProximityPlacementGroupId")
    def target_proximity_placement_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The proximity placement group ARM Id.
        """
        return pulumi.get(self, "target_proximity_placement_group_id")

    @target_proximity_placement_group_id.setter
    def target_proximity_placement_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_proximity_placement_group_id", value)

    @property
    @pulumi.getter(name="targetVmSize")
    def target_vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        The target VM size.
        """
        return pulumi.get(self, "target_vm_size")

    @target_vm_size.setter
    def target_vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_size", value)

    @property
    @pulumi.getter(name="targetVmTags")
    def target_vm_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The target VM tags.
        """
        return pulumi.get(self, "target_vm_tags")

    @target_vm_tags.setter
    def target_vm_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_vm_tags", value)


@pulumi.input_type
class InMageAzureV2PolicyInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 multi_vm_sync_status: pulumi.Input[Union[str, 'SetMultiVmSyncStatus']],
                 app_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 crash_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 recovery_point_history: Optional[pulumi.Input[int]] = None,
                 recovery_point_threshold_in_minutes: Optional[pulumi.Input[int]] = None):
        """
        VMWare Azure specific policy Input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMageAzureV2'.
        :param pulumi.Input[Union[str, 'SetMultiVmSyncStatus']] multi_vm_sync_status: A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: The app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: The crash consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] recovery_point_history: The duration in minutes until which the recovery points need to be stored.
        :param pulumi.Input[int] recovery_point_threshold_in_minutes: The recovery point threshold in minutes.
        """
        pulumi.set(__self__, "instance_type", 'InMageAzureV2')
        pulumi.set(__self__, "multi_vm_sync_status", multi_vm_sync_status)
        if app_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        if crash_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        if recovery_point_history is not None:
            pulumi.set(__self__, "recovery_point_history", recovery_point_history)
        if recovery_point_threshold_in_minutes is not None:
            pulumi.set(__self__, "recovery_point_threshold_in_minutes", recovery_point_threshold_in_minutes)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMageAzureV2'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="multiVmSyncStatus")
    def multi_vm_sync_status(self) -> pulumi.Input[Union[str, 'SetMultiVmSyncStatus']]:
        """
        A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        """
        return pulumi.get(self, "multi_vm_sync_status")

    @multi_vm_sync_status.setter
    def multi_vm_sync_status(self, value: pulumi.Input[Union[str, 'SetMultiVmSyncStatus']]):
        pulumi.set(self, "multi_vm_sync_status", value)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="recoveryPointHistory")
    def recovery_point_history(self) -> Optional[pulumi.Input[int]]:
        """
        The duration in minutes until which the recovery points need to be stored.
        """
        return pulumi.get(self, "recovery_point_history")

    @recovery_point_history.setter
    def recovery_point_history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_history", value)

    @property
    @pulumi.getter(name="recoveryPointThresholdInMinutes")
    def recovery_point_threshold_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The recovery point threshold in minutes.
        """
        return pulumi.get(self, "recovery_point_threshold_in_minutes")

    @recovery_point_threshold_in_minutes.setter
    def recovery_point_threshold_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_threshold_in_minutes", value)


@pulumi.input_type
class InMageDiskExclusionInputArgs:
    def __init__(__self__, *,
                 disk_signature_options: Optional[pulumi.Input[Sequence[pulumi.Input['InMageDiskSignatureExclusionOptionsArgs']]]] = None,
                 volume_options: Optional[pulumi.Input[Sequence[pulumi.Input['InMageVolumeExclusionOptionsArgs']]]] = None):
        """
        DiskExclusionInput when doing enable protection of virtual machine in InMage provider.
        :param pulumi.Input[Sequence[pulumi.Input['InMageDiskSignatureExclusionOptionsArgs']]] disk_signature_options: The guest disk signature based option for disk exclusion.
        :param pulumi.Input[Sequence[pulumi.Input['InMageVolumeExclusionOptionsArgs']]] volume_options: The volume label based option for disk exclusion.
        """
        if disk_signature_options is not None:
            pulumi.set(__self__, "disk_signature_options", disk_signature_options)
        if volume_options is not None:
            pulumi.set(__self__, "volume_options", volume_options)

    @property
    @pulumi.getter(name="diskSignatureOptions")
    def disk_signature_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InMageDiskSignatureExclusionOptionsArgs']]]]:
        """
        The guest disk signature based option for disk exclusion.
        """
        return pulumi.get(self, "disk_signature_options")

    @disk_signature_options.setter
    def disk_signature_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InMageDiskSignatureExclusionOptionsArgs']]]]):
        pulumi.set(self, "disk_signature_options", value)

    @property
    @pulumi.getter(name="volumeOptions")
    def volume_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InMageVolumeExclusionOptionsArgs']]]]:
        """
        The volume label based option for disk exclusion.
        """
        return pulumi.get(self, "volume_options")

    @volume_options.setter
    def volume_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InMageVolumeExclusionOptionsArgs']]]]):
        pulumi.set(self, "volume_options", value)


@pulumi.input_type
class InMageDiskSignatureExclusionOptionsArgs:
    def __init__(__self__, *,
                 disk_signature: Optional[pulumi.Input[str]] = None):
        """
        Guest disk signature based disk exclusion option when doing enable protection of virtual machine in InMage provider.
        :param pulumi.Input[str] disk_signature: The guest signature of disk to be excluded from replication.
        """
        if disk_signature is not None:
            pulumi.set(__self__, "disk_signature", disk_signature)

    @property
    @pulumi.getter(name="diskSignature")
    def disk_signature(self) -> Optional[pulumi.Input[str]]:
        """
        The guest signature of disk to be excluded from replication.
        """
        return pulumi.get(self, "disk_signature")

    @disk_signature.setter
    def disk_signature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_signature", value)


@pulumi.input_type
class InMageEnableProtectionInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 master_target_id: pulumi.Input[str],
                 multi_vm_group_id: pulumi.Input[str],
                 multi_vm_group_name: pulumi.Input[str],
                 process_server_id: pulumi.Input[str],
                 retention_drive: pulumi.Input[str],
                 datastore_name: Optional[pulumi.Input[str]] = None,
                 disk_exclusion_input: Optional[pulumi.Input['InMageDiskExclusionInputArgs']] = None,
                 disks_to_include: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 run_as_account_id: Optional[pulumi.Input[str]] = None,
                 vm_friendly_name: Optional[pulumi.Input[str]] = None):
        """
        VMware Azure specific enable protection input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMage'.
        :param pulumi.Input[str] master_target_id: The Master Target Id.
        :param pulumi.Input[str] multi_vm_group_id: The multi VM group Id.
        :param pulumi.Input[str] multi_vm_group_name: The multi VM group name.
        :param pulumi.Input[str] process_server_id: The Process Server Id.
        :param pulumi.Input[str] retention_drive: The retention drive to use on the MT.
        :param pulumi.Input[str] datastore_name: The target datastore name.
        :param pulumi.Input['InMageDiskExclusionInputArgs'] disk_exclusion_input: The enable disk exclusion input.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disks_to_include: The disks to include list.
        :param pulumi.Input[str] run_as_account_id: The CS account Id.
        :param pulumi.Input[str] vm_friendly_name: The VM Name.
        """
        pulumi.set(__self__, "instance_type", 'InMage')
        pulumi.set(__self__, "master_target_id", master_target_id)
        pulumi.set(__self__, "multi_vm_group_id", multi_vm_group_id)
        pulumi.set(__self__, "multi_vm_group_name", multi_vm_group_name)
        pulumi.set(__self__, "process_server_id", process_server_id)
        pulumi.set(__self__, "retention_drive", retention_drive)
        if datastore_name is not None:
            pulumi.set(__self__, "datastore_name", datastore_name)
        if disk_exclusion_input is not None:
            pulumi.set(__self__, "disk_exclusion_input", disk_exclusion_input)
        if disks_to_include is not None:
            pulumi.set(__self__, "disks_to_include", disks_to_include)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        if vm_friendly_name is not None:
            pulumi.set(__self__, "vm_friendly_name", vm_friendly_name)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMage'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="masterTargetId")
    def master_target_id(self) -> pulumi.Input[str]:
        """
        The Master Target Id.
        """
        return pulumi.get(self, "master_target_id")

    @master_target_id.setter
    def master_target_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_target_id", value)

    @property
    @pulumi.getter(name="multiVmGroupId")
    def multi_vm_group_id(self) -> pulumi.Input[str]:
        """
        The multi VM group Id.
        """
        return pulumi.get(self, "multi_vm_group_id")

    @multi_vm_group_id.setter
    def multi_vm_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "multi_vm_group_id", value)

    @property
    @pulumi.getter(name="multiVmGroupName")
    def multi_vm_group_name(self) -> pulumi.Input[str]:
        """
        The multi VM group name.
        """
        return pulumi.get(self, "multi_vm_group_name")

    @multi_vm_group_name.setter
    def multi_vm_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "multi_vm_group_name", value)

    @property
    @pulumi.getter(name="processServerId")
    def process_server_id(self) -> pulumi.Input[str]:
        """
        The Process Server Id.
        """
        return pulumi.get(self, "process_server_id")

    @process_server_id.setter
    def process_server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "process_server_id", value)

    @property
    @pulumi.getter(name="retentionDrive")
    def retention_drive(self) -> pulumi.Input[str]:
        """
        The retention drive to use on the MT.
        """
        return pulumi.get(self, "retention_drive")

    @retention_drive.setter
    def retention_drive(self, value: pulumi.Input[str]):
        pulumi.set(self, "retention_drive", value)

    @property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target datastore name.
        """
        return pulumi.get(self, "datastore_name")

    @datastore_name.setter
    def datastore_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datastore_name", value)

    @property
    @pulumi.getter(name="diskExclusionInput")
    def disk_exclusion_input(self) -> Optional[pulumi.Input['InMageDiskExclusionInputArgs']]:
        """
        The enable disk exclusion input.
        """
        return pulumi.get(self, "disk_exclusion_input")

    @disk_exclusion_input.setter
    def disk_exclusion_input(self, value: Optional[pulumi.Input['InMageDiskExclusionInputArgs']]):
        pulumi.set(self, "disk_exclusion_input", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The disks to include list.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The CS account Id.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_account_id", value)

    @property
    @pulumi.getter(name="vmFriendlyName")
    def vm_friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        The VM Name.
        """
        return pulumi.get(self, "vm_friendly_name")

    @vm_friendly_name.setter
    def vm_friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_friendly_name", value)


@pulumi.input_type
class InMagePolicyInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 multi_vm_sync_status: pulumi.Input[Union[str, 'SetMultiVmSyncStatus']],
                 app_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 recovery_point_history: Optional[pulumi.Input[int]] = None,
                 recovery_point_threshold_in_minutes: Optional[pulumi.Input[int]] = None):
        """
        VMWare Azure specific protection profile Input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMage'.
        :param pulumi.Input[Union[str, 'SetMultiVmSyncStatus']] multi_vm_sync_status: A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: The app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] recovery_point_history: The duration in minutes until which the recovery points need to be stored.
        :param pulumi.Input[int] recovery_point_threshold_in_minutes: The recovery point threshold in minutes.
        """
        pulumi.set(__self__, "instance_type", 'InMage')
        pulumi.set(__self__, "multi_vm_sync_status", multi_vm_sync_status)
        if app_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        if recovery_point_history is not None:
            pulumi.set(__self__, "recovery_point_history", recovery_point_history)
        if recovery_point_threshold_in_minutes is not None:
            pulumi.set(__self__, "recovery_point_threshold_in_minutes", recovery_point_threshold_in_minutes)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMage'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="multiVmSyncStatus")
    def multi_vm_sync_status(self) -> pulumi.Input[Union[str, 'SetMultiVmSyncStatus']]:
        """
        A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        """
        return pulumi.get(self, "multi_vm_sync_status")

    @multi_vm_sync_status.setter
    def multi_vm_sync_status(self, value: pulumi.Input[Union[str, 'SetMultiVmSyncStatus']]):
        pulumi.set(self, "multi_vm_sync_status", value)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="recoveryPointHistory")
    def recovery_point_history(self) -> Optional[pulumi.Input[int]]:
        """
        The duration in minutes until which the recovery points need to be stored.
        """
        return pulumi.get(self, "recovery_point_history")

    @recovery_point_history.setter
    def recovery_point_history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_history", value)

    @property
    @pulumi.getter(name="recoveryPointThresholdInMinutes")
    def recovery_point_threshold_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The recovery point threshold in minutes.
        """
        return pulumi.get(self, "recovery_point_threshold_in_minutes")

    @recovery_point_threshold_in_minutes.setter
    def recovery_point_threshold_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_threshold_in_minutes", value)


@pulumi.input_type
class InMageRcmDiskInputArgs:
    def __init__(__self__, *,
                 disk_id: pulumi.Input[str],
                 disk_type: pulumi.Input[Union[str, 'DiskAccountType']],
                 log_storage_account_id: pulumi.Input[str],
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None):
        """
        InMageRcm disk input.
        :param pulumi.Input[str] disk_id: The disk Id.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The disk type.
        :param pulumi.Input[str] log_storage_account_id: The log storage account ARM Id.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM Id.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        The disk Id.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Input[Union[str, 'DiskAccountType']]:
        """
        The disk type.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: pulumi.Input[Union[str, 'DiskAccountType']]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> pulumi.Input[str]:
        """
        The log storage account ARM Id.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_storage_account_id", value)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM Id.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)


@pulumi.input_type
class InMageRcmDisksDefaultInputArgs:
    def __init__(__self__, *,
                 disk_type: pulumi.Input[Union[str, 'DiskAccountType']],
                 log_storage_account_id: pulumi.Input[str],
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None):
        """
        InMageRcm disk input.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The disk type.
        :param pulumi.Input[str] log_storage_account_id: The log storage account ARM Id.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM Id.
        """
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Input[Union[str, 'DiskAccountType']]:
        """
        The disk type.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: pulumi.Input[Union[str, 'DiskAccountType']]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> pulumi.Input[str]:
        """
        The log storage account ARM Id.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_storage_account_id", value)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM Id.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)


@pulumi.input_type
class InMageRcmEnableProtectionInputArgs:
    def __init__(__self__, *,
                 fabric_discovery_machine_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 process_server_id: pulumi.Input[str],
                 target_resource_group_id: pulumi.Input[str],
                 disks_default: Optional[pulumi.Input['InMageRcmDisksDefaultInputArgs']] = None,
                 disks_to_include: Optional[pulumi.Input[Sequence[pulumi.Input['InMageRcmDiskInputArgs']]]] = None,
                 license_type: Optional[pulumi.Input[Union[str, 'LicenseType']]] = None,
                 multi_vm_group_name: Optional[pulumi.Input[str]] = None,
                 run_as_account_id: Optional[pulumi.Input[str]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_availability_zone: Optional[pulumi.Input[str]] = None,
                 target_boot_diagnostics_storage_account_id: Optional[pulumi.Input[str]] = None,
                 target_network_id: Optional[pulumi.Input[str]] = None,
                 target_proximity_placement_group_id: Optional[pulumi.Input[str]] = None,
                 target_subnet_name: Optional[pulumi.Input[str]] = None,
                 target_vm_name: Optional[pulumi.Input[str]] = None,
                 target_vm_size: Optional[pulumi.Input[str]] = None,
                 test_network_id: Optional[pulumi.Input[str]] = None,
                 test_subnet_name: Optional[pulumi.Input[str]] = None):
        """
        InMageRcm specific enable protection input.
        :param pulumi.Input[str] fabric_discovery_machine_id: The ARM Id of discovered machine.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMageRcm'.
        :param pulumi.Input[str] process_server_id: The process server Id.
        :param pulumi.Input[str] target_resource_group_id: The target resource group ARM Id.
        :param pulumi.Input['InMageRcmDisksDefaultInputArgs'] disks_default: The default disk input.
        :param pulumi.Input[Sequence[pulumi.Input['InMageRcmDiskInputArgs']]] disks_to_include: The disks to include list.
        :param pulumi.Input[Union[str, 'LicenseType']] license_type: The license type.
        :param pulumi.Input[str] multi_vm_group_name: The multi VM group name.
        :param pulumi.Input[str] run_as_account_id: The run-as account Id.
        :param pulumi.Input[str] target_availability_set_id: The target availability set ARM Id.
        :param pulumi.Input[str] target_availability_zone: The target availability zone.
        :param pulumi.Input[str] target_boot_diagnostics_storage_account_id: The target boot diagnostics storage account ARM Id.
        :param pulumi.Input[str] target_network_id: The selected target network ARM Id.
        :param pulumi.Input[str] target_proximity_placement_group_id: The target proximity placement group Id.
        :param pulumi.Input[str] target_subnet_name: The selected target subnet name.
        :param pulumi.Input[str] target_vm_name: The target VM name.
        :param pulumi.Input[str] target_vm_size: The target VM size.
        :param pulumi.Input[str] test_network_id: The selected test network ARM Id.
        :param pulumi.Input[str] test_subnet_name: The selected test subnet name.
        """
        pulumi.set(__self__, "fabric_discovery_machine_id", fabric_discovery_machine_id)
        pulumi.set(__self__, "instance_type", 'InMageRcm')
        pulumi.set(__self__, "process_server_id", process_server_id)
        pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        if disks_default is not None:
            pulumi.set(__self__, "disks_default", disks_default)
        if disks_to_include is not None:
            pulumi.set(__self__, "disks_to_include", disks_to_include)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if multi_vm_group_name is not None:
            pulumi.set(__self__, "multi_vm_group_name", multi_vm_group_name)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        if target_availability_set_id is not None:
            pulumi.set(__self__, "target_availability_set_id", target_availability_set_id)
        if target_availability_zone is not None:
            pulumi.set(__self__, "target_availability_zone", target_availability_zone)
        if target_boot_diagnostics_storage_account_id is not None:
            pulumi.set(__self__, "target_boot_diagnostics_storage_account_id", target_boot_diagnostics_storage_account_id)
        if target_network_id is not None:
            pulumi.set(__self__, "target_network_id", target_network_id)
        if target_proximity_placement_group_id is not None:
            pulumi.set(__self__, "target_proximity_placement_group_id", target_proximity_placement_group_id)
        if target_subnet_name is not None:
            pulumi.set(__self__, "target_subnet_name", target_subnet_name)
        if target_vm_name is not None:
            pulumi.set(__self__, "target_vm_name", target_vm_name)
        if target_vm_size is not None:
            pulumi.set(__self__, "target_vm_size", target_vm_size)
        if test_network_id is not None:
            pulumi.set(__self__, "test_network_id", test_network_id)
        if test_subnet_name is not None:
            pulumi.set(__self__, "test_subnet_name", test_subnet_name)

    @property
    @pulumi.getter(name="fabricDiscoveryMachineId")
    def fabric_discovery_machine_id(self) -> pulumi.Input[str]:
        """
        The ARM Id of discovered machine.
        """
        return pulumi.get(self, "fabric_discovery_machine_id")

    @fabric_discovery_machine_id.setter
    def fabric_discovery_machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "fabric_discovery_machine_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMageRcm'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="processServerId")
    def process_server_id(self) -> pulumi.Input[str]:
        """
        The process server Id.
        """
        return pulumi.get(self, "process_server_id")

    @process_server_id.setter
    def process_server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "process_server_id", value)

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> pulumi.Input[str]:
        """
        The target resource group ARM Id.
        """
        return pulumi.get(self, "target_resource_group_id")

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_group_id", value)

    @property
    @pulumi.getter(name="disksDefault")
    def disks_default(self) -> Optional[pulumi.Input['InMageRcmDisksDefaultInputArgs']]:
        """
        The default disk input.
        """
        return pulumi.get(self, "disks_default")

    @disks_default.setter
    def disks_default(self, value: Optional[pulumi.Input['InMageRcmDisksDefaultInputArgs']]):
        pulumi.set(self, "disks_default", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InMageRcmDiskInputArgs']]]]:
        """
        The disks to include list.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InMageRcmDiskInputArgs']]]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[Union[str, 'LicenseType']]]:
        """
        The license type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[Union[str, 'LicenseType']]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="multiVmGroupName")
    def multi_vm_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The multi VM group name.
        """
        return pulumi.get(self, "multi_vm_group_name")

    @multi_vm_group_name.setter
    def multi_vm_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_vm_group_name", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The run-as account Id.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_account_id", value)

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability set ARM Id.
        """
        return pulumi.get(self, "target_availability_set_id")

    @target_availability_set_id.setter
    def target_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_set_id", value)

    @property
    @pulumi.getter(name="targetAvailabilityZone")
    def target_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability zone.
        """
        return pulumi.get(self, "target_availability_zone")

    @target_availability_zone.setter
    def target_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_zone", value)

    @property
    @pulumi.getter(name="targetBootDiagnosticsStorageAccountId")
    def target_boot_diagnostics_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target boot diagnostics storage account ARM Id.
        """
        return pulumi.get(self, "target_boot_diagnostics_storage_account_id")

    @target_boot_diagnostics_storage_account_id.setter
    def target_boot_diagnostics_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_boot_diagnostics_storage_account_id", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected target network ARM Id.
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="targetProximityPlacementGroupId")
    def target_proximity_placement_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target proximity placement group Id.
        """
        return pulumi.get(self, "target_proximity_placement_group_id")

    @target_proximity_placement_group_id.setter
    def target_proximity_placement_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_proximity_placement_group_id", value)

    @property
    @pulumi.getter(name="targetSubnetName")
    def target_subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        The selected target subnet name.
        """
        return pulumi.get(self, "target_subnet_name")

    @target_subnet_name.setter
    def target_subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_subnet_name", value)

    @property
    @pulumi.getter(name="targetVmName")
    def target_vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target VM name.
        """
        return pulumi.get(self, "target_vm_name")

    @target_vm_name.setter
    def target_vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_name", value)

    @property
    @pulumi.getter(name="targetVmSize")
    def target_vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        The target VM size.
        """
        return pulumi.get(self, "target_vm_size")

    @target_vm_size.setter
    def target_vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_size", value)

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected test network ARM Id.
        """
        return pulumi.get(self, "test_network_id")

    @test_network_id.setter
    def test_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_network_id", value)

    @property
    @pulumi.getter(name="testSubnetName")
    def test_subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        The selected test subnet name.
        """
        return pulumi.get(self, "test_subnet_name")

    @test_subnet_name.setter
    def test_subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_subnet_name", value)


@pulumi.input_type
class InMageRcmFabricCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 physical_site_id: pulumi.Input[str],
                 source_agent_identity: pulumi.Input['IdentityProviderInputArgs'],
                 vmware_site_id: pulumi.Input[str]):
        """
        InMageRcm fabric provider specific settings.
        :param pulumi.Input[str] instance_type: Gets the class type.
               Expected value is 'InMageRcm'.
        :param pulumi.Input[str] physical_site_id: The ARM Id of the physical site.
        :param pulumi.Input['IdentityProviderInputArgs'] source_agent_identity: The identity provider input for source agent authentication.
        :param pulumi.Input[str] vmware_site_id: The ARM Id of the VMware site.
        """
        pulumi.set(__self__, "instance_type", 'InMageRcm')
        pulumi.set(__self__, "physical_site_id", physical_site_id)
        pulumi.set(__self__, "source_agent_identity", source_agent_identity)
        pulumi.set(__self__, "vmware_site_id", vmware_site_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the class type.
        Expected value is 'InMageRcm'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="physicalSiteId")
    def physical_site_id(self) -> pulumi.Input[str]:
        """
        The ARM Id of the physical site.
        """
        return pulumi.get(self, "physical_site_id")

    @physical_site_id.setter
    def physical_site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "physical_site_id", value)

    @property
    @pulumi.getter(name="sourceAgentIdentity")
    def source_agent_identity(self) -> pulumi.Input['IdentityProviderInputArgs']:
        """
        The identity provider input for source agent authentication.
        """
        return pulumi.get(self, "source_agent_identity")

    @source_agent_identity.setter
    def source_agent_identity(self, value: pulumi.Input['IdentityProviderInputArgs']):
        pulumi.set(self, "source_agent_identity", value)

    @property
    @pulumi.getter(name="vmwareSiteId")
    def vmware_site_id(self) -> pulumi.Input[str]:
        """
        The ARM Id of the VMware site.
        """
        return pulumi.get(self, "vmware_site_id")

    @vmware_site_id.setter
    def vmware_site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vmware_site_id", value)


@pulumi.input_type
class InMageRcmFailbackPolicyCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 app_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 crash_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None):
        """
        InMageRcmFailback policy creation input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMageRcmFailback'.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: The app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: The crash consistent snapshot frequency (in minutes).
        """
        pulumi.set(__self__, "instance_type", 'InMageRcmFailback')
        if app_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        if crash_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMageRcmFailback'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)


@pulumi.input_type
class InMageRcmPolicyCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 app_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 crash_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 enable_multi_vm_sync: Optional[pulumi.Input[str]] = None,
                 recovery_point_history_in_minutes: Optional[pulumi.Input[int]] = None):
        """
        InMageRcm policy creation input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMageRcm'.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: The app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: The crash consistent snapshot frequency (in minutes).
        :param pulumi.Input[str] enable_multi_vm_sync: A value indicating whether multi-VM sync has to be enabled.
        :param pulumi.Input[int] recovery_point_history_in_minutes: The duration in minutes until which the recovery points need to be stored.
        """
        pulumi.set(__self__, "instance_type", 'InMageRcm')
        if app_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        if crash_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        if enable_multi_vm_sync is not None:
            pulumi.set(__self__, "enable_multi_vm_sync", enable_multi_vm_sync)
        if recovery_point_history_in_minutes is not None:
            pulumi.set(__self__, "recovery_point_history_in_minutes", recovery_point_history_in_minutes)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMageRcm'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="enableMultiVmSync")
    def enable_multi_vm_sync(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether multi-VM sync has to be enabled.
        """
        return pulumi.get(self, "enable_multi_vm_sync")

    @enable_multi_vm_sync.setter
    def enable_multi_vm_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_multi_vm_sync", value)

    @property
    @pulumi.getter(name="recoveryPointHistoryInMinutes")
    def recovery_point_history_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The duration in minutes until which the recovery points need to be stored.
        """
        return pulumi.get(self, "recovery_point_history_in_minutes")

    @recovery_point_history_in_minutes.setter
    def recovery_point_history_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_history_in_minutes", value)


@pulumi.input_type
class InMageVolumeExclusionOptionsArgs:
    def __init__(__self__, *,
                 only_exclude_if_single_volume: Optional[pulumi.Input[str]] = None,
                 volume_label: Optional[pulumi.Input[str]] = None):
        """
        Guest disk signature based disk exclusion option when doing enable protection of virtual machine in InMage provider.
        :param pulumi.Input[str] only_exclude_if_single_volume: The value indicating whether to exclude multi volume disk or not. If a disk has multiple volumes and one of the volume has label matching with VolumeLabel this disk will be excluded from replication if OnlyExcludeIfSingleVolume is false.
        :param pulumi.Input[str] volume_label: The volume label. The disk having any volume with this label will be excluded from replication.
        """
        if only_exclude_if_single_volume is not None:
            pulumi.set(__self__, "only_exclude_if_single_volume", only_exclude_if_single_volume)
        if volume_label is not None:
            pulumi.set(__self__, "volume_label", volume_label)

    @property
    @pulumi.getter(name="onlyExcludeIfSingleVolume")
    def only_exclude_if_single_volume(self) -> Optional[pulumi.Input[str]]:
        """
        The value indicating whether to exclude multi volume disk or not. If a disk has multiple volumes and one of the volume has label matching with VolumeLabel this disk will be excluded from replication if OnlyExcludeIfSingleVolume is false.
        """
        return pulumi.get(self, "only_exclude_if_single_volume")

    @only_exclude_if_single_volume.setter
    def only_exclude_if_single_volume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "only_exclude_if_single_volume", value)

    @property
    @pulumi.getter(name="volumeLabel")
    def volume_label(self) -> Optional[pulumi.Input[str]]:
        """
        The volume label. The disk having any volume with this label will be excluded from replication.
        """
        return pulumi.get(self, "volume_label")

    @volume_label.setter
    def volume_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_label", value)


@pulumi.input_type
class InquiryInfoArgs:
    def __init__(__self__, *,
                 inquiry_details: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInquiryDetailsArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Details about inquired protectable items under a given container.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadInquiryDetailsArgs']]] inquiry_details: Inquiry Details which will have workload specific details.
               For e.g. - For SQL and oracle this will contain different details.
        :param pulumi.Input[str] status: Inquiry Status for this container such as
               InProgress | Failed | Succeeded
        """
        if inquiry_details is not None:
            pulumi.set(__self__, "inquiry_details", inquiry_details)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="inquiryDetails")
    def inquiry_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInquiryDetailsArgs']]]]:
        """
        Inquiry Details which will have workload specific details.
        For e.g. - For SQL and oracle this will contain different details.
        """
        return pulumi.get(self, "inquiry_details")

    @inquiry_details.setter
    def inquiry_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInquiryDetailsArgs']]]]):
        pulumi.set(self, "inquiry_details", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Inquiry Status for this container such as
        InProgress | Failed | Succeeded
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class InquiryValidationArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Validation for inquired protectable items under a given container.
        :param pulumi.Input[str] status: Status for the Inquiry Validation.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status for the Inquiry Validation.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class InstantRPAdditionalDetailsArgs:
    def __init__(__self__, *,
                 azure_backup_rg_name_prefix: Optional[pulumi.Input[str]] = None,
                 azure_backup_rg_name_suffix: Optional[pulumi.Input[str]] = None):
        if azure_backup_rg_name_prefix is not None:
            pulumi.set(__self__, "azure_backup_rg_name_prefix", azure_backup_rg_name_prefix)
        if azure_backup_rg_name_suffix is not None:
            pulumi.set(__self__, "azure_backup_rg_name_suffix", azure_backup_rg_name_suffix)

    @property
    @pulumi.getter(name="azureBackupRGNamePrefix")
    def azure_backup_rg_name_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_backup_rg_name_prefix")

    @azure_backup_rg_name_prefix.setter
    def azure_backup_rg_name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_backup_rg_name_prefix", value)

    @property
    @pulumi.getter(name="azureBackupRGNameSuffix")
    def azure_backup_rg_name_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_backup_rg_name_suffix")

    @azure_backup_rg_name_suffix.setter
    def azure_backup_rg_name_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_backup_rg_name_suffix", value)


@pulumi.input_type
class KPIResourceHealthDetailsArgs:
    def __init__(__self__, *,
                 resource_health_status: Optional[pulumi.Input[Union[str, 'ResourceHealthStatus']]] = None):
        """
        KPI Resource Health Details
        :param pulumi.Input[Union[str, 'ResourceHealthStatus']] resource_health_status: Resource Health Status
        """
        if resource_health_status is not None:
            pulumi.set(__self__, "resource_health_status", resource_health_status)

    @property
    @pulumi.getter(name="resourceHealthStatus")
    def resource_health_status(self) -> Optional[pulumi.Input[Union[str, 'ResourceHealthStatus']]]:
        """
        Resource Health Status
        """
        return pulumi.get(self, "resource_health_status")

    @resource_health_status.setter
    def resource_health_status(self, value: Optional[pulumi.Input[Union[str, 'ResourceHealthStatus']]]):
        pulumi.set(self, "resource_health_status", value)


@pulumi.input_type
class KeyEncryptionKeyInfoArgs:
    def __init__(__self__, *,
                 key_identifier: Optional[pulumi.Input[str]] = None,
                 key_vault_resource_arm_id: Optional[pulumi.Input[str]] = None):
        """
        Key Encryption Key (KEK) information.
        :param pulumi.Input[str] key_identifier: The key URL / identifier.
        :param pulumi.Input[str] key_vault_resource_arm_id: The KeyVault resource ARM Id for key.
        """
        if key_identifier is not None:
            pulumi.set(__self__, "key_identifier", key_identifier)
        if key_vault_resource_arm_id is not None:
            pulumi.set(__self__, "key_vault_resource_arm_id", key_vault_resource_arm_id)

    @property
    @pulumi.getter(name="keyIdentifier")
    def key_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The key URL / identifier.
        """
        return pulumi.get(self, "key_identifier")

    @key_identifier.setter
    def key_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_identifier", value)

    @property
    @pulumi.getter(name="keyVaultResourceArmId")
    def key_vault_resource_arm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The KeyVault resource ARM Id for key.
        """
        return pulumi.get(self, "key_vault_resource_arm_id")

    @key_vault_resource_arm_id.setter
    def key_vault_resource_arm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_resource_arm_id", value)


@pulumi.input_type
class LogSchedulePolicyArgs:
    def __init__(__self__, *,
                 schedule_policy_type: pulumi.Input[str],
                 schedule_frequency_in_mins: Optional[pulumi.Input[int]] = None):
        """
        Log policy schedule.
        :param pulumi.Input[str] schedule_policy_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'LogSchedulePolicy'.
        :param pulumi.Input[int] schedule_frequency_in_mins: Frequency of the log schedule operation of this policy in minutes.
        """
        pulumi.set(__self__, "schedule_policy_type", 'LogSchedulePolicy')
        if schedule_frequency_in_mins is not None:
            pulumi.set(__self__, "schedule_frequency_in_mins", schedule_frequency_in_mins)

    @property
    @pulumi.getter(name="schedulePolicyType")
    def schedule_policy_type(self) -> pulumi.Input[str]:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'LogSchedulePolicy'.
        """
        return pulumi.get(self, "schedule_policy_type")

    @schedule_policy_type.setter
    def schedule_policy_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_policy_type", value)

    @property
    @pulumi.getter(name="scheduleFrequencyInMins")
    def schedule_frequency_in_mins(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency of the log schedule operation of this policy in minutes.
        """
        return pulumi.get(self, "schedule_frequency_in_mins")

    @schedule_frequency_in_mins.setter
    def schedule_frequency_in_mins(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "schedule_frequency_in_mins", value)


@pulumi.input_type
class LongTermRetentionPolicyArgs:
    def __init__(__self__, *,
                 retention_policy_type: pulumi.Input[str],
                 daily_schedule: Optional[pulumi.Input['DailyRetentionScheduleArgs']] = None,
                 monthly_schedule: Optional[pulumi.Input['MonthlyRetentionScheduleArgs']] = None,
                 weekly_schedule: Optional[pulumi.Input['WeeklyRetentionScheduleArgs']] = None,
                 yearly_schedule: Optional[pulumi.Input['YearlyRetentionScheduleArgs']] = None):
        """
        Long term retention policy.
        :param pulumi.Input[str] retention_policy_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'LongTermRetentionPolicy'.
        :param pulumi.Input['DailyRetentionScheduleArgs'] daily_schedule: Daily retention schedule of the protection policy.
        :param pulumi.Input['MonthlyRetentionScheduleArgs'] monthly_schedule: Monthly retention schedule of the protection policy.
        :param pulumi.Input['WeeklyRetentionScheduleArgs'] weekly_schedule: Weekly retention schedule of the protection policy.
        :param pulumi.Input['YearlyRetentionScheduleArgs'] yearly_schedule: Yearly retention schedule of the protection policy.
        """
        pulumi.set(__self__, "retention_policy_type", 'LongTermRetentionPolicy')
        if daily_schedule is not None:
            pulumi.set(__self__, "daily_schedule", daily_schedule)
        if monthly_schedule is not None:
            pulumi.set(__self__, "monthly_schedule", monthly_schedule)
        if weekly_schedule is not None:
            pulumi.set(__self__, "weekly_schedule", weekly_schedule)
        if yearly_schedule is not None:
            pulumi.set(__self__, "yearly_schedule", yearly_schedule)

    @property
    @pulumi.getter(name="retentionPolicyType")
    def retention_policy_type(self) -> pulumi.Input[str]:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'LongTermRetentionPolicy'.
        """
        return pulumi.get(self, "retention_policy_type")

    @retention_policy_type.setter
    def retention_policy_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "retention_policy_type", value)

    @property
    @pulumi.getter(name="dailySchedule")
    def daily_schedule(self) -> Optional[pulumi.Input['DailyRetentionScheduleArgs']]:
        """
        Daily retention schedule of the protection policy.
        """
        return pulumi.get(self, "daily_schedule")

    @daily_schedule.setter
    def daily_schedule(self, value: Optional[pulumi.Input['DailyRetentionScheduleArgs']]):
        pulumi.set(self, "daily_schedule", value)

    @property
    @pulumi.getter(name="monthlySchedule")
    def monthly_schedule(self) -> Optional[pulumi.Input['MonthlyRetentionScheduleArgs']]:
        """
        Monthly retention schedule of the protection policy.
        """
        return pulumi.get(self, "monthly_schedule")

    @monthly_schedule.setter
    def monthly_schedule(self, value: Optional[pulumi.Input['MonthlyRetentionScheduleArgs']]):
        pulumi.set(self, "monthly_schedule", value)

    @property
    @pulumi.getter(name="weeklySchedule")
    def weekly_schedule(self) -> Optional[pulumi.Input['WeeklyRetentionScheduleArgs']]:
        """
        Weekly retention schedule of the protection policy.
        """
        return pulumi.get(self, "weekly_schedule")

    @weekly_schedule.setter
    def weekly_schedule(self, value: Optional[pulumi.Input['WeeklyRetentionScheduleArgs']]):
        pulumi.set(self, "weekly_schedule", value)

    @property
    @pulumi.getter(name="yearlySchedule")
    def yearly_schedule(self) -> Optional[pulumi.Input['YearlyRetentionScheduleArgs']]:
        """
        Yearly retention schedule of the protection policy.
        """
        return pulumi.get(self, "yearly_schedule")

    @yearly_schedule.setter
    def yearly_schedule(self, value: Optional[pulumi.Input['YearlyRetentionScheduleArgs']]):
        pulumi.set(self, "yearly_schedule", value)


@pulumi.input_type
class LongTermSchedulePolicyArgs:
    def __init__(__self__, *,
                 schedule_policy_type: pulumi.Input[str]):
        """
        Long term policy schedule.
        :param pulumi.Input[str] schedule_policy_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'LongTermSchedulePolicy'.
        """
        pulumi.set(__self__, "schedule_policy_type", 'LongTermSchedulePolicy')

    @property
    @pulumi.getter(name="schedulePolicyType")
    def schedule_policy_type(self) -> pulumi.Input[str]:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'LongTermSchedulePolicy'.
        """
        return pulumi.get(self, "schedule_policy_type")

    @schedule_policy_type.setter
    def schedule_policy_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_policy_type", value)


@pulumi.input_type
class MABContainerHealthDetailsArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 recommendations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        MAB workload-specific Health Details.
        :param pulumi.Input[int] code: Health Code
        :param pulumi.Input[str] message: Health Message
        :param pulumi.Input[Sequence[pulumi.Input[str]]] recommendations: Health Recommended Actions
        :param pulumi.Input[str] title: Health Title
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if recommendations is not None:
            pulumi.set(__self__, "recommendations", recommendations)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        """
        Health Code
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Health Message
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def recommendations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Health Recommended Actions
        """
        return pulumi.get(self, "recommendations")

    @recommendations.setter
    def recommendations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recommendations", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Health Title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class MabContainerExtendedInfoArgs:
    def __init__(__self__, *,
                 backup_item_type: Optional[pulumi.Input[Union[str, 'BackupItemType']]] = None,
                 backup_items: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 last_backup_status: Optional[pulumi.Input[str]] = None,
                 last_refreshed_at: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None):
        """
        Additional information of the container.
        :param pulumi.Input[Union[str, 'BackupItemType']] backup_item_type: Type of backup items associated with this container.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_items: List of backup items associated with this container.
        :param pulumi.Input[str] last_backup_status: Latest backup status of this container.
        :param pulumi.Input[str] last_refreshed_at: Time stamp when this container was refreshed.
        :param pulumi.Input[str] policy_name: Backup policy associated with this container.
        """
        if backup_item_type is not None:
            pulumi.set(__self__, "backup_item_type", backup_item_type)
        if backup_items is not None:
            pulumi.set(__self__, "backup_items", backup_items)
        if last_backup_status is not None:
            pulumi.set(__self__, "last_backup_status", last_backup_status)
        if last_refreshed_at is not None:
            pulumi.set(__self__, "last_refreshed_at", last_refreshed_at)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="backupItemType")
    def backup_item_type(self) -> Optional[pulumi.Input[Union[str, 'BackupItemType']]]:
        """
        Type of backup items associated with this container.
        """
        return pulumi.get(self, "backup_item_type")

    @backup_item_type.setter
    def backup_item_type(self, value: Optional[pulumi.Input[Union[str, 'BackupItemType']]]):
        pulumi.set(self, "backup_item_type", value)

    @property
    @pulumi.getter(name="backupItems")
    def backup_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of backup items associated with this container.
        """
        return pulumi.get(self, "backup_items")

    @backup_items.setter
    def backup_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_items", value)

    @property
    @pulumi.getter(name="lastBackupStatus")
    def last_backup_status(self) -> Optional[pulumi.Input[str]]:
        """
        Latest backup status of this container.
        """
        return pulumi.get(self, "last_backup_status")

    @last_backup_status.setter
    def last_backup_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_status", value)

    @property
    @pulumi.getter(name="lastRefreshedAt")
    def last_refreshed_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time stamp when this container was refreshed.
        """
        return pulumi.get(self, "last_refreshed_at")

    @last_refreshed_at.setter
    def last_refreshed_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_refreshed_at", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Backup policy associated with this container.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)


@pulumi.input_type
class MabContainerArgs:
    def __init__(__self__, *,
                 container_type: pulumi.Input[str],
                 agent_version: Optional[pulumi.Input[str]] = None,
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 can_re_register: Optional[pulumi.Input[bool]] = None,
                 container_health_state: Optional[pulumi.Input[str]] = None,
                 container_id: Optional[pulumi.Input[float]] = None,
                 extended_info: Optional[pulumi.Input['MabContainerExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 mab_container_health_details: Optional[pulumi.Input[Sequence[pulumi.Input['MABContainerHealthDetailsArgs']]]] = None,
                 protectable_object_type: Optional[pulumi.Input[str]] = None,
                 protected_item_count: Optional[pulumi.Input[float]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None):
        """
        Container with items backed up using MAB backup engine.
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
               Expected value is 'Windows'.
        :param pulumi.Input[str] agent_version: Agent version of this container.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the container.
        :param pulumi.Input[bool] can_re_register: Can the container be registered one more time.
        :param pulumi.Input[str] container_health_state: Health state of mab container.
        :param pulumi.Input[float] container_id: ContainerID represents the container.
        :param pulumi.Input['MabContainerExtendedInfoArgs'] extended_info: Additional information for this container
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[Sequence[pulumi.Input['MABContainerHealthDetailsArgs']]] mab_container_health_details: Health details on this mab container.
        :param pulumi.Input[str] protectable_object_type: Type of the protectable object associated with this container
        :param pulumi.Input[float] protected_item_count: Number of items backed up in this container.
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        """
        pulumi.set(__self__, "container_type", 'Windows')
        if agent_version is not None:
            pulumi.set(__self__, "agent_version", agent_version)
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if can_re_register is not None:
            pulumi.set(__self__, "can_re_register", can_re_register)
        if container_health_state is not None:
            pulumi.set(__self__, "container_health_state", container_health_state)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if mab_container_health_details is not None:
            pulumi.set(__self__, "mab_container_health_details", mab_container_health_details)
        if protectable_object_type is not None:
            pulumi.set(__self__, "protectable_object_type", protectable_object_type)
        if protected_item_count is not None:
            pulumi.set(__self__, "protected_item_count", protected_item_count)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Input[str]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        Expected value is 'Windows'.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> Optional[pulumi.Input[str]]:
        """
        Agent version of this container.
        """
        return pulumi.get(self, "agent_version")

    @agent_version.setter
    def agent_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_version", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="canReRegister")
    def can_re_register(self) -> Optional[pulumi.Input[bool]]:
        """
        Can the container be registered one more time.
        """
        return pulumi.get(self, "can_re_register")

    @can_re_register.setter
    def can_re_register(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_re_register", value)

    @property
    @pulumi.getter(name="containerHealthState")
    def container_health_state(self) -> Optional[pulumi.Input[str]]:
        """
        Health state of mab container.
        """
        return pulumi.get(self, "container_health_state")

    @container_health_state.setter
    def container_health_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_health_state", value)

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> Optional[pulumi.Input[float]]:
        """
        ContainerID represents the container.
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['MabContainerExtendedInfoArgs']]:
        """
        Additional information for this container
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['MabContainerExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="mabContainerHealthDetails")
    def mab_container_health_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MABContainerHealthDetailsArgs']]]]:
        """
        Health details on this mab container.
        """
        return pulumi.get(self, "mab_container_health_details")

    @mab_container_health_details.setter
    def mab_container_health_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MABContainerHealthDetailsArgs']]]]):
        pulumi.set(self, "mab_container_health_details", value)

    @property
    @pulumi.getter(name="protectableObjectType")
    def protectable_object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the protectable object associated with this container
        """
        return pulumi.get(self, "protectable_object_type")

    @protectable_object_type.setter
    def protectable_object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_object_type", value)

    @property
    @pulumi.getter(name="protectedItemCount")
    def protected_item_count(self) -> Optional[pulumi.Input[float]]:
        """
        Number of items backed up in this container.
        """
        return pulumi.get(self, "protected_item_count")

    @protected_item_count.setter
    def protected_item_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "protected_item_count", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)


@pulumi.input_type
class MabFileFolderProtectedItemExtendedInfoArgs:
    def __init__(__self__, *,
                 last_refreshed_at: Optional[pulumi.Input[str]] = None,
                 oldest_recovery_point: Optional[pulumi.Input[str]] = None,
                 recovery_point_count: Optional[pulumi.Input[int]] = None):
        """
        Additional information on the backed up item.
        :param pulumi.Input[str] last_refreshed_at: Last time when the agent data synced to service.
        :param pulumi.Input[str] oldest_recovery_point: The oldest backup copy available.
        :param pulumi.Input[int] recovery_point_count: Number of backup copies associated with the backup item.
        """
        if last_refreshed_at is not None:
            pulumi.set(__self__, "last_refreshed_at", last_refreshed_at)
        if oldest_recovery_point is not None:
            pulumi.set(__self__, "oldest_recovery_point", oldest_recovery_point)
        if recovery_point_count is not None:
            pulumi.set(__self__, "recovery_point_count", recovery_point_count)

    @property
    @pulumi.getter(name="lastRefreshedAt")
    def last_refreshed_at(self) -> Optional[pulumi.Input[str]]:
        """
        Last time when the agent data synced to service.
        """
        return pulumi.get(self, "last_refreshed_at")

    @last_refreshed_at.setter
    def last_refreshed_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_refreshed_at", value)

    @property
    @pulumi.getter(name="oldestRecoveryPoint")
    def oldest_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        The oldest backup copy available.
        """
        return pulumi.get(self, "oldest_recovery_point")

    @oldest_recovery_point.setter
    def oldest_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oldest_recovery_point", value)

    @property
    @pulumi.getter(name="recoveryPointCount")
    def recovery_point_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of backup copies associated with the backup item.
        """
        return pulumi.get(self, "recovery_point_count")

    @recovery_point_count.setter
    def recovery_point_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_count", value)


@pulumi.input_type
class MabFileFolderProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[Union[str, 'BackupManagementType']]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 computer_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 deferred_delete_sync_time_in_utc: Optional[pulumi.Input[float]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 extended_info: Optional[pulumi.Input['MabFileFolderProtectedItemExtendedInfoArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 is_archive_enabled: Optional[pulumi.Input[bool]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 last_backup_status: Optional[pulumi.Input[str]] = None,
                 last_backup_time: Optional[pulumi.Input[str]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[str]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[Union[str, 'DataSourceType']]] = None):
        """
        MAB workload-specific backup item.
        :param pulumi.Input[str] protected_item_type: backup item type.
               Expected value is 'MabFileFolderProtectedItem'.
        :param pulumi.Input[Union[str, 'BackupManagementType']] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] computer_name: Name of the computer associated with this backup item.
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[float] deferred_delete_sync_time_in_utc: Sync time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input['MabFileFolderProtectedItemExtendedInfoArgs'] extended_info: Additional information with this backup item.
        :param pulumi.Input[str] friendly_name: Friendly name of this backup item.
        :param pulumi.Input[bool] is_archive_enabled: Flag to identify whether datasource is protected in archive
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[str] last_backup_status: Status of last backup operation.
        :param pulumi.Input[str] last_backup_time: Timestamp of the last backup operation on this backup item.
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] policy_name: Name of the policy used for protection
        :param pulumi.Input[str] protection_state: Protected, ProtectionStopped, IRPending or ProtectionError
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuardOperationRequests on which LAC check will be performed
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[Union[str, 'DataSourceType']] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", 'MabFileFolderProtectedItem')
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_sync_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_sync_time_in_utc", deferred_delete_sync_time_in_utc)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if extended_info is not None:
            pulumi.set(__self__, "extended_info", extended_info)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if is_archive_enabled is not None:
            pulumi.set(__self__, "is_archive_enabled", is_archive_enabled)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if last_backup_status is not None:
            pulumi.set(__self__, "last_backup_status", last_backup_status)
        if last_backup_time is not None:
            pulumi.set(__self__, "last_backup_time", last_backup_time)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        Expected value is 'MabFileFolderProtectedItem'.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[Union[str, 'BackupManagementType']]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[Union[str, 'BackupManagementType']]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the computer associated with this backup item.
        """
        return pulumi.get(self, "computer_name")

    @computer_name.setter
    def computer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "computer_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteSyncTimeInUTC")
    def deferred_delete_sync_time_in_utc(self) -> Optional[pulumi.Input[float]]:
        """
        Sync time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_sync_time_in_utc")

    @deferred_delete_sync_time_in_utc.setter
    def deferred_delete_sync_time_in_utc(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "deferred_delete_sync_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="extendedInfo")
    def extended_info(self) -> Optional[pulumi.Input['MabFileFolderProtectedItemExtendedInfoArgs']]:
        """
        Additional information with this backup item.
        """
        return pulumi.get(self, "extended_info")

    @extended_info.setter
    def extended_info(self, value: Optional[pulumi.Input['MabFileFolderProtectedItemExtendedInfoArgs']]):
        pulumi.set(self, "extended_info", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of this backup item.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="isArchiveEnabled")
    def is_archive_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether datasource is protected in archive
        """
        return pulumi.get(self, "is_archive_enabled")

    @is_archive_enabled.setter
    def is_archive_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archive_enabled", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="lastBackupStatus")
    def last_backup_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of last backup operation.
        """
        return pulumi.get(self, "last_backup_status")

    @last_backup_status.setter
    def last_backup_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_status", value)

    @property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the last backup operation on this backup item.
        """
        return pulumi.get(self, "last_backup_time")

    @last_backup_time.setter
    def last_backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_backup_time", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the policy used for protection
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[str]]:
        """
        Protected, ProtectionStopped, IRPending or ProtectionError
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuardOperationRequests on which LAC check will be performed
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[Union[str, 'DataSourceType']]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[Union[str, 'DataSourceType']]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class MabProtectionPolicyArgs:
    def __init__(__self__, *,
                 backup_management_type: pulumi.Input[str],
                 protected_items_count: Optional[pulumi.Input[int]] = None,
                 resource_guard_operation_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retention_policy: Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]] = None,
                 schedule_policy: Optional[pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']]] = None):
        """
        Mab container-specific backup policy.
        :param pulumi.Input[str] backup_management_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'MAB'.
        :param pulumi.Input[int] protected_items_count: Number of items associated with this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_guard_operation_requests: ResourceGuard Operation Requests
        :param pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']] retention_policy: Retention policy details.
        :param pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']] schedule_policy: Backup schedule of backup policy.
        """
        pulumi.set(__self__, "backup_management_type", 'MAB')
        if protected_items_count is not None:
            pulumi.set(__self__, "protected_items_count", protected_items_count)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)
        if schedule_policy is not None:
            pulumi.set(__self__, "schedule_policy", schedule_policy)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> pulumi.Input[str]:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'MAB'.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="protectedItemsCount")
    def protected_items_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of items associated with this policy.
        """
        return pulumi.get(self, "protected_items_count")

    @protected_items_count.setter
    def protected_items_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protected_items_count", value)

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ResourceGuard Operation Requests
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @resource_guard_operation_requests.setter
    def resource_guard_operation_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_guard_operation_requests", value)

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]]:
        """
        Retention policy details.
        """
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]]):
        pulumi.set(self, "retention_policy", value)

    @property
    @pulumi.getter(name="schedulePolicy")
    def schedule_policy(self) -> Optional[pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']]]:
        """
        Backup schedule of backup policy.
        """
        return pulumi.get(self, "schedule_policy")

    @schedule_policy.setter
    def schedule_policy(self, value: Optional[pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']]]):
        pulumi.set(self, "schedule_policy", value)


@pulumi.input_type
class MonthlyRetentionScheduleArgs:
    def __init__(__self__, *,
                 retention_duration: Optional[pulumi.Input['RetentionDurationArgs']] = None,
                 retention_schedule_daily: Optional[pulumi.Input['DailyRetentionFormatArgs']] = None,
                 retention_schedule_format_type: Optional[pulumi.Input[Union[str, 'RetentionScheduleFormat']]] = None,
                 retention_schedule_weekly: Optional[pulumi.Input['WeeklyRetentionFormatArgs']] = None,
                 retention_times: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Monthly retention schedule.
        :param pulumi.Input['RetentionDurationArgs'] retention_duration: Retention duration of retention Policy.
        :param pulumi.Input['DailyRetentionFormatArgs'] retention_schedule_daily: Daily retention format for monthly retention policy.
        :param pulumi.Input[Union[str, 'RetentionScheduleFormat']] retention_schedule_format_type: Retention schedule format type for monthly retention policy.
        :param pulumi.Input['WeeklyRetentionFormatArgs'] retention_schedule_weekly: Weekly retention format for monthly retention policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] retention_times: Retention times of retention policy.
        """
        if retention_duration is not None:
            pulumi.set(__self__, "retention_duration", retention_duration)
        if retention_schedule_daily is not None:
            pulumi.set(__self__, "retention_schedule_daily", retention_schedule_daily)
        if retention_schedule_format_type is not None:
            pulumi.set(__self__, "retention_schedule_format_type", retention_schedule_format_type)
        if retention_schedule_weekly is not None:
            pulumi.set(__self__, "retention_schedule_weekly", retention_schedule_weekly)
        if retention_times is not None:
            pulumi.set(__self__, "retention_times", retention_times)

    @property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional[pulumi.Input['RetentionDurationArgs']]:
        """
        Retention duration of retention Policy.
        """
        return pulumi.get(self, "retention_duration")

    @retention_duration.setter
    def retention_duration(self, value: Optional[pulumi.Input['RetentionDurationArgs']]):
        pulumi.set(self, "retention_duration", value)

    @property
    @pulumi.getter(name="retentionScheduleDaily")
    def retention_schedule_daily(self) -> Optional[pulumi.Input['DailyRetentionFormatArgs']]:
        """
        Daily retention format for monthly retention policy.
        """
        return pulumi.get(self, "retention_schedule_daily")

    @retention_schedule_daily.setter
    def retention_schedule_daily(self, value: Optional[pulumi.Input['DailyRetentionFormatArgs']]):
        pulumi.set(self, "retention_schedule_daily", value)

    @property
    @pulumi.getter(name="retentionScheduleFormatType")
    def retention_schedule_format_type(self) -> Optional[pulumi.Input[Union[str, 'RetentionScheduleFormat']]]:
        """
        Retention schedule format type for monthly retention policy.
        """
        return pulumi.get(self, "retention_schedule_format_type")

    @retention_schedule_format_type.setter
    def retention_schedule_format_type(self, value: Optional[pulumi.Input[Union[str, 'RetentionScheduleFormat']]]):
        pulumi.set(self, "retention_schedule_format_type", value)

    @property
    @pulumi.getter(name="retentionScheduleWeekly")
    def retention_schedule_weekly(self) -> Optional[pulumi.Input['WeeklyRetentionFormatArgs']]:
        """
        Weekly retention format for monthly retention policy.
        """
        return pulumi.get(self, "retention_schedule_weekly")

    @retention_schedule_weekly.setter
    def retention_schedule_weekly(self, value: Optional[pulumi.Input['WeeklyRetentionFormatArgs']]):
        pulumi.set(self, "retention_schedule_weekly", value)

    @property
    @pulumi.getter(name="retentionTimes")
    def retention_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Retention times of retention policy.
        """
        return pulumi.get(self, "retention_times")

    @retention_times.setter
    def retention_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "retention_times", value)


@pulumi.input_type
class PrivateEndpointConnectionArgs:
    def __init__(__self__, *,
                 private_endpoint: Optional[pulumi.Input['PrivateEndpointArgs']] = None,
                 private_link_service_connection_state: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']] = None,
                 provisioning_state: Optional[pulumi.Input[Union[str, 'ProvisioningState']]] = None):
        """
        Private Endpoint Connection Response Properties
        :param pulumi.Input['PrivateEndpointArgs'] private_endpoint: Gets or sets private endpoint associated with the private endpoint connection
        :param pulumi.Input['PrivateLinkServiceConnectionStateArgs'] private_link_service_connection_state: Gets or sets private link service connection state
        :param pulumi.Input[Union[str, 'ProvisioningState']] provisioning_state: Gets or sets provisioning state of the private endpoint connection
        """
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_link_service_connection_state is not None:
            pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional[pulumi.Input['PrivateEndpointArgs']]:
        """
        Gets or sets private endpoint associated with the private endpoint connection
        """
        return pulumi.get(self, "private_endpoint")

    @private_endpoint.setter
    def private_endpoint(self, value: Optional[pulumi.Input['PrivateEndpointArgs']]):
        pulumi.set(self, "private_endpoint", value)

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]:
        """
        Gets or sets private link service connection state
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @private_link_service_connection_state.setter
    def private_link_service_connection_state(self, value: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]):
        pulumi.set(self, "private_link_service_connection_state", value)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[pulumi.Input[Union[str, 'ProvisioningState']]]:
        """
        Gets or sets provisioning state of the private endpoint connection
        """
        return pulumi.get(self, "provisioning_state")

    @provisioning_state.setter
    def provisioning_state(self, value: Optional[pulumi.Input[Union[str, 'ProvisioningState']]]):
        pulumi.set(self, "provisioning_state", value)


@pulumi.input_type
class PrivateEndpointArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        The Private Endpoint network resource that is linked to the Private Endpoint connection
        :param pulumi.Input[str] id: Gets or sets id
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 action_required: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'PrivateEndpointConnectionStatus']]] = None):
        """
        Private Link Service Connection State
        :param pulumi.Input[str] action_required: Gets or sets actions required
        :param pulumi.Input[str] description: Gets or sets description
        :param pulumi.Input[Union[str, 'PrivateEndpointConnectionStatus']] status: Gets or sets the status
        """
        if action_required is not None:
            pulumi.set(__self__, "action_required", action_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionRequired")
    def action_required(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets actions required
        """
        return pulumi.get(self, "action_required")

    @action_required.setter
    def action_required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_required", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'PrivateEndpointConnectionStatus']]]:
        """
        Gets or sets the status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'PrivateEndpointConnectionStatus']]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RecoveryPlanA2AInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 primary_extended_location: Optional[pulumi.Input['ExtendedLocationArgs']] = None,
                 primary_zone: Optional[pulumi.Input[str]] = None,
                 recovery_extended_location: Optional[pulumi.Input['ExtendedLocationArgs']] = None,
                 recovery_zone: Optional[pulumi.Input[str]] = None):
        """
        Recovery plan A2A input.
        :param pulumi.Input[str] instance_type: Gets the Instance type.
               Expected value is 'A2A'.
        :param pulumi.Input['ExtendedLocationArgs'] primary_extended_location: The primary extended location.
        :param pulumi.Input[str] primary_zone: The primary zone.
        :param pulumi.Input['ExtendedLocationArgs'] recovery_extended_location: The recovery extended location.
        :param pulumi.Input[str] recovery_zone: The recovery zone.
        """
        pulumi.set(__self__, "instance_type", 'A2A')
        if primary_extended_location is not None:
            pulumi.set(__self__, "primary_extended_location", primary_extended_location)
        if primary_zone is not None:
            pulumi.set(__self__, "primary_zone", primary_zone)
        if recovery_extended_location is not None:
            pulumi.set(__self__, "recovery_extended_location", recovery_extended_location)
        if recovery_zone is not None:
            pulumi.set(__self__, "recovery_zone", recovery_zone)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the Instance type.
        Expected value is 'A2A'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="primaryExtendedLocation")
    def primary_extended_location(self) -> Optional[pulumi.Input['ExtendedLocationArgs']]:
        """
        The primary extended location.
        """
        return pulumi.get(self, "primary_extended_location")

    @primary_extended_location.setter
    def primary_extended_location(self, value: Optional[pulumi.Input['ExtendedLocationArgs']]):
        pulumi.set(self, "primary_extended_location", value)

    @property
    @pulumi.getter(name="primaryZone")
    def primary_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The primary zone.
        """
        return pulumi.get(self, "primary_zone")

    @primary_zone.setter
    def primary_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_zone", value)

    @property
    @pulumi.getter(name="recoveryExtendedLocation")
    def recovery_extended_location(self) -> Optional[pulumi.Input['ExtendedLocationArgs']]:
        """
        The recovery extended location.
        """
        return pulumi.get(self, "recovery_extended_location")

    @recovery_extended_location.setter
    def recovery_extended_location(self, value: Optional[pulumi.Input['ExtendedLocationArgs']]):
        pulumi.set(self, "recovery_extended_location", value)

    @property
    @pulumi.getter(name="recoveryZone")
    def recovery_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery zone.
        """
        return pulumi.get(self, "recovery_zone")

    @recovery_zone.setter
    def recovery_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_zone", value)


@pulumi.input_type
class RecoveryPlanActionArgs:
    def __init__(__self__, *,
                 action_name: pulumi.Input[str],
                 custom_details: pulumi.Input[Union['RecoveryPlanAutomationRunbookActionDetailsArgs', 'RecoveryPlanManualActionDetailsArgs', 'RecoveryPlanScriptActionDetailsArgs']],
                 failover_directions: pulumi.Input[Sequence[pulumi.Input[Union[str, 'PossibleOperationsDirections']]]],
                 failover_types: pulumi.Input[Sequence[pulumi.Input[Union[str, 'ReplicationProtectedItemOperation']]]]):
        """
        Recovery plan action details.
        :param pulumi.Input[str] action_name: The action name.
        :param pulumi.Input[Union['RecoveryPlanAutomationRunbookActionDetailsArgs', 'RecoveryPlanManualActionDetailsArgs', 'RecoveryPlanScriptActionDetailsArgs']] custom_details: The custom details.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'PossibleOperationsDirections']]]] failover_directions: The list of failover directions.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'ReplicationProtectedItemOperation']]]] failover_types: The list of failover types.
        """
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "custom_details", custom_details)
        pulumi.set(__self__, "failover_directions", failover_directions)
        pulumi.set(__self__, "failover_types", failover_types)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> pulumi.Input[str]:
        """
        The action name.
        """
        return pulumi.get(self, "action_name")

    @action_name.setter
    def action_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_name", value)

    @property
    @pulumi.getter(name="customDetails")
    def custom_details(self) -> pulumi.Input[Union['RecoveryPlanAutomationRunbookActionDetailsArgs', 'RecoveryPlanManualActionDetailsArgs', 'RecoveryPlanScriptActionDetailsArgs']]:
        """
        The custom details.
        """
        return pulumi.get(self, "custom_details")

    @custom_details.setter
    def custom_details(self, value: pulumi.Input[Union['RecoveryPlanAutomationRunbookActionDetailsArgs', 'RecoveryPlanManualActionDetailsArgs', 'RecoveryPlanScriptActionDetailsArgs']]):
        pulumi.set(self, "custom_details", value)

    @property
    @pulumi.getter(name="failoverDirections")
    def failover_directions(self) -> pulumi.Input[Sequence[pulumi.Input[Union[str, 'PossibleOperationsDirections']]]]:
        """
        The list of failover directions.
        """
        return pulumi.get(self, "failover_directions")

    @failover_directions.setter
    def failover_directions(self, value: pulumi.Input[Sequence[pulumi.Input[Union[str, 'PossibleOperationsDirections']]]]):
        pulumi.set(self, "failover_directions", value)

    @property
    @pulumi.getter(name="failoverTypes")
    def failover_types(self) -> pulumi.Input[Sequence[pulumi.Input[Union[str, 'ReplicationProtectedItemOperation']]]]:
        """
        The list of failover types.
        """
        return pulumi.get(self, "failover_types")

    @failover_types.setter
    def failover_types(self, value: pulumi.Input[Sequence[pulumi.Input[Union[str, 'ReplicationProtectedItemOperation']]]]):
        pulumi.set(self, "failover_types", value)


@pulumi.input_type
class RecoveryPlanAutomationRunbookActionDetailsArgs:
    def __init__(__self__, *,
                 fabric_location: pulumi.Input[Union[str, 'RecoveryPlanActionLocation']],
                 instance_type: pulumi.Input[str],
                 runbook_id: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        Recovery plan Automation runbook action details.
        :param pulumi.Input[Union[str, 'RecoveryPlanActionLocation']] fabric_location: The fabric location.
        :param pulumi.Input[str] instance_type: Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
               Expected value is 'AutomationRunbookActionDetails'.
        :param pulumi.Input[str] runbook_id: The runbook ARM Id.
        :param pulumi.Input[str] timeout: The runbook timeout.
        """
        pulumi.set(__self__, "fabric_location", fabric_location)
        pulumi.set(__self__, "instance_type", 'AutomationRunbookActionDetails')
        if runbook_id is not None:
            pulumi.set(__self__, "runbook_id", runbook_id)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="fabricLocation")
    def fabric_location(self) -> pulumi.Input[Union[str, 'RecoveryPlanActionLocation']]:
        """
        The fabric location.
        """
        return pulumi.get(self, "fabric_location")

    @fabric_location.setter
    def fabric_location(self, value: pulumi.Input[Union[str, 'RecoveryPlanActionLocation']]):
        pulumi.set(self, "fabric_location", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
        Expected value is 'AutomationRunbookActionDetails'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> Optional[pulumi.Input[str]]:
        """
        The runbook ARM Id.
        """
        return pulumi.get(self, "runbook_id")

    @runbook_id.setter
    def runbook_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runbook_id", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The runbook timeout.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class RecoveryPlanGroupArgs:
    def __init__(__self__, *,
                 group_type: pulumi.Input[Union[str, 'RecoveryPlanGroupType']],
                 end_group_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]]] = None,
                 replication_protected_items: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanProtectedItemArgs']]]] = None,
                 start_group_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]]] = None):
        """
        Recovery plan group details.
        :param pulumi.Input[Union[str, 'RecoveryPlanGroupType']] group_type: The group type.
        :param pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]] end_group_actions: The end group actions.
        :param pulumi.Input[Sequence[pulumi.Input['RecoveryPlanProtectedItemArgs']]] replication_protected_items: The list of protected items.
        :param pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]] start_group_actions: The start group actions.
        """
        pulumi.set(__self__, "group_type", group_type)
        if end_group_actions is not None:
            pulumi.set(__self__, "end_group_actions", end_group_actions)
        if replication_protected_items is not None:
            pulumi.set(__self__, "replication_protected_items", replication_protected_items)
        if start_group_actions is not None:
            pulumi.set(__self__, "start_group_actions", start_group_actions)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Input[Union[str, 'RecoveryPlanGroupType']]:
        """
        The group type.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: pulumi.Input[Union[str, 'RecoveryPlanGroupType']]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter(name="endGroupActions")
    def end_group_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]]]:
        """
        The end group actions.
        """
        return pulumi.get(self, "end_group_actions")

    @end_group_actions.setter
    def end_group_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]]]):
        pulumi.set(self, "end_group_actions", value)

    @property
    @pulumi.getter(name="replicationProtectedItems")
    def replication_protected_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanProtectedItemArgs']]]]:
        """
        The list of protected items.
        """
        return pulumi.get(self, "replication_protected_items")

    @replication_protected_items.setter
    def replication_protected_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanProtectedItemArgs']]]]):
        pulumi.set(self, "replication_protected_items", value)

    @property
    @pulumi.getter(name="startGroupActions")
    def start_group_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]]]:
        """
        The start group actions.
        """
        return pulumi.get(self, "start_group_actions")

    @start_group_actions.setter
    def start_group_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]]]):
        pulumi.set(self, "start_group_actions", value)


@pulumi.input_type
class RecoveryPlanManualActionDetailsArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        Recovery plan manual action details.
        :param pulumi.Input[str] instance_type: Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
               Expected value is 'ManualActionDetails'.
        :param pulumi.Input[str] description: The manual action description.
        """
        pulumi.set(__self__, "instance_type", 'ManualActionDetails')
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
        Expected value is 'ManualActionDetails'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The manual action description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class RecoveryPlanProtectedItemArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None):
        """
        Recovery plan protected item.
        :param pulumi.Input[str] id: The ARM Id of the recovery plan protected item.
        :param pulumi.Input[str] virtual_machine_id: The virtual machine Id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if virtual_machine_id is not None:
            pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM Id of the recovery plan protected item.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        The virtual machine Id.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_id", value)


@pulumi.input_type
class RecoveryPlanScriptActionDetailsArgs:
    def __init__(__self__, *,
                 fabric_location: pulumi.Input[Union[str, 'RecoveryPlanActionLocation']],
                 instance_type: pulumi.Input[str],
                 path: pulumi.Input[str],
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        Recovery plan script action details.
        :param pulumi.Input[Union[str, 'RecoveryPlanActionLocation']] fabric_location: The fabric location.
        :param pulumi.Input[str] instance_type: Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
               Expected value is 'ScriptActionDetails'.
        :param pulumi.Input[str] path: The script path.
        :param pulumi.Input[str] timeout: The script timeout.
        """
        pulumi.set(__self__, "fabric_location", fabric_location)
        pulumi.set(__self__, "instance_type", 'ScriptActionDetails')
        pulumi.set(__self__, "path", path)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="fabricLocation")
    def fabric_location(self) -> pulumi.Input[Union[str, 'RecoveryPlanActionLocation']]:
        """
        The fabric location.
        """
        return pulumi.get(self, "fabric_location")

    @fabric_location.setter
    def fabric_location(self, value: pulumi.Input[Union[str, 'RecoveryPlanActionLocation']]):
        pulumi.set(self, "fabric_location", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
        Expected value is 'ScriptActionDetails'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The script path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The script timeout.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class RetentionDurationArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 duration_type: Optional[pulumi.Input[Union[str, 'RetentionDurationType']]] = None):
        """
        Retention duration.
        :param pulumi.Input[int] count: Count of duration types. Retention duration is obtained by the counting the duration type Count times.
               For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
        :param pulumi.Input[Union[str, 'RetentionDurationType']] duration_type: Retention duration type of retention policy.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if duration_type is not None:
            pulumi.set(__self__, "duration_type", duration_type)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of duration types. Retention duration is obtained by the counting the duration type Count times.
        For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="durationType")
    def duration_type(self) -> Optional[pulumi.Input[Union[str, 'RetentionDurationType']]]:
        """
        Retention duration type of retention policy.
        """
        return pulumi.get(self, "duration_type")

    @duration_type.setter
    def duration_type(self, value: Optional[pulumi.Input[Union[str, 'RetentionDurationType']]]):
        pulumi.set(self, "duration_type", value)


@pulumi.input_type
class SettingsArgs:
    def __init__(__self__, *,
                 is_compression: Optional[pulumi.Input[bool]] = None,
                 issqlcompression: Optional[pulumi.Input[bool]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        """
        Common settings field for backup management
        :param pulumi.Input[bool] is_compression: Workload compression flag. This has been added so that 'isSqlCompression'
               will be deprecated once clients upgrade to consider this flag.
        :param pulumi.Input[bool] issqlcompression: SQL compression flag
        :param pulumi.Input[str] time_zone: TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
        """
        if is_compression is not None:
            pulumi.set(__self__, "is_compression", is_compression)
        if issqlcompression is not None:
            pulumi.set(__self__, "issqlcompression", issqlcompression)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="isCompression")
    def is_compression(self) -> Optional[pulumi.Input[bool]]:
        """
        Workload compression flag. This has been added so that 'isSqlCompression'
        will be deprecated once clients upgrade to consider this flag.
        """
        return pulumi.get(self, "is_compression")

    @is_compression.setter
    def is_compression(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_compression", value)

    @property
    @pulumi.getter
    def issqlcompression(self) -> Optional[pulumi.Input[bool]]:
        """
        SQL compression flag
        """
        return pulumi.get(self, "issqlcompression")

    @issqlcompression.setter
    def issqlcompression(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "issqlcompression", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class SimpleRetentionPolicyArgs:
    def __init__(__self__, *,
                 retention_policy_type: pulumi.Input[str],
                 retention_duration: Optional[pulumi.Input['RetentionDurationArgs']] = None):
        """
        Simple policy retention.
        :param pulumi.Input[str] retention_policy_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'SimpleRetentionPolicy'.
        :param pulumi.Input['RetentionDurationArgs'] retention_duration: Retention duration of the protection policy.
        """
        pulumi.set(__self__, "retention_policy_type", 'SimpleRetentionPolicy')
        if retention_duration is not None:
            pulumi.set(__self__, "retention_duration", retention_duration)

    @property
    @pulumi.getter(name="retentionPolicyType")
    def retention_policy_type(self) -> pulumi.Input[str]:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'SimpleRetentionPolicy'.
        """
        return pulumi.get(self, "retention_policy_type")

    @retention_policy_type.setter
    def retention_policy_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "retention_policy_type", value)

    @property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional[pulumi.Input['RetentionDurationArgs']]:
        """
        Retention duration of the protection policy.
        """
        return pulumi.get(self, "retention_duration")

    @retention_duration.setter
    def retention_duration(self, value: Optional[pulumi.Input['RetentionDurationArgs']]):
        pulumi.set(self, "retention_duration", value)


@pulumi.input_type
class SimpleSchedulePolicyV2Args:
    def __init__(__self__, *,
                 schedule_policy_type: pulumi.Input[str],
                 daily_schedule: Optional[pulumi.Input['DailyScheduleArgs']] = None,
                 hourly_schedule: Optional[pulumi.Input['HourlyScheduleArgs']] = None,
                 schedule_run_frequency: Optional[pulumi.Input[Union[str, 'ScheduleRunType']]] = None,
                 weekly_schedule: Optional[pulumi.Input['WeeklyScheduleArgs']] = None):
        """
        The V2 policy schedule for IaaS that supports hourly backups.
        :param pulumi.Input[str] schedule_policy_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'SimpleSchedulePolicyV2'.
        :param pulumi.Input['DailyScheduleArgs'] daily_schedule: Daily schedule of this policy
        :param pulumi.Input['HourlyScheduleArgs'] hourly_schedule: hourly schedule of this policy
        :param pulumi.Input[Union[str, 'ScheduleRunType']] schedule_run_frequency: Frequency of the schedule operation of this policy.
        :param pulumi.Input['WeeklyScheduleArgs'] weekly_schedule: Weekly schedule of this policy
        """
        pulumi.set(__self__, "schedule_policy_type", 'SimpleSchedulePolicyV2')
        if daily_schedule is not None:
            pulumi.set(__self__, "daily_schedule", daily_schedule)
        if hourly_schedule is not None:
            pulumi.set(__self__, "hourly_schedule", hourly_schedule)
        if schedule_run_frequency is not None:
            pulumi.set(__self__, "schedule_run_frequency", schedule_run_frequency)
        if weekly_schedule is not None:
            pulumi.set(__self__, "weekly_schedule", weekly_schedule)

    @property
    @pulumi.getter(name="schedulePolicyType")
    def schedule_policy_type(self) -> pulumi.Input[str]:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'SimpleSchedulePolicyV2'.
        """
        return pulumi.get(self, "schedule_policy_type")

    @schedule_policy_type.setter
    def schedule_policy_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_policy_type", value)

    @property
    @pulumi.getter(name="dailySchedule")
    def daily_schedule(self) -> Optional[pulumi.Input['DailyScheduleArgs']]:
        """
        Daily schedule of this policy
        """
        return pulumi.get(self, "daily_schedule")

    @daily_schedule.setter
    def daily_schedule(self, value: Optional[pulumi.Input['DailyScheduleArgs']]):
        pulumi.set(self, "daily_schedule", value)

    @property
    @pulumi.getter(name="hourlySchedule")
    def hourly_schedule(self) -> Optional[pulumi.Input['HourlyScheduleArgs']]:
        """
        hourly schedule of this policy
        """
        return pulumi.get(self, "hourly_schedule")

    @hourly_schedule.setter
    def hourly_schedule(self, value: Optional[pulumi.Input['HourlyScheduleArgs']]):
        pulumi.set(self, "hourly_schedule", value)

    @property
    @pulumi.getter(name="scheduleRunFrequency")
    def schedule_run_frequency(self) -> Optional[pulumi.Input[Union[str, 'ScheduleRunType']]]:
        """
        Frequency of the schedule operation of this policy.
        """
        return pulumi.get(self, "schedule_run_frequency")

    @schedule_run_frequency.setter
    def schedule_run_frequency(self, value: Optional[pulumi.Input[Union[str, 'ScheduleRunType']]]):
        pulumi.set(self, "schedule_run_frequency", value)

    @property
    @pulumi.getter(name="weeklySchedule")
    def weekly_schedule(self) -> Optional[pulumi.Input['WeeklyScheduleArgs']]:
        """
        Weekly schedule of this policy
        """
        return pulumi.get(self, "weekly_schedule")

    @weekly_schedule.setter
    def weekly_schedule(self, value: Optional[pulumi.Input['WeeklyScheduleArgs']]):
        pulumi.set(self, "weekly_schedule", value)


@pulumi.input_type
class SimpleSchedulePolicyArgs:
    def __init__(__self__, *,
                 schedule_policy_type: pulumi.Input[str],
                 hourly_schedule: Optional[pulumi.Input['HourlyScheduleArgs']] = None,
                 schedule_run_days: Optional[pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]]] = None,
                 schedule_run_frequency: Optional[pulumi.Input[Union[str, 'ScheduleRunType']]] = None,
                 schedule_run_times: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 schedule_weekly_frequency: Optional[pulumi.Input[int]] = None):
        """
        Simple policy schedule.
        :param pulumi.Input[str] schedule_policy_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'SimpleSchedulePolicy'.
        :param pulumi.Input['HourlyScheduleArgs'] hourly_schedule: Hourly Schedule of this Policy
        :param pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]] schedule_run_days: List of days of week this schedule has to be run.
        :param pulumi.Input[Union[str, 'ScheduleRunType']] schedule_run_frequency: Frequency of the schedule operation of this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] schedule_run_times: List of times of day this schedule has to be run.
        :param pulumi.Input[int] schedule_weekly_frequency: At every number weeks this schedule has to be run.
        """
        pulumi.set(__self__, "schedule_policy_type", 'SimpleSchedulePolicy')
        if hourly_schedule is not None:
            pulumi.set(__self__, "hourly_schedule", hourly_schedule)
        if schedule_run_days is not None:
            pulumi.set(__self__, "schedule_run_days", schedule_run_days)
        if schedule_run_frequency is not None:
            pulumi.set(__self__, "schedule_run_frequency", schedule_run_frequency)
        if schedule_run_times is not None:
            pulumi.set(__self__, "schedule_run_times", schedule_run_times)
        if schedule_weekly_frequency is not None:
            pulumi.set(__self__, "schedule_weekly_frequency", schedule_weekly_frequency)

    @property
    @pulumi.getter(name="schedulePolicyType")
    def schedule_policy_type(self) -> pulumi.Input[str]:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'SimpleSchedulePolicy'.
        """
        return pulumi.get(self, "schedule_policy_type")

    @schedule_policy_type.setter
    def schedule_policy_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_policy_type", value)

    @property
    @pulumi.getter(name="hourlySchedule")
    def hourly_schedule(self) -> Optional[pulumi.Input['HourlyScheduleArgs']]:
        """
        Hourly Schedule of this Policy
        """
        return pulumi.get(self, "hourly_schedule")

    @hourly_schedule.setter
    def hourly_schedule(self, value: Optional[pulumi.Input['HourlyScheduleArgs']]):
        pulumi.set(self, "hourly_schedule", value)

    @property
    @pulumi.getter(name="scheduleRunDays")
    def schedule_run_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]]]:
        """
        List of days of week this schedule has to be run.
        """
        return pulumi.get(self, "schedule_run_days")

    @schedule_run_days.setter
    def schedule_run_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]]]):
        pulumi.set(self, "schedule_run_days", value)

    @property
    @pulumi.getter(name="scheduleRunFrequency")
    def schedule_run_frequency(self) -> Optional[pulumi.Input[Union[str, 'ScheduleRunType']]]:
        """
        Frequency of the schedule operation of this policy.
        """
        return pulumi.get(self, "schedule_run_frequency")

    @schedule_run_frequency.setter
    def schedule_run_frequency(self, value: Optional[pulumi.Input[Union[str, 'ScheduleRunType']]]):
        pulumi.set(self, "schedule_run_frequency", value)

    @property
    @pulumi.getter(name="scheduleRunTimes")
    def schedule_run_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of times of day this schedule has to be run.
        """
        return pulumi.get(self, "schedule_run_times")

    @schedule_run_times.setter
    def schedule_run_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schedule_run_times", value)

    @property
    @pulumi.getter(name="scheduleWeeklyFrequency")
    def schedule_weekly_frequency(self) -> Optional[pulumi.Input[int]]:
        """
        At every number weeks this schedule has to be run.
        """
        return pulumi.get(self, "schedule_weekly_frequency")

    @schedule_weekly_frequency.setter
    def schedule_weekly_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "schedule_weekly_frequency", value)


@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[Union[str, 'SkuName']],
                 capacity: Optional[pulumi.Input[str]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        """
        Identifies the unique system identifier for each Azure resource.
        :param pulumi.Input[Union[str, 'SkuName']] name: The Sku name.
        :param pulumi.Input[str] capacity: The sku capacity
        :param pulumi.Input[str] family: The sku family
        :param pulumi.Input[str] size: The sku size
        :param pulumi.Input[str] tier: The Sku tier.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[Union[str, 'SkuName']]:
        """
        The Sku name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[Union[str, 'SkuName']]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[str]]:
        """
        The sku capacity
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        The sku family
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        The sku size
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        The Sku tier.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


@pulumi.input_type
class StorageMappingInputPropertiesArgs:
    def __init__(__self__, *,
                 target_storage_classification_id: Optional[pulumi.Input[str]] = None):
        """
        Storage mapping input properties.
        :param pulumi.Input[str] target_storage_classification_id: The ID of the storage object.
        """
        if target_storage_classification_id is not None:
            pulumi.set(__self__, "target_storage_classification_id", target_storage_classification_id)

    @property
    @pulumi.getter(name="targetStorageClassificationId")
    def target_storage_classification_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the storage object.
        """
        return pulumi.get(self, "target_storage_classification_id")

    @target_storage_classification_id.setter
    def target_storage_classification_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_storage_classification_id", value)


@pulumi.input_type
class SubProtectionPolicyArgs:
    def __init__(__self__, *,
                 policy_type: Optional[pulumi.Input[Union[str, 'PolicyType']]] = None,
                 retention_policy: Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]] = None,
                 schedule_policy: Optional[pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']]] = None,
                 tiering_policy: Optional[pulumi.Input[Mapping[str, pulumi.Input['TieringPolicyArgs']]]] = None):
        """
        Sub-protection policy which includes schedule and retention
        :param pulumi.Input[Union[str, 'PolicyType']] policy_type: Type of backup policy type
        :param pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']] retention_policy: Retention policy with the details on backup copy retention ranges.
        :param pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']] schedule_policy: Backup schedule specified as part of backup policy.
        :param pulumi.Input[Mapping[str, pulumi.Input['TieringPolicyArgs']]] tiering_policy: Tiering policy to automatically move RPs to another tier.
               Key is Target Tier, defined in RecoveryPointTierType enum.
               Tiering policy specifies the criteria to move RP to the target tier.
        """
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)
        if schedule_policy is not None:
            pulumi.set(__self__, "schedule_policy", schedule_policy)
        if tiering_policy is not None:
            pulumi.set(__self__, "tiering_policy", tiering_policy)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[Union[str, 'PolicyType']]]:
        """
        Type of backup policy type
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[Union[str, 'PolicyType']]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]]:
        """
        Retention policy with the details on backup copy retention ranges.
        """
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: Optional[pulumi.Input[Union['LongTermRetentionPolicyArgs', 'SimpleRetentionPolicyArgs']]]):
        pulumi.set(self, "retention_policy", value)

    @property
    @pulumi.getter(name="schedulePolicy")
    def schedule_policy(self) -> Optional[pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']]]:
        """
        Backup schedule specified as part of backup policy.
        """
        return pulumi.get(self, "schedule_policy")

    @schedule_policy.setter
    def schedule_policy(self, value: Optional[pulumi.Input[Union['LogSchedulePolicyArgs', 'LongTermSchedulePolicyArgs', 'SimpleSchedulePolicyArgs', 'SimpleSchedulePolicyV2Args']]]):
        pulumi.set(self, "schedule_policy", value)

    @property
    @pulumi.getter(name="tieringPolicy")
    def tiering_policy(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['TieringPolicyArgs']]]]:
        """
        Tiering policy to automatically move RPs to another tier.
        Key is Target Tier, defined in RecoveryPointTierType enum.
        Tiering policy specifies the criteria to move RP to the target tier.
        """
        return pulumi.get(self, "tiering_policy")

    @tiering_policy.setter
    def tiering_policy(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['TieringPolicyArgs']]]]):
        pulumi.set(self, "tiering_policy", value)


@pulumi.input_type
class TieringPolicyArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[int]] = None,
                 duration_type: Optional[pulumi.Input[Union[str, 'RetentionDurationType']]] = None,
                 tiering_mode: Optional[pulumi.Input[Union[str, 'TieringMode']]] = None):
        """
        Tiering Policy for a target tier.
        If the policy is not specified for a given target tier, service retains the existing configured tiering policy for that tier
        :param pulumi.Input[int] duration: Number of days/weeks/months/years to retain backups in current tier before tiering.
               Used only if TieringMode is set to TierAfter
        :param pulumi.Input[Union[str, 'RetentionDurationType']] duration_type: Retention duration type: days/weeks/months/years
               Used only if TieringMode is set to TierAfter
        :param pulumi.Input[Union[str, 'TieringMode']] tiering_mode: Tiering Mode to control automatic tiering of recovery points. Supported values are:
               1. TierRecommended: Tier all recovery points recommended to be tiered
               2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
               3. DoNotTier: Do not tier any recovery points
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if duration_type is not None:
            pulumi.set(__self__, "duration_type", duration_type)
        if tiering_mode is not None:
            pulumi.set(__self__, "tiering_mode", tiering_mode)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days/weeks/months/years to retain backups in current tier before tiering.
        Used only if TieringMode is set to TierAfter
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="durationType")
    def duration_type(self) -> Optional[pulumi.Input[Union[str, 'RetentionDurationType']]]:
        """
        Retention duration type: days/weeks/months/years
        Used only if TieringMode is set to TierAfter
        """
        return pulumi.get(self, "duration_type")

    @duration_type.setter
    def duration_type(self, value: Optional[pulumi.Input[Union[str, 'RetentionDurationType']]]):
        pulumi.set(self, "duration_type", value)

    @property
    @pulumi.getter(name="tieringMode")
    def tiering_mode(self) -> Optional[pulumi.Input[Union[str, 'TieringMode']]]:
        """
        Tiering Mode to control automatic tiering of recovery points. Supported values are:
        1. TierRecommended: Tier all recovery points recommended to be tiered
        2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
        3. DoNotTier: Do not tier any recovery points
        """
        return pulumi.get(self, "tiering_mode")

    @tiering_mode.setter
    def tiering_mode(self, value: Optional[pulumi.Input[Union[str, 'TieringMode']]]):
        pulumi.set(self, "tiering_mode", value)


@pulumi.input_type
class VMwareCbtContainerMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 storage_account_id: pulumi.Input[str],
                 target_location: pulumi.Input[str],
                 key_vault_id: Optional[pulumi.Input[str]] = None,
                 key_vault_uri: Optional[pulumi.Input[str]] = None,
                 service_bus_connection_string_secret_name: Optional[pulumi.Input[str]] = None,
                 storage_account_sas_secret_name: Optional[pulumi.Input[str]] = None):
        """
        VMwareCbt container mapping input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'VMwareCbt'.
        :param pulumi.Input[str] storage_account_id: The storage account ARM Id.
        :param pulumi.Input[str] target_location: The target location.
        :param pulumi.Input[str] key_vault_id: The target key vault ARM Id.
        :param pulumi.Input[str] key_vault_uri: The target key vault URL.
        :param pulumi.Input[str] service_bus_connection_string_secret_name: The secret name of the service bus connection string.
        :param pulumi.Input[str] storage_account_sas_secret_name: The secret name of the storage account.
        """
        pulumi.set(__self__, "instance_type", 'VMwareCbt')
        pulumi.set(__self__, "storage_account_id", storage_account_id)
        pulumi.set(__self__, "target_location", target_location)
        if key_vault_id is not None:
            pulumi.set(__self__, "key_vault_id", key_vault_id)
        if key_vault_uri is not None:
            pulumi.set(__self__, "key_vault_uri", key_vault_uri)
        if service_bus_connection_string_secret_name is not None:
            pulumi.set(__self__, "service_bus_connection_string_secret_name", service_bus_connection_string_secret_name)
        if storage_account_sas_secret_name is not None:
            pulumi.set(__self__, "storage_account_sas_secret_name", storage_account_sas_secret_name)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'VMwareCbt'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> pulumi.Input[str]:
        """
        The storage account ARM Id.
        """
        return pulumi.get(self, "storage_account_id")

    @storage_account_id.setter
    def storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account_id", value)

    @property
    @pulumi.getter(name="targetLocation")
    def target_location(self) -> pulumi.Input[str]:
        """
        The target location.
        """
        return pulumi.get(self, "target_location")

    @target_location.setter
    def target_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_location", value)

    @property
    @pulumi.getter(name="keyVaultId")
    def key_vault_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target key vault ARM Id.
        """
        return pulumi.get(self, "key_vault_id")

    @key_vault_id.setter
    def key_vault_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_id", value)

    @property
    @pulumi.getter(name="keyVaultUri")
    def key_vault_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The target key vault URL.
        """
        return pulumi.get(self, "key_vault_uri")

    @key_vault_uri.setter
    def key_vault_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_uri", value)

    @property
    @pulumi.getter(name="serviceBusConnectionStringSecretName")
    def service_bus_connection_string_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        The secret name of the service bus connection string.
        """
        return pulumi.get(self, "service_bus_connection_string_secret_name")

    @service_bus_connection_string_secret_name.setter
    def service_bus_connection_string_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_bus_connection_string_secret_name", value)

    @property
    @pulumi.getter(name="storageAccountSasSecretName")
    def storage_account_sas_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        The secret name of the storage account.
        """
        return pulumi.get(self, "storage_account_sas_secret_name")

    @storage_account_sas_secret_name.setter
    def storage_account_sas_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_sas_secret_name", value)


@pulumi.input_type
class VMwareCbtDiskInputArgs:
    def __init__(__self__, *,
                 disk_id: pulumi.Input[str],
                 is_os_disk: pulumi.Input[str],
                 log_storage_account_id: pulumi.Input[str],
                 log_storage_account_sas_secret_name: pulumi.Input[str],
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[Union[str, 'DiskAccountType']]] = None):
        """
        VMwareCbt disk input.
        :param pulumi.Input[str] disk_id: The disk Id.
        :param pulumi.Input[str] is_os_disk: A value indicating whether the disk is the OS disk.
        :param pulumi.Input[str] log_storage_account_id: The log storage account ARM Id.
        :param pulumi.Input[str] log_storage_account_sas_secret_name: The key vault secret name of the log storage account.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM Id.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The disk type.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "is_os_disk", is_os_disk)
        pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)
        pulumi.set(__self__, "log_storage_account_sas_secret_name", log_storage_account_sas_secret_name)
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        The disk Id.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="isOSDisk")
    def is_os_disk(self) -> pulumi.Input[str]:
        """
        A value indicating whether the disk is the OS disk.
        """
        return pulumi.get(self, "is_os_disk")

    @is_os_disk.setter
    def is_os_disk(self, value: pulumi.Input[str]):
        pulumi.set(self, "is_os_disk", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> pulumi.Input[str]:
        """
        The log storage account ARM Id.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_storage_account_id", value)

    @property
    @pulumi.getter(name="logStorageAccountSasSecretName")
    def log_storage_account_sas_secret_name(self) -> pulumi.Input[str]:
        """
        The key vault secret name of the log storage account.
        """
        return pulumi.get(self, "log_storage_account_sas_secret_name")

    @log_storage_account_sas_secret_name.setter
    def log_storage_account_sas_secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_storage_account_sas_secret_name", value)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM Id.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[Union[str, 'DiskAccountType']]]:
        """
        The disk type.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[Union[str, 'DiskAccountType']]]):
        pulumi.set(self, "disk_type", value)


@pulumi.input_type
class VMwareCbtEnableMigrationInputArgs:
    def __init__(__self__, *,
                 data_mover_run_as_account_id: pulumi.Input[str],
                 disks_to_include: pulumi.Input[Sequence[pulumi.Input['VMwareCbtDiskInputArgs']]],
                 instance_type: pulumi.Input[str],
                 snapshot_run_as_account_id: pulumi.Input[str],
                 target_network_id: pulumi.Input[str],
                 target_resource_group_id: pulumi.Input[str],
                 vmware_machine_id: pulumi.Input[str],
                 license_type: Optional[pulumi.Input[Union[str, 'LicenseType']]] = None,
                 perform_auto_resync: Optional[pulumi.Input[str]] = None,
                 seed_disk_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 sql_server_license_type: Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_availability_zone: Optional[pulumi.Input[str]] = None,
                 target_boot_diagnostics_storage_account_id: Optional[pulumi.Input[str]] = None,
                 target_disk_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_nic_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_proximity_placement_group_id: Optional[pulumi.Input[str]] = None,
                 target_subnet_name: Optional[pulumi.Input[str]] = None,
                 target_vm_name: Optional[pulumi.Input[str]] = None,
                 target_vm_size: Optional[pulumi.Input[str]] = None,
                 target_vm_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        VMwareCbt specific enable migration input.
        :param pulumi.Input[str] data_mover_run_as_account_id: The data mover run as account Id.
        :param pulumi.Input[Sequence[pulumi.Input['VMwareCbtDiskInputArgs']]] disks_to_include: The disks to include list.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'VMwareCbt'.
        :param pulumi.Input[str] snapshot_run_as_account_id: The snapshot run as account Id.
        :param pulumi.Input[str] target_network_id: The target network ARM Id.
        :param pulumi.Input[str] target_resource_group_id: The target resource group ARM Id.
        :param pulumi.Input[str] vmware_machine_id: The ARM Id of the VM discovered in VMware.
        :param pulumi.Input[Union[str, 'LicenseType']] license_type: License type.
        :param pulumi.Input[str] perform_auto_resync: A value indicating whether auto resync is to be done.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] seed_disk_tags: The tags for the seed disks.
        :param pulumi.Input[Union[str, 'SqlServerLicenseType']] sql_server_license_type: The SQL Server license type.
        :param pulumi.Input[str] target_availability_set_id: The target availability set ARM Id.
        :param pulumi.Input[str] target_availability_zone: The target availability zone.
        :param pulumi.Input[str] target_boot_diagnostics_storage_account_id: The target boot diagnostics storage account ARM Id.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_disk_tags: The tags for the target disks.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_nic_tags: The tags for the target NICs.
        :param pulumi.Input[str] target_proximity_placement_group_id: The target proximity placement group ARM Id.
        :param pulumi.Input[str] target_subnet_name: The target subnet name.
        :param pulumi.Input[str] target_vm_name: The target VM name.
        :param pulumi.Input[str] target_vm_size: The target VM size.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_vm_tags: The target VM tags.
        """
        pulumi.set(__self__, "data_mover_run_as_account_id", data_mover_run_as_account_id)
        pulumi.set(__self__, "disks_to_include", disks_to_include)
        pulumi.set(__self__, "instance_type", 'VMwareCbt')
        pulumi.set(__self__, "snapshot_run_as_account_id", snapshot_run_as_account_id)
        pulumi.set(__self__, "target_network_id", target_network_id)
        pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        pulumi.set(__self__, "vmware_machine_id", vmware_machine_id)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if perform_auto_resync is not None:
            pulumi.set(__self__, "perform_auto_resync", perform_auto_resync)
        if seed_disk_tags is not None:
            pulumi.set(__self__, "seed_disk_tags", seed_disk_tags)
        if sql_server_license_type is not None:
            pulumi.set(__self__, "sql_server_license_type", sql_server_license_type)
        if target_availability_set_id is not None:
            pulumi.set(__self__, "target_availability_set_id", target_availability_set_id)
        if target_availability_zone is not None:
            pulumi.set(__self__, "target_availability_zone", target_availability_zone)
        if target_boot_diagnostics_storage_account_id is not None:
            pulumi.set(__self__, "target_boot_diagnostics_storage_account_id", target_boot_diagnostics_storage_account_id)
        if target_disk_tags is not None:
            pulumi.set(__self__, "target_disk_tags", target_disk_tags)
        if target_nic_tags is not None:
            pulumi.set(__self__, "target_nic_tags", target_nic_tags)
        if target_proximity_placement_group_id is not None:
            pulumi.set(__self__, "target_proximity_placement_group_id", target_proximity_placement_group_id)
        if target_subnet_name is not None:
            pulumi.set(__self__, "target_subnet_name", target_subnet_name)
        if target_vm_name is not None:
            pulumi.set(__self__, "target_vm_name", target_vm_name)
        if target_vm_size is not None:
            pulumi.set(__self__, "target_vm_size", target_vm_size)
        if target_vm_tags is not None:
            pulumi.set(__self__, "target_vm_tags", target_vm_tags)

    @property
    @pulumi.getter(name="dataMoverRunAsAccountId")
    def data_mover_run_as_account_id(self) -> pulumi.Input[str]:
        """
        The data mover run as account Id.
        """
        return pulumi.get(self, "data_mover_run_as_account_id")

    @data_mover_run_as_account_id.setter
    def data_mover_run_as_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_mover_run_as_account_id", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> pulumi.Input[Sequence[pulumi.Input['VMwareCbtDiskInputArgs']]]:
        """
        The disks to include list.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: pulumi.Input[Sequence[pulumi.Input['VMwareCbtDiskInputArgs']]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'VMwareCbt'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="snapshotRunAsAccountId")
    def snapshot_run_as_account_id(self) -> pulumi.Input[str]:
        """
        The snapshot run as account Id.
        """
        return pulumi.get(self, "snapshot_run_as_account_id")

    @snapshot_run_as_account_id.setter
    def snapshot_run_as_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "snapshot_run_as_account_id", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> pulumi.Input[str]:
        """
        The target network ARM Id.
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> pulumi.Input[str]:
        """
        The target resource group ARM Id.
        """
        return pulumi.get(self, "target_resource_group_id")

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_group_id", value)

    @property
    @pulumi.getter(name="vmwareMachineId")
    def vmware_machine_id(self) -> pulumi.Input[str]:
        """
        The ARM Id of the VM discovered in VMware.
        """
        return pulumi.get(self, "vmware_machine_id")

    @vmware_machine_id.setter
    def vmware_machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vmware_machine_id", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[Union[str, 'LicenseType']]]:
        """
        License type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[Union[str, 'LicenseType']]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="performAutoResync")
    def perform_auto_resync(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether auto resync is to be done.
        """
        return pulumi.get(self, "perform_auto_resync")

    @perform_auto_resync.setter
    def perform_auto_resync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perform_auto_resync", value)

    @property
    @pulumi.getter(name="seedDiskTags")
    def seed_disk_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the seed disks.
        """
        return pulumi.get(self, "seed_disk_tags")

    @seed_disk_tags.setter
    def seed_disk_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "seed_disk_tags", value)

    @property
    @pulumi.getter(name="sqlServerLicenseType")
    def sql_server_license_type(self) -> Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]]:
        """
        The SQL Server license type.
        """
        return pulumi.get(self, "sql_server_license_type")

    @sql_server_license_type.setter
    def sql_server_license_type(self, value: Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]]):
        pulumi.set(self, "sql_server_license_type", value)

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability set ARM Id.
        """
        return pulumi.get(self, "target_availability_set_id")

    @target_availability_set_id.setter
    def target_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_set_id", value)

    @property
    @pulumi.getter(name="targetAvailabilityZone")
    def target_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability zone.
        """
        return pulumi.get(self, "target_availability_zone")

    @target_availability_zone.setter
    def target_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_zone", value)

    @property
    @pulumi.getter(name="targetBootDiagnosticsStorageAccountId")
    def target_boot_diagnostics_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target boot diagnostics storage account ARM Id.
        """
        return pulumi.get(self, "target_boot_diagnostics_storage_account_id")

    @target_boot_diagnostics_storage_account_id.setter
    def target_boot_diagnostics_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_boot_diagnostics_storage_account_id", value)

    @property
    @pulumi.getter(name="targetDiskTags")
    def target_disk_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the target disks.
        """
        return pulumi.get(self, "target_disk_tags")

    @target_disk_tags.setter
    def target_disk_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_disk_tags", value)

    @property
    @pulumi.getter(name="targetNicTags")
    def target_nic_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the target NICs.
        """
        return pulumi.get(self, "target_nic_tags")

    @target_nic_tags.setter
    def target_nic_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_nic_tags", value)

    @property
    @pulumi.getter(name="targetProximityPlacementGroupId")
    def target_proximity_placement_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target proximity placement group ARM Id.
        """
        return pulumi.get(self, "target_proximity_placement_group_id")

    @target_proximity_placement_group_id.setter
    def target_proximity_placement_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_proximity_placement_group_id", value)

    @property
    @pulumi.getter(name="targetSubnetName")
    def target_subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target subnet name.
        """
        return pulumi.get(self, "target_subnet_name")

    @target_subnet_name.setter
    def target_subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_subnet_name", value)

    @property
    @pulumi.getter(name="targetVmName")
    def target_vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target VM name.
        """
        return pulumi.get(self, "target_vm_name")

    @target_vm_name.setter
    def target_vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_name", value)

    @property
    @pulumi.getter(name="targetVmSize")
    def target_vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        The target VM size.
        """
        return pulumi.get(self, "target_vm_size")

    @target_vm_size.setter
    def target_vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_size", value)

    @property
    @pulumi.getter(name="targetVmTags")
    def target_vm_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The target VM tags.
        """
        return pulumi.get(self, "target_vm_tags")

    @target_vm_tags.setter
    def target_vm_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_vm_tags", value)


@pulumi.input_type
class VMwareCbtPolicyCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 app_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 crash_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 recovery_point_history_in_minutes: Optional[pulumi.Input[int]] = None):
        """
        VMware Cbt policy creation input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'VMwareCbt'.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: The app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: The crash consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] recovery_point_history_in_minutes: The duration in minutes until which the recovery points need to be stored.
        """
        pulumi.set(__self__, "instance_type", 'VMwareCbt')
        if app_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        if crash_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        if recovery_point_history_in_minutes is not None:
            pulumi.set(__self__, "recovery_point_history_in_minutes", recovery_point_history_in_minutes)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'VMwareCbt'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="recoveryPointHistoryInMinutes")
    def recovery_point_history_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The duration in minutes until which the recovery points need to be stored.
        """
        return pulumi.get(self, "recovery_point_history_in_minutes")

    @recovery_point_history_in_minutes.setter
    def recovery_point_history_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_history_in_minutes", value)


@pulumi.input_type
class VMwareV2FabricCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 migration_solution_id: pulumi.Input[str],
                 physical_site_id: Optional[pulumi.Input[str]] = None,
                 vmware_site_id: Optional[pulumi.Input[str]] = None):
        """
        VMwareV2 fabric provider specific settings.
        :param pulumi.Input[str] instance_type: Gets the class type.
               Expected value is 'VMwareV2'.
        :param pulumi.Input[str] migration_solution_id: The ARM Id of the migration solution.
        :param pulumi.Input[str] physical_site_id: The ARM Id of the physical site.
        :param pulumi.Input[str] vmware_site_id: The ARM Id of the VMware site.
        """
        pulumi.set(__self__, "instance_type", 'VMwareV2')
        pulumi.set(__self__, "migration_solution_id", migration_solution_id)
        if physical_site_id is not None:
            pulumi.set(__self__, "physical_site_id", physical_site_id)
        if vmware_site_id is not None:
            pulumi.set(__self__, "vmware_site_id", vmware_site_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the class type.
        Expected value is 'VMwareV2'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="migrationSolutionId")
    def migration_solution_id(self) -> pulumi.Input[str]:
        """
        The ARM Id of the migration solution.
        """
        return pulumi.get(self, "migration_solution_id")

    @migration_solution_id.setter
    def migration_solution_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "migration_solution_id", value)

    @property
    @pulumi.getter(name="physicalSiteId")
    def physical_site_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM Id of the physical site.
        """
        return pulumi.get(self, "physical_site_id")

    @physical_site_id.setter
    def physical_site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "physical_site_id", value)

    @property
    @pulumi.getter(name="vmwareSiteId")
    def vmware_site_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM Id of the VMware site.
        """
        return pulumi.get(self, "vmware_site_id")

    @vmware_site_id.setter
    def vmware_site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vmware_site_id", value)


@pulumi.input_type
class VaultPropertiesEncryptionArgs:
    def __init__(__self__, *,
                 infrastructure_encryption: Optional[pulumi.Input[Union[str, 'InfrastructureEncryptionState']]] = None,
                 kek_identity: Optional[pulumi.Input['CmkKekIdentityArgs']] = None,
                 key_vault_properties: Optional[pulumi.Input['CmkKeyVaultPropertiesArgs']] = None):
        """
        Customer Managed Key details of the resource.
        :param pulumi.Input[Union[str, 'InfrastructureEncryptionState']] infrastructure_encryption: Enabling/Disabling the Double Encryption state
        :param pulumi.Input['CmkKekIdentityArgs'] kek_identity: The details of the identity used for CMK
        :param pulumi.Input['CmkKeyVaultPropertiesArgs'] key_vault_properties: The properties of the Key Vault which hosts CMK
        """
        if infrastructure_encryption is not None:
            pulumi.set(__self__, "infrastructure_encryption", infrastructure_encryption)
        if kek_identity is not None:
            pulumi.set(__self__, "kek_identity", kek_identity)
        if key_vault_properties is not None:
            pulumi.set(__self__, "key_vault_properties", key_vault_properties)

    @property
    @pulumi.getter(name="infrastructureEncryption")
    def infrastructure_encryption(self) -> Optional[pulumi.Input[Union[str, 'InfrastructureEncryptionState']]]:
        """
        Enabling/Disabling the Double Encryption state
        """
        return pulumi.get(self, "infrastructure_encryption")

    @infrastructure_encryption.setter
    def infrastructure_encryption(self, value: Optional[pulumi.Input[Union[str, 'InfrastructureEncryptionState']]]):
        pulumi.set(self, "infrastructure_encryption", value)

    @property
    @pulumi.getter(name="kekIdentity")
    def kek_identity(self) -> Optional[pulumi.Input['CmkKekIdentityArgs']]:
        """
        The details of the identity used for CMK
        """
        return pulumi.get(self, "kek_identity")

    @kek_identity.setter
    def kek_identity(self, value: Optional[pulumi.Input['CmkKekIdentityArgs']]):
        pulumi.set(self, "kek_identity", value)

    @property
    @pulumi.getter(name="keyVaultProperties")
    def key_vault_properties(self) -> Optional[pulumi.Input['CmkKeyVaultPropertiesArgs']]:
        """
        The properties of the Key Vault which hosts CMK
        """
        return pulumi.get(self, "key_vault_properties")

    @key_vault_properties.setter
    def key_vault_properties(self, value: Optional[pulumi.Input['CmkKeyVaultPropertiesArgs']]):
        pulumi.set(self, "key_vault_properties", value)


@pulumi.input_type
class VaultPropertiesArgs:
    def __init__(__self__, *,
                 encryption: Optional[pulumi.Input['VaultPropertiesEncryptionArgs']] = None):
        """
        Properties of the vault.
        :param pulumi.Input['VaultPropertiesEncryptionArgs'] encryption: Customer Managed Key details of the resource.
        """
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['VaultPropertiesEncryptionArgs']]:
        """
        Customer Managed Key details of the resource.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['VaultPropertiesEncryptionArgs']]):
        pulumi.set(self, "encryption", value)


@pulumi.input_type
class VmmToAzureCreateNetworkMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str]):
        """
        Create network mappings input properties/behavior specific to Vmm to Azure Network mapping.
        :param pulumi.Input[str] instance_type: The instance type.
               Expected value is 'VmmToAzure'.
        """
        pulumi.set(__self__, "instance_type", 'VmmToAzure')

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The instance type.
        Expected value is 'VmmToAzure'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class VmmToVmmCreateNetworkMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str]):
        """
        Create network mappings input properties/behavior specific to vmm to vmm Network mapping.
        :param pulumi.Input[str] instance_type: The instance type.
               Expected value is 'VmmToVmm'.
        """
        pulumi.set(__self__, "instance_type", 'VmmToVmm')

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The instance type.
        Expected value is 'VmmToVmm'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class WeeklyRetentionFormatArgs:
    def __init__(__self__, *,
                 days_of_the_week: Optional[pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]]] = None,
                 weeks_of_the_month: Optional[pulumi.Input[Sequence[pulumi.Input['WeekOfMonth']]]] = None):
        """
        Weekly retention format.
        :param pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]] days_of_the_week: List of days of the week.
        :param pulumi.Input[Sequence[pulumi.Input['WeekOfMonth']]] weeks_of_the_month: List of weeks of month.
        """
        if days_of_the_week is not None:
            pulumi.set(__self__, "days_of_the_week", days_of_the_week)
        if weeks_of_the_month is not None:
            pulumi.set(__self__, "weeks_of_the_month", weeks_of_the_month)

    @property
    @pulumi.getter(name="daysOfTheWeek")
    def days_of_the_week(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]]]:
        """
        List of days of the week.
        """
        return pulumi.get(self, "days_of_the_week")

    @days_of_the_week.setter
    def days_of_the_week(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]]]):
        pulumi.set(self, "days_of_the_week", value)

    @property
    @pulumi.getter(name="weeksOfTheMonth")
    def weeks_of_the_month(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WeekOfMonth']]]]:
        """
        List of weeks of month.
        """
        return pulumi.get(self, "weeks_of_the_month")

    @weeks_of_the_month.setter
    def weeks_of_the_month(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WeekOfMonth']]]]):
        pulumi.set(self, "weeks_of_the_month", value)


@pulumi.input_type
class WeeklyRetentionScheduleArgs:
    def __init__(__self__, *,
                 days_of_the_week: Optional[pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]]] = None,
                 retention_duration: Optional[pulumi.Input['RetentionDurationArgs']] = None,
                 retention_times: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Weekly retention schedule.
        :param pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]] days_of_the_week: List of days of week for weekly retention policy.
        :param pulumi.Input['RetentionDurationArgs'] retention_duration: Retention duration of retention Policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] retention_times: Retention times of retention policy.
        """
        if days_of_the_week is not None:
            pulumi.set(__self__, "days_of_the_week", days_of_the_week)
        if retention_duration is not None:
            pulumi.set(__self__, "retention_duration", retention_duration)
        if retention_times is not None:
            pulumi.set(__self__, "retention_times", retention_times)

    @property
    @pulumi.getter(name="daysOfTheWeek")
    def days_of_the_week(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]]]:
        """
        List of days of week for weekly retention policy.
        """
        return pulumi.get(self, "days_of_the_week")

    @days_of_the_week.setter
    def days_of_the_week(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]]]):
        pulumi.set(self, "days_of_the_week", value)

    @property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional[pulumi.Input['RetentionDurationArgs']]:
        """
        Retention duration of retention Policy.
        """
        return pulumi.get(self, "retention_duration")

    @retention_duration.setter
    def retention_duration(self, value: Optional[pulumi.Input['RetentionDurationArgs']]):
        pulumi.set(self, "retention_duration", value)

    @property
    @pulumi.getter(name="retentionTimes")
    def retention_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Retention times of retention policy.
        """
        return pulumi.get(self, "retention_times")

    @retention_times.setter
    def retention_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "retention_times", value)


@pulumi.input_type
class WeeklyScheduleArgs:
    def __init__(__self__, *,
                 schedule_run_days: Optional[pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]]] = None,
                 schedule_run_times: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] schedule_run_times: List of times of day this schedule has to be run.
        """
        if schedule_run_days is not None:
            pulumi.set(__self__, "schedule_run_days", schedule_run_days)
        if schedule_run_times is not None:
            pulumi.set(__self__, "schedule_run_times", schedule_run_times)

    @property
    @pulumi.getter(name="scheduleRunDays")
    def schedule_run_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]]]:
        return pulumi.get(self, "schedule_run_days")

    @schedule_run_days.setter
    def schedule_run_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DayOfWeek']]]]):
        pulumi.set(self, "schedule_run_days", value)

    @property
    @pulumi.getter(name="scheduleRunTimes")
    def schedule_run_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of times of day this schedule has to be run.
        """
        return pulumi.get(self, "schedule_run_times")

    @schedule_run_times.setter
    def schedule_run_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schedule_run_times", value)


@pulumi.input_type
class WorkloadInquiryDetailsArgs:
    def __init__(__self__, *,
                 inquiry_validation: Optional[pulumi.Input['InquiryValidationArgs']] = None,
                 item_count: Optional[pulumi.Input[float]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Details of an inquired protectable item.
        :param pulumi.Input['InquiryValidationArgs'] inquiry_validation: Inquiry validation such as permissions and other backup validations.
        :param pulumi.Input[float] item_count: Contains the protectable item Count inside this Container.
        :param pulumi.Input[str] type: Type of the Workload such as SQL, Oracle etc.
        """
        if inquiry_validation is not None:
            pulumi.set(__self__, "inquiry_validation", inquiry_validation)
        if item_count is not None:
            pulumi.set(__self__, "item_count", item_count)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="inquiryValidation")
    def inquiry_validation(self) -> Optional[pulumi.Input['InquiryValidationArgs']]:
        """
        Inquiry validation such as permissions and other backup validations.
        """
        return pulumi.get(self, "inquiry_validation")

    @inquiry_validation.setter
    def inquiry_validation(self, value: Optional[pulumi.Input['InquiryValidationArgs']]):
        pulumi.set(self, "inquiry_validation", value)

    @property
    @pulumi.getter(name="itemCount")
    def item_count(self) -> Optional[pulumi.Input[float]]:
        """
        Contains the protectable item Count inside this Container.
        """
        return pulumi.get(self, "item_count")

    @item_count.setter
    def item_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "item_count", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the Workload such as SQL, Oracle etc.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class YearlyRetentionScheduleArgs:
    def __init__(__self__, *,
                 months_of_year: Optional[pulumi.Input[Sequence[pulumi.Input['MonthOfYear']]]] = None,
                 retention_duration: Optional[pulumi.Input['RetentionDurationArgs']] = None,
                 retention_schedule_daily: Optional[pulumi.Input['DailyRetentionFormatArgs']] = None,
                 retention_schedule_format_type: Optional[pulumi.Input[Union[str, 'RetentionScheduleFormat']]] = None,
                 retention_schedule_weekly: Optional[pulumi.Input['WeeklyRetentionFormatArgs']] = None,
                 retention_times: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Yearly retention schedule.
        :param pulumi.Input[Sequence[pulumi.Input['MonthOfYear']]] months_of_year: List of months of year of yearly retention policy.
        :param pulumi.Input['RetentionDurationArgs'] retention_duration: Retention duration of retention Policy.
        :param pulumi.Input['DailyRetentionFormatArgs'] retention_schedule_daily: Daily retention format for yearly retention policy.
        :param pulumi.Input[Union[str, 'RetentionScheduleFormat']] retention_schedule_format_type: Retention schedule format for yearly retention policy.
        :param pulumi.Input['WeeklyRetentionFormatArgs'] retention_schedule_weekly: Weekly retention format for yearly retention policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] retention_times: Retention times of retention policy.
        """
        if months_of_year is not None:
            pulumi.set(__self__, "months_of_year", months_of_year)
        if retention_duration is not None:
            pulumi.set(__self__, "retention_duration", retention_duration)
        if retention_schedule_daily is not None:
            pulumi.set(__self__, "retention_schedule_daily", retention_schedule_daily)
        if retention_schedule_format_type is not None:
            pulumi.set(__self__, "retention_schedule_format_type", retention_schedule_format_type)
        if retention_schedule_weekly is not None:
            pulumi.set(__self__, "retention_schedule_weekly", retention_schedule_weekly)
        if retention_times is not None:
            pulumi.set(__self__, "retention_times", retention_times)

    @property
    @pulumi.getter(name="monthsOfYear")
    def months_of_year(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonthOfYear']]]]:
        """
        List of months of year of yearly retention policy.
        """
        return pulumi.get(self, "months_of_year")

    @months_of_year.setter
    def months_of_year(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonthOfYear']]]]):
        pulumi.set(self, "months_of_year", value)

    @property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional[pulumi.Input['RetentionDurationArgs']]:
        """
        Retention duration of retention Policy.
        """
        return pulumi.get(self, "retention_duration")

    @retention_duration.setter
    def retention_duration(self, value: Optional[pulumi.Input['RetentionDurationArgs']]):
        pulumi.set(self, "retention_duration", value)

    @property
    @pulumi.getter(name="retentionScheduleDaily")
    def retention_schedule_daily(self) -> Optional[pulumi.Input['DailyRetentionFormatArgs']]:
        """
        Daily retention format for yearly retention policy.
        """
        return pulumi.get(self, "retention_schedule_daily")

    @retention_schedule_daily.setter
    def retention_schedule_daily(self, value: Optional[pulumi.Input['DailyRetentionFormatArgs']]):
        pulumi.set(self, "retention_schedule_daily", value)

    @property
    @pulumi.getter(name="retentionScheduleFormatType")
    def retention_schedule_format_type(self) -> Optional[pulumi.Input[Union[str, 'RetentionScheduleFormat']]]:
        """
        Retention schedule format for yearly retention policy.
        """
        return pulumi.get(self, "retention_schedule_format_type")

    @retention_schedule_format_type.setter
    def retention_schedule_format_type(self, value: Optional[pulumi.Input[Union[str, 'RetentionScheduleFormat']]]):
        pulumi.set(self, "retention_schedule_format_type", value)

    @property
    @pulumi.getter(name="retentionScheduleWeekly")
    def retention_schedule_weekly(self) -> Optional[pulumi.Input['WeeklyRetentionFormatArgs']]:
        """
        Weekly retention format for yearly retention policy.
        """
        return pulumi.get(self, "retention_schedule_weekly")

    @retention_schedule_weekly.setter
    def retention_schedule_weekly(self, value: Optional[pulumi.Input['WeeklyRetentionFormatArgs']]):
        pulumi.set(self, "retention_schedule_weekly", value)

    @property
    @pulumi.getter(name="retentionTimes")
    def retention_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Retention times of retention policy.
        """
        return pulumi.get(self, "retention_times")

    @retention_times.setter
    def retention_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "retention_times", value)


