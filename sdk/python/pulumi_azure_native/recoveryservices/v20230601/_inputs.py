# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'A2AContainerMappingInputArgs',
    'A2ACrossClusterMigrationEnableProtectionInputArgs',
    'A2ACrossClusterMigrationPolicyCreationInputArgs',
    'A2AEnableProtectionInputArgs',
    'A2APolicyCreationInputArgs',
    'A2AVmDiskInputDetailsArgs',
    'A2AVmManagedDiskInputDetailsArgs',
    'AddRecoveryServicesProviderInputPropertiesArgs',
    'AddVCenterRequestPropertiesArgs',
    'AzureFabricCreationInputArgs',
    'AzureMonitorAlertSettingsArgs',
    'AzureToAzureCreateNetworkMappingInputArgs',
    'ClassicAlertSettingsArgs',
    'CmkKekIdentityArgs',
    'CmkKeyVaultPropertiesArgs',
    'CreateNetworkMappingInputPropertiesArgs',
    'CreatePolicyInputPropertiesArgs',
    'CreateProtectionContainerMappingInputPropertiesArgs',
    'CreateRecoveryPlanInputPropertiesArgs',
    'CrossSubscriptionRestoreSettingsArgs',
    'DiskEncryptionInfoArgs',
    'DiskEncryptionKeyInfoArgs',
    'EnableMigrationInputPropertiesArgs',
    'EnableProtectionInputPropertiesArgs',
    'ExtendedLocationArgs',
    'FabricCreationInputPropertiesArgs',
    'HyperVReplicaAzureDiskInputDetailsArgs',
    'HyperVReplicaAzureEnableProtectionInputArgs',
    'HyperVReplicaAzurePolicyInputArgs',
    'HyperVReplicaBluePolicyInputArgs',
    'HyperVReplicaPolicyInputArgs',
    'IdentityDataArgs',
    'IdentityProviderInputArgs',
    'ImmutabilitySettingsArgs',
    'InMageAzureV2DiskInputDetailsArgs',
    'InMageAzureV2EnableProtectionInputArgs',
    'InMageAzureV2PolicyInputArgs',
    'InMageDiskExclusionInputArgs',
    'InMageDiskSignatureExclusionOptionsArgs',
    'InMageEnableProtectionInputArgs',
    'InMagePolicyInputArgs',
    'InMageRcmDiskInputArgs',
    'InMageRcmDisksDefaultInputArgs',
    'InMageRcmEnableProtectionInputArgs',
    'InMageRcmFabricCreationInputArgs',
    'InMageRcmFailbackPolicyCreationInputArgs',
    'InMageRcmPolicyCreationInputArgs',
    'InMageVolumeExclusionOptionsArgs',
    'KeyEncryptionKeyInfoArgs',
    'MonitoringSettingsArgs',
    'RecoveryPlanA2AInputArgs',
    'RecoveryPlanActionArgs',
    'RecoveryPlanAutomationRunbookActionDetailsArgs',
    'RecoveryPlanGroupArgs',
    'RecoveryPlanManualActionDetailsArgs',
    'RecoveryPlanProtectedItemArgs',
    'RecoveryPlanScriptActionDetailsArgs',
    'RestoreSettingsArgs',
    'SecuritySettingsArgs',
    'SkuArgs',
    'SoftDeleteSettingsArgs',
    'StorageMappingInputPropertiesArgs',
    'VMwareCbtContainerMappingInputArgs',
    'VMwareCbtDiskInputArgs',
    'VMwareCbtEnableMigrationInputArgs',
    'VMwareCbtPolicyCreationInputArgs',
    'VMwareCbtSecurityProfilePropertiesArgs',
    'VMwareV2FabricCreationInputArgs',
    'VaultPropertiesEncryptionArgs',
    'VaultPropertiesArgs',
    'VmmToAzureCreateNetworkMappingInputArgs',
    'VmmToVmmCreateNetworkMappingInputArgs',
]

@pulumi.input_type
class A2AContainerMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 agent_auto_update_status: Optional[pulumi.Input[Union[str, 'AgentAutoUpdateStatus']]] = None,
                 automation_account_arm_id: Optional[pulumi.Input[str]] = None,
                 automation_account_authentication_type: Optional[pulumi.Input[Union[str, 'AutomationAccountAuthenticationType']]] = None):
        """
        A2A container mapping input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'A2A'.
        :param pulumi.Input[Union[str, 'AgentAutoUpdateStatus']] agent_auto_update_status: A value indicating whether the auto update is enabled.
        :param pulumi.Input[str] automation_account_arm_id: The automation account arm id.
        :param pulumi.Input[Union[str, 'AutomationAccountAuthenticationType']] automation_account_authentication_type: A value indicating the type authentication to use for automation Account.
        """
        pulumi.set(__self__, "instance_type", 'A2A')
        if agent_auto_update_status is not None:
            pulumi.set(__self__, "agent_auto_update_status", agent_auto_update_status)
        if automation_account_arm_id is not None:
            pulumi.set(__self__, "automation_account_arm_id", automation_account_arm_id)
        if automation_account_authentication_type is None:
            automation_account_authentication_type = 'RunAsAccount'
        if automation_account_authentication_type is not None:
            pulumi.set(__self__, "automation_account_authentication_type", automation_account_authentication_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'A2A'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="agentAutoUpdateStatus")
    def agent_auto_update_status(self) -> Optional[pulumi.Input[Union[str, 'AgentAutoUpdateStatus']]]:
        """
        A value indicating whether the auto update is enabled.
        """
        return pulumi.get(self, "agent_auto_update_status")

    @agent_auto_update_status.setter
    def agent_auto_update_status(self, value: Optional[pulumi.Input[Union[str, 'AgentAutoUpdateStatus']]]):
        pulumi.set(self, "agent_auto_update_status", value)

    @property
    @pulumi.getter(name="automationAccountArmId")
    def automation_account_arm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The automation account arm id.
        """
        return pulumi.get(self, "automation_account_arm_id")

    @automation_account_arm_id.setter
    def automation_account_arm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "automation_account_arm_id", value)

    @property
    @pulumi.getter(name="automationAccountAuthenticationType")
    def automation_account_authentication_type(self) -> Optional[pulumi.Input[Union[str, 'AutomationAccountAuthenticationType']]]:
        """
        A value indicating the type authentication to use for automation Account.
        """
        return pulumi.get(self, "automation_account_authentication_type")

    @automation_account_authentication_type.setter
    def automation_account_authentication_type(self, value: Optional[pulumi.Input[Union[str, 'AutomationAccountAuthenticationType']]]):
        pulumi.set(self, "automation_account_authentication_type", value)


@pulumi.input_type
class A2ACrossClusterMigrationEnableProtectionInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 fabric_object_id: Optional[pulumi.Input[str]] = None,
                 recovery_container_id: Optional[pulumi.Input[str]] = None):
        """
        A2A Cross-Cluster Migration enable protection input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'A2ACrossClusterMigration'.
        :param pulumi.Input[str] fabric_object_id: The fabric specific object Id of the virtual machine.
        :param pulumi.Input[str] recovery_container_id: The recovery container Id.
        """
        pulumi.set(__self__, "instance_type", 'A2ACrossClusterMigration')
        if fabric_object_id is not None:
            pulumi.set(__self__, "fabric_object_id", fabric_object_id)
        if recovery_container_id is not None:
            pulumi.set(__self__, "recovery_container_id", recovery_container_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'A2ACrossClusterMigration'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="fabricObjectId")
    def fabric_object_id(self) -> Optional[pulumi.Input[str]]:
        """
        The fabric specific object Id of the virtual machine.
        """
        return pulumi.get(self, "fabric_object_id")

    @fabric_object_id.setter
    def fabric_object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_object_id", value)

    @property
    @pulumi.getter(name="recoveryContainerId")
    def recovery_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery container Id.
        """
        return pulumi.get(self, "recovery_container_id")

    @recovery_container_id.setter
    def recovery_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_container_id", value)


@pulumi.input_type
class A2ACrossClusterMigrationPolicyCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str]):
        """
        A2A Cross-Cluster Migration Policy creation input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'A2ACrossClusterMigration'.
        """
        pulumi.set(__self__, "instance_type", 'A2ACrossClusterMigration')

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'A2ACrossClusterMigration'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class A2AEnableProtectionInputArgs:
    def __init__(__self__, *,
                 fabric_object_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 disk_encryption_info: Optional[pulumi.Input['DiskEncryptionInfoArgs']] = None,
                 multi_vm_group_id: Optional[pulumi.Input[str]] = None,
                 multi_vm_group_name: Optional[pulumi.Input[str]] = None,
                 recovery_availability_set_id: Optional[pulumi.Input[str]] = None,
                 recovery_availability_zone: Optional[pulumi.Input[str]] = None,
                 recovery_azure_network_id: Optional[pulumi.Input[str]] = None,
                 recovery_boot_diag_storage_account_id: Optional[pulumi.Input[str]] = None,
                 recovery_capacity_reservation_group_id: Optional[pulumi.Input[str]] = None,
                 recovery_cloud_service_id: Optional[pulumi.Input[str]] = None,
                 recovery_container_id: Optional[pulumi.Input[str]] = None,
                 recovery_extended_location: Optional[pulumi.Input['ExtendedLocationArgs']] = None,
                 recovery_proximity_placement_group_id: Optional[pulumi.Input[str]] = None,
                 recovery_resource_group_id: Optional[pulumi.Input[str]] = None,
                 recovery_subnet_name: Optional[pulumi.Input[str]] = None,
                 recovery_virtual_machine_scale_set_id: Optional[pulumi.Input[str]] = None,
                 vm_disks: Optional[pulumi.Input[Sequence[pulumi.Input['A2AVmDiskInputDetailsArgs']]]] = None,
                 vm_managed_disks: Optional[pulumi.Input[Sequence[pulumi.Input['A2AVmManagedDiskInputDetailsArgs']]]] = None):
        """
        A2A enable protection input.
        :param pulumi.Input[str] fabric_object_id: The fabric specific object Id of the virtual machine.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'A2A'.
        :param pulumi.Input['DiskEncryptionInfoArgs'] disk_encryption_info: The recovery disk encryption information (for two pass flows).
        :param pulumi.Input[str] multi_vm_group_id: The multi vm group id.
        :param pulumi.Input[str] multi_vm_group_name: The multi vm group name.
        :param pulumi.Input[str] recovery_availability_set_id: The recovery availability set Id.
        :param pulumi.Input[str] recovery_availability_zone: The recovery availability zone.
        :param pulumi.Input[str] recovery_azure_network_id: The recovery Azure virtual network ARM id.
        :param pulumi.Input[str] recovery_boot_diag_storage_account_id: The boot diagnostic storage account.
        :param pulumi.Input[str] recovery_capacity_reservation_group_id: The recovery capacity reservation group Id.
        :param pulumi.Input[str] recovery_cloud_service_id: The recovery cloud service Id. Valid for V1 scenarios.
        :param pulumi.Input[str] recovery_container_id: The recovery container Id.
        :param pulumi.Input['ExtendedLocationArgs'] recovery_extended_location: The recovery extended location.
        :param pulumi.Input[str] recovery_proximity_placement_group_id: The recovery proximity placement group Id.
        :param pulumi.Input[str] recovery_resource_group_id: The recovery resource group Id. Valid for V2 scenarios.
        :param pulumi.Input[str] recovery_subnet_name: The recovery subnet name.
        :param pulumi.Input[str] recovery_virtual_machine_scale_set_id: The virtual machine scale set Id.
        :param pulumi.Input[Sequence[pulumi.Input['A2AVmDiskInputDetailsArgs']]] vm_disks: The list of vm disk details.
        :param pulumi.Input[Sequence[pulumi.Input['A2AVmManagedDiskInputDetailsArgs']]] vm_managed_disks: The list of vm managed disk details.
        """
        pulumi.set(__self__, "fabric_object_id", fabric_object_id)
        pulumi.set(__self__, "instance_type", 'A2A')
        if disk_encryption_info is not None:
            pulumi.set(__self__, "disk_encryption_info", disk_encryption_info)
        if multi_vm_group_id is not None:
            pulumi.set(__self__, "multi_vm_group_id", multi_vm_group_id)
        if multi_vm_group_name is not None:
            pulumi.set(__self__, "multi_vm_group_name", multi_vm_group_name)
        if recovery_availability_set_id is not None:
            pulumi.set(__self__, "recovery_availability_set_id", recovery_availability_set_id)
        if recovery_availability_zone is not None:
            pulumi.set(__self__, "recovery_availability_zone", recovery_availability_zone)
        if recovery_azure_network_id is not None:
            pulumi.set(__self__, "recovery_azure_network_id", recovery_azure_network_id)
        if recovery_boot_diag_storage_account_id is not None:
            pulumi.set(__self__, "recovery_boot_diag_storage_account_id", recovery_boot_diag_storage_account_id)
        if recovery_capacity_reservation_group_id is not None:
            pulumi.set(__self__, "recovery_capacity_reservation_group_id", recovery_capacity_reservation_group_id)
        if recovery_cloud_service_id is not None:
            pulumi.set(__self__, "recovery_cloud_service_id", recovery_cloud_service_id)
        if recovery_container_id is not None:
            pulumi.set(__self__, "recovery_container_id", recovery_container_id)
        if recovery_extended_location is not None:
            pulumi.set(__self__, "recovery_extended_location", recovery_extended_location)
        if recovery_proximity_placement_group_id is not None:
            pulumi.set(__self__, "recovery_proximity_placement_group_id", recovery_proximity_placement_group_id)
        if recovery_resource_group_id is not None:
            pulumi.set(__self__, "recovery_resource_group_id", recovery_resource_group_id)
        if recovery_subnet_name is not None:
            pulumi.set(__self__, "recovery_subnet_name", recovery_subnet_name)
        if recovery_virtual_machine_scale_set_id is not None:
            pulumi.set(__self__, "recovery_virtual_machine_scale_set_id", recovery_virtual_machine_scale_set_id)
        if vm_disks is not None:
            pulumi.set(__self__, "vm_disks", vm_disks)
        if vm_managed_disks is not None:
            pulumi.set(__self__, "vm_managed_disks", vm_managed_disks)

    @property
    @pulumi.getter(name="fabricObjectId")
    def fabric_object_id(self) -> pulumi.Input[str]:
        """
        The fabric specific object Id of the virtual machine.
        """
        return pulumi.get(self, "fabric_object_id")

    @fabric_object_id.setter
    def fabric_object_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "fabric_object_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'A2A'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="diskEncryptionInfo")
    def disk_encryption_info(self) -> Optional[pulumi.Input['DiskEncryptionInfoArgs']]:
        """
        The recovery disk encryption information (for two pass flows).
        """
        return pulumi.get(self, "disk_encryption_info")

    @disk_encryption_info.setter
    def disk_encryption_info(self, value: Optional[pulumi.Input['DiskEncryptionInfoArgs']]):
        pulumi.set(self, "disk_encryption_info", value)

    @property
    @pulumi.getter(name="multiVmGroupId")
    def multi_vm_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The multi vm group id.
        """
        return pulumi.get(self, "multi_vm_group_id")

    @multi_vm_group_id.setter
    def multi_vm_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_vm_group_id", value)

    @property
    @pulumi.getter(name="multiVmGroupName")
    def multi_vm_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The multi vm group name.
        """
        return pulumi.get(self, "multi_vm_group_name")

    @multi_vm_group_name.setter
    def multi_vm_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_vm_group_name", value)

    @property
    @pulumi.getter(name="recoveryAvailabilitySetId")
    def recovery_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery availability set Id.
        """
        return pulumi.get(self, "recovery_availability_set_id")

    @recovery_availability_set_id.setter
    def recovery_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_availability_set_id", value)

    @property
    @pulumi.getter(name="recoveryAvailabilityZone")
    def recovery_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery availability zone.
        """
        return pulumi.get(self, "recovery_availability_zone")

    @recovery_availability_zone.setter
    def recovery_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_availability_zone", value)

    @property
    @pulumi.getter(name="recoveryAzureNetworkId")
    def recovery_azure_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery Azure virtual network ARM id.
        """
        return pulumi.get(self, "recovery_azure_network_id")

    @recovery_azure_network_id.setter
    def recovery_azure_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_azure_network_id", value)

    @property
    @pulumi.getter(name="recoveryBootDiagStorageAccountId")
    def recovery_boot_diag_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The boot diagnostic storage account.
        """
        return pulumi.get(self, "recovery_boot_diag_storage_account_id")

    @recovery_boot_diag_storage_account_id.setter
    def recovery_boot_diag_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_boot_diag_storage_account_id", value)

    @property
    @pulumi.getter(name="recoveryCapacityReservationGroupId")
    def recovery_capacity_reservation_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery capacity reservation group Id.
        """
        return pulumi.get(self, "recovery_capacity_reservation_group_id")

    @recovery_capacity_reservation_group_id.setter
    def recovery_capacity_reservation_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_capacity_reservation_group_id", value)

    @property
    @pulumi.getter(name="recoveryCloudServiceId")
    def recovery_cloud_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery cloud service Id. Valid for V1 scenarios.
        """
        return pulumi.get(self, "recovery_cloud_service_id")

    @recovery_cloud_service_id.setter
    def recovery_cloud_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_cloud_service_id", value)

    @property
    @pulumi.getter(name="recoveryContainerId")
    def recovery_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery container Id.
        """
        return pulumi.get(self, "recovery_container_id")

    @recovery_container_id.setter
    def recovery_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_container_id", value)

    @property
    @pulumi.getter(name="recoveryExtendedLocation")
    def recovery_extended_location(self) -> Optional[pulumi.Input['ExtendedLocationArgs']]:
        """
        The recovery extended location.
        """
        return pulumi.get(self, "recovery_extended_location")

    @recovery_extended_location.setter
    def recovery_extended_location(self, value: Optional[pulumi.Input['ExtendedLocationArgs']]):
        pulumi.set(self, "recovery_extended_location", value)

    @property
    @pulumi.getter(name="recoveryProximityPlacementGroupId")
    def recovery_proximity_placement_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery proximity placement group Id.
        """
        return pulumi.get(self, "recovery_proximity_placement_group_id")

    @recovery_proximity_placement_group_id.setter
    def recovery_proximity_placement_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_proximity_placement_group_id", value)

    @property
    @pulumi.getter(name="recoveryResourceGroupId")
    def recovery_resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery resource group Id. Valid for V2 scenarios.
        """
        return pulumi.get(self, "recovery_resource_group_id")

    @recovery_resource_group_id.setter
    def recovery_resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_resource_group_id", value)

    @property
    @pulumi.getter(name="recoverySubnetName")
    def recovery_subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery subnet name.
        """
        return pulumi.get(self, "recovery_subnet_name")

    @recovery_subnet_name.setter
    def recovery_subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_subnet_name", value)

    @property
    @pulumi.getter(name="recoveryVirtualMachineScaleSetId")
    def recovery_virtual_machine_scale_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The virtual machine scale set Id.
        """
        return pulumi.get(self, "recovery_virtual_machine_scale_set_id")

    @recovery_virtual_machine_scale_set_id.setter
    def recovery_virtual_machine_scale_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_virtual_machine_scale_set_id", value)

    @property
    @pulumi.getter(name="vmDisks")
    def vm_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['A2AVmDiskInputDetailsArgs']]]]:
        """
        The list of vm disk details.
        """
        return pulumi.get(self, "vm_disks")

    @vm_disks.setter
    def vm_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['A2AVmDiskInputDetailsArgs']]]]):
        pulumi.set(self, "vm_disks", value)

    @property
    @pulumi.getter(name="vmManagedDisks")
    def vm_managed_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['A2AVmManagedDiskInputDetailsArgs']]]]:
        """
        The list of vm managed disk details.
        """
        return pulumi.get(self, "vm_managed_disks")

    @vm_managed_disks.setter
    def vm_managed_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['A2AVmManagedDiskInputDetailsArgs']]]]):
        pulumi.set(self, "vm_managed_disks", value)


@pulumi.input_type
class A2APolicyCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 multi_vm_sync_status: pulumi.Input[Union[str, 'SetMultiVmSyncStatus']],
                 app_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 crash_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 recovery_point_history: Optional[pulumi.Input[int]] = None):
        """
        A2A Policy creation input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'A2A'.
        :param pulumi.Input[Union[str, 'SetMultiVmSyncStatus']] multi_vm_sync_status: A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: The app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: The crash consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] recovery_point_history: The duration in minutes until which the recovery points need to be stored.
        """
        pulumi.set(__self__, "instance_type", 'A2A')
        pulumi.set(__self__, "multi_vm_sync_status", multi_vm_sync_status)
        if app_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        if crash_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        if recovery_point_history is not None:
            pulumi.set(__self__, "recovery_point_history", recovery_point_history)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'A2A'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="multiVmSyncStatus")
    def multi_vm_sync_status(self) -> pulumi.Input[Union[str, 'SetMultiVmSyncStatus']]:
        """
        A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        """
        return pulumi.get(self, "multi_vm_sync_status")

    @multi_vm_sync_status.setter
    def multi_vm_sync_status(self, value: pulumi.Input[Union[str, 'SetMultiVmSyncStatus']]):
        pulumi.set(self, "multi_vm_sync_status", value)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="recoveryPointHistory")
    def recovery_point_history(self) -> Optional[pulumi.Input[int]]:
        """
        The duration in minutes until which the recovery points need to be stored.
        """
        return pulumi.get(self, "recovery_point_history")

    @recovery_point_history.setter
    def recovery_point_history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_history", value)


@pulumi.input_type
class A2AVmDiskInputDetailsArgs:
    def __init__(__self__, *,
                 disk_uri: pulumi.Input[str],
                 primary_staging_azure_storage_account_id: pulumi.Input[str],
                 recovery_azure_storage_account_id: pulumi.Input[str]):
        """
        A2A disk input details.
        :param pulumi.Input[str] disk_uri: The disk Uri.
        :param pulumi.Input[str] primary_staging_azure_storage_account_id: The primary staging storage account Id.
        :param pulumi.Input[str] recovery_azure_storage_account_id: The recovery VHD storage account Id.
        """
        pulumi.set(__self__, "disk_uri", disk_uri)
        pulumi.set(__self__, "primary_staging_azure_storage_account_id", primary_staging_azure_storage_account_id)
        pulumi.set(__self__, "recovery_azure_storage_account_id", recovery_azure_storage_account_id)

    @property
    @pulumi.getter(name="diskUri")
    def disk_uri(self) -> pulumi.Input[str]:
        """
        The disk Uri.
        """
        return pulumi.get(self, "disk_uri")

    @disk_uri.setter
    def disk_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_uri", value)

    @property
    @pulumi.getter(name="primaryStagingAzureStorageAccountId")
    def primary_staging_azure_storage_account_id(self) -> pulumi.Input[str]:
        """
        The primary staging storage account Id.
        """
        return pulumi.get(self, "primary_staging_azure_storage_account_id")

    @primary_staging_azure_storage_account_id.setter
    def primary_staging_azure_storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_staging_azure_storage_account_id", value)

    @property
    @pulumi.getter(name="recoveryAzureStorageAccountId")
    def recovery_azure_storage_account_id(self) -> pulumi.Input[str]:
        """
        The recovery VHD storage account Id.
        """
        return pulumi.get(self, "recovery_azure_storage_account_id")

    @recovery_azure_storage_account_id.setter
    def recovery_azure_storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "recovery_azure_storage_account_id", value)


@pulumi.input_type
class A2AVmManagedDiskInputDetailsArgs:
    def __init__(__self__, *,
                 disk_id: pulumi.Input[str],
                 primary_staging_azure_storage_account_id: pulumi.Input[str],
                 recovery_resource_group_id: pulumi.Input[str],
                 disk_encryption_info: Optional[pulumi.Input['DiskEncryptionInfoArgs']] = None,
                 recovery_disk_encryption_set_id: Optional[pulumi.Input[str]] = None,
                 recovery_replica_disk_account_type: Optional[pulumi.Input[str]] = None,
                 recovery_target_disk_account_type: Optional[pulumi.Input[str]] = None):
        """
        A2A managed disk input details.
        :param pulumi.Input[str] disk_id: The disk Id.
        :param pulumi.Input[str] primary_staging_azure_storage_account_id: The primary staging storage account Arm Id.
        :param pulumi.Input[str] recovery_resource_group_id: The target resource group Arm Id.
        :param pulumi.Input['DiskEncryptionInfoArgs'] disk_encryption_info: The recovery disk encryption information (for one / single pass flows).
        :param pulumi.Input[str] recovery_disk_encryption_set_id: The recovery disk encryption set Id.
        :param pulumi.Input[str] recovery_replica_disk_account_type: The replica disk type. Its an optional value and will be same as source disk type if not user provided.
        :param pulumi.Input[str] recovery_target_disk_account_type: The target disk type after failover. Its an optional value and will be same as source disk type if not user provided.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "primary_staging_azure_storage_account_id", primary_staging_azure_storage_account_id)
        pulumi.set(__self__, "recovery_resource_group_id", recovery_resource_group_id)
        if disk_encryption_info is not None:
            pulumi.set(__self__, "disk_encryption_info", disk_encryption_info)
        if recovery_disk_encryption_set_id is not None:
            pulumi.set(__self__, "recovery_disk_encryption_set_id", recovery_disk_encryption_set_id)
        if recovery_replica_disk_account_type is not None:
            pulumi.set(__self__, "recovery_replica_disk_account_type", recovery_replica_disk_account_type)
        if recovery_target_disk_account_type is not None:
            pulumi.set(__self__, "recovery_target_disk_account_type", recovery_target_disk_account_type)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        The disk Id.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="primaryStagingAzureStorageAccountId")
    def primary_staging_azure_storage_account_id(self) -> pulumi.Input[str]:
        """
        The primary staging storage account Arm Id.
        """
        return pulumi.get(self, "primary_staging_azure_storage_account_id")

    @primary_staging_azure_storage_account_id.setter
    def primary_staging_azure_storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_staging_azure_storage_account_id", value)

    @property
    @pulumi.getter(name="recoveryResourceGroupId")
    def recovery_resource_group_id(self) -> pulumi.Input[str]:
        """
        The target resource group Arm Id.
        """
        return pulumi.get(self, "recovery_resource_group_id")

    @recovery_resource_group_id.setter
    def recovery_resource_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "recovery_resource_group_id", value)

    @property
    @pulumi.getter(name="diskEncryptionInfo")
    def disk_encryption_info(self) -> Optional[pulumi.Input['DiskEncryptionInfoArgs']]:
        """
        The recovery disk encryption information (for one / single pass flows).
        """
        return pulumi.get(self, "disk_encryption_info")

    @disk_encryption_info.setter
    def disk_encryption_info(self, value: Optional[pulumi.Input['DiskEncryptionInfoArgs']]):
        pulumi.set(self, "disk_encryption_info", value)

    @property
    @pulumi.getter(name="recoveryDiskEncryptionSetId")
    def recovery_disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery disk encryption set Id.
        """
        return pulumi.get(self, "recovery_disk_encryption_set_id")

    @recovery_disk_encryption_set_id.setter
    def recovery_disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_disk_encryption_set_id", value)

    @property
    @pulumi.getter(name="recoveryReplicaDiskAccountType")
    def recovery_replica_disk_account_type(self) -> Optional[pulumi.Input[str]]:
        """
        The replica disk type. Its an optional value and will be same as source disk type if not user provided.
        """
        return pulumi.get(self, "recovery_replica_disk_account_type")

    @recovery_replica_disk_account_type.setter
    def recovery_replica_disk_account_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_replica_disk_account_type", value)

    @property
    @pulumi.getter(name="recoveryTargetDiskAccountType")
    def recovery_target_disk_account_type(self) -> Optional[pulumi.Input[str]]:
        """
        The target disk type after failover. Its an optional value and will be same as source disk type if not user provided.
        """
        return pulumi.get(self, "recovery_target_disk_account_type")

    @recovery_target_disk_account_type.setter
    def recovery_target_disk_account_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_target_disk_account_type", value)


@pulumi.input_type
class AddRecoveryServicesProviderInputPropertiesArgs:
    def __init__(__self__, *,
                 authentication_identity_input: pulumi.Input['IdentityProviderInputArgs'],
                 machine_name: pulumi.Input[str],
                 resource_access_identity_input: pulumi.Input['IdentityProviderInputArgs'],
                 bios_id: Optional[pulumi.Input[str]] = None,
                 data_plane_authentication_identity_input: Optional[pulumi.Input['IdentityProviderInputArgs']] = None,
                 machine_id: Optional[pulumi.Input[str]] = None):
        """
        The properties of an add provider request.
        :param pulumi.Input['IdentityProviderInputArgs'] authentication_identity_input: The identity provider input for DRA authentication.
        :param pulumi.Input[str] machine_name: The name of the machine where the provider is getting added.
        :param pulumi.Input['IdentityProviderInputArgs'] resource_access_identity_input: The identity provider input for resource access.
        :param pulumi.Input[str] bios_id: The Bios Id of the machine.
        :param pulumi.Input['IdentityProviderInputArgs'] data_plane_authentication_identity_input: The identity provider input for data plane authentication.
        :param pulumi.Input[str] machine_id: The Id of the machine where the provider is getting added.
        """
        pulumi.set(__self__, "authentication_identity_input", authentication_identity_input)
        pulumi.set(__self__, "machine_name", machine_name)
        pulumi.set(__self__, "resource_access_identity_input", resource_access_identity_input)
        if bios_id is not None:
            pulumi.set(__self__, "bios_id", bios_id)
        if data_plane_authentication_identity_input is not None:
            pulumi.set(__self__, "data_plane_authentication_identity_input", data_plane_authentication_identity_input)
        if machine_id is not None:
            pulumi.set(__self__, "machine_id", machine_id)

    @property
    @pulumi.getter(name="authenticationIdentityInput")
    def authentication_identity_input(self) -> pulumi.Input['IdentityProviderInputArgs']:
        """
        The identity provider input for DRA authentication.
        """
        return pulumi.get(self, "authentication_identity_input")

    @authentication_identity_input.setter
    def authentication_identity_input(self, value: pulumi.Input['IdentityProviderInputArgs']):
        pulumi.set(self, "authentication_identity_input", value)

    @property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> pulumi.Input[str]:
        """
        The name of the machine where the provider is getting added.
        """
        return pulumi.get(self, "machine_name")

    @machine_name.setter
    def machine_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_name", value)

    @property
    @pulumi.getter(name="resourceAccessIdentityInput")
    def resource_access_identity_input(self) -> pulumi.Input['IdentityProviderInputArgs']:
        """
        The identity provider input for resource access.
        """
        return pulumi.get(self, "resource_access_identity_input")

    @resource_access_identity_input.setter
    def resource_access_identity_input(self, value: pulumi.Input['IdentityProviderInputArgs']):
        pulumi.set(self, "resource_access_identity_input", value)

    @property
    @pulumi.getter(name="biosId")
    def bios_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Bios Id of the machine.
        """
        return pulumi.get(self, "bios_id")

    @bios_id.setter
    def bios_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bios_id", value)

    @property
    @pulumi.getter(name="dataPlaneAuthenticationIdentityInput")
    def data_plane_authentication_identity_input(self) -> Optional[pulumi.Input['IdentityProviderInputArgs']]:
        """
        The identity provider input for data plane authentication.
        """
        return pulumi.get(self, "data_plane_authentication_identity_input")

    @data_plane_authentication_identity_input.setter
    def data_plane_authentication_identity_input(self, value: Optional[pulumi.Input['IdentityProviderInputArgs']]):
        pulumi.set(self, "data_plane_authentication_identity_input", value)

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of the machine where the provider is getting added.
        """
        return pulumi.get(self, "machine_id")

    @machine_id.setter
    def machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_id", value)


@pulumi.input_type
class AddVCenterRequestPropertiesArgs:
    def __init__(__self__, *,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 process_server_id: Optional[pulumi.Input[str]] = None,
                 run_as_account_id: Optional[pulumi.Input[str]] = None):
        """
        The properties of an add vCenter request.
        :param pulumi.Input[str] friendly_name: The friendly name of the vCenter.
        :param pulumi.Input[str] ip_address: The IP address of the vCenter to be discovered.
        :param pulumi.Input[str] port: The port number for discovery.
        :param pulumi.Input[str] process_server_id: The process server Id from where the discovery is orchestrated.
        :param pulumi.Input[str] run_as_account_id: The account Id which has privileges to discover the vCenter.
        """
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if process_server_id is not None:
            pulumi.set(__self__, "process_server_id", process_server_id)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of the vCenter.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the vCenter to be discovered.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        The port number for discovery.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="processServerId")
    def process_server_id(self) -> Optional[pulumi.Input[str]]:
        """
        The process server Id from where the discovery is orchestrated.
        """
        return pulumi.get(self, "process_server_id")

    @process_server_id.setter
    def process_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_server_id", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account Id which has privileges to discover the vCenter.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_account_id", value)


@pulumi.input_type
class AzureFabricCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 location: Optional[pulumi.Input[str]] = None):
        """
        Fabric provider specific settings.
        :param pulumi.Input[str] instance_type: Gets the class type.
               Expected value is 'Azure'.
        :param pulumi.Input[str] location: The Location.
        """
        pulumi.set(__self__, "instance_type", 'Azure')
        if location is not None:
            pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the class type.
        Expected value is 'Azure'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The Location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)


@pulumi.input_type
class AzureMonitorAlertSettingsArgs:
    def __init__(__self__, *,
                 alerts_for_all_job_failures: Optional[pulumi.Input[Union[str, 'AlertsState']]] = None):
        """
        Settings for Azure Monitor based alerts
        """
        if alerts_for_all_job_failures is not None:
            pulumi.set(__self__, "alerts_for_all_job_failures", alerts_for_all_job_failures)

    @property
    @pulumi.getter(name="alertsForAllJobFailures")
    def alerts_for_all_job_failures(self) -> Optional[pulumi.Input[Union[str, 'AlertsState']]]:
        return pulumi.get(self, "alerts_for_all_job_failures")

    @alerts_for_all_job_failures.setter
    def alerts_for_all_job_failures(self, value: Optional[pulumi.Input[Union[str, 'AlertsState']]]):
        pulumi.set(self, "alerts_for_all_job_failures", value)


@pulumi.input_type
class AzureToAzureCreateNetworkMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 primary_network_id: pulumi.Input[str]):
        """
        Create network mappings input properties/behavior specific to Azure to Azure Network mapping.
        :param pulumi.Input[str] instance_type: The instance type.
               Expected value is 'AzureToAzure'.
        :param pulumi.Input[str] primary_network_id: The primary azure vnet Id.
        """
        pulumi.set(__self__, "instance_type", 'AzureToAzure')
        pulumi.set(__self__, "primary_network_id", primary_network_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The instance type.
        Expected value is 'AzureToAzure'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="primaryNetworkId")
    def primary_network_id(self) -> pulumi.Input[str]:
        """
        The primary azure vnet Id.
        """
        return pulumi.get(self, "primary_network_id")

    @primary_network_id.setter
    def primary_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_network_id", value)


@pulumi.input_type
class ClassicAlertSettingsArgs:
    def __init__(__self__, *,
                 alerts_for_critical_operations: Optional[pulumi.Input[Union[str, 'AlertsState']]] = None):
        """
        Settings for classic alerts
        """
        if alerts_for_critical_operations is not None:
            pulumi.set(__self__, "alerts_for_critical_operations", alerts_for_critical_operations)

    @property
    @pulumi.getter(name="alertsForCriticalOperations")
    def alerts_for_critical_operations(self) -> Optional[pulumi.Input[Union[str, 'AlertsState']]]:
        return pulumi.get(self, "alerts_for_critical_operations")

    @alerts_for_critical_operations.setter
    def alerts_for_critical_operations(self, value: Optional[pulumi.Input[Union[str, 'AlertsState']]]):
        pulumi.set(self, "alerts_for_critical_operations", value)


@pulumi.input_type
class CmkKekIdentityArgs:
    def __init__(__self__, *,
                 use_system_assigned_identity: Optional[pulumi.Input[bool]] = None,
                 user_assigned_identity: Optional[pulumi.Input[str]] = None):
        """
        The details of the identity used for CMK
        :param pulumi.Input[bool] use_system_assigned_identity: Indicate that system assigned identity should be used. Mutually exclusive with 'userAssignedIdentity' field
        :param pulumi.Input[str] user_assigned_identity: The user assigned identity to be used to grant permissions in case the type of identity used is UserAssigned
        """
        if use_system_assigned_identity is not None:
            pulumi.set(__self__, "use_system_assigned_identity", use_system_assigned_identity)
        if user_assigned_identity is not None:
            pulumi.set(__self__, "user_assigned_identity", user_assigned_identity)

    @property
    @pulumi.getter(name="useSystemAssignedIdentity")
    def use_system_assigned_identity(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate that system assigned identity should be used. Mutually exclusive with 'userAssignedIdentity' field
        """
        return pulumi.get(self, "use_system_assigned_identity")

    @use_system_assigned_identity.setter
    def use_system_assigned_identity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_system_assigned_identity", value)

    @property
    @pulumi.getter(name="userAssignedIdentity")
    def user_assigned_identity(self) -> Optional[pulumi.Input[str]]:
        """
        The user assigned identity to be used to grant permissions in case the type of identity used is UserAssigned
        """
        return pulumi.get(self, "user_assigned_identity")

    @user_assigned_identity.setter
    def user_assigned_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_assigned_identity", value)


@pulumi.input_type
class CmkKeyVaultPropertiesArgs:
    def __init__(__self__, *,
                 key_uri: Optional[pulumi.Input[str]] = None):
        """
        The properties of the Key Vault which hosts CMK
        :param pulumi.Input[str] key_uri: The key uri of the Customer Managed Key
        """
        if key_uri is not None:
            pulumi.set(__self__, "key_uri", key_uri)

    @property
    @pulumi.getter(name="keyUri")
    def key_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The key uri of the Customer Managed Key
        """
        return pulumi.get(self, "key_uri")

    @key_uri.setter
    def key_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_uri", value)


@pulumi.input_type
class CreateNetworkMappingInputPropertiesArgs:
    def __init__(__self__, *,
                 recovery_network_id: pulumi.Input[str],
                 fabric_specific_details: Optional[pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']]] = None,
                 recovery_fabric_name: Optional[pulumi.Input[str]] = None):
        """
        Common input details for network mapping operation.
        :param pulumi.Input[str] recovery_network_id: Recovery network Id.
        :param pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']] fabric_specific_details: Fabric specific input properties.
        :param pulumi.Input[str] recovery_fabric_name: Recovery fabric Name.
        """
        pulumi.set(__self__, "recovery_network_id", recovery_network_id)
        if fabric_specific_details is not None:
            pulumi.set(__self__, "fabric_specific_details", fabric_specific_details)
        if recovery_fabric_name is not None:
            pulumi.set(__self__, "recovery_fabric_name", recovery_fabric_name)

    @property
    @pulumi.getter(name="recoveryNetworkId")
    def recovery_network_id(self) -> pulumi.Input[str]:
        """
        Recovery network Id.
        """
        return pulumi.get(self, "recovery_network_id")

    @recovery_network_id.setter
    def recovery_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "recovery_network_id", value)

    @property
    @pulumi.getter(name="fabricSpecificDetails")
    def fabric_specific_details(self) -> Optional[pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']]]:
        """
        Fabric specific input properties.
        """
        return pulumi.get(self, "fabric_specific_details")

    @fabric_specific_details.setter
    def fabric_specific_details(self, value: Optional[pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']]]):
        pulumi.set(self, "fabric_specific_details", value)

    @property
    @pulumi.getter(name="recoveryFabricName")
    def recovery_fabric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery fabric Name.
        """
        return pulumi.get(self, "recovery_fabric_name")

    @recovery_fabric_name.setter
    def recovery_fabric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_fabric_name", value)


@pulumi.input_type
class CreatePolicyInputPropertiesArgs:
    def __init__(__self__, *,
                 provider_specific_input: Optional[pulumi.Input[Union['A2ACrossClusterMigrationPolicyCreationInputArgs', 'A2APolicyCreationInputArgs', 'HyperVReplicaAzurePolicyInputArgs', 'HyperVReplicaBluePolicyInputArgs', 'HyperVReplicaPolicyInputArgs', 'InMageAzureV2PolicyInputArgs', 'InMagePolicyInputArgs', 'InMageRcmFailbackPolicyCreationInputArgs', 'InMageRcmPolicyCreationInputArgs', 'VMwareCbtPolicyCreationInputArgs']]] = None):
        """
        Policy creation properties.
        :param pulumi.Input[Union['A2ACrossClusterMigrationPolicyCreationInputArgs', 'A2APolicyCreationInputArgs', 'HyperVReplicaAzurePolicyInputArgs', 'HyperVReplicaBluePolicyInputArgs', 'HyperVReplicaPolicyInputArgs', 'InMageAzureV2PolicyInputArgs', 'InMagePolicyInputArgs', 'InMageRcmFailbackPolicyCreationInputArgs', 'InMageRcmPolicyCreationInputArgs', 'VMwareCbtPolicyCreationInputArgs']] provider_specific_input: The ReplicationProviderSettings.
        """
        if provider_specific_input is not None:
            pulumi.set(__self__, "provider_specific_input", provider_specific_input)

    @property
    @pulumi.getter(name="providerSpecificInput")
    def provider_specific_input(self) -> Optional[pulumi.Input[Union['A2ACrossClusterMigrationPolicyCreationInputArgs', 'A2APolicyCreationInputArgs', 'HyperVReplicaAzurePolicyInputArgs', 'HyperVReplicaBluePolicyInputArgs', 'HyperVReplicaPolicyInputArgs', 'InMageAzureV2PolicyInputArgs', 'InMagePolicyInputArgs', 'InMageRcmFailbackPolicyCreationInputArgs', 'InMageRcmPolicyCreationInputArgs', 'VMwareCbtPolicyCreationInputArgs']]]:
        """
        The ReplicationProviderSettings.
        """
        return pulumi.get(self, "provider_specific_input")

    @provider_specific_input.setter
    def provider_specific_input(self, value: Optional[pulumi.Input[Union['A2ACrossClusterMigrationPolicyCreationInputArgs', 'A2APolicyCreationInputArgs', 'HyperVReplicaAzurePolicyInputArgs', 'HyperVReplicaBluePolicyInputArgs', 'HyperVReplicaPolicyInputArgs', 'InMageAzureV2PolicyInputArgs', 'InMagePolicyInputArgs', 'InMageRcmFailbackPolicyCreationInputArgs', 'InMageRcmPolicyCreationInputArgs', 'VMwareCbtPolicyCreationInputArgs']]]):
        pulumi.set(self, "provider_specific_input", value)


@pulumi.input_type
class CreateProtectionContainerMappingInputPropertiesArgs:
    def __init__(__self__, *,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 provider_specific_input: Optional[pulumi.Input[Union['A2AContainerMappingInputArgs', 'VMwareCbtContainerMappingInputArgs']]] = None,
                 target_protection_container_id: Optional[pulumi.Input[str]] = None):
        """
        Configure pairing input properties.
        :param pulumi.Input[str] policy_id: Applicable policy.
        :param pulumi.Input[Union['A2AContainerMappingInputArgs', 'VMwareCbtContainerMappingInputArgs']] provider_specific_input: Provider specific input for pairing.
        :param pulumi.Input[str] target_protection_container_id: The target unique protection container name.
        """
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if provider_specific_input is not None:
            pulumi.set(__self__, "provider_specific_input", provider_specific_input)
        if target_protection_container_id is not None:
            pulumi.set(__self__, "target_protection_container_id", target_protection_container_id)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Applicable policy.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="providerSpecificInput")
    def provider_specific_input(self) -> Optional[pulumi.Input[Union['A2AContainerMappingInputArgs', 'VMwareCbtContainerMappingInputArgs']]]:
        """
        Provider specific input for pairing.
        """
        return pulumi.get(self, "provider_specific_input")

    @provider_specific_input.setter
    def provider_specific_input(self, value: Optional[pulumi.Input[Union['A2AContainerMappingInputArgs', 'VMwareCbtContainerMappingInputArgs']]]):
        pulumi.set(self, "provider_specific_input", value)

    @property
    @pulumi.getter(name="targetProtectionContainerId")
    def target_protection_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target unique protection container name.
        """
        return pulumi.get(self, "target_protection_container_id")

    @target_protection_container_id.setter
    def target_protection_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_protection_container_id", value)


@pulumi.input_type
class CreateRecoveryPlanInputPropertiesArgs:
    def __init__(__self__, *,
                 groups: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanGroupArgs']]],
                 primary_fabric_id: pulumi.Input[str],
                 recovery_fabric_id: pulumi.Input[str],
                 failover_deployment_model: Optional[pulumi.Input[Union[str, 'FailoverDeploymentModel']]] = None,
                 provider_specific_input: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanA2AInputArgs']]]] = None):
        """
        Recovery plan creation properties.
        :param pulumi.Input[Sequence[pulumi.Input['RecoveryPlanGroupArgs']]] groups: The recovery plan groups.
        :param pulumi.Input[str] primary_fabric_id: The primary fabric Id.
        :param pulumi.Input[str] recovery_fabric_id: The recovery fabric Id.
        :param pulumi.Input[Union[str, 'FailoverDeploymentModel']] failover_deployment_model: The failover deployment model.
        :param pulumi.Input[Sequence[pulumi.Input['RecoveryPlanA2AInputArgs']]] provider_specific_input: The provider specific input.
        """
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "primary_fabric_id", primary_fabric_id)
        pulumi.set(__self__, "recovery_fabric_id", recovery_fabric_id)
        if failover_deployment_model is not None:
            pulumi.set(__self__, "failover_deployment_model", failover_deployment_model)
        if provider_specific_input is not None:
            pulumi.set(__self__, "provider_specific_input", provider_specific_input)

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Input[Sequence[pulumi.Input['RecoveryPlanGroupArgs']]]:
        """
        The recovery plan groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanGroupArgs']]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="primaryFabricId")
    def primary_fabric_id(self) -> pulumi.Input[str]:
        """
        The primary fabric Id.
        """
        return pulumi.get(self, "primary_fabric_id")

    @primary_fabric_id.setter
    def primary_fabric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_fabric_id", value)

    @property
    @pulumi.getter(name="recoveryFabricId")
    def recovery_fabric_id(self) -> pulumi.Input[str]:
        """
        The recovery fabric Id.
        """
        return pulumi.get(self, "recovery_fabric_id")

    @recovery_fabric_id.setter
    def recovery_fabric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "recovery_fabric_id", value)

    @property
    @pulumi.getter(name="failoverDeploymentModel")
    def failover_deployment_model(self) -> Optional[pulumi.Input[Union[str, 'FailoverDeploymentModel']]]:
        """
        The failover deployment model.
        """
        return pulumi.get(self, "failover_deployment_model")

    @failover_deployment_model.setter
    def failover_deployment_model(self, value: Optional[pulumi.Input[Union[str, 'FailoverDeploymentModel']]]):
        pulumi.set(self, "failover_deployment_model", value)

    @property
    @pulumi.getter(name="providerSpecificInput")
    def provider_specific_input(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanA2AInputArgs']]]]:
        """
        The provider specific input.
        """
        return pulumi.get(self, "provider_specific_input")

    @provider_specific_input.setter
    def provider_specific_input(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanA2AInputArgs']]]]):
        pulumi.set(self, "provider_specific_input", value)


@pulumi.input_type
class CrossSubscriptionRestoreSettingsArgs:
    def __init__(__self__, *,
                 cross_subscription_restore_state: Optional[pulumi.Input[Union[str, 'CrossSubscriptionRestoreState']]] = None):
        """
        Settings for Cross Subscription Restore Settings
        """
        if cross_subscription_restore_state is not None:
            pulumi.set(__self__, "cross_subscription_restore_state", cross_subscription_restore_state)

    @property
    @pulumi.getter(name="crossSubscriptionRestoreState")
    def cross_subscription_restore_state(self) -> Optional[pulumi.Input[Union[str, 'CrossSubscriptionRestoreState']]]:
        return pulumi.get(self, "cross_subscription_restore_state")

    @cross_subscription_restore_state.setter
    def cross_subscription_restore_state(self, value: Optional[pulumi.Input[Union[str, 'CrossSubscriptionRestoreState']]]):
        pulumi.set(self, "cross_subscription_restore_state", value)


@pulumi.input_type
class DiskEncryptionInfoArgs:
    def __init__(__self__, *,
                 disk_encryption_key_info: Optional[pulumi.Input['DiskEncryptionKeyInfoArgs']] = None,
                 key_encryption_key_info: Optional[pulumi.Input['KeyEncryptionKeyInfoArgs']] = None):
        """
        Recovery disk encryption info (BEK and KEK).
        :param pulumi.Input['DiskEncryptionKeyInfoArgs'] disk_encryption_key_info: The recovery KeyVault reference for secret.
        :param pulumi.Input['KeyEncryptionKeyInfoArgs'] key_encryption_key_info: The recovery KeyVault reference for key.
        """
        if disk_encryption_key_info is not None:
            pulumi.set(__self__, "disk_encryption_key_info", disk_encryption_key_info)
        if key_encryption_key_info is not None:
            pulumi.set(__self__, "key_encryption_key_info", key_encryption_key_info)

    @property
    @pulumi.getter(name="diskEncryptionKeyInfo")
    def disk_encryption_key_info(self) -> Optional[pulumi.Input['DiskEncryptionKeyInfoArgs']]:
        """
        The recovery KeyVault reference for secret.
        """
        return pulumi.get(self, "disk_encryption_key_info")

    @disk_encryption_key_info.setter
    def disk_encryption_key_info(self, value: Optional[pulumi.Input['DiskEncryptionKeyInfoArgs']]):
        pulumi.set(self, "disk_encryption_key_info", value)

    @property
    @pulumi.getter(name="keyEncryptionKeyInfo")
    def key_encryption_key_info(self) -> Optional[pulumi.Input['KeyEncryptionKeyInfoArgs']]:
        """
        The recovery KeyVault reference for key.
        """
        return pulumi.get(self, "key_encryption_key_info")

    @key_encryption_key_info.setter
    def key_encryption_key_info(self, value: Optional[pulumi.Input['KeyEncryptionKeyInfoArgs']]):
        pulumi.set(self, "key_encryption_key_info", value)


@pulumi.input_type
class DiskEncryptionKeyInfoArgs:
    def __init__(__self__, *,
                 key_vault_resource_arm_id: Optional[pulumi.Input[str]] = None,
                 secret_identifier: Optional[pulumi.Input[str]] = None):
        """
        Disk Encryption Key Information (BitLocker Encryption Key (BEK) on Windows).
        :param pulumi.Input[str] key_vault_resource_arm_id: The KeyVault resource ARM id for secret.
        :param pulumi.Input[str] secret_identifier: The secret url / identifier.
        """
        if key_vault_resource_arm_id is not None:
            pulumi.set(__self__, "key_vault_resource_arm_id", key_vault_resource_arm_id)
        if secret_identifier is not None:
            pulumi.set(__self__, "secret_identifier", secret_identifier)

    @property
    @pulumi.getter(name="keyVaultResourceArmId")
    def key_vault_resource_arm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The KeyVault resource ARM id for secret.
        """
        return pulumi.get(self, "key_vault_resource_arm_id")

    @key_vault_resource_arm_id.setter
    def key_vault_resource_arm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_resource_arm_id", value)

    @property
    @pulumi.getter(name="secretIdentifier")
    def secret_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The secret url / identifier.
        """
        return pulumi.get(self, "secret_identifier")

    @secret_identifier.setter
    def secret_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_identifier", value)


@pulumi.input_type
class EnableMigrationInputPropertiesArgs:
    def __init__(__self__, *,
                 policy_id: pulumi.Input[str],
                 provider_specific_details: pulumi.Input['VMwareCbtEnableMigrationInputArgs']):
        """
        Enable migration input properties.
        :param pulumi.Input[str] policy_id: The policy Id.
        :param pulumi.Input['VMwareCbtEnableMigrationInputArgs'] provider_specific_details: The provider specific details.
        """
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "provider_specific_details", provider_specific_details)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[str]:
        """
        The policy Id.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="providerSpecificDetails")
    def provider_specific_details(self) -> pulumi.Input['VMwareCbtEnableMigrationInputArgs']:
        """
        The provider specific details.
        """
        return pulumi.get(self, "provider_specific_details")

    @provider_specific_details.setter
    def provider_specific_details(self, value: pulumi.Input['VMwareCbtEnableMigrationInputArgs']):
        pulumi.set(self, "provider_specific_details", value)


@pulumi.input_type
class EnableProtectionInputPropertiesArgs:
    def __init__(__self__, *,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 protectable_item_id: Optional[pulumi.Input[str]] = None,
                 provider_specific_details: Optional[pulumi.Input[Union['A2ACrossClusterMigrationEnableProtectionInputArgs', 'A2AEnableProtectionInputArgs', 'HyperVReplicaAzureEnableProtectionInputArgs', 'InMageAzureV2EnableProtectionInputArgs', 'InMageEnableProtectionInputArgs', 'InMageRcmEnableProtectionInputArgs']]] = None):
        """
        Enable protection input properties.
        :param pulumi.Input[str] policy_id: The Policy Id.
        :param pulumi.Input[str] protectable_item_id: The protectable item Id.
        :param pulumi.Input[Union['A2ACrossClusterMigrationEnableProtectionInputArgs', 'A2AEnableProtectionInputArgs', 'HyperVReplicaAzureEnableProtectionInputArgs', 'InMageAzureV2EnableProtectionInputArgs', 'InMageEnableProtectionInputArgs', 'InMageRcmEnableProtectionInputArgs']] provider_specific_details: The ReplicationProviderInput. For HyperVReplicaAzure provider, it will be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For HyperVReplicaAzure provider, it can be null.
        """
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protectable_item_id is not None:
            pulumi.set(__self__, "protectable_item_id", protectable_item_id)
        if provider_specific_details is not None:
            pulumi.set(__self__, "provider_specific_details", provider_specific_details)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Policy Id.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="protectableItemId")
    def protectable_item_id(self) -> Optional[pulumi.Input[str]]:
        """
        The protectable item Id.
        """
        return pulumi.get(self, "protectable_item_id")

    @protectable_item_id.setter
    def protectable_item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_item_id", value)

    @property
    @pulumi.getter(name="providerSpecificDetails")
    def provider_specific_details(self) -> Optional[pulumi.Input[Union['A2ACrossClusterMigrationEnableProtectionInputArgs', 'A2AEnableProtectionInputArgs', 'HyperVReplicaAzureEnableProtectionInputArgs', 'InMageAzureV2EnableProtectionInputArgs', 'InMageEnableProtectionInputArgs', 'InMageRcmEnableProtectionInputArgs']]]:
        """
        The ReplicationProviderInput. For HyperVReplicaAzure provider, it will be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For HyperVReplicaAzure provider, it can be null.
        """
        return pulumi.get(self, "provider_specific_details")

    @provider_specific_details.setter
    def provider_specific_details(self, value: Optional[pulumi.Input[Union['A2ACrossClusterMigrationEnableProtectionInputArgs', 'A2AEnableProtectionInputArgs', 'HyperVReplicaAzureEnableProtectionInputArgs', 'InMageAzureV2EnableProtectionInputArgs', 'InMageEnableProtectionInputArgs', 'InMageRcmEnableProtectionInputArgs']]]):
        pulumi.set(self, "provider_specific_details", value)


@pulumi.input_type
class ExtendedLocationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[Union[str, 'ExtendedLocationType']]):
        """
        Extended location of the resource.
        :param pulumi.Input[str] name: The name of the extended location.
        :param pulumi.Input[Union[str, 'ExtendedLocationType']] type: The extended location type.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the extended location.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ExtendedLocationType']]:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ExtendedLocationType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FabricCreationInputPropertiesArgs:
    def __init__(__self__, *,
                 custom_details: Optional[pulumi.Input[Union['AzureFabricCreationInputArgs', 'InMageRcmFabricCreationInputArgs', 'VMwareV2FabricCreationInputArgs']]] = None):
        """
        Properties of site details provided during the time of site creation.
        :param pulumi.Input[Union['AzureFabricCreationInputArgs', 'InMageRcmFabricCreationInputArgs', 'VMwareV2FabricCreationInputArgs']] custom_details: Fabric provider specific creation input.
        """
        if custom_details is not None:
            pulumi.set(__self__, "custom_details", custom_details)

    @property
    @pulumi.getter(name="customDetails")
    def custom_details(self) -> Optional[pulumi.Input[Union['AzureFabricCreationInputArgs', 'InMageRcmFabricCreationInputArgs', 'VMwareV2FabricCreationInputArgs']]]:
        """
        Fabric provider specific creation input.
        """
        return pulumi.get(self, "custom_details")

    @custom_details.setter
    def custom_details(self, value: Optional[pulumi.Input[Union['AzureFabricCreationInputArgs', 'InMageRcmFabricCreationInputArgs', 'VMwareV2FabricCreationInputArgs']]]):
        pulumi.set(self, "custom_details", value)


@pulumi.input_type
class HyperVReplicaAzureDiskInputDetailsArgs:
    def __init__(__self__, *,
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[Union[str, 'DiskAccountType']]] = None,
                 log_storage_account_id: Optional[pulumi.Input[str]] = None):
        """
        Disk input details.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM ID.
        :param pulumi.Input[str] disk_id: The DiskId.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The DiskType.
        :param pulumi.Input[str] log_storage_account_id: The LogStorageAccountId.
        """
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if log_storage_account_id is not None:
            pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM ID.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskId.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[Union[str, 'DiskAccountType']]]:
        """
        The DiskType.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[Union[str, 'DiskAccountType']]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The LogStorageAccountId.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_storage_account_id", value)


@pulumi.input_type
class HyperVReplicaAzureEnableProtectionInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[Union[str, 'DiskAccountType']]] = None,
                 disks_to_include: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disks_to_include_for_managed_disks: Optional[pulumi.Input[Sequence[pulumi.Input['HyperVReplicaAzureDiskInputDetailsArgs']]]] = None,
                 enable_rdp_on_target_option: Optional[pulumi.Input[str]] = None,
                 hv_host_vm_id: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[Union[str, 'LicenseType']]] = None,
                 log_storage_account_id: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 seed_managed_disk_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 sql_server_license_type: Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_availability_zone: Optional[pulumi.Input[str]] = None,
                 target_azure_network_id: Optional[pulumi.Input[str]] = None,
                 target_azure_subnet_id: Optional[pulumi.Input[str]] = None,
                 target_azure_v1_resource_group_id: Optional[pulumi.Input[str]] = None,
                 target_azure_v2_resource_group_id: Optional[pulumi.Input[str]] = None,
                 target_azure_vm_name: Optional[pulumi.Input[str]] = None,
                 target_managed_disk_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_nic_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_proximity_placement_group_id: Optional[pulumi.Input[str]] = None,
                 target_storage_account_id: Optional[pulumi.Input[str]] = None,
                 target_vm_size: Optional[pulumi.Input[str]] = None,
                 target_vm_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 use_managed_disks: Optional[pulumi.Input[str]] = None,
                 use_managed_disks_for_replication: Optional[pulumi.Input[str]] = None,
                 vhd_id: Optional[pulumi.Input[str]] = None,
                 vm_name: Optional[pulumi.Input[str]] = None):
        """
        HyperVReplicaAzure specific enable protection input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'HyperVReplicaAzure'.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM Id.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The DiskType.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disks_to_include: The list of VHD Ids of disks to be protected.
        :param pulumi.Input[Sequence[pulumi.Input['HyperVReplicaAzureDiskInputDetailsArgs']]] disks_to_include_for_managed_disks: The disks to include list for managed disks.
        :param pulumi.Input[str] enable_rdp_on_target_option: The selected option to enable RDP\\SSH on target vm after failover. String value of SrsDataContract.EnableRDPOnTargetOption enum.
        :param pulumi.Input[str] hv_host_vm_id: The Hyper-V host VM Id.
        :param pulumi.Input[Union[str, 'LicenseType']] license_type: License type.
        :param pulumi.Input[str] log_storage_account_id: The storage account to be used for logging during replication.
        :param pulumi.Input[str] os_type: The OS type associated with VM.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] seed_managed_disk_tags: The tags for the seed managed disks.
        :param pulumi.Input[Union[str, 'SqlServerLicenseType']] sql_server_license_type: The SQL Server license type.
        :param pulumi.Input[str] target_availability_set_id: The target availability set ARM Id for resource manager deployment.
        :param pulumi.Input[str] target_availability_zone: The target availability zone.
        :param pulumi.Input[str] target_azure_network_id: The selected target Azure network Id.
        :param pulumi.Input[str] target_azure_subnet_id: The selected target Azure subnet Id.
        :param pulumi.Input[str] target_azure_v1_resource_group_id: The Id of the target resource group (for classic deployment) in which the failover VM is to be created.
        :param pulumi.Input[str] target_azure_v2_resource_group_id: The Id of the target resource group (for resource manager deployment) in which the failover VM is to be created.
        :param pulumi.Input[str] target_azure_vm_name: The target azure VM Name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_managed_disk_tags: The tags for the target managed disks.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_nic_tags: The tags for the target NICs.
        :param pulumi.Input[str] target_proximity_placement_group_id: The proximity placement group ARM Id.
        :param pulumi.Input[str] target_storage_account_id: The storage account Id.
        :param pulumi.Input[str] target_vm_size: The target VM size.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_vm_tags: The target VM tags.
        :param pulumi.Input[str] use_managed_disks: A value indicating whether managed disks should be used during failover.
        :param pulumi.Input[str] use_managed_disks_for_replication: A value indicating whether managed disks should be used during replication.
        :param pulumi.Input[str] vhd_id: The OS disk VHD id associated with VM.
        :param pulumi.Input[str] vm_name: The VM Name.
        """
        pulumi.set(__self__, "instance_type", 'HyperVReplicaAzure')
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if disks_to_include is not None:
            pulumi.set(__self__, "disks_to_include", disks_to_include)
        if disks_to_include_for_managed_disks is not None:
            pulumi.set(__self__, "disks_to_include_for_managed_disks", disks_to_include_for_managed_disks)
        if enable_rdp_on_target_option is not None:
            pulumi.set(__self__, "enable_rdp_on_target_option", enable_rdp_on_target_option)
        if hv_host_vm_id is not None:
            pulumi.set(__self__, "hv_host_vm_id", hv_host_vm_id)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if log_storage_account_id is not None:
            pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if seed_managed_disk_tags is not None:
            pulumi.set(__self__, "seed_managed_disk_tags", seed_managed_disk_tags)
        if sql_server_license_type is not None:
            pulumi.set(__self__, "sql_server_license_type", sql_server_license_type)
        if target_availability_set_id is not None:
            pulumi.set(__self__, "target_availability_set_id", target_availability_set_id)
        if target_availability_zone is not None:
            pulumi.set(__self__, "target_availability_zone", target_availability_zone)
        if target_azure_network_id is not None:
            pulumi.set(__self__, "target_azure_network_id", target_azure_network_id)
        if target_azure_subnet_id is not None:
            pulumi.set(__self__, "target_azure_subnet_id", target_azure_subnet_id)
        if target_azure_v1_resource_group_id is not None:
            pulumi.set(__self__, "target_azure_v1_resource_group_id", target_azure_v1_resource_group_id)
        if target_azure_v2_resource_group_id is not None:
            pulumi.set(__self__, "target_azure_v2_resource_group_id", target_azure_v2_resource_group_id)
        if target_azure_vm_name is not None:
            pulumi.set(__self__, "target_azure_vm_name", target_azure_vm_name)
        if target_managed_disk_tags is not None:
            pulumi.set(__self__, "target_managed_disk_tags", target_managed_disk_tags)
        if target_nic_tags is not None:
            pulumi.set(__self__, "target_nic_tags", target_nic_tags)
        if target_proximity_placement_group_id is not None:
            pulumi.set(__self__, "target_proximity_placement_group_id", target_proximity_placement_group_id)
        if target_storage_account_id is not None:
            pulumi.set(__self__, "target_storage_account_id", target_storage_account_id)
        if target_vm_size is not None:
            pulumi.set(__self__, "target_vm_size", target_vm_size)
        if target_vm_tags is not None:
            pulumi.set(__self__, "target_vm_tags", target_vm_tags)
        if use_managed_disks is not None:
            pulumi.set(__self__, "use_managed_disks", use_managed_disks)
        if use_managed_disks_for_replication is not None:
            pulumi.set(__self__, "use_managed_disks_for_replication", use_managed_disks_for_replication)
        if vhd_id is not None:
            pulumi.set(__self__, "vhd_id", vhd_id)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'HyperVReplicaAzure'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM Id.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[Union[str, 'DiskAccountType']]]:
        """
        The DiskType.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[Union[str, 'DiskAccountType']]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of VHD Ids of disks to be protected.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="disksToIncludeForManagedDisks")
    def disks_to_include_for_managed_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HyperVReplicaAzureDiskInputDetailsArgs']]]]:
        """
        The disks to include list for managed disks.
        """
        return pulumi.get(self, "disks_to_include_for_managed_disks")

    @disks_to_include_for_managed_disks.setter
    def disks_to_include_for_managed_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HyperVReplicaAzureDiskInputDetailsArgs']]]]):
        pulumi.set(self, "disks_to_include_for_managed_disks", value)

    @property
    @pulumi.getter(name="enableRdpOnTargetOption")
    def enable_rdp_on_target_option(self) -> Optional[pulumi.Input[str]]:
        """
        The selected option to enable RDP\\SSH on target vm after failover. String value of SrsDataContract.EnableRDPOnTargetOption enum.
        """
        return pulumi.get(self, "enable_rdp_on_target_option")

    @enable_rdp_on_target_option.setter
    def enable_rdp_on_target_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_rdp_on_target_option", value)

    @property
    @pulumi.getter(name="hvHostVmId")
    def hv_host_vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Hyper-V host VM Id.
        """
        return pulumi.get(self, "hv_host_vm_id")

    @hv_host_vm_id.setter
    def hv_host_vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hv_host_vm_id", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[Union[str, 'LicenseType']]]:
        """
        License type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[Union[str, 'LicenseType']]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The storage account to be used for logging during replication.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_storage_account_id", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        The OS type associated with VM.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="seedManagedDiskTags")
    def seed_managed_disk_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the seed managed disks.
        """
        return pulumi.get(self, "seed_managed_disk_tags")

    @seed_managed_disk_tags.setter
    def seed_managed_disk_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "seed_managed_disk_tags", value)

    @property
    @pulumi.getter(name="sqlServerLicenseType")
    def sql_server_license_type(self) -> Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]]:
        """
        The SQL Server license type.
        """
        return pulumi.get(self, "sql_server_license_type")

    @sql_server_license_type.setter
    def sql_server_license_type(self, value: Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]]):
        pulumi.set(self, "sql_server_license_type", value)

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability set ARM Id for resource manager deployment.
        """
        return pulumi.get(self, "target_availability_set_id")

    @target_availability_set_id.setter
    def target_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_set_id", value)

    @property
    @pulumi.getter(name="targetAvailabilityZone")
    def target_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability zone.
        """
        return pulumi.get(self, "target_availability_zone")

    @target_availability_zone.setter
    def target_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_zone", value)

    @property
    @pulumi.getter(name="targetAzureNetworkId")
    def target_azure_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected target Azure network Id.
        """
        return pulumi.get(self, "target_azure_network_id")

    @target_azure_network_id.setter
    def target_azure_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_network_id", value)

    @property
    @pulumi.getter(name="targetAzureSubnetId")
    def target_azure_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected target Azure subnet Id.
        """
        return pulumi.get(self, "target_azure_subnet_id")

    @target_azure_subnet_id.setter
    def target_azure_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_subnet_id", value)

    @property
    @pulumi.getter(name="targetAzureV1ResourceGroupId")
    def target_azure_v1_resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of the target resource group (for classic deployment) in which the failover VM is to be created.
        """
        return pulumi.get(self, "target_azure_v1_resource_group_id")

    @target_azure_v1_resource_group_id.setter
    def target_azure_v1_resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_v1_resource_group_id", value)

    @property
    @pulumi.getter(name="targetAzureV2ResourceGroupId")
    def target_azure_v2_resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of the target resource group (for resource manager deployment) in which the failover VM is to be created.
        """
        return pulumi.get(self, "target_azure_v2_resource_group_id")

    @target_azure_v2_resource_group_id.setter
    def target_azure_v2_resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_v2_resource_group_id", value)

    @property
    @pulumi.getter(name="targetAzureVmName")
    def target_azure_vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target azure VM Name.
        """
        return pulumi.get(self, "target_azure_vm_name")

    @target_azure_vm_name.setter
    def target_azure_vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_vm_name", value)

    @property
    @pulumi.getter(name="targetManagedDiskTags")
    def target_managed_disk_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the target managed disks.
        """
        return pulumi.get(self, "target_managed_disk_tags")

    @target_managed_disk_tags.setter
    def target_managed_disk_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_managed_disk_tags", value)

    @property
    @pulumi.getter(name="targetNicTags")
    def target_nic_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the target NICs.
        """
        return pulumi.get(self, "target_nic_tags")

    @target_nic_tags.setter
    def target_nic_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_nic_tags", value)

    @property
    @pulumi.getter(name="targetProximityPlacementGroupId")
    def target_proximity_placement_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The proximity placement group ARM Id.
        """
        return pulumi.get(self, "target_proximity_placement_group_id")

    @target_proximity_placement_group_id.setter
    def target_proximity_placement_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_proximity_placement_group_id", value)

    @property
    @pulumi.getter(name="targetStorageAccountId")
    def target_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The storage account Id.
        """
        return pulumi.get(self, "target_storage_account_id")

    @target_storage_account_id.setter
    def target_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_storage_account_id", value)

    @property
    @pulumi.getter(name="targetVmSize")
    def target_vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        The target VM size.
        """
        return pulumi.get(self, "target_vm_size")

    @target_vm_size.setter
    def target_vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_size", value)

    @property
    @pulumi.getter(name="targetVmTags")
    def target_vm_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The target VM tags.
        """
        return pulumi.get(self, "target_vm_tags")

    @target_vm_tags.setter
    def target_vm_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_vm_tags", value)

    @property
    @pulumi.getter(name="useManagedDisks")
    def use_managed_disks(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether managed disks should be used during failover.
        """
        return pulumi.get(self, "use_managed_disks")

    @use_managed_disks.setter
    def use_managed_disks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_managed_disks", value)

    @property
    @pulumi.getter(name="useManagedDisksForReplication")
    def use_managed_disks_for_replication(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether managed disks should be used during replication.
        """
        return pulumi.get(self, "use_managed_disks_for_replication")

    @use_managed_disks_for_replication.setter
    def use_managed_disks_for_replication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_managed_disks_for_replication", value)

    @property
    @pulumi.getter(name="vhdId")
    def vhd_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OS disk VHD id associated with VM.
        """
        return pulumi.get(self, "vhd_id")

    @vhd_id.setter
    def vhd_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vhd_id", value)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        The VM Name.
        """
        return pulumi.get(self, "vm_name")

    @vm_name.setter
    def vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name", value)


@pulumi.input_type
class HyperVReplicaAzurePolicyInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 application_consistent_snapshot_frequency_in_hours: Optional[pulumi.Input[int]] = None,
                 online_replication_start_time: Optional[pulumi.Input[str]] = None,
                 recovery_point_history_duration: Optional[pulumi.Input[int]] = None,
                 replication_interval: Optional[pulumi.Input[int]] = None,
                 storage_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Hyper-V Replica Azure specific input for creating a protection profile.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'HyperVReplicaAzure'.
        :param pulumi.Input[int] application_consistent_snapshot_frequency_in_hours: The interval (in hours) at which Hyper-V Replica should create an application consistent snapshot within the VM.
        :param pulumi.Input[str] online_replication_start_time: The scheduled start time for the initial replication. If this parameter is Null, the initial replication starts immediately.
        :param pulumi.Input[int] recovery_point_history_duration: The duration (in hours) to which point the recovery history needs to be maintained.
        :param pulumi.Input[int] replication_interval: The replication interval.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_accounts: The list of storage accounts to which the VMs in the primary cloud can replicate to.
        """
        pulumi.set(__self__, "instance_type", 'HyperVReplicaAzure')
        if application_consistent_snapshot_frequency_in_hours is not None:
            pulumi.set(__self__, "application_consistent_snapshot_frequency_in_hours", application_consistent_snapshot_frequency_in_hours)
        if online_replication_start_time is not None:
            pulumi.set(__self__, "online_replication_start_time", online_replication_start_time)
        if recovery_point_history_duration is not None:
            pulumi.set(__self__, "recovery_point_history_duration", recovery_point_history_duration)
        if replication_interval is not None:
            pulumi.set(__self__, "replication_interval", replication_interval)
        if storage_accounts is not None:
            pulumi.set(__self__, "storage_accounts", storage_accounts)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'HyperVReplicaAzure'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="applicationConsistentSnapshotFrequencyInHours")
    def application_consistent_snapshot_frequency_in_hours(self) -> Optional[pulumi.Input[int]]:
        """
        The interval (in hours) at which Hyper-V Replica should create an application consistent snapshot within the VM.
        """
        return pulumi.get(self, "application_consistent_snapshot_frequency_in_hours")

    @application_consistent_snapshot_frequency_in_hours.setter
    def application_consistent_snapshot_frequency_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "application_consistent_snapshot_frequency_in_hours", value)

    @property
    @pulumi.getter(name="onlineReplicationStartTime")
    def online_replication_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The scheduled start time for the initial replication. If this parameter is Null, the initial replication starts immediately.
        """
        return pulumi.get(self, "online_replication_start_time")

    @online_replication_start_time.setter
    def online_replication_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "online_replication_start_time", value)

    @property
    @pulumi.getter(name="recoveryPointHistoryDuration")
    def recovery_point_history_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The duration (in hours) to which point the recovery history needs to be maintained.
        """
        return pulumi.get(self, "recovery_point_history_duration")

    @recovery_point_history_duration.setter
    def recovery_point_history_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_history_duration", value)

    @property
    @pulumi.getter(name="replicationInterval")
    def replication_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The replication interval.
        """
        return pulumi.get(self, "replication_interval")

    @replication_interval.setter
    def replication_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_interval", value)

    @property
    @pulumi.getter(name="storageAccounts")
    def storage_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of storage accounts to which the VMs in the primary cloud can replicate to.
        """
        return pulumi.get(self, "storage_accounts")

    @storage_accounts.setter
    def storage_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "storage_accounts", value)


@pulumi.input_type
class HyperVReplicaBluePolicyInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 allowed_authentication_type: Optional[pulumi.Input[int]] = None,
                 application_consistent_snapshot_frequency_in_hours: Optional[pulumi.Input[int]] = None,
                 compression: Optional[pulumi.Input[str]] = None,
                 initial_replication_method: Optional[pulumi.Input[str]] = None,
                 offline_replication_export_path: Optional[pulumi.Input[str]] = None,
                 offline_replication_import_path: Optional[pulumi.Input[str]] = None,
                 online_replication_start_time: Optional[pulumi.Input[str]] = None,
                 recovery_points: Optional[pulumi.Input[int]] = None,
                 replica_deletion: Optional[pulumi.Input[str]] = None,
                 replication_frequency_in_seconds: Optional[pulumi.Input[int]] = None,
                 replication_port: Optional[pulumi.Input[int]] = None):
        """
        HyperV Replica Blue policy input.
        :param pulumi.Input[str] instance_type: 
               Expected value is 'HyperVReplica2012R2'.
        :param pulumi.Input[int] allowed_authentication_type: A value indicating the authentication type.
        :param pulumi.Input[int] application_consistent_snapshot_frequency_in_hours: A value indicating the application consistent frequency.
        :param pulumi.Input[str] compression: A value indicating whether compression has to be enabled.
        :param pulumi.Input[str] initial_replication_method: A value indicating whether IR is online.
        :param pulumi.Input[str] offline_replication_export_path: A value indicating the offline IR export path.
        :param pulumi.Input[str] offline_replication_import_path: A value indicating the offline IR import path.
        :param pulumi.Input[str] online_replication_start_time: A value indicating the online IR start time.
        :param pulumi.Input[int] recovery_points: A value indicating the number of recovery points.
        :param pulumi.Input[str] replica_deletion: A value indicating whether the VM has to be auto deleted.
        :param pulumi.Input[int] replication_frequency_in_seconds: A value indicating the replication interval.
        :param pulumi.Input[int] replication_port: A value indicating the recovery HTTPS port.
        """
        pulumi.set(__self__, "instance_type", 'HyperVReplica2012R2')
        if allowed_authentication_type is not None:
            pulumi.set(__self__, "allowed_authentication_type", allowed_authentication_type)
        if application_consistent_snapshot_frequency_in_hours is not None:
            pulumi.set(__self__, "application_consistent_snapshot_frequency_in_hours", application_consistent_snapshot_frequency_in_hours)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if initial_replication_method is not None:
            pulumi.set(__self__, "initial_replication_method", initial_replication_method)
        if offline_replication_export_path is not None:
            pulumi.set(__self__, "offline_replication_export_path", offline_replication_export_path)
        if offline_replication_import_path is not None:
            pulumi.set(__self__, "offline_replication_import_path", offline_replication_import_path)
        if online_replication_start_time is not None:
            pulumi.set(__self__, "online_replication_start_time", online_replication_start_time)
        if recovery_points is not None:
            pulumi.set(__self__, "recovery_points", recovery_points)
        if replica_deletion is not None:
            pulumi.set(__self__, "replica_deletion", replica_deletion)
        if replication_frequency_in_seconds is not None:
            pulumi.set(__self__, "replication_frequency_in_seconds", replication_frequency_in_seconds)
        if replication_port is not None:
            pulumi.set(__self__, "replication_port", replication_port)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """

        Expected value is 'HyperVReplica2012R2'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="allowedAuthenticationType")
    def allowed_authentication_type(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the authentication type.
        """
        return pulumi.get(self, "allowed_authentication_type")

    @allowed_authentication_type.setter
    def allowed_authentication_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowed_authentication_type", value)

    @property
    @pulumi.getter(name="applicationConsistentSnapshotFrequencyInHours")
    def application_consistent_snapshot_frequency_in_hours(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the application consistent frequency.
        """
        return pulumi.get(self, "application_consistent_snapshot_frequency_in_hours")

    @application_consistent_snapshot_frequency_in_hours.setter
    def application_consistent_snapshot_frequency_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "application_consistent_snapshot_frequency_in_hours", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether compression has to be enabled.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter(name="initialReplicationMethod")
    def initial_replication_method(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether IR is online.
        """
        return pulumi.get(self, "initial_replication_method")

    @initial_replication_method.setter
    def initial_replication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initial_replication_method", value)

    @property
    @pulumi.getter(name="offlineReplicationExportPath")
    def offline_replication_export_path(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating the offline IR export path.
        """
        return pulumi.get(self, "offline_replication_export_path")

    @offline_replication_export_path.setter
    def offline_replication_export_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offline_replication_export_path", value)

    @property
    @pulumi.getter(name="offlineReplicationImportPath")
    def offline_replication_import_path(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating the offline IR import path.
        """
        return pulumi.get(self, "offline_replication_import_path")

    @offline_replication_import_path.setter
    def offline_replication_import_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offline_replication_import_path", value)

    @property
    @pulumi.getter(name="onlineReplicationStartTime")
    def online_replication_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating the online IR start time.
        """
        return pulumi.get(self, "online_replication_start_time")

    @online_replication_start_time.setter
    def online_replication_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "online_replication_start_time", value)

    @property
    @pulumi.getter(name="recoveryPoints")
    def recovery_points(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the number of recovery points.
        """
        return pulumi.get(self, "recovery_points")

    @recovery_points.setter
    def recovery_points(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_points", value)

    @property
    @pulumi.getter(name="replicaDeletion")
    def replica_deletion(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether the VM has to be auto deleted.
        """
        return pulumi.get(self, "replica_deletion")

    @replica_deletion.setter
    def replica_deletion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_deletion", value)

    @property
    @pulumi.getter(name="replicationFrequencyInSeconds")
    def replication_frequency_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the replication interval.
        """
        return pulumi.get(self, "replication_frequency_in_seconds")

    @replication_frequency_in_seconds.setter
    def replication_frequency_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_frequency_in_seconds", value)

    @property
    @pulumi.getter(name="replicationPort")
    def replication_port(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the recovery HTTPS port.
        """
        return pulumi.get(self, "replication_port")

    @replication_port.setter
    def replication_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_port", value)


@pulumi.input_type
class HyperVReplicaPolicyInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 allowed_authentication_type: Optional[pulumi.Input[int]] = None,
                 application_consistent_snapshot_frequency_in_hours: Optional[pulumi.Input[int]] = None,
                 compression: Optional[pulumi.Input[str]] = None,
                 initial_replication_method: Optional[pulumi.Input[str]] = None,
                 offline_replication_export_path: Optional[pulumi.Input[str]] = None,
                 offline_replication_import_path: Optional[pulumi.Input[str]] = None,
                 online_replication_start_time: Optional[pulumi.Input[str]] = None,
                 recovery_points: Optional[pulumi.Input[int]] = None,
                 replica_deletion: Optional[pulumi.Input[str]] = None,
                 replication_port: Optional[pulumi.Input[int]] = None):
        """
        Hyper-V Replica specific policy Input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'HyperVReplica2012'.
        :param pulumi.Input[int] allowed_authentication_type: A value indicating the authentication type.
        :param pulumi.Input[int] application_consistent_snapshot_frequency_in_hours: A value indicating the application consistent frequency.
        :param pulumi.Input[str] compression: A value indicating whether compression has to be enabled.
        :param pulumi.Input[str] initial_replication_method: A value indicating whether IR is online.
        :param pulumi.Input[str] offline_replication_export_path: A value indicating the offline IR export path.
        :param pulumi.Input[str] offline_replication_import_path: A value indicating the offline IR import path.
        :param pulumi.Input[str] online_replication_start_time: A value indicating the online IR start time.
        :param pulumi.Input[int] recovery_points: A value indicating the number of recovery points.
        :param pulumi.Input[str] replica_deletion: A value indicating whether the VM has to be auto deleted.
        :param pulumi.Input[int] replication_port: A value indicating the recovery HTTPS port.
        """
        pulumi.set(__self__, "instance_type", 'HyperVReplica2012')
        if allowed_authentication_type is not None:
            pulumi.set(__self__, "allowed_authentication_type", allowed_authentication_type)
        if application_consistent_snapshot_frequency_in_hours is not None:
            pulumi.set(__self__, "application_consistent_snapshot_frequency_in_hours", application_consistent_snapshot_frequency_in_hours)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if initial_replication_method is not None:
            pulumi.set(__self__, "initial_replication_method", initial_replication_method)
        if offline_replication_export_path is not None:
            pulumi.set(__self__, "offline_replication_export_path", offline_replication_export_path)
        if offline_replication_import_path is not None:
            pulumi.set(__self__, "offline_replication_import_path", offline_replication_import_path)
        if online_replication_start_time is not None:
            pulumi.set(__self__, "online_replication_start_time", online_replication_start_time)
        if recovery_points is not None:
            pulumi.set(__self__, "recovery_points", recovery_points)
        if replica_deletion is not None:
            pulumi.set(__self__, "replica_deletion", replica_deletion)
        if replication_port is not None:
            pulumi.set(__self__, "replication_port", replication_port)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'HyperVReplica2012'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="allowedAuthenticationType")
    def allowed_authentication_type(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the authentication type.
        """
        return pulumi.get(self, "allowed_authentication_type")

    @allowed_authentication_type.setter
    def allowed_authentication_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowed_authentication_type", value)

    @property
    @pulumi.getter(name="applicationConsistentSnapshotFrequencyInHours")
    def application_consistent_snapshot_frequency_in_hours(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the application consistent frequency.
        """
        return pulumi.get(self, "application_consistent_snapshot_frequency_in_hours")

    @application_consistent_snapshot_frequency_in_hours.setter
    def application_consistent_snapshot_frequency_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "application_consistent_snapshot_frequency_in_hours", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether compression has to be enabled.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter(name="initialReplicationMethod")
    def initial_replication_method(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether IR is online.
        """
        return pulumi.get(self, "initial_replication_method")

    @initial_replication_method.setter
    def initial_replication_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initial_replication_method", value)

    @property
    @pulumi.getter(name="offlineReplicationExportPath")
    def offline_replication_export_path(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating the offline IR export path.
        """
        return pulumi.get(self, "offline_replication_export_path")

    @offline_replication_export_path.setter
    def offline_replication_export_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offline_replication_export_path", value)

    @property
    @pulumi.getter(name="offlineReplicationImportPath")
    def offline_replication_import_path(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating the offline IR import path.
        """
        return pulumi.get(self, "offline_replication_import_path")

    @offline_replication_import_path.setter
    def offline_replication_import_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offline_replication_import_path", value)

    @property
    @pulumi.getter(name="onlineReplicationStartTime")
    def online_replication_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating the online IR start time.
        """
        return pulumi.get(self, "online_replication_start_time")

    @online_replication_start_time.setter
    def online_replication_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "online_replication_start_time", value)

    @property
    @pulumi.getter(name="recoveryPoints")
    def recovery_points(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the number of recovery points.
        """
        return pulumi.get(self, "recovery_points")

    @recovery_points.setter
    def recovery_points(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_points", value)

    @property
    @pulumi.getter(name="replicaDeletion")
    def replica_deletion(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether the VM has to be auto deleted.
        """
        return pulumi.get(self, "replica_deletion")

    @replica_deletion.setter
    def replica_deletion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_deletion", value)

    @property
    @pulumi.getter(name="replicationPort")
    def replication_port(self) -> Optional[pulumi.Input[int]]:
        """
        A value indicating the recovery HTTPS port.
        """
        return pulumi.get(self, "replication_port")

    @replication_port.setter
    def replication_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_port", value)


@pulumi.input_type
class IdentityDataArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ResourceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Identity for the resource.
        :param pulumi.Input[Union[str, 'ResourceIdentityType']] type: The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ResourceIdentityType']]:
        """
        The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ResourceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


@pulumi.input_type
class IdentityProviderInputArgs:
    def __init__(__self__, *,
                 aad_authority: pulumi.Input[str],
                 application_id: pulumi.Input[str],
                 audience: pulumi.Input[str],
                 object_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str]):
        """
        Identity provider input.
        :param pulumi.Input[str] aad_authority: The base authority for Azure Active Directory authentication.
        :param pulumi.Input[str] application_id: The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param pulumi.Input[str] audience: The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param pulumi.Input[str] object_id: The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param pulumi.Input[str] tenant_id: The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        pulumi.set(__self__, "aad_authority", aad_authority)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="aadAuthority")
    def aad_authority(self) -> pulumi.Input[str]:
        """
        The base authority for Azure Active Directory authentication.
        """
        return pulumi.get(self, "aad_authority")

    @aad_authority.setter
    def aad_authority(self, value: pulumi.Input[str]):
        pulumi.set(self, "aad_authority", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def audience(self) -> pulumi.Input[str]:
        """
        The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: pulumi.Input[str]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Input[str]:
        """
        The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class ImmutabilitySettingsArgs:
    def __init__(__self__, *,
                 state: Optional[pulumi.Input[Union[str, 'ImmutabilityState']]] = None):
        """
        Immutability Settings of vault
        """
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'ImmutabilityState']]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'ImmutabilityState']]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class InMageAzureV2DiskInputDetailsArgs:
    def __init__(__self__, *,
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[Union[str, 'DiskAccountType']]] = None,
                 log_storage_account_id: Optional[pulumi.Input[str]] = None):
        """
        Disk input details.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM ID.
        :param pulumi.Input[str] disk_id: The DiskId.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The DiskType.
        :param pulumi.Input[str] log_storage_account_id: The LogStorageAccountId.
        """
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if log_storage_account_id is not None:
            pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM ID.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskId.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[Union[str, 'DiskAccountType']]]:
        """
        The DiskType.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[Union[str, 'DiskAccountType']]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The LogStorageAccountId.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_storage_account_id", value)


@pulumi.input_type
class InMageAzureV2EnableProtectionInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[Union[str, 'DiskAccountType']]] = None,
                 disks_to_include: Optional[pulumi.Input[Sequence[pulumi.Input['InMageAzureV2DiskInputDetailsArgs']]]] = None,
                 enable_rdp_on_target_option: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[Union[str, 'LicenseType']]] = None,
                 log_storage_account_id: Optional[pulumi.Input[str]] = None,
                 master_target_id: Optional[pulumi.Input[str]] = None,
                 multi_vm_group_id: Optional[pulumi.Input[str]] = None,
                 multi_vm_group_name: Optional[pulumi.Input[str]] = None,
                 process_server_id: Optional[pulumi.Input[str]] = None,
                 run_as_account_id: Optional[pulumi.Input[str]] = None,
                 seed_managed_disk_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 sql_server_license_type: Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]] = None,
                 storage_account_id: Optional[pulumi.Input[str]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_availability_zone: Optional[pulumi.Input[str]] = None,
                 target_azure_network_id: Optional[pulumi.Input[str]] = None,
                 target_azure_subnet_id: Optional[pulumi.Input[str]] = None,
                 target_azure_v1_resource_group_id: Optional[pulumi.Input[str]] = None,
                 target_azure_v2_resource_group_id: Optional[pulumi.Input[str]] = None,
                 target_azure_vm_name: Optional[pulumi.Input[str]] = None,
                 target_managed_disk_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_nic_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_proximity_placement_group_id: Optional[pulumi.Input[str]] = None,
                 target_vm_size: Optional[pulumi.Input[str]] = None,
                 target_vm_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        VMware Azure specific enable protection input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMageAzureV2'.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM Id.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The DiskType.
        :param pulumi.Input[Sequence[pulumi.Input['InMageAzureV2DiskInputDetailsArgs']]] disks_to_include: The disks to include list.
        :param pulumi.Input[str] enable_rdp_on_target_option: The selected option to enable RDP\\SSH on target VM after failover. String value of SrsDataContract.EnableRDPOnTargetOption enum.
        :param pulumi.Input[Union[str, 'LicenseType']] license_type: License type.
        :param pulumi.Input[str] log_storage_account_id: The storage account to be used for logging during replication.
        :param pulumi.Input[str] master_target_id: The Master target Id.
        :param pulumi.Input[str] multi_vm_group_id: The multi VM group Id.
        :param pulumi.Input[str] multi_vm_group_name: The multi VM group name.
        :param pulumi.Input[str] process_server_id: The Process Server Id.
        :param pulumi.Input[str] run_as_account_id: The CS account Id.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] seed_managed_disk_tags: The tags for the seed managed disks.
        :param pulumi.Input[Union[str, 'SqlServerLicenseType']] sql_server_license_type: The SQL Server license type.
        :param pulumi.Input[str] storage_account_id: The storage account Id.
        :param pulumi.Input[str] target_availability_set_id: The target availability set ARM Id for resource manager deployment.
        :param pulumi.Input[str] target_availability_zone: The target availability zone.
        :param pulumi.Input[str] target_azure_network_id: The selected target Azure network Id.
        :param pulumi.Input[str] target_azure_subnet_id: The selected target Azure subnet Id.
        :param pulumi.Input[str] target_azure_v1_resource_group_id: The Id of the target resource group (for classic deployment) in which the failover VM is to be created.
        :param pulumi.Input[str] target_azure_v2_resource_group_id: The Id of the target resource group (for resource manager deployment) in which the failover VM is to be created.
        :param pulumi.Input[str] target_azure_vm_name: The target azure VM Name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_managed_disk_tags: The tags for the target managed disks.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_nic_tags: The tags for the target NICs.
        :param pulumi.Input[str] target_proximity_placement_group_id: The proximity placement group ARM Id.
        :param pulumi.Input[str] target_vm_size: The target VM size.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_vm_tags: The target VM tags.
        """
        pulumi.set(__self__, "instance_type", 'InMageAzureV2')
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if disks_to_include is not None:
            pulumi.set(__self__, "disks_to_include", disks_to_include)
        if enable_rdp_on_target_option is not None:
            pulumi.set(__self__, "enable_rdp_on_target_option", enable_rdp_on_target_option)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if log_storage_account_id is not None:
            pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)
        if master_target_id is not None:
            pulumi.set(__self__, "master_target_id", master_target_id)
        if multi_vm_group_id is not None:
            pulumi.set(__self__, "multi_vm_group_id", multi_vm_group_id)
        if multi_vm_group_name is not None:
            pulumi.set(__self__, "multi_vm_group_name", multi_vm_group_name)
        if process_server_id is not None:
            pulumi.set(__self__, "process_server_id", process_server_id)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        if seed_managed_disk_tags is not None:
            pulumi.set(__self__, "seed_managed_disk_tags", seed_managed_disk_tags)
        if sql_server_license_type is not None:
            pulumi.set(__self__, "sql_server_license_type", sql_server_license_type)
        if storage_account_id is not None:
            pulumi.set(__self__, "storage_account_id", storage_account_id)
        if target_availability_set_id is not None:
            pulumi.set(__self__, "target_availability_set_id", target_availability_set_id)
        if target_availability_zone is not None:
            pulumi.set(__self__, "target_availability_zone", target_availability_zone)
        if target_azure_network_id is not None:
            pulumi.set(__self__, "target_azure_network_id", target_azure_network_id)
        if target_azure_subnet_id is not None:
            pulumi.set(__self__, "target_azure_subnet_id", target_azure_subnet_id)
        if target_azure_v1_resource_group_id is not None:
            pulumi.set(__self__, "target_azure_v1_resource_group_id", target_azure_v1_resource_group_id)
        if target_azure_v2_resource_group_id is not None:
            pulumi.set(__self__, "target_azure_v2_resource_group_id", target_azure_v2_resource_group_id)
        if target_azure_vm_name is not None:
            pulumi.set(__self__, "target_azure_vm_name", target_azure_vm_name)
        if target_managed_disk_tags is not None:
            pulumi.set(__self__, "target_managed_disk_tags", target_managed_disk_tags)
        if target_nic_tags is not None:
            pulumi.set(__self__, "target_nic_tags", target_nic_tags)
        if target_proximity_placement_group_id is not None:
            pulumi.set(__self__, "target_proximity_placement_group_id", target_proximity_placement_group_id)
        if target_vm_size is not None:
            pulumi.set(__self__, "target_vm_size", target_vm_size)
        if target_vm_tags is not None:
            pulumi.set(__self__, "target_vm_tags", target_vm_tags)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMageAzureV2'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM Id.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[Union[str, 'DiskAccountType']]]:
        """
        The DiskType.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[Union[str, 'DiskAccountType']]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InMageAzureV2DiskInputDetailsArgs']]]]:
        """
        The disks to include list.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InMageAzureV2DiskInputDetailsArgs']]]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="enableRdpOnTargetOption")
    def enable_rdp_on_target_option(self) -> Optional[pulumi.Input[str]]:
        """
        The selected option to enable RDP\\SSH on target VM after failover. String value of SrsDataContract.EnableRDPOnTargetOption enum.
        """
        return pulumi.get(self, "enable_rdp_on_target_option")

    @enable_rdp_on_target_option.setter
    def enable_rdp_on_target_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_rdp_on_target_option", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[Union[str, 'LicenseType']]]:
        """
        License type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[Union[str, 'LicenseType']]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The storage account to be used for logging during replication.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_storage_account_id", value)

    @property
    @pulumi.getter(name="masterTargetId")
    def master_target_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Master target Id.
        """
        return pulumi.get(self, "master_target_id")

    @master_target_id.setter
    def master_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_target_id", value)

    @property
    @pulumi.getter(name="multiVmGroupId")
    def multi_vm_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The multi VM group Id.
        """
        return pulumi.get(self, "multi_vm_group_id")

    @multi_vm_group_id.setter
    def multi_vm_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_vm_group_id", value)

    @property
    @pulumi.getter(name="multiVmGroupName")
    def multi_vm_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The multi VM group name.
        """
        return pulumi.get(self, "multi_vm_group_name")

    @multi_vm_group_name.setter
    def multi_vm_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_vm_group_name", value)

    @property
    @pulumi.getter(name="processServerId")
    def process_server_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Process Server Id.
        """
        return pulumi.get(self, "process_server_id")

    @process_server_id.setter
    def process_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_server_id", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The CS account Id.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_account_id", value)

    @property
    @pulumi.getter(name="seedManagedDiskTags")
    def seed_managed_disk_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the seed managed disks.
        """
        return pulumi.get(self, "seed_managed_disk_tags")

    @seed_managed_disk_tags.setter
    def seed_managed_disk_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "seed_managed_disk_tags", value)

    @property
    @pulumi.getter(name="sqlServerLicenseType")
    def sql_server_license_type(self) -> Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]]:
        """
        The SQL Server license type.
        """
        return pulumi.get(self, "sql_server_license_type")

    @sql_server_license_type.setter
    def sql_server_license_type(self, value: Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]]):
        pulumi.set(self, "sql_server_license_type", value)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The storage account Id.
        """
        return pulumi.get(self, "storage_account_id")

    @storage_account_id.setter
    def storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_id", value)

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability set ARM Id for resource manager deployment.
        """
        return pulumi.get(self, "target_availability_set_id")

    @target_availability_set_id.setter
    def target_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_set_id", value)

    @property
    @pulumi.getter(name="targetAvailabilityZone")
    def target_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability zone.
        """
        return pulumi.get(self, "target_availability_zone")

    @target_availability_zone.setter
    def target_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_zone", value)

    @property
    @pulumi.getter(name="targetAzureNetworkId")
    def target_azure_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected target Azure network Id.
        """
        return pulumi.get(self, "target_azure_network_id")

    @target_azure_network_id.setter
    def target_azure_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_network_id", value)

    @property
    @pulumi.getter(name="targetAzureSubnetId")
    def target_azure_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected target Azure subnet Id.
        """
        return pulumi.get(self, "target_azure_subnet_id")

    @target_azure_subnet_id.setter
    def target_azure_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_subnet_id", value)

    @property
    @pulumi.getter(name="targetAzureV1ResourceGroupId")
    def target_azure_v1_resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of the target resource group (for classic deployment) in which the failover VM is to be created.
        """
        return pulumi.get(self, "target_azure_v1_resource_group_id")

    @target_azure_v1_resource_group_id.setter
    def target_azure_v1_resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_v1_resource_group_id", value)

    @property
    @pulumi.getter(name="targetAzureV2ResourceGroupId")
    def target_azure_v2_resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of the target resource group (for resource manager deployment) in which the failover VM is to be created.
        """
        return pulumi.get(self, "target_azure_v2_resource_group_id")

    @target_azure_v2_resource_group_id.setter
    def target_azure_v2_resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_v2_resource_group_id", value)

    @property
    @pulumi.getter(name="targetAzureVmName")
    def target_azure_vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target azure VM Name.
        """
        return pulumi.get(self, "target_azure_vm_name")

    @target_azure_vm_name.setter
    def target_azure_vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_azure_vm_name", value)

    @property
    @pulumi.getter(name="targetManagedDiskTags")
    def target_managed_disk_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the target managed disks.
        """
        return pulumi.get(self, "target_managed_disk_tags")

    @target_managed_disk_tags.setter
    def target_managed_disk_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_managed_disk_tags", value)

    @property
    @pulumi.getter(name="targetNicTags")
    def target_nic_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the target NICs.
        """
        return pulumi.get(self, "target_nic_tags")

    @target_nic_tags.setter
    def target_nic_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_nic_tags", value)

    @property
    @pulumi.getter(name="targetProximityPlacementGroupId")
    def target_proximity_placement_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The proximity placement group ARM Id.
        """
        return pulumi.get(self, "target_proximity_placement_group_id")

    @target_proximity_placement_group_id.setter
    def target_proximity_placement_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_proximity_placement_group_id", value)

    @property
    @pulumi.getter(name="targetVmSize")
    def target_vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        The target VM size.
        """
        return pulumi.get(self, "target_vm_size")

    @target_vm_size.setter
    def target_vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_size", value)

    @property
    @pulumi.getter(name="targetVmTags")
    def target_vm_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The target VM tags.
        """
        return pulumi.get(self, "target_vm_tags")

    @target_vm_tags.setter
    def target_vm_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_vm_tags", value)


@pulumi.input_type
class InMageAzureV2PolicyInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 multi_vm_sync_status: pulumi.Input[Union[str, 'SetMultiVmSyncStatus']],
                 app_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 crash_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 recovery_point_history: Optional[pulumi.Input[int]] = None,
                 recovery_point_threshold_in_minutes: Optional[pulumi.Input[int]] = None):
        """
        VMWare Azure specific policy Input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMageAzureV2'.
        :param pulumi.Input[Union[str, 'SetMultiVmSyncStatus']] multi_vm_sync_status: A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: The app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: The crash consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] recovery_point_history: The duration in minutes until which the recovery points need to be stored.
        :param pulumi.Input[int] recovery_point_threshold_in_minutes: The recovery point threshold in minutes.
        """
        pulumi.set(__self__, "instance_type", 'InMageAzureV2')
        pulumi.set(__self__, "multi_vm_sync_status", multi_vm_sync_status)
        if app_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        if crash_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        if recovery_point_history is not None:
            pulumi.set(__self__, "recovery_point_history", recovery_point_history)
        if recovery_point_threshold_in_minutes is not None:
            pulumi.set(__self__, "recovery_point_threshold_in_minutes", recovery_point_threshold_in_minutes)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMageAzureV2'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="multiVmSyncStatus")
    def multi_vm_sync_status(self) -> pulumi.Input[Union[str, 'SetMultiVmSyncStatus']]:
        """
        A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        """
        return pulumi.get(self, "multi_vm_sync_status")

    @multi_vm_sync_status.setter
    def multi_vm_sync_status(self, value: pulumi.Input[Union[str, 'SetMultiVmSyncStatus']]):
        pulumi.set(self, "multi_vm_sync_status", value)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="recoveryPointHistory")
    def recovery_point_history(self) -> Optional[pulumi.Input[int]]:
        """
        The duration in minutes until which the recovery points need to be stored.
        """
        return pulumi.get(self, "recovery_point_history")

    @recovery_point_history.setter
    def recovery_point_history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_history", value)

    @property
    @pulumi.getter(name="recoveryPointThresholdInMinutes")
    def recovery_point_threshold_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The recovery point threshold in minutes.
        """
        return pulumi.get(self, "recovery_point_threshold_in_minutes")

    @recovery_point_threshold_in_minutes.setter
    def recovery_point_threshold_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_threshold_in_minutes", value)


@pulumi.input_type
class InMageDiskExclusionInputArgs:
    def __init__(__self__, *,
                 disk_signature_options: Optional[pulumi.Input[Sequence[pulumi.Input['InMageDiskSignatureExclusionOptionsArgs']]]] = None,
                 volume_options: Optional[pulumi.Input[Sequence[pulumi.Input['InMageVolumeExclusionOptionsArgs']]]] = None):
        """
        DiskExclusionInput when doing enable protection of virtual machine in InMage provider.
        :param pulumi.Input[Sequence[pulumi.Input['InMageDiskSignatureExclusionOptionsArgs']]] disk_signature_options: The guest disk signature based option for disk exclusion.
        :param pulumi.Input[Sequence[pulumi.Input['InMageVolumeExclusionOptionsArgs']]] volume_options: The volume label based option for disk exclusion.
        """
        if disk_signature_options is not None:
            pulumi.set(__self__, "disk_signature_options", disk_signature_options)
        if volume_options is not None:
            pulumi.set(__self__, "volume_options", volume_options)

    @property
    @pulumi.getter(name="diskSignatureOptions")
    def disk_signature_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InMageDiskSignatureExclusionOptionsArgs']]]]:
        """
        The guest disk signature based option for disk exclusion.
        """
        return pulumi.get(self, "disk_signature_options")

    @disk_signature_options.setter
    def disk_signature_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InMageDiskSignatureExclusionOptionsArgs']]]]):
        pulumi.set(self, "disk_signature_options", value)

    @property
    @pulumi.getter(name="volumeOptions")
    def volume_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InMageVolumeExclusionOptionsArgs']]]]:
        """
        The volume label based option for disk exclusion.
        """
        return pulumi.get(self, "volume_options")

    @volume_options.setter
    def volume_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InMageVolumeExclusionOptionsArgs']]]]):
        pulumi.set(self, "volume_options", value)


@pulumi.input_type
class InMageDiskSignatureExclusionOptionsArgs:
    def __init__(__self__, *,
                 disk_signature: Optional[pulumi.Input[str]] = None):
        """
        Guest disk signature based disk exclusion option when doing enable protection of virtual machine in InMage provider.
        :param pulumi.Input[str] disk_signature: The guest signature of disk to be excluded from replication.
        """
        if disk_signature is not None:
            pulumi.set(__self__, "disk_signature", disk_signature)

    @property
    @pulumi.getter(name="diskSignature")
    def disk_signature(self) -> Optional[pulumi.Input[str]]:
        """
        The guest signature of disk to be excluded from replication.
        """
        return pulumi.get(self, "disk_signature")

    @disk_signature.setter
    def disk_signature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_signature", value)


@pulumi.input_type
class InMageEnableProtectionInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 master_target_id: pulumi.Input[str],
                 multi_vm_group_id: pulumi.Input[str],
                 multi_vm_group_name: pulumi.Input[str],
                 process_server_id: pulumi.Input[str],
                 retention_drive: pulumi.Input[str],
                 datastore_name: Optional[pulumi.Input[str]] = None,
                 disk_exclusion_input: Optional[pulumi.Input['InMageDiskExclusionInputArgs']] = None,
                 disks_to_include: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 run_as_account_id: Optional[pulumi.Input[str]] = None,
                 vm_friendly_name: Optional[pulumi.Input[str]] = None):
        """
        VMware Azure specific enable protection input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMage'.
        :param pulumi.Input[str] master_target_id: The Master Target Id.
        :param pulumi.Input[str] multi_vm_group_id: The multi VM group Id.
        :param pulumi.Input[str] multi_vm_group_name: The multi VM group name.
        :param pulumi.Input[str] process_server_id: The Process Server Id.
        :param pulumi.Input[str] retention_drive: The retention drive to use on the MT.
        :param pulumi.Input[str] datastore_name: The target datastore name.
        :param pulumi.Input['InMageDiskExclusionInputArgs'] disk_exclusion_input: The enable disk exclusion input.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disks_to_include: The disks to include list.
        :param pulumi.Input[str] run_as_account_id: The CS account Id.
        :param pulumi.Input[str] vm_friendly_name: The VM Name.
        """
        pulumi.set(__self__, "instance_type", 'InMage')
        pulumi.set(__self__, "master_target_id", master_target_id)
        pulumi.set(__self__, "multi_vm_group_id", multi_vm_group_id)
        pulumi.set(__self__, "multi_vm_group_name", multi_vm_group_name)
        pulumi.set(__self__, "process_server_id", process_server_id)
        pulumi.set(__self__, "retention_drive", retention_drive)
        if datastore_name is not None:
            pulumi.set(__self__, "datastore_name", datastore_name)
        if disk_exclusion_input is not None:
            pulumi.set(__self__, "disk_exclusion_input", disk_exclusion_input)
        if disks_to_include is not None:
            pulumi.set(__self__, "disks_to_include", disks_to_include)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        if vm_friendly_name is not None:
            pulumi.set(__self__, "vm_friendly_name", vm_friendly_name)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMage'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="masterTargetId")
    def master_target_id(self) -> pulumi.Input[str]:
        """
        The Master Target Id.
        """
        return pulumi.get(self, "master_target_id")

    @master_target_id.setter
    def master_target_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_target_id", value)

    @property
    @pulumi.getter(name="multiVmGroupId")
    def multi_vm_group_id(self) -> pulumi.Input[str]:
        """
        The multi VM group Id.
        """
        return pulumi.get(self, "multi_vm_group_id")

    @multi_vm_group_id.setter
    def multi_vm_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "multi_vm_group_id", value)

    @property
    @pulumi.getter(name="multiVmGroupName")
    def multi_vm_group_name(self) -> pulumi.Input[str]:
        """
        The multi VM group name.
        """
        return pulumi.get(self, "multi_vm_group_name")

    @multi_vm_group_name.setter
    def multi_vm_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "multi_vm_group_name", value)

    @property
    @pulumi.getter(name="processServerId")
    def process_server_id(self) -> pulumi.Input[str]:
        """
        The Process Server Id.
        """
        return pulumi.get(self, "process_server_id")

    @process_server_id.setter
    def process_server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "process_server_id", value)

    @property
    @pulumi.getter(name="retentionDrive")
    def retention_drive(self) -> pulumi.Input[str]:
        """
        The retention drive to use on the MT.
        """
        return pulumi.get(self, "retention_drive")

    @retention_drive.setter
    def retention_drive(self, value: pulumi.Input[str]):
        pulumi.set(self, "retention_drive", value)

    @property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target datastore name.
        """
        return pulumi.get(self, "datastore_name")

    @datastore_name.setter
    def datastore_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datastore_name", value)

    @property
    @pulumi.getter(name="diskExclusionInput")
    def disk_exclusion_input(self) -> Optional[pulumi.Input['InMageDiskExclusionInputArgs']]:
        """
        The enable disk exclusion input.
        """
        return pulumi.get(self, "disk_exclusion_input")

    @disk_exclusion_input.setter
    def disk_exclusion_input(self, value: Optional[pulumi.Input['InMageDiskExclusionInputArgs']]):
        pulumi.set(self, "disk_exclusion_input", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The disks to include list.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The CS account Id.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_account_id", value)

    @property
    @pulumi.getter(name="vmFriendlyName")
    def vm_friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        The VM Name.
        """
        return pulumi.get(self, "vm_friendly_name")

    @vm_friendly_name.setter
    def vm_friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_friendly_name", value)


@pulumi.input_type
class InMagePolicyInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 multi_vm_sync_status: pulumi.Input[Union[str, 'SetMultiVmSyncStatus']],
                 app_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 recovery_point_history: Optional[pulumi.Input[int]] = None,
                 recovery_point_threshold_in_minutes: Optional[pulumi.Input[int]] = None):
        """
        VMWare Azure specific protection profile Input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMage'.
        :param pulumi.Input[Union[str, 'SetMultiVmSyncStatus']] multi_vm_sync_status: A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: The app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] recovery_point_history: The duration in minutes until which the recovery points need to be stored.
        :param pulumi.Input[int] recovery_point_threshold_in_minutes: The recovery point threshold in minutes.
        """
        pulumi.set(__self__, "instance_type", 'InMage')
        pulumi.set(__self__, "multi_vm_sync_status", multi_vm_sync_status)
        if app_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        if recovery_point_history is not None:
            pulumi.set(__self__, "recovery_point_history", recovery_point_history)
        if recovery_point_threshold_in_minutes is not None:
            pulumi.set(__self__, "recovery_point_threshold_in_minutes", recovery_point_threshold_in_minutes)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMage'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="multiVmSyncStatus")
    def multi_vm_sync_status(self) -> pulumi.Input[Union[str, 'SetMultiVmSyncStatus']]:
        """
        A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        """
        return pulumi.get(self, "multi_vm_sync_status")

    @multi_vm_sync_status.setter
    def multi_vm_sync_status(self, value: pulumi.Input[Union[str, 'SetMultiVmSyncStatus']]):
        pulumi.set(self, "multi_vm_sync_status", value)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="recoveryPointHistory")
    def recovery_point_history(self) -> Optional[pulumi.Input[int]]:
        """
        The duration in minutes until which the recovery points need to be stored.
        """
        return pulumi.get(self, "recovery_point_history")

    @recovery_point_history.setter
    def recovery_point_history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_history", value)

    @property
    @pulumi.getter(name="recoveryPointThresholdInMinutes")
    def recovery_point_threshold_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The recovery point threshold in minutes.
        """
        return pulumi.get(self, "recovery_point_threshold_in_minutes")

    @recovery_point_threshold_in_minutes.setter
    def recovery_point_threshold_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_threshold_in_minutes", value)


@pulumi.input_type
class InMageRcmDiskInputArgs:
    def __init__(__self__, *,
                 disk_id: pulumi.Input[str],
                 disk_type: pulumi.Input[Union[str, 'DiskAccountType']],
                 log_storage_account_id: pulumi.Input[str],
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None):
        """
        InMageRcm disk input.
        :param pulumi.Input[str] disk_id: The disk Id.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The disk type.
        :param pulumi.Input[str] log_storage_account_id: The log storage account ARM Id.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM Id.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        The disk Id.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Input[Union[str, 'DiskAccountType']]:
        """
        The disk type.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: pulumi.Input[Union[str, 'DiskAccountType']]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> pulumi.Input[str]:
        """
        The log storage account ARM Id.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_storage_account_id", value)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM Id.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)


@pulumi.input_type
class InMageRcmDisksDefaultInputArgs:
    def __init__(__self__, *,
                 disk_type: pulumi.Input[Union[str, 'DiskAccountType']],
                 log_storage_account_id: pulumi.Input[str],
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None):
        """
        InMageRcm disk input.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The disk type.
        :param pulumi.Input[str] log_storage_account_id: The log storage account ARM Id.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM Id.
        """
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Input[Union[str, 'DiskAccountType']]:
        """
        The disk type.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: pulumi.Input[Union[str, 'DiskAccountType']]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> pulumi.Input[str]:
        """
        The log storage account ARM Id.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_storage_account_id", value)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM Id.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)


@pulumi.input_type
class InMageRcmEnableProtectionInputArgs:
    def __init__(__self__, *,
                 fabric_discovery_machine_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 process_server_id: pulumi.Input[str],
                 target_resource_group_id: pulumi.Input[str],
                 disks_default: Optional[pulumi.Input['InMageRcmDisksDefaultInputArgs']] = None,
                 disks_to_include: Optional[pulumi.Input[Sequence[pulumi.Input['InMageRcmDiskInputArgs']]]] = None,
                 license_type: Optional[pulumi.Input[Union[str, 'LicenseType']]] = None,
                 multi_vm_group_name: Optional[pulumi.Input[str]] = None,
                 run_as_account_id: Optional[pulumi.Input[str]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_availability_zone: Optional[pulumi.Input[str]] = None,
                 target_boot_diagnostics_storage_account_id: Optional[pulumi.Input[str]] = None,
                 target_network_id: Optional[pulumi.Input[str]] = None,
                 target_proximity_placement_group_id: Optional[pulumi.Input[str]] = None,
                 target_subnet_name: Optional[pulumi.Input[str]] = None,
                 target_vm_name: Optional[pulumi.Input[str]] = None,
                 target_vm_size: Optional[pulumi.Input[str]] = None,
                 test_network_id: Optional[pulumi.Input[str]] = None,
                 test_subnet_name: Optional[pulumi.Input[str]] = None):
        """
        InMageRcm specific enable protection input.
        :param pulumi.Input[str] fabric_discovery_machine_id: The ARM Id of discovered machine.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMageRcm'.
        :param pulumi.Input[str] process_server_id: The process server Id.
        :param pulumi.Input[str] target_resource_group_id: The target resource group ARM Id.
        :param pulumi.Input['InMageRcmDisksDefaultInputArgs'] disks_default: The default disk input.
        :param pulumi.Input[Sequence[pulumi.Input['InMageRcmDiskInputArgs']]] disks_to_include: The disks to include list.
        :param pulumi.Input[Union[str, 'LicenseType']] license_type: The license type.
        :param pulumi.Input[str] multi_vm_group_name: The multi VM group name.
        :param pulumi.Input[str] run_as_account_id: The run-as account Id.
        :param pulumi.Input[str] target_availability_set_id: The target availability set ARM Id.
        :param pulumi.Input[str] target_availability_zone: The target availability zone.
        :param pulumi.Input[str] target_boot_diagnostics_storage_account_id: The target boot diagnostics storage account ARM Id.
        :param pulumi.Input[str] target_network_id: The selected target network ARM Id.
        :param pulumi.Input[str] target_proximity_placement_group_id: The target proximity placement group Id.
        :param pulumi.Input[str] target_subnet_name: The selected target subnet name.
        :param pulumi.Input[str] target_vm_name: The target VM name.
        :param pulumi.Input[str] target_vm_size: The target VM size.
        :param pulumi.Input[str] test_network_id: The selected test network ARM Id.
        :param pulumi.Input[str] test_subnet_name: The selected test subnet name.
        """
        pulumi.set(__self__, "fabric_discovery_machine_id", fabric_discovery_machine_id)
        pulumi.set(__self__, "instance_type", 'InMageRcm')
        pulumi.set(__self__, "process_server_id", process_server_id)
        pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        if disks_default is not None:
            pulumi.set(__self__, "disks_default", disks_default)
        if disks_to_include is not None:
            pulumi.set(__self__, "disks_to_include", disks_to_include)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if multi_vm_group_name is not None:
            pulumi.set(__self__, "multi_vm_group_name", multi_vm_group_name)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        if target_availability_set_id is not None:
            pulumi.set(__self__, "target_availability_set_id", target_availability_set_id)
        if target_availability_zone is not None:
            pulumi.set(__self__, "target_availability_zone", target_availability_zone)
        if target_boot_diagnostics_storage_account_id is not None:
            pulumi.set(__self__, "target_boot_diagnostics_storage_account_id", target_boot_diagnostics_storage_account_id)
        if target_network_id is not None:
            pulumi.set(__self__, "target_network_id", target_network_id)
        if target_proximity_placement_group_id is not None:
            pulumi.set(__self__, "target_proximity_placement_group_id", target_proximity_placement_group_id)
        if target_subnet_name is not None:
            pulumi.set(__self__, "target_subnet_name", target_subnet_name)
        if target_vm_name is not None:
            pulumi.set(__self__, "target_vm_name", target_vm_name)
        if target_vm_size is not None:
            pulumi.set(__self__, "target_vm_size", target_vm_size)
        if test_network_id is not None:
            pulumi.set(__self__, "test_network_id", test_network_id)
        if test_subnet_name is not None:
            pulumi.set(__self__, "test_subnet_name", test_subnet_name)

    @property
    @pulumi.getter(name="fabricDiscoveryMachineId")
    def fabric_discovery_machine_id(self) -> pulumi.Input[str]:
        """
        The ARM Id of discovered machine.
        """
        return pulumi.get(self, "fabric_discovery_machine_id")

    @fabric_discovery_machine_id.setter
    def fabric_discovery_machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "fabric_discovery_machine_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMageRcm'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="processServerId")
    def process_server_id(self) -> pulumi.Input[str]:
        """
        The process server Id.
        """
        return pulumi.get(self, "process_server_id")

    @process_server_id.setter
    def process_server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "process_server_id", value)

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> pulumi.Input[str]:
        """
        The target resource group ARM Id.
        """
        return pulumi.get(self, "target_resource_group_id")

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_group_id", value)

    @property
    @pulumi.getter(name="disksDefault")
    def disks_default(self) -> Optional[pulumi.Input['InMageRcmDisksDefaultInputArgs']]:
        """
        The default disk input.
        """
        return pulumi.get(self, "disks_default")

    @disks_default.setter
    def disks_default(self, value: Optional[pulumi.Input['InMageRcmDisksDefaultInputArgs']]):
        pulumi.set(self, "disks_default", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InMageRcmDiskInputArgs']]]]:
        """
        The disks to include list.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InMageRcmDiskInputArgs']]]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[Union[str, 'LicenseType']]]:
        """
        The license type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[Union[str, 'LicenseType']]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="multiVmGroupName")
    def multi_vm_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The multi VM group name.
        """
        return pulumi.get(self, "multi_vm_group_name")

    @multi_vm_group_name.setter
    def multi_vm_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_vm_group_name", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The run-as account Id.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_account_id", value)

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability set ARM Id.
        """
        return pulumi.get(self, "target_availability_set_id")

    @target_availability_set_id.setter
    def target_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_set_id", value)

    @property
    @pulumi.getter(name="targetAvailabilityZone")
    def target_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability zone.
        """
        return pulumi.get(self, "target_availability_zone")

    @target_availability_zone.setter
    def target_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_zone", value)

    @property
    @pulumi.getter(name="targetBootDiagnosticsStorageAccountId")
    def target_boot_diagnostics_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target boot diagnostics storage account ARM Id.
        """
        return pulumi.get(self, "target_boot_diagnostics_storage_account_id")

    @target_boot_diagnostics_storage_account_id.setter
    def target_boot_diagnostics_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_boot_diagnostics_storage_account_id", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected target network ARM Id.
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="targetProximityPlacementGroupId")
    def target_proximity_placement_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target proximity placement group Id.
        """
        return pulumi.get(self, "target_proximity_placement_group_id")

    @target_proximity_placement_group_id.setter
    def target_proximity_placement_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_proximity_placement_group_id", value)

    @property
    @pulumi.getter(name="targetSubnetName")
    def target_subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        The selected target subnet name.
        """
        return pulumi.get(self, "target_subnet_name")

    @target_subnet_name.setter
    def target_subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_subnet_name", value)

    @property
    @pulumi.getter(name="targetVmName")
    def target_vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target VM name.
        """
        return pulumi.get(self, "target_vm_name")

    @target_vm_name.setter
    def target_vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_name", value)

    @property
    @pulumi.getter(name="targetVmSize")
    def target_vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        The target VM size.
        """
        return pulumi.get(self, "target_vm_size")

    @target_vm_size.setter
    def target_vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_size", value)

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected test network ARM Id.
        """
        return pulumi.get(self, "test_network_id")

    @test_network_id.setter
    def test_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_network_id", value)

    @property
    @pulumi.getter(name="testSubnetName")
    def test_subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        The selected test subnet name.
        """
        return pulumi.get(self, "test_subnet_name")

    @test_subnet_name.setter
    def test_subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_subnet_name", value)


@pulumi.input_type
class InMageRcmFabricCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 physical_site_id: pulumi.Input[str],
                 source_agent_identity: pulumi.Input['IdentityProviderInputArgs'],
                 vmware_site_id: pulumi.Input[str]):
        """
        InMageRcm fabric provider specific settings.
        :param pulumi.Input[str] instance_type: Gets the class type.
               Expected value is 'InMageRcm'.
        :param pulumi.Input[str] physical_site_id: The ARM Id of the physical site.
        :param pulumi.Input['IdentityProviderInputArgs'] source_agent_identity: The identity provider input for source agent authentication.
        :param pulumi.Input[str] vmware_site_id: The ARM Id of the VMware site.
        """
        pulumi.set(__self__, "instance_type", 'InMageRcm')
        pulumi.set(__self__, "physical_site_id", physical_site_id)
        pulumi.set(__self__, "source_agent_identity", source_agent_identity)
        pulumi.set(__self__, "vmware_site_id", vmware_site_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the class type.
        Expected value is 'InMageRcm'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="physicalSiteId")
    def physical_site_id(self) -> pulumi.Input[str]:
        """
        The ARM Id of the physical site.
        """
        return pulumi.get(self, "physical_site_id")

    @physical_site_id.setter
    def physical_site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "physical_site_id", value)

    @property
    @pulumi.getter(name="sourceAgentIdentity")
    def source_agent_identity(self) -> pulumi.Input['IdentityProviderInputArgs']:
        """
        The identity provider input for source agent authentication.
        """
        return pulumi.get(self, "source_agent_identity")

    @source_agent_identity.setter
    def source_agent_identity(self, value: pulumi.Input['IdentityProviderInputArgs']):
        pulumi.set(self, "source_agent_identity", value)

    @property
    @pulumi.getter(name="vmwareSiteId")
    def vmware_site_id(self) -> pulumi.Input[str]:
        """
        The ARM Id of the VMware site.
        """
        return pulumi.get(self, "vmware_site_id")

    @vmware_site_id.setter
    def vmware_site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vmware_site_id", value)


@pulumi.input_type
class InMageRcmFailbackPolicyCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 app_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 crash_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None):
        """
        InMageRcmFailback policy creation input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMageRcmFailback'.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: The app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: The crash consistent snapshot frequency (in minutes).
        """
        pulumi.set(__self__, "instance_type", 'InMageRcmFailback')
        if app_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        if crash_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMageRcmFailback'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)


@pulumi.input_type
class InMageRcmPolicyCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 app_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 crash_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 enable_multi_vm_sync: Optional[pulumi.Input[str]] = None,
                 recovery_point_history_in_minutes: Optional[pulumi.Input[int]] = None):
        """
        InMageRcm policy creation input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'InMageRcm'.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: The app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: The crash consistent snapshot frequency (in minutes).
        :param pulumi.Input[str] enable_multi_vm_sync: A value indicating whether multi-VM sync has to be enabled.
        :param pulumi.Input[int] recovery_point_history_in_minutes: The duration in minutes until which the recovery points need to be stored.
        """
        pulumi.set(__self__, "instance_type", 'InMageRcm')
        if app_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        if crash_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        if enable_multi_vm_sync is not None:
            pulumi.set(__self__, "enable_multi_vm_sync", enable_multi_vm_sync)
        if recovery_point_history_in_minutes is not None:
            pulumi.set(__self__, "recovery_point_history_in_minutes", recovery_point_history_in_minutes)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'InMageRcm'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="enableMultiVmSync")
    def enable_multi_vm_sync(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether multi-VM sync has to be enabled.
        """
        return pulumi.get(self, "enable_multi_vm_sync")

    @enable_multi_vm_sync.setter
    def enable_multi_vm_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_multi_vm_sync", value)

    @property
    @pulumi.getter(name="recoveryPointHistoryInMinutes")
    def recovery_point_history_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The duration in minutes until which the recovery points need to be stored.
        """
        return pulumi.get(self, "recovery_point_history_in_minutes")

    @recovery_point_history_in_minutes.setter
    def recovery_point_history_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_history_in_minutes", value)


@pulumi.input_type
class InMageVolumeExclusionOptionsArgs:
    def __init__(__self__, *,
                 only_exclude_if_single_volume: Optional[pulumi.Input[str]] = None,
                 volume_label: Optional[pulumi.Input[str]] = None):
        """
        Guest disk signature based disk exclusion option when doing enable protection of virtual machine in InMage provider.
        :param pulumi.Input[str] only_exclude_if_single_volume: The value indicating whether to exclude multi volume disk or not. If a disk has multiple volumes and one of the volume has label matching with VolumeLabel this disk will be excluded from replication if OnlyExcludeIfSingleVolume is false.
        :param pulumi.Input[str] volume_label: The volume label. The disk having any volume with this label will be excluded from replication.
        """
        if only_exclude_if_single_volume is not None:
            pulumi.set(__self__, "only_exclude_if_single_volume", only_exclude_if_single_volume)
        if volume_label is not None:
            pulumi.set(__self__, "volume_label", volume_label)

    @property
    @pulumi.getter(name="onlyExcludeIfSingleVolume")
    def only_exclude_if_single_volume(self) -> Optional[pulumi.Input[str]]:
        """
        The value indicating whether to exclude multi volume disk or not. If a disk has multiple volumes and one of the volume has label matching with VolumeLabel this disk will be excluded from replication if OnlyExcludeIfSingleVolume is false.
        """
        return pulumi.get(self, "only_exclude_if_single_volume")

    @only_exclude_if_single_volume.setter
    def only_exclude_if_single_volume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "only_exclude_if_single_volume", value)

    @property
    @pulumi.getter(name="volumeLabel")
    def volume_label(self) -> Optional[pulumi.Input[str]]:
        """
        The volume label. The disk having any volume with this label will be excluded from replication.
        """
        return pulumi.get(self, "volume_label")

    @volume_label.setter
    def volume_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_label", value)


@pulumi.input_type
class KeyEncryptionKeyInfoArgs:
    def __init__(__self__, *,
                 key_identifier: Optional[pulumi.Input[str]] = None,
                 key_vault_resource_arm_id: Optional[pulumi.Input[str]] = None):
        """
        Key Encryption Key (KEK) information.
        :param pulumi.Input[str] key_identifier: The key URL / identifier.
        :param pulumi.Input[str] key_vault_resource_arm_id: The KeyVault resource ARM Id for key.
        """
        if key_identifier is not None:
            pulumi.set(__self__, "key_identifier", key_identifier)
        if key_vault_resource_arm_id is not None:
            pulumi.set(__self__, "key_vault_resource_arm_id", key_vault_resource_arm_id)

    @property
    @pulumi.getter(name="keyIdentifier")
    def key_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The key URL / identifier.
        """
        return pulumi.get(self, "key_identifier")

    @key_identifier.setter
    def key_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_identifier", value)

    @property
    @pulumi.getter(name="keyVaultResourceArmId")
    def key_vault_resource_arm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The KeyVault resource ARM Id for key.
        """
        return pulumi.get(self, "key_vault_resource_arm_id")

    @key_vault_resource_arm_id.setter
    def key_vault_resource_arm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_resource_arm_id", value)


@pulumi.input_type
class MonitoringSettingsArgs:
    def __init__(__self__, *,
                 azure_monitor_alert_settings: Optional[pulumi.Input['AzureMonitorAlertSettingsArgs']] = None,
                 classic_alert_settings: Optional[pulumi.Input['ClassicAlertSettingsArgs']] = None):
        """
        Monitoring Settings of the vault
        :param pulumi.Input['AzureMonitorAlertSettingsArgs'] azure_monitor_alert_settings: Settings for Azure Monitor based alerts
        :param pulumi.Input['ClassicAlertSettingsArgs'] classic_alert_settings: Settings for classic alerts
        """
        if azure_monitor_alert_settings is not None:
            pulumi.set(__self__, "azure_monitor_alert_settings", azure_monitor_alert_settings)
        if classic_alert_settings is not None:
            pulumi.set(__self__, "classic_alert_settings", classic_alert_settings)

    @property
    @pulumi.getter(name="azureMonitorAlertSettings")
    def azure_monitor_alert_settings(self) -> Optional[pulumi.Input['AzureMonitorAlertSettingsArgs']]:
        """
        Settings for Azure Monitor based alerts
        """
        return pulumi.get(self, "azure_monitor_alert_settings")

    @azure_monitor_alert_settings.setter
    def azure_monitor_alert_settings(self, value: Optional[pulumi.Input['AzureMonitorAlertSettingsArgs']]):
        pulumi.set(self, "azure_monitor_alert_settings", value)

    @property
    @pulumi.getter(name="classicAlertSettings")
    def classic_alert_settings(self) -> Optional[pulumi.Input['ClassicAlertSettingsArgs']]:
        """
        Settings for classic alerts
        """
        return pulumi.get(self, "classic_alert_settings")

    @classic_alert_settings.setter
    def classic_alert_settings(self, value: Optional[pulumi.Input['ClassicAlertSettingsArgs']]):
        pulumi.set(self, "classic_alert_settings", value)


@pulumi.input_type
class RecoveryPlanA2AInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 primary_extended_location: Optional[pulumi.Input['ExtendedLocationArgs']] = None,
                 primary_zone: Optional[pulumi.Input[str]] = None,
                 recovery_extended_location: Optional[pulumi.Input['ExtendedLocationArgs']] = None,
                 recovery_zone: Optional[pulumi.Input[str]] = None):
        """
        Recovery plan A2A input.
        :param pulumi.Input[str] instance_type: Gets the Instance type.
               Expected value is 'A2A'.
        :param pulumi.Input['ExtendedLocationArgs'] primary_extended_location: The primary extended location.
        :param pulumi.Input[str] primary_zone: The primary zone.
        :param pulumi.Input['ExtendedLocationArgs'] recovery_extended_location: The recovery extended location.
        :param pulumi.Input[str] recovery_zone: The recovery zone.
        """
        pulumi.set(__self__, "instance_type", 'A2A')
        if primary_extended_location is not None:
            pulumi.set(__self__, "primary_extended_location", primary_extended_location)
        if primary_zone is not None:
            pulumi.set(__self__, "primary_zone", primary_zone)
        if recovery_extended_location is not None:
            pulumi.set(__self__, "recovery_extended_location", recovery_extended_location)
        if recovery_zone is not None:
            pulumi.set(__self__, "recovery_zone", recovery_zone)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the Instance type.
        Expected value is 'A2A'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="primaryExtendedLocation")
    def primary_extended_location(self) -> Optional[pulumi.Input['ExtendedLocationArgs']]:
        """
        The primary extended location.
        """
        return pulumi.get(self, "primary_extended_location")

    @primary_extended_location.setter
    def primary_extended_location(self, value: Optional[pulumi.Input['ExtendedLocationArgs']]):
        pulumi.set(self, "primary_extended_location", value)

    @property
    @pulumi.getter(name="primaryZone")
    def primary_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The primary zone.
        """
        return pulumi.get(self, "primary_zone")

    @primary_zone.setter
    def primary_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_zone", value)

    @property
    @pulumi.getter(name="recoveryExtendedLocation")
    def recovery_extended_location(self) -> Optional[pulumi.Input['ExtendedLocationArgs']]:
        """
        The recovery extended location.
        """
        return pulumi.get(self, "recovery_extended_location")

    @recovery_extended_location.setter
    def recovery_extended_location(self, value: Optional[pulumi.Input['ExtendedLocationArgs']]):
        pulumi.set(self, "recovery_extended_location", value)

    @property
    @pulumi.getter(name="recoveryZone")
    def recovery_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The recovery zone.
        """
        return pulumi.get(self, "recovery_zone")

    @recovery_zone.setter
    def recovery_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_zone", value)


@pulumi.input_type
class RecoveryPlanActionArgs:
    def __init__(__self__, *,
                 action_name: pulumi.Input[str],
                 custom_details: pulumi.Input[Union['RecoveryPlanAutomationRunbookActionDetailsArgs', 'RecoveryPlanManualActionDetailsArgs', 'RecoveryPlanScriptActionDetailsArgs']],
                 failover_directions: pulumi.Input[Sequence[pulumi.Input[Union[str, 'PossibleOperationsDirections']]]],
                 failover_types: pulumi.Input[Sequence[pulumi.Input[Union[str, 'ReplicationProtectedItemOperation']]]]):
        """
        Recovery plan action details.
        :param pulumi.Input[str] action_name: The action name.
        :param pulumi.Input[Union['RecoveryPlanAutomationRunbookActionDetailsArgs', 'RecoveryPlanManualActionDetailsArgs', 'RecoveryPlanScriptActionDetailsArgs']] custom_details: The custom details.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'PossibleOperationsDirections']]]] failover_directions: The list of failover directions.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'ReplicationProtectedItemOperation']]]] failover_types: The list of failover types.
        """
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "custom_details", custom_details)
        pulumi.set(__self__, "failover_directions", failover_directions)
        pulumi.set(__self__, "failover_types", failover_types)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> pulumi.Input[str]:
        """
        The action name.
        """
        return pulumi.get(self, "action_name")

    @action_name.setter
    def action_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_name", value)

    @property
    @pulumi.getter(name="customDetails")
    def custom_details(self) -> pulumi.Input[Union['RecoveryPlanAutomationRunbookActionDetailsArgs', 'RecoveryPlanManualActionDetailsArgs', 'RecoveryPlanScriptActionDetailsArgs']]:
        """
        The custom details.
        """
        return pulumi.get(self, "custom_details")

    @custom_details.setter
    def custom_details(self, value: pulumi.Input[Union['RecoveryPlanAutomationRunbookActionDetailsArgs', 'RecoveryPlanManualActionDetailsArgs', 'RecoveryPlanScriptActionDetailsArgs']]):
        pulumi.set(self, "custom_details", value)

    @property
    @pulumi.getter(name="failoverDirections")
    def failover_directions(self) -> pulumi.Input[Sequence[pulumi.Input[Union[str, 'PossibleOperationsDirections']]]]:
        """
        The list of failover directions.
        """
        return pulumi.get(self, "failover_directions")

    @failover_directions.setter
    def failover_directions(self, value: pulumi.Input[Sequence[pulumi.Input[Union[str, 'PossibleOperationsDirections']]]]):
        pulumi.set(self, "failover_directions", value)

    @property
    @pulumi.getter(name="failoverTypes")
    def failover_types(self) -> pulumi.Input[Sequence[pulumi.Input[Union[str, 'ReplicationProtectedItemOperation']]]]:
        """
        The list of failover types.
        """
        return pulumi.get(self, "failover_types")

    @failover_types.setter
    def failover_types(self, value: pulumi.Input[Sequence[pulumi.Input[Union[str, 'ReplicationProtectedItemOperation']]]]):
        pulumi.set(self, "failover_types", value)


@pulumi.input_type
class RecoveryPlanAutomationRunbookActionDetailsArgs:
    def __init__(__self__, *,
                 fabric_location: pulumi.Input[Union[str, 'RecoveryPlanActionLocation']],
                 instance_type: pulumi.Input[str],
                 runbook_id: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        Recovery plan Automation runbook action details.
        :param pulumi.Input[Union[str, 'RecoveryPlanActionLocation']] fabric_location: The fabric location.
        :param pulumi.Input[str] instance_type: Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
               Expected value is 'AutomationRunbookActionDetails'.
        :param pulumi.Input[str] runbook_id: The runbook ARM Id.
        :param pulumi.Input[str] timeout: The runbook timeout.
        """
        pulumi.set(__self__, "fabric_location", fabric_location)
        pulumi.set(__self__, "instance_type", 'AutomationRunbookActionDetails')
        if runbook_id is not None:
            pulumi.set(__self__, "runbook_id", runbook_id)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="fabricLocation")
    def fabric_location(self) -> pulumi.Input[Union[str, 'RecoveryPlanActionLocation']]:
        """
        The fabric location.
        """
        return pulumi.get(self, "fabric_location")

    @fabric_location.setter
    def fabric_location(self, value: pulumi.Input[Union[str, 'RecoveryPlanActionLocation']]):
        pulumi.set(self, "fabric_location", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
        Expected value is 'AutomationRunbookActionDetails'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> Optional[pulumi.Input[str]]:
        """
        The runbook ARM Id.
        """
        return pulumi.get(self, "runbook_id")

    @runbook_id.setter
    def runbook_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runbook_id", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The runbook timeout.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class RecoveryPlanGroupArgs:
    def __init__(__self__, *,
                 group_type: pulumi.Input[Union[str, 'RecoveryPlanGroupType']],
                 end_group_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]]] = None,
                 replication_protected_items: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanProtectedItemArgs']]]] = None,
                 start_group_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]]] = None):
        """
        Recovery plan group details.
        :param pulumi.Input[Union[str, 'RecoveryPlanGroupType']] group_type: The group type.
        :param pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]] end_group_actions: The end group actions.
        :param pulumi.Input[Sequence[pulumi.Input['RecoveryPlanProtectedItemArgs']]] replication_protected_items: The list of protected items.
        :param pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]] start_group_actions: The start group actions.
        """
        pulumi.set(__self__, "group_type", group_type)
        if end_group_actions is not None:
            pulumi.set(__self__, "end_group_actions", end_group_actions)
        if replication_protected_items is not None:
            pulumi.set(__self__, "replication_protected_items", replication_protected_items)
        if start_group_actions is not None:
            pulumi.set(__self__, "start_group_actions", start_group_actions)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Input[Union[str, 'RecoveryPlanGroupType']]:
        """
        The group type.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: pulumi.Input[Union[str, 'RecoveryPlanGroupType']]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter(name="endGroupActions")
    def end_group_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]]]:
        """
        The end group actions.
        """
        return pulumi.get(self, "end_group_actions")

    @end_group_actions.setter
    def end_group_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]]]):
        pulumi.set(self, "end_group_actions", value)

    @property
    @pulumi.getter(name="replicationProtectedItems")
    def replication_protected_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanProtectedItemArgs']]]]:
        """
        The list of protected items.
        """
        return pulumi.get(self, "replication_protected_items")

    @replication_protected_items.setter
    def replication_protected_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanProtectedItemArgs']]]]):
        pulumi.set(self, "replication_protected_items", value)

    @property
    @pulumi.getter(name="startGroupActions")
    def start_group_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]]]:
        """
        The start group actions.
        """
        return pulumi.get(self, "start_group_actions")

    @start_group_actions.setter
    def start_group_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanActionArgs']]]]):
        pulumi.set(self, "start_group_actions", value)


@pulumi.input_type
class RecoveryPlanManualActionDetailsArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        Recovery plan manual action details.
        :param pulumi.Input[str] instance_type: Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
               Expected value is 'ManualActionDetails'.
        :param pulumi.Input[str] description: The manual action description.
        """
        pulumi.set(__self__, "instance_type", 'ManualActionDetails')
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
        Expected value is 'ManualActionDetails'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The manual action description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class RecoveryPlanProtectedItemArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None):
        """
        Recovery plan protected item.
        :param pulumi.Input[str] id: The ARM Id of the recovery plan protected item.
        :param pulumi.Input[str] virtual_machine_id: The virtual machine Id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if virtual_machine_id is not None:
            pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM Id of the recovery plan protected item.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        The virtual machine Id.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_id", value)


@pulumi.input_type
class RecoveryPlanScriptActionDetailsArgs:
    def __init__(__self__, *,
                 fabric_location: pulumi.Input[Union[str, 'RecoveryPlanActionLocation']],
                 instance_type: pulumi.Input[str],
                 path: pulumi.Input[str],
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        Recovery plan script action details.
        :param pulumi.Input[Union[str, 'RecoveryPlanActionLocation']] fabric_location: The fabric location.
        :param pulumi.Input[str] instance_type: Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
               Expected value is 'ScriptActionDetails'.
        :param pulumi.Input[str] path: The script path.
        :param pulumi.Input[str] timeout: The script timeout.
        """
        pulumi.set(__self__, "fabric_location", fabric_location)
        pulumi.set(__self__, "instance_type", 'ScriptActionDetails')
        pulumi.set(__self__, "path", path)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="fabricLocation")
    def fabric_location(self) -> pulumi.Input[Union[str, 'RecoveryPlanActionLocation']]:
        """
        The fabric location.
        """
        return pulumi.get(self, "fabric_location")

    @fabric_location.setter
    def fabric_location(self, value: pulumi.Input[Union[str, 'RecoveryPlanActionLocation']]):
        pulumi.set(self, "fabric_location", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
        Expected value is 'ScriptActionDetails'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The script path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The script timeout.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class RestoreSettingsArgs:
    def __init__(__self__, *,
                 cross_subscription_restore_settings: Optional[pulumi.Input['CrossSubscriptionRestoreSettingsArgs']] = None):
        """
        Restore Settings  of the vault
        :param pulumi.Input['CrossSubscriptionRestoreSettingsArgs'] cross_subscription_restore_settings: Settings for CrossSubscriptionRestore
        """
        if cross_subscription_restore_settings is not None:
            pulumi.set(__self__, "cross_subscription_restore_settings", cross_subscription_restore_settings)

    @property
    @pulumi.getter(name="crossSubscriptionRestoreSettings")
    def cross_subscription_restore_settings(self) -> Optional[pulumi.Input['CrossSubscriptionRestoreSettingsArgs']]:
        """
        Settings for CrossSubscriptionRestore
        """
        return pulumi.get(self, "cross_subscription_restore_settings")

    @cross_subscription_restore_settings.setter
    def cross_subscription_restore_settings(self, value: Optional[pulumi.Input['CrossSubscriptionRestoreSettingsArgs']]):
        pulumi.set(self, "cross_subscription_restore_settings", value)


@pulumi.input_type
class SecuritySettingsArgs:
    def __init__(__self__, *,
                 immutability_settings: Optional[pulumi.Input['ImmutabilitySettingsArgs']] = None,
                 soft_delete_settings: Optional[pulumi.Input['SoftDeleteSettingsArgs']] = None):
        """
        Security Settings of the vault
        :param pulumi.Input['ImmutabilitySettingsArgs'] immutability_settings: Immutability Settings of a vault
        :param pulumi.Input['SoftDeleteSettingsArgs'] soft_delete_settings: Soft delete Settings of a vault
        """
        if immutability_settings is not None:
            pulumi.set(__self__, "immutability_settings", immutability_settings)
        if soft_delete_settings is not None:
            pulumi.set(__self__, "soft_delete_settings", soft_delete_settings)

    @property
    @pulumi.getter(name="immutabilitySettings")
    def immutability_settings(self) -> Optional[pulumi.Input['ImmutabilitySettingsArgs']]:
        """
        Immutability Settings of a vault
        """
        return pulumi.get(self, "immutability_settings")

    @immutability_settings.setter
    def immutability_settings(self, value: Optional[pulumi.Input['ImmutabilitySettingsArgs']]):
        pulumi.set(self, "immutability_settings", value)

    @property
    @pulumi.getter(name="softDeleteSettings")
    def soft_delete_settings(self) -> Optional[pulumi.Input['SoftDeleteSettingsArgs']]:
        """
        Soft delete Settings of a vault
        """
        return pulumi.get(self, "soft_delete_settings")

    @soft_delete_settings.setter
    def soft_delete_settings(self, value: Optional[pulumi.Input['SoftDeleteSettingsArgs']]):
        pulumi.set(self, "soft_delete_settings", value)


@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[Union[str, 'SkuName']],
                 capacity: Optional[pulumi.Input[str]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        """
        Identifies the unique system identifier for each Azure resource.
        :param pulumi.Input[Union[str, 'SkuName']] name: Name of SKU is RS0 (Recovery Services 0th version) and the tier is standard tier. They do not have affect on backend storage redundancy or any other vault settings. To manage storage redundancy, use the backupstorageconfig
        :param pulumi.Input[str] capacity: The sku capacity
        :param pulumi.Input[str] family: The sku family
        :param pulumi.Input[str] size: The sku size
        :param pulumi.Input[str] tier: The Sku tier.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[Union[str, 'SkuName']]:
        """
        Name of SKU is RS0 (Recovery Services 0th version) and the tier is standard tier. They do not have affect on backend storage redundancy or any other vault settings. To manage storage redundancy, use the backupstorageconfig
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[Union[str, 'SkuName']]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[str]]:
        """
        The sku capacity
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        The sku family
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        The sku size
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        The Sku tier.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


@pulumi.input_type
class SoftDeleteSettingsArgs:
    def __init__(__self__, *,
                 soft_delete_retention_period_in_days: Optional[pulumi.Input[int]] = None,
                 soft_delete_state: Optional[pulumi.Input[Union[str, 'SoftDeleteState']]] = None):
        """
        Soft delete Settings of vault
        :param pulumi.Input[int] soft_delete_retention_period_in_days: Soft delete retention period in days
        """
        if soft_delete_retention_period_in_days is not None:
            pulumi.set(__self__, "soft_delete_retention_period_in_days", soft_delete_retention_period_in_days)
        if soft_delete_state is not None:
            pulumi.set(__self__, "soft_delete_state", soft_delete_state)

    @property
    @pulumi.getter(name="softDeleteRetentionPeriodInDays")
    def soft_delete_retention_period_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Soft delete retention period in days
        """
        return pulumi.get(self, "soft_delete_retention_period_in_days")

    @soft_delete_retention_period_in_days.setter
    def soft_delete_retention_period_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "soft_delete_retention_period_in_days", value)

    @property
    @pulumi.getter(name="softDeleteState")
    def soft_delete_state(self) -> Optional[pulumi.Input[Union[str, 'SoftDeleteState']]]:
        return pulumi.get(self, "soft_delete_state")

    @soft_delete_state.setter
    def soft_delete_state(self, value: Optional[pulumi.Input[Union[str, 'SoftDeleteState']]]):
        pulumi.set(self, "soft_delete_state", value)


@pulumi.input_type
class StorageMappingInputPropertiesArgs:
    def __init__(__self__, *,
                 target_storage_classification_id: Optional[pulumi.Input[str]] = None):
        """
        Storage mapping input properties.
        :param pulumi.Input[str] target_storage_classification_id: The ID of the storage object.
        """
        if target_storage_classification_id is not None:
            pulumi.set(__self__, "target_storage_classification_id", target_storage_classification_id)

    @property
    @pulumi.getter(name="targetStorageClassificationId")
    def target_storage_classification_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the storage object.
        """
        return pulumi.get(self, "target_storage_classification_id")

    @target_storage_classification_id.setter
    def target_storage_classification_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_storage_classification_id", value)


@pulumi.input_type
class VMwareCbtContainerMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 storage_account_id: pulumi.Input[str],
                 target_location: pulumi.Input[str],
                 key_vault_id: Optional[pulumi.Input[str]] = None,
                 key_vault_uri: Optional[pulumi.Input[str]] = None,
                 service_bus_connection_string_secret_name: Optional[pulumi.Input[str]] = None,
                 storage_account_sas_secret_name: Optional[pulumi.Input[str]] = None):
        """
        VMwareCbt container mapping input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'VMwareCbt'.
        :param pulumi.Input[str] storage_account_id: The storage account ARM Id.
        :param pulumi.Input[str] target_location: The target location.
        :param pulumi.Input[str] key_vault_id: The target key vault ARM Id.
        :param pulumi.Input[str] key_vault_uri: The target key vault URL.
        :param pulumi.Input[str] service_bus_connection_string_secret_name: The secret name of the service bus connection string.
        :param pulumi.Input[str] storage_account_sas_secret_name: The secret name of the storage account.
        """
        pulumi.set(__self__, "instance_type", 'VMwareCbt')
        pulumi.set(__self__, "storage_account_id", storage_account_id)
        pulumi.set(__self__, "target_location", target_location)
        if key_vault_id is not None:
            pulumi.set(__self__, "key_vault_id", key_vault_id)
        if key_vault_uri is not None:
            pulumi.set(__self__, "key_vault_uri", key_vault_uri)
        if service_bus_connection_string_secret_name is not None:
            pulumi.set(__self__, "service_bus_connection_string_secret_name", service_bus_connection_string_secret_name)
        if storage_account_sas_secret_name is not None:
            pulumi.set(__self__, "storage_account_sas_secret_name", storage_account_sas_secret_name)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'VMwareCbt'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> pulumi.Input[str]:
        """
        The storage account ARM Id.
        """
        return pulumi.get(self, "storage_account_id")

    @storage_account_id.setter
    def storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account_id", value)

    @property
    @pulumi.getter(name="targetLocation")
    def target_location(self) -> pulumi.Input[str]:
        """
        The target location.
        """
        return pulumi.get(self, "target_location")

    @target_location.setter
    def target_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_location", value)

    @property
    @pulumi.getter(name="keyVaultId")
    def key_vault_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target key vault ARM Id.
        """
        return pulumi.get(self, "key_vault_id")

    @key_vault_id.setter
    def key_vault_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_id", value)

    @property
    @pulumi.getter(name="keyVaultUri")
    def key_vault_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The target key vault URL.
        """
        return pulumi.get(self, "key_vault_uri")

    @key_vault_uri.setter
    def key_vault_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_uri", value)

    @property
    @pulumi.getter(name="serviceBusConnectionStringSecretName")
    def service_bus_connection_string_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        The secret name of the service bus connection string.
        """
        return pulumi.get(self, "service_bus_connection_string_secret_name")

    @service_bus_connection_string_secret_name.setter
    def service_bus_connection_string_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_bus_connection_string_secret_name", value)

    @property
    @pulumi.getter(name="storageAccountSasSecretName")
    def storage_account_sas_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        The secret name of the storage account.
        """
        return pulumi.get(self, "storage_account_sas_secret_name")

    @storage_account_sas_secret_name.setter
    def storage_account_sas_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_sas_secret_name", value)


@pulumi.input_type
class VMwareCbtDiskInputArgs:
    def __init__(__self__, *,
                 disk_id: pulumi.Input[str],
                 is_os_disk: pulumi.Input[str],
                 log_storage_account_id: pulumi.Input[str],
                 log_storage_account_sas_secret_name: pulumi.Input[str],
                 disk_encryption_set_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[Union[str, 'DiskAccountType']]] = None):
        """
        VMwareCbt disk input.
        :param pulumi.Input[str] disk_id: The disk Id.
        :param pulumi.Input[str] is_os_disk: A value indicating whether the disk is the OS disk.
        :param pulumi.Input[str] log_storage_account_id: The log storage account ARM Id.
        :param pulumi.Input[str] log_storage_account_sas_secret_name: The key vault secret name of the log storage account.
        :param pulumi.Input[str] disk_encryption_set_id: The DiskEncryptionSet ARM Id.
        :param pulumi.Input[Union[str, 'DiskAccountType']] disk_type: The disk type.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "is_os_disk", is_os_disk)
        pulumi.set(__self__, "log_storage_account_id", log_storage_account_id)
        pulumi.set(__self__, "log_storage_account_sas_secret_name", log_storage_account_sas_secret_name)
        if disk_encryption_set_id is not None:
            pulumi.set(__self__, "disk_encryption_set_id", disk_encryption_set_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        The disk Id.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="isOSDisk")
    def is_os_disk(self) -> pulumi.Input[str]:
        """
        A value indicating whether the disk is the OS disk.
        """
        return pulumi.get(self, "is_os_disk")

    @is_os_disk.setter
    def is_os_disk(self, value: pulumi.Input[str]):
        pulumi.set(self, "is_os_disk", value)

    @property
    @pulumi.getter(name="logStorageAccountId")
    def log_storage_account_id(self) -> pulumi.Input[str]:
        """
        The log storage account ARM Id.
        """
        return pulumi.get(self, "log_storage_account_id")

    @log_storage_account_id.setter
    def log_storage_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_storage_account_id", value)

    @property
    @pulumi.getter(name="logStorageAccountSasSecretName")
    def log_storage_account_sas_secret_name(self) -> pulumi.Input[str]:
        """
        The key vault secret name of the log storage account.
        """
        return pulumi.get(self, "log_storage_account_sas_secret_name")

    @log_storage_account_sas_secret_name.setter
    def log_storage_account_sas_secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_storage_account_sas_secret_name", value)

    @property
    @pulumi.getter(name="diskEncryptionSetId")
    def disk_encryption_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DiskEncryptionSet ARM Id.
        """
        return pulumi.get(self, "disk_encryption_set_id")

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_set_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[Union[str, 'DiskAccountType']]]:
        """
        The disk type.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[Union[str, 'DiskAccountType']]]):
        pulumi.set(self, "disk_type", value)


@pulumi.input_type
class VMwareCbtEnableMigrationInputArgs:
    def __init__(__self__, *,
                 data_mover_run_as_account_id: pulumi.Input[str],
                 disks_to_include: pulumi.Input[Sequence[pulumi.Input['VMwareCbtDiskInputArgs']]],
                 instance_type: pulumi.Input[str],
                 snapshot_run_as_account_id: pulumi.Input[str],
                 target_network_id: pulumi.Input[str],
                 target_resource_group_id: pulumi.Input[str],
                 vmware_machine_id: pulumi.Input[str],
                 confidential_vm_key_vault_id: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[Union[str, 'LicenseType']]] = None,
                 perform_auto_resync: Optional[pulumi.Input[str]] = None,
                 perform_sql_bulk_registration: Optional[pulumi.Input[str]] = None,
                 seed_disk_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 sql_server_license_type: Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_availability_zone: Optional[pulumi.Input[str]] = None,
                 target_boot_diagnostics_storage_account_id: Optional[pulumi.Input[str]] = None,
                 target_disk_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_nic_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_proximity_placement_group_id: Optional[pulumi.Input[str]] = None,
                 target_subnet_name: Optional[pulumi.Input[str]] = None,
                 target_vm_name: Optional[pulumi.Input[str]] = None,
                 target_vm_security_profile: Optional[pulumi.Input['VMwareCbtSecurityProfilePropertiesArgs']] = None,
                 target_vm_size: Optional[pulumi.Input[str]] = None,
                 target_vm_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 test_network_id: Optional[pulumi.Input[str]] = None,
                 test_subnet_name: Optional[pulumi.Input[str]] = None):
        """
        VMwareCbt specific enable migration input.
        :param pulumi.Input[str] data_mover_run_as_account_id: The data mover run as account Id.
        :param pulumi.Input[Sequence[pulumi.Input['VMwareCbtDiskInputArgs']]] disks_to_include: The disks to include list.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'VMwareCbt'.
        :param pulumi.Input[str] snapshot_run_as_account_id: The snapshot run as account Id.
        :param pulumi.Input[str] target_network_id: The target network ARM Id.
        :param pulumi.Input[str] target_resource_group_id: The target resource group ARM Id.
        :param pulumi.Input[str] vmware_machine_id: The ARM Id of the VM discovered in VMware.
        :param pulumi.Input[str] confidential_vm_key_vault_id: The confidential VM key vault Id for ADE installation.
        :param pulumi.Input[Union[str, 'LicenseType']] license_type: License type.
        :param pulumi.Input[str] perform_auto_resync: A value indicating whether auto resync is to be done.
        :param pulumi.Input[str] perform_sql_bulk_registration: A value indicating whether bulk SQL RP registration to be done.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] seed_disk_tags: The tags for the seed disks.
        :param pulumi.Input[Union[str, 'SqlServerLicenseType']] sql_server_license_type: The SQL Server license type.
        :param pulumi.Input[str] target_availability_set_id: The target availability set ARM Id.
        :param pulumi.Input[str] target_availability_zone: The target availability zone.
        :param pulumi.Input[str] target_boot_diagnostics_storage_account_id: The target boot diagnostics storage account ARM Id.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_disk_tags: The tags for the target disks.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_nic_tags: The tags for the target NICs.
        :param pulumi.Input[str] target_proximity_placement_group_id: The target proximity placement group ARM Id.
        :param pulumi.Input[str] target_subnet_name: The target subnet name.
        :param pulumi.Input[str] target_vm_name: The target VM name.
        :param pulumi.Input['VMwareCbtSecurityProfilePropertiesArgs'] target_vm_security_profile: The target VM security profile.
        :param pulumi.Input[str] target_vm_size: The target VM size.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] target_vm_tags: The target VM tags.
        :param pulumi.Input[str] test_network_id: The selected test network ARM Id.
        :param pulumi.Input[str] test_subnet_name: The selected test subnet name.
        """
        pulumi.set(__self__, "data_mover_run_as_account_id", data_mover_run_as_account_id)
        pulumi.set(__self__, "disks_to_include", disks_to_include)
        pulumi.set(__self__, "instance_type", 'VMwareCbt')
        pulumi.set(__self__, "snapshot_run_as_account_id", snapshot_run_as_account_id)
        pulumi.set(__self__, "target_network_id", target_network_id)
        pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        pulumi.set(__self__, "vmware_machine_id", vmware_machine_id)
        if confidential_vm_key_vault_id is not None:
            pulumi.set(__self__, "confidential_vm_key_vault_id", confidential_vm_key_vault_id)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if perform_auto_resync is not None:
            pulumi.set(__self__, "perform_auto_resync", perform_auto_resync)
        if perform_sql_bulk_registration is not None:
            pulumi.set(__self__, "perform_sql_bulk_registration", perform_sql_bulk_registration)
        if seed_disk_tags is not None:
            pulumi.set(__self__, "seed_disk_tags", seed_disk_tags)
        if sql_server_license_type is not None:
            pulumi.set(__self__, "sql_server_license_type", sql_server_license_type)
        if target_availability_set_id is not None:
            pulumi.set(__self__, "target_availability_set_id", target_availability_set_id)
        if target_availability_zone is not None:
            pulumi.set(__self__, "target_availability_zone", target_availability_zone)
        if target_boot_diagnostics_storage_account_id is not None:
            pulumi.set(__self__, "target_boot_diagnostics_storage_account_id", target_boot_diagnostics_storage_account_id)
        if target_disk_tags is not None:
            pulumi.set(__self__, "target_disk_tags", target_disk_tags)
        if target_nic_tags is not None:
            pulumi.set(__self__, "target_nic_tags", target_nic_tags)
        if target_proximity_placement_group_id is not None:
            pulumi.set(__self__, "target_proximity_placement_group_id", target_proximity_placement_group_id)
        if target_subnet_name is not None:
            pulumi.set(__self__, "target_subnet_name", target_subnet_name)
        if target_vm_name is not None:
            pulumi.set(__self__, "target_vm_name", target_vm_name)
        if target_vm_security_profile is not None:
            pulumi.set(__self__, "target_vm_security_profile", target_vm_security_profile)
        if target_vm_size is not None:
            pulumi.set(__self__, "target_vm_size", target_vm_size)
        if target_vm_tags is not None:
            pulumi.set(__self__, "target_vm_tags", target_vm_tags)
        if test_network_id is not None:
            pulumi.set(__self__, "test_network_id", test_network_id)
        if test_subnet_name is not None:
            pulumi.set(__self__, "test_subnet_name", test_subnet_name)

    @property
    @pulumi.getter(name="dataMoverRunAsAccountId")
    def data_mover_run_as_account_id(self) -> pulumi.Input[str]:
        """
        The data mover run as account Id.
        """
        return pulumi.get(self, "data_mover_run_as_account_id")

    @data_mover_run_as_account_id.setter
    def data_mover_run_as_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_mover_run_as_account_id", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> pulumi.Input[Sequence[pulumi.Input['VMwareCbtDiskInputArgs']]]:
        """
        The disks to include list.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: pulumi.Input[Sequence[pulumi.Input['VMwareCbtDiskInputArgs']]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'VMwareCbt'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="snapshotRunAsAccountId")
    def snapshot_run_as_account_id(self) -> pulumi.Input[str]:
        """
        The snapshot run as account Id.
        """
        return pulumi.get(self, "snapshot_run_as_account_id")

    @snapshot_run_as_account_id.setter
    def snapshot_run_as_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "snapshot_run_as_account_id", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> pulumi.Input[str]:
        """
        The target network ARM Id.
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> pulumi.Input[str]:
        """
        The target resource group ARM Id.
        """
        return pulumi.get(self, "target_resource_group_id")

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_group_id", value)

    @property
    @pulumi.getter(name="vmwareMachineId")
    def vmware_machine_id(self) -> pulumi.Input[str]:
        """
        The ARM Id of the VM discovered in VMware.
        """
        return pulumi.get(self, "vmware_machine_id")

    @vmware_machine_id.setter
    def vmware_machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vmware_machine_id", value)

    @property
    @pulumi.getter(name="confidentialVmKeyVaultId")
    def confidential_vm_key_vault_id(self) -> Optional[pulumi.Input[str]]:
        """
        The confidential VM key vault Id for ADE installation.
        """
        return pulumi.get(self, "confidential_vm_key_vault_id")

    @confidential_vm_key_vault_id.setter
    def confidential_vm_key_vault_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "confidential_vm_key_vault_id", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[Union[str, 'LicenseType']]]:
        """
        License type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[Union[str, 'LicenseType']]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="performAutoResync")
    def perform_auto_resync(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether auto resync is to be done.
        """
        return pulumi.get(self, "perform_auto_resync")

    @perform_auto_resync.setter
    def perform_auto_resync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perform_auto_resync", value)

    @property
    @pulumi.getter(name="performSqlBulkRegistration")
    def perform_sql_bulk_registration(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether bulk SQL RP registration to be done.
        """
        return pulumi.get(self, "perform_sql_bulk_registration")

    @perform_sql_bulk_registration.setter
    def perform_sql_bulk_registration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perform_sql_bulk_registration", value)

    @property
    @pulumi.getter(name="seedDiskTags")
    def seed_disk_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the seed disks.
        """
        return pulumi.get(self, "seed_disk_tags")

    @seed_disk_tags.setter
    def seed_disk_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "seed_disk_tags", value)

    @property
    @pulumi.getter(name="sqlServerLicenseType")
    def sql_server_license_type(self) -> Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]]:
        """
        The SQL Server license type.
        """
        return pulumi.get(self, "sql_server_license_type")

    @sql_server_license_type.setter
    def sql_server_license_type(self, value: Optional[pulumi.Input[Union[str, 'SqlServerLicenseType']]]):
        pulumi.set(self, "sql_server_license_type", value)

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability set ARM Id.
        """
        return pulumi.get(self, "target_availability_set_id")

    @target_availability_set_id.setter
    def target_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_set_id", value)

    @property
    @pulumi.getter(name="targetAvailabilityZone")
    def target_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The target availability zone.
        """
        return pulumi.get(self, "target_availability_zone")

    @target_availability_zone.setter
    def target_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_zone", value)

    @property
    @pulumi.getter(name="targetBootDiagnosticsStorageAccountId")
    def target_boot_diagnostics_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target boot diagnostics storage account ARM Id.
        """
        return pulumi.get(self, "target_boot_diagnostics_storage_account_id")

    @target_boot_diagnostics_storage_account_id.setter
    def target_boot_diagnostics_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_boot_diagnostics_storage_account_id", value)

    @property
    @pulumi.getter(name="targetDiskTags")
    def target_disk_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the target disks.
        """
        return pulumi.get(self, "target_disk_tags")

    @target_disk_tags.setter
    def target_disk_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_disk_tags", value)

    @property
    @pulumi.getter(name="targetNicTags")
    def target_nic_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags for the target NICs.
        """
        return pulumi.get(self, "target_nic_tags")

    @target_nic_tags.setter
    def target_nic_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_nic_tags", value)

    @property
    @pulumi.getter(name="targetProximityPlacementGroupId")
    def target_proximity_placement_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target proximity placement group ARM Id.
        """
        return pulumi.get(self, "target_proximity_placement_group_id")

    @target_proximity_placement_group_id.setter
    def target_proximity_placement_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_proximity_placement_group_id", value)

    @property
    @pulumi.getter(name="targetSubnetName")
    def target_subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target subnet name.
        """
        return pulumi.get(self, "target_subnet_name")

    @target_subnet_name.setter
    def target_subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_subnet_name", value)

    @property
    @pulumi.getter(name="targetVmName")
    def target_vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target VM name.
        """
        return pulumi.get(self, "target_vm_name")

    @target_vm_name.setter
    def target_vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_name", value)

    @property
    @pulumi.getter(name="targetVmSecurityProfile")
    def target_vm_security_profile(self) -> Optional[pulumi.Input['VMwareCbtSecurityProfilePropertiesArgs']]:
        """
        The target VM security profile.
        """
        return pulumi.get(self, "target_vm_security_profile")

    @target_vm_security_profile.setter
    def target_vm_security_profile(self, value: Optional[pulumi.Input['VMwareCbtSecurityProfilePropertiesArgs']]):
        pulumi.set(self, "target_vm_security_profile", value)

    @property
    @pulumi.getter(name="targetVmSize")
    def target_vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        The target VM size.
        """
        return pulumi.get(self, "target_vm_size")

    @target_vm_size.setter
    def target_vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_size", value)

    @property
    @pulumi.getter(name="targetVmTags")
    def target_vm_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The target VM tags.
        """
        return pulumi.get(self, "target_vm_tags")

    @target_vm_tags.setter
    def target_vm_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "target_vm_tags", value)

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The selected test network ARM Id.
        """
        return pulumi.get(self, "test_network_id")

    @test_network_id.setter
    def test_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_network_id", value)

    @property
    @pulumi.getter(name="testSubnetName")
    def test_subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        The selected test subnet name.
        """
        return pulumi.get(self, "test_subnet_name")

    @test_subnet_name.setter
    def test_subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_subnet_name", value)


@pulumi.input_type
class VMwareCbtPolicyCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 app_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 crash_consistent_frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 recovery_point_history_in_minutes: Optional[pulumi.Input[int]] = None):
        """
        VMware Cbt policy creation input.
        :param pulumi.Input[str] instance_type: The class type.
               Expected value is 'VMwareCbt'.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: The app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: The crash consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] recovery_point_history_in_minutes: The duration in minutes until which the recovery points need to be stored.
        """
        pulumi.set(__self__, "instance_type", 'VMwareCbt')
        if app_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        if crash_consistent_frequency_in_minutes is not None:
            pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        if recovery_point_history_in_minutes is not None:
            pulumi.set(__self__, "recovery_point_history_in_minutes", recovery_point_history_in_minutes)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        Expected value is 'VMwareCbt'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="recoveryPointHistoryInMinutes")
    def recovery_point_history_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The duration in minutes until which the recovery points need to be stored.
        """
        return pulumi.get(self, "recovery_point_history_in_minutes")

    @recovery_point_history_in_minutes.setter
    def recovery_point_history_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_point_history_in_minutes", value)


@pulumi.input_type
class VMwareCbtSecurityProfilePropertiesArgs:
    def __init__(__self__, *,
                 is_target_vm_confidential_encryption_enabled: Optional[pulumi.Input[str]] = None,
                 is_target_vm_integrity_monitoring_enabled: Optional[pulumi.Input[str]] = None,
                 is_target_vm_secure_boot_enabled: Optional[pulumi.Input[str]] = None,
                 is_target_vm_tpm_enabled: Optional[pulumi.Input[str]] = None,
                 target_vm_security_type: Optional[pulumi.Input[Union[str, 'SecurityType']]] = None):
        """
        VMwareCbt security profile input.
        :param pulumi.Input[str] is_target_vm_confidential_encryption_enabled: A value indicating whether confidential compute encryption to be enabled.
        :param pulumi.Input[str] is_target_vm_integrity_monitoring_enabled: A value indicating whether integrity monitoring to be enabled.
        :param pulumi.Input[str] is_target_vm_secure_boot_enabled: A value indicating whether secure boot to be enabled.
        :param pulumi.Input[str] is_target_vm_tpm_enabled: A value indicating whether trusted platform module to be enabled.
        :param pulumi.Input[Union[str, 'SecurityType']] target_vm_security_type: The target VM security type.
        """
        if is_target_vm_confidential_encryption_enabled is not None:
            pulumi.set(__self__, "is_target_vm_confidential_encryption_enabled", is_target_vm_confidential_encryption_enabled)
        if is_target_vm_integrity_monitoring_enabled is not None:
            pulumi.set(__self__, "is_target_vm_integrity_monitoring_enabled", is_target_vm_integrity_monitoring_enabled)
        if is_target_vm_secure_boot_enabled is not None:
            pulumi.set(__self__, "is_target_vm_secure_boot_enabled", is_target_vm_secure_boot_enabled)
        if is_target_vm_tpm_enabled is not None:
            pulumi.set(__self__, "is_target_vm_tpm_enabled", is_target_vm_tpm_enabled)
        if target_vm_security_type is not None:
            pulumi.set(__self__, "target_vm_security_type", target_vm_security_type)

    @property
    @pulumi.getter(name="isTargetVmConfidentialEncryptionEnabled")
    def is_target_vm_confidential_encryption_enabled(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether confidential compute encryption to be enabled.
        """
        return pulumi.get(self, "is_target_vm_confidential_encryption_enabled")

    @is_target_vm_confidential_encryption_enabled.setter
    def is_target_vm_confidential_encryption_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_target_vm_confidential_encryption_enabled", value)

    @property
    @pulumi.getter(name="isTargetVmIntegrityMonitoringEnabled")
    def is_target_vm_integrity_monitoring_enabled(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether integrity monitoring to be enabled.
        """
        return pulumi.get(self, "is_target_vm_integrity_monitoring_enabled")

    @is_target_vm_integrity_monitoring_enabled.setter
    def is_target_vm_integrity_monitoring_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_target_vm_integrity_monitoring_enabled", value)

    @property
    @pulumi.getter(name="isTargetVmSecureBootEnabled")
    def is_target_vm_secure_boot_enabled(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether secure boot to be enabled.
        """
        return pulumi.get(self, "is_target_vm_secure_boot_enabled")

    @is_target_vm_secure_boot_enabled.setter
    def is_target_vm_secure_boot_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_target_vm_secure_boot_enabled", value)

    @property
    @pulumi.getter(name="isTargetVmTpmEnabled")
    def is_target_vm_tpm_enabled(self) -> Optional[pulumi.Input[str]]:
        """
        A value indicating whether trusted platform module to be enabled.
        """
        return pulumi.get(self, "is_target_vm_tpm_enabled")

    @is_target_vm_tpm_enabled.setter
    def is_target_vm_tpm_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_target_vm_tpm_enabled", value)

    @property
    @pulumi.getter(name="targetVmSecurityType")
    def target_vm_security_type(self) -> Optional[pulumi.Input[Union[str, 'SecurityType']]]:
        """
        The target VM security type.
        """
        return pulumi.get(self, "target_vm_security_type")

    @target_vm_security_type.setter
    def target_vm_security_type(self, value: Optional[pulumi.Input[Union[str, 'SecurityType']]]):
        pulumi.set(self, "target_vm_security_type", value)


@pulumi.input_type
class VMwareV2FabricCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 migration_solution_id: pulumi.Input[str],
                 physical_site_id: Optional[pulumi.Input[str]] = None,
                 vmware_site_id: Optional[pulumi.Input[str]] = None):
        """
        VMwareV2 fabric provider specific settings.
        :param pulumi.Input[str] instance_type: Gets the class type.
               Expected value is 'VMwareV2'.
        :param pulumi.Input[str] migration_solution_id: The ARM Id of the migration solution.
        :param pulumi.Input[str] physical_site_id: The ARM Id of the physical site.
        :param pulumi.Input[str] vmware_site_id: The ARM Id of the VMware site.
        """
        pulumi.set(__self__, "instance_type", 'VMwareV2')
        pulumi.set(__self__, "migration_solution_id", migration_solution_id)
        if physical_site_id is not None:
            pulumi.set(__self__, "physical_site_id", physical_site_id)
        if vmware_site_id is not None:
            pulumi.set(__self__, "vmware_site_id", vmware_site_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets the class type.
        Expected value is 'VMwareV2'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="migrationSolutionId")
    def migration_solution_id(self) -> pulumi.Input[str]:
        """
        The ARM Id of the migration solution.
        """
        return pulumi.get(self, "migration_solution_id")

    @migration_solution_id.setter
    def migration_solution_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "migration_solution_id", value)

    @property
    @pulumi.getter(name="physicalSiteId")
    def physical_site_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM Id of the physical site.
        """
        return pulumi.get(self, "physical_site_id")

    @physical_site_id.setter
    def physical_site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "physical_site_id", value)

    @property
    @pulumi.getter(name="vmwareSiteId")
    def vmware_site_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM Id of the VMware site.
        """
        return pulumi.get(self, "vmware_site_id")

    @vmware_site_id.setter
    def vmware_site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vmware_site_id", value)


@pulumi.input_type
class VaultPropertiesEncryptionArgs:
    def __init__(__self__, *,
                 infrastructure_encryption: Optional[pulumi.Input[Union[str, 'InfrastructureEncryptionState']]] = None,
                 kek_identity: Optional[pulumi.Input['CmkKekIdentityArgs']] = None,
                 key_vault_properties: Optional[pulumi.Input['CmkKeyVaultPropertiesArgs']] = None):
        """
        Customer Managed Key details of the resource.
        :param pulumi.Input[Union[str, 'InfrastructureEncryptionState']] infrastructure_encryption: Enabling/Disabling the Double Encryption state
        :param pulumi.Input['CmkKekIdentityArgs'] kek_identity: The details of the identity used for CMK
        :param pulumi.Input['CmkKeyVaultPropertiesArgs'] key_vault_properties: The properties of the Key Vault which hosts CMK
        """
        if infrastructure_encryption is not None:
            pulumi.set(__self__, "infrastructure_encryption", infrastructure_encryption)
        if kek_identity is not None:
            pulumi.set(__self__, "kek_identity", kek_identity)
        if key_vault_properties is not None:
            pulumi.set(__self__, "key_vault_properties", key_vault_properties)

    @property
    @pulumi.getter(name="infrastructureEncryption")
    def infrastructure_encryption(self) -> Optional[pulumi.Input[Union[str, 'InfrastructureEncryptionState']]]:
        """
        Enabling/Disabling the Double Encryption state
        """
        return pulumi.get(self, "infrastructure_encryption")

    @infrastructure_encryption.setter
    def infrastructure_encryption(self, value: Optional[pulumi.Input[Union[str, 'InfrastructureEncryptionState']]]):
        pulumi.set(self, "infrastructure_encryption", value)

    @property
    @pulumi.getter(name="kekIdentity")
    def kek_identity(self) -> Optional[pulumi.Input['CmkKekIdentityArgs']]:
        """
        The details of the identity used for CMK
        """
        return pulumi.get(self, "kek_identity")

    @kek_identity.setter
    def kek_identity(self, value: Optional[pulumi.Input['CmkKekIdentityArgs']]):
        pulumi.set(self, "kek_identity", value)

    @property
    @pulumi.getter(name="keyVaultProperties")
    def key_vault_properties(self) -> Optional[pulumi.Input['CmkKeyVaultPropertiesArgs']]:
        """
        The properties of the Key Vault which hosts CMK
        """
        return pulumi.get(self, "key_vault_properties")

    @key_vault_properties.setter
    def key_vault_properties(self, value: Optional[pulumi.Input['CmkKeyVaultPropertiesArgs']]):
        pulumi.set(self, "key_vault_properties", value)


@pulumi.input_type
class VaultPropertiesArgs:
    def __init__(__self__, *,
                 encryption: Optional[pulumi.Input['VaultPropertiesEncryptionArgs']] = None,
                 monitoring_settings: Optional[pulumi.Input['MonitoringSettingsArgs']] = None,
                 public_network_access: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]] = None,
                 restore_settings: Optional[pulumi.Input['RestoreSettingsArgs']] = None,
                 security_settings: Optional[pulumi.Input['SecuritySettingsArgs']] = None):
        """
        Properties of the vault.
        :param pulumi.Input['VaultPropertiesEncryptionArgs'] encryption: Customer Managed Key details of the resource.
        :param pulumi.Input['MonitoringSettingsArgs'] monitoring_settings: Monitoring Settings of the vault
        :param pulumi.Input[Union[str, 'PublicNetworkAccess']] public_network_access: property to enable or disable resource provider inbound network traffic from public clients
        :param pulumi.Input['RestoreSettingsArgs'] restore_settings: Restore Settings of the vault
        :param pulumi.Input['SecuritySettingsArgs'] security_settings: Security Settings of the vault
        """
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if monitoring_settings is not None:
            pulumi.set(__self__, "monitoring_settings", monitoring_settings)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if restore_settings is not None:
            pulumi.set(__self__, "restore_settings", restore_settings)
        if security_settings is not None:
            pulumi.set(__self__, "security_settings", security_settings)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['VaultPropertiesEncryptionArgs']]:
        """
        Customer Managed Key details of the resource.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['VaultPropertiesEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="monitoringSettings")
    def monitoring_settings(self) -> Optional[pulumi.Input['MonitoringSettingsArgs']]:
        """
        Monitoring Settings of the vault
        """
        return pulumi.get(self, "monitoring_settings")

    @monitoring_settings.setter
    def monitoring_settings(self, value: Optional[pulumi.Input['MonitoringSettingsArgs']]):
        pulumi.set(self, "monitoring_settings", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]:
        """
        property to enable or disable resource provider inbound network traffic from public clients
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter(name="restoreSettings")
    def restore_settings(self) -> Optional[pulumi.Input['RestoreSettingsArgs']]:
        """
        Restore Settings of the vault
        """
        return pulumi.get(self, "restore_settings")

    @restore_settings.setter
    def restore_settings(self, value: Optional[pulumi.Input['RestoreSettingsArgs']]):
        pulumi.set(self, "restore_settings", value)

    @property
    @pulumi.getter(name="securitySettings")
    def security_settings(self) -> Optional[pulumi.Input['SecuritySettingsArgs']]:
        """
        Security Settings of the vault
        """
        return pulumi.get(self, "security_settings")

    @security_settings.setter
    def security_settings(self, value: Optional[pulumi.Input['SecuritySettingsArgs']]):
        pulumi.set(self, "security_settings", value)


@pulumi.input_type
class VmmToAzureCreateNetworkMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str]):
        """
        Create network mappings input properties/behavior specific to Vmm to Azure Network mapping.
        :param pulumi.Input[str] instance_type: The instance type.
               Expected value is 'VmmToAzure'.
        """
        pulumi.set(__self__, "instance_type", 'VmmToAzure')

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The instance type.
        Expected value is 'VmmToAzure'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class VmmToVmmCreateNetworkMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str]):
        """
        Create network mappings input properties/behavior specific to vmm to vmm Network mapping.
        :param pulumi.Input[str] instance_type: The instance type.
               Expected value is 'VmmToVmm'.
        """
        pulumi.set(__self__, "instance_type", 'VmmToVmm')

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The instance type.
        Expected value is 'VmmToVmm'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)


