# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'AADProperties',
]

@pulumi.input_type
class AADProperties:
    def __init__(__self__, *,
                 audience: Optional[str] = None,
                 authority: Optional[str] = None,
                 service_principal_client_id: Optional[str] = None,
                 service_principal_object_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        AADProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            audience=audience,
            authority=authority,
            service_principal_client_id=service_principal_client_id,
            service_principal_object_id=service_principal_object_id,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             audience: Optional[str] = None,
             authority: Optional[str] = None,
             service_principal_client_id: Optional[str] = None,
             service_principal_object_id: Optional[str] = None,
             tenant_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if audience is not None:
            _setter("audience", audience)
        if authority is not None:
            _setter("authority", authority)
        if service_principal_client_id is not None:
            _setter("service_principal_client_id", service_principal_client_id)
        if service_principal_object_id is not None:
            _setter("service_principal_object_id", service_principal_object_id)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[str]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter
    def authority(self) -> Optional[str]:
        return pulumi.get(self, "authority")

    @authority.setter
    def authority(self, value: Optional[str]):
        pulumi.set(self, "authority", value)

    @property
    @pulumi.getter(name="servicePrincipalClientId")
    def service_principal_client_id(self) -> Optional[str]:
        return pulumi.get(self, "service_principal_client_id")

    @service_principal_client_id.setter
    def service_principal_client_id(self, value: Optional[str]):
        pulumi.set(self, "service_principal_client_id", value)

    @property
    @pulumi.getter(name="servicePrincipalObjectId")
    def service_principal_object_id(self) -> Optional[str]:
        return pulumi.get(self, "service_principal_object_id")

    @service_principal_object_id.setter
    def service_principal_object_id(self, value: Optional[str]):
        pulumi.set(self, "service_principal_object_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[str]):
        pulumi.set(self, "tenant_id", value)


