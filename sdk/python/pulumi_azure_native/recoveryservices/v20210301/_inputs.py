# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'AddVCenterRequestPropertiesArgs',
    'AzureToAzureCreateNetworkMappingInputArgs',
    'CreateNetworkMappingInputPropertiesArgs',
    'VmmToAzureCreateNetworkMappingInputArgs',
    'VmmToVmmCreateNetworkMappingInputArgs',
]

@pulumi.input_type
class AddVCenterRequestPropertiesArgs:
    def __init__(__self__, *,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 process_server_id: Optional[pulumi.Input[str]] = None,
                 run_as_account_id: Optional[pulumi.Input[str]] = None):
        """
        The properties of an add vCenter request.
        :param pulumi.Input[str] friendly_name: The friendly name of the vCenter.
        :param pulumi.Input[str] ip_address: The IP address of the vCenter to be discovered.
        :param pulumi.Input[str] port: The port number for discovery.
        :param pulumi.Input[str] process_server_id: The process server Id from where the discovery is orchestrated.
        :param pulumi.Input[str] run_as_account_id: The account Id which has privileges to discover the vCenter.
        """
        AddVCenterRequestPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            friendly_name=friendly_name,
            ip_address=ip_address,
            port=port,
            process_server_id=process_server_id,
            run_as_account_id=run_as_account_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             friendly_name: Optional[pulumi.Input[str]] = None,
             ip_address: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[str]] = None,
             process_server_id: Optional[pulumi.Input[str]] = None,
             run_as_account_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if friendly_name is not None:
            _setter("friendly_name", friendly_name)
        if ip_address is not None:
            _setter("ip_address", ip_address)
        if port is not None:
            _setter("port", port)
        if process_server_id is not None:
            _setter("process_server_id", process_server_id)
        if run_as_account_id is not None:
            _setter("run_as_account_id", run_as_account_id)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of the vCenter.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the vCenter to be discovered.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        The port number for discovery.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="processServerId")
    def process_server_id(self) -> Optional[pulumi.Input[str]]:
        """
        The process server Id from where the discovery is orchestrated.
        """
        return pulumi.get(self, "process_server_id")

    @process_server_id.setter
    def process_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_server_id", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account Id which has privileges to discover the vCenter.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_account_id", value)


@pulumi.input_type
class AzureToAzureCreateNetworkMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 primary_network_id: Optional[pulumi.Input[str]] = None):
        """
        Create network mappings input properties/behavior specific to Azure to Azure Network mapping.
        :param pulumi.Input[str] instance_type: The instance type.
               Expected value is 'AzureToAzure'.
        :param pulumi.Input[str] primary_network_id: The primary azure vnet Id.
        """
        AzureToAzureCreateNetworkMappingInputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_type=instance_type,
            primary_network_id=primary_network_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_type: Optional[pulumi.Input[str]] = None,
             primary_network_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if instance_type is not None:
            _setter("instance_type", 'AzureToAzure')
        if primary_network_id is not None:
            _setter("primary_network_id", primary_network_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type.
        Expected value is 'AzureToAzure'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="primaryNetworkId")
    def primary_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The primary azure vnet Id.
        """
        return pulumi.get(self, "primary_network_id")

    @primary_network_id.setter
    def primary_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_network_id", value)


@pulumi.input_type
class CreateNetworkMappingInputPropertiesArgs:
    def __init__(__self__, *,
                 fabric_specific_details: Optional[pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']]] = None,
                 recovery_fabric_name: Optional[pulumi.Input[str]] = None,
                 recovery_network_id: Optional[pulumi.Input[str]] = None):
        """
        Common input details for network mapping operation.
        :param pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']] fabric_specific_details: Fabric specific input properties.
        :param pulumi.Input[str] recovery_fabric_name: Recovery fabric Name.
        :param pulumi.Input[str] recovery_network_id: Recovery network Id.
        """
        CreateNetworkMappingInputPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fabric_specific_details=fabric_specific_details,
            recovery_fabric_name=recovery_fabric_name,
            recovery_network_id=recovery_network_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fabric_specific_details: Optional[pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']]] = None,
             recovery_fabric_name: Optional[pulumi.Input[str]] = None,
             recovery_network_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fabric_specific_details is not None:
            _setter("fabric_specific_details", fabric_specific_details)
        if recovery_fabric_name is not None:
            _setter("recovery_fabric_name", recovery_fabric_name)
        if recovery_network_id is not None:
            _setter("recovery_network_id", recovery_network_id)

    @property
    @pulumi.getter(name="fabricSpecificDetails")
    def fabric_specific_details(self) -> Optional[pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']]]:
        """
        Fabric specific input properties.
        """
        return pulumi.get(self, "fabric_specific_details")

    @fabric_specific_details.setter
    def fabric_specific_details(self, value: Optional[pulumi.Input[Union['AzureToAzureCreateNetworkMappingInputArgs', 'VmmToAzureCreateNetworkMappingInputArgs', 'VmmToVmmCreateNetworkMappingInputArgs']]]):
        pulumi.set(self, "fabric_specific_details", value)

    @property
    @pulumi.getter(name="recoveryFabricName")
    def recovery_fabric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery fabric Name.
        """
        return pulumi.get(self, "recovery_fabric_name")

    @recovery_fabric_name.setter
    def recovery_fabric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_fabric_name", value)

    @property
    @pulumi.getter(name="recoveryNetworkId")
    def recovery_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery network Id.
        """
        return pulumi.get(self, "recovery_network_id")

    @recovery_network_id.setter
    def recovery_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_network_id", value)


@pulumi.input_type
class VmmToAzureCreateNetworkMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None):
        """
        Create network mappings input properties/behavior specific to Vmm to Azure Network mapping.
        :param pulumi.Input[str] instance_type: The instance type.
               Expected value is 'VmmToAzure'.
        """
        VmmToAzureCreateNetworkMappingInputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_type=instance_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if instance_type is not None:
            _setter("instance_type", 'VmmToAzure')

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type.
        Expected value is 'VmmToAzure'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class VmmToVmmCreateNetworkMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None):
        """
        Create network mappings input properties/behavior specific to vmm to vmm Network mapping.
        :param pulumi.Input[str] instance_type: The instance type.
               Expected value is 'VmmToVmm'.
        """
        VmmToVmmCreateNetworkMappingInputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_type=instance_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if instance_type is not None:
            _setter("instance_type", 'VmmToVmm')

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type.
        Expected value is 'VmmToVmm'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)


