# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'AzureToAzureNetworkMappingSettingsResponse',
    'HealthErrorResponse',
    'InnerHealthErrorResponse',
    'NetworkMappingPropertiesResponse',
    'VCenterPropertiesResponse',
    'VmmToAzureNetworkMappingSettingsResponse',
    'VmmToVmmNetworkMappingSettingsResponse',
]

@pulumi.output_type
class AzureToAzureNetworkMappingSettingsResponse(dict):
    """
    A2A Network Mapping fabric specific settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "primaryFabricLocation":
            suggest = "primary_fabric_location"
        elif key == "recoveryFabricLocation":
            suggest = "recovery_fabric_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureToAzureNetworkMappingSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureToAzureNetworkMappingSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureToAzureNetworkMappingSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 primary_fabric_location: Optional[str] = None,
                 recovery_fabric_location: Optional[str] = None):
        """
        A2A Network Mapping fabric specific settings.
        :param str instance_type: Gets the Instance type.
               Expected value is 'AzureToAzure'.
        :param str primary_fabric_location: The primary fabric location.
        :param str recovery_fabric_location: The recovery fabric location.
        """
        pulumi.set(__self__, "instance_type", 'AzureToAzure')
        if primary_fabric_location is not None:
            pulumi.set(__self__, "primary_fabric_location", primary_fabric_location)
        if recovery_fabric_location is not None:
            pulumi.set(__self__, "recovery_fabric_location", recovery_fabric_location)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        Expected value is 'AzureToAzure'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="primaryFabricLocation")
    def primary_fabric_location(self) -> Optional[str]:
        """
        The primary fabric location.
        """
        return pulumi.get(self, "primary_fabric_location")

    @property
    @pulumi.getter(name="recoveryFabricLocation")
    def recovery_fabric_location(self) -> Optional[str]:
        """
        The recovery fabric location.
        """
        return pulumi.get(self, "recovery_fabric_location")


@pulumi.output_type
class HealthErrorResponse(dict):
    """
    Health Error
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTimeUtc":
            suggest = "creation_time_utc"
        elif key == "customerResolvability":
            suggest = "customer_resolvability"
        elif key == "entityId":
            suggest = "entity_id"
        elif key == "errorCategory":
            suggest = "error_category"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorId":
            suggest = "error_id"
        elif key == "errorLevel":
            suggest = "error_level"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "errorSource":
            suggest = "error_source"
        elif key == "errorType":
            suggest = "error_type"
        elif key == "innerHealthErrors":
            suggest = "inner_health_errors"
        elif key == "possibleCauses":
            suggest = "possible_causes"
        elif key == "recommendedAction":
            suggest = "recommended_action"
        elif key == "recoveryProviderErrorMessage":
            suggest = "recovery_provider_error_message"
        elif key == "summaryMessage":
            suggest = "summary_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HealthErrorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HealthErrorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HealthErrorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time_utc: Optional[str] = None,
                 customer_resolvability: Optional[str] = None,
                 entity_id: Optional[str] = None,
                 error_category: Optional[str] = None,
                 error_code: Optional[str] = None,
                 error_id: Optional[str] = None,
                 error_level: Optional[str] = None,
                 error_message: Optional[str] = None,
                 error_source: Optional[str] = None,
                 error_type: Optional[str] = None,
                 inner_health_errors: Optional[Sequence['outputs.InnerHealthErrorResponse']] = None,
                 possible_causes: Optional[str] = None,
                 recommended_action: Optional[str] = None,
                 recovery_provider_error_message: Optional[str] = None,
                 summary_message: Optional[str] = None):
        """
        Health Error
        :param str creation_time_utc: Error creation time (UTC)
        :param str customer_resolvability: Value indicating whether the health error is customer resolvable.
        :param str entity_id: ID of the entity.
        :param str error_category: Category of error.
        :param str error_code: Error code.
        :param str error_id: The health error unique id.
        :param str error_level: Level of error.
        :param str error_message: Error message.
        :param str error_source: Source of error.
        :param str error_type: Type of error.
        :param Sequence['InnerHealthErrorResponse'] inner_health_errors: The inner health errors. HealthError having a list of HealthError as child errors is problematic. InnerHealthError is used because this will prevent an infinite loop of structures when Hydra tries to auto-generate the contract. We are exposing the related health errors as inner health errors and all API consumers can utilize this in the same fashion as Exception -&gt; InnerException.
        :param str possible_causes: Possible causes of error.
        :param str recommended_action: Recommended action to resolve error.
        :param str recovery_provider_error_message: DRA error message.
        :param str summary_message: Summary message of the entity.
        """
        if creation_time_utc is not None:
            pulumi.set(__self__, "creation_time_utc", creation_time_utc)
        if customer_resolvability is not None:
            pulumi.set(__self__, "customer_resolvability", customer_resolvability)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if error_category is not None:
            pulumi.set(__self__, "error_category", error_category)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_id is not None:
            pulumi.set(__self__, "error_id", error_id)
        if error_level is not None:
            pulumi.set(__self__, "error_level", error_level)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if error_source is not None:
            pulumi.set(__self__, "error_source", error_source)
        if error_type is not None:
            pulumi.set(__self__, "error_type", error_type)
        if inner_health_errors is not None:
            pulumi.set(__self__, "inner_health_errors", inner_health_errors)
        if possible_causes is not None:
            pulumi.set(__self__, "possible_causes", possible_causes)
        if recommended_action is not None:
            pulumi.set(__self__, "recommended_action", recommended_action)
        if recovery_provider_error_message is not None:
            pulumi.set(__self__, "recovery_provider_error_message", recovery_provider_error_message)
        if summary_message is not None:
            pulumi.set(__self__, "summary_message", summary_message)

    @property
    @pulumi.getter(name="creationTimeUtc")
    def creation_time_utc(self) -> Optional[str]:
        """
        Error creation time (UTC)
        """
        return pulumi.get(self, "creation_time_utc")

    @property
    @pulumi.getter(name="customerResolvability")
    def customer_resolvability(self) -> Optional[str]:
        """
        Value indicating whether the health error is customer resolvable.
        """
        return pulumi.get(self, "customer_resolvability")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        """
        ID of the entity.
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="errorCategory")
    def error_category(self) -> Optional[str]:
        """
        Category of error.
        """
        return pulumi.get(self, "error_category")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        Error code.
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorId")
    def error_id(self) -> Optional[str]:
        """
        The health error unique id.
        """
        return pulumi.get(self, "error_id")

    @property
    @pulumi.getter(name="errorLevel")
    def error_level(self) -> Optional[str]:
        """
        Level of error.
        """
        return pulumi.get(self, "error_level")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error message.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="errorSource")
    def error_source(self) -> Optional[str]:
        """
        Source of error.
        """
        return pulumi.get(self, "error_source")

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[str]:
        """
        Type of error.
        """
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter(name="innerHealthErrors")
    def inner_health_errors(self) -> Optional[Sequence['outputs.InnerHealthErrorResponse']]:
        """
        The inner health errors. HealthError having a list of HealthError as child errors is problematic. InnerHealthError is used because this will prevent an infinite loop of structures when Hydra tries to auto-generate the contract. We are exposing the related health errors as inner health errors and all API consumers can utilize this in the same fashion as Exception -&gt; InnerException.
        """
        return pulumi.get(self, "inner_health_errors")

    @property
    @pulumi.getter(name="possibleCauses")
    def possible_causes(self) -> Optional[str]:
        """
        Possible causes of error.
        """
        return pulumi.get(self, "possible_causes")

    @property
    @pulumi.getter(name="recommendedAction")
    def recommended_action(self) -> Optional[str]:
        """
        Recommended action to resolve error.
        """
        return pulumi.get(self, "recommended_action")

    @property
    @pulumi.getter(name="recoveryProviderErrorMessage")
    def recovery_provider_error_message(self) -> Optional[str]:
        """
        DRA error message.
        """
        return pulumi.get(self, "recovery_provider_error_message")

    @property
    @pulumi.getter(name="summaryMessage")
    def summary_message(self) -> Optional[str]:
        """
        Summary message of the entity.
        """
        return pulumi.get(self, "summary_message")


@pulumi.output_type
class InnerHealthErrorResponse(dict):
    """
    Implements InnerHealthError class. HealthError object has a list of InnerHealthErrors as child errors. InnerHealthError is used because this will prevent an infinite loop of structures when Hydra tries to auto-generate the contract. We are exposing the related health errors as inner health errors and all API consumers can utilize this in the same fashion as Exception -&gt; InnerException.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTimeUtc":
            suggest = "creation_time_utc"
        elif key == "entityId":
            suggest = "entity_id"
        elif key == "errorCategory":
            suggest = "error_category"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorLevel":
            suggest = "error_level"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "errorSource":
            suggest = "error_source"
        elif key == "errorType":
            suggest = "error_type"
        elif key == "possibleCauses":
            suggest = "possible_causes"
        elif key == "recommendedAction":
            suggest = "recommended_action"
        elif key == "recoveryProviderErrorMessage":
            suggest = "recovery_provider_error_message"
        elif key == "summaryMessage":
            suggest = "summary_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InnerHealthErrorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InnerHealthErrorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InnerHealthErrorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time_utc: Optional[str] = None,
                 entity_id: Optional[str] = None,
                 error_category: Optional[str] = None,
                 error_code: Optional[str] = None,
                 error_level: Optional[str] = None,
                 error_message: Optional[str] = None,
                 error_source: Optional[str] = None,
                 error_type: Optional[str] = None,
                 possible_causes: Optional[str] = None,
                 recommended_action: Optional[str] = None,
                 recovery_provider_error_message: Optional[str] = None,
                 summary_message: Optional[str] = None):
        """
        Implements InnerHealthError class. HealthError object has a list of InnerHealthErrors as child errors. InnerHealthError is used because this will prevent an infinite loop of structures when Hydra tries to auto-generate the contract. We are exposing the related health errors as inner health errors and all API consumers can utilize this in the same fashion as Exception -&gt; InnerException.
        :param str creation_time_utc: Error creation time (UTC)
        :param str entity_id: ID of the entity.
        :param str error_category: Category of error.
        :param str error_code: Error code.
        :param str error_level: Level of error.
        :param str error_message: Error message.
        :param str error_source: Source of error.
        :param str error_type: Type of error.
        :param str possible_causes: Possible causes of error.
        :param str recommended_action: Recommended action to resolve error.
        :param str recovery_provider_error_message: DRA error message.
        :param str summary_message: Summary message of the entity.
        """
        if creation_time_utc is not None:
            pulumi.set(__self__, "creation_time_utc", creation_time_utc)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if error_category is not None:
            pulumi.set(__self__, "error_category", error_category)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_level is not None:
            pulumi.set(__self__, "error_level", error_level)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if error_source is not None:
            pulumi.set(__self__, "error_source", error_source)
        if error_type is not None:
            pulumi.set(__self__, "error_type", error_type)
        if possible_causes is not None:
            pulumi.set(__self__, "possible_causes", possible_causes)
        if recommended_action is not None:
            pulumi.set(__self__, "recommended_action", recommended_action)
        if recovery_provider_error_message is not None:
            pulumi.set(__self__, "recovery_provider_error_message", recovery_provider_error_message)
        if summary_message is not None:
            pulumi.set(__self__, "summary_message", summary_message)

    @property
    @pulumi.getter(name="creationTimeUtc")
    def creation_time_utc(self) -> Optional[str]:
        """
        Error creation time (UTC)
        """
        return pulumi.get(self, "creation_time_utc")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        """
        ID of the entity.
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="errorCategory")
    def error_category(self) -> Optional[str]:
        """
        Category of error.
        """
        return pulumi.get(self, "error_category")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        Error code.
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorLevel")
    def error_level(self) -> Optional[str]:
        """
        Level of error.
        """
        return pulumi.get(self, "error_level")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error message.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="errorSource")
    def error_source(self) -> Optional[str]:
        """
        Source of error.
        """
        return pulumi.get(self, "error_source")

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[str]:
        """
        Type of error.
        """
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter(name="possibleCauses")
    def possible_causes(self) -> Optional[str]:
        """
        Possible causes of error.
        """
        return pulumi.get(self, "possible_causes")

    @property
    @pulumi.getter(name="recommendedAction")
    def recommended_action(self) -> Optional[str]:
        """
        Recommended action to resolve error.
        """
        return pulumi.get(self, "recommended_action")

    @property
    @pulumi.getter(name="recoveryProviderErrorMessage")
    def recovery_provider_error_message(self) -> Optional[str]:
        """
        DRA error message.
        """
        return pulumi.get(self, "recovery_provider_error_message")

    @property
    @pulumi.getter(name="summaryMessage")
    def summary_message(self) -> Optional[str]:
        """
        Summary message of the entity.
        """
        return pulumi.get(self, "summary_message")


@pulumi.output_type
class NetworkMappingPropertiesResponse(dict):
    """
    Network Mapping Properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fabricSpecificSettings":
            suggest = "fabric_specific_settings"
        elif key == "primaryFabricFriendlyName":
            suggest = "primary_fabric_friendly_name"
        elif key == "primaryNetworkFriendlyName":
            suggest = "primary_network_friendly_name"
        elif key == "primaryNetworkId":
            suggest = "primary_network_id"
        elif key == "recoveryFabricArmId":
            suggest = "recovery_fabric_arm_id"
        elif key == "recoveryFabricFriendlyName":
            suggest = "recovery_fabric_friendly_name"
        elif key == "recoveryNetworkFriendlyName":
            suggest = "recovery_network_friendly_name"
        elif key == "recoveryNetworkId":
            suggest = "recovery_network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkMappingPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkMappingPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkMappingPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fabric_specific_settings: Optional[Any] = None,
                 primary_fabric_friendly_name: Optional[str] = None,
                 primary_network_friendly_name: Optional[str] = None,
                 primary_network_id: Optional[str] = None,
                 recovery_fabric_arm_id: Optional[str] = None,
                 recovery_fabric_friendly_name: Optional[str] = None,
                 recovery_network_friendly_name: Optional[str] = None,
                 recovery_network_id: Optional[str] = None,
                 state: Optional[str] = None):
        """
        Network Mapping Properties.
        :param Union['AzureToAzureNetworkMappingSettingsResponse', 'VmmToAzureNetworkMappingSettingsResponse', 'VmmToVmmNetworkMappingSettingsResponse'] fabric_specific_settings: The fabric specific settings.
        :param str primary_fabric_friendly_name: The primary fabric friendly name.
        :param str primary_network_friendly_name: The primary network friendly name.
        :param str primary_network_id: The primary network id for network mapping.
        :param str recovery_fabric_arm_id: The recovery fabric ARM id.
        :param str recovery_fabric_friendly_name: The recovery fabric friendly name.
        :param str recovery_network_friendly_name: The recovery network friendly name.
        :param str recovery_network_id: The recovery network id for network mapping.
        :param str state: The pairing state for network mapping.
        """
        if fabric_specific_settings is not None:
            pulumi.set(__self__, "fabric_specific_settings", fabric_specific_settings)
        if primary_fabric_friendly_name is not None:
            pulumi.set(__self__, "primary_fabric_friendly_name", primary_fabric_friendly_name)
        if primary_network_friendly_name is not None:
            pulumi.set(__self__, "primary_network_friendly_name", primary_network_friendly_name)
        if primary_network_id is not None:
            pulumi.set(__self__, "primary_network_id", primary_network_id)
        if recovery_fabric_arm_id is not None:
            pulumi.set(__self__, "recovery_fabric_arm_id", recovery_fabric_arm_id)
        if recovery_fabric_friendly_name is not None:
            pulumi.set(__self__, "recovery_fabric_friendly_name", recovery_fabric_friendly_name)
        if recovery_network_friendly_name is not None:
            pulumi.set(__self__, "recovery_network_friendly_name", recovery_network_friendly_name)
        if recovery_network_id is not None:
            pulumi.set(__self__, "recovery_network_id", recovery_network_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="fabricSpecificSettings")
    def fabric_specific_settings(self) -> Optional[Any]:
        """
        The fabric specific settings.
        """
        return pulumi.get(self, "fabric_specific_settings")

    @property
    @pulumi.getter(name="primaryFabricFriendlyName")
    def primary_fabric_friendly_name(self) -> Optional[str]:
        """
        The primary fabric friendly name.
        """
        return pulumi.get(self, "primary_fabric_friendly_name")

    @property
    @pulumi.getter(name="primaryNetworkFriendlyName")
    def primary_network_friendly_name(self) -> Optional[str]:
        """
        The primary network friendly name.
        """
        return pulumi.get(self, "primary_network_friendly_name")

    @property
    @pulumi.getter(name="primaryNetworkId")
    def primary_network_id(self) -> Optional[str]:
        """
        The primary network id for network mapping.
        """
        return pulumi.get(self, "primary_network_id")

    @property
    @pulumi.getter(name="recoveryFabricArmId")
    def recovery_fabric_arm_id(self) -> Optional[str]:
        """
        The recovery fabric ARM id.
        """
        return pulumi.get(self, "recovery_fabric_arm_id")

    @property
    @pulumi.getter(name="recoveryFabricFriendlyName")
    def recovery_fabric_friendly_name(self) -> Optional[str]:
        """
        The recovery fabric friendly name.
        """
        return pulumi.get(self, "recovery_fabric_friendly_name")

    @property
    @pulumi.getter(name="recoveryNetworkFriendlyName")
    def recovery_network_friendly_name(self) -> Optional[str]:
        """
        The recovery network friendly name.
        """
        return pulumi.get(self, "recovery_network_friendly_name")

    @property
    @pulumi.getter(name="recoveryNetworkId")
    def recovery_network_id(self) -> Optional[str]:
        """
        The recovery network id for network mapping.
        """
        return pulumi.get(self, "recovery_network_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The pairing state for network mapping.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class VCenterPropertiesResponse(dict):
    """
    vCenter properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "discoveryStatus":
            suggest = "discovery_status"
        elif key == "fabricArmResourceName":
            suggest = "fabric_arm_resource_name"
        elif key == "friendlyName":
            suggest = "friendly_name"
        elif key == "healthErrors":
            suggest = "health_errors"
        elif key == "infrastructureId":
            suggest = "infrastructure_id"
        elif key == "internalId":
            suggest = "internal_id"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "lastHeartbeat":
            suggest = "last_heartbeat"
        elif key == "processServerId":
            suggest = "process_server_id"
        elif key == "runAsAccountId":
            suggest = "run_as_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VCenterPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VCenterPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VCenterPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 discovery_status: Optional[str] = None,
                 fabric_arm_resource_name: Optional[str] = None,
                 friendly_name: Optional[str] = None,
                 health_errors: Optional[Sequence['outputs.HealthErrorResponse']] = None,
                 infrastructure_id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 last_heartbeat: Optional[str] = None,
                 port: Optional[str] = None,
                 process_server_id: Optional[str] = None,
                 run_as_account_id: Optional[str] = None):
        """
        vCenter properties.
        :param str discovery_status: The VCenter discovery status.
        :param str fabric_arm_resource_name: The ARM resource name of the fabric containing this VCenter.
        :param str friendly_name: Friendly name of the vCenter.
        :param Sequence['HealthErrorResponse'] health_errors: The health errors for this VCenter.
        :param str infrastructure_id: The infrastructure Id of vCenter.
        :param str internal_id: VCenter internal ID.
        :param str ip_address: The IP address of the vCenter.
        :param str last_heartbeat: The time when the last heartbeat was received by vCenter.
        :param str port: The port number for discovery.
        :param str process_server_id: The process server Id.
        :param str run_as_account_id: The account Id which has privileges to discover the vCenter.
        """
        if discovery_status is not None:
            pulumi.set(__self__, "discovery_status", discovery_status)
        if fabric_arm_resource_name is not None:
            pulumi.set(__self__, "fabric_arm_resource_name", fabric_arm_resource_name)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_errors is not None:
            pulumi.set(__self__, "health_errors", health_errors)
        if infrastructure_id is not None:
            pulumi.set(__self__, "infrastructure_id", infrastructure_id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if last_heartbeat is not None:
            pulumi.set(__self__, "last_heartbeat", last_heartbeat)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if process_server_id is not None:
            pulumi.set(__self__, "process_server_id", process_server_id)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)

    @property
    @pulumi.getter(name="discoveryStatus")
    def discovery_status(self) -> Optional[str]:
        """
        The VCenter discovery status.
        """
        return pulumi.get(self, "discovery_status")

    @property
    @pulumi.getter(name="fabricArmResourceName")
    def fabric_arm_resource_name(self) -> Optional[str]:
        """
        The ARM resource name of the fabric containing this VCenter.
        """
        return pulumi.get(self, "fabric_arm_resource_name")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[str]:
        """
        Friendly name of the vCenter.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter(name="healthErrors")
    def health_errors(self) -> Optional[Sequence['outputs.HealthErrorResponse']]:
        """
        The health errors for this VCenter.
        """
        return pulumi.get(self, "health_errors")

    @property
    @pulumi.getter(name="infrastructureId")
    def infrastructure_id(self) -> Optional[str]:
        """
        The infrastructure Id of vCenter.
        """
        return pulumi.get(self, "infrastructure_id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        """
        VCenter internal ID.
        """
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        The IP address of the vCenter.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="lastHeartbeat")
    def last_heartbeat(self) -> Optional[str]:
        """
        The time when the last heartbeat was received by vCenter.
        """
        return pulumi.get(self, "last_heartbeat")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        The port number for discovery.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="processServerId")
    def process_server_id(self) -> Optional[str]:
        """
        The process server Id.
        """
        return pulumi.get(self, "process_server_id")

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[str]:
        """
        The account Id which has privileges to discover the vCenter.
        """
        return pulumi.get(self, "run_as_account_id")


@pulumi.output_type
class VmmToAzureNetworkMappingSettingsResponse(dict):
    """
    E2A Network Mapping fabric specific settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmmToAzureNetworkMappingSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmmToAzureNetworkMappingSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmmToAzureNetworkMappingSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str):
        """
        E2A Network Mapping fabric specific settings.
        :param str instance_type: Gets the Instance type.
               Expected value is 'VmmToAzure'.
        """
        pulumi.set(__self__, "instance_type", 'VmmToAzure')

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        Expected value is 'VmmToAzure'.
        """
        return pulumi.get(self, "instance_type")


@pulumi.output_type
class VmmToVmmNetworkMappingSettingsResponse(dict):
    """
    E2E Network Mapping fabric specific settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmmToVmmNetworkMappingSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmmToVmmNetworkMappingSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmmToVmmNetworkMappingSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str):
        """
        E2E Network Mapping fabric specific settings.
        :param str instance_type: Gets the Instance type.
               Expected value is 'VmmToVmm'.
        """
        pulumi.set(__self__, "instance_type", 'VmmToVmm')

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        Expected value is 'VmmToVmm'.
        """
        return pulumi.get(self, "instance_type")


