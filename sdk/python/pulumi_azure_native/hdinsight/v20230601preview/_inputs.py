# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities

__all__ = [
    'ClusterPoolResourcePropertiesClusterPoolProfileArgs',
    'ClusterPoolResourcePropertiesClusterPoolProfileArgsDict',
    'ClusterPoolResourcePropertiesComputeProfileArgs',
    'ClusterPoolResourcePropertiesComputeProfileArgsDict',
    'ClusterPoolResourcePropertiesLogAnalyticsProfileArgs',
    'ClusterPoolResourcePropertiesLogAnalyticsProfileArgsDict',
    'ClusterPoolResourcePropertiesNetworkProfileArgs',
    'ClusterPoolResourcePropertiesNetworkProfileArgsDict',
]

MYPY = False

if not MYPY:
    class ClusterPoolResourcePropertiesClusterPoolProfileArgsDict(TypedDict):
        """
        CLuster pool profile.
        """
        cluster_pool_version: pulumi.Input[str]
        """
        Cluster pool version is a 2-part version.
        """
elif False:
    ClusterPoolResourcePropertiesClusterPoolProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterPoolResourcePropertiesClusterPoolProfileArgs:
    def __init__(__self__, *,
                 cluster_pool_version: pulumi.Input[str]):
        """
        CLuster pool profile.
        :param pulumi.Input[str] cluster_pool_version: Cluster pool version is a 2-part version.
        """
        pulumi.set(__self__, "cluster_pool_version", cluster_pool_version)

    @property
    @pulumi.getter(name="clusterPoolVersion")
    def cluster_pool_version(self) -> pulumi.Input[str]:
        """
        Cluster pool version is a 2-part version.
        """
        return pulumi.get(self, "cluster_pool_version")

    @cluster_pool_version.setter
    def cluster_pool_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_pool_version", value)


if not MYPY:
    class ClusterPoolResourcePropertiesComputeProfileArgsDict(TypedDict):
        """
        CLuster pool compute profile.
        """
        vm_size: pulumi.Input[str]
        """
        The virtual machine SKU.
        """
elif False:
    ClusterPoolResourcePropertiesComputeProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterPoolResourcePropertiesComputeProfileArgs:
    def __init__(__self__, *,
                 vm_size: pulumi.Input[str]):
        """
        CLuster pool compute profile.
        :param pulumi.Input[str] vm_size: The virtual machine SKU.
        """
        pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> pulumi.Input[str]:
        """
        The virtual machine SKU.
        """
        return pulumi.get(self, "vm_size")

    @vm_size.setter
    def vm_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_size", value)


if not MYPY:
    class ClusterPoolResourcePropertiesLogAnalyticsProfileArgsDict(TypedDict):
        """
        Cluster pool log analytics profile to enable OMS agent for AKS cluster.
        """
        enabled: pulumi.Input[bool]
        """
        True if log analytics is enabled for cluster pool, otherwise false.
        """
        workspace_id: NotRequired[pulumi.Input[str]]
        """
        Log analytics workspace to associate with the OMS agent.
        """
elif False:
    ClusterPoolResourcePropertiesLogAnalyticsProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterPoolResourcePropertiesLogAnalyticsProfileArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        Cluster pool log analytics profile to enable OMS agent for AKS cluster.
        :param pulumi.Input[bool] enabled: True if log analytics is enabled for cluster pool, otherwise false.
        :param pulumi.Input[str] workspace_id: Log analytics workspace to associate with the OMS agent.
        """
        pulumi.set(__self__, "enabled", enabled)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        True if log analytics is enabled for cluster pool, otherwise false.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Log analytics workspace to associate with the OMS agent.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


if not MYPY:
    class ClusterPoolResourcePropertiesNetworkProfileArgsDict(TypedDict):
        """
        Cluster pool network profile.
        """
        subnet_id: pulumi.Input[str]
        """
        Cluster pool subnet resource id.
        """
elif False:
    ClusterPoolResourcePropertiesNetworkProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterPoolResourcePropertiesNetworkProfileArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str]):
        """
        Cluster pool network profile.
        :param pulumi.Input[str] subnet_id: Cluster pool subnet resource id.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Cluster pool subnet resource id.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)


