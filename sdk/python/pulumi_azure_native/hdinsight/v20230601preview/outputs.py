# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'AksClusterProfileResponseAksClusterAgentPoolIdentityProfile',
    'ClusterPoolResourcePropertiesResponseAksClusterProfile',
    'ClusterPoolResourcePropertiesResponseClusterPoolProfile',
    'ClusterPoolResourcePropertiesResponseComputeProfile',
    'ClusterPoolResourcePropertiesResponseLogAnalyticsProfile',
    'ClusterPoolResourcePropertiesResponseNetworkProfile',
    'SystemDataResponse',
]

@pulumi.output_type
class AksClusterProfileResponseAksClusterAgentPoolIdentityProfile(dict):
    """
    Identity properties of the AKS cluster agentpool MSI
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msiClientId":
            suggest = "msi_client_id"
        elif key == "msiObjectId":
            suggest = "msi_object_id"
        elif key == "msiResourceId":
            suggest = "msi_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AksClusterProfileResponseAksClusterAgentPoolIdentityProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AksClusterProfileResponseAksClusterAgentPoolIdentityProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AksClusterProfileResponseAksClusterAgentPoolIdentityProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 msi_client_id: str,
                 msi_object_id: str,
                 msi_resource_id: str):
        """
        Identity properties of the AKS cluster agentpool MSI
        :param str msi_client_id: ClientId of the MSI.
        :param str msi_object_id: ObjectId of the MSI.
        :param str msi_resource_id: ResourceId of the MSI.
        """
        pulumi.set(__self__, "msi_client_id", msi_client_id)
        pulumi.set(__self__, "msi_object_id", msi_object_id)
        pulumi.set(__self__, "msi_resource_id", msi_resource_id)

    @property
    @pulumi.getter(name="msiClientId")
    def msi_client_id(self) -> str:
        """
        ClientId of the MSI.
        """
        return pulumi.get(self, "msi_client_id")

    @property
    @pulumi.getter(name="msiObjectId")
    def msi_object_id(self) -> str:
        """
        ObjectId of the MSI.
        """
        return pulumi.get(self, "msi_object_id")

    @property
    @pulumi.getter(name="msiResourceId")
    def msi_resource_id(self) -> str:
        """
        ResourceId of the MSI.
        """
        return pulumi.get(self, "msi_resource_id")


@pulumi.output_type
class ClusterPoolResourcePropertiesResponseAksClusterProfile(dict):
    """
    Properties of underlying AKS cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aksVersion":
            suggest = "aks_version"
        elif key == "aksClusterAgentPoolIdentityProfile":
            suggest = "aks_cluster_agent_pool_identity_profile"
        elif key == "aksClusterResourceId":
            suggest = "aks_cluster_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPoolResourcePropertiesResponseAksClusterProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPoolResourcePropertiesResponseAksClusterProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPoolResourcePropertiesResponseAksClusterProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aks_version: str,
                 aks_cluster_agent_pool_identity_profile: Optional['outputs.AksClusterProfileResponseAksClusterAgentPoolIdentityProfile'] = None,
                 aks_cluster_resource_id: Optional[str] = None):
        """
        Properties of underlying AKS cluster.
        :param str aks_version: AKS control plane and default node pool version of this ClusterPool
        :param 'AksClusterProfileResponseAksClusterAgentPoolIdentityProfile' aks_cluster_agent_pool_identity_profile: Identity properties of the AKS cluster agentpool MSI
        :param str aks_cluster_resource_id: ARM Resource ID of the AKS cluster
        """
        pulumi.set(__self__, "aks_version", aks_version)
        if aks_cluster_agent_pool_identity_profile is not None:
            pulumi.set(__self__, "aks_cluster_agent_pool_identity_profile", aks_cluster_agent_pool_identity_profile)
        if aks_cluster_resource_id is not None:
            pulumi.set(__self__, "aks_cluster_resource_id", aks_cluster_resource_id)

    @property
    @pulumi.getter(name="aksVersion")
    def aks_version(self) -> str:
        """
        AKS control plane and default node pool version of this ClusterPool
        """
        return pulumi.get(self, "aks_version")

    @property
    @pulumi.getter(name="aksClusterAgentPoolIdentityProfile")
    def aks_cluster_agent_pool_identity_profile(self) -> Optional['outputs.AksClusterProfileResponseAksClusterAgentPoolIdentityProfile']:
        """
        Identity properties of the AKS cluster agentpool MSI
        """
        return pulumi.get(self, "aks_cluster_agent_pool_identity_profile")

    @property
    @pulumi.getter(name="aksClusterResourceId")
    def aks_cluster_resource_id(self) -> Optional[str]:
        """
        ARM Resource ID of the AKS cluster
        """
        return pulumi.get(self, "aks_cluster_resource_id")


@pulumi.output_type
class ClusterPoolResourcePropertiesResponseClusterPoolProfile(dict):
    """
    CLuster pool profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterPoolVersion":
            suggest = "cluster_pool_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPoolResourcePropertiesResponseClusterPoolProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPoolResourcePropertiesResponseClusterPoolProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPoolResourcePropertiesResponseClusterPoolProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_pool_version: str):
        """
        CLuster pool profile.
        :param str cluster_pool_version: Cluster pool version is a 2-part version.
        """
        pulumi.set(__self__, "cluster_pool_version", cluster_pool_version)

    @property
    @pulumi.getter(name="clusterPoolVersion")
    def cluster_pool_version(self) -> str:
        """
        Cluster pool version is a 2-part version.
        """
        return pulumi.get(self, "cluster_pool_version")


@pulumi.output_type
class ClusterPoolResourcePropertiesResponseComputeProfile(dict):
    """
    CLuster pool compute profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmSize":
            suggest = "vm_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPoolResourcePropertiesResponseComputeProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPoolResourcePropertiesResponseComputeProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPoolResourcePropertiesResponseComputeProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: int,
                 vm_size: str):
        """
        CLuster pool compute profile.
        :param int count: The number of virtual machines.
        :param str vm_size: The virtual machine SKU.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of virtual machines.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> str:
        """
        The virtual machine SKU.
        """
        return pulumi.get(self, "vm_size")


@pulumi.output_type
class ClusterPoolResourcePropertiesResponseLogAnalyticsProfile(dict):
    """
    Cluster pool log analytics profile to enable OMS agent for AKS cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workspaceId":
            suggest = "workspace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPoolResourcePropertiesResponseLogAnalyticsProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPoolResourcePropertiesResponseLogAnalyticsProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPoolResourcePropertiesResponseLogAnalyticsProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 workspace_id: Optional[str] = None):
        """
        Cluster pool log analytics profile to enable OMS agent for AKS cluster.
        :param bool enabled: True if log analytics is enabled for cluster pool, otherwise false.
        :param str workspace_id: Log analytics workspace to associate with the OMS agent.
        """
        pulumi.set(__self__, "enabled", enabled)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        True if log analytics is enabled for cluster pool, otherwise false.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[str]:
        """
        Log analytics workspace to associate with the OMS agent.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class ClusterPoolResourcePropertiesResponseNetworkProfile(dict):
    """
    Cluster pool network profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPoolResourcePropertiesResponseNetworkProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPoolResourcePropertiesResponseNetworkProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPoolResourcePropertiesResponseNetworkProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str):
        """
        Cluster pool network profile.
        :param str subnet_id: Cluster pool subnet resource id.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Cluster pool subnet resource id.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


