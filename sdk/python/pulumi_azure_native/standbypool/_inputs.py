# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ContainerGroupProfileArgs',
    'ContainerGroupPropertiesArgs',
    'StandbyContainerGroupPoolElasticityProfileArgs',
    'StandbyVirtualMachinePoolElasticityProfileArgs',
    'SubnetArgs',
]

@pulumi.input_type
class ContainerGroupProfileArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 revision: Optional[pulumi.Input[float]] = None):
        """
        Details of the ContainerGroupProfile.
        :param pulumi.Input[str] id: Specifies container group profile id of standby container groups.
        :param pulumi.Input[float] revision: Specifies revision of container group profile.
        """
        pulumi.set(__self__, "id", id)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Specifies container group profile id of standby container groups.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies revision of container group profile.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "revision", value)


@pulumi.input_type
class ContainerGroupPropertiesArgs:
    def __init__(__self__, *,
                 container_group_profile: pulumi.Input['ContainerGroupProfileArgs'],
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetArgs']]]] = None):
        """
        Details of the ContainerGroupProperties.
        :param pulumi.Input['ContainerGroupProfileArgs'] container_group_profile: Specifies container group profile of standby container groups.
        :param pulumi.Input[Sequence[pulumi.Input['SubnetArgs']]] subnet_ids: Specifies subnet Ids for container group.
        """
        pulumi.set(__self__, "container_group_profile", container_group_profile)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="containerGroupProfile")
    def container_group_profile(self) -> pulumi.Input['ContainerGroupProfileArgs']:
        """
        Specifies container group profile of standby container groups.
        """
        return pulumi.get(self, "container_group_profile")

    @container_group_profile.setter
    def container_group_profile(self, value: pulumi.Input['ContainerGroupProfileArgs']):
        pulumi.set(self, "container_group_profile", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetArgs']]]]:
        """
        Specifies subnet Ids for container group.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetArgs']]]]):
        pulumi.set(self, "subnet_ids", value)


@pulumi.input_type
class StandbyContainerGroupPoolElasticityProfileArgs:
    def __init__(__self__, *,
                 max_ready_capacity: pulumi.Input[float],
                 refill_policy: Optional[pulumi.Input[Union[str, 'RefillPolicy']]] = None):
        """
        Specifies the elasticity profile of the standby container group pools.
        :param pulumi.Input[float] max_ready_capacity: Specifies maximum number of standby container groups in the standby pool.
        :param pulumi.Input[Union[str, 'RefillPolicy']] refill_policy: Specifies refill policy of the pool.
        """
        pulumi.set(__self__, "max_ready_capacity", max_ready_capacity)
        if refill_policy is not None:
            pulumi.set(__self__, "refill_policy", refill_policy)

    @property
    @pulumi.getter(name="maxReadyCapacity")
    def max_ready_capacity(self) -> pulumi.Input[float]:
        """
        Specifies maximum number of standby container groups in the standby pool.
        """
        return pulumi.get(self, "max_ready_capacity")

    @max_ready_capacity.setter
    def max_ready_capacity(self, value: pulumi.Input[float]):
        pulumi.set(self, "max_ready_capacity", value)

    @property
    @pulumi.getter(name="refillPolicy")
    def refill_policy(self) -> Optional[pulumi.Input[Union[str, 'RefillPolicy']]]:
        """
        Specifies refill policy of the pool.
        """
        return pulumi.get(self, "refill_policy")

    @refill_policy.setter
    def refill_policy(self, value: Optional[pulumi.Input[Union[str, 'RefillPolicy']]]):
        pulumi.set(self, "refill_policy", value)


@pulumi.input_type
class StandbyVirtualMachinePoolElasticityProfileArgs:
    def __init__(__self__, *,
                 max_ready_capacity: pulumi.Input[float]):
        """
        Details of the elasticity profile.
        :param pulumi.Input[float] max_ready_capacity: Specifies maximum number of virtual machines in the standby virtual machine pool.
        """
        pulumi.set(__self__, "max_ready_capacity", max_ready_capacity)

    @property
    @pulumi.getter(name="maxReadyCapacity")
    def max_ready_capacity(self) -> pulumi.Input[float]:
        """
        Specifies maximum number of virtual machines in the standby virtual machine pool.
        """
        return pulumi.get(self, "max_ready_capacity")

    @max_ready_capacity.setter
    def max_ready_capacity(self, value: pulumi.Input[float]):
        pulumi.set(self, "max_ready_capacity", value)


@pulumi.input_type
class SubnetArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        Subnet of container group
        :param pulumi.Input[str] id: Specifies ARM resource id of the subnet.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Specifies ARM resource id of the subnet.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


