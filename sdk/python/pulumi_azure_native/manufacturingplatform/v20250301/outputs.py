# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AdxProfileResponse',
    'AksProfileResponse',
    'ApplicationVersionResponse',
    'CmkProfileResponse',
    'DatabaseProfileResponse',
    'DenyAssignmentExclusionResponse',
    'EventHubProfileResponse',
    'FabricProfileResponse',
    'FunctionAppProfileResponse',
    'ManagedOnBehalfOfConfigurationResponse',
    'ManagedResourceGroupConfigurationResponse',
    'ManagedServiceIdentityResponse',
    'MdsResourcePropertiesResponse',
    'MoboBrokerResourceResponse',
    'MonitoringProfileResponse',
    'OpenAIProfileResponse',
    'RedisProfileResponse',
    'SkuResponse',
    'StorageProfileResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
    'UserManagedOpenAIProfileResponse',
]

@pulumi.output_type
class AdxProfileResponse(dict):
    """
    The properties related to Azure Data Explorer (Adx) Resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataIngestionUri":
            suggest = "data_ingestion_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdxProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdxProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdxProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_ingestion_uri: str,
                 id: str,
                 uri: str):
        """
        The properties related to Azure Data Explorer (Adx) Resource
        :param str data_ingestion_uri: Data Ingestion Uri of Adx Resource
        :param str id: Resource Id of Adx Resource
        :param str uri: Uri of Adx Resource
        """
        pulumi.set(__self__, "data_ingestion_uri", data_ingestion_uri)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="dataIngestionUri")
    def data_ingestion_uri(self) -> str:
        """
        Data Ingestion Uri of Adx Resource
        """
        return pulumi.get(self, "data_ingestion_uri")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id of Adx Resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        Uri of Adx Resource
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class AksProfileResponse(dict):
    """
    The properties related to Aks Resource
    """
    def __init__(__self__, *,
                 id: str):
        """
        The properties related to Aks Resource
        :param str id: Resource Id of AKS Resource
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id of AKS Resource
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ApplicationVersionResponse(dict):
    """
    Information about application versions
    """
    def __init__(__self__, *,
                 is_deprecated: bool,
                 is_latest: bool,
                 is_preview: bool,
                 version: str):
        """
        Information about application versions
        :param bool is_deprecated: Is Deprecated
        :param bool is_latest: Is Latest
        :param bool is_preview: Is Preview
        :param str version: Application Version
        """
        pulumi.set(__self__, "is_deprecated", is_deprecated)
        pulumi.set(__self__, "is_latest", is_latest)
        pulumi.set(__self__, "is_preview", is_preview)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="isDeprecated")
    def is_deprecated(self) -> bool:
        """
        Is Deprecated
        """
        return pulumi.get(self, "is_deprecated")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> bool:
        """
        Is Latest
        """
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter(name="isPreview")
    def is_preview(self) -> bool:
        """
        Is Preview
        """
        return pulumi.get(self, "is_preview")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Application Version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class CmkProfileResponse(dict):
    """
    The properties related to CMK
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyUri":
            suggest = "key_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CmkProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CmkProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CmkProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_uri: str):
        """
        The properties related to CMK
        :param str key_uri: URI of Key in AKV
        """
        pulumi.set(__self__, "key_uri", key_uri)

    @property
    @pulumi.getter(name="keyUri")
    def key_uri(self) -> str:
        """
        URI of Key in AKV
        """
        return pulumi.get(self, "key_uri")


@pulumi.output_type
class DatabaseProfileResponse(dict):
    """
    The properties related to Database Resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosmosId":
            suggest = "cosmos_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cosmos_id: str):
        """
        The properties related to Database Resource
        :param str cosmos_id: Resource Id of Cosmos Resource
        """
        pulumi.set(__self__, "cosmos_id", cosmos_id)

    @property
    @pulumi.getter(name="cosmosId")
    def cosmos_id(self) -> str:
        """
        Resource Id of Cosmos Resource
        """
        return pulumi.get(self, "cosmos_id")


@pulumi.output_type
class DenyAssignmentExclusionResponse(dict):
    """
    The properties related to Deny Assignment Exclusions
    """
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        The properties related to Deny Assignment Exclusions
        :param str id: Object Id of Identity
        :param str type: Type of Identity
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Object Id of Identity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Identity
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EventHubProfileResponse(dict):
    """
    The properties related to EventHub Resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adxInstanceId":
            suggest = "adx_instance_id"
        elif key == "hostName":
            suggest = "host_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventHubProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventHubProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventHubProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adx_instance_id: str,
                 host_name: str):
        """
        The properties related to EventHub Resource
        :param str adx_instance_id: Resource Id of Adx Instance
        :param str host_name: Host Name
        """
        pulumi.set(__self__, "adx_instance_id", adx_instance_id)
        pulumi.set(__self__, "host_name", host_name)

    @property
    @pulumi.getter(name="adxInstanceId")
    def adx_instance_id(self) -> str:
        """
        Resource Id of Adx Instance
        """
        return pulumi.get(self, "adx_instance_id")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        Host Name
        """
        return pulumi.get(self, "host_name")


@pulumi.output_type
class FabricProfileResponse(dict):
    """
    The properties related to Fabric
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyUri":
            suggest = "key_uri"
        elif key == "oneLakePath":
            suggest = "one_lake_path"
        elif key == "oneLakeUri":
            suggest = "one_lake_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FabricProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FabricProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FabricProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_uri: str,
                 one_lake_path: str,
                 one_lake_uri: str):
        """
        The properties related to Fabric
        :param str key_uri: Azure Key Vault Uri
        :param str one_lake_path: One Lake Path
        :param str one_lake_uri: URI of One Lake
        """
        pulumi.set(__self__, "key_uri", key_uri)
        pulumi.set(__self__, "one_lake_path", one_lake_path)
        pulumi.set(__self__, "one_lake_uri", one_lake_uri)

    @property
    @pulumi.getter(name="keyUri")
    def key_uri(self) -> str:
        """
        Azure Key Vault Uri
        """
        return pulumi.get(self, "key_uri")

    @property
    @pulumi.getter(name="oneLakePath")
    def one_lake_path(self) -> str:
        """
        One Lake Path
        """
        return pulumi.get(self, "one_lake_path")

    @property
    @pulumi.getter(name="oneLakeUri")
    def one_lake_uri(self) -> str:
        """
        URI of One Lake
        """
        return pulumi.get(self, "one_lake_uri")


@pulumi.output_type
class FunctionAppProfileResponse(dict):
    """
    The properties related to Azure Function App Resource
    """
    def __init__(__self__, *,
                 id: str):
        """
        The properties related to Azure Function App Resource
        :param str id: Resource Id of Azure Function App Resource
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id of Azure Function App Resource
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ManagedOnBehalfOfConfigurationResponse(dict):
    """
    Configuration of the managed on behalf of resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moboBrokerResources":
            suggest = "mobo_broker_resources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedOnBehalfOfConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedOnBehalfOfConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedOnBehalfOfConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mobo_broker_resources: Sequence['outputs.MoboBrokerResourceResponse']):
        """
        Configuration of the managed on behalf of resource.
        :param Sequence['MoboBrokerResourceResponse'] mobo_broker_resources: Associated MoboBrokerResources.
        """
        pulumi.set(__self__, "mobo_broker_resources", mobo_broker_resources)

    @property
    @pulumi.getter(name="moboBrokerResources")
    def mobo_broker_resources(self) -> Sequence['outputs.MoboBrokerResourceResponse']:
        """
        Associated MoboBrokerResources.
        """
        return pulumi.get(self, "mobo_broker_resources")


@pulumi.output_type
class ManagedResourceGroupConfigurationResponse(dict):
    """
    Configuration of the managed resource group associated with the resource.
    """
    def __init__(__self__, *,
                 location: str,
                 name: str):
        """
        Configuration of the managed resource group associated with the resource.
        :param str location: The resource group location.
        :param str name: The resource group name.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The resource group location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class MdsResourcePropertiesResponse(dict):
    """
    Details of the ManufacturingPlatform MdsResource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aadApplicationId":
            suggest = "aad_application_id"
        elif key == "adxProfile":
            suggest = "adx_profile"
        elif key == "aksProfile":
            suggest = "aks_profile"
        elif key == "databaseProfile":
            suggest = "database_profile"
        elif key == "eventHubProfile":
            suggest = "event_hub_profile"
        elif key == "functionAppProfile":
            suggest = "function_app_profile"
        elif key == "managedOnBehalfOfConfiguration":
            suggest = "managed_on_behalf_of_configuration"
        elif key == "managedResourceGroupConfiguration":
            suggest = "managed_resource_group_configuration"
        elif key == "monitoringProfile":
            suggest = "monitoring_profile"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "redisProfile":
            suggest = "redis_profile"
        elif key == "serviceUrl":
            suggest = "service_url"
        elif key == "storageProfile":
            suggest = "storage_profile"
        elif key == "aksAdminGroupId":
            suggest = "aks_admin_group_id"
        elif key == "cmkProfile":
            suggest = "cmk_profile"
        elif key == "denyAssignmentExclusions":
            suggest = "deny_assignment_exclusions"
        elif key == "enableCopilot":
            suggest = "enable_copilot"
        elif key == "enableDiagnosticSettings":
            suggest = "enable_diagnostic_settings"
        elif key == "fabricProfile":
            suggest = "fabric_profile"
        elif key == "openAIProfile":
            suggest = "open_ai_profile"
        elif key == "redundancyState":
            suggest = "redundancy_state"
        elif key == "resourceState":
            suggest = "resource_state"
        elif key == "userManagedOpenAIProfile":
            suggest = "user_managed_open_ai_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdsResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdsResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdsResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aad_application_id: str,
                 adx_profile: 'outputs.AdxProfileResponse',
                 aks_profile: 'outputs.AksProfileResponse',
                 database_profile: 'outputs.DatabaseProfileResponse',
                 event_hub_profile: 'outputs.EventHubProfileResponse',
                 function_app_profile: 'outputs.FunctionAppProfileResponse',
                 managed_on_behalf_of_configuration: 'outputs.ManagedOnBehalfOfConfigurationResponse',
                 managed_resource_group_configuration: 'outputs.ManagedResourceGroupConfigurationResponse',
                 monitoring_profile: 'outputs.MonitoringProfileResponse',
                 provisioning_state: str,
                 redis_profile: 'outputs.RedisProfileResponse',
                 service_url: str,
                 storage_profile: 'outputs.StorageProfileResponse',
                 aks_admin_group_id: Optional[str] = None,
                 cmk_profile: Optional['outputs.CmkProfileResponse'] = None,
                 deny_assignment_exclusions: Optional[Sequence['outputs.DenyAssignmentExclusionResponse']] = None,
                 enable_copilot: Optional[bool] = None,
                 enable_diagnostic_settings: Optional[bool] = None,
                 fabric_profile: Optional['outputs.FabricProfileResponse'] = None,
                 open_ai_profile: Optional['outputs.OpenAIProfileResponse'] = None,
                 redundancy_state: Optional[str] = None,
                 resource_state: Optional[str] = None,
                 user_managed_open_ai_profile: Optional['outputs.UserManagedOpenAIProfileResponse'] = None,
                 version: Optional[str] = None):
        """
        Details of the ManufacturingPlatform MdsResource.
        :param str aad_application_id: AAD Application Id.
        :param 'AdxProfileResponse' adx_profile: Profile of Adx Created.
        :param 'AksProfileResponse' aks_profile: Profile of AKS Created.
        :param 'DatabaseProfileResponse' database_profile: Profile of Database Created.
        :param 'EventHubProfileResponse' event_hub_profile: Profile of EventHub Resource.
        :param 'FunctionAppProfileResponse' function_app_profile: Profile of Function App Resource.
        :param 'ManagedOnBehalfOfConfigurationResponse' managed_on_behalf_of_configuration: Managed On Behalf Of Configuration.
        :param 'ManagedResourceGroupConfigurationResponse' managed_resource_group_configuration: Configuration of the managed resource group associated with the resource.
        :param 'MonitoringProfileResponse' monitoring_profile: Profile of Monitoring Resource Created.
        :param str provisioning_state: The status of the last operation.
        :param 'RedisProfileResponse' redis_profile: Profile of Azure Redis Created.
        :param str service_url: Service Url
        :param 'StorageProfileResponse' storage_profile: Profile of Storage Created.
        :param str aks_admin_group_id: AKS Admin Group Id.
        :param 'CmkProfileResponse' cmk_profile: Profile of CMK Settings.
        :param Sequence['DenyAssignmentExclusionResponse'] deny_assignment_exclusions: Deny Assignments exclusion list.
        :param bool enable_copilot: Enable Copilot.
        :param bool enable_diagnostic_settings: Enable Diagnostic Settings.
        :param 'FabricProfileResponse' fabric_profile: Profile of Fabric resources.
        :param 'OpenAIProfileResponse' open_ai_profile: Profile of OpenAI Resource.
        :param str redundancy_state: Zone redundancy state for resources
        :param str resource_state: State of the resource
        :param 'UserManagedOpenAIProfileResponse' user_managed_open_ai_profile: Profile of User Managed OpenAI Resource.
        :param str version: Mds Resource Version.
        """
        pulumi.set(__self__, "aad_application_id", aad_application_id)
        pulumi.set(__self__, "adx_profile", adx_profile)
        pulumi.set(__self__, "aks_profile", aks_profile)
        pulumi.set(__self__, "database_profile", database_profile)
        pulumi.set(__self__, "event_hub_profile", event_hub_profile)
        pulumi.set(__self__, "function_app_profile", function_app_profile)
        pulumi.set(__self__, "managed_on_behalf_of_configuration", managed_on_behalf_of_configuration)
        pulumi.set(__self__, "managed_resource_group_configuration", managed_resource_group_configuration)
        pulumi.set(__self__, "monitoring_profile", monitoring_profile)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "redis_profile", redis_profile)
        pulumi.set(__self__, "service_url", service_url)
        pulumi.set(__self__, "storage_profile", storage_profile)
        if aks_admin_group_id is None:
            aks_admin_group_id = '00000000-0000-0000-0000-000000000000'
        if aks_admin_group_id is not None:
            pulumi.set(__self__, "aks_admin_group_id", aks_admin_group_id)
        if cmk_profile is not None:
            pulumi.set(__self__, "cmk_profile", cmk_profile)
        if deny_assignment_exclusions is not None:
            pulumi.set(__self__, "deny_assignment_exclusions", deny_assignment_exclusions)
        if enable_copilot is not None:
            pulumi.set(__self__, "enable_copilot", enable_copilot)
        if enable_diagnostic_settings is not None:
            pulumi.set(__self__, "enable_diagnostic_settings", enable_diagnostic_settings)
        if fabric_profile is not None:
            pulumi.set(__self__, "fabric_profile", fabric_profile)
        if open_ai_profile is not None:
            pulumi.set(__self__, "open_ai_profile", open_ai_profile)
        if redundancy_state is not None:
            pulumi.set(__self__, "redundancy_state", redundancy_state)
        if resource_state is not None:
            pulumi.set(__self__, "resource_state", resource_state)
        if user_managed_open_ai_profile is not None:
            pulumi.set(__self__, "user_managed_open_ai_profile", user_managed_open_ai_profile)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="aadApplicationId")
    def aad_application_id(self) -> str:
        """
        AAD Application Id.
        """
        return pulumi.get(self, "aad_application_id")

    @property
    @pulumi.getter(name="adxProfile")
    def adx_profile(self) -> 'outputs.AdxProfileResponse':
        """
        Profile of Adx Created.
        """
        return pulumi.get(self, "adx_profile")

    @property
    @pulumi.getter(name="aksProfile")
    def aks_profile(self) -> 'outputs.AksProfileResponse':
        """
        Profile of AKS Created.
        """
        return pulumi.get(self, "aks_profile")

    @property
    @pulumi.getter(name="databaseProfile")
    def database_profile(self) -> 'outputs.DatabaseProfileResponse':
        """
        Profile of Database Created.
        """
        return pulumi.get(self, "database_profile")

    @property
    @pulumi.getter(name="eventHubProfile")
    def event_hub_profile(self) -> 'outputs.EventHubProfileResponse':
        """
        Profile of EventHub Resource.
        """
        return pulumi.get(self, "event_hub_profile")

    @property
    @pulumi.getter(name="functionAppProfile")
    def function_app_profile(self) -> 'outputs.FunctionAppProfileResponse':
        """
        Profile of Function App Resource.
        """
        return pulumi.get(self, "function_app_profile")

    @property
    @pulumi.getter(name="managedOnBehalfOfConfiguration")
    def managed_on_behalf_of_configuration(self) -> 'outputs.ManagedOnBehalfOfConfigurationResponse':
        """
        Managed On Behalf Of Configuration.
        """
        return pulumi.get(self, "managed_on_behalf_of_configuration")

    @property
    @pulumi.getter(name="managedResourceGroupConfiguration")
    def managed_resource_group_configuration(self) -> 'outputs.ManagedResourceGroupConfigurationResponse':
        """
        Configuration of the managed resource group associated with the resource.
        """
        return pulumi.get(self, "managed_resource_group_configuration")

    @property
    @pulumi.getter(name="monitoringProfile")
    def monitoring_profile(self) -> 'outputs.MonitoringProfileResponse':
        """
        Profile of Monitoring Resource Created.
        """
        return pulumi.get(self, "monitoring_profile")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="redisProfile")
    def redis_profile(self) -> 'outputs.RedisProfileResponse':
        """
        Profile of Azure Redis Created.
        """
        return pulumi.get(self, "redis_profile")

    @property
    @pulumi.getter(name="serviceUrl")
    def service_url(self) -> str:
        """
        Service Url
        """
        return pulumi.get(self, "service_url")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> 'outputs.StorageProfileResponse':
        """
        Profile of Storage Created.
        """
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter(name="aksAdminGroupId")
    def aks_admin_group_id(self) -> Optional[str]:
        """
        AKS Admin Group Id.
        """
        return pulumi.get(self, "aks_admin_group_id")

    @property
    @pulumi.getter(name="cmkProfile")
    def cmk_profile(self) -> Optional['outputs.CmkProfileResponse']:
        """
        Profile of CMK Settings.
        """
        return pulumi.get(self, "cmk_profile")

    @property
    @pulumi.getter(name="denyAssignmentExclusions")
    def deny_assignment_exclusions(self) -> Optional[Sequence['outputs.DenyAssignmentExclusionResponse']]:
        """
        Deny Assignments exclusion list.
        """
        return pulumi.get(self, "deny_assignment_exclusions")

    @property
    @pulumi.getter(name="enableCopilot")
    def enable_copilot(self) -> Optional[bool]:
        """
        Enable Copilot.
        """
        return pulumi.get(self, "enable_copilot")

    @property
    @pulumi.getter(name="enableDiagnosticSettings")
    def enable_diagnostic_settings(self) -> Optional[bool]:
        """
        Enable Diagnostic Settings.
        """
        return pulumi.get(self, "enable_diagnostic_settings")

    @property
    @pulumi.getter(name="fabricProfile")
    def fabric_profile(self) -> Optional['outputs.FabricProfileResponse']:
        """
        Profile of Fabric resources.
        """
        return pulumi.get(self, "fabric_profile")

    @property
    @pulumi.getter(name="openAIProfile")
    def open_ai_profile(self) -> Optional['outputs.OpenAIProfileResponse']:
        """
        Profile of OpenAI Resource.
        """
        return pulumi.get(self, "open_ai_profile")

    @property
    @pulumi.getter(name="redundancyState")
    def redundancy_state(self) -> Optional[str]:
        """
        Zone redundancy state for resources
        """
        return pulumi.get(self, "redundancy_state")

    @property
    @pulumi.getter(name="resourceState")
    def resource_state(self) -> Optional[str]:
        """
        State of the resource
        """
        return pulumi.get(self, "resource_state")

    @property
    @pulumi.getter(name="userManagedOpenAIProfile")
    def user_managed_open_ai_profile(self) -> Optional['outputs.UserManagedOpenAIProfileResponse']:
        """
        Profile of User Managed OpenAI Resource.
        """
        return pulumi.get(self, "user_managed_open_ai_profile")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Mds Resource Version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class MoboBrokerResourceResponse(dict):
    """
    MoboBroker resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        MoboBroker resource.
        :param str id: Resource Id of MoboBrokerResource
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id of MoboBrokerResource
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class MonitoringProfileResponse(dict):
    """
    The properties related to Monitoring Resource
    """
    def __init__(__self__, *,
                 id: str):
        """
        The properties related to Monitoring Resource
        :param str id: Resource Id of Application Insights Resource
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id of Application Insights Resource
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class OpenAIProfileResponse(dict):
    """
    The properties related to OpenAI Resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "embeddingModelCapacity":
            suggest = "embedding_model_capacity"
        elif key == "embeddingModelName":
            suggest = "embedding_model_name"
        elif key == "embeddingModelSkuName":
            suggest = "embedding_model_sku_name"
        elif key == "embeddingModelVersion":
            suggest = "embedding_model_version"
        elif key == "gptModelCapacity":
            suggest = "gpt_model_capacity"
        elif key == "gptModelName":
            suggest = "gpt_model_name"
        elif key == "gptModelSkuName":
            suggest = "gpt_model_sku_name"
        elif key == "gptModelVersion":
            suggest = "gpt_model_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpenAIProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpenAIProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpenAIProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 embedding_model_capacity: Optional[int] = None,
                 embedding_model_name: Optional[str] = None,
                 embedding_model_sku_name: Optional[str] = None,
                 embedding_model_version: Optional[str] = None,
                 gpt_model_capacity: Optional[int] = None,
                 gpt_model_name: Optional[str] = None,
                 gpt_model_sku_name: Optional[str] = None,
                 gpt_model_version: Optional[str] = None):
        """
        The properties related to OpenAI Resource
        :param str id: Resource Id of OpenAI Resource
        :param int embedding_model_capacity: Embedding Model Capacity
        :param str embedding_model_name: Embedding Model Name
        :param str embedding_model_sku_name: Embedding Model SKU Name
        :param str embedding_model_version: Embedding Model Version
        :param int gpt_model_capacity: GPT Model Capacity
        :param str gpt_model_name: GPT Model Name
        :param str gpt_model_sku_name: GPT Model SKU Name
        :param str gpt_model_version: GPT Model Version
        """
        pulumi.set(__self__, "id", id)
        if embedding_model_capacity is not None:
            pulumi.set(__self__, "embedding_model_capacity", embedding_model_capacity)
        if embedding_model_name is not None:
            pulumi.set(__self__, "embedding_model_name", embedding_model_name)
        if embedding_model_sku_name is not None:
            pulumi.set(__self__, "embedding_model_sku_name", embedding_model_sku_name)
        if embedding_model_version is not None:
            pulumi.set(__self__, "embedding_model_version", embedding_model_version)
        if gpt_model_capacity is not None:
            pulumi.set(__self__, "gpt_model_capacity", gpt_model_capacity)
        if gpt_model_name is not None:
            pulumi.set(__self__, "gpt_model_name", gpt_model_name)
        if gpt_model_sku_name is not None:
            pulumi.set(__self__, "gpt_model_sku_name", gpt_model_sku_name)
        if gpt_model_version is not None:
            pulumi.set(__self__, "gpt_model_version", gpt_model_version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id of OpenAI Resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="embeddingModelCapacity")
    def embedding_model_capacity(self) -> Optional[int]:
        """
        Embedding Model Capacity
        """
        return pulumi.get(self, "embedding_model_capacity")

    @property
    @pulumi.getter(name="embeddingModelName")
    def embedding_model_name(self) -> Optional[str]:
        """
        Embedding Model Name
        """
        return pulumi.get(self, "embedding_model_name")

    @property
    @pulumi.getter(name="embeddingModelSkuName")
    def embedding_model_sku_name(self) -> Optional[str]:
        """
        Embedding Model SKU Name
        """
        return pulumi.get(self, "embedding_model_sku_name")

    @property
    @pulumi.getter(name="embeddingModelVersion")
    def embedding_model_version(self) -> Optional[str]:
        """
        Embedding Model Version
        """
        return pulumi.get(self, "embedding_model_version")

    @property
    @pulumi.getter(name="gptModelCapacity")
    def gpt_model_capacity(self) -> Optional[int]:
        """
        GPT Model Capacity
        """
        return pulumi.get(self, "gpt_model_capacity")

    @property
    @pulumi.getter(name="gptModelName")
    def gpt_model_name(self) -> Optional[str]:
        """
        GPT Model Name
        """
        return pulumi.get(self, "gpt_model_name")

    @property
    @pulumi.getter(name="gptModelSkuName")
    def gpt_model_sku_name(self) -> Optional[str]:
        """
        GPT Model SKU Name
        """
        return pulumi.get(self, "gpt_model_sku_name")

    @property
    @pulumi.getter(name="gptModelVersion")
    def gpt_model_version(self) -> Optional[str]:
        """
        GPT Model Version
        """
        return pulumi.get(self, "gpt_model_version")


@pulumi.output_type
class RedisProfileResponse(dict):
    """
    The properties related to Azure Redis Cache Resource
    """
    def __init__(__self__, *,
                 id: str):
        """
        The properties related to Azure Redis Cache Resource
        :param str id: Resource Id of Azure Redis Cache Resource
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id of Azure Redis Cache Resource
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SkuResponse(dict):
    """
    The resource model definition representing SKU
    """
    def __init__(__self__, *,
                 name: str,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        The resource model definition representing SKU
        :param str name: The name of the SKU. E.g. P3. It is typically a letter+number code
        :param int capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param str family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param str size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param str tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SKU. E.g. P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class StorageProfileResponse(dict):
    """
    The properties related to Storage Resource
    """
    def __init__(__self__, *,
                 id: str):
        """
        The properties related to Storage Resource
        :param str id: Resource Id of Storage Resource
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id of Storage Resource
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class UserManagedOpenAIProfileResponse(dict):
    """
    The properties related to User Managed OpenAI Resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "embeddingModelDeploymentName":
            suggest = "embedding_model_deployment_name"
        elif key == "embeddingModelType":
            suggest = "embedding_model_type"
        elif key == "gptModelDeploymentName":
            suggest = "gpt_model_deployment_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserManagedOpenAIProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserManagedOpenAIProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserManagedOpenAIProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 embedding_model_deployment_name: str,
                 embedding_model_type: str,
                 gpt_model_deployment_name: str,
                 id: str):
        """
        The properties related to User Managed OpenAI Resource
        :param str embedding_model_deployment_name: Embedding Model Deployment Name
        :param str embedding_model_type: Embedding Model Type
        :param str gpt_model_deployment_name: GPT Model Deployment Name
        :param str id: Resource Id of OpenAI Resource
        """
        pulumi.set(__self__, "embedding_model_deployment_name", embedding_model_deployment_name)
        pulumi.set(__self__, "embedding_model_type", embedding_model_type)
        pulumi.set(__self__, "gpt_model_deployment_name", gpt_model_deployment_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="embeddingModelDeploymentName")
    def embedding_model_deployment_name(self) -> str:
        """
        Embedding Model Deployment Name
        """
        return pulumi.get(self, "embedding_model_deployment_name")

    @property
    @pulumi.getter(name="embeddingModelType")
    def embedding_model_type(self) -> str:
        """
        Embedding Model Type
        """
        return pulumi.get(self, "embedding_model_type")

    @property
    @pulumi.getter(name="gptModelDeploymentName")
    def gpt_model_deployment_name(self) -> str:
        """
        GPT Model Deployment Name
        """
        return pulumi.get(self, "gpt_model_deployment_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id of OpenAI Resource
        """
        return pulumi.get(self, "id")


