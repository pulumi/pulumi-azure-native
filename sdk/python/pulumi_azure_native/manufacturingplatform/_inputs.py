# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'CmkProfileArgs',
    'CmkProfileArgsDict',
    'DenyAssignmentExclusionArgs',
    'DenyAssignmentExclusionArgsDict',
    'FabricProfileArgs',
    'FabricProfileArgsDict',
    'ManagedServiceIdentityArgs',
    'ManagedServiceIdentityArgsDict',
    'MdsResourcePropertiesArgs',
    'MdsResourcePropertiesArgsDict',
    'OpenAIProfileArgs',
    'OpenAIProfileArgsDict',
    'SkuArgs',
    'SkuArgsDict',
    'UserManagedOpenAIProfileArgs',
    'UserManagedOpenAIProfileArgsDict',
]

MYPY = False

if not MYPY:
    class CmkProfileArgsDict(TypedDict):
        """
        The properties related to CMK
        """
        key_uri: pulumi.Input[str]
        """
        URI of Key in AKV
        """
elif False:
    CmkProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CmkProfileArgs:
    def __init__(__self__, *,
                 key_uri: pulumi.Input[str]):
        """
        The properties related to CMK
        :param pulumi.Input[str] key_uri: URI of Key in AKV
        """
        pulumi.set(__self__, "key_uri", key_uri)

    @property
    @pulumi.getter(name="keyUri")
    def key_uri(self) -> pulumi.Input[str]:
        """
        URI of Key in AKV
        """
        return pulumi.get(self, "key_uri")

    @key_uri.setter
    def key_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_uri", value)


if not MYPY:
    class DenyAssignmentExclusionArgsDict(TypedDict):
        """
        The properties related to Deny Assignment Exclusions
        """
        id: pulumi.Input[str]
        """
        Object Id of Identity
        """
        type: pulumi.Input[str]
        """
        Type of Identity
        """
elif False:
    DenyAssignmentExclusionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DenyAssignmentExclusionArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        The properties related to Deny Assignment Exclusions
        :param pulumi.Input[str] id: Object Id of Identity
        :param pulumi.Input[str] type: Type of Identity
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Object Id of Identity
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of Identity
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class FabricProfileArgsDict(TypedDict):
        """
        The properties related to Fabric
        """
        key_uri: pulumi.Input[str]
        """
        Azure Key Vault Uri
        """
        one_lake_path: pulumi.Input[str]
        """
        One Lake Path
        """
        one_lake_uri: pulumi.Input[str]
        """
        URI of One Lake
        """
elif False:
    FabricProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FabricProfileArgs:
    def __init__(__self__, *,
                 key_uri: pulumi.Input[str],
                 one_lake_path: pulumi.Input[str],
                 one_lake_uri: pulumi.Input[str]):
        """
        The properties related to Fabric
        :param pulumi.Input[str] key_uri: Azure Key Vault Uri
        :param pulumi.Input[str] one_lake_path: One Lake Path
        :param pulumi.Input[str] one_lake_uri: URI of One Lake
        """
        pulumi.set(__self__, "key_uri", key_uri)
        pulumi.set(__self__, "one_lake_path", one_lake_path)
        pulumi.set(__self__, "one_lake_uri", one_lake_uri)

    @property
    @pulumi.getter(name="keyUri")
    def key_uri(self) -> pulumi.Input[str]:
        """
        Azure Key Vault Uri
        """
        return pulumi.get(self, "key_uri")

    @key_uri.setter
    def key_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_uri", value)

    @property
    @pulumi.getter(name="oneLakePath")
    def one_lake_path(self) -> pulumi.Input[str]:
        """
        One Lake Path
        """
        return pulumi.get(self, "one_lake_path")

    @one_lake_path.setter
    def one_lake_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "one_lake_path", value)

    @property
    @pulumi.getter(name="oneLakeUri")
    def one_lake_uri(self) -> pulumi.Input[str]:
        """
        URI of One Lake
        """
        return pulumi.get(self, "one_lake_uri")

    @one_lake_uri.setter
    def one_lake_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "one_lake_uri", value)


if not MYPY:
    class ManagedServiceIdentityArgsDict(TypedDict):
        """
        Managed service identity (system assigned and/or user assigned identities)
        """
        type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
elif False:
    ManagedServiceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class MdsResourcePropertiesArgsDict(TypedDict):
        """
        Details of the ManufacturingPlatform MdsResource.
        """
        aad_application_id: pulumi.Input[str]
        """
        AAD Application Id.
        """
        aks_admin_group_id: NotRequired[pulumi.Input[str]]
        """
        AKS Admin Group Id.
        """
        cmk_profile: NotRequired[pulumi.Input['CmkProfileArgsDict']]
        """
        Profile of CMK Settings.
        """
        deny_assignment_exclusions: NotRequired[pulumi.Input[Sequence[pulumi.Input['DenyAssignmentExclusionArgsDict']]]]
        """
        Deny Assignments exclusion list.
        """
        enable_copilot: NotRequired[pulumi.Input[bool]]
        """
        Enable Copilot.
        """
        enable_diagnostic_settings: NotRequired[pulumi.Input[bool]]
        """
        Enable Diagnostic Settings.
        """
        fabric_profile: NotRequired[pulumi.Input['FabricProfileArgsDict']]
        """
        Profile of Fabric resources.
        """
        open_ai_profile: NotRequired[pulumi.Input['OpenAIProfileArgsDict']]
        """
        Profile of OpenAI Resource.
        """
        redundancy_state: NotRequired[pulumi.Input[Union[str, 'RedundancyState']]]
        """
        Zone redundancy state for resources
        """
        resource_state: NotRequired[pulumi.Input[Union[str, 'ResourceState']]]
        """
        State of the resource
        """
        user_managed_open_ai_profile: NotRequired[pulumi.Input['UserManagedOpenAIProfileArgsDict']]
        """
        Profile of User Managed OpenAI Resource.
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Mds Resource Version.
        """
elif False:
    MdsResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MdsResourcePropertiesArgs:
    def __init__(__self__, *,
                 aad_application_id: pulumi.Input[str],
                 aks_admin_group_id: Optional[pulumi.Input[str]] = None,
                 cmk_profile: Optional[pulumi.Input['CmkProfileArgs']] = None,
                 deny_assignment_exclusions: Optional[pulumi.Input[Sequence[pulumi.Input['DenyAssignmentExclusionArgs']]]] = None,
                 enable_copilot: Optional[pulumi.Input[bool]] = None,
                 enable_diagnostic_settings: Optional[pulumi.Input[bool]] = None,
                 fabric_profile: Optional[pulumi.Input['FabricProfileArgs']] = None,
                 open_ai_profile: Optional[pulumi.Input['OpenAIProfileArgs']] = None,
                 redundancy_state: Optional[pulumi.Input[Union[str, 'RedundancyState']]] = None,
                 resource_state: Optional[pulumi.Input[Union[str, 'ResourceState']]] = None,
                 user_managed_open_ai_profile: Optional[pulumi.Input['UserManagedOpenAIProfileArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Details of the ManufacturingPlatform MdsResource.
        :param pulumi.Input[str] aad_application_id: AAD Application Id.
        :param pulumi.Input[str] aks_admin_group_id: AKS Admin Group Id.
        :param pulumi.Input['CmkProfileArgs'] cmk_profile: Profile of CMK Settings.
        :param pulumi.Input[Sequence[pulumi.Input['DenyAssignmentExclusionArgs']]] deny_assignment_exclusions: Deny Assignments exclusion list.
        :param pulumi.Input[bool] enable_copilot: Enable Copilot.
        :param pulumi.Input[bool] enable_diagnostic_settings: Enable Diagnostic Settings.
        :param pulumi.Input['FabricProfileArgs'] fabric_profile: Profile of Fabric resources.
        :param pulumi.Input['OpenAIProfileArgs'] open_ai_profile: Profile of OpenAI Resource.
        :param pulumi.Input[Union[str, 'RedundancyState']] redundancy_state: Zone redundancy state for resources
        :param pulumi.Input[Union[str, 'ResourceState']] resource_state: State of the resource
        :param pulumi.Input['UserManagedOpenAIProfileArgs'] user_managed_open_ai_profile: Profile of User Managed OpenAI Resource.
        :param pulumi.Input[str] version: Mds Resource Version.
        """
        pulumi.set(__self__, "aad_application_id", aad_application_id)
        if aks_admin_group_id is None:
            aks_admin_group_id = '00000000-0000-0000-0000-000000000000'
        if aks_admin_group_id is not None:
            pulumi.set(__self__, "aks_admin_group_id", aks_admin_group_id)
        if cmk_profile is not None:
            pulumi.set(__self__, "cmk_profile", cmk_profile)
        if deny_assignment_exclusions is not None:
            pulumi.set(__self__, "deny_assignment_exclusions", deny_assignment_exclusions)
        if enable_copilot is not None:
            pulumi.set(__self__, "enable_copilot", enable_copilot)
        if enable_diagnostic_settings is not None:
            pulumi.set(__self__, "enable_diagnostic_settings", enable_diagnostic_settings)
        if fabric_profile is not None:
            pulumi.set(__self__, "fabric_profile", fabric_profile)
        if open_ai_profile is not None:
            pulumi.set(__self__, "open_ai_profile", open_ai_profile)
        if redundancy_state is not None:
            pulumi.set(__self__, "redundancy_state", redundancy_state)
        if resource_state is not None:
            pulumi.set(__self__, "resource_state", resource_state)
        if user_managed_open_ai_profile is not None:
            pulumi.set(__self__, "user_managed_open_ai_profile", user_managed_open_ai_profile)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="aadApplicationId")
    def aad_application_id(self) -> pulumi.Input[str]:
        """
        AAD Application Id.
        """
        return pulumi.get(self, "aad_application_id")

    @aad_application_id.setter
    def aad_application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "aad_application_id", value)

    @property
    @pulumi.getter(name="aksAdminGroupId")
    def aks_admin_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        AKS Admin Group Id.
        """
        return pulumi.get(self, "aks_admin_group_id")

    @aks_admin_group_id.setter
    def aks_admin_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aks_admin_group_id", value)

    @property
    @pulumi.getter(name="cmkProfile")
    def cmk_profile(self) -> Optional[pulumi.Input['CmkProfileArgs']]:
        """
        Profile of CMK Settings.
        """
        return pulumi.get(self, "cmk_profile")

    @cmk_profile.setter
    def cmk_profile(self, value: Optional[pulumi.Input['CmkProfileArgs']]):
        pulumi.set(self, "cmk_profile", value)

    @property
    @pulumi.getter(name="denyAssignmentExclusions")
    def deny_assignment_exclusions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DenyAssignmentExclusionArgs']]]]:
        """
        Deny Assignments exclusion list.
        """
        return pulumi.get(self, "deny_assignment_exclusions")

    @deny_assignment_exclusions.setter
    def deny_assignment_exclusions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DenyAssignmentExclusionArgs']]]]):
        pulumi.set(self, "deny_assignment_exclusions", value)

    @property
    @pulumi.getter(name="enableCopilot")
    def enable_copilot(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Copilot.
        """
        return pulumi.get(self, "enable_copilot")

    @enable_copilot.setter
    def enable_copilot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_copilot", value)

    @property
    @pulumi.getter(name="enableDiagnosticSettings")
    def enable_diagnostic_settings(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Diagnostic Settings.
        """
        return pulumi.get(self, "enable_diagnostic_settings")

    @enable_diagnostic_settings.setter
    def enable_diagnostic_settings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_diagnostic_settings", value)

    @property
    @pulumi.getter(name="fabricProfile")
    def fabric_profile(self) -> Optional[pulumi.Input['FabricProfileArgs']]:
        """
        Profile of Fabric resources.
        """
        return pulumi.get(self, "fabric_profile")

    @fabric_profile.setter
    def fabric_profile(self, value: Optional[pulumi.Input['FabricProfileArgs']]):
        pulumi.set(self, "fabric_profile", value)

    @property
    @pulumi.getter(name="openAIProfile")
    def open_ai_profile(self) -> Optional[pulumi.Input['OpenAIProfileArgs']]:
        """
        Profile of OpenAI Resource.
        """
        return pulumi.get(self, "open_ai_profile")

    @open_ai_profile.setter
    def open_ai_profile(self, value: Optional[pulumi.Input['OpenAIProfileArgs']]):
        pulumi.set(self, "open_ai_profile", value)

    @property
    @pulumi.getter(name="redundancyState")
    def redundancy_state(self) -> Optional[pulumi.Input[Union[str, 'RedundancyState']]]:
        """
        Zone redundancy state for resources
        """
        return pulumi.get(self, "redundancy_state")

    @redundancy_state.setter
    def redundancy_state(self, value: Optional[pulumi.Input[Union[str, 'RedundancyState']]]):
        pulumi.set(self, "redundancy_state", value)

    @property
    @pulumi.getter(name="resourceState")
    def resource_state(self) -> Optional[pulumi.Input[Union[str, 'ResourceState']]]:
        """
        State of the resource
        """
        return pulumi.get(self, "resource_state")

    @resource_state.setter
    def resource_state(self, value: Optional[pulumi.Input[Union[str, 'ResourceState']]]):
        pulumi.set(self, "resource_state", value)

    @property
    @pulumi.getter(name="userManagedOpenAIProfile")
    def user_managed_open_ai_profile(self) -> Optional[pulumi.Input['UserManagedOpenAIProfileArgs']]:
        """
        Profile of User Managed OpenAI Resource.
        """
        return pulumi.get(self, "user_managed_open_ai_profile")

    @user_managed_open_ai_profile.setter
    def user_managed_open_ai_profile(self, value: Optional[pulumi.Input['UserManagedOpenAIProfileArgs']]):
        pulumi.set(self, "user_managed_open_ai_profile", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Mds Resource Version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class OpenAIProfileArgsDict(TypedDict):
        """
        The properties related to OpenAI Resource
        """
        embedding_model_capacity: NotRequired[pulumi.Input[int]]
        """
        Embedding Model Capacity
        """
        embedding_model_name: NotRequired[pulumi.Input[str]]
        """
        Embedding Model Name
        """
        embedding_model_sku_name: NotRequired[pulumi.Input[str]]
        """
        Embedding Model SKU Name
        """
        embedding_model_version: NotRequired[pulumi.Input[str]]
        """
        Embedding Model Version
        """
        gpt_model_capacity: NotRequired[pulumi.Input[int]]
        """
        GPT Model Capacity
        """
        gpt_model_name: NotRequired[pulumi.Input[str]]
        """
        GPT Model Name
        """
        gpt_model_sku_name: NotRequired[pulumi.Input[str]]
        """
        GPT Model SKU Name
        """
        gpt_model_version: NotRequired[pulumi.Input[str]]
        """
        GPT Model Version
        """
elif False:
    OpenAIProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpenAIProfileArgs:
    def __init__(__self__, *,
                 embedding_model_capacity: Optional[pulumi.Input[int]] = None,
                 embedding_model_name: Optional[pulumi.Input[str]] = None,
                 embedding_model_sku_name: Optional[pulumi.Input[str]] = None,
                 embedding_model_version: Optional[pulumi.Input[str]] = None,
                 gpt_model_capacity: Optional[pulumi.Input[int]] = None,
                 gpt_model_name: Optional[pulumi.Input[str]] = None,
                 gpt_model_sku_name: Optional[pulumi.Input[str]] = None,
                 gpt_model_version: Optional[pulumi.Input[str]] = None):
        """
        The properties related to OpenAI Resource
        :param pulumi.Input[int] embedding_model_capacity: Embedding Model Capacity
        :param pulumi.Input[str] embedding_model_name: Embedding Model Name
        :param pulumi.Input[str] embedding_model_sku_name: Embedding Model SKU Name
        :param pulumi.Input[str] embedding_model_version: Embedding Model Version
        :param pulumi.Input[int] gpt_model_capacity: GPT Model Capacity
        :param pulumi.Input[str] gpt_model_name: GPT Model Name
        :param pulumi.Input[str] gpt_model_sku_name: GPT Model SKU Name
        :param pulumi.Input[str] gpt_model_version: GPT Model Version
        """
        if embedding_model_capacity is not None:
            pulumi.set(__self__, "embedding_model_capacity", embedding_model_capacity)
        if embedding_model_name is not None:
            pulumi.set(__self__, "embedding_model_name", embedding_model_name)
        if embedding_model_sku_name is not None:
            pulumi.set(__self__, "embedding_model_sku_name", embedding_model_sku_name)
        if embedding_model_version is not None:
            pulumi.set(__self__, "embedding_model_version", embedding_model_version)
        if gpt_model_capacity is not None:
            pulumi.set(__self__, "gpt_model_capacity", gpt_model_capacity)
        if gpt_model_name is not None:
            pulumi.set(__self__, "gpt_model_name", gpt_model_name)
        if gpt_model_sku_name is not None:
            pulumi.set(__self__, "gpt_model_sku_name", gpt_model_sku_name)
        if gpt_model_version is not None:
            pulumi.set(__self__, "gpt_model_version", gpt_model_version)

    @property
    @pulumi.getter(name="embeddingModelCapacity")
    def embedding_model_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Embedding Model Capacity
        """
        return pulumi.get(self, "embedding_model_capacity")

    @embedding_model_capacity.setter
    def embedding_model_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "embedding_model_capacity", value)

    @property
    @pulumi.getter(name="embeddingModelName")
    def embedding_model_name(self) -> Optional[pulumi.Input[str]]:
        """
        Embedding Model Name
        """
        return pulumi.get(self, "embedding_model_name")

    @embedding_model_name.setter
    def embedding_model_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "embedding_model_name", value)

    @property
    @pulumi.getter(name="embeddingModelSkuName")
    def embedding_model_sku_name(self) -> Optional[pulumi.Input[str]]:
        """
        Embedding Model SKU Name
        """
        return pulumi.get(self, "embedding_model_sku_name")

    @embedding_model_sku_name.setter
    def embedding_model_sku_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "embedding_model_sku_name", value)

    @property
    @pulumi.getter(name="embeddingModelVersion")
    def embedding_model_version(self) -> Optional[pulumi.Input[str]]:
        """
        Embedding Model Version
        """
        return pulumi.get(self, "embedding_model_version")

    @embedding_model_version.setter
    def embedding_model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "embedding_model_version", value)

    @property
    @pulumi.getter(name="gptModelCapacity")
    def gpt_model_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        GPT Model Capacity
        """
        return pulumi.get(self, "gpt_model_capacity")

    @gpt_model_capacity.setter
    def gpt_model_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gpt_model_capacity", value)

    @property
    @pulumi.getter(name="gptModelName")
    def gpt_model_name(self) -> Optional[pulumi.Input[str]]:
        """
        GPT Model Name
        """
        return pulumi.get(self, "gpt_model_name")

    @gpt_model_name.setter
    def gpt_model_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gpt_model_name", value)

    @property
    @pulumi.getter(name="gptModelSkuName")
    def gpt_model_sku_name(self) -> Optional[pulumi.Input[str]]:
        """
        GPT Model SKU Name
        """
        return pulumi.get(self, "gpt_model_sku_name")

    @gpt_model_sku_name.setter
    def gpt_model_sku_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gpt_model_sku_name", value)

    @property
    @pulumi.getter(name="gptModelVersion")
    def gpt_model_version(self) -> Optional[pulumi.Input[str]]:
        """
        GPT Model Version
        """
        return pulumi.get(self, "gpt_model_version")

    @gpt_model_version.setter
    def gpt_model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gpt_model_version", value)


if not MYPY:
    class SkuArgsDict(TypedDict):
        """
        The resource model definition representing SKU
        """
        name: pulumi.Input[str]
        """
        The name of the SKU. E.g. P3. It is typically a letter+number code
        """
        capacity: NotRequired[pulumi.Input[int]]
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        family: NotRequired[pulumi.Input[str]]
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        size: NotRequired[pulumi.Input[str]]
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        tier: NotRequired[pulumi.Input['SkuTier']]
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
elif False:
    SkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input['SkuTier']] = None):
        """
        The resource model definition representing SKU
        :param pulumi.Input[str] name: The name of the SKU. E.g. P3. It is typically a letter+number code
        :param pulumi.Input[int] capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param pulumi.Input[str] family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param pulumi.Input[str] size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param pulumi.Input['SkuTier'] tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the SKU. E.g. P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input['SkuTier']]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input['SkuTier']]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class UserManagedOpenAIProfileArgsDict(TypedDict):
        """
        The properties related to User Managed OpenAI Resource
        """
        embedding_model_deployment_name: pulumi.Input[str]
        """
        Embedding Model Deployment Name
        """
        gpt_model_deployment_name: pulumi.Input[str]
        """
        GPT Model Deployment Name
        """
        id: pulumi.Input[str]
        """
        Resource Id of OpenAI Resource
        """
elif False:
    UserManagedOpenAIProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserManagedOpenAIProfileArgs:
    def __init__(__self__, *,
                 embedding_model_deployment_name: pulumi.Input[str],
                 gpt_model_deployment_name: pulumi.Input[str],
                 id: pulumi.Input[str]):
        """
        The properties related to User Managed OpenAI Resource
        :param pulumi.Input[str] embedding_model_deployment_name: Embedding Model Deployment Name
        :param pulumi.Input[str] gpt_model_deployment_name: GPT Model Deployment Name
        :param pulumi.Input[str] id: Resource Id of OpenAI Resource
        """
        pulumi.set(__self__, "embedding_model_deployment_name", embedding_model_deployment_name)
        pulumi.set(__self__, "gpt_model_deployment_name", gpt_model_deployment_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="embeddingModelDeploymentName")
    def embedding_model_deployment_name(self) -> pulumi.Input[str]:
        """
        Embedding Model Deployment Name
        """
        return pulumi.get(self, "embedding_model_deployment_name")

    @embedding_model_deployment_name.setter
    def embedding_model_deployment_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "embedding_model_deployment_name", value)

    @property
    @pulumi.getter(name="gptModelDeploymentName")
    def gpt_model_deployment_name(self) -> pulumi.Input[str]:
        """
        GPT Model Deployment Name
        """
        return pulumi.get(self, "gpt_model_deployment_name")

    @gpt_model_deployment_name.setter
    def gpt_model_deployment_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "gpt_model_deployment_name", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Resource Id of OpenAI Resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


