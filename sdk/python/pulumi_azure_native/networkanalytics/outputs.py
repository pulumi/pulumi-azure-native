# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ConsumptionEndpointsPropertiesResponse',
    'DataProductNetworkAclsResponse',
    'EncryptionKeyDetailsResponse',
    'IPRulesResponse',
    'ManagedServiceIdentityResponse',
    'RoleAssignmentDetailResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
    'VirtualNetworkRuleResponse',
]

@pulumi.output_type
class ConsumptionEndpointsPropertiesResponse(dict):
    """
    Details of Consumption Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileAccessResourceId":
            suggest = "file_access_resource_id"
        elif key == "fileAccessUrl":
            suggest = "file_access_url"
        elif key == "ingestionResourceId":
            suggest = "ingestion_resource_id"
        elif key == "ingestionUrl":
            suggest = "ingestion_url"
        elif key == "queryResourceId":
            suggest = "query_resource_id"
        elif key == "queryUrl":
            suggest = "query_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConsumptionEndpointsPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConsumptionEndpointsPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConsumptionEndpointsPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_access_resource_id: str,
                 file_access_url: str,
                 ingestion_resource_id: str,
                 ingestion_url: str,
                 query_resource_id: str,
                 query_url: str):
        """
        Details of Consumption Properties
        :param str file_access_resource_id: Resource Id of file access endpoint.
        :param str file_access_url: Url to consume file type.
        :param str ingestion_resource_id: Resource Id of ingestion endpoint.
        :param str ingestion_url: Ingestion url to upload the data.
        :param str query_resource_id: Resource Id of query endpoint.
        :param str query_url: Url to consume the processed data.
        """
        pulumi.set(__self__, "file_access_resource_id", file_access_resource_id)
        pulumi.set(__self__, "file_access_url", file_access_url)
        pulumi.set(__self__, "ingestion_resource_id", ingestion_resource_id)
        pulumi.set(__self__, "ingestion_url", ingestion_url)
        pulumi.set(__self__, "query_resource_id", query_resource_id)
        pulumi.set(__self__, "query_url", query_url)

    @property
    @pulumi.getter(name="fileAccessResourceId")
    def file_access_resource_id(self) -> str:
        """
        Resource Id of file access endpoint.
        """
        return pulumi.get(self, "file_access_resource_id")

    @property
    @pulumi.getter(name="fileAccessUrl")
    def file_access_url(self) -> str:
        """
        Url to consume file type.
        """
        return pulumi.get(self, "file_access_url")

    @property
    @pulumi.getter(name="ingestionResourceId")
    def ingestion_resource_id(self) -> str:
        """
        Resource Id of ingestion endpoint.
        """
        return pulumi.get(self, "ingestion_resource_id")

    @property
    @pulumi.getter(name="ingestionUrl")
    def ingestion_url(self) -> str:
        """
        Ingestion url to upload the data.
        """
        return pulumi.get(self, "ingestion_url")

    @property
    @pulumi.getter(name="queryResourceId")
    def query_resource_id(self) -> str:
        """
        Resource Id of query endpoint.
        """
        return pulumi.get(self, "query_resource_id")

    @property
    @pulumi.getter(name="queryUrl")
    def query_url(self) -> str:
        """
        Url to consume the processed data.
        """
        return pulumi.get(self, "query_url")


@pulumi.output_type
class DataProductNetworkAclsResponse(dict):
    """
    Data Product Network rule set
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedQueryIpRangeList":
            suggest = "allowed_query_ip_range_list"
        elif key == "defaultAction":
            suggest = "default_action"
        elif key == "ipRules":
            suggest = "ip_rules"
        elif key == "virtualNetworkRule":
            suggest = "virtual_network_rule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataProductNetworkAclsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataProductNetworkAclsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataProductNetworkAclsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_query_ip_range_list: Sequence[str],
                 default_action: str,
                 ip_rules: Sequence['outputs.IPRulesResponse'],
                 virtual_network_rule: Sequence['outputs.VirtualNetworkRuleResponse']):
        """
        Data Product Network rule set
        :param Sequence[str] allowed_query_ip_range_list: The list of query ips in the format of CIDR allowed to connect to query/visualization endpoint.
        :param str default_action: Default Action
        :param Sequence['IPRulesResponse'] ip_rules: IP rule with specific IP or IP range in CIDR format.
        :param Sequence['VirtualNetworkRuleResponse'] virtual_network_rule: Virtual Network Rule
        """
        pulumi.set(__self__, "allowed_query_ip_range_list", allowed_query_ip_range_list)
        pulumi.set(__self__, "default_action", default_action)
        pulumi.set(__self__, "ip_rules", ip_rules)
        pulumi.set(__self__, "virtual_network_rule", virtual_network_rule)

    @property
    @pulumi.getter(name="allowedQueryIpRangeList")
    def allowed_query_ip_range_list(self) -> Sequence[str]:
        """
        The list of query ips in the format of CIDR allowed to connect to query/visualization endpoint.
        """
        return pulumi.get(self, "allowed_query_ip_range_list")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> str:
        """
        Default Action
        """
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Sequence['outputs.IPRulesResponse']:
        """
        IP rule with specific IP or IP range in CIDR format.
        """
        return pulumi.get(self, "ip_rules")

    @property
    @pulumi.getter(name="virtualNetworkRule")
    def virtual_network_rule(self) -> Sequence['outputs.VirtualNetworkRuleResponse']:
        """
        Virtual Network Rule
        """
        return pulumi.get(self, "virtual_network_rule")


@pulumi.output_type
class EncryptionKeyDetailsResponse(dict):
    """
    Encryption key details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyName":
            suggest = "key_name"
        elif key == "keyVaultUri":
            suggest = "key_vault_uri"
        elif key == "keyVersion":
            suggest = "key_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionKeyDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionKeyDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionKeyDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_name: str,
                 key_vault_uri: str,
                 key_version: str):
        """
        Encryption key details.
        :param str key_name: The name of the key vault key.
        :param str key_vault_uri: The Uri of the key vault.
        :param str key_version: The version of the key vault key.
        """
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "key_vault_uri", key_vault_uri)
        pulumi.set(__self__, "key_version", key_version)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        """
        The name of the key vault key.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keyVaultUri")
    def key_vault_uri(self) -> str:
        """
        The Uri of the key vault.
        """
        return pulumi.get(self, "key_vault_uri")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> str:
        """
        The version of the key vault key.
        """
        return pulumi.get(self, "key_version")


@pulumi.output_type
class IPRulesResponse(dict):
    """
    IP rule with specific IP or IP range in CIDR format.
    """
    def __init__(__self__, *,
                 action: str,
                 value: Optional[str] = None):
        """
        IP rule with specific IP or IP range in CIDR format.
        :param str action: The action of virtual network rule.
        :param str value: IP Rules Value
        """
        pulumi.set(__self__, "action", action)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action of virtual network rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        IP Rules Value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class RoleAssignmentDetailResponse(dict):
    """
    The details for role assignment response.
    """
    def __init__(__self__, *,
                 data_type_scope: Sequence[str],
                 principal_id: str,
                 principal_type: str,
                 role: str,
                 role_assignment_id: str,
                 role_id: str,
                 user_name: str):
        """
        The details for role assignment response.
        :param Sequence[str] data_type_scope: Data Type Scope at which the role assignment is created.
        :param str principal_id: Object ID of the AAD principal or security-group.
        :param str principal_type: Type of the principal Id: User, Group or ServicePrincipal
        :param str role: Data Product role to be assigned to a user.
        :param str role_assignment_id: Id of role assignment request
        :param str role_id: Role Id of the Built-In Role
        :param str user_name: User name.
        """
        pulumi.set(__self__, "data_type_scope", data_type_scope)
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "principal_type", principal_type)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "role_assignment_id", role_assignment_id)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="dataTypeScope")
    def data_type_scope(self) -> Sequence[str]:
        """
        Data Type Scope at which the role assignment is created.
        """
        return pulumi.get(self, "data_type_scope")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        Object ID of the AAD principal or security-group.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> str:
        """
        Type of the principal Id: User, Group or ServicePrincipal
        """
        return pulumi.get(self, "principal_type")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Data Product role to be assigned to a user.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="roleAssignmentId")
    def role_assignment_id(self) -> str:
        """
        Id of role assignment request
        """
        return pulumi.get(self, "role_assignment_id")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        """
        Role Id of the Built-In Role
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        User name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class VirtualNetworkRuleResponse(dict):
    """
    Virtual Network Rule
    """
    def __init__(__self__, *,
                 id: str,
                 action: Optional[str] = None,
                 state: Optional[str] = None):
        """
        Virtual Network Rule
        :param str id: Resource ID of a subnet
        :param str action: The action of virtual network rule.
        :param str state: Gets the state of virtual network rule.
        """
        pulumi.set(__self__, "id", id)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource ID of a subnet
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The action of virtual network rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Gets the state of virtual network rule.
        """
        return pulumi.get(self, "state")


