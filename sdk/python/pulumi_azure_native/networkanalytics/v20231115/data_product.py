# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DataProductArgs', 'DataProduct']

@pulumi.input_type
class DataProductArgs:
    def __init__(__self__, *,
                 major_version: pulumi.Input[str],
                 product: pulumi.Input[str],
                 publisher: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 current_minor_version: Optional[pulumi.Input[str]] = None,
                 customer_encryption_key: Optional[pulumi.Input['EncryptionKeyDetailsArgs']] = None,
                 customer_managed_key_encryption_enabled: Optional[pulumi.Input[Union[str, 'ControlState']]] = None,
                 data_product_name: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input['ManagedServiceIdentityArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_resource_group_configuration: Optional[pulumi.Input['ManagedResourceGroupConfigurationArgs']] = None,
                 networkacls: Optional[pulumi.Input['DataProductNetworkAclsArgs']] = None,
                 owners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_links_enabled: Optional[pulumi.Input[Union[str, 'ControlState']]] = None,
                 public_network_access: Optional[pulumi.Input[Union[str, 'ControlState']]] = None,
                 purview_account: Optional[pulumi.Input[str]] = None,
                 purview_collection: Optional[pulumi.Input[str]] = None,
                 redundancy: Optional[pulumi.Input[Union[str, 'ControlState']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a DataProduct resource.
        :param pulumi.Input[str] major_version: Major version of data product.
        :param pulumi.Input[str] product: Product name of data product.
        :param pulumi.Input[str] publisher: Data product publisher name.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] current_minor_version: Current configured minor version of the data product resource.
        :param pulumi.Input['EncryptionKeyDetailsArgs'] customer_encryption_key: Customer managed encryption key details for data product.
        :param pulumi.Input[Union[str, 'ControlState']] customer_managed_key_encryption_enabled: Flag to enable customer managed key encryption for data product.
        :param pulumi.Input[str] data_product_name: The data product resource name
        :param pulumi.Input['ManagedServiceIdentityArgs'] identity: The managed service identities assigned to this resource.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input['ManagedResourceGroupConfigurationArgs'] managed_resource_group_configuration: Managed resource group configuration.
        :param pulumi.Input['DataProductNetworkAclsArgs'] networkacls: Network rule set for data product.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] owners: List of name or email associated with data product resource deployment.
        :param pulumi.Input[Union[str, 'ControlState']] private_links_enabled: Flag to enable or disable private link for data product resource.
        :param pulumi.Input[Union[str, 'ControlState']] public_network_access: Flag to enable or disable public access of data product resource.
        :param pulumi.Input[str] purview_account: Purview account url for data product to connect to.
        :param pulumi.Input[str] purview_collection: Purview collection url for data product to connect to.
        :param pulumi.Input[Union[str, 'ControlState']] redundancy: Flag to enable or disable redundancy for data product.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "major_version", major_version)
        pulumi.set(__self__, "product", product)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if current_minor_version is not None:
            pulumi.set(__self__, "current_minor_version", current_minor_version)
        if customer_encryption_key is not None:
            pulumi.set(__self__, "customer_encryption_key", customer_encryption_key)
        if customer_managed_key_encryption_enabled is not None:
            pulumi.set(__self__, "customer_managed_key_encryption_enabled", customer_managed_key_encryption_enabled)
        if data_product_name is not None:
            pulumi.set(__self__, "data_product_name", data_product_name)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if managed_resource_group_configuration is not None:
            pulumi.set(__self__, "managed_resource_group_configuration", managed_resource_group_configuration)
        if networkacls is not None:
            pulumi.set(__self__, "networkacls", networkacls)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if private_links_enabled is not None:
            pulumi.set(__self__, "private_links_enabled", private_links_enabled)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if purview_account is not None:
            pulumi.set(__self__, "purview_account", purview_account)
        if purview_collection is not None:
            pulumi.set(__self__, "purview_collection", purview_collection)
        if redundancy is not None:
            pulumi.set(__self__, "redundancy", redundancy)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="majorVersion")
    def major_version(self) -> pulumi.Input[str]:
        """
        Major version of data product.
        """
        return pulumi.get(self, "major_version")

    @major_version.setter
    def major_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "major_version", value)

    @property
    @pulumi.getter
    def product(self) -> pulumi.Input[str]:
        """
        Product name of data product.
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: pulumi.Input[str]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[str]:
        """
        Data product publisher name.
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="currentMinorVersion")
    def current_minor_version(self) -> Optional[pulumi.Input[str]]:
        """
        Current configured minor version of the data product resource.
        """
        return pulumi.get(self, "current_minor_version")

    @current_minor_version.setter
    def current_minor_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_minor_version", value)

    @property
    @pulumi.getter(name="customerEncryptionKey")
    def customer_encryption_key(self) -> Optional[pulumi.Input['EncryptionKeyDetailsArgs']]:
        """
        Customer managed encryption key details for data product.
        """
        return pulumi.get(self, "customer_encryption_key")

    @customer_encryption_key.setter
    def customer_encryption_key(self, value: Optional[pulumi.Input['EncryptionKeyDetailsArgs']]):
        pulumi.set(self, "customer_encryption_key", value)

    @property
    @pulumi.getter(name="customerManagedKeyEncryptionEnabled")
    def customer_managed_key_encryption_enabled(self) -> Optional[pulumi.Input[Union[str, 'ControlState']]]:
        """
        Flag to enable customer managed key encryption for data product.
        """
        return pulumi.get(self, "customer_managed_key_encryption_enabled")

    @customer_managed_key_encryption_enabled.setter
    def customer_managed_key_encryption_enabled(self, value: Optional[pulumi.Input[Union[str, 'ControlState']]]):
        pulumi.set(self, "customer_managed_key_encryption_enabled", value)

    @property
    @pulumi.getter(name="dataProductName")
    def data_product_name(self) -> Optional[pulumi.Input[str]]:
        """
        The data product resource name
        """
        return pulumi.get(self, "data_product_name")

    @data_product_name.setter
    def data_product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_product_name", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedServiceIdentityArgs']]:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedServiceIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="managedResourceGroupConfiguration")
    def managed_resource_group_configuration(self) -> Optional[pulumi.Input['ManagedResourceGroupConfigurationArgs']]:
        """
        Managed resource group configuration.
        """
        return pulumi.get(self, "managed_resource_group_configuration")

    @managed_resource_group_configuration.setter
    def managed_resource_group_configuration(self, value: Optional[pulumi.Input['ManagedResourceGroupConfigurationArgs']]):
        pulumi.set(self, "managed_resource_group_configuration", value)

    @property
    @pulumi.getter
    def networkacls(self) -> Optional[pulumi.Input['DataProductNetworkAclsArgs']]:
        """
        Network rule set for data product.
        """
        return pulumi.get(self, "networkacls")

    @networkacls.setter
    def networkacls(self, value: Optional[pulumi.Input['DataProductNetworkAclsArgs']]):
        pulumi.set(self, "networkacls", value)

    @property
    @pulumi.getter
    def owners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of name or email associated with data product resource deployment.
        """
        return pulumi.get(self, "owners")

    @owners.setter
    def owners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "owners", value)

    @property
    @pulumi.getter(name="privateLinksEnabled")
    def private_links_enabled(self) -> Optional[pulumi.Input[Union[str, 'ControlState']]]:
        """
        Flag to enable or disable private link for data product resource.
        """
        return pulumi.get(self, "private_links_enabled")

    @private_links_enabled.setter
    def private_links_enabled(self, value: Optional[pulumi.Input[Union[str, 'ControlState']]]):
        pulumi.set(self, "private_links_enabled", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[str, 'ControlState']]]:
        """
        Flag to enable or disable public access of data product resource.
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[str, 'ControlState']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter(name="purviewAccount")
    def purview_account(self) -> Optional[pulumi.Input[str]]:
        """
        Purview account url for data product to connect to.
        """
        return pulumi.get(self, "purview_account")

    @purview_account.setter
    def purview_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "purview_account", value)

    @property
    @pulumi.getter(name="purviewCollection")
    def purview_collection(self) -> Optional[pulumi.Input[str]]:
        """
        Purview collection url for data product to connect to.
        """
        return pulumi.get(self, "purview_collection")

    @purview_collection.setter
    def purview_collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "purview_collection", value)

    @property
    @pulumi.getter
    def redundancy(self) -> Optional[pulumi.Input[Union[str, 'ControlState']]]:
        """
        Flag to enable or disable redundancy for data product.
        """
        return pulumi.get(self, "redundancy")

    @redundancy.setter
    def redundancy(self, value: Optional[pulumi.Input[Union[str, 'ControlState']]]):
        pulumi.set(self, "redundancy", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class DataProduct(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 current_minor_version: Optional[pulumi.Input[str]] = None,
                 customer_encryption_key: Optional[pulumi.Input[pulumi.InputType['EncryptionKeyDetailsArgs']]] = None,
                 customer_managed_key_encryption_enabled: Optional[pulumi.Input[Union[str, 'ControlState']]] = None,
                 data_product_name: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['ManagedServiceIdentityArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 major_version: Optional[pulumi.Input[str]] = None,
                 managed_resource_group_configuration: Optional[pulumi.Input[pulumi.InputType['ManagedResourceGroupConfigurationArgs']]] = None,
                 networkacls: Optional[pulumi.Input[pulumi.InputType['DataProductNetworkAclsArgs']]] = None,
                 owners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_links_enabled: Optional[pulumi.Input[Union[str, 'ControlState']]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 public_network_access: Optional[pulumi.Input[Union[str, 'ControlState']]] = None,
                 publisher: Optional[pulumi.Input[str]] = None,
                 purview_account: Optional[pulumi.Input[str]] = None,
                 purview_collection: Optional[pulumi.Input[str]] = None,
                 redundancy: Optional[pulumi.Input[Union[str, 'ControlState']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        The data product resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] current_minor_version: Current configured minor version of the data product resource.
        :param pulumi.Input[pulumi.InputType['EncryptionKeyDetailsArgs']] customer_encryption_key: Customer managed encryption key details for data product.
        :param pulumi.Input[Union[str, 'ControlState']] customer_managed_key_encryption_enabled: Flag to enable customer managed key encryption for data product.
        :param pulumi.Input[str] data_product_name: The data product resource name
        :param pulumi.Input[pulumi.InputType['ManagedServiceIdentityArgs']] identity: The managed service identities assigned to this resource.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] major_version: Major version of data product.
        :param pulumi.Input[pulumi.InputType['ManagedResourceGroupConfigurationArgs']] managed_resource_group_configuration: Managed resource group configuration.
        :param pulumi.Input[pulumi.InputType['DataProductNetworkAclsArgs']] networkacls: Network rule set for data product.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] owners: List of name or email associated with data product resource deployment.
        :param pulumi.Input[Union[str, 'ControlState']] private_links_enabled: Flag to enable or disable private link for data product resource.
        :param pulumi.Input[str] product: Product name of data product.
        :param pulumi.Input[Union[str, 'ControlState']] public_network_access: Flag to enable or disable public access of data product resource.
        :param pulumi.Input[str] publisher: Data product publisher name.
        :param pulumi.Input[str] purview_account: Purview account url for data product to connect to.
        :param pulumi.Input[str] purview_collection: Purview collection url for data product to connect to.
        :param pulumi.Input[Union[str, 'ControlState']] redundancy: Flag to enable or disable redundancy for data product.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataProductArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The data product resource.

        :param str resource_name: The name of the resource.
        :param DataProductArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataProductArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 current_minor_version: Optional[pulumi.Input[str]] = None,
                 customer_encryption_key: Optional[pulumi.Input[pulumi.InputType['EncryptionKeyDetailsArgs']]] = None,
                 customer_managed_key_encryption_enabled: Optional[pulumi.Input[Union[str, 'ControlState']]] = None,
                 data_product_name: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['ManagedServiceIdentityArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 major_version: Optional[pulumi.Input[str]] = None,
                 managed_resource_group_configuration: Optional[pulumi.Input[pulumi.InputType['ManagedResourceGroupConfigurationArgs']]] = None,
                 networkacls: Optional[pulumi.Input[pulumi.InputType['DataProductNetworkAclsArgs']]] = None,
                 owners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_links_enabled: Optional[pulumi.Input[Union[str, 'ControlState']]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 public_network_access: Optional[pulumi.Input[Union[str, 'ControlState']]] = None,
                 publisher: Optional[pulumi.Input[str]] = None,
                 purview_account: Optional[pulumi.Input[str]] = None,
                 purview_collection: Optional[pulumi.Input[str]] = None,
                 redundancy: Optional[pulumi.Input[Union[str, 'ControlState']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataProductArgs.__new__(DataProductArgs)

            __props__.__dict__["current_minor_version"] = current_minor_version
            __props__.__dict__["customer_encryption_key"] = customer_encryption_key
            __props__.__dict__["customer_managed_key_encryption_enabled"] = customer_managed_key_encryption_enabled
            __props__.__dict__["data_product_name"] = data_product_name
            __props__.__dict__["identity"] = identity
            __props__.__dict__["location"] = location
            if major_version is None and not opts.urn:
                raise TypeError("Missing required property 'major_version'")
            __props__.__dict__["major_version"] = major_version
            __props__.__dict__["managed_resource_group_configuration"] = managed_resource_group_configuration
            __props__.__dict__["networkacls"] = networkacls
            __props__.__dict__["owners"] = owners
            __props__.__dict__["private_links_enabled"] = private_links_enabled
            if product is None and not opts.urn:
                raise TypeError("Missing required property 'product'")
            __props__.__dict__["product"] = product
            __props__.__dict__["public_network_access"] = public_network_access
            if publisher is None and not opts.urn:
                raise TypeError("Missing required property 'publisher'")
            __props__.__dict__["publisher"] = publisher
            __props__.__dict__["purview_account"] = purview_account
            __props__.__dict__["purview_collection"] = purview_collection
            __props__.__dict__["redundancy"] = redundancy
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["available_minor_versions"] = None
            __props__.__dict__["consumption_endpoints"] = None
            __props__.__dict__["documentation"] = None
            __props__.__dict__["key_vault_url"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["resource_guid"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:networkanalytics:DataProduct")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(DataProduct, __self__).__init__(
            'azure-native:networkanalytics/v20231115:DataProduct',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DataProduct':
        """
        Get an existing DataProduct resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DataProductArgs.__new__(DataProductArgs)

        __props__.__dict__["available_minor_versions"] = None
        __props__.__dict__["consumption_endpoints"] = None
        __props__.__dict__["current_minor_version"] = None
        __props__.__dict__["customer_encryption_key"] = None
        __props__.__dict__["customer_managed_key_encryption_enabled"] = None
        __props__.__dict__["documentation"] = None
        __props__.__dict__["identity"] = None
        __props__.__dict__["key_vault_url"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["major_version"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["networkacls"] = None
        __props__.__dict__["owners"] = None
        __props__.__dict__["private_links_enabled"] = None
        __props__.__dict__["product"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["public_network_access"] = None
        __props__.__dict__["publisher"] = None
        __props__.__dict__["purview_account"] = None
        __props__.__dict__["purview_collection"] = None
        __props__.__dict__["redundancy"] = None
        __props__.__dict__["resource_guid"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return DataProduct(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="availableMinorVersions")
    def available_minor_versions(self) -> pulumi.Output[Sequence[str]]:
        """
        List of available minor versions of the data product resource.
        """
        return pulumi.get(self, "available_minor_versions")

    @property
    @pulumi.getter(name="consumptionEndpoints")
    def consumption_endpoints(self) -> pulumi.Output['outputs.ConsumptionEndpointsPropertiesResponse']:
        """
        Resource links which exposed to the customer to query the data.
        """
        return pulumi.get(self, "consumption_endpoints")

    @property
    @pulumi.getter(name="currentMinorVersion")
    def current_minor_version(self) -> pulumi.Output[Optional[str]]:
        """
        Current configured minor version of the data product resource.
        """
        return pulumi.get(self, "current_minor_version")

    @property
    @pulumi.getter(name="customerEncryptionKey")
    def customer_encryption_key(self) -> pulumi.Output[Optional['outputs.EncryptionKeyDetailsResponse']]:
        """
        Customer managed encryption key details for data product.
        """
        return pulumi.get(self, "customer_encryption_key")

    @property
    @pulumi.getter(name="customerManagedKeyEncryptionEnabled")
    def customer_managed_key_encryption_enabled(self) -> pulumi.Output[Optional[str]]:
        """
        Flag to enable customer managed key encryption for data product.
        """
        return pulumi.get(self, "customer_managed_key_encryption_enabled")

    @property
    @pulumi.getter
    def documentation(self) -> pulumi.Output[str]:
        """
        Documentation link for the data product based on definition file.
        """
        return pulumi.get(self, "documentation")

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.ManagedServiceIdentityResponse']]:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter(name="keyVaultUrl")
    def key_vault_url(self) -> pulumi.Output[str]:
        """
        Key vault url.
        """
        return pulumi.get(self, "key_vault_url")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="majorVersion")
    def major_version(self) -> pulumi.Output[str]:
        """
        Major version of data product.
        """
        return pulumi.get(self, "major_version")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networkacls(self) -> pulumi.Output[Optional['outputs.DataProductNetworkAclsResponse']]:
        """
        Network rule set for data product.
        """
        return pulumi.get(self, "networkacls")

    @property
    @pulumi.getter
    def owners(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of name or email associated with data product resource deployment.
        """
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="privateLinksEnabled")
    def private_links_enabled(self) -> pulumi.Output[Optional[str]]:
        """
        Flag to enable or disable private link for data product resource.
        """
        return pulumi.get(self, "private_links_enabled")

    @property
    @pulumi.getter
    def product(self) -> pulumi.Output[str]:
        """
        Product name of data product.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Latest provisioning state  of data product.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> pulumi.Output[Optional[str]]:
        """
        Flag to enable or disable public access of data product resource.
        """
        return pulumi.get(self, "public_network_access")

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Output[str]:
        """
        Data product publisher name.
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter(name="purviewAccount")
    def purview_account(self) -> pulumi.Output[Optional[str]]:
        """
        Purview account url for data product to connect to.
        """
        return pulumi.get(self, "purview_account")

    @property
    @pulumi.getter(name="purviewCollection")
    def purview_collection(self) -> pulumi.Output[Optional[str]]:
        """
        Purview collection url for data product to connect to.
        """
        return pulumi.get(self, "purview_collection")

    @property
    @pulumi.getter
    def redundancy(self) -> pulumi.Output[Optional[str]]:
        """
        Flag to enable or disable redundancy for data product.
        """
        return pulumi.get(self, "redundancy")

    @property
    @pulumi.getter(name="resourceGuid")
    def resource_guid(self) -> pulumi.Output[str]:
        """
        The resource GUID property of the data product resource.
        """
        return pulumi.get(self, "resource_guid")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

