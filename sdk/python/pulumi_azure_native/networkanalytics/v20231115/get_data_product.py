# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetDataProductResult',
    'AwaitableGetDataProductResult',
    'get_data_product',
    'get_data_product_output',
]

@pulumi.output_type
class GetDataProductResult:
    """
    The data product resource.
    """
    def __init__(__self__, available_minor_versions=None, consumption_endpoints=None, current_minor_version=None, customer_encryption_key=None, customer_managed_key_encryption_enabled=None, documentation=None, id=None, identity=None, key_vault_url=None, location=None, major_version=None, name=None, networkacls=None, owners=None, private_links_enabled=None, product=None, provisioning_state=None, public_network_access=None, publisher=None, purview_account=None, purview_collection=None, redundancy=None, resource_guid=None, system_data=None, tags=None, type=None):
        if available_minor_versions and not isinstance(available_minor_versions, list):
            raise TypeError("Expected argument 'available_minor_versions' to be a list")
        pulumi.set(__self__, "available_minor_versions", available_minor_versions)
        if consumption_endpoints and not isinstance(consumption_endpoints, dict):
            raise TypeError("Expected argument 'consumption_endpoints' to be a dict")
        pulumi.set(__self__, "consumption_endpoints", consumption_endpoints)
        if current_minor_version and not isinstance(current_minor_version, str):
            raise TypeError("Expected argument 'current_minor_version' to be a str")
        pulumi.set(__self__, "current_minor_version", current_minor_version)
        if customer_encryption_key and not isinstance(customer_encryption_key, dict):
            raise TypeError("Expected argument 'customer_encryption_key' to be a dict")
        pulumi.set(__self__, "customer_encryption_key", customer_encryption_key)
        if customer_managed_key_encryption_enabled and not isinstance(customer_managed_key_encryption_enabled, str):
            raise TypeError("Expected argument 'customer_managed_key_encryption_enabled' to be a str")
        pulumi.set(__self__, "customer_managed_key_encryption_enabled", customer_managed_key_encryption_enabled)
        if documentation and not isinstance(documentation, str):
            raise TypeError("Expected argument 'documentation' to be a str")
        pulumi.set(__self__, "documentation", documentation)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity and not isinstance(identity, dict):
            raise TypeError("Expected argument 'identity' to be a dict")
        pulumi.set(__self__, "identity", identity)
        if key_vault_url and not isinstance(key_vault_url, str):
            raise TypeError("Expected argument 'key_vault_url' to be a str")
        pulumi.set(__self__, "key_vault_url", key_vault_url)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if major_version and not isinstance(major_version, str):
            raise TypeError("Expected argument 'major_version' to be a str")
        pulumi.set(__self__, "major_version", major_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if networkacls and not isinstance(networkacls, dict):
            raise TypeError("Expected argument 'networkacls' to be a dict")
        pulumi.set(__self__, "networkacls", networkacls)
        if owners and not isinstance(owners, list):
            raise TypeError("Expected argument 'owners' to be a list")
        pulumi.set(__self__, "owners", owners)
        if private_links_enabled and not isinstance(private_links_enabled, str):
            raise TypeError("Expected argument 'private_links_enabled' to be a str")
        pulumi.set(__self__, "private_links_enabled", private_links_enabled)
        if product and not isinstance(product, str):
            raise TypeError("Expected argument 'product' to be a str")
        pulumi.set(__self__, "product", product)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if public_network_access and not isinstance(public_network_access, str):
            raise TypeError("Expected argument 'public_network_access' to be a str")
        pulumi.set(__self__, "public_network_access", public_network_access)
        if publisher and not isinstance(publisher, str):
            raise TypeError("Expected argument 'publisher' to be a str")
        pulumi.set(__self__, "publisher", publisher)
        if purview_account and not isinstance(purview_account, str):
            raise TypeError("Expected argument 'purview_account' to be a str")
        pulumi.set(__self__, "purview_account", purview_account)
        if purview_collection and not isinstance(purview_collection, str):
            raise TypeError("Expected argument 'purview_collection' to be a str")
        pulumi.set(__self__, "purview_collection", purview_collection)
        if redundancy and not isinstance(redundancy, str):
            raise TypeError("Expected argument 'redundancy' to be a str")
        pulumi.set(__self__, "redundancy", redundancy)
        if resource_guid and not isinstance(resource_guid, str):
            raise TypeError("Expected argument 'resource_guid' to be a str")
        pulumi.set(__self__, "resource_guid", resource_guid)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="availableMinorVersions")
    def available_minor_versions(self) -> Sequence[str]:
        """
        List of available minor versions of the data product resource.
        """
        return pulumi.get(self, "available_minor_versions")

    @property
    @pulumi.getter(name="consumptionEndpoints")
    def consumption_endpoints(self) -> 'outputs.ConsumptionEndpointsPropertiesResponse':
        """
        Resource links which exposed to the customer to query the data.
        """
        return pulumi.get(self, "consumption_endpoints")

    @property
    @pulumi.getter(name="currentMinorVersion")
    def current_minor_version(self) -> Optional[str]:
        """
        Current configured minor version of the data product resource.
        """
        return pulumi.get(self, "current_minor_version")

    @property
    @pulumi.getter(name="customerEncryptionKey")
    def customer_encryption_key(self) -> Optional['outputs.EncryptionKeyDetailsResponse']:
        """
        Customer managed encryption key details for data product.
        """
        return pulumi.get(self, "customer_encryption_key")

    @property
    @pulumi.getter(name="customerManagedKeyEncryptionEnabled")
    def customer_managed_key_encryption_enabled(self) -> Optional[str]:
        """
        Flag to enable customer managed key encryption for data product.
        """
        return pulumi.get(self, "customer_managed_key_encryption_enabled")

    @property
    @pulumi.getter
    def documentation(self) -> str:
        """
        Documentation link for the data product based on definition file.
        """
        return pulumi.get(self, "documentation")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.ManagedServiceIdentityResponse']:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter(name="keyVaultUrl")
    def key_vault_url(self) -> str:
        """
        Key vault url.
        """
        return pulumi.get(self, "key_vault_url")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="majorVersion")
    def major_version(self) -> str:
        """
        Major version of data product.
        """
        return pulumi.get(self, "major_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networkacls(self) -> Optional['outputs.DataProductNetworkAclsResponse']:
        """
        Network rule set for data product.
        """
        return pulumi.get(self, "networkacls")

    @property
    @pulumi.getter
    def owners(self) -> Optional[Sequence[str]]:
        """
        List of name or email associated with data product resource deployment.
        """
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="privateLinksEnabled")
    def private_links_enabled(self) -> Optional[str]:
        """
        Flag to enable or disable private link for data product resource.
        """
        return pulumi.get(self, "private_links_enabled")

    @property
    @pulumi.getter
    def product(self) -> str:
        """
        Product name of data product.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Latest provisioning state  of data product.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[str]:
        """
        Flag to enable or disable public access of data product resource.
        """
        return pulumi.get(self, "public_network_access")

    @property
    @pulumi.getter
    def publisher(self) -> str:
        """
        Data product publisher name.
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter(name="purviewAccount")
    def purview_account(self) -> Optional[str]:
        """
        Purview account url for data product to connect to.
        """
        return pulumi.get(self, "purview_account")

    @property
    @pulumi.getter(name="purviewCollection")
    def purview_collection(self) -> Optional[str]:
        """
        Purview collection url for data product to connect to.
        """
        return pulumi.get(self, "purview_collection")

    @property
    @pulumi.getter
    def redundancy(self) -> Optional[str]:
        """
        Flag to enable or disable redundancy for data product.
        """
        return pulumi.get(self, "redundancy")

    @property
    @pulumi.getter(name="resourceGuid")
    def resource_guid(self) -> str:
        """
        The resource GUID property of the data product resource.
        """
        return pulumi.get(self, "resource_guid")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetDataProductResult(GetDataProductResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataProductResult(
            available_minor_versions=self.available_minor_versions,
            consumption_endpoints=self.consumption_endpoints,
            current_minor_version=self.current_minor_version,
            customer_encryption_key=self.customer_encryption_key,
            customer_managed_key_encryption_enabled=self.customer_managed_key_encryption_enabled,
            documentation=self.documentation,
            id=self.id,
            identity=self.identity,
            key_vault_url=self.key_vault_url,
            location=self.location,
            major_version=self.major_version,
            name=self.name,
            networkacls=self.networkacls,
            owners=self.owners,
            private_links_enabled=self.private_links_enabled,
            product=self.product,
            provisioning_state=self.provisioning_state,
            public_network_access=self.public_network_access,
            publisher=self.publisher,
            purview_account=self.purview_account,
            purview_collection=self.purview_collection,
            redundancy=self.redundancy,
            resource_guid=self.resource_guid,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_data_product(data_product_name: Optional[str] = None,
                     resource_group_name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataProductResult:
    """
    Retrieve data product resource.


    :param str data_product_name: The data product resource name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['dataProductName'] = data_product_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:networkanalytics/v20231115:getDataProduct', __args__, opts=opts, typ=GetDataProductResult).value

    return AwaitableGetDataProductResult(
        available_minor_versions=pulumi.get(__ret__, 'available_minor_versions'),
        consumption_endpoints=pulumi.get(__ret__, 'consumption_endpoints'),
        current_minor_version=pulumi.get(__ret__, 'current_minor_version'),
        customer_encryption_key=pulumi.get(__ret__, 'customer_encryption_key'),
        customer_managed_key_encryption_enabled=pulumi.get(__ret__, 'customer_managed_key_encryption_enabled'),
        documentation=pulumi.get(__ret__, 'documentation'),
        id=pulumi.get(__ret__, 'id'),
        identity=pulumi.get(__ret__, 'identity'),
        key_vault_url=pulumi.get(__ret__, 'key_vault_url'),
        location=pulumi.get(__ret__, 'location'),
        major_version=pulumi.get(__ret__, 'major_version'),
        name=pulumi.get(__ret__, 'name'),
        networkacls=pulumi.get(__ret__, 'networkacls'),
        owners=pulumi.get(__ret__, 'owners'),
        private_links_enabled=pulumi.get(__ret__, 'private_links_enabled'),
        product=pulumi.get(__ret__, 'product'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        public_network_access=pulumi.get(__ret__, 'public_network_access'),
        publisher=pulumi.get(__ret__, 'publisher'),
        purview_account=pulumi.get(__ret__, 'purview_account'),
        purview_collection=pulumi.get(__ret__, 'purview_collection'),
        redundancy=pulumi.get(__ret__, 'redundancy'),
        resource_guid=pulumi.get(__ret__, 'resource_guid'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_data_product)
def get_data_product_output(data_product_name: Optional[pulumi.Input[str]] = None,
                            resource_group_name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataProductResult]:
    """
    Retrieve data product resource.


    :param str data_product_name: The data product resource name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
