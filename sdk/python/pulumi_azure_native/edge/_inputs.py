# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'SiteAddressPropertiesArgs',
    'SiteAddressPropertiesArgsDict',
    'SitePropertiesArgs',
    'SitePropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class SiteAddressPropertiesArgsDict(TypedDict):
        """
        Site address properties
        """
        city: NotRequired[pulumi.Input[builtins.str]]
        """
        City of the address
        """
        country: NotRequired[pulumi.Input[builtins.str]]
        """
        Country of the address
        """
        postal_code: NotRequired[pulumi.Input[builtins.str]]
        """
        Postal or ZIP code of the address
        """
        state_or_province: NotRequired[pulumi.Input[builtins.str]]
        """
        State or province of the address
        """
        street_address1: NotRequired[pulumi.Input[builtins.str]]
        """
        First line of the street address
        """
        street_address2: NotRequired[pulumi.Input[builtins.str]]
        """
        Second line of the street address
        """
elif False:
    SiteAddressPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SiteAddressPropertiesArgs:
    def __init__(__self__, *,
                 city: Optional[pulumi.Input[builtins.str]] = None,
                 country: Optional[pulumi.Input[builtins.str]] = None,
                 postal_code: Optional[pulumi.Input[builtins.str]] = None,
                 state_or_province: Optional[pulumi.Input[builtins.str]] = None,
                 street_address1: Optional[pulumi.Input[builtins.str]] = None,
                 street_address2: Optional[pulumi.Input[builtins.str]] = None):
        """
        Site address properties
        :param pulumi.Input[builtins.str] city: City of the address
        :param pulumi.Input[builtins.str] country: Country of the address
        :param pulumi.Input[builtins.str] postal_code: Postal or ZIP code of the address
        :param pulumi.Input[builtins.str] state_or_province: State or province of the address
        :param pulumi.Input[builtins.str] street_address1: First line of the street address
        :param pulumi.Input[builtins.str] street_address2: Second line of the street address
        """
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if state_or_province is not None:
            pulumi.set(__self__, "state_or_province", state_or_province)
        if street_address1 is not None:
            pulumi.set(__self__, "street_address1", street_address1)
        if street_address2 is not None:
            pulumi.set(__self__, "street_address2", street_address2)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        City of the address
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Country of the address
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Postal or ZIP code of the address
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        State or province of the address
        """
        return pulumi.get(self, "state_or_province")

    @state_or_province.setter
    def state_or_province(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state_or_province", value)

    @property
    @pulumi.getter(name="streetAddress1")
    def street_address1(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        First line of the street address
        """
        return pulumi.get(self, "street_address1")

    @street_address1.setter
    def street_address1(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "street_address1", value)

    @property
    @pulumi.getter(name="streetAddress2")
    def street_address2(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Second line of the street address
        """
        return pulumi.get(self, "street_address2")

    @street_address2.setter
    def street_address2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "street_address2", value)


if not MYPY:
    class SitePropertiesArgsDict(TypedDict):
        """
        Site properties
        """
        address_resource_id: NotRequired[pulumi.Input[builtins.str]]
        """
        AddressResource ArmId of Site resource
        """
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        Description of Site resource
        """
        display_name: NotRequired[pulumi.Input[builtins.str]]
        """
        displayName of Site resource
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Key-value pairs for labeling the site resource.
        """
        site_address: NotRequired[pulumi.Input['SiteAddressPropertiesArgsDict']]
        """
        Physical address of the site
        """
elif False:
    SitePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SitePropertiesArgs:
    def __init__(__self__, *,
                 address_resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 site_address: Optional[pulumi.Input['SiteAddressPropertiesArgs']] = None):
        """
        Site properties
        :param pulumi.Input[builtins.str] address_resource_id: AddressResource ArmId of Site resource
        :param pulumi.Input[builtins.str] description: Description of Site resource
        :param pulumi.Input[builtins.str] display_name: displayName of Site resource
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Key-value pairs for labeling the site resource.
        :param pulumi.Input['SiteAddressPropertiesArgs'] site_address: Physical address of the site
        """
        if address_resource_id is not None:
            pulumi.set(__self__, "address_resource_id", address_resource_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if site_address is not None:
            pulumi.set(__self__, "site_address", site_address)

    @property
    @pulumi.getter(name="addressResourceId")
    def address_resource_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        AddressResource ArmId of Site resource
        """
        return pulumi.get(self, "address_resource_id")

    @address_resource_id.setter
    def address_resource_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address_resource_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of Site resource
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        displayName of Site resource
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Key-value pairs for labeling the site resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="siteAddress")
    def site_address(self) -> Optional[pulumi.Input['SiteAddressPropertiesArgs']]:
        """
        Physical address of the site
        """
        return pulumi.get(self, "site_address")

    @site_address.setter
    def site_address(self, value: Optional[pulumi.Input['SiteAddressPropertiesArgs']]):
        pulumi.set(self, "site_address", value)


