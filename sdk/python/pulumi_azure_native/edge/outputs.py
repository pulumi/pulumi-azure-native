# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AvailableSolutionTemplateVersionResponse',
    'AzureResourceManagerCommonTypesExtendedLocationResponse',
    'CapabilityResponse',
    'ComponentStatusResponse',
    'ConfigTemplatePropertiesResponse',
    'ConfigurationPropertiesResponse',
    'ConfigurationReferencePropertiesResponse',
    'ContextPropertiesResponse',
    'DeploymentStatusResponse',
    'DiagnosticPropertiesResponse',
    'DynamicConfigurationPropertiesResponse',
    'DynamicConfigurationVersionPropertiesResponse',
    'DynamicSchemaPropertiesResponse',
    'ErrorActionResponse',
    'ErrorAdditionalInfoResponse',
    'ErrorDetailResponse',
    'ExecutionPropertiesResponse',
    'ExecutionStatusResponse',
    'HierarchyResponse',
    'InstancePropertiesResponse',
    'ReconciliationPolicyPropertiesResponse',
    'SchemaPropertiesResponse',
    'SchemaVersionPropertiesResponse',
    'SiteAddressPropertiesResponse',
    'SitePropertiesResponse',
    'SiteReferencePropertiesResponse',
    'SolutionDependencyResponse',
    'SolutionPropertiesResponse',
    'SolutionTemplatePropertiesResponse',
    'SolutionVersionPropertiesResponse',
    'StageSpecResponse',
    'StageStatusResponse',
    'SystemDataResponse',
    'TargetPropertiesResponse',
    'TargetStatusResponse',
    'TaskOptionResponse',
    'TaskSpecResponse',
    'WorkflowPropertiesResponse',
    'WorkflowVersionPropertiesResponse',
]

@pulumi.output_type
class AvailableSolutionTemplateVersionResponse(dict):
    """
    Available Solution template Version along with latest revision
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isConfigured":
            suggest = "is_configured"
        elif key == "latestConfigRevision":
            suggest = "latest_config_revision"
        elif key == "solutionTemplateVersion":
            suggest = "solution_template_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AvailableSolutionTemplateVersionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AvailableSolutionTemplateVersionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AvailableSolutionTemplateVersionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_configured: _builtins.bool,
                 latest_config_revision: _builtins.str,
                 solution_template_version: _builtins.str):
        """
        Available Solution template Version along with latest revision
        :param _builtins.bool is_configured: Has this solution template version been configured
        :param _builtins.str latest_config_revision: Latest Configuration Revision
        :param _builtins.str solution_template_version: Solution template Version
        """
        pulumi.set(__self__, "is_configured", is_configured)
        pulumi.set(__self__, "latest_config_revision", latest_config_revision)
        pulumi.set(__self__, "solution_template_version", solution_template_version)

    @_builtins.property
    @pulumi.getter(name="isConfigured")
    def is_configured(self) -> _builtins.bool:
        """
        Has this solution template version been configured
        """
        return pulumi.get(self, "is_configured")

    @_builtins.property
    @pulumi.getter(name="latestConfigRevision")
    def latest_config_revision(self) -> _builtins.str:
        """
        Latest Configuration Revision
        """
        return pulumi.get(self, "latest_config_revision")

    @_builtins.property
    @pulumi.getter(name="solutionTemplateVersion")
    def solution_template_version(self) -> _builtins.str:
        """
        Solution template Version
        """
        return pulumi.get(self, "solution_template_version")


@pulumi.output_type
class AzureResourceManagerCommonTypesExtendedLocationResponse(dict):
    """
    The complex type of the extended location.
    """
    def __init__(__self__, *,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        The complex type of the extended location.
        :param _builtins.str name: The name of the extended location.
        :param _builtins.str type: The type of the extended location.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the extended location.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the extended location.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CapabilityResponse(dict):
    """
    Capability, to match in Solution Templates & Targets
    """
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str,
                 state: Optional[_builtins.str] = None):
        """
        Capability, to match in Solution Templates & Targets
        :param _builtins.str description: Description of Capability
        :param _builtins.str name: Name of Capability
        :param _builtins.str state: State of resource
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of Capability
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of Capability
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        State of resource
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ComponentStatusResponse(dict):
    """
    Component Status
    """
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        Component Status
        :param _builtins.str name: Component name
        :param _builtins.str status: Component status
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Component name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Component status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ConfigTemplatePropertiesResponse(dict):
    """
    Config Template Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "latestVersion":
            suggest = "latest_version"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigTemplatePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigTemplatePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigTemplatePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: _builtins.str,
                 latest_version: _builtins.str,
                 provisioning_state: _builtins.str):
        """
        Config Template Properties
        :param _builtins.str description: Description of config template
        :param _builtins.str latest_version: Latest config template version
        :param _builtins.str provisioning_state: Provisioning state of resource
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "latest_version", latest_version)
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of config template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> _builtins.str:
        """
        Latest config template version
        """
        return pulumi.get(self, "latest_version")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class ConfigurationPropertiesResponse(dict):
    """
    Configuration Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str):
        """
        Configuration Properties
        :param _builtins.str provisioning_state: Provisioning state of resource
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class ConfigurationReferencePropertiesResponse(dict):
    """
    Properties for ConfigurationReference Resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "configurationResourceId":
            suggest = "configuration_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationReferencePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationReferencePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationReferencePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 configuration_resource_id: Optional[_builtins.str] = None):
        """
        Properties for ConfigurationReference Resource
        :param _builtins.str provisioning_state: The status of the last operation.
        :param _builtins.str configuration_resource_id: ArmId of Configuration resource
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if configuration_resource_id is not None:
            pulumi.set(__self__, "configuration_resource_id", configuration_resource_id)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="configurationResourceId")
    def configuration_resource_id(self) -> Optional[_builtins.str]:
        """
        ArmId of Configuration resource
        """
        return pulumi.get(self, "configuration_resource_id")


@pulumi.output_type
class ContextPropertiesResponse(dict):
    """
    Context Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContextPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContextPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContextPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capabilities: Sequence['outputs.CapabilityResponse'],
                 hierarchies: Sequence['outputs.HierarchyResponse'],
                 provisioning_state: _builtins.str):
        """
        Context Properties
        :param Sequence['CapabilityResponse'] capabilities: List of Capabilities
        :param Sequence['HierarchyResponse'] hierarchies: List of Hierarchies
        :param _builtins.str provisioning_state: Provisioning state of resource
        """
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "hierarchies", hierarchies)
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.CapabilityResponse']:
        """
        List of Capabilities
        """
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter
    def hierarchies(self) -> Sequence['outputs.HierarchyResponse']:
        """
        List of Hierarchies
        """
        return pulumi.get(self, "hierarchies")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class DeploymentStatusResponse(dict):
    """
    Deployment Status
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expectedRunningJobId":
            suggest = "expected_running_job_id"
        elif key == "lastModified":
            suggest = "last_modified"
        elif key == "runningJobId":
            suggest = "running_job_id"
        elif key == "statusDetails":
            suggest = "status_details"
        elif key == "targetStatuses":
            suggest = "target_statuses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployed: Optional[_builtins.int] = None,
                 expected_running_job_id: Optional[_builtins.int] = None,
                 generation: Optional[_builtins.int] = None,
                 last_modified: Optional[_builtins.str] = None,
                 running_job_id: Optional[_builtins.int] = None,
                 status: Optional[_builtins.str] = None,
                 status_details: Optional[_builtins.str] = None,
                 target_statuses: Optional[Sequence['outputs.TargetStatusResponse']] = None):
        """
        Deployment Status
        :param _builtins.int deployed: Indicates if Instance is deployed
        :param _builtins.int expected_running_job_id: The expected running job id
        :param _builtins.int generation: Deployment Generation
        :param _builtins.str last_modified: The lastModified of the Status
        :param _builtins.int running_job_id: The running job id
        :param _builtins.str status: Deployment status
        :param _builtins.str status_details: Status details
        :param Sequence['TargetStatusResponse'] target_statuses: Target resource statuses
        """
        if deployed is not None:
            pulumi.set(__self__, "deployed", deployed)
        if expected_running_job_id is not None:
            pulumi.set(__self__, "expected_running_job_id", expected_running_job_id)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if running_job_id is not None:
            pulumi.set(__self__, "running_job_id", running_job_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if target_statuses is not None:
            pulumi.set(__self__, "target_statuses", target_statuses)

    @_builtins.property
    @pulumi.getter
    def deployed(self) -> Optional[_builtins.int]:
        """
        Indicates if Instance is deployed
        """
        return pulumi.get(self, "deployed")

    @_builtins.property
    @pulumi.getter(name="expectedRunningJobId")
    def expected_running_job_id(self) -> Optional[_builtins.int]:
        """
        The expected running job id
        """
        return pulumi.get(self, "expected_running_job_id")

    @_builtins.property
    @pulumi.getter
    def generation(self) -> Optional[_builtins.int]:
        """
        Deployment Generation
        """
        return pulumi.get(self, "generation")

    @_builtins.property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[_builtins.str]:
        """
        The lastModified of the Status
        """
        return pulumi.get(self, "last_modified")

    @_builtins.property
    @pulumi.getter(name="runningJobId")
    def running_job_id(self) -> Optional[_builtins.int]:
        """
        The running job id
        """
        return pulumi.get(self, "running_job_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Deployment status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[_builtins.str]:
        """
        Status details
        """
        return pulumi.get(self, "status_details")

    @_builtins.property
    @pulumi.getter(name="targetStatuses")
    def target_statuses(self) -> Optional[Sequence['outputs.TargetStatusResponse']]:
        """
        Target resource statuses
        """
        return pulumi.get(self, "target_statuses")


@pulumi.output_type
class DiagnosticPropertiesResponse(dict):
    """
    The properties of a Diagnostic resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiagnosticPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiagnosticPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiagnosticPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str):
        """
        The properties of a Diagnostic resource.
        :param _builtins.str provisioning_state: The status of the last operation.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class DynamicConfigurationPropertiesResponse(dict):
    """
    Dynamic Configuration Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentVersion":
            suggest = "current_version"
        elif key == "dynamicConfigurationModel":
            suggest = "dynamic_configuration_model"
        elif key == "dynamicConfigurationType":
            suggest = "dynamic_configuration_type"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DynamicConfigurationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DynamicConfigurationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DynamicConfigurationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_version: _builtins.str,
                 dynamic_configuration_model: _builtins.str,
                 dynamic_configuration_type: _builtins.str,
                 provisioning_state: _builtins.str):
        """
        Dynamic Configuration Properties
        :param _builtins.str current_version: Current Version of dynamic configuration
        :param _builtins.str dynamic_configuration_model: Type of dynamic configuration model
        :param _builtins.str dynamic_configuration_type: Type of dynamic configuration
        :param _builtins.str provisioning_state: Provisioning state of resource
        """
        pulumi.set(__self__, "current_version", current_version)
        pulumi.set(__self__, "dynamic_configuration_model", dynamic_configuration_model)
        pulumi.set(__self__, "dynamic_configuration_type", dynamic_configuration_type)
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @_builtins.property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> _builtins.str:
        """
        Current Version of dynamic configuration
        """
        return pulumi.get(self, "current_version")

    @_builtins.property
    @pulumi.getter(name="dynamicConfigurationModel")
    def dynamic_configuration_model(self) -> _builtins.str:
        """
        Type of dynamic configuration model
        """
        return pulumi.get(self, "dynamic_configuration_model")

    @_builtins.property
    @pulumi.getter(name="dynamicConfigurationType")
    def dynamic_configuration_type(self) -> _builtins.str:
        """
        Type of dynamic configuration
        """
        return pulumi.get(self, "dynamic_configuration_type")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class DynamicConfigurationVersionPropertiesResponse(dict):
    """
    Dynamic Configuration Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "schemaId":
            suggest = "schema_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DynamicConfigurationVersionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DynamicConfigurationVersionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DynamicConfigurationVersionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 schema_id: _builtins.str,
                 values: _builtins.str):
        """
        Dynamic Configuration Properties
        :param _builtins.str provisioning_state: Provisioning state of resource
        :param _builtins.str schema_id: Schema Id for configuration
        :param _builtins.str values: Values of configuration version
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "schema_id", schema_id)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> _builtins.str:
        """
        Schema Id for configuration
        """
        return pulumi.get(self, "schema_id")

    @_builtins.property
    @pulumi.getter
    def values(self) -> _builtins.str:
        """
        Values of configuration version
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class DynamicSchemaPropertiesResponse(dict):
    """
    DynamicSchema Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationModel":
            suggest = "configuration_model"
        elif key == "configurationType":
            suggest = "configuration_type"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DynamicSchemaPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DynamicSchemaPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DynamicSchemaPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_model: _builtins.str,
                 configuration_type: _builtins.str,
                 provisioning_state: _builtins.str):
        """
        DynamicSchema Properties
        :param _builtins.str configuration_model: Type of configuration model
        :param _builtins.str configuration_type: Type of configuration
        :param _builtins.str provisioning_state: Provisioning state of resource
        """
        pulumi.set(__self__, "configuration_model", configuration_model)
        pulumi.set(__self__, "configuration_type", configuration_type)
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @_builtins.property
    @pulumi.getter(name="configurationModel")
    def configuration_model(self) -> _builtins.str:
        """
        Type of configuration model
        """
        return pulumi.get(self, "configuration_model")

    @_builtins.property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> _builtins.str:
        """
        Type of configuration
        """
        return pulumi.get(self, "configuration_type")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class ErrorActionResponse(dict):
    """
    Error Action Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxToleratedFailures":
            suggest = "max_tolerated_failures"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ErrorActionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ErrorActionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ErrorActionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_tolerated_failures: Optional[_builtins.int] = None,
                 mode: Optional[_builtins.str] = None):
        """
        Error Action Properties
        :param _builtins.int max_tolerated_failures: Max tolerated failures
        :param _builtins.str mode: Error action mode
        """
        if max_tolerated_failures is not None:
            pulumi.set(__self__, "max_tolerated_failures", max_tolerated_failures)
        if mode is None:
            mode = 'stopOnAnyFailure'
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter(name="maxToleratedFailures")
    def max_tolerated_failures(self) -> Optional[_builtins.int]:
        """
        Max tolerated failures
        """
        return pulumi.get(self, "max_tolerated_failures")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.str]:
        """
        Error action mode
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class ErrorAdditionalInfoResponse(dict):
    """
    The resource management error additional info.
    """
    def __init__(__self__, *,
                 info: Any,
                 type: _builtins.str):
        """
        The resource management error additional info.
        :param Any info: The additional info.
        :param _builtins.str type: The additional info type.
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def info(self) -> Any:
        """
        The additional info.
        """
        return pulumi.get(self, "info")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The additional info type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ErrorDetailResponse(dict):
    """
    The error detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfo":
            suggest = "additional_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ErrorDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_info: Sequence['outputs.ErrorAdditionalInfoResponse'],
                 code: _builtins.str,
                 details: Sequence['outputs.ErrorDetailResponse'],
                 message: _builtins.str,
                 target: _builtins.str):
        """
        The error detail.
        :param Sequence['ErrorAdditionalInfoResponse'] additional_info: The error additional info.
        :param _builtins.str code: The error code.
        :param Sequence['ErrorDetailResponse'] details: The error details.
        :param _builtins.str message: The error message.
        :param _builtins.str target: The error target.
        """
        pulumi.set(__self__, "additional_info", additional_info)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Sequence['outputs.ErrorAdditionalInfoResponse']:
        """
        The error additional info.
        """
        return pulumi.get(self, "additional_info")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        The error details.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.str:
        """
        The error target.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class ExecutionPropertiesResponse(dict):
    """
    Execution Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "workflowVersionId":
            suggest = "workflow_version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExecutionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExecutionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExecutionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 status: 'outputs.ExecutionStatusResponse',
                 workflow_version_id: _builtins.str,
                 specification: Optional[Any] = None):
        """
        Execution Properties
        :param _builtins.str provisioning_state: Provisioning state of resource
        :param 'ExecutionStatusResponse' status: Status of Execution
        :param _builtins.str workflow_version_id: Workflow version of execution
        :param Any specification: Execution specification
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "workflow_version_id", workflow_version_id)
        if specification is not None:
            pulumi.set(__self__, "specification", specification)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> 'outputs.ExecutionStatusResponse':
        """
        Status of Execution
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="workflowVersionId")
    def workflow_version_id(self) -> _builtins.str:
        """
        Workflow version of execution
        """
        return pulumi.get(self, "workflow_version_id")

    @_builtins.property
    @pulumi.getter
    def specification(self) -> Optional[Any]:
        """
        Execution specification
        """
        return pulumi.get(self, "specification")


@pulumi.output_type
class ExecutionStatusResponse(dict):
    """
    Execution Status
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stageHistory":
            suggest = "stage_history"
        elif key == "statusMessage":
            suggest = "status_message"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExecutionStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExecutionStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExecutionStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stage_history: Optional[Sequence['outputs.StageStatusResponse']] = None,
                 status: Optional[_builtins.int] = None,
                 status_message: Optional[_builtins.str] = None,
                 update_time: Optional[_builtins.str] = None):
        """
        Execution Status
        :param Sequence['StageStatusResponse'] stage_history: target resource statuses
        :param _builtins.int status: Deployment status
        :param _builtins.str status_message: status details
        :param _builtins.str update_time: The lastModified timestamp of the Status
        """
        if stage_history is not None:
            pulumi.set(__self__, "stage_history", stage_history)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="stageHistory")
    def stage_history(self) -> Optional[Sequence['outputs.StageStatusResponse']]:
        """
        target resource statuses
        """
        return pulumi.get(self, "stage_history")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        Deployment status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[_builtins.str]:
        """
        status details
        """
        return pulumi.get(self, "status_message")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[_builtins.str]:
        """
        The lastModified timestamp of the Status
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class HierarchyResponse(dict):
    """
    Hierarchy, to tag Sites / Hierarchy Provider nodes with what they represent
    """
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str):
        """
        Hierarchy, to tag Sites / Hierarchy Provider nodes with what they represent
        :param _builtins.str description: Description of Hierarchy
        :param _builtins.str name: Name of Hierarchy
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of Hierarchy
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of Hierarchy
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InstancePropertiesResponse(dict):
    """
    Instance Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentTimestampEpoch":
            suggest = "deployment_timestamp_epoch"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "solutionVersionId":
            suggest = "solution_version_id"
        elif key == "targetId":
            suggest = "target_id"
        elif key == "activeState":
            suggest = "active_state"
        elif key == "reconciliationPolicy":
            suggest = "reconciliation_policy"
        elif key == "solutionScope":
            suggest = "solution_scope"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_timestamp_epoch: _builtins.float,
                 provisioning_state: _builtins.str,
                 solution_version_id: _builtins.str,
                 status: 'outputs.DeploymentStatusResponse',
                 target_id: _builtins.str,
                 active_state: Optional[_builtins.str] = None,
                 reconciliation_policy: Optional['outputs.ReconciliationPolicyPropertiesResponse'] = None,
                 solution_scope: Optional[_builtins.str] = None):
        """
        Instance Properties
        :param _builtins.float deployment_timestamp_epoch: Deployment timestamp of instance
        :param _builtins.str provisioning_state: Provisioning state of resource
        :param _builtins.str solution_version_id: Solution version of instance
        :param 'DeploymentStatusResponse' status: Status of instance
        :param _builtins.str target_id: Target of instance
        :param _builtins.str active_state: State of instance
        :param 'ReconciliationPolicyPropertiesResponse' reconciliation_policy: Reconciliation policy of instance
        :param _builtins.str solution_scope: Scope of instance
        """
        pulumi.set(__self__, "deployment_timestamp_epoch", deployment_timestamp_epoch)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "solution_version_id", solution_version_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_id", target_id)
        if active_state is not None:
            pulumi.set(__self__, "active_state", active_state)
        if reconciliation_policy is not None:
            pulumi.set(__self__, "reconciliation_policy", reconciliation_policy)
        if solution_scope is not None:
            pulumi.set(__self__, "solution_scope", solution_scope)

    @_builtins.property
    @pulumi.getter(name="deploymentTimestampEpoch")
    def deployment_timestamp_epoch(self) -> _builtins.float:
        """
        Deployment timestamp of instance
        """
        return pulumi.get(self, "deployment_timestamp_epoch")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="solutionVersionId")
    def solution_version_id(self) -> _builtins.str:
        """
        Solution version of instance
        """
        return pulumi.get(self, "solution_version_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> 'outputs.DeploymentStatusResponse':
        """
        Status of instance
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        Target of instance
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="activeState")
    def active_state(self) -> Optional[_builtins.str]:
        """
        State of instance
        """
        return pulumi.get(self, "active_state")

    @_builtins.property
    @pulumi.getter(name="reconciliationPolicy")
    def reconciliation_policy(self) -> Optional['outputs.ReconciliationPolicyPropertiesResponse']:
        """
        Reconciliation policy of instance
        """
        return pulumi.get(self, "reconciliation_policy")

    @_builtins.property
    @pulumi.getter(name="solutionScope")
    def solution_scope(self) -> Optional[_builtins.str]:
        """
        Scope of instance
        """
        return pulumi.get(self, "solution_scope")


@pulumi.output_type
class ReconciliationPolicyPropertiesResponse(dict):
    """
    Defines a ReconciliationPolicy
    """
    def __init__(__self__, *,
                 interval: _builtins.str,
                 state: _builtins.str):
        """
        Defines a ReconciliationPolicy
        :param _builtins.str interval: Policy interval
        :param _builtins.str state: The state of the ReconciliationPolicy
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.str:
        """
        Policy interval
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the ReconciliationPolicy
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class SchemaPropertiesResponse(dict):
    """
    Schema Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentVersion":
            suggest = "current_version"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_version: _builtins.str,
                 provisioning_state: _builtins.str):
        """
        Schema Properties
        :param _builtins.str current_version: Current Version of schema
        :param _builtins.str provisioning_state: Provisioning state of resource
        """
        pulumi.set(__self__, "current_version", current_version)
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @_builtins.property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> _builtins.str:
        """
        Current Version of schema
        """
        return pulumi.get(self, "current_version")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class SchemaVersionPropertiesResponse(dict):
    """
    Schema Version Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaVersionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaVersionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaVersionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 value: _builtins.str):
        """
        Schema Version Properties
        :param _builtins.str provisioning_state: Provisioning state of resource
        :param _builtins.str value: Value of schema version
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value of schema version
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SiteAddressPropertiesResponse(dict):
    """
    Site address properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postalCode":
            suggest = "postal_code"
        elif key == "stateOrProvince":
            suggest = "state_or_province"
        elif key == "streetAddress1":
            suggest = "street_address1"
        elif key == "streetAddress2":
            suggest = "street_address2"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SiteAddressPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SiteAddressPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SiteAddressPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 city: Optional[_builtins.str] = None,
                 country: Optional[_builtins.str] = None,
                 postal_code: Optional[_builtins.str] = None,
                 state_or_province: Optional[_builtins.str] = None,
                 street_address1: Optional[_builtins.str] = None,
                 street_address2: Optional[_builtins.str] = None):
        """
        Site address properties
        :param _builtins.str city: City of the address
        :param _builtins.str country: Country of the address
        :param _builtins.str postal_code: Postal or ZIP code of the address
        :param _builtins.str state_or_province: State or province of the address
        :param _builtins.str street_address1: First line of the street address
        :param _builtins.str street_address2: Second line of the street address
        """
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if state_or_province is not None:
            pulumi.set(__self__, "state_or_province", state_or_province)
        if street_address1 is not None:
            pulumi.set(__self__, "street_address1", street_address1)
        if street_address2 is not None:
            pulumi.set(__self__, "street_address2", street_address2)

    @_builtins.property
    @pulumi.getter
    def city(self) -> Optional[_builtins.str]:
        """
        City of the address
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[_builtins.str]:
        """
        Country of the address
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[_builtins.str]:
        """
        Postal or ZIP code of the address
        """
        return pulumi.get(self, "postal_code")

    @_builtins.property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> Optional[_builtins.str]:
        """
        State or province of the address
        """
        return pulumi.get(self, "state_or_province")

    @_builtins.property
    @pulumi.getter(name="streetAddress1")
    def street_address1(self) -> Optional[_builtins.str]:
        """
        First line of the street address
        """
        return pulumi.get(self, "street_address1")

    @_builtins.property
    @pulumi.getter(name="streetAddress2")
    def street_address2(self) -> Optional[_builtins.str]:
        """
        Second line of the street address
        """
        return pulumi.get(self, "street_address2")


@pulumi.output_type
class SitePropertiesResponse(dict):
    """
    Site properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "addressResourceId":
            suggest = "address_resource_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "siteAddress":
            suggest = "site_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SitePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SitePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SitePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 address_resource_id: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 display_name: Optional[_builtins.str] = None,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 site_address: Optional['outputs.SiteAddressPropertiesResponse'] = None):
        """
        Site properties
        :param _builtins.str provisioning_state: Provisioning state of last operation
        :param _builtins.str address_resource_id: AddressResource ArmId of Site resource
        :param _builtins.str description: Description of Site resource
        :param _builtins.str display_name: displayName of Site resource
        :param Mapping[str, _builtins.str] labels: Key-value pairs for labeling the site resource.
        :param 'SiteAddressPropertiesResponse' site_address: Physical address of the site
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if address_resource_id is not None:
            pulumi.set(__self__, "address_resource_id", address_resource_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if site_address is not None:
            pulumi.set(__self__, "site_address", site_address)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of last operation
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="addressResourceId")
    def address_resource_id(self) -> Optional[_builtins.str]:
        """
        AddressResource ArmId of Site resource
        """
        return pulumi.get(self, "address_resource_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Description of Site resource
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        displayName of Site resource
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key-value pairs for labeling the site resource.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="siteAddress")
    def site_address(self) -> Optional['outputs.SiteAddressPropertiesResponse']:
        """
        Physical address of the site
        """
        return pulumi.get(self, "site_address")


@pulumi.output_type
class SiteReferencePropertiesResponse(dict):
    """
    Site Reference Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "siteId":
            suggest = "site_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SiteReferencePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SiteReferencePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SiteReferencePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 site_id: _builtins.str):
        """
        Site Reference Properties
        :param _builtins.str provisioning_state: Provisioning State
        :param _builtins.str site_id: Azure Resource ID for Site
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "site_id", site_id)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning State
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.str:
        """
        Azure Resource ID for Site
        """
        return pulumi.get(self, "site_id")


@pulumi.output_type
class SolutionDependencyResponse(dict):
    """
    Solution Dependency Context
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "solutionTemplateVersionId":
            suggest = "solution_template_version_id"
        elif key == "solutionVersionId":
            suggest = "solution_version_id"
        elif key == "targetId":
            suggest = "target_id"
        elif key == "solutionInstanceName":
            suggest = "solution_instance_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SolutionDependencyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SolutionDependencyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SolutionDependencyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 solution_template_version_id: _builtins.str,
                 solution_version_id: _builtins.str,
                 target_id: _builtins.str,
                 dependencies: Optional[Sequence['outputs.SolutionDependencyResponse']] = None,
                 solution_instance_name: Optional[_builtins.str] = None):
        """
        Solution Dependency Context
        :param _builtins.str solution_template_version_id: Solution Template Version Id
        :param _builtins.str solution_version_id: Solution Version Id
        :param _builtins.str target_id: Target Id
        :param Sequence['SolutionDependencyResponse'] dependencies: Solution dependencies
        :param _builtins.str solution_instance_name: Solution Instance Name
        """
        pulumi.set(__self__, "solution_template_version_id", solution_template_version_id)
        pulumi.set(__self__, "solution_version_id", solution_version_id)
        pulumi.set(__self__, "target_id", target_id)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if solution_instance_name is not None:
            pulumi.set(__self__, "solution_instance_name", solution_instance_name)

    @_builtins.property
    @pulumi.getter(name="solutionTemplateVersionId")
    def solution_template_version_id(self) -> _builtins.str:
        """
        Solution Template Version Id
        """
        return pulumi.get(self, "solution_template_version_id")

    @_builtins.property
    @pulumi.getter(name="solutionVersionId")
    def solution_version_id(self) -> _builtins.str:
        """
        Solution Version Id
        """
        return pulumi.get(self, "solution_version_id")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        Target Id
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter
    def dependencies(self) -> Optional[Sequence['outputs.SolutionDependencyResponse']]:
        """
        Solution dependencies
        """
        return pulumi.get(self, "dependencies")

    @_builtins.property
    @pulumi.getter(name="solutionInstanceName")
    def solution_instance_name(self) -> Optional[_builtins.str]:
        """
        Solution Instance Name
        """
        return pulumi.get(self, "solution_instance_name")


@pulumi.output_type
class SolutionPropertiesResponse(dict):
    """
    Solution Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availableSolutionTemplateVersions":
            suggest = "available_solution_template_versions"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "solutionTemplateId":
            suggest = "solution_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SolutionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SolutionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SolutionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 available_solution_template_versions: Sequence['outputs.AvailableSolutionTemplateVersionResponse'],
                 provisioning_state: _builtins.str,
                 solution_template_id: _builtins.str):
        """
        Solution Properties
        :param Sequence['AvailableSolutionTemplateVersionResponse'] available_solution_template_versions: List of latest revisions for available solution template versions
        :param _builtins.str provisioning_state: Provisioning state of resource
        :param _builtins.str solution_template_id: Solution template Id
        """
        pulumi.set(__self__, "available_solution_template_versions", available_solution_template_versions)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "solution_template_id", solution_template_id)

    @_builtins.property
    @pulumi.getter(name="availableSolutionTemplateVersions")
    def available_solution_template_versions(self) -> Sequence['outputs.AvailableSolutionTemplateVersionResponse']:
        """
        List of latest revisions for available solution template versions
        """
        return pulumi.get(self, "available_solution_template_versions")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="solutionTemplateId")
    def solution_template_id(self) -> _builtins.str:
        """
        Solution template Id
        """
        return pulumi.get(self, "solution_template_id")


@pulumi.output_type
class SolutionTemplatePropertiesResponse(dict):
    """
    Solution Template Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "latestVersion":
            suggest = "latest_version"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "enableExternalValidation":
            suggest = "enable_external_validation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SolutionTemplatePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SolutionTemplatePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SolutionTemplatePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capabilities: Sequence[_builtins.str],
                 description: _builtins.str,
                 latest_version: _builtins.str,
                 provisioning_state: _builtins.str,
                 enable_external_validation: Optional[_builtins.bool] = None,
                 state: Optional[_builtins.str] = None):
        """
        Solution Template Properties
        :param Sequence[_builtins.str] capabilities: List of capabilities
        :param _builtins.str description: Description of Solution template
        :param _builtins.str latest_version: Latest solution template version
        :param _builtins.str provisioning_state: Provisioning state of resource
        :param _builtins.bool enable_external_validation: Flag to enable external validation
        :param _builtins.str state: State of resource
        """
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "latest_version", latest_version)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if enable_external_validation is not None:
            pulumi.set(__self__, "enable_external_validation", enable_external_validation)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence[_builtins.str]:
        """
        List of capabilities
        """
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of Solution template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> _builtins.str:
        """
        Latest solution template version
        """
        return pulumi.get(self, "latest_version")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="enableExternalValidation")
    def enable_external_validation(self) -> Optional[_builtins.bool]:
        """
        Flag to enable external validation
        """
        return pulumi.get(self, "enable_external_validation")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        State of resource
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class SolutionVersionPropertiesResponse(dict):
    """
    Solution Version Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionType":
            suggest = "action_type"
        elif key == "errorDetails":
            suggest = "error_details"
        elif key == "externalValidationId":
            suggest = "external_validation_id"
        elif key == "latestActionTrackingUri":
            suggest = "latest_action_tracking_uri"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "reviewId":
            suggest = "review_id"
        elif key == "solutionDependencies":
            suggest = "solution_dependencies"
        elif key == "solutionInstanceName":
            suggest = "solution_instance_name"
        elif key == "solutionTemplateVersionId":
            suggest = "solution_template_version_id"
        elif key == "targetDisplayName":
            suggest = "target_display_name"
        elif key == "targetLevelConfiguration":
            suggest = "target_level_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SolutionVersionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SolutionVersionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SolutionVersionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_type: _builtins.str,
                 configuration: _builtins.str,
                 error_details: 'outputs.ErrorDetailResponse',
                 external_validation_id: _builtins.str,
                 latest_action_tracking_uri: _builtins.str,
                 provisioning_state: _builtins.str,
                 review_id: _builtins.str,
                 revision: _builtins.int,
                 solution_dependencies: Sequence['outputs.SolutionDependencyResponse'],
                 solution_instance_name: _builtins.str,
                 solution_template_version_id: _builtins.str,
                 specification: Any,
                 state: _builtins.str,
                 target_display_name: _builtins.str,
                 target_level_configuration: _builtins.str):
        """
        Solution Version Properties
        :param _builtins.str action_type: The type of the latest action performed on this solution version.
        :param _builtins.str configuration: Resolved configuration values
        :param 'ErrorDetailResponse' error_details: Error Details if any failure is there
        :param _builtins.str external_validation_id: External validation id
        :param _builtins.str latest_action_tracking_uri: The URI for tracking the latest action performed on this solution version.
        :param _builtins.str provisioning_state: Provisioning state of resource
        :param _builtins.str review_id: Review id of resolved config for this solution version
        :param _builtins.int revision: Revision number of resolved config for this solution version
        :param Sequence['SolutionDependencyResponse'] solution_dependencies: Solution Dependency Context
        :param _builtins.str solution_instance_name: Solution instance name
        :param _builtins.str solution_template_version_id: Solution Template Version Id
        :param Any specification: App components spec
        :param _builtins.str state: State of solution instance
        :param _builtins.str target_display_name: Name of applicable target's display name
        :param _builtins.str target_level_configuration: Configuration on the line level across all solution template versions
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "error_details", error_details)
        pulumi.set(__self__, "external_validation_id", external_validation_id)
        pulumi.set(__self__, "latest_action_tracking_uri", latest_action_tracking_uri)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "review_id", review_id)
        pulumi.set(__self__, "revision", revision)
        pulumi.set(__self__, "solution_dependencies", solution_dependencies)
        pulumi.set(__self__, "solution_instance_name", solution_instance_name)
        pulumi.set(__self__, "solution_template_version_id", solution_template_version_id)
        pulumi.set(__self__, "specification", specification)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "target_display_name", target_display_name)
        pulumi.set(__self__, "target_level_configuration", target_level_configuration)

    @_builtins.property
    @pulumi.getter(name="actionType")
    def action_type(self) -> _builtins.str:
        """
        The type of the latest action performed on this solution version.
        """
        return pulumi.get(self, "action_type")

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> _builtins.str:
        """
        Resolved configuration values
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> 'outputs.ErrorDetailResponse':
        """
        Error Details if any failure is there
        """
        return pulumi.get(self, "error_details")

    @_builtins.property
    @pulumi.getter(name="externalValidationId")
    def external_validation_id(self) -> _builtins.str:
        """
        External validation id
        """
        return pulumi.get(self, "external_validation_id")

    @_builtins.property
    @pulumi.getter(name="latestActionTrackingUri")
    def latest_action_tracking_uri(self) -> _builtins.str:
        """
        The URI for tracking the latest action performed on this solution version.
        """
        return pulumi.get(self, "latest_action_tracking_uri")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="reviewId")
    def review_id(self) -> _builtins.str:
        """
        Review id of resolved config for this solution version
        """
        return pulumi.get(self, "review_id")

    @_builtins.property
    @pulumi.getter
    def revision(self) -> _builtins.int:
        """
        Revision number of resolved config for this solution version
        """
        return pulumi.get(self, "revision")

    @_builtins.property
    @pulumi.getter(name="solutionDependencies")
    def solution_dependencies(self) -> Sequence['outputs.SolutionDependencyResponse']:
        """
        Solution Dependency Context
        """
        return pulumi.get(self, "solution_dependencies")

    @_builtins.property
    @pulumi.getter(name="solutionInstanceName")
    def solution_instance_name(self) -> _builtins.str:
        """
        Solution instance name
        """
        return pulumi.get(self, "solution_instance_name")

    @_builtins.property
    @pulumi.getter(name="solutionTemplateVersionId")
    def solution_template_version_id(self) -> _builtins.str:
        """
        Solution Template Version Id
        """
        return pulumi.get(self, "solution_template_version_id")

    @_builtins.property
    @pulumi.getter
    def specification(self) -> Any:
        """
        App components spec
        """
        return pulumi.get(self, "specification")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        State of solution instance
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="targetDisplayName")
    def target_display_name(self) -> _builtins.str:
        """
        Name of applicable target's display name
        """
        return pulumi.get(self, "target_display_name")

    @_builtins.property
    @pulumi.getter(name="targetLevelConfiguration")
    def target_level_configuration(self) -> _builtins.str:
        """
        Configuration on the line level across all solution template versions
        """
        return pulumi.get(self, "target_level_configuration")


@pulumi.output_type
class StageSpecResponse(dict):
    """
    Stage Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "taskOption":
            suggest = "task_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StageSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StageSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StageSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 specification: Optional[Any] = None,
                 task_option: Optional['outputs.TaskOptionResponse'] = None,
                 tasks: Optional[Sequence['outputs.TaskSpecResponse']] = None):
        """
        Stage Properties
        :param _builtins.str name: Name of Stage
        :param Any specification: Stage specification
        :param 'TaskOptionResponse' task_option: Task option for the stage
        :param Sequence['TaskSpecResponse'] tasks: List of tasks in the stage
        """
        pulumi.set(__self__, "name", name)
        if specification is not None:
            pulumi.set(__self__, "specification", specification)
        if task_option is not None:
            pulumi.set(__self__, "task_option", task_option)
        if tasks is not None:
            pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of Stage
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def specification(self) -> Optional[Any]:
        """
        Stage specification
        """
        return pulumi.get(self, "specification")

    @_builtins.property
    @pulumi.getter(name="taskOption")
    def task_option(self) -> Optional['outputs.TaskOptionResponse']:
        """
        Task option for the stage
        """
        return pulumi.get(self, "task_option")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Optional[Sequence['outputs.TaskSpecResponse']]:
        """
        List of tasks in the stage
        """
        return pulumi.get(self, "tasks")


@pulumi.output_type
class StageStatusResponse(dict):
    """
    Result of Stage execution
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorMessage":
            suggest = "error_message"
        elif key == "isActive":
            suggest = "is_active"
        elif key == "statusMessage":
            suggest = "status_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StageStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StageStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StageStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_message: Optional[_builtins.str] = None,
                 inputs: Optional[Any] = None,
                 is_active: Optional[_builtins.str] = None,
                 nextstage: Optional[_builtins.str] = None,
                 outputs: Optional[Any] = None,
                 stage: Optional[_builtins.str] = None,
                 status: Optional[_builtins.int] = None,
                 status_message: Optional[_builtins.str] = None):
        """
        Result of Stage execution
        :param _builtins.str error_message: Error message
        :param Any inputs: The inputs of the StageHistory, Inputs holds a key-value map of user-defined parameters for the initial stage
        :param _builtins.str is_active: whether this stage is active or inactive
        :param _builtins.str nextstage: Next stage
        :param Any outputs: The outputs of the StageHistory, it is different as the different input stages.
        :param _builtins.str stage: Current stage
        :param _builtins.int status: Deployment status
        :param _builtins.str status_message: Status message
        """
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if inputs is not None:
            pulumi.set(__self__, "inputs", inputs)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if nextstage is not None:
            pulumi.set(__self__, "nextstage", nextstage)
        if outputs is not None:
            pulumi.set(__self__, "outputs", outputs)
        if stage is not None:
            pulumi.set(__self__, "stage", stage)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter
    def inputs(self) -> Optional[Any]:
        """
        The inputs of the StageHistory, Inputs holds a key-value map of user-defined parameters for the initial stage
        """
        return pulumi.get(self, "inputs")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[_builtins.str]:
        """
        whether this stage is active or inactive
        """
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter
    def nextstage(self) -> Optional[_builtins.str]:
        """
        Next stage
        """
        return pulumi.get(self, "nextstage")

    @_builtins.property
    @pulumi.getter
    def outputs(self) -> Optional[Any]:
        """
        The outputs of the StageHistory, it is different as the different input stages.
        """
        return pulumi.get(self, "outputs")

    @_builtins.property
    @pulumi.getter
    def stage(self) -> Optional[_builtins.str]:
        """
        Current stage
        """
        return pulumi.get(self, "stage")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        Deployment status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[_builtins.str]:
        """
        Status message
        """
        return pulumi.get(self, "status_message")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TargetPropertiesResponse(dict):
    """
    Target Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contextId":
            suggest = "context_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "hierarchyLevel":
            suggest = "hierarchy_level"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "targetSpecification":
            suggest = "target_specification"
        elif key == "solutionScope":
            suggest = "solution_scope"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capabilities: Sequence[_builtins.str],
                 context_id: _builtins.str,
                 description: _builtins.str,
                 display_name: _builtins.str,
                 hierarchy_level: _builtins.str,
                 provisioning_state: _builtins.str,
                 status: 'outputs.DeploymentStatusResponse',
                 target_specification: Any,
                 solution_scope: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None):
        """
        Target Properties
        :param Sequence[_builtins.str] capabilities: List of capabilities
        :param _builtins.str context_id: ArmId of Context
        :param _builtins.str description: Description of target
        :param _builtins.str display_name: Display name of target
        :param _builtins.str hierarchy_level: Hierarchy Level
        :param _builtins.str provisioning_state: Provisioning state of resource
        :param 'DeploymentStatusResponse' status: Status of target
        :param Any target_specification: target spec
        :param _builtins.str solution_scope: Scope of the target resource
        :param _builtins.str state: State of resource
        """
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "context_id", context_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "hierarchy_level", hierarchy_level)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_specification", target_specification)
        if solution_scope is not None:
            pulumi.set(__self__, "solution_scope", solution_scope)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence[_builtins.str]:
        """
        List of capabilities
        """
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="contextId")
    def context_id(self) -> _builtins.str:
        """
        ArmId of Context
        """
        return pulumi.get(self, "context_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of target
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Display name of target
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="hierarchyLevel")
    def hierarchy_level(self) -> _builtins.str:
        """
        Hierarchy Level
        """
        return pulumi.get(self, "hierarchy_level")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> 'outputs.DeploymentStatusResponse':
        """
        Status of target
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="targetSpecification")
    def target_specification(self) -> Any:
        """
        target spec
        """
        return pulumi.get(self, "target_specification")

    @_builtins.property
    @pulumi.getter(name="solutionScope")
    def solution_scope(self) -> Optional[_builtins.str]:
        """
        Scope of the target resource
        """
        return pulumi.get(self, "solution_scope")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        State of resource
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class TargetStatusResponse(dict):
    """
    Target Status
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentStatuses":
            suggest = "component_statuses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_statuses: Optional[Sequence['outputs.ComponentStatusResponse']] = None,
                 name: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        Target Status
        :param Sequence['ComponentStatusResponse'] component_statuses: Component statuses
        :param _builtins.str name: Target name
        :param _builtins.str status: Target status
        """
        if component_statuses is not None:
            pulumi.set(__self__, "component_statuses", component_statuses)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="componentStatuses")
    def component_statuses(self) -> Optional[Sequence['outputs.ComponentStatusResponse']]:
        """
        Component statuses
        """
        return pulumi.get(self, "component_statuses")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Target name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Target status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class TaskOptionResponse(dict):
    """
    Task Option Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorAction":
            suggest = "error_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskOptionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskOptionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskOptionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 concurrency: Optional[_builtins.int] = None,
                 error_action: Optional['outputs.ErrorActionResponse'] = None):
        """
        Task Option Properties
        :param _builtins.int concurrency: Parallel worker numbers of the tasks
        :param 'ErrorActionResponse' error_action: Error action for the tasks
        """
        if concurrency is None:
            concurrency = 1
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if error_action is not None:
            pulumi.set(__self__, "error_action", error_action)

    @_builtins.property
    @pulumi.getter
    def concurrency(self) -> Optional[_builtins.int]:
        """
        Parallel worker numbers of the tasks
        """
        return pulumi.get(self, "concurrency")

    @_builtins.property
    @pulumi.getter(name="errorAction")
    def error_action(self) -> Optional['outputs.ErrorActionResponse']:
        """
        Error action for the tasks
        """
        return pulumi.get(self, "error_action")


@pulumi.output_type
class TaskSpecResponse(dict):
    """
    Task Spec
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetId":
            suggest = "target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 specification: Any,
                 target_id: Optional[_builtins.str] = None):
        """
        Task Spec
        :param _builtins.str name: Name of Task
        :param Any specification: Task specification
        :param _builtins.str target_id: Target ARM id
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "specification", specification)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of Task
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def specification(self) -> Any:
        """
        Task specification
        """
        return pulumi.get(self, "specification")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[_builtins.str]:
        """
        Target ARM id
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class WorkflowPropertiesResponse(dict):
    """
    Workflow Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "workflowTemplateId":
            suggest = "workflow_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 workflow_template_id: _builtins.str):
        """
        Workflow Properties
        :param _builtins.str provisioning_state: Provisioning state of resource
        :param _builtins.str workflow_template_id: Workflow template Id
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "workflow_template_id", workflow_template_id)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="workflowTemplateId")
    def workflow_template_id(self) -> _builtins.str:
        """
        Workflow template Id
        """
        return pulumi.get(self, "workflow_template_id")


@pulumi.output_type
class WorkflowVersionPropertiesResponse(dict):
    """
    Workflow Version Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "reviewId":
            suggest = "review_id"
        elif key == "stageSpec":
            suggest = "stage_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowVersionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowVersionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowVersionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration: _builtins.str,
                 provisioning_state: _builtins.str,
                 review_id: _builtins.str,
                 revision: _builtins.int,
                 stage_spec: Sequence['outputs.StageSpecResponse'],
                 state: _builtins.str,
                 specification: Optional[Any] = None):
        """
        Workflow Version Properties
        :param _builtins.str configuration: Resolved configuration values
        :param _builtins.str provisioning_state: Provisioning state of resource
        :param _builtins.str review_id: Review id of resolved config for this workflow version
        :param _builtins.int revision: Revision number of resolved config for this workflow version
        :param Sequence['StageSpecResponse'] stage_spec: A list of stage specs
        :param _builtins.str state: State of workflow version
        :param Any specification: Execution specification
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "review_id", review_id)
        pulumi.set(__self__, "revision", revision)
        pulumi.set(__self__, "stage_spec", stage_spec)
        pulumi.set(__self__, "state", state)
        if specification is not None:
            pulumi.set(__self__, "specification", specification)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> _builtins.str:
        """
        Resolved configuration values
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="reviewId")
    def review_id(self) -> _builtins.str:
        """
        Review id of resolved config for this workflow version
        """
        return pulumi.get(self, "review_id")

    @_builtins.property
    @pulumi.getter
    def revision(self) -> _builtins.int:
        """
        Revision number of resolved config for this workflow version
        """
        return pulumi.get(self, "revision")

    @_builtins.property
    @pulumi.getter(name="stageSpec")
    def stage_spec(self) -> Sequence['outputs.StageSpecResponse']:
        """
        A list of stage specs
        """
        return pulumi.get(self, "stage_spec")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        State of workflow version
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def specification(self) -> Optional[Any]:
        """
        Execution specification
        """
        return pulumi.get(self, "specification")


