# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetWorkflowVersionResult',
    'AwaitableGetWorkflowVersionResult',
    'get_workflow_version',
    'get_workflow_version_output',
]

@pulumi.output_type
class GetWorkflowVersionResult:
    """
    Workflow Version Resource
    """
    def __init__(__self__, azure_api_version=None, e_tag=None, extended_location=None, id=None, name=None, properties=None, system_data=None, type=None):
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if e_tag and not isinstance(e_tag, str):
            raise TypeError("Expected argument 'e_tag' to be a str")
        pulumi.set(__self__, "e_tag", e_tag)
        if extended_location and not isinstance(extended_location, dict):
            raise TypeError("Expected argument 'extended_location' to be a dict")
        pulumi.set(__self__, "extended_location", extended_location)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if properties and not isinstance(properties, dict):
            raise TypeError("Expected argument 'properties' to be a dict")
        pulumi.set(__self__, "properties", properties)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> builtins.str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="eTag")
    def e_tag(self) -> builtins.str:
        """
        If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
        """
        return pulumi.get(self, "e_tag")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> Optional['outputs.AzureResourceManagerCommonTypesExtendedLocationResponse']:
        """
        The complex type of the extended location.
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> 'outputs.WorkflowVersionPropertiesResponse':
        """
        The resource-specific properties for this resource.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetWorkflowVersionResult(GetWorkflowVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkflowVersionResult(
            azure_api_version=self.azure_api_version,
            e_tag=self.e_tag,
            extended_location=self.extended_location,
            id=self.id,
            name=self.name,
            properties=self.properties,
            system_data=self.system_data,
            type=self.type)


def get_workflow_version(context_name: Optional[builtins.str] = None,
                         resource_group_name: Optional[builtins.str] = None,
                         version_name: Optional[builtins.str] = None,
                         workflow_name: Optional[builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkflowVersionResult:
    """
    Get a Workflow Version Resource

    Uses Azure REST API version 2025-06-01.


    :param builtins.str context_name: The name of the Context.
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    :param builtins.str version_name: The name of the workflowVersion.
    :param builtins.str workflow_name: Name of the workflow
    """
    __args__ = dict()
    __args__['contextName'] = context_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['versionName'] = version_name
    __args__['workflowName'] = workflow_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:edge:getWorkflowVersion', __args__, opts=opts, typ=GetWorkflowVersionResult).value

    return AwaitableGetWorkflowVersionResult(
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        e_tag=pulumi.get(__ret__, 'e_tag'),
        extended_location=pulumi.get(__ret__, 'extended_location'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        properties=pulumi.get(__ret__, 'properties'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))
def get_workflow_version_output(context_name: Optional[pulumi.Input[builtins.str]] = None,
                                resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                                version_name: Optional[pulumi.Input[builtins.str]] = None,
                                workflow_name: Optional[pulumi.Input[builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkflowVersionResult]:
    """
    Get a Workflow Version Resource

    Uses Azure REST API version 2025-06-01.


    :param builtins.str context_name: The name of the Context.
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    :param builtins.str version_name: The name of the workflowVersion.
    :param builtins.str workflow_name: Name of the workflow
    """
    __args__ = dict()
    __args__['contextName'] = context_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['versionName'] = version_name
    __args__['workflowName'] = workflow_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:edge:getWorkflowVersion', __args__, opts=opts, typ=GetWorkflowVersionResult)
    return __ret__.apply(lambda __response__: GetWorkflowVersionResult(
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        e_tag=pulumi.get(__response__, 'e_tag'),
        extended_location=pulumi.get(__response__, 'extended_location'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        properties=pulumi.get(__response__, 'properties'),
        system_data=pulumi.get(__response__, 'system_data'),
        type=pulumi.get(__response__, 'type')))
