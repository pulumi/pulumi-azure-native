# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AutoscaleSettingsArgs',
    'AutoscaleSettingsArgsDict',
    'CassandraViewResourceArgs',
    'CassandraViewResourceArgsDict',
    'CreateUpdateOptionsArgs',
    'CreateUpdateOptionsArgsDict',
    'GraphResourceArgs',
    'GraphResourceArgsDict',
    'ManagedServiceIdentityArgs',
    'ManagedServiceIdentityArgsDict',
    'MongoClusterRestoreParametersArgs',
    'MongoClusterRestoreParametersArgsDict',
    'NodeGroupSpecArgs',
    'NodeGroupSpecArgsDict',
]

MYPY = False

if not MYPY:
    class AutoscaleSettingsArgsDict(TypedDict):
        max_throughput: NotRequired[pulumi.Input[int]]
        """
        Represents maximum throughput, the resource can scale up to.
        """
elif False:
    AutoscaleSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutoscaleSettingsArgs:
    def __init__(__self__, *,
                 max_throughput: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] max_throughput: Represents maximum throughput, the resource can scale up to.
        """
        if max_throughput is not None:
            pulumi.set(__self__, "max_throughput", max_throughput)

    @property
    @pulumi.getter(name="maxThroughput")
    def max_throughput(self) -> Optional[pulumi.Input[int]]:
        """
        Represents maximum throughput, the resource can scale up to.
        """
        return pulumi.get(self, "max_throughput")

    @max_throughput.setter
    def max_throughput(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_throughput", value)


if not MYPY:
    class CassandraViewResourceArgsDict(TypedDict):
        """
        Cosmos DB Cassandra view resource object
        """
        id: pulumi.Input[str]
        """
        Name of the Cosmos DB Cassandra view
        """
        view_definition: pulumi.Input[str]
        """
        View Definition of the Cosmos DB Cassandra view
        """
elif False:
    CassandraViewResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CassandraViewResourceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 view_definition: pulumi.Input[str]):
        """
        Cosmos DB Cassandra view resource object
        :param pulumi.Input[str] id: Name of the Cosmos DB Cassandra view
        :param pulumi.Input[str] view_definition: View Definition of the Cosmos DB Cassandra view
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "view_definition", view_definition)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Name of the Cosmos DB Cassandra view
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="viewDefinition")
    def view_definition(self) -> pulumi.Input[str]:
        """
        View Definition of the Cosmos DB Cassandra view
        """
        return pulumi.get(self, "view_definition")

    @view_definition.setter
    def view_definition(self, value: pulumi.Input[str]):
        pulumi.set(self, "view_definition", value)


if not MYPY:
    class CreateUpdateOptionsArgsDict(TypedDict):
        """
        CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
        """
        autoscale_settings: NotRequired[pulumi.Input['AutoscaleSettingsArgsDict']]
        """
        Specifies the Autoscale settings.
        """
        throughput: NotRequired[pulumi.Input[int]]
        """
        Request Units per second. For example, "throughput": 10000.
        """
elif False:
    CreateUpdateOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CreateUpdateOptionsArgs:
    def __init__(__self__, *,
                 autoscale_settings: Optional[pulumi.Input['AutoscaleSettingsArgs']] = None,
                 throughput: Optional[pulumi.Input[int]] = None):
        """
        CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
        :param pulumi.Input['AutoscaleSettingsArgs'] autoscale_settings: Specifies the Autoscale settings.
        :param pulumi.Input[int] throughput: Request Units per second. For example, "throughput": 10000.
        """
        if autoscale_settings is not None:
            pulumi.set(__self__, "autoscale_settings", autoscale_settings)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter(name="autoscaleSettings")
    def autoscale_settings(self) -> Optional[pulumi.Input['AutoscaleSettingsArgs']]:
        """
        Specifies the Autoscale settings.
        """
        return pulumi.get(self, "autoscale_settings")

    @autoscale_settings.setter
    def autoscale_settings(self, value: Optional[pulumi.Input['AutoscaleSettingsArgs']]):
        pulumi.set(self, "autoscale_settings", value)

    @property
    @pulumi.getter
    def throughput(self) -> Optional[pulumi.Input[int]]:
        """
        Request Units per second. For example, "throughput": 10000.
        """
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throughput", value)


if not MYPY:
    class GraphResourceArgsDict(TypedDict):
        """
        Cosmos DB Graph resource object
        """
        id: pulumi.Input[str]
        """
        Name of the Cosmos DB Graph
        """
elif False:
    GraphResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GraphResourceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        Cosmos DB Graph resource object
        :param pulumi.Input[str] id: Name of the Cosmos DB Graph
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Name of the Cosmos DB Graph
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class ManagedServiceIdentityArgsDict(TypedDict):
        """
        Identity for the resource.
        """
        type: NotRequired[pulumi.Input['ResourceIdentityType']]
        """
        The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
elif False:
    ManagedServiceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['ResourceIdentityType']] = None,
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Identity for the resource.
        :param pulumi.Input['ResourceIdentityType'] type: The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['ResourceIdentityType']]:
        """
        The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['ResourceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class MongoClusterRestoreParametersArgsDict(TypedDict):
        """
        Parameters used for restore operations
        """
        point_in_time_utc: NotRequired[pulumi.Input[str]]
        """
        UTC point in time to restore a mongo cluster
        """
        source_resource_id: NotRequired[pulumi.Input[str]]
        """
        Resource ID to locate the source cluster to restore
        """
elif False:
    MongoClusterRestoreParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoClusterRestoreParametersArgs:
    def __init__(__self__, *,
                 point_in_time_utc: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None):
        """
        Parameters used for restore operations
        :param pulumi.Input[str] point_in_time_utc: UTC point in time to restore a mongo cluster
        :param pulumi.Input[str] source_resource_id: Resource ID to locate the source cluster to restore
        """
        if point_in_time_utc is not None:
            pulumi.set(__self__, "point_in_time_utc", point_in_time_utc)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)

    @property
    @pulumi.getter(name="pointInTimeUTC")
    def point_in_time_utc(self) -> Optional[pulumi.Input[str]]:
        """
        UTC point in time to restore a mongo cluster
        """
        return pulumi.get(self, "point_in_time_utc")

    @point_in_time_utc.setter
    def point_in_time_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "point_in_time_utc", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID to locate the source cluster to restore
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)


if not MYPY:
    class NodeGroupSpecArgsDict(TypedDict):
        """
        Specification for a node group.
        """
        disk_size_gb: NotRequired[pulumi.Input[float]]
        """
        The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024.
        """
        enable_ha: NotRequired[pulumi.Input[bool]]
        """
        Whether high availability is enabled on the node group.
        """
        kind: NotRequired[pulumi.Input[Union[str, 'NodeKind']]]
        """
        The node type deployed in the node group.
        """
        node_count: NotRequired[pulumi.Input[int]]
        """
        The number of nodes in the node group.
        """
        sku: NotRequired[pulumi.Input[str]]
        """
        The resource sku for the node group. This defines the size of CPU and memory that is provisioned for each node. Example values: 'M30', 'M40'.
        """
elif False:
    NodeGroupSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodeGroupSpecArgs:
    def __init__(__self__, *,
                 disk_size_gb: Optional[pulumi.Input[float]] = None,
                 enable_ha: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[Union[str, 'NodeKind']]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 sku: Optional[pulumi.Input[str]] = None):
        """
        Specification for a node group.
        :param pulumi.Input[float] disk_size_gb: The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024.
        :param pulumi.Input[bool] enable_ha: Whether high availability is enabled on the node group.
        :param pulumi.Input[Union[str, 'NodeKind']] kind: The node type deployed in the node group.
        :param pulumi.Input[int] node_count: The number of nodes in the node group.
        :param pulumi.Input[str] sku: The resource sku for the node group. This defines the size of CPU and memory that is provisioned for each node. Example values: 'M30', 'M40'.
        """
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if enable_ha is not None:
            pulumi.set(__self__, "enable_ha", enable_ha)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> Optional[pulumi.Input[float]]:
        """
        The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter(name="enableHa")
    def enable_ha(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether high availability is enabled on the node group.
        """
        return pulumi.get(self, "enable_ha")

    @enable_ha.setter
    def enable_ha(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ha", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[Union[str, 'NodeKind']]]:
        """
        The node type deployed in the node group.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[Union[str, 'NodeKind']]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes in the node group.
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input[str]]:
        """
        The resource sku for the node group. This defines the size of CPU and memory that is provisioned for each node. Example values: 'M30', 'M40'.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku", value)


