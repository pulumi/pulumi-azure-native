# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'FirewallRulePropertiesArgs',
    'FirewallRulePropertiesArgsDict',
    'MongoClusterPropertiesArgs',
    'MongoClusterPropertiesArgsDict',
    'MongoClusterReplicaParametersArgs',
    'MongoClusterReplicaParametersArgsDict',
    'MongoClusterRestoreParametersArgs',
    'MongoClusterRestoreParametersArgsDict',
    'NodeGroupSpecArgs',
    'NodeGroupSpecArgsDict',
    'PrivateEndpointConnectionPropertiesArgs',
    'PrivateEndpointConnectionPropertiesArgsDict',
    'PrivateLinkServiceConnectionStateArgs',
    'PrivateLinkServiceConnectionStateArgsDict',
]

MYPY = False

if not MYPY:
    class FirewallRulePropertiesArgsDict(TypedDict):
        """
        The properties of a mongo cluster firewall rule.
        """
        end_ip_address: pulumi.Input[str]
        """
        The end IP address of the mongo cluster firewall rule. Must be IPv4 format.
        """
        start_ip_address: pulumi.Input[str]
        """
        The start IP address of the mongo cluster firewall rule. Must be IPv4 format.
        """
elif False:
    FirewallRulePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FirewallRulePropertiesArgs:
    def __init__(__self__, *,
                 end_ip_address: pulumi.Input[str],
                 start_ip_address: pulumi.Input[str]):
        """
        The properties of a mongo cluster firewall rule.
        :param pulumi.Input[str] end_ip_address: The end IP address of the mongo cluster firewall rule. Must be IPv4 format.
        :param pulumi.Input[str] start_ip_address: The start IP address of the mongo cluster firewall rule. Must be IPv4 format.
        """
        pulumi.set(__self__, "end_ip_address", end_ip_address)
        pulumi.set(__self__, "start_ip_address", start_ip_address)

    @property
    @pulumi.getter(name="endIpAddress")
    def end_ip_address(self) -> pulumi.Input[str]:
        """
        The end IP address of the mongo cluster firewall rule. Must be IPv4 format.
        """
        return pulumi.get(self, "end_ip_address")

    @end_ip_address.setter
    def end_ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_ip_address", value)

    @property
    @pulumi.getter(name="startIpAddress")
    def start_ip_address(self) -> pulumi.Input[str]:
        """
        The start IP address of the mongo cluster firewall rule. Must be IPv4 format.
        """
        return pulumi.get(self, "start_ip_address")

    @start_ip_address.setter
    def start_ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_ip_address", value)


if not MYPY:
    class MongoClusterPropertiesArgsDict(TypedDict):
        """
        The properties of a mongo cluster.
        """
        administrator_login: NotRequired[pulumi.Input[str]]
        """
        The administrator's login for the mongo cluster.
        """
        administrator_login_password: NotRequired[pulumi.Input[str]]
        """
        The password of the administrator login.
        """
        create_mode: NotRequired[pulumi.Input[Union[str, 'CreateMode']]]
        """
        The mode to create a mongo cluster.
        """
        node_group_specs: NotRequired[pulumi.Input[Sequence[pulumi.Input['NodeGroupSpecArgsDict']]]]
        """
        The list of node group specs in the cluster.
        """
        preview_features: NotRequired[pulumi.Input[Sequence[pulumi.Input[Union[str, 'PreviewFeature']]]]]
        """
        List of private endpoint connections.
        """
        public_network_access: NotRequired[pulumi.Input[Union[str, 'PublicNetworkAccess']]]
        """
        Whether or not public endpoint access is allowed for this mongo cluster.
        """
        replica_parameters: NotRequired[pulumi.Input['MongoClusterReplicaParametersArgsDict']]
        """
        The parameters to create a replica mongo cluster.
        """
        restore_parameters: NotRequired[pulumi.Input['MongoClusterRestoreParametersArgsDict']]
        """
        The parameters to create a point-in-time restore mongo cluster.
        """
        server_version: NotRequired[pulumi.Input[str]]
        """
        The Mongo DB server version. Defaults to the latest available version if not specified.
        """
elif False:
    MongoClusterPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoClusterPropertiesArgs:
    def __init__(__self__, *,
                 administrator_login: Optional[pulumi.Input[str]] = None,
                 administrator_login_password: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[Union[str, 'CreateMode']]] = None,
                 node_group_specs: Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupSpecArgs']]]] = None,
                 preview_features: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'PreviewFeature']]]]] = None,
                 public_network_access: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]] = None,
                 replica_parameters: Optional[pulumi.Input['MongoClusterReplicaParametersArgs']] = None,
                 restore_parameters: Optional[pulumi.Input['MongoClusterRestoreParametersArgs']] = None,
                 server_version: Optional[pulumi.Input[str]] = None):
        """
        The properties of a mongo cluster.
        :param pulumi.Input[str] administrator_login: The administrator's login for the mongo cluster.
        :param pulumi.Input[str] administrator_login_password: The password of the administrator login.
        :param pulumi.Input[Union[str, 'CreateMode']] create_mode: The mode to create a mongo cluster.
        :param pulumi.Input[Sequence[pulumi.Input['NodeGroupSpecArgs']]] node_group_specs: The list of node group specs in the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'PreviewFeature']]]] preview_features: List of private endpoint connections.
        :param pulumi.Input[Union[str, 'PublicNetworkAccess']] public_network_access: Whether or not public endpoint access is allowed for this mongo cluster.
        :param pulumi.Input['MongoClusterReplicaParametersArgs'] replica_parameters: The parameters to create a replica mongo cluster.
        :param pulumi.Input['MongoClusterRestoreParametersArgs'] restore_parameters: The parameters to create a point-in-time restore mongo cluster.
        :param pulumi.Input[str] server_version: The Mongo DB server version. Defaults to the latest available version if not specified.
        """
        if administrator_login is not None:
            pulumi.set(__self__, "administrator_login", administrator_login)
        if administrator_login_password is not None:
            pulumi.set(__self__, "administrator_login_password", administrator_login_password)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if node_group_specs is not None:
            pulumi.set(__self__, "node_group_specs", node_group_specs)
        if preview_features is not None:
            pulumi.set(__self__, "preview_features", preview_features)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if replica_parameters is not None:
            pulumi.set(__self__, "replica_parameters", replica_parameters)
        if restore_parameters is not None:
            pulumi.set(__self__, "restore_parameters", restore_parameters)
        if server_version is not None:
            pulumi.set(__self__, "server_version", server_version)

    @property
    @pulumi.getter(name="administratorLogin")
    def administrator_login(self) -> Optional[pulumi.Input[str]]:
        """
        The administrator's login for the mongo cluster.
        """
        return pulumi.get(self, "administrator_login")

    @administrator_login.setter
    def administrator_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "administrator_login", value)

    @property
    @pulumi.getter(name="administratorLoginPassword")
    def administrator_login_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of the administrator login.
        """
        return pulumi.get(self, "administrator_login_password")

    @administrator_login_password.setter
    def administrator_login_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "administrator_login_password", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[Union[str, 'CreateMode']]]:
        """
        The mode to create a mongo cluster.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[Union[str, 'CreateMode']]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="nodeGroupSpecs")
    def node_group_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupSpecArgs']]]]:
        """
        The list of node group specs in the cluster.
        """
        return pulumi.get(self, "node_group_specs")

    @node_group_specs.setter
    def node_group_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupSpecArgs']]]]):
        pulumi.set(self, "node_group_specs", value)

    @property
    @pulumi.getter(name="previewFeatures")
    def preview_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'PreviewFeature']]]]]:
        """
        List of private endpoint connections.
        """
        return pulumi.get(self, "preview_features")

    @preview_features.setter
    def preview_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'PreviewFeature']]]]]):
        pulumi.set(self, "preview_features", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]:
        """
        Whether or not public endpoint access is allowed for this mongo cluster.
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter(name="replicaParameters")
    def replica_parameters(self) -> Optional[pulumi.Input['MongoClusterReplicaParametersArgs']]:
        """
        The parameters to create a replica mongo cluster.
        """
        return pulumi.get(self, "replica_parameters")

    @replica_parameters.setter
    def replica_parameters(self, value: Optional[pulumi.Input['MongoClusterReplicaParametersArgs']]):
        pulumi.set(self, "replica_parameters", value)

    @property
    @pulumi.getter(name="restoreParameters")
    def restore_parameters(self) -> Optional[pulumi.Input['MongoClusterRestoreParametersArgs']]:
        """
        The parameters to create a point-in-time restore mongo cluster.
        """
        return pulumi.get(self, "restore_parameters")

    @restore_parameters.setter
    def restore_parameters(self, value: Optional[pulumi.Input['MongoClusterRestoreParametersArgs']]):
        pulumi.set(self, "restore_parameters", value)

    @property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> Optional[pulumi.Input[str]]:
        """
        The Mongo DB server version. Defaults to the latest available version if not specified.
        """
        return pulumi.get(self, "server_version")

    @server_version.setter
    def server_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_version", value)


if not MYPY:
    class MongoClusterReplicaParametersArgsDict(TypedDict):
        """
        Parameters used for replica operations.
        """
        source_location: pulumi.Input[str]
        """
        The location of the source cluster
        """
        source_resource_id: pulumi.Input[str]
        """
        The id of the replication source cluster.
        """
elif False:
    MongoClusterReplicaParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoClusterReplicaParametersArgs:
    def __init__(__self__, *,
                 source_location: pulumi.Input[str],
                 source_resource_id: pulumi.Input[str]):
        """
        Parameters used for replica operations.
        :param pulumi.Input[str] source_location: The location of the source cluster
        :param pulumi.Input[str] source_resource_id: The id of the replication source cluster.
        """
        pulumi.set(__self__, "source_location", source_location)
        pulumi.set(__self__, "source_resource_id", source_resource_id)

    @property
    @pulumi.getter(name="sourceLocation")
    def source_location(self) -> pulumi.Input[str]:
        """
        The location of the source cluster
        """
        return pulumi.get(self, "source_location")

    @source_location.setter
    def source_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_location", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> pulumi.Input[str]:
        """
        The id of the replication source cluster.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_resource_id", value)


if not MYPY:
    class MongoClusterRestoreParametersArgsDict(TypedDict):
        """
        Parameters used for restore operations
        """
        point_in_time_utc: NotRequired[pulumi.Input[str]]
        """
        UTC point in time to restore a mongo cluster
        """
        source_resource_id: NotRequired[pulumi.Input[str]]
        """
        Resource ID to locate the source cluster to restore
        """
elif False:
    MongoClusterRestoreParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MongoClusterRestoreParametersArgs:
    def __init__(__self__, *,
                 point_in_time_utc: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None):
        """
        Parameters used for restore operations
        :param pulumi.Input[str] point_in_time_utc: UTC point in time to restore a mongo cluster
        :param pulumi.Input[str] source_resource_id: Resource ID to locate the source cluster to restore
        """
        if point_in_time_utc is not None:
            pulumi.set(__self__, "point_in_time_utc", point_in_time_utc)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)

    @property
    @pulumi.getter(name="pointInTimeUTC")
    def point_in_time_utc(self) -> Optional[pulumi.Input[str]]:
        """
        UTC point in time to restore a mongo cluster
        """
        return pulumi.get(self, "point_in_time_utc")

    @point_in_time_utc.setter
    def point_in_time_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "point_in_time_utc", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID to locate the source cluster to restore
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)


if not MYPY:
    class NodeGroupSpecArgsDict(TypedDict):
        """
        Specification for a node group.
        """
        disk_size_gb: NotRequired[pulumi.Input[float]]
        """
        The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024.
        """
        enable_ha: NotRequired[pulumi.Input[bool]]
        """
        Whether high availability is enabled on the node group.
        """
        kind: NotRequired[pulumi.Input[Union[str, 'NodeKind']]]
        """
        The node type deployed in the node group.
        """
        node_count: NotRequired[pulumi.Input[int]]
        """
        The number of nodes in the node group.
        """
        sku: NotRequired[pulumi.Input[str]]
        """
        The resource sku for the node group. This defines the size of CPU and memory that is provisioned for each node. Example values: 'M30', 'M40'.
        """
elif False:
    NodeGroupSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodeGroupSpecArgs:
    def __init__(__self__, *,
                 disk_size_gb: Optional[pulumi.Input[float]] = None,
                 enable_ha: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[Union[str, 'NodeKind']]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 sku: Optional[pulumi.Input[str]] = None):
        """
        Specification for a node group.
        :param pulumi.Input[float] disk_size_gb: The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024.
        :param pulumi.Input[bool] enable_ha: Whether high availability is enabled on the node group.
        :param pulumi.Input[Union[str, 'NodeKind']] kind: The node type deployed in the node group.
        :param pulumi.Input[int] node_count: The number of nodes in the node group.
        :param pulumi.Input[str] sku: The resource sku for the node group. This defines the size of CPU and memory that is provisioned for each node. Example values: 'M30', 'M40'.
        """
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if enable_ha is not None:
            pulumi.set(__self__, "enable_ha", enable_ha)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> Optional[pulumi.Input[float]]:
        """
        The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter(name="enableHa")
    def enable_ha(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether high availability is enabled on the node group.
        """
        return pulumi.get(self, "enable_ha")

    @enable_ha.setter
    def enable_ha(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ha", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[Union[str, 'NodeKind']]]:
        """
        The node type deployed in the node group.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[Union[str, 'NodeKind']]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes in the node group.
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input[str]]:
        """
        The resource sku for the node group. This defines the size of CPU and memory that is provisioned for each node. Example values: 'M30', 'M40'.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku", value)


if not MYPY:
    class PrivateEndpointConnectionPropertiesArgsDict(TypedDict):
        """
        Properties of the private endpoint connection.
        """
        private_link_service_connection_state: pulumi.Input['PrivateLinkServiceConnectionStateArgsDict']
        """
        A collection of information about the state of the connection between service consumer and provider.
        """
elif False:
    PrivateEndpointConnectionPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateEndpointConnectionPropertiesArgs:
    def __init__(__self__, *,
                 private_link_service_connection_state: pulumi.Input['PrivateLinkServiceConnectionStateArgs']):
        """
        Properties of the private endpoint connection.
        :param pulumi.Input['PrivateLinkServiceConnectionStateArgs'] private_link_service_connection_state: A collection of information about the state of the connection between service consumer and provider.
        """
        pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> pulumi.Input['PrivateLinkServiceConnectionStateArgs']:
        """
        A collection of information about the state of the connection between service consumer and provider.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @private_link_service_connection_state.setter
    def private_link_service_connection_state(self, value: pulumi.Input['PrivateLinkServiceConnectionStateArgs']):
        pulumi.set(self, "private_link_service_connection_state", value)


if not MYPY:
    class PrivateLinkServiceConnectionStateArgsDict(TypedDict):
        """
        A collection of information about the state of the connection between service consumer and provider.
        """
        actions_required: NotRequired[pulumi.Input[str]]
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The reason for approval/rejection of the connection.
        """
        status: NotRequired[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]]
        """
        Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
elif False:
    PrivateLinkServiceConnectionStateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 actions_required: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]] = None):
        """
        A collection of information about the state of the connection between service consumer and provider.
        :param pulumi.Input[str] actions_required: A message indicating if changes on the service provider require any updates on the consumer.
        :param pulumi.Input[str] description: The reason for approval/rejection of the connection.
        :param pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']] status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[pulumi.Input[str]]:
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        return pulumi.get(self, "actions_required")

    @actions_required.setter
    def actions_required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "actions_required", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for approval/rejection of the connection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]]:
        """
        Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]]):
        pulumi.set(self, "status", value)


