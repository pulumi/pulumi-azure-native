# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ConnectionStringResponse',
    'DataTransferRegionalServiceResourceResponse',
    'DataTransferServiceResourcePropertiesResponse',
    'GraphAPIComputeRegionalServiceResourceResponse',
    'GraphAPIComputeServiceResourcePropertiesResponse',
    'MaterializedViewsBuilderRegionalServiceResourceResponse',
    'MaterializedViewsBuilderServiceResourcePropertiesResponse',
    'NodeGroupSpecResponse',
    'SqlDedicatedGatewayRegionalServiceResourceResponse',
    'SqlDedicatedGatewayServiceResourcePropertiesResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class ConnectionStringResponse(dict):
    """
    Connection string for the mongo cluster
    """
    def __init__(__self__, *,
                 connection_string: str,
                 description: str):
        """
        Connection string for the mongo cluster
        :param str connection_string: Value of the connection string
        :param str description: Description of the connection string
        """
        pulumi.set(__self__, "connection_string", connection_string)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> str:
        """
        Value of the connection string
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the connection string
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class DataTransferRegionalServiceResourceResponse(dict):
    """
    Resource for a regional service location.
    """
    def __init__(__self__, *,
                 location: str,
                 name: str,
                 status: str):
        """
        Resource for a regional service location.
        :param str location: The location name.
        :param str name: The regional service name.
        :param str status: Describes the status of a service.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location name.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The regional service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Describes the status of a service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DataTransferServiceResourcePropertiesResponse(dict):
    """
    Properties for DataTransferServiceResource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "instanceCount":
            suggest = "instance_count"
        elif key == "instanceSize":
            suggest = "instance_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataTransferServiceResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataTransferServiceResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataTransferServiceResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time: str,
                 locations: Sequence['outputs.DataTransferRegionalServiceResourceResponse'],
                 service_type: str,
                 status: str,
                 instance_count: Optional[int] = None,
                 instance_size: Optional[str] = None):
        """
        Properties for DataTransferServiceResource.
        :param str creation_time: Time of the last state change (ISO-8601 format).
        :param Sequence['DataTransferRegionalServiceResourceResponse'] locations: An array that contains all of the locations for the service.
        :param str service_type: ServiceType for the service.
               Expected value is 'DataTransfer'.
        :param str status: Describes the status of a service.
        :param int instance_count: Instance count for the service.
        :param str instance_size: Instance type for the service.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "service_type", 'DataTransfer')
        pulumi.set(__self__, "status", status)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if instance_size is not None:
            pulumi.set(__self__, "instance_size", instance_size)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        Time of the last state change (ISO-8601 format).
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.DataTransferRegionalServiceResourceResponse']:
        """
        An array that contains all of the locations for the service.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        """
        ServiceType for the service.
        Expected value is 'DataTransfer'.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Describes the status of a service.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[int]:
        """
        Instance count for the service.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceSize")
    def instance_size(self) -> Optional[str]:
        """
        Instance type for the service.
        """
        return pulumi.get(self, "instance_size")


@pulumi.output_type
class GraphAPIComputeRegionalServiceResourceResponse(dict):
    """
    Resource for a regional service location.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "graphApiComputeEndpoint":
            suggest = "graph_api_compute_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GraphAPIComputeRegionalServiceResourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GraphAPIComputeRegionalServiceResourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GraphAPIComputeRegionalServiceResourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 graph_api_compute_endpoint: str,
                 location: str,
                 name: str,
                 status: str):
        """
        Resource for a regional service location.
        :param str graph_api_compute_endpoint: The regional endpoint for GraphAPICompute.
        :param str location: The location name.
        :param str name: The regional service name.
        :param str status: Describes the status of a service.
        """
        pulumi.set(__self__, "graph_api_compute_endpoint", graph_api_compute_endpoint)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="graphApiComputeEndpoint")
    def graph_api_compute_endpoint(self) -> str:
        """
        The regional endpoint for GraphAPICompute.
        """
        return pulumi.get(self, "graph_api_compute_endpoint")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location name.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The regional service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Describes the status of a service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GraphAPIComputeServiceResourcePropertiesResponse(dict):
    """
    Properties for GraphAPIComputeServiceResource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "graphApiComputeEndpoint":
            suggest = "graph_api_compute_endpoint"
        elif key == "instanceCount":
            suggest = "instance_count"
        elif key == "instanceSize":
            suggest = "instance_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GraphAPIComputeServiceResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GraphAPIComputeServiceResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GraphAPIComputeServiceResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time: str,
                 locations: Sequence['outputs.GraphAPIComputeRegionalServiceResourceResponse'],
                 service_type: str,
                 status: str,
                 graph_api_compute_endpoint: Optional[str] = None,
                 instance_count: Optional[int] = None,
                 instance_size: Optional[str] = None):
        """
        Properties for GraphAPIComputeServiceResource.
        :param str creation_time: Time of the last state change (ISO-8601 format).
        :param Sequence['GraphAPIComputeRegionalServiceResourceResponse'] locations: An array that contains all of the locations for the service.
        :param str service_type: ServiceType for the service.
               Expected value is 'GraphAPICompute'.
        :param str status: Describes the status of a service.
        :param str graph_api_compute_endpoint: GraphAPICompute endpoint for the service.
        :param int instance_count: Instance count for the service.
        :param str instance_size: Instance type for the service.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "service_type", 'GraphAPICompute')
        pulumi.set(__self__, "status", status)
        if graph_api_compute_endpoint is not None:
            pulumi.set(__self__, "graph_api_compute_endpoint", graph_api_compute_endpoint)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if instance_size is not None:
            pulumi.set(__self__, "instance_size", instance_size)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        Time of the last state change (ISO-8601 format).
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GraphAPIComputeRegionalServiceResourceResponse']:
        """
        An array that contains all of the locations for the service.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        """
        ServiceType for the service.
        Expected value is 'GraphAPICompute'.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Describes the status of a service.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="graphApiComputeEndpoint")
    def graph_api_compute_endpoint(self) -> Optional[str]:
        """
        GraphAPICompute endpoint for the service.
        """
        return pulumi.get(self, "graph_api_compute_endpoint")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[int]:
        """
        Instance count for the service.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceSize")
    def instance_size(self) -> Optional[str]:
        """
        Instance type for the service.
        """
        return pulumi.get(self, "instance_size")


@pulumi.output_type
class MaterializedViewsBuilderRegionalServiceResourceResponse(dict):
    """
    Resource for a regional service location.
    """
    def __init__(__self__, *,
                 location: str,
                 name: str,
                 status: str):
        """
        Resource for a regional service location.
        :param str location: The location name.
        :param str name: The regional service name.
        :param str status: Describes the status of a service.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location name.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The regional service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Describes the status of a service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class MaterializedViewsBuilderServiceResourcePropertiesResponse(dict):
    """
    Properties for MaterializedViewsBuilderServiceResource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "instanceCount":
            suggest = "instance_count"
        elif key == "instanceSize":
            suggest = "instance_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MaterializedViewsBuilderServiceResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MaterializedViewsBuilderServiceResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MaterializedViewsBuilderServiceResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time: str,
                 locations: Sequence['outputs.MaterializedViewsBuilderRegionalServiceResourceResponse'],
                 service_type: str,
                 status: str,
                 instance_count: Optional[int] = None,
                 instance_size: Optional[str] = None):
        """
        Properties for MaterializedViewsBuilderServiceResource.
        :param str creation_time: Time of the last state change (ISO-8601 format).
        :param Sequence['MaterializedViewsBuilderRegionalServiceResourceResponse'] locations: An array that contains all of the locations for the service.
        :param str service_type: ServiceType for the service.
               Expected value is 'MaterializedViewsBuilder'.
        :param str status: Describes the status of a service.
        :param int instance_count: Instance count for the service.
        :param str instance_size: Instance type for the service.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "service_type", 'MaterializedViewsBuilder')
        pulumi.set(__self__, "status", status)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if instance_size is not None:
            pulumi.set(__self__, "instance_size", instance_size)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        Time of the last state change (ISO-8601 format).
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.MaterializedViewsBuilderRegionalServiceResourceResponse']:
        """
        An array that contains all of the locations for the service.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        """
        ServiceType for the service.
        Expected value is 'MaterializedViewsBuilder'.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Describes the status of a service.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[int]:
        """
        Instance count for the service.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceSize")
    def instance_size(self) -> Optional[str]:
        """
        Instance type for the service.
        """
        return pulumi.get(self, "instance_size")


@pulumi.output_type
class NodeGroupSpecResponse(dict):
    """
    Specification for a node group.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSizeGB":
            suggest = "disk_size_gb"
        elif key == "enableHa":
            suggest = "enable_ha"
        elif key == "nodeCount":
            suggest = "node_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeGroupSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeGroupSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeGroupSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size_gb: Optional[float] = None,
                 enable_ha: Optional[bool] = None,
                 kind: Optional[str] = None,
                 node_count: Optional[int] = None,
                 sku: Optional[str] = None):
        """
        Specification for a node group.
        :param float disk_size_gb: The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024.
        :param bool enable_ha: Whether high availability is enabled on the node group.
        :param str kind: The node type deployed in the node group.
        :param int node_count: The number of nodes in the node group.
        :param str sku: The resource sku for the node group. This defines the size of CPU and memory that is provisioned for each node. Example values: 'M30', 'M40'.
        """
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if enable_ha is not None:
            pulumi.set(__self__, "enable_ha", enable_ha)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> Optional[float]:
        """
        The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024.
        """
        return pulumi.get(self, "disk_size_gb")

    @property
    @pulumi.getter(name="enableHa")
    def enable_ha(self) -> Optional[bool]:
        """
        Whether high availability is enabled on the node group.
        """
        return pulumi.get(self, "enable_ha")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The node type deployed in the node group.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[int]:
        """
        The number of nodes in the node group.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter
    def sku(self) -> Optional[str]:
        """
        The resource sku for the node group. This defines the size of CPU and memory that is provisioned for each node. Example values: 'M30', 'M40'.
        """
        return pulumi.get(self, "sku")


@pulumi.output_type
class SqlDedicatedGatewayRegionalServiceResourceResponse(dict):
    """
    Resource for a regional service location.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sqlDedicatedGatewayEndpoint":
            suggest = "sql_dedicated_gateway_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlDedicatedGatewayRegionalServiceResourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlDedicatedGatewayRegionalServiceResourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlDedicatedGatewayRegionalServiceResourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: str,
                 name: str,
                 sql_dedicated_gateway_endpoint: str,
                 status: str):
        """
        Resource for a regional service location.
        :param str location: The location name.
        :param str name: The regional service name.
        :param str sql_dedicated_gateway_endpoint: The regional endpoint for SqlDedicatedGateway.
        :param str status: Describes the status of a service.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sql_dedicated_gateway_endpoint", sql_dedicated_gateway_endpoint)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location name.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The regional service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sqlDedicatedGatewayEndpoint")
    def sql_dedicated_gateway_endpoint(self) -> str:
        """
        The regional endpoint for SqlDedicatedGateway.
        """
        return pulumi.get(self, "sql_dedicated_gateway_endpoint")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Describes the status of a service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SqlDedicatedGatewayServiceResourcePropertiesResponse(dict):
    """
    Properties for SqlDedicatedGatewayServiceResource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "instanceCount":
            suggest = "instance_count"
        elif key == "instanceSize":
            suggest = "instance_size"
        elif key == "sqlDedicatedGatewayEndpoint":
            suggest = "sql_dedicated_gateway_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlDedicatedGatewayServiceResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlDedicatedGatewayServiceResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlDedicatedGatewayServiceResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time: str,
                 locations: Sequence['outputs.SqlDedicatedGatewayRegionalServiceResourceResponse'],
                 service_type: str,
                 status: str,
                 instance_count: Optional[int] = None,
                 instance_size: Optional[str] = None,
                 sql_dedicated_gateway_endpoint: Optional[str] = None):
        """
        Properties for SqlDedicatedGatewayServiceResource.
        :param str creation_time: Time of the last state change (ISO-8601 format).
        :param Sequence['SqlDedicatedGatewayRegionalServiceResourceResponse'] locations: An array that contains all of the locations for the service.
        :param str service_type: ServiceType for the service.
               Expected value is 'SqlDedicatedGateway'.
        :param str status: Describes the status of a service.
        :param int instance_count: Instance count for the service.
        :param str instance_size: Instance type for the service.
        :param str sql_dedicated_gateway_endpoint: SqlDedicatedGateway endpoint for the service.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "service_type", 'SqlDedicatedGateway')
        pulumi.set(__self__, "status", status)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if instance_size is not None:
            pulumi.set(__self__, "instance_size", instance_size)
        if sql_dedicated_gateway_endpoint is not None:
            pulumi.set(__self__, "sql_dedicated_gateway_endpoint", sql_dedicated_gateway_endpoint)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        Time of the last state change (ISO-8601 format).
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.SqlDedicatedGatewayRegionalServiceResourceResponse']:
        """
        An array that contains all of the locations for the service.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        """
        ServiceType for the service.
        Expected value is 'SqlDedicatedGateway'.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Describes the status of a service.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[int]:
        """
        Instance count for the service.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceSize")
    def instance_size(self) -> Optional[str]:
        """
        Instance type for the service.
        """
        return pulumi.get(self, "instance_size")

    @property
    @pulumi.getter(name="sqlDedicatedGatewayEndpoint")
    def sql_dedicated_gateway_endpoint(self) -> Optional[str]:
        """
        SqlDedicatedGateway endpoint for the service.
        """
        return pulumi.get(self, "sql_dedicated_gateway_endpoint")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


