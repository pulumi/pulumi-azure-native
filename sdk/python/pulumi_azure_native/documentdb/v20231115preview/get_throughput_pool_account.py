# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetThroughputPoolAccountResult',
    'AwaitableGetThroughputPoolAccountResult',
    'get_throughput_pool_account',
    'get_throughput_pool_account_output',
]

@pulumi.output_type
class GetThroughputPoolAccountResult:
    """
    An Azure Cosmos DB Throughputpool Account
    """
    def __init__(__self__, account_instance_id=None, account_location=None, account_resource_identifier=None, id=None, name=None, provisioning_state=None, system_data=None, type=None):
        if account_instance_id and not isinstance(account_instance_id, str):
            raise TypeError("Expected argument 'account_instance_id' to be a str")
        pulumi.set(__self__, "account_instance_id", account_instance_id)
        if account_location and not isinstance(account_location, str):
            raise TypeError("Expected argument 'account_location' to be a str")
        pulumi.set(__self__, "account_location", account_location)
        if account_resource_identifier and not isinstance(account_resource_identifier, str):
            raise TypeError("Expected argument 'account_resource_identifier' to be a str")
        pulumi.set(__self__, "account_resource_identifier", account_resource_identifier)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountInstanceId")
    def account_instance_id(self) -> str:
        """
        The instance id of global database account in the throughputPool.
        """
        return pulumi.get(self, "account_instance_id")

    @property
    @pulumi.getter(name="accountLocation")
    def account_location(self) -> Optional[str]:
        """
        The location of  global database account in the throughputPool.
        """
        return pulumi.get(self, "account_location")

    @property
    @pulumi.getter(name="accountResourceIdentifier")
    def account_resource_identifier(self) -> Optional[str]:
        """
        The resource identifier of global database account in the throughputPool.
        """
        return pulumi.get(self, "account_resource_identifier")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        A provisioning state of the ThroughputPool Account.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetThroughputPoolAccountResult(GetThroughputPoolAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetThroughputPoolAccountResult(
            account_instance_id=self.account_instance_id,
            account_location=self.account_location,
            account_resource_identifier=self.account_resource_identifier,
            id=self.id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            type=self.type)


def get_throughput_pool_account(resource_group_name: Optional[str] = None,
                                throughput_pool_account_name: Optional[str] = None,
                                throughput_pool_name: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetThroughputPoolAccountResult:
    """
    Retrieves the properties of an existing Azure Cosmos DB Throughput Pool


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str throughput_pool_account_name: Cosmos DB global database account in a Throughput Pool
    :param str throughput_pool_name: Cosmos DB Throughput Pool name.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['throughputPoolAccountName'] = throughput_pool_account_name
    __args__['throughputPoolName'] = throughput_pool_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:documentdb/v20231115preview:getThroughputPoolAccount', __args__, opts=opts, typ=GetThroughputPoolAccountResult).value

    return AwaitableGetThroughputPoolAccountResult(
        account_instance_id=pulumi.get(__ret__, 'account_instance_id'),
        account_location=pulumi.get(__ret__, 'account_location'),
        account_resource_identifier=pulumi.get(__ret__, 'account_resource_identifier'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_throughput_pool_account)
def get_throughput_pool_account_output(resource_group_name: Optional[pulumi.Input[str]] = None,
                                       throughput_pool_account_name: Optional[pulumi.Input[str]] = None,
                                       throughput_pool_name: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetThroughputPoolAccountResult]:
    """
    Retrieves the properties of an existing Azure Cosmos DB Throughput Pool


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str throughput_pool_account_name: Cosmos DB global database account in a Throughput Pool
    :param str throughput_pool_name: Cosmos DB Throughput Pool name.
    """
    ...
