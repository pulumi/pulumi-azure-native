# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'PrivilegeResourceArgs',
    'PrivilegeArgs',
    'RoleArgs',
]

@pulumi.input_type
class PrivilegeResourceArgs:
    def __init__(__self__, *,
                 collection: Optional[pulumi.Input[str]] = None,
                 db: Optional[pulumi.Input[str]] = None):
        """
        An Azure Cosmos DB Mongo DB Resource.
        :param pulumi.Input[str] collection: The collection name the role is applied.
        :param pulumi.Input[str] db: The database name the role is applied.
        """
        PrivilegeResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            collection=collection,
            db=db,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             collection: Optional[pulumi.Input[str]] = None,
             db: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if collection is not None:
            _setter("collection", collection)
        if db is not None:
            _setter("db", db)

    @property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[str]]:
        """
        The collection name the role is applied.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection", value)

    @property
    @pulumi.getter
    def db(self) -> Optional[pulumi.Input[str]]:
        """
        The database name the role is applied.
        """
        return pulumi.get(self, "db")

    @db.setter
    def db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db", value)


@pulumi.input_type
class PrivilegeArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource: Optional[pulumi.Input['PrivilegeResourceArgs']] = None):
        """
        The set of data plane operations permitted through this Role Definition.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: An array of actions that are allowed.
        :param pulumi.Input['PrivilegeResourceArgs'] resource: An Azure Cosmos DB Mongo DB Resource.
        """
        PrivilegeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            resource=resource,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             resource: Optional[pulumi.Input['PrivilegeResourceArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if actions is not None:
            _setter("actions", actions)
        if resource is not None:
            _setter("resource", resource)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of actions that are allowed.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input['PrivilegeResourceArgs']]:
        """
        An Azure Cosmos DB Mongo DB Resource.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input['PrivilegeResourceArgs']]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class RoleArgs:
    def __init__(__self__, *,
                 db: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        The set of roles permitted through this Role Definition.
        :param pulumi.Input[str] db: The database name the role is applied.
        :param pulumi.Input[str] role: The role name.
        """
        RoleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            db=db,
            role=role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             db: Optional[pulumi.Input[str]] = None,
             role: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if db is not None:
            _setter("db", db)
        if role is not None:
            _setter("role", role)

    @property
    @pulumi.getter
    def db(self) -> Optional[pulumi.Input[str]]:
        """
        The database name the role is applied.
        """
        return pulumi.get(self, "db")

    @db.setter
    def db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The role name.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


