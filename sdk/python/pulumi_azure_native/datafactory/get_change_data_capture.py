# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetChangeDataCaptureResult',
    'AwaitableGetChangeDataCaptureResult',
    'get_change_data_capture',
    'get_change_data_capture_output',
]

@pulumi.output_type
class GetChangeDataCaptureResult:
    """
    Change data capture resource type.
    """
    def __init__(__self__, allow_v_net_override=None, description=None, etag=None, folder=None, id=None, name=None, policy=None, source_connections_info=None, status=None, target_connections_info=None, type=None):
        if allow_v_net_override and not isinstance(allow_v_net_override, bool):
            raise TypeError("Expected argument 'allow_v_net_override' to be a bool")
        pulumi.set(__self__, "allow_v_net_override", allow_v_net_override)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if folder and not isinstance(folder, dict):
            raise TypeError("Expected argument 'folder' to be a dict")
        pulumi.set(__self__, "folder", folder)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy and not isinstance(policy, dict):
            raise TypeError("Expected argument 'policy' to be a dict")
        pulumi.set(__self__, "policy", policy)
        if source_connections_info and not isinstance(source_connections_info, list):
            raise TypeError("Expected argument 'source_connections_info' to be a list")
        pulumi.set(__self__, "source_connections_info", source_connections_info)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if target_connections_info and not isinstance(target_connections_info, list):
            raise TypeError("Expected argument 'target_connections_info' to be a list")
        pulumi.set(__self__, "target_connections_info", target_connections_info)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowVNetOverride")
    def allow_v_net_override(self) -> Optional[bool]:
        """
        A boolean to determine if the vnet configuration needs to be overwritten.
        """
        return pulumi.get(self, "allow_v_net_override")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the change data capture.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Etag identifies change in the resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def folder(self) -> Optional['outputs.ChangeDataCaptureResponseFolder']:
        """
        The folder that this CDC is in. If not specified, CDC will appear at the root level.
        """
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The resource identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policy(self) -> 'outputs.MapperPolicyResponse':
        """
        CDC policy
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="sourceConnectionsInfo")
    def source_connections_info(self) -> Sequence['outputs.MapperSourceConnectionsInfoResponse']:
        """
        List of sources connections that can be used as sources in the CDC.
        """
        return pulumi.get(self, "source_connections_info")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status of the CDC as to if it is running or stopped.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetConnectionsInfo")
    def target_connections_info(self) -> Sequence['outputs.MapperTargetConnectionsInfoResponse']:
        """
        List of target connections that can be used as sources in the CDC.
        """
        return pulumi.get(self, "target_connections_info")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The resource type.
        """
        return pulumi.get(self, "type")


class AwaitableGetChangeDataCaptureResult(GetChangeDataCaptureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetChangeDataCaptureResult(
            allow_v_net_override=self.allow_v_net_override,
            description=self.description,
            etag=self.etag,
            folder=self.folder,
            id=self.id,
            name=self.name,
            policy=self.policy,
            source_connections_info=self.source_connections_info,
            status=self.status,
            target_connections_info=self.target_connections_info,
            type=self.type)


def get_change_data_capture(change_data_capture_name: Optional[str] = None,
                            factory_name: Optional[str] = None,
                            resource_group_name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetChangeDataCaptureResult:
    """
    Gets a change data capture.
    Azure REST API version: 2018-06-01.


    :param str change_data_capture_name: The change data capture name.
    :param str factory_name: The factory name.
    :param str resource_group_name: The resource group name.
    """
    __args__ = dict()
    __args__['changeDataCaptureName'] = change_data_capture_name
    __args__['factoryName'] = factory_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:datafactory:getChangeDataCapture', __args__, opts=opts, typ=GetChangeDataCaptureResult).value

    return AwaitableGetChangeDataCaptureResult(
        allow_v_net_override=pulumi.get(__ret__, 'allow_v_net_override'),
        description=pulumi.get(__ret__, 'description'),
        etag=pulumi.get(__ret__, 'etag'),
        folder=pulumi.get(__ret__, 'folder'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        policy=pulumi.get(__ret__, 'policy'),
        source_connections_info=pulumi.get(__ret__, 'source_connections_info'),
        status=pulumi.get(__ret__, 'status'),
        target_connections_info=pulumi.get(__ret__, 'target_connections_info'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_change_data_capture)
def get_change_data_capture_output(change_data_capture_name: Optional[pulumi.Input[str]] = None,
                                   factory_name: Optional[pulumi.Input[str]] = None,
                                   resource_group_name: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetChangeDataCaptureResult]:
    """
    Gets a change data capture.
    Azure REST API version: 2018-06-01.


    :param str change_data_capture_name: The change data capture name.
    :param str factory_name: The factory name.
    :param str resource_group_name: The resource group name.
    """
    ...
