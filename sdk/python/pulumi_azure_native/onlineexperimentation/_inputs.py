# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'CustomerManagedKeyEncryptionArgs',
    'CustomerManagedKeyEncryptionArgsDict',
    'KeyEncryptionKeyIdentityArgs',
    'KeyEncryptionKeyIdentityArgsDict',
    'ManagedServiceIdentityArgs',
    'ManagedServiceIdentityArgsDict',
    'OnlineExperimentWorkspacePropertiesArgs',
    'OnlineExperimentWorkspacePropertiesArgsDict',
    'OnlineExperimentationWorkspaceSkuArgs',
    'OnlineExperimentationWorkspaceSkuArgsDict',
    'ResourceEncryptionConfigurationArgs',
    'ResourceEncryptionConfigurationArgsDict',
]

MYPY = False

if not MYPY:
    class CustomerManagedKeyEncryptionArgsDict(TypedDict):
        """
        Customer-managed key encryption properties for the resource.
        """
        key_encryption_key_identity: NotRequired[pulumi.Input['KeyEncryptionKeyIdentityArgsDict']]
        """
        All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
        """
        key_encryption_key_url: NotRequired[pulumi.Input[str]]
        """
        key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
        """
elif False:
    CustomerManagedKeyEncryptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomerManagedKeyEncryptionArgs:
    def __init__(__self__, *,
                 key_encryption_key_identity: Optional[pulumi.Input['KeyEncryptionKeyIdentityArgs']] = None,
                 key_encryption_key_url: Optional[pulumi.Input[str]] = None):
        """
        Customer-managed key encryption properties for the resource.
        :param pulumi.Input['KeyEncryptionKeyIdentityArgs'] key_encryption_key_identity: All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
        :param pulumi.Input[str] key_encryption_key_url: key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
        """
        if key_encryption_key_identity is not None:
            pulumi.set(__self__, "key_encryption_key_identity", key_encryption_key_identity)
        if key_encryption_key_url is not None:
            pulumi.set(__self__, "key_encryption_key_url", key_encryption_key_url)

    @property
    @pulumi.getter(name="keyEncryptionKeyIdentity")
    def key_encryption_key_identity(self) -> Optional[pulumi.Input['KeyEncryptionKeyIdentityArgs']]:
        """
        All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
        """
        return pulumi.get(self, "key_encryption_key_identity")

    @key_encryption_key_identity.setter
    def key_encryption_key_identity(self, value: Optional[pulumi.Input['KeyEncryptionKeyIdentityArgs']]):
        pulumi.set(self, "key_encryption_key_identity", value)

    @property
    @pulumi.getter(name="keyEncryptionKeyUrl")
    def key_encryption_key_url(self) -> Optional[pulumi.Input[str]]:
        """
        key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
        """
        return pulumi.get(self, "key_encryption_key_url")

    @key_encryption_key_url.setter
    def key_encryption_key_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_encryption_key_url", value)


if not MYPY:
    class KeyEncryptionKeyIdentityArgsDict(TypedDict):
        """
        All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
        """
        federated_client_id: NotRequired[pulumi.Input[str]]
        """
        application client identity to use for accessing key encryption key Url in a different tenant. Ex: f83c6b1b-4d34-47e4-bb34-9d83df58b540
        """
        identity_type: NotRequired[pulumi.Input[Union[str, 'KeyEncryptionKeyIdentityType']]]
        """
        The type of identity to use. Values can be systemAssignedIdentity, userAssignedIdentity, or delegatedResourceIdentity.
        """
        user_assigned_identity_resource_id: NotRequired[pulumi.Input[str]]
        """
        User assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity.
        """
elif False:
    KeyEncryptionKeyIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KeyEncryptionKeyIdentityArgs:
    def __init__(__self__, *,
                 federated_client_id: Optional[pulumi.Input[str]] = None,
                 identity_type: Optional[pulumi.Input[Union[str, 'KeyEncryptionKeyIdentityType']]] = None,
                 user_assigned_identity_resource_id: Optional[pulumi.Input[str]] = None):
        """
        All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
        :param pulumi.Input[str] federated_client_id: application client identity to use for accessing key encryption key Url in a different tenant. Ex: f83c6b1b-4d34-47e4-bb34-9d83df58b540
        :param pulumi.Input[Union[str, 'KeyEncryptionKeyIdentityType']] identity_type: The type of identity to use. Values can be systemAssignedIdentity, userAssignedIdentity, or delegatedResourceIdentity.
        :param pulumi.Input[str] user_assigned_identity_resource_id: User assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity.
        """
        if federated_client_id is not None:
            pulumi.set(__self__, "federated_client_id", federated_client_id)
        if identity_type is not None:
            pulumi.set(__self__, "identity_type", identity_type)
        if user_assigned_identity_resource_id is not None:
            pulumi.set(__self__, "user_assigned_identity_resource_id", user_assigned_identity_resource_id)

    @property
    @pulumi.getter(name="federatedClientId")
    def federated_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        application client identity to use for accessing key encryption key Url in a different tenant. Ex: f83c6b1b-4d34-47e4-bb34-9d83df58b540
        """
        return pulumi.get(self, "federated_client_id")

    @federated_client_id.setter
    def federated_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "federated_client_id", value)

    @property
    @pulumi.getter(name="identityType")
    def identity_type(self) -> Optional[pulumi.Input[Union[str, 'KeyEncryptionKeyIdentityType']]]:
        """
        The type of identity to use. Values can be systemAssignedIdentity, userAssignedIdentity, or delegatedResourceIdentity.
        """
        return pulumi.get(self, "identity_type")

    @identity_type.setter
    def identity_type(self, value: Optional[pulumi.Input[Union[str, 'KeyEncryptionKeyIdentityType']]]):
        pulumi.set(self, "identity_type", value)

    @property
    @pulumi.getter(name="userAssignedIdentityResourceId")
    def user_assigned_identity_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        User assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity.
        """
        return pulumi.get(self, "user_assigned_identity_resource_id")

    @user_assigned_identity_resource_id.setter
    def user_assigned_identity_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_assigned_identity_resource_id", value)


if not MYPY:
    class ManagedServiceIdentityArgsDict(TypedDict):
        """
        Managed service identity (system assigned and/or user assigned identities)
        """
        type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
elif False:
    ManagedServiceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class OnlineExperimentWorkspacePropertiesArgsDict(TypedDict):
        """
        The properties of an online experiment workspace.
        """
        app_configuration_resource_id: pulumi.Input[str]
        """
        The resource identifier of App Configuration with which this online experiment workspace is tied for experimentation. This is a required field for creating an online experiment workspace.
        """
        log_analytics_workspace_resource_id: pulumi.Input[str]
        """
        The resource identifier of the Log Analytics workspace which online experiment workspace uses for generating experiment analysis results.
        """
        logs_exporter_storage_account_resource_id: pulumi.Input[str]
        """
        The resource identifier of storage account where logs are exported from Log Analytics workspace. Online Experiment workspace uses it generating experiment analysis results.
        """
        encryption: NotRequired[pulumi.Input['ResourceEncryptionConfigurationArgsDict']]
        """
        The encryption configuration for the online experiment workspace resource.
        """
elif False:
    OnlineExperimentWorkspacePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OnlineExperimentWorkspacePropertiesArgs:
    def __init__(__self__, *,
                 app_configuration_resource_id: pulumi.Input[str],
                 log_analytics_workspace_resource_id: pulumi.Input[str],
                 logs_exporter_storage_account_resource_id: pulumi.Input[str],
                 encryption: Optional[pulumi.Input['ResourceEncryptionConfigurationArgs']] = None):
        """
        The properties of an online experiment workspace.
        :param pulumi.Input[str] app_configuration_resource_id: The resource identifier of App Configuration with which this online experiment workspace is tied for experimentation. This is a required field for creating an online experiment workspace.
        :param pulumi.Input[str] log_analytics_workspace_resource_id: The resource identifier of the Log Analytics workspace which online experiment workspace uses for generating experiment analysis results.
        :param pulumi.Input[str] logs_exporter_storage_account_resource_id: The resource identifier of storage account where logs are exported from Log Analytics workspace. Online Experiment workspace uses it generating experiment analysis results.
        :param pulumi.Input['ResourceEncryptionConfigurationArgs'] encryption: The encryption configuration for the online experiment workspace resource.
        """
        pulumi.set(__self__, "app_configuration_resource_id", app_configuration_resource_id)
        pulumi.set(__self__, "log_analytics_workspace_resource_id", log_analytics_workspace_resource_id)
        pulumi.set(__self__, "logs_exporter_storage_account_resource_id", logs_exporter_storage_account_resource_id)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)

    @property
    @pulumi.getter(name="appConfigurationResourceId")
    def app_configuration_resource_id(self) -> pulumi.Input[str]:
        """
        The resource identifier of App Configuration with which this online experiment workspace is tied for experimentation. This is a required field for creating an online experiment workspace.
        """
        return pulumi.get(self, "app_configuration_resource_id")

    @app_configuration_resource_id.setter
    def app_configuration_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_configuration_resource_id", value)

    @property
    @pulumi.getter(name="logAnalyticsWorkspaceResourceId")
    def log_analytics_workspace_resource_id(self) -> pulumi.Input[str]:
        """
        The resource identifier of the Log Analytics workspace which online experiment workspace uses for generating experiment analysis results.
        """
        return pulumi.get(self, "log_analytics_workspace_resource_id")

    @log_analytics_workspace_resource_id.setter
    def log_analytics_workspace_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_analytics_workspace_resource_id", value)

    @property
    @pulumi.getter(name="logsExporterStorageAccountResourceId")
    def logs_exporter_storage_account_resource_id(self) -> pulumi.Input[str]:
        """
        The resource identifier of storage account where logs are exported from Log Analytics workspace. Online Experiment workspace uses it generating experiment analysis results.
        """
        return pulumi.get(self, "logs_exporter_storage_account_resource_id")

    @logs_exporter_storage_account_resource_id.setter
    def logs_exporter_storage_account_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "logs_exporter_storage_account_resource_id", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['ResourceEncryptionConfigurationArgs']]:
        """
        The encryption configuration for the online experiment workspace resource.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['ResourceEncryptionConfigurationArgs']]):
        pulumi.set(self, "encryption", value)


if not MYPY:
    class OnlineExperimentationWorkspaceSkuArgsDict(TypedDict):
        """
        The SKU (Stock Keeping Unit) assigned to this resource.
        """
        name: pulumi.Input[Union[str, 'OnlineExperimentationWorkspaceSkuName']]
        """
        The name of the SKU. Ex - F0, P0. It is typically a letter+number code
        """
elif False:
    OnlineExperimentationWorkspaceSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OnlineExperimentationWorkspaceSkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[Union[str, 'OnlineExperimentationWorkspaceSkuName']]):
        """
        The SKU (Stock Keeping Unit) assigned to this resource.
        :param pulumi.Input[Union[str, 'OnlineExperimentationWorkspaceSkuName']] name: The name of the SKU. Ex - F0, P0. It is typically a letter+number code
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[Union[str, 'OnlineExperimentationWorkspaceSkuName']]:
        """
        The name of the SKU. Ex - F0, P0. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[Union[str, 'OnlineExperimentationWorkspaceSkuName']]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ResourceEncryptionConfigurationArgsDict(TypedDict):
        """
        The encryption configuration for the online experiment workspace resource.
        """
        customer_managed_key_encryption: NotRequired[pulumi.Input['CustomerManagedKeyEncryptionArgsDict']]
        """
        All Customer-managed key encryption properties for the resource.
        """
elif False:
    ResourceEncryptionConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceEncryptionConfigurationArgs:
    def __init__(__self__, *,
                 customer_managed_key_encryption: Optional[pulumi.Input['CustomerManagedKeyEncryptionArgs']] = None):
        """
        The encryption configuration for the online experiment workspace resource.
        :param pulumi.Input['CustomerManagedKeyEncryptionArgs'] customer_managed_key_encryption: All Customer-managed key encryption properties for the resource.
        """
        if customer_managed_key_encryption is not None:
            pulumi.set(__self__, "customer_managed_key_encryption", customer_managed_key_encryption)

    @property
    @pulumi.getter(name="customerManagedKeyEncryption")
    def customer_managed_key_encryption(self) -> Optional[pulumi.Input['CustomerManagedKeyEncryptionArgs']]:
        """
        All Customer-managed key encryption properties for the resource.
        """
        return pulumi.get(self, "customer_managed_key_encryption")

    @customer_managed_key_encryption.setter
    def customer_managed_key_encryption(self, value: Optional[pulumi.Input['CustomerManagedKeyEncryptionArgs']]):
        pulumi.set(self, "customer_managed_key_encryption", value)


