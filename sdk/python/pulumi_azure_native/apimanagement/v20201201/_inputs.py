# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'ApiCreateOrUpdatePropertiesWsdlSelectorArgs',
    'ApiVersionSetContractDetailsArgs',
    'AuthenticationSettingsContractArgs',
    'OAuth2AuthenticationSettingsContractArgs',
    'OpenIdAuthenticationSettingsContractArgs',
    'SubscriptionKeyParameterNamesContractArgs',
]

@pulumi.input_type
class ApiCreateOrUpdatePropertiesWsdlSelectorArgs:
    def __init__(__self__, *,
                 wsdl_endpoint_name: Optional[pulumi.Input[str]] = None,
                 wsdl_service_name: Optional[pulumi.Input[str]] = None):
        """
        Criteria to limit import of WSDL to a subset of the document.
        :param pulumi.Input[str] wsdl_endpoint_name: Name of endpoint(port) to import from WSDL
        :param pulumi.Input[str] wsdl_service_name: Name of service to import from WSDL
        """
        if wsdl_endpoint_name is not None:
            pulumi.set(__self__, "wsdl_endpoint_name", wsdl_endpoint_name)
        if wsdl_service_name is not None:
            pulumi.set(__self__, "wsdl_service_name", wsdl_service_name)

    @property
    @pulumi.getter(name="wsdlEndpointName")
    def wsdl_endpoint_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of endpoint(port) to import from WSDL
        """
        return pulumi.get(self, "wsdl_endpoint_name")

    @wsdl_endpoint_name.setter
    def wsdl_endpoint_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wsdl_endpoint_name", value)

    @property
    @pulumi.getter(name="wsdlServiceName")
    def wsdl_service_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of service to import from WSDL
        """
        return pulumi.get(self, "wsdl_service_name")

    @wsdl_service_name.setter
    def wsdl_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wsdl_service_name", value)


@pulumi.input_type
class ApiVersionSetContractDetailsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 version_header_name: Optional[pulumi.Input[str]] = None,
                 version_query_name: Optional[pulumi.Input[str]] = None,
                 versioning_scheme: Optional[pulumi.Input[str]] = None):
        """
        An API Version Set contains the common configuration for a set of API Versions relating 
        :param pulumi.Input[str] description: Description of API Version Set.
        :param pulumi.Input[str] id: Identifier for existing API Version Set. Omit this value to create a new Version Set.
        :param pulumi.Input[str] name: The display Name of the API Version Set.
        :param pulumi.Input[str] version_header_name: Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
        :param pulumi.Input[str] version_query_name: Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
        :param pulumi.Input[str] versioning_scheme: An value that determines where the API Version identifier will be located in a HTTP request.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version_header_name is not None:
            pulumi.set(__self__, "version_header_name", version_header_name)
        if version_query_name is not None:
            pulumi.set(__self__, "version_query_name", version_query_name)
        if versioning_scheme is not None:
            pulumi.set(__self__, "versioning_scheme", versioning_scheme)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of API Version Set.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier for existing API Version Set. Omit this value to create a new Version Set.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display Name of the API Version Set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="versionHeaderName")
    def version_header_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
        """
        return pulumi.get(self, "version_header_name")

    @version_header_name.setter
    def version_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_header_name", value)

    @property
    @pulumi.getter(name="versionQueryName")
    def version_query_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
        """
        return pulumi.get(self, "version_query_name")

    @version_query_name.setter
    def version_query_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_query_name", value)

    @property
    @pulumi.getter(name="versioningScheme")
    def versioning_scheme(self) -> Optional[pulumi.Input[str]]:
        """
        An value that determines where the API Version identifier will be located in a HTTP request.
        """
        return pulumi.get(self, "versioning_scheme")

    @versioning_scheme.setter
    def versioning_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versioning_scheme", value)


@pulumi.input_type
class AuthenticationSettingsContractArgs:
    def __init__(__self__, *,
                 o_auth2: Optional[pulumi.Input['OAuth2AuthenticationSettingsContractArgs']] = None,
                 openid: Optional[pulumi.Input['OpenIdAuthenticationSettingsContractArgs']] = None):
        """
        API Authentication Settings.
        :param pulumi.Input['OAuth2AuthenticationSettingsContractArgs'] o_auth2: OAuth2 Authentication settings
        :param pulumi.Input['OpenIdAuthenticationSettingsContractArgs'] openid: OpenID Connect Authentication Settings
        """
        if o_auth2 is not None:
            pulumi.set(__self__, "o_auth2", o_auth2)
        if openid is not None:
            pulumi.set(__self__, "openid", openid)

    @property
    @pulumi.getter(name="oAuth2")
    def o_auth2(self) -> Optional[pulumi.Input['OAuth2AuthenticationSettingsContractArgs']]:
        """
        OAuth2 Authentication settings
        """
        return pulumi.get(self, "o_auth2")

    @o_auth2.setter
    def o_auth2(self, value: Optional[pulumi.Input['OAuth2AuthenticationSettingsContractArgs']]):
        pulumi.set(self, "o_auth2", value)

    @property
    @pulumi.getter
    def openid(self) -> Optional[pulumi.Input['OpenIdAuthenticationSettingsContractArgs']]:
        """
        OpenID Connect Authentication Settings
        """
        return pulumi.get(self, "openid")

    @openid.setter
    def openid(self, value: Optional[pulumi.Input['OpenIdAuthenticationSettingsContractArgs']]):
        pulumi.set(self, "openid", value)


@pulumi.input_type
class OAuth2AuthenticationSettingsContractArgs:
    def __init__(__self__, *,
                 authorization_server_id: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        API OAuth2 Authentication settings details.
        :param pulumi.Input[str] authorization_server_id: OAuth authorization server identifier.
        :param pulumi.Input[str] scope: operations scope.
        """
        if authorization_server_id is not None:
            pulumi.set(__self__, "authorization_server_id", authorization_server_id)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="authorizationServerId")
    def authorization_server_id(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth authorization server identifier.
        """
        return pulumi.get(self, "authorization_server_id")

    @authorization_server_id.setter
    def authorization_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_server_id", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        operations scope.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class OpenIdAuthenticationSettingsContractArgs:
    def __init__(__self__, *,
                 bearer_token_sending_methods: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'BearerTokenSendingMethods']]]]] = None,
                 openid_provider_id: Optional[pulumi.Input[str]] = None):
        """
        API OAuth2 Authentication settings details.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'BearerTokenSendingMethods']]]] bearer_token_sending_methods: How to send token to the server.
        :param pulumi.Input[str] openid_provider_id: OAuth authorization server identifier.
        """
        if bearer_token_sending_methods is not None:
            pulumi.set(__self__, "bearer_token_sending_methods", bearer_token_sending_methods)
        if openid_provider_id is not None:
            pulumi.set(__self__, "openid_provider_id", openid_provider_id)

    @property
    @pulumi.getter(name="bearerTokenSendingMethods")
    def bearer_token_sending_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'BearerTokenSendingMethods']]]]]:
        """
        How to send token to the server.
        """
        return pulumi.get(self, "bearer_token_sending_methods")

    @bearer_token_sending_methods.setter
    def bearer_token_sending_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'BearerTokenSendingMethods']]]]]):
        pulumi.set(self, "bearer_token_sending_methods", value)

    @property
    @pulumi.getter(name="openidProviderId")
    def openid_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth authorization server identifier.
        """
        return pulumi.get(self, "openid_provider_id")

    @openid_provider_id.setter
    def openid_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "openid_provider_id", value)


@pulumi.input_type
class SubscriptionKeyParameterNamesContractArgs:
    def __init__(__self__, *,
                 header: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None):
        """
        Subscription key parameter names details.
        :param pulumi.Input[str] header: Subscription key header name.
        :param pulumi.Input[str] query: Subscription key query string parameter name.
        """
        if header is not None:
            pulumi.set(__self__, "header", header)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Subscription key header name.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Subscription key query string parameter name.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)


