# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AlwaysLog',
    'ApiType',
    'ApimIdentityType',
    'AppType',
    'AuthorizationMethod',
    'AuthorizationType',
    'BackendProtocol',
    'BearerTokenSendingMethod',
    'BearerTokenSendingMethods',
    'CertificateSource',
    'CertificateStatus',
    'ClientAuthenticationMethod',
    'Confirmation',
    'ContentFormat',
    'DataMaskingMode',
    'GrantType',
    'GroupType',
    'HostnameType',
    'HttpCorrelationProtocol',
    'IdentityProviderType',
    'KeyType',
    'LoggerType',
    'NatGatewayState',
    'OAuth2GrantType',
    'OperationNameFormat',
    'PolicyContentFormat',
    'PolicyFragmentContentFormat',
    'PrivateEndpointServiceConnectionStatus',
    'ProductState',
    'Protocol',
    'ProvisioningState',
    'PublicNetworkAccess',
    'SamplingType',
    'SchemaType',
    'SkuType',
    'SoapApiType',
    'State',
    'SubscriptionState',
    'TranslateRequiredQueryParametersConduct',
    'UserState',
    'Verbosity',
    'VersioningScheme',
    'VirtualNetworkType',
]


class AlwaysLog(str, Enum):
    ALL_ERRORS = "allErrors"
    """
    Always log all erroneous request regardless of sampling settings.
    """


class ApiType(str, Enum):
    HTTP = "http"
    SOAP = "soap"
    WEBSOCKET = "websocket"
    GRAPHQL = "graphql"


class ApimIdentityType(str, Enum):
    SYSTEM_ASSIGNED = "SystemAssigned"
    USER_ASSIGNED = "UserAssigned"
    SYSTEM_ASSIGNED_USER_ASSIGNED = "SystemAssigned, UserAssigned"
    NONE = "None"


class AppType(str, Enum):
    PORTAL = "portal"
    """
    User create request was sent by legacy developer portal.
    """
    DEVELOPER_PORTAL = "developerPortal"
    """
    User create request was sent by new developer portal.
    """


class AuthorizationMethod(str, Enum):
    HEAD = "HEAD"
    OPTIONS = "OPTIONS"
    TRACE = "TRACE"
    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    PATCH = "PATCH"
    DELETE = "DELETE"


class AuthorizationType(str, Enum):
    O_AUTH2 = "OAuth2"
    """
    OAuth2 authorization type
    """


class BackendProtocol(str, Enum):
    HTTP = "http"
    """
    The Backend is a RESTful service.
    """
    SOAP = "soap"
    """
    The Backend is a SOAP service.
    """


class BearerTokenSendingMethod(str, Enum):
    AUTHORIZATION_HEADER = "authorizationHeader"
    QUERY = "query"


class BearerTokenSendingMethods(str, Enum):
    AUTHORIZATION_HEADER = "authorizationHeader"
    """
    Access token will be transmitted in the Authorization header using Bearer schema
    """
    QUERY = "query"
    """
    Access token will be transmitted as query parameters.
    """


class CertificateSource(str, Enum):
    MANAGED = "Managed"
    KEY_VAULT = "KeyVault"
    CUSTOM = "Custom"
    BUILT_IN = "BuiltIn"


class CertificateStatus(str, Enum):
    COMPLETED = "Completed"
    FAILED = "Failed"
    IN_PROGRESS = "InProgress"


class ClientAuthenticationMethod(str, Enum):
    BASIC = "Basic"
    """
    Basic Client Authentication method.
    """
    BODY = "Body"
    """
    Body based Authentication method.
    """


class Confirmation(str, Enum):
    SIGNUP = "signup"
    """
    Send an e-mail to the user confirming they have successfully signed up.
    """
    INVITE = "invite"
    """
    Send an e-mail inviting the user to sign-up and complete registration.
    """


class ContentFormat(str, Enum):
    WADL_XML = "wadl-xml"
    """
    The contents are inline and Content type is a WADL document.
    """
    WADL_LINK_JSON = "wadl-link-json"
    """
    The WADL document is hosted on a publicly accessible internet address.
    """
    SWAGGER_JSON = "swagger-json"
    """
    The contents are inline and Content Type is a OpenAPI 2.0 JSON Document.
    """
    SWAGGER_LINK_JSON = "swagger-link-json"
    """
    The OpenAPI 2.0 JSON document is hosted on a publicly accessible internet address.
    """
    WSDL = "wsdl"
    """
    The contents are inline and the document is a WSDL/Soap document.
    """
    WSDL_LINK = "wsdl-link"
    """
    The WSDL document is hosted on a publicly accessible internet address.
    """
    OPENAPI = "openapi"
    """
    The contents are inline and Content Type is a OpenAPI 3.0 YAML Document.
    """
    OPENAPI_JSON = "openapi+json"
    """
    The contents are inline and Content Type is a OpenAPI 3.0 JSON Document.
    """
    OPENAPI_LINK = "openapi-link"
    """
    The OpenAPI 3.0 YAML document is hosted on a publicly accessible internet address.
    """
    OPENAPI_JSON_LINK = "openapi+json-link"
    """
    The OpenAPI 3.0 JSON document is hosted on a publicly accessible internet address.
    """
    GRAPHQL_LINK = "graphql-link"
    """
    The GraphQL API endpoint hosted on a publicly accessible internet address.
    """


class DataMaskingMode(str, Enum):
    MASK = "Mask"
    """
    Mask the value of an entity.
    """
    HIDE = "Hide"
    """
    Hide the presence of an entity.
    """


class GrantType(str, Enum):
    AUTHORIZATION_CODE = "authorizationCode"
    """
    Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1.
    """
    IMPLICIT = "implicit"
    """
    Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2.
    """
    RESOURCE_OWNER_PASSWORD = "resourceOwnerPassword"
    """
    Resource Owner Password Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.3.
    """
    CLIENT_CREDENTIALS = "clientCredentials"
    """
    Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4.
    """


class GroupType(str, Enum):
    CUSTOM = "custom"
    SYSTEM = "system"
    EXTERNAL = "external"


class HostnameType(str, Enum):
    PROXY = "Proxy"
    PORTAL = "Portal"
    MANAGEMENT = "Management"
    SCM = "Scm"
    DEVELOPER_PORTAL = "DeveloperPortal"


class HttpCorrelationProtocol(str, Enum):
    NONE = "None"
    """
    Do not read and inject correlation headers.
    """
    LEGACY = "Legacy"
    """
    Inject Request-Id and Request-Context headers with request correlation data. See https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/HttpCorrelationProtocol.md.
    """
    W3_C = "W3C"
    """
    Inject Trace Context headers. See https://w3c.github.io/trace-context.
    """


class IdentityProviderType(str, Enum):
    FACEBOOK = "facebook"
    """
    Facebook as Identity provider.
    """
    GOOGLE = "google"
    """
    Google as Identity provider.
    """
    MICROSOFT = "microsoft"
    """
    Microsoft Live as Identity provider.
    """
    TWITTER = "twitter"
    """
    Twitter as Identity provider.
    """
    AAD = "aad"
    """
    Azure Active Directory as Identity provider.
    """
    AAD_B2_C = "aadB2C"
    """
    Azure Active Directory B2C as Identity provider.
    """


class KeyType(str, Enum):
    PRIMARY = "primary"
    SECONDARY = "secondary"


class LoggerType(str, Enum):
    AZURE_EVENT_HUB = "azureEventHub"
    """
    Azure Event Hub as log destination.
    """
    APPLICATION_INSIGHTS = "applicationInsights"
    """
    Azure Application Insights as log destination.
    """
    AZURE_MONITOR = "azureMonitor"
    """
    Azure Monitor
    """


class NatGatewayState(str, Enum):
    ENABLED = "Enabled"
    """
    Nat Gateway is enabled for the service.
    """
    DISABLED = "Disabled"
    """
    Nat Gateway is disabled for the service.
    """


class OAuth2GrantType(str, Enum):
    AUTHORIZATION_CODE = "AuthorizationCode"
    """
    Authorization Code grant
    """
    CLIENT_CREDENTIALS = "ClientCredentials"
    """
    Client Credential grant
    """


class OperationNameFormat(str, Enum):
    NAME = "Name"
    """
    API_NAME;rev=API_REVISION - OPERATION_NAME
    """
    URL = "Url"
    """
    HTTP_VERB URL
    """


class PolicyContentFormat(str, Enum):
    XML = "xml"
    """
    The contents are inline and Content type is an XML document.
    """
    XML_LINK = "xml-link"
    """
    The policy XML document is hosted on a HTTP endpoint accessible from the API Management service.
    """
    RAWXML = "rawxml"
    """
    The contents are inline and Content type is a non XML encoded policy document.
    """
    RAWXML_LINK = "rawxml-link"
    """
    The policy document is not XML encoded and is hosted on a HTTP endpoint accessible from the API Management service.
    """


class PolicyFragmentContentFormat(str, Enum):
    XML = "xml"
    """
    The contents are inline and Content type is an XML document.
    """
    RAWXML = "rawxml"
    """
    The contents are inline and Content type is a non XML encoded policy document.
    """


class PrivateEndpointServiceConnectionStatus(str, Enum):
    PENDING = "Pending"
    APPROVED = "Approved"
    REJECTED = "Rejected"


class ProductState(str, Enum):
    NOT_PUBLISHED = "notPublished"
    PUBLISHED = "published"


class Protocol(str, Enum):
    HTTP = "http"
    HTTPS = "https"
    WS = "ws"
    WSS = "wss"


class ProvisioningState(str, Enum):
    CREATED = "created"


class PublicNetworkAccess(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class SamplingType(str, Enum):
    FIXED = "fixed"
    """
    Fixed-rate sampling.
    """


class SchemaType(str, Enum):
    XML = "xml"
    """
    XML schema type.
    """
    JSON = "json"
    """
    Json schema type.
    """


class SkuType(str, Enum):
    DEVELOPER = "Developer"
    """
    Developer SKU of Api Management.
    """
    STANDARD = "Standard"
    """
    Standard SKU of Api Management.
    """
    PREMIUM = "Premium"
    """
    Premium SKU of Api Management.
    """
    BASIC = "Basic"
    """
    Basic SKU of Api Management.
    """
    CONSUMPTION = "Consumption"
    """
    Consumption SKU of Api Management.
    """
    ISOLATED = "Isolated"
    """
    Isolated SKU of Api Management.
    """


class SoapApiType(str, Enum):
    SOAP_TO_REST = "http"
    """
    Imports a SOAP API having a RESTful front end.
    """
    SOAP_PASS_THROUGH = "soap"
    """
    Imports the SOAP API having a SOAP front end.
    """
    WEB_SOCKET = "websocket"
    """
    Imports the API having a Websocket front end.
    """
    GRAPH_QL = "graphql"
    """
    Imports the API having a GraphQL front end.
    """


class State(str, Enum):
    PROPOSED = "proposed"
    """
    The issue is proposed.
    """
    OPEN = "open"
    """
    The issue is opened.
    """
    REMOVED = "removed"
    """
    The issue was removed.
    """
    RESOLVED = "resolved"
    """
    The issue is now resolved.
    """
    CLOSED = "closed"
    """
    The issue was closed.
    """


class SubscriptionState(str, Enum):
    SUSPENDED = "suspended"
    ACTIVE = "active"
    EXPIRED = "expired"
    SUBMITTED = "submitted"
    REJECTED = "rejected"
    CANCELLED = "cancelled"


class TranslateRequiredQueryParametersConduct(str, Enum):
    TEMPLATE = "template"
    """
    Translates required query parameters to template ones. Is a default value
    """
    QUERY = "query"
    """
    Leaves required query parameters as they are (no translation done).
    """


class UserState(str, Enum):
    ACTIVE = "active"
    """
    User state is active.
    """
    BLOCKED = "blocked"
    """
    User is blocked. Blocked users cannot authenticate at developer portal or call API.
    """
    PENDING = "pending"
    """
    User account is pending. Requires identity confirmation before it can be made active.
    """
    DELETED = "deleted"
    """
    User account is closed. All identities and related entities are removed.
    """


class Verbosity(str, Enum):
    VERBOSE = "verbose"
    """
    All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance.
    """
    INFORMATION = "information"
    """
    Traces with 'severity' set to 'information' and 'error' will be sent to the logger attached to this diagnostic instance.
    """
    ERROR = "error"
    """
    Only traces with 'severity' set to 'error' will be sent to the logger attached to this diagnostic instance.
    """


class VersioningScheme(str, Enum):
    SEGMENT = "Segment"
    """
    The API Version is passed in a path segment.
    """
    QUERY = "Query"
    """
    The API Version is passed in a query parameter.
    """
    HEADER = "Header"
    """
    The API Version is passed in a HTTP header.
    """


class VirtualNetworkType(str, Enum):
    NONE = "None"
    """
    The service is not part of any Virtual Network.
    """
    EXTERNAL = "External"
    """
    The service is part of Virtual Network and it is accessible from Internet.
    """
    INTERNAL = "Internal"
    """
    The service is part of Virtual Network and it is only accessible from within the virtual network.
    """
