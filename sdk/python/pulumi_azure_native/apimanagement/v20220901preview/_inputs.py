# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'ApiContactInformationArgs',
    'ApiContactInformationArgsDict',
    'ApiCreateOrUpdatePropertiesWsdlSelectorArgs',
    'ApiCreateOrUpdatePropertiesWsdlSelectorArgsDict',
    'ApiLicenseInformationArgs',
    'ApiLicenseInformationArgsDict',
    'ApiVersionSetContractDetailsArgs',
    'ApiVersionSetContractDetailsArgsDict',
    'AuthenticationSettingsContractArgs',
    'AuthenticationSettingsContractArgsDict',
    'KeyVaultContractCreatePropertiesArgs',
    'KeyVaultContractCreatePropertiesArgsDict',
    'OAuth2AuthenticationSettingsContractArgs',
    'OAuth2AuthenticationSettingsContractArgsDict',
    'OpenIdAuthenticationSettingsContractArgs',
    'OpenIdAuthenticationSettingsContractArgsDict',
    'ParameterContractArgs',
    'ParameterContractArgsDict',
    'ParameterExampleContractArgs',
    'ParameterExampleContractArgsDict',
    'RepresentationContractArgs',
    'RepresentationContractArgsDict',
    'RequestContractArgs',
    'RequestContractArgsDict',
    'ResponseContractArgs',
    'ResponseContractArgsDict',
    'SubscriptionKeyParameterNamesContractArgs',
    'SubscriptionKeyParameterNamesContractArgsDict',
]

MYPY = False

if not MYPY:
    class ApiContactInformationArgsDict(TypedDict):
        """
        API contact information
        """
        email: NotRequired[pulumi.Input[str]]
        """
        The email address of the contact person/organization. MUST be in the format of an email address
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The identifying name of the contact person/organization
        """
        url: NotRequired[pulumi.Input[str]]
        """
        The URL pointing to the contact information. MUST be in the format of a URL
        """
elif False:
    ApiContactInformationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiContactInformationArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        API contact information
        :param pulumi.Input[str] email: The email address of the contact person/organization. MUST be in the format of an email address
        :param pulumi.Input[str] name: The identifying name of the contact person/organization
        :param pulumi.Input[str] url: The URL pointing to the contact information. MUST be in the format of a URL
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of the contact person/organization. MUST be in the format of an email address
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifying name of the contact person/organization
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL pointing to the contact information. MUST be in the format of a URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class ApiCreateOrUpdatePropertiesWsdlSelectorArgsDict(TypedDict):
        """
        Criteria to limit import of WSDL to a subset of the document.
        """
        wsdl_endpoint_name: NotRequired[pulumi.Input[str]]
        """
        Name of endpoint(port) to import from WSDL
        """
        wsdl_service_name: NotRequired[pulumi.Input[str]]
        """
        Name of service to import from WSDL
        """
elif False:
    ApiCreateOrUpdatePropertiesWsdlSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiCreateOrUpdatePropertiesWsdlSelectorArgs:
    def __init__(__self__, *,
                 wsdl_endpoint_name: Optional[pulumi.Input[str]] = None,
                 wsdl_service_name: Optional[pulumi.Input[str]] = None):
        """
        Criteria to limit import of WSDL to a subset of the document.
        :param pulumi.Input[str] wsdl_endpoint_name: Name of endpoint(port) to import from WSDL
        :param pulumi.Input[str] wsdl_service_name: Name of service to import from WSDL
        """
        if wsdl_endpoint_name is not None:
            pulumi.set(__self__, "wsdl_endpoint_name", wsdl_endpoint_name)
        if wsdl_service_name is not None:
            pulumi.set(__self__, "wsdl_service_name", wsdl_service_name)

    @property
    @pulumi.getter(name="wsdlEndpointName")
    def wsdl_endpoint_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of endpoint(port) to import from WSDL
        """
        return pulumi.get(self, "wsdl_endpoint_name")

    @wsdl_endpoint_name.setter
    def wsdl_endpoint_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wsdl_endpoint_name", value)

    @property
    @pulumi.getter(name="wsdlServiceName")
    def wsdl_service_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of service to import from WSDL
        """
        return pulumi.get(self, "wsdl_service_name")

    @wsdl_service_name.setter
    def wsdl_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wsdl_service_name", value)


if not MYPY:
    class ApiLicenseInformationArgsDict(TypedDict):
        """
        API license information
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The license name used for the API
        """
        url: NotRequired[pulumi.Input[str]]
        """
        A URL to the license used for the API. MUST be in the format of a URL
        """
elif False:
    ApiLicenseInformationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiLicenseInformationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        API license information
        :param pulumi.Input[str] name: The license name used for the API
        :param pulumi.Input[str] url: A URL to the license used for the API. MUST be in the format of a URL
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The license name used for the API
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL to the license used for the API. MUST be in the format of a URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class ApiVersionSetContractDetailsArgsDict(TypedDict):
        """
        An API Version Set contains the common configuration for a set of API Versions relating 
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Description of API Version Set.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Identifier for existing API Version Set. Omit this value to create a new Version Set.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The display Name of the API Version Set.
        """
        version_header_name: NotRequired[pulumi.Input[str]]
        """
        Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
        """
        version_query_name: NotRequired[pulumi.Input[str]]
        """
        Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
        """
        versioning_scheme: NotRequired[pulumi.Input[Union[str, 'VersioningScheme']]]
        """
        An value that determines where the API Version identifier will be located in a HTTP request.
        """
elif False:
    ApiVersionSetContractDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiVersionSetContractDetailsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 version_header_name: Optional[pulumi.Input[str]] = None,
                 version_query_name: Optional[pulumi.Input[str]] = None,
                 versioning_scheme: Optional[pulumi.Input[Union[str, 'VersioningScheme']]] = None):
        """
        An API Version Set contains the common configuration for a set of API Versions relating 
        :param pulumi.Input[str] description: Description of API Version Set.
        :param pulumi.Input[str] id: Identifier for existing API Version Set. Omit this value to create a new Version Set.
        :param pulumi.Input[str] name: The display Name of the API Version Set.
        :param pulumi.Input[str] version_header_name: Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
        :param pulumi.Input[str] version_query_name: Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
        :param pulumi.Input[Union[str, 'VersioningScheme']] versioning_scheme: An value that determines where the API Version identifier will be located in a HTTP request.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version_header_name is not None:
            pulumi.set(__self__, "version_header_name", version_header_name)
        if version_query_name is not None:
            pulumi.set(__self__, "version_query_name", version_query_name)
        if versioning_scheme is not None:
            pulumi.set(__self__, "versioning_scheme", versioning_scheme)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of API Version Set.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier for existing API Version Set. Omit this value to create a new Version Set.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display Name of the API Version Set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="versionHeaderName")
    def version_header_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
        """
        return pulumi.get(self, "version_header_name")

    @version_header_name.setter
    def version_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_header_name", value)

    @property
    @pulumi.getter(name="versionQueryName")
    def version_query_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
        """
        return pulumi.get(self, "version_query_name")

    @version_query_name.setter
    def version_query_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_query_name", value)

    @property
    @pulumi.getter(name="versioningScheme")
    def versioning_scheme(self) -> Optional[pulumi.Input[Union[str, 'VersioningScheme']]]:
        """
        An value that determines where the API Version identifier will be located in a HTTP request.
        """
        return pulumi.get(self, "versioning_scheme")

    @versioning_scheme.setter
    def versioning_scheme(self, value: Optional[pulumi.Input[Union[str, 'VersioningScheme']]]):
        pulumi.set(self, "versioning_scheme", value)


if not MYPY:
    class AuthenticationSettingsContractArgsDict(TypedDict):
        """
        API Authentication Settings.
        """
        o_auth2: NotRequired[pulumi.Input['OAuth2AuthenticationSettingsContractArgsDict']]
        """
        OAuth2 Authentication settings
        """
        o_auth2_authentication_settings: NotRequired[pulumi.Input[Sequence[pulumi.Input['OAuth2AuthenticationSettingsContractArgsDict']]]]
        """
        Collection of OAuth2 authentication settings included into this API.
        """
        openid: NotRequired[pulumi.Input['OpenIdAuthenticationSettingsContractArgsDict']]
        """
        OpenID Connect Authentication Settings
        """
        openid_authentication_settings: NotRequired[pulumi.Input[Sequence[pulumi.Input['OpenIdAuthenticationSettingsContractArgsDict']]]]
        """
        Collection of Open ID Connect authentication settings included into this API.
        """
elif False:
    AuthenticationSettingsContractArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationSettingsContractArgs:
    def __init__(__self__, *,
                 o_auth2: Optional[pulumi.Input['OAuth2AuthenticationSettingsContractArgs']] = None,
                 o_auth2_authentication_settings: Optional[pulumi.Input[Sequence[pulumi.Input['OAuth2AuthenticationSettingsContractArgs']]]] = None,
                 openid: Optional[pulumi.Input['OpenIdAuthenticationSettingsContractArgs']] = None,
                 openid_authentication_settings: Optional[pulumi.Input[Sequence[pulumi.Input['OpenIdAuthenticationSettingsContractArgs']]]] = None):
        """
        API Authentication Settings.
        :param pulumi.Input['OAuth2AuthenticationSettingsContractArgs'] o_auth2: OAuth2 Authentication settings
        :param pulumi.Input[Sequence[pulumi.Input['OAuth2AuthenticationSettingsContractArgs']]] o_auth2_authentication_settings: Collection of OAuth2 authentication settings included into this API.
        :param pulumi.Input['OpenIdAuthenticationSettingsContractArgs'] openid: OpenID Connect Authentication Settings
        :param pulumi.Input[Sequence[pulumi.Input['OpenIdAuthenticationSettingsContractArgs']]] openid_authentication_settings: Collection of Open ID Connect authentication settings included into this API.
        """
        if o_auth2 is not None:
            pulumi.set(__self__, "o_auth2", o_auth2)
        if o_auth2_authentication_settings is not None:
            pulumi.set(__self__, "o_auth2_authentication_settings", o_auth2_authentication_settings)
        if openid is not None:
            pulumi.set(__self__, "openid", openid)
        if openid_authentication_settings is not None:
            pulumi.set(__self__, "openid_authentication_settings", openid_authentication_settings)

    @property
    @pulumi.getter(name="oAuth2")
    def o_auth2(self) -> Optional[pulumi.Input['OAuth2AuthenticationSettingsContractArgs']]:
        """
        OAuth2 Authentication settings
        """
        return pulumi.get(self, "o_auth2")

    @o_auth2.setter
    def o_auth2(self, value: Optional[pulumi.Input['OAuth2AuthenticationSettingsContractArgs']]):
        pulumi.set(self, "o_auth2", value)

    @property
    @pulumi.getter(name="oAuth2AuthenticationSettings")
    def o_auth2_authentication_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OAuth2AuthenticationSettingsContractArgs']]]]:
        """
        Collection of OAuth2 authentication settings included into this API.
        """
        return pulumi.get(self, "o_auth2_authentication_settings")

    @o_auth2_authentication_settings.setter
    def o_auth2_authentication_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OAuth2AuthenticationSettingsContractArgs']]]]):
        pulumi.set(self, "o_auth2_authentication_settings", value)

    @property
    @pulumi.getter
    def openid(self) -> Optional[pulumi.Input['OpenIdAuthenticationSettingsContractArgs']]:
        """
        OpenID Connect Authentication Settings
        """
        return pulumi.get(self, "openid")

    @openid.setter
    def openid(self, value: Optional[pulumi.Input['OpenIdAuthenticationSettingsContractArgs']]):
        pulumi.set(self, "openid", value)

    @property
    @pulumi.getter(name="openidAuthenticationSettings")
    def openid_authentication_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OpenIdAuthenticationSettingsContractArgs']]]]:
        """
        Collection of Open ID Connect authentication settings included into this API.
        """
        return pulumi.get(self, "openid_authentication_settings")

    @openid_authentication_settings.setter
    def openid_authentication_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OpenIdAuthenticationSettingsContractArgs']]]]):
        pulumi.set(self, "openid_authentication_settings", value)


if not MYPY:
    class KeyVaultContractCreatePropertiesArgsDict(TypedDict):
        """
        Create keyVault contract details.
        """
        identity_client_id: NotRequired[pulumi.Input[str]]
        """
        Null for SystemAssignedIdentity or Client Id for UserAssignedIdentity , which will be used to access key vault secret.
        """
        secret_identifier: NotRequired[pulumi.Input[str]]
        """
        Key vault secret identifier for fetching secret. Providing a versioned secret will prevent auto-refresh. This requires API Management service to be configured with aka.ms/apimmsi
        """
elif False:
    KeyVaultContractCreatePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KeyVaultContractCreatePropertiesArgs:
    def __init__(__self__, *,
                 identity_client_id: Optional[pulumi.Input[str]] = None,
                 secret_identifier: Optional[pulumi.Input[str]] = None):
        """
        Create keyVault contract details.
        :param pulumi.Input[str] identity_client_id: Null for SystemAssignedIdentity or Client Id for UserAssignedIdentity , which will be used to access key vault secret.
        :param pulumi.Input[str] secret_identifier: Key vault secret identifier for fetching secret. Providing a versioned secret will prevent auto-refresh. This requires API Management service to be configured with aka.ms/apimmsi
        """
        if identity_client_id is not None:
            pulumi.set(__self__, "identity_client_id", identity_client_id)
        if secret_identifier is not None:
            pulumi.set(__self__, "secret_identifier", secret_identifier)

    @property
    @pulumi.getter(name="identityClientId")
    def identity_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Null for SystemAssignedIdentity or Client Id for UserAssignedIdentity , which will be used to access key vault secret.
        """
        return pulumi.get(self, "identity_client_id")

    @identity_client_id.setter
    def identity_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_client_id", value)

    @property
    @pulumi.getter(name="secretIdentifier")
    def secret_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Key vault secret identifier for fetching secret. Providing a versioned secret will prevent auto-refresh. This requires API Management service to be configured with aka.ms/apimmsi
        """
        return pulumi.get(self, "secret_identifier")

    @secret_identifier.setter
    def secret_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_identifier", value)


if not MYPY:
    class OAuth2AuthenticationSettingsContractArgsDict(TypedDict):
        """
        API OAuth2 Authentication settings details.
        """
        authorization_server_id: NotRequired[pulumi.Input[str]]
        """
        OAuth authorization server identifier.
        """
        scope: NotRequired[pulumi.Input[str]]
        """
        operations scope.
        """
elif False:
    OAuth2AuthenticationSettingsContractArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OAuth2AuthenticationSettingsContractArgs:
    def __init__(__self__, *,
                 authorization_server_id: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        API OAuth2 Authentication settings details.
        :param pulumi.Input[str] authorization_server_id: OAuth authorization server identifier.
        :param pulumi.Input[str] scope: operations scope.
        """
        if authorization_server_id is not None:
            pulumi.set(__self__, "authorization_server_id", authorization_server_id)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="authorizationServerId")
    def authorization_server_id(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth authorization server identifier.
        """
        return pulumi.get(self, "authorization_server_id")

    @authorization_server_id.setter
    def authorization_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_server_id", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        operations scope.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


if not MYPY:
    class OpenIdAuthenticationSettingsContractArgsDict(TypedDict):
        """
        API OAuth2 Authentication settings details.
        """
        bearer_token_sending_methods: NotRequired[pulumi.Input[Sequence[pulumi.Input[Union[str, 'BearerTokenSendingMethods']]]]]
        """
        How to send token to the server.
        """
        openid_provider_id: NotRequired[pulumi.Input[str]]
        """
        OAuth authorization server identifier.
        """
elif False:
    OpenIdAuthenticationSettingsContractArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpenIdAuthenticationSettingsContractArgs:
    def __init__(__self__, *,
                 bearer_token_sending_methods: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'BearerTokenSendingMethods']]]]] = None,
                 openid_provider_id: Optional[pulumi.Input[str]] = None):
        """
        API OAuth2 Authentication settings details.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'BearerTokenSendingMethods']]]] bearer_token_sending_methods: How to send token to the server.
        :param pulumi.Input[str] openid_provider_id: OAuth authorization server identifier.
        """
        if bearer_token_sending_methods is not None:
            pulumi.set(__self__, "bearer_token_sending_methods", bearer_token_sending_methods)
        if openid_provider_id is not None:
            pulumi.set(__self__, "openid_provider_id", openid_provider_id)

    @property
    @pulumi.getter(name="bearerTokenSendingMethods")
    def bearer_token_sending_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'BearerTokenSendingMethods']]]]]:
        """
        How to send token to the server.
        """
        return pulumi.get(self, "bearer_token_sending_methods")

    @bearer_token_sending_methods.setter
    def bearer_token_sending_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'BearerTokenSendingMethods']]]]]):
        pulumi.set(self, "bearer_token_sending_methods", value)

    @property
    @pulumi.getter(name="openidProviderId")
    def openid_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth authorization server identifier.
        """
        return pulumi.get(self, "openid_provider_id")

    @openid_provider_id.setter
    def openid_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "openid_provider_id", value)


if not MYPY:
    class ParameterContractArgsDict(TypedDict):
        """
        Operation parameters details.
        """
        name: pulumi.Input[str]
        """
        Parameter name.
        """
        type: pulumi.Input[str]
        """
        Parameter type.
        """
        default_value: NotRequired[pulumi.Input[str]]
        """
        Default parameter value.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Parameter description.
        """
        examples: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['ParameterExampleContractArgsDict']]]]
        """
        Exampled defined for the parameter.
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether parameter is required or not.
        """
        schema_id: NotRequired[pulumi.Input[str]]
        """
        Schema identifier.
        """
        type_name: NotRequired[pulumi.Input[str]]
        """
        Type name defined by the schema.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Parameter values.
        """
elif False:
    ParameterContractArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ParameterContractArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 examples: Optional[pulumi.Input[Mapping[str, pulumi.Input['ParameterExampleContractArgs']]]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 schema_id: Optional[pulumi.Input[str]] = None,
                 type_name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Operation parameters details.
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[str] type: Parameter type.
        :param pulumi.Input[str] default_value: Default parameter value.
        :param pulumi.Input[str] description: Parameter description.
        :param pulumi.Input[Mapping[str, pulumi.Input['ParameterExampleContractArgs']]] examples: Exampled defined for the parameter.
        :param pulumi.Input[bool] required: Specifies whether parameter is required or not.
        :param pulumi.Input[str] schema_id: Schema identifier.
        :param pulumi.Input[str] type_name: Type name defined by the schema.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if examples is not None:
            pulumi.set(__self__, "examples", examples)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if schema_id is not None:
            pulumi.set(__self__, "schema_id", schema_id)
        if type_name is not None:
            pulumi.set(__self__, "type_name", type_name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Parameter type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        Default parameter value.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def examples(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ParameterExampleContractArgs']]]]:
        """
        Exampled defined for the parameter.
        """
        return pulumi.get(self, "examples")

    @examples.setter
    def examples(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ParameterExampleContractArgs']]]]):
        pulumi.set(self, "examples", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether parameter is required or not.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[pulumi.Input[str]]:
        """
        Schema identifier.
        """
        return pulumi.get(self, "schema_id")

    @schema_id.setter
    def schema_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_id", value)

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> Optional[pulumi.Input[str]]:
        """
        Type name defined by the schema.
        """
        return pulumi.get(self, "type_name")

    @type_name.setter
    def type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Parameter values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ParameterExampleContractArgsDict(TypedDict):
        """
        Parameter example.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Long description for the example
        """
        external_value: NotRequired[pulumi.Input[str]]
        """
        A URL that points to the literal example
        """
        summary: NotRequired[pulumi.Input[str]]
        """
        Short description for the example
        """
        value: NotRequired[Any]
        """
        Example value. May be a primitive value, or an object.
        """
elif False:
    ParameterExampleContractArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ParameterExampleContractArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 external_value: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 value: Optional[Any] = None):
        """
        Parameter example.
        :param pulumi.Input[str] description: Long description for the example
        :param pulumi.Input[str] external_value: A URL that points to the literal example
        :param pulumi.Input[str] summary: Short description for the example
        :param Any value: Example value. May be a primitive value, or an object.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_value is not None:
            pulumi.set(__self__, "external_value", external_value)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Long description for the example
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalValue")
    def external_value(self) -> Optional[pulumi.Input[str]]:
        """
        A URL that points to the literal example
        """
        return pulumi.get(self, "external_value")

    @external_value.setter
    def external_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_value", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input[str]]:
        """
        Short description for the example
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[Any]:
        """
        Example value. May be a primitive value, or an object.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[Any]):
        pulumi.set(self, "value", value)


if not MYPY:
    class RepresentationContractArgsDict(TypedDict):
        """
        Operation request/response representation details.
        """
        content_type: pulumi.Input[str]
        """
        Specifies a registered or custom content type for this representation, e.g. application/xml.
        """
        examples: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['ParameterExampleContractArgsDict']]]]
        """
        Exampled defined for the representation.
        """
        form_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgsDict']]]]
        """
        Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'..
        """
        schema_id: NotRequired[pulumi.Input[str]]
        """
        Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
        """
        type_name: NotRequired[pulumi.Input[str]]
        """
        Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
        """
elif False:
    RepresentationContractArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RepresentationContractArgs:
    def __init__(__self__, *,
                 content_type: pulumi.Input[str],
                 examples: Optional[pulumi.Input[Mapping[str, pulumi.Input['ParameterExampleContractArgs']]]] = None,
                 form_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]]] = None,
                 schema_id: Optional[pulumi.Input[str]] = None,
                 type_name: Optional[pulumi.Input[str]] = None):
        """
        Operation request/response representation details.
        :param pulumi.Input[str] content_type: Specifies a registered or custom content type for this representation, e.g. application/xml.
        :param pulumi.Input[Mapping[str, pulumi.Input['ParameterExampleContractArgs']]] examples: Exampled defined for the representation.
        :param pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]] form_parameters: Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'..
        :param pulumi.Input[str] schema_id: Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
        :param pulumi.Input[str] type_name: Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
        """
        pulumi.set(__self__, "content_type", content_type)
        if examples is not None:
            pulumi.set(__self__, "examples", examples)
        if form_parameters is not None:
            pulumi.set(__self__, "form_parameters", form_parameters)
        if schema_id is not None:
            pulumi.set(__self__, "schema_id", schema_id)
        if type_name is not None:
            pulumi.set(__self__, "type_name", type_name)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        Specifies a registered or custom content type for this representation, e.g. application/xml.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def examples(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ParameterExampleContractArgs']]]]:
        """
        Exampled defined for the representation.
        """
        return pulumi.get(self, "examples")

    @examples.setter
    def examples(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ParameterExampleContractArgs']]]]):
        pulumi.set(self, "examples", value)

    @property
    @pulumi.getter(name="formParameters")
    def form_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]]]:
        """
        Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'..
        """
        return pulumi.get(self, "form_parameters")

    @form_parameters.setter
    def form_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]]]):
        pulumi.set(self, "form_parameters", value)

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[pulumi.Input[str]]:
        """
        Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
        """
        return pulumi.get(self, "schema_id")

    @schema_id.setter
    def schema_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_id", value)

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> Optional[pulumi.Input[str]]:
        """
        Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
        """
        return pulumi.get(self, "type_name")

    @type_name.setter
    def type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_name", value)


if not MYPY:
    class RequestContractArgsDict(TypedDict):
        """
        Operation request details.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Operation request description.
        """
        headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgsDict']]]]
        """
        Collection of operation request headers.
        """
        query_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgsDict']]]]
        """
        Collection of operation request query parameters.
        """
        representations: NotRequired[pulumi.Input[Sequence[pulumi.Input['RepresentationContractArgsDict']]]]
        """
        Collection of operation request representations.
        """
elif False:
    RequestContractArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RequestContractArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]]] = None,
                 query_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]]] = None,
                 representations: Optional[pulumi.Input[Sequence[pulumi.Input['RepresentationContractArgs']]]] = None):
        """
        Operation request details.
        :param pulumi.Input[str] description: Operation request description.
        :param pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]] headers: Collection of operation request headers.
        :param pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]] query_parameters: Collection of operation request query parameters.
        :param pulumi.Input[Sequence[pulumi.Input['RepresentationContractArgs']]] representations: Collection of operation request representations.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if query_parameters is not None:
            pulumi.set(__self__, "query_parameters", query_parameters)
        if representations is not None:
            pulumi.set(__self__, "representations", representations)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Operation request description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]]]:
        """
        Collection of operation request headers.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="queryParameters")
    def query_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]]]:
        """
        Collection of operation request query parameters.
        """
        return pulumi.get(self, "query_parameters")

    @query_parameters.setter
    def query_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]]]):
        pulumi.set(self, "query_parameters", value)

    @property
    @pulumi.getter
    def representations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RepresentationContractArgs']]]]:
        """
        Collection of operation request representations.
        """
        return pulumi.get(self, "representations")

    @representations.setter
    def representations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RepresentationContractArgs']]]]):
        pulumi.set(self, "representations", value)


if not MYPY:
    class ResponseContractArgsDict(TypedDict):
        """
        Operation response details.
        """
        status_code: pulumi.Input[int]
        """
        Operation response HTTP status code.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Operation response description.
        """
        headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgsDict']]]]
        """
        Collection of operation response headers.
        """
        representations: NotRequired[pulumi.Input[Sequence[pulumi.Input['RepresentationContractArgsDict']]]]
        """
        Collection of operation response representations.
        """
elif False:
    ResponseContractArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResponseContractArgs:
    def __init__(__self__, *,
                 status_code: pulumi.Input[int],
                 description: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]]] = None,
                 representations: Optional[pulumi.Input[Sequence[pulumi.Input['RepresentationContractArgs']]]] = None):
        """
        Operation response details.
        :param pulumi.Input[int] status_code: Operation response HTTP status code.
        :param pulumi.Input[str] description: Operation response description.
        :param pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]] headers: Collection of operation response headers.
        :param pulumi.Input[Sequence[pulumi.Input['RepresentationContractArgs']]] representations: Collection of operation response representations.
        """
        pulumi.set(__self__, "status_code", status_code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if representations is not None:
            pulumi.set(__self__, "representations", representations)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[int]:
        """
        Operation response HTTP status code.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Operation response description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]]]:
        """
        Collection of operation response headers.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterContractArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def representations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RepresentationContractArgs']]]]:
        """
        Collection of operation response representations.
        """
        return pulumi.get(self, "representations")

    @representations.setter
    def representations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RepresentationContractArgs']]]]):
        pulumi.set(self, "representations", value)


if not MYPY:
    class SubscriptionKeyParameterNamesContractArgsDict(TypedDict):
        """
        Subscription key parameter names details.
        """
        header: NotRequired[pulumi.Input[str]]
        """
        Subscription key header name.
        """
        query: NotRequired[pulumi.Input[str]]
        """
        Subscription key query string parameter name.
        """
elif False:
    SubscriptionKeyParameterNamesContractArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SubscriptionKeyParameterNamesContractArgs:
    def __init__(__self__, *,
                 header: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None):
        """
        Subscription key parameter names details.
        :param pulumi.Input[str] header: Subscription key header name.
        :param pulumi.Input[str] query: Subscription key query string parameter name.
        """
        if header is not None:
            pulumi.set(__self__, "header", header)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Subscription key header name.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Subscription key query string parameter name.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)


