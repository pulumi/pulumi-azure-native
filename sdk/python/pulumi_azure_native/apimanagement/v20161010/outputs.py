# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AdditionalRegionResponse',
    'ApiManagementServicePropertiesResponse',
    'ApiManagementServiceSkuPropertiesResponse',
    'CertificateInformationResponse',
    'HostnameConfigurationResponse',
    'VirtualNetworkConfigurationResponse',
]

@pulumi.output_type
class AdditionalRegionResponse(dict):
    """
    Description of an additional API Management resource location.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "skuType":
            suggest = "sku_type"
        elif key == "staticIPs":
            suggest = "static_ips"
        elif key == "skuUnitCount":
            suggest = "sku_unit_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdditionalRegionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdditionalRegionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdditionalRegionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: str,
                 sku_type: str,
                 static_ips: Sequence[str],
                 sku_unit_count: Optional[int] = None,
                 vpnconfiguration: Optional['outputs.VirtualNetworkConfigurationResponse'] = None):
        """
        Description of an additional API Management resource location.
        :param str location: The location name of the additional region among Azure Data center regions.
        :param str sku_type: The SKU type in the location.
        :param Sequence[str] static_ips: Static IP addresses of the location's virtual machines.
        :param int sku_unit_count: The SKU Unit count at the location. The maximum SKU Unit count depends on the SkuType. Maximum allowed for Developer SKU is 1, for Standard SKU is 4, and for Premium SKU is 10, at a location.
        :param 'VirtualNetworkConfigurationResponse' vpnconfiguration: Virtual network configuration for the location.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "sku_type", sku_type)
        pulumi.set(__self__, "static_ips", static_ips)
        if sku_unit_count is None:
            sku_unit_count = 1
        if sku_unit_count is not None:
            pulumi.set(__self__, "sku_unit_count", sku_unit_count)
        if vpnconfiguration is not None:
            pulumi.set(__self__, "vpnconfiguration", vpnconfiguration)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location name of the additional region among Azure Data center regions.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="skuType")
    def sku_type(self) -> str:
        """
        The SKU type in the location.
        """
        return pulumi.get(self, "sku_type")

    @property
    @pulumi.getter(name="staticIPs")
    def static_ips(self) -> Sequence[str]:
        """
        Static IP addresses of the location's virtual machines.
        """
        return pulumi.get(self, "static_ips")

    @property
    @pulumi.getter(name="skuUnitCount")
    def sku_unit_count(self) -> Optional[int]:
        """
        The SKU Unit count at the location. The maximum SKU Unit count depends on the SkuType. Maximum allowed for Developer SKU is 1, for Standard SKU is 4, and for Premium SKU is 10, at a location.
        """
        return pulumi.get(self, "sku_unit_count")

    @property
    @pulumi.getter
    def vpnconfiguration(self) -> Optional['outputs.VirtualNetworkConfigurationResponse']:
        """
        Virtual network configuration for the location.
        """
        return pulumi.get(self, "vpnconfiguration")


@pulumi.output_type
class ApiManagementServicePropertiesResponse(dict):
    """
    Properties of an API Management service resource description.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAtUtc":
            suggest = "created_at_utc"
        elif key == "managementApiUrl":
            suggest = "management_api_url"
        elif key == "portalUrl":
            suggest = "portal_url"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "publisherEmail":
            suggest = "publisher_email"
        elif key == "publisherName":
            suggest = "publisher_name"
        elif key == "runtimeUrl":
            suggest = "runtime_url"
        elif key == "scmUrl":
            suggest = "scm_url"
        elif key == "staticIPs":
            suggest = "static_ips"
        elif key == "targetProvisioningState":
            suggest = "target_provisioning_state"
        elif key == "additionalLocations":
            suggest = "additional_locations"
        elif key == "addresserEmail":
            suggest = "addresser_email"
        elif key == "customProperties":
            suggest = "custom_properties"
        elif key == "hostnameConfigurations":
            suggest = "hostname_configurations"
        elif key == "vpnType":
            suggest = "vpn_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiManagementServicePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiManagementServicePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiManagementServicePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at_utc: str,
                 management_api_url: str,
                 portal_url: str,
                 provisioning_state: str,
                 publisher_email: str,
                 publisher_name: str,
                 runtime_url: str,
                 scm_url: str,
                 static_ips: Sequence[str],
                 target_provisioning_state: str,
                 additional_locations: Optional[Sequence['outputs.AdditionalRegionResponse']] = None,
                 addresser_email: Optional[str] = None,
                 custom_properties: Optional[Mapping[str, str]] = None,
                 hostname_configurations: Optional[Sequence['outputs.HostnameConfigurationResponse']] = None,
                 vpn_type: Optional[str] = None,
                 vpnconfiguration: Optional['outputs.VirtualNetworkConfigurationResponse'] = None):
        """
        Properties of an API Management service resource description.
        :param str created_at_utc: Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        :param str management_api_url: Management API endpoint URL of the API Management service.
        :param str portal_url: Publisher portal endpoint Url of the API Management service.
        :param str provisioning_state: The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
        :param str publisher_email: Publisher email.
        :param str publisher_name: Publisher name.
        :param str runtime_url: Proxy endpoint URL of the API Management service.
        :param str scm_url: SCM endpoint URL of the API Management service.
        :param Sequence[str] static_ips: Static IP addresses of the API Management service virtual machines. Available only for Standard and Premium SKU.
        :param str target_provisioning_state: The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
        :param Sequence['AdditionalRegionResponse'] additional_locations: Additional datacenter locations of the API Management service.
        :param str addresser_email: Addresser email.
        :param Mapping[str, str] custom_properties: Custom properties of the API Management service, like disabling TLS 1.0.
        :param Sequence['HostnameConfigurationResponse'] hostname_configurations: Custom hostname configuration of the API Management service.
        :param str vpn_type: The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
        :param 'VirtualNetworkConfigurationResponse' vpnconfiguration: Virtual network configuration of the API Management service.
        """
        pulumi.set(__self__, "created_at_utc", created_at_utc)
        pulumi.set(__self__, "management_api_url", management_api_url)
        pulumi.set(__self__, "portal_url", portal_url)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "publisher_email", publisher_email)
        pulumi.set(__self__, "publisher_name", publisher_name)
        pulumi.set(__self__, "runtime_url", runtime_url)
        pulumi.set(__self__, "scm_url", scm_url)
        pulumi.set(__self__, "static_ips", static_ips)
        pulumi.set(__self__, "target_provisioning_state", target_provisioning_state)
        if additional_locations is not None:
            pulumi.set(__self__, "additional_locations", additional_locations)
        if addresser_email is not None:
            pulumi.set(__self__, "addresser_email", addresser_email)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if hostname_configurations is not None:
            pulumi.set(__self__, "hostname_configurations", hostname_configurations)
        if vpn_type is None:
            vpn_type = 'None'
        if vpn_type is not None:
            pulumi.set(__self__, "vpn_type", vpn_type)
        if vpnconfiguration is not None:
            pulumi.set(__self__, "vpnconfiguration", vpnconfiguration)

    @property
    @pulumi.getter(name="createdAtUtc")
    def created_at_utc(self) -> str:
        """
        Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        """
        return pulumi.get(self, "created_at_utc")

    @property
    @pulumi.getter(name="managementApiUrl")
    def management_api_url(self) -> str:
        """
        Management API endpoint URL of the API Management service.
        """
        return pulumi.get(self, "management_api_url")

    @property
    @pulumi.getter(name="portalUrl")
    def portal_url(self) -> str:
        """
        Publisher portal endpoint Url of the API Management service.
        """
        return pulumi.get(self, "portal_url")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="publisherEmail")
    def publisher_email(self) -> str:
        """
        Publisher email.
        """
        return pulumi.get(self, "publisher_email")

    @property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> str:
        """
        Publisher name.
        """
        return pulumi.get(self, "publisher_name")

    @property
    @pulumi.getter(name="runtimeUrl")
    def runtime_url(self) -> str:
        """
        Proxy endpoint URL of the API Management service.
        """
        return pulumi.get(self, "runtime_url")

    @property
    @pulumi.getter(name="scmUrl")
    def scm_url(self) -> str:
        """
        SCM endpoint URL of the API Management service.
        """
        return pulumi.get(self, "scm_url")

    @property
    @pulumi.getter(name="staticIPs")
    def static_ips(self) -> Sequence[str]:
        """
        Static IP addresses of the API Management service virtual machines. Available only for Standard and Premium SKU.
        """
        return pulumi.get(self, "static_ips")

    @property
    @pulumi.getter(name="targetProvisioningState")
    def target_provisioning_state(self) -> str:
        """
        The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
        """
        return pulumi.get(self, "target_provisioning_state")

    @property
    @pulumi.getter(name="additionalLocations")
    def additional_locations(self) -> Optional[Sequence['outputs.AdditionalRegionResponse']]:
        """
        Additional datacenter locations of the API Management service.
        """
        return pulumi.get(self, "additional_locations")

    @property
    @pulumi.getter(name="addresserEmail")
    def addresser_email(self) -> Optional[str]:
        """
        Addresser email.
        """
        return pulumi.get(self, "addresser_email")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[Mapping[str, str]]:
        """
        Custom properties of the API Management service, like disabling TLS 1.0.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter(name="hostnameConfigurations")
    def hostname_configurations(self) -> Optional[Sequence['outputs.HostnameConfigurationResponse']]:
        """
        Custom hostname configuration of the API Management service.
        """
        return pulumi.get(self, "hostname_configurations")

    @property
    @pulumi.getter(name="vpnType")
    def vpn_type(self) -> Optional[str]:
        """
        The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
        """
        return pulumi.get(self, "vpn_type")

    @property
    @pulumi.getter
    def vpnconfiguration(self) -> Optional['outputs.VirtualNetworkConfigurationResponse']:
        """
        Virtual network configuration of the API Management service.
        """
        return pulumi.get(self, "vpnconfiguration")


@pulumi.output_type
class ApiManagementServiceSkuPropertiesResponse(dict):
    """
    API Management service resource SKU properties.
    """
    def __init__(__self__, *,
                 name: str,
                 capacity: Optional[int] = None):
        """
        API Management service resource SKU properties.
        :param str name: Name of the Sku.
        :param int capacity: Capacity of the SKU (number of deployed units of the SKU). The default value is 1.
        """
        pulumi.set(__self__, "name", name)
        if capacity is None:
            capacity = 1
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Sku.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        Capacity of the SKU (number of deployed units of the SKU). The default value is 1.
        """
        return pulumi.get(self, "capacity")


@pulumi.output_type
class CertificateInformationResponse(dict):
    """
    SSL certificate information.
    """
    def __init__(__self__, *,
                 expiry: str,
                 subject: str,
                 thumbprint: str):
        """
        SSL certificate information.
        :param str expiry: Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        :param str subject: Subject of the certificate.
        :param str thumbprint: Thumbprint of the certificate.
        """
        pulumi.set(__self__, "expiry", expiry)
        pulumi.set(__self__, "subject", subject)
        pulumi.set(__self__, "thumbprint", thumbprint)

    @property
    @pulumi.getter
    def expiry(self) -> str:
        """
        Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        """
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        Subject of the certificate.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        Thumbprint of the certificate.
        """
        return pulumi.get(self, "thumbprint")


@pulumi.output_type
class HostnameConfigurationResponse(dict):
    """
    Custom hostname configuration.
    """
    def __init__(__self__, *,
                 certificate: 'outputs.CertificateInformationResponse',
                 hostname: str,
                 type: str):
        """
        Custom hostname configuration.
        :param 'CertificateInformationResponse' certificate: Certificate information.
        :param str hostname: Hostname.
        :param str type: Hostname type.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def certificate(self) -> 'outputs.CertificateInformationResponse':
        """
        Certificate information.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Hostname.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Hostname type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualNetworkConfigurationResponse(dict):
    """
    Configuration of a virtual network to which API Management service is deployed.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetResourceId":
            suggest = "subnet_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnetname: str,
                 vnetid: str,
                 location: Optional[str] = None,
                 subnet_resource_id: Optional[str] = None):
        """
        Configuration of a virtual network to which API Management service is deployed.
        :param str subnetname: The name of the subnet.
        :param str vnetid: The virtual network ID. This is typically a GUID. Expect a null GUID by default.
        :param str location: The location of the virtual network.
        :param str subnet_resource_id: The full resource ID of a subnet in a virtual network to deploy the API Management service in.
        """
        pulumi.set(__self__, "subnetname", subnetname)
        pulumi.set(__self__, "vnetid", vnetid)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if subnet_resource_id is not None:
            pulumi.set(__self__, "subnet_resource_id", subnet_resource_id)

    @property
    @pulumi.getter
    def subnetname(self) -> str:
        """
        The name of the subnet.
        """
        return pulumi.get(self, "subnetname")

    @property
    @pulumi.getter
    def vnetid(self) -> str:
        """
        The virtual network ID. This is typically a GUID. Expect a null GUID by default.
        """
        return pulumi.get(self, "vnetid")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The location of the virtual network.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="subnetResourceId")
    def subnet_resource_id(self) -> Optional[str]:
        """
        The full resource ID of a subnet in a virtual network to deploy the API Management service in.
        """
        return pulumi.get(self, "subnet_resource_id")


