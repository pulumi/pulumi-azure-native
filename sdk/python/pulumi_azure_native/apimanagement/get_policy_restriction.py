# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPolicyRestrictionResult',
    'AwaitableGetPolicyRestrictionResult',
    'get_policy_restriction',
    'get_policy_restriction_output',
]

@pulumi.output_type
class GetPolicyRestrictionResult:
    """
    Policy restriction contract details.
    """
    def __init__(__self__, id=None, name=None, require_base=None, scope=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if require_base and not isinstance(require_base, str):
            raise TypeError("Expected argument 'require_base' to be a str")
        pulumi.set(__self__, "require_base", require_base)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requireBase")
    def require_base(self) -> Optional[str]:
        """
        Indicates if base policy should be enforced for the policy document.
        """
        return pulumi.get(self, "require_base")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        Path to the policy document.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetPolicyRestrictionResult(GetPolicyRestrictionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyRestrictionResult(
            id=self.id,
            name=self.name,
            require_base=self.require_base,
            scope=self.scope,
            type=self.type)


def get_policy_restriction(policy_restriction_id: Optional[str] = None,
                           resource_group_name: Optional[str] = None,
                           service_name: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyRestrictionResult:
    """
    Get the policy restriction of the Api Management service.
    Azure REST API version: 2023-05-01-preview.


    :param str policy_restriction_id: Policy restrictions after an entity level
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str service_name: The name of the API Management service.
    """
    __args__ = dict()
    __args__['policyRestrictionId'] = policy_restriction_id
    __args__['resourceGroupName'] = resource_group_name
    __args__['serviceName'] = service_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:apimanagement:getPolicyRestriction', __args__, opts=opts, typ=GetPolicyRestrictionResult).value

    return AwaitableGetPolicyRestrictionResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        require_base=pulumi.get(__ret__, 'require_base'),
        scope=pulumi.get(__ret__, 'scope'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_policy_restriction)
def get_policy_restriction_output(policy_restriction_id: Optional[pulumi.Input[str]] = None,
                                  resource_group_name: Optional[pulumi.Input[str]] = None,
                                  service_name: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyRestrictionResult]:
    """
    Get the policy restriction of the Api Management service.
    Azure REST API version: 2023-05-01-preview.


    :param str policy_restriction_id: Policy restrictions after an entity level
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str service_name: The name of the API Management service.
    """
    ...
