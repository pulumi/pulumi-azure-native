# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'BodyDiagnosticSettingsResponse',
    'HttpMessageDiagnosticResponse',
    'PipelineDiagnosticSettingsResponse',
    'SamplingSettingsResponse',
]

@pulumi.output_type
class BodyDiagnosticSettingsResponse(dict):
    """
    Body logging settings.
    """
    def __init__(__self__, *,
                 bytes: Optional[int] = None):
        """
        Body logging settings.
        :param int bytes: Number of request body bytes to log.
        """
        BodyDiagnosticSettingsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bytes=bytes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bytes: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bytes is not None:
            _setter("bytes", bytes)

    @property
    @pulumi.getter
    def bytes(self) -> Optional[int]:
        """
        Number of request body bytes to log.
        """
        return pulumi.get(self, "bytes")


@pulumi.output_type
class HttpMessageDiagnosticResponse(dict):
    """
    Http message diagnostic settings.
    """
    def __init__(__self__, *,
                 body: Optional['outputs.BodyDiagnosticSettingsResponse'] = None,
                 headers: Optional[Sequence[str]] = None):
        """
        Http message diagnostic settings.
        :param 'BodyDiagnosticSettingsResponse' body: Body logging settings.
        :param Sequence[str] headers: Array of HTTP Headers to log.
        """
        HttpMessageDiagnosticResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body=body,
            headers=headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body: Optional['outputs.BodyDiagnosticSettingsResponse'] = None,
             headers: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if body is not None:
            _setter("body", body)
        if headers is not None:
            _setter("headers", headers)

    @property
    @pulumi.getter
    def body(self) -> Optional['outputs.BodyDiagnosticSettingsResponse']:
        """
        Body logging settings.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        """
        Array of HTTP Headers to log.
        """
        return pulumi.get(self, "headers")


@pulumi.output_type
class PipelineDiagnosticSettingsResponse(dict):
    """
    Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
    """
    def __init__(__self__, *,
                 request: Optional['outputs.HttpMessageDiagnosticResponse'] = None,
                 response: Optional['outputs.HttpMessageDiagnosticResponse'] = None):
        """
        Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
        :param 'HttpMessageDiagnosticResponse' request: Diagnostic settings for request.
        :param 'HttpMessageDiagnosticResponse' response: Diagnostic settings for response.
        """
        PipelineDiagnosticSettingsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            request=request,
            response=response,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             request: Optional['outputs.HttpMessageDiagnosticResponse'] = None,
             response: Optional['outputs.HttpMessageDiagnosticResponse'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if request is not None:
            _setter("request", request)
        if response is not None:
            _setter("response", response)

    @property
    @pulumi.getter
    def request(self) -> Optional['outputs.HttpMessageDiagnosticResponse']:
        """
        Diagnostic settings for request.
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.HttpMessageDiagnosticResponse']:
        """
        Diagnostic settings for response.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class SamplingSettingsResponse(dict):
    """
    Sampling settings for Diagnostic.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "samplingType":
            suggest = "sampling_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SamplingSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SamplingSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SamplingSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 percentage: Optional[float] = None,
                 sampling_type: Optional[str] = None):
        """
        Sampling settings for Diagnostic.
        :param float percentage: Rate of sampling for fixed-rate sampling.
        :param str sampling_type: Sampling type.
        """
        SamplingSettingsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            percentage=percentage,
            sampling_type=sampling_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             percentage: Optional[float] = None,
             sampling_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if percentage is not None:
            _setter("percentage", percentage)
        if sampling_type is not None:
            _setter("sampling_type", sampling_type)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[float]:
        """
        Rate of sampling for fixed-rate sampling.
        """
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter(name="samplingType")
    def sampling_type(self) -> Optional[str]:
        """
        Sampling type.
        """
        return pulumi.get(self, "sampling_type")


