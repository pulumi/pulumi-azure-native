# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'BodyDiagnosticSettingsArgs',
    'HttpMessageDiagnosticArgs',
    'PipelineDiagnosticSettingsArgs',
    'SamplingSettingsArgs',
]

@pulumi.input_type
class BodyDiagnosticSettingsArgs:
    def __init__(__self__, *,
                 bytes: Optional[pulumi.Input[int]] = None):
        """
        Body logging settings.
        :param pulumi.Input[int] bytes: Number of request body bytes to log.
        """
        if bytes is not None:
            pulumi.set(__self__, "bytes", bytes)

    @property
    @pulumi.getter
    def bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Number of request body bytes to log.
        """
        return pulumi.get(self, "bytes")

    @bytes.setter
    def bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bytes", value)


@pulumi.input_type
class HttpMessageDiagnosticArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input['BodyDiagnosticSettingsArgs']] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Http message diagnostic settings.
        :param pulumi.Input['BodyDiagnosticSettingsArgs'] body: Body logging settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] headers: Array of HTTP Headers to log.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input['BodyDiagnosticSettingsArgs']]:
        """
        Body logging settings.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input['BodyDiagnosticSettingsArgs']]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of HTTP Headers to log.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class PipelineDiagnosticSettingsArgs:
    def __init__(__self__, *,
                 request: Optional[pulumi.Input['HttpMessageDiagnosticArgs']] = None,
                 response: Optional[pulumi.Input['HttpMessageDiagnosticArgs']] = None):
        """
        Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
        :param pulumi.Input['HttpMessageDiagnosticArgs'] request: Diagnostic settings for request.
        :param pulumi.Input['HttpMessageDiagnosticArgs'] response: Diagnostic settings for response.
        """
        if request is not None:
            pulumi.set(__self__, "request", request)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['HttpMessageDiagnosticArgs']]:
        """
        Diagnostic settings for request.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['HttpMessageDiagnosticArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['HttpMessageDiagnosticArgs']]:
        """
        Diagnostic settings for response.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['HttpMessageDiagnosticArgs']]):
        pulumi.set(self, "response", value)


@pulumi.input_type
class SamplingSettingsArgs:
    def __init__(__self__, *,
                 percentage: Optional[pulumi.Input[float]] = None,
                 sampling_type: Optional[pulumi.Input[Union[str, 'SamplingType']]] = None):
        """
        Sampling settings for Diagnostic.
        :param pulumi.Input[float] percentage: Rate of sampling for fixed-rate sampling.
        :param pulumi.Input[Union[str, 'SamplingType']] sampling_type: Sampling type.
        """
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if sampling_type is not None:
            pulumi.set(__self__, "sampling_type", sampling_type)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Rate of sampling for fixed-rate sampling.
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percentage", value)

    @property
    @pulumi.getter(name="samplingType")
    def sampling_type(self) -> Optional[pulumi.Input[Union[str, 'SamplingType']]]:
        """
        Sampling type.
        """
        return pulumi.get(self, "sampling_type")

    @sampling_type.setter
    def sampling_type(self, value: Optional[pulumi.Input[Union[str, 'SamplingType']]]):
        pulumi.set(self, "sampling_type", value)


