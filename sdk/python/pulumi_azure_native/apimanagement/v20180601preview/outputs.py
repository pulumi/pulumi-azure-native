# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ApiVersionSetContractDetailsResponse',
    'AuthenticationSettingsContractResponse',
    'OAuth2AuthenticationSettingsContractResponse',
    'OpenIdAuthenticationSettingsContractResponse',
    'SubscriptionKeyParameterNamesContractResponse',
]

@pulumi.output_type
class ApiVersionSetContractDetailsResponse(dict):
    """
    An API Version Set contains the common configuration for a set of API Versions relating 
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionHeaderName":
            suggest = "version_header_name"
        elif key == "versionQueryName":
            suggest = "version_query_name"
        elif key == "versioningScheme":
            suggest = "versioning_scheme"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiVersionSetContractDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiVersionSetContractDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiVersionSetContractDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 version_header_name: Optional[str] = None,
                 version_query_name: Optional[str] = None,
                 versioning_scheme: Optional[str] = None):
        """
        An API Version Set contains the common configuration for a set of API Versions relating 
        :param str description: Description of API Version Set.
        :param str id: Identifier for existing API Version Set. Omit this value to create a new Version Set.
        :param str version_header_name: Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
        :param str version_query_name: Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
        :param str versioning_scheme: An value that determines where the API Version identifier will be located in a HTTP request.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if version_header_name is not None:
            pulumi.set(__self__, "version_header_name", version_header_name)
        if version_query_name is not None:
            pulumi.set(__self__, "version_query_name", version_query_name)
        if versioning_scheme is not None:
            pulumi.set(__self__, "versioning_scheme", versioning_scheme)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of API Version Set.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Identifier for existing API Version Set. Omit this value to create a new Version Set.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="versionHeaderName")
    def version_header_name(self) -> Optional[str]:
        """
        Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
        """
        return pulumi.get(self, "version_header_name")

    @property
    @pulumi.getter(name="versionQueryName")
    def version_query_name(self) -> Optional[str]:
        """
        Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
        """
        return pulumi.get(self, "version_query_name")

    @property
    @pulumi.getter(name="versioningScheme")
    def versioning_scheme(self) -> Optional[str]:
        """
        An value that determines where the API Version identifier will be located in a HTTP request.
        """
        return pulumi.get(self, "versioning_scheme")


@pulumi.output_type
class AuthenticationSettingsContractResponse(dict):
    """
    API Authentication Settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "oAuth2":
            suggest = "o_auth2"
        elif key == "subscriptionKeyRequired":
            suggest = "subscription_key_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthenticationSettingsContractResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthenticationSettingsContractResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthenticationSettingsContractResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 o_auth2: Optional['outputs.OAuth2AuthenticationSettingsContractResponse'] = None,
                 openid: Optional['outputs.OpenIdAuthenticationSettingsContractResponse'] = None,
                 subscription_key_required: Optional[bool] = None):
        """
        API Authentication Settings.
        :param 'OAuth2AuthenticationSettingsContractResponse' o_auth2: OAuth2 Authentication settings
        :param 'OpenIdAuthenticationSettingsContractResponse' openid: OpenID Connect Authentication Settings
        :param bool subscription_key_required: Specifies whether subscription key is required during call to this API, true - API is included into closed products only, false - API is included into open products alone, null - there is a mix of products.
        """
        if o_auth2 is not None:
            pulumi.set(__self__, "o_auth2", o_auth2)
        if openid is not None:
            pulumi.set(__self__, "openid", openid)
        if subscription_key_required is not None:
            pulumi.set(__self__, "subscription_key_required", subscription_key_required)

    @property
    @pulumi.getter(name="oAuth2")
    def o_auth2(self) -> Optional['outputs.OAuth2AuthenticationSettingsContractResponse']:
        """
        OAuth2 Authentication settings
        """
        return pulumi.get(self, "o_auth2")

    @property
    @pulumi.getter
    def openid(self) -> Optional['outputs.OpenIdAuthenticationSettingsContractResponse']:
        """
        OpenID Connect Authentication Settings
        """
        return pulumi.get(self, "openid")

    @property
    @pulumi.getter(name="subscriptionKeyRequired")
    def subscription_key_required(self) -> Optional[bool]:
        """
        Specifies whether subscription key is required during call to this API, true - API is included into closed products only, false - API is included into open products alone, null - there is a mix of products.
        """
        return pulumi.get(self, "subscription_key_required")


@pulumi.output_type
class OAuth2AuthenticationSettingsContractResponse(dict):
    """
    API OAuth2 Authentication settings details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationServerId":
            suggest = "authorization_server_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OAuth2AuthenticationSettingsContractResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OAuth2AuthenticationSettingsContractResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OAuth2AuthenticationSettingsContractResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_server_id: Optional[str] = None,
                 scope: Optional[str] = None):
        """
        API OAuth2 Authentication settings details.
        :param str authorization_server_id: OAuth authorization server identifier.
        :param str scope: operations scope.
        """
        if authorization_server_id is not None:
            pulumi.set(__self__, "authorization_server_id", authorization_server_id)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="authorizationServerId")
    def authorization_server_id(self) -> Optional[str]:
        """
        OAuth authorization server identifier.
        """
        return pulumi.get(self, "authorization_server_id")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        operations scope.
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class OpenIdAuthenticationSettingsContractResponse(dict):
    """
    API OAuth2 Authentication settings details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bearerTokenSendingMethods":
            suggest = "bearer_token_sending_methods"
        elif key == "openidProviderId":
            suggest = "openid_provider_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpenIdAuthenticationSettingsContractResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpenIdAuthenticationSettingsContractResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpenIdAuthenticationSettingsContractResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bearer_token_sending_methods: Optional[Sequence[str]] = None,
                 openid_provider_id: Optional[str] = None):
        """
        API OAuth2 Authentication settings details.
        :param Sequence[str] bearer_token_sending_methods: How to send token to the server.
        :param str openid_provider_id: OAuth authorization server identifier.
        """
        if bearer_token_sending_methods is not None:
            pulumi.set(__self__, "bearer_token_sending_methods", bearer_token_sending_methods)
        if openid_provider_id is not None:
            pulumi.set(__self__, "openid_provider_id", openid_provider_id)

    @property
    @pulumi.getter(name="bearerTokenSendingMethods")
    def bearer_token_sending_methods(self) -> Optional[Sequence[str]]:
        """
        How to send token to the server.
        """
        return pulumi.get(self, "bearer_token_sending_methods")

    @property
    @pulumi.getter(name="openidProviderId")
    def openid_provider_id(self) -> Optional[str]:
        """
        OAuth authorization server identifier.
        """
        return pulumi.get(self, "openid_provider_id")


@pulumi.output_type
class SubscriptionKeyParameterNamesContractResponse(dict):
    """
    Subscription key parameter names details.
    """
    def __init__(__self__, *,
                 header: Optional[str] = None,
                 query: Optional[str] = None):
        """
        Subscription key parameter names details.
        :param str header: Subscription key header name.
        :param str query: Subscription key query string parameter name.
        """
        if header is not None:
            pulumi.set(__self__, "header", header)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Subscription key header name.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        """
        Subscription key query string parameter name.
        """
        return pulumi.get(self, "query")


