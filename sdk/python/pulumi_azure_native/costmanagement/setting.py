# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Setting']


class Setting(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsPropertiesCacheArgs']]]]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 setting_name: Optional[pulumi.Input[str]] = None,
                 start_on: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        State of the myscope setting.
        API Version: 2019-11-01.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsPropertiesCacheArgs']]]] cache: Array of scopes with additional details used by Cost Management in the Azure portal.
        :param pulumi.Input[str] scope: Sets the default scope the current user will see when they sign into Azure Cost Management in the Azure portal.
        :param pulumi.Input[str] setting_name: Name of the setting. Allowed values: myscope
        :param pulumi.Input[str] start_on: Indicates what scope Cost Management in the Azure portal should default to. Allowed values: LastUsed.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['cache'] = cache
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__['scope'] = scope
            __props__['setting_name'] = setting_name
            __props__['start_on'] = start_on
            __props__['kind'] = None
            __props__['name'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-nextgen:costmanagement:Setting"), pulumi.Alias(type_="azure-native:costmanagement/v20191101:Setting"), pulumi.Alias(type_="azure-nextgen:costmanagement/v20191101:Setting")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Setting, __self__).__init__(
            'azure-native:costmanagement:Setting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Setting':
        """
        Get an existing Setting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["cache"] = None
        __props__["kind"] = None
        __props__["name"] = None
        __props__["scope"] = None
        __props__["start_on"] = None
        __props__["type"] = None
        return Setting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cache(self) -> pulumi.Output[Optional[Sequence['outputs.SettingsPropertiesResponseCache']]]:
        """
        Array of scopes with additional details used by Cost Management in the Azure portal.
        """
        return pulumi.get(self, "cache")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        """
        Resource kind.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[str]:
        """
        Sets the default scope the current user will see when they sign into Azure Cost Management in the Azure portal.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="startOn")
    def start_on(self) -> pulumi.Output[Optional[str]]:
        """
        Indicates what scope Cost Management in the Azure portal should default to. Allowed values: LastUsed.
        """
        return pulumi.get(self, "start_on")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

