# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'BudgetComparisonExpressionResponse',
    'BudgetFilterPropertiesResponse',
    'BudgetFilterResponse',
    'BudgetTimePeriodResponse',
    'CurrentSpendResponse',
    'ForecastSpendResponse',
    'NotificationResponse',
]

@pulumi.output_type
class BudgetComparisonExpressionResponse(dict):
    """
    The comparison expression to be used in the budgets.
    """
    def __init__(__self__, *,
                 name: str,
                 operator: str,
                 values: Sequence[str]):
        """
        The comparison expression to be used in the budgets.
        :param str name: The name of the column to use in comparison.
        :param str operator: The operator to use for comparison.
        :param Sequence[str] values: Array of values to use for comparison
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the column to use in comparison.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator to use for comparison.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Array of values to use for comparison
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class BudgetFilterPropertiesResponse(dict):
    """
    The Dimensions or Tags to filter a budget by.

     Supported for CategoryType(s): Cost, ReservationUtilization.
    """
    def __init__(__self__, *,
                 dimensions: Optional['outputs.BudgetComparisonExpressionResponse'] = None,
                 tags: Optional['outputs.BudgetComparisonExpressionResponse'] = None):
        """
        The Dimensions or Tags to filter a budget by.

         Supported for CategoryType(s): Cost, ReservationUtilization.
        :param 'BudgetComparisonExpressionResponse' dimensions: Has comparison expression for a dimension.
               
                Supported for CategoryType(s): Cost, ReservationUtilization.
               
               Supported dimension names for **CategoryType: ReservationUtilization** 
               - ReservationId
               - ReservedResourceType
        :param 'BudgetComparisonExpressionResponse' tags: Has comparison expression for a tag.
               
                Supported for CategoryType(s): Cost.
        """
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional['outputs.BudgetComparisonExpressionResponse']:
        """
        Has comparison expression for a dimension.

         Supported for CategoryType(s): Cost, ReservationUtilization.

        Supported dimension names for **CategoryType: ReservationUtilization** 
        - ReservationId
        - ReservedResourceType
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def tags(self) -> Optional['outputs.BudgetComparisonExpressionResponse']:
        """
        Has comparison expression for a tag.

         Supported for CategoryType(s): Cost.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class BudgetFilterResponse(dict):
    """
    May be used to filter budgets by user-specified dimensions and/or tags.

     Supported for CategoryType(s): Cost, ReservationUtilization.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "and":
            suggest = "and_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BudgetFilterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BudgetFilterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BudgetFilterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 and_: Optional[Sequence['outputs.BudgetFilterPropertiesResponse']] = None,
                 dimensions: Optional['outputs.BudgetComparisonExpressionResponse'] = None,
                 tags: Optional['outputs.BudgetComparisonExpressionResponse'] = None):
        """
        May be used to filter budgets by user-specified dimensions and/or tags.

         Supported for CategoryType(s): Cost, ReservationUtilization.
        :param Sequence['BudgetFilterPropertiesResponse'] and_: The logical "AND" expression. Must have at least 2 items.
               
                Supported for CategoryType(s): Cost.
        :param 'BudgetComparisonExpressionResponse' dimensions: Has comparison expression for a dimension.
               
                Supported for CategoryType(s): Cost, ReservationUtilization.
               
               Supported dimension names for **CategoryType: ReservationUtilization** 
               - ReservationId
               - ReservedResourceType
        :param 'BudgetComparisonExpressionResponse' tags: Has comparison expression for a tag.
               
                Supported for CategoryType(s): Cost.
        """
        if and_ is not None:
            pulumi.set(__self__, "and_", and_)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="and")
    def and_(self) -> Optional[Sequence['outputs.BudgetFilterPropertiesResponse']]:
        """
        The logical "AND" expression. Must have at least 2 items.

         Supported for CategoryType(s): Cost.
        """
        return pulumi.get(self, "and_")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional['outputs.BudgetComparisonExpressionResponse']:
        """
        Has comparison expression for a dimension.

         Supported for CategoryType(s): Cost, ReservationUtilization.

        Supported dimension names for **CategoryType: ReservationUtilization** 
        - ReservationId
        - ReservedResourceType
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def tags(self) -> Optional['outputs.BudgetComparisonExpressionResponse']:
        """
        Has comparison expression for a tag.

         Supported for CategoryType(s): Cost.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class BudgetTimePeriodResponse(dict):
    """
    The time period that defines the active period of the budget. The budget will evaluate data on or after the startDate and will expire on the endDate.

     Supported for CategoryType(s): Cost, ReservationUtilization.

     Required for CategoryType(s): Cost, ReservationUtilization.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startDate":
            suggest = "start_date"
        elif key == "endDate":
            suggest = "end_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BudgetTimePeriodResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BudgetTimePeriodResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BudgetTimePeriodResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_date: str,
                 end_date: Optional[str] = None):
        """
        The time period that defines the active period of the budget. The budget will evaluate data on or after the startDate and will expire on the endDate.

         Supported for CategoryType(s): Cost, ReservationUtilization.

         Required for CategoryType(s): Cost, ReservationUtilization.
        :param str start_date: The start date for the budget.
               
               - Constraints for **CategoryType: Cost** - Must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period.
               
               - Constraints for **CategoryType: ReservationUtilization** - Must be on or after the current date and less than the end date.
        :param str end_date: The end date for the budget.
               
               - Constraints for **CategoryType: Cost** - No constraints. If not provided, we default this to 10 years from the start date.
               
               - Constraints for **CategoryType: ReservationUtilization** - End date cannot be more than 3 years after the start date.
        """
        pulumi.set(__self__, "start_date", start_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        """
        The start date for the budget.

        - Constraints for **CategoryType: Cost** - Must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period.

        - Constraints for **CategoryType: ReservationUtilization** - Must be on or after the current date and less than the end date.
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        """
        The end date for the budget.

        - Constraints for **CategoryType: Cost** - No constraints. If not provided, we default this to 10 years from the start date.

        - Constraints for **CategoryType: ReservationUtilization** - End date cannot be more than 3 years after the start date.
        """
        return pulumi.get(self, "end_date")


@pulumi.output_type
class CurrentSpendResponse(dict):
    """
    The current amount of cost which is being tracked for a budget.

     Supported for CategoryType(s): Cost.
    """
    def __init__(__self__, *,
                 amount: float,
                 unit: str):
        """
        The current amount of cost which is being tracked for a budget.

         Supported for CategoryType(s): Cost.
        :param float amount: The total amount of cost which is being tracked by the budget.
        :param str unit: The unit of measure for the budget amount.
        """
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def amount(self) -> float:
        """
        The total amount of cost which is being tracked by the budget.
        """
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        The unit of measure for the budget amount.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class ForecastSpendResponse(dict):
    """
    The forecasted cost which is being tracked for a budget.

     Supported for CategoryType(s): Cost.
    """
    def __init__(__self__, *,
                 amount: float,
                 unit: str):
        """
        The forecasted cost which is being tracked for a budget.

         Supported for CategoryType(s): Cost.
        :param float amount: The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the budget contains a forecast alert type.
        :param str unit: The unit of measure for the budget amount.
        """
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def amount(self) -> float:
        """
        The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the budget contains a forecast alert type.
        """
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        The unit of measure for the budget amount.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class NotificationResponse(dict):
    """
    The notification associated with a budget.

     Supported for CategoryType(s): Cost, ReservationUtilization.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactEmails":
            suggest = "contact_emails"
        elif key == "contactGroups":
            suggest = "contact_groups"
        elif key == "contactRoles":
            suggest = "contact_roles"
        elif key == "thresholdType":
            suggest = "threshold_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_emails: Sequence[str],
                 enabled: bool,
                 operator: str,
                 threshold: float,
                 contact_groups: Optional[Sequence[str]] = None,
                 contact_roles: Optional[Sequence[str]] = None,
                 frequency: Optional[str] = None,
                 locale: Optional[str] = None,
                 threshold_type: Optional[str] = None):
        """
        The notification associated with a budget.

         Supported for CategoryType(s): Cost, ReservationUtilization.
        :param Sequence[str] contact_emails: Email addresses to send the notification to when the threshold is breached. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
               
                Supported for CategoryType(s): Cost, ReservationUtilization.
        :param bool enabled: The notification is enabled or not.
               
                Supported for CategoryType(s): Cost, ReservationUtilization.
        :param str operator: The comparison operator.
               
                Supported for CategoryType(s): Cost, ReservationUtilization.
               
                Supported operators for **CategoryType: Cost**
               - GreaterThan
               - GreaterThanOrEqualTo
               
                Supported operators for **CategoryType: ReservationUtilization**
               - LessThan
        :param float threshold: Threshold value associated with a notification. It is always percent with a maximum of 2 decimal places.
               
                Supported for CategoryType(s): Cost, ReservationUtilization.
               
                **CategoryType: Cost** - Must be between 0 and 1000. Notification is sent when the cost exceeded the threshold.
               
                **CategoryType: ReservationUtilization** - Must be between 0 and 100. Notification is sent when a reservation has a utilization percentage below the threshold.
        :param Sequence[str] contact_groups: Subscription or Resource Group scopes only. Action groups to send the notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id.
               
                Supported for CategoryType(s): Cost.
        :param Sequence[str] contact_roles: Subscription or Resource Group scopes only. Contact roles to send the notification to when the threshold is breached.
               
                Supported for CategoryType(s): Cost.
        :param str frequency: Frequency of a notification. Represents how long the notification will be silent after triggering an alert for a threshold breach. If not specified, the frequency will be set by default based on the timeGrain (Weekly when timeGrain: Last7Days, Monthly when timeGrain: Last30Days).
               
                Supported for CategoryType(s): ReservationUtilization.
        :param str locale: Language in which the recipient will receive the notification, 
               
                Supported for CategoryType(s): Cost, ReservationUtilization.
        :param str threshold_type: The type of threshold.
               
                Supported for CategoryType(s): Cost.
        """
        pulumi.set(__self__, "contact_emails", contact_emails)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "threshold", threshold)
        if contact_groups is not None:
            pulumi.set(__self__, "contact_groups", contact_groups)
        if contact_roles is not None:
            pulumi.set(__self__, "contact_roles", contact_roles)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if threshold_type is None:
            threshold_type = 'Actual'
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)

    @property
    @pulumi.getter(name="contactEmails")
    def contact_emails(self) -> Sequence[str]:
        """
        Email addresses to send the notification to when the threshold is breached. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.

         Supported for CategoryType(s): Cost, ReservationUtilization.
        """
        return pulumi.get(self, "contact_emails")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        The notification is enabled or not.

         Supported for CategoryType(s): Cost, ReservationUtilization.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The comparison operator.

         Supported for CategoryType(s): Cost, ReservationUtilization.

         Supported operators for **CategoryType: Cost**
        - GreaterThan
        - GreaterThanOrEqualTo

         Supported operators for **CategoryType: ReservationUtilization**
        - LessThan
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        Threshold value associated with a notification. It is always percent with a maximum of 2 decimal places.

         Supported for CategoryType(s): Cost, ReservationUtilization.

         **CategoryType: Cost** - Must be between 0 and 1000. Notification is sent when the cost exceeded the threshold.

         **CategoryType: ReservationUtilization** - Must be between 0 and 100. Notification is sent when a reservation has a utilization percentage below the threshold.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="contactGroups")
    def contact_groups(self) -> Optional[Sequence[str]]:
        """
        Subscription or Resource Group scopes only. Action groups to send the notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id.

         Supported for CategoryType(s): Cost.
        """
        return pulumi.get(self, "contact_groups")

    @property
    @pulumi.getter(name="contactRoles")
    def contact_roles(self) -> Optional[Sequence[str]]:
        """
        Subscription or Resource Group scopes only. Contact roles to send the notification to when the threshold is breached.

         Supported for CategoryType(s): Cost.
        """
        return pulumi.get(self, "contact_roles")

    @property
    @pulumi.getter
    def frequency(self) -> Optional[str]:
        """
        Frequency of a notification. Represents how long the notification will be silent after triggering an alert for a threshold breach. If not specified, the frequency will be set by default based on the timeGrain (Weekly when timeGrain: Last7Days, Monthly when timeGrain: Last30Days).

         Supported for CategoryType(s): ReservationUtilization.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def locale(self) -> Optional[str]:
        """
        Language in which the recipient will receive the notification, 

         Supported for CategoryType(s): Cost, ReservationUtilization.
        """
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[str]:
        """
        The type of threshold.

         Supported for CategoryType(s): Cost.
        """
        return pulumi.get(self, "threshold_type")


