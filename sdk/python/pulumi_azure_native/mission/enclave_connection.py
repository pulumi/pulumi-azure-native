# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = ['EnclaveConnectionArgs', 'EnclaveConnection']

@pulumi.input_type
class EnclaveConnectionArgs:
    def __init__(__self__, *,
                 community_resource_id: pulumi.Input[builtins.str],
                 destination_endpoint_id: pulumi.Input[builtins.str],
                 resource_group_name: pulumi.Input[builtins.str],
                 source_resource_id: pulumi.Input[builtins.str],
                 enclave_connection_name: Optional[pulumi.Input[builtins.str]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 source_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a EnclaveConnection resource.
        :param pulumi.Input[builtins.str] community_resource_id: Community Resource Id.
        :param pulumi.Input[builtins.str] destination_endpoint_id: Destination Endpoint Resource Id.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[builtins.str] source_resource_id: Source Resource Id.
        :param pulumi.Input[builtins.str] enclave_connection_name: The name of the Enclave Connection Resource
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[builtins.str] source_cidr: Source CIDR.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "community_resource_id", community_resource_id)
        pulumi.set(__self__, "destination_endpoint_id", destination_endpoint_id)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "source_resource_id", source_resource_id)
        if enclave_connection_name is not None:
            pulumi.set(__self__, "enclave_connection_name", enclave_connection_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if source_cidr is not None:
            pulumi.set(__self__, "source_cidr", source_cidr)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="communityResourceId")
    def community_resource_id(self) -> pulumi.Input[builtins.str]:
        """
        Community Resource Id.
        """
        return pulumi.get(self, "community_resource_id")

    @community_resource_id.setter
    def community_resource_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "community_resource_id", value)

    @property
    @pulumi.getter(name="destinationEndpointId")
    def destination_endpoint_id(self) -> pulumi.Input[builtins.str]:
        """
        Destination Endpoint Resource Id.
        """
        return pulumi.get(self, "destination_endpoint_id")

    @destination_endpoint_id.setter
    def destination_endpoint_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "destination_endpoint_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> pulumi.Input[builtins.str]:
        """
        Source Resource Id.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="enclaveConnectionName")
    def enclave_connection_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the Enclave Connection Resource
        """
        return pulumi.get(self, "enclave_connection_name")

    @enclave_connection_name.setter
    def enclave_connection_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enclave_connection_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Source CIDR.
        """
        return pulumi.get(self, "source_cidr")

    @source_cidr.setter
    def source_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source_cidr", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("azure-native:mission:EnclaveConnection")
class EnclaveConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 community_resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 destination_endpoint_id: Optional[pulumi.Input[builtins.str]] = None,
                 enclave_connection_name: Optional[pulumi.Input[builtins.str]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 source_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 source_resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        EnclaveConnection Model Resource

        Uses Azure REST API version 2025-05-01-preview.

        Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] community_resource_id: Community Resource Id.
        :param pulumi.Input[builtins.str] destination_endpoint_id: Destination Endpoint Resource Id.
        :param pulumi.Input[builtins.str] enclave_connection_name: The name of the Enclave Connection Resource
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[builtins.str] source_cidr: Source CIDR.
        :param pulumi.Input[builtins.str] source_resource_id: Source Resource Id.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnclaveConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        EnclaveConnection Model Resource

        Uses Azure REST API version 2025-05-01-preview.

        Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.

        :param str resource_name: The name of the resource.
        :param EnclaveConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnclaveConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 community_resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 destination_endpoint_id: Optional[pulumi.Input[builtins.str]] = None,
                 enclave_connection_name: Optional[pulumi.Input[builtins.str]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 source_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 source_resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnclaveConnectionArgs.__new__(EnclaveConnectionArgs)

            if community_resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'community_resource_id'")
            __props__.__dict__["community_resource_id"] = community_resource_id
            if destination_endpoint_id is None and not opts.urn:
                raise TypeError("Missing required property 'destination_endpoint_id'")
            __props__.__dict__["destination_endpoint_id"] = destination_endpoint_id
            __props__.__dict__["enclave_connection_name"] = enclave_connection_name
            __props__.__dict__["location"] = location
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["source_cidr"] = source_cidr
            if source_resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_resource_id'")
            __props__.__dict__["source_resource_id"] = source_resource_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["azure_api_version"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["resource_collection"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:mission/v20240601preview:EnclaveConnection"), pulumi.Alias(type_="azure-native:mission/v20241201preview:EnclaveConnection"), pulumi.Alias(type_="azure-native:mission/v20250501preview:EnclaveConnection")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(EnclaveConnection, __self__).__init__(
            'azure-native:mission:EnclaveConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'EnclaveConnection':
        """
        Get an existing EnclaveConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = EnclaveConnectionArgs.__new__(EnclaveConnectionArgs)

        __props__.__dict__["azure_api_version"] = None
        __props__.__dict__["community_resource_id"] = None
        __props__.__dict__["destination_endpoint_id"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["resource_collection"] = None
        __props__.__dict__["source_cidr"] = None
        __props__.__dict__["source_resource_id"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return EnclaveConnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> pulumi.Output[builtins.str]:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="communityResourceId")
    def community_resource_id(self) -> pulumi.Output[builtins.str]:
        """
        Community Resource Id.
        """
        return pulumi.get(self, "community_resource_id")

    @property
    @pulumi.getter(name="destinationEndpointId")
    def destination_endpoint_id(self) -> pulumi.Output[builtins.str]:
        """
        Destination Endpoint Resource Id.
        """
        return pulumi.get(self, "destination_endpoint_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[builtins.str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[builtins.str]:
        """
        Provisioning State.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceCollection")
    def resource_collection(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        List of resource ids modified by enclave Connections.
        """
        return pulumi.get(self, "resource_collection")

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Source CIDR.
        """
        return pulumi.get(self, "source_cidr")

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> pulumi.Output[builtins.str]:
        """
        Source Resource Id.
        """
        return pulumi.get(self, "source_resource_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        The state of the enclaveConnection.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

