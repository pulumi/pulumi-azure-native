# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEnclaveConnectionResult',
    'AwaitableGetEnclaveConnectionResult',
    'get_enclave_connection',
    'get_enclave_connection_output',
]

@pulumi.output_type
class GetEnclaveConnectionResult:
    """
    EnclaveConnection Model Resource
    """
    def __init__(__self__, azure_api_version=None, community_resource_id=None, destination_endpoint_id=None, id=None, location=None, name=None, provisioning_state=None, resource_collection=None, source_cidr=None, source_resource_id=None, state=None, system_data=None, tags=None, type=None):
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if community_resource_id and not isinstance(community_resource_id, str):
            raise TypeError("Expected argument 'community_resource_id' to be a str")
        pulumi.set(__self__, "community_resource_id", community_resource_id)
        if destination_endpoint_id and not isinstance(destination_endpoint_id, str):
            raise TypeError("Expected argument 'destination_endpoint_id' to be a str")
        pulumi.set(__self__, "destination_endpoint_id", destination_endpoint_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if resource_collection and not isinstance(resource_collection, list):
            raise TypeError("Expected argument 'resource_collection' to be a list")
        pulumi.set(__self__, "resource_collection", resource_collection)
        if source_cidr and not isinstance(source_cidr, str):
            raise TypeError("Expected argument 'source_cidr' to be a str")
        pulumi.set(__self__, "source_cidr", source_cidr)
        if source_resource_id and not isinstance(source_resource_id, str):
            raise TypeError("Expected argument 'source_resource_id' to be a str")
        pulumi.set(__self__, "source_resource_id", source_resource_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> builtins.str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="communityResourceId")
    def community_resource_id(self) -> builtins.str:
        """
        Community Resource Id.
        """
        return pulumi.get(self, "community_resource_id")

    @property
    @pulumi.getter(name="destinationEndpointId")
    def destination_endpoint_id(self) -> builtins.str:
        """
        Destination Endpoint Resource Id.
        """
        return pulumi.get(self, "destination_endpoint_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        Provisioning State.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceCollection")
    def resource_collection(self) -> Sequence[builtins.str]:
        """
        List of resource ids modified by enclave Connections.
        """
        return pulumi.get(self, "resource_collection")

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> Optional[builtins.str]:
        """
        Source CIDR.
        """
        return pulumi.get(self, "source_cidr")

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> builtins.str:
        """
        Source Resource Id.
        """
        return pulumi.get(self, "source_resource_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The state of the enclaveConnection.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetEnclaveConnectionResult(GetEnclaveConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnclaveConnectionResult(
            azure_api_version=self.azure_api_version,
            community_resource_id=self.community_resource_id,
            destination_endpoint_id=self.destination_endpoint_id,
            id=self.id,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            resource_collection=self.resource_collection,
            source_cidr=self.source_cidr,
            source_resource_id=self.source_resource_id,
            state=self.state,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_enclave_connection(enclave_connection_name: Optional[builtins.str] = None,
                           resource_group_name: Optional[builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnclaveConnectionResult:
    """
    Get a EnclaveConnectionResource

    Uses Azure REST API version 2025-05-01-preview.

    Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.


    :param builtins.str enclave_connection_name: The name of the Enclave Connection Resource
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['enclaveConnectionName'] = enclave_connection_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:mission:getEnclaveConnection', __args__, opts=opts, typ=GetEnclaveConnectionResult).value

    return AwaitableGetEnclaveConnectionResult(
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        community_resource_id=pulumi.get(__ret__, 'community_resource_id'),
        destination_endpoint_id=pulumi.get(__ret__, 'destination_endpoint_id'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        resource_collection=pulumi.get(__ret__, 'resource_collection'),
        source_cidr=pulumi.get(__ret__, 'source_cidr'),
        source_resource_id=pulumi.get(__ret__, 'source_resource_id'),
        state=pulumi.get(__ret__, 'state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_enclave_connection_output(enclave_connection_name: Optional[pulumi.Input[builtins.str]] = None,
                                  resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnclaveConnectionResult]:
    """
    Get a EnclaveConnectionResource

    Uses Azure REST API version 2025-05-01-preview.

    Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.


    :param builtins.str enclave_connection_name: The name of the Enclave Connection Resource
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['enclaveConnectionName'] = enclave_connection_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:mission:getEnclaveConnection', __args__, opts=opts, typ=GetEnclaveConnectionResult)
    return __ret__.apply(lambda __response__: GetEnclaveConnectionResult(
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        community_resource_id=pulumi.get(__response__, 'community_resource_id'),
        destination_endpoint_id=pulumi.get(__response__, 'destination_endpoint_id'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        resource_collection=pulumi.get(__response__, 'resource_collection'),
        source_cidr=pulumi.get(__response__, 'source_cidr'),
        source_resource_id=pulumi.get(__response__, 'source_resource_id'),
        state=pulumi.get(__response__, 'state'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
