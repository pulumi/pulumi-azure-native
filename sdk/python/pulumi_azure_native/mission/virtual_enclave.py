# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['VirtualEnclaveArgs', 'VirtualEnclave']

@pulumi.input_type
class VirtualEnclaveArgs:
    def __init__(__self__, *,
                 community_resource_id: pulumi.Input[builtins.str],
                 enclave_virtual_network: pulumi.Input['EnclaveVirtualNetworkModelArgs'],
                 resource_group_name: pulumi.Input[builtins.str],
                 bastion_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enclave_default_settings: Optional[pulumi.Input['EnclaveDefaultSettingsModelArgs']] = None,
                 enclave_role_assignments: Optional[pulumi.Input[Sequence[pulumi.Input['RoleAssignmentItemArgs']]]] = None,
                 governed_service_list: Optional[pulumi.Input[Sequence[pulumi.Input['GovernedServiceItemArgs']]]] = None,
                 identity: Optional[pulumi.Input['ManagedServiceIdentityArgs']] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 maintenance_mode_configuration: Optional[pulumi.Input['MaintenanceModeConfigurationModelArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 virtual_enclave_name: Optional[pulumi.Input[builtins.str]] = None,
                 workload_role_assignments: Optional[pulumi.Input[Sequence[pulumi.Input['RoleAssignmentItemArgs']]]] = None):
        """
        The set of arguments for constructing a VirtualEnclave resource.
        :param pulumi.Input[builtins.str] community_resource_id: Community Resource Id.
        :param pulumi.Input['EnclaveVirtualNetworkModelArgs'] enclave_virtual_network: Virtual Network.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[builtins.bool] bastion_enabled: Deploy Bastion service (True or False).
        :param pulumi.Input['EnclaveDefaultSettingsModelArgs'] enclave_default_settings: Enclave default settings.
        :param pulumi.Input[Sequence[pulumi.Input['RoleAssignmentItemArgs']]] enclave_role_assignments: Enclave role assignments
        :param pulumi.Input[Sequence[pulumi.Input['GovernedServiceItemArgs']]] governed_service_list: Enclave specific policies
        :param pulumi.Input['ManagedServiceIdentityArgs'] identity: The managed service identities assigned to this resource.
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input['MaintenanceModeConfigurationModelArgs'] maintenance_mode_configuration: Maintenance Mode configuration.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        :param pulumi.Input[builtins.str] virtual_enclave_name: The name of the enclaveResource Resource
        :param pulumi.Input[Sequence[pulumi.Input['RoleAssignmentItemArgs']]] workload_role_assignments: Workload role assignments
        """
        pulumi.set(__self__, "community_resource_id", community_resource_id)
        pulumi.set(__self__, "enclave_virtual_network", enclave_virtual_network)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if bastion_enabled is None:
            bastion_enabled = False
        if bastion_enabled is not None:
            pulumi.set(__self__, "bastion_enabled", bastion_enabled)
        if enclave_default_settings is not None:
            pulumi.set(__self__, "enclave_default_settings", enclave_default_settings)
        if enclave_role_assignments is not None:
            pulumi.set(__self__, "enclave_role_assignments", enclave_role_assignments)
        if governed_service_list is not None:
            pulumi.set(__self__, "governed_service_list", governed_service_list)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_mode_configuration is not None:
            pulumi.set(__self__, "maintenance_mode_configuration", maintenance_mode_configuration)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if virtual_enclave_name is not None:
            pulumi.set(__self__, "virtual_enclave_name", virtual_enclave_name)
        if workload_role_assignments is not None:
            pulumi.set(__self__, "workload_role_assignments", workload_role_assignments)

    @property
    @pulumi.getter(name="communityResourceId")
    def community_resource_id(self) -> pulumi.Input[builtins.str]:
        """
        Community Resource Id.
        """
        return pulumi.get(self, "community_resource_id")

    @community_resource_id.setter
    def community_resource_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "community_resource_id", value)

    @property
    @pulumi.getter(name="enclaveVirtualNetwork")
    def enclave_virtual_network(self) -> pulumi.Input['EnclaveVirtualNetworkModelArgs']:
        """
        Virtual Network.
        """
        return pulumi.get(self, "enclave_virtual_network")

    @enclave_virtual_network.setter
    def enclave_virtual_network(self, value: pulumi.Input['EnclaveVirtualNetworkModelArgs']):
        pulumi.set(self, "enclave_virtual_network", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="bastionEnabled")
    def bastion_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Deploy Bastion service (True or False).
        """
        return pulumi.get(self, "bastion_enabled")

    @bastion_enabled.setter
    def bastion_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bastion_enabled", value)

    @property
    @pulumi.getter(name="enclaveDefaultSettings")
    def enclave_default_settings(self) -> Optional[pulumi.Input['EnclaveDefaultSettingsModelArgs']]:
        """
        Enclave default settings.
        """
        return pulumi.get(self, "enclave_default_settings")

    @enclave_default_settings.setter
    def enclave_default_settings(self, value: Optional[pulumi.Input['EnclaveDefaultSettingsModelArgs']]):
        pulumi.set(self, "enclave_default_settings", value)

    @property
    @pulumi.getter(name="enclaveRoleAssignments")
    def enclave_role_assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoleAssignmentItemArgs']]]]:
        """
        Enclave role assignments
        """
        return pulumi.get(self, "enclave_role_assignments")

    @enclave_role_assignments.setter
    def enclave_role_assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoleAssignmentItemArgs']]]]):
        pulumi.set(self, "enclave_role_assignments", value)

    @property
    @pulumi.getter(name="governedServiceList")
    def governed_service_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GovernedServiceItemArgs']]]]:
        """
        Enclave specific policies
        """
        return pulumi.get(self, "governed_service_list")

    @governed_service_list.setter
    def governed_service_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GovernedServiceItemArgs']]]]):
        pulumi.set(self, "governed_service_list", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedServiceIdentityArgs']]:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedServiceIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceModeConfiguration")
    def maintenance_mode_configuration(self) -> Optional[pulumi.Input['MaintenanceModeConfigurationModelArgs']]:
        """
        Maintenance Mode configuration.
        """
        return pulumi.get(self, "maintenance_mode_configuration")

    @maintenance_mode_configuration.setter
    def maintenance_mode_configuration(self, value: Optional[pulumi.Input['MaintenanceModeConfigurationModelArgs']]):
        pulumi.set(self, "maintenance_mode_configuration", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="virtualEnclaveName")
    def virtual_enclave_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the enclaveResource Resource
        """
        return pulumi.get(self, "virtual_enclave_name")

    @virtual_enclave_name.setter
    def virtual_enclave_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "virtual_enclave_name", value)

    @property
    @pulumi.getter(name="workloadRoleAssignments")
    def workload_role_assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoleAssignmentItemArgs']]]]:
        """
        Workload role assignments
        """
        return pulumi.get(self, "workload_role_assignments")

    @workload_role_assignments.setter
    def workload_role_assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoleAssignmentItemArgs']]]]):
        pulumi.set(self, "workload_role_assignments", value)


@pulumi.type_token("azure-native:mission:VirtualEnclave")
class VirtualEnclave(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bastion_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 community_resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 enclave_default_settings: Optional[pulumi.Input[Union['EnclaveDefaultSettingsModelArgs', 'EnclaveDefaultSettingsModelArgsDict']]] = None,
                 enclave_role_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RoleAssignmentItemArgs', 'RoleAssignmentItemArgsDict']]]]] = None,
                 enclave_virtual_network: Optional[pulumi.Input[Union['EnclaveVirtualNetworkModelArgs', 'EnclaveVirtualNetworkModelArgsDict']]] = None,
                 governed_service_list: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GovernedServiceItemArgs', 'GovernedServiceItemArgsDict']]]]] = None,
                 identity: Optional[pulumi.Input[Union['ManagedServiceIdentityArgs', 'ManagedServiceIdentityArgsDict']]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 maintenance_mode_configuration: Optional[pulumi.Input[Union['MaintenanceModeConfigurationModelArgs', 'MaintenanceModeConfigurationModelArgsDict']]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 virtual_enclave_name: Optional[pulumi.Input[builtins.str]] = None,
                 workload_role_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RoleAssignmentItemArgs', 'RoleAssignmentItemArgsDict']]]]] = None,
                 __props__=None):
        """
        Virtual Enclave Model Resource

        Uses Azure REST API version 2025-05-01-preview.

        Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] bastion_enabled: Deploy Bastion service (True or False).
        :param pulumi.Input[builtins.str] community_resource_id: Community Resource Id.
        :param pulumi.Input[Union['EnclaveDefaultSettingsModelArgs', 'EnclaveDefaultSettingsModelArgsDict']] enclave_default_settings: Enclave default settings.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RoleAssignmentItemArgs', 'RoleAssignmentItemArgsDict']]]] enclave_role_assignments: Enclave role assignments
        :param pulumi.Input[Union['EnclaveVirtualNetworkModelArgs', 'EnclaveVirtualNetworkModelArgsDict']] enclave_virtual_network: Virtual Network.
        :param pulumi.Input[Sequence[pulumi.Input[Union['GovernedServiceItemArgs', 'GovernedServiceItemArgsDict']]]] governed_service_list: Enclave specific policies
        :param pulumi.Input[Union['ManagedServiceIdentityArgs', 'ManagedServiceIdentityArgsDict']] identity: The managed service identities assigned to this resource.
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[Union['MaintenanceModeConfigurationModelArgs', 'MaintenanceModeConfigurationModelArgsDict']] maintenance_mode_configuration: Maintenance Mode configuration.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        :param pulumi.Input[builtins.str] virtual_enclave_name: The name of the enclaveResource Resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['RoleAssignmentItemArgs', 'RoleAssignmentItemArgsDict']]]] workload_role_assignments: Workload role assignments
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualEnclaveArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Virtual Enclave Model Resource

        Uses Azure REST API version 2025-05-01-preview.

        Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.

        :param str resource_name: The name of the resource.
        :param VirtualEnclaveArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualEnclaveArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bastion_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 community_resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 enclave_default_settings: Optional[pulumi.Input[Union['EnclaveDefaultSettingsModelArgs', 'EnclaveDefaultSettingsModelArgsDict']]] = None,
                 enclave_role_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RoleAssignmentItemArgs', 'RoleAssignmentItemArgsDict']]]]] = None,
                 enclave_virtual_network: Optional[pulumi.Input[Union['EnclaveVirtualNetworkModelArgs', 'EnclaveVirtualNetworkModelArgsDict']]] = None,
                 governed_service_list: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GovernedServiceItemArgs', 'GovernedServiceItemArgsDict']]]]] = None,
                 identity: Optional[pulumi.Input[Union['ManagedServiceIdentityArgs', 'ManagedServiceIdentityArgsDict']]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 maintenance_mode_configuration: Optional[pulumi.Input[Union['MaintenanceModeConfigurationModelArgs', 'MaintenanceModeConfigurationModelArgsDict']]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 virtual_enclave_name: Optional[pulumi.Input[builtins.str]] = None,
                 workload_role_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RoleAssignmentItemArgs', 'RoleAssignmentItemArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualEnclaveArgs.__new__(VirtualEnclaveArgs)

            if bastion_enabled is None:
                bastion_enabled = False
            __props__.__dict__["bastion_enabled"] = bastion_enabled
            if community_resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'community_resource_id'")
            __props__.__dict__["community_resource_id"] = community_resource_id
            __props__.__dict__["enclave_default_settings"] = enclave_default_settings
            __props__.__dict__["enclave_role_assignments"] = enclave_role_assignments
            if enclave_virtual_network is None and not opts.urn:
                raise TypeError("Missing required property 'enclave_virtual_network'")
            __props__.__dict__["enclave_virtual_network"] = enclave_virtual_network
            __props__.__dict__["governed_service_list"] = governed_service_list
            __props__.__dict__["identity"] = identity
            __props__.__dict__["location"] = location
            __props__.__dict__["maintenance_mode_configuration"] = maintenance_mode_configuration
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["virtual_enclave_name"] = virtual_enclave_name
            __props__.__dict__["workload_role_assignments"] = workload_role_assignments
            __props__.__dict__["azure_api_version"] = None
            __props__.__dict__["enclave_address_spaces"] = None
            __props__.__dict__["managed_on_behalf_of_configuration"] = None
            __props__.__dict__["managed_resource_group_name"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["resource_collection"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:mission/v20240601preview:VirtualEnclave"), pulumi.Alias(type_="azure-native:mission/v20241201preview:VirtualEnclave"), pulumi.Alias(type_="azure-native:mission/v20250501preview:VirtualEnclave")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(VirtualEnclave, __self__).__init__(
            'azure-native:mission:VirtualEnclave',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VirtualEnclave':
        """
        Get an existing VirtualEnclave resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VirtualEnclaveArgs.__new__(VirtualEnclaveArgs)

        __props__.__dict__["azure_api_version"] = None
        __props__.__dict__["bastion_enabled"] = None
        __props__.__dict__["community_resource_id"] = None
        __props__.__dict__["enclave_address_spaces"] = None
        __props__.__dict__["enclave_default_settings"] = None
        __props__.__dict__["enclave_role_assignments"] = None
        __props__.__dict__["enclave_virtual_network"] = None
        __props__.__dict__["governed_service_list"] = None
        __props__.__dict__["identity"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["maintenance_mode_configuration"] = None
        __props__.__dict__["managed_on_behalf_of_configuration"] = None
        __props__.__dict__["managed_resource_group_name"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["resource_collection"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["workload_role_assignments"] = None
        return VirtualEnclave(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> pulumi.Output[builtins.str]:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="bastionEnabled")
    def bastion_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Deploy Bastion service (True or False).
        """
        return pulumi.get(self, "bastion_enabled")

    @property
    @pulumi.getter(name="communityResourceId")
    def community_resource_id(self) -> pulumi.Output[builtins.str]:
        """
        Community Resource Id.
        """
        return pulumi.get(self, "community_resource_id")

    @property
    @pulumi.getter(name="enclaveAddressSpaces")
    def enclave_address_spaces(self) -> pulumi.Output['outputs.EnclaveAddressSpacesModelResponse']:
        """
        Enclave Address Spaces
        """
        return pulumi.get(self, "enclave_address_spaces")

    @property
    @pulumi.getter(name="enclaveDefaultSettings")
    def enclave_default_settings(self) -> pulumi.Output[Optional['outputs.EnclaveDefaultSettingsModelResponse']]:
        """
        Enclave default settings.
        """
        return pulumi.get(self, "enclave_default_settings")

    @property
    @pulumi.getter(name="enclaveRoleAssignments")
    def enclave_role_assignments(self) -> pulumi.Output[Optional[Sequence['outputs.RoleAssignmentItemResponse']]]:
        """
        Enclave role assignments
        """
        return pulumi.get(self, "enclave_role_assignments")

    @property
    @pulumi.getter(name="enclaveVirtualNetwork")
    def enclave_virtual_network(self) -> pulumi.Output['outputs.EnclaveVirtualNetworkModelResponse']:
        """
        Virtual Network.
        """
        return pulumi.get(self, "enclave_virtual_network")

    @property
    @pulumi.getter(name="governedServiceList")
    def governed_service_list(self) -> pulumi.Output[Optional[Sequence['outputs.GovernedServiceItemResponse']]]:
        """
        Enclave specific policies
        """
        return pulumi.get(self, "governed_service_list")

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.ManagedServiceIdentityResponse']]:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[builtins.str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceModeConfiguration")
    def maintenance_mode_configuration(self) -> pulumi.Output[Optional['outputs.MaintenanceModeConfigurationModelResponse']]:
        """
        Maintenance Mode configuration.
        """
        return pulumi.get(self, "maintenance_mode_configuration")

    @property
    @pulumi.getter(name="managedOnBehalfOfConfiguration")
    def managed_on_behalf_of_configuration(self) -> pulumi.Output['outputs.ManagedOnBehalfOfConfigurationResponse']:
        """
        Managed On Behalf Of Configuration.
        """
        return pulumi.get(self, "managed_on_behalf_of_configuration")

    @property
    @pulumi.getter(name="managedResourceGroupName")
    def managed_resource_group_name(self) -> pulumi.Output[builtins.str]:
        """
        Managed resource group name.
        """
        return pulumi.get(self, "managed_resource_group_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[builtins.str]:
        """
        Provisioning State.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceCollection")
    def resource_collection(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        List of resource ids created by Virtual Enclave.
        """
        return pulumi.get(self, "resource_collection")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="workloadRoleAssignments")
    def workload_role_assignments(self) -> pulumi.Output[Optional[Sequence['outputs.RoleAssignmentItemResponse']]]:
        """
        Workload role assignments
        """
        return pulumi.get(self, "workload_role_assignments")

