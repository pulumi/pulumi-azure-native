# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['EnclaveEndpointArgs', 'EnclaveEndpoint']

@pulumi.input_type
class EnclaveEndpointArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[builtins.str],
                 rule_collection: pulumi.Input[Sequence[pulumi.Input['EnclaveEndpointDestinationRuleArgs']]],
                 virtual_enclave_name: pulumi.Input[builtins.str],
                 enclave_endpoint_name: Optional[pulumi.Input[builtins.str]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a EnclaveEndpoint resource.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Sequence[pulumi.Input['EnclaveEndpointDestinationRuleArgs']]] rule_collection: Enclave Endpoint Rule Collection.
        :param pulumi.Input[builtins.str] virtual_enclave_name: The name of the enclaveResource Resource
        :param pulumi.Input[builtins.str] enclave_endpoint_name: The name of the Enclave Endpoint Resource
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "rule_collection", rule_collection)
        pulumi.set(__self__, "virtual_enclave_name", virtual_enclave_name)
        if enclave_endpoint_name is not None:
            pulumi.set(__self__, "enclave_endpoint_name", enclave_endpoint_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="ruleCollection")
    def rule_collection(self) -> pulumi.Input[Sequence[pulumi.Input['EnclaveEndpointDestinationRuleArgs']]]:
        """
        Enclave Endpoint Rule Collection.
        """
        return pulumi.get(self, "rule_collection")

    @rule_collection.setter
    def rule_collection(self, value: pulumi.Input[Sequence[pulumi.Input['EnclaveEndpointDestinationRuleArgs']]]):
        pulumi.set(self, "rule_collection", value)

    @property
    @pulumi.getter(name="virtualEnclaveName")
    def virtual_enclave_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the enclaveResource Resource
        """
        return pulumi.get(self, "virtual_enclave_name")

    @virtual_enclave_name.setter
    def virtual_enclave_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "virtual_enclave_name", value)

    @property
    @pulumi.getter(name="enclaveEndpointName")
    def enclave_endpoint_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the Enclave Endpoint Resource
        """
        return pulumi.get(self, "enclave_endpoint_name")

    @enclave_endpoint_name.setter
    def enclave_endpoint_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enclave_endpoint_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("azure-native:mission:EnclaveEndpoint")
class EnclaveEndpoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enclave_endpoint_name: Optional[pulumi.Input[builtins.str]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 rule_collection: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EnclaveEndpointDestinationRuleArgs', 'EnclaveEndpointDestinationRuleArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 virtual_enclave_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        EnclaveEndpoint Model Resource

        Uses Azure REST API version 2025-05-01-preview.

        Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] enclave_endpoint_name: The name of the Enclave Endpoint Resource
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EnclaveEndpointDestinationRuleArgs', 'EnclaveEndpointDestinationRuleArgsDict']]]] rule_collection: Enclave Endpoint Rule Collection.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        :param pulumi.Input[builtins.str] virtual_enclave_name: The name of the enclaveResource Resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnclaveEndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        EnclaveEndpoint Model Resource

        Uses Azure REST API version 2025-05-01-preview.

        Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.

        :param str resource_name: The name of the resource.
        :param EnclaveEndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnclaveEndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enclave_endpoint_name: Optional[pulumi.Input[builtins.str]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 rule_collection: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EnclaveEndpointDestinationRuleArgs', 'EnclaveEndpointDestinationRuleArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 virtual_enclave_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnclaveEndpointArgs.__new__(EnclaveEndpointArgs)

            __props__.__dict__["enclave_endpoint_name"] = enclave_endpoint_name
            __props__.__dict__["location"] = location
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if rule_collection is None and not opts.urn:
                raise TypeError("Missing required property 'rule_collection'")
            __props__.__dict__["rule_collection"] = rule_collection
            __props__.__dict__["tags"] = tags
            if virtual_enclave_name is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_enclave_name'")
            __props__.__dict__["virtual_enclave_name"] = virtual_enclave_name
            __props__.__dict__["azure_api_version"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["resource_collection"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:mission/v20240601preview:EnclaveEndpoint"), pulumi.Alias(type_="azure-native:mission/v20241201preview:EnclaveEndpoint"), pulumi.Alias(type_="azure-native:mission/v20250501preview:EnclaveEndpoint")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(EnclaveEndpoint, __self__).__init__(
            'azure-native:mission:EnclaveEndpoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'EnclaveEndpoint':
        """
        Get an existing EnclaveEndpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = EnclaveEndpointArgs.__new__(EnclaveEndpointArgs)

        __props__.__dict__["azure_api_version"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["resource_collection"] = None
        __props__.__dict__["rule_collection"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return EnclaveEndpoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> pulumi.Output[builtins.str]:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[builtins.str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[builtins.str]:
        """
        Provisioning State.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceCollection")
    def resource_collection(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        List of resource ids created by community endpoint.
        """
        return pulumi.get(self, "resource_collection")

    @property
    @pulumi.getter(name="ruleCollection")
    def rule_collection(self) -> pulumi.Output[Sequence['outputs.EnclaveEndpointDestinationRuleResponse']]:
        """
        Enclave Endpoint Rule Collection.
        """
        return pulumi.get(self, "rule_collection")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

