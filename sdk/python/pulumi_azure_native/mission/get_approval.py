# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetApprovalResult',
    'AwaitableGetApprovalResult',
    'get_approval',
    'get_approval_output',
]

@pulumi.output_type
class GetApprovalResult:
    """
    Approval Model Resource
    """
    def __init__(__self__, approvers=None, azure_api_version=None, created_at=None, grandparent_resource_id=None, id=None, name=None, parent_resource_id=None, provisioning_state=None, request_metadata=None, state_changed_at=None, system_data=None, ticket_id=None, type=None):
        if approvers and not isinstance(approvers, list):
            raise TypeError("Expected argument 'approvers' to be a list")
        pulumi.set(__self__, "approvers", approvers)
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if grandparent_resource_id and not isinstance(grandparent_resource_id, str):
            raise TypeError("Expected argument 'grandparent_resource_id' to be a str")
        pulumi.set(__self__, "grandparent_resource_id", grandparent_resource_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent_resource_id and not isinstance(parent_resource_id, str):
            raise TypeError("Expected argument 'parent_resource_id' to be a str")
        pulumi.set(__self__, "parent_resource_id", parent_resource_id)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if request_metadata and not isinstance(request_metadata, dict):
            raise TypeError("Expected argument 'request_metadata' to be a dict")
        pulumi.set(__self__, "request_metadata", request_metadata)
        if state_changed_at and not isinstance(state_changed_at, str):
            raise TypeError("Expected argument 'state_changed_at' to be a str")
        pulumi.set(__self__, "state_changed_at", state_changed_at)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if ticket_id and not isinstance(ticket_id, str):
            raise TypeError("Expected argument 'ticket_id' to be a str")
        pulumi.set(__self__, "ticket_id", ticket_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def approvers(self) -> Optional[Sequence['outputs.ApproverResponse']]:
        """
        List of approvers for the approval request
        """
        return pulumi.get(self, "approvers")

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> builtins.str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        Approval request creation time
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="grandparentResourceId")
    def grandparent_resource_id(self) -> Optional[builtins.str]:
        """
        Parameter for optimizing query results
        """
        return pulumi.get(self, "grandparent_resource_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentResourceId")
    def parent_resource_id(self) -> Optional[builtins.str]:
        """
        Parameter for optimizing query results
        """
        return pulumi.get(self, "parent_resource_id")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        Provisioning State.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="requestMetadata")
    def request_metadata(self) -> 'outputs.RequestMetadataResponse':
        """
        Request metadata for the approval request.
        """
        return pulumi.get(self, "request_metadata")

    @property
    @pulumi.getter(name="stateChangedAt")
    def state_changed_at(self) -> Optional[builtins.str]:
        """
        Approval request state change time, time at which approval request state changed from pending to approved or rejected.
        """
        return pulumi.get(self, "state_changed_at")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[builtins.str]:
        """
        Ticket ID for the approval request
        """
        return pulumi.get(self, "ticket_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetApprovalResult(GetApprovalResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApprovalResult(
            approvers=self.approvers,
            azure_api_version=self.azure_api_version,
            created_at=self.created_at,
            grandparent_resource_id=self.grandparent_resource_id,
            id=self.id,
            name=self.name,
            parent_resource_id=self.parent_resource_id,
            provisioning_state=self.provisioning_state,
            request_metadata=self.request_metadata,
            state_changed_at=self.state_changed_at,
            system_data=self.system_data,
            ticket_id=self.ticket_id,
            type=self.type)


def get_approval(approval_name: Optional[builtins.str] = None,
                 resource_uri: Optional[builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApprovalResult:
    """
    Get a ApprovalResource

    Uses Azure REST API version 2025-05-01-preview.

    Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.


    :param builtins.str approval_name: The name of the approvals resource.
    :param builtins.str resource_uri: The fully qualified Azure Resource manager identifier of the resource.
    """
    __args__ = dict()
    __args__['approvalName'] = approval_name
    __args__['resourceUri'] = resource_uri
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:mission:getApproval', __args__, opts=opts, typ=GetApprovalResult).value

    return AwaitableGetApprovalResult(
        approvers=pulumi.get(__ret__, 'approvers'),
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        created_at=pulumi.get(__ret__, 'created_at'),
        grandparent_resource_id=pulumi.get(__ret__, 'grandparent_resource_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        parent_resource_id=pulumi.get(__ret__, 'parent_resource_id'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        request_metadata=pulumi.get(__ret__, 'request_metadata'),
        state_changed_at=pulumi.get(__ret__, 'state_changed_at'),
        system_data=pulumi.get(__ret__, 'system_data'),
        ticket_id=pulumi.get(__ret__, 'ticket_id'),
        type=pulumi.get(__ret__, 'type'))
def get_approval_output(approval_name: Optional[pulumi.Input[builtins.str]] = None,
                        resource_uri: Optional[pulumi.Input[builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApprovalResult]:
    """
    Get a ApprovalResource

    Uses Azure REST API version 2025-05-01-preview.

    Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.


    :param builtins.str approval_name: The name of the approvals resource.
    :param builtins.str resource_uri: The fully qualified Azure Resource manager identifier of the resource.
    """
    __args__ = dict()
    __args__['approvalName'] = approval_name
    __args__['resourceUri'] = resource_uri
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:mission:getApproval', __args__, opts=opts, typ=GetApprovalResult)
    return __ret__.apply(lambda __response__: GetApprovalResult(
        approvers=pulumi.get(__response__, 'approvers'),
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        created_at=pulumi.get(__response__, 'created_at'),
        grandparent_resource_id=pulumi.get(__response__, 'grandparent_resource_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        parent_resource_id=pulumi.get(__response__, 'parent_resource_id'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        request_metadata=pulumi.get(__response__, 'request_metadata'),
        state_changed_at=pulumi.get(__response__, 'state_changed_at'),
        system_data=pulumi.get(__response__, 'system_data'),
        ticket_id=pulumi.get(__response__, 'ticket_id'),
        type=pulumi.get(__response__, 'type')))
