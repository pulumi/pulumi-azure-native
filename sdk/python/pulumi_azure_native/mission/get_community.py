# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCommunityResult',
    'AwaitableGetCommunityResult',
    'get_community',
    'get_community_output',
]

@pulumi.output_type
class GetCommunityResult:
    """
    Community Model Resource
    """
    def __init__(__self__, address_space=None, approval_settings=None, azure_api_version=None, community_role_assignments=None, dns_servers=None, firewall_sku=None, governed_service_list=None, id=None, identity=None, location=None, maintenance_mode_configuration=None, managed_on_behalf_of_configuration=None, managed_resource_group_name=None, name=None, policy_override=None, provisioning_state=None, resource_collection=None, system_data=None, tags=None, type=None):
        if address_space and not isinstance(address_space, str):
            raise TypeError("Expected argument 'address_space' to be a str")
        pulumi.set(__self__, "address_space", address_space)
        if approval_settings and not isinstance(approval_settings, dict):
            raise TypeError("Expected argument 'approval_settings' to be a dict")
        pulumi.set(__self__, "approval_settings", approval_settings)
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if community_role_assignments and not isinstance(community_role_assignments, list):
            raise TypeError("Expected argument 'community_role_assignments' to be a list")
        pulumi.set(__self__, "community_role_assignments", community_role_assignments)
        if dns_servers and not isinstance(dns_servers, list):
            raise TypeError("Expected argument 'dns_servers' to be a list")
        pulumi.set(__self__, "dns_servers", dns_servers)
        if firewall_sku and not isinstance(firewall_sku, str):
            raise TypeError("Expected argument 'firewall_sku' to be a str")
        pulumi.set(__self__, "firewall_sku", firewall_sku)
        if governed_service_list and not isinstance(governed_service_list, list):
            raise TypeError("Expected argument 'governed_service_list' to be a list")
        pulumi.set(__self__, "governed_service_list", governed_service_list)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity and not isinstance(identity, dict):
            raise TypeError("Expected argument 'identity' to be a dict")
        pulumi.set(__self__, "identity", identity)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if maintenance_mode_configuration and not isinstance(maintenance_mode_configuration, dict):
            raise TypeError("Expected argument 'maintenance_mode_configuration' to be a dict")
        pulumi.set(__self__, "maintenance_mode_configuration", maintenance_mode_configuration)
        if managed_on_behalf_of_configuration and not isinstance(managed_on_behalf_of_configuration, dict):
            raise TypeError("Expected argument 'managed_on_behalf_of_configuration' to be a dict")
        pulumi.set(__self__, "managed_on_behalf_of_configuration", managed_on_behalf_of_configuration)
        if managed_resource_group_name and not isinstance(managed_resource_group_name, str):
            raise TypeError("Expected argument 'managed_resource_group_name' to be a str")
        pulumi.set(__self__, "managed_resource_group_name", managed_resource_group_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_override and not isinstance(policy_override, str):
            raise TypeError("Expected argument 'policy_override' to be a str")
        pulumi.set(__self__, "policy_override", policy_override)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if resource_collection and not isinstance(resource_collection, list):
            raise TypeError("Expected argument 'resource_collection' to be a list")
        pulumi.set(__self__, "resource_collection", resource_collection)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="addressSpace")
    def address_space(self) -> Optional[builtins.str]:
        """
        Address Space.
        """
        return pulumi.get(self, "address_space")

    @property
    @pulumi.getter(name="approvalSettings")
    def approval_settings(self) -> Optional['outputs.ApprovalSettingsResponse']:
        """
        Approval requirements for various actions on the community's resources.
        """
        return pulumi.get(self, "approval_settings")

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> builtins.str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="communityRoleAssignments")
    def community_role_assignments(self) -> Optional[Sequence['outputs.RoleAssignmentItemResponse']]:
        """
        Community role assignments
        """
        return pulumi.get(self, "community_role_assignments")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[builtins.str]]:
        """
        DNS Servers.
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="firewallSku")
    def firewall_sku(self) -> Optional[builtins.str]:
        """
        SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
        """
        return pulumi.get(self, "firewall_sku")

    @property
    @pulumi.getter(name="governedServiceList")
    def governed_service_list(self) -> Optional[Sequence['outputs.GovernedServiceItemResponse']]:
        """
        List of services governed by a community.
        """
        return pulumi.get(self, "governed_service_list")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.ManagedServiceIdentityResponse']:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceModeConfiguration")
    def maintenance_mode_configuration(self) -> Optional['outputs.MaintenanceModeConfigurationModelResponse']:
        """
        Maintenance Mode configuration.
        """
        return pulumi.get(self, "maintenance_mode_configuration")

    @property
    @pulumi.getter(name="managedOnBehalfOfConfiguration")
    def managed_on_behalf_of_configuration(self) -> 'outputs.ManagedOnBehalfOfConfigurationResponse':
        """
        Managed On Behalf Of Configuration.
        """
        return pulumi.get(self, "managed_on_behalf_of_configuration")

    @property
    @pulumi.getter(name="managedResourceGroupName")
    def managed_resource_group_name(self) -> builtins.str:
        """
        Managed resource group name.
        """
        return pulumi.get(self, "managed_resource_group_name")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyOverride")
    def policy_override(self) -> Optional[builtins.str]:
        """
        Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
        """
        return pulumi.get(self, "policy_override")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        Provisioning State.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceCollection")
    def resource_collection(self) -> Sequence[builtins.str]:
        """
        List of resource ids created by communities.
        """
        return pulumi.get(self, "resource_collection")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetCommunityResult(GetCommunityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCommunityResult(
            address_space=self.address_space,
            approval_settings=self.approval_settings,
            azure_api_version=self.azure_api_version,
            community_role_assignments=self.community_role_assignments,
            dns_servers=self.dns_servers,
            firewall_sku=self.firewall_sku,
            governed_service_list=self.governed_service_list,
            id=self.id,
            identity=self.identity,
            location=self.location,
            maintenance_mode_configuration=self.maintenance_mode_configuration,
            managed_on_behalf_of_configuration=self.managed_on_behalf_of_configuration,
            managed_resource_group_name=self.managed_resource_group_name,
            name=self.name,
            policy_override=self.policy_override,
            provisioning_state=self.provisioning_state,
            resource_collection=self.resource_collection,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_community(community_name: Optional[builtins.str] = None,
                  resource_group_name: Optional[builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCommunityResult:
    """
    Get a CommunityResource

    Uses Azure REST API version 2025-05-01-preview.

    Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.


    :param builtins.str community_name: The name of the communityResource Resource
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['communityName'] = community_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:mission:getCommunity', __args__, opts=opts, typ=GetCommunityResult).value

    return AwaitableGetCommunityResult(
        address_space=pulumi.get(__ret__, 'address_space'),
        approval_settings=pulumi.get(__ret__, 'approval_settings'),
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        community_role_assignments=pulumi.get(__ret__, 'community_role_assignments'),
        dns_servers=pulumi.get(__ret__, 'dns_servers'),
        firewall_sku=pulumi.get(__ret__, 'firewall_sku'),
        governed_service_list=pulumi.get(__ret__, 'governed_service_list'),
        id=pulumi.get(__ret__, 'id'),
        identity=pulumi.get(__ret__, 'identity'),
        location=pulumi.get(__ret__, 'location'),
        maintenance_mode_configuration=pulumi.get(__ret__, 'maintenance_mode_configuration'),
        managed_on_behalf_of_configuration=pulumi.get(__ret__, 'managed_on_behalf_of_configuration'),
        managed_resource_group_name=pulumi.get(__ret__, 'managed_resource_group_name'),
        name=pulumi.get(__ret__, 'name'),
        policy_override=pulumi.get(__ret__, 'policy_override'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        resource_collection=pulumi.get(__ret__, 'resource_collection'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_community_output(community_name: Optional[pulumi.Input[builtins.str]] = None,
                         resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCommunityResult]:
    """
    Get a CommunityResource

    Uses Azure REST API version 2025-05-01-preview.

    Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.


    :param builtins.str community_name: The name of the communityResource Resource
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['communityName'] = community_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:mission:getCommunity', __args__, opts=opts, typ=GetCommunityResult)
    return __ret__.apply(lambda __response__: GetCommunityResult(
        address_space=pulumi.get(__response__, 'address_space'),
        approval_settings=pulumi.get(__response__, 'approval_settings'),
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        community_role_assignments=pulumi.get(__response__, 'community_role_assignments'),
        dns_servers=pulumi.get(__response__, 'dns_servers'),
        firewall_sku=pulumi.get(__response__, 'firewall_sku'),
        governed_service_list=pulumi.get(__response__, 'governed_service_list'),
        id=pulumi.get(__response__, 'id'),
        identity=pulumi.get(__response__, 'identity'),
        location=pulumi.get(__response__, 'location'),
        maintenance_mode_configuration=pulumi.get(__response__, 'maintenance_mode_configuration'),
        managed_on_behalf_of_configuration=pulumi.get(__response__, 'managed_on_behalf_of_configuration'),
        managed_resource_group_name=pulumi.get(__response__, 'managed_resource_group_name'),
        name=pulumi.get(__response__, 'name'),
        policy_override=pulumi.get(__response__, 'policy_override'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        resource_collection=pulumi.get(__response__, 'resource_collection'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
