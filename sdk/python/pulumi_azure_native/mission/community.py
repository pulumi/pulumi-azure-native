# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['CommunityArgs', 'Community']

@pulumi.input_type
class CommunityArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[builtins.str],
                 address_space: Optional[pulumi.Input[builtins.str]] = None,
                 approval_settings: Optional[pulumi.Input['ApprovalSettingsArgs']] = None,
                 community_name: Optional[pulumi.Input[builtins.str]] = None,
                 community_role_assignments: Optional[pulumi.Input[Sequence[pulumi.Input['RoleAssignmentItemArgs']]]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 firewall_sku: Optional[pulumi.Input[Union[builtins.str, 'FirewallSKU']]] = None,
                 governed_service_list: Optional[pulumi.Input[Sequence[pulumi.Input['GovernedServiceItemArgs']]]] = None,
                 identity: Optional[pulumi.Input['ManagedServiceIdentityArgs']] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 maintenance_mode_configuration: Optional[pulumi.Input['MaintenanceModeConfigurationModelArgs']] = None,
                 policy_override: Optional[pulumi.Input[Union[builtins.str, 'PolicyOverride']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a Community resource.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[builtins.str] address_space: Address Space.
        :param pulumi.Input['ApprovalSettingsArgs'] approval_settings: Approval requirements for various actions on the community's resources.
        :param pulumi.Input[builtins.str] community_name: The name of the communityResource Resource
        :param pulumi.Input[Sequence[pulumi.Input['RoleAssignmentItemArgs']]] community_role_assignments: Community role assignments
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_servers: DNS Servers.
        :param pulumi.Input[Union[builtins.str, 'FirewallSKU']] firewall_sku: SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
        :param pulumi.Input[Sequence[pulumi.Input['GovernedServiceItemArgs']]] governed_service_list: List of services governed by a community.
        :param pulumi.Input['ManagedServiceIdentityArgs'] identity: The managed service identities assigned to this resource.
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input['MaintenanceModeConfigurationModelArgs'] maintenance_mode_configuration: Maintenance Mode configuration.
        :param pulumi.Input[Union[builtins.str, 'PolicyOverride']] policy_override: Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if address_space is not None:
            pulumi.set(__self__, "address_space", address_space)
        if approval_settings is not None:
            pulumi.set(__self__, "approval_settings", approval_settings)
        if community_name is not None:
            pulumi.set(__self__, "community_name", community_name)
        if community_role_assignments is not None:
            pulumi.set(__self__, "community_role_assignments", community_role_assignments)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if firewall_sku is None:
            firewall_sku = 'Standard'
        if firewall_sku is not None:
            pulumi.set(__self__, "firewall_sku", firewall_sku)
        if governed_service_list is not None:
            pulumi.set(__self__, "governed_service_list", governed_service_list)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_mode_configuration is not None:
            pulumi.set(__self__, "maintenance_mode_configuration", maintenance_mode_configuration)
        if policy_override is not None:
            pulumi.set(__self__, "policy_override", policy_override)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="addressSpace")
    def address_space(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Address Space.
        """
        return pulumi.get(self, "address_space")

    @address_space.setter
    def address_space(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address_space", value)

    @property
    @pulumi.getter(name="approvalSettings")
    def approval_settings(self) -> Optional[pulumi.Input['ApprovalSettingsArgs']]:
        """
        Approval requirements for various actions on the community's resources.
        """
        return pulumi.get(self, "approval_settings")

    @approval_settings.setter
    def approval_settings(self, value: Optional[pulumi.Input['ApprovalSettingsArgs']]):
        pulumi.set(self, "approval_settings", value)

    @property
    @pulumi.getter(name="communityName")
    def community_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the communityResource Resource
        """
        return pulumi.get(self, "community_name")

    @community_name.setter
    def community_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "community_name", value)

    @property
    @pulumi.getter(name="communityRoleAssignments")
    def community_role_assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoleAssignmentItemArgs']]]]:
        """
        Community role assignments
        """
        return pulumi.get(self, "community_role_assignments")

    @community_role_assignments.setter
    def community_role_assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoleAssignmentItemArgs']]]]):
        pulumi.set(self, "community_role_assignments", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        DNS Servers.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="firewallSku")
    def firewall_sku(self) -> Optional[pulumi.Input[Union[builtins.str, 'FirewallSKU']]]:
        """
        SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
        """
        return pulumi.get(self, "firewall_sku")

    @firewall_sku.setter
    def firewall_sku(self, value: Optional[pulumi.Input[Union[builtins.str, 'FirewallSKU']]]):
        pulumi.set(self, "firewall_sku", value)

    @property
    @pulumi.getter(name="governedServiceList")
    def governed_service_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GovernedServiceItemArgs']]]]:
        """
        List of services governed by a community.
        """
        return pulumi.get(self, "governed_service_list")

    @governed_service_list.setter
    def governed_service_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GovernedServiceItemArgs']]]]):
        pulumi.set(self, "governed_service_list", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedServiceIdentityArgs']]:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedServiceIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceModeConfiguration")
    def maintenance_mode_configuration(self) -> Optional[pulumi.Input['MaintenanceModeConfigurationModelArgs']]:
        """
        Maintenance Mode configuration.
        """
        return pulumi.get(self, "maintenance_mode_configuration")

    @maintenance_mode_configuration.setter
    def maintenance_mode_configuration(self, value: Optional[pulumi.Input['MaintenanceModeConfigurationModelArgs']]):
        pulumi.set(self, "maintenance_mode_configuration", value)

    @property
    @pulumi.getter(name="policyOverride")
    def policy_override(self) -> Optional[pulumi.Input[Union[builtins.str, 'PolicyOverride']]]:
        """
        Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
        """
        return pulumi.get(self, "policy_override")

    @policy_override.setter
    def policy_override(self, value: Optional[pulumi.Input[Union[builtins.str, 'PolicyOverride']]]):
        pulumi.set(self, "policy_override", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("azure-native:mission:Community")
class Community(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_space: Optional[pulumi.Input[builtins.str]] = None,
                 approval_settings: Optional[pulumi.Input[Union['ApprovalSettingsArgs', 'ApprovalSettingsArgsDict']]] = None,
                 community_name: Optional[pulumi.Input[builtins.str]] = None,
                 community_role_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RoleAssignmentItemArgs', 'RoleAssignmentItemArgsDict']]]]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 firewall_sku: Optional[pulumi.Input[Union[builtins.str, 'FirewallSKU']]] = None,
                 governed_service_list: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GovernedServiceItemArgs', 'GovernedServiceItemArgsDict']]]]] = None,
                 identity: Optional[pulumi.Input[Union['ManagedServiceIdentityArgs', 'ManagedServiceIdentityArgsDict']]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 maintenance_mode_configuration: Optional[pulumi.Input[Union['MaintenanceModeConfigurationModelArgs', 'MaintenanceModeConfigurationModelArgsDict']]] = None,
                 policy_override: Optional[pulumi.Input[Union[builtins.str, 'PolicyOverride']]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Community Model Resource

        Uses Azure REST API version 2025-05-01-preview.

        Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] address_space: Address Space.
        :param pulumi.Input[Union['ApprovalSettingsArgs', 'ApprovalSettingsArgsDict']] approval_settings: Approval requirements for various actions on the community's resources.
        :param pulumi.Input[builtins.str] community_name: The name of the communityResource Resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['RoleAssignmentItemArgs', 'RoleAssignmentItemArgsDict']]]] community_role_assignments: Community role assignments
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_servers: DNS Servers.
        :param pulumi.Input[Union[builtins.str, 'FirewallSKU']] firewall_sku: SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
        :param pulumi.Input[Sequence[pulumi.Input[Union['GovernedServiceItemArgs', 'GovernedServiceItemArgsDict']]]] governed_service_list: List of services governed by a community.
        :param pulumi.Input[Union['ManagedServiceIdentityArgs', 'ManagedServiceIdentityArgsDict']] identity: The managed service identities assigned to this resource.
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[Union['MaintenanceModeConfigurationModelArgs', 'MaintenanceModeConfigurationModelArgsDict']] maintenance_mode_configuration: Maintenance Mode configuration.
        :param pulumi.Input[Union[builtins.str, 'PolicyOverride']] policy_override: Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CommunityArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Community Model Resource

        Uses Azure REST API version 2025-05-01-preview.

        Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.

        :param str resource_name: The name of the resource.
        :param CommunityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CommunityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_space: Optional[pulumi.Input[builtins.str]] = None,
                 approval_settings: Optional[pulumi.Input[Union['ApprovalSettingsArgs', 'ApprovalSettingsArgsDict']]] = None,
                 community_name: Optional[pulumi.Input[builtins.str]] = None,
                 community_role_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RoleAssignmentItemArgs', 'RoleAssignmentItemArgsDict']]]]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 firewall_sku: Optional[pulumi.Input[Union[builtins.str, 'FirewallSKU']]] = None,
                 governed_service_list: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GovernedServiceItemArgs', 'GovernedServiceItemArgsDict']]]]] = None,
                 identity: Optional[pulumi.Input[Union['ManagedServiceIdentityArgs', 'ManagedServiceIdentityArgsDict']]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 maintenance_mode_configuration: Optional[pulumi.Input[Union['MaintenanceModeConfigurationModelArgs', 'MaintenanceModeConfigurationModelArgsDict']]] = None,
                 policy_override: Optional[pulumi.Input[Union[builtins.str, 'PolicyOverride']]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CommunityArgs.__new__(CommunityArgs)

            __props__.__dict__["address_space"] = address_space
            __props__.__dict__["approval_settings"] = approval_settings
            __props__.__dict__["community_name"] = community_name
            __props__.__dict__["community_role_assignments"] = community_role_assignments
            __props__.__dict__["dns_servers"] = dns_servers
            if firewall_sku is None:
                firewall_sku = 'Standard'
            __props__.__dict__["firewall_sku"] = firewall_sku
            __props__.__dict__["governed_service_list"] = governed_service_list
            __props__.__dict__["identity"] = identity
            __props__.__dict__["location"] = location
            __props__.__dict__["maintenance_mode_configuration"] = maintenance_mode_configuration
            __props__.__dict__["policy_override"] = policy_override
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["azure_api_version"] = None
            __props__.__dict__["managed_on_behalf_of_configuration"] = None
            __props__.__dict__["managed_resource_group_name"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["resource_collection"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:mission/v20240601preview:Community"), pulumi.Alias(type_="azure-native:mission/v20241201preview:Community"), pulumi.Alias(type_="azure-native:mission/v20250501preview:Community")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Community, __self__).__init__(
            'azure-native:mission:Community',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Community':
        """
        Get an existing Community resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CommunityArgs.__new__(CommunityArgs)

        __props__.__dict__["address_space"] = None
        __props__.__dict__["approval_settings"] = None
        __props__.__dict__["azure_api_version"] = None
        __props__.__dict__["community_role_assignments"] = None
        __props__.__dict__["dns_servers"] = None
        __props__.__dict__["firewall_sku"] = None
        __props__.__dict__["governed_service_list"] = None
        __props__.__dict__["identity"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["maintenance_mode_configuration"] = None
        __props__.__dict__["managed_on_behalf_of_configuration"] = None
        __props__.__dict__["managed_resource_group_name"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["policy_override"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["resource_collection"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return Community(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addressSpace")
    def address_space(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Address Space.
        """
        return pulumi.get(self, "address_space")

    @property
    @pulumi.getter(name="approvalSettings")
    def approval_settings(self) -> pulumi.Output[Optional['outputs.ApprovalSettingsResponse']]:
        """
        Approval requirements for various actions on the community's resources.
        """
        return pulumi.get(self, "approval_settings")

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> pulumi.Output[builtins.str]:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="communityRoleAssignments")
    def community_role_assignments(self) -> pulumi.Output[Optional[Sequence['outputs.RoleAssignmentItemResponse']]]:
        """
        Community role assignments
        """
        return pulumi.get(self, "community_role_assignments")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        DNS Servers.
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="firewallSku")
    def firewall_sku(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
        """
        return pulumi.get(self, "firewall_sku")

    @property
    @pulumi.getter(name="governedServiceList")
    def governed_service_list(self) -> pulumi.Output[Optional[Sequence['outputs.GovernedServiceItemResponse']]]:
        """
        List of services governed by a community.
        """
        return pulumi.get(self, "governed_service_list")

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.ManagedServiceIdentityResponse']]:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[builtins.str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceModeConfiguration")
    def maintenance_mode_configuration(self) -> pulumi.Output[Optional['outputs.MaintenanceModeConfigurationModelResponse']]:
        """
        Maintenance Mode configuration.
        """
        return pulumi.get(self, "maintenance_mode_configuration")

    @property
    @pulumi.getter(name="managedOnBehalfOfConfiguration")
    def managed_on_behalf_of_configuration(self) -> pulumi.Output['outputs.ManagedOnBehalfOfConfigurationResponse']:
        """
        Managed On Behalf Of Configuration.
        """
        return pulumi.get(self, "managed_on_behalf_of_configuration")

    @property
    @pulumi.getter(name="managedResourceGroupName")
    def managed_resource_group_name(self) -> pulumi.Output[builtins.str]:
        """
        Managed resource group name.
        """
        return pulumi.get(self, "managed_resource_group_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyOverride")
    def policy_override(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
        """
        return pulumi.get(self, "policy_override")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[builtins.str]:
        """
        Provisioning State.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceCollection")
    def resource_collection(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        List of resource ids created by communities.
        """
        return pulumi.get(self, "resource_collection")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

