# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetVirtualEnclaveResult',
    'AwaitableGetVirtualEnclaveResult',
    'get_virtual_enclave',
    'get_virtual_enclave_output',
]

@pulumi.output_type
class GetVirtualEnclaveResult:
    """
    Virtual Enclave Model Resource
    """
    def __init__(__self__, azure_api_version=None, bastion_enabled=None, community_resource_id=None, enclave_address_spaces=None, enclave_default_settings=None, enclave_role_assignments=None, enclave_virtual_network=None, governed_service_list=None, id=None, identity=None, location=None, maintenance_mode_configuration=None, managed_on_behalf_of_configuration=None, managed_resource_group_name=None, name=None, provisioning_state=None, resource_collection=None, system_data=None, tags=None, type=None, workload_role_assignments=None):
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if bastion_enabled and not isinstance(bastion_enabled, bool):
            raise TypeError("Expected argument 'bastion_enabled' to be a bool")
        pulumi.set(__self__, "bastion_enabled", bastion_enabled)
        if community_resource_id and not isinstance(community_resource_id, str):
            raise TypeError("Expected argument 'community_resource_id' to be a str")
        pulumi.set(__self__, "community_resource_id", community_resource_id)
        if enclave_address_spaces and not isinstance(enclave_address_spaces, dict):
            raise TypeError("Expected argument 'enclave_address_spaces' to be a dict")
        pulumi.set(__self__, "enclave_address_spaces", enclave_address_spaces)
        if enclave_default_settings and not isinstance(enclave_default_settings, dict):
            raise TypeError("Expected argument 'enclave_default_settings' to be a dict")
        pulumi.set(__self__, "enclave_default_settings", enclave_default_settings)
        if enclave_role_assignments and not isinstance(enclave_role_assignments, list):
            raise TypeError("Expected argument 'enclave_role_assignments' to be a list")
        pulumi.set(__self__, "enclave_role_assignments", enclave_role_assignments)
        if enclave_virtual_network and not isinstance(enclave_virtual_network, dict):
            raise TypeError("Expected argument 'enclave_virtual_network' to be a dict")
        pulumi.set(__self__, "enclave_virtual_network", enclave_virtual_network)
        if governed_service_list and not isinstance(governed_service_list, list):
            raise TypeError("Expected argument 'governed_service_list' to be a list")
        pulumi.set(__self__, "governed_service_list", governed_service_list)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity and not isinstance(identity, dict):
            raise TypeError("Expected argument 'identity' to be a dict")
        pulumi.set(__self__, "identity", identity)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if maintenance_mode_configuration and not isinstance(maintenance_mode_configuration, dict):
            raise TypeError("Expected argument 'maintenance_mode_configuration' to be a dict")
        pulumi.set(__self__, "maintenance_mode_configuration", maintenance_mode_configuration)
        if managed_on_behalf_of_configuration and not isinstance(managed_on_behalf_of_configuration, dict):
            raise TypeError("Expected argument 'managed_on_behalf_of_configuration' to be a dict")
        pulumi.set(__self__, "managed_on_behalf_of_configuration", managed_on_behalf_of_configuration)
        if managed_resource_group_name and not isinstance(managed_resource_group_name, str):
            raise TypeError("Expected argument 'managed_resource_group_name' to be a str")
        pulumi.set(__self__, "managed_resource_group_name", managed_resource_group_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if resource_collection and not isinstance(resource_collection, list):
            raise TypeError("Expected argument 'resource_collection' to be a list")
        pulumi.set(__self__, "resource_collection", resource_collection)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if workload_role_assignments and not isinstance(workload_role_assignments, list):
            raise TypeError("Expected argument 'workload_role_assignments' to be a list")
        pulumi.set(__self__, "workload_role_assignments", workload_role_assignments)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> builtins.str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="bastionEnabled")
    def bastion_enabled(self) -> Optional[builtins.bool]:
        """
        Deploy Bastion service (True or False).
        """
        return pulumi.get(self, "bastion_enabled")

    @property
    @pulumi.getter(name="communityResourceId")
    def community_resource_id(self) -> builtins.str:
        """
        Community Resource Id.
        """
        return pulumi.get(self, "community_resource_id")

    @property
    @pulumi.getter(name="enclaveAddressSpaces")
    def enclave_address_spaces(self) -> 'outputs.EnclaveAddressSpacesModelResponse':
        """
        Enclave Address Spaces
        """
        return pulumi.get(self, "enclave_address_spaces")

    @property
    @pulumi.getter(name="enclaveDefaultSettings")
    def enclave_default_settings(self) -> Optional['outputs.EnclaveDefaultSettingsModelResponse']:
        """
        Enclave default settings.
        """
        return pulumi.get(self, "enclave_default_settings")

    @property
    @pulumi.getter(name="enclaveRoleAssignments")
    def enclave_role_assignments(self) -> Optional[Sequence['outputs.RoleAssignmentItemResponse']]:
        """
        Enclave role assignments
        """
        return pulumi.get(self, "enclave_role_assignments")

    @property
    @pulumi.getter(name="enclaveVirtualNetwork")
    def enclave_virtual_network(self) -> 'outputs.EnclaveVirtualNetworkModelResponse':
        """
        Virtual Network.
        """
        return pulumi.get(self, "enclave_virtual_network")

    @property
    @pulumi.getter(name="governedServiceList")
    def governed_service_list(self) -> Optional[Sequence['outputs.GovernedServiceItemResponse']]:
        """
        Enclave specific policies
        """
        return pulumi.get(self, "governed_service_list")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.ManagedServiceIdentityResponse']:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceModeConfiguration")
    def maintenance_mode_configuration(self) -> Optional['outputs.MaintenanceModeConfigurationModelResponse']:
        """
        Maintenance Mode configuration.
        """
        return pulumi.get(self, "maintenance_mode_configuration")

    @property
    @pulumi.getter(name="managedOnBehalfOfConfiguration")
    def managed_on_behalf_of_configuration(self) -> 'outputs.ManagedOnBehalfOfConfigurationResponse':
        """
        Managed On Behalf Of Configuration.
        """
        return pulumi.get(self, "managed_on_behalf_of_configuration")

    @property
    @pulumi.getter(name="managedResourceGroupName")
    def managed_resource_group_name(self) -> builtins.str:
        """
        Managed resource group name.
        """
        return pulumi.get(self, "managed_resource_group_name")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        Provisioning State.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceCollection")
    def resource_collection(self) -> Sequence[builtins.str]:
        """
        List of resource ids created by Virtual Enclave.
        """
        return pulumi.get(self, "resource_collection")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="workloadRoleAssignments")
    def workload_role_assignments(self) -> Optional[Sequence['outputs.RoleAssignmentItemResponse']]:
        """
        Workload role assignments
        """
        return pulumi.get(self, "workload_role_assignments")


class AwaitableGetVirtualEnclaveResult(GetVirtualEnclaveResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualEnclaveResult(
            azure_api_version=self.azure_api_version,
            bastion_enabled=self.bastion_enabled,
            community_resource_id=self.community_resource_id,
            enclave_address_spaces=self.enclave_address_spaces,
            enclave_default_settings=self.enclave_default_settings,
            enclave_role_assignments=self.enclave_role_assignments,
            enclave_virtual_network=self.enclave_virtual_network,
            governed_service_list=self.governed_service_list,
            id=self.id,
            identity=self.identity,
            location=self.location,
            maintenance_mode_configuration=self.maintenance_mode_configuration,
            managed_on_behalf_of_configuration=self.managed_on_behalf_of_configuration,
            managed_resource_group_name=self.managed_resource_group_name,
            name=self.name,
            provisioning_state=self.provisioning_state,
            resource_collection=self.resource_collection,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type,
            workload_role_assignments=self.workload_role_assignments)


def get_virtual_enclave(resource_group_name: Optional[builtins.str] = None,
                        virtual_enclave_name: Optional[builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualEnclaveResult:
    """
    Get a EnclaveResource

    Uses Azure REST API version 2025-05-01-preview.

    Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.


    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    :param builtins.str virtual_enclave_name: The name of the enclaveResource Resource
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['virtualEnclaveName'] = virtual_enclave_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:mission:getVirtualEnclave', __args__, opts=opts, typ=GetVirtualEnclaveResult).value

    return AwaitableGetVirtualEnclaveResult(
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        bastion_enabled=pulumi.get(__ret__, 'bastion_enabled'),
        community_resource_id=pulumi.get(__ret__, 'community_resource_id'),
        enclave_address_spaces=pulumi.get(__ret__, 'enclave_address_spaces'),
        enclave_default_settings=pulumi.get(__ret__, 'enclave_default_settings'),
        enclave_role_assignments=pulumi.get(__ret__, 'enclave_role_assignments'),
        enclave_virtual_network=pulumi.get(__ret__, 'enclave_virtual_network'),
        governed_service_list=pulumi.get(__ret__, 'governed_service_list'),
        id=pulumi.get(__ret__, 'id'),
        identity=pulumi.get(__ret__, 'identity'),
        location=pulumi.get(__ret__, 'location'),
        maintenance_mode_configuration=pulumi.get(__ret__, 'maintenance_mode_configuration'),
        managed_on_behalf_of_configuration=pulumi.get(__ret__, 'managed_on_behalf_of_configuration'),
        managed_resource_group_name=pulumi.get(__ret__, 'managed_resource_group_name'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        resource_collection=pulumi.get(__ret__, 'resource_collection'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        workload_role_assignments=pulumi.get(__ret__, 'workload_role_assignments'))
def get_virtual_enclave_output(resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                               virtual_enclave_name: Optional[pulumi.Input[builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVirtualEnclaveResult]:
    """
    Get a EnclaveResource

    Uses Azure REST API version 2025-05-01-preview.

    Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.


    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    :param builtins.str virtual_enclave_name: The name of the enclaveResource Resource
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['virtualEnclaveName'] = virtual_enclave_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:mission:getVirtualEnclave', __args__, opts=opts, typ=GetVirtualEnclaveResult)
    return __ret__.apply(lambda __response__: GetVirtualEnclaveResult(
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        bastion_enabled=pulumi.get(__response__, 'bastion_enabled'),
        community_resource_id=pulumi.get(__response__, 'community_resource_id'),
        enclave_address_spaces=pulumi.get(__response__, 'enclave_address_spaces'),
        enclave_default_settings=pulumi.get(__response__, 'enclave_default_settings'),
        enclave_role_assignments=pulumi.get(__response__, 'enclave_role_assignments'),
        enclave_virtual_network=pulumi.get(__response__, 'enclave_virtual_network'),
        governed_service_list=pulumi.get(__response__, 'governed_service_list'),
        id=pulumi.get(__response__, 'id'),
        identity=pulumi.get(__response__, 'identity'),
        location=pulumi.get(__response__, 'location'),
        maintenance_mode_configuration=pulumi.get(__response__, 'maintenance_mode_configuration'),
        managed_on_behalf_of_configuration=pulumi.get(__response__, 'managed_on_behalf_of_configuration'),
        managed_resource_group_name=pulumi.get(__response__, 'managed_resource_group_name'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        resource_collection=pulumi.get(__response__, 'resource_collection'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        workload_role_assignments=pulumi.get(__response__, 'workload_role_assignments')))
