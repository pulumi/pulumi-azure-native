# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AzureHybridBenefitPropertiesResponse',
    'DatabaseInstancePropertiesResponse',
    'DomainControllerPropertiesResponse',
    'DomainUserCredentialsResponse',
    'GmsaDetailsResponse',
    'LogAnalyticsConfigurationResponse',
    'ManagedGatewayPropertiesResponse',
    'ManagedIdentityResponse',
    'ManagedInstanceOperationStatusResponse',
    'ManagementServerPropertiesResponse',
    'MonitoredResourcePropertiesResponse',
    'MonitoringInstancePropertiesResponse',
    'SystemDataResponse',
    'UserIdentityResponse',
]

@pulumi.output_type
class AzureHybridBenefitPropertiesResponse(dict):
    """
    The properties to maximize savings by using Azure Hybrid Benefit
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scomLicenseType":
            suggest = "scom_license_type"
        elif key == "sqlServerLicenseType":
            suggest = "sql_server_license_type"
        elif key == "windowsServerLicenseType":
            suggest = "windows_server_license_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureHybridBenefitPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureHybridBenefitPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureHybridBenefitPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scom_license_type: Optional[_builtins.str] = None,
                 sql_server_license_type: Optional[_builtins.str] = None,
                 windows_server_license_type: Optional[_builtins.str] = None):
        """
        The properties to maximize savings by using Azure Hybrid Benefit
        :param _builtins.str scom_license_type: SCOM license type. Maximize savings by using license you already own
        :param _builtins.str sql_server_license_type: SQL Server license type. Maximize savings by using Azure Hybrid Benefit for SQL Server with license you already own
        :param _builtins.str windows_server_license_type: Specifies that the image or disk that is being used was licensed on-premises. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
        """
        if scom_license_type is not None:
            pulumi.set(__self__, "scom_license_type", scom_license_type)
        if sql_server_license_type is not None:
            pulumi.set(__self__, "sql_server_license_type", sql_server_license_type)
        if windows_server_license_type is not None:
            pulumi.set(__self__, "windows_server_license_type", windows_server_license_type)

    @_builtins.property
    @pulumi.getter(name="scomLicenseType")
    def scom_license_type(self) -> Optional[_builtins.str]:
        """
        SCOM license type. Maximize savings by using license you already own
        """
        return pulumi.get(self, "scom_license_type")

    @_builtins.property
    @pulumi.getter(name="sqlServerLicenseType")
    def sql_server_license_type(self) -> Optional[_builtins.str]:
        """
        SQL Server license type. Maximize savings by using Azure Hybrid Benefit for SQL Server with license you already own
        """
        return pulumi.get(self, "sql_server_license_type")

    @_builtins.property
    @pulumi.getter(name="windowsServerLicenseType")
    def windows_server_license_type(self) -> Optional[_builtins.str]:
        """
        Specifies that the image or disk that is being used was licensed on-premises. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
        """
        return pulumi.get(self, "windows_server_license_type")


@pulumi.output_type
class DatabaseInstancePropertiesResponse(dict):
    """
    The properties of database instance
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseFqdn":
            suggest = "database_fqdn"
        elif key == "dwDatabaseId":
            suggest = "dw_database_id"
        elif key == "dwDatabaseName":
            suggest = "dw_database_name"
        elif key == "operationalDatabaseId":
            suggest = "operational_database_id"
        elif key == "databaseInstanceId":
            suggest = "database_instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInstancePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInstancePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInstancePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_fqdn: _builtins.str,
                 dw_database_id: _builtins.str,
                 dw_database_name: _builtins.str,
                 operational_database_id: _builtins.str,
                 database_instance_id: Optional[_builtins.str] = None):
        """
        The properties of database instance
        :param _builtins.str database_fqdn: Fully qualified domain name of existing database instance
        :param _builtins.str dw_database_id: Resource Id of warehouse database on database instance
        :param _builtins.str dw_database_name: Name of warehouse database on database instance
        :param _builtins.str operational_database_id: Resource Id of operational database on database instance
        :param _builtins.str database_instance_id: Resource Id of existing database instance
        """
        pulumi.set(__self__, "database_fqdn", database_fqdn)
        pulumi.set(__self__, "dw_database_id", dw_database_id)
        pulumi.set(__self__, "dw_database_name", dw_database_name)
        pulumi.set(__self__, "operational_database_id", operational_database_id)
        if database_instance_id is not None:
            pulumi.set(__self__, "database_instance_id", database_instance_id)

    @_builtins.property
    @pulumi.getter(name="databaseFqdn")
    def database_fqdn(self) -> _builtins.str:
        """
        Fully qualified domain name of existing database instance
        """
        return pulumi.get(self, "database_fqdn")

    @_builtins.property
    @pulumi.getter(name="dwDatabaseId")
    def dw_database_id(self) -> _builtins.str:
        """
        Resource Id of warehouse database on database instance
        """
        return pulumi.get(self, "dw_database_id")

    @_builtins.property
    @pulumi.getter(name="dwDatabaseName")
    def dw_database_name(self) -> _builtins.str:
        """
        Name of warehouse database on database instance
        """
        return pulumi.get(self, "dw_database_name")

    @_builtins.property
    @pulumi.getter(name="operationalDatabaseId")
    def operational_database_id(self) -> _builtins.str:
        """
        Resource Id of operational database on database instance
        """
        return pulumi.get(self, "operational_database_id")

    @_builtins.property
    @pulumi.getter(name="databaseInstanceId")
    def database_instance_id(self) -> Optional[_builtins.str]:
        """
        Resource Id of existing database instance
        """
        return pulumi.get(self, "database_instance_id")


@pulumi.output_type
class DomainControllerPropertiesResponse(dict):
    """
    The properties of domain controller to which SCOM and SQL servers join for AuthN/AuthZ.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServer":
            suggest = "dns_server"
        elif key == "domainName":
            suggest = "domain_name"
        elif key == "ouPath":
            suggest = "ou_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainControllerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainControllerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainControllerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_server: Optional[_builtins.str] = None,
                 domain_name: Optional[_builtins.str] = None,
                 ou_path: Optional[_builtins.str] = None):
        """
        The properties of domain controller to which SCOM and SQL servers join for AuthN/AuthZ.
        :param _builtins.str dns_server: IP address of DNS server 
        :param _builtins.str domain_name: Fully qualified domain name
        :param _builtins.str ou_path: Organizational Unit path in which the SCOM servers will be present
        """
        if dns_server is not None:
            pulumi.set(__self__, "dns_server", dns_server)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if ou_path is None:
            ou_path = ''
        if ou_path is not None:
            pulumi.set(__self__, "ou_path", ou_path)

    @_builtins.property
    @pulumi.getter(name="dnsServer")
    def dns_server(self) -> Optional[_builtins.str]:
        """
        IP address of DNS server 
        """
        return pulumi.get(self, "dns_server")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[_builtins.str]:
        """
        Fully qualified domain name
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="ouPath")
    def ou_path(self) -> Optional[_builtins.str]:
        """
        Organizational Unit path in which the SCOM servers will be present
        """
        return pulumi.get(self, "ou_path")


@pulumi.output_type
class DomainUserCredentialsResponse(dict):
    """
    Get Domain user name and password from key vault
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyVaultUrl":
            suggest = "key_vault_url"
        elif key == "passwordSecret":
            suggest = "password_secret"
        elif key == "userNameSecret":
            suggest = "user_name_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainUserCredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainUserCredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainUserCredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_vault_url: Optional[_builtins.str] = None,
                 password_secret: Optional[_builtins.str] = None,
                 user_name_secret: Optional[_builtins.str] = None):
        """
        Get Domain user name and password from key vault
        :param _builtins.str key_vault_url: Key vault url to get the domain username and password
        :param _builtins.str password_secret: Domain Password secret 
        :param _builtins.str user_name_secret: Domain user name secret 
        """
        if key_vault_url is not None:
            pulumi.set(__self__, "key_vault_url", key_vault_url)
        if password_secret is not None:
            pulumi.set(__self__, "password_secret", password_secret)
        if user_name_secret is not None:
            pulumi.set(__self__, "user_name_secret", user_name_secret)

    @_builtins.property
    @pulumi.getter(name="keyVaultUrl")
    def key_vault_url(self) -> Optional[_builtins.str]:
        """
        Key vault url to get the domain username and password
        """
        return pulumi.get(self, "key_vault_url")

    @_builtins.property
    @pulumi.getter(name="passwordSecret")
    def password_secret(self) -> Optional[_builtins.str]:
        """
        Domain Password secret 
        """
        return pulumi.get(self, "password_secret")

    @_builtins.property
    @pulumi.getter(name="userNameSecret")
    def user_name_secret(self) -> Optional[_builtins.str]:
        """
        Domain user name secret 
        """
        return pulumi.get(self, "user_name_secret")


@pulumi.output_type
class GmsaDetailsResponse(dict):
    """
    Gmsa Details
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsName":
            suggest = "dns_name"
        elif key == "gmsaAccount":
            suggest = "gmsa_account"
        elif key == "loadBalancerIP":
            suggest = "load_balancer_ip"
        elif key == "managementServerGroupName":
            suggest = "management_server_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GmsaDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GmsaDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GmsaDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_name: Optional[_builtins.str] = None,
                 gmsa_account: Optional[_builtins.str] = None,
                 load_balancer_ip: Optional[_builtins.str] = None,
                 management_server_group_name: Optional[_builtins.str] = None):
        """
        Gmsa Details
        :param _builtins.str dns_name: Frontend DNS name for Load Balancer which will be used by Agents to initiate communication
        :param _builtins.str gmsa_account: gMSA account under which context all Management Server services will run
        :param _builtins.str load_balancer_ip: Frontend IP configuration for Load Balancer, which should be an available IP in customer VNet
        :param _builtins.str management_server_group_name: OnPrem AD Computer Group where we will join VMs for ease of management
        """
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if gmsa_account is not None:
            pulumi.set(__self__, "gmsa_account", gmsa_account)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if management_server_group_name is not None:
            pulumi.set(__self__, "management_server_group_name", management_server_group_name)

    @_builtins.property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[_builtins.str]:
        """
        Frontend DNS name for Load Balancer which will be used by Agents to initiate communication
        """
        return pulumi.get(self, "dns_name")

    @_builtins.property
    @pulumi.getter(name="gmsaAccount")
    def gmsa_account(self) -> Optional[_builtins.str]:
        """
        gMSA account under which context all Management Server services will run
        """
        return pulumi.get(self, "gmsa_account")

    @_builtins.property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[_builtins.str]:
        """
        Frontend IP configuration for Load Balancer, which should be an available IP in customer VNet
        """
        return pulumi.get(self, "load_balancer_ip")

    @_builtins.property
    @pulumi.getter(name="managementServerGroupName")
    def management_server_group_name(self) -> Optional[_builtins.str]:
        """
        OnPrem AD Computer Group where we will join VMs for ease of management
        """
        return pulumi.get(self, "management_server_group_name")


@pulumi.output_type
class LogAnalyticsConfigurationResponse(dict):
    """
    Configuration for Log Analytics linking to SCOM managed instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataTypes":
            suggest = "data_types"
        elif key == "importData":
            suggest = "import_data"
        elif key == "workspaceId":
            suggest = "workspace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogAnalyticsConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogAnalyticsConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogAnalyticsConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_types: Optional[Sequence[_builtins.str]] = None,
                 import_data: Optional[_builtins.bool] = None,
                 workspace_id: Optional[_builtins.str] = None):
        """
        Configuration for Log Analytics linking to SCOM managed instance.
        :param Sequence[_builtins.str] data_types: The types of data to be ingested to Log Analytics workspace.
        :param _builtins.bool import_data: A one-time optional parameter to import data of last 7 days.
        :param _builtins.str workspace_id: The resource ID of the Log Analytics workspace to be used.
        """
        if data_types is not None:
            pulumi.set(__self__, "data_types", data_types)
        if import_data is None:
            import_data = False
        if import_data is not None:
            pulumi.set(__self__, "import_data", import_data)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="dataTypes")
    def data_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        The types of data to be ingested to Log Analytics workspace.
        """
        return pulumi.get(self, "data_types")

    @_builtins.property
    @pulumi.getter(name="importData")
    def import_data(self) -> Optional[_builtins.bool]:
        """
        A one-time optional parameter to import data of last 7 days.
        """
        return pulumi.get(self, "import_data")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.str]:
        """
        The resource ID of the Log Analytics workspace to be used.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class ManagedGatewayPropertiesResponse(dict):
    """
    The properties of a gateway resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionStatus":
            suggest = "connection_status"
        elif key == "healthStatus":
            suggest = "health_status"
        elif key == "installType":
            suggest = "install_type"
        elif key == "managementServerEndpoint":
            suggest = "management_server_endpoint"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "computerName":
            suggest = "computer_name"
        elif key == "domainName":
            suggest = "domain_name"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceLocation":
            suggest = "resource_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedGatewayPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedGatewayPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedGatewayPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_status: _builtins.str,
                 health_status: _builtins.str,
                 install_type: _builtins.str,
                 management_server_endpoint: _builtins.str,
                 provisioning_state: _builtins.str,
                 version: _builtins.str,
                 computer_name: Optional[_builtins.str] = None,
                 domain_name: Optional[_builtins.str] = None,
                 resource_id: Optional[_builtins.str] = None,
                 resource_location: Optional[_builtins.str] = None):
        """
        The properties of a gateway resource.
        :param _builtins.str connection_status: The connection status of the gateway resource.
        :param _builtins.str health_status: The health status of the gateway resource.
        :param _builtins.str install_type: Install type of gateway resource.
        :param _builtins.str management_server_endpoint: The management server endpoint to which the gateway is directed.
        :param _builtins.str version: The version of the gateway resource.
        :param _builtins.str computer_name: ComputerName of the gateway to be monitored.
        :param _builtins.str domain_name: The domain name associated with the gateway to be monitored.
        :param _builtins.str resource_id: ArmId of the gateway to be monitored.
        :param _builtins.str resource_location: Location of the gateway to be monitored.
        """
        pulumi.set(__self__, "connection_status", connection_status)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "install_type", install_type)
        pulumi.set(__self__, "management_server_endpoint", management_server_endpoint)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "version", version)
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_location is not None:
            pulumi.set(__self__, "resource_location", resource_location)

    @_builtins.property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> _builtins.str:
        """
        The connection status of the gateway resource.
        """
        return pulumi.get(self, "connection_status")

    @_builtins.property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> _builtins.str:
        """
        The health status of the gateway resource.
        """
        return pulumi.get(self, "health_status")

    @_builtins.property
    @pulumi.getter(name="installType")
    def install_type(self) -> _builtins.str:
        """
        Install type of gateway resource.
        """
        return pulumi.get(self, "install_type")

    @_builtins.property
    @pulumi.getter(name="managementServerEndpoint")
    def management_server_endpoint(self) -> _builtins.str:
        """
        The management server endpoint to which the gateway is directed.
        """
        return pulumi.get(self, "management_server_endpoint")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the gateway resource.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[_builtins.str]:
        """
        ComputerName of the gateway to be monitored.
        """
        return pulumi.get(self, "computer_name")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[_builtins.str]:
        """
        The domain name associated with the gateway to be monitored.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        ArmId of the gateway to be monitored.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceLocation")
    def resource_location(self) -> Optional[_builtins.str]:
        """
        Location of the gateway to be monitored.
        """
        return pulumi.get(self, "resource_location")


@pulumi.output_type
class ManagedIdentityResponse(dict):
    """
    Azure Active Directory identity configuration for a resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: Optional[_builtins.str] = None,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserIdentityResponse']] = None):
        """
        Azure Active Directory identity configuration for a resource.
        :param _builtins.str principal_id: System Assigned Identity ObjectId.
        :param _builtins.str tenant_id: The Azure Active Directory tenant id.
        :param _builtins.str type: The identity type
        :param Mapping[str, 'UserIdentityResponse'] user_assigned_identities: The resource ids of the user assigned identities to use
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        System Assigned Identity ObjectId.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The Azure Active Directory tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The identity type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserIdentityResponse']]:
        """
        The resource ids of the user assigned identities to use
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class ManagedInstanceOperationStatusResponse(dict):
    """
    Gets status of current and latest SCOM managed instance operation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationName":
            suggest = "operation_name"
        elif key == "operationState":
            suggest = "operation_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceOperationStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceOperationStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceOperationStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 operation_name: _builtins.str,
                 operation_state: _builtins.str):
        """
        Gets status of current and latest SCOM managed instance operation.
        :param _builtins.str id: Operation id
        :param _builtins.str operation_name: Operation Name
        :param _builtins.str operation_state: Operation status
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "operation_state", operation_state)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Operation id
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> _builtins.str:
        """
        Operation Name
        """
        return pulumi.get(self, "operation_name")

    @_builtins.property
    @pulumi.getter(name="operationState")
    def operation_state(self) -> _builtins.str:
        """
        Operation status
        """
        return pulumi.get(self, "operation_state")


@pulumi.output_type
class ManagementServerPropertiesResponse(dict):
    """
    The properties of management server
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthState":
            suggest = "health_state"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "serverRoles":
            suggest = "server_roles"
        elif key == "vmResId":
            suggest = "vm_res_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementServerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementServerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementServerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: _builtins.str,
                 health_state: _builtins.str,
                 server_name: _builtins.str,
                 server_roles: _builtins.str,
                 vm_res_id: _builtins.str):
        """
        The properties of management server
        :param _builtins.str fqdn: Management server Fully Qualified Domain Name.
        :param _builtins.str health_state: Management server health state.
        :param _builtins.str server_name: Management server Name
        :param _builtins.str server_roles: Represent whether the Server is a Management Server and/or Web Console Server.
        :param _builtins.str vm_res_id: Azure VM Resource Id of the Management server.
        """
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "health_state", health_state)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "server_roles", server_roles)
        pulumi.set(__self__, "vm_res_id", vm_res_id)

    @_builtins.property
    @pulumi.getter
    def fqdn(self) -> _builtins.str:
        """
        Management server Fully Qualified Domain Name.
        """
        return pulumi.get(self, "fqdn")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> _builtins.str:
        """
        Management server health state.
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter(name="serverName")
    def server_name(self) -> _builtins.str:
        """
        Management server Name
        """
        return pulumi.get(self, "server_name")

    @_builtins.property
    @pulumi.getter(name="serverRoles")
    def server_roles(self) -> _builtins.str:
        """
        Represent whether the Server is a Management Server and/or Web Console Server.
        """
        return pulumi.get(self, "server_roles")

    @_builtins.property
    @pulumi.getter(name="vmResId")
    def vm_res_id(self) -> _builtins.str:
        """
        Azure VM Resource Id of the Management server.
        """
        return pulumi.get(self, "vm_res_id")


@pulumi.output_type
class MonitoredResourcePropertiesResponse(dict):
    """
    The properties of a monitored resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentVersion":
            suggest = "agent_version"
        elif key == "connectionStatus":
            suggest = "connection_status"
        elif key == "healthStatus":
            suggest = "health_status"
        elif key == "installType":
            suggest = "install_type"
        elif key == "managementServerEndpoint":
            suggest = "management_server_endpoint"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "computerName":
            suggest = "computer_name"
        elif key == "domainName":
            suggest = "domain_name"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceLocation":
            suggest = "resource_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_version: _builtins.str,
                 connection_status: _builtins.str,
                 health_status: _builtins.str,
                 install_type: _builtins.str,
                 management_server_endpoint: _builtins.str,
                 provisioning_state: _builtins.str,
                 computer_name: Optional[_builtins.str] = None,
                 domain_name: Optional[_builtins.str] = None,
                 resource_id: Optional[_builtins.str] = None,
                 resource_location: Optional[_builtins.str] = None):
        """
        The properties of a monitored resource.
        :param _builtins.str agent_version: The version of the monitored resource agent version.
        :param _builtins.str connection_status: The connection status of the monitored resource.
        :param _builtins.str health_status: The health status of the monitored resource.
        :param _builtins.str install_type: Install type of monitored resource.
        :param _builtins.str management_server_endpoint: The management server endpoint to which the monitored resource is directed.
        :param _builtins.str computer_name: ComputerName of the monitored resource.
        :param _builtins.str domain_name: The domain name associated with the monitored resource.
        :param _builtins.str resource_id: ArmId of the monitored resource.
        :param _builtins.str resource_location: Location of the monitored resource.
        """
        pulumi.set(__self__, "agent_version", agent_version)
        pulumi.set(__self__, "connection_status", connection_status)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "install_type", install_type)
        pulumi.set(__self__, "management_server_endpoint", management_server_endpoint)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_location is not None:
            pulumi.set(__self__, "resource_location", resource_location)

    @_builtins.property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> _builtins.str:
        """
        The version of the monitored resource agent version.
        """
        return pulumi.get(self, "agent_version")

    @_builtins.property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> _builtins.str:
        """
        The connection status of the monitored resource.
        """
        return pulumi.get(self, "connection_status")

    @_builtins.property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> _builtins.str:
        """
        The health status of the monitored resource.
        """
        return pulumi.get(self, "health_status")

    @_builtins.property
    @pulumi.getter(name="installType")
    def install_type(self) -> _builtins.str:
        """
        Install type of monitored resource.
        """
        return pulumi.get(self, "install_type")

    @_builtins.property
    @pulumi.getter(name="managementServerEndpoint")
    def management_server_endpoint(self) -> _builtins.str:
        """
        The management server endpoint to which the monitored resource is directed.
        """
        return pulumi.get(self, "management_server_endpoint")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[_builtins.str]:
        """
        ComputerName of the monitored resource.
        """
        return pulumi.get(self, "computer_name")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[_builtins.str]:
        """
        The domain name associated with the monitored resource.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        ArmId of the monitored resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceLocation")
    def resource_location(self) -> Optional[_builtins.str]:
        """
        Location of the monitored resource.
        """
        return pulumi.get(self, "resource_location")


@pulumi.output_type
class MonitoringInstancePropertiesResponse(dict):
    """
    The properties of a SCOM instance resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logAnalyticsProperties":
            suggest = "log_analytics_properties"
        elif key == "managementEndpoints":
            suggest = "management_endpoints"
        elif key == "operationsStatus":
            suggest = "operations_status"
        elif key == "productVersion":
            suggest = "product_version"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "azureHybridBenefit":
            suggest = "azure_hybrid_benefit"
        elif key == "databaseInstance":
            suggest = "database_instance"
        elif key == "domainController":
            suggest = "domain_controller"
        elif key == "domainUserCredentials":
            suggest = "domain_user_credentials"
        elif key == "gmsaDetails":
            suggest = "gmsa_details"
        elif key == "vNetSubnetId":
            suggest = "v_net_subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringInstancePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringInstancePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringInstancePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_analytics_properties: 'outputs.LogAnalyticsConfigurationResponse',
                 management_endpoints: Sequence['outputs.ManagementServerPropertiesResponse'],
                 operations_status: Sequence['outputs.ManagedInstanceOperationStatusResponse'],
                 product_version: _builtins.str,
                 provisioning_state: _builtins.str,
                 azure_hybrid_benefit: Optional['outputs.AzureHybridBenefitPropertiesResponse'] = None,
                 database_instance: Optional['outputs.DatabaseInstancePropertiesResponse'] = None,
                 domain_controller: Optional['outputs.DomainControllerPropertiesResponse'] = None,
                 domain_user_credentials: Optional['outputs.DomainUserCredentialsResponse'] = None,
                 gmsa_details: Optional['outputs.GmsaDetailsResponse'] = None,
                 v_net_subnet_id: Optional[_builtins.str] = None):
        """
        The properties of a SCOM instance resource
        :param 'LogAnalyticsConfigurationResponse' log_analytics_properties: Details of Log Analytics workspace and data being ingested.
        :param Sequence['ManagementServerPropertiesResponse'] management_endpoints: List of management server endpoints
        :param Sequence['ManagedInstanceOperationStatusResponse'] operations_status: Gets status of current and latest SCOM managed instance operations.
        :param _builtins.str product_version: SCOM product version to be installed on instance
        :param _builtins.str provisioning_state: Gets or sets the provisioning state.
        :param 'AzureHybridBenefitPropertiesResponse' azure_hybrid_benefit: The properties to enable Azure Hybrid benefit for various SCOM infrastructure license.
        :param 'DatabaseInstancePropertiesResponse' database_instance: The database instance where the SCOM Operational and Warehouse databases will be stored.
        :param 'DomainControllerPropertiesResponse' domain_controller: Domain controller details
        :param 'DomainUserCredentialsResponse' domain_user_credentials: Domain user which will be used to join VMs to domain and login to VMs.
        :param 'GmsaDetailsResponse' gmsa_details: Gmsa Details for load balancer and vmss
        :param _builtins.str v_net_subnet_id: Virtual Network subnet id on which Aquila instance will be provisioned
        """
        pulumi.set(__self__, "log_analytics_properties", log_analytics_properties)
        pulumi.set(__self__, "management_endpoints", management_endpoints)
        pulumi.set(__self__, "operations_status", operations_status)
        pulumi.set(__self__, "product_version", product_version)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if azure_hybrid_benefit is not None:
            pulumi.set(__self__, "azure_hybrid_benefit", azure_hybrid_benefit)
        if database_instance is not None:
            pulumi.set(__self__, "database_instance", database_instance)
        if domain_controller is not None:
            pulumi.set(__self__, "domain_controller", domain_controller)
        if domain_user_credentials is not None:
            pulumi.set(__self__, "domain_user_credentials", domain_user_credentials)
        if gmsa_details is not None:
            pulumi.set(__self__, "gmsa_details", gmsa_details)
        if v_net_subnet_id is not None:
            pulumi.set(__self__, "v_net_subnet_id", v_net_subnet_id)

    @_builtins.property
    @pulumi.getter(name="logAnalyticsProperties")
    def log_analytics_properties(self) -> 'outputs.LogAnalyticsConfigurationResponse':
        """
        Details of Log Analytics workspace and data being ingested.
        """
        return pulumi.get(self, "log_analytics_properties")

    @_builtins.property
    @pulumi.getter(name="managementEndpoints")
    def management_endpoints(self) -> Sequence['outputs.ManagementServerPropertiesResponse']:
        """
        List of management server endpoints
        """
        return pulumi.get(self, "management_endpoints")

    @_builtins.property
    @pulumi.getter(name="operationsStatus")
    def operations_status(self) -> Sequence['outputs.ManagedInstanceOperationStatusResponse']:
        """
        Gets status of current and latest SCOM managed instance operations.
        """
        return pulumi.get(self, "operations_status")

    @_builtins.property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> _builtins.str:
        """
        SCOM product version to be installed on instance
        """
        return pulumi.get(self, "product_version")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Gets or sets the provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="azureHybridBenefit")
    def azure_hybrid_benefit(self) -> Optional['outputs.AzureHybridBenefitPropertiesResponse']:
        """
        The properties to enable Azure Hybrid benefit for various SCOM infrastructure license.
        """
        return pulumi.get(self, "azure_hybrid_benefit")

    @_builtins.property
    @pulumi.getter(name="databaseInstance")
    def database_instance(self) -> Optional['outputs.DatabaseInstancePropertiesResponse']:
        """
        The database instance where the SCOM Operational and Warehouse databases will be stored.
        """
        return pulumi.get(self, "database_instance")

    @_builtins.property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> Optional['outputs.DomainControllerPropertiesResponse']:
        """
        Domain controller details
        """
        return pulumi.get(self, "domain_controller")

    @_builtins.property
    @pulumi.getter(name="domainUserCredentials")
    def domain_user_credentials(self) -> Optional['outputs.DomainUserCredentialsResponse']:
        """
        Domain user which will be used to join VMs to domain and login to VMs.
        """
        return pulumi.get(self, "domain_user_credentials")

    @_builtins.property
    @pulumi.getter(name="gmsaDetails")
    def gmsa_details(self) -> Optional['outputs.GmsaDetailsResponse']:
        """
        Gmsa Details for load balancer and vmss
        """
        return pulumi.get(self, "gmsa_details")

    @_builtins.property
    @pulumi.getter(name="vNetSubnetId")
    def v_net_subnet_id(self) -> Optional[_builtins.str]:
        """
        Virtual Network subnet id on which Aquila instance will be provisioned
        """
        return pulumi.get(self, "v_net_subnet_id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserIdentityResponse(dict):
    """
    Azure Active Directory identity configuration for a resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: _builtins.str,
                 principal_id: _builtins.str):
        """
        Azure Active Directory identity configuration for a resource.
        :param _builtins.str client_id: The Azure Active Directory client id.
        :param _builtins.str principal_id: The Azure Active Directory principal id.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        The Azure Active Directory client id.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The Azure Active Directory principal id.
        """
        return pulumi.get(self, "principal_id")


