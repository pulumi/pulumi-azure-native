# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetAutoExportJobResult',
    'AwaitableGetAutoExportJobResult',
    'get_auto_export_job',
    'get_auto_export_job_output',
]

@pulumi.output_type
class GetAutoExportJobResult:
    """
    An auto export job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
    """
    def __init__(__self__, admin_status=None, auto_export_prefixes=None, current_iteration_files_discovered=None, current_iteration_files_exported=None, current_iteration_files_failed=None, current_iteration_mi_b_discovered=None, current_iteration_mi_b_exported=None, export_iteration_count=None, id=None, last_completion_time_utc=None, last_started_time_utc=None, last_successful_iteration_completion_time_utc=None, location=None, name=None, provisioning_state=None, state=None, status_code=None, status_message=None, system_data=None, tags=None, total_files_exported=None, total_files_failed=None, total_mi_b_exported=None, type=None):
        if admin_status and not isinstance(admin_status, str):
            raise TypeError("Expected argument 'admin_status' to be a str")
        pulumi.set(__self__, "admin_status", admin_status)
        if auto_export_prefixes and not isinstance(auto_export_prefixes, list):
            raise TypeError("Expected argument 'auto_export_prefixes' to be a list")
        pulumi.set(__self__, "auto_export_prefixes", auto_export_prefixes)
        if current_iteration_files_discovered and not isinstance(current_iteration_files_discovered, float):
            raise TypeError("Expected argument 'current_iteration_files_discovered' to be a float")
        pulumi.set(__self__, "current_iteration_files_discovered", current_iteration_files_discovered)
        if current_iteration_files_exported and not isinstance(current_iteration_files_exported, float):
            raise TypeError("Expected argument 'current_iteration_files_exported' to be a float")
        pulumi.set(__self__, "current_iteration_files_exported", current_iteration_files_exported)
        if current_iteration_files_failed and not isinstance(current_iteration_files_failed, float):
            raise TypeError("Expected argument 'current_iteration_files_failed' to be a float")
        pulumi.set(__self__, "current_iteration_files_failed", current_iteration_files_failed)
        if current_iteration_mi_b_discovered and not isinstance(current_iteration_mi_b_discovered, float):
            raise TypeError("Expected argument 'current_iteration_mi_b_discovered' to be a float")
        pulumi.set(__self__, "current_iteration_mi_b_discovered", current_iteration_mi_b_discovered)
        if current_iteration_mi_b_exported and not isinstance(current_iteration_mi_b_exported, float):
            raise TypeError("Expected argument 'current_iteration_mi_b_exported' to be a float")
        pulumi.set(__self__, "current_iteration_mi_b_exported", current_iteration_mi_b_exported)
        if export_iteration_count and not isinstance(export_iteration_count, int):
            raise TypeError("Expected argument 'export_iteration_count' to be a int")
        pulumi.set(__self__, "export_iteration_count", export_iteration_count)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_completion_time_utc and not isinstance(last_completion_time_utc, str):
            raise TypeError("Expected argument 'last_completion_time_utc' to be a str")
        pulumi.set(__self__, "last_completion_time_utc", last_completion_time_utc)
        if last_started_time_utc and not isinstance(last_started_time_utc, str):
            raise TypeError("Expected argument 'last_started_time_utc' to be a str")
        pulumi.set(__self__, "last_started_time_utc", last_started_time_utc)
        if last_successful_iteration_completion_time_utc and not isinstance(last_successful_iteration_completion_time_utc, str):
            raise TypeError("Expected argument 'last_successful_iteration_completion_time_utc' to be a str")
        pulumi.set(__self__, "last_successful_iteration_completion_time_utc", last_successful_iteration_completion_time_utc)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status_code and not isinstance(status_code, str):
            raise TypeError("Expected argument 'status_code' to be a str")
        pulumi.set(__self__, "status_code", status_code)
        if status_message and not isinstance(status_message, str):
            raise TypeError("Expected argument 'status_message' to be a str")
        pulumi.set(__self__, "status_message", status_message)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if total_files_exported and not isinstance(total_files_exported, float):
            raise TypeError("Expected argument 'total_files_exported' to be a float")
        pulumi.set(__self__, "total_files_exported", total_files_exported)
        if total_files_failed and not isinstance(total_files_failed, float):
            raise TypeError("Expected argument 'total_files_failed' to be a float")
        pulumi.set(__self__, "total_files_failed", total_files_failed)
        if total_mi_b_exported and not isinstance(total_mi_b_exported, float):
            raise TypeError("Expected argument 'total_mi_b_exported' to be a float")
        pulumi.set(__self__, "total_mi_b_exported", total_mi_b_exported)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="adminStatus")
    def admin_status(self) -> Optional[str]:
        """
        The administrative status of the auto export job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto export job. By default it is set to 'Enable'.
        """
        return pulumi.get(self, "admin_status")

    @property
    @pulumi.getter(name="autoExportPrefixes")
    def auto_export_prefixes(self) -> Optional[Sequence[str]]:
        """
        An array of blob paths/prefixes that get auto exported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths for now is 1.
        """
        return pulumi.get(self, "auto_export_prefixes")

    @property
    @pulumi.getter(name="currentIterationFilesDiscovered")
    def current_iteration_files_discovered(self) -> float:
        """
        Files discovered for export in current iteration. It may increase while more export items are found.
        """
        return pulumi.get(self, "current_iteration_files_discovered")

    @property
    @pulumi.getter(name="currentIterationFilesExported")
    def current_iteration_files_exported(self) -> float:
        """
        Files that have been exported in current iteration.
        """
        return pulumi.get(self, "current_iteration_files_exported")

    @property
    @pulumi.getter(name="currentIterationFilesFailed")
    def current_iteration_files_failed(self) -> float:
        """
        Files failed to export in current iteration.
        """
        return pulumi.get(self, "current_iteration_files_failed")

    @property
    @pulumi.getter(name="currentIterationMiBDiscovered")
    def current_iteration_mi_b_discovered(self) -> float:
        """
        Data (in MiB) discovered for export in current iteration. It may increase while more export items are found.
        """
        return pulumi.get(self, "current_iteration_mi_b_discovered")

    @property
    @pulumi.getter(name="currentIterationMiBExported")
    def current_iteration_mi_b_exported(self) -> float:
        """
        Data (in MiB) that have been exported in current iteration.
        """
        return pulumi.get(self, "current_iteration_mi_b_exported")

    @property
    @pulumi.getter(name="exportIterationCount")
    def export_iteration_count(self) -> int:
        """
        Number of iterations completed since the start of the export.
        """
        return pulumi.get(self, "export_iteration_count")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastCompletionTimeUTC")
    def last_completion_time_utc(self) -> str:
        """
        The time (in UTC) of the last completed auto export job.
        """
        return pulumi.get(self, "last_completion_time_utc")

    @property
    @pulumi.getter(name="lastStartedTimeUTC")
    def last_started_time_utc(self) -> str:
        """
        The time (in UTC) the latest auto export job started.
        """
        return pulumi.get(self, "last_started_time_utc")

    @property
    @pulumi.getter(name="lastSuccessfulIterationCompletionTimeUTC")
    def last_successful_iteration_completion_time_utc(self) -> str:
        """
        Time (in UTC) of the last successfully completed export iteration. Look at logging container for details.
        """
        return pulumi.get(self, "last_successful_iteration_completion_time_utc")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        ARM provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The operational state of auto export. InProgress indicates the export is running.  Disabling indicates the user has requested to disable the export but the disabling is still in progress. Disabled indicates auto export has been disabled.  DisableFailed indicates the disabling has failed.  Failed means the export was unable to continue, due to a fatal error.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> str:
        """
        Server-defined status code for auto export job.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        """
        Server-defined status message for auto export job.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalFilesExported")
    def total_files_exported(self) -> float:
        """
        Total files exported since the start of the export. This is accumulative, some files may be counted repeatedly.
        """
        return pulumi.get(self, "total_files_exported")

    @property
    @pulumi.getter(name="totalFilesFailed")
    def total_files_failed(self) -> float:
        """
        Total files failed to be export since the last successfully completed iteration. This is accumulative, some files may be counted repeatedly.
        """
        return pulumi.get(self, "total_files_failed")

    @property
    @pulumi.getter(name="totalMiBExported")
    def total_mi_b_exported(self) -> float:
        """
        Total data (in MiB) exported since the start of the export. This is accumulative, some files may be counted repeatedly.
        """
        return pulumi.get(self, "total_mi_b_exported")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetAutoExportJobResult(GetAutoExportJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutoExportJobResult(
            admin_status=self.admin_status,
            auto_export_prefixes=self.auto_export_prefixes,
            current_iteration_files_discovered=self.current_iteration_files_discovered,
            current_iteration_files_exported=self.current_iteration_files_exported,
            current_iteration_files_failed=self.current_iteration_files_failed,
            current_iteration_mi_b_discovered=self.current_iteration_mi_b_discovered,
            current_iteration_mi_b_exported=self.current_iteration_mi_b_exported,
            export_iteration_count=self.export_iteration_count,
            id=self.id,
            last_completion_time_utc=self.last_completion_time_utc,
            last_started_time_utc=self.last_started_time_utc,
            last_successful_iteration_completion_time_utc=self.last_successful_iteration_completion_time_utc,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            state=self.state,
            status_code=self.status_code,
            status_message=self.status_message,
            system_data=self.system_data,
            tags=self.tags,
            total_files_exported=self.total_files_exported,
            total_files_failed=self.total_files_failed,
            total_mi_b_exported=self.total_mi_b_exported,
            type=self.type)


def get_auto_export_job(aml_filesystem_name: Optional[str] = None,
                        auto_export_job_name: Optional[str] = None,
                        resource_group_name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutoExportJobResult:
    """
    Returns an auto export job.


    :param str aml_filesystem_name: Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
    :param str auto_export_job_name: Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['amlFilesystemName'] = aml_filesystem_name
    __args__['autoExportJobName'] = auto_export_job_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:storagecache/v20240701:getAutoExportJob', __args__, opts=opts, typ=GetAutoExportJobResult).value

    return AwaitableGetAutoExportJobResult(
        admin_status=pulumi.get(__ret__, 'admin_status'),
        auto_export_prefixes=pulumi.get(__ret__, 'auto_export_prefixes'),
        current_iteration_files_discovered=pulumi.get(__ret__, 'current_iteration_files_discovered'),
        current_iteration_files_exported=pulumi.get(__ret__, 'current_iteration_files_exported'),
        current_iteration_files_failed=pulumi.get(__ret__, 'current_iteration_files_failed'),
        current_iteration_mi_b_discovered=pulumi.get(__ret__, 'current_iteration_mi_b_discovered'),
        current_iteration_mi_b_exported=pulumi.get(__ret__, 'current_iteration_mi_b_exported'),
        export_iteration_count=pulumi.get(__ret__, 'export_iteration_count'),
        id=pulumi.get(__ret__, 'id'),
        last_completion_time_utc=pulumi.get(__ret__, 'last_completion_time_utc'),
        last_started_time_utc=pulumi.get(__ret__, 'last_started_time_utc'),
        last_successful_iteration_completion_time_utc=pulumi.get(__ret__, 'last_successful_iteration_completion_time_utc'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        state=pulumi.get(__ret__, 'state'),
        status_code=pulumi.get(__ret__, 'status_code'),
        status_message=pulumi.get(__ret__, 'status_message'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        total_files_exported=pulumi.get(__ret__, 'total_files_exported'),
        total_files_failed=pulumi.get(__ret__, 'total_files_failed'),
        total_mi_b_exported=pulumi.get(__ret__, 'total_mi_b_exported'),
        type=pulumi.get(__ret__, 'type'))
def get_auto_export_job_output(aml_filesystem_name: Optional[pulumi.Input[str]] = None,
                               auto_export_job_name: Optional[pulumi.Input[str]] = None,
                               resource_group_name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAutoExportJobResult]:
    """
    Returns an auto export job.


    :param str aml_filesystem_name: Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
    :param str auto_export_job_name: Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['amlFilesystemName'] = aml_filesystem_name
    __args__['autoExportJobName'] = auto_export_job_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:storagecache/v20240701:getAutoExportJob', __args__, opts=opts, typ=GetAutoExportJobResult)
    return __ret__.apply(lambda __response__: GetAutoExportJobResult(
        admin_status=pulumi.get(__response__, 'admin_status'),
        auto_export_prefixes=pulumi.get(__response__, 'auto_export_prefixes'),
        current_iteration_files_discovered=pulumi.get(__response__, 'current_iteration_files_discovered'),
        current_iteration_files_exported=pulumi.get(__response__, 'current_iteration_files_exported'),
        current_iteration_files_failed=pulumi.get(__response__, 'current_iteration_files_failed'),
        current_iteration_mi_b_discovered=pulumi.get(__response__, 'current_iteration_mi_b_discovered'),
        current_iteration_mi_b_exported=pulumi.get(__response__, 'current_iteration_mi_b_exported'),
        export_iteration_count=pulumi.get(__response__, 'export_iteration_count'),
        id=pulumi.get(__response__, 'id'),
        last_completion_time_utc=pulumi.get(__response__, 'last_completion_time_utc'),
        last_started_time_utc=pulumi.get(__response__, 'last_started_time_utc'),
        last_successful_iteration_completion_time_utc=pulumi.get(__response__, 'last_successful_iteration_completion_time_utc'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        state=pulumi.get(__response__, 'state'),
        status_code=pulumi.get(__response__, 'status_code'),
        status_message=pulumi.get(__response__, 'status_message'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        total_files_exported=pulumi.get(__response__, 'total_files_exported'),
        total_files_failed=pulumi.get(__response__, 'total_files_failed'),
        total_mi_b_exported=pulumi.get(__response__, 'total_mi_b_exported'),
        type=pulumi.get(__response__, 'type')))
