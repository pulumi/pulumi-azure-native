# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetImportJobResult',
    'AwaitableGetImportJobResult',
    'get_import_job',
    'get_import_job_output',
]

@pulumi.output_type
class GetImportJobResult:
    """
    An import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
    """
    def __init__(__self__, blobs_imported_per_second=None, blobs_walked_per_second=None, conflict_resolution_mode=None, id=None, import_prefixes=None, last_completion_time=None, last_started_time=None, location=None, maximum_errors=None, name=None, provisioning_state=None, state=None, status_message=None, system_data=None, tags=None, total_blobs_imported=None, total_blobs_walked=None, total_conflicts=None, total_errors=None, type=None):
        if blobs_imported_per_second and not isinstance(blobs_imported_per_second, float):
            raise TypeError("Expected argument 'blobs_imported_per_second' to be a float")
        pulumi.set(__self__, "blobs_imported_per_second", blobs_imported_per_second)
        if blobs_walked_per_second and not isinstance(blobs_walked_per_second, float):
            raise TypeError("Expected argument 'blobs_walked_per_second' to be a float")
        pulumi.set(__self__, "blobs_walked_per_second", blobs_walked_per_second)
        if conflict_resolution_mode and not isinstance(conflict_resolution_mode, str):
            raise TypeError("Expected argument 'conflict_resolution_mode' to be a str")
        pulumi.set(__self__, "conflict_resolution_mode", conflict_resolution_mode)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if import_prefixes and not isinstance(import_prefixes, list):
            raise TypeError("Expected argument 'import_prefixes' to be a list")
        pulumi.set(__self__, "import_prefixes", import_prefixes)
        if last_completion_time and not isinstance(last_completion_time, str):
            raise TypeError("Expected argument 'last_completion_time' to be a str")
        pulumi.set(__self__, "last_completion_time", last_completion_time)
        if last_started_time and not isinstance(last_started_time, str):
            raise TypeError("Expected argument 'last_started_time' to be a str")
        pulumi.set(__self__, "last_started_time", last_started_time)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if maximum_errors and not isinstance(maximum_errors, int):
            raise TypeError("Expected argument 'maximum_errors' to be a int")
        pulumi.set(__self__, "maximum_errors", maximum_errors)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status_message and not isinstance(status_message, str):
            raise TypeError("Expected argument 'status_message' to be a str")
        pulumi.set(__self__, "status_message", status_message)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if total_blobs_imported and not isinstance(total_blobs_imported, float):
            raise TypeError("Expected argument 'total_blobs_imported' to be a float")
        pulumi.set(__self__, "total_blobs_imported", total_blobs_imported)
        if total_blobs_walked and not isinstance(total_blobs_walked, float):
            raise TypeError("Expected argument 'total_blobs_walked' to be a float")
        pulumi.set(__self__, "total_blobs_walked", total_blobs_walked)
        if total_conflicts and not isinstance(total_conflicts, int):
            raise TypeError("Expected argument 'total_conflicts' to be a int")
        pulumi.set(__self__, "total_conflicts", total_conflicts)
        if total_errors and not isinstance(total_errors, int):
            raise TypeError("Expected argument 'total_errors' to be a int")
        pulumi.set(__self__, "total_errors", total_errors)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="blobsImportedPerSecond")
    def blobs_imported_per_second(self) -> float:
        """
        A recent and frequently updated rate of total files, directories, and symlinks imported per second.
        """
        return pulumi.get(self, "blobs_imported_per_second")

    @property
    @pulumi.getter(name="blobsWalkedPerSecond")
    def blobs_walked_per_second(self) -> float:
        """
        A recent and frequently updated rate of blobs walked per second.
        """
        return pulumi.get(self, "blobs_walked_per_second")

    @property
    @pulumi.getter(name="conflictResolutionMode")
    def conflict_resolution_mode(self) -> Optional[str]:
        """
        How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a thorough explanation of these resolution modes.
        """
        return pulumi.get(self, "conflict_resolution_mode")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="importPrefixes")
    def import_prefixes(self) -> Optional[Sequence[str]]:
        """
        An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.
        """
        return pulumi.get(self, "import_prefixes")

    @property
    @pulumi.getter(name="lastCompletionTime")
    def last_completion_time(self) -> str:
        """
        The time of the last completed archive operation
        """
        return pulumi.get(self, "last_completion_time")

    @property
    @pulumi.getter(name="lastStartedTime")
    def last_started_time(self) -> str:
        """
        The time the latest archive operation started
        """
        return pulumi.get(self, "last_started_time")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maximumErrors")
    def maximum_errors(self) -> Optional[int]:
        """
        Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately and is the default.
        """
        return pulumi.get(self, "maximum_errors")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        ARM provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the import job. InProgress indicates the import is still running. Canceled indicates it has been canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        """
        The status message of the import job.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalBlobsImported")
    def total_blobs_imported(self) -> float:
        """
        The total blobs that have been imported since import began.
        """
        return pulumi.get(self, "total_blobs_imported")

    @property
    @pulumi.getter(name="totalBlobsWalked")
    def total_blobs_walked(self) -> float:
        """
        The total blob objects walked.
        """
        return pulumi.get(self, "total_blobs_walked")

    @property
    @pulumi.getter(name="totalConflicts")
    def total_conflicts(self) -> int:
        """
        Number of conflicts in the import job.
        """
        return pulumi.get(self, "total_conflicts")

    @property
    @pulumi.getter(name="totalErrors")
    def total_errors(self) -> int:
        """
        Number of errors in the import job.
        """
        return pulumi.get(self, "total_errors")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetImportJobResult(GetImportJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImportJobResult(
            blobs_imported_per_second=self.blobs_imported_per_second,
            blobs_walked_per_second=self.blobs_walked_per_second,
            conflict_resolution_mode=self.conflict_resolution_mode,
            id=self.id,
            import_prefixes=self.import_prefixes,
            last_completion_time=self.last_completion_time,
            last_started_time=self.last_started_time,
            location=self.location,
            maximum_errors=self.maximum_errors,
            name=self.name,
            provisioning_state=self.provisioning_state,
            state=self.state,
            status_message=self.status_message,
            system_data=self.system_data,
            tags=self.tags,
            total_blobs_imported=self.total_blobs_imported,
            total_blobs_walked=self.total_blobs_walked,
            total_conflicts=self.total_conflicts,
            total_errors=self.total_errors,
            type=self.type)


def get_import_job(aml_filesystem_name: Optional[str] = None,
                   import_job_name: Optional[str] = None,
                   resource_group_name: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImportJobResult:
    """
    Returns an import job.
    Azure REST API version: 2024-03-01.


    :param str aml_filesystem_name: Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
    :param str import_job_name: Name for the import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['amlFilesystemName'] = aml_filesystem_name
    __args__['importJobName'] = import_job_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:storagecache:getImportJob', __args__, opts=opts, typ=GetImportJobResult).value

    return AwaitableGetImportJobResult(
        blobs_imported_per_second=pulumi.get(__ret__, 'blobs_imported_per_second'),
        blobs_walked_per_second=pulumi.get(__ret__, 'blobs_walked_per_second'),
        conflict_resolution_mode=pulumi.get(__ret__, 'conflict_resolution_mode'),
        id=pulumi.get(__ret__, 'id'),
        import_prefixes=pulumi.get(__ret__, 'import_prefixes'),
        last_completion_time=pulumi.get(__ret__, 'last_completion_time'),
        last_started_time=pulumi.get(__ret__, 'last_started_time'),
        location=pulumi.get(__ret__, 'location'),
        maximum_errors=pulumi.get(__ret__, 'maximum_errors'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        state=pulumi.get(__ret__, 'state'),
        status_message=pulumi.get(__ret__, 'status_message'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        total_blobs_imported=pulumi.get(__ret__, 'total_blobs_imported'),
        total_blobs_walked=pulumi.get(__ret__, 'total_blobs_walked'),
        total_conflicts=pulumi.get(__ret__, 'total_conflicts'),
        total_errors=pulumi.get(__ret__, 'total_errors'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_import_job)
def get_import_job_output(aml_filesystem_name: Optional[pulumi.Input[str]] = None,
                          import_job_name: Optional[pulumi.Input[str]] = None,
                          resource_group_name: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImportJobResult]:
    """
    Returns an import job.
    Azure REST API version: 2024-03-01.


    :param str aml_filesystem_name: Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
    :param str import_job_name: Name for the import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
