# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAutoImportJobResult',
    'AwaitableGetAutoImportJobResult',
    'get_auto_import_job',
    'get_auto_import_job_output',
]

@pulumi.output_type
class GetAutoImportJobResult:
    """
    An auto import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
    """
    def __init__(__self__, admin_status=None, auto_import_prefixes=None, azure_api_version=None, blob_sync_events=None, conflict_resolution_mode=None, enable_deletions=None, id=None, imported_directories=None, imported_files=None, imported_symlinks=None, last_completion_time_utc=None, last_started_time_utc=None, location=None, maximum_errors=None, name=None, preexisting_directories=None, preexisting_files=None, preexisting_symlinks=None, provisioning_state=None, rate_of_blob_import=None, rate_of_blob_walk=None, scan_end_time=None, scan_start_time=None, state=None, status_code=None, status_message=None, system_data=None, tags=None, total_blobs_imported=None, total_blobs_walked=None, total_conflicts=None, total_errors=None, type=None):
        if admin_status and not isinstance(admin_status, str):
            raise TypeError("Expected argument 'admin_status' to be a str")
        pulumi.set(__self__, "admin_status", admin_status)
        if auto_import_prefixes and not isinstance(auto_import_prefixes, list):
            raise TypeError("Expected argument 'auto_import_prefixes' to be a list")
        pulumi.set(__self__, "auto_import_prefixes", auto_import_prefixes)
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if blob_sync_events and not isinstance(blob_sync_events, dict):
            raise TypeError("Expected argument 'blob_sync_events' to be a dict")
        pulumi.set(__self__, "blob_sync_events", blob_sync_events)
        if conflict_resolution_mode and not isinstance(conflict_resolution_mode, str):
            raise TypeError("Expected argument 'conflict_resolution_mode' to be a str")
        pulumi.set(__self__, "conflict_resolution_mode", conflict_resolution_mode)
        if enable_deletions and not isinstance(enable_deletions, bool):
            raise TypeError("Expected argument 'enable_deletions' to be a bool")
        pulumi.set(__self__, "enable_deletions", enable_deletions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if imported_directories and not isinstance(imported_directories, float):
            raise TypeError("Expected argument 'imported_directories' to be a float")
        pulumi.set(__self__, "imported_directories", imported_directories)
        if imported_files and not isinstance(imported_files, float):
            raise TypeError("Expected argument 'imported_files' to be a float")
        pulumi.set(__self__, "imported_files", imported_files)
        if imported_symlinks and not isinstance(imported_symlinks, float):
            raise TypeError("Expected argument 'imported_symlinks' to be a float")
        pulumi.set(__self__, "imported_symlinks", imported_symlinks)
        if last_completion_time_utc and not isinstance(last_completion_time_utc, str):
            raise TypeError("Expected argument 'last_completion_time_utc' to be a str")
        pulumi.set(__self__, "last_completion_time_utc", last_completion_time_utc)
        if last_started_time_utc and not isinstance(last_started_time_utc, str):
            raise TypeError("Expected argument 'last_started_time_utc' to be a str")
        pulumi.set(__self__, "last_started_time_utc", last_started_time_utc)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if maximum_errors and not isinstance(maximum_errors, float):
            raise TypeError("Expected argument 'maximum_errors' to be a float")
        pulumi.set(__self__, "maximum_errors", maximum_errors)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if preexisting_directories and not isinstance(preexisting_directories, float):
            raise TypeError("Expected argument 'preexisting_directories' to be a float")
        pulumi.set(__self__, "preexisting_directories", preexisting_directories)
        if preexisting_files and not isinstance(preexisting_files, float):
            raise TypeError("Expected argument 'preexisting_files' to be a float")
        pulumi.set(__self__, "preexisting_files", preexisting_files)
        if preexisting_symlinks and not isinstance(preexisting_symlinks, float):
            raise TypeError("Expected argument 'preexisting_symlinks' to be a float")
        pulumi.set(__self__, "preexisting_symlinks", preexisting_symlinks)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if rate_of_blob_import and not isinstance(rate_of_blob_import, float):
            raise TypeError("Expected argument 'rate_of_blob_import' to be a float")
        pulumi.set(__self__, "rate_of_blob_import", rate_of_blob_import)
        if rate_of_blob_walk and not isinstance(rate_of_blob_walk, float):
            raise TypeError("Expected argument 'rate_of_blob_walk' to be a float")
        pulumi.set(__self__, "rate_of_blob_walk", rate_of_blob_walk)
        if scan_end_time and not isinstance(scan_end_time, str):
            raise TypeError("Expected argument 'scan_end_time' to be a str")
        pulumi.set(__self__, "scan_end_time", scan_end_time)
        if scan_start_time and not isinstance(scan_start_time, str):
            raise TypeError("Expected argument 'scan_start_time' to be a str")
        pulumi.set(__self__, "scan_start_time", scan_start_time)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status_code and not isinstance(status_code, str):
            raise TypeError("Expected argument 'status_code' to be a str")
        pulumi.set(__self__, "status_code", status_code)
        if status_message and not isinstance(status_message, str):
            raise TypeError("Expected argument 'status_message' to be a str")
        pulumi.set(__self__, "status_message", status_message)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if total_blobs_imported and not isinstance(total_blobs_imported, float):
            raise TypeError("Expected argument 'total_blobs_imported' to be a float")
        pulumi.set(__self__, "total_blobs_imported", total_blobs_imported)
        if total_blobs_walked and not isinstance(total_blobs_walked, float):
            raise TypeError("Expected argument 'total_blobs_walked' to be a float")
        pulumi.set(__self__, "total_blobs_walked", total_blobs_walked)
        if total_conflicts and not isinstance(total_conflicts, float):
            raise TypeError("Expected argument 'total_conflicts' to be a float")
        pulumi.set(__self__, "total_conflicts", total_conflicts)
        if total_errors and not isinstance(total_errors, float):
            raise TypeError("Expected argument 'total_errors' to be a float")
        pulumi.set(__self__, "total_errors", total_errors)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="adminStatus")
    def admin_status(self) -> Optional[builtins.str]:
        """
        The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
        """
        return pulumi.get(self, "admin_status")

    @property
    @pulumi.getter(name="autoImportPrefixes")
    def auto_import_prefixes(self) -> Optional[Sequence[builtins.str]]:
        """
        An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
        """
        return pulumi.get(self, "auto_import_prefixes")

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> builtins.str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="blobSyncEvents")
    def blob_sync_events(self) -> 'outputs.AutoImportJobResponseBlobSyncEvents':
        """
        The storage account blob change feed status of the auto import job.
        """
        return pulumi.get(self, "blob_sync_events")

    @property
    @pulumi.getter(name="conflictResolutionMode")
    def conflict_resolution_mode(self) -> Optional[builtins.str]:
        """
        How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
        """
        return pulumi.get(self, "conflict_resolution_mode")

    @property
    @pulumi.getter(name="enableDeletions")
    def enable_deletions(self) -> Optional[builtins.bool]:
        """
        Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
        """
        return pulumi.get(self, "enable_deletions")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="importedDirectories")
    def imported_directories(self) -> builtins.float:
        """
        Number of directories imported during full scan.
        """
        return pulumi.get(self, "imported_directories")

    @property
    @pulumi.getter(name="importedFiles")
    def imported_files(self) -> builtins.float:
        """
        Number of files imported during full scan.
        """
        return pulumi.get(self, "imported_files")

    @property
    @pulumi.getter(name="importedSymlinks")
    def imported_symlinks(self) -> builtins.float:
        """
        Number of symlinks imported during full scan.
        """
        return pulumi.get(self, "imported_symlinks")

    @property
    @pulumi.getter(name="lastCompletionTimeUTC")
    def last_completion_time_utc(self) -> builtins.str:
        """
        The time (in UTC) of the last completed auto import job.
        """
        return pulumi.get(self, "last_completion_time_utc")

    @property
    @pulumi.getter(name="lastStartedTimeUTC")
    def last_started_time_utc(self) -> builtins.str:
        """
        The time (in UTC) the latest auto import job started.
        """
        return pulumi.get(self, "last_started_time_utc")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maximumErrors")
    def maximum_errors(self) -> Optional[builtins.float]:
        """
        Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
        """
        return pulumi.get(self, "maximum_errors")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="preexistingDirectories")
    def preexisting_directories(self) -> builtins.float:
        """
        Number of preexisting directories during full scan.
        """
        return pulumi.get(self, "preexisting_directories")

    @property
    @pulumi.getter(name="preexistingFiles")
    def preexisting_files(self) -> builtins.float:
        """
        Number of preexisting files during full scan.
        """
        return pulumi.get(self, "preexisting_files")

    @property
    @pulumi.getter(name="preexistingSymlinks")
    def preexisting_symlinks(self) -> builtins.float:
        """
        Number of preexisting symlinks during full scan.
        """
        return pulumi.get(self, "preexisting_symlinks")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        ARM provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="rateOfBlobImport")
    def rate_of_blob_import(self) -> builtins.float:
        """
        Rate of blob import during full scan.
        """
        return pulumi.get(self, "rate_of_blob_import")

    @property
    @pulumi.getter(name="rateOfBlobWalk")
    def rate_of_blob_walk(self) -> builtins.float:
        """
        Rate of blobs walked during full scan.
        """
        return pulumi.get(self, "rate_of_blob_walk")

    @property
    @pulumi.getter(name="scanEndTime")
    def scan_end_time(self) -> builtins.str:
        """
        Date and time of when the full scan ended.
        """
        return pulumi.get(self, "scan_end_time")

    @property
    @pulumi.getter(name="scanStartTime")
    def scan_start_time(self) -> builtins.str:
        """
        Date and time of when the currently running full scan began.
        """
        return pulumi.get(self, "scan_start_time")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The state of the auto import operation.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> builtins.str:
        """
        Server-defined status code for auto import job.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> builtins.str:
        """
        Server-defined status message for auto import job.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalBlobsImported")
    def total_blobs_imported(self) -> builtins.float:
        """
        Total number of blobs imported during full scan.
        """
        return pulumi.get(self, "total_blobs_imported")

    @property
    @pulumi.getter(name="totalBlobsWalked")
    def total_blobs_walked(self) -> builtins.float:
        """
        Total number of blobs walked during full scan.
        """
        return pulumi.get(self, "total_blobs_walked")

    @property
    @pulumi.getter(name="totalConflicts")
    def total_conflicts(self) -> builtins.float:
        """
        Total conflicts encountered during full scan.
        """
        return pulumi.get(self, "total_conflicts")

    @property
    @pulumi.getter(name="totalErrors")
    def total_errors(self) -> builtins.float:
        """
        Total errors encountered during full scan.
        """
        return pulumi.get(self, "total_errors")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetAutoImportJobResult(GetAutoImportJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutoImportJobResult(
            admin_status=self.admin_status,
            auto_import_prefixes=self.auto_import_prefixes,
            azure_api_version=self.azure_api_version,
            blob_sync_events=self.blob_sync_events,
            conflict_resolution_mode=self.conflict_resolution_mode,
            enable_deletions=self.enable_deletions,
            id=self.id,
            imported_directories=self.imported_directories,
            imported_files=self.imported_files,
            imported_symlinks=self.imported_symlinks,
            last_completion_time_utc=self.last_completion_time_utc,
            last_started_time_utc=self.last_started_time_utc,
            location=self.location,
            maximum_errors=self.maximum_errors,
            name=self.name,
            preexisting_directories=self.preexisting_directories,
            preexisting_files=self.preexisting_files,
            preexisting_symlinks=self.preexisting_symlinks,
            provisioning_state=self.provisioning_state,
            rate_of_blob_import=self.rate_of_blob_import,
            rate_of_blob_walk=self.rate_of_blob_walk,
            scan_end_time=self.scan_end_time,
            scan_start_time=self.scan_start_time,
            state=self.state,
            status_code=self.status_code,
            status_message=self.status_message,
            system_data=self.system_data,
            tags=self.tags,
            total_blobs_imported=self.total_blobs_imported,
            total_blobs_walked=self.total_blobs_walked,
            total_conflicts=self.total_conflicts,
            total_errors=self.total_errors,
            type=self.type)


def get_auto_import_job(aml_filesystem_name: Optional[builtins.str] = None,
                        auto_import_job_name: Optional[builtins.str] = None,
                        resource_group_name: Optional[builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutoImportJobResult:
    """
    Returns an auto import job.

    Uses Azure REST API version 2025-07-01.


    :param builtins.str aml_filesystem_name: Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
    :param builtins.str auto_import_job_name: Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['amlFilesystemName'] = aml_filesystem_name
    __args__['autoImportJobName'] = auto_import_job_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:storagecache:getAutoImportJob', __args__, opts=opts, typ=GetAutoImportJobResult).value

    return AwaitableGetAutoImportJobResult(
        admin_status=pulumi.get(__ret__, 'admin_status'),
        auto_import_prefixes=pulumi.get(__ret__, 'auto_import_prefixes'),
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        blob_sync_events=pulumi.get(__ret__, 'blob_sync_events'),
        conflict_resolution_mode=pulumi.get(__ret__, 'conflict_resolution_mode'),
        enable_deletions=pulumi.get(__ret__, 'enable_deletions'),
        id=pulumi.get(__ret__, 'id'),
        imported_directories=pulumi.get(__ret__, 'imported_directories'),
        imported_files=pulumi.get(__ret__, 'imported_files'),
        imported_symlinks=pulumi.get(__ret__, 'imported_symlinks'),
        last_completion_time_utc=pulumi.get(__ret__, 'last_completion_time_utc'),
        last_started_time_utc=pulumi.get(__ret__, 'last_started_time_utc'),
        location=pulumi.get(__ret__, 'location'),
        maximum_errors=pulumi.get(__ret__, 'maximum_errors'),
        name=pulumi.get(__ret__, 'name'),
        preexisting_directories=pulumi.get(__ret__, 'preexisting_directories'),
        preexisting_files=pulumi.get(__ret__, 'preexisting_files'),
        preexisting_symlinks=pulumi.get(__ret__, 'preexisting_symlinks'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        rate_of_blob_import=pulumi.get(__ret__, 'rate_of_blob_import'),
        rate_of_blob_walk=pulumi.get(__ret__, 'rate_of_blob_walk'),
        scan_end_time=pulumi.get(__ret__, 'scan_end_time'),
        scan_start_time=pulumi.get(__ret__, 'scan_start_time'),
        state=pulumi.get(__ret__, 'state'),
        status_code=pulumi.get(__ret__, 'status_code'),
        status_message=pulumi.get(__ret__, 'status_message'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        total_blobs_imported=pulumi.get(__ret__, 'total_blobs_imported'),
        total_blobs_walked=pulumi.get(__ret__, 'total_blobs_walked'),
        total_conflicts=pulumi.get(__ret__, 'total_conflicts'),
        total_errors=pulumi.get(__ret__, 'total_errors'),
        type=pulumi.get(__ret__, 'type'))
def get_auto_import_job_output(aml_filesystem_name: Optional[pulumi.Input[builtins.str]] = None,
                               auto_import_job_name: Optional[pulumi.Input[builtins.str]] = None,
                               resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAutoImportJobResult]:
    """
    Returns an auto import job.

    Uses Azure REST API version 2025-07-01.


    :param builtins.str aml_filesystem_name: Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
    :param builtins.str auto_import_job_name: Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['amlFilesystemName'] = aml_filesystem_name
    __args__['autoImportJobName'] = auto_import_job_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:storagecache:getAutoImportJob', __args__, opts=opts, typ=GetAutoImportJobResult)
    return __ret__.apply(lambda __response__: GetAutoImportJobResult(
        admin_status=pulumi.get(__response__, 'admin_status'),
        auto_import_prefixes=pulumi.get(__response__, 'auto_import_prefixes'),
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        blob_sync_events=pulumi.get(__response__, 'blob_sync_events'),
        conflict_resolution_mode=pulumi.get(__response__, 'conflict_resolution_mode'),
        enable_deletions=pulumi.get(__response__, 'enable_deletions'),
        id=pulumi.get(__response__, 'id'),
        imported_directories=pulumi.get(__response__, 'imported_directories'),
        imported_files=pulumi.get(__response__, 'imported_files'),
        imported_symlinks=pulumi.get(__response__, 'imported_symlinks'),
        last_completion_time_utc=pulumi.get(__response__, 'last_completion_time_utc'),
        last_started_time_utc=pulumi.get(__response__, 'last_started_time_utc'),
        location=pulumi.get(__response__, 'location'),
        maximum_errors=pulumi.get(__response__, 'maximum_errors'),
        name=pulumi.get(__response__, 'name'),
        preexisting_directories=pulumi.get(__response__, 'preexisting_directories'),
        preexisting_files=pulumi.get(__response__, 'preexisting_files'),
        preexisting_symlinks=pulumi.get(__response__, 'preexisting_symlinks'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        rate_of_blob_import=pulumi.get(__response__, 'rate_of_blob_import'),
        rate_of_blob_walk=pulumi.get(__response__, 'rate_of_blob_walk'),
        scan_end_time=pulumi.get(__response__, 'scan_end_time'),
        scan_start_time=pulumi.get(__response__, 'scan_start_time'),
        state=pulumi.get(__response__, 'state'),
        status_code=pulumi.get(__response__, 'status_code'),
        status_message=pulumi.get(__response__, 'status_message'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        total_blobs_imported=pulumi.get(__response__, 'total_blobs_imported'),
        total_blobs_walked=pulumi.get(__response__, 'total_blobs_walked'),
        total_conflicts=pulumi.get(__response__, 'total_conflicts'),
        total_errors=pulumi.get(__response__, 'total_errors'),
        type=pulumi.get(__response__, 'type')))
