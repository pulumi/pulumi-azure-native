# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = ['AutoImportJobArgs', 'AutoImportJob']

@pulumi.input_type
class AutoImportJobArgs:
    def __init__(__self__, *,
                 aml_filesystem_name: pulumi.Input[builtins.str],
                 resource_group_name: pulumi.Input[builtins.str],
                 admin_status: Optional[pulumi.Input[Union[builtins.str, 'AdminStatus']]] = None,
                 auto_import_job_name: Optional[pulumi.Input[builtins.str]] = None,
                 auto_import_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 conflict_resolution_mode: Optional[pulumi.Input[Union[builtins.str, 'ConflictResolutionMode']]] = None,
                 enable_deletions: Optional[pulumi.Input[builtins.bool]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 maximum_errors: Optional[pulumi.Input[builtins.float]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a AutoImportJob resource.
        :param pulumi.Input[builtins.str] aml_filesystem_name: Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[builtins.str, 'AdminStatus']] admin_status: The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
        :param pulumi.Input[builtins.str] auto_import_job_name: Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auto_import_prefixes: An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
        :param pulumi.Input[Union[builtins.str, 'ConflictResolutionMode']] conflict_resolution_mode: How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
        :param pulumi.Input[builtins.bool] enable_deletions: Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[builtins.float] maximum_errors: Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "aml_filesystem_name", aml_filesystem_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if admin_status is None:
            admin_status = 'Enable'
        if admin_status is not None:
            pulumi.set(__self__, "admin_status", admin_status)
        if auto_import_job_name is not None:
            pulumi.set(__self__, "auto_import_job_name", auto_import_job_name)
        if auto_import_prefixes is not None:
            pulumi.set(__self__, "auto_import_prefixes", auto_import_prefixes)
        if conflict_resolution_mode is None:
            conflict_resolution_mode = 'Skip'
        if conflict_resolution_mode is not None:
            pulumi.set(__self__, "conflict_resolution_mode", conflict_resolution_mode)
        if enable_deletions is None:
            enable_deletions = False
        if enable_deletions is not None:
            pulumi.set(__self__, "enable_deletions", enable_deletions)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum_errors is not None:
            pulumi.set(__self__, "maximum_errors", maximum_errors)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="amlFilesystemName")
    def aml_filesystem_name(self) -> pulumi.Input[builtins.str]:
        """
        Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        """
        return pulumi.get(self, "aml_filesystem_name")

    @aml_filesystem_name.setter
    def aml_filesystem_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "aml_filesystem_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="adminStatus")
    def admin_status(self) -> Optional[pulumi.Input[Union[builtins.str, 'AdminStatus']]]:
        """
        The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
        """
        return pulumi.get(self, "admin_status")

    @admin_status.setter
    def admin_status(self, value: Optional[pulumi.Input[Union[builtins.str, 'AdminStatus']]]):
        pulumi.set(self, "admin_status", value)

    @property
    @pulumi.getter(name="autoImportJobName")
    def auto_import_job_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        """
        return pulumi.get(self, "auto_import_job_name")

    @auto_import_job_name.setter
    def auto_import_job_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "auto_import_job_name", value)

    @property
    @pulumi.getter(name="autoImportPrefixes")
    def auto_import_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
        """
        return pulumi.get(self, "auto_import_prefixes")

    @auto_import_prefixes.setter
    def auto_import_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "auto_import_prefixes", value)

    @property
    @pulumi.getter(name="conflictResolutionMode")
    def conflict_resolution_mode(self) -> Optional[pulumi.Input[Union[builtins.str, 'ConflictResolutionMode']]]:
        """
        How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
        """
        return pulumi.get(self, "conflict_resolution_mode")

    @conflict_resolution_mode.setter
    def conflict_resolution_mode(self, value: Optional[pulumi.Input[Union[builtins.str, 'ConflictResolutionMode']]]):
        pulumi.set(self, "conflict_resolution_mode", value)

    @property
    @pulumi.getter(name="enableDeletions")
    def enable_deletions(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
        """
        return pulumi.get(self, "enable_deletions")

    @enable_deletions.setter
    def enable_deletions(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_deletions", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maximumErrors")
    def maximum_errors(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
        """
        return pulumi.get(self, "maximum_errors")

    @maximum_errors.setter
    def maximum_errors(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "maximum_errors", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("azure-native:storagecache:AutoImportJob")
class AutoImportJob(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_status: Optional[pulumi.Input[Union[builtins.str, 'AdminStatus']]] = None,
                 aml_filesystem_name: Optional[pulumi.Input[builtins.str]] = None,
                 auto_import_job_name: Optional[pulumi.Input[builtins.str]] = None,
                 auto_import_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 conflict_resolution_mode: Optional[pulumi.Input[Union[builtins.str, 'ConflictResolutionMode']]] = None,
                 enable_deletions: Optional[pulumi.Input[builtins.bool]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 maximum_errors: Optional[pulumi.Input[builtins.float]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        An auto import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md

        Uses Azure REST API version 2025-07-01.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union[builtins.str, 'AdminStatus']] admin_status: The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
        :param pulumi.Input[builtins.str] aml_filesystem_name: Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        :param pulumi.Input[builtins.str] auto_import_job_name: Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auto_import_prefixes: An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
        :param pulumi.Input[Union[builtins.str, 'ConflictResolutionMode']] conflict_resolution_mode: How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
        :param pulumi.Input[builtins.bool] enable_deletions: Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[builtins.float] maximum_errors: Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutoImportJobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An auto import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md

        Uses Azure REST API version 2025-07-01.

        :param str resource_name: The name of the resource.
        :param AutoImportJobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutoImportJobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_status: Optional[pulumi.Input[Union[builtins.str, 'AdminStatus']]] = None,
                 aml_filesystem_name: Optional[pulumi.Input[builtins.str]] = None,
                 auto_import_job_name: Optional[pulumi.Input[builtins.str]] = None,
                 auto_import_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 conflict_resolution_mode: Optional[pulumi.Input[Union[builtins.str, 'ConflictResolutionMode']]] = None,
                 enable_deletions: Optional[pulumi.Input[builtins.bool]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 maximum_errors: Optional[pulumi.Input[builtins.float]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutoImportJobArgs.__new__(AutoImportJobArgs)

            if admin_status is None:
                admin_status = 'Enable'
            __props__.__dict__["admin_status"] = admin_status
            if aml_filesystem_name is None and not opts.urn:
                raise TypeError("Missing required property 'aml_filesystem_name'")
            __props__.__dict__["aml_filesystem_name"] = aml_filesystem_name
            __props__.__dict__["auto_import_job_name"] = auto_import_job_name
            __props__.__dict__["auto_import_prefixes"] = auto_import_prefixes
            if conflict_resolution_mode is None:
                conflict_resolution_mode = 'Skip'
            __props__.__dict__["conflict_resolution_mode"] = conflict_resolution_mode
            if enable_deletions is None:
                enable_deletions = False
            __props__.__dict__["enable_deletions"] = enable_deletions
            __props__.__dict__["location"] = location
            __props__.__dict__["maximum_errors"] = maximum_errors
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["azure_api_version"] = None
            __props__.__dict__["blob_sync_events"] = None
            __props__.__dict__["imported_directories"] = None
            __props__.__dict__["imported_files"] = None
            __props__.__dict__["imported_symlinks"] = None
            __props__.__dict__["last_completion_time_utc"] = None
            __props__.__dict__["last_started_time_utc"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["preexisting_directories"] = None
            __props__.__dict__["preexisting_files"] = None
            __props__.__dict__["preexisting_symlinks"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["rate_of_blob_import"] = None
            __props__.__dict__["rate_of_blob_walk"] = None
            __props__.__dict__["scan_end_time"] = None
            __props__.__dict__["scan_start_time"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["status_code"] = None
            __props__.__dict__["status_message"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["total_blobs_imported"] = None
            __props__.__dict__["total_blobs_walked"] = None
            __props__.__dict__["total_conflicts"] = None
            __props__.__dict__["total_errors"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:storagecache/v20250701:AutoImportJob")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(AutoImportJob, __self__).__init__(
            'azure-native:storagecache:AutoImportJob',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AutoImportJob':
        """
        Get an existing AutoImportJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AutoImportJobArgs.__new__(AutoImportJobArgs)

        __props__.__dict__["admin_status"] = None
        __props__.__dict__["auto_import_prefixes"] = None
        __props__.__dict__["azure_api_version"] = None
        __props__.__dict__["blob_sync_events"] = None
        __props__.__dict__["conflict_resolution_mode"] = None
        __props__.__dict__["enable_deletions"] = None
        __props__.__dict__["imported_directories"] = None
        __props__.__dict__["imported_files"] = None
        __props__.__dict__["imported_symlinks"] = None
        __props__.__dict__["last_completion_time_utc"] = None
        __props__.__dict__["last_started_time_utc"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["maximum_errors"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["preexisting_directories"] = None
        __props__.__dict__["preexisting_files"] = None
        __props__.__dict__["preexisting_symlinks"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["rate_of_blob_import"] = None
        __props__.__dict__["rate_of_blob_walk"] = None
        __props__.__dict__["scan_end_time"] = None
        __props__.__dict__["scan_start_time"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["status_code"] = None
        __props__.__dict__["status_message"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["total_blobs_imported"] = None
        __props__.__dict__["total_blobs_walked"] = None
        __props__.__dict__["total_conflicts"] = None
        __props__.__dict__["total_errors"] = None
        __props__.__dict__["type"] = None
        return AutoImportJob(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminStatus")
    def admin_status(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
        """
        return pulumi.get(self, "admin_status")

    @property
    @pulumi.getter(name="autoImportPrefixes")
    def auto_import_prefixes(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
        """
        return pulumi.get(self, "auto_import_prefixes")

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> pulumi.Output[builtins.str]:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="blobSyncEvents")
    def blob_sync_events(self) -> pulumi.Output['outputs.AutoImportJobResponseBlobSyncEvents']:
        """
        The storage account blob change feed status of the auto import job.
        """
        return pulumi.get(self, "blob_sync_events")

    @property
    @pulumi.getter(name="conflictResolutionMode")
    def conflict_resolution_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
        """
        return pulumi.get(self, "conflict_resolution_mode")

    @property
    @pulumi.getter(name="enableDeletions")
    def enable_deletions(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
        """
        return pulumi.get(self, "enable_deletions")

    @property
    @pulumi.getter(name="importedDirectories")
    def imported_directories(self) -> pulumi.Output[builtins.float]:
        """
        Number of directories imported during full scan.
        """
        return pulumi.get(self, "imported_directories")

    @property
    @pulumi.getter(name="importedFiles")
    def imported_files(self) -> pulumi.Output[builtins.float]:
        """
        Number of files imported during full scan.
        """
        return pulumi.get(self, "imported_files")

    @property
    @pulumi.getter(name="importedSymlinks")
    def imported_symlinks(self) -> pulumi.Output[builtins.float]:
        """
        Number of symlinks imported during full scan.
        """
        return pulumi.get(self, "imported_symlinks")

    @property
    @pulumi.getter(name="lastCompletionTimeUTC")
    def last_completion_time_utc(self) -> pulumi.Output[builtins.str]:
        """
        The time (in UTC) of the last completed auto import job.
        """
        return pulumi.get(self, "last_completion_time_utc")

    @property
    @pulumi.getter(name="lastStartedTimeUTC")
    def last_started_time_utc(self) -> pulumi.Output[builtins.str]:
        """
        The time (in UTC) the latest auto import job started.
        """
        return pulumi.get(self, "last_started_time_utc")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[builtins.str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maximumErrors")
    def maximum_errors(self) -> pulumi.Output[Optional[builtins.float]]:
        """
        Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
        """
        return pulumi.get(self, "maximum_errors")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="preexistingDirectories")
    def preexisting_directories(self) -> pulumi.Output[builtins.float]:
        """
        Number of preexisting directories during full scan.
        """
        return pulumi.get(self, "preexisting_directories")

    @property
    @pulumi.getter(name="preexistingFiles")
    def preexisting_files(self) -> pulumi.Output[builtins.float]:
        """
        Number of preexisting files during full scan.
        """
        return pulumi.get(self, "preexisting_files")

    @property
    @pulumi.getter(name="preexistingSymlinks")
    def preexisting_symlinks(self) -> pulumi.Output[builtins.float]:
        """
        Number of preexisting symlinks during full scan.
        """
        return pulumi.get(self, "preexisting_symlinks")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[builtins.str]:
        """
        ARM provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="rateOfBlobImport")
    def rate_of_blob_import(self) -> pulumi.Output[builtins.float]:
        """
        Rate of blob import during full scan.
        """
        return pulumi.get(self, "rate_of_blob_import")

    @property
    @pulumi.getter(name="rateOfBlobWalk")
    def rate_of_blob_walk(self) -> pulumi.Output[builtins.float]:
        """
        Rate of blobs walked during full scan.
        """
        return pulumi.get(self, "rate_of_blob_walk")

    @property
    @pulumi.getter(name="scanEndTime")
    def scan_end_time(self) -> pulumi.Output[builtins.str]:
        """
        Date and time of when the full scan ended.
        """
        return pulumi.get(self, "scan_end_time")

    @property
    @pulumi.getter(name="scanStartTime")
    def scan_start_time(self) -> pulumi.Output[builtins.str]:
        """
        Date and time of when the currently running full scan began.
        """
        return pulumi.get(self, "scan_start_time")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        The state of the auto import operation.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Output[builtins.str]:
        """
        Server-defined status code for auto import job.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> pulumi.Output[builtins.str]:
        """
        Server-defined status message for auto import job.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalBlobsImported")
    def total_blobs_imported(self) -> pulumi.Output[builtins.float]:
        """
        Total number of blobs imported during full scan.
        """
        return pulumi.get(self, "total_blobs_imported")

    @property
    @pulumi.getter(name="totalBlobsWalked")
    def total_blobs_walked(self) -> pulumi.Output[builtins.float]:
        """
        Total number of blobs walked during full scan.
        """
        return pulumi.get(self, "total_blobs_walked")

    @property
    @pulumi.getter(name="totalConflicts")
    def total_conflicts(self) -> pulumi.Output[builtins.float]:
        """
        Total conflicts encountered during full scan.
        """
        return pulumi.get(self, "total_conflicts")

    @property
    @pulumi.getter(name="totalErrors")
    def total_errors(self) -> pulumi.Output[builtins.float]:
        """
        Total errors encountered during full scan.
        """
        return pulumi.get(self, "total_errors")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

