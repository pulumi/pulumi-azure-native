# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AgentPoolProvisioningStatusStatusArgs',
    'AgentPoolUpdateProfileArgs',
    'CloudProviderProfileInfraNetworkProfileArgs',
    'CloudProviderProfileArgs',
    'ClusterVMAccessProfileArgs',
    'ControlPlaneProfileControlPlaneEndpointArgs',
    'ControlPlaneProfileArgs',
    'ExtendedLocationArgs',
    'LinuxProfilePropertiesPublicKeysArgs',
    'LinuxProfilePropertiesSshArgs',
    'LinuxProfilePropertiesArgs',
    'NamedAgentPoolProfileArgs',
    'NetworkProfileLoadBalancerProfileArgs',
    'NetworkProfileArgs',
    'ProvisionedClusterLicenseProfileArgs',
    'ProvisionedClusterPropertiesAutoScalerProfileArgs',
    'ProvisionedClusterPropertiesArgs',
    'StorageProfileNfsCSIDriverArgs',
    'StorageProfileSmbCSIDriverArgs',
    'StorageProfileArgs',
    'VirtualNetworkExtendedLocationArgs',
    'VirtualNetworkPropertiesHciArgs',
    'VirtualNetworkPropertiesInfraVnetProfileArgs',
    'VirtualNetworkPropertiesVipPoolArgs',
    'VirtualNetworkPropertiesVmipPoolArgs',
    'VirtualNetworkPropertiesArgs',
]

@pulumi.input_type
class AgentPoolProvisioningStatusStatusArgs:
    def __init__(__self__, *,
                 error_message: Optional[pulumi.Input[str]] = None,
                 ready_replicas: Optional[pulumi.Input[Sequence[pulumi.Input['AgentPoolUpdateProfileArgs']]]] = None):
        """
        The observed status of the agent pool.
        :param pulumi.Input[str] error_message: Error messages during an agent pool operation or steady state.
        """
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if ready_replicas is not None:
            pulumi.set(__self__, "ready_replicas", ready_replicas)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        """
        Error messages during an agent pool operation or steady state.
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="readyReplicas")
    def ready_replicas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AgentPoolUpdateProfileArgs']]]]:
        return pulumi.get(self, "ready_replicas")

    @ready_replicas.setter
    def ready_replicas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AgentPoolUpdateProfileArgs']]]]):
        pulumi.set(self, "ready_replicas", value)


@pulumi.input_type
class AgentPoolUpdateProfileArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 vm_size: Optional[pulumi.Input[str]] = None):
        """
        Profile for agent pool properties that can be updated
        :param pulumi.Input[int] count: Number of nodes in the agent pool. The default value is 1.
        :param pulumi.Input[str] vm_size: The VM sku size of the agent pool node VMs.
        """
        if count is None:
            count = 1
        if count is not None:
            pulumi.set(__self__, "count", count)
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of nodes in the agent pool. The default value is 1.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        The VM sku size of the agent pool node VMs.
        """
        return pulumi.get(self, "vm_size")

    @vm_size.setter
    def vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_size", value)


@pulumi.input_type
class CloudProviderProfileInfraNetworkProfileArgs:
    def __init__(__self__, *,
                 vnet_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The profile for the infrastructure networks used by the provisioned cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vnet_subnet_ids: List of ARM resource Ids (maximum 1) for the infrastructure network object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}
        """
        if vnet_subnet_ids is not None:
            pulumi.set(__self__, "vnet_subnet_ids", vnet_subnet_ids)

    @property
    @pulumi.getter(name="vnetSubnetIds")
    def vnet_subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of ARM resource Ids (maximum 1) for the infrastructure network object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}
        """
        return pulumi.get(self, "vnet_subnet_ids")

    @vnet_subnet_ids.setter
    def vnet_subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vnet_subnet_ids", value)


@pulumi.input_type
class CloudProviderProfileArgs:
    def __init__(__self__, *,
                 infra_network_profile: Optional[pulumi.Input['CloudProviderProfileInfraNetworkProfileArgs']] = None):
        """
        The profile for the underlying cloud infrastructure provider for the provisioned cluster.
        :param pulumi.Input['CloudProviderProfileInfraNetworkProfileArgs'] infra_network_profile: The profile for the infrastructure networks used by the provisioned cluster
        """
        if infra_network_profile is not None:
            pulumi.set(__self__, "infra_network_profile", infra_network_profile)

    @property
    @pulumi.getter(name="infraNetworkProfile")
    def infra_network_profile(self) -> Optional[pulumi.Input['CloudProviderProfileInfraNetworkProfileArgs']]:
        """
        The profile for the infrastructure networks used by the provisioned cluster
        """
        return pulumi.get(self, "infra_network_profile")

    @infra_network_profile.setter
    def infra_network_profile(self, value: Optional[pulumi.Input['CloudProviderProfileInfraNetworkProfileArgs']]):
        pulumi.set(self, "infra_network_profile", value)


@pulumi.input_type
class ClusterVMAccessProfileArgs:
    def __init__(__self__, *,
                 authorized_ip_ranges: Optional[pulumi.Input[str]] = None):
        """
        The SSH restricted access profile for the VMs in the provisioned cluster.
        :param pulumi.Input[str] authorized_ip_ranges: IP Address or CIDR for SSH access to VMs in the provisioned cluster
        """
        if authorized_ip_ranges is not None:
            pulumi.set(__self__, "authorized_ip_ranges", authorized_ip_ranges)

    @property
    @pulumi.getter(name="authorizedIPRanges")
    def authorized_ip_ranges(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address or CIDR for SSH access to VMs in the provisioned cluster
        """
        return pulumi.get(self, "authorized_ip_ranges")

    @authorized_ip_ranges.setter
    def authorized_ip_ranges(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorized_ip_ranges", value)


@pulumi.input_type
class ControlPlaneProfileControlPlaneEndpointArgs:
    def __init__(__self__, *,
                 host_ip: Optional[pulumi.Input[str]] = None):
        """
        IP Address of the Kubernetes API server
        :param pulumi.Input[str] host_ip: IP address of the Kubernetes API server
        """
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the Kubernetes API server
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_ip", value)


@pulumi.input_type
class ControlPlaneProfileArgs:
    def __init__(__self__, *,
                 control_plane_endpoint: Optional[pulumi.Input['ControlPlaneProfileControlPlaneEndpointArgs']] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 vm_size: Optional[pulumi.Input[str]] = None):
        """
        The properties of the control plane nodes of the provisioned cluster
        :param pulumi.Input['ControlPlaneProfileControlPlaneEndpointArgs'] control_plane_endpoint: IP Address of the Kubernetes API server
        :param pulumi.Input[int] count: Number of control plane nodes. The default value is 1, and the count should be an odd number
        :param pulumi.Input[str] vm_size: VM sku size of the control plane nodes
        """
        if control_plane_endpoint is not None:
            pulumi.set(__self__, "control_plane_endpoint", control_plane_endpoint)
        if count is None:
            count = 1
        if count is not None:
            pulumi.set(__self__, "count", count)
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter(name="controlPlaneEndpoint")
    def control_plane_endpoint(self) -> Optional[pulumi.Input['ControlPlaneProfileControlPlaneEndpointArgs']]:
        """
        IP Address of the Kubernetes API server
        """
        return pulumi.get(self, "control_plane_endpoint")

    @control_plane_endpoint.setter
    def control_plane_endpoint(self, value: Optional[pulumi.Input['ControlPlaneProfileControlPlaneEndpointArgs']]):
        pulumi.set(self, "control_plane_endpoint", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of control plane nodes. The default value is 1, and the count should be an odd number
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        VM sku size of the control plane nodes
        """
        return pulumi.get(self, "vm_size")

    @vm_size.setter
    def vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_size", value)


@pulumi.input_type
class ExtendedLocationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ExtendedLocationTypes']]] = None):
        """
        Extended location pointing to the underlying infrastructure
        :param pulumi.Input[str] name: ARM Id of the extended location.
        :param pulumi.Input[Union[str, 'ExtendedLocationTypes']] type: The extended location type. Allowed value: 'CustomLocation'
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        ARM Id of the extended location.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ExtendedLocationTypes']]]:
        """
        The extended location type. Allowed value: 'CustomLocation'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ExtendedLocationTypes']]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class LinuxProfilePropertiesPublicKeysArgs:
    def __init__(__self__, *,
                 key_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key_data: Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
        """
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
        """
        return pulumi.get(self, "key_data")

    @key_data.setter
    def key_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_data", value)


@pulumi.input_type
class LinuxProfilePropertiesSshArgs:
    def __init__(__self__, *,
                 public_keys: Optional[pulumi.Input[Sequence[pulumi.Input['LinuxProfilePropertiesPublicKeysArgs']]]] = None):
        """
        SSH configuration for VMs of the provisioned cluster.
        :param pulumi.Input[Sequence[pulumi.Input['LinuxProfilePropertiesPublicKeysArgs']]] public_keys: The list of SSH public keys used to authenticate with VMs. A maximum of 1 key may be specified.
        """
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LinuxProfilePropertiesPublicKeysArgs']]]]:
        """
        The list of SSH public keys used to authenticate with VMs. A maximum of 1 key may be specified.
        """
        return pulumi.get(self, "public_keys")

    @public_keys.setter
    def public_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LinuxProfilePropertiesPublicKeysArgs']]]]):
        pulumi.set(self, "public_keys", value)


@pulumi.input_type
class LinuxProfilePropertiesArgs:
    def __init__(__self__, *,
                 ssh: Optional[pulumi.Input['LinuxProfilePropertiesSshArgs']] = None):
        """
        SSH profile for control plane and nodepool VMs of the provisioned cluster.
        :param pulumi.Input['LinuxProfilePropertiesSshArgs'] ssh: SSH configuration for VMs of the provisioned cluster.
        """
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['LinuxProfilePropertiesSshArgs']]:
        """
        SSH configuration for VMs of the provisioned cluster.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['LinuxProfilePropertiesSshArgs']]):
        pulumi.set(self, "ssh", value)


@pulumi.input_type
class NamedAgentPoolProfileArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 enable_auto_scaling: Optional[pulumi.Input[bool]] = None,
                 max_count: Optional[pulumi.Input[int]] = None,
                 max_pods: Optional[pulumi.Input[int]] = None,
                 min_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 node_taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 os_sku: Optional[pulumi.Input[Union[str, 'OSSKU']]] = None,
                 os_type: Optional[pulumi.Input[Union[str, 'OsType']]] = None,
                 vm_size: Optional[pulumi.Input[str]] = None):
        """
        Profile of the default agent pool along with a name parameter
        :param pulumi.Input[int] count: Number of nodes in the agent pool. The default value is 1.
        :param pulumi.Input[bool] enable_auto_scaling: Whether to enable auto-scaler. Default value is false
        :param pulumi.Input[int] max_count: The maximum number of nodes for auto-scaling
        :param pulumi.Input[int] max_pods: The maximum number of pods that can run on a node.
        :param pulumi.Input[int] min_count: The minimum number of nodes for auto-scaling
        :param pulumi.Input[str] name: Unique name of the default agent pool in the context of the provisioned cluster. Default value is <clusterName>-nodepool1
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_labels: The node labels to be persisted across all nodes in agent pool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_taints: Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
        :param pulumi.Input[Union[str, 'OSSKU']] os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        :param pulumi.Input[Union[str, 'OsType']] os_type: OSType to be used to specify OS type for the VMs. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
        :param pulumi.Input[str] vm_size: The VM sku size of the agent pool node VMs.
        """
        if count is None:
            count = 1
        if count is not None:
            pulumi.set(__self__, "count", count)
        if enable_auto_scaling is None:
            enable_auto_scaling = False
        if enable_auto_scaling is not None:
            pulumi.set(__self__, "enable_auto_scaling", enable_auto_scaling)
        if max_count is not None:
            pulumi.set(__self__, "max_count", max_count)
        if max_pods is not None:
            pulumi.set(__self__, "max_pods", max_pods)
        if min_count is not None:
            pulumi.set(__self__, "min_count", min_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_labels is not None:
            pulumi.set(__self__, "node_labels", node_labels)
        if node_taints is not None:
            pulumi.set(__self__, "node_taints", node_taints)
        if os_sku is not None:
            pulumi.set(__self__, "os_sku", os_sku)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of nodes in the agent pool. The default value is 1.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="enableAutoScaling")
    def enable_auto_scaling(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable auto-scaler. Default value is false
        """
        return pulumi.get(self, "enable_auto_scaling")

    @enable_auto_scaling.setter
    def enable_auto_scaling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_auto_scaling", value)

    @property
    @pulumi.getter(name="maxCount")
    def max_count(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of nodes for auto-scaling
        """
        return pulumi.get(self, "max_count")

    @max_count.setter
    def max_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_count", value)

    @property
    @pulumi.getter(name="maxPods")
    def max_pods(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of pods that can run on a node.
        """
        return pulumi.get(self, "max_pods")

    @max_pods.setter
    def max_pods(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pods", value)

    @property
    @pulumi.getter(name="minCount")
    def min_count(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum number of nodes for auto-scaling
        """
        return pulumi.get(self, "min_count")

    @min_count.setter
    def min_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_count", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of the default agent pool in the context of the provisioned cluster. Default value is <clusterName>-nodepool1
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeLabels")
    def node_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The node labels to be persisted across all nodes in agent pool.
        """
        return pulumi.get(self, "node_labels")

    @node_labels.setter
    def node_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_labels", value)

    @property
    @pulumi.getter(name="nodeTaints")
    def node_taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
        """
        return pulumi.get(self, "node_taints")

    @node_taints.setter
    def node_taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_taints", value)

    @property
    @pulumi.getter(name="osSKU")
    def os_sku(self) -> Optional[pulumi.Input[Union[str, 'OSSKU']]]:
        """
        Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        """
        return pulumi.get(self, "os_sku")

    @os_sku.setter
    def os_sku(self, value: Optional[pulumi.Input[Union[str, 'OSSKU']]]):
        pulumi.set(self, "os_sku", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[Union[str, 'OsType']]]:
        """
        OSType to be used to specify OS type for the VMs. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[Union[str, 'OsType']]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        The VM sku size of the agent pool node VMs.
        """
        return pulumi.get(self, "vm_size")

    @vm_size.setter
    def vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_size", value)


@pulumi.input_type
class NetworkProfileLoadBalancerProfileArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None):
        """
        Profile of the HA Proxy load balancer.
        :param pulumi.Input[int] count: Number of HA Proxy load balancer VMs. The default value is 0.
        """
        if count is None:
            count = 0
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of HA Proxy load balancer VMs. The default value is 0.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)


@pulumi.input_type
class NetworkProfileArgs:
    def __init__(__self__, *,
                 load_balancer_profile: Optional[pulumi.Input['NetworkProfileLoadBalancerProfileArgs']] = None,
                 network_policy: Optional[pulumi.Input[Union[str, 'NetworkPolicy']]] = None,
                 pod_cidr: Optional[pulumi.Input[str]] = None):
        """
        The network configuration profile for the provisioned cluster.
        :param pulumi.Input['NetworkProfileLoadBalancerProfileArgs'] load_balancer_profile: Profile of the HA Proxy load balancer.
        :param pulumi.Input[Union[str, 'NetworkPolicy']] network_policy: Network policy used for building Kubernetes network. Possible values include: 'calico'.
        :param pulumi.Input[str] pod_cidr: A CIDR notation IP Address range from which to assign pod IPs.
        """
        if load_balancer_profile is not None:
            pulumi.set(__self__, "load_balancer_profile", load_balancer_profile)
        if network_policy is None:
            network_policy = 'calico'
        if network_policy is not None:
            pulumi.set(__self__, "network_policy", network_policy)
        if pod_cidr is not None:
            pulumi.set(__self__, "pod_cidr", pod_cidr)

    @property
    @pulumi.getter(name="loadBalancerProfile")
    def load_balancer_profile(self) -> Optional[pulumi.Input['NetworkProfileLoadBalancerProfileArgs']]:
        """
        Profile of the HA Proxy load balancer.
        """
        return pulumi.get(self, "load_balancer_profile")

    @load_balancer_profile.setter
    def load_balancer_profile(self, value: Optional[pulumi.Input['NetworkProfileLoadBalancerProfileArgs']]):
        pulumi.set(self, "load_balancer_profile", value)

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional[pulumi.Input[Union[str, 'NetworkPolicy']]]:
        """
        Network policy used for building Kubernetes network. Possible values include: 'calico'.
        """
        return pulumi.get(self, "network_policy")

    @network_policy.setter
    def network_policy(self, value: Optional[pulumi.Input[Union[str, 'NetworkPolicy']]]):
        pulumi.set(self, "network_policy", value)

    @property
    @pulumi.getter(name="podCidr")
    def pod_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A CIDR notation IP Address range from which to assign pod IPs.
        """
        return pulumi.get(self, "pod_cidr")

    @pod_cidr.setter
    def pod_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_cidr", value)


@pulumi.input_type
class ProvisionedClusterLicenseProfileArgs:
    def __init__(__self__, *,
                 azure_hybrid_benefit: Optional[pulumi.Input[Union[str, 'AzureHybridBenefit']]] = None):
        """
        The license profile of the provisioned cluster.
        :param pulumi.Input[Union[str, 'AzureHybridBenefit']] azure_hybrid_benefit: Indicates whether Azure Hybrid Benefit is opted in. Default value is false
        """
        if azure_hybrid_benefit is None:
            azure_hybrid_benefit = 'NotApplicable'
        if azure_hybrid_benefit is not None:
            pulumi.set(__self__, "azure_hybrid_benefit", azure_hybrid_benefit)

    @property
    @pulumi.getter(name="azureHybridBenefit")
    def azure_hybrid_benefit(self) -> Optional[pulumi.Input[Union[str, 'AzureHybridBenefit']]]:
        """
        Indicates whether Azure Hybrid Benefit is opted in. Default value is false
        """
        return pulumi.get(self, "azure_hybrid_benefit")

    @azure_hybrid_benefit.setter
    def azure_hybrid_benefit(self, value: Optional[pulumi.Input[Union[str, 'AzureHybridBenefit']]]):
        pulumi.set(self, "azure_hybrid_benefit", value)


@pulumi.input_type
class ProvisionedClusterPropertiesAutoScalerProfileArgs:
    def __init__(__self__, *,
                 balance_similar_node_groups: Optional[pulumi.Input[str]] = None,
                 expander: Optional[pulumi.Input[Union[str, 'Expander']]] = None,
                 max_empty_bulk_delete: Optional[pulumi.Input[str]] = None,
                 max_graceful_termination_sec: Optional[pulumi.Input[str]] = None,
                 max_node_provision_time: Optional[pulumi.Input[str]] = None,
                 max_total_unready_percentage: Optional[pulumi.Input[str]] = None,
                 new_pod_scale_up_delay: Optional[pulumi.Input[str]] = None,
                 ok_total_unready_count: Optional[pulumi.Input[str]] = None,
                 scale_down_delay_after_add: Optional[pulumi.Input[str]] = None,
                 scale_down_delay_after_delete: Optional[pulumi.Input[str]] = None,
                 scale_down_delay_after_failure: Optional[pulumi.Input[str]] = None,
                 scale_down_unneeded_time: Optional[pulumi.Input[str]] = None,
                 scale_down_unready_time: Optional[pulumi.Input[str]] = None,
                 scale_down_utilization_threshold: Optional[pulumi.Input[str]] = None,
                 scan_interval: Optional[pulumi.Input[str]] = None,
                 skip_nodes_with_local_storage: Optional[pulumi.Input[str]] = None,
                 skip_nodes_with_system_pods: Optional[pulumi.Input[str]] = None):
        """
        Parameters to be applied to the cluster-autoscaler when auto scaling is enabled for the provisioned cluster.
        :param pulumi.Input[str] balance_similar_node_groups: Valid values are 'true' and 'false'
        :param pulumi.Input[Union[str, 'Expander']] expander: If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
        :param pulumi.Input[str] max_empty_bulk_delete: The default is 10.
        :param pulumi.Input[str] max_graceful_termination_sec: The default is 600.
        :param pulumi.Input[str] max_node_provision_time: The default is '15m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        :param pulumi.Input[str] max_total_unready_percentage: The default is 45. The maximum is 100 and the minimum is 0.
        :param pulumi.Input[str] new_pod_scale_up_delay: For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they're a certain age. The default is '0s'. Values must be an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).
        :param pulumi.Input[str] ok_total_unready_count: This must be an integer. The default is 3.
        :param pulumi.Input[str] scale_down_delay_after_add: The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        :param pulumi.Input[str] scale_down_delay_after_delete: The default is the scan-interval. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        :param pulumi.Input[str] scale_down_delay_after_failure: The default is '3m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        :param pulumi.Input[str] scale_down_unneeded_time: The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        :param pulumi.Input[str] scale_down_unready_time: The default is '20m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        :param pulumi.Input[str] scale_down_utilization_threshold: The default is '0.5'.
        :param pulumi.Input[str] scan_interval: The default is '10'. Values must be an integer number of seconds.
        :param pulumi.Input[str] skip_nodes_with_local_storage: The default is true.
        :param pulumi.Input[str] skip_nodes_with_system_pods: The default is true.
        """
        if balance_similar_node_groups is not None:
            pulumi.set(__self__, "balance_similar_node_groups", balance_similar_node_groups)
        if expander is not None:
            pulumi.set(__self__, "expander", expander)
        if max_empty_bulk_delete is not None:
            pulumi.set(__self__, "max_empty_bulk_delete", max_empty_bulk_delete)
        if max_graceful_termination_sec is not None:
            pulumi.set(__self__, "max_graceful_termination_sec", max_graceful_termination_sec)
        if max_node_provision_time is not None:
            pulumi.set(__self__, "max_node_provision_time", max_node_provision_time)
        if max_total_unready_percentage is not None:
            pulumi.set(__self__, "max_total_unready_percentage", max_total_unready_percentage)
        if new_pod_scale_up_delay is not None:
            pulumi.set(__self__, "new_pod_scale_up_delay", new_pod_scale_up_delay)
        if ok_total_unready_count is not None:
            pulumi.set(__self__, "ok_total_unready_count", ok_total_unready_count)
        if scale_down_delay_after_add is not None:
            pulumi.set(__self__, "scale_down_delay_after_add", scale_down_delay_after_add)
        if scale_down_delay_after_delete is not None:
            pulumi.set(__self__, "scale_down_delay_after_delete", scale_down_delay_after_delete)
        if scale_down_delay_after_failure is not None:
            pulumi.set(__self__, "scale_down_delay_after_failure", scale_down_delay_after_failure)
        if scale_down_unneeded_time is not None:
            pulumi.set(__self__, "scale_down_unneeded_time", scale_down_unneeded_time)
        if scale_down_unready_time is not None:
            pulumi.set(__self__, "scale_down_unready_time", scale_down_unready_time)
        if scale_down_utilization_threshold is not None:
            pulumi.set(__self__, "scale_down_utilization_threshold", scale_down_utilization_threshold)
        if scan_interval is not None:
            pulumi.set(__self__, "scan_interval", scan_interval)
        if skip_nodes_with_local_storage is not None:
            pulumi.set(__self__, "skip_nodes_with_local_storage", skip_nodes_with_local_storage)
        if skip_nodes_with_system_pods is not None:
            pulumi.set(__self__, "skip_nodes_with_system_pods", skip_nodes_with_system_pods)

    @property
    @pulumi.getter(name="balanceSimilarNodeGroups")
    def balance_similar_node_groups(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are 'true' and 'false'
        """
        return pulumi.get(self, "balance_similar_node_groups")

    @balance_similar_node_groups.setter
    def balance_similar_node_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "balance_similar_node_groups", value)

    @property
    @pulumi.getter
    def expander(self) -> Optional[pulumi.Input[Union[str, 'Expander']]]:
        """
        If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
        """
        return pulumi.get(self, "expander")

    @expander.setter
    def expander(self, value: Optional[pulumi.Input[Union[str, 'Expander']]]):
        pulumi.set(self, "expander", value)

    @property
    @pulumi.getter(name="maxEmptyBulkDelete")
    def max_empty_bulk_delete(self) -> Optional[pulumi.Input[str]]:
        """
        The default is 10.
        """
        return pulumi.get(self, "max_empty_bulk_delete")

    @max_empty_bulk_delete.setter
    def max_empty_bulk_delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_empty_bulk_delete", value)

    @property
    @pulumi.getter(name="maxGracefulTerminationSec")
    def max_graceful_termination_sec(self) -> Optional[pulumi.Input[str]]:
        """
        The default is 600.
        """
        return pulumi.get(self, "max_graceful_termination_sec")

    @max_graceful_termination_sec.setter
    def max_graceful_termination_sec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_graceful_termination_sec", value)

    @property
    @pulumi.getter(name="maxNodeProvisionTime")
    def max_node_provision_time(self) -> Optional[pulumi.Input[str]]:
        """
        The default is '15m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        """
        return pulumi.get(self, "max_node_provision_time")

    @max_node_provision_time.setter
    def max_node_provision_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_node_provision_time", value)

    @property
    @pulumi.getter(name="maxTotalUnreadyPercentage")
    def max_total_unready_percentage(self) -> Optional[pulumi.Input[str]]:
        """
        The default is 45. The maximum is 100 and the minimum is 0.
        """
        return pulumi.get(self, "max_total_unready_percentage")

    @max_total_unready_percentage.setter
    def max_total_unready_percentage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_total_unready_percentage", value)

    @property
    @pulumi.getter(name="newPodScaleUpDelay")
    def new_pod_scale_up_delay(self) -> Optional[pulumi.Input[str]]:
        """
        For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they're a certain age. The default is '0s'. Values must be an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).
        """
        return pulumi.get(self, "new_pod_scale_up_delay")

    @new_pod_scale_up_delay.setter
    def new_pod_scale_up_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "new_pod_scale_up_delay", value)

    @property
    @pulumi.getter(name="okTotalUnreadyCount")
    def ok_total_unready_count(self) -> Optional[pulumi.Input[str]]:
        """
        This must be an integer. The default is 3.
        """
        return pulumi.get(self, "ok_total_unready_count")

    @ok_total_unready_count.setter
    def ok_total_unready_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ok_total_unready_count", value)

    @property
    @pulumi.getter(name="scaleDownDelayAfterAdd")
    def scale_down_delay_after_add(self) -> Optional[pulumi.Input[str]]:
        """
        The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        """
        return pulumi.get(self, "scale_down_delay_after_add")

    @scale_down_delay_after_add.setter
    def scale_down_delay_after_add(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_down_delay_after_add", value)

    @property
    @pulumi.getter(name="scaleDownDelayAfterDelete")
    def scale_down_delay_after_delete(self) -> Optional[pulumi.Input[str]]:
        """
        The default is the scan-interval. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        """
        return pulumi.get(self, "scale_down_delay_after_delete")

    @scale_down_delay_after_delete.setter
    def scale_down_delay_after_delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_down_delay_after_delete", value)

    @property
    @pulumi.getter(name="scaleDownDelayAfterFailure")
    def scale_down_delay_after_failure(self) -> Optional[pulumi.Input[str]]:
        """
        The default is '3m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        """
        return pulumi.get(self, "scale_down_delay_after_failure")

    @scale_down_delay_after_failure.setter
    def scale_down_delay_after_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_down_delay_after_failure", value)

    @property
    @pulumi.getter(name="scaleDownUnneededTime")
    def scale_down_unneeded_time(self) -> Optional[pulumi.Input[str]]:
        """
        The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        """
        return pulumi.get(self, "scale_down_unneeded_time")

    @scale_down_unneeded_time.setter
    def scale_down_unneeded_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_down_unneeded_time", value)

    @property
    @pulumi.getter(name="scaleDownUnreadyTime")
    def scale_down_unready_time(self) -> Optional[pulumi.Input[str]]:
        """
        The default is '20m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        """
        return pulumi.get(self, "scale_down_unready_time")

    @scale_down_unready_time.setter
    def scale_down_unready_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_down_unready_time", value)

    @property
    @pulumi.getter(name="scaleDownUtilizationThreshold")
    def scale_down_utilization_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        The default is '0.5'.
        """
        return pulumi.get(self, "scale_down_utilization_threshold")

    @scale_down_utilization_threshold.setter
    def scale_down_utilization_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_down_utilization_threshold", value)

    @property
    @pulumi.getter(name="scanInterval")
    def scan_interval(self) -> Optional[pulumi.Input[str]]:
        """
        The default is '10'. Values must be an integer number of seconds.
        """
        return pulumi.get(self, "scan_interval")

    @scan_interval.setter
    def scan_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_interval", value)

    @property
    @pulumi.getter(name="skipNodesWithLocalStorage")
    def skip_nodes_with_local_storage(self) -> Optional[pulumi.Input[str]]:
        """
        The default is true.
        """
        return pulumi.get(self, "skip_nodes_with_local_storage")

    @skip_nodes_with_local_storage.setter
    def skip_nodes_with_local_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_nodes_with_local_storage", value)

    @property
    @pulumi.getter(name="skipNodesWithSystemPods")
    def skip_nodes_with_system_pods(self) -> Optional[pulumi.Input[str]]:
        """
        The default is true.
        """
        return pulumi.get(self, "skip_nodes_with_system_pods")

    @skip_nodes_with_system_pods.setter
    def skip_nodes_with_system_pods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_nodes_with_system_pods", value)


@pulumi.input_type
class ProvisionedClusterPropertiesArgs:
    def __init__(__self__, *,
                 agent_pool_profiles: Optional[pulumi.Input[Sequence[pulumi.Input['NamedAgentPoolProfileArgs']]]] = None,
                 auto_scaler_profile: Optional[pulumi.Input['ProvisionedClusterPropertiesAutoScalerProfileArgs']] = None,
                 cloud_provider_profile: Optional[pulumi.Input['CloudProviderProfileArgs']] = None,
                 cluster_vm_access_profile: Optional[pulumi.Input['ClusterVMAccessProfileArgs']] = None,
                 control_plane: Optional[pulumi.Input['ControlPlaneProfileArgs']] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 license_profile: Optional[pulumi.Input['ProvisionedClusterLicenseProfileArgs']] = None,
                 linux_profile: Optional[pulumi.Input['LinuxProfilePropertiesArgs']] = None,
                 network_profile: Optional[pulumi.Input['NetworkProfileArgs']] = None,
                 storage_profile: Optional[pulumi.Input['StorageProfileArgs']] = None):
        """
        Properties of the provisioned cluster.
        :param pulumi.Input[Sequence[pulumi.Input['NamedAgentPoolProfileArgs']]] agent_pool_profiles: The agent pool properties for the provisioned cluster.
        :param pulumi.Input['ProvisionedClusterPropertiesAutoScalerProfileArgs'] auto_scaler_profile: Parameters to be applied to the cluster-autoscaler when auto scaling is enabled for the provisioned cluster.
        :param pulumi.Input['CloudProviderProfileArgs'] cloud_provider_profile: The profile for the underlying cloud infrastructure provider for the provisioned cluster.
        :param pulumi.Input['ClusterVMAccessProfileArgs'] cluster_vm_access_profile: The SSH restricted access profile for the VMs in the provisioned cluster.
        :param pulumi.Input['ControlPlaneProfileArgs'] control_plane: The profile for control plane of the provisioned cluster.
        :param pulumi.Input[str] kubernetes_version: The version of Kubernetes in use by the provisioned cluster.
        :param pulumi.Input['ProvisionedClusterLicenseProfileArgs'] license_profile: The license profile of the provisioned cluster.
        :param pulumi.Input['LinuxProfilePropertiesArgs'] linux_profile: The profile for Linux VMs in the provisioned cluster.
        :param pulumi.Input['NetworkProfileArgs'] network_profile: The network configuration profile for the provisioned cluster.
        :param pulumi.Input['StorageProfileArgs'] storage_profile: The storage configuration profile for the provisioned cluster.
        """
        if agent_pool_profiles is not None:
            pulumi.set(__self__, "agent_pool_profiles", agent_pool_profiles)
        if auto_scaler_profile is not None:
            pulumi.set(__self__, "auto_scaler_profile", auto_scaler_profile)
        if cloud_provider_profile is not None:
            pulumi.set(__self__, "cloud_provider_profile", cloud_provider_profile)
        if cluster_vm_access_profile is not None:
            pulumi.set(__self__, "cluster_vm_access_profile", cluster_vm_access_profile)
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if license_profile is not None:
            pulumi.set(__self__, "license_profile", license_profile)
        if linux_profile is not None:
            pulumi.set(__self__, "linux_profile", linux_profile)
        if network_profile is not None:
            pulumi.set(__self__, "network_profile", network_profile)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)

    @property
    @pulumi.getter(name="agentPoolProfiles")
    def agent_pool_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NamedAgentPoolProfileArgs']]]]:
        """
        The agent pool properties for the provisioned cluster.
        """
        return pulumi.get(self, "agent_pool_profiles")

    @agent_pool_profiles.setter
    def agent_pool_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NamedAgentPoolProfileArgs']]]]):
        pulumi.set(self, "agent_pool_profiles", value)

    @property
    @pulumi.getter(name="autoScalerProfile")
    def auto_scaler_profile(self) -> Optional[pulumi.Input['ProvisionedClusterPropertiesAutoScalerProfileArgs']]:
        """
        Parameters to be applied to the cluster-autoscaler when auto scaling is enabled for the provisioned cluster.
        """
        return pulumi.get(self, "auto_scaler_profile")

    @auto_scaler_profile.setter
    def auto_scaler_profile(self, value: Optional[pulumi.Input['ProvisionedClusterPropertiesAutoScalerProfileArgs']]):
        pulumi.set(self, "auto_scaler_profile", value)

    @property
    @pulumi.getter(name="cloudProviderProfile")
    def cloud_provider_profile(self) -> Optional[pulumi.Input['CloudProviderProfileArgs']]:
        """
        The profile for the underlying cloud infrastructure provider for the provisioned cluster.
        """
        return pulumi.get(self, "cloud_provider_profile")

    @cloud_provider_profile.setter
    def cloud_provider_profile(self, value: Optional[pulumi.Input['CloudProviderProfileArgs']]):
        pulumi.set(self, "cloud_provider_profile", value)

    @property
    @pulumi.getter(name="clusterVMAccessProfile")
    def cluster_vm_access_profile(self) -> Optional[pulumi.Input['ClusterVMAccessProfileArgs']]:
        """
        The SSH restricted access profile for the VMs in the provisioned cluster.
        """
        return pulumi.get(self, "cluster_vm_access_profile")

    @cluster_vm_access_profile.setter
    def cluster_vm_access_profile(self, value: Optional[pulumi.Input['ClusterVMAccessProfileArgs']]):
        pulumi.set(self, "cluster_vm_access_profile", value)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional[pulumi.Input['ControlPlaneProfileArgs']]:
        """
        The profile for control plane of the provisioned cluster.
        """
        return pulumi.get(self, "control_plane")

    @control_plane.setter
    def control_plane(self, value: Optional[pulumi.Input['ControlPlaneProfileArgs']]):
        pulumi.set(self, "control_plane", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of Kubernetes in use by the provisioned cluster.
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="licenseProfile")
    def license_profile(self) -> Optional[pulumi.Input['ProvisionedClusterLicenseProfileArgs']]:
        """
        The license profile of the provisioned cluster.
        """
        return pulumi.get(self, "license_profile")

    @license_profile.setter
    def license_profile(self, value: Optional[pulumi.Input['ProvisionedClusterLicenseProfileArgs']]):
        pulumi.set(self, "license_profile", value)

    @property
    @pulumi.getter(name="linuxProfile")
    def linux_profile(self) -> Optional[pulumi.Input['LinuxProfilePropertiesArgs']]:
        """
        The profile for Linux VMs in the provisioned cluster.
        """
        return pulumi.get(self, "linux_profile")

    @linux_profile.setter
    def linux_profile(self, value: Optional[pulumi.Input['LinuxProfilePropertiesArgs']]):
        pulumi.set(self, "linux_profile", value)

    @property
    @pulumi.getter(name="networkProfile")
    def network_profile(self) -> Optional[pulumi.Input['NetworkProfileArgs']]:
        """
        The network configuration profile for the provisioned cluster.
        """
        return pulumi.get(self, "network_profile")

    @network_profile.setter
    def network_profile(self, value: Optional[pulumi.Input['NetworkProfileArgs']]):
        pulumi.set(self, "network_profile", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input['StorageProfileArgs']]:
        """
        The storage configuration profile for the provisioned cluster.
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input['StorageProfileArgs']]):
        pulumi.set(self, "storage_profile", value)


@pulumi.input_type
class StorageProfileNfsCSIDriverArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        NFS CSI Driver settings for the storage profile.
        :param pulumi.Input[bool] enabled: Indicates whether to enable NFS CSI Driver. The default value is true.
        """
        if enabled is None:
            enabled = True
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to enable NFS CSI Driver. The default value is true.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class StorageProfileSmbCSIDriverArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        SMB CSI Driver settings for the storage profile.
        :param pulumi.Input[bool] enabled: Indicates whether to enable SMB CSI Driver. The default value is true.
        """
        if enabled is None:
            enabled = True
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to enable SMB CSI Driver. The default value is true.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class StorageProfileArgs:
    def __init__(__self__, *,
                 nfs_csi_driver: Optional[pulumi.Input['StorageProfileNfsCSIDriverArgs']] = None,
                 smb_csi_driver: Optional[pulumi.Input['StorageProfileSmbCSIDriverArgs']] = None):
        """
        The storage configuration profile for the provisioned cluster.
        :param pulumi.Input['StorageProfileNfsCSIDriverArgs'] nfs_csi_driver: NFS CSI Driver settings for the storage profile.
        :param pulumi.Input['StorageProfileSmbCSIDriverArgs'] smb_csi_driver: SMB CSI Driver settings for the storage profile.
        """
        if nfs_csi_driver is not None:
            pulumi.set(__self__, "nfs_csi_driver", nfs_csi_driver)
        if smb_csi_driver is not None:
            pulumi.set(__self__, "smb_csi_driver", smb_csi_driver)

    @property
    @pulumi.getter(name="nfsCsiDriver")
    def nfs_csi_driver(self) -> Optional[pulumi.Input['StorageProfileNfsCSIDriverArgs']]:
        """
        NFS CSI Driver settings for the storage profile.
        """
        return pulumi.get(self, "nfs_csi_driver")

    @nfs_csi_driver.setter
    def nfs_csi_driver(self, value: Optional[pulumi.Input['StorageProfileNfsCSIDriverArgs']]):
        pulumi.set(self, "nfs_csi_driver", value)

    @property
    @pulumi.getter(name="smbCsiDriver")
    def smb_csi_driver(self) -> Optional[pulumi.Input['StorageProfileSmbCSIDriverArgs']]:
        """
        SMB CSI Driver settings for the storage profile.
        """
        return pulumi.get(self, "smb_csi_driver")

    @smb_csi_driver.setter
    def smb_csi_driver(self, value: Optional[pulumi.Input['StorageProfileSmbCSIDriverArgs']]):
        pulumi.set(self, "smb_csi_driver", value)


@pulumi.input_type
class VirtualNetworkExtendedLocationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ExtendedLocationTypes']]] = None):
        """
        Extended location pointing to the underlying infrastructure
        :param pulumi.Input[str] name: ARM Id of the extended location.
        :param pulumi.Input[Union[str, 'ExtendedLocationTypes']] type: The extended location type. Allowed value: 'CustomLocation'
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        ARM Id of the extended location.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ExtendedLocationTypes']]]:
        """
        The extended location type. Allowed value: 'CustomLocation'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ExtendedLocationTypes']]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VirtualNetworkPropertiesHciArgs:
    def __init__(__self__, *,
                 moc_group: Optional[pulumi.Input[str]] = None,
                 moc_location: Optional[pulumi.Input[str]] = None,
                 moc_vnet_name: Optional[pulumi.Input[str]] = None):
        """
        Infrastructure network profile for HCI platform
        :param pulumi.Input[str] moc_group: Group in MOC(Microsoft On-premises Cloud)
        :param pulumi.Input[str] moc_location: Location in MOC(Microsoft On-premises Cloud)
        :param pulumi.Input[str] moc_vnet_name: Virtual Network name in MOC(Microsoft On-premises Cloud)
        """
        if moc_group is not None:
            pulumi.set(__self__, "moc_group", moc_group)
        if moc_location is not None:
            pulumi.set(__self__, "moc_location", moc_location)
        if moc_vnet_name is not None:
            pulumi.set(__self__, "moc_vnet_name", moc_vnet_name)

    @property
    @pulumi.getter(name="mocGroup")
    def moc_group(self) -> Optional[pulumi.Input[str]]:
        """
        Group in MOC(Microsoft On-premises Cloud)
        """
        return pulumi.get(self, "moc_group")

    @moc_group.setter
    def moc_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "moc_group", value)

    @property
    @pulumi.getter(name="mocLocation")
    def moc_location(self) -> Optional[pulumi.Input[str]]:
        """
        Location in MOC(Microsoft On-premises Cloud)
        """
        return pulumi.get(self, "moc_location")

    @moc_location.setter
    def moc_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "moc_location", value)

    @property
    @pulumi.getter(name="mocVnetName")
    def moc_vnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Network name in MOC(Microsoft On-premises Cloud)
        """
        return pulumi.get(self, "moc_vnet_name")

    @moc_vnet_name.setter
    def moc_vnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "moc_vnet_name", value)


@pulumi.input_type
class VirtualNetworkPropertiesInfraVnetProfileArgs:
    def __init__(__self__, *,
                 hci: Optional[pulumi.Input['VirtualNetworkPropertiesHciArgs']] = None):
        """
        :param pulumi.Input['VirtualNetworkPropertiesHciArgs'] hci: Infrastructure network profile for HCI platform
        """
        if hci is not None:
            pulumi.set(__self__, "hci", hci)

    @property
    @pulumi.getter
    def hci(self) -> Optional[pulumi.Input['VirtualNetworkPropertiesHciArgs']]:
        """
        Infrastructure network profile for HCI platform
        """
        return pulumi.get(self, "hci")

    @hci.setter
    def hci(self, value: Optional[pulumi.Input['VirtualNetworkPropertiesHciArgs']]):
        pulumi.set(self, "hci", value)


@pulumi.input_type
class VirtualNetworkPropertiesVipPoolArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: Ending IP address for the IP Pool
        :param pulumi.Input[str] start_ip: Starting IP address for the IP Pool
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIP")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Ending IP address for the IP Pool
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="startIP")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Starting IP address for the IP Pool
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class VirtualNetworkPropertiesVmipPoolArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: Ending IP address for the IP Pool
        :param pulumi.Input[str] start_ip: Starting IP address for the IP Pool
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIP")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Ending IP address for the IP Pool
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="startIP")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Starting IP address for the IP Pool
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class VirtualNetworkPropertiesArgs:
    def __init__(__self__, *,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 infra_vnet_profile: Optional[pulumi.Input['VirtualNetworkPropertiesInfraVnetProfileArgs']] = None,
                 ip_address_prefix: Optional[pulumi.Input[str]] = None,
                 vip_pool: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVipPoolArgs']]]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vmip_pool: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVmipPoolArgs']]]] = None):
        """
        Properties of the virtual network resource
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: List of DNS server IP Addresses associated with the network
        :param pulumi.Input[str] gateway: IP Address of the Gateway associated with the network
        :param pulumi.Input[str] ip_address_prefix: IP Address Prefix of the network
        :param pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVipPoolArgs']]] vip_pool: Range of IP Addresses for Kubernetes API Server and services if using HA Proxy load balancer
        :param pulumi.Input[int] vlan_id: VLAN Id used by the network
        :param pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVmipPoolArgs']]] vmip_pool: Range of IP Addresses for Kubernetes node VMs
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if infra_vnet_profile is not None:
            pulumi.set(__self__, "infra_vnet_profile", infra_vnet_profile)
        if ip_address_prefix is not None:
            pulumi.set(__self__, "ip_address_prefix", ip_address_prefix)
        if vip_pool is not None:
            pulumi.set(__self__, "vip_pool", vip_pool)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vmip_pool is not None:
            pulumi.set(__self__, "vmip_pool", vmip_pool)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNS server IP Addresses associated with the network
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address of the Gateway associated with the network
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="infraVnetProfile")
    def infra_vnet_profile(self) -> Optional[pulumi.Input['VirtualNetworkPropertiesInfraVnetProfileArgs']]:
        return pulumi.get(self, "infra_vnet_profile")

    @infra_vnet_profile.setter
    def infra_vnet_profile(self, value: Optional[pulumi.Input['VirtualNetworkPropertiesInfraVnetProfileArgs']]):
        pulumi.set(self, "infra_vnet_profile", value)

    @property
    @pulumi.getter(name="ipAddressPrefix")
    def ip_address_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address Prefix of the network
        """
        return pulumi.get(self, "ip_address_prefix")

    @ip_address_prefix.setter
    def ip_address_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address_prefix", value)

    @property
    @pulumi.getter(name="vipPool")
    def vip_pool(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVipPoolArgs']]]]:
        """
        Range of IP Addresses for Kubernetes API Server and services if using HA Proxy load balancer
        """
        return pulumi.get(self, "vip_pool")

    @vip_pool.setter
    def vip_pool(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVipPoolArgs']]]]):
        pulumi.set(self, "vip_pool", value)

    @property
    @pulumi.getter(name="vlanID")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN Id used by the network
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vmipPool")
    def vmip_pool(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVmipPoolArgs']]]]:
        """
        Range of IP Addresses for Kubernetes node VMs
        """
        return pulumi.get(self, "vmip_pool")

    @vmip_pool.setter
    def vmip_pool(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVmipPoolArgs']]]]):
        pulumi.set(self, "vmip_pool", value)


