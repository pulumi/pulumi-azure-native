# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AgentPoolProvisioningStatusErrorArgs',
    'AgentPoolProvisioningStatusErrorArgsDict',
    'AgentPoolProvisioningStatusOperationStatusArgs',
    'AgentPoolProvisioningStatusOperationStatusArgsDict',
    'AgentPoolProvisioningStatusStatusArgs',
    'AgentPoolProvisioningStatusStatusArgsDict',
    'AgentPoolUpdateProfileArgs',
    'AgentPoolUpdateProfileArgsDict',
    'ExtendedLocationArgs',
    'ExtendedLocationArgsDict',
]

MYPY = False

if not MYPY:
    class AgentPoolProvisioningStatusErrorArgsDict(TypedDict):
        code: NotRequired[pulumi.Input[str]]
        message: NotRequired[pulumi.Input[str]]
elif False:
    AgentPoolProvisioningStatusErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AgentPoolProvisioningStatusErrorArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


if not MYPY:
    class AgentPoolProvisioningStatusOperationStatusArgsDict(TypedDict):
        """
        Contains Provisioning errors
        """
        error: NotRequired[pulumi.Input['AgentPoolProvisioningStatusErrorArgsDict']]
        operation_id: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
elif False:
    AgentPoolProvisioningStatusOperationStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AgentPoolProvisioningStatusOperationStatusArgs:
    def __init__(__self__, *,
                 error: Optional[pulumi.Input['AgentPoolProvisioningStatusErrorArgs']] = None,
                 operation_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Contains Provisioning errors
        """
        if error is not None:
            pulumi.set(__self__, "error", error)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input['AgentPoolProvisioningStatusErrorArgs']]:
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input['AgentPoolProvisioningStatusErrorArgs']]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operation_id")

    @operation_id.setter
    def operation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class AgentPoolProvisioningStatusStatusArgsDict(TypedDict):
        """
        Defines the observed state of the agent pool
        """
        error_message: NotRequired[pulumi.Input[str]]
        """
        ErrorMessage - Error messages during creation of agent pool
        """
        operation_status: NotRequired[pulumi.Input['AgentPoolProvisioningStatusOperationStatusArgsDict']]
        """
        Contains Provisioning errors
        """
        ready_replicas: NotRequired[pulumi.Input[Sequence[pulumi.Input['AgentPoolUpdateProfileArgsDict']]]]
elif False:
    AgentPoolProvisioningStatusStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AgentPoolProvisioningStatusStatusArgs:
    def __init__(__self__, *,
                 error_message: Optional[pulumi.Input[str]] = None,
                 operation_status: Optional[pulumi.Input['AgentPoolProvisioningStatusOperationStatusArgs']] = None,
                 ready_replicas: Optional[pulumi.Input[Sequence[pulumi.Input['AgentPoolUpdateProfileArgs']]]] = None):
        """
        Defines the observed state of the agent pool
        :param pulumi.Input[str] error_message: ErrorMessage - Error messages during creation of agent pool
        :param pulumi.Input['AgentPoolProvisioningStatusOperationStatusArgs'] operation_status: Contains Provisioning errors
        """
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)
        if ready_replicas is not None:
            pulumi.set(__self__, "ready_replicas", ready_replicas)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        """
        ErrorMessage - Error messages during creation of agent pool
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional[pulumi.Input['AgentPoolProvisioningStatusOperationStatusArgs']]:
        """
        Contains Provisioning errors
        """
        return pulumi.get(self, "operation_status")

    @operation_status.setter
    def operation_status(self, value: Optional[pulumi.Input['AgentPoolProvisioningStatusOperationStatusArgs']]):
        pulumi.set(self, "operation_status", value)

    @property
    @pulumi.getter(name="readyReplicas")
    def ready_replicas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AgentPoolUpdateProfileArgs']]]]:
        return pulumi.get(self, "ready_replicas")

    @ready_replicas.setter
    def ready_replicas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AgentPoolUpdateProfileArgs']]]]):
        pulumi.set(self, "ready_replicas", value)


if not MYPY:
    class AgentPoolUpdateProfileArgsDict(TypedDict):
        """
        AgentPool update configuration
        """
        count: NotRequired[pulumi.Input[int]]
        """
        Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        """
        vm_size: NotRequired[pulumi.Input[str]]
        """
        VmSize - The size of the agent pool VMs.
        """
elif False:
    AgentPoolUpdateProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AgentPoolUpdateProfileArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 vm_size: Optional[pulumi.Input[str]] = None):
        """
        AgentPool update configuration
        :param pulumi.Input[int] count: Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        :param pulumi.Input[str] vm_size: VmSize - The size of the agent pool VMs.
        """
        if count is None:
            count = 1
        if count is not None:
            pulumi.set(__self__, "count", count)
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        VmSize - The size of the agent pool VMs.
        """
        return pulumi.get(self, "vm_size")

    @vm_size.setter
    def vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_size", value)


if not MYPY:
    class ExtendedLocationArgsDict(TypedDict):
        """
        Extended Location definition
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The extended location name.
        """
        type: NotRequired[pulumi.Input[Union[str, 'ExtendedLocationTypes']]]
        """
        The extended location type.
        """
elif False:
    ExtendedLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExtendedLocationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ExtendedLocationTypes']]] = None):
        """
        Extended Location definition
        :param pulumi.Input[str] name: The extended location name.
        :param pulumi.Input[Union[str, 'ExtendedLocationTypes']] type: The extended location type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The extended location name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ExtendedLocationTypes']]]:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ExtendedLocationTypes']]]):
        pulumi.set(self, "type", value)


