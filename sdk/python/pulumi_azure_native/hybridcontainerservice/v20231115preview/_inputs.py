# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AgentPoolProvisioningStatusErrorArgs',
    'AgentPoolProvisioningStatusOperationStatusArgs',
    'AgentPoolProvisioningStatusStatusArgs',
    'AgentPoolUpdateProfileArgs',
    'CloudProviderProfileInfraNetworkProfileArgs',
    'CloudProviderProfileArgs',
    'ControlPlaneEndpointProfileControlPlaneEndpointArgs',
    'ControlPlaneProfileArgs',
    'ExtendedLocationArgs',
    'LinuxProfilePropertiesPublicKeysArgs',
    'LinuxProfilePropertiesSshArgs',
    'LinuxProfilePropertiesArgs',
    'NamedAgentPoolProfileArgs',
    'NetworkProfileLoadBalancerProfileArgs',
    'NetworkProfileArgs',
    'ProvisionedClusterLicenseProfileArgs',
    'ProvisionedClusterPropertiesArgs',
    'VirtualNetworkExtendedLocationArgs',
    'VirtualNetworkPropertiesHciArgs',
    'VirtualNetworkPropertiesInfraVnetProfileArgs',
    'VirtualNetworkPropertiesVipPoolArgs',
    'VirtualNetworkPropertiesVmipPoolArgs',
    'VirtualNetworkPropertiesVmwareArgs',
    'VirtualNetworkPropertiesArgs',
]

@pulumi.input_type
class AgentPoolProvisioningStatusErrorArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class AgentPoolProvisioningStatusOperationStatusArgs:
    def __init__(__self__, *,
                 error: Optional[pulumi.Input['AgentPoolProvisioningStatusErrorArgs']] = None,
                 operation_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Contains Provisioning errors
        """
        if error is not None:
            pulumi.set(__self__, "error", error)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input['AgentPoolProvisioningStatusErrorArgs']]:
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input['AgentPoolProvisioningStatusErrorArgs']]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operation_id")

    @operation_id.setter
    def operation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class AgentPoolProvisioningStatusStatusArgs:
    def __init__(__self__, *,
                 error_message: Optional[pulumi.Input[str]] = None,
                 operation_status: Optional[pulumi.Input['AgentPoolProvisioningStatusOperationStatusArgs']] = None,
                 ready_replicas: Optional[pulumi.Input[Sequence[pulumi.Input['AgentPoolUpdateProfileArgs']]]] = None):
        """
        Defines the observed state of the agent pool
        :param pulumi.Input[str] error_message: ErrorMessage - Error messages during creation of agent pool
        :param pulumi.Input['AgentPoolProvisioningStatusOperationStatusArgs'] operation_status: Contains Provisioning errors
        """
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)
        if ready_replicas is not None:
            pulumi.set(__self__, "ready_replicas", ready_replicas)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        """
        ErrorMessage - Error messages during creation of agent pool
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional[pulumi.Input['AgentPoolProvisioningStatusOperationStatusArgs']]:
        """
        Contains Provisioning errors
        """
        return pulumi.get(self, "operation_status")

    @operation_status.setter
    def operation_status(self, value: Optional[pulumi.Input['AgentPoolProvisioningStatusOperationStatusArgs']]):
        pulumi.set(self, "operation_status", value)

    @property
    @pulumi.getter(name="readyReplicas")
    def ready_replicas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AgentPoolUpdateProfileArgs']]]]:
        return pulumi.get(self, "ready_replicas")

    @ready_replicas.setter
    def ready_replicas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AgentPoolUpdateProfileArgs']]]]):
        pulumi.set(self, "ready_replicas", value)


@pulumi.input_type
class AgentPoolUpdateProfileArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 vm_size: Optional[pulumi.Input[str]] = None):
        """
        AgentPool update configuration
        :param pulumi.Input[int] count: Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        :param pulumi.Input[str] vm_size: VmSize - The size of the agent pool VMs.
        """
        if count is None:
            count = 1
        if count is not None:
            pulumi.set(__self__, "count", count)
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        VmSize - The size of the agent pool VMs.
        """
        return pulumi.get(self, "vm_size")

    @vm_size.setter
    def vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_size", value)


@pulumi.input_type
class CloudProviderProfileInfraNetworkProfileArgs:
    def __init__(__self__, *,
                 vnet_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        InfraNetworkProfile - List of infra network profiles for the provisioned cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vnet_subnet_ids: Array of references to azure resource corresponding to the Network object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}
        """
        if vnet_subnet_ids is not None:
            pulumi.set(__self__, "vnet_subnet_ids", vnet_subnet_ids)

    @property
    @pulumi.getter(name="vnetSubnetIds")
    def vnet_subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of references to azure resource corresponding to the Network object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}
        """
        return pulumi.get(self, "vnet_subnet_ids")

    @vnet_subnet_ids.setter
    def vnet_subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vnet_subnet_ids", value)


@pulumi.input_type
class CloudProviderProfileArgs:
    def __init__(__self__, *,
                 infra_network_profile: Optional[pulumi.Input['CloudProviderProfileInfraNetworkProfileArgs']] = None):
        """
        CloudProviderProfile - The underlying cloud infra provider properties.
        :param pulumi.Input['CloudProviderProfileInfraNetworkProfileArgs'] infra_network_profile: InfraNetworkProfile - List of infra network profiles for the provisioned cluster
        """
        if infra_network_profile is not None:
            pulumi.set(__self__, "infra_network_profile", infra_network_profile)

    @property
    @pulumi.getter(name="infraNetworkProfile")
    def infra_network_profile(self) -> Optional[pulumi.Input['CloudProviderProfileInfraNetworkProfileArgs']]:
        """
        InfraNetworkProfile - List of infra network profiles for the provisioned cluster
        """
        return pulumi.get(self, "infra_network_profile")

    @infra_network_profile.setter
    def infra_network_profile(self, value: Optional[pulumi.Input['CloudProviderProfileInfraNetworkProfileArgs']]):
        pulumi.set(self, "infra_network_profile", value)


@pulumi.input_type
class ControlPlaneEndpointProfileControlPlaneEndpointArgs:
    def __init__(__self__, *,
                 host_ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        API server endpoint for the control plane
        :param pulumi.Input[str] host_ip: Host IP address for API server
        :param pulumi.Input[int] port: Port for the API server
        """
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Host IP address for API server
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for the API server
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ControlPlaneProfileArgs:
    def __init__(__self__, *,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 control_plane_endpoint: Optional[pulumi.Input['ControlPlaneEndpointProfileControlPlaneEndpointArgs']] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 linux_profile: Optional[pulumi.Input['LinuxProfilePropertiesArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_image_version: Optional[pulumi.Input[str]] = None,
                 os_sku: Optional[pulumi.Input[Union[str, 'OSSKU']]] = None,
                 os_type: Optional[pulumi.Input[Union[str, 'OsType']]] = None,
                 vm_size: Optional[pulumi.Input[str]] = None):
        """
        ControlPlaneProfile - The control plane properties for the provisioned cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] availability_zones: AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
        :param pulumi.Input['ControlPlaneEndpointProfileControlPlaneEndpointArgs'] control_plane_endpoint: API server endpoint for the control plane
        :param pulumi.Input[int] count: Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        :param pulumi.Input['LinuxProfilePropertiesArgs'] linux_profile: Profile for Linux VMs in the container service cluster.
        :param pulumi.Input[str] name: Unique name of the agent pool profile in the context of the subscription and resource group.
        :param pulumi.Input[str] node_image_version: The version of node image
        :param pulumi.Input[Union[str, 'OSSKU']] os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        :param pulumi.Input[Union[str, 'OsType']] os_type: OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
        :param pulumi.Input[str] vm_size: VmSize - The size of the agent pool VMs.
        """
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if control_plane_endpoint is not None:
            pulumi.set(__self__, "control_plane_endpoint", control_plane_endpoint)
        if count is None:
            count = 1
        if count is not None:
            pulumi.set(__self__, "count", count)
        if linux_profile is not None:
            pulumi.set(__self__, "linux_profile", linux_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_image_version is not None:
            pulumi.set(__self__, "node_image_version", node_image_version)
        if os_sku is not None:
            pulumi.set(__self__, "os_sku", os_sku)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
        """
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "availability_zones", value)

    @property
    @pulumi.getter(name="controlPlaneEndpoint")
    def control_plane_endpoint(self) -> Optional[pulumi.Input['ControlPlaneEndpointProfileControlPlaneEndpointArgs']]:
        """
        API server endpoint for the control plane
        """
        return pulumi.get(self, "control_plane_endpoint")

    @control_plane_endpoint.setter
    def control_plane_endpoint(self, value: Optional[pulumi.Input['ControlPlaneEndpointProfileControlPlaneEndpointArgs']]):
        pulumi.set(self, "control_plane_endpoint", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="linuxProfile")
    def linux_profile(self) -> Optional[pulumi.Input['LinuxProfilePropertiesArgs']]:
        """
        Profile for Linux VMs in the container service cluster.
        """
        return pulumi.get(self, "linux_profile")

    @linux_profile.setter
    def linux_profile(self, value: Optional[pulumi.Input['LinuxProfilePropertiesArgs']]):
        pulumi.set(self, "linux_profile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of the agent pool profile in the context of the subscription and resource group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeImageVersion")
    def node_image_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of node image
        """
        return pulumi.get(self, "node_image_version")

    @node_image_version.setter
    def node_image_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_image_version", value)

    @property
    @pulumi.getter(name="osSKU")
    def os_sku(self) -> Optional[pulumi.Input[Union[str, 'OSSKU']]]:
        """
        Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        """
        return pulumi.get(self, "os_sku")

    @os_sku.setter
    def os_sku(self, value: Optional[pulumi.Input[Union[str, 'OSSKU']]]):
        pulumi.set(self, "os_sku", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[Union[str, 'OsType']]]:
        """
        OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[Union[str, 'OsType']]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        VmSize - The size of the agent pool VMs.
        """
        return pulumi.get(self, "vm_size")

    @vm_size.setter
    def vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_size", value)


@pulumi.input_type
class ExtendedLocationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ExtendedLocationTypes']]] = None):
        """
        Extended Location definition
        :param pulumi.Input[str] name: The extended location name.
        :param pulumi.Input[Union[str, 'ExtendedLocationTypes']] type: The extended location type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The extended location name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ExtendedLocationTypes']]]:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ExtendedLocationTypes']]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class LinuxProfilePropertiesPublicKeysArgs:
    def __init__(__self__, *,
                 key_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key_data: KeyData - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
        """
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[pulumi.Input[str]]:
        """
        KeyData - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
        """
        return pulumi.get(self, "key_data")

    @key_data.setter
    def key_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_data", value)


@pulumi.input_type
class LinuxProfilePropertiesSshArgs:
    def __init__(__self__, *,
                 public_keys: Optional[pulumi.Input[Sequence[pulumi.Input['LinuxProfilePropertiesPublicKeysArgs']]]] = None):
        """
        SSH - SSH configuration for Linux-based VMs running on Azure.
        :param pulumi.Input[Sequence[pulumi.Input['LinuxProfilePropertiesPublicKeysArgs']]] public_keys: PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
        """
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LinuxProfilePropertiesPublicKeysArgs']]]]:
        """
        PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
        """
        return pulumi.get(self, "public_keys")

    @public_keys.setter
    def public_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LinuxProfilePropertiesPublicKeysArgs']]]]):
        pulumi.set(self, "public_keys", value)


@pulumi.input_type
class LinuxProfilePropertiesArgs:
    def __init__(__self__, *,
                 ssh: Optional[pulumi.Input['LinuxProfilePropertiesSshArgs']] = None):
        """
        LinuxProfile - Profile for Linux VMs in the container service cluster.
        :param pulumi.Input['LinuxProfilePropertiesSshArgs'] ssh: SSH - SSH configuration for Linux-based VMs running on Azure.
        """
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['LinuxProfilePropertiesSshArgs']]:
        """
        SSH - SSH configuration for Linux-based VMs running on Azure.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['LinuxProfilePropertiesSshArgs']]):
        pulumi.set(self, "ssh", value)


@pulumi.input_type
class NamedAgentPoolProfileArgs:
    def __init__(__self__, *,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_image_version: Optional[pulumi.Input[str]] = None,
                 os_sku: Optional[pulumi.Input[Union[str, 'OSSKU']]] = None,
                 os_type: Optional[pulumi.Input[Union[str, 'OsType']]] = None,
                 vm_size: Optional[pulumi.Input[str]] = None):
        """
        Agent pool profile along with a name parameter
        :param pulumi.Input[Sequence[pulumi.Input[str]]] availability_zones: AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
        :param pulumi.Input[int] count: Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        :param pulumi.Input[str] name: Unique name of the agent pool profile in the context of the subscription and resource group.
        :param pulumi.Input[str] node_image_version: The version of node image
        :param pulumi.Input[Union[str, 'OSSKU']] os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        :param pulumi.Input[Union[str, 'OsType']] os_type: OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
        :param pulumi.Input[str] vm_size: VmSize - The size of the agent pool VMs.
        """
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if count is None:
            count = 1
        if count is not None:
            pulumi.set(__self__, "count", count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_image_version is not None:
            pulumi.set(__self__, "node_image_version", node_image_version)
        if os_sku is not None:
            pulumi.set(__self__, "os_sku", os_sku)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
        """
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "availability_zones", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of the agent pool profile in the context of the subscription and resource group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeImageVersion")
    def node_image_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of node image
        """
        return pulumi.get(self, "node_image_version")

    @node_image_version.setter
    def node_image_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_image_version", value)

    @property
    @pulumi.getter(name="osSKU")
    def os_sku(self) -> Optional[pulumi.Input[Union[str, 'OSSKU']]]:
        """
        Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        """
        return pulumi.get(self, "os_sku")

    @os_sku.setter
    def os_sku(self, value: Optional[pulumi.Input[Union[str, 'OSSKU']]]):
        pulumi.set(self, "os_sku", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[Union[str, 'OsType']]]:
        """
        OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[Union[str, 'OsType']]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        VmSize - The size of the agent pool VMs.
        """
        return pulumi.get(self, "vm_size")

    @vm_size.setter
    def vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_size", value)


@pulumi.input_type
class NetworkProfileLoadBalancerProfileArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None):
        """
        LoadBalancerProfile - Profile of the cluster load balancer.
        :param pulumi.Input[int] count: Count - Number of load balancer VMs. The default value is 0.
        """
        if count is None:
            count = 0
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Count - Number of load balancer VMs. The default value is 0.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)


@pulumi.input_type
class NetworkProfileArgs:
    def __init__(__self__, *,
                 load_balancer_profile: Optional[pulumi.Input['NetworkProfileLoadBalancerProfileArgs']] = None,
                 network_policy: Optional[pulumi.Input[Union[str, 'NetworkPolicy']]] = None,
                 pod_cidr: Optional[pulumi.Input[str]] = None):
        """
        NetworkProfile - Profile of network configuration.
        :param pulumi.Input['NetworkProfileLoadBalancerProfileArgs'] load_balancer_profile: LoadBalancerProfile - Profile of the cluster load balancer.
        :param pulumi.Input[Union[str, 'NetworkPolicy']] network_policy: NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
        :param pulumi.Input[str] pod_cidr: PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
        """
        if load_balancer_profile is not None:
            pulumi.set(__self__, "load_balancer_profile", load_balancer_profile)
        if network_policy is None:
            network_policy = 'calico'
        if network_policy is not None:
            pulumi.set(__self__, "network_policy", network_policy)
        if pod_cidr is not None:
            pulumi.set(__self__, "pod_cidr", pod_cidr)

    @property
    @pulumi.getter(name="loadBalancerProfile")
    def load_balancer_profile(self) -> Optional[pulumi.Input['NetworkProfileLoadBalancerProfileArgs']]:
        """
        LoadBalancerProfile - Profile of the cluster load balancer.
        """
        return pulumi.get(self, "load_balancer_profile")

    @load_balancer_profile.setter
    def load_balancer_profile(self, value: Optional[pulumi.Input['NetworkProfileLoadBalancerProfileArgs']]):
        pulumi.set(self, "load_balancer_profile", value)

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional[pulumi.Input[Union[str, 'NetworkPolicy']]]:
        """
        NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
        """
        return pulumi.get(self, "network_policy")

    @network_policy.setter
    def network_policy(self, value: Optional[pulumi.Input[Union[str, 'NetworkPolicy']]]):
        pulumi.set(self, "network_policy", value)

    @property
    @pulumi.getter(name="podCidr")
    def pod_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
        """
        return pulumi.get(self, "pod_cidr")

    @pod_cidr.setter
    def pod_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_cidr", value)


@pulumi.input_type
class ProvisionedClusterLicenseProfileArgs:
    def __init__(__self__, *,
                 azure_hybrid_benefit: Optional[pulumi.Input[Union[str, 'AzureHybridBenefit']]] = None):
        """
        The license profile of the provisioned cluster.
        :param pulumi.Input[Union[str, 'AzureHybridBenefit']] azure_hybrid_benefit: Indicates whether Azure Hybrid Benefit is opted in
        """
        if azure_hybrid_benefit is None:
            azure_hybrid_benefit = 'NotApplicable'
        if azure_hybrid_benefit is not None:
            pulumi.set(__self__, "azure_hybrid_benefit", azure_hybrid_benefit)

    @property
    @pulumi.getter(name="azureHybridBenefit")
    def azure_hybrid_benefit(self) -> Optional[pulumi.Input[Union[str, 'AzureHybridBenefit']]]:
        """
        Indicates whether Azure Hybrid Benefit is opted in
        """
        return pulumi.get(self, "azure_hybrid_benefit")

    @azure_hybrid_benefit.setter
    def azure_hybrid_benefit(self, value: Optional[pulumi.Input[Union[str, 'AzureHybridBenefit']]]):
        pulumi.set(self, "azure_hybrid_benefit", value)


@pulumi.input_type
class ProvisionedClusterPropertiesArgs:
    def __init__(__self__, *,
                 agent_pool_profiles: Optional[pulumi.Input[Sequence[pulumi.Input['NamedAgentPoolProfileArgs']]]] = None,
                 cloud_provider_profile: Optional[pulumi.Input['CloudProviderProfileArgs']] = None,
                 control_plane: Optional[pulumi.Input['ControlPlaneProfileArgs']] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 license_profile: Optional[pulumi.Input['ProvisionedClusterLicenseProfileArgs']] = None,
                 linux_profile: Optional[pulumi.Input['LinuxProfilePropertiesArgs']] = None,
                 network_profile: Optional[pulumi.Input['NetworkProfileArgs']] = None):
        """
        All properties of the provisioned cluster
        :param pulumi.Input[Sequence[pulumi.Input['NamedAgentPoolProfileArgs']]] agent_pool_profiles: The agent pools of the cluster.
        :param pulumi.Input['CloudProviderProfileArgs'] cloud_provider_profile: The underlying cloud infra provider properties.
        :param pulumi.Input['ControlPlaneProfileArgs'] control_plane: ControlPlane - ControlPlane Configuration
        :param pulumi.Input[str] kubernetes_version: KubernetesVersion - Version of Kubernetes specified when creating the managed cluster.
        :param pulumi.Input['ProvisionedClusterLicenseProfileArgs'] license_profile: The license profile of the provisioned cluster.
        :param pulumi.Input['LinuxProfilePropertiesArgs'] linux_profile: LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
        :param pulumi.Input['NetworkProfileArgs'] network_profile: NetworkProfile - Profile of network configuration.
        """
        if agent_pool_profiles is not None:
            pulumi.set(__self__, "agent_pool_profiles", agent_pool_profiles)
        if cloud_provider_profile is not None:
            pulumi.set(__self__, "cloud_provider_profile", cloud_provider_profile)
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if license_profile is not None:
            pulumi.set(__self__, "license_profile", license_profile)
        if linux_profile is not None:
            pulumi.set(__self__, "linux_profile", linux_profile)
        if network_profile is not None:
            pulumi.set(__self__, "network_profile", network_profile)

    @property
    @pulumi.getter(name="agentPoolProfiles")
    def agent_pool_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NamedAgentPoolProfileArgs']]]]:
        """
        The agent pools of the cluster.
        """
        return pulumi.get(self, "agent_pool_profiles")

    @agent_pool_profiles.setter
    def agent_pool_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NamedAgentPoolProfileArgs']]]]):
        pulumi.set(self, "agent_pool_profiles", value)

    @property
    @pulumi.getter(name="cloudProviderProfile")
    def cloud_provider_profile(self) -> Optional[pulumi.Input['CloudProviderProfileArgs']]:
        """
        The underlying cloud infra provider properties.
        """
        return pulumi.get(self, "cloud_provider_profile")

    @cloud_provider_profile.setter
    def cloud_provider_profile(self, value: Optional[pulumi.Input['CloudProviderProfileArgs']]):
        pulumi.set(self, "cloud_provider_profile", value)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional[pulumi.Input['ControlPlaneProfileArgs']]:
        """
        ControlPlane - ControlPlane Configuration
        """
        return pulumi.get(self, "control_plane")

    @control_plane.setter
    def control_plane(self, value: Optional[pulumi.Input['ControlPlaneProfileArgs']]):
        pulumi.set(self, "control_plane", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        KubernetesVersion - Version of Kubernetes specified when creating the managed cluster.
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="licenseProfile")
    def license_profile(self) -> Optional[pulumi.Input['ProvisionedClusterLicenseProfileArgs']]:
        """
        The license profile of the provisioned cluster.
        """
        return pulumi.get(self, "license_profile")

    @license_profile.setter
    def license_profile(self, value: Optional[pulumi.Input['ProvisionedClusterLicenseProfileArgs']]):
        pulumi.set(self, "license_profile", value)

    @property
    @pulumi.getter(name="linuxProfile")
    def linux_profile(self) -> Optional[pulumi.Input['LinuxProfilePropertiesArgs']]:
        """
        LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
        """
        return pulumi.get(self, "linux_profile")

    @linux_profile.setter
    def linux_profile(self, value: Optional[pulumi.Input['LinuxProfilePropertiesArgs']]):
        pulumi.set(self, "linux_profile", value)

    @property
    @pulumi.getter(name="networkProfile")
    def network_profile(self) -> Optional[pulumi.Input['NetworkProfileArgs']]:
        """
        NetworkProfile - Profile of network configuration.
        """
        return pulumi.get(self, "network_profile")

    @network_profile.setter
    def network_profile(self, value: Optional[pulumi.Input['NetworkProfileArgs']]):
        pulumi.set(self, "network_profile", value)


@pulumi.input_type
class VirtualNetworkExtendedLocationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The extended location name.
        :param pulumi.Input[str] type: The extended location type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The extended location name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VirtualNetworkPropertiesHciArgs:
    def __init__(__self__, *,
                 moc_group: Optional[pulumi.Input[str]] = None,
                 moc_location: Optional[pulumi.Input[str]] = None,
                 moc_vnet_name: Optional[pulumi.Input[str]] = None):
        """
        Infra network profile for HCI platform
        :param pulumi.Input[str] moc_group: Resource group in MOC(Microsoft On-premises Cloud)
        :param pulumi.Input[str] moc_location: Location in MOC(Microsoft On-premises Cloud)
        :param pulumi.Input[str] moc_vnet_name: Virtual Network name in MOC(Microsoft On-premises Cloud)
        """
        if moc_group is not None:
            pulumi.set(__self__, "moc_group", moc_group)
        if moc_location is not None:
            pulumi.set(__self__, "moc_location", moc_location)
        if moc_vnet_name is not None:
            pulumi.set(__self__, "moc_vnet_name", moc_vnet_name)

    @property
    @pulumi.getter(name="mocGroup")
    def moc_group(self) -> Optional[pulumi.Input[str]]:
        """
        Resource group in MOC(Microsoft On-premises Cloud)
        """
        return pulumi.get(self, "moc_group")

    @moc_group.setter
    def moc_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "moc_group", value)

    @property
    @pulumi.getter(name="mocLocation")
    def moc_location(self) -> Optional[pulumi.Input[str]]:
        """
        Location in MOC(Microsoft On-premises Cloud)
        """
        return pulumi.get(self, "moc_location")

    @moc_location.setter
    def moc_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "moc_location", value)

    @property
    @pulumi.getter(name="mocVnetName")
    def moc_vnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Network name in MOC(Microsoft On-premises Cloud)
        """
        return pulumi.get(self, "moc_vnet_name")

    @moc_vnet_name.setter
    def moc_vnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "moc_vnet_name", value)


@pulumi.input_type
class VirtualNetworkPropertiesInfraVnetProfileArgs:
    def __init__(__self__, *,
                 hci: Optional[pulumi.Input['VirtualNetworkPropertiesHciArgs']] = None,
                 vmware: Optional[pulumi.Input['VirtualNetworkPropertiesVmwareArgs']] = None):
        """
        :param pulumi.Input['VirtualNetworkPropertiesHciArgs'] hci: Infra network profile for HCI platform
        :param pulumi.Input['VirtualNetworkPropertiesVmwareArgs'] vmware: Infra network profile for VMware platform
        """
        if hci is not None:
            pulumi.set(__self__, "hci", hci)
        if vmware is not None:
            pulumi.set(__self__, "vmware", vmware)

    @property
    @pulumi.getter
    def hci(self) -> Optional[pulumi.Input['VirtualNetworkPropertiesHciArgs']]:
        """
        Infra network profile for HCI platform
        """
        return pulumi.get(self, "hci")

    @hci.setter
    def hci(self, value: Optional[pulumi.Input['VirtualNetworkPropertiesHciArgs']]):
        pulumi.set(self, "hci", value)

    @property
    @pulumi.getter
    def vmware(self) -> Optional[pulumi.Input['VirtualNetworkPropertiesVmwareArgs']]:
        """
        Infra network profile for VMware platform
        """
        return pulumi.get(self, "vmware")

    @vmware.setter
    def vmware(self, value: Optional[pulumi.Input['VirtualNetworkPropertiesVmwareArgs']]):
        pulumi.set(self, "vmware", value)


@pulumi.input_type
class VirtualNetworkPropertiesVipPoolArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: Ending IP address for the IP Pool
        :param pulumi.Input[str] start_ip: Starting IP address for the IP Pool
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIP")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Ending IP address for the IP Pool
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="startIP")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Starting IP address for the IP Pool
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class VirtualNetworkPropertiesVmipPoolArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: Ending IP address for the IP Pool
        :param pulumi.Input[str] start_ip: Starting IP address for the IP Pool
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIP")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Ending IP address for the IP Pool
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="startIP")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Starting IP address for the IP Pool
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class VirtualNetworkPropertiesVmwareArgs:
    def __init__(__self__, *,
                 segment_name: Optional[pulumi.Input[str]] = None):
        """
        Infra network profile for VMware platform
        :param pulumi.Input[str] segment_name: Name of the network segment in VSphere
        """
        if segment_name is not None:
            pulumi.set(__self__, "segment_name", segment_name)

    @property
    @pulumi.getter(name="segmentName")
    def segment_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the network segment in VSphere
        """
        return pulumi.get(self, "segment_name")

    @segment_name.setter
    def segment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_name", value)


@pulumi.input_type
class VirtualNetworkPropertiesArgs:
    def __init__(__self__, *,
                 dhcp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 infra_vnet_profile: Optional[pulumi.Input['VirtualNetworkPropertiesInfraVnetProfileArgs']] = None,
                 ip_address_prefix: Optional[pulumi.Input[str]] = None,
                 vip_pool: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVipPoolArgs']]]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vmip_pool: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVmipPoolArgs']]]] = None):
        """
        HybridAKSNetworkSpec defines the desired state of HybridAKSNetwork
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dhcp_servers: Address of the DHCP servers associated with the network
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Address of the DNS servers associated with the network
        :param pulumi.Input[str] gateway: Address of the Gateway associated with the network
        :param pulumi.Input[str] ip_address_prefix: IP Address Prefix of the network
        :param pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVipPoolArgs']]] vip_pool: Virtual IP Pool for Kubernetes
        :param pulumi.Input[int] vlan_id: VLAN Id used by the network
        :param pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVmipPoolArgs']]] vmip_pool: IP Pool for Virtual Machines
        """
        if dhcp_servers is not None:
            pulumi.set(__self__, "dhcp_servers", dhcp_servers)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if infra_vnet_profile is not None:
            pulumi.set(__self__, "infra_vnet_profile", infra_vnet_profile)
        if ip_address_prefix is not None:
            pulumi.set(__self__, "ip_address_prefix", ip_address_prefix)
        if vip_pool is not None:
            pulumi.set(__self__, "vip_pool", vip_pool)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vmip_pool is not None:
            pulumi.set(__self__, "vmip_pool", vmip_pool)

    @property
    @pulumi.getter(name="dhcpServers")
    def dhcp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Address of the DHCP servers associated with the network
        """
        return pulumi.get(self, "dhcp_servers")

    @dhcp_servers.setter
    def dhcp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dhcp_servers", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Address of the DNS servers associated with the network
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Address of the Gateway associated with the network
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="infraVnetProfile")
    def infra_vnet_profile(self) -> Optional[pulumi.Input['VirtualNetworkPropertiesInfraVnetProfileArgs']]:
        return pulumi.get(self, "infra_vnet_profile")

    @infra_vnet_profile.setter
    def infra_vnet_profile(self, value: Optional[pulumi.Input['VirtualNetworkPropertiesInfraVnetProfileArgs']]):
        pulumi.set(self, "infra_vnet_profile", value)

    @property
    @pulumi.getter(name="ipAddressPrefix")
    def ip_address_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address Prefix of the network
        """
        return pulumi.get(self, "ip_address_prefix")

    @ip_address_prefix.setter
    def ip_address_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address_prefix", value)

    @property
    @pulumi.getter(name="vipPool")
    def vip_pool(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVipPoolArgs']]]]:
        """
        Virtual IP Pool for Kubernetes
        """
        return pulumi.get(self, "vip_pool")

    @vip_pool.setter
    def vip_pool(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVipPoolArgs']]]]):
        pulumi.set(self, "vip_pool", value)

    @property
    @pulumi.getter(name="vlanID")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN Id used by the network
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vmipPool")
    def vmip_pool(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVmipPoolArgs']]]]:
        """
        IP Pool for Virtual Machines
        """
        return pulumi.get(self, "vmip_pool")

    @vmip_pool.setter
    def vmip_pool(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkPropertiesVmipPoolArgs']]]]):
        pulumi.set(self, "vmip_pool", value)


