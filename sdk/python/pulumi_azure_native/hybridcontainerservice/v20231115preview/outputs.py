# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AddonStatusProfileResponse',
    'AgentPoolProvisioningStatusResponseError',
    'AgentPoolProvisioningStatusResponseOperationStatus',
    'AgentPoolProvisioningStatusResponseStatus',
    'AgentPoolUpdateProfileResponse',
    'CloudProviderProfileResponse',
    'CloudProviderProfileResponseInfraNetworkProfile',
    'ControlPlaneEndpointProfileResponseControlPlaneEndpoint',
    'ControlPlaneProfileResponse',
    'CredentialResultResponse',
    'ExtendedLocationResponse',
    'KubernetesPatchVersionsResponse',
    'KubernetesVersionCapabilitiesResponse',
    'KubernetesVersionProfileResponseProperties',
    'KubernetesVersionPropertiesResponse',
    'KubernetesVersionReadinessResponse',
    'LinuxProfilePropertiesResponse',
    'LinuxProfilePropertiesResponsePublicKeys',
    'LinuxProfilePropertiesResponseSsh',
    'ListCredentialResponseResponseError',
    'ListCredentialResponseResponseProperties',
    'NamedAgentPoolProfileResponse',
    'NetworkProfileResponse',
    'NetworkProfileResponseLoadBalancerProfile',
    'ProvisionedClusterLicenseProfileResponse',
    'ProvisionedClusterPropertiesResponse',
    'ProvisionedClusterPropertiesResponseError',
    'ProvisionedClusterPropertiesResponseOperationStatus',
    'ProvisionedClusterPropertiesResponseStatus',
    'SystemDataResponse',
    'VirtualNetworkPropertiesResponse',
    'VirtualNetworkPropertiesResponseError',
    'VirtualNetworkPropertiesResponseHci',
    'VirtualNetworkPropertiesResponseInfraVnetProfile',
    'VirtualNetworkPropertiesResponseOperationStatus',
    'VirtualNetworkPropertiesResponseStatus',
    'VirtualNetworkPropertiesResponseVipPool',
    'VirtualNetworkPropertiesResponseVmipPool',
    'VirtualNetworkPropertiesResponseVmware',
    'VirtualNetworkResponseExtendedLocation',
    'VmSkuCapabilitiesResponse',
    'VmSkuProfileResponseProperties',
    'VmSkuPropertiesResponse',
]

@pulumi.output_type
class AddonStatusProfileResponse(dict):
    """
    Defines the addon status profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorMessage":
            suggest = "error_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AddonStatusProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AddonStatusProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AddonStatusProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_message: Optional[str] = None,
                 name: Optional[str] = None,
                 phase: Optional[str] = None,
                 ready: Optional[bool] = None):
        """
        Defines the addon status profile.
        :param str error_message: Error message while deploying the addon
        :param str name: Name of the addon
        :param str phase: Observed phase of the addon on the target cluster. Possible values include: 'pending', 'provisioning', 'provisioning {HelmChartInstalled}', 'provisioning {MSICertificateDownloaded}', 'provisioned', 'deleting', 'failed', 'upgrading'
        :param bool ready: Indicates whether the addon is ready
        """
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error message while deploying the addon
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the addon
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        Observed phase of the addon on the target cluster. Possible values include: 'pending', 'provisioning', 'provisioning {HelmChartInstalled}', 'provisioning {MSICertificateDownloaded}', 'provisioned', 'deleting', 'failed', 'upgrading'
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def ready(self) -> Optional[bool]:
        """
        Indicates whether the addon is ready
        """
        return pulumi.get(self, "ready")


@pulumi.output_type
class AgentPoolProvisioningStatusResponseError(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 message: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")


@pulumi.output_type
class AgentPoolProvisioningStatusResponseOperationStatus(dict):
    """
    Contains Provisioning errors
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentPoolProvisioningStatusResponseOperationStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentPoolProvisioningStatusResponseOperationStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentPoolProvisioningStatusResponseOperationStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error: Optional['outputs.AgentPoolProvisioningStatusResponseError'] = None,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        Contains Provisioning errors
        """
        if error is not None:
            pulumi.set(__self__, "error", error)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def error(self) -> Optional['outputs.AgentPoolProvisioningStatusResponseError']:
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class AgentPoolProvisioningStatusResponseStatus(dict):
    """
    Defines the observed state of the agent pool
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorMessage":
            suggest = "error_message"
        elif key == "operationStatus":
            suggest = "operation_status"
        elif key == "readyReplicas":
            suggest = "ready_replicas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentPoolProvisioningStatusResponseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentPoolProvisioningStatusResponseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentPoolProvisioningStatusResponseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_message: Optional[str] = None,
                 operation_status: Optional['outputs.AgentPoolProvisioningStatusResponseOperationStatus'] = None,
                 ready_replicas: Optional[Sequence['outputs.AgentPoolUpdateProfileResponse']] = None):
        """
        Defines the observed state of the agent pool
        :param str error_message: ErrorMessage - Error messages during creation of agent pool
        :param 'AgentPoolProvisioningStatusResponseOperationStatus' operation_status: Contains Provisioning errors
        """
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)
        if ready_replicas is not None:
            pulumi.set(__self__, "ready_replicas", ready_replicas)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        ErrorMessage - Error messages during creation of agent pool
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional['outputs.AgentPoolProvisioningStatusResponseOperationStatus']:
        """
        Contains Provisioning errors
        """
        return pulumi.get(self, "operation_status")

    @property
    @pulumi.getter(name="readyReplicas")
    def ready_replicas(self) -> Optional[Sequence['outputs.AgentPoolUpdateProfileResponse']]:
        return pulumi.get(self, "ready_replicas")


@pulumi.output_type
class AgentPoolUpdateProfileResponse(dict):
    """
    AgentPool update configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmSize":
            suggest = "vm_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentPoolUpdateProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentPoolUpdateProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentPoolUpdateProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: Optional[int] = None,
                 vm_size: Optional[str] = None):
        """
        AgentPool update configuration
        :param int count: Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        :param str vm_size: VmSize - The size of the agent pool VMs.
        """
        if count is None:
            count = 1
        if count is not None:
            pulumi.set(__self__, "count", count)
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[str]:
        """
        VmSize - The size of the agent pool VMs.
        """
        return pulumi.get(self, "vm_size")


@pulumi.output_type
class CloudProviderProfileResponse(dict):
    """
    CloudProviderProfile - The underlying cloud infra provider properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "infraNetworkProfile":
            suggest = "infra_network_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudProviderProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudProviderProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudProviderProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 infra_network_profile: Optional['outputs.CloudProviderProfileResponseInfraNetworkProfile'] = None):
        """
        CloudProviderProfile - The underlying cloud infra provider properties.
        :param 'CloudProviderProfileResponseInfraNetworkProfile' infra_network_profile: InfraNetworkProfile - List of infra network profiles for the provisioned cluster
        """
        if infra_network_profile is not None:
            pulumi.set(__self__, "infra_network_profile", infra_network_profile)

    @property
    @pulumi.getter(name="infraNetworkProfile")
    def infra_network_profile(self) -> Optional['outputs.CloudProviderProfileResponseInfraNetworkProfile']:
        """
        InfraNetworkProfile - List of infra network profiles for the provisioned cluster
        """
        return pulumi.get(self, "infra_network_profile")


@pulumi.output_type
class CloudProviderProfileResponseInfraNetworkProfile(dict):
    """
    InfraNetworkProfile - List of infra network profiles for the provisioned cluster
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vnetSubnetIds":
            suggest = "vnet_subnet_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudProviderProfileResponseInfraNetworkProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudProviderProfileResponseInfraNetworkProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudProviderProfileResponseInfraNetworkProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vnet_subnet_ids: Optional[Sequence[str]] = None):
        """
        InfraNetworkProfile - List of infra network profiles for the provisioned cluster
        :param Sequence[str] vnet_subnet_ids: Array of references to azure resource corresponding to the Network object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}
        """
        if vnet_subnet_ids is not None:
            pulumi.set(__self__, "vnet_subnet_ids", vnet_subnet_ids)

    @property
    @pulumi.getter(name="vnetSubnetIds")
    def vnet_subnet_ids(self) -> Optional[Sequence[str]]:
        """
        Array of references to azure resource corresponding to the Network object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}
        """
        return pulumi.get(self, "vnet_subnet_ids")


@pulumi.output_type
class ControlPlaneEndpointProfileResponseControlPlaneEndpoint(dict):
    """
    API server endpoint for the control plane
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostIP":
            suggest = "host_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ControlPlaneEndpointProfileResponseControlPlaneEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ControlPlaneEndpointProfileResponseControlPlaneEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ControlPlaneEndpointProfileResponseControlPlaneEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_ip: Optional[str] = None,
                 port: Optional[int] = None):
        """
        API server endpoint for the control plane
        :param str host_ip: Host IP address for API server
        :param int port: Port for the API server
        """
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        """
        Host IP address for API server
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port for the API server
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ControlPlaneProfileResponse(dict):
    """
    ControlPlaneProfile - The control plane properties for the provisioned cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZones":
            suggest = "availability_zones"
        elif key == "controlPlaneEndpoint":
            suggest = "control_plane_endpoint"
        elif key == "linuxProfile":
            suggest = "linux_profile"
        elif key == "nodeImageVersion":
            suggest = "node_image_version"
        elif key == "osSKU":
            suggest = "os_sku"
        elif key == "osType":
            suggest = "os_type"
        elif key == "vmSize":
            suggest = "vm_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ControlPlaneProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ControlPlaneProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ControlPlaneProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zones: Optional[Sequence[str]] = None,
                 control_plane_endpoint: Optional['outputs.ControlPlaneEndpointProfileResponseControlPlaneEndpoint'] = None,
                 count: Optional[int] = None,
                 linux_profile: Optional['outputs.LinuxProfilePropertiesResponse'] = None,
                 name: Optional[str] = None,
                 node_image_version: Optional[str] = None,
                 os_sku: Optional[str] = None,
                 os_type: Optional[str] = None,
                 vm_size: Optional[str] = None):
        """
        ControlPlaneProfile - The control plane properties for the provisioned cluster.
        :param Sequence[str] availability_zones: AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
        :param 'ControlPlaneEndpointProfileResponseControlPlaneEndpoint' control_plane_endpoint: API server endpoint for the control plane
        :param int count: Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        :param 'LinuxProfilePropertiesResponse' linux_profile: Profile for Linux VMs in the container service cluster.
        :param str name: Unique name of the agent pool profile in the context of the subscription and resource group.
        :param str node_image_version: The version of node image
        :param str os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        :param str os_type: OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
        :param str vm_size: VmSize - The size of the agent pool VMs.
        """
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if control_plane_endpoint is not None:
            pulumi.set(__self__, "control_plane_endpoint", control_plane_endpoint)
        if count is None:
            count = 1
        if count is not None:
            pulumi.set(__self__, "count", count)
        if linux_profile is not None:
            pulumi.set(__self__, "linux_profile", linux_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_image_version is not None:
            pulumi.set(__self__, "node_image_version", node_image_version)
        if os_sku is not None:
            pulumi.set(__self__, "os_sku", os_sku)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[Sequence[str]]:
        """
        AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
        """
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="controlPlaneEndpoint")
    def control_plane_endpoint(self) -> Optional['outputs.ControlPlaneEndpointProfileResponseControlPlaneEndpoint']:
        """
        API server endpoint for the control plane
        """
        return pulumi.get(self, "control_plane_endpoint")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="linuxProfile")
    def linux_profile(self) -> Optional['outputs.LinuxProfilePropertiesResponse']:
        """
        Profile for Linux VMs in the container service cluster.
        """
        return pulumi.get(self, "linux_profile")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Unique name of the agent pool profile in the context of the subscription and resource group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeImageVersion")
    def node_image_version(self) -> Optional[str]:
        """
        The version of node image
        """
        return pulumi.get(self, "node_image_version")

    @property
    @pulumi.getter(name="osSKU")
    def os_sku(self) -> Optional[str]:
        """
        Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        """
        return pulumi.get(self, "os_sku")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[str]:
        """
        OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[str]:
        """
        VmSize - The size of the agent pool VMs.
        """
        return pulumi.get(self, "vm_size")


@pulumi.output_type
class CredentialResultResponse(dict):
    """
    The credential result response.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        The credential result response.
        :param str name: The name of the credential.
        :param str value: Base64-encoded Kubernetes configuration file.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the credential.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Base64-encoded Kubernetes configuration file.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ExtendedLocationResponse(dict):
    """
    Extended Location definition
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        Extended Location definition
        :param str name: The extended location name.
        :param str type: The extended location type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The extended location name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class KubernetesPatchVersionsResponse(dict):
    """
    Kubernetes Patch Version profile
    """
    def __init__(__self__, *,
                 readiness: Optional[Sequence['outputs.KubernetesVersionReadinessResponse']] = None,
                 upgrades: Optional[Sequence[str]] = None):
        """
        Kubernetes Patch Version profile
        :param Sequence['KubernetesVersionReadinessResponse'] readiness: Whether the kubernetes version variant (Linux, Windows, Windows2022) is ready or not
        :param Sequence[str] upgrades: Possible upgrade path for given patch version
        """
        if readiness is not None:
            pulumi.set(__self__, "readiness", readiness)
        if upgrades is not None:
            pulumi.set(__self__, "upgrades", upgrades)

    @property
    @pulumi.getter
    def readiness(self) -> Optional[Sequence['outputs.KubernetesVersionReadinessResponse']]:
        """
        Whether the kubernetes version variant (Linux, Windows, Windows2022) is ready or not
        """
        return pulumi.get(self, "readiness")

    @property
    @pulumi.getter
    def upgrades(self) -> Optional[Sequence[str]]:
        """
        Possible upgrade path for given patch version
        """
        return pulumi.get(self, "upgrades")


@pulumi.output_type
class KubernetesVersionCapabilitiesResponse(dict):
    """
    Capabilities on this kubernetes version
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "supportPlan":
            suggest = "support_plan"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesVersionCapabilitiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesVersionCapabilitiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesVersionCapabilitiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 support_plan: Optional[Sequence[str]] = None):
        """
        Capabilities on this kubernetes version
        """
        if support_plan is not None:
            pulumi.set(__self__, "support_plan", support_plan)

    @property
    @pulumi.getter(name="supportPlan")
    def support_plan(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "support_plan")


@pulumi.output_type
class KubernetesVersionProfileResponseProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesVersionProfileResponseProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesVersionProfileResponseProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesVersionProfileResponseProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 values: Optional[Sequence['outputs.KubernetesVersionPropertiesResponse']] = None):
        """
        :param str provisioning_state: Provisioning state of the resource
        :param Sequence['KubernetesVersionPropertiesResponse'] values: List of supported Kubernetes versions
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.KubernetesVersionPropertiesResponse']]:
        """
        List of supported Kubernetes versions
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class KubernetesVersionPropertiesResponse(dict):
    """
    Kubernetes version profile for given major.minor release
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPreview":
            suggest = "is_preview"
        elif key == "patchVersions":
            suggest = "patch_versions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesVersionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesVersionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesVersionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capabilities: 'outputs.KubernetesVersionCapabilitiesResponse',
                 is_preview: bool,
                 patch_versions: Mapping[str, 'outputs.KubernetesPatchVersionsResponse'],
                 version: str):
        """
        Kubernetes version profile for given major.minor release
        :param 'KubernetesVersionCapabilitiesResponse' capabilities: Capabilities on this kubernetes version
        :param bool is_preview: Whether this version is in preview mode.
        :param Mapping[str, 'KubernetesPatchVersionsResponse'] patch_versions: Patch versions of a Kubernetes release
        :param str version: major.minor version of Kubernetes release
        """
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "is_preview", is_preview)
        pulumi.set(__self__, "patch_versions", patch_versions)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def capabilities(self) -> 'outputs.KubernetesVersionCapabilitiesResponse':
        """
        Capabilities on this kubernetes version
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="isPreview")
    def is_preview(self) -> bool:
        """
        Whether this version is in preview mode.
        """
        return pulumi.get(self, "is_preview")

    @property
    @pulumi.getter(name="patchVersions")
    def patch_versions(self) -> Mapping[str, 'outputs.KubernetesPatchVersionsResponse']:
        """
        Patch versions of a Kubernetes release
        """
        return pulumi.get(self, "patch_versions")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        major.minor version of Kubernetes release
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class KubernetesVersionReadinessResponse(dict):
    """
    Whether a particular kubernetes version's variant (CBLMariner, Windows, Windows2022) is ready or not 
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorMessage":
            suggest = "error_message"
        elif key == "osType":
            suggest = "os_type"
        elif key == "osSku":
            suggest = "os_sku"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesVersionReadinessResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesVersionReadinessResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesVersionReadinessResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_message: str,
                 os_type: Optional[str] = None,
                 ready: bool,
                 os_sku: Optional[str] = None):
        """
        Whether a particular kubernetes version's variant (CBLMariner, Windows, Windows2022) is ready or not 
        :param str error_message: If image is not ready, the error message for version not being ready
        :param str os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows)
        :param bool ready: Whether or not the given image is ready
        :param str os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        """
        pulumi.set(__self__, "error_message", error_message)
        if os_type is None:
            os_type = 'Linux'
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "ready", ready)
        if os_sku is not None:
            pulumi.set(__self__, "os_sku", os_sku)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        """
        If image is not ready, the error message for version not being ready
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        The particular KubernetesVersion's Image's OS Type (Linux, Windows)
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Whether or not the given image is ready
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="osSku")
    def os_sku(self) -> Optional[str]:
        """
        Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        """
        return pulumi.get(self, "os_sku")


@pulumi.output_type
class LinuxProfilePropertiesResponse(dict):
    """
    LinuxProfile - Profile for Linux VMs in the container service cluster.
    """
    def __init__(__self__, *,
                 ssh: Optional['outputs.LinuxProfilePropertiesResponseSsh'] = None):
        """
        LinuxProfile - Profile for Linux VMs in the container service cluster.
        :param 'LinuxProfilePropertiesResponseSsh' ssh: SSH - SSH configuration for Linux-based VMs running on Azure.
        """
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.LinuxProfilePropertiesResponseSsh']:
        """
        SSH - SSH configuration for Linux-based VMs running on Azure.
        """
        return pulumi.get(self, "ssh")


@pulumi.output_type
class LinuxProfilePropertiesResponsePublicKeys(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyData":
            suggest = "key_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinuxProfilePropertiesResponsePublicKeys. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinuxProfilePropertiesResponsePublicKeys.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinuxProfilePropertiesResponsePublicKeys.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_data: Optional[str] = None):
        """
        :param str key_data: KeyData - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
        """
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[str]:
        """
        KeyData - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
        """
        return pulumi.get(self, "key_data")


@pulumi.output_type
class LinuxProfilePropertiesResponseSsh(dict):
    """
    SSH - SSH configuration for Linux-based VMs running on Azure.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKeys":
            suggest = "public_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinuxProfilePropertiesResponseSsh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinuxProfilePropertiesResponseSsh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinuxProfilePropertiesResponseSsh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_keys: Optional[Sequence['outputs.LinuxProfilePropertiesResponsePublicKeys']] = None):
        """
        SSH - SSH configuration for Linux-based VMs running on Azure.
        :param Sequence['LinuxProfilePropertiesResponsePublicKeys'] public_keys: PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
        """
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.LinuxProfilePropertiesResponsePublicKeys']]:
        """
        PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
        """
        return pulumi.get(self, "public_keys")


@pulumi.output_type
class ListCredentialResponseResponseError(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 message: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")


@pulumi.output_type
class ListCredentialResponseResponseProperties(dict):
    def __init__(__self__, *,
                 kubeconfigs: Sequence['outputs.CredentialResultResponse']):
        """
        :param Sequence['CredentialResultResponse'] kubeconfigs: Base64-encoded Kubernetes configuration file.
        """
        pulumi.set(__self__, "kubeconfigs", kubeconfigs)

    @property
    @pulumi.getter
    def kubeconfigs(self) -> Sequence['outputs.CredentialResultResponse']:
        """
        Base64-encoded Kubernetes configuration file.
        """
        return pulumi.get(self, "kubeconfigs")


@pulumi.output_type
class NamedAgentPoolProfileResponse(dict):
    """
    Agent pool profile along with a name parameter
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZones":
            suggest = "availability_zones"
        elif key == "nodeImageVersion":
            suggest = "node_image_version"
        elif key == "osSKU":
            suggest = "os_sku"
        elif key == "osType":
            suggest = "os_type"
        elif key == "vmSize":
            suggest = "vm_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NamedAgentPoolProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NamedAgentPoolProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NamedAgentPoolProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zones: Optional[Sequence[str]] = None,
                 count: Optional[int] = None,
                 name: Optional[str] = None,
                 node_image_version: Optional[str] = None,
                 os_sku: Optional[str] = None,
                 os_type: Optional[str] = None,
                 vm_size: Optional[str] = None):
        """
        Agent pool profile along with a name parameter
        :param Sequence[str] availability_zones: AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
        :param int count: Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        :param str name: Unique name of the agent pool profile in the context of the subscription and resource group.
        :param str node_image_version: The version of node image
        :param str os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        :param str os_type: OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
        :param str vm_size: VmSize - The size of the agent pool VMs.
        """
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if count is None:
            count = 1
        if count is not None:
            pulumi.set(__self__, "count", count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_image_version is not None:
            pulumi.set(__self__, "node_image_version", node_image_version)
        if os_sku is not None:
            pulumi.set(__self__, "os_sku", os_sku)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[Sequence[str]]:
        """
        AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
        """
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Unique name of the agent pool profile in the context of the subscription and resource group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeImageVersion")
    def node_image_version(self) -> Optional[str]:
        """
        The version of node image
        """
        return pulumi.get(self, "node_image_version")

    @property
    @pulumi.getter(name="osSKU")
    def os_sku(self) -> Optional[str]:
        """
        Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        """
        return pulumi.get(self, "os_sku")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[str]:
        """
        OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[str]:
        """
        VmSize - The size of the agent pool VMs.
        """
        return pulumi.get(self, "vm_size")


@pulumi.output_type
class NetworkProfileResponse(dict):
    """
    NetworkProfile - Profile of network configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loadBalancerProfile":
            suggest = "load_balancer_profile"
        elif key == "networkPolicy":
            suggest = "network_policy"
        elif key == "podCidr":
            suggest = "pod_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 load_balancer_profile: Optional['outputs.NetworkProfileResponseLoadBalancerProfile'] = None,
                 network_policy: Optional[str] = None,
                 pod_cidr: Optional[str] = None):
        """
        NetworkProfile - Profile of network configuration.
        :param 'NetworkProfileResponseLoadBalancerProfile' load_balancer_profile: LoadBalancerProfile - Profile of the cluster load balancer.
        :param str network_policy: NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
        :param str pod_cidr: PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
        """
        if load_balancer_profile is not None:
            pulumi.set(__self__, "load_balancer_profile", load_balancer_profile)
        if network_policy is None:
            network_policy = 'calico'
        if network_policy is not None:
            pulumi.set(__self__, "network_policy", network_policy)
        if pod_cidr is not None:
            pulumi.set(__self__, "pod_cidr", pod_cidr)

    @property
    @pulumi.getter(name="loadBalancerProfile")
    def load_balancer_profile(self) -> Optional['outputs.NetworkProfileResponseLoadBalancerProfile']:
        """
        LoadBalancerProfile - Profile of the cluster load balancer.
        """
        return pulumi.get(self, "load_balancer_profile")

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional[str]:
        """
        NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
        """
        return pulumi.get(self, "network_policy")

    @property
    @pulumi.getter(name="podCidr")
    def pod_cidr(self) -> Optional[str]:
        """
        PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
        """
        return pulumi.get(self, "pod_cidr")


@pulumi.output_type
class NetworkProfileResponseLoadBalancerProfile(dict):
    """
    LoadBalancerProfile - Profile of the cluster load balancer.
    """
    def __init__(__self__, *,
                 count: Optional[int] = None):
        """
        LoadBalancerProfile - Profile of the cluster load balancer.
        :param int count: Count - Number of load balancer VMs. The default value is 0.
        """
        if count is None:
            count = 0
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Count - Number of load balancer VMs. The default value is 0.
        """
        return pulumi.get(self, "count")


@pulumi.output_type
class ProvisionedClusterLicenseProfileResponse(dict):
    """
    The license profile of the provisioned cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureHybridBenefit":
            suggest = "azure_hybrid_benefit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisionedClusterLicenseProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisionedClusterLicenseProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisionedClusterLicenseProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_hybrid_benefit: Optional[str] = None):
        """
        The license profile of the provisioned cluster.
        :param str azure_hybrid_benefit: Indicates whether Azure Hybrid Benefit is opted in
        """
        if azure_hybrid_benefit is None:
            azure_hybrid_benefit = 'NotApplicable'
        if azure_hybrid_benefit is not None:
            pulumi.set(__self__, "azure_hybrid_benefit", azure_hybrid_benefit)

    @property
    @pulumi.getter(name="azureHybridBenefit")
    def azure_hybrid_benefit(self) -> Optional[str]:
        """
        Indicates whether Azure Hybrid Benefit is opted in
        """
        return pulumi.get(self, "azure_hybrid_benefit")


@pulumi.output_type
class ProvisionedClusterPropertiesResponse(dict):
    """
    All properties of the provisioned cluster
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "agentPoolProfiles":
            suggest = "agent_pool_profiles"
        elif key == "cloudProviderProfile":
            suggest = "cloud_provider_profile"
        elif key == "controlPlane":
            suggest = "control_plane"
        elif key == "kubernetesVersion":
            suggest = "kubernetes_version"
        elif key == "licenseProfile":
            suggest = "license_profile"
        elif key == "linuxProfile":
            suggest = "linux_profile"
        elif key == "networkProfile":
            suggest = "network_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisionedClusterPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisionedClusterPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisionedClusterPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 status: 'outputs.ProvisionedClusterPropertiesResponseStatus',
                 agent_pool_profiles: Optional[Sequence['outputs.NamedAgentPoolProfileResponse']] = None,
                 cloud_provider_profile: Optional['outputs.CloudProviderProfileResponse'] = None,
                 control_plane: Optional['outputs.ControlPlaneProfileResponse'] = None,
                 kubernetes_version: Optional[str] = None,
                 license_profile: Optional['outputs.ProvisionedClusterLicenseProfileResponse'] = None,
                 linux_profile: Optional['outputs.LinuxProfilePropertiesResponse'] = None,
                 network_profile: Optional['outputs.NetworkProfileResponse'] = None):
        """
        All properties of the provisioned cluster
        :param str provisioning_state: Provisioning state of the resource
        :param 'ProvisionedClusterPropertiesResponseStatus' status: HybridAKSClusterStatus defines the observed state of HybridAKSCluster
        :param Sequence['NamedAgentPoolProfileResponse'] agent_pool_profiles: The agent pools of the cluster.
        :param 'CloudProviderProfileResponse' cloud_provider_profile: The underlying cloud infra provider properties.
        :param 'ControlPlaneProfileResponse' control_plane: ControlPlane - ControlPlane Configuration
        :param str kubernetes_version: KubernetesVersion - Version of Kubernetes specified when creating the managed cluster.
        :param 'ProvisionedClusterLicenseProfileResponse' license_profile: The license profile of the provisioned cluster.
        :param 'LinuxProfilePropertiesResponse' linux_profile: LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
        :param 'NetworkProfileResponse' network_profile: NetworkProfile - Profile of network configuration.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "status", status)
        if agent_pool_profiles is not None:
            pulumi.set(__self__, "agent_pool_profiles", agent_pool_profiles)
        if cloud_provider_profile is not None:
            pulumi.set(__self__, "cloud_provider_profile", cloud_provider_profile)
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if license_profile is not None:
            pulumi.set(__self__, "license_profile", license_profile)
        if linux_profile is not None:
            pulumi.set(__self__, "linux_profile", linux_profile)
        if network_profile is not None:
            pulumi.set(__self__, "network_profile", network_profile)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.ProvisionedClusterPropertiesResponseStatus':
        """
        HybridAKSClusterStatus defines the observed state of HybridAKSCluster
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="agentPoolProfiles")
    def agent_pool_profiles(self) -> Optional[Sequence['outputs.NamedAgentPoolProfileResponse']]:
        """
        The agent pools of the cluster.
        """
        return pulumi.get(self, "agent_pool_profiles")

    @property
    @pulumi.getter(name="cloudProviderProfile")
    def cloud_provider_profile(self) -> Optional['outputs.CloudProviderProfileResponse']:
        """
        The underlying cloud infra provider properties.
        """
        return pulumi.get(self, "cloud_provider_profile")

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional['outputs.ControlPlaneProfileResponse']:
        """
        ControlPlane - ControlPlane Configuration
        """
        return pulumi.get(self, "control_plane")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[str]:
        """
        KubernetesVersion - Version of Kubernetes specified when creating the managed cluster.
        """
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter(name="licenseProfile")
    def license_profile(self) -> Optional['outputs.ProvisionedClusterLicenseProfileResponse']:
        """
        The license profile of the provisioned cluster.
        """
        return pulumi.get(self, "license_profile")

    @property
    @pulumi.getter(name="linuxProfile")
    def linux_profile(self) -> Optional['outputs.LinuxProfilePropertiesResponse']:
        """
        LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
        """
        return pulumi.get(self, "linux_profile")

    @property
    @pulumi.getter(name="networkProfile")
    def network_profile(self) -> Optional['outputs.NetworkProfileResponse']:
        """
        NetworkProfile - Profile of network configuration.
        """
        return pulumi.get(self, "network_profile")


@pulumi.output_type
class ProvisionedClusterPropertiesResponseError(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 message: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")


@pulumi.output_type
class ProvisionedClusterPropertiesResponseOperationStatus(dict):
    """
    Contains Provisioning errors
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisionedClusterPropertiesResponseOperationStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisionedClusterPropertiesResponseOperationStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisionedClusterPropertiesResponseOperationStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error: Optional['outputs.ProvisionedClusterPropertiesResponseError'] = None,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        Contains Provisioning errors
        """
        if error is not None:
            pulumi.set(__self__, "error", error)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def error(self) -> Optional['outputs.ProvisionedClusterPropertiesResponseError']:
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class ProvisionedClusterPropertiesResponseStatus(dict):
    """
    HybridAKSClusterStatus defines the observed state of HybridAKSCluster
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controlPlaneStatus":
            suggest = "control_plane_status"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "operationStatus":
            suggest = "operation_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisionedClusterPropertiesResponseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisionedClusterPropertiesResponseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisionedClusterPropertiesResponseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 control_plane_status: Optional[Sequence['outputs.AddonStatusProfileResponse']] = None,
                 error_message: Optional[str] = None,
                 operation_status: Optional['outputs.ProvisionedClusterPropertiesResponseOperationStatus'] = None):
        """
        HybridAKSClusterStatus defines the observed state of HybridAKSCluster
        :param Sequence['AddonStatusProfileResponse'] control_plane_status: Status of the control plane components
        :param str error_message: ErrorMessage - Error messages during creation of cluster
        :param 'ProvisionedClusterPropertiesResponseOperationStatus' operation_status: Contains Provisioning errors
        """
        if control_plane_status is not None:
            pulumi.set(__self__, "control_plane_status", control_plane_status)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)

    @property
    @pulumi.getter(name="controlPlaneStatus")
    def control_plane_status(self) -> Optional[Sequence['outputs.AddonStatusProfileResponse']]:
        """
        Status of the control plane components
        """
        return pulumi.get(self, "control_plane_status")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        ErrorMessage - Error messages during creation of cluster
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional['outputs.ProvisionedClusterPropertiesResponseOperationStatus']:
        """
        Contains Provisioning errors
        """
        return pulumi.get(self, "operation_status")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class VirtualNetworkPropertiesResponse(dict):
    """
    HybridAKSNetworkSpec defines the desired state of HybridAKSNetwork
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "dhcpServers":
            suggest = "dhcp_servers"
        elif key == "dnsServers":
            suggest = "dns_servers"
        elif key == "infraVnetProfile":
            suggest = "infra_vnet_profile"
        elif key == "ipAddressPrefix":
            suggest = "ip_address_prefix"
        elif key == "vipPool":
            suggest = "vip_pool"
        elif key == "vlanID":
            suggest = "vlan_id"
        elif key == "vmipPool":
            suggest = "vmip_pool"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 status: 'outputs.VirtualNetworkPropertiesResponseStatus',
                 dhcp_servers: Optional[Sequence[str]] = None,
                 dns_servers: Optional[Sequence[str]] = None,
                 gateway: Optional[str] = None,
                 infra_vnet_profile: Optional['outputs.VirtualNetworkPropertiesResponseInfraVnetProfile'] = None,
                 ip_address_prefix: Optional[str] = None,
                 vip_pool: Optional[Sequence['outputs.VirtualNetworkPropertiesResponseVipPool']] = None,
                 vlan_id: Optional[int] = None,
                 vmip_pool: Optional[Sequence['outputs.VirtualNetworkPropertiesResponseVmipPool']] = None):
        """
        HybridAKSNetworkSpec defines the desired state of HybridAKSNetwork
        :param 'VirtualNetworkPropertiesResponseStatus' status: HybridAKSNetworkStatus defines the observed state of HybridAKSNetwork
        :param Sequence[str] dhcp_servers: Address of the DHCP servers associated with the network
        :param Sequence[str] dns_servers: Address of the DNS servers associated with the network
        :param str gateway: Address of the Gateway associated with the network
        :param str ip_address_prefix: IP Address Prefix of the network
        :param Sequence['VirtualNetworkPropertiesResponseVipPool'] vip_pool: Virtual IP Pool for Kubernetes
        :param int vlan_id: VLAN Id used by the network
        :param Sequence['VirtualNetworkPropertiesResponseVmipPool'] vmip_pool: IP Pool for Virtual Machines
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "status", status)
        if dhcp_servers is not None:
            pulumi.set(__self__, "dhcp_servers", dhcp_servers)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if infra_vnet_profile is not None:
            pulumi.set(__self__, "infra_vnet_profile", infra_vnet_profile)
        if ip_address_prefix is not None:
            pulumi.set(__self__, "ip_address_prefix", ip_address_prefix)
        if vip_pool is not None:
            pulumi.set(__self__, "vip_pool", vip_pool)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vmip_pool is not None:
            pulumi.set(__self__, "vmip_pool", vmip_pool)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.VirtualNetworkPropertiesResponseStatus':
        """
        HybridAKSNetworkStatus defines the observed state of HybridAKSNetwork
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="dhcpServers")
    def dhcp_servers(self) -> Optional[Sequence[str]]:
        """
        Address of the DHCP servers associated with the network
        """
        return pulumi.get(self, "dhcp_servers")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        Address of the DNS servers associated with the network
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        Address of the Gateway associated with the network
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="infraVnetProfile")
    def infra_vnet_profile(self) -> Optional['outputs.VirtualNetworkPropertiesResponseInfraVnetProfile']:
        return pulumi.get(self, "infra_vnet_profile")

    @property
    @pulumi.getter(name="ipAddressPrefix")
    def ip_address_prefix(self) -> Optional[str]:
        """
        IP Address Prefix of the network
        """
        return pulumi.get(self, "ip_address_prefix")

    @property
    @pulumi.getter(name="vipPool")
    def vip_pool(self) -> Optional[Sequence['outputs.VirtualNetworkPropertiesResponseVipPool']]:
        """
        Virtual IP Pool for Kubernetes
        """
        return pulumi.get(self, "vip_pool")

    @property
    @pulumi.getter(name="vlanID")
    def vlan_id(self) -> Optional[int]:
        """
        VLAN Id used by the network
        """
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vmipPool")
    def vmip_pool(self) -> Optional[Sequence['outputs.VirtualNetworkPropertiesResponseVmipPool']]:
        """
        IP Pool for Virtual Machines
        """
        return pulumi.get(self, "vmip_pool")


@pulumi.output_type
class VirtualNetworkPropertiesResponseError(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 message: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")


@pulumi.output_type
class VirtualNetworkPropertiesResponseHci(dict):
    """
    Infra network profile for HCI platform
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mocGroup":
            suggest = "moc_group"
        elif key == "mocLocation":
            suggest = "moc_location"
        elif key == "mocVnetName":
            suggest = "moc_vnet_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponseHci. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponseHci.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponseHci.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 moc_group: Optional[str] = None,
                 moc_location: Optional[str] = None,
                 moc_vnet_name: Optional[str] = None):
        """
        Infra network profile for HCI platform
        :param str moc_group: Resource group in MOC(Microsoft On-premises Cloud)
        :param str moc_location: Location in MOC(Microsoft On-premises Cloud)
        :param str moc_vnet_name: Virtual Network name in MOC(Microsoft On-premises Cloud)
        """
        if moc_group is not None:
            pulumi.set(__self__, "moc_group", moc_group)
        if moc_location is not None:
            pulumi.set(__self__, "moc_location", moc_location)
        if moc_vnet_name is not None:
            pulumi.set(__self__, "moc_vnet_name", moc_vnet_name)

    @property
    @pulumi.getter(name="mocGroup")
    def moc_group(self) -> Optional[str]:
        """
        Resource group in MOC(Microsoft On-premises Cloud)
        """
        return pulumi.get(self, "moc_group")

    @property
    @pulumi.getter(name="mocLocation")
    def moc_location(self) -> Optional[str]:
        """
        Location in MOC(Microsoft On-premises Cloud)
        """
        return pulumi.get(self, "moc_location")

    @property
    @pulumi.getter(name="mocVnetName")
    def moc_vnet_name(self) -> Optional[str]:
        """
        Virtual Network name in MOC(Microsoft On-premises Cloud)
        """
        return pulumi.get(self, "moc_vnet_name")


@pulumi.output_type
class VirtualNetworkPropertiesResponseInfraVnetProfile(dict):
    def __init__(__self__, *,
                 hci: Optional['outputs.VirtualNetworkPropertiesResponseHci'] = None,
                 vmware: Optional['outputs.VirtualNetworkPropertiesResponseVmware'] = None):
        """
        :param 'VirtualNetworkPropertiesResponseHci' hci: Infra network profile for HCI platform
        :param 'VirtualNetworkPropertiesResponseVmware' vmware: Infra network profile for VMware platform
        """
        if hci is not None:
            pulumi.set(__self__, "hci", hci)
        if vmware is not None:
            pulumi.set(__self__, "vmware", vmware)

    @property
    @pulumi.getter
    def hci(self) -> Optional['outputs.VirtualNetworkPropertiesResponseHci']:
        """
        Infra network profile for HCI platform
        """
        return pulumi.get(self, "hci")

    @property
    @pulumi.getter
    def vmware(self) -> Optional['outputs.VirtualNetworkPropertiesResponseVmware']:
        """
        Infra network profile for VMware platform
        """
        return pulumi.get(self, "vmware")


@pulumi.output_type
class VirtualNetworkPropertiesResponseOperationStatus(dict):
    """
    Contains Provisioning errors
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponseOperationStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponseOperationStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponseOperationStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error: Optional['outputs.VirtualNetworkPropertiesResponseError'] = None,
                 operation_id: Optional[str] = None,
                 phase: Optional[str] = None,
                 status: Optional[str] = None):
        """
        Contains Provisioning errors
        :param str phase: Phase represents the current phase of the virtual network provisioning. E.g. Pending, Running, Terminating, Failed etc.
        """
        if error is not None:
            pulumi.set(__self__, "error", error)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def error(self) -> Optional['outputs.VirtualNetworkPropertiesResponseError']:
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        Phase represents the current phase of the virtual network provisioning. E.g. Pending, Running, Terminating, Failed etc.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class VirtualNetworkPropertiesResponseStatus(dict):
    """
    HybridAKSNetworkStatus defines the observed state of HybridAKSNetwork
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationStatus":
            suggest = "operation_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_status: Optional['outputs.VirtualNetworkPropertiesResponseOperationStatus'] = None):
        """
        HybridAKSNetworkStatus defines the observed state of HybridAKSNetwork
        :param 'VirtualNetworkPropertiesResponseOperationStatus' operation_status: Contains Provisioning errors
        """
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)

    @property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional['outputs.VirtualNetworkPropertiesResponseOperationStatus']:
        """
        Contains Provisioning errors
        """
        return pulumi.get(self, "operation_status")


@pulumi.output_type
class VirtualNetworkPropertiesResponseVipPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIP":
            suggest = "end_ip"
        elif key == "startIP":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponseVipPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponseVipPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponseVipPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 start_ip: Optional[str] = None):
        """
        :param str end_ip: Ending IP address for the IP Pool
        :param str start_ip: Starting IP address for the IP Pool
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIP")
    def end_ip(self) -> Optional[str]:
        """
        Ending IP address for the IP Pool
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter(name="startIP")
    def start_ip(self) -> Optional[str]:
        """
        Starting IP address for the IP Pool
        """
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class VirtualNetworkPropertiesResponseVmipPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIP":
            suggest = "end_ip"
        elif key == "startIP":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponseVmipPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponseVmipPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponseVmipPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 start_ip: Optional[str] = None):
        """
        :param str end_ip: Ending IP address for the IP Pool
        :param str start_ip: Starting IP address for the IP Pool
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIP")
    def end_ip(self) -> Optional[str]:
        """
        Ending IP address for the IP Pool
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter(name="startIP")
    def start_ip(self) -> Optional[str]:
        """
        Starting IP address for the IP Pool
        """
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class VirtualNetworkPropertiesResponseVmware(dict):
    """
    Infra network profile for VMware platform
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "segmentName":
            suggest = "segment_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponseVmware. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponseVmware.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponseVmware.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 segment_name: Optional[str] = None):
        """
        Infra network profile for VMware platform
        :param str segment_name: Name of the network segment in VSphere
        """
        if segment_name is not None:
            pulumi.set(__self__, "segment_name", segment_name)

    @property
    @pulumi.getter(name="segmentName")
    def segment_name(self) -> Optional[str]:
        """
        Name of the network segment in VSphere
        """
        return pulumi.get(self, "segment_name")


@pulumi.output_type
class VirtualNetworkResponseExtendedLocation(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: The extended location name.
        :param str type: The extended location type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The extended location name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VmSkuCapabilitiesResponse(dict):
    """
    describes the vm sku capabilities object
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        describes the vm sku capabilities object
        :param str name: An invariant to describe the feature
        :param str value: An invariant if the feature is measured by quantity
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        An invariant to describe the feature
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        An invariant if the feature is measured by quantity
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VmSkuProfileResponseProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmSkuProfileResponseProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmSkuProfileResponseProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmSkuProfileResponseProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 values: Optional[Sequence['outputs.VmSkuPropertiesResponse']] = None):
        """
        :param str provisioning_state: Provisioning state of the resource
        :param Sequence['VmSkuPropertiesResponse'] values: Array of HybridAKS Support VM Skus
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.VmSkuPropertiesResponse']]:
        """
        Array of HybridAKS Support VM Skus
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class VmSkuPropertiesResponse(dict):
    """
    The profile for supported VM skus
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmSkuPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmSkuPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmSkuPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capabilities: Sequence['outputs.VmSkuCapabilitiesResponse'],
                 name: str,
                 resource_type: str,
                 size: str,
                 tier: str):
        """
        The profile for supported VM skus
        :param Sequence['VmSkuCapabilitiesResponse'] capabilities: A name value pair to describe the specific vm's capability
        :param str name: The name of the VM Family
        :param str resource_type: The resource type of the vm
        :param str size: The size of the VM Family
        :param str tier: The tier of the VM Family
        """
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.VmSkuCapabilitiesResponse']:
        """
        A name value pair to describe the specific vm's capability
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the VM Family
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type of the vm
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The size of the VM Family
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> str:
        """
        The tier of the VM Family
        """
        return pulumi.get(self, "tier")


