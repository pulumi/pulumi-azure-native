# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from ._enums import *

__all__ = [
    'ConfidentialLedgerCertUserArgs',
    'LedgerPropertiesArgs',
]

@pulumi.input_type
class ConfidentialLedgerCertUserArgs:
    def __init__(__self__, *,
                 cert: Optional[pulumi.Input[str]] = None):
        """
        User cert and permissions associated with that user
        :param pulumi.Input[str] cert: Base64 encoded public key of the user cert (.pem or .cer)
        """
        if cert is not None:
            pulumi.set(__self__, "cert", cert)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded public key of the user cert (.pem or .cer)
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)


@pulumi.input_type
class LedgerPropertiesArgs:
    def __init__(__self__, *,
                 cert_users: Optional[pulumi.Input[Sequence[pulumi.Input['ConfidentialLedgerCertUserArgs']]]] = None,
                 ledger_storage_account: Optional[pulumi.Input[str]] = None,
                 ledger_type: Optional[pulumi.Input[Union[str, 'LedgerType']]] = None):
        """
        Additional Confidential Ledger properties.
        :param pulumi.Input[Sequence[pulumi.Input['ConfidentialLedgerCertUserArgs']]] cert_users: Array of all the cert based users who can access Confidential Ledger
        :param pulumi.Input[str] ledger_storage_account: Name of the Blob Storage Account for saving ledger files
        :param pulumi.Input[Union[str, 'LedgerType']] ledger_type: Type of Confidential Ledger
        """
        if cert_users is not None:
            pulumi.set(__self__, "cert_users", cert_users)
        if ledger_storage_account is not None:
            pulumi.set(__self__, "ledger_storage_account", ledger_storage_account)
        if ledger_type is not None:
            pulumi.set(__self__, "ledger_type", ledger_type)

    @property
    @pulumi.getter(name="certUsers")
    def cert_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfidentialLedgerCertUserArgs']]]]:
        """
        Array of all the cert based users who can access Confidential Ledger
        """
        return pulumi.get(self, "cert_users")

    @cert_users.setter
    def cert_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfidentialLedgerCertUserArgs']]]]):
        pulumi.set(self, "cert_users", value)

    @property
    @pulumi.getter(name="ledgerStorageAccount")
    def ledger_storage_account(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Blob Storage Account for saving ledger files
        """
        return pulumi.get(self, "ledger_storage_account")

    @ledger_storage_account.setter
    def ledger_storage_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ledger_storage_account", value)

    @property
    @pulumi.getter(name="ledgerType")
    def ledger_type(self) -> Optional[pulumi.Input[Union[str, 'LedgerType']]]:
        """
        Type of Confidential Ledger
        """
        return pulumi.get(self, "ledger_type")

    @ledger_type.setter
    def ledger_type(self, value: Optional[pulumi.Input[Union[str, 'LedgerType']]]):
        pulumi.set(self, "ledger_type", value)


