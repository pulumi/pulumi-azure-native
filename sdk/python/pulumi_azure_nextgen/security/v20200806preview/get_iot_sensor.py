# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'GetIotSensorResult',
    'AwaitableGetIotSensorResult',
    'get_iot_sensor',
]

@pulumi.output_type
class GetIotSensorResult:
    """
    IoT sensor
    """
    def __init__(__self__, name=None, type=None):
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")


class AwaitableGetIotSensorResult(GetIotSensorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIotSensorResult(
            name=self.name,
            type=self.type)


def get_iot_sensor(iot_sensor_name: Optional[str] = None,
                   scope: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIotSensorResult:
    """
    Use this data source to access information about an existing resource.

    :param str iot_sensor_name: Name of the IoT sensor
    :param str scope: Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
    """
    __args__ = dict()
    __args__['iotSensorName'] = iot_sensor_name
    __args__['scope'] = scope
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-nextgen:security/v20200806preview:getIotSensor', __args__, opts=opts, typ=GetIotSensorResult).value

    return AwaitableGetIotSensorResult(
        name=__ret__.name,
        type=__ret__.type)
