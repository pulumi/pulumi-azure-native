# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'GetServerVulnerabilityAssessmentResult',
    'AwaitableGetServerVulnerabilityAssessmentResult',
    'get_server_vulnerability_assessment',
]

@pulumi.output_type
class GetServerVulnerabilityAssessmentResult:
    """
    A server vulnerability assessment.
    """
    def __init__(__self__, id=None, name=None, recurring_scans=None, storage_account_access_key=None, storage_container_path=None, storage_container_sas_key=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if recurring_scans and not isinstance(recurring_scans, dict):
            raise TypeError("Expected argument 'recurring_scans' to be a dict")
        pulumi.set(__self__, "recurring_scans", recurring_scans)
        if storage_account_access_key and not isinstance(storage_account_access_key, str):
            raise TypeError("Expected argument 'storage_account_access_key' to be a str")
        pulumi.set(__self__, "storage_account_access_key", storage_account_access_key)
        if storage_container_path and not isinstance(storage_container_path, str):
            raise TypeError("Expected argument 'storage_container_path' to be a str")
        pulumi.set(__self__, "storage_container_path", storage_container_path)
        if storage_container_sas_key and not isinstance(storage_container_sas_key, str):
            raise TypeError("Expected argument 'storage_container_sas_key' to be a str")
        pulumi.set(__self__, "storage_container_sas_key", storage_container_sas_key)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recurringScans")
    def recurring_scans(self) -> Optional['outputs.VulnerabilityAssessmentRecurringScansPropertiesResponse']:
        """
        The recurring scans settings
        """
        return pulumi.get(self, "recurring_scans")

    @property
    @pulumi.getter(name="storageAccountAccessKey")
    def storage_account_access_key(self) -> Optional[str]:
        """
        Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
        """
        return pulumi.get(self, "storage_account_access_key")

    @property
    @pulumi.getter(name="storageContainerPath")
    def storage_container_path(self) -> str:
        """
        A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
        """
        return pulumi.get(self, "storage_container_path")

    @property
    @pulumi.getter(name="storageContainerSasKey")
    def storage_container_sas_key(self) -> Optional[str]:
        """
        A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
        """
        return pulumi.get(self, "storage_container_sas_key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type.
        """
        return pulumi.get(self, "type")


class AwaitableGetServerVulnerabilityAssessmentResult(GetServerVulnerabilityAssessmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServerVulnerabilityAssessmentResult(
            id=self.id,
            name=self.name,
            recurring_scans=self.recurring_scans,
            storage_account_access_key=self.storage_account_access_key,
            storage_container_path=self.storage_container_path,
            storage_container_sas_key=self.storage_container_sas_key,
            type=self.type)


def get_server_vulnerability_assessment(resource_group_name: Optional[str] = None,
                                        server_name: Optional[str] = None,
                                        vulnerability_assessment_name: Optional[str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServerVulnerabilityAssessmentResult:
    """
    Use this data source to access information about an existing resource.

    :param str resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
    :param str server_name: The name of the server for which the vulnerability assessment is defined.
    :param str vulnerability_assessment_name: The name of the vulnerability assessment.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['serverName'] = server_name
    __args__['vulnerabilityAssessmentName'] = vulnerability_assessment_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-nextgen:sql/v20180601preview:getServerVulnerabilityAssessment', __args__, opts=opts, typ=GetServerVulnerabilityAssessmentResult).value

    return AwaitableGetServerVulnerabilityAssessmentResult(
        id=__ret__.id,
        name=__ret__.name,
        recurring_scans=__ret__.recurring_scans,
        storage_account_access_key=__ret__.storage_account_access_key,
        storage_container_path=__ret__.storage_container_path,
        storage_container_sas_key=__ret__.storage_container_sas_key,
        type=__ret__.type)
