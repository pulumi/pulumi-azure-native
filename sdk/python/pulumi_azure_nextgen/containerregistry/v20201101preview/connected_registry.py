# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ConnectedRegistry']


class ConnectedRegistry(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_token_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 connected_registry_name: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[pulumi.InputType['LoggingPropertiesArgs']]] = None,
                 mode: Optional[pulumi.Input[Union[str, 'ConnectedRegistryMode']]] = None,
                 parent: Optional[pulumi.Input[pulumi.InputType['ParentPropertiesArgs']]] = None,
                 registry_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        An object that represents a connected registry for a container registry.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_token_ids: The list of the ACR token resource IDs used to authenticate clients to the connected registry.
        :param pulumi.Input[str] connected_registry_name: The name of the connected registry.
        :param pulumi.Input[pulumi.InputType['LoggingPropertiesArgs']] logging: The logging properties of the connected registry.
        :param pulumi.Input[Union[str, 'ConnectedRegistryMode']] mode: The mode of the connected registry resource that indicates the permissions of the registry.
        :param pulumi.Input[pulumi.InputType['ParentPropertiesArgs']] parent: The parent of the connected registry.
        :param pulumi.Input[str] registry_name: The name of the container registry.
        :param pulumi.Input[str] resource_group_name: The name of the resource group to which the container registry belongs.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['client_token_ids'] = client_token_ids
            if connected_registry_name is None and not opts.urn:
                raise TypeError("Missing required property 'connected_registry_name'")
            __props__['connected_registry_name'] = connected_registry_name
            __props__['logging'] = logging
            if mode is None and not opts.urn:
                raise TypeError("Missing required property 'mode'")
            __props__['mode'] = mode
            if parent is None and not opts.urn:
                raise TypeError("Missing required property 'parent'")
            __props__['parent'] = parent
            if registry_name is None and not opts.urn:
                raise TypeError("Missing required property 'registry_name'")
            __props__['registry_name'] = registry_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['activation'] = None
            __props__['connection_state'] = None
            __props__['last_activity_time'] = None
            __props__['login_server'] = None
            __props__['name'] = None
            __props__['provisioning_state'] = None
            __props__['status_details'] = None
            __props__['system_data'] = None
            __props__['type'] = None
            __props__['version'] = None
        super(ConnectedRegistry, __self__).__init__(
            'azure-nextgen:containerregistry/v20201101preview:ConnectedRegistry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ConnectedRegistry':
        """
        Get an existing ConnectedRegistry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ConnectedRegistry(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def activation(self) -> pulumi.Output['outputs.ActivationPropertiesResponse']:
        """
        The activation properties of the connected registry.
        """
        return pulumi.get(self, "activation")

    @property
    @pulumi.getter(name="clientTokenIds")
    def client_token_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of the ACR token resource IDs used to authenticate clients to the connected registry.
        """
        return pulumi.get(self, "client_token_ids")

    @property
    @pulumi.getter(name="connectionState")
    def connection_state(self) -> pulumi.Output[str]:
        """
        The current connection state of the connected registry.
        """
        return pulumi.get(self, "connection_state")

    @property
    @pulumi.getter(name="lastActivityTime")
    def last_activity_time(self) -> pulumi.Output[str]:
        """
        The last activity time of the connected registry.
        """
        return pulumi.get(self, "last_activity_time")

    @property
    @pulumi.getter
    def logging(self) -> pulumi.Output[Optional['outputs.LoggingPropertiesResponse']]:
        """
        The logging properties of the connected registry.
        """
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter(name="loginServer")
    def login_server(self) -> pulumi.Output[Optional['outputs.LoginServerPropertiesResponse']]:
        """
        The login server properties of the connected registry.
        """
        return pulumi.get(self, "login_server")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        The mode of the connected registry resource that indicates the permissions of the registry.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parent(self) -> pulumi.Output['outputs.ParentPropertiesResponse']:
        """
        The parent of the connected registry.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> pulumi.Output[Sequence['outputs.StatusDetailPropertiesResponse']]:
        """
        The list of current statuses of the connected registry.
        """
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The current version of ACR runtime on the connected registry.
        """
        return pulumi.get(self, "version")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

