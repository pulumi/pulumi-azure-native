# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from ._enums import *
from .account_filter import *
from .asset import *
from .asset_filter import *
from .content_key_policy import *
from .get_account_filter import *
from .get_asset import *
from .get_asset_encryption_key import *
from .get_asset_filter import *
from .get_content_key_policy import *
from .get_content_key_policy_properties_with_secrets import *
from .get_job import *
from .get_live_event import *
from .get_live_output import *
from .get_media_service import *
from .get_private_endpoint_connection import *
from .get_streaming_endpoint import *
from .get_streaming_locator import *
from .get_streaming_policy import *
from .get_transform import *
from .job import *
from .list_asset_container_sas import *
from .list_asset_streaming_locators import *
from .list_media_service_edge_policies import *
from .list_media_service_keys import *
from .list_streaming_locator_content_keys import *
from .list_streaming_locator_paths import *
from .live_event import *
from .live_output import *
from .media_service import *
from .private_endpoint_connection import *
from .streaming_endpoint import *
from .streaming_locator import *
from .streaming_policy import *
from .transform import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from ... import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "azure-nextgen:media/latest:AccountFilter":
                return AccountFilter(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-nextgen:media/latest:Asset":
                return Asset(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-nextgen:media/latest:AssetFilter":
                return AssetFilter(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-nextgen:media/latest:ContentKeyPolicy":
                return ContentKeyPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-nextgen:media/latest:Job":
                return Job(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-nextgen:media/latest:LiveEvent":
                return LiveEvent(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-nextgen:media/latest:LiveOutput":
                return LiveOutput(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-nextgen:media/latest:MediaService":
                return MediaService(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-nextgen:media/latest:PrivateEndpointConnection":
                return PrivateEndpointConnection(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-nextgen:media/latest:StreamingEndpoint":
                return StreamingEndpoint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-nextgen:media/latest:StreamingLocator":
                return StreamingLocator(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-nextgen:media/latest:StreamingPolicy":
                return StreamingPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-nextgen:media/latest:Transform":
                return Transform(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("azure-nextgen", "media/latest", _module_instance)

_register_module()
