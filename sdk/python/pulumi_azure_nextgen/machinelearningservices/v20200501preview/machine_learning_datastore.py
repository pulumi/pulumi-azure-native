# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = ['MachineLearningDatastore']


class MachineLearningDatastore(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_key: Optional[pulumi.Input[str]] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 adls_resource_group: Optional[pulumi.Input[str]] = None,
                 adls_subscription_id: Optional[pulumi.Input[str]] = None,
                 authority_url: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 data_store_type: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 datastore_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 enforce_ssl: Optional[pulumi.Input[bool]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 include_secret: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 resource_url: Optional[pulumi.Input[str]] = None,
                 sas_token: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 share_name: Optional[pulumi.Input[str]] = None,
                 skip_validation: Optional[pulumi.Input[bool]] = None,
                 storage_account_resource_group: Optional[pulumi.Input[str]] = None,
                 storage_account_subscription_id: Optional[pulumi.Input[str]] = None,
                 store_name: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 workspace_system_assigned_identity: Optional[pulumi.Input[bool]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Machine Learning datastore object wrapped into ARM resource envelope.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_key: Account Key of storage account.
        :param pulumi.Input[str] account_name: The name of the storage account.
        :param pulumi.Input[str] adls_resource_group: The resource group the ADLS store belongs to. Defaults to selected resource group.
        :param pulumi.Input[str] adls_subscription_id: The ID of the subscription the ADLS store belongs to. Defaults to selected subscription.
        :param pulumi.Input[str] authority_url: Authority url used to authenticate the user.
        :param pulumi.Input[str] client_id: The service principal's client/application ID.
        :param pulumi.Input[str] client_secret: The service principal's secret.
        :param pulumi.Input[str] container_name: The name of the azure blob container.
        :param pulumi.Input[str] data_store_type: Specifies datastore type.
        :param pulumi.Input[str] database_name: The database name.
        :param pulumi.Input[str] datastore_name: The Datastore name.
        :param pulumi.Input[str] description: The description of the datastore.
        :param pulumi.Input[str] endpoint: The endpoint of the server.
        :param pulumi.Input[bool] enforce_ssl: This sets the ssl value of the server. Defaults to true if not set.
        :param pulumi.Input[str] file_system: The file system name of the ADLS Gen2.
        :param pulumi.Input[bool] include_secret: Include datastore secret in response.
        :param pulumi.Input[str] name: The name of the datastore.
        :param pulumi.Input[str] password: The password.
        :param pulumi.Input[str] port: The port number.
        :param pulumi.Input[str] protocol: The protocol to be used
        :param pulumi.Input[str] resource_group_name: Name of the resource group in which workspace is located.
        :param pulumi.Input[str] resource_url: Determines what operations will be performed.
        :param pulumi.Input[str] sas_token: Sas Token of storage account.
        :param pulumi.Input[str] server_name: The SQL/MySQL/PostgreSQL server name
        :param pulumi.Input[str] share_name: The name of the file share.
        :param pulumi.Input[bool] skip_validation: Skip validation that ensures data can be loaded from the dataset before registration.
        :param pulumi.Input[str] storage_account_resource_group: The resource group of the storage account. Defaults to selected resource group
        :param pulumi.Input[str] storage_account_subscription_id: The subscription ID of the storage account. Defaults to selected subscription
        :param pulumi.Input[str] store_name: The ADLS store name.
        :param pulumi.Input[str] tenant_id: The service principal Tenant ID.
        :param pulumi.Input[str] user_id: The user ID.
        :param pulumi.Input[str] user_name: The username of the database user.
        :param pulumi.Input[str] workspace_name: Name of Azure Machine Learning workspace.
        :param pulumi.Input[bool] workspace_system_assigned_identity: If set to true, datastore support data access authenticated with Workspace MSI.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['account_key'] = account_key
            __props__['account_name'] = account_name
            __props__['adls_resource_group'] = adls_resource_group
            __props__['adls_subscription_id'] = adls_subscription_id
            __props__['authority_url'] = authority_url
            __props__['client_id'] = client_id
            __props__['client_secret'] = client_secret
            __props__['container_name'] = container_name
            if data_store_type is None:
                raise TypeError("Missing required property 'data_store_type'")
            __props__['data_store_type'] = data_store_type
            __props__['database_name'] = database_name
            if datastore_name is None:
                raise TypeError("Missing required property 'datastore_name'")
            __props__['datastore_name'] = datastore_name
            __props__['description'] = description
            __props__['endpoint'] = endpoint
            __props__['enforce_ssl'] = enforce_ssl
            __props__['file_system'] = file_system
            __props__['include_secret'] = include_secret
            __props__['name'] = name
            __props__['password'] = password
            __props__['port'] = port
            __props__['protocol'] = protocol
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['resource_url'] = resource_url
            __props__['sas_token'] = sas_token
            __props__['server_name'] = server_name
            __props__['share_name'] = share_name
            __props__['skip_validation'] = skip_validation
            __props__['storage_account_resource_group'] = storage_account_resource_group
            __props__['storage_account_subscription_id'] = storage_account_subscription_id
            __props__['store_name'] = store_name
            __props__['tenant_id'] = tenant_id
            __props__['user_id'] = user_id
            __props__['user_name'] = user_name
            if workspace_name is None:
                raise TypeError("Missing required property 'workspace_name'")
            __props__['workspace_name'] = workspace_name
            __props__['workspace_system_assigned_identity'] = workspace_system_assigned_identity
            __props__['identity'] = None
            __props__['location'] = None
            __props__['properties'] = None
            __props__['sku'] = None
            __props__['tags'] = None
            __props__['type'] = None
        super(MachineLearningDatastore, __self__).__init__(
            'azure-nextgen:machinelearningservices/v20200501preview:MachineLearningDatastore',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'MachineLearningDatastore':
        """
        Get an existing MachineLearningDatastore resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return MachineLearningDatastore(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.IdentityResponse']]:
        """
        The identity of the resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the location of the resource.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output['outputs.DatastoreResponse']:
        """
        Datastore properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Output[Optional['outputs.SkuResponse']]:
        """
        The sku of the workspace.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Contains resource tags defined as key/value pairs.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Specifies the type of the resource.
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

