# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'GetSqlManagedInstanceResult',
    'AwaitableGetSqlManagedInstanceResult',
    'get_sql_managed_instance',
]

@pulumi.output_type
class GetSqlManagedInstanceResult:
    """
    A SqlManagedInstance.
    """
    def __init__(__self__, admin=None, data_controller_id=None, end_time=None, instance_endpoint=None, k8s_raw=None, last_uploaded_date=None, location=None, name=None, start_time=None, system_data=None, tags=None, type=None, v_core=None):
        if admin and not isinstance(admin, str):
            raise TypeError("Expected argument 'admin' to be a str")
        pulumi.set(__self__, "admin", admin)
        if data_controller_id and not isinstance(data_controller_id, str):
            raise TypeError("Expected argument 'data_controller_id' to be a str")
        pulumi.set(__self__, "data_controller_id", data_controller_id)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if instance_endpoint and not isinstance(instance_endpoint, str):
            raise TypeError("Expected argument 'instance_endpoint' to be a str")
        pulumi.set(__self__, "instance_endpoint", instance_endpoint)
        if k8s_raw and not isinstance(k8s_raw, dict):
            raise TypeError("Expected argument 'k8s_raw' to be a dict")
        pulumi.set(__self__, "k8s_raw", k8s_raw)
        if last_uploaded_date and not isinstance(last_uploaded_date, str):
            raise TypeError("Expected argument 'last_uploaded_date' to be a str")
        pulumi.set(__self__, "last_uploaded_date", last_uploaded_date)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if v_core and not isinstance(v_core, str):
            raise TypeError("Expected argument 'v_core' to be a str")
        pulumi.set(__self__, "v_core", v_core)

    @property
    @pulumi.getter
    def admin(self) -> Optional[str]:
        """
        The instance admin user
        """
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter(name="dataControllerId")
    def data_controller_id(self) -> Optional[str]:
        """
        null
        """
        return pulumi.get(self, "data_controller_id")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        The instance end time
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="instanceEndpoint")
    def instance_endpoint(self) -> Optional[str]:
        """
        The on premise instance endpoint
        """
        return pulumi.get(self, "instance_endpoint")

    @property
    @pulumi.getter(name="k8sRaw")
    def k8s_raw(self) -> Optional[Any]:
        """
        The raw kubernetes information
        """
        return pulumi.get(self, "k8s_raw")

    @property
    @pulumi.getter(name="lastUploadedDate")
    def last_uploaded_date(self) -> Optional[str]:
        """
        Last uploaded date from on premise cluster. Defaults to current date time
        """
        return pulumi.get(self, "last_uploaded_date")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        The instance start time
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Read only system data
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vCore")
    def v_core(self) -> Optional[str]:
        """
        The instance vCore
        """
        return pulumi.get(self, "v_core")


class AwaitableGetSqlManagedInstanceResult(GetSqlManagedInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSqlManagedInstanceResult(
            admin=self.admin,
            data_controller_id=self.data_controller_id,
            end_time=self.end_time,
            instance_endpoint=self.instance_endpoint,
            k8s_raw=self.k8s_raw,
            last_uploaded_date=self.last_uploaded_date,
            location=self.location,
            name=self.name,
            start_time=self.start_time,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type,
            v_core=self.v_core)


def get_sql_managed_instance(resource_group_name: Optional[str] = None,
                             sql_managed_instance_name: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSqlManagedInstanceResult:
    """
    Use this data source to access information about an existing resource.

    :param str resource_group_name: The name of the Azure resource group
    :param str sql_managed_instance_name: Name of SQL Managed Instance
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['sqlManagedInstanceName'] = sql_managed_instance_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-nextgen:azuredata/v20200908preview:getSqlManagedInstance', __args__, opts=opts, typ=GetSqlManagedInstanceResult).value

    return AwaitableGetSqlManagedInstanceResult(
        admin=__ret__.admin,
        data_controller_id=__ret__.data_controller_id,
        end_time=__ret__.end_time,
        instance_endpoint=__ret__.instance_endpoint,
        k8s_raw=__ret__.k8s_raw,
        last_uploaded_date=__ret__.last_uploaded_date,
        location=__ret__.location,
        name=__ret__.name,
        start_time=__ret__.start_time,
        system_data=__ret__.system_data,
        tags=__ret__.tags,
        type=__ret__.type,
        v_core=__ret__.v_core)
