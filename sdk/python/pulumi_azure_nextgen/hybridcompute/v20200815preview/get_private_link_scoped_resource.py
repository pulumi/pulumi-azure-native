# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'GetPrivateLinkScopedResourceResult',
    'AwaitableGetPrivateLinkScopedResourceResult',
    'get_private_link_scoped_resource',
]

@pulumi.output_type
class GetPrivateLinkScopedResourceResult:
    """
    A private link scoped resource
    """
    def __init__(__self__, linked_resource_id=None, name=None, provisioning_state=None, type=None):
        if linked_resource_id and not isinstance(linked_resource_id, str):
            raise TypeError("Expected argument 'linked_resource_id' to be a str")
        pulumi.set(__self__, "linked_resource_id", linked_resource_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="linkedResourceId")
    def linked_resource_id(self) -> Optional[str]:
        """
        The resource id of the scoped Azure monitor resource.
        """
        return pulumi.get(self, "linked_resource_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        State of the private endpoint connection.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetPrivateLinkScopedResourceResult(GetPrivateLinkScopedResourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateLinkScopedResourceResult(
            linked_resource_id=self.linked_resource_id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            type=self.type)


def get_private_link_scoped_resource(name: Optional[str] = None,
                                     resource_group_name: Optional[str] = None,
                                     scope_name: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateLinkScopedResourceResult:
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the scoped resource object.
    :param str resource_group_name: The name of the resource group.
    :param str scope_name: The name of the Azure Arc PrivateLinkScope resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['scopeName'] = scope_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-nextgen:hybridcompute/v20200815preview:getPrivateLinkScopedResource', __args__, opts=opts, typ=GetPrivateLinkScopedResourceResult).value

    return AwaitableGetPrivateLinkScopedResourceResult(
        linked_resource_id=__ret__.linked_resource_id,
        name=__ret__.name,
        provisioning_state=__ret__.provisioning_state,
        type=__ret__.type)
