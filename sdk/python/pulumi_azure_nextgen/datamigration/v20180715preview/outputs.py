# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'AzureActiveDirectoryAppResponse',
    'BackupFileInfoResponse',
    'BackupSetInfoResponse',
    'BlobShareResponse',
    'ConnectToMongoDbTaskPropertiesResponse',
    'ConnectToSourceOracleSyncTaskInputResponse',
    'ConnectToSourceOracleSyncTaskOutputResponse',
    'ConnectToSourceOracleSyncTaskPropertiesResponse',
    'ConnectToSourcePostgreSqlSyncTaskInputResponse',
    'ConnectToSourcePostgreSqlSyncTaskOutputResponse',
    'ConnectToSourcePostgreSqlSyncTaskPropertiesResponse',
    'ConnectToSourceSqlServerSyncTaskPropertiesResponse',
    'ConnectToSourceSqlServerTaskInputResponse',
    'ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse',
    'ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse',
    'ConnectToSourceSqlServerTaskOutputLoginLevelResponse',
    'ConnectToSourceSqlServerTaskOutputTaskLevelResponse',
    'ConnectToSourceSqlServerTaskPropertiesResponse',
    'ConnectToTargetAzureDbForMySqlTaskInputResponse',
    'ConnectToTargetAzureDbForMySqlTaskOutputResponse',
    'ConnectToTargetAzureDbForMySqlTaskPropertiesResponse',
    'ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse',
    'ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse',
    'ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse',
    'ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse',
    'ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse',
    'ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap',
    'ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse',
    'ConnectToTargetSqlDbTaskInputResponse',
    'ConnectToTargetSqlDbTaskOutputResponse',
    'ConnectToTargetSqlDbTaskPropertiesResponse',
    'ConnectToTargetSqlMISyncTaskInputResponse',
    'ConnectToTargetSqlMISyncTaskOutputResponse',
    'ConnectToTargetSqlMISyncTaskPropertiesResponse',
    'ConnectToTargetSqlMITaskInputResponse',
    'ConnectToTargetSqlMITaskOutputResponse',
    'ConnectToTargetSqlMITaskPropertiesResponse',
    'ConnectToTargetSqlSqlDbSyncTaskInputResponse',
    'ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse',
    'DataItemMigrationSummaryResultResponse',
    'DatabaseBackupInfoResponse',
    'DatabaseFileInfoResponse',
    'DatabaseInfoResponse',
    'DatabaseSummaryResultResponse',
    'DatabaseTableResponse',
    'FileShareResponse',
    'GetTdeCertificatesSqlTaskInputResponse',
    'GetTdeCertificatesSqlTaskOutputResponse',
    'GetTdeCertificatesSqlTaskPropertiesResponse',
    'GetUserTablesOracleTaskInputResponse',
    'GetUserTablesOracleTaskOutputResponse',
    'GetUserTablesOracleTaskPropertiesResponse',
    'GetUserTablesPostgreSqlTaskInputResponse',
    'GetUserTablesPostgreSqlTaskOutputResponse',
    'GetUserTablesPostgreSqlTaskPropertiesResponse',
    'GetUserTablesSqlSyncTaskInputResponse',
    'GetUserTablesSqlSyncTaskOutputResponse',
    'GetUserTablesSqlSyncTaskPropertiesResponse',
    'GetUserTablesSqlTaskInputResponse',
    'GetUserTablesSqlTaskOutputResponse',
    'GetUserTablesSqlTaskPropertiesResponse',
    'MiSqlConnectionInfoResponse',
    'MigrateMISyncCompleteCommandInputResponse',
    'MigrateMISyncCompleteCommandOutputResponse',
    'MigrateMISyncCompleteCommandPropertiesResponse',
    'MigrateMongoDbTaskPropertiesResponse',
    'MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse',
    'MigrateMySqlAzureDbForMySqlSyncTaskInputResponse',
    'MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse',
    'MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse',
    'MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse',
    'MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse',
    'MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse',
    'MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse',
    'MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse',
    'MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse',
    'MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse',
    'MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse',
    'MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse',
    'MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse',
    'MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse',
    'MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse',
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse',
    'MigrateSqlServerSqlDbDatabaseInputResponse',
    'MigrateSqlServerSqlDbSyncDatabaseInputResponse',
    'MigrateSqlServerSqlDbSyncTaskInputResponse',
    'MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse',
    'MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse',
    'MigrateSqlServerSqlDbSyncTaskOutputErrorResponse',
    'MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse',
    'MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse',
    'MigrateSqlServerSqlDbSyncTaskPropertiesResponse',
    'MigrateSqlServerSqlDbTaskInputResponse',
    'MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse',
    'MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse',
    'MigrateSqlServerSqlDbTaskOutputErrorResponse',
    'MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse',
    'MigrateSqlServerSqlDbTaskOutputTableLevelResponse',
    'MigrateSqlServerSqlDbTaskOutputValidationResultResponse',
    'MigrateSqlServerSqlDbTaskPropertiesResponse',
    'MigrateSqlServerSqlMIDatabaseInputResponse',
    'MigrateSqlServerSqlMISyncTaskInputResponse',
    'MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse',
    'MigrateSqlServerSqlMISyncTaskOutputErrorResponse',
    'MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse',
    'MigrateSqlServerSqlMISyncTaskPropertiesResponse',
    'MigrateSqlServerSqlMITaskInputResponse',
    'MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse',
    'MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse',
    'MigrateSqlServerSqlMITaskOutputErrorResponse',
    'MigrateSqlServerSqlMITaskOutputLoginLevelResponse',
    'MigrateSqlServerSqlMITaskOutputMigrationLevelResponse',
    'MigrateSqlServerSqlMITaskPropertiesResponse',
    'MigrateSsisTaskInputResponse',
    'MigrateSsisTaskOutputMigrationLevelResponse',
    'MigrateSsisTaskOutputProjectLevelResponse',
    'MigrateSsisTaskPropertiesResponse',
    'MigrateSyncCompleteCommandInputResponse',
    'MigrateSyncCompleteCommandOutputResponse',
    'MigrateSyncCompleteCommandPropertiesResponse',
    'MigrationEligibilityInfoResponse',
    'MigrationReportResultResponse',
    'MigrationValidationDatabaseSummaryResultResponse',
    'MigrationValidationOptionsResponse',
    'MigrationValidationResultResponse',
    'MongoDbClusterInfoResponse',
    'MongoDbCollectionInfoResponse',
    'MongoDbCollectionProgressResponse',
    'MongoDbCollectionSettingsResponse',
    'MongoDbConnectionInfoResponse',
    'MongoDbDatabaseInfoResponse',
    'MongoDbDatabaseProgressResponse',
    'MongoDbDatabaseSettingsResponse',
    'MongoDbErrorResponse',
    'MongoDbMigrationProgressResponse',
    'MongoDbMigrationSettingsResponse',
    'MongoDbShardKeyFieldResponse',
    'MongoDbShardKeyInfoResponse',
    'MongoDbShardKeySettingResponse',
    'MongoDbThrottlingSettingsResponse',
    'MySqlConnectionInfoResponse',
    'ODataErrorResponse',
    'OracleConnectionInfoResponse',
    'OrphanedUserInfoResponse',
    'PostgreSqlConnectionInfoResponse',
    'ProjectFilePropertiesResponse',
    'ReportableExceptionResponse',
    'SelectedCertificateInputResponse',
    'ServiceSkuResponse',
    'SqlConnectionInfoResponse',
    'SsisMigrationInfoResponse',
    'StartMigrationScenarioServerRoleResultResponse',
    'SyncMigrationDatabaseErrorEventResponse',
    'ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse',
    'ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse',
    'ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse',
    'ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse',
    'ValidateMigrationInputSqlServerSqlMITaskInputResponse',
    'ValidateMigrationInputSqlServerSqlMITaskOutputResponse',
    'ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse',
    'ValidateMongoDbTaskPropertiesResponse',
    'ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse',
    'ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse',
    'ValidateSyncMigrationInputSqlServerTaskInputResponse',
    'ValidateSyncMigrationInputSqlServerTaskOutputResponse',
]

@pulumi.output_type
class AzureActiveDirectoryAppResponse(dict):
    """
    Azure Active Directory Application
    """
    def __init__(__self__, *,
                 app_key: str,
                 application_id: str,
                 tenant_id: str):
        """
        Azure Active Directory Application
        :param str app_key: Key used to authenticate to the Azure Active Directory Application
        :param str application_id: Application ID of the Azure Active Directory Application
        :param str tenant_id: Tenant id of the customer
        """
        pulumi.set(__self__, "app_key", app_key)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> str:
        """
        Key used to authenticate to the Azure Active Directory Application
        """
        return pulumi.get(self, "app_key")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        Application ID of the Azure Active Directory Application
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        Tenant id of the customer
        """
        return pulumi.get(self, "tenant_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupFileInfoResponse(dict):
    """
    Information of the backup file
    """
    def __init__(__self__, *,
                 family_sequence_number: Optional[int] = None,
                 file_location: Optional[str] = None,
                 status: Optional[str] = None):
        """
        Information of the backup file
        :param int family_sequence_number: Sequence number of the backup file in the backup set
        :param str file_location: Location of the backup file in shared folder
        :param str status: Status of the backup file during migration
        """
        if family_sequence_number is not None:
            pulumi.set(__self__, "family_sequence_number", family_sequence_number)
        if file_location is not None:
            pulumi.set(__self__, "file_location", file_location)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="familySequenceNumber")
    def family_sequence_number(self) -> Optional[int]:
        """
        Sequence number of the backup file in the backup set
        """
        return pulumi.get(self, "family_sequence_number")

    @property
    @pulumi.getter(name="fileLocation")
    def file_location(self) -> Optional[str]:
        """
        Location of the backup file in shared folder
        """
        return pulumi.get(self, "file_location")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status of the backup file during migration
        """
        return pulumi.get(self, "status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSetInfoResponse(dict):
    """
    Information of backup set
    """
    def __init__(__self__, *,
                 backup_finished_date: Optional[str] = None,
                 backup_set_id: Optional[str] = None,
                 backup_start_date: Optional[str] = None,
                 backup_type: Optional[str] = None,
                 database_name: Optional[str] = None,
                 first_lsn: Optional[str] = None,
                 is_backup_restored: Optional[bool] = None,
                 last_lsn: Optional[str] = None,
                 last_modified_time: Optional[str] = None,
                 list_of_backup_files: Optional[Sequence['outputs.BackupFileInfoResponse']] = None):
        """
        Information of backup set
        :param str backup_finished_date: Date and time that the backup operation finished
        :param str backup_set_id: Id for the set of backup files
        :param str backup_start_date: Date and time that the backup operation began
        :param str backup_type: Enum of the different backup types
        :param str database_name: Name of the database to which the backup set belongs
        :param str first_lsn: First log sequence number of the backup file
        :param bool is_backup_restored: Whether the backup set is restored or not
        :param str last_lsn: Last log sequence number of the backup file
        :param str last_modified_time: Last modified time of the backup file in share location
        :param Sequence['BackupFileInfoResponseArgs'] list_of_backup_files: List of files in the backup set
        """
        if backup_finished_date is not None:
            pulumi.set(__self__, "backup_finished_date", backup_finished_date)
        if backup_set_id is not None:
            pulumi.set(__self__, "backup_set_id", backup_set_id)
        if backup_start_date is not None:
            pulumi.set(__self__, "backup_start_date", backup_start_date)
        if backup_type is not None:
            pulumi.set(__self__, "backup_type", backup_type)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if first_lsn is not None:
            pulumi.set(__self__, "first_lsn", first_lsn)
        if is_backup_restored is not None:
            pulumi.set(__self__, "is_backup_restored", is_backup_restored)
        if last_lsn is not None:
            pulumi.set(__self__, "last_lsn", last_lsn)
        if last_modified_time is not None:
            pulumi.set(__self__, "last_modified_time", last_modified_time)
        if list_of_backup_files is not None:
            pulumi.set(__self__, "list_of_backup_files", list_of_backup_files)

    @property
    @pulumi.getter(name="backupFinishedDate")
    def backup_finished_date(self) -> Optional[str]:
        """
        Date and time that the backup operation finished
        """
        return pulumi.get(self, "backup_finished_date")

    @property
    @pulumi.getter(name="backupSetId")
    def backup_set_id(self) -> Optional[str]:
        """
        Id for the set of backup files
        """
        return pulumi.get(self, "backup_set_id")

    @property
    @pulumi.getter(name="backupStartDate")
    def backup_start_date(self) -> Optional[str]:
        """
        Date and time that the backup operation began
        """
        return pulumi.get(self, "backup_start_date")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[str]:
        """
        Enum of the different backup types
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        Name of the database to which the backup set belongs
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="firstLsn")
    def first_lsn(self) -> Optional[str]:
        """
        First log sequence number of the backup file
        """
        return pulumi.get(self, "first_lsn")

    @property
    @pulumi.getter(name="isBackupRestored")
    def is_backup_restored(self) -> Optional[bool]:
        """
        Whether the backup set is restored or not
        """
        return pulumi.get(self, "is_backup_restored")

    @property
    @pulumi.getter(name="lastLsn")
    def last_lsn(self) -> Optional[str]:
        """
        Last log sequence number of the backup file
        """
        return pulumi.get(self, "last_lsn")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> Optional[str]:
        """
        Last modified time of the backup file in share location
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="listOfBackupFiles")
    def list_of_backup_files(self) -> Optional[Sequence['outputs.BackupFileInfoResponse']]:
        """
        List of files in the backup set
        """
        return pulumi.get(self, "list_of_backup_files")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BlobShareResponse(dict):
    """
    Blob container storage information.
    """
    def __init__(__self__, *,
                 sas_uri: str):
        """
        Blob container storage information.
        :param str sas_uri: SAS URI of Azure Storage Account Container.
        """
        pulumi.set(__self__, "sas_uri", sas_uri)

    @property
    @pulumi.getter(name="sasUri")
    def sas_uri(self) -> str:
        """
        SAS URI of Azure Storage Account Container.
        """
        return pulumi.get(self, "sas_uri")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToMongoDbTaskPropertiesResponse(dict):
    """
    Properties for the task that validates the connection to and provides information about a MongoDB server
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.MongoDbClusterInfoResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.MongoDbConnectionInfoResponse'] = None):
        """
        Properties for the task that validates the connection to and provides information about a MongoDB server
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['MongoDbClusterInfoResponseArgs'] output: An array containing a single MongoDbClusterInfo object
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'MongoDbConnectionInfoResponseArgs' input: Describes a connection to a MongoDB data source
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'Connect.MongoDb')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.MongoDbClusterInfoResponse']:
        """
        An array containing a single MongoDbClusterInfo object
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MongoDbConnectionInfoResponse']:
        """
        Describes a connection to a MongoDB data source
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourceOracleSyncTaskInputResponse(dict):
    """
    Input for the task that validates Oracle database connection
    """
    def __init__(__self__, *,
                 source_connection_info: 'outputs.OracleConnectionInfoResponse'):
        """
        Input for the task that validates Oracle database connection
        :param 'OracleConnectionInfoResponseArgs' source_connection_info: Information for connecting to Oracle source
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.OracleConnectionInfoResponse':
        """
        Information for connecting to Oracle source
        """
        return pulumi.get(self, "source_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourceOracleSyncTaskOutputResponse(dict):
    """
    Output for the task that validates Oracle database connection
    """
    def __init__(__self__, *,
                 databases: Sequence[str],
                 source_server_brand_version: str,
                 source_server_version: str,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output for the task that validates Oracle database connection
        :param Sequence[str] databases: List of schemas on source server
        :param str source_server_brand_version: Source server brand version
        :param str source_server_version: Version of the source server
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors associated with the task
        """
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "source_server_brand_version", source_server_brand_version)
        pulumi.set(__self__, "source_server_version", source_server_version)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter
    def databases(self) -> Sequence[str]:
        """
        List of schemas on source server
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="sourceServerBrandVersion")
    def source_server_brand_version(self) -> str:
        """
        Source server brand version
        """
        return pulumi.get(self, "source_server_brand_version")

    @property
    @pulumi.getter(name="sourceServerVersion")
    def source_server_version(self) -> str:
        """
        Version of the source server
        """
        return pulumi.get(self, "source_server_version")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors associated with the task
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourceOracleSyncTaskPropertiesResponse(dict):
    """
    Properties for the task that validates Oracle database connection
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ConnectToSourceOracleSyncTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ConnectToSourceOracleSyncTaskInputResponse'] = None):
        """
        Properties for the task that validates Oracle database connection
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ConnectToSourceOracleSyncTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ConnectToSourceOracleSyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ConnectToSource.Oracle.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ConnectToSourceOracleSyncTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ConnectToSourceOracleSyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourcePostgreSqlSyncTaskInputResponse(dict):
    """
    Input for the task that validates connection to PostgreSQL and source server requirements
    """
    def __init__(__self__, *,
                 source_connection_info: 'outputs.PostgreSqlConnectionInfoResponse'):
        """
        Input for the task that validates connection to PostgreSQL and source server requirements
        :param 'PostgreSqlConnectionInfoResponseArgs' source_connection_info: Connection information for source PostgreSQL server
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.PostgreSqlConnectionInfoResponse':
        """
        Connection information for source PostgreSQL server
        """
        return pulumi.get(self, "source_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourcePostgreSqlSyncTaskOutputResponse(dict):
    """
    Output for the task that validates connection to PostgreSQL and source server requirements
    """
    def __init__(__self__, *,
                 databases: Sequence[str],
                 id: str,
                 source_server_brand_version: str,
                 source_server_version: str,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output for the task that validates connection to PostgreSQL and source server requirements
        :param Sequence[str] databases: List of databases on source server
        :param str id: Result identifier
        :param str source_server_brand_version: Source server brand version
        :param str source_server_version: Version of the source server
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors associated with the task
        """
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source_server_brand_version", source_server_brand_version)
        pulumi.set(__self__, "source_server_version", source_server_version)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter
    def databases(self) -> Sequence[str]:
        """
        List of databases on source server
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sourceServerBrandVersion")
    def source_server_brand_version(self) -> str:
        """
        Source server brand version
        """
        return pulumi.get(self, "source_server_brand_version")

    @property
    @pulumi.getter(name="sourceServerVersion")
    def source_server_version(self) -> str:
        """
        Version of the source server
        """
        return pulumi.get(self, "source_server_version")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors associated with the task
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourcePostgreSqlSyncTaskPropertiesResponse(dict):
    """
    Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ConnectToSourcePostgreSqlSyncTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ConnectToSourcePostgreSqlSyncTaskInputResponse'] = None):
        """
        Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ConnectToSourcePostgreSqlSyncTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ConnectToSourcePostgreSqlSyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ConnectToSource.PostgreSql.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ConnectToSourcePostgreSqlSyncTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ConnectToSourcePostgreSqlSyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourceSqlServerSyncTaskPropertiesResponse(dict):
    """
    Properties for the task that validates connection to SQL Server and source server requirements for online migration
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence[Any],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ConnectToSourceSqlServerTaskInputResponse'] = None):
        """
        Properties for the task that validates connection to SQL Server and source server requirements for online migration
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence[Union['ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseArgs', 'ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs', 'ConnectToSourceSqlServerTaskOutputLoginLevelResponseArgs', 'ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs']] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ConnectToSourceSqlServerTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ConnectToSource.SqlServer.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence[Any]:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ConnectToSourceSqlServerTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourceSqlServerTaskInputResponse(dict):
    """
    Input for the task that validates connection to SQL Server and also validates source server requirements
    """
    def __init__(__self__, *,
                 source_connection_info: 'outputs.SqlConnectionInfoResponse',
                 check_permissions_group: Optional[str] = None,
                 collect_agent_jobs: Optional[bool] = None,
                 collect_databases: Optional[bool] = None,
                 collect_logins: Optional[bool] = None,
                 collect_tde_certificate_info: Optional[bool] = None,
                 validate_ssis_catalog_only: Optional[bool] = None):
        """
        Input for the task that validates connection to SQL Server and also validates source server requirements
        :param 'SqlConnectionInfoResponseArgs' source_connection_info: Connection information for Source SQL Server
        :param str check_permissions_group: Permission group for validations
        :param bool collect_agent_jobs: Flag for whether to collect agent jobs from source server.
        :param bool collect_databases: Flag for whether to collect databases from source server.
        :param bool collect_logins: Flag for whether to collect logins from source server.
        :param bool collect_tde_certificate_info: Flag for whether to collect TDE Certificate names from source server.
        :param bool validate_ssis_catalog_only: Flag for whether to validate SSIS catalog is reachable on the source server.
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        if check_permissions_group is not None:
            pulumi.set(__self__, "check_permissions_group", check_permissions_group)
        if collect_agent_jobs is not None:
            pulumi.set(__self__, "collect_agent_jobs", collect_agent_jobs)
        if collect_databases is not None:
            pulumi.set(__self__, "collect_databases", collect_databases)
        if collect_logins is not None:
            pulumi.set(__self__, "collect_logins", collect_logins)
        if collect_tde_certificate_info is not None:
            pulumi.set(__self__, "collect_tde_certificate_info", collect_tde_certificate_info)
        if validate_ssis_catalog_only is not None:
            pulumi.set(__self__, "validate_ssis_catalog_only", validate_ssis_catalog_only)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Connection information for Source SQL Server
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="checkPermissionsGroup")
    def check_permissions_group(self) -> Optional[str]:
        """
        Permission group for validations
        """
        return pulumi.get(self, "check_permissions_group")

    @property
    @pulumi.getter(name="collectAgentJobs")
    def collect_agent_jobs(self) -> Optional[bool]:
        """
        Flag for whether to collect agent jobs from source server.
        """
        return pulumi.get(self, "collect_agent_jobs")

    @property
    @pulumi.getter(name="collectDatabases")
    def collect_databases(self) -> Optional[bool]:
        """
        Flag for whether to collect databases from source server.
        """
        return pulumi.get(self, "collect_databases")

    @property
    @pulumi.getter(name="collectLogins")
    def collect_logins(self) -> Optional[bool]:
        """
        Flag for whether to collect logins from source server.
        """
        return pulumi.get(self, "collect_logins")

    @property
    @pulumi.getter(name="collectTdeCertificateInfo")
    def collect_tde_certificate_info(self) -> Optional[bool]:
        """
        Flag for whether to collect TDE Certificate names from source server.
        """
        return pulumi.get(self, "collect_tde_certificate_info")

    @property
    @pulumi.getter(name="validateSsisCatalogOnly")
    def validate_ssis_catalog_only(self) -> Optional[bool]:
        """
        Flag for whether to validate SSIS catalog is reachable on the source server.
        """
        return pulumi.get(self, "validate_ssis_catalog_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse(dict):
    """
    Agent Job level output for the task that validates connection to SQL Server and also validates source server requirements
    """
    def __init__(__self__, *,
                 id: str,
                 is_enabled: bool,
                 job_category: str,
                 job_owner: str,
                 last_executed_on: str,
                 migration_eligibility: 'outputs.MigrationEligibilityInfoResponse',
                 name: str,
                 result_type: str,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Agent Job level output for the task that validates connection to SQL Server and also validates source server requirements
        :param str id: Result identifier
        :param bool is_enabled: The state of the original Agent Job.
        :param str job_category: The type of Agent Job.
        :param str job_owner: The owner of the Agent Job
        :param str last_executed_on: UTC Date and time when the Agent Job was last executed.
        :param 'MigrationEligibilityInfoResponseArgs' migration_eligibility: Information about eligibility of agent job for migration.
        :param str name: Agent Job name
        :param str result_type: Type of result - database level or task level
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "job_category", job_category)
        pulumi.set(__self__, "job_owner", job_owner)
        pulumi.set(__self__, "last_executed_on", last_executed_on)
        pulumi.set(__self__, "migration_eligibility", migration_eligibility)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "result_type", 'AgentJobLevelOutput')
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        The state of the original Agent Job.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="jobCategory")
    def job_category(self) -> str:
        """
        The type of Agent Job.
        """
        return pulumi.get(self, "job_category")

    @property
    @pulumi.getter(name="jobOwner")
    def job_owner(self) -> str:
        """
        The owner of the Agent Job
        """
        return pulumi.get(self, "job_owner")

    @property
    @pulumi.getter(name="lastExecutedOn")
    def last_executed_on(self) -> str:
        """
        UTC Date and time when the Agent Job was last executed.
        """
        return pulumi.get(self, "last_executed_on")

    @property
    @pulumi.getter(name="migrationEligibility")
    def migration_eligibility(self) -> 'outputs.MigrationEligibilityInfoResponse':
        """
        Information about eligibility of agent job for migration.
        """
        return pulumi.get(self, "migration_eligibility")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Agent Job name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Type of result - database level or task level
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse(dict):
    """
    Database level output for the task that validates connection to SQL Server and also validates source server requirements
    """
    def __init__(__self__, *,
                 compatibility_level: str,
                 database_files: Sequence['outputs.DatabaseFileInfoResponse'],
                 database_state: str,
                 id: str,
                 name: str,
                 result_type: str,
                 size_mb: float):
        """
        Database level output for the task that validates connection to SQL Server and also validates source server requirements
        :param str compatibility_level: SQL Server compatibility level of database
        :param Sequence['DatabaseFileInfoResponseArgs'] database_files: The list of database files
        :param str database_state: State of the database
        :param str id: Result identifier
        :param str name: Database name
        :param str result_type: Type of result - database level or task level
        :param float size_mb: Size of the file in megabytes
        """
        pulumi.set(__self__, "compatibility_level", compatibility_level)
        pulumi.set(__self__, "database_files", database_files)
        pulumi.set(__self__, "database_state", database_state)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "result_type", 'DatabaseLevelOutput')
        pulumi.set(__self__, "size_mb", size_mb)

    @property
    @pulumi.getter(name="compatibilityLevel")
    def compatibility_level(self) -> str:
        """
        SQL Server compatibility level of database
        """
        return pulumi.get(self, "compatibility_level")

    @property
    @pulumi.getter(name="databaseFiles")
    def database_files(self) -> Sequence['outputs.DatabaseFileInfoResponse']:
        """
        The list of database files
        """
        return pulumi.get(self, "database_files")

    @property
    @pulumi.getter(name="databaseState")
    def database_state(self) -> str:
        """
        State of the database
        """
        return pulumi.get(self, "database_state")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Database name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Type of result - database level or task level
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="sizeMB")
    def size_mb(self) -> float:
        """
        Size of the file in megabytes
        """
        return pulumi.get(self, "size_mb")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourceSqlServerTaskOutputLoginLevelResponse(dict):
    """
    Login level output for the task that validates connection to SQL Server and also validates source server requirements
    """
    def __init__(__self__, *,
                 default_database: str,
                 id: str,
                 is_enabled: bool,
                 login_type: str,
                 migration_eligibility: 'outputs.MigrationEligibilityInfoResponse',
                 name: str,
                 result_type: str):
        """
        Login level output for the task that validates connection to SQL Server and also validates source server requirements
        :param str default_database: The default database for the login.
        :param str id: Result identifier
        :param bool is_enabled: The state of the login.
        :param str login_type: The type of login.
        :param 'MigrationEligibilityInfoResponseArgs' migration_eligibility: Information about eligibility of login for migration.
        :param str name: Login name.
        :param str result_type: Type of result - database level or task level
        """
        pulumi.set(__self__, "default_database", default_database)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "login_type", login_type)
        pulumi.set(__self__, "migration_eligibility", migration_eligibility)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "result_type", 'LoginLevelOutput')

    @property
    @pulumi.getter(name="defaultDatabase")
    def default_database(self) -> str:
        """
        The default database for the login.
        """
        return pulumi.get(self, "default_database")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        The state of the login.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="loginType")
    def login_type(self) -> str:
        """
        The type of login.
        """
        return pulumi.get(self, "login_type")

    @property
    @pulumi.getter(name="migrationEligibility")
    def migration_eligibility(self) -> 'outputs.MigrationEligibilityInfoResponse':
        """
        Information about eligibility of login for migration.
        """
        return pulumi.get(self, "migration_eligibility")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Login name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Type of result - database level or task level
        """
        return pulumi.get(self, "result_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourceSqlServerTaskOutputTaskLevelResponse(dict):
    """
    Task level output for the task that validates connection to SQL Server and also validates source server requirements
    """
    def __init__(__self__, *,
                 agent_jobs: Mapping[str, str],
                 database_tde_certificate_mapping: Mapping[str, str],
                 databases: Mapping[str, str],
                 id: str,
                 logins: Mapping[str, str],
                 result_type: str,
                 source_server_brand_version: str,
                 source_server_version: str,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Task level output for the task that validates connection to SQL Server and also validates source server requirements
        :param Mapping[str, str] agent_jobs: Source agent jobs as a map from agent job name to id.
        :param Mapping[str, str] database_tde_certificate_mapping: Mapping from database name to TDE certificate name, if applicable
        :param Mapping[str, str] databases: Source databases as a map from database name to database id
        :param str id: Result identifier
        :param Mapping[str, str] logins: Source logins as a map from login name to login id.
        :param str result_type: Type of result - database level or task level
        :param str source_server_brand_version: Source server brand version
        :param str source_server_version: Source server version
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors
        """
        pulumi.set(__self__, "agent_jobs", agent_jobs)
        pulumi.set(__self__, "database_tde_certificate_mapping", database_tde_certificate_mapping)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logins", logins)
        pulumi.set(__self__, "result_type", 'TaskLevelOutput')
        pulumi.set(__self__, "source_server_brand_version", source_server_brand_version)
        pulumi.set(__self__, "source_server_version", source_server_version)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter(name="agentJobs")
    def agent_jobs(self) -> Mapping[str, str]:
        """
        Source agent jobs as a map from agent job name to id.
        """
        return pulumi.get(self, "agent_jobs")

    @property
    @pulumi.getter(name="databaseTdeCertificateMapping")
    def database_tde_certificate_mapping(self) -> Mapping[str, str]:
        """
        Mapping from database name to TDE certificate name, if applicable
        """
        return pulumi.get(self, "database_tde_certificate_mapping")

    @property
    @pulumi.getter
    def databases(self) -> Mapping[str, str]:
        """
        Source databases as a map from database name to database id
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logins(self) -> Mapping[str, str]:
        """
        Source logins as a map from login name to login id.
        """
        return pulumi.get(self, "logins")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Type of result - database level or task level
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="sourceServerBrandVersion")
    def source_server_brand_version(self) -> str:
        """
        Source server brand version
        """
        return pulumi.get(self, "source_server_brand_version")

    @property
    @pulumi.getter(name="sourceServerVersion")
    def source_server_version(self) -> str:
        """
        Source server version
        """
        return pulumi.get(self, "source_server_version")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToSourceSqlServerTaskPropertiesResponse(dict):
    """
    Properties for the task that validates connection to SQL Server and also validates source server requirements
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence[Any],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ConnectToSourceSqlServerTaskInputResponse'] = None):
        """
        Properties for the task that validates connection to SQL Server and also validates source server requirements
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence[Union['ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseArgs', 'ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs', 'ConnectToSourceSqlServerTaskOutputLoginLevelResponseArgs', 'ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs']] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ConnectToSourceSqlServerTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ConnectToSource.SqlServer')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence[Any]:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ConnectToSourceSqlServerTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetAzureDbForMySqlTaskInputResponse(dict):
    """
    Input for the task that validates connection to Azure Database for MySQL and target server requirements
    """
    def __init__(__self__, *,
                 source_connection_info: 'outputs.MySqlConnectionInfoResponse',
                 target_connection_info: 'outputs.MySqlConnectionInfoResponse'):
        """
        Input for the task that validates connection to Azure Database for MySQL and target server requirements
        :param 'MySqlConnectionInfoResponseArgs' source_connection_info: Connection information for source MySQL server
        :param 'MySqlConnectionInfoResponseArgs' target_connection_info: Connection information for target Azure Database for MySQL server
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.MySqlConnectionInfoResponse':
        """
        Connection information for source MySQL server
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.MySqlConnectionInfoResponse':
        """
        Connection information for target Azure Database for MySQL server
        """
        return pulumi.get(self, "target_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetAzureDbForMySqlTaskOutputResponse(dict):
    """
    Output for the task that validates connection to Azure Database for MySQL and target server requirements
    """
    def __init__(__self__, *,
                 databases: Sequence[str],
                 id: str,
                 server_version: str,
                 target_server_brand_version: str,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output for the task that validates connection to Azure Database for MySQL and target server requirements
        :param Sequence[str] databases: List of databases on target server
        :param str id: Result identifier
        :param str server_version: Version of the target server
        :param str target_server_brand_version: Target server brand version
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors associated with the task
        """
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "server_version", server_version)
        pulumi.set(__self__, "target_server_brand_version", target_server_brand_version)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter
    def databases(self) -> Sequence[str]:
        """
        List of databases on target server
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> str:
        """
        Version of the target server
        """
        return pulumi.get(self, "server_version")

    @property
    @pulumi.getter(name="targetServerBrandVersion")
    def target_server_brand_version(self) -> str:
        """
        Target server brand version
        """
        return pulumi.get(self, "target_server_brand_version")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors associated with the task
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetAzureDbForMySqlTaskPropertiesResponse(dict):
    """
    Properties for the task that validates connection to Azure Database for MySQL and target server requirements
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ConnectToTargetAzureDbForMySqlTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ConnectToTargetAzureDbForMySqlTaskInputResponse'] = None):
        """
        Properties for the task that validates connection to Azure Database for MySQL and target server requirements
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ConnectToTargetAzureDbForMySqlTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ConnectToTargetAzureDbForMySqlTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ConnectToTarget.AzureDbForMySql')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ConnectToTargetAzureDbForMySqlTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ConnectToTargetAzureDbForMySqlTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse(dict):
    """
    Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
    """
    def __init__(__self__, *,
                 source_connection_info: 'outputs.PostgreSqlConnectionInfoResponse',
                 target_connection_info: 'outputs.PostgreSqlConnectionInfoResponse'):
        """
        Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
        :param 'PostgreSqlConnectionInfoResponseArgs' source_connection_info: Connection information for source PostgreSQL server
        :param 'PostgreSqlConnectionInfoResponseArgs' target_connection_info: Connection information for target Azure Database for PostgreSQL server
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.PostgreSqlConnectionInfoResponse':
        """
        Connection information for source PostgreSQL server
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.PostgreSqlConnectionInfoResponse':
        """
        Connection information for target Azure Database for PostgreSQL server
        """
        return pulumi.get(self, "target_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse(dict):
    """
    Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements
    """
    def __init__(__self__, *,
                 databases: Sequence[str],
                 id: str,
                 target_server_brand_version: str,
                 target_server_version: str,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements
        :param Sequence[str] databases: List of databases on target server
        :param str id: Result identifier
        :param str target_server_brand_version: Target server brand version
        :param str target_server_version: Version of the target server
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors associated with the task
        """
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "target_server_brand_version", target_server_brand_version)
        pulumi.set(__self__, "target_server_version", target_server_version)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter
    def databases(self) -> Sequence[str]:
        """
        List of databases on target server
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="targetServerBrandVersion")
    def target_server_brand_version(self) -> str:
        """
        Target server brand version
        """
        return pulumi.get(self, "target_server_brand_version")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Version of the target server
        """
        return pulumi.get(self, "target_server_version")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors associated with the task
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse(dict):
    """
    Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse'] = None):
        """
        Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ConnectToTarget.AzureDbForPostgreSql.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse(dict):
    """
    Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
    """
    def __init__(__self__, *,
                 target_connection_info: 'outputs.PostgreSqlConnectionInfoResponse'):
        """
        Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
        :param 'PostgreSqlConnectionInfoResponseArgs' target_connection_info: Connection information for target Azure Database for PostgreSQL server
        """
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.PostgreSqlConnectionInfoResponse':
        """
        Connection information for target Azure Database for PostgreSQL server
        """
        return pulumi.get(self, "target_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse(dict):
    """
    Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
    """
    def __init__(__self__, *,
                 databases: Sequence[str],
                 target_server_brand_version: str,
                 target_server_version: str,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse'],
                 database_schema_map: Optional[Sequence['outputs.ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap']] = None):
        """
        Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
        :param Sequence[str] databases: List of databases on target server
        :param str target_server_brand_version: Target server brand version
        :param str target_server_version: Version of the target server
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors associated with the task
        :param Sequence['ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArgs'] database_schema_map: Mapping of schemas per database
        """
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "target_server_brand_version", target_server_brand_version)
        pulumi.set(__self__, "target_server_version", target_server_version)
        pulumi.set(__self__, "validation_errors", validation_errors)
        if database_schema_map is not None:
            pulumi.set(__self__, "database_schema_map", database_schema_map)

    @property
    @pulumi.getter
    def databases(self) -> Sequence[str]:
        """
        List of databases on target server
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="targetServerBrandVersion")
    def target_server_brand_version(self) -> str:
        """
        Target server brand version
        """
        return pulumi.get(self, "target_server_brand_version")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Version of the target server
        """
        return pulumi.get(self, "target_server_version")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors associated with the task
        """
        return pulumi.get(self, "validation_errors")

    @property
    @pulumi.getter(name="databaseSchemaMap")
    def database_schema_map(self) -> Optional[Sequence['outputs.ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap']]:
        """
        Mapping of schemas per database
        """
        return pulumi.get(self, "database_schema_map")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap(dict):
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None):
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse(dict):
    """
    Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse'] = None):
        """
        Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetSqlDbTaskInputResponse(dict):
    """
    Input for the task that validates connection to SQL DB and target server requirements
    """
    def __init__(__self__, *,
                 target_connection_info: 'outputs.SqlConnectionInfoResponse'):
        """
        Input for the task that validates connection to SQL DB and target server requirements
        :param 'SqlConnectionInfoResponseArgs' target_connection_info: Connection information for target SQL DB
        """
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Connection information for target SQL DB
        """
        return pulumi.get(self, "target_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetSqlDbTaskOutputResponse(dict):
    """
    Output for the task that validates connection to SQL DB and target server requirements
    """
    def __init__(__self__, *,
                 databases: Mapping[str, str],
                 id: str,
                 target_server_brand_version: str,
                 target_server_version: str):
        """
        Output for the task that validates connection to SQL DB and target server requirements
        :param Mapping[str, str] databases: Source databases as a map from database name to database id
        :param str id: Result identifier
        :param str target_server_brand_version: Target server brand version
        :param str target_server_version: Version of the target server
        """
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "target_server_brand_version", target_server_brand_version)
        pulumi.set(__self__, "target_server_version", target_server_version)

    @property
    @pulumi.getter
    def databases(self) -> Mapping[str, str]:
        """
        Source databases as a map from database name to database id
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="targetServerBrandVersion")
    def target_server_brand_version(self) -> str:
        """
        Target server brand version
        """
        return pulumi.get(self, "target_server_brand_version")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Version of the target server
        """
        return pulumi.get(self, "target_server_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetSqlDbTaskPropertiesResponse(dict):
    """
    Properties for the task that validates connection to SQL DB and target server requirements
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ConnectToTargetSqlDbTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ConnectToTargetSqlDbTaskInputResponse'] = None):
        """
        Properties for the task that validates connection to SQL DB and target server requirements
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ConnectToTargetSqlDbTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ConnectToTargetSqlDbTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ConnectToTarget.SqlDb')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ConnectToTargetSqlDbTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ConnectToTargetSqlDbTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetSqlMISyncTaskInputResponse(dict):
    """
    Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
    """
    def __init__(__self__, *,
                 azure_app: 'outputs.AzureActiveDirectoryAppResponse',
                 target_connection_info: 'outputs.MiSqlConnectionInfoResponse'):
        """
        Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
        :param 'AzureActiveDirectoryAppResponseArgs' azure_app: Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        :param 'MiSqlConnectionInfoResponseArgs' target_connection_info: Connection information for Azure SQL Database Managed Instance
        """
        pulumi.set(__self__, "azure_app", azure_app)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="azureApp")
    def azure_app(self) -> 'outputs.AzureActiveDirectoryAppResponse':
        """
        Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        """
        return pulumi.get(self, "azure_app")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.MiSqlConnectionInfoResponse':
        """
        Connection information for Azure SQL Database Managed Instance
        """
        return pulumi.get(self, "target_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetSqlMISyncTaskOutputResponse(dict):
    """
    Output for the task that validates connection to Azure SQL Database Managed Instance.
    """
    def __init__(__self__, *,
                 target_server_brand_version: str,
                 target_server_version: str,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output for the task that validates connection to Azure SQL Database Managed Instance.
        :param str target_server_brand_version: Target server brand version
        :param str target_server_version: Target server version
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors
        """
        pulumi.set(__self__, "target_server_brand_version", target_server_brand_version)
        pulumi.set(__self__, "target_server_version", target_server_version)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter(name="targetServerBrandVersion")
    def target_server_brand_version(self) -> str:
        """
        Target server brand version
        """
        return pulumi.get(self, "target_server_brand_version")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Target server version
        """
        return pulumi.get(self, "target_server_version")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetSqlMISyncTaskPropertiesResponse(dict):
    """
    Properties for the task that validates connection to Azure SQL Database Managed Instance
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ConnectToTargetSqlMISyncTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ConnectToTargetSqlMISyncTaskInputResponse'] = None):
        """
        Properties for the task that validates connection to Azure SQL Database Managed Instance
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ConnectToTargetSqlMISyncTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ConnectToTargetSqlMISyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ConnectToTarget.AzureSqlDbMI.Sync.LRS')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ConnectToTargetSqlMISyncTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ConnectToTargetSqlMISyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetSqlMITaskInputResponse(dict):
    """
    Input for the task that validates connection to Azure SQL Database Managed Instance.
    """
    def __init__(__self__, *,
                 target_connection_info: 'outputs.SqlConnectionInfoResponse',
                 collect_agent_jobs: Optional[bool] = None,
                 collect_logins: Optional[bool] = None,
                 validate_ssis_catalog_only: Optional[bool] = None):
        """
        Input for the task that validates connection to Azure SQL Database Managed Instance.
        :param 'SqlConnectionInfoResponseArgs' target_connection_info: Connection information for target SQL Server
        :param bool collect_agent_jobs: Flag for whether to collect agent jobs from target SQL MI server.
        :param bool collect_logins: Flag for whether to collect logins from target SQL MI server.
        :param bool validate_ssis_catalog_only: Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
        """
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if collect_agent_jobs is not None:
            pulumi.set(__self__, "collect_agent_jobs", collect_agent_jobs)
        if collect_logins is not None:
            pulumi.set(__self__, "collect_logins", collect_logins)
        if validate_ssis_catalog_only is not None:
            pulumi.set(__self__, "validate_ssis_catalog_only", validate_ssis_catalog_only)

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Connection information for target SQL Server
        """
        return pulumi.get(self, "target_connection_info")

    @property
    @pulumi.getter(name="collectAgentJobs")
    def collect_agent_jobs(self) -> Optional[bool]:
        """
        Flag for whether to collect agent jobs from target SQL MI server.
        """
        return pulumi.get(self, "collect_agent_jobs")

    @property
    @pulumi.getter(name="collectLogins")
    def collect_logins(self) -> Optional[bool]:
        """
        Flag for whether to collect logins from target SQL MI server.
        """
        return pulumi.get(self, "collect_logins")

    @property
    @pulumi.getter(name="validateSsisCatalogOnly")
    def validate_ssis_catalog_only(self) -> Optional[bool]:
        """
        Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
        """
        return pulumi.get(self, "validate_ssis_catalog_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetSqlMITaskOutputResponse(dict):
    """
    Output for the task that validates connection to Azure SQL Database Managed Instance.
    """
    def __init__(__self__, *,
                 agent_jobs: Sequence[str],
                 id: str,
                 logins: Sequence[str],
                 target_server_brand_version: str,
                 target_server_version: str,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output for the task that validates connection to Azure SQL Database Managed Instance.
        :param Sequence[str] agent_jobs: List of agent jobs on the target server.
        :param str id: Result identifier
        :param Sequence[str] logins: List of logins on the target server.
        :param str target_server_brand_version: Target server brand version
        :param str target_server_version: Target server version
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors
        """
        pulumi.set(__self__, "agent_jobs", agent_jobs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logins", logins)
        pulumi.set(__self__, "target_server_brand_version", target_server_brand_version)
        pulumi.set(__self__, "target_server_version", target_server_version)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter(name="agentJobs")
    def agent_jobs(self) -> Sequence[str]:
        """
        List of agent jobs on the target server.
        """
        return pulumi.get(self, "agent_jobs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logins(self) -> Sequence[str]:
        """
        List of logins on the target server.
        """
        return pulumi.get(self, "logins")

    @property
    @pulumi.getter(name="targetServerBrandVersion")
    def target_server_brand_version(self) -> str:
        """
        Target server brand version
        """
        return pulumi.get(self, "target_server_brand_version")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Target server version
        """
        return pulumi.get(self, "target_server_version")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetSqlMITaskPropertiesResponse(dict):
    """
    Properties for the task that validates connection to Azure SQL Database Managed Instance
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ConnectToTargetSqlMITaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ConnectToTargetSqlMITaskInputResponse'] = None):
        """
        Properties for the task that validates connection to Azure SQL Database Managed Instance
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ConnectToTargetSqlMITaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ConnectToTargetSqlMITaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ConnectToTarget.AzureSqlDbMI')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ConnectToTargetSqlMITaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ConnectToTargetSqlMITaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetSqlSqlDbSyncTaskInputResponse(dict):
    """
    Input for the task that validates connection to Azure SQL DB and target server requirements
    """
    def __init__(__self__, *,
                 source_connection_info: 'outputs.SqlConnectionInfoResponse',
                 target_connection_info: 'outputs.SqlConnectionInfoResponse'):
        """
        Input for the task that validates connection to Azure SQL DB and target server requirements
        :param 'SqlConnectionInfoResponseArgs' source_connection_info: Connection information for source SQL Server
        :param 'SqlConnectionInfoResponseArgs' target_connection_info: Connection information for target SQL DB
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Connection information for source SQL Server
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Connection information for target SQL DB
        """
        return pulumi.get(self, "target_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse(dict):
    """
    Properties for the task that validates connection to SQL DB and target server requirements for online migration
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ConnectToTargetSqlDbTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ConnectToTargetSqlSqlDbSyncTaskInputResponse'] = None):
        """
        Properties for the task that validates connection to SQL DB and target server requirements for online migration
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ConnectToTargetSqlDbTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ConnectToTarget.SqlDb.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ConnectToTargetSqlDbTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ConnectToTargetSqlSqlDbSyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DataItemMigrationSummaryResultResponse(dict):
    """
    Basic summary of a data item migration
    """
    def __init__(__self__, *,
                 ended_on: str,
                 error_prefix: str,
                 items_completed_count: int,
                 items_count: int,
                 name: str,
                 result_prefix: str,
                 started_on: str,
                 state: str,
                 status_message: str):
        """
        Basic summary of a data item migration
        :param str ended_on: Migration end time
        :param str error_prefix: Wildcard string prefix to use for querying all errors of the item
        :param int items_completed_count: Number of successfully completed items
        :param int items_count: Number of items
        :param str name: Name of the item
        :param str result_prefix: Wildcard string prefix to use for querying all sub-tem results of the item
        :param str started_on: Migration start time
        :param str state: Current state of migration
        :param str status_message: Status message
        """
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "error_prefix", error_prefix)
        pulumi.set(__self__, "items_completed_count", items_completed_count)
        pulumi.set(__self__, "items_count", items_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "result_prefix", result_prefix)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status_message", status_message)

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="errorPrefix")
    def error_prefix(self) -> str:
        """
        Wildcard string prefix to use for querying all errors of the item
        """
        return pulumi.get(self, "error_prefix")

    @property
    @pulumi.getter(name="itemsCompletedCount")
    def items_completed_count(self) -> int:
        """
        Number of successfully completed items
        """
        return pulumi.get(self, "items_completed_count")

    @property
    @pulumi.getter(name="itemsCount")
    def items_count(self) -> int:
        """
        Number of items
        """
        return pulumi.get(self, "items_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the item
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultPrefix")
    def result_prefix(self) -> str:
        """
        Wildcard string prefix to use for querying all sub-tem results of the item
        """
        return pulumi.get(self, "result_prefix")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of migration
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        """
        Status message
        """
        return pulumi.get(self, "status_message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseBackupInfoResponse(dict):
    """
    Information about backup files when existing backup mode is used.
    """
    def __init__(__self__, *,
                 backup_files: Sequence[str],
                 backup_finish_date: str,
                 backup_type: str,
                 database_name: str,
                 family_count: int,
                 is_compressed: bool,
                 is_damaged: bool,
                 position: int):
        """
        Information about backup files when existing backup mode is used.
        :param Sequence[str] backup_files: The list of backup files for the current database.
        :param str backup_finish_date: Date and time when the backup operation finished.
        :param str backup_type: Backup Type.
        :param str database_name: Database name.
        :param int family_count: Number of files in the backup set.
        :param bool is_compressed: Whether the backup set is compressed
        :param bool is_damaged: Database was damaged when backed up, but the backup operation was requested to continue despite errors.
        :param int position: Position of current database backup in the file.
        """
        pulumi.set(__self__, "backup_files", backup_files)
        pulumi.set(__self__, "backup_finish_date", backup_finish_date)
        pulumi.set(__self__, "backup_type", backup_type)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "family_count", family_count)
        pulumi.set(__self__, "is_compressed", is_compressed)
        pulumi.set(__self__, "is_damaged", is_damaged)
        pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter(name="backupFiles")
    def backup_files(self) -> Sequence[str]:
        """
        The list of backup files for the current database.
        """
        return pulumi.get(self, "backup_files")

    @property
    @pulumi.getter(name="backupFinishDate")
    def backup_finish_date(self) -> str:
        """
        Date and time when the backup operation finished.
        """
        return pulumi.get(self, "backup_finish_date")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> str:
        """
        Backup Type.
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="familyCount")
    def family_count(self) -> int:
        """
        Number of files in the backup set.
        """
        return pulumi.get(self, "family_count")

    @property
    @pulumi.getter(name="isCompressed")
    def is_compressed(self) -> bool:
        """
        Whether the backup set is compressed
        """
        return pulumi.get(self, "is_compressed")

    @property
    @pulumi.getter(name="isDamaged")
    def is_damaged(self) -> bool:
        """
        Database was damaged when backed up, but the backup operation was requested to continue despite errors.
        """
        return pulumi.get(self, "is_damaged")

    @property
    @pulumi.getter
    def position(self) -> int:
        """
        Position of current database backup in the file.
        """
        return pulumi.get(self, "position")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseFileInfoResponse(dict):
    """
    Database file specific information
    """
    def __init__(__self__, *,
                 database_name: Optional[str] = None,
                 file_type: Optional[str] = None,
                 id: Optional[str] = None,
                 logical_name: Optional[str] = None,
                 physical_full_name: Optional[str] = None,
                 restore_full_name: Optional[str] = None,
                 size_mb: Optional[float] = None):
        """
        Database file specific information
        :param str database_name: Name of the database
        :param str file_type: Database file type
        :param str id: Unique identifier for database file
        :param str logical_name: Logical name of the file
        :param str physical_full_name: Operating-system full path of the file
        :param str restore_full_name: Suggested full path of the file for restoring
        :param float size_mb: Size of the file in megabytes
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if logical_name is not None:
            pulumi.set(__self__, "logical_name", logical_name)
        if physical_full_name is not None:
            pulumi.set(__self__, "physical_full_name", physical_full_name)
        if restore_full_name is not None:
            pulumi.set(__self__, "restore_full_name", restore_full_name)
        if size_mb is not None:
            pulumi.set(__self__, "size_mb", size_mb)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        Name of the database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[str]:
        """
        Database file type
        """
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier for database file
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logicalName")
    def logical_name(self) -> Optional[str]:
        """
        Logical name of the file
        """
        return pulumi.get(self, "logical_name")

    @property
    @pulumi.getter(name="physicalFullName")
    def physical_full_name(self) -> Optional[str]:
        """
        Operating-system full path of the file
        """
        return pulumi.get(self, "physical_full_name")

    @property
    @pulumi.getter(name="restoreFullName")
    def restore_full_name(self) -> Optional[str]:
        """
        Suggested full path of the file for restoring
        """
        return pulumi.get(self, "restore_full_name")

    @property
    @pulumi.getter(name="sizeMB")
    def size_mb(self) -> Optional[float]:
        """
        Size of the file in megabytes
        """
        return pulumi.get(self, "size_mb")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseInfoResponse(dict):
    """
    Project Database Details
    """
    def __init__(__self__, *,
                 source_database_name: str):
        """
        Project Database Details
        :param str source_database_name: Name of the database
        """
        pulumi.set(__self__, "source_database_name", source_database_name)

    @property
    @pulumi.getter(name="sourceDatabaseName")
    def source_database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "source_database_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseSummaryResultResponse(dict):
    """
    Summary of database results in the migration
    """
    def __init__(__self__, *,
                 ended_on: str,
                 error_prefix: str,
                 items_completed_count: int,
                 items_count: int,
                 name: str,
                 result_prefix: str,
                 size_mb: float,
                 started_on: str,
                 state: str,
                 status_message: str):
        """
        Summary of database results in the migration
        :param str ended_on: Migration end time
        :param str error_prefix: Wildcard string prefix to use for querying all errors of the item
        :param int items_completed_count: Number of successfully completed items
        :param int items_count: Number of items
        :param str name: Name of the item
        :param str result_prefix: Wildcard string prefix to use for querying all sub-tem results of the item
        :param float size_mb: Size of the database in megabytes
        :param str started_on: Migration start time
        :param str state: Current state of migration
        :param str status_message: Status message
        """
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "error_prefix", error_prefix)
        pulumi.set(__self__, "items_completed_count", items_completed_count)
        pulumi.set(__self__, "items_count", items_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "result_prefix", result_prefix)
        pulumi.set(__self__, "size_mb", size_mb)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status_message", status_message)

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="errorPrefix")
    def error_prefix(self) -> str:
        """
        Wildcard string prefix to use for querying all errors of the item
        """
        return pulumi.get(self, "error_prefix")

    @property
    @pulumi.getter(name="itemsCompletedCount")
    def items_completed_count(self) -> int:
        """
        Number of successfully completed items
        """
        return pulumi.get(self, "items_completed_count")

    @property
    @pulumi.getter(name="itemsCount")
    def items_count(self) -> int:
        """
        Number of items
        """
        return pulumi.get(self, "items_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the item
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultPrefix")
    def result_prefix(self) -> str:
        """
        Wildcard string prefix to use for querying all sub-tem results of the item
        """
        return pulumi.get(self, "result_prefix")

    @property
    @pulumi.getter(name="sizeMB")
    def size_mb(self) -> float:
        """
        Size of the database in megabytes
        """
        return pulumi.get(self, "size_mb")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of migration
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        """
        Status message
        """
        return pulumi.get(self, "status_message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseTableResponse(dict):
    """
    Table properties
    """
    def __init__(__self__, *,
                 has_rows: bool,
                 name: str):
        """
        Table properties
        :param bool has_rows: Indicates whether table is empty or not
        :param str name: Schema-qualified name of the table
        """
        pulumi.set(__self__, "has_rows", has_rows)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="hasRows")
    def has_rows(self) -> bool:
        """
        Indicates whether table is empty or not
        """
        return pulumi.get(self, "has_rows")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Schema-qualified name of the table
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FileShareResponse(dict):
    """
    File share information with Path, Username, and Password.
    """
    def __init__(__self__, *,
                 path: str,
                 password: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        File share information with Path, Username, and Password.
        :param str path: The folder path for this share.
        :param str password: Password credential used to connect to the share location.
        :param str user_name: User name credential to connect to the share location
        """
        pulumi.set(__self__, "path", path)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The folder path for this share.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password credential used to connect to the share location.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        User name credential to connect to the share location
        """
        return pulumi.get(self, "user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetTdeCertificatesSqlTaskInputResponse(dict):
    """
    Input for the task that gets TDE certificates in Base64 encoded format.
    """
    def __init__(__self__, *,
                 backup_file_share: 'outputs.FileShareResponse',
                 connection_info: 'outputs.SqlConnectionInfoResponse',
                 selected_certificates: Sequence['outputs.SelectedCertificateInputResponse']):
        """
        Input for the task that gets TDE certificates in Base64 encoded format.
        :param 'FileShareResponseArgs' backup_file_share: Backup file share information for file share to be used for temporarily storing files.
        :param 'SqlConnectionInfoResponseArgs' connection_info: Connection information for SQL Server
        :param Sequence['SelectedCertificateInputResponseArgs'] selected_certificates: List containing certificate names and corresponding password to use for encrypting the exported certificate.
        """
        pulumi.set(__self__, "backup_file_share", backup_file_share)
        pulumi.set(__self__, "connection_info", connection_info)
        pulumi.set(__self__, "selected_certificates", selected_certificates)

    @property
    @pulumi.getter(name="backupFileShare")
    def backup_file_share(self) -> 'outputs.FileShareResponse':
        """
        Backup file share information for file share to be used for temporarily storing files.
        """
        return pulumi.get(self, "backup_file_share")

    @property
    @pulumi.getter(name="connectionInfo")
    def connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Connection information for SQL Server
        """
        return pulumi.get(self, "connection_info")

    @property
    @pulumi.getter(name="selectedCertificates")
    def selected_certificates(self) -> Sequence['outputs.SelectedCertificateInputResponse']:
        """
        List containing certificate names and corresponding password to use for encrypting the exported certificate.
        """
        return pulumi.get(self, "selected_certificates")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetTdeCertificatesSqlTaskOutputResponse(dict):
    """
    Output of the task that gets TDE certificates in Base64 encoded format.
    """
    def __init__(__self__, *,
                 base64_encoded_certificates: Mapping[str, Sequence[str]],
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output of the task that gets TDE certificates in Base64 encoded format.
        :param Mapping[str, Sequence[str]] base64_encoded_certificates: Mapping from certificate name to base 64 encoded format.
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors
        """
        pulumi.set(__self__, "base64_encoded_certificates", base64_encoded_certificates)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter(name="base64EncodedCertificates")
    def base64_encoded_certificates(self) -> Mapping[str, Sequence[str]]:
        """
        Mapping from certificate name to base 64 encoded format.
        """
        return pulumi.get(self, "base64_encoded_certificates")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetTdeCertificatesSqlTaskPropertiesResponse(dict):
    """
    Properties for the task that gets TDE certificates in Base64 encoded format.
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.GetTdeCertificatesSqlTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.GetTdeCertificatesSqlTaskInputResponse'] = None):
        """
        Properties for the task that gets TDE certificates in Base64 encoded format.
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['GetTdeCertificatesSqlTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'GetTdeCertificatesSqlTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'GetTDECertificates.Sql')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.GetTdeCertificatesSqlTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.GetTdeCertificatesSqlTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUserTablesOracleTaskInputResponse(dict):
    """
    Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
    """
    def __init__(__self__, *,
                 connection_info: 'outputs.OracleConnectionInfoResponse',
                 selected_schemas: Sequence[str]):
        """
        Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
        :param 'OracleConnectionInfoResponseArgs' connection_info: Information for connecting to Oracle source
        :param Sequence[str] selected_schemas: List of Oracle schemas for which to collect tables
        """
        pulumi.set(__self__, "connection_info", connection_info)
        pulumi.set(__self__, "selected_schemas", selected_schemas)

    @property
    @pulumi.getter(name="connectionInfo")
    def connection_info(self) -> 'outputs.OracleConnectionInfoResponse':
        """
        Information for connecting to Oracle source
        """
        return pulumi.get(self, "connection_info")

    @property
    @pulumi.getter(name="selectedSchemas")
    def selected_schemas(self) -> Sequence[str]:
        """
        List of Oracle schemas for which to collect tables
        """
        return pulumi.get(self, "selected_schemas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUserTablesOracleTaskOutputResponse(dict):
    """
    Output for the task that gets the list of tables contained within a provided list of Oracle schemas.
    """
    def __init__(__self__, *,
                 schema_name: str,
                 tables: Sequence['outputs.DatabaseTableResponse'],
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output for the task that gets the list of tables contained within a provided list of Oracle schemas.
        :param str schema_name: The schema this result is for
        :param Sequence['DatabaseTableResponseArgs'] tables: List of valid tables found for this schema
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors associated with the task
        """
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "tables", tables)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        The schema this result is for
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.DatabaseTableResponse']:
        """
        List of valid tables found for this schema
        """
        return pulumi.get(self, "tables")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors associated with the task
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUserTablesOracleTaskPropertiesResponse(dict):
    """
    Properties for the task that collects user tables for the given list of Oracle schemas
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.GetUserTablesOracleTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.GetUserTablesOracleTaskInputResponse'] = None):
        """
        Properties for the task that collects user tables for the given list of Oracle schemas
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['GetUserTablesOracleTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'GetUserTablesOracleTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'GetUserTablesOracle')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.GetUserTablesOracleTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.GetUserTablesOracleTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUserTablesPostgreSqlTaskInputResponse(dict):
    """
    Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
    """
    def __init__(__self__, *,
                 connection_info: 'outputs.PostgreSqlConnectionInfoResponse',
                 selected_databases: Sequence[str]):
        """
        Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
        :param 'PostgreSqlConnectionInfoResponseArgs' connection_info: Information for connecting to PostgreSQL source
        :param Sequence[str] selected_databases: List of PostgreSQL databases for which to collect tables
        """
        pulumi.set(__self__, "connection_info", connection_info)
        pulumi.set(__self__, "selected_databases", selected_databases)

    @property
    @pulumi.getter(name="connectionInfo")
    def connection_info(self) -> 'outputs.PostgreSqlConnectionInfoResponse':
        """
        Information for connecting to PostgreSQL source
        """
        return pulumi.get(self, "connection_info")

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> Sequence[str]:
        """
        List of PostgreSQL databases for which to collect tables
        """
        return pulumi.get(self, "selected_databases")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUserTablesPostgreSqlTaskOutputResponse(dict):
    """
    Output for the task that gets the list of tables for a provided list of PostgreSQL databases.
    """
    def __init__(__self__, *,
                 database_name: str,
                 tables: Sequence['outputs.DatabaseTableResponse'],
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output for the task that gets the list of tables for a provided list of PostgreSQL databases.
        :param str database_name: The database this result is for
        :param Sequence['DatabaseTableResponseArgs'] tables: List of valid tables found for this database
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors associated with the task
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "tables", tables)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The database this result is for
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.DatabaseTableResponse']:
        """
        List of valid tables found for this database
        """
        return pulumi.get(self, "tables")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors associated with the task
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUserTablesPostgreSqlTaskPropertiesResponse(dict):
    """
    Properties for the task that collects user tables for the given list of databases
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.GetUserTablesPostgreSqlTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.GetUserTablesPostgreSqlTaskInputResponse'] = None):
        """
        Properties for the task that collects user tables for the given list of databases
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['GetUserTablesPostgreSqlTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'GetUserTablesPostgreSqlTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'GetUserTablesPostgreSql')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.GetUserTablesPostgreSqlTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.GetUserTablesPostgreSqlTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUserTablesSqlSyncTaskInputResponse(dict):
    """
    Input for the task that collects user tables for the given list of databases
    """
    def __init__(__self__, *,
                 selected_source_databases: Sequence[str],
                 selected_target_databases: Sequence[str],
                 source_connection_info: 'outputs.SqlConnectionInfoResponse',
                 target_connection_info: 'outputs.SqlConnectionInfoResponse'):
        """
        Input for the task that collects user tables for the given list of databases
        :param Sequence[str] selected_source_databases: List of source database names to collect tables for
        :param Sequence[str] selected_target_databases: List of target database names to collect tables for
        :param 'SqlConnectionInfoResponseArgs' source_connection_info: Connection information for SQL Server
        :param 'SqlConnectionInfoResponseArgs' target_connection_info: Connection information for SQL DB
        """
        pulumi.set(__self__, "selected_source_databases", selected_source_databases)
        pulumi.set(__self__, "selected_target_databases", selected_target_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="selectedSourceDatabases")
    def selected_source_databases(self) -> Sequence[str]:
        """
        List of source database names to collect tables for
        """
        return pulumi.get(self, "selected_source_databases")

    @property
    @pulumi.getter(name="selectedTargetDatabases")
    def selected_target_databases(self) -> Sequence[str]:
        """
        List of target database names to collect tables for
        """
        return pulumi.get(self, "selected_target_databases")

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Connection information for SQL Server
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Connection information for SQL DB
        """
        return pulumi.get(self, "target_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUserTablesSqlSyncTaskOutputResponse(dict):
    """
    Output of the task that collects user tables for the given list of databases
    """
    def __init__(__self__, *,
                 databases_to_source_tables: Mapping[str, Sequence['outputs.DatabaseTableResponse']],
                 databases_to_target_tables: Mapping[str, Sequence['outputs.DatabaseTableResponse']],
                 table_validation_errors: Mapping[str, Sequence[str]],
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output of the task that collects user tables for the given list of databases
        :param Mapping[str, Sequence['DatabaseTableResponseArgs']] databases_to_source_tables: Mapping from database name to list of source tables
        :param Mapping[str, Sequence['DatabaseTableResponseArgs']] databases_to_target_tables: Mapping from database name to list of target tables
        :param Mapping[str, Sequence[str]] table_validation_errors: Mapping from database name to list of validation errors
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors
        """
        pulumi.set(__self__, "databases_to_source_tables", databases_to_source_tables)
        pulumi.set(__self__, "databases_to_target_tables", databases_to_target_tables)
        pulumi.set(__self__, "table_validation_errors", table_validation_errors)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter(name="databasesToSourceTables")
    def databases_to_source_tables(self) -> Mapping[str, Sequence['outputs.DatabaseTableResponse']]:
        """
        Mapping from database name to list of source tables
        """
        return pulumi.get(self, "databases_to_source_tables")

    @property
    @pulumi.getter(name="databasesToTargetTables")
    def databases_to_target_tables(self) -> Mapping[str, Sequence['outputs.DatabaseTableResponse']]:
        """
        Mapping from database name to list of target tables
        """
        return pulumi.get(self, "databases_to_target_tables")

    @property
    @pulumi.getter(name="tableValidationErrors")
    def table_validation_errors(self) -> Mapping[str, Sequence[str]]:
        """
        Mapping from database name to list of validation errors
        """
        return pulumi.get(self, "table_validation_errors")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUserTablesSqlSyncTaskPropertiesResponse(dict):
    """
    Properties for the task that collects user tables for the given list of databases
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.GetUserTablesSqlSyncTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.GetUserTablesSqlSyncTaskInputResponse'] = None):
        """
        Properties for the task that collects user tables for the given list of databases
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['GetUserTablesSqlSyncTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'GetUserTablesSqlSyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'GetUserTables.AzureSqlDb.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.GetUserTablesSqlSyncTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.GetUserTablesSqlSyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUserTablesSqlTaskInputResponse(dict):
    """
    Input for the task that collects user tables for the given list of databases
    """
    def __init__(__self__, *,
                 connection_info: 'outputs.SqlConnectionInfoResponse',
                 selected_databases: Sequence[str]):
        """
        Input for the task that collects user tables for the given list of databases
        :param 'SqlConnectionInfoResponseArgs' connection_info: Connection information for SQL Server
        :param Sequence[str] selected_databases: List of database names to collect tables for
        """
        pulumi.set(__self__, "connection_info", connection_info)
        pulumi.set(__self__, "selected_databases", selected_databases)

    @property
    @pulumi.getter(name="connectionInfo")
    def connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Connection information for SQL Server
        """
        return pulumi.get(self, "connection_info")

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> Sequence[str]:
        """
        List of database names to collect tables for
        """
        return pulumi.get(self, "selected_databases")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUserTablesSqlTaskOutputResponse(dict):
    """
    Output of the task that collects user tables for the given list of databases
    """
    def __init__(__self__, *,
                 databases_to_tables: Mapping[str, Sequence['outputs.DatabaseTableResponse']],
                 id: str,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output of the task that collects user tables for the given list of databases
        :param Mapping[str, Sequence['DatabaseTableResponseArgs']] databases_to_tables: Mapping from database name to list of tables
        :param str id: Result identifier
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Validation errors
        """
        pulumi.set(__self__, "databases_to_tables", databases_to_tables)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter(name="databasesToTables")
    def databases_to_tables(self) -> Mapping[str, Sequence['outputs.DatabaseTableResponse']]:
        """
        Mapping from database name to list of tables
        """
        return pulumi.get(self, "databases_to_tables")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Validation errors
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUserTablesSqlTaskPropertiesResponse(dict):
    """
    Properties for the task that collects user tables for the given list of databases
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.GetUserTablesSqlTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.GetUserTablesSqlTaskInputResponse'] = None):
        """
        Properties for the task that collects user tables for the given list of databases
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['GetUserTablesSqlTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'GetUserTablesSqlTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'GetUserTables.Sql')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.GetUserTablesSqlTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.GetUserTablesSqlTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MiSqlConnectionInfoResponse(dict):
    """
    Properties required to create a connection to Azure SQL database Managed instance
    """
    def __init__(__self__, *,
                 managed_instance_resource_id: str,
                 type: str,
                 password: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        Properties required to create a connection to Azure SQL database Managed instance
        :param str managed_instance_resource_id: Resource id for Azure SQL database Managed instance
        :param str type: Type of connection info
        :param str password: Password credential.
        :param str user_name: User name
        """
        pulumi.set(__self__, "managed_instance_resource_id", managed_instance_resource_id)
        pulumi.set(__self__, "type", 'MiSqlConnectionInfo')
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="managedInstanceResourceId")
    def managed_instance_resource_id(self) -> str:
        """
        Resource id for Azure SQL database Managed instance
        """
        return pulumi.get(self, "managed_instance_resource_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of connection info
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateMISyncCompleteCommandInputResponse(dict):
    """
    Input for command that completes online migration for an Azure SQL Database Managed Instance.
    """
    def __init__(__self__, *,
                 source_database_name: str):
        """
        Input for command that completes online migration for an Azure SQL Database Managed Instance.
        :param str source_database_name: Name of managed instance database
        """
        pulumi.set(__self__, "source_database_name", source_database_name)

    @property
    @pulumi.getter(name="sourceDatabaseName")
    def source_database_name(self) -> str:
        """
        Name of managed instance database
        """
        return pulumi.get(self, "source_database_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateMISyncCompleteCommandOutputResponse(dict):
    """
    Output for command that completes online migration for an Azure SQL Database Managed Instance.
    """
    def __init__(__self__, *,
                 errors: Optional[Sequence['outputs.ReportableExceptionResponse']] = None):
        """
        Output for command that completes online migration for an Azure SQL Database Managed Instance.
        :param Sequence['ReportableExceptionResponseArgs'] errors: List of errors that happened during the command execution
        """
        if errors is not None:
            pulumi.set(__self__, "errors", errors)

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.ReportableExceptionResponse']]:
        """
        List of errors that happened during the command execution
        """
        return pulumi.get(self, "errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateMISyncCompleteCommandPropertiesResponse(dict):
    """
    Properties for the command that completes online migration for an Azure SQL Database Managed Instance.
    """
    def __init__(__self__, *,
                 command_type: str,
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: 'outputs.MigrateMISyncCompleteCommandOutputResponse',
                 state: str,
                 input: Optional['outputs.MigrateMISyncCompleteCommandInputResponse'] = None):
        """
        Properties for the command that completes online migration for an Azure SQL Database Managed Instance.
        :param str command_type: Command type.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param 'MigrateMISyncCompleteCommandOutputResponseArgs' output: Command output. This is ignored if submitted.
        :param str state: The state of the command. This is ignored if submitted.
        :param 'MigrateMISyncCompleteCommandInputResponseArgs' input: Command input
        """
        pulumi.set(__self__, "command_type", 'Migrate.SqlServer.AzureDbSqlMi.Complete')
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="commandType")
    def command_type(self) -> str:
        """
        Command type.
        """
        return pulumi.get(self, "command_type")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> 'outputs.MigrateMISyncCompleteCommandOutputResponse':
        """
        Command output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the command. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MigrateMISyncCompleteCommandInputResponse']:
        """
        Command input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateMongoDbTaskPropertiesResponse(dict):
    """
    Properties for the task that migrates data between MongoDB data sources
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence[Any],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.MongoDbMigrationSettingsResponse'] = None):
        """
        Properties for the task that migrates data between MongoDB data sources
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'MongoDbMigrationSettingsResponseArgs' input: Describes how a MongoDB data migration should be performed
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'Migrate.MongoDb')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence[Any]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MongoDbMigrationSettingsResponse']:
        """
        Describes how a MongoDB data migration should be performed
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse(dict):
    """
    Database specific information for MySQL to Azure Database for MySQL migration task inputs
    """
    def __init__(__self__, *,
                 migration_setting: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 source_setting: Optional[Mapping[str, str]] = None,
                 table_map: Optional[Mapping[str, str]] = None,
                 target_database_name: Optional[str] = None,
                 target_setting: Optional[Mapping[str, str]] = None):
        """
        Database specific information for MySQL to Azure Database for MySQL migration task inputs
        :param Mapping[str, str] migration_setting: Migration settings which tune the migration behavior
        :param str name: Name of the database
        :param Mapping[str, str] source_setting: Source settings to tune source endpoint migration behavior
        :param Mapping[str, str] table_map: Mapping of source to target tables
        :param str target_database_name: Name of target database. Note: Target database will be truncated before starting migration.
        :param Mapping[str, str] target_setting: Target settings to tune target endpoint migration behavior
        """
        if migration_setting is not None:
            pulumi.set(__self__, "migration_setting", migration_setting)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_setting is not None:
            pulumi.set(__self__, "source_setting", source_setting)
        if table_map is not None:
            pulumi.set(__self__, "table_map", table_map)
        if target_database_name is not None:
            pulumi.set(__self__, "target_database_name", target_database_name)
        if target_setting is not None:
            pulumi.set(__self__, "target_setting", target_setting)

    @property
    @pulumi.getter(name="migrationSetting")
    def migration_setting(self) -> Optional[Mapping[str, str]]:
        """
        Migration settings which tune the migration behavior
        """
        return pulumi.get(self, "migration_setting")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceSetting")
    def source_setting(self) -> Optional[Mapping[str, str]]:
        """
        Source settings to tune source endpoint migration behavior
        """
        return pulumi.get(self, "source_setting")

    @property
    @pulumi.getter(name="tableMap")
    def table_map(self) -> Optional[Mapping[str, str]]:
        """
        Mapping of source to target tables
        """
        return pulumi.get(self, "table_map")

    @property
    @pulumi.getter(name="targetDatabaseName")
    def target_database_name(self) -> Optional[str]:
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
        return pulumi.get(self, "target_database_name")

    @property
    @pulumi.getter(name="targetSetting")
    def target_setting(self) -> Optional[Mapping[str, str]]:
        """
        Target settings to tune target endpoint migration behavior
        """
        return pulumi.get(self, "target_setting")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateMySqlAzureDbForMySqlSyncTaskInputResponse(dict):
    """
    Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
    """
    def __init__(__self__, *,
                 selected_databases: Sequence['outputs.MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse'],
                 source_connection_info: 'outputs.MySqlConnectionInfoResponse',
                 target_connection_info: 'outputs.MySqlConnectionInfoResponse'):
        """
        Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
        :param Sequence['MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArgs'] selected_databases: Databases to migrate
        :param 'MySqlConnectionInfoResponseArgs' source_connection_info: Connection information for source MySQL
        :param 'MySqlConnectionInfoResponseArgs' target_connection_info: Connection information for target Azure Database for MySQL
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> Sequence['outputs.MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse']:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.MySqlConnectionInfoResponse':
        """
        Connection information for source MySQL
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.MySqlConnectionInfoResponse':
        """
        Connection information for target Azure Database for MySQL
        """
        return pulumi.get(self, "target_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse(dict):
    def __init__(__self__, *,
                 id: str,
                 result_type: str,
                 error_message: Optional[str] = None,
                 events: Optional[Sequence['outputs.SyncMigrationDatabaseErrorEventResponse']] = None):
        """
        :param str id: Result identifier
        :param str result_type: Result type
        :param str error_message: Error message
        :param Sequence['SyncMigrationDatabaseErrorEventResponseArgs'] events: List of error events.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'DatabaseLevelErrorOutput')
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if events is not None:
            pulumi.set(__self__, "events", events)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.SyncMigrationDatabaseErrorEventResponse']]:
        """
        List of error events.
        """
        return pulumi.get(self, "events")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse(dict):
    def __init__(__self__, *,
                 applied_changes: int,
                 cdc_delete_counter: int,
                 cdc_insert_counter: int,
                 cdc_update_counter: int,
                 database_name: str,
                 ended_on: str,
                 full_load_completed_tables: int,
                 full_load_errored_tables: int,
                 full_load_loading_tables: int,
                 full_load_queued_tables: int,
                 id: str,
                 incoming_changes: int,
                 initialization_completed: bool,
                 latency: int,
                 migration_state: str,
                 result_type: str,
                 started_on: str):
        """
        :param int applied_changes: Number of applied changes
        :param int cdc_delete_counter: Number of cdc deletes
        :param int cdc_insert_counter: Number of cdc inserts
        :param int cdc_update_counter: Number of cdc updates
        :param str database_name: Name of the database
        :param str ended_on: Migration end time
        :param int full_load_completed_tables: Number of tables completed in full load
        :param int full_load_errored_tables: Number of tables errored in full load
        :param int full_load_loading_tables: Number of tables loading in full load
        :param int full_load_queued_tables: Number of tables queued in full load
        :param str id: Result identifier
        :param int incoming_changes: Number of incoming changes
        :param bool initialization_completed: Indicates if initial load (full load) has been completed
        :param int latency: CDC apply latency
        :param str migration_state: Migration state that this database is in
        :param str result_type: Result type
        :param str started_on: Migration start time
        """
        pulumi.set(__self__, "applied_changes", applied_changes)
        pulumi.set(__self__, "cdc_delete_counter", cdc_delete_counter)
        pulumi.set(__self__, "cdc_insert_counter", cdc_insert_counter)
        pulumi.set(__self__, "cdc_update_counter", cdc_update_counter)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "full_load_completed_tables", full_load_completed_tables)
        pulumi.set(__self__, "full_load_errored_tables", full_load_errored_tables)
        pulumi.set(__self__, "full_load_loading_tables", full_load_loading_tables)
        pulumi.set(__self__, "full_load_queued_tables", full_load_queued_tables)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "incoming_changes", incoming_changes)
        pulumi.set(__self__, "initialization_completed", initialization_completed)
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "migration_state", migration_state)
        pulumi.set(__self__, "result_type", 'DatabaseLevelOutput')
        pulumi.set(__self__, "started_on", started_on)

    @property
    @pulumi.getter(name="appliedChanges")
    def applied_changes(self) -> int:
        """
        Number of applied changes
        """
        return pulumi.get(self, "applied_changes")

    @property
    @pulumi.getter(name="cdcDeleteCounter")
    def cdc_delete_counter(self) -> int:
        """
        Number of cdc deletes
        """
        return pulumi.get(self, "cdc_delete_counter")

    @property
    @pulumi.getter(name="cdcInsertCounter")
    def cdc_insert_counter(self) -> int:
        """
        Number of cdc inserts
        """
        return pulumi.get(self, "cdc_insert_counter")

    @property
    @pulumi.getter(name="cdcUpdateCounter")
    def cdc_update_counter(self) -> int:
        """
        Number of cdc updates
        """
        return pulumi.get(self, "cdc_update_counter")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="fullLoadCompletedTables")
    def full_load_completed_tables(self) -> int:
        """
        Number of tables completed in full load
        """
        return pulumi.get(self, "full_load_completed_tables")

    @property
    @pulumi.getter(name="fullLoadErroredTables")
    def full_load_errored_tables(self) -> int:
        """
        Number of tables errored in full load
        """
        return pulumi.get(self, "full_load_errored_tables")

    @property
    @pulumi.getter(name="fullLoadLoadingTables")
    def full_load_loading_tables(self) -> int:
        """
        Number of tables loading in full load
        """
        return pulumi.get(self, "full_load_loading_tables")

    @property
    @pulumi.getter(name="fullLoadQueuedTables")
    def full_load_queued_tables(self) -> int:
        """
        Number of tables queued in full load
        """
        return pulumi.get(self, "full_load_queued_tables")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="incomingChanges")
    def incoming_changes(self) -> int:
        """
        Number of incoming changes
        """
        return pulumi.get(self, "incoming_changes")

    @property
    @pulumi.getter(name="initializationCompleted")
    def initialization_completed(self) -> bool:
        """
        Indicates if initial load (full load) has been completed
        """
        return pulumi.get(self, "initialization_completed")

    @property
    @pulumi.getter
    def latency(self) -> int:
        """
        CDC apply latency
        """
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="migrationState")
    def migration_state(self) -> str:
        """
        Migration state that this database is in
        """
        return pulumi.get(self, "migration_state")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse(dict):
    def __init__(__self__, *,
                 error: 'outputs.ReportableExceptionResponse',
                 id: str,
                 result_type: str):
        """
        :param 'ReportableExceptionResponseArgs' error: Migration error
        :param str id: Result identifier
        :param str result_type: Result type
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'ErrorOutput')

    @property
    @pulumi.getter
    def error(self) -> 'outputs.ReportableExceptionResponse':
        """
        Migration error
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse(dict):
    def __init__(__self__, *,
                 ended_on: str,
                 id: str,
                 result_type: str,
                 source_server: str,
                 source_server_version: str,
                 started_on: str,
                 target_server: str,
                 target_server_version: str):
        """
        :param str ended_on: Migration end time
        :param str id: Result identifier
        :param str result_type: Result type
        :param str source_server: Source server name
        :param str source_server_version: Source server version
        :param str started_on: Migration start time
        :param str target_server: Target server name
        :param str target_server_version: Target server version
        """
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'MigrationLevelOutput')
        pulumi.set(__self__, "source_server", source_server)
        pulumi.set(__self__, "source_server_version", source_server_version)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "target_server", target_server)
        pulumi.set(__self__, "target_server_version", target_server_version)

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="sourceServer")
    def source_server(self) -> str:
        """
        Source server name
        """
        return pulumi.get(self, "source_server")

    @property
    @pulumi.getter(name="sourceServerVersion")
    def source_server_version(self) -> str:
        """
        Source server version
        """
        return pulumi.get(self, "source_server_version")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter(name="targetServer")
    def target_server(self) -> str:
        """
        Target server name
        """
        return pulumi.get(self, "target_server")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Target server version
        """
        return pulumi.get(self, "target_server_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse(dict):
    def __init__(__self__, *,
                 cdc_delete_counter: str,
                 cdc_insert_counter: str,
                 cdc_update_counter: str,
                 data_errors_counter: int,
                 database_name: str,
                 full_load_ended_on: str,
                 full_load_est_finish_time: str,
                 full_load_started_on: str,
                 full_load_total_rows: int,
                 id: str,
                 last_modified_time: str,
                 result_type: str,
                 state: str,
                 table_name: str,
                 total_changes_applied: int):
        """
        :param str cdc_delete_counter: Number of applied deletes
        :param str cdc_insert_counter: Number of applied inserts
        :param str cdc_update_counter: Number of applied updates
        :param int data_errors_counter: Number of data errors occurred
        :param str database_name: Name of the database
        :param str full_load_ended_on: Full load end time
        :param str full_load_est_finish_time: Estimate to finish full load
        :param str full_load_started_on: Full load start time
        :param int full_load_total_rows: Number of rows applied in full load
        :param str id: Result identifier
        :param str last_modified_time: Last modified time on target
        :param str result_type: Result type
        :param str state: Current state of the table migration
        :param str table_name: Name of the table
        :param int total_changes_applied: Total number of applied changes
        """
        pulumi.set(__self__, "cdc_delete_counter", cdc_delete_counter)
        pulumi.set(__self__, "cdc_insert_counter", cdc_insert_counter)
        pulumi.set(__self__, "cdc_update_counter", cdc_update_counter)
        pulumi.set(__self__, "data_errors_counter", data_errors_counter)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "full_load_ended_on", full_load_ended_on)
        pulumi.set(__self__, "full_load_est_finish_time", full_load_est_finish_time)
        pulumi.set(__self__, "full_load_started_on", full_load_started_on)
        pulumi.set(__self__, "full_load_total_rows", full_load_total_rows)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "result_type", 'TableLevelOutput')
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "total_changes_applied", total_changes_applied)

    @property
    @pulumi.getter(name="cdcDeleteCounter")
    def cdc_delete_counter(self) -> str:
        """
        Number of applied deletes
        """
        return pulumi.get(self, "cdc_delete_counter")

    @property
    @pulumi.getter(name="cdcInsertCounter")
    def cdc_insert_counter(self) -> str:
        """
        Number of applied inserts
        """
        return pulumi.get(self, "cdc_insert_counter")

    @property
    @pulumi.getter(name="cdcUpdateCounter")
    def cdc_update_counter(self) -> str:
        """
        Number of applied updates
        """
        return pulumi.get(self, "cdc_update_counter")

    @property
    @pulumi.getter(name="dataErrorsCounter")
    def data_errors_counter(self) -> int:
        """
        Number of data errors occurred
        """
        return pulumi.get(self, "data_errors_counter")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="fullLoadEndedOn")
    def full_load_ended_on(self) -> str:
        """
        Full load end time
        """
        return pulumi.get(self, "full_load_ended_on")

    @property
    @pulumi.getter(name="fullLoadEstFinishTime")
    def full_load_est_finish_time(self) -> str:
        """
        Estimate to finish full load
        """
        return pulumi.get(self, "full_load_est_finish_time")

    @property
    @pulumi.getter(name="fullLoadStartedOn")
    def full_load_started_on(self) -> str:
        """
        Full load start time
        """
        return pulumi.get(self, "full_load_started_on")

    @property
    @pulumi.getter(name="fullLoadTotalRows")
    def full_load_total_rows(self) -> int:
        """
        Number of rows applied in full load
        """
        return pulumi.get(self, "full_load_total_rows")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> str:
        """
        Last modified time on target
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of the table migration
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        Name of the table
        """
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="totalChangesApplied")
    def total_changes_applied(self) -> int:
        """
        Total number of applied changes
        """
        return pulumi.get(self, "total_changes_applied")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse(dict):
    """
    Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence[Any],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.MigrateMySqlAzureDbForMySqlSyncTaskInputResponse'] = None):
        """
        Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence[Union['MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseArgs', 'MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseArgs', 'MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseArgs', 'MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseArgs', 'MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseArgs']] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'Migrate.MySql.AzureDbForMySql.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence[Any]:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MigrateMySqlAzureDbForMySqlSyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse(dict):
    """
    Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence[Any],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse'] = None):
        """
        Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence[Union['MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs', 'MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs', 'MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseArgs', 'MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseArgs', 'MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseArgs']] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'Migrate.Oracle.AzureDbForPostgreSql.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence[Any]:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse(dict):
    """
    Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
    """
    def __init__(__self__, *,
                 case_manipulation: Optional[str] = None,
                 migration_setting: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 source_setting: Optional[Mapping[str, str]] = None,
                 table_map: Optional[Mapping[str, str]] = None,
                 target_database_name: Optional[str] = None,
                 target_setting: Optional[Mapping[str, str]] = None):
        """
        Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
        :param str case_manipulation: How to handle object name casing: either Preserve or ToLower
        :param Mapping[str, str] migration_setting: Migration settings which tune the migration behavior
        :param str name: Name of the migration pipeline
        :param str schema_name: Name of the source schema
        :param Mapping[str, str] source_setting: Source settings to tune source endpoint migration behavior
        :param Mapping[str, str] table_map: Mapping of source to target tables
        :param str target_database_name: Name of target database. Note: Target database will be truncated before starting migration.
        :param Mapping[str, str] target_setting: Target settings to tune target endpoint migration behavior
        """
        if case_manipulation is not None:
            pulumi.set(__self__, "case_manipulation", case_manipulation)
        if migration_setting is not None:
            pulumi.set(__self__, "migration_setting", migration_setting)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_setting is not None:
            pulumi.set(__self__, "source_setting", source_setting)
        if table_map is not None:
            pulumi.set(__self__, "table_map", table_map)
        if target_database_name is not None:
            pulumi.set(__self__, "target_database_name", target_database_name)
        if target_setting is not None:
            pulumi.set(__self__, "target_setting", target_setting)

    @property
    @pulumi.getter(name="caseManipulation")
    def case_manipulation(self) -> Optional[str]:
        """
        How to handle object name casing: either Preserve or ToLower
        """
        return pulumi.get(self, "case_manipulation")

    @property
    @pulumi.getter(name="migrationSetting")
    def migration_setting(self) -> Optional[Mapping[str, str]]:
        """
        Migration settings which tune the migration behavior
        """
        return pulumi.get(self, "migration_setting")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the migration pipeline
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        """
        Name of the source schema
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sourceSetting")
    def source_setting(self) -> Optional[Mapping[str, str]]:
        """
        Source settings to tune source endpoint migration behavior
        """
        return pulumi.get(self, "source_setting")

    @property
    @pulumi.getter(name="tableMap")
    def table_map(self) -> Optional[Mapping[str, str]]:
        """
        Mapping of source to target tables
        """
        return pulumi.get(self, "table_map")

    @property
    @pulumi.getter(name="targetDatabaseName")
    def target_database_name(self) -> Optional[str]:
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
        return pulumi.get(self, "target_database_name")

    @property
    @pulumi.getter(name="targetSetting")
    def target_setting(self) -> Optional[Mapping[str, str]]:
        """
        Target settings to tune target endpoint migration behavior
        """
        return pulumi.get(self, "target_setting")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse(dict):
    """
    Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
    """
    def __init__(__self__, *,
                 selected_databases: Sequence['outputs.MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse'],
                 source_connection_info: 'outputs.OracleConnectionInfoResponse',
                 target_connection_info: 'outputs.PostgreSqlConnectionInfoResponse'):
        """
        Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
        :param Sequence['MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArgs'] selected_databases: Databases to migrate
        :param 'OracleConnectionInfoResponseArgs' source_connection_info: Connection information for source Oracle
        :param 'PostgreSqlConnectionInfoResponseArgs' target_connection_info: Connection information for target Azure Database for PostgreSQL
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> Sequence['outputs.MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse']:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.OracleConnectionInfoResponse':
        """
        Connection information for source Oracle
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.PostgreSqlConnectionInfoResponse':
        """
        Connection information for target Azure Database for PostgreSQL
        """
        return pulumi.get(self, "target_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse(dict):
    def __init__(__self__, *,
                 id: str,
                 result_type: str,
                 error_message: Optional[str] = None,
                 events: Optional[Sequence['outputs.SyncMigrationDatabaseErrorEventResponse']] = None):
        """
        :param str id: Result identifier
        :param str result_type: Result type
        :param str error_message: Error message
        :param Sequence['SyncMigrationDatabaseErrorEventResponseArgs'] events: List of error events.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'DatabaseLevelErrorOutput')
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if events is not None:
            pulumi.set(__self__, "events", events)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.SyncMigrationDatabaseErrorEventResponse']]:
        """
        List of error events.
        """
        return pulumi.get(self, "events")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse(dict):
    def __init__(__self__, *,
                 applied_changes: int,
                 cdc_delete_counter: int,
                 cdc_insert_counter: int,
                 cdc_update_counter: int,
                 database_name: str,
                 ended_on: str,
                 full_load_completed_tables: int,
                 full_load_errored_tables: int,
                 full_load_loading_tables: int,
                 full_load_queued_tables: int,
                 id: str,
                 incoming_changes: int,
                 initialization_completed: bool,
                 latency: int,
                 migration_state: str,
                 result_type: str,
                 started_on: str):
        """
        :param int applied_changes: Number of applied changes
        :param int cdc_delete_counter: Number of cdc deletes
        :param int cdc_insert_counter: Number of cdc inserts
        :param int cdc_update_counter: Number of cdc updates
        :param str database_name: Name of the database
        :param str ended_on: Migration end time
        :param int full_load_completed_tables: Number of tables completed in full load
        :param int full_load_errored_tables: Number of tables errored in full load
        :param int full_load_loading_tables: Number of tables loading in full load
        :param int full_load_queued_tables: Number of tables queued in full load
        :param str id: Result identifier
        :param int incoming_changes: Number of incoming changes
        :param bool initialization_completed: Indicates if initial load (full load) has been completed
        :param int latency: CDC apply latency
        :param str migration_state: Migration state that this database is in
        :param str result_type: Result type
        :param str started_on: Migration start time
        """
        pulumi.set(__self__, "applied_changes", applied_changes)
        pulumi.set(__self__, "cdc_delete_counter", cdc_delete_counter)
        pulumi.set(__self__, "cdc_insert_counter", cdc_insert_counter)
        pulumi.set(__self__, "cdc_update_counter", cdc_update_counter)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "full_load_completed_tables", full_load_completed_tables)
        pulumi.set(__self__, "full_load_errored_tables", full_load_errored_tables)
        pulumi.set(__self__, "full_load_loading_tables", full_load_loading_tables)
        pulumi.set(__self__, "full_load_queued_tables", full_load_queued_tables)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "incoming_changes", incoming_changes)
        pulumi.set(__self__, "initialization_completed", initialization_completed)
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "migration_state", migration_state)
        pulumi.set(__self__, "result_type", 'DatabaseLevelOutput')
        pulumi.set(__self__, "started_on", started_on)

    @property
    @pulumi.getter(name="appliedChanges")
    def applied_changes(self) -> int:
        """
        Number of applied changes
        """
        return pulumi.get(self, "applied_changes")

    @property
    @pulumi.getter(name="cdcDeleteCounter")
    def cdc_delete_counter(self) -> int:
        """
        Number of cdc deletes
        """
        return pulumi.get(self, "cdc_delete_counter")

    @property
    @pulumi.getter(name="cdcInsertCounter")
    def cdc_insert_counter(self) -> int:
        """
        Number of cdc inserts
        """
        return pulumi.get(self, "cdc_insert_counter")

    @property
    @pulumi.getter(name="cdcUpdateCounter")
    def cdc_update_counter(self) -> int:
        """
        Number of cdc updates
        """
        return pulumi.get(self, "cdc_update_counter")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="fullLoadCompletedTables")
    def full_load_completed_tables(self) -> int:
        """
        Number of tables completed in full load
        """
        return pulumi.get(self, "full_load_completed_tables")

    @property
    @pulumi.getter(name="fullLoadErroredTables")
    def full_load_errored_tables(self) -> int:
        """
        Number of tables errored in full load
        """
        return pulumi.get(self, "full_load_errored_tables")

    @property
    @pulumi.getter(name="fullLoadLoadingTables")
    def full_load_loading_tables(self) -> int:
        """
        Number of tables loading in full load
        """
        return pulumi.get(self, "full_load_loading_tables")

    @property
    @pulumi.getter(name="fullLoadQueuedTables")
    def full_load_queued_tables(self) -> int:
        """
        Number of tables queued in full load
        """
        return pulumi.get(self, "full_load_queued_tables")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="incomingChanges")
    def incoming_changes(self) -> int:
        """
        Number of incoming changes
        """
        return pulumi.get(self, "incoming_changes")

    @property
    @pulumi.getter(name="initializationCompleted")
    def initialization_completed(self) -> bool:
        """
        Indicates if initial load (full load) has been completed
        """
        return pulumi.get(self, "initialization_completed")

    @property
    @pulumi.getter
    def latency(self) -> int:
        """
        CDC apply latency
        """
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="migrationState")
    def migration_state(self) -> str:
        """
        Migration state that this database is in
        """
        return pulumi.get(self, "migration_state")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse(dict):
    def __init__(__self__, *,
                 error: 'outputs.ReportableExceptionResponse',
                 id: str,
                 result_type: str):
        """
        :param 'ReportableExceptionResponseArgs' error: Migration error
        :param str id: Result identifier
        :param str result_type: Result type
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'ErrorOutput')

    @property
    @pulumi.getter
    def error(self) -> 'outputs.ReportableExceptionResponse':
        """
        Migration error
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse(dict):
    def __init__(__self__, *,
                 ended_on: str,
                 id: str,
                 result_type: str,
                 source_server: str,
                 source_server_version: str,
                 started_on: str,
                 target_server: str,
                 target_server_version: str):
        """
        :param str ended_on: Migration end time
        :param str id: Result identifier
        :param str result_type: Result type
        :param str source_server: Source server name
        :param str source_server_version: Source server version
        :param str started_on: Migration start time
        :param str target_server: Target server name
        :param str target_server_version: Target server version
        """
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'MigrationLevelOutput')
        pulumi.set(__self__, "source_server", source_server)
        pulumi.set(__self__, "source_server_version", source_server_version)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "target_server", target_server)
        pulumi.set(__self__, "target_server_version", target_server_version)

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="sourceServer")
    def source_server(self) -> str:
        """
        Source server name
        """
        return pulumi.get(self, "source_server")

    @property
    @pulumi.getter(name="sourceServerVersion")
    def source_server_version(self) -> str:
        """
        Source server version
        """
        return pulumi.get(self, "source_server_version")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter(name="targetServer")
    def target_server(self) -> str:
        """
        Target server name
        """
        return pulumi.get(self, "target_server")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Target server version
        """
        return pulumi.get(self, "target_server_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse(dict):
    def __init__(__self__, *,
                 cdc_delete_counter: int,
                 cdc_insert_counter: int,
                 cdc_update_counter: int,
                 data_errors_counter: int,
                 database_name: str,
                 full_load_ended_on: str,
                 full_load_est_finish_time: str,
                 full_load_started_on: str,
                 full_load_total_rows: int,
                 id: str,
                 last_modified_time: str,
                 result_type: str,
                 state: str,
                 table_name: str,
                 total_changes_applied: int):
        """
        :param int cdc_delete_counter: Number of applied deletes
        :param int cdc_insert_counter: Number of applied inserts
        :param int cdc_update_counter: Number of applied updates
        :param int data_errors_counter: Number of data errors occurred
        :param str database_name: Name of the database
        :param str full_load_ended_on: Full load end time
        :param str full_load_est_finish_time: Estimate to finish full load
        :param str full_load_started_on: Full load start time
        :param int full_load_total_rows: Number of rows applied in full load
        :param str id: Result identifier
        :param str last_modified_time: Last modified time on target
        :param str result_type: Result type
        :param str state: Current state of the table migration
        :param str table_name: Name of the table
        :param int total_changes_applied: Total number of applied changes
        """
        pulumi.set(__self__, "cdc_delete_counter", cdc_delete_counter)
        pulumi.set(__self__, "cdc_insert_counter", cdc_insert_counter)
        pulumi.set(__self__, "cdc_update_counter", cdc_update_counter)
        pulumi.set(__self__, "data_errors_counter", data_errors_counter)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "full_load_ended_on", full_load_ended_on)
        pulumi.set(__self__, "full_load_est_finish_time", full_load_est_finish_time)
        pulumi.set(__self__, "full_load_started_on", full_load_started_on)
        pulumi.set(__self__, "full_load_total_rows", full_load_total_rows)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "result_type", 'TableLevelOutput')
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "total_changes_applied", total_changes_applied)

    @property
    @pulumi.getter(name="cdcDeleteCounter")
    def cdc_delete_counter(self) -> int:
        """
        Number of applied deletes
        """
        return pulumi.get(self, "cdc_delete_counter")

    @property
    @pulumi.getter(name="cdcInsertCounter")
    def cdc_insert_counter(self) -> int:
        """
        Number of applied inserts
        """
        return pulumi.get(self, "cdc_insert_counter")

    @property
    @pulumi.getter(name="cdcUpdateCounter")
    def cdc_update_counter(self) -> int:
        """
        Number of applied updates
        """
        return pulumi.get(self, "cdc_update_counter")

    @property
    @pulumi.getter(name="dataErrorsCounter")
    def data_errors_counter(self) -> int:
        """
        Number of data errors occurred
        """
        return pulumi.get(self, "data_errors_counter")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="fullLoadEndedOn")
    def full_load_ended_on(self) -> str:
        """
        Full load end time
        """
        return pulumi.get(self, "full_load_ended_on")

    @property
    @pulumi.getter(name="fullLoadEstFinishTime")
    def full_load_est_finish_time(self) -> str:
        """
        Estimate to finish full load
        """
        return pulumi.get(self, "full_load_est_finish_time")

    @property
    @pulumi.getter(name="fullLoadStartedOn")
    def full_load_started_on(self) -> str:
        """
        Full load start time
        """
        return pulumi.get(self, "full_load_started_on")

    @property
    @pulumi.getter(name="fullLoadTotalRows")
    def full_load_total_rows(self) -> int:
        """
        Number of rows applied in full load
        """
        return pulumi.get(self, "full_load_total_rows")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> str:
        """
        Last modified time on target
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of the table migration
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        Name of the table
        """
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="totalChangesApplied")
    def total_changes_applied(self) -> int:
        """
        Total number of applied changes
        """
        return pulumi.get(self, "total_changes_applied")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse(dict):
    """
    Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
    """
    def __init__(__self__, *,
                 migration_setting: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 selected_tables: Optional[Sequence['outputs.MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse']] = None,
                 source_setting: Optional[Mapping[str, str]] = None,
                 target_database_name: Optional[str] = None,
                 target_setting: Optional[Mapping[str, str]] = None):
        """
        Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
        :param Mapping[str, str] migration_setting: Migration settings which tune the migration behavior
        :param str name: Name of the database
        :param Sequence['MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArgs'] selected_tables: Tables selected for migration
        :param Mapping[str, str] source_setting: Source settings to tune source endpoint migration behavior
        :param str target_database_name: Name of target database. Note: Target database will be truncated before starting migration.
        :param Mapping[str, str] target_setting: Target settings to tune target endpoint migration behavior
        """
        if migration_setting is not None:
            pulumi.set(__self__, "migration_setting", migration_setting)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if selected_tables is not None:
            pulumi.set(__self__, "selected_tables", selected_tables)
        if source_setting is not None:
            pulumi.set(__self__, "source_setting", source_setting)
        if target_database_name is not None:
            pulumi.set(__self__, "target_database_name", target_database_name)
        if target_setting is not None:
            pulumi.set(__self__, "target_setting", target_setting)

    @property
    @pulumi.getter(name="migrationSetting")
    def migration_setting(self) -> Optional[Mapping[str, str]]:
        """
        Migration settings which tune the migration behavior
        """
        return pulumi.get(self, "migration_setting")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="selectedTables")
    def selected_tables(self) -> Optional[Sequence['outputs.MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse']]:
        """
        Tables selected for migration
        """
        return pulumi.get(self, "selected_tables")

    @property
    @pulumi.getter(name="sourceSetting")
    def source_setting(self) -> Optional[Mapping[str, str]]:
        """
        Source settings to tune source endpoint migration behavior
        """
        return pulumi.get(self, "source_setting")

    @property
    @pulumi.getter(name="targetDatabaseName")
    def target_database_name(self) -> Optional[str]:
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
        return pulumi.get(self, "target_database_name")

    @property
    @pulumi.getter(name="targetSetting")
    def target_setting(self) -> Optional[Mapping[str, str]]:
        """
        Target settings to tune target endpoint migration behavior
        """
        return pulumi.get(self, "target_setting")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse(dict):
    """
    Selected tables for the migration
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        Selected tables for the migration
        :param str name: Name of the table to migrate
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the table to migrate
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse(dict):
    """
    Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
    """
    def __init__(__self__, *,
                 selected_databases: Sequence['outputs.MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse'],
                 source_connection_info: 'outputs.PostgreSqlConnectionInfoResponse',
                 target_connection_info: 'outputs.PostgreSqlConnectionInfoResponse'):
        """
        Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
        :param Sequence['MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArgs'] selected_databases: Databases to migrate
        :param 'PostgreSqlConnectionInfoResponseArgs' source_connection_info: Connection information for source PostgreSQL
        :param 'PostgreSqlConnectionInfoResponseArgs' target_connection_info: Connection information for target Azure Database for PostgreSQL
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> Sequence['outputs.MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse']:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.PostgreSqlConnectionInfoResponse':
        """
        Connection information for source PostgreSQL
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.PostgreSqlConnectionInfoResponse':
        """
        Connection information for target Azure Database for PostgreSQL
        """
        return pulumi.get(self, "target_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse(dict):
    def __init__(__self__, *,
                 id: str,
                 result_type: str,
                 error_message: Optional[str] = None,
                 events: Optional[Sequence['outputs.SyncMigrationDatabaseErrorEventResponse']] = None):
        """
        :param str id: Result identifier
        :param str result_type: Result type
        :param str error_message: Error message
        :param Sequence['SyncMigrationDatabaseErrorEventResponseArgs'] events: List of error events.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'DatabaseLevelErrorOutput')
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if events is not None:
            pulumi.set(__self__, "events", events)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.SyncMigrationDatabaseErrorEventResponse']]:
        """
        List of error events.
        """
        return pulumi.get(self, "events")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse(dict):
    def __init__(__self__, *,
                 applied_changes: int,
                 cdc_delete_counter: int,
                 cdc_insert_counter: int,
                 cdc_update_counter: int,
                 database_name: str,
                 ended_on: str,
                 full_load_completed_tables: int,
                 full_load_errored_tables: int,
                 full_load_loading_tables: int,
                 full_load_queued_tables: int,
                 id: str,
                 incoming_changes: int,
                 initialization_completed: bool,
                 latency: int,
                 migration_state: str,
                 result_type: str,
                 started_on: str):
        """
        :param int applied_changes: Number of applied changes
        :param int cdc_delete_counter: Number of cdc deletes
        :param int cdc_insert_counter: Number of cdc inserts
        :param int cdc_update_counter: Number of cdc updates
        :param str database_name: Name of the database
        :param str ended_on: Migration end time
        :param int full_load_completed_tables: Number of tables completed in full load
        :param int full_load_errored_tables: Number of tables errored in full load
        :param int full_load_loading_tables: Number of tables loading in full load
        :param int full_load_queued_tables: Number of tables queued in full load
        :param str id: Result identifier
        :param int incoming_changes: Number of incoming changes
        :param bool initialization_completed: Indicates if initial load (full load) has been completed
        :param int latency: CDC apply latency
        :param str migration_state: Migration state that this database is in
        :param str result_type: Result type
        :param str started_on: Migration start time
        """
        pulumi.set(__self__, "applied_changes", applied_changes)
        pulumi.set(__self__, "cdc_delete_counter", cdc_delete_counter)
        pulumi.set(__self__, "cdc_insert_counter", cdc_insert_counter)
        pulumi.set(__self__, "cdc_update_counter", cdc_update_counter)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "full_load_completed_tables", full_load_completed_tables)
        pulumi.set(__self__, "full_load_errored_tables", full_load_errored_tables)
        pulumi.set(__self__, "full_load_loading_tables", full_load_loading_tables)
        pulumi.set(__self__, "full_load_queued_tables", full_load_queued_tables)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "incoming_changes", incoming_changes)
        pulumi.set(__self__, "initialization_completed", initialization_completed)
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "migration_state", migration_state)
        pulumi.set(__self__, "result_type", 'DatabaseLevelOutput')
        pulumi.set(__self__, "started_on", started_on)

    @property
    @pulumi.getter(name="appliedChanges")
    def applied_changes(self) -> int:
        """
        Number of applied changes
        """
        return pulumi.get(self, "applied_changes")

    @property
    @pulumi.getter(name="cdcDeleteCounter")
    def cdc_delete_counter(self) -> int:
        """
        Number of cdc deletes
        """
        return pulumi.get(self, "cdc_delete_counter")

    @property
    @pulumi.getter(name="cdcInsertCounter")
    def cdc_insert_counter(self) -> int:
        """
        Number of cdc inserts
        """
        return pulumi.get(self, "cdc_insert_counter")

    @property
    @pulumi.getter(name="cdcUpdateCounter")
    def cdc_update_counter(self) -> int:
        """
        Number of cdc updates
        """
        return pulumi.get(self, "cdc_update_counter")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="fullLoadCompletedTables")
    def full_load_completed_tables(self) -> int:
        """
        Number of tables completed in full load
        """
        return pulumi.get(self, "full_load_completed_tables")

    @property
    @pulumi.getter(name="fullLoadErroredTables")
    def full_load_errored_tables(self) -> int:
        """
        Number of tables errored in full load
        """
        return pulumi.get(self, "full_load_errored_tables")

    @property
    @pulumi.getter(name="fullLoadLoadingTables")
    def full_load_loading_tables(self) -> int:
        """
        Number of tables loading in full load
        """
        return pulumi.get(self, "full_load_loading_tables")

    @property
    @pulumi.getter(name="fullLoadQueuedTables")
    def full_load_queued_tables(self) -> int:
        """
        Number of tables queued in full load
        """
        return pulumi.get(self, "full_load_queued_tables")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="incomingChanges")
    def incoming_changes(self) -> int:
        """
        Number of incoming changes
        """
        return pulumi.get(self, "incoming_changes")

    @property
    @pulumi.getter(name="initializationCompleted")
    def initialization_completed(self) -> bool:
        """
        Indicates if initial load (full load) has been completed
        """
        return pulumi.get(self, "initialization_completed")

    @property
    @pulumi.getter
    def latency(self) -> int:
        """
        CDC apply latency
        """
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="migrationState")
    def migration_state(self) -> str:
        """
        Migration state that this database is in
        """
        return pulumi.get(self, "migration_state")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse(dict):
    def __init__(__self__, *,
                 error: 'outputs.ReportableExceptionResponse',
                 id: str,
                 result_type: str):
        """
        :param 'ReportableExceptionResponseArgs' error: Migration error
        :param str id: Result identifier
        :param str result_type: Result type
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'ErrorOutput')

    @property
    @pulumi.getter
    def error(self) -> 'outputs.ReportableExceptionResponse':
        """
        Migration error
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse(dict):
    def __init__(__self__, *,
                 ended_on: str,
                 id: str,
                 result_type: str,
                 source_server: str,
                 source_server_type: str,
                 source_server_version: str,
                 started_on: str,
                 state: str,
                 target_server: str,
                 target_server_type: str,
                 target_server_version: str):
        """
        :param str ended_on: Migration end time
        :param str id: Result identifier
        :param str result_type: Result type
        :param str source_server: Source server name
        :param str source_server_type: Source server type.
        :param str source_server_version: Source server version
        :param str started_on: Migration start time
        :param str state: Migration status
        :param str target_server: Target server name
        :param str target_server_type: Target server type.
        :param str target_server_version: Target server version
        """
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'MigrationLevelOutput')
        pulumi.set(__self__, "source_server", source_server)
        pulumi.set(__self__, "source_server_type", source_server_type)
        pulumi.set(__self__, "source_server_version", source_server_version)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "target_server", target_server)
        pulumi.set(__self__, "target_server_type", target_server_type)
        pulumi.set(__self__, "target_server_version", target_server_version)

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="sourceServer")
    def source_server(self) -> str:
        """
        Source server name
        """
        return pulumi.get(self, "source_server")

    @property
    @pulumi.getter(name="sourceServerType")
    def source_server_type(self) -> str:
        """
        Source server type.
        """
        return pulumi.get(self, "source_server_type")

    @property
    @pulumi.getter(name="sourceServerVersion")
    def source_server_version(self) -> str:
        """
        Source server version
        """
        return pulumi.get(self, "source_server_version")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Migration status
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetServer")
    def target_server(self) -> str:
        """
        Target server name
        """
        return pulumi.get(self, "target_server")

    @property
    @pulumi.getter(name="targetServerType")
    def target_server_type(self) -> str:
        """
        Target server type.
        """
        return pulumi.get(self, "target_server_type")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Target server version
        """
        return pulumi.get(self, "target_server_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse(dict):
    def __init__(__self__, *,
                 cdc_delete_counter: int,
                 cdc_insert_counter: int,
                 cdc_update_counter: int,
                 data_errors_counter: int,
                 database_name: str,
                 full_load_ended_on: str,
                 full_load_est_finish_time: str,
                 full_load_started_on: str,
                 full_load_total_rows: int,
                 id: str,
                 last_modified_time: str,
                 result_type: str,
                 state: str,
                 table_name: str,
                 total_changes_applied: int):
        """
        :param int cdc_delete_counter: Number of applied deletes
        :param int cdc_insert_counter: Number of applied inserts
        :param int cdc_update_counter: Number of applied updates
        :param int data_errors_counter: Number of data errors occurred
        :param str database_name: Name of the database
        :param str full_load_ended_on: Full load end time
        :param str full_load_est_finish_time: Estimate to finish full load
        :param str full_load_started_on: Full load start time
        :param int full_load_total_rows: Number of rows applied in full load
        :param str id: Result identifier
        :param str last_modified_time: Last modified time on target
        :param str result_type: Result type
        :param str state: Current state of the table migration
        :param str table_name: Name of the table
        :param int total_changes_applied: Total number of applied changes
        """
        pulumi.set(__self__, "cdc_delete_counter", cdc_delete_counter)
        pulumi.set(__self__, "cdc_insert_counter", cdc_insert_counter)
        pulumi.set(__self__, "cdc_update_counter", cdc_update_counter)
        pulumi.set(__self__, "data_errors_counter", data_errors_counter)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "full_load_ended_on", full_load_ended_on)
        pulumi.set(__self__, "full_load_est_finish_time", full_load_est_finish_time)
        pulumi.set(__self__, "full_load_started_on", full_load_started_on)
        pulumi.set(__self__, "full_load_total_rows", full_load_total_rows)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "result_type", 'TableLevelOutput')
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "total_changes_applied", total_changes_applied)

    @property
    @pulumi.getter(name="cdcDeleteCounter")
    def cdc_delete_counter(self) -> int:
        """
        Number of applied deletes
        """
        return pulumi.get(self, "cdc_delete_counter")

    @property
    @pulumi.getter(name="cdcInsertCounter")
    def cdc_insert_counter(self) -> int:
        """
        Number of applied inserts
        """
        return pulumi.get(self, "cdc_insert_counter")

    @property
    @pulumi.getter(name="cdcUpdateCounter")
    def cdc_update_counter(self) -> int:
        """
        Number of applied updates
        """
        return pulumi.get(self, "cdc_update_counter")

    @property
    @pulumi.getter(name="dataErrorsCounter")
    def data_errors_counter(self) -> int:
        """
        Number of data errors occurred
        """
        return pulumi.get(self, "data_errors_counter")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="fullLoadEndedOn")
    def full_load_ended_on(self) -> str:
        """
        Full load end time
        """
        return pulumi.get(self, "full_load_ended_on")

    @property
    @pulumi.getter(name="fullLoadEstFinishTime")
    def full_load_est_finish_time(self) -> str:
        """
        Estimate to finish full load
        """
        return pulumi.get(self, "full_load_est_finish_time")

    @property
    @pulumi.getter(name="fullLoadStartedOn")
    def full_load_started_on(self) -> str:
        """
        Full load start time
        """
        return pulumi.get(self, "full_load_started_on")

    @property
    @pulumi.getter(name="fullLoadTotalRows")
    def full_load_total_rows(self) -> int:
        """
        Number of rows applied in full load
        """
        return pulumi.get(self, "full_load_total_rows")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> str:
        """
        Last modified time on target
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of the table migration
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        Name of the table
        """
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="totalChangesApplied")
    def total_changes_applied(self) -> int:
        """
        Total number of applied changes
        """
        return pulumi.get(self, "total_changes_applied")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse(dict):
    """
    Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence[Any],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse'] = None):
        """
        Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence[Union['MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs', 'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs', 'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseArgs', 'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseArgs', 'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseArgs']] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence[Any]:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbDatabaseInputResponse(dict):
    """
    Database specific information for SQL to Azure SQL DB migration task inputs
    """
    def __init__(__self__, *,
                 make_source_db_read_only: Optional[bool] = None,
                 name: Optional[str] = None,
                 table_map: Optional[Mapping[str, str]] = None,
                 target_database_name: Optional[str] = None):
        """
        Database specific information for SQL to Azure SQL DB migration task inputs
        :param bool make_source_db_read_only: Whether to set database read only before migration
        :param str name: Name of the database
        :param Mapping[str, str] table_map: Mapping of source to target tables
        :param str target_database_name: Name of target database. Note: Target database will be truncated before starting migration.
        """
        if make_source_db_read_only is not None:
            pulumi.set(__self__, "make_source_db_read_only", make_source_db_read_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if table_map is not None:
            pulumi.set(__self__, "table_map", table_map)
        if target_database_name is not None:
            pulumi.set(__self__, "target_database_name", target_database_name)

    @property
    @pulumi.getter(name="makeSourceDbReadOnly")
    def make_source_db_read_only(self) -> Optional[bool]:
        """
        Whether to set database read only before migration
        """
        return pulumi.get(self, "make_source_db_read_only")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tableMap")
    def table_map(self) -> Optional[Mapping[str, str]]:
        """
        Mapping of source to target tables
        """
        return pulumi.get(self, "table_map")

    @property
    @pulumi.getter(name="targetDatabaseName")
    def target_database_name(self) -> Optional[str]:
        """
        Name of target database. Note: Target database will be truncated before starting migration.
        """
        return pulumi.get(self, "target_database_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbSyncDatabaseInputResponse(dict):
    """
    Database specific information for SQL to Azure SQL DB sync migration task inputs
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 migration_setting: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 source_setting: Optional[Mapping[str, str]] = None,
                 table_map: Optional[Mapping[str, str]] = None,
                 target_database_name: Optional[str] = None,
                 target_setting: Optional[Mapping[str, str]] = None):
        """
        Database specific information for SQL to Azure SQL DB sync migration task inputs
        :param str id: Unique identifier for database
        :param Mapping[str, str] migration_setting: Migration settings which tune the migration behavior
        :param str name: Name of database
        :param str schema_name: Schema name to be migrated
        :param Mapping[str, str] source_setting: Source settings to tune source endpoint migration behavior
        :param Mapping[str, str] table_map: Mapping of source to target tables
        :param str target_database_name: Target database name
        :param Mapping[str, str] target_setting: Target settings to tune target endpoint migration behavior
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if migration_setting is not None:
            pulumi.set(__self__, "migration_setting", migration_setting)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_setting is not None:
            pulumi.set(__self__, "source_setting", source_setting)
        if table_map is not None:
            pulumi.set(__self__, "table_map", table_map)
        if target_database_name is not None:
            pulumi.set(__self__, "target_database_name", target_database_name)
        if target_setting is not None:
            pulumi.set(__self__, "target_setting", target_setting)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier for database
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="migrationSetting")
    def migration_setting(self) -> Optional[Mapping[str, str]]:
        """
        Migration settings which tune the migration behavior
        """
        return pulumi.get(self, "migration_setting")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        """
        Schema name to be migrated
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sourceSetting")
    def source_setting(self) -> Optional[Mapping[str, str]]:
        """
        Source settings to tune source endpoint migration behavior
        """
        return pulumi.get(self, "source_setting")

    @property
    @pulumi.getter(name="tableMap")
    def table_map(self) -> Optional[Mapping[str, str]]:
        """
        Mapping of source to target tables
        """
        return pulumi.get(self, "table_map")

    @property
    @pulumi.getter(name="targetDatabaseName")
    def target_database_name(self) -> Optional[str]:
        """
        Target database name
        """
        return pulumi.get(self, "target_database_name")

    @property
    @pulumi.getter(name="targetSetting")
    def target_setting(self) -> Optional[Mapping[str, str]]:
        """
        Target settings to tune target endpoint migration behavior
        """
        return pulumi.get(self, "target_setting")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbSyncTaskInputResponse(dict):
    """
    Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
    """
    def __init__(__self__, *,
                 selected_databases: Sequence['outputs.MigrateSqlServerSqlDbSyncDatabaseInputResponse'],
                 source_connection_info: 'outputs.SqlConnectionInfoResponse',
                 target_connection_info: 'outputs.SqlConnectionInfoResponse',
                 validation_options: Optional['outputs.MigrationValidationOptionsResponse'] = None):
        """
        Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
        :param Sequence['MigrateSqlServerSqlDbSyncDatabaseInputResponseArgs'] selected_databases: Databases to migrate
        :param 'SqlConnectionInfoResponseArgs' source_connection_info: Information for connecting to source
        :param 'SqlConnectionInfoResponseArgs' target_connection_info: Information for connecting to target
        :param 'MigrationValidationOptionsResponseArgs' validation_options: Validation options
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if validation_options is not None:
            pulumi.set(__self__, "validation_options", validation_options)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> Sequence['outputs.MigrateSqlServerSqlDbSyncDatabaseInputResponse']:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Information for connecting to source
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Information for connecting to target
        """
        return pulumi.get(self, "target_connection_info")

    @property
    @pulumi.getter(name="validationOptions")
    def validation_options(self) -> Optional['outputs.MigrationValidationOptionsResponse']:
        """
        Validation options
        """
        return pulumi.get(self, "validation_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse(dict):
    def __init__(__self__, *,
                 id: str,
                 result_type: str,
                 error_message: Optional[str] = None,
                 events: Optional[Sequence['outputs.SyncMigrationDatabaseErrorEventResponse']] = None):
        """
        :param str id: Result identifier
        :param str result_type: Result type
        :param str error_message: Error message
        :param Sequence['SyncMigrationDatabaseErrorEventResponseArgs'] events: List of error events.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'DatabaseLevelErrorOutput')
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if events is not None:
            pulumi.set(__self__, "events", events)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.SyncMigrationDatabaseErrorEventResponse']]:
        """
        List of error events.
        """
        return pulumi.get(self, "events")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse(dict):
    def __init__(__self__, *,
                 applied_changes: int,
                 cdc_delete_counter: int,
                 cdc_insert_counter: int,
                 cdc_update_counter: int,
                 database_name: str,
                 ended_on: str,
                 full_load_completed_tables: int,
                 full_load_errored_tables: int,
                 full_load_loading_tables: int,
                 full_load_queued_tables: int,
                 id: str,
                 incoming_changes: int,
                 initialization_completed: bool,
                 latency: int,
                 migration_state: str,
                 result_type: str,
                 started_on: str):
        """
        :param int applied_changes: Number of applied changes
        :param int cdc_delete_counter: Number of cdc deletes
        :param int cdc_insert_counter: Number of cdc inserts
        :param int cdc_update_counter: Number of cdc updates
        :param str database_name: Name of the database
        :param str ended_on: Migration end time
        :param int full_load_completed_tables: Number of tables completed in full load
        :param int full_load_errored_tables: Number of tables errored in full load
        :param int full_load_loading_tables: Number of tables loading in full load
        :param int full_load_queued_tables: Number of tables queued in full load
        :param str id: Result identifier
        :param int incoming_changes: Number of incoming changes
        :param bool initialization_completed: Indicates if initial load (full load) has been completed
        :param int latency: CDC apply latency
        :param str migration_state: Migration state that this database is in
        :param str result_type: Result type
        :param str started_on: Migration start time
        """
        pulumi.set(__self__, "applied_changes", applied_changes)
        pulumi.set(__self__, "cdc_delete_counter", cdc_delete_counter)
        pulumi.set(__self__, "cdc_insert_counter", cdc_insert_counter)
        pulumi.set(__self__, "cdc_update_counter", cdc_update_counter)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "full_load_completed_tables", full_load_completed_tables)
        pulumi.set(__self__, "full_load_errored_tables", full_load_errored_tables)
        pulumi.set(__self__, "full_load_loading_tables", full_load_loading_tables)
        pulumi.set(__self__, "full_load_queued_tables", full_load_queued_tables)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "incoming_changes", incoming_changes)
        pulumi.set(__self__, "initialization_completed", initialization_completed)
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "migration_state", migration_state)
        pulumi.set(__self__, "result_type", 'DatabaseLevelOutput')
        pulumi.set(__self__, "started_on", started_on)

    @property
    @pulumi.getter(name="appliedChanges")
    def applied_changes(self) -> int:
        """
        Number of applied changes
        """
        return pulumi.get(self, "applied_changes")

    @property
    @pulumi.getter(name="cdcDeleteCounter")
    def cdc_delete_counter(self) -> int:
        """
        Number of cdc deletes
        """
        return pulumi.get(self, "cdc_delete_counter")

    @property
    @pulumi.getter(name="cdcInsertCounter")
    def cdc_insert_counter(self) -> int:
        """
        Number of cdc inserts
        """
        return pulumi.get(self, "cdc_insert_counter")

    @property
    @pulumi.getter(name="cdcUpdateCounter")
    def cdc_update_counter(self) -> int:
        """
        Number of cdc updates
        """
        return pulumi.get(self, "cdc_update_counter")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="fullLoadCompletedTables")
    def full_load_completed_tables(self) -> int:
        """
        Number of tables completed in full load
        """
        return pulumi.get(self, "full_load_completed_tables")

    @property
    @pulumi.getter(name="fullLoadErroredTables")
    def full_load_errored_tables(self) -> int:
        """
        Number of tables errored in full load
        """
        return pulumi.get(self, "full_load_errored_tables")

    @property
    @pulumi.getter(name="fullLoadLoadingTables")
    def full_load_loading_tables(self) -> int:
        """
        Number of tables loading in full load
        """
        return pulumi.get(self, "full_load_loading_tables")

    @property
    @pulumi.getter(name="fullLoadQueuedTables")
    def full_load_queued_tables(self) -> int:
        """
        Number of tables queued in full load
        """
        return pulumi.get(self, "full_load_queued_tables")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="incomingChanges")
    def incoming_changes(self) -> int:
        """
        Number of incoming changes
        """
        return pulumi.get(self, "incoming_changes")

    @property
    @pulumi.getter(name="initializationCompleted")
    def initialization_completed(self) -> bool:
        """
        Indicates if initial load (full load) has been completed
        """
        return pulumi.get(self, "initialization_completed")

    @property
    @pulumi.getter
    def latency(self) -> int:
        """
        CDC apply latency
        """
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="migrationState")
    def migration_state(self) -> str:
        """
        Migration state that this database is in
        """
        return pulumi.get(self, "migration_state")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbSyncTaskOutputErrorResponse(dict):
    def __init__(__self__, *,
                 error: 'outputs.ReportableExceptionResponse',
                 id: str,
                 result_type: str):
        """
        :param 'ReportableExceptionResponseArgs' error: Migration error
        :param str id: Result identifier
        :param str result_type: Result type
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'ErrorOutput')

    @property
    @pulumi.getter
    def error(self) -> 'outputs.ReportableExceptionResponse':
        """
        Migration error
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse(dict):
    def __init__(__self__, *,
                 database_count: int,
                 ended_on: str,
                 id: str,
                 result_type: str,
                 source_server: str,
                 source_server_version: str,
                 started_on: str,
                 target_server: str,
                 target_server_version: str):
        """
        :param int database_count: Count of databases
        :param str ended_on: Migration end time
        :param str id: Result identifier
        :param str result_type: Result type
        :param str source_server: Source server name
        :param str source_server_version: Source server version
        :param str started_on: Migration start time
        :param str target_server: Target server name
        :param str target_server_version: Target server version
        """
        pulumi.set(__self__, "database_count", database_count)
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'MigrationLevelOutput')
        pulumi.set(__self__, "source_server", source_server)
        pulumi.set(__self__, "source_server_version", source_server_version)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "target_server", target_server)
        pulumi.set(__self__, "target_server_version", target_server_version)

    @property
    @pulumi.getter(name="databaseCount")
    def database_count(self) -> int:
        """
        Count of databases
        """
        return pulumi.get(self, "database_count")

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="sourceServer")
    def source_server(self) -> str:
        """
        Source server name
        """
        return pulumi.get(self, "source_server")

    @property
    @pulumi.getter(name="sourceServerVersion")
    def source_server_version(self) -> str:
        """
        Source server version
        """
        return pulumi.get(self, "source_server_version")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter(name="targetServer")
    def target_server(self) -> str:
        """
        Target server name
        """
        return pulumi.get(self, "target_server")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Target server version
        """
        return pulumi.get(self, "target_server_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse(dict):
    def __init__(__self__, *,
                 cdc_delete_counter: int,
                 cdc_insert_counter: int,
                 cdc_update_counter: int,
                 data_errors_counter: int,
                 database_name: str,
                 full_load_ended_on: str,
                 full_load_est_finish_time: str,
                 full_load_started_on: str,
                 full_load_total_rows: int,
                 id: str,
                 last_modified_time: str,
                 result_type: str,
                 state: str,
                 table_name: str,
                 total_changes_applied: int):
        """
        :param int cdc_delete_counter: Number of applied deletes
        :param int cdc_insert_counter: Number of applied inserts
        :param int cdc_update_counter: Number of applied updates
        :param int data_errors_counter: Number of data errors occurred
        :param str database_name: Name of the database
        :param str full_load_ended_on: Full load end time
        :param str full_load_est_finish_time: Estimate to finish full load
        :param str full_load_started_on: Full load start time
        :param int full_load_total_rows: Number of rows applied in full load
        :param str id: Result identifier
        :param str last_modified_time: Last modified time on target
        :param str result_type: Result type
        :param str state: Current state of the table migration
        :param str table_name: Name of the table
        :param int total_changes_applied: Total number of applied changes
        """
        pulumi.set(__self__, "cdc_delete_counter", cdc_delete_counter)
        pulumi.set(__self__, "cdc_insert_counter", cdc_insert_counter)
        pulumi.set(__self__, "cdc_update_counter", cdc_update_counter)
        pulumi.set(__self__, "data_errors_counter", data_errors_counter)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "full_load_ended_on", full_load_ended_on)
        pulumi.set(__self__, "full_load_est_finish_time", full_load_est_finish_time)
        pulumi.set(__self__, "full_load_started_on", full_load_started_on)
        pulumi.set(__self__, "full_load_total_rows", full_load_total_rows)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "result_type", 'TableLevelOutput')
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "total_changes_applied", total_changes_applied)

    @property
    @pulumi.getter(name="cdcDeleteCounter")
    def cdc_delete_counter(self) -> int:
        """
        Number of applied deletes
        """
        return pulumi.get(self, "cdc_delete_counter")

    @property
    @pulumi.getter(name="cdcInsertCounter")
    def cdc_insert_counter(self) -> int:
        """
        Number of applied inserts
        """
        return pulumi.get(self, "cdc_insert_counter")

    @property
    @pulumi.getter(name="cdcUpdateCounter")
    def cdc_update_counter(self) -> int:
        """
        Number of applied updates
        """
        return pulumi.get(self, "cdc_update_counter")

    @property
    @pulumi.getter(name="dataErrorsCounter")
    def data_errors_counter(self) -> int:
        """
        Number of data errors occurred
        """
        return pulumi.get(self, "data_errors_counter")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="fullLoadEndedOn")
    def full_load_ended_on(self) -> str:
        """
        Full load end time
        """
        return pulumi.get(self, "full_load_ended_on")

    @property
    @pulumi.getter(name="fullLoadEstFinishTime")
    def full_load_est_finish_time(self) -> str:
        """
        Estimate to finish full load
        """
        return pulumi.get(self, "full_load_est_finish_time")

    @property
    @pulumi.getter(name="fullLoadStartedOn")
    def full_load_started_on(self) -> str:
        """
        Full load start time
        """
        return pulumi.get(self, "full_load_started_on")

    @property
    @pulumi.getter(name="fullLoadTotalRows")
    def full_load_total_rows(self) -> int:
        """
        Number of rows applied in full load
        """
        return pulumi.get(self, "full_load_total_rows")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> str:
        """
        Last modified time on target
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of the table migration
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        Name of the table
        """
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="totalChangesApplied")
    def total_changes_applied(self) -> int:
        """
        Total number of applied changes
        """
        return pulumi.get(self, "total_changes_applied")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbSyncTaskPropertiesResponse(dict):
    """
    Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence[Any],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.MigrateSqlServerSqlDbSyncTaskInputResponse'] = None):
        """
        Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence[Union['MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseArgs', 'MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseArgs', 'MigrateSqlServerSqlDbSyncTaskOutputErrorResponseArgs', 'MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseArgs', 'MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseArgs']] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'MigrateSqlServerSqlDbSyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'Migrate.SqlServer.AzureSqlDb.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence[Any]:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MigrateSqlServerSqlDbSyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbTaskInputResponse(dict):
    """
    Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
    """
    def __init__(__self__, *,
                 selected_databases: Sequence['outputs.MigrateSqlServerSqlDbDatabaseInputResponse'],
                 source_connection_info: 'outputs.SqlConnectionInfoResponse',
                 target_connection_info: 'outputs.SqlConnectionInfoResponse',
                 validation_options: Optional['outputs.MigrationValidationOptionsResponse'] = None):
        """
        Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
        :param Sequence['MigrateSqlServerSqlDbDatabaseInputResponseArgs'] selected_databases: Databases to migrate
        :param 'SqlConnectionInfoResponseArgs' source_connection_info: Information for connecting to source
        :param 'SqlConnectionInfoResponseArgs' target_connection_info: Information for connecting to target
        :param 'MigrationValidationOptionsResponseArgs' validation_options: Options for enabling various post migration validations. Available options, 
                1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data. 
                2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if validation_options is not None:
            pulumi.set(__self__, "validation_options", validation_options)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> Sequence['outputs.MigrateSqlServerSqlDbDatabaseInputResponse']:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Information for connecting to source
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Information for connecting to target
        """
        return pulumi.get(self, "target_connection_info")

    @property
    @pulumi.getter(name="validationOptions")
    def validation_options(self) -> Optional['outputs.MigrationValidationOptionsResponse']:
        """
        Options for enabling various post migration validations. Available options, 
         1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data. 
         2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
        """
        return pulumi.get(self, "validation_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse(dict):
    def __init__(__self__, *,
                 database_name: str,
                 ended_on: str,
                 error_count: int,
                 error_prefix: str,
                 exceptions_and_warnings: Sequence['outputs.ReportableExceptionResponse'],
                 id: str,
                 message: str,
                 number_of_objects: int,
                 number_of_objects_completed: int,
                 object_summary: Mapping[str, 'outputs.DataItemMigrationSummaryResultResponse'],
                 result_prefix: str,
                 result_type: str,
                 stage: str,
                 started_on: str,
                 state: str,
                 status_message: str):
        """
        :param str database_name: Name of the item
        :param str ended_on: Migration end time
        :param int error_count: Number of database/object errors.
        :param str error_prefix: Wildcard string prefix to use for querying all errors of the item
        :param Sequence['ReportableExceptionResponseArgs'] exceptions_and_warnings: Migration exceptions and warnings.
        :param str id: Result identifier
        :param str message: Migration progress message
        :param int number_of_objects: Number of objects
        :param int number_of_objects_completed: Number of successfully completed objects
        :param Mapping[str, 'DataItemMigrationSummaryResultResponseArgs'] object_summary: Summary of object results in the migration
        :param str result_prefix: Wildcard string prefix to use for querying all sub-tem results of the item
        :param str result_type: Result type
        :param str stage: Migration stage that this database is in
        :param str started_on: Migration start time
        :param str state: Current state of migration
        :param str status_message: Status message
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "error_count", error_count)
        pulumi.set(__self__, "error_prefix", error_prefix)
        pulumi.set(__self__, "exceptions_and_warnings", exceptions_and_warnings)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "number_of_objects", number_of_objects)
        pulumi.set(__self__, "number_of_objects_completed", number_of_objects_completed)
        pulumi.set(__self__, "object_summary", object_summary)
        pulumi.set(__self__, "result_prefix", result_prefix)
        pulumi.set(__self__, "result_type", 'DatabaseLevelOutput')
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status_message", status_message)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of the item
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="errorCount")
    def error_count(self) -> int:
        """
        Number of database/object errors.
        """
        return pulumi.get(self, "error_count")

    @property
    @pulumi.getter(name="errorPrefix")
    def error_prefix(self) -> str:
        """
        Wildcard string prefix to use for querying all errors of the item
        """
        return pulumi.get(self, "error_prefix")

    @property
    @pulumi.getter(name="exceptionsAndWarnings")
    def exceptions_and_warnings(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Migration exceptions and warnings.
        """
        return pulumi.get(self, "exceptions_and_warnings")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Migration progress message
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="numberOfObjects")
    def number_of_objects(self) -> int:
        """
        Number of objects
        """
        return pulumi.get(self, "number_of_objects")

    @property
    @pulumi.getter(name="numberOfObjectsCompleted")
    def number_of_objects_completed(self) -> int:
        """
        Number of successfully completed objects
        """
        return pulumi.get(self, "number_of_objects_completed")

    @property
    @pulumi.getter(name="objectSummary")
    def object_summary(self) -> Mapping[str, 'outputs.DataItemMigrationSummaryResultResponse']:
        """
        Summary of object results in the migration
        """
        return pulumi.get(self, "object_summary")

    @property
    @pulumi.getter(name="resultPrefix")
    def result_prefix(self) -> str:
        """
        Wildcard string prefix to use for querying all sub-tem results of the item
        """
        return pulumi.get(self, "result_prefix")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        Migration stage that this database is in
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of migration
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        """
        Status message
        """
        return pulumi.get(self, "status_message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse(dict):
    def __init__(__self__, *,
                 id: str,
                 result_type: str):
        """
        :param str id: Result identifier
        :param str result_type: Result type
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'MigrationDatabaseLevelValidationOutput')

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbTaskOutputErrorResponse(dict):
    def __init__(__self__, *,
                 error: 'outputs.ReportableExceptionResponse',
                 id: str,
                 result_type: str):
        """
        :param 'ReportableExceptionResponseArgs' error: Migration error
        :param str id: Result identifier
        :param str result_type: Result type
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'ErrorOutput')

    @property
    @pulumi.getter
    def error(self) -> 'outputs.ReportableExceptionResponse':
        """
        Migration error
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse(dict):
    def __init__(__self__, *,
                 database_summary: Mapping[str, 'outputs.DatabaseSummaryResultResponse'],
                 databases: Mapping[str, str],
                 duration_in_seconds: int,
                 ended_on: str,
                 exceptions_and_warnings: Sequence['outputs.ReportableExceptionResponse'],
                 id: str,
                 message: str,
                 result_type: str,
                 source_server_brand_version: str,
                 source_server_version: str,
                 started_on: str,
                 status: str,
                 status_message: str,
                 target_server_brand_version: str,
                 target_server_version: str,
                 migration_report_result: Optional['outputs.MigrationReportResultResponse'] = None,
                 migration_validation_result: Optional['outputs.MigrationValidationResultResponse'] = None):
        """
        :param Mapping[str, 'DatabaseSummaryResultResponseArgs'] database_summary: Summary of database results in the migration
        :param Mapping[str, str] databases: Selected databases as a map from database name to database id
        :param int duration_in_seconds: Duration of task execution in seconds.
        :param str ended_on: Migration end time
        :param Sequence['ReportableExceptionResponseArgs'] exceptions_and_warnings: Migration exceptions and warnings.
        :param str id: Result identifier
        :param str message: Migration progress message
        :param str result_type: Result type
        :param str source_server_brand_version: Source server brand version
        :param str source_server_version: Source server version
        :param str started_on: Migration start time
        :param str status: Current status of migration
        :param str status_message: Migration status message
        :param str target_server_brand_version: Target server brand version
        :param str target_server_version: Target server version
        :param 'MigrationReportResultResponseArgs' migration_report_result: Migration Report Result, provides unique url for downloading your migration report.
        :param 'MigrationValidationResultResponseArgs' migration_validation_result: Migration Validation Results
        """
        pulumi.set(__self__, "database_summary", database_summary)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "duration_in_seconds", duration_in_seconds)
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "exceptions_and_warnings", exceptions_and_warnings)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "result_type", 'MigrationLevelOutput')
        pulumi.set(__self__, "source_server_brand_version", source_server_brand_version)
        pulumi.set(__self__, "source_server_version", source_server_version)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "target_server_brand_version", target_server_brand_version)
        pulumi.set(__self__, "target_server_version", target_server_version)
        if migration_report_result is not None:
            pulumi.set(__self__, "migration_report_result", migration_report_result)
        if migration_validation_result is not None:
            pulumi.set(__self__, "migration_validation_result", migration_validation_result)

    @property
    @pulumi.getter(name="databaseSummary")
    def database_summary(self) -> Mapping[str, 'outputs.DatabaseSummaryResultResponse']:
        """
        Summary of database results in the migration
        """
        return pulumi.get(self, "database_summary")

    @property
    @pulumi.getter
    def databases(self) -> Mapping[str, str]:
        """
        Selected databases as a map from database name to database id
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="durationInSeconds")
    def duration_in_seconds(self) -> int:
        """
        Duration of task execution in seconds.
        """
        return pulumi.get(self, "duration_in_seconds")

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="exceptionsAndWarnings")
    def exceptions_and_warnings(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Migration exceptions and warnings.
        """
        return pulumi.get(self, "exceptions_and_warnings")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Migration progress message
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="sourceServerBrandVersion")
    def source_server_brand_version(self) -> str:
        """
        Source server brand version
        """
        return pulumi.get(self, "source_server_brand_version")

    @property
    @pulumi.getter(name="sourceServerVersion")
    def source_server_version(self) -> str:
        """
        Source server version
        """
        return pulumi.get(self, "source_server_version")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of migration
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        """
        Migration status message
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="targetServerBrandVersion")
    def target_server_brand_version(self) -> str:
        """
        Target server brand version
        """
        return pulumi.get(self, "target_server_brand_version")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Target server version
        """
        return pulumi.get(self, "target_server_version")

    @property
    @pulumi.getter(name="migrationReportResult")
    def migration_report_result(self) -> Optional['outputs.MigrationReportResultResponse']:
        """
        Migration Report Result, provides unique url for downloading your migration report.
        """
        return pulumi.get(self, "migration_report_result")

    @property
    @pulumi.getter(name="migrationValidationResult")
    def migration_validation_result(self) -> Optional['outputs.MigrationValidationResultResponse']:
        """
        Migration Validation Results
        """
        return pulumi.get(self, "migration_validation_result")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbTaskOutputTableLevelResponse(dict):
    def __init__(__self__, *,
                 ended_on: str,
                 error_prefix: str,
                 id: str,
                 items_completed_count: int,
                 items_count: int,
                 object_name: str,
                 result_prefix: str,
                 result_type: str,
                 started_on: str,
                 state: str,
                 status_message: str):
        """
        :param str ended_on: Migration end time
        :param str error_prefix: Wildcard string prefix to use for querying all errors of the item
        :param str id: Result identifier
        :param int items_completed_count: Number of successfully completed items
        :param int items_count: Number of items
        :param str object_name: Name of the item
        :param str result_prefix: Wildcard string prefix to use for querying all sub-tem results of the item
        :param str result_type: Result type
        :param str started_on: Migration start time
        :param str state: Current state of migration
        :param str status_message: Status message
        """
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "error_prefix", error_prefix)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "items_completed_count", items_completed_count)
        pulumi.set(__self__, "items_count", items_count)
        pulumi.set(__self__, "object_name", object_name)
        pulumi.set(__self__, "result_prefix", result_prefix)
        pulumi.set(__self__, "result_type", 'TableLevelOutput')
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status_message", status_message)

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="errorPrefix")
    def error_prefix(self) -> str:
        """
        Wildcard string prefix to use for querying all errors of the item
        """
        return pulumi.get(self, "error_prefix")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="itemsCompletedCount")
    def items_completed_count(self) -> int:
        """
        Number of successfully completed items
        """
        return pulumi.get(self, "items_completed_count")

    @property
    @pulumi.getter(name="itemsCount")
    def items_count(self) -> int:
        """
        Number of items
        """
        return pulumi.get(self, "items_count")

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> str:
        """
        Name of the item
        """
        return pulumi.get(self, "object_name")

    @property
    @pulumi.getter(name="resultPrefix")
    def result_prefix(self) -> str:
        """
        Wildcard string prefix to use for querying all sub-tem results of the item
        """
        return pulumi.get(self, "result_prefix")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of migration
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        """
        Status message
        """
        return pulumi.get(self, "status_message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbTaskOutputValidationResultResponse(dict):
    def __init__(__self__, *,
                 id: str,
                 result_type: str):
        """
        :param str id: Result identifier
        :param str result_type: Result type
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'MigrationValidationOutput')

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlDbTaskPropertiesResponse(dict):
    """
    Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence[Any],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.MigrateSqlServerSqlDbTaskInputResponse'] = None):
        """
        Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence[Union['MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs', 'MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs', 'MigrateSqlServerSqlDbTaskOutputErrorResponseArgs', 'MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs', 'MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs', 'MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs']] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'MigrateSqlServerSqlDbTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'Migrate.SqlServer.SqlDb')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence[Any]:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MigrateSqlServerSqlDbTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMIDatabaseInputResponse(dict):
    """
    Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
    """
    def __init__(__self__, *,
                 name: str,
                 restore_database_name: str,
                 backup_file_paths: Optional[Sequence[str]] = None,
                 backup_file_share: Optional['outputs.FileShareResponse'] = None):
        """
        Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
        :param str name: Name of the database
        :param str restore_database_name: Name of the database at destination
        :param Sequence[str] backup_file_paths: The list of backup files to be used in case of existing backups.
        :param 'FileShareResponseArgs' backup_file_share: Backup file share information for backing up this database.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "restore_database_name", restore_database_name)
        if backup_file_paths is not None:
            pulumi.set(__self__, "backup_file_paths", backup_file_paths)
        if backup_file_share is not None:
            pulumi.set(__self__, "backup_file_share", backup_file_share)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="restoreDatabaseName")
    def restore_database_name(self) -> str:
        """
        Name of the database at destination
        """
        return pulumi.get(self, "restore_database_name")

    @property
    @pulumi.getter(name="backupFilePaths")
    def backup_file_paths(self) -> Optional[Sequence[str]]:
        """
        The list of backup files to be used in case of existing backups.
        """
        return pulumi.get(self, "backup_file_paths")

    @property
    @pulumi.getter(name="backupFileShare")
    def backup_file_share(self) -> Optional['outputs.FileShareResponse']:
        """
        Backup file share information for backing up this database.
        """
        return pulumi.get(self, "backup_file_share")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMISyncTaskInputResponse(dict):
    """
    Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
    """
    def __init__(__self__, *,
                 azure_app: 'outputs.AzureActiveDirectoryAppResponse',
                 selected_databases: Sequence['outputs.MigrateSqlServerSqlMIDatabaseInputResponse'],
                 source_connection_info: 'outputs.SqlConnectionInfoResponse',
                 storage_resource_id: str,
                 target_connection_info: 'outputs.MiSqlConnectionInfoResponse',
                 backup_file_share: Optional['outputs.FileShareResponse'] = None):
        """
        Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
        :param 'AzureActiveDirectoryAppResponseArgs' azure_app: Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        :param Sequence['MigrateSqlServerSqlMIDatabaseInputResponseArgs'] selected_databases: Databases to migrate
        :param 'SqlConnectionInfoResponseArgs' source_connection_info: Connection information for source SQL Server
        :param str storage_resource_id: Fully qualified resourceId of storage
        :param 'MiSqlConnectionInfoResponseArgs' target_connection_info: Connection information for Azure SQL Database Managed Instance
        :param 'FileShareResponseArgs' backup_file_share: Backup file share information for all selected databases.
        """
        pulumi.set(__self__, "azure_app", azure_app)
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "storage_resource_id", storage_resource_id)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if backup_file_share is not None:
            pulumi.set(__self__, "backup_file_share", backup_file_share)

    @property
    @pulumi.getter(name="azureApp")
    def azure_app(self) -> 'outputs.AzureActiveDirectoryAppResponse':
        """
        Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        """
        return pulumi.get(self, "azure_app")

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> Sequence['outputs.MigrateSqlServerSqlMIDatabaseInputResponse']:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Connection information for source SQL Server
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="storageResourceId")
    def storage_resource_id(self) -> str:
        """
        Fully qualified resourceId of storage
        """
        return pulumi.get(self, "storage_resource_id")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.MiSqlConnectionInfoResponse':
        """
        Connection information for Azure SQL Database Managed Instance
        """
        return pulumi.get(self, "target_connection_info")

    @property
    @pulumi.getter(name="backupFileShare")
    def backup_file_share(self) -> Optional['outputs.FileShareResponse']:
        """
        Backup file share information for all selected databases.
        """
        return pulumi.get(self, "backup_file_share")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse(dict):
    def __init__(__self__, *,
                 active_backup_sets: Sequence['outputs.BackupSetInfoResponse'],
                 container_name: str,
                 ended_on: str,
                 error_prefix: str,
                 exceptions_and_warnings: Sequence['outputs.ReportableExceptionResponse'],
                 full_backup_set_info: 'outputs.BackupSetInfoResponse',
                 id: str,
                 is_full_backup_restored: bool,
                 last_restored_backup_set_info: 'outputs.BackupSetInfoResponse',
                 migration_state: str,
                 result_type: str,
                 source_database_name: str,
                 started_on: str):
        """
        :param Sequence['BackupSetInfoResponseArgs'] active_backup_sets: Backup sets that are currently active (Either being uploaded or getting restored)
        :param str container_name: Name of container created in the Azure Storage account where backups are copied to
        :param str ended_on: Database migration end time
        :param str error_prefix: prefix string to use for querying errors for this database
        :param Sequence['ReportableExceptionResponseArgs'] exceptions_and_warnings: Migration exceptions and warnings
        :param 'BackupSetInfoResponseArgs' full_backup_set_info: Details of full backup set
        :param str id: Result identifier
        :param bool is_full_backup_restored: Whether full backup has been applied to the target database or not
        :param 'BackupSetInfoResponseArgs' last_restored_backup_set_info: Last applied backup set information
        :param str migration_state: Current state of database
        :param str result_type: Result type
        :param str source_database_name: Name of the database
        :param str started_on: Database migration start time
        """
        pulumi.set(__self__, "active_backup_sets", active_backup_sets)
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "error_prefix", error_prefix)
        pulumi.set(__self__, "exceptions_and_warnings", exceptions_and_warnings)
        pulumi.set(__self__, "full_backup_set_info", full_backup_set_info)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_full_backup_restored", is_full_backup_restored)
        pulumi.set(__self__, "last_restored_backup_set_info", last_restored_backup_set_info)
        pulumi.set(__self__, "migration_state", migration_state)
        pulumi.set(__self__, "result_type", 'DatabaseLevelOutput')
        pulumi.set(__self__, "source_database_name", source_database_name)
        pulumi.set(__self__, "started_on", started_on)

    @property
    @pulumi.getter(name="activeBackupSets")
    def active_backup_sets(self) -> Sequence['outputs.BackupSetInfoResponse']:
        """
        Backup sets that are currently active (Either being uploaded or getting restored)
        """
        return pulumi.get(self, "active_backup_sets")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        """
        Name of container created in the Azure Storage account where backups are copied to
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Database migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="errorPrefix")
    def error_prefix(self) -> str:
        """
        prefix string to use for querying errors for this database
        """
        return pulumi.get(self, "error_prefix")

    @property
    @pulumi.getter(name="exceptionsAndWarnings")
    def exceptions_and_warnings(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Migration exceptions and warnings
        """
        return pulumi.get(self, "exceptions_and_warnings")

    @property
    @pulumi.getter(name="fullBackupSetInfo")
    def full_backup_set_info(self) -> 'outputs.BackupSetInfoResponse':
        """
        Details of full backup set
        """
        return pulumi.get(self, "full_backup_set_info")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isFullBackupRestored")
    def is_full_backup_restored(self) -> bool:
        """
        Whether full backup has been applied to the target database or not
        """
        return pulumi.get(self, "is_full_backup_restored")

    @property
    @pulumi.getter(name="lastRestoredBackupSetInfo")
    def last_restored_backup_set_info(self) -> 'outputs.BackupSetInfoResponse':
        """
        Last applied backup set information
        """
        return pulumi.get(self, "last_restored_backup_set_info")

    @property
    @pulumi.getter(name="migrationState")
    def migration_state(self) -> str:
        """
        Current state of database
        """
        return pulumi.get(self, "migration_state")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="sourceDatabaseName")
    def source_database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "source_database_name")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Database migration start time
        """
        return pulumi.get(self, "started_on")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMISyncTaskOutputErrorResponse(dict):
    def __init__(__self__, *,
                 error: 'outputs.ReportableExceptionResponse',
                 id: str,
                 result_type: str):
        """
        :param 'ReportableExceptionResponseArgs' error: Migration error
        :param str id: Result identifier
        :param str result_type: Result type
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'ErrorOutput')

    @property
    @pulumi.getter
    def error(self) -> 'outputs.ReportableExceptionResponse':
        """
        Migration error
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse(dict):
    def __init__(__self__, *,
                 database_count: int,
                 database_error_count: int,
                 ended_on: str,
                 id: str,
                 result_type: str,
                 source_server_brand_version: str,
                 source_server_name: str,
                 source_server_version: str,
                 started_on: str,
                 state: str,
                 target_server_brand_version: str,
                 target_server_name: str,
                 target_server_version: str):
        """
        :param int database_count: Count of databases
        :param int database_error_count: Number of database level errors
        :param str ended_on: Migration end time
        :param str id: Result identifier
        :param str result_type: Result type
        :param str source_server_brand_version: Source server brand version
        :param str source_server_name: Source server name
        :param str source_server_version: Source server version
        :param str started_on: Migration start time
        :param str state: Current state of migration
        :param str target_server_brand_version: Target server brand version
        :param str target_server_name: Target server name
        :param str target_server_version: Target server version
        """
        pulumi.set(__self__, "database_count", database_count)
        pulumi.set(__self__, "database_error_count", database_error_count)
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'MigrationLevelOutput')
        pulumi.set(__self__, "source_server_brand_version", source_server_brand_version)
        pulumi.set(__self__, "source_server_name", source_server_name)
        pulumi.set(__self__, "source_server_version", source_server_version)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "target_server_brand_version", target_server_brand_version)
        pulumi.set(__self__, "target_server_name", target_server_name)
        pulumi.set(__self__, "target_server_version", target_server_version)

    @property
    @pulumi.getter(name="databaseCount")
    def database_count(self) -> int:
        """
        Count of databases
        """
        return pulumi.get(self, "database_count")

    @property
    @pulumi.getter(name="databaseErrorCount")
    def database_error_count(self) -> int:
        """
        Number of database level errors
        """
        return pulumi.get(self, "database_error_count")

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="sourceServerBrandVersion")
    def source_server_brand_version(self) -> str:
        """
        Source server brand version
        """
        return pulumi.get(self, "source_server_brand_version")

    @property
    @pulumi.getter(name="sourceServerName")
    def source_server_name(self) -> str:
        """
        Source server name
        """
        return pulumi.get(self, "source_server_name")

    @property
    @pulumi.getter(name="sourceServerVersion")
    def source_server_version(self) -> str:
        """
        Source server version
        """
        return pulumi.get(self, "source_server_version")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of migration
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetServerBrandVersion")
    def target_server_brand_version(self) -> str:
        """
        Target server brand version
        """
        return pulumi.get(self, "target_server_brand_version")

    @property
    @pulumi.getter(name="targetServerName")
    def target_server_name(self) -> str:
        """
        Target server name
        """
        return pulumi.get(self, "target_server_name")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Target server version
        """
        return pulumi.get(self, "target_server_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMISyncTaskPropertiesResponse(dict):
    """
    Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence[Any],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.MigrateSqlServerSqlMISyncTaskInputResponse'] = None):
        """
        Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence[Union['MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseArgs', 'MigrateSqlServerSqlMISyncTaskOutputErrorResponseArgs', 'MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseArgs']] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'MigrateSqlServerSqlMISyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence[Any]:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MigrateSqlServerSqlMISyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMITaskInputResponse(dict):
    """
    Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
    """
    def __init__(__self__, *,
                 backup_blob_share: 'outputs.BlobShareResponse',
                 selected_databases: Sequence['outputs.MigrateSqlServerSqlMIDatabaseInputResponse'],
                 source_connection_info: 'outputs.SqlConnectionInfoResponse',
                 target_connection_info: 'outputs.SqlConnectionInfoResponse',
                 aad_domain_name: Optional[str] = None,
                 backup_file_share: Optional['outputs.FileShareResponse'] = None,
                 backup_mode: Optional[str] = None,
                 selected_agent_jobs: Optional[Sequence[str]] = None,
                 selected_logins: Optional[Sequence[str]] = None):
        """
        Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
        :param 'BlobShareResponseArgs' backup_blob_share: SAS URI of Azure Storage Account Container to be used for storing backup files.
        :param Sequence['MigrateSqlServerSqlMIDatabaseInputResponseArgs'] selected_databases: Databases to migrate
        :param 'SqlConnectionInfoResponseArgs' source_connection_info: Information for connecting to source
        :param 'SqlConnectionInfoResponseArgs' target_connection_info: Information for connecting to target
        :param str aad_domain_name: Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
        :param 'FileShareResponseArgs' backup_file_share: Backup file share information for all selected databases.
        :param str backup_mode: Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
        :param Sequence[str] selected_agent_jobs: Agent Jobs to migrate.
        :param Sequence[str] selected_logins: Logins to migrate.
        """
        pulumi.set(__self__, "backup_blob_share", backup_blob_share)
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if aad_domain_name is not None:
            pulumi.set(__self__, "aad_domain_name", aad_domain_name)
        if backup_file_share is not None:
            pulumi.set(__self__, "backup_file_share", backup_file_share)
        if backup_mode is not None:
            pulumi.set(__self__, "backup_mode", backup_mode)
        if selected_agent_jobs is not None:
            pulumi.set(__self__, "selected_agent_jobs", selected_agent_jobs)
        if selected_logins is not None:
            pulumi.set(__self__, "selected_logins", selected_logins)

    @property
    @pulumi.getter(name="backupBlobShare")
    def backup_blob_share(self) -> 'outputs.BlobShareResponse':
        """
        SAS URI of Azure Storage Account Container to be used for storing backup files.
        """
        return pulumi.get(self, "backup_blob_share")

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> Sequence['outputs.MigrateSqlServerSqlMIDatabaseInputResponse']:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Information for connecting to source
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Information for connecting to target
        """
        return pulumi.get(self, "target_connection_info")

    @property
    @pulumi.getter(name="aadDomainName")
    def aad_domain_name(self) -> Optional[str]:
        """
        Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
        """
        return pulumi.get(self, "aad_domain_name")

    @property
    @pulumi.getter(name="backupFileShare")
    def backup_file_share(self) -> Optional['outputs.FileShareResponse']:
        """
        Backup file share information for all selected databases.
        """
        return pulumi.get(self, "backup_file_share")

    @property
    @pulumi.getter(name="backupMode")
    def backup_mode(self) -> Optional[str]:
        """
        Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
        """
        return pulumi.get(self, "backup_mode")

    @property
    @pulumi.getter(name="selectedAgentJobs")
    def selected_agent_jobs(self) -> Optional[Sequence[str]]:
        """
        Agent Jobs to migrate.
        """
        return pulumi.get(self, "selected_agent_jobs")

    @property
    @pulumi.getter(name="selectedLogins")
    def selected_logins(self) -> Optional[Sequence[str]]:
        """
        Logins to migrate.
        """
        return pulumi.get(self, "selected_logins")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse(dict):
    def __init__(__self__, *,
                 ended_on: str,
                 exceptions_and_warnings: Sequence['outputs.ReportableExceptionResponse'],
                 id: str,
                 is_enabled: bool,
                 message: str,
                 name: str,
                 result_type: str,
                 started_on: str,
                 state: str):
        """
        :param str ended_on: Migration end time
        :param Sequence['ReportableExceptionResponseArgs'] exceptions_and_warnings: Migration errors and warnings per job
        :param str id: Result identifier
        :param bool is_enabled: The state of the original Agent Job.
        :param str message: Migration progress message
        :param str name: Agent Job name.
        :param str result_type: Result type
        :param str started_on: Migration start time
        :param str state: Current state of migration
        """
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "exceptions_and_warnings", exceptions_and_warnings)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "result_type", 'AgentJobLevelOutput')
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="exceptionsAndWarnings")
    def exceptions_and_warnings(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Migration errors and warnings per job
        """
        return pulumi.get(self, "exceptions_and_warnings")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        The state of the original Agent Job.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Migration progress message
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Agent Job name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of migration
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse(dict):
    def __init__(__self__, *,
                 database_name: str,
                 ended_on: str,
                 exceptions_and_warnings: Sequence['outputs.ReportableExceptionResponse'],
                 id: str,
                 message: str,
                 result_type: str,
                 size_mb: float,
                 stage: str,
                 started_on: str,
                 state: str):
        """
        :param str database_name: Name of the database
        :param str ended_on: Migration end time
        :param Sequence['ReportableExceptionResponseArgs'] exceptions_and_warnings: Migration exceptions and warnings
        :param str id: Result identifier
        :param str message: Migration progress message
        :param str result_type: Result type
        :param float size_mb: Size of the database in megabytes
        :param str stage: Current stage of migration
        :param str started_on: Migration start time
        :param str state: Current state of migration
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "exceptions_and_warnings", exceptions_and_warnings)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "result_type", 'DatabaseLevelOutput')
        pulumi.set(__self__, "size_mb", size_mb)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="exceptionsAndWarnings")
    def exceptions_and_warnings(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Migration exceptions and warnings
        """
        return pulumi.get(self, "exceptions_and_warnings")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Migration progress message
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="sizeMB")
    def size_mb(self) -> float:
        """
        Size of the database in megabytes
        """
        return pulumi.get(self, "size_mb")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        Current stage of migration
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of migration
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMITaskOutputErrorResponse(dict):
    def __init__(__self__, *,
                 error: 'outputs.ReportableExceptionResponse',
                 id: str,
                 result_type: str):
        """
        :param 'ReportableExceptionResponseArgs' error: Migration error
        :param str id: Result identifier
        :param str result_type: Result type
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_type", 'ErrorOutput')

    @property
    @pulumi.getter
    def error(self) -> 'outputs.ReportableExceptionResponse':
        """
        Migration error
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMITaskOutputLoginLevelResponse(dict):
    def __init__(__self__, *,
                 ended_on: str,
                 exceptions_and_warnings: Sequence['outputs.ReportableExceptionResponse'],
                 id: str,
                 login_name: str,
                 message: str,
                 result_type: str,
                 stage: str,
                 started_on: str,
                 state: str):
        """
        :param str ended_on: Login migration end time
        :param Sequence['ReportableExceptionResponseArgs'] exceptions_and_warnings: Login migration errors and warnings per login
        :param str id: Result identifier
        :param str login_name: Login name.
        :param str message: Login migration progress message
        :param str result_type: Result type
        :param str stage: Current stage of login
        :param str started_on: Login migration start time
        :param str state: Current state of login
        """
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "exceptions_and_warnings", exceptions_and_warnings)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "login_name", login_name)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "result_type", 'LoginLevelOutput')
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Login migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="exceptionsAndWarnings")
    def exceptions_and_warnings(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Login migration errors and warnings per login
        """
        return pulumi.get(self, "exceptions_and_warnings")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> str:
        """
        Login name.
        """
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Login migration progress message
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        Current stage of login
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Login migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of login
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMITaskOutputMigrationLevelResponse(dict):
    def __init__(__self__, *,
                 agent_jobs: Mapping[str, str],
                 databases: Mapping[str, str],
                 ended_on: str,
                 exceptions_and_warnings: Sequence['outputs.ReportableExceptionResponse'],
                 id: str,
                 logins: Mapping[str, str],
                 message: str,
                 orphaned_users_info: Sequence['outputs.OrphanedUserInfoResponse'],
                 result_type: str,
                 server_role_results: Mapping[str, 'outputs.StartMigrationScenarioServerRoleResultResponse'],
                 source_server_brand_version: str,
                 source_server_version: str,
                 started_on: str,
                 state: str,
                 status: str,
                 target_server_brand_version: str,
                 target_server_version: str):
        """
        :param Mapping[str, str] agent_jobs: Selected agent jobs as a map from name to id
        :param Mapping[str, str] databases: Selected databases as a map from database name to database id
        :param str ended_on: Migration end time
        :param Sequence['ReportableExceptionResponseArgs'] exceptions_and_warnings: Migration exceptions and warnings.
        :param str id: Result identifier
        :param Mapping[str, str] logins: Selected logins as a map from name to id
        :param str message: Migration progress message
        :param Sequence['OrphanedUserInfoResponseArgs'] orphaned_users_info: List of orphaned users.
        :param str result_type: Result type
        :param Mapping[str, 'StartMigrationScenarioServerRoleResultResponseArgs'] server_role_results: Map of server role migration results.
        :param str source_server_brand_version: Source server brand version
        :param str source_server_version: Source server version
        :param str started_on: Migration start time
        :param str state: Current state of migration
        :param str status: Current status of migration
        :param str target_server_brand_version: Target server brand version
        :param str target_server_version: Target server version
        """
        pulumi.set(__self__, "agent_jobs", agent_jobs)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "exceptions_and_warnings", exceptions_and_warnings)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logins", logins)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "orphaned_users_info", orphaned_users_info)
        pulumi.set(__self__, "result_type", 'MigrationLevelOutput')
        pulumi.set(__self__, "server_role_results", server_role_results)
        pulumi.set(__self__, "source_server_brand_version", source_server_brand_version)
        pulumi.set(__self__, "source_server_version", source_server_version)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_server_brand_version", target_server_brand_version)
        pulumi.set(__self__, "target_server_version", target_server_version)

    @property
    @pulumi.getter(name="agentJobs")
    def agent_jobs(self) -> Mapping[str, str]:
        """
        Selected agent jobs as a map from name to id
        """
        return pulumi.get(self, "agent_jobs")

    @property
    @pulumi.getter
    def databases(self) -> Mapping[str, str]:
        """
        Selected databases as a map from database name to database id
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="exceptionsAndWarnings")
    def exceptions_and_warnings(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Migration exceptions and warnings.
        """
        return pulumi.get(self, "exceptions_and_warnings")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logins(self) -> Mapping[str, str]:
        """
        Selected logins as a map from name to id
        """
        return pulumi.get(self, "logins")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Migration progress message
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="orphanedUsersInfo")
    def orphaned_users_info(self) -> Sequence['outputs.OrphanedUserInfoResponse']:
        """
        List of orphaned users.
        """
        return pulumi.get(self, "orphaned_users_info")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="serverRoleResults")
    def server_role_results(self) -> Mapping[str, 'outputs.StartMigrationScenarioServerRoleResultResponse']:
        """
        Map of server role migration results.
        """
        return pulumi.get(self, "server_role_results")

    @property
    @pulumi.getter(name="sourceServerBrandVersion")
    def source_server_brand_version(self) -> str:
        """
        Source server brand version
        """
        return pulumi.get(self, "source_server_brand_version")

    @property
    @pulumi.getter(name="sourceServerVersion")
    def source_server_version(self) -> str:
        """
        Source server version
        """
        return pulumi.get(self, "source_server_version")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of migration
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of migration
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetServerBrandVersion")
    def target_server_brand_version(self) -> str:
        """
        Target server brand version
        """
        return pulumi.get(self, "target_server_brand_version")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Target server version
        """
        return pulumi.get(self, "target_server_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSqlServerSqlMITaskPropertiesResponse(dict):
    """
    Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence[Any],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.MigrateSqlServerSqlMITaskInputResponse'] = None):
        """
        Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence[Union['MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseArgs', 'MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs', 'MigrateSqlServerSqlMITaskOutputErrorResponseArgs', 'MigrateSqlServerSqlMITaskOutputLoginLevelResponseArgs', 'MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs']] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'MigrateSqlServerSqlMITaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'Migrate.SqlServer.AzureSqlDbMI')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence[Any]:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MigrateSqlServerSqlMITaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSsisTaskInputResponse(dict):
    """
    Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
    """
    def __init__(__self__, *,
                 source_connection_info: 'outputs.SqlConnectionInfoResponse',
                 ssis_migration_info: 'outputs.SsisMigrationInfoResponse',
                 target_connection_info: 'outputs.SqlConnectionInfoResponse'):
        """
        Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
        :param 'SqlConnectionInfoResponseArgs' source_connection_info: Information for connecting to source
        :param 'SsisMigrationInfoResponseArgs' ssis_migration_info: SSIS package migration information.
        :param 'SqlConnectionInfoResponseArgs' target_connection_info: Information for connecting to target
        """
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "ssis_migration_info", ssis_migration_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Information for connecting to source
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="ssisMigrationInfo")
    def ssis_migration_info(self) -> 'outputs.SsisMigrationInfoResponse':
        """
        SSIS package migration information.
        """
        return pulumi.get(self, "ssis_migration_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Information for connecting to target
        """
        return pulumi.get(self, "target_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSsisTaskOutputMigrationLevelResponse(dict):
    def __init__(__self__, *,
                 ended_on: str,
                 exceptions_and_warnings: Sequence['outputs.ReportableExceptionResponse'],
                 id: str,
                 message: str,
                 result_type: str,
                 source_server_brand_version: str,
                 source_server_version: str,
                 stage: str,
                 started_on: str,
                 status: str,
                 target_server_brand_version: str,
                 target_server_version: str):
        """
        :param str ended_on: Migration end time
        :param Sequence['ReportableExceptionResponseArgs'] exceptions_and_warnings: Migration exceptions and warnings.
        :param str id: Result identifier
        :param str message: Migration progress message
        :param str result_type: Result type
        :param str source_server_brand_version: Source server brand version
        :param str source_server_version: Source server version
        :param str stage: Stage of SSIS migration.
        :param str started_on: Migration start time
        :param str status: Current status of migration
        :param str target_server_brand_version: Target server brand version
        :param str target_server_version: Target server version
        """
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "exceptions_and_warnings", exceptions_and_warnings)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "result_type", 'MigrationLevelOutput')
        pulumi.set(__self__, "source_server_brand_version", source_server_brand_version)
        pulumi.set(__self__, "source_server_version", source_server_version)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_server_brand_version", target_server_brand_version)
        pulumi.set(__self__, "target_server_version", target_server_version)

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="exceptionsAndWarnings")
    def exceptions_and_warnings(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Migration exceptions and warnings.
        """
        return pulumi.get(self, "exceptions_and_warnings")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Migration progress message
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter(name="sourceServerBrandVersion")
    def source_server_brand_version(self) -> str:
        """
        Source server brand version
        """
        return pulumi.get(self, "source_server_brand_version")

    @property
    @pulumi.getter(name="sourceServerVersion")
    def source_server_version(self) -> str:
        """
        Source server version
        """
        return pulumi.get(self, "source_server_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        Stage of SSIS migration.
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of migration
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetServerBrandVersion")
    def target_server_brand_version(self) -> str:
        """
        Target server brand version
        """
        return pulumi.get(self, "target_server_brand_version")

    @property
    @pulumi.getter(name="targetServerVersion")
    def target_server_version(self) -> str:
        """
        Target server version
        """
        return pulumi.get(self, "target_server_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSsisTaskOutputProjectLevelResponse(dict):
    def __init__(__self__, *,
                 ended_on: str,
                 exceptions_and_warnings: Sequence['outputs.ReportableExceptionResponse'],
                 folder_name: str,
                 id: str,
                 message: str,
                 project_name: str,
                 result_type: str,
                 stage: str,
                 started_on: str,
                 state: str):
        """
        :param str ended_on: Migration end time
        :param Sequence['ReportableExceptionResponseArgs'] exceptions_and_warnings: Migration exceptions and warnings
        :param str folder_name: Name of the folder
        :param str id: Result identifier
        :param str message: Migration progress message
        :param str project_name: Name of the project
        :param str result_type: Result type
        :param str stage: Stage of SSIS migration.
        :param str started_on: Migration start time
        :param str state: Current state of migration
        """
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "exceptions_and_warnings", exceptions_and_warnings)
        pulumi.set(__self__, "folder_name", folder_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "result_type", 'SsisProjectLevelOutput')
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Migration end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter(name="exceptionsAndWarnings")
    def exceptions_and_warnings(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Migration exceptions and warnings
        """
        return pulumi.get(self, "exceptions_and_warnings")

    @property
    @pulumi.getter(name="folderName")
    def folder_name(self) -> str:
        """
        Name of the folder
        """
        return pulumi.get(self, "folder_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Migration progress message
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        Name of the project
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        Result type
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        Stage of SSIS migration.
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Migration start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of migration
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSsisTaskPropertiesResponse(dict):
    """
    Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence[Any],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.MigrateSsisTaskInputResponse'] = None):
        """
        Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence[Union['MigrateSsisTaskOutputMigrationLevelResponseArgs', 'MigrateSsisTaskOutputProjectLevelResponseArgs']] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'MigrateSsisTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'Migrate.Ssis')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence[Any]:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MigrateSsisTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSyncCompleteCommandInputResponse(dict):
    """
    Input for command that completes sync migration for a database.
    """
    def __init__(__self__, *,
                 database_name: str,
                 commit_time_stamp: Optional[str] = None):
        """
        Input for command that completes sync migration for a database.
        :param str database_name: Name of database
        :param str commit_time_stamp: Time stamp to complete
        """
        pulumi.set(__self__, "database_name", database_name)
        if commit_time_stamp is not None:
            pulumi.set(__self__, "commit_time_stamp", commit_time_stamp)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="commitTimeStamp")
    def commit_time_stamp(self) -> Optional[str]:
        """
        Time stamp to complete
        """
        return pulumi.get(self, "commit_time_stamp")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSyncCompleteCommandOutputResponse(dict):
    """
    Output for command that completes sync migration for a database.
    """
    def __init__(__self__, *,
                 errors: Sequence['outputs.ReportableExceptionResponse'],
                 id: str):
        """
        Output for command that completes sync migration for a database.
        :param Sequence['ReportableExceptionResponseArgs'] errors: List of errors that happened during the command execution
        :param str id: Result identifier
        """
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        List of errors that happened during the command execution
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateSyncCompleteCommandPropertiesResponse(dict):
    """
    Properties for the command that completes sync migration for a database.
    """
    def __init__(__self__, *,
                 command_type: str,
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: 'outputs.MigrateSyncCompleteCommandOutputResponse',
                 state: str,
                 input: Optional['outputs.MigrateSyncCompleteCommandInputResponse'] = None):
        """
        Properties for the command that completes sync migration for a database.
        :param str command_type: Command type.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param 'MigrateSyncCompleteCommandOutputResponseArgs' output: Command output. This is ignored if submitted.
        :param str state: The state of the command. This is ignored if submitted.
        :param 'MigrateSyncCompleteCommandInputResponseArgs' input: Command input
        """
        pulumi.set(__self__, "command_type", 'Migrate.Sync.Complete.Database')
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter(name="commandType")
    def command_type(self) -> str:
        """
        Command type.
        """
        return pulumi.get(self, "command_type")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> 'outputs.MigrateSyncCompleteCommandOutputResponse':
        """
        Command output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the command. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MigrateSyncCompleteCommandInputResponse']:
        """
        Command input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrationEligibilityInfoResponse(dict):
    """
    Information about migration eligibility of a server object
    """
    def __init__(__self__, *,
                 is_eligible_for_migration: bool,
                 validation_messages: Sequence[str]):
        """
        Information about migration eligibility of a server object
        :param bool is_eligible_for_migration: Whether object is eligible for migration or not.
        :param Sequence[str] validation_messages: Information about eligibility failure for the server object.
        """
        pulumi.set(__self__, "is_eligible_for_migration", is_eligible_for_migration)
        pulumi.set(__self__, "validation_messages", validation_messages)

    @property
    @pulumi.getter(name="isEligibleForMigration")
    def is_eligible_for_migration(self) -> bool:
        """
        Whether object is eligible for migration or not.
        """
        return pulumi.get(self, "is_eligible_for_migration")

    @property
    @pulumi.getter(name="validationMessages")
    def validation_messages(self) -> Sequence[str]:
        """
        Information about eligibility failure for the server object.
        """
        return pulumi.get(self, "validation_messages")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrationReportResultResponse(dict):
    """
    Migration validation report result, contains the url for downloading the generated report.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 report_url: Optional[str] = None):
        """
        Migration validation report result, contains the url for downloading the generated report.
        :param str id: Migration validation result identifier
        :param str report_url: The url of the report.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if report_url is not None:
            pulumi.set(__self__, "report_url", report_url)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Migration validation result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="reportUrl")
    def report_url(self) -> Optional[str]:
        """
        The url of the report.
        """
        return pulumi.get(self, "report_url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrationValidationDatabaseSummaryResultResponse(dict):
    """
    Migration Validation Database level summary result
    """
    def __init__(__self__, *,
                 ended_on: str,
                 id: str,
                 migration_id: str,
                 source_database_name: str,
                 started_on: str,
                 status: str,
                 target_database_name: str):
        """
        Migration Validation Database level summary result
        :param str ended_on: Validation end time
        :param str id: Result identifier
        :param str migration_id: Migration Identifier
        :param str source_database_name: Name of the source database
        :param str started_on: Validation start time
        :param str status: Current status of validation at the database level
        :param str target_database_name: Name of the target database
        """
        pulumi.set(__self__, "ended_on", ended_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "migration_id", migration_id)
        pulumi.set(__self__, "source_database_name", source_database_name)
        pulumi.set(__self__, "started_on", started_on)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_database_name", target_database_name)

    @property
    @pulumi.getter(name="endedOn")
    def ended_on(self) -> str:
        """
        Validation end time
        """
        return pulumi.get(self, "ended_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="migrationId")
    def migration_id(self) -> str:
        """
        Migration Identifier
        """
        return pulumi.get(self, "migration_id")

    @property
    @pulumi.getter(name="sourceDatabaseName")
    def source_database_name(self) -> str:
        """
        Name of the source database
        """
        return pulumi.get(self, "source_database_name")

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> str:
        """
        Validation start time
        """
        return pulumi.get(self, "started_on")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of validation at the database level
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetDatabaseName")
    def target_database_name(self) -> str:
        """
        Name of the target database
        """
        return pulumi.get(self, "target_database_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrationValidationOptionsResponse(dict):
    """
    Types of validations to run after the migration
    """
    def __init__(__self__, *,
                 enable_data_integrity_validation: Optional[bool] = None,
                 enable_query_analysis_validation: Optional[bool] = None,
                 enable_schema_validation: Optional[bool] = None):
        """
        Types of validations to run after the migration
        :param bool enable_data_integrity_validation: Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
        :param bool enable_query_analysis_validation: Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
        :param bool enable_schema_validation: Allows to compare the schema information between source and target.
        """
        if enable_data_integrity_validation is not None:
            pulumi.set(__self__, "enable_data_integrity_validation", enable_data_integrity_validation)
        if enable_query_analysis_validation is not None:
            pulumi.set(__self__, "enable_query_analysis_validation", enable_query_analysis_validation)
        if enable_schema_validation is not None:
            pulumi.set(__self__, "enable_schema_validation", enable_schema_validation)

    @property
    @pulumi.getter(name="enableDataIntegrityValidation")
    def enable_data_integrity_validation(self) -> Optional[bool]:
        """
        Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
        """
        return pulumi.get(self, "enable_data_integrity_validation")

    @property
    @pulumi.getter(name="enableQueryAnalysisValidation")
    def enable_query_analysis_validation(self) -> Optional[bool]:
        """
        Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
        """
        return pulumi.get(self, "enable_query_analysis_validation")

    @property
    @pulumi.getter(name="enableSchemaValidation")
    def enable_schema_validation(self) -> Optional[bool]:
        """
        Allows to compare the schema information between source and target.
        """
        return pulumi.get(self, "enable_schema_validation")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrationValidationResultResponse(dict):
    """
    Migration Validation Result
    """
    def __init__(__self__, *,
                 id: str,
                 migration_id: str,
                 status: str,
                 summary_results: Optional[Mapping[str, 'outputs.MigrationValidationDatabaseSummaryResultResponse']] = None):
        """
        Migration Validation Result
        :param str id: Migration validation result identifier
        :param str migration_id: Migration Identifier
        :param str status: Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
        :param Mapping[str, 'MigrationValidationDatabaseSummaryResultResponseArgs'] summary_results: Validation summary results for each database
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "migration_id", migration_id)
        pulumi.set(__self__, "status", status)
        if summary_results is not None:
            pulumi.set(__self__, "summary_results", summary_results)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Migration validation result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="migrationId")
    def migration_id(self) -> str:
        """
        Migration Identifier
        """
        return pulumi.get(self, "migration_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="summaryResults")
    def summary_results(self) -> Optional[Mapping[str, 'outputs.MigrationValidationDatabaseSummaryResultResponse']]:
        """
        Validation summary results for each database
        """
        return pulumi.get(self, "summary_results")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbClusterInfoResponse(dict):
    """
    Describes a MongoDB data source
    """
    def __init__(__self__, *,
                 databases: Sequence['outputs.MongoDbDatabaseInfoResponse'],
                 supports_sharding: bool,
                 type: str,
                 version: str):
        """
        Describes a MongoDB data source
        :param Sequence['MongoDbDatabaseInfoResponseArgs'] databases: A list of non-system databases in the cluster
        :param bool supports_sharding: Whether the cluster supports sharded collections
        :param str type: The type of data source
        :param str version: The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer.
        """
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "supports_sharding", supports_sharding)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.MongoDbDatabaseInfoResponse']:
        """
        A list of non-system databases in the cluster
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="supportsSharding")
    def supports_sharding(self) -> bool:
        """
        Whether the cluster supports sharded collections
        """
        return pulumi.get(self, "supports_sharding")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of data source
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer.
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbCollectionInfoResponse(dict):
    """
    Describes a supported collection within a MongoDB database
    """
    def __init__(__self__, *,
                 average_document_size: int,
                 data_size: int,
                 database_name: str,
                 document_count: int,
                 is_capped: bool,
                 is_system_collection: bool,
                 is_view: bool,
                 name: str,
                 qualified_name: str,
                 supports_sharding: bool,
                 shard_key: Optional['outputs.MongoDbShardKeyInfoResponse'] = None,
                 view_of: Optional[str] = None):
        """
        Describes a supported collection within a MongoDB database
        :param int average_document_size: The average document size, or -1 if the average size is unknown
        :param int data_size: The estimated total data size, in bytes, or -1 if the size is unknown.
        :param str database_name: The name of the database containing the collection
        :param int document_count: The estimated total number of documents, or -1 if the document count is unknown
        :param bool is_capped: Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
        :param bool is_system_collection: Whether the collection is system collection
        :param bool is_view: Whether the collection is a view of another collection
        :param str name: The unqualified name of the database or collection
        :param str qualified_name: The qualified name of the database or collection. For a collection, this is the database-qualified name.
        :param bool supports_sharding: Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
        :param 'MongoDbShardKeyInfoResponseArgs' shard_key: The shard key on the collection, or null if the collection is not sharded
        :param str view_of: The name of the collection that this is a view of, if IsView is true
        """
        pulumi.set(__self__, "average_document_size", average_document_size)
        pulumi.set(__self__, "data_size", data_size)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "document_count", document_count)
        pulumi.set(__self__, "is_capped", is_capped)
        pulumi.set(__self__, "is_system_collection", is_system_collection)
        pulumi.set(__self__, "is_view", is_view)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "qualified_name", qualified_name)
        pulumi.set(__self__, "supports_sharding", supports_sharding)
        if shard_key is not None:
            pulumi.set(__self__, "shard_key", shard_key)
        if view_of is not None:
            pulumi.set(__self__, "view_of", view_of)

    @property
    @pulumi.getter(name="averageDocumentSize")
    def average_document_size(self) -> int:
        """
        The average document size, or -1 if the average size is unknown
        """
        return pulumi.get(self, "average_document_size")

    @property
    @pulumi.getter(name="dataSize")
    def data_size(self) -> int:
        """
        The estimated total data size, in bytes, or -1 if the size is unknown.
        """
        return pulumi.get(self, "data_size")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of the database containing the collection
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="documentCount")
    def document_count(self) -> int:
        """
        The estimated total number of documents, or -1 if the document count is unknown
        """
        return pulumi.get(self, "document_count")

    @property
    @pulumi.getter(name="isCapped")
    def is_capped(self) -> bool:
        """
        Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
        """
        return pulumi.get(self, "is_capped")

    @property
    @pulumi.getter(name="isSystemCollection")
    def is_system_collection(self) -> bool:
        """
        Whether the collection is system collection
        """
        return pulumi.get(self, "is_system_collection")

    @property
    @pulumi.getter(name="isView")
    def is_view(self) -> bool:
        """
        Whether the collection is a view of another collection
        """
        return pulumi.get(self, "is_view")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The unqualified name of the database or collection
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qualifiedName")
    def qualified_name(self) -> str:
        """
        The qualified name of the database or collection. For a collection, this is the database-qualified name.
        """
        return pulumi.get(self, "qualified_name")

    @property
    @pulumi.getter(name="supportsSharding")
    def supports_sharding(self) -> bool:
        """
        Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
        """
        return pulumi.get(self, "supports_sharding")

    @property
    @pulumi.getter(name="shardKey")
    def shard_key(self) -> Optional['outputs.MongoDbShardKeyInfoResponse']:
        """
        The shard key on the collection, or null if the collection is not sharded
        """
        return pulumi.get(self, "shard_key")

    @property
    @pulumi.getter(name="viewOf")
    def view_of(self) -> Optional[str]:
        """
        The name of the collection that this is a view of, if IsView is true
        """
        return pulumi.get(self, "view_of")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbCollectionProgressResponse(dict):
    """
    Describes the progress of a collection
    """
    def __init__(__self__, *,
                 bytes_copied: int,
                 documents_copied: int,
                 elapsed_time: str,
                 errors: Mapping[str, 'outputs.MongoDbErrorResponse'],
                 events_pending: int,
                 events_replayed: int,
                 result_type: str,
                 state: str,
                 total_bytes: int,
                 total_documents: int,
                 last_event_time: Optional[str] = None,
                 last_replay_time: Optional[str] = None,
                 name: Optional[str] = None,
                 qualified_name: Optional[str] = None):
        """
        Describes the progress of a collection
        :param int bytes_copied: The number of document bytes copied during the Copying stage
        :param int documents_copied: The number of documents copied during the Copying stage
        :param str elapsed_time: The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
        :param Mapping[str, 'MongoDbErrorResponseArgs'] errors: The errors and warnings that have occurred for the current object. The keys are the error codes.
        :param int events_pending: The number of oplog events awaiting replay
        :param int events_replayed: The number of oplog events replayed so far
        :param str result_type: The type of progress object
        :param int total_bytes: The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
        :param int total_documents: The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
        :param str last_event_time: The timestamp of the last oplog event received, or null if no oplog event has been received yet
        :param str last_replay_time: The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
        :param str name: The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
        :param str qualified_name: The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
        """
        pulumi.set(__self__, "bytes_copied", bytes_copied)
        pulumi.set(__self__, "documents_copied", documents_copied)
        pulumi.set(__self__, "elapsed_time", elapsed_time)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "events_pending", events_pending)
        pulumi.set(__self__, "events_replayed", events_replayed)
        pulumi.set(__self__, "result_type", 'Collection')
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "total_bytes", total_bytes)
        pulumi.set(__self__, "total_documents", total_documents)
        if last_event_time is not None:
            pulumi.set(__self__, "last_event_time", last_event_time)
        if last_replay_time is not None:
            pulumi.set(__self__, "last_replay_time", last_replay_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if qualified_name is not None:
            pulumi.set(__self__, "qualified_name", qualified_name)

    @property
    @pulumi.getter(name="bytesCopied")
    def bytes_copied(self) -> int:
        """
        The number of document bytes copied during the Copying stage
        """
        return pulumi.get(self, "bytes_copied")

    @property
    @pulumi.getter(name="documentsCopied")
    def documents_copied(self) -> int:
        """
        The number of documents copied during the Copying stage
        """
        return pulumi.get(self, "documents_copied")

    @property
    @pulumi.getter(name="elapsedTime")
    def elapsed_time(self) -> str:
        """
        The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
        """
        return pulumi.get(self, "elapsed_time")

    @property
    @pulumi.getter
    def errors(self) -> Mapping[str, 'outputs.MongoDbErrorResponse']:
        """
        The errors and warnings that have occurred for the current object. The keys are the error codes.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="eventsPending")
    def events_pending(self) -> int:
        """
        The number of oplog events awaiting replay
        """
        return pulumi.get(self, "events_pending")

    @property
    @pulumi.getter(name="eventsReplayed")
    def events_replayed(self) -> int:
        """
        The number of oplog events replayed so far
        """
        return pulumi.get(self, "events_replayed")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        The type of progress object
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="totalBytes")
    def total_bytes(self) -> int:
        """
        The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
        """
        return pulumi.get(self, "total_bytes")

    @property
    @pulumi.getter(name="totalDocuments")
    def total_documents(self) -> int:
        """
        The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
        """
        return pulumi.get(self, "total_documents")

    @property
    @pulumi.getter(name="lastEventTime")
    def last_event_time(self) -> Optional[str]:
        """
        The timestamp of the last oplog event received, or null if no oplog event has been received yet
        """
        return pulumi.get(self, "last_event_time")

    @property
    @pulumi.getter(name="lastReplayTime")
    def last_replay_time(self) -> Optional[str]:
        """
        The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
        """
        return pulumi.get(self, "last_replay_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qualifiedName")
    def qualified_name(self) -> Optional[str]:
        """
        The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
        """
        return pulumi.get(self, "qualified_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbCollectionSettingsResponse(dict):
    """
    Describes how an individual MongoDB collection should be migrated
    """
    def __init__(__self__, *,
                 can_delete: Optional[bool] = None,
                 shard_key: Optional['outputs.MongoDbShardKeySettingResponse'] = None,
                 target_rus: Optional[int] = None):
        """
        Describes how an individual MongoDB collection should be migrated
        :param bool can_delete: Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
        :param 'MongoDbShardKeySettingResponseArgs' shard_key: Describes a MongoDB shard key
        :param int target_rus: The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
        """
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if shard_key is not None:
            pulumi.set(__self__, "shard_key", shard_key)
        if target_rus is not None:
            pulumi.set(__self__, "target_rus", target_rus)

    @property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[bool]:
        """
        Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
        """
        return pulumi.get(self, "can_delete")

    @property
    @pulumi.getter(name="shardKey")
    def shard_key(self) -> Optional['outputs.MongoDbShardKeySettingResponse']:
        """
        Describes a MongoDB shard key
        """
        return pulumi.get(self, "shard_key")

    @property
    @pulumi.getter(name="targetRUs")
    def target_rus(self) -> Optional[int]:
        """
        The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
        """
        return pulumi.get(self, "target_rus")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbConnectionInfoResponse(dict):
    """
    Describes a connection to a MongoDB data source
    """
    def __init__(__self__, *,
                 connection_string: str,
                 type: str,
                 password: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        Describes a connection to a MongoDB data source
        :param str connection_string: A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
        :param str type: Type of connection info
        :param str password: Password credential.
        :param str user_name: User name
        """
        pulumi.set(__self__, "connection_string", connection_string)
        pulumi.set(__self__, "type", 'MongoDbConnectionInfo')
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> str:
        """
        A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of connection info
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbDatabaseInfoResponse(dict):
    """
    Describes a database within a MongoDB data source
    """
    def __init__(__self__, *,
                 average_document_size: int,
                 collections: Sequence['outputs.MongoDbCollectionInfoResponse'],
                 data_size: int,
                 document_count: int,
                 name: str,
                 qualified_name: str,
                 supports_sharding: bool):
        """
        Describes a database within a MongoDB data source
        :param int average_document_size: The average document size, or -1 if the average size is unknown
        :param Sequence['MongoDbCollectionInfoResponseArgs'] collections: A list of supported collections in a MongoDB database
        :param int data_size: The estimated total data size, in bytes, or -1 if the size is unknown.
        :param int document_count: The estimated total number of documents, or -1 if the document count is unknown
        :param str name: The unqualified name of the database or collection
        :param str qualified_name: The qualified name of the database or collection. For a collection, this is the database-qualified name.
        :param bool supports_sharding: Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
        """
        pulumi.set(__self__, "average_document_size", average_document_size)
        pulumi.set(__self__, "collections", collections)
        pulumi.set(__self__, "data_size", data_size)
        pulumi.set(__self__, "document_count", document_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "qualified_name", qualified_name)
        pulumi.set(__self__, "supports_sharding", supports_sharding)

    @property
    @pulumi.getter(name="averageDocumentSize")
    def average_document_size(self) -> int:
        """
        The average document size, or -1 if the average size is unknown
        """
        return pulumi.get(self, "average_document_size")

    @property
    @pulumi.getter
    def collections(self) -> Sequence['outputs.MongoDbCollectionInfoResponse']:
        """
        A list of supported collections in a MongoDB database
        """
        return pulumi.get(self, "collections")

    @property
    @pulumi.getter(name="dataSize")
    def data_size(self) -> int:
        """
        The estimated total data size, in bytes, or -1 if the size is unknown.
        """
        return pulumi.get(self, "data_size")

    @property
    @pulumi.getter(name="documentCount")
    def document_count(self) -> int:
        """
        The estimated total number of documents, or -1 if the document count is unknown
        """
        return pulumi.get(self, "document_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The unqualified name of the database or collection
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qualifiedName")
    def qualified_name(self) -> str:
        """
        The qualified name of the database or collection. For a collection, this is the database-qualified name.
        """
        return pulumi.get(self, "qualified_name")

    @property
    @pulumi.getter(name="supportsSharding")
    def supports_sharding(self) -> bool:
        """
        Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
        """
        return pulumi.get(self, "supports_sharding")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbDatabaseProgressResponse(dict):
    """
    Describes the progress of a database
    """
    def __init__(__self__, *,
                 bytes_copied: int,
                 documents_copied: int,
                 elapsed_time: str,
                 errors: Mapping[str, 'outputs.MongoDbErrorResponse'],
                 events_pending: int,
                 events_replayed: int,
                 result_type: str,
                 state: str,
                 total_bytes: int,
                 total_documents: int,
                 collections: Optional[Mapping[str, 'outputs.MongoDbCollectionProgressResponse']] = None,
                 last_event_time: Optional[str] = None,
                 last_replay_time: Optional[str] = None,
                 name: Optional[str] = None,
                 qualified_name: Optional[str] = None):
        """
        Describes the progress of a database
        :param int bytes_copied: The number of document bytes copied during the Copying stage
        :param int documents_copied: The number of documents copied during the Copying stage
        :param str elapsed_time: The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
        :param Mapping[str, 'MongoDbErrorResponseArgs'] errors: The errors and warnings that have occurred for the current object. The keys are the error codes.
        :param int events_pending: The number of oplog events awaiting replay
        :param int events_replayed: The number of oplog events replayed so far
        :param str result_type: The type of progress object
        :param int total_bytes: The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
        :param int total_documents: The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
        :param Mapping[str, 'MongoDbCollectionProgressResponseArgs'] collections: The progress of the collections in the database. The keys are the unqualified names of the collections
        :param str last_event_time: The timestamp of the last oplog event received, or null if no oplog event has been received yet
        :param str last_replay_time: The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
        :param str name: The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
        :param str qualified_name: The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
        """
        pulumi.set(__self__, "bytes_copied", bytes_copied)
        pulumi.set(__self__, "documents_copied", documents_copied)
        pulumi.set(__self__, "elapsed_time", elapsed_time)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "events_pending", events_pending)
        pulumi.set(__self__, "events_replayed", events_replayed)
        pulumi.set(__self__, "result_type", 'Database')
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "total_bytes", total_bytes)
        pulumi.set(__self__, "total_documents", total_documents)
        if collections is not None:
            pulumi.set(__self__, "collections", collections)
        if last_event_time is not None:
            pulumi.set(__self__, "last_event_time", last_event_time)
        if last_replay_time is not None:
            pulumi.set(__self__, "last_replay_time", last_replay_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if qualified_name is not None:
            pulumi.set(__self__, "qualified_name", qualified_name)

    @property
    @pulumi.getter(name="bytesCopied")
    def bytes_copied(self) -> int:
        """
        The number of document bytes copied during the Copying stage
        """
        return pulumi.get(self, "bytes_copied")

    @property
    @pulumi.getter(name="documentsCopied")
    def documents_copied(self) -> int:
        """
        The number of documents copied during the Copying stage
        """
        return pulumi.get(self, "documents_copied")

    @property
    @pulumi.getter(name="elapsedTime")
    def elapsed_time(self) -> str:
        """
        The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
        """
        return pulumi.get(self, "elapsed_time")

    @property
    @pulumi.getter
    def errors(self) -> Mapping[str, 'outputs.MongoDbErrorResponse']:
        """
        The errors and warnings that have occurred for the current object. The keys are the error codes.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="eventsPending")
    def events_pending(self) -> int:
        """
        The number of oplog events awaiting replay
        """
        return pulumi.get(self, "events_pending")

    @property
    @pulumi.getter(name="eventsReplayed")
    def events_replayed(self) -> int:
        """
        The number of oplog events replayed so far
        """
        return pulumi.get(self, "events_replayed")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        The type of progress object
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="totalBytes")
    def total_bytes(self) -> int:
        """
        The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
        """
        return pulumi.get(self, "total_bytes")

    @property
    @pulumi.getter(name="totalDocuments")
    def total_documents(self) -> int:
        """
        The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
        """
        return pulumi.get(self, "total_documents")

    @property
    @pulumi.getter
    def collections(self) -> Optional[Mapping[str, 'outputs.MongoDbCollectionProgressResponse']]:
        """
        The progress of the collections in the database. The keys are the unqualified names of the collections
        """
        return pulumi.get(self, "collections")

    @property
    @pulumi.getter(name="lastEventTime")
    def last_event_time(self) -> Optional[str]:
        """
        The timestamp of the last oplog event received, or null if no oplog event has been received yet
        """
        return pulumi.get(self, "last_event_time")

    @property
    @pulumi.getter(name="lastReplayTime")
    def last_replay_time(self) -> Optional[str]:
        """
        The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
        """
        return pulumi.get(self, "last_replay_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qualifiedName")
    def qualified_name(self) -> Optional[str]:
        """
        The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
        """
        return pulumi.get(self, "qualified_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbDatabaseSettingsResponse(dict):
    """
    Describes how an individual MongoDB database should be migrated
    """
    def __init__(__self__, *,
                 collections: Mapping[str, 'outputs.MongoDbCollectionSettingsResponse'],
                 target_rus: Optional[int] = None):
        """
        Describes how an individual MongoDB database should be migrated
        :param Mapping[str, 'MongoDbCollectionSettingsResponseArgs'] collections: The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
        :param int target_rus: The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
        """
        pulumi.set(__self__, "collections", collections)
        if target_rus is not None:
            pulumi.set(__self__, "target_rus", target_rus)

    @property
    @pulumi.getter
    def collections(self) -> Mapping[str, 'outputs.MongoDbCollectionSettingsResponse']:
        """
        The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
        """
        return pulumi.get(self, "collections")

    @property
    @pulumi.getter(name="targetRUs")
    def target_rus(self) -> Optional[int]:
        """
        The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
        """
        return pulumi.get(self, "target_rus")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbErrorResponse(dict):
    """
    Describes an error or warning that occurred during a MongoDB migration
    """
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 count: Optional[int] = None,
                 message: Optional[str] = None,
                 type: Optional[str] = None):
        """
        Describes an error or warning that occurred during a MongoDB migration
        :param str code: The non-localized, machine-readable code that describes the error or warning
        :param int count: The number of times the error or warning has occurred
        :param str message: The localized, human-readable message that describes the error or warning
        :param str type: The type of error or warning
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        The non-localized, machine-readable code that describes the error or warning
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        The number of times the error or warning has occurred
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        The localized, human-readable message that describes the error or warning
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of error or warning
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbMigrationProgressResponse(dict):
    """
    Describes the progress of the overall migration
    """
    def __init__(__self__, *,
                 bytes_copied: int,
                 documents_copied: int,
                 elapsed_time: str,
                 errors: Mapping[str, 'outputs.MongoDbErrorResponse'],
                 events_pending: int,
                 events_replayed: int,
                 result_type: str,
                 state: str,
                 total_bytes: int,
                 total_documents: int,
                 databases: Optional[Mapping[str, 'outputs.MongoDbDatabaseProgressResponse']] = None,
                 last_event_time: Optional[str] = None,
                 last_replay_time: Optional[str] = None,
                 name: Optional[str] = None,
                 qualified_name: Optional[str] = None):
        """
        Describes the progress of the overall migration
        :param int bytes_copied: The number of document bytes copied during the Copying stage
        :param int documents_copied: The number of documents copied during the Copying stage
        :param str elapsed_time: The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
        :param Mapping[str, 'MongoDbErrorResponseArgs'] errors: The errors and warnings that have occurred for the current object. The keys are the error codes.
        :param int events_pending: The number of oplog events awaiting replay
        :param int events_replayed: The number of oplog events replayed so far
        :param str result_type: The type of progress object
        :param int total_bytes: The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
        :param int total_documents: The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
        :param Mapping[str, 'MongoDbDatabaseProgressResponseArgs'] databases: The progress of the databases in the migration. The keys are the names of the databases
        :param str last_event_time: The timestamp of the last oplog event received, or null if no oplog event has been received yet
        :param str last_replay_time: The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
        :param str name: The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
        :param str qualified_name: The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
        """
        pulumi.set(__self__, "bytes_copied", bytes_copied)
        pulumi.set(__self__, "documents_copied", documents_copied)
        pulumi.set(__self__, "elapsed_time", elapsed_time)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "events_pending", events_pending)
        pulumi.set(__self__, "events_replayed", events_replayed)
        pulumi.set(__self__, "result_type", 'Migration')
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "total_bytes", total_bytes)
        pulumi.set(__self__, "total_documents", total_documents)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if last_event_time is not None:
            pulumi.set(__self__, "last_event_time", last_event_time)
        if last_replay_time is not None:
            pulumi.set(__self__, "last_replay_time", last_replay_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if qualified_name is not None:
            pulumi.set(__self__, "qualified_name", qualified_name)

    @property
    @pulumi.getter(name="bytesCopied")
    def bytes_copied(self) -> int:
        """
        The number of document bytes copied during the Copying stage
        """
        return pulumi.get(self, "bytes_copied")

    @property
    @pulumi.getter(name="documentsCopied")
    def documents_copied(self) -> int:
        """
        The number of documents copied during the Copying stage
        """
        return pulumi.get(self, "documents_copied")

    @property
    @pulumi.getter(name="elapsedTime")
    def elapsed_time(self) -> str:
        """
        The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
        """
        return pulumi.get(self, "elapsed_time")

    @property
    @pulumi.getter
    def errors(self) -> Mapping[str, 'outputs.MongoDbErrorResponse']:
        """
        The errors and warnings that have occurred for the current object. The keys are the error codes.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="eventsPending")
    def events_pending(self) -> int:
        """
        The number of oplog events awaiting replay
        """
        return pulumi.get(self, "events_pending")

    @property
    @pulumi.getter(name="eventsReplayed")
    def events_replayed(self) -> int:
        """
        The number of oplog events replayed so far
        """
        return pulumi.get(self, "events_replayed")

    @property
    @pulumi.getter(name="resultType")
    def result_type(self) -> str:
        """
        The type of progress object
        """
        return pulumi.get(self, "result_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="totalBytes")
    def total_bytes(self) -> int:
        """
        The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
        """
        return pulumi.get(self, "total_bytes")

    @property
    @pulumi.getter(name="totalDocuments")
    def total_documents(self) -> int:
        """
        The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
        """
        return pulumi.get(self, "total_documents")

    @property
    @pulumi.getter
    def databases(self) -> Optional[Mapping[str, 'outputs.MongoDbDatabaseProgressResponse']]:
        """
        The progress of the databases in the migration. The keys are the names of the databases
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="lastEventTime")
    def last_event_time(self) -> Optional[str]:
        """
        The timestamp of the last oplog event received, or null if no oplog event has been received yet
        """
        return pulumi.get(self, "last_event_time")

    @property
    @pulumi.getter(name="lastReplayTime")
    def last_replay_time(self) -> Optional[str]:
        """
        The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
        """
        return pulumi.get(self, "last_replay_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qualifiedName")
    def qualified_name(self) -> Optional[str]:
        """
        The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
        """
        return pulumi.get(self, "qualified_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbMigrationSettingsResponse(dict):
    """
    Describes how a MongoDB data migration should be performed
    """
    def __init__(__self__, *,
                 databases: Mapping[str, 'outputs.MongoDbDatabaseSettingsResponse'],
                 source: 'outputs.MongoDbConnectionInfoResponse',
                 target: 'outputs.MongoDbConnectionInfoResponse',
                 boost_rus: Optional[int] = None,
                 replication: Optional[str] = None,
                 throttling: Optional['outputs.MongoDbThrottlingSettingsResponse'] = None):
        """
        Describes how a MongoDB data migration should be performed
        :param Mapping[str, 'MongoDbDatabaseSettingsResponseArgs'] databases: The databases on the source cluster to migrate to the target. The keys are the names of the databases.
        :param 'MongoDbConnectionInfoResponseArgs' source: Settings used to connect to the source cluster
        :param 'MongoDbConnectionInfoResponseArgs' target: Settings used to connect to the target cluster
        :param int boost_rus: The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
        :param str replication: Describes how changes will be replicated from the source to the target. The default is OneTime.
        :param 'MongoDbThrottlingSettingsResponseArgs' throttling: Settings used to limit the resource usage of the migration
        """
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if boost_rus is not None:
            pulumi.set(__self__, "boost_rus", boost_rus)
        if replication is not None:
            pulumi.set(__self__, "replication", replication)
        if throttling is not None:
            pulumi.set(__self__, "throttling", throttling)

    @property
    @pulumi.getter
    def databases(self) -> Mapping[str, 'outputs.MongoDbDatabaseSettingsResponse']:
        """
        The databases on the source cluster to migrate to the target. The keys are the names of the databases.
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.MongoDbConnectionInfoResponse':
        """
        Settings used to connect to the source cluster
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> 'outputs.MongoDbConnectionInfoResponse':
        """
        Settings used to connect to the target cluster
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="boostRUs")
    def boost_rus(self) -> Optional[int]:
        """
        The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
        """
        return pulumi.get(self, "boost_rus")

    @property
    @pulumi.getter
    def replication(self) -> Optional[str]:
        """
        Describes how changes will be replicated from the source to the target. The default is OneTime.
        """
        return pulumi.get(self, "replication")

    @property
    @pulumi.getter
    def throttling(self) -> Optional['outputs.MongoDbThrottlingSettingsResponse']:
        """
        Settings used to limit the resource usage of the migration
        """
        return pulumi.get(self, "throttling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbShardKeyFieldResponse(dict):
    """
    Describes a field reference within a MongoDB shard key
    """
    def __init__(__self__, *,
                 name: str,
                 order: str):
        """
        Describes a field reference within a MongoDB shard key
        :param str name: The name of the field
        :param str order: The field ordering
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> str:
        """
        The field ordering
        """
        return pulumi.get(self, "order")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbShardKeyInfoResponse(dict):
    """
    Describes a MongoDB shard key
    """
    def __init__(__self__, *,
                 fields: Sequence['outputs.MongoDbShardKeyFieldResponse'],
                 is_unique: bool):
        """
        Describes a MongoDB shard key
        :param Sequence['MongoDbShardKeyFieldResponseArgs'] fields: The fields within the shard key
        :param bool is_unique: Whether the shard key is unique
        """
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "is_unique", is_unique)

    @property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.MongoDbShardKeyFieldResponse']:
        """
        The fields within the shard key
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="isUnique")
    def is_unique(self) -> bool:
        """
        Whether the shard key is unique
        """
        return pulumi.get(self, "is_unique")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbShardKeySettingResponse(dict):
    """
    Describes a MongoDB shard key
    """
    def __init__(__self__, *,
                 fields: Sequence['outputs.MongoDbShardKeyFieldResponse'],
                 is_unique: bool):
        """
        Describes a MongoDB shard key
        :param Sequence['MongoDbShardKeyFieldResponseArgs'] fields: The fields within the shard key
        :param bool is_unique: Whether the shard key is unique
        """
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "is_unique", is_unique)

    @property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.MongoDbShardKeyFieldResponse']:
        """
        The fields within the shard key
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="isUnique")
    def is_unique(self) -> bool:
        """
        Whether the shard key is unique
        """
        return pulumi.get(self, "is_unique")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoDbThrottlingSettingsResponse(dict):
    """
    Specifies resource limits for the migration
    """
    def __init__(__self__, *,
                 max_parallelism: Optional[int] = None,
                 min_free_cpu: Optional[int] = None,
                 min_free_memory_mb: Optional[int] = None):
        """
        Specifies resource limits for the migration
        :param int max_parallelism: The maximum number of work items (e.g. collection copies) that will be processed in parallel
        :param int min_free_cpu: The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
        :param int min_free_memory_mb: The number of megabytes of RAM that the migrator will try to avoid using
        """
        if max_parallelism is not None:
            pulumi.set(__self__, "max_parallelism", max_parallelism)
        if min_free_cpu is not None:
            pulumi.set(__self__, "min_free_cpu", min_free_cpu)
        if min_free_memory_mb is not None:
            pulumi.set(__self__, "min_free_memory_mb", min_free_memory_mb)

    @property
    @pulumi.getter(name="maxParallelism")
    def max_parallelism(self) -> Optional[int]:
        """
        The maximum number of work items (e.g. collection copies) that will be processed in parallel
        """
        return pulumi.get(self, "max_parallelism")

    @property
    @pulumi.getter(name="minFreeCpu")
    def min_free_cpu(self) -> Optional[int]:
        """
        The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
        """
        return pulumi.get(self, "min_free_cpu")

    @property
    @pulumi.getter(name="minFreeMemoryMb")
    def min_free_memory_mb(self) -> Optional[int]:
        """
        The number of megabytes of RAM that the migrator will try to avoid using
        """
        return pulumi.get(self, "min_free_memory_mb")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySqlConnectionInfoResponse(dict):
    """
    Information for connecting to MySQL server
    """
    def __init__(__self__, *,
                 port: int,
                 server_name: str,
                 type: str,
                 password: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        Information for connecting to MySQL server
        :param int port: Port for Server
        :param str server_name: Name of the server
        :param str type: Type of connection info
        :param str password: Password credential.
        :param str user_name: User name
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "type", 'MySqlConnectionInfo')
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port for Server
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        """
        Name of the server
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of connection info
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ODataErrorResponse(dict):
    """
    Error information in OData format.
    """
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 details: Optional[Sequence['outputs.ODataErrorResponse']] = None,
                 message: Optional[str] = None):
        """
        Error information in OData format.
        :param str code: The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
        :param Sequence['ODataErrorResponseArgs'] details: Inner errors that caused this error
        :param str message: The human-readable description of the error
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.ODataErrorResponse']]:
        """
        Inner errors that caused this error
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        The human-readable description of the error
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OracleConnectionInfoResponse(dict):
    """
    Information for connecting to Oracle server
    """
    def __init__(__self__, *,
                 data_source: str,
                 type: str,
                 password: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        Information for connecting to Oracle server
        :param str data_source: EZConnect or TNSName connection string.
        :param str type: Type of connection info
        :param str password: Password credential.
        :param str user_name: User name
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "type", 'OracleConnectionInfo')
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        """
        EZConnect or TNSName connection string.
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of connection info
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OrphanedUserInfoResponse(dict):
    """
    Information of orphaned users on the SQL server database.
    """
    def __init__(__self__, *,
                 database_name: Optional[str] = None,
                 name: Optional[str] = None):
        """
        Information of orphaned users on the SQL server database.
        :param str database_name: Parent database of the user
        :param str name: Name of the orphaned user
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        Parent database of the user
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the orphaned user
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSqlConnectionInfoResponse(dict):
    """
    Information for connecting to PostgreSQL server
    """
    def __init__(__self__, *,
                 port: int,
                 server_name: str,
                 type: str,
                 database_name: Optional[str] = None,
                 encrypt_connection: Optional[bool] = None,
                 password: Optional[str] = None,
                 trust_server_certificate: Optional[bool] = None,
                 user_name: Optional[str] = None):
        """
        Information for connecting to PostgreSQL server
        :param int port: Port for Server
        :param str server_name: Name of the server
        :param str type: Type of connection info
        :param str database_name: Name of the database
        :param bool encrypt_connection: Whether to encrypt the connection
        :param str password: Password credential.
        :param bool trust_server_certificate: Whether to trust the server certificate
        :param str user_name: User name
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "type", 'PostgreSqlConnectionInfo')
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if encrypt_connection is not None:
            pulumi.set(__self__, "encrypt_connection", encrypt_connection)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if trust_server_certificate is not None:
            pulumi.set(__self__, "trust_server_certificate", trust_server_certificate)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port for Server
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        """
        Name of the server
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of connection info
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        Name of the database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="encryptConnection")
    def encrypt_connection(self) -> Optional[bool]:
        """
        Whether to encrypt the connection
        """
        return pulumi.get(self, "encrypt_connection")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="trustServerCertificate")
    def trust_server_certificate(self) -> Optional[bool]:
        """
        Whether to trust the server certificate
        """
        return pulumi.get(self, "trust_server_certificate")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProjectFilePropertiesResponse(dict):
    """
    Base class for file properties.
    """
    def __init__(__self__, *,
                 last_modified: str,
                 size: int,
                 extension: Optional[str] = None,
                 file_path: Optional[str] = None,
                 media_type: Optional[str] = None):
        """
        Base class for file properties.
        :param str last_modified: Modification DateTime.
        :param int size: File size.
        :param str extension: Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
        :param str file_path: Relative path of this file resource. This property can be set when creating or updating the file resource.
        :param str media_type: File content type. This property can be modified to reflect the file content type.
        """
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "size", size)
        if extension is not None:
            pulumi.set(__self__, "extension", extension)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        Modification DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def extension(self) -> Optional[str]:
        """
        Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
        """
        return pulumi.get(self, "extension")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[str]:
        """
        Relative path of this file resource. This property can be set when creating or updating the file resource.
        """
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[str]:
        """
        File content type. This property can be modified to reflect the file content type.
        """
        return pulumi.get(self, "media_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ReportableExceptionResponse(dict):
    """
    Exception object for all custom exceptions
    """
    def __init__(__self__, *,
                 actionable_message: Optional[str] = None,
                 file_path: Optional[str] = None,
                 h_result: Optional[int] = None,
                 line_number: Optional[str] = None,
                 message: Optional[str] = None,
                 stack_trace: Optional[str] = None):
        """
        Exception object for all custom exceptions
        :param str actionable_message: Actionable steps for this exception
        :param str file_path: The path to the file where exception occurred
        :param int h_result: Coded numerical value that is assigned to a specific exception
        :param str line_number: The line number where exception occurred
        :param str message: Error message
        :param str stack_trace: Stack trace
        """
        if actionable_message is not None:
            pulumi.set(__self__, "actionable_message", actionable_message)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if h_result is not None:
            pulumi.set(__self__, "h_result", h_result)
        if line_number is not None:
            pulumi.set(__self__, "line_number", line_number)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if stack_trace is not None:
            pulumi.set(__self__, "stack_trace", stack_trace)

    @property
    @pulumi.getter(name="actionableMessage")
    def actionable_message(self) -> Optional[str]:
        """
        Actionable steps for this exception
        """
        return pulumi.get(self, "actionable_message")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[str]:
        """
        The path to the file where exception occurred
        """
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter(name="hResult")
    def h_result(self) -> Optional[int]:
        """
        Coded numerical value that is assigned to a specific exception
        """
        return pulumi.get(self, "h_result")

    @property
    @pulumi.getter(name="lineNumber")
    def line_number(self) -> Optional[str]:
        """
        The line number where exception occurred
        """
        return pulumi.get(self, "line_number")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Error message
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="stackTrace")
    def stack_trace(self) -> Optional[str]:
        """
        Stack trace
        """
        return pulumi.get(self, "stack_trace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectedCertificateInputResponse(dict):
    """
    Info for certificate to be exported for TDE enabled databases.
    """
    def __init__(__self__, *,
                 certificate_name: str,
                 password: str):
        """
        Info for certificate to be exported for TDE enabled databases.
        :param str certificate_name: Name of certificate to be exported.
        :param str password: Password to use for encrypting the exported certificate.
        """
        pulumi.set(__self__, "certificate_name", certificate_name)
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> str:
        """
        Name of certificate to be exported.
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password to use for encrypting the exported certificate.
        """
        return pulumi.get(self, "password")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceSkuResponse(dict):
    """
    An Azure SKU instance
    """
    def __init__(__self__, *,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        An Azure SKU instance
        :param int capacity: The capacity of the SKU, if it supports scaling
        :param str family: The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
        :param str name: The unique name of the SKU, such as 'P3'
        :param str size: The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
        :param str tier: The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        The capacity of the SKU, if it supports scaling
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The unique name of the SKU, such as 'P3'
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
        """
        return pulumi.get(self, "tier")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SqlConnectionInfoResponse(dict):
    """
    Information for connecting to SQL database server
    """
    def __init__(__self__, *,
                 data_source: str,
                 type: str,
                 additional_settings: Optional[str] = None,
                 authentication: Optional[str] = None,
                 encrypt_connection: Optional[bool] = None,
                 password: Optional[str] = None,
                 platform: Optional[str] = None,
                 trust_server_certificate: Optional[bool] = None,
                 user_name: Optional[str] = None):
        """
        Information for connecting to SQL database server
        :param str data_source: Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
        :param str type: Type of connection info
        :param str additional_settings: Additional connection settings
        :param str authentication: Authentication type to use for connection
        :param bool encrypt_connection: Whether to encrypt the connection
        :param str password: Password credential.
        :param str platform: Server platform type for connection
        :param bool trust_server_certificate: Whether to trust the server certificate
        :param str user_name: User name
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "type", 'SqlConnectionInfo')
        if additional_settings is not None:
            pulumi.set(__self__, "additional_settings", additional_settings)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if encrypt_connection is not None:
            pulumi.set(__self__, "encrypt_connection", encrypt_connection)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if trust_server_certificate is not None:
            pulumi.set(__self__, "trust_server_certificate", trust_server_certificate)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        """
        Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of connection info
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="additionalSettings")
    def additional_settings(self) -> Optional[str]:
        """
        Additional connection settings
        """
        return pulumi.get(self, "additional_settings")

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        """
        Authentication type to use for connection
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="encryptConnection")
    def encrypt_connection(self) -> Optional[bool]:
        """
        Whether to encrypt the connection
        """
        return pulumi.get(self, "encrypt_connection")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def platform(self) -> Optional[str]:
        """
        Server platform type for connection
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="trustServerCertificate")
    def trust_server_certificate(self) -> Optional[bool]:
        """
        Whether to trust the server certificate
        """
        return pulumi.get(self, "trust_server_certificate")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SsisMigrationInfoResponse(dict):
    """
    SSIS migration info with SSIS store type, overwrite policy.
    """
    def __init__(__self__, *,
                 environment_overwrite_option: Optional[str] = None,
                 project_overwrite_option: Optional[str] = None,
                 ssis_store_type: Optional[str] = None):
        """
        SSIS migration info with SSIS store type, overwrite policy.
        :param str environment_overwrite_option: The overwrite option for the SSIS environment migration
        :param str project_overwrite_option: The overwrite option for the SSIS project migration
        :param str ssis_store_type: The SSIS store type of source, only SSIS catalog is supported now in DMS
        """
        if environment_overwrite_option is not None:
            pulumi.set(__self__, "environment_overwrite_option", environment_overwrite_option)
        if project_overwrite_option is not None:
            pulumi.set(__self__, "project_overwrite_option", project_overwrite_option)
        if ssis_store_type is not None:
            pulumi.set(__self__, "ssis_store_type", ssis_store_type)

    @property
    @pulumi.getter(name="environmentOverwriteOption")
    def environment_overwrite_option(self) -> Optional[str]:
        """
        The overwrite option for the SSIS environment migration
        """
        return pulumi.get(self, "environment_overwrite_option")

    @property
    @pulumi.getter(name="projectOverwriteOption")
    def project_overwrite_option(self) -> Optional[str]:
        """
        The overwrite option for the SSIS project migration
        """
        return pulumi.get(self, "project_overwrite_option")

    @property
    @pulumi.getter(name="ssisStoreType")
    def ssis_store_type(self) -> Optional[str]:
        """
        The SSIS store type of source, only SSIS catalog is supported now in DMS
        """
        return pulumi.get(self, "ssis_store_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StartMigrationScenarioServerRoleResultResponse(dict):
    """
    Server role migration result
    """
    def __init__(__self__, *,
                 exceptions_and_warnings: Sequence['outputs.ReportableExceptionResponse'],
                 name: str,
                 state: str):
        """
        Server role migration result
        :param Sequence['ReportableExceptionResponseArgs'] exceptions_and_warnings: Migration exceptions and warnings.
        :param str name: Name of server role.
        :param str state: Current state of migration
        """
        pulumi.set(__self__, "exceptions_and_warnings", exceptions_and_warnings)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="exceptionsAndWarnings")
    def exceptions_and_warnings(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Migration exceptions and warnings.
        """
        return pulumi.get(self, "exceptions_and_warnings")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of server role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of migration
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncMigrationDatabaseErrorEventResponse(dict):
    """
    Database migration errors for online migration
    """
    def __init__(__self__, *,
                 event_text: str,
                 event_type_string: str,
                 timestamp_string: str):
        """
        Database migration errors for online migration
        :param str event_text: Event text.
        :param str event_type_string: Event type.
        :param str timestamp_string: String value of timestamp.
        """
        pulumi.set(__self__, "event_text", event_text)
        pulumi.set(__self__, "event_type_string", event_type_string)
        pulumi.set(__self__, "timestamp_string", timestamp_string)

    @property
    @pulumi.getter(name="eventText")
    def event_text(self) -> str:
        """
        Event text.
        """
        return pulumi.get(self, "event_text")

    @property
    @pulumi.getter(name="eventTypeString")
    def event_type_string(self) -> str:
        """
        Event type.
        """
        return pulumi.get(self, "event_type_string")

    @property
    @pulumi.getter(name="timestampString")
    def timestamp_string(self) -> str:
        """
        String value of timestamp.
        """
        return pulumi.get(self, "timestamp_string")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse(dict):
    """
    Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ValidateSyncMigrationInputSqlServerTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ValidateSyncMigrationInputSqlServerTaskInputResponse'] = None):
        """
        Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ValidateSyncMigrationInputSqlServerTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ValidateSyncMigrationInputSqlServerTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ValidateMigrationInput.SqlServer.SqlDb.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ValidateSyncMigrationInputSqlServerTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ValidateSyncMigrationInputSqlServerTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse(dict):
    """
    Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
    """
    def __init__(__self__, *,
                 azure_app: 'outputs.AzureActiveDirectoryAppResponse',
                 selected_databases: Sequence['outputs.MigrateSqlServerSqlMIDatabaseInputResponse'],
                 source_connection_info: 'outputs.SqlConnectionInfoResponse',
                 storage_resource_id: str,
                 target_connection_info: 'outputs.MiSqlConnectionInfoResponse',
                 backup_file_share: Optional['outputs.FileShareResponse'] = None):
        """
        Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
        :param 'AzureActiveDirectoryAppResponseArgs' azure_app: Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        :param Sequence['MigrateSqlServerSqlMIDatabaseInputResponseArgs'] selected_databases: Databases to migrate
        :param 'SqlConnectionInfoResponseArgs' source_connection_info: Connection information for source SQL Server
        :param str storage_resource_id: Fully qualified resourceId of storage
        :param 'MiSqlConnectionInfoResponseArgs' target_connection_info: Connection information for Azure SQL Database Managed Instance
        :param 'FileShareResponseArgs' backup_file_share: Backup file share information for all selected databases.
        """
        pulumi.set(__self__, "azure_app", azure_app)
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "storage_resource_id", storage_resource_id)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if backup_file_share is not None:
            pulumi.set(__self__, "backup_file_share", backup_file_share)

    @property
    @pulumi.getter(name="azureApp")
    def azure_app(self) -> 'outputs.AzureActiveDirectoryAppResponse':
        """
        Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
        """
        return pulumi.get(self, "azure_app")

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> Sequence['outputs.MigrateSqlServerSqlMIDatabaseInputResponse']:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Connection information for source SQL Server
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="storageResourceId")
    def storage_resource_id(self) -> str:
        """
        Fully qualified resourceId of storage
        """
        return pulumi.get(self, "storage_resource_id")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.MiSqlConnectionInfoResponse':
        """
        Connection information for Azure SQL Database Managed Instance
        """
        return pulumi.get(self, "target_connection_info")

    @property
    @pulumi.getter(name="backupFileShare")
    def backup_file_share(self) -> Optional['outputs.FileShareResponse']:
        """
        Backup file share information for all selected databases.
        """
        return pulumi.get(self, "backup_file_share")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse(dict):
    """
    Output for task that validates migration input for Azure SQL Database Managed Instance online migration
    """
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output for task that validates migration input for Azure SQL Database Managed Instance online migration
        :param str id: Database identifier
        :param str name: Name of database
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Errors associated with a selected database object
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Database identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Errors associated with a selected database object
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse(dict):
    """
    Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse'] = None):
        """
        Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ValidateMigrationInputSqlServerSqlMITaskInputResponse(dict):
    """
    Input for task that validates migration input for SQL to Azure SQL Managed Instance
    """
    def __init__(__self__, *,
                 backup_blob_share: 'outputs.BlobShareResponse',
                 selected_databases: Sequence['outputs.MigrateSqlServerSqlMIDatabaseInputResponse'],
                 source_connection_info: 'outputs.SqlConnectionInfoResponse',
                 target_connection_info: 'outputs.SqlConnectionInfoResponse',
                 backup_file_share: Optional['outputs.FileShareResponse'] = None,
                 backup_mode: Optional[str] = None,
                 selected_logins: Optional[Sequence[str]] = None):
        """
        Input for task that validates migration input for SQL to Azure SQL Managed Instance
        :param 'BlobShareResponseArgs' backup_blob_share: SAS URI of Azure Storage Account Container to be used for storing backup files.
        :param Sequence['MigrateSqlServerSqlMIDatabaseInputResponseArgs'] selected_databases: Databases to migrate
        :param 'SqlConnectionInfoResponseArgs' source_connection_info: Information for connecting to source
        :param 'SqlConnectionInfoResponseArgs' target_connection_info: Information for connecting to target
        :param 'FileShareResponseArgs' backup_file_share: Backup file share information for all selected databases.
        :param str backup_mode: Backup Mode to specify whether to use existing backup or create new backup.
        :param Sequence[str] selected_logins: Logins to migrate
        """
        pulumi.set(__self__, "backup_blob_share", backup_blob_share)
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)
        if backup_file_share is not None:
            pulumi.set(__self__, "backup_file_share", backup_file_share)
        if backup_mode is not None:
            pulumi.set(__self__, "backup_mode", backup_mode)
        if selected_logins is not None:
            pulumi.set(__self__, "selected_logins", selected_logins)

    @property
    @pulumi.getter(name="backupBlobShare")
    def backup_blob_share(self) -> 'outputs.BlobShareResponse':
        """
        SAS URI of Azure Storage Account Container to be used for storing backup files.
        """
        return pulumi.get(self, "backup_blob_share")

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> Sequence['outputs.MigrateSqlServerSqlMIDatabaseInputResponse']:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Information for connecting to source
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Information for connecting to target
        """
        return pulumi.get(self, "target_connection_info")

    @property
    @pulumi.getter(name="backupFileShare")
    def backup_file_share(self) -> Optional['outputs.FileShareResponse']:
        """
        Backup file share information for all selected databases.
        """
        return pulumi.get(self, "backup_file_share")

    @property
    @pulumi.getter(name="backupMode")
    def backup_mode(self) -> Optional[str]:
        """
        Backup Mode to specify whether to use existing backup or create new backup.
        """
        return pulumi.get(self, "backup_mode")

    @property
    @pulumi.getter(name="selectedLogins")
    def selected_logins(self) -> Optional[Sequence[str]]:
        """
        Logins to migrate
        """
        return pulumi.get(self, "selected_logins")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ValidateMigrationInputSqlServerSqlMITaskOutputResponse(dict):
    """
    Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
    """
    def __init__(__self__, *,
                 backup_folder_errors: Sequence['outputs.ReportableExceptionResponse'],
                 backup_share_credentials_errors: Sequence['outputs.ReportableExceptionResponse'],
                 backup_storage_account_errors: Sequence['outputs.ReportableExceptionResponse'],
                 existing_backup_errors: Sequence['outputs.ReportableExceptionResponse'],
                 id: str,
                 name: str,
                 restore_database_name_errors: Sequence['outputs.ReportableExceptionResponse'],
                 database_backup_info: Optional['outputs.DatabaseBackupInfoResponse'] = None):
        """
        Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
        :param Sequence['ReportableExceptionResponseArgs'] backup_folder_errors: Errors associated with the BackupFolder path
        :param Sequence['ReportableExceptionResponseArgs'] backup_share_credentials_errors: Errors associated with backup share user name and password credentials
        :param Sequence['ReportableExceptionResponseArgs'] backup_storage_account_errors: Errors associated with the storage account provided.
        :param Sequence['ReportableExceptionResponseArgs'] existing_backup_errors: Errors associated with existing backup files.
        :param str id: Result identifier
        :param str name: Name of database
        :param Sequence['ReportableExceptionResponseArgs'] restore_database_name_errors: Errors associated with the RestoreDatabaseName
        :param 'DatabaseBackupInfoResponseArgs' database_backup_info: Information about backup files when existing backup mode is used.
        """
        pulumi.set(__self__, "backup_folder_errors", backup_folder_errors)
        pulumi.set(__self__, "backup_share_credentials_errors", backup_share_credentials_errors)
        pulumi.set(__self__, "backup_storage_account_errors", backup_storage_account_errors)
        pulumi.set(__self__, "existing_backup_errors", existing_backup_errors)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "restore_database_name_errors", restore_database_name_errors)
        if database_backup_info is not None:
            pulumi.set(__self__, "database_backup_info", database_backup_info)

    @property
    @pulumi.getter(name="backupFolderErrors")
    def backup_folder_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Errors associated with the BackupFolder path
        """
        return pulumi.get(self, "backup_folder_errors")

    @property
    @pulumi.getter(name="backupShareCredentialsErrors")
    def backup_share_credentials_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Errors associated with backup share user name and password credentials
        """
        return pulumi.get(self, "backup_share_credentials_errors")

    @property
    @pulumi.getter(name="backupStorageAccountErrors")
    def backup_storage_account_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Errors associated with the storage account provided.
        """
        return pulumi.get(self, "backup_storage_account_errors")

    @property
    @pulumi.getter(name="existingBackupErrors")
    def existing_backup_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Errors associated with existing backup files.
        """
        return pulumi.get(self, "existing_backup_errors")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Result identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="restoreDatabaseNameErrors")
    def restore_database_name_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Errors associated with the RestoreDatabaseName
        """
        return pulumi.get(self, "restore_database_name_errors")

    @property
    @pulumi.getter(name="databaseBackupInfo")
    def database_backup_info(self) -> Optional['outputs.DatabaseBackupInfoResponse']:
        """
        Information about backup files when existing backup mode is used.
        """
        return pulumi.get(self, "database_backup_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse(dict):
    """
    Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ValidateMigrationInputSqlServerSqlMITaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.ValidateMigrationInputSqlServerSqlMITaskInputResponse'] = None):
        """
        Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs'] output: Task output. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs' input: Task input
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'ValidateMigrationInput.SqlServer.AzureSqlDbMI')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ValidateMigrationInputSqlServerSqlMITaskOutputResponse']:
        """
        Task output. This is ignored if submitted.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.ValidateMigrationInputSqlServerSqlMITaskInputResponse']:
        """
        Task input
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ValidateMongoDbTaskPropertiesResponse(dict):
    """
    Properties for the task that validates a migration between MongoDB data sources
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.MongoDbMigrationProgressResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.MongoDbMigrationSettingsResponse'] = None):
        """
        Properties for the task that validates a migration between MongoDB data sources
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['MongoDbMigrationProgressResponseArgs'] output: An array containing a single MongoDbMigrationProgress object
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'MongoDbMigrationSettingsResponseArgs' input: Describes how a MongoDB data migration should be performed
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'Validate.MongoDb')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.MongoDbMigrationProgressResponse']:
        """
        An array containing a single MongoDbMigrationProgress object
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MongoDbMigrationSettingsResponse']:
        """
        Describes how a MongoDB data migration should be performed
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse(dict):
    """
    Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
    """
    def __init__(__self__, *,
                 commands: Sequence[Any],
                 errors: Sequence['outputs.ODataErrorResponse'],
                 output: Sequence['outputs.ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse'],
                 state: str,
                 task_type: str,
                 client_data: Optional[Mapping[str, str]] = None,
                 input: Optional['outputs.MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse'] = None):
        """
        Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
        :param Sequence[Union['MigrateMISyncCompleteCommandPropertiesResponseArgs', 'MigrateSyncCompleteCommandPropertiesResponseArgs']] commands: Array of command properties.
        :param Sequence['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param Sequence['ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArgs'] output: An array containing a single validation error response object
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        :param Mapping[str, str] client_data: Key value pairs of client data to attach meta data information to task
        :param 'MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs' input: Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", 'Validate.Oracle.AzureDbPostgreSql.Sync')
        if client_data is not None:
            pulumi.set(__self__, "client_data", client_data)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[Any]:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse']:
        """
        An array containing a single validation error response object
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="clientData")
    def client_data(self) -> Optional[Mapping[str, str]]:
        """
        Key value pairs of client data to attach meta data information to task
        """
        return pulumi.get(self, "client_data")

    @property
    @pulumi.getter
    def input(self) -> Optional['outputs.MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse']:
        """
        Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
        """
        return pulumi.get(self, "input")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse(dict):
    """
    Output for task that validates migration input for Oracle to Azure Database for PostgreSQL for online migrations
    """
    def __init__(__self__, *,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output for task that validates migration input for Oracle to Azure Database for PostgreSQL for online migrations
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Errors associated with a selected database object
        """
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Errors associated with a selected database object
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ValidateSyncMigrationInputSqlServerTaskInputResponse(dict):
    """
    Input for task that validates migration input for SQL sync migrations
    """
    def __init__(__self__, *,
                 selected_databases: Sequence['outputs.MigrateSqlServerSqlDbSyncDatabaseInputResponse'],
                 source_connection_info: 'outputs.SqlConnectionInfoResponse',
                 target_connection_info: 'outputs.SqlConnectionInfoResponse'):
        """
        Input for task that validates migration input for SQL sync migrations
        :param Sequence['MigrateSqlServerSqlDbSyncDatabaseInputResponseArgs'] selected_databases: Databases to migrate
        :param 'SqlConnectionInfoResponseArgs' source_connection_info: Information for connecting to source SQL server
        :param 'SqlConnectionInfoResponseArgs' target_connection_info: Information for connecting to target
        """
        pulumi.set(__self__, "selected_databases", selected_databases)
        pulumi.set(__self__, "source_connection_info", source_connection_info)
        pulumi.set(__self__, "target_connection_info", target_connection_info)

    @property
    @pulumi.getter(name="selectedDatabases")
    def selected_databases(self) -> Sequence['outputs.MigrateSqlServerSqlDbSyncDatabaseInputResponse']:
        """
        Databases to migrate
        """
        return pulumi.get(self, "selected_databases")

    @property
    @pulumi.getter(name="sourceConnectionInfo")
    def source_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Information for connecting to source SQL server
        """
        return pulumi.get(self, "source_connection_info")

    @property
    @pulumi.getter(name="targetConnectionInfo")
    def target_connection_info(self) -> 'outputs.SqlConnectionInfoResponse':
        """
        Information for connecting to target
        """
        return pulumi.get(self, "target_connection_info")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ValidateSyncMigrationInputSqlServerTaskOutputResponse(dict):
    """
    Output for task that validates migration input for SQL sync migrations
    """
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 validation_errors: Sequence['outputs.ReportableExceptionResponse']):
        """
        Output for task that validates migration input for SQL sync migrations
        :param str id: Database identifier
        :param str name: Name of database
        :param Sequence['ReportableExceptionResponseArgs'] validation_errors: Errors associated with a selected database object
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "validation_errors", validation_errors)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Database identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Sequence['outputs.ReportableExceptionResponse']:
        """
        Errors associated with a selected database object
        """
        return pulumi.get(self, "validation_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


