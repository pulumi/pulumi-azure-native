# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'GetVendorSkusResult',
    'AwaitableGetVendorSkusResult',
    'get_vendor_skus',
]

@pulumi.output_type
class GetVendorSkusResult:
    """
    Sku sub resource.
    """
    def __init__(__self__, deployment_mode=None, location=None, managed_application_parameters=None, managed_application_template=None, name=None, preview=None, provisioning_state=None, sku_type=None, tags=None, type=None, virtual_network_function_template=None):
        if deployment_mode and not isinstance(deployment_mode, str):
            raise TypeError("Expected argument 'deployment_mode' to be a str")
        pulumi.set(__self__, "deployment_mode", deployment_mode)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if managed_application_parameters and not isinstance(managed_application_parameters, dict):
            raise TypeError("Expected argument 'managed_application_parameters' to be a dict")
        pulumi.set(__self__, "managed_application_parameters", managed_application_parameters)
        if managed_application_template and not isinstance(managed_application_template, dict):
            raise TypeError("Expected argument 'managed_application_template' to be a dict")
        pulumi.set(__self__, "managed_application_template", managed_application_template)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if preview and not isinstance(preview, bool):
            raise TypeError("Expected argument 'preview' to be a bool")
        pulumi.set(__self__, "preview", preview)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if sku_type and not isinstance(sku_type, str):
            raise TypeError("Expected argument 'sku_type' to be a str")
        pulumi.set(__self__, "sku_type", sku_type)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if virtual_network_function_template and not isinstance(virtual_network_function_template, dict):
            raise TypeError("Expected argument 'virtual_network_function_template' to be a dict")
        pulumi.set(__self__, "virtual_network_function_template", virtual_network_function_template)

    @property
    @pulumi.getter(name="deploymentMode")
    def deployment_mode(self) -> Optional[str]:
        """
        Sku deployment mode.
        """
        return pulumi.get(self, "deployment_mode")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Resource location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managedApplicationParameters")
    def managed_application_parameters(self) -> Optional[Mapping[str, Any]]:
        """
        The parameters for the managed application to be supplied by vendor.
        """
        return pulumi.get(self, "managed_application_parameters")

    @property
    @pulumi.getter(name="managedApplicationTemplate")
    def managed_application_template(self) -> Optional[Mapping[str, Any]]:
        """
        The template for the managed application deployment.
        """
        return pulumi.get(self, "managed_application_template")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def preview(self) -> Optional[bool]:
        """
        Indicates if the vendor sku is in preview mode.
        """
        return pulumi.get(self, "preview")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the vendor sku sub resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="skuType")
    def sku_type(self) -> Optional[str]:
        """
        Sku type.
        """
        return pulumi.get(self, "sku_type")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualNetworkFunctionTemplate")
    def virtual_network_function_template(self) -> Optional['outputs.VirtualNetworkFunctionTemplateResponse']:
        """
        The template definition of the virtual network function.
        """
        return pulumi.get(self, "virtual_network_function_template")


class AwaitableGetVendorSkusResult(GetVendorSkusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVendorSkusResult(
            deployment_mode=self.deployment_mode,
            location=self.location,
            managed_application_parameters=self.managed_application_parameters,
            managed_application_template=self.managed_application_template,
            name=self.name,
            preview=self.preview,
            provisioning_state=self.provisioning_state,
            sku_type=self.sku_type,
            tags=self.tags,
            type=self.type,
            virtual_network_function_template=self.virtual_network_function_template)


def get_vendor_skus(sku_name: Optional[str] = None,
                    vendor_name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVendorSkusResult:
    """
    Use this data source to access information about an existing resource.

    :param str sku_name: The name of the sku.
    :param str vendor_name: The name of vendor.
    """
    __args__ = dict()
    __args__['skuName'] = sku_name
    __args__['vendorName'] = vendor_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-nextgen:hybridnetwork/v20200101preview:getVendorSkus', __args__, opts=opts, typ=GetVendorSkusResult).value

    return AwaitableGetVendorSkusResult(
        deployment_mode=__ret__.deployment_mode,
        location=__ret__.location,
        managed_application_parameters=__ret__.managed_application_parameters,
        managed_application_template=__ret__.managed_application_template,
        name=__ret__.name,
        preview=__ret__.preview,
        provisioning_state=__ret__.provisioning_state,
        sku_type=__ret__.sku_type,
        tags=__ret__.tags,
        type=__ret__.type,
        virtual_network_function_template=__ret__.virtual_network_function_template)
