# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['VendorSkus']


class VendorSkus(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deployment_mode: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_application_parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 managed_application_template: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 preview: Optional[pulumi.Input[bool]] = None,
                 sku_name: Optional[pulumi.Input[str]] = None,
                 sku_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vendor_name: Optional[pulumi.Input[str]] = None,
                 virtual_network_function_template: Optional[pulumi.Input[pulumi.InputType['VirtualNetworkFunctionTemplateArgs']]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Sku sub resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] deployment_mode: Sku deployment mode.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[Mapping[str, Any]] managed_application_parameters: The parameters for the managed application to be supplied by vendor.
        :param pulumi.Input[Mapping[str, Any]] managed_application_template: The template for the managed application deployment.
        :param pulumi.Input[bool] preview: Indicates if the vendor sku is in preview mode.
        :param pulumi.Input[str] sku_name: The name of the sku.
        :param pulumi.Input[str] sku_type: Sku type.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[str] vendor_name: The name of the vendor.
        :param pulumi.Input[pulumi.InputType['VirtualNetworkFunctionTemplateArgs']] virtual_network_function_template: The template definition of the virtual network function.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['deployment_mode'] = deployment_mode
            __props__['location'] = location
            __props__['managed_application_parameters'] = managed_application_parameters
            __props__['managed_application_template'] = managed_application_template
            __props__['preview'] = preview
            if sku_name is None:
                raise TypeError("Missing required property 'sku_name'")
            __props__['sku_name'] = sku_name
            __props__['sku_type'] = sku_type
            __props__['tags'] = tags
            if vendor_name is None:
                raise TypeError("Missing required property 'vendor_name'")
            __props__['vendor_name'] = vendor_name
            __props__['virtual_network_function_template'] = virtual_network_function_template
            __props__['name'] = None
            __props__['provisioning_state'] = None
            __props__['type'] = None
        super(VendorSkus, __self__).__init__(
            'azure-nextgen:hybridnetwork/v20200101preview:VendorSkus',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VendorSkus':
        """
        Get an existing VendorSkus resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return VendorSkus(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deploymentMode")
    def deployment_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Sku deployment mode.
        """
        return pulumi.get(self, "deployment_mode")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        Resource location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managedApplicationParameters")
    def managed_application_parameters(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The parameters for the managed application to be supplied by vendor.
        """
        return pulumi.get(self, "managed_application_parameters")

    @property
    @pulumi.getter(name="managedApplicationTemplate")
    def managed_application_template(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The template for the managed application deployment.
        """
        return pulumi.get(self, "managed_application_template")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def preview(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if the vendor sku is in preview mode.
        """
        return pulumi.get(self, "preview")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The provisioning state of the vendor sku sub resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="skuType")
    def sku_type(self) -> pulumi.Output[Optional[str]]:
        """
        Sku type.
        """
        return pulumi.get(self, "sku_type")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualNetworkFunctionTemplate")
    def virtual_network_function_template(self) -> pulumi.Output[Optional['outputs.VirtualNetworkFunctionTemplateResponse']]:
        """
        The template definition of the virtual network function.
        """
        return pulumi.get(self, "virtual_network_function_template")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

