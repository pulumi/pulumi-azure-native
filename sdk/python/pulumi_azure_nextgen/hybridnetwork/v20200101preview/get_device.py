# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'GetDeviceResult',
    'AwaitableGetDeviceResult',
    'get_device',
]

@pulumi.output_type
class GetDeviceResult:
    """
    Hybrid network device resource.
    """
    def __init__(__self__, azure_stack_edge=None, device_type=None, location=None, name=None, provisioning_state=None, status=None, tags=None, type=None, virtual_network_functions=None):
        if azure_stack_edge and not isinstance(azure_stack_edge, dict):
            raise TypeError("Expected argument 'azure_stack_edge' to be a dict")
        pulumi.set(__self__, "azure_stack_edge", azure_stack_edge)
        if device_type and not isinstance(device_type, str):
            raise TypeError("Expected argument 'device_type' to be a str")
        pulumi.set(__self__, "device_type", device_type)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if virtual_network_functions and not isinstance(virtual_network_functions, list):
            raise TypeError("Expected argument 'virtual_network_functions' to be a list")
        pulumi.set(__self__, "virtual_network_functions", virtual_network_functions)

    @property
    @pulumi.getter(name="azureStackEdge")
    def azure_stack_edge(self) -> Optional['outputs.SubResourceResponse']:
        """
        The reference to the azure stack edge device.
        """
        return pulumi.get(self, "azure_stack_edge")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> str:
        """
        The type of the hybrid network device.
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Resource location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the hybrid network device resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current device status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualNetworkFunctions")
    def virtual_network_functions(self) -> Sequence['outputs.SubResourceResponse']:
        """
        The list of virtual network functions deployed on the hybrid network device.
        """
        return pulumi.get(self, "virtual_network_functions")


class AwaitableGetDeviceResult(GetDeviceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceResult(
            azure_stack_edge=self.azure_stack_edge,
            device_type=self.device_type,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            status=self.status,
            tags=self.tags,
            type=self.type,
            virtual_network_functions=self.virtual_network_functions)


def get_device(device_name: Optional[str] = None,
               resource_group_name: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceResult:
    """
    Use this data source to access information about an existing resource.

    :param str device_name: The name of hybrid network device.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['deviceName'] = device_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-nextgen:hybridnetwork/v20200101preview:getDevice', __args__, opts=opts, typ=GetDeviceResult).value

    return AwaitableGetDeviceResult(
        azure_stack_edge=__ret__.azure_stack_edge,
        device_type=__ret__.device_type,
        location=__ret__.location,
        name=__ret__.name,
        provisioning_state=__ret__.provisioning_state,
        status=__ret__.status,
        tags=__ret__.tags,
        type=__ret__.type,
        virtual_network_functions=__ret__.virtual_network_functions)
