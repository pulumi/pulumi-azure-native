# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs
from ._enums import *

__all__ = [
    'AccountPropertiesResponseEndpoints',
    'AccountPropertiesResponseManagedResources',
    'AccountSkuResponse',
    'CloudConnectorsResponse',
    'IdentityResponse',
    'PrivateEndpointConnectionResponse',
    'PrivateEndpointResponse',
    'PrivateLinkServiceConnectionStateResponse',
]

@pulumi.output_type
class AccountPropertiesResponseEndpoints(dict):
    """
    The URIs that are the public endpoints of the account.
    """
    def __init__(__self__, *,
                 catalog: str,
                 guardian: str,
                 scan: str):
        """
        The URIs that are the public endpoints of the account.
        :param str catalog: Gets the catalog endpoint.
        :param str guardian: Gets the guardian endpoint.
        :param str scan: Gets the scan endpoint.
        """
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "guardian", guardian)
        pulumi.set(__self__, "scan", scan)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        """
        Gets the catalog endpoint.
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def guardian(self) -> str:
        """
        Gets the guardian endpoint.
        """
        return pulumi.get(self, "guardian")

    @property
    @pulumi.getter
    def scan(self) -> str:
        """
        Gets the scan endpoint.
        """
        return pulumi.get(self, "scan")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountPropertiesResponseManagedResources(dict):
    """
    Gets the resource identifiers of the managed resources.
    """
    def __init__(__self__, *,
                 event_hub_namespace: str,
                 resource_group: str,
                 storage_account: str):
        """
        Gets the resource identifiers of the managed resources.
        :param str event_hub_namespace: Gets the managed event hub namespace resource identifier.
        :param str resource_group: Gets the managed resource group resource identifier. This resource group will host resource dependencies for the account.
        :param str storage_account: Gets the managed storage account resource identifier.
        """
        pulumi.set(__self__, "event_hub_namespace", event_hub_namespace)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "storage_account", storage_account)

    @property
    @pulumi.getter(name="eventHubNamespace")
    def event_hub_namespace(self) -> str:
        """
        Gets the managed event hub namespace resource identifier.
        """
        return pulumi.get(self, "event_hub_namespace")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        Gets the managed resource group resource identifier. This resource group will host resource dependencies for the account.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> str:
        """
        Gets the managed storage account resource identifier.
        """
        return pulumi.get(self, "storage_account")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountSkuResponse(dict):
    """
    The Sku
    """
    def __init__(__self__, *,
                 capacity: Optional[int] = None,
                 name: Optional[str] = None):
        """
        The Sku
        :param int capacity: Gets or sets the sku capacity. Possible values include: 4, 16
        :param str name: Gets or sets the sku name.
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        Gets or sets the sku capacity. Possible values include: 4, 16
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets or sets the sku name.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CloudConnectorsResponse(dict):
    """
    Properties for configuring third party cloud connections.
    """
    def __init__(__self__, *,
                 aws_external_id: str):
        """
        Properties for configuring third party cloud connections.
        :param str aws_external_id: AWS external identifier.
               Configured in AWS to allow use of the role arn used for scanning
        """
        pulumi.set(__self__, "aws_external_id", aws_external_id)

    @property
    @pulumi.getter(name="awsExternalId")
    def aws_external_id(self) -> str:
        """
        AWS external identifier.
        Configured in AWS to allow use of the role arn used for scanning
        """
        return pulumi.get(self, "aws_external_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IdentityResponse(dict):
    """
    The Managed Identity of the resource
    """
    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None):
        """
        The Managed Identity of the resource
        :param str principal_id: Service principal object Id
        :param str tenant_id: Tenant Id
        :param str type: Identity Type
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        Service principal object Id
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        Tenant Id
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Identity Type
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrivateEndpointConnectionResponse(dict):
    """
    A private endpoint connection class.
    """
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 provisioning_state: str,
                 type: str,
                 private_endpoint: Optional['outputs.PrivateEndpointResponse'] = None,
                 private_link_service_connection_state: Optional['outputs.PrivateLinkServiceConnectionStateResponse'] = None):
        """
        A private endpoint connection class.
        :param str id: Gets or sets the identifier.
        :param str name: Gets or sets the name.
        :param str provisioning_state: The provisioning state.
        :param str type: Gets or sets the type.
        :param 'PrivateEndpointResponseArgs' private_endpoint: The private endpoint information.
        :param 'PrivateLinkServiceConnectionStateResponseArgs' private_link_service_connection_state: The private link service connection state.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "type", type)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_link_service_connection_state is not None:
            pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets or sets the identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Gets or sets the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Gets or sets the type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional['outputs.PrivateEndpointResponse']:
        """
        The private endpoint information.
        """
        return pulumi.get(self, "private_endpoint")

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> Optional['outputs.PrivateLinkServiceConnectionStateResponse']:
        """
        The private link service connection state.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrivateEndpointResponse(dict):
    """
    A private endpoint class.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        A private endpoint class.
        :param str id: The private endpoint identifier.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The private endpoint identifier.
        """
        return pulumi.get(self, "id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrivateLinkServiceConnectionStateResponse(dict):
    """
    The private link service connection state.
    """
    def __init__(__self__, *,
                 actions_required: Optional[str] = None,
                 description: Optional[str] = None,
                 status: Optional[str] = None):
        """
        The private link service connection state.
        :param str actions_required: The required actions.
        :param str description: The description.
        :param str status: The status.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[str]:
        """
        The required actions.
        """
        return pulumi.get(self, "actions_required")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status.
        """
        return pulumi.get(self, "status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


