# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'GetRulesEngineResult',
    'AwaitableGetRulesEngineResult',
    'get_rules_engine',
]

@pulumi.output_type
class GetRulesEngineResult:
    """
    A rules engine configuration containing a list of rules that will run to modify the runtime behavior of the request and response.
    """
    def __init__(__self__, name=None, resource_state=None, rules=None, type=None):
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_state and not isinstance(resource_state, str):
            raise TypeError("Expected argument 'resource_state' to be a str")
        pulumi.set(__self__, "resource_state", resource_state)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceState")
    def resource_state(self) -> str:
        """
        Resource status.
        """
        return pulumi.get(self, "resource_state")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.RulesEngineRuleResponse']]:
        """
        A list of rules that define a particular Rules Engine Configuration.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type.
        """
        return pulumi.get(self, "type")


class AwaitableGetRulesEngineResult(GetRulesEngineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRulesEngineResult(
            name=self.name,
            resource_state=self.resource_state,
            rules=self.rules,
            type=self.type)


def get_rules_engine(front_door_name: Optional[str] = None,
                     resource_group_name: Optional[str] = None,
                     rules_engine_name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRulesEngineResult:
    """
    Use this data source to access information about an existing resource.

    :param str front_door_name: Name of the Front Door which is globally unique.
    :param str resource_group_name: Name of the Resource group within the Azure subscription.
    :param str rules_engine_name: Name of the Rules Engine which is unique within the Front Door.
    """
    __args__ = dict()
    __args__['frontDoorName'] = front_door_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['rulesEngineName'] = rules_engine_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-nextgen:network/latest:getRulesEngine', __args__, opts=opts, typ=GetRulesEngineResult).value

    return AwaitableGetRulesEngineResult(
        name=__ret__.name,
        resource_state=__ret__.resource_state,
        rules=__ret__.rules,
        type=__ret__.type)
