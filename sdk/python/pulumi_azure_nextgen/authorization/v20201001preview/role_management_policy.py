# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['RoleManagementPolicy']


class RoleManagementPolicy(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 is_organization_default: Optional[pulumi.Input[bool]] = None,
                 role_management_policy_name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union[pulumi.InputType['RoleManagementPolicyApprovalRuleArgs'], pulumi.InputType['RoleManagementPolicyAuthenticationContextRuleArgs'], pulumi.InputType['RoleManagementPolicyEnablementRuleArgs'], pulumi.InputType['RoleManagementPolicyExpirationRuleArgs'], pulumi.InputType['RoleManagementPolicyNotificationRuleArgs']]]]]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Role management policy

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The role management policy description.
        :param pulumi.Input[str] display_name: The role management policy display name.
        :param pulumi.Input[bool] is_organization_default: The role management policy is default policy.
        :param pulumi.Input[str] role_management_policy_name: The name (guid) of the role management policy to upsert.
        :param pulumi.Input[Sequence[pulumi.Input[Union[pulumi.InputType['RoleManagementPolicyApprovalRuleArgs'], pulumi.InputType['RoleManagementPolicyAuthenticationContextRuleArgs'], pulumi.InputType['RoleManagementPolicyEnablementRuleArgs'], pulumi.InputType['RoleManagementPolicyExpirationRuleArgs'], pulumi.InputType['RoleManagementPolicyNotificationRuleArgs']]]]] rules: The rule applied to the policy.
        :param pulumi.Input[str] scope: The role management policy scope.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['display_name'] = display_name
            __props__['is_organization_default'] = is_organization_default
            if role_management_policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'role_management_policy_name'")
            __props__['role_management_policy_name'] = role_management_policy_name
            __props__['rules'] = rules
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__['scope'] = scope
            __props__['effective_rules'] = None
            __props__['last_updated_date_time'] = None
            __props__['name'] = None
            __props__['type'] = None
        super(RoleManagementPolicy, __self__).__init__(
            'azure-nextgen:authorization/v20201001preview:roleManagementPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'RoleManagementPolicy':
        """
        Get an existing RoleManagementPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return RoleManagementPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The role management policy description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        The role management policy display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveRules")
    def effective_rules(self) -> pulumi.Output[Sequence[Any]]:
        """
        The readonly computed rule applied to the policy.
        """
        return pulumi.get(self, "effective_rules")

    @property
    @pulumi.getter(name="isOrganizationDefault")
    def is_organization_default(self) -> pulumi.Output[Optional[bool]]:
        """
        The role management policy is default policy.
        """
        return pulumi.get(self, "is_organization_default")

    @property
    @pulumi.getter(name="lastUpdatedDateTime")
    def last_updated_date_time(self) -> pulumi.Output[str]:
        """
        The last updated date time.
        """
        return pulumi.get(self, "last_updated_date_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The role management policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[Sequence[Any]]]:
        """
        The rule applied to the policy.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        The role management policy scope.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The role management policy type.
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

