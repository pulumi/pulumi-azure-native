# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'CircuitResponse',
    'ClusterPropertiesResponse',
    'DefaultClusterPropertiesResponse',
    'EndpointsResponse',
    'ExpressRouteAuthorizationResponse',
    'IdentitySourceResponse',
    'PrivateCloudPropertiesResponse',
    'SkuResponse',
]

@pulumi.output_type
class CircuitResponse(dict):
    """
    An ExpressRoute Circuit
    """
    def __init__(__self__, *,
                 express_route_id: str,
                 express_route_private_peering_id: str,
                 primary_subnet: str,
                 secondary_subnet: str,
                 authorizations: Optional[Sequence['outputs.ExpressRouteAuthorizationResponse']] = None):
        """
        An ExpressRoute Circuit
        :param str express_route_id: Identifier of the ExpressRoute (Microsoft Colo only)
        :param str express_route_private_peering_id: ExpressRoute private peering identifier
        :param str primary_subnet: CIDR of primary subnet
        :param str secondary_subnet: CIDR of secondary subnet
        :param Sequence['ExpressRouteAuthorizationResponseArgs'] authorizations: Authorizations for the ExpressRoute (Microsoft Colo only)
        """
        pulumi.set(__self__, "express_route_id", express_route_id)
        pulumi.set(__self__, "express_route_private_peering_id", express_route_private_peering_id)
        pulumi.set(__self__, "primary_subnet", primary_subnet)
        pulumi.set(__self__, "secondary_subnet", secondary_subnet)
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)

    @property
    @pulumi.getter(name="expressRouteID")
    def express_route_id(self) -> str:
        """
        Identifier of the ExpressRoute (Microsoft Colo only)
        """
        return pulumi.get(self, "express_route_id")

    @property
    @pulumi.getter(name="expressRoutePrivatePeeringID")
    def express_route_private_peering_id(self) -> str:
        """
        ExpressRoute private peering identifier
        """
        return pulumi.get(self, "express_route_private_peering_id")

    @property
    @pulumi.getter(name="primarySubnet")
    def primary_subnet(self) -> str:
        """
        CIDR of primary subnet
        """
        return pulumi.get(self, "primary_subnet")

    @property
    @pulumi.getter(name="secondarySubnet")
    def secondary_subnet(self) -> str:
        """
        CIDR of secondary subnet
        """
        return pulumi.get(self, "secondary_subnet")

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[Sequence['outputs.ExpressRouteAuthorizationResponse']]:
        """
        Authorizations for the ExpressRoute (Microsoft Colo only)
        """
        return pulumi.get(self, "authorizations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPropertiesResponse(dict):
    """
    The properties of a cluster
    """
    def __init__(__self__, *,
                 cluster_id: int,
                 hosts: Sequence[str],
                 provisioning_state: str,
                 cluster_size: Optional[int] = None):
        """
        The properties of a cluster
        :param int cluster_id: The identity
        :param Sequence[str] hosts: The hosts
        :param str provisioning_state: The state of the cluster provisioning
        :param int cluster_size: The cluster size
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if cluster_size is not None:
            pulumi.set(__self__, "cluster_size", cluster_size)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> int:
        """
        The identity
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence[str]:
        """
        The hosts
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The state of the cluster provisioning
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="clusterSize")
    def cluster_size(self) -> Optional[int]:
        """
        The cluster size
        """
        return pulumi.get(self, "cluster_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DefaultClusterPropertiesResponse(dict):
    """
    The properties of a default cluster
    """
    def __init__(__self__, *,
                 cluster_id: int,
                 hosts: Sequence[str],
                 cluster_size: Optional[int] = None):
        """
        The properties of a default cluster
        :param int cluster_id: The identity
        :param Sequence[str] hosts: The hosts
        :param int cluster_size: The cluster size
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "hosts", hosts)
        if cluster_size is not None:
            pulumi.set(__self__, "cluster_size", cluster_size)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> int:
        """
        The identity
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence[str]:
        """
        The hosts
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="clusterSize")
    def cluster_size(self) -> Optional[int]:
        """
        The cluster size
        """
        return pulumi.get(self, "cluster_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EndpointsResponse(dict):
    """
    Endpoint addresses
    """
    def __init__(__self__, *,
                 nsxt_manager: str,
                 vcsa: str):
        """
        Endpoint addresses
        :param str nsxt_manager: Endpoint for the NSX-T Data Center manager
        :param str vcsa: Endpoint for Virtual Center Server Appliance
        """
        pulumi.set(__self__, "nsxt_manager", nsxt_manager)
        pulumi.set(__self__, "vcsa", vcsa)

    @property
    @pulumi.getter(name="nsxtManager")
    def nsxt_manager(self) -> str:
        """
        Endpoint for the NSX-T Data Center manager
        """
        return pulumi.get(self, "nsxt_manager")

    @property
    @pulumi.getter
    def vcsa(self) -> str:
        """
        Endpoint for Virtual Center Server Appliance
        """
        return pulumi.get(self, "vcsa")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ExpressRouteAuthorizationResponse(dict):
    """
    Authorization for an ExpressRoute
    """
    def __init__(__self__, *,
                 id: str,
                 key: str,
                 name: Optional[str] = None):
        """
        Authorization for an ExpressRoute
        :param str id: The ID of the ExpressRoute
        :param str key: The key of the ExpressRoute
        :param str name: The name of the ExpressRoute
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the ExpressRoute
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the ExpressRoute
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the ExpressRoute
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IdentitySourceResponse(dict):
    """
    vCenter Single Sign On Identity Source
    """
    def __init__(__self__, *,
                 alias: Optional[str] = None,
                 base_group_dn: Optional[str] = None,
                 base_user_dn: Optional[str] = None,
                 domain: Optional[str] = None,
                 name: Optional[str] = None,
                 password: Optional[str] = None,
                 primary_server: Optional[str] = None,
                 secondary_server: Optional[str] = None,
                 ssl: Optional[str] = None,
                 username: Optional[str] = None):
        """
        vCenter Single Sign On Identity Source
        :param str alias: The domain's NetBIOS name
        :param str base_group_dn: The base distinguished name for groups
        :param str base_user_dn: The base distinguished name for users
        :param str domain: The domain's dns name
        :param str name: The name of the identity source
        :param str password: The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups.
        :param str primary_server: Primary server URL
        :param str secondary_server: Secondary server URL
        :param str ssl: Protect LDAP communication using SSL certificate (LDAPS)
        :param str username: The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if base_group_dn is not None:
            pulumi.set(__self__, "base_group_dn", base_group_dn)
        if base_user_dn is not None:
            pulumi.set(__self__, "base_user_dn", base_user_dn)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if primary_server is not None:
            pulumi.set(__self__, "primary_server", primary_server)
        if secondary_server is not None:
            pulumi.set(__self__, "secondary_server", secondary_server)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        """
        The domain's NetBIOS name
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="baseGroupDN")
    def base_group_dn(self) -> Optional[str]:
        """
        The base distinguished name for groups
        """
        return pulumi.get(self, "base_group_dn")

    @property
    @pulumi.getter(name="baseUserDN")
    def base_user_dn(self) -> Optional[str]:
        """
        The base distinguished name for users
        """
        return pulumi.get(self, "base_user_dn")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        The domain's dns name
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the identity source
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="primaryServer")
    def primary_server(self) -> Optional[str]:
        """
        Primary server URL
        """
        return pulumi.get(self, "primary_server")

    @property
    @pulumi.getter(name="secondaryServer")
    def secondary_server(self) -> Optional[str]:
        """
        Secondary server URL
        """
        return pulumi.get(self, "secondary_server")

    @property
    @pulumi.getter
    def ssl(self) -> Optional[str]:
        """
        Protect LDAP communication using SSL certificate (LDAPS)
        """
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group
        """
        return pulumi.get(self, "username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrivateCloudPropertiesResponse(dict):
    """
    The properties of a private cloud resource
    """
    def __init__(__self__, *,
                 clusters: Sequence[str],
                 endpoints: 'outputs.EndpointsResponse',
                 management_network: str,
                 nsxt_certificate_thumbprint: str,
                 provisioning_network: str,
                 provisioning_state: str,
                 vcenter_certificate_thumbprint: str,
                 vmotion_network: str,
                 circuit: Optional['outputs.CircuitResponse'] = None,
                 cluster: Optional['outputs.DefaultClusterPropertiesResponse'] = None,
                 identity_sources: Optional[Sequence['outputs.IdentitySourceResponse']] = None,
                 internet: Optional[str] = None,
                 network_block: Optional[str] = None,
                 nsxt_password: Optional[str] = None,
                 vcenter_password: Optional[str] = None):
        """
        The properties of a private cloud resource
        :param Sequence[str] clusters: The clusters
        :param 'EndpointsResponseArgs' endpoints: The endpoints
        :param str management_network: Network used to access vCenter Server and NSX-T Manager
        :param str nsxt_certificate_thumbprint: Thumbprint of the NSX-T Manager SSL certificate
        :param str provisioning_network: Used for virtual machine cold migration, cloning, and snapshot migration
        :param str provisioning_state: The provisioning state
        :param str vcenter_certificate_thumbprint: Thumbprint of the vCenter Server SSL certificate
        :param str vmotion_network: Used for live migration of virtual machines
        :param 'CircuitResponseArgs' circuit: An ExpressRoute Circuit
        :param 'DefaultClusterPropertiesResponseArgs' cluster: The default cluster used for management
        :param Sequence['IdentitySourceResponseArgs'] identity_sources: vCenter Single Sign On Identity Sources
        :param str internet: Connectivity to internet is enabled or disabled
        :param str network_block: The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
        :param str nsxt_password: Optionally, set the NSX-T Manager password when the private cloud is created
        :param str vcenter_password: Optionally, set the vCenter admin password when the private cloud is created
        """
        pulumi.set(__self__, "clusters", clusters)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "management_network", management_network)
        pulumi.set(__self__, "nsxt_certificate_thumbprint", nsxt_certificate_thumbprint)
        pulumi.set(__self__, "provisioning_network", provisioning_network)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "vcenter_certificate_thumbprint", vcenter_certificate_thumbprint)
        pulumi.set(__self__, "vmotion_network", vmotion_network)
        if circuit is not None:
            pulumi.set(__self__, "circuit", circuit)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if identity_sources is not None:
            pulumi.set(__self__, "identity_sources", identity_sources)
        if internet is not None:
            pulumi.set(__self__, "internet", internet)
        if network_block is not None:
            pulumi.set(__self__, "network_block", network_block)
        if nsxt_password is not None:
            pulumi.set(__self__, "nsxt_password", nsxt_password)
        if vcenter_password is not None:
            pulumi.set(__self__, "vcenter_password", vcenter_password)

    @property
    @pulumi.getter
    def clusters(self) -> Sequence[str]:
        """
        The clusters
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def endpoints(self) -> 'outputs.EndpointsResponse':
        """
        The endpoints
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="managementNetwork")
    def management_network(self) -> str:
        """
        Network used to access vCenter Server and NSX-T Manager
        """
        return pulumi.get(self, "management_network")

    @property
    @pulumi.getter(name="nsxtCertificateThumbprint")
    def nsxt_certificate_thumbprint(self) -> str:
        """
        Thumbprint of the NSX-T Manager SSL certificate
        """
        return pulumi.get(self, "nsxt_certificate_thumbprint")

    @property
    @pulumi.getter(name="provisioningNetwork")
    def provisioning_network(self) -> str:
        """
        Used for virtual machine cold migration, cloning, and snapshot migration
        """
        return pulumi.get(self, "provisioning_network")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="vcenterCertificateThumbprint")
    def vcenter_certificate_thumbprint(self) -> str:
        """
        Thumbprint of the vCenter Server SSL certificate
        """
        return pulumi.get(self, "vcenter_certificate_thumbprint")

    @property
    @pulumi.getter(name="vmotionNetwork")
    def vmotion_network(self) -> str:
        """
        Used for live migration of virtual machines
        """
        return pulumi.get(self, "vmotion_network")

    @property
    @pulumi.getter
    def circuit(self) -> Optional['outputs.CircuitResponse']:
        """
        An ExpressRoute Circuit
        """
        return pulumi.get(self, "circuit")

    @property
    @pulumi.getter
    def cluster(self) -> Optional['outputs.DefaultClusterPropertiesResponse']:
        """
        The default cluster used for management
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="identitySources")
    def identity_sources(self) -> Optional[Sequence['outputs.IdentitySourceResponse']]:
        """
        vCenter Single Sign On Identity Sources
        """
        return pulumi.get(self, "identity_sources")

    @property
    @pulumi.getter
    def internet(self) -> Optional[str]:
        """
        Connectivity to internet is enabled or disabled
        """
        return pulumi.get(self, "internet")

    @property
    @pulumi.getter(name="networkBlock")
    def network_block(self) -> Optional[str]:
        """
        The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
        """
        return pulumi.get(self, "network_block")

    @property
    @pulumi.getter(name="nsxtPassword")
    def nsxt_password(self) -> Optional[str]:
        """
        Optionally, set the NSX-T Manager password when the private cloud is created
        """
        return pulumi.get(self, "nsxt_password")

    @property
    @pulumi.getter(name="vcenterPassword")
    def vcenter_password(self) -> Optional[str]:
        """
        Optionally, set the vCenter admin password when the private cloud is created
        """
        return pulumi.get(self, "vcenter_password")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SkuResponse(dict):
    """
    The resource model definition representing SKU
    """
    def __init__(__self__, *,
                 name: str):
        """
        The resource model definition representing SKU
        :param str name: The name of the SKU.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SKU.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


