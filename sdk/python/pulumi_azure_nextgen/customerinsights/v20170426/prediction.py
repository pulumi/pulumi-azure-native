# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Prediction']


class Prediction(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_analyze: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 display_name: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 grades: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PredictionGradesArgs']]]]] = None,
                 hub_name: Optional[pulumi.Input[str]] = None,
                 involved_interaction_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 involved_kpi_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 involved_relationships: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mappings: Optional[pulumi.Input[pulumi.InputType['PredictionMappingsArgs']]] = None,
                 negative_outcome_expression: Optional[pulumi.Input[str]] = None,
                 positive_outcome_expression: Optional[pulumi.Input[str]] = None,
                 prediction_name: Optional[pulumi.Input[str]] = None,
                 primary_profile_type: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scope_expression: Optional[pulumi.Input[str]] = None,
                 score_label: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        The prediction resource format.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_analyze: Whether do auto analyze.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] description: Description of the prediction.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] display_name: Display name of the prediction.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PredictionGradesArgs']]]] grades: The prediction grades.
        :param pulumi.Input[str] hub_name: The name of the hub.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] involved_interaction_types: Interaction types involved in the prediction.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] involved_kpi_types: KPI types involved in the prediction.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] involved_relationships: Relationships involved in the prediction.
        :param pulumi.Input[pulumi.InputType['PredictionMappingsArgs']] mappings: Definition of the link mapping of prediction.
        :param pulumi.Input[str] negative_outcome_expression: Negative outcome expression.
        :param pulumi.Input[str] positive_outcome_expression: Positive outcome expression.
        :param pulumi.Input[str] prediction_name: Name of the prediction.
        :param pulumi.Input[str] primary_profile_type: Primary profile type.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[str] scope_expression: Scope expression.
        :param pulumi.Input[str] score_label: Score label.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if auto_analyze is None and not opts.urn:
                raise TypeError("Missing required property 'auto_analyze'")
            __props__['auto_analyze'] = auto_analyze
            __props__['description'] = description
            __props__['display_name'] = display_name
            __props__['grades'] = grades
            if hub_name is None and not opts.urn:
                raise TypeError("Missing required property 'hub_name'")
            __props__['hub_name'] = hub_name
            __props__['involved_interaction_types'] = involved_interaction_types
            __props__['involved_kpi_types'] = involved_kpi_types
            __props__['involved_relationships'] = involved_relationships
            if mappings is None and not opts.urn:
                raise TypeError("Missing required property 'mappings'")
            __props__['mappings'] = mappings
            if negative_outcome_expression is None and not opts.urn:
                raise TypeError("Missing required property 'negative_outcome_expression'")
            __props__['negative_outcome_expression'] = negative_outcome_expression
            if positive_outcome_expression is None and not opts.urn:
                raise TypeError("Missing required property 'positive_outcome_expression'")
            __props__['positive_outcome_expression'] = positive_outcome_expression
            if prediction_name is None and not opts.urn:
                raise TypeError("Missing required property 'prediction_name'")
            __props__['prediction_name'] = prediction_name
            if primary_profile_type is None and not opts.urn:
                raise TypeError("Missing required property 'primary_profile_type'")
            __props__['primary_profile_type'] = primary_profile_type
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if scope_expression is None and not opts.urn:
                raise TypeError("Missing required property 'scope_expression'")
            __props__['scope_expression'] = scope_expression
            if score_label is None and not opts.urn:
                raise TypeError("Missing required property 'score_label'")
            __props__['score_label'] = score_label
            __props__['name'] = None
            __props__['provisioning_state'] = None
            __props__['system_generated_entities'] = None
            __props__['tenant_id'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-nextgen:customerinsights/latest:Prediction")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Prediction, __self__).__init__(
            'azure-nextgen:customerinsights/v20170426:Prediction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Prediction':
        """
        Get an existing Prediction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Prediction(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoAnalyze")
    def auto_analyze(self) -> pulumi.Output[bool]:
        """
        Whether do auto analyze.
        """
        return pulumi.get(self, "auto_analyze")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Description of the prediction.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Display name of the prediction.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def grades(self) -> pulumi.Output[Optional[Sequence['outputs.PredictionResponseGrades']]]:
        """
        The prediction grades.
        """
        return pulumi.get(self, "grades")

    @property
    @pulumi.getter(name="involvedInteractionTypes")
    def involved_interaction_types(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Interaction types involved in the prediction.
        """
        return pulumi.get(self, "involved_interaction_types")

    @property
    @pulumi.getter(name="involvedKpiTypes")
    def involved_kpi_types(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        KPI types involved in the prediction.
        """
        return pulumi.get(self, "involved_kpi_types")

    @property
    @pulumi.getter(name="involvedRelationships")
    def involved_relationships(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Relationships involved in the prediction.
        """
        return pulumi.get(self, "involved_relationships")

    @property
    @pulumi.getter
    def mappings(self) -> pulumi.Output['outputs.PredictionResponseMappings']:
        """
        Definition of the link mapping of prediction.
        """
        return pulumi.get(self, "mappings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="negativeOutcomeExpression")
    def negative_outcome_expression(self) -> pulumi.Output[str]:
        """
        Negative outcome expression.
        """
        return pulumi.get(self, "negative_outcome_expression")

    @property
    @pulumi.getter(name="positiveOutcomeExpression")
    def positive_outcome_expression(self) -> pulumi.Output[str]:
        """
        Positive outcome expression.
        """
        return pulumi.get(self, "positive_outcome_expression")

    @property
    @pulumi.getter(name="predictionName")
    def prediction_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the prediction.
        """
        return pulumi.get(self, "prediction_name")

    @property
    @pulumi.getter(name="primaryProfileType")
    def primary_profile_type(self) -> pulumi.Output[str]:
        """
        Primary profile type.
        """
        return pulumi.get(self, "primary_profile_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="scopeExpression")
    def scope_expression(self) -> pulumi.Output[str]:
        """
        Scope expression.
        """
        return pulumi.get(self, "scope_expression")

    @property
    @pulumi.getter(name="scoreLabel")
    def score_label(self) -> pulumi.Output[str]:
        """
        Score label.
        """
        return pulumi.get(self, "score_label")

    @property
    @pulumi.getter(name="systemGeneratedEntities")
    def system_generated_entities(self) -> pulumi.Output['outputs.PredictionResponseSystemGeneratedEntities']:
        """
        System generated entities.
        """
        return pulumi.get(self, "system_generated_entities")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[str]:
        """
        The hub name.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

