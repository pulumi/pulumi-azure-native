# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'GetDataPoolResult',
    'AwaitableGetDataPoolResult',
    'get_data_pool',
]

@pulumi.output_type
class GetDataPoolResult:
    """
    An ADP Data Pool.
    """
    def __init__(__self__, data_pool_id=None, locations=None, name=None, provisioning_state=None, type=None):
        if data_pool_id and not isinstance(data_pool_id, str):
            raise TypeError("Expected argument 'data_pool_id' to be a str")
        pulumi.set(__self__, "data_pool_id", data_pool_id)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dataPoolId")
    def data_pool_id(self) -> str:
        """
        The Data Pool's data-plane ID
        """
        return pulumi.get(self, "data_pool_id")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.DataPoolLocationResponse']:
        """
        Gets or sets the collection of locations where Data Pool resources should be created.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets the status of the data pool at the time the operation was called.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetDataPoolResult(GetDataPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataPoolResult(
            data_pool_id=self.data_pool_id,
            locations=self.locations,
            name=self.name,
            provisioning_state=self.provisioning_state,
            type=self.type)


def get_data_pool(account_name: Optional[str] = None,
                  data_pool_name: Optional[str] = None,
                  resource_group_name: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataPoolResult:
    """
    Use this data source to access information about an existing resource.

    :param str account_name: The name of the ADP account.
    :param str data_pool_name: The name of the Data Pool.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['dataPoolName'] = data_pool_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-nextgen:autonomousdevelopmentplatform/v20200701preview:getDataPool', __args__, opts=opts, typ=GetDataPoolResult).value

    return AwaitableGetDataPoolResult(
        data_pool_id=__ret__.data_pool_id,
        locations=__ret__.locations,
        name=__ret__.name,
        provisioning_state=__ret__.provisioning_state,
        type=__ret__.type)
