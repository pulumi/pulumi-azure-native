# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'AutoScaleSettingsArgs',
    'AzureBlobFileSystemReferenceArgs',
    'AzureFileShareReferenceArgs',
    'AzureStorageCredentialsInfoArgs',
    'CNTKsettingsArgs',
    'Caffe2SettingsArgs',
    'CaffeSettingsArgs',
    'ChainerSettingsArgs',
    'ContainerSettingsArgs',
    'CustomToolkitSettingsArgs',
    'DataDisksArgs',
    'EnvironmentSettingArgs',
    'FileServerReferenceArgs',
    'ImageReferenceArgs',
    'ImageSourceRegistryArgs',
    'InputDirectoryArgs',
    'JobBasePropertiesConstraintsArgs',
    'JobPreparationArgs',
    'KeyVaultSecretReferenceArgs',
    'ManualScaleSettingsArgs',
    'MountVolumesArgs',
    'NodeSetupArgs',
    'OutputDirectoryArgs',
    'PrivateRegistryCredentialsArgs',
    'ResourceIdArgs',
    'ScaleSettingsArgs',
    'SetupTaskArgs',
    'SshConfigurationArgs',
    'TensorFlowSettingsArgs',
    'UnmanagedFileSystemReferenceArgs',
    'UserAccountSettingsArgs',
    'VirtualMachineConfigurationArgs',
]

@pulumi.input_type
class AutoScaleSettingsArgs:
    def __init__(__self__, *,
                 maximum_node_count: pulumi.Input[int],
                 minimum_node_count: pulumi.Input[int],
                 initial_node_count: Optional[pulumi.Input[int]] = None):
        """
        The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the pending and running jobs on the cluster.
        """
        pulumi.set(__self__, "maximum_node_count", maximum_node_count)
        pulumi.set(__self__, "minimum_node_count", minimum_node_count)
        if initial_node_count is not None:
            pulumi.set(__self__, "initial_node_count", initial_node_count)

    @property
    @pulumi.getter(name="maximumNodeCount")
    def maximum_node_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "maximum_node_count")

    @maximum_node_count.setter
    def maximum_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "maximum_node_count", value)

    @property
    @pulumi.getter(name="minimumNodeCount")
    def minimum_node_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "minimum_node_count")

    @minimum_node_count.setter
    def minimum_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "minimum_node_count", value)

    @property
    @pulumi.getter(name="initialNodeCount")
    def initial_node_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_node_count")

    @initial_node_count.setter
    def initial_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_node_count", value)


@pulumi.input_type
class AzureBlobFileSystemReferenceArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 container_name: pulumi.Input[str],
                 credentials: pulumi.Input['AzureStorageCredentialsInfoArgs'],
                 relative_mount_path: pulumi.Input[str],
                 mount_options: Optional[pulumi.Input[str]] = None):
        """
        Provides required information, for the service to be able to mount Azure Blob Storage container on the cluster nodes.
        :param pulumi.Input['AzureStorageCredentialsInfoArgs'] credentials: Credentials to access Azure File Share.
        :param pulumi.Input[str] relative_mount_path: Note that all blob file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "relative_mount_path", relative_mount_path)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['AzureStorageCredentialsInfoArgs']:
        """
        Credentials to access Azure File Share.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['AzureStorageCredentialsInfoArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="relativeMountPath")
    def relative_mount_path(self) -> pulumi.Input[str]:
        """
        Note that all blob file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location.
        """
        return pulumi.get(self, "relative_mount_path")

    @relative_mount_path.setter
    def relative_mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_mount_path", value)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_options", value)


@pulumi.input_type
class AzureFileShareReferenceArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 azure_file_url: pulumi.Input[str],
                 credentials: pulumi.Input['AzureStorageCredentialsInfoArgs'],
                 relative_mount_path: pulumi.Input[str],
                 directory_mode: Optional[pulumi.Input[str]] = None,
                 file_mode: Optional[pulumi.Input[str]] = None):
        """
        Details of the Azure File Share to mount on the cluster.
        :param pulumi.Input['AzureStorageCredentialsInfoArgs'] credentials: Credentials to access Azure File Share.
        :param pulumi.Input[str] relative_mount_path: Note that all file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location.
        :param pulumi.Input[str] directory_mode: Default value is 0777. Valid only if OS is linux.
        :param pulumi.Input[str] file_mode: Default value is 0777. Valid only if OS is linux.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "azure_file_url", azure_file_url)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "relative_mount_path", relative_mount_path)
        if directory_mode is not None:
            pulumi.set(__self__, "directory_mode", directory_mode)
        if file_mode is not None:
            pulumi.set(__self__, "file_mode", file_mode)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="azureFileUrl")
    def azure_file_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "azure_file_url")

    @azure_file_url.setter
    def azure_file_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_file_url", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['AzureStorageCredentialsInfoArgs']:
        """
        Credentials to access Azure File Share.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['AzureStorageCredentialsInfoArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="relativeMountPath")
    def relative_mount_path(self) -> pulumi.Input[str]:
        """
        Note that all file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location.
        """
        return pulumi.get(self, "relative_mount_path")

    @relative_mount_path.setter
    def relative_mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_mount_path", value)

    @property
    @pulumi.getter(name="directoryMode")
    def directory_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Default value is 0777. Valid only if OS is linux.
        """
        return pulumi.get(self, "directory_mode")

    @directory_mode.setter
    def directory_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory_mode", value)

    @property
    @pulumi.getter(name="fileMode")
    def file_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Default value is 0777. Valid only if OS is linux.
        """
        return pulumi.get(self, "file_mode")

    @file_mode.setter
    def file_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_mode", value)


@pulumi.input_type
class AzureStorageCredentialsInfoArgs:
    def __init__(__self__, *,
                 account_key: Optional[pulumi.Input[str]] = None,
                 account_key_secret_reference: Optional[pulumi.Input['KeyVaultSecretReferenceArgs']] = None):
        """
        Credentials to access Azure File Share.
        :param pulumi.Input[str] account_key: One of accountKey or accountKeySecretReference must be specified.
        :param pulumi.Input['KeyVaultSecretReferenceArgs'] account_key_secret_reference: Users can store their secrets in Azure KeyVault and pass it to the Batch AI Service to integrate with KeyVault. One of accountKey or accountKeySecretReference must be specified.
        """
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)
        if account_key_secret_reference is not None:
            pulumi.set(__self__, "account_key_secret_reference", account_key_secret_reference)

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[pulumi.Input[str]]:
        """
        One of accountKey or accountKeySecretReference must be specified.
        """
        return pulumi.get(self, "account_key")

    @account_key.setter
    def account_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_key", value)

    @property
    @pulumi.getter(name="accountKeySecretReference")
    def account_key_secret_reference(self) -> Optional[pulumi.Input['KeyVaultSecretReferenceArgs']]:
        """
        Users can store their secrets in Azure KeyVault and pass it to the Batch AI Service to integrate with KeyVault. One of accountKey or accountKeySecretReference must be specified.
        """
        return pulumi.get(self, "account_key_secret_reference")

    @account_key_secret_reference.setter
    def account_key_secret_reference(self, value: Optional[pulumi.Input['KeyVaultSecretReferenceArgs']]):
        pulumi.set(self, "account_key_secret_reference", value)


@pulumi.input_type
class CNTKsettingsArgs:
    def __init__(__self__, *,
                 command_line_args: Optional[pulumi.Input[str]] = None,
                 config_file_path: Optional[pulumi.Input[str]] = None,
                 language_type: Optional[pulumi.Input[str]] = None,
                 process_count: Optional[pulumi.Input[int]] = None,
                 python_interpreter_path: Optional[pulumi.Input[str]] = None,
                 python_script_file_path: Optional[pulumi.Input[str]] = None):
        """
        Specifies the settings for CNTK (aka Microsoft Cognitive Toolkit) job.
        :param pulumi.Input[str] config_file_path: This property can be specified only if the languageType is 'BrainScript'.
        :param pulumi.Input[str] language_type: Valid values are 'BrainScript' or 'Python'.
        :param pulumi.Input[int] process_count: The default value for this property is equal to nodeCount property
        :param pulumi.Input[str] python_interpreter_path: This property can be specified only if the languageType is 'Python'.
        :param pulumi.Input[str] python_script_file_path: This property can be specified only if the languageType is 'Python'.
        """
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if config_file_path is not None:
            pulumi.set(__self__, "config_file_path", config_file_path)
        if language_type is not None:
            pulumi.set(__self__, "language_type", language_type)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)
        if python_script_file_path is not None:
            pulumi.set(__self__, "python_script_file_path", python_script_file_path)

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command_line_args")

    @command_line_args.setter
    def command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_line_args", value)

    @property
    @pulumi.getter(name="configFilePath")
    def config_file_path(self) -> Optional[pulumi.Input[str]]:
        """
        This property can be specified only if the languageType is 'BrainScript'.
        """
        return pulumi.get(self, "config_file_path")

    @config_file_path.setter
    def config_file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_file_path", value)

    @property
    @pulumi.getter(name="languageType")
    def language_type(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are 'BrainScript' or 'Python'.
        """
        return pulumi.get(self, "language_type")

    @language_type.setter
    def language_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_type", value)

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[pulumi.Input[int]]:
        """
        The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @process_count.setter
    def process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_count", value)

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[pulumi.Input[str]]:
        """
        This property can be specified only if the languageType is 'Python'.
        """
        return pulumi.get(self, "python_interpreter_path")

    @python_interpreter_path.setter
    def python_interpreter_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_interpreter_path", value)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> Optional[pulumi.Input[str]]:
        """
        This property can be specified only if the languageType is 'Python'.
        """
        return pulumi.get(self, "python_script_file_path")

    @python_script_file_path.setter
    def python_script_file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_script_file_path", value)


@pulumi.input_type
class Caffe2SettingsArgs:
    def __init__(__self__, *,
                 python_script_file_path: pulumi.Input[str],
                 command_line_args: Optional[pulumi.Input[str]] = None,
                 python_interpreter_path: Optional[pulumi.Input[str]] = None):
        """
        Specifies the settings for Caffe2 job.
        """
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "python_script_file_path")

    @python_script_file_path.setter
    def python_script_file_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "python_script_file_path", value)

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command_line_args")

    @command_line_args.setter
    def command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_line_args", value)

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "python_interpreter_path")

    @python_interpreter_path.setter
    def python_interpreter_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_interpreter_path", value)


@pulumi.input_type
class CaffeSettingsArgs:
    def __init__(__self__, *,
                 command_line_args: Optional[pulumi.Input[str]] = None,
                 config_file_path: Optional[pulumi.Input[str]] = None,
                 process_count: Optional[pulumi.Input[int]] = None,
                 python_interpreter_path: Optional[pulumi.Input[str]] = None,
                 python_script_file_path: Optional[pulumi.Input[str]] = None):
        """
        Specifies the settings for Caffe job.
        :param pulumi.Input[str] config_file_path: This property cannot be specified if pythonScriptFilePath is specified.
        :param pulumi.Input[int] process_count: The default value for this property is equal to nodeCount property
        :param pulumi.Input[str] python_interpreter_path: This property can be specified only if the pythonScriptFilePath is specified.
        :param pulumi.Input[str] python_script_file_path: This property cannot be specified if configFilePath is specified.
        """
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if config_file_path is not None:
            pulumi.set(__self__, "config_file_path", config_file_path)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)
        if python_script_file_path is not None:
            pulumi.set(__self__, "python_script_file_path", python_script_file_path)

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command_line_args")

    @command_line_args.setter
    def command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_line_args", value)

    @property
    @pulumi.getter(name="configFilePath")
    def config_file_path(self) -> Optional[pulumi.Input[str]]:
        """
        This property cannot be specified if pythonScriptFilePath is specified.
        """
        return pulumi.get(self, "config_file_path")

    @config_file_path.setter
    def config_file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_file_path", value)

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[pulumi.Input[int]]:
        """
        The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @process_count.setter
    def process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_count", value)

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[pulumi.Input[str]]:
        """
        This property can be specified only if the pythonScriptFilePath is specified.
        """
        return pulumi.get(self, "python_interpreter_path")

    @python_interpreter_path.setter
    def python_interpreter_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_interpreter_path", value)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> Optional[pulumi.Input[str]]:
        """
        This property cannot be specified if configFilePath is specified.
        """
        return pulumi.get(self, "python_script_file_path")

    @python_script_file_path.setter
    def python_script_file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_script_file_path", value)


@pulumi.input_type
class ChainerSettingsArgs:
    def __init__(__self__, *,
                 python_script_file_path: pulumi.Input[str],
                 command_line_args: Optional[pulumi.Input[str]] = None,
                 process_count: Optional[pulumi.Input[int]] = None,
                 python_interpreter_path: Optional[pulumi.Input[str]] = None):
        """
        Specifies the settings for Chainer job.
        :param pulumi.Input[int] process_count: The default value for this property is equal to nodeCount property
        """
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "python_script_file_path")

    @python_script_file_path.setter
    def python_script_file_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "python_script_file_path", value)

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command_line_args")

    @command_line_args.setter
    def command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_line_args", value)

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[pulumi.Input[int]]:
        """
        The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @process_count.setter
    def process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_count", value)

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "python_interpreter_path")

    @python_interpreter_path.setter
    def python_interpreter_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_interpreter_path", value)


@pulumi.input_type
class ContainerSettingsArgs:
    def __init__(__self__, *,
                 image_source_registry: pulumi.Input['ImageSourceRegistryArgs']):
        """
        Settings for the container to be downloaded.
        :param pulumi.Input['ImageSourceRegistryArgs'] image_source_registry: Details of the container image such as name, URL and credentials.
        """
        pulumi.set(__self__, "image_source_registry", image_source_registry)

    @property
    @pulumi.getter(name="imageSourceRegistry")
    def image_source_registry(self) -> pulumi.Input['ImageSourceRegistryArgs']:
        """
        Details of the container image such as name, URL and credentials.
        """
        return pulumi.get(self, "image_source_registry")

    @image_source_registry.setter
    def image_source_registry(self, value: pulumi.Input['ImageSourceRegistryArgs']):
        pulumi.set(self, "image_source_registry", value)


@pulumi.input_type
class CustomToolkitSettingsArgs:
    def __init__(__self__, *,
                 command_line: Optional[pulumi.Input[str]] = None):
        """
        Specifies the settings for a custom tool kit job.
        """
        if command_line is not None:
            pulumi.set(__self__, "command_line", command_line)

    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command_line")

    @command_line.setter
    def command_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_line", value)


@pulumi.input_type
class DataDisksArgs:
    def __init__(__self__, *,
                 disk_count: pulumi.Input[int],
                 disk_size_in_gb: pulumi.Input[int],
                 storage_account_type: pulumi.Input[str]):
        """
        Settings for the data disk which would be created for the File Server.
        """
        pulumi.set(__self__, "disk_count", disk_count)
        pulumi.set(__self__, "disk_size_in_gb", disk_size_in_gb)
        pulumi.set(__self__, "storage_account_type", storage_account_type)

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "disk_count")

    @disk_count.setter
    def disk_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_count", value)

    @property
    @pulumi.getter(name="diskSizeInGB")
    def disk_size_in_gb(self) -> pulumi.Input[int]:
        return pulumi.get(self, "disk_size_in_gb")

    @disk_size_in_gb.setter
    def disk_size_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size_in_gb", value)

    @property
    @pulumi.getter(name="storageAccountType")
    def storage_account_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_account_type")

    @storage_account_type.setter
    def storage_account_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account_type", value)


@pulumi.input_type
class EnvironmentSettingArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        A collection of environment variables to set.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FileServerReferenceArgs:
    def __init__(__self__, *,
                 file_server: pulumi.Input['ResourceIdArgs'],
                 relative_mount_path: pulumi.Input[str],
                 mount_options: Optional[pulumi.Input[str]] = None,
                 source_directory: Optional[pulumi.Input[str]] = None):
        """
        Provides required information, for the service to be able to mount Azure FileShare on the cluster nodes.
        :param pulumi.Input['ResourceIdArgs'] file_server: Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        :param pulumi.Input[str] relative_mount_path: Note that all file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location.
        :param pulumi.Input[str] source_directory: If this property is not specified, the entire File Server will be mounted.
        """
        pulumi.set(__self__, "file_server", file_server)
        pulumi.set(__self__, "relative_mount_path", relative_mount_path)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)
        if source_directory is not None:
            pulumi.set(__self__, "source_directory", source_directory)

    @property
    @pulumi.getter(name="fileServer")
    def file_server(self) -> pulumi.Input['ResourceIdArgs']:
        """
        Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        """
        return pulumi.get(self, "file_server")

    @file_server.setter
    def file_server(self, value: pulumi.Input['ResourceIdArgs']):
        pulumi.set(self, "file_server", value)

    @property
    @pulumi.getter(name="relativeMountPath")
    def relative_mount_path(self) -> pulumi.Input[str]:
        """
        Note that all file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location.
        """
        return pulumi.get(self, "relative_mount_path")

    @relative_mount_path.setter
    def relative_mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_mount_path", value)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_options", value)

    @property
    @pulumi.getter(name="sourceDirectory")
    def source_directory(self) -> Optional[pulumi.Input[str]]:
        """
        If this property is not specified, the entire File Server will be mounted.
        """
        return pulumi.get(self, "source_directory")

    @source_directory.setter
    def source_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_directory", value)


@pulumi.input_type
class ImageReferenceArgs:
    def __init__(__self__, *,
                 offer: pulumi.Input[str],
                 publisher: pulumi.Input[str],
                 sku: pulumi.Input[str],
                 version: Optional[pulumi.Input[str]] = None):
        """
        The image reference.
        """
        pulumi.set(__self__, "offer", offer)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "sku", sku)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def offer(self) -> pulumi.Input[str]:
        return pulumi.get(self, "offer")

    @offer.setter
    def offer(self, value: pulumi.Input[str]):
        pulumi.set(self, "offer", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[str]:
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: pulumi.Input[str]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ImageSourceRegistryArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['PrivateRegistryCredentialsArgs']] = None,
                 server_url: Optional[pulumi.Input[str]] = None):
        """
        Details of the container image such as name, URL and credentials.
        :param pulumi.Input['PrivateRegistryCredentialsArgs'] credentials: Credentials to access a container image in a private repository.
        """
        pulumi.set(__self__, "image", image)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['PrivateRegistryCredentialsArgs']]:
        """
        Credentials to access a container image in a private repository.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['PrivateRegistryCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_url", value)


@pulumi.input_type
class InputDirectoryArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 path: pulumi.Input[str]):
        """
        Input directory for the job.
        :param pulumi.Input[str] id: It will be available for the job as an environment variable under AZ_BATCHAI_INPUT_id. The service will also provide the following  environment variable: AZ_BATCHAI_PREV_OUTPUT_Name. The value of the variable will be populated if the job is being retried after a previous failure, otherwise it will be set to nothing.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        It will be available for the job as an environment variable under AZ_BATCHAI_INPUT_id. The service will also provide the following  environment variable: AZ_BATCHAI_PREV_OUTPUT_Name. The value of the variable will be populated if the job is being retried after a previous failure, otherwise it will be set to nothing.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class JobBasePropertiesConstraintsArgs:
    def __init__(__self__, *,
                 max_wall_clock_time: Optional[pulumi.Input[str]] = None):
        """
        Constraints associated with the Job.
        :param pulumi.Input[str] max_wall_clock_time: Default Value = 1 week.
        """
        if max_wall_clock_time is not None:
            pulumi.set(__self__, "max_wall_clock_time", max_wall_clock_time)

    @property
    @pulumi.getter(name="maxWallClockTime")
    def max_wall_clock_time(self) -> Optional[pulumi.Input[str]]:
        """
        Default Value = 1 week.
        """
        return pulumi.get(self, "max_wall_clock_time")

    @max_wall_clock_time.setter
    def max_wall_clock_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_wall_clock_time", value)


@pulumi.input_type
class JobPreparationArgs:
    def __init__(__self__, *,
                 command_line: pulumi.Input[str]):
        """
        Specifies the settings for job preparation.
        :param pulumi.Input[str] command_line: If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
        """
        pulumi.set(__self__, "command_line", command_line)

    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> pulumi.Input[str]:
        """
        If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
        """
        return pulumi.get(self, "command_line")

    @command_line.setter
    def command_line(self, value: pulumi.Input[str]):
        pulumi.set(self, "command_line", value)


@pulumi.input_type
class KeyVaultSecretReferenceArgs:
    def __init__(__self__, *,
                 secret_url: pulumi.Input[str],
                 source_vault: pulumi.Input['ResourceIdArgs']):
        """
        Describes a reference to Key Vault Secret.
        :param pulumi.Input['ResourceIdArgs'] source_vault: Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        """
        pulumi.set(__self__, "secret_url", secret_url)
        pulumi.set(__self__, "source_vault", source_vault)

    @property
    @pulumi.getter(name="secretUrl")
    def secret_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_url")

    @secret_url.setter
    def secret_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_url", value)

    @property
    @pulumi.getter(name="sourceVault")
    def source_vault(self) -> pulumi.Input['ResourceIdArgs']:
        """
        Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        """
        return pulumi.get(self, "source_vault")

    @source_vault.setter
    def source_vault(self, value: pulumi.Input['ResourceIdArgs']):
        pulumi.set(self, "source_vault", value)


@pulumi.input_type
class ManualScaleSettingsArgs:
    def __init__(__self__, *,
                 target_node_count: pulumi.Input[int],
                 node_deallocation_option: Optional[pulumi.Input[str]] = None):
        """
        Manual scale settings for the cluster.
        :param pulumi.Input[int] target_node_count: Default is 0. If autoScaleSettings are not specified, then the Cluster starts with this target.
        :param pulumi.Input[str] node_deallocation_option: The default value is requeue.
        """
        pulumi.set(__self__, "target_node_count", target_node_count)
        if node_deallocation_option is not None:
            pulumi.set(__self__, "node_deallocation_option", node_deallocation_option)

    @property
    @pulumi.getter(name="targetNodeCount")
    def target_node_count(self) -> pulumi.Input[int]:
        """
        Default is 0. If autoScaleSettings are not specified, then the Cluster starts with this target.
        """
        return pulumi.get(self, "target_node_count")

    @target_node_count.setter
    def target_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_node_count", value)

    @property
    @pulumi.getter(name="nodeDeallocationOption")
    def node_deallocation_option(self) -> Optional[pulumi.Input[str]]:
        """
        The default value is requeue.
        """
        return pulumi.get(self, "node_deallocation_option")

    @node_deallocation_option.setter
    def node_deallocation_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_deallocation_option", value)


@pulumi.input_type
class MountVolumesArgs:
    def __init__(__self__, *,
                 azure_blob_file_systems: Optional[pulumi.Input[Sequence[pulumi.Input['AzureBlobFileSystemReferenceArgs']]]] = None,
                 azure_file_shares: Optional[pulumi.Input[Sequence[pulumi.Input['AzureFileShareReferenceArgs']]]] = None,
                 file_servers: Optional[pulumi.Input[Sequence[pulumi.Input['FileServerReferenceArgs']]]] = None,
                 unmanaged_file_systems: Optional[pulumi.Input[Sequence[pulumi.Input['UnmanagedFileSystemReferenceArgs']]]] = None):
        """
        Details of volumes to mount on the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['AzureBlobFileSystemReferenceArgs']]] azure_blob_file_systems: References to Azure Blob FUSE that are to be mounted to the cluster nodes.
        :param pulumi.Input[Sequence[pulumi.Input['AzureFileShareReferenceArgs']]] azure_file_shares: References to Azure File Shares that are to be mounted to the cluster nodes.
        """
        if azure_blob_file_systems is not None:
            pulumi.set(__self__, "azure_blob_file_systems", azure_blob_file_systems)
        if azure_file_shares is not None:
            pulumi.set(__self__, "azure_file_shares", azure_file_shares)
        if file_servers is not None:
            pulumi.set(__self__, "file_servers", file_servers)
        if unmanaged_file_systems is not None:
            pulumi.set(__self__, "unmanaged_file_systems", unmanaged_file_systems)

    @property
    @pulumi.getter(name="azureBlobFileSystems")
    def azure_blob_file_systems(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureBlobFileSystemReferenceArgs']]]]:
        """
        References to Azure Blob FUSE that are to be mounted to the cluster nodes.
        """
        return pulumi.get(self, "azure_blob_file_systems")

    @azure_blob_file_systems.setter
    def azure_blob_file_systems(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureBlobFileSystemReferenceArgs']]]]):
        pulumi.set(self, "azure_blob_file_systems", value)

    @property
    @pulumi.getter(name="azureFileShares")
    def azure_file_shares(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureFileShareReferenceArgs']]]]:
        """
        References to Azure File Shares that are to be mounted to the cluster nodes.
        """
        return pulumi.get(self, "azure_file_shares")

    @azure_file_shares.setter
    def azure_file_shares(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureFileShareReferenceArgs']]]]):
        pulumi.set(self, "azure_file_shares", value)

    @property
    @pulumi.getter(name="fileServers")
    def file_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FileServerReferenceArgs']]]]:
        return pulumi.get(self, "file_servers")

    @file_servers.setter
    def file_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FileServerReferenceArgs']]]]):
        pulumi.set(self, "file_servers", value)

    @property
    @pulumi.getter(name="unmanagedFileSystems")
    def unmanaged_file_systems(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UnmanagedFileSystemReferenceArgs']]]]:
        return pulumi.get(self, "unmanaged_file_systems")

    @unmanaged_file_systems.setter
    def unmanaged_file_systems(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UnmanagedFileSystemReferenceArgs']]]]):
        pulumi.set(self, "unmanaged_file_systems", value)


@pulumi.input_type
class NodeSetupArgs:
    def __init__(__self__, *,
                 mount_volumes: Optional[pulumi.Input['MountVolumesArgs']] = None,
                 setup_task: Optional[pulumi.Input['SetupTaskArgs']] = None):
        """
        Use this to prepare the VM. NOTE: The volumes specified in mountVolumes are mounted first and then the setupTask is run. Therefore the setup task can use local mountPaths in its execution.
        :param pulumi.Input['MountVolumesArgs'] mount_volumes: Details of volumes to mount on the cluster.
        :param pulumi.Input['SetupTaskArgs'] setup_task: Specifies a setup task which can be used to customize the compute nodes of the cluster.
        """
        if mount_volumes is not None:
            pulumi.set(__self__, "mount_volumes", mount_volumes)
        if setup_task is not None:
            pulumi.set(__self__, "setup_task", setup_task)

    @property
    @pulumi.getter(name="mountVolumes")
    def mount_volumes(self) -> Optional[pulumi.Input['MountVolumesArgs']]:
        """
        Details of volumes to mount on the cluster.
        """
        return pulumi.get(self, "mount_volumes")

    @mount_volumes.setter
    def mount_volumes(self, value: Optional[pulumi.Input['MountVolumesArgs']]):
        pulumi.set(self, "mount_volumes", value)

    @property
    @pulumi.getter(name="setupTask")
    def setup_task(self) -> Optional[pulumi.Input['SetupTaskArgs']]:
        """
        Specifies a setup task which can be used to customize the compute nodes of the cluster.
        """
        return pulumi.get(self, "setup_task")

    @setup_task.setter
    def setup_task(self, value: Optional[pulumi.Input['SetupTaskArgs']]):
        pulumi.set(self, "setup_task", value)


@pulumi.input_type
class OutputDirectoryArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 path_prefix: pulumi.Input[str],
                 create_new: Optional[pulumi.Input[bool]] = None,
                 path_suffix: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Output directory for the job.
        :param pulumi.Input[str] id: It will be available for the job as an environment variable under AZ_BATCHAI_OUTPUT_id.
        :param pulumi.Input[str] path_prefix: NOTE: This is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs.
        :param pulumi.Input[bool] create_new: Default is true. If false, then the directory is not created and can be any directory path that the user specifies.
        :param pulumi.Input[str] path_suffix: The suffix path where the output directory will be created.
        :param pulumi.Input[str] type: Default value is Custom. The possible values are Model, Logs, Summary, and Custom. Users can use multiple enums for a single directory. Eg. outPutType='Model,Logs, Summary'
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path_prefix", path_prefix)
        if create_new is not None:
            pulumi.set(__self__, "create_new", create_new)
        if path_suffix is not None:
            pulumi.set(__self__, "path_suffix", path_suffix)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        It will be available for the job as an environment variable under AZ_BATCHAI_OUTPUT_id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="pathPrefix")
    def path_prefix(self) -> pulumi.Input[str]:
        """
        NOTE: This is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs.
        """
        return pulumi.get(self, "path_prefix")

    @path_prefix.setter
    def path_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "path_prefix", value)

    @property
    @pulumi.getter(name="createNew")
    def create_new(self) -> Optional[pulumi.Input[bool]]:
        """
        Default is true. If false, then the directory is not created and can be any directory path that the user specifies.
        """
        return pulumi.get(self, "create_new")

    @create_new.setter
    def create_new(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_new", value)

    @property
    @pulumi.getter(name="pathSuffix")
    def path_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The suffix path where the output directory will be created.
        """
        return pulumi.get(self, "path_suffix")

    @path_suffix.setter
    def path_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_suffix", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Default value is Custom. The possible values are Model, Logs, Summary, and Custom. Users can use multiple enums for a single directory. Eg. outPutType='Model,Logs, Summary'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class PrivateRegistryCredentialsArgs:
    def __init__(__self__, *,
                 username: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 password_secret_reference: Optional[pulumi.Input['KeyVaultSecretReferenceArgs']] = None):
        """
        Credentials to access a container image in a private repository.
        :param pulumi.Input[str] password: One of password or passwordSecretReference must be specified.
        :param pulumi.Input['KeyVaultSecretReferenceArgs'] password_secret_reference: Users can store their secrets in Azure KeyVault and pass it to the Batch AI Service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
        """
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_secret_reference is not None:
            pulumi.set(__self__, "password_secret_reference", password_secret_reference)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        One of password or passwordSecretReference must be specified.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordSecretReference")
    def password_secret_reference(self) -> Optional[pulumi.Input['KeyVaultSecretReferenceArgs']]:
        """
        Users can store their secrets in Azure KeyVault and pass it to the Batch AI Service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
        """
        return pulumi.get(self, "password_secret_reference")

    @password_secret_reference.setter
    def password_secret_reference(self, value: Optional[pulumi.Input['KeyVaultSecretReferenceArgs']]):
        pulumi.set(self, "password_secret_reference", value)


@pulumi.input_type
class ResourceIdArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        :param pulumi.Input[str] id: The ID of the resource
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ScaleSettingsArgs:
    def __init__(__self__, *,
                 auto_scale: Optional[pulumi.Input['AutoScaleSettingsArgs']] = None,
                 manual: Optional[pulumi.Input['ManualScaleSettingsArgs']] = None):
        """
        At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
        :param pulumi.Input['AutoScaleSettingsArgs'] auto_scale: The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the pending and running jobs on the cluster.
        :param pulumi.Input['ManualScaleSettingsArgs'] manual: Manual scale settings for the cluster.
        """
        if auto_scale is not None:
            pulumi.set(__self__, "auto_scale", auto_scale)
        if manual is not None:
            pulumi.set(__self__, "manual", manual)

    @property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> Optional[pulumi.Input['AutoScaleSettingsArgs']]:
        """
        The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the pending and running jobs on the cluster.
        """
        return pulumi.get(self, "auto_scale")

    @auto_scale.setter
    def auto_scale(self, value: Optional[pulumi.Input['AutoScaleSettingsArgs']]):
        pulumi.set(self, "auto_scale", value)

    @property
    @pulumi.getter
    def manual(self) -> Optional[pulumi.Input['ManualScaleSettingsArgs']]:
        """
        Manual scale settings for the cluster.
        """
        return pulumi.get(self, "manual")

    @manual.setter
    def manual(self, value: Optional[pulumi.Input['ManualScaleSettingsArgs']]):
        pulumi.set(self, "manual", value)


@pulumi.input_type
class SetupTaskArgs:
    def __init__(__self__, *,
                 command_line: pulumi.Input[str],
                 std_out_err_path_prefix: pulumi.Input[str],
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentSettingArgs']]]] = None,
                 run_elevated: Optional[pulumi.Input[bool]] = None):
        """
        Specifies a setup task which can be used to customize the compute nodes of the cluster.
        :param pulumi.Input[str] std_out_err_path_prefix: The path where the Batch AI service will upload the stdout and stderror of setup task.
        """
        pulumi.set(__self__, "command_line", command_line)
        pulumi.set(__self__, "std_out_err_path_prefix", std_out_err_path_prefix)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if run_elevated is not None:
            pulumi.set(__self__, "run_elevated", run_elevated)

    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> pulumi.Input[str]:
        return pulumi.get(self, "command_line")

    @command_line.setter
    def command_line(self, value: pulumi.Input[str]):
        pulumi.set(self, "command_line", value)

    @property
    @pulumi.getter(name="stdOutErrPathPrefix")
    def std_out_err_path_prefix(self) -> pulumi.Input[str]:
        """
        The path where the Batch AI service will upload the stdout and stderror of setup task.
        """
        return pulumi.get(self, "std_out_err_path_prefix")

    @std_out_err_path_prefix.setter
    def std_out_err_path_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "std_out_err_path_prefix", value)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentSettingArgs']]]]:
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentSettingArgs']]]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter(name="runElevated")
    def run_elevated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_elevated")

    @run_elevated.setter
    def run_elevated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_elevated", value)


@pulumi.input_type
class SshConfigurationArgs:
    def __init__(__self__, *,
                 user_account_settings: pulumi.Input['UserAccountSettingsArgs'],
                 public_ips_to_allow: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        SSH configuration settings for the VM
        :param pulumi.Input['UserAccountSettingsArgs'] user_account_settings: Settings for user account that gets created on each on the nodes of a cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_ips_to_allow: Default value is '*' can be used to match all source IPs. Maximum number of publicIPs that can be specified are 400.
        """
        pulumi.set(__self__, "user_account_settings", user_account_settings)
        if public_ips_to_allow is not None:
            pulumi.set(__self__, "public_ips_to_allow", public_ips_to_allow)

    @property
    @pulumi.getter(name="userAccountSettings")
    def user_account_settings(self) -> pulumi.Input['UserAccountSettingsArgs']:
        """
        Settings for user account that gets created on each on the nodes of a cluster.
        """
        return pulumi.get(self, "user_account_settings")

    @user_account_settings.setter
    def user_account_settings(self, value: pulumi.Input['UserAccountSettingsArgs']):
        pulumi.set(self, "user_account_settings", value)

    @property
    @pulumi.getter(name="publicIPsToAllow")
    def public_ips_to_allow(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Default value is '*' can be used to match all source IPs. Maximum number of publicIPs that can be specified are 400.
        """
        return pulumi.get(self, "public_ips_to_allow")

    @public_ips_to_allow.setter
    def public_ips_to_allow(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_ips_to_allow", value)


@pulumi.input_type
class TensorFlowSettingsArgs:
    def __init__(__self__, *,
                 master_command_line_args: pulumi.Input[str],
                 python_script_file_path: pulumi.Input[str],
                 parameter_server_command_line_args: Optional[pulumi.Input[str]] = None,
                 parameter_server_count: Optional[pulumi.Input[int]] = None,
                 python_interpreter_path: Optional[pulumi.Input[str]] = None,
                 worker_command_line_args: Optional[pulumi.Input[str]] = None,
                 worker_count: Optional[pulumi.Input[int]] = None):
        """
        Specifies the settings for TensorFlow job.
        :param pulumi.Input[str] parameter_server_command_line_args: This property is optional for single machine training.
        :param pulumi.Input[int] parameter_server_count: If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training (This property is not applicable for single machine training). This property can be specified only for distributed TensorFlow training.
        :param pulumi.Input[str] worker_command_line_args: This property is optional for single machine training.
        :param pulumi.Input[int] worker_count: If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training
        """
        pulumi.set(__self__, "master_command_line_args", master_command_line_args)
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if parameter_server_command_line_args is not None:
            pulumi.set(__self__, "parameter_server_command_line_args", parameter_server_command_line_args)
        if parameter_server_count is not None:
            pulumi.set(__self__, "parameter_server_count", parameter_server_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)
        if worker_command_line_args is not None:
            pulumi.set(__self__, "worker_command_line_args", worker_command_line_args)
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)

    @property
    @pulumi.getter(name="masterCommandLineArgs")
    def master_command_line_args(self) -> pulumi.Input[str]:
        return pulumi.get(self, "master_command_line_args")

    @master_command_line_args.setter
    def master_command_line_args(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_command_line_args", value)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "python_script_file_path")

    @python_script_file_path.setter
    def python_script_file_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "python_script_file_path", value)

    @property
    @pulumi.getter(name="parameterServerCommandLineArgs")
    def parameter_server_command_line_args(self) -> Optional[pulumi.Input[str]]:
        """
        This property is optional for single machine training.
        """
        return pulumi.get(self, "parameter_server_command_line_args")

    @parameter_server_command_line_args.setter
    def parameter_server_command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_server_command_line_args", value)

    @property
    @pulumi.getter(name="parameterServerCount")
    def parameter_server_count(self) -> Optional[pulumi.Input[int]]:
        """
        If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training (This property is not applicable for single machine training). This property can be specified only for distributed TensorFlow training.
        """
        return pulumi.get(self, "parameter_server_count")

    @parameter_server_count.setter
    def parameter_server_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parameter_server_count", value)

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "python_interpreter_path")

    @python_interpreter_path.setter
    def python_interpreter_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_interpreter_path", value)

    @property
    @pulumi.getter(name="workerCommandLineArgs")
    def worker_command_line_args(self) -> Optional[pulumi.Input[str]]:
        """
        This property is optional for single machine training.
        """
        return pulumi.get(self, "worker_command_line_args")

    @worker_command_line_args.setter
    def worker_command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_command_line_args", value)

    @property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[pulumi.Input[int]]:
        """
        If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "worker_count", value)


@pulumi.input_type
class UnmanagedFileSystemReferenceArgs:
    def __init__(__self__, *,
                 mount_command: pulumi.Input[str],
                 relative_mount_path: pulumi.Input[str]):
        """
        Details of the file system to mount on the compute cluster nodes.
        :param pulumi.Input[str] relative_mount_path: Note that all file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location.
        """
        pulumi.set(__self__, "mount_command", mount_command)
        pulumi.set(__self__, "relative_mount_path", relative_mount_path)

    @property
    @pulumi.getter(name="mountCommand")
    def mount_command(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_command")

    @mount_command.setter
    def mount_command(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_command", value)

    @property
    @pulumi.getter(name="relativeMountPath")
    def relative_mount_path(self) -> pulumi.Input[str]:
        """
        Note that all file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location.
        """
        return pulumi.get(self, "relative_mount_path")

    @relative_mount_path.setter
    def relative_mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_mount_path", value)


@pulumi.input_type
class UserAccountSettingsArgs:
    def __init__(__self__, *,
                 admin_user_name: pulumi.Input[str],
                 admin_user_password: Optional[pulumi.Input[str]] = None,
                 admin_user_ssh_public_key: Optional[pulumi.Input[str]] = None):
        """
        Settings for user account that gets created on each on the nodes of a cluster.
        """
        pulumi.set(__self__, "admin_user_name", admin_user_name)
        if admin_user_password is not None:
            pulumi.set(__self__, "admin_user_password", admin_user_password)
        if admin_user_ssh_public_key is not None:
            pulumi.set(__self__, "admin_user_ssh_public_key", admin_user_ssh_public_key)

    @property
    @pulumi.getter(name="adminUserName")
    def admin_user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "admin_user_name")

    @admin_user_name.setter
    def admin_user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "admin_user_name", value)

    @property
    @pulumi.getter(name="adminUserPassword")
    def admin_user_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_user_password")

    @admin_user_password.setter
    def admin_user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_user_password", value)

    @property
    @pulumi.getter(name="adminUserSshPublicKey")
    def admin_user_ssh_public_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_user_ssh_public_key")

    @admin_user_ssh_public_key.setter
    def admin_user_ssh_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_user_ssh_public_key", value)


@pulumi.input_type
class VirtualMachineConfigurationArgs:
    def __init__(__self__, *,
                 image_reference: Optional[pulumi.Input['ImageReferenceArgs']] = None):
        """
        Settings for OS image.
        :param pulumi.Input['ImageReferenceArgs'] image_reference: The image reference.
        """
        if image_reference is not None:
            pulumi.set(__self__, "image_reference", image_reference)

    @property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> Optional[pulumi.Input['ImageReferenceArgs']]:
        """
        The image reference.
        """
        return pulumi.get(self, "image_reference")

    @image_reference.setter
    def image_reference(self, value: Optional[pulumi.Input['ImageReferenceArgs']]):
        pulumi.set(self, "image_reference", value)


