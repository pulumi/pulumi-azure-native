# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs
from ._enums import *

__all__ = [
    'AclResponse',
    'AttributesResponse',
    'DiskResponse',
    'IscsiLunResponse',
    'SkuResponse',
    'SystemMetadataResponse',
    'TargetPortalGroupResponse',
]

@pulumi.output_type
class AclResponse(dict):
    """
    Access Control List (ACL) for an iSCSI target lun
    """
    def __init__(__self__, *,
                 initiator_iqn: str,
                 mapped_luns: Sequence[str],
                 password: str,
                 username: str):
        """
        Access Control List (ACL) for an iSCSI target lun
        :param str initiator_iqn: iSCSI initiator iqn (iSCSI Qualified Name); example: iqn.2005-03.org.iscsi:client
        :param Sequence[str] mapped_luns: Array of lun names mapped to the ACL
        :param str password: Password for Challenge Handshake Authentication Protocol (CHAP) authentication
        :param str username: Username for Challenge Handshake Authentication Protocol (CHAP) authentication
        """
        pulumi.set(__self__, "initiator_iqn", initiator_iqn)
        pulumi.set(__self__, "mapped_luns", mapped_luns)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="initiatorIqn")
    def initiator_iqn(self) -> str:
        """
        iSCSI initiator iqn (iSCSI Qualified Name); example: iqn.2005-03.org.iscsi:client
        """
        return pulumi.get(self, "initiator_iqn")

    @property
    @pulumi.getter(name="mappedLuns")
    def mapped_luns(self) -> Sequence[str]:
        """
        Array of lun names mapped to the ACL
        """
        return pulumi.get(self, "mapped_luns")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password for Challenge Handshake Authentication Protocol (CHAP) authentication
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username for Challenge Handshake Authentication Protocol (CHAP) authentication
        """
        return pulumi.get(self, "username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AttributesResponse(dict):
    """
    Attributes of an iSCSI target
    """
    def __init__(__self__, *,
                 authentication: bool,
                 prod_mode_write_protect: bool):
        """
        Attributes of an iSCSI target
        :param bool authentication: Indicates whether or not authentication is enabled on the ACL.
        :param bool prod_mode_write_protect: Indicates whether or not write protect is enabled on the luns.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "prod_mode_write_protect", prod_mode_write_protect)

    @property
    @pulumi.getter
    def authentication(self) -> bool:
        """
        Indicates whether or not authentication is enabled on the ACL.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="prodModeWriteProtect")
    def prod_mode_write_protect(self) -> bool:
        """
        Indicates whether or not write protect is enabled on the luns.
        """
        return pulumi.get(self, "prod_mode_write_protect")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiskResponse(dict):
    """
    Managed disk to attach to the DiskPool. Required.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Managed disk to attach to the DiskPool. Required.
        :param str id: Unique Azure resource id of the managed disk. Required.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique Azure resource id of the managed disk. Required.
        """
        return pulumi.get(self, "id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IscsiLunResponse(dict):
    """
    Lun to expose the ManagedDisk.
    """
    def __init__(__self__, *,
                 managed_disk_azure_resource_id: str,
                 name: str):
        """
        Lun to expose the ManagedDisk.
        :param str managed_disk_azure_resource_id: Unique Azure resource id of the managed disk. Required.
        :param str name: Lun name.
        """
        pulumi.set(__self__, "managed_disk_azure_resource_id", managed_disk_azure_resource_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="managedDiskAzureResourceId")
    def managed_disk_azure_resource_id(self) -> str:
        """
        Unique Azure resource id of the managed disk. Required.
        """
        return pulumi.get(self, "managed_disk_azure_resource_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Lun name.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SkuResponse(dict):
    """
    The resource model definition representing SKU
    """
    def __init__(__self__, *,
                 name: str,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        The resource model definition representing SKU
        :param str name: The name of the SKU. Ex - P3. It is typically a letter+number code
        :param int capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param str family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param str size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param str tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SystemMetadataResponse(dict):
    """
    Resource metadata required by ARM RPC
    """
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Resource metadata required by ARM RPC
        :param str created_at: The timestamp of resource creation (UTC)
        :param str created_by: A string identifier for the identity that created the resource.
        :param str created_by_type: The type of identity that created the resource: user, application, managedIdentity
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: A string identifier for the identity that last modified the resource
        :param str last_modified_by_type: The type of identity that last modified the resource: user, application, managedIdentity
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC)
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        A string identifier for the identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource: user, application, managedIdentity
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        A string identifier for the identity that last modified the resource
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource: user, application, managedIdentity
        """
        return pulumi.get(self, "last_modified_by_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TargetPortalGroupResponse(dict):
    """
    iSCSI target portal group
    """
    def __init__(__self__, *,
                 acls: Sequence['outputs.AclResponse'],
                 attributes: 'outputs.AttributesResponse',
                 endpoints: Sequence[str],
                 luns: Sequence['outputs.IscsiLunResponse'],
                 port: int,
                 tag: int):
        """
        iSCSI target portal group
        :param Sequence['AclResponseArgs'] acls: Access Control List (ACL) for an iSCSI target lun
        :param 'AttributesResponseArgs' attributes: Attributes of an iSCSI target
        :param Sequence[str] endpoints: list of public ip addresses to connect to the iSCSI target
        :param Sequence['IscsiLunResponseArgs'] luns: Lun list to be exposed through the iSCSI target. Required
        :param int port: The port at which the iSCSI target is available
        :param int tag: The tag associated with the iSCSI target portal group
        """
        pulumi.set(__self__, "acls", acls)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "luns", luns)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def acls(self) -> Sequence['outputs.AclResponse']:
        """
        Access Control List (ACL) for an iSCSI target lun
        """
        return pulumi.get(self, "acls")

    @property
    @pulumi.getter
    def attributes(self) -> 'outputs.AttributesResponse':
        """
        Attributes of an iSCSI target
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence[str]:
        """
        list of public ip addresses to connect to the iSCSI target
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def luns(self) -> Sequence['outputs.IscsiLunResponse']:
        """
        Lun list to be exposed through the iSCSI target. Required
        """
        return pulumi.get(self, "luns")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port at which the iSCSI target is available
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def tag(self) -> int:
        """
        The tag associated with the iSCSI target portal group
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


