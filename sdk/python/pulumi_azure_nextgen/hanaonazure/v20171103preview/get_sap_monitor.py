# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'GetSapMonitorResult',
    'AwaitableGetSapMonitorResult',
    'get_sap_monitor',
]

@pulumi.output_type
class GetSapMonitorResult:
    """
    SAP monitor info on Azure (ARM properties and SAP monitor properties)
    """
    def __init__(__self__, enable_customer_analytics=None, hana_db_credentials_msi_id=None, hana_db_name=None, hana_db_password=None, hana_db_password_key_vault_url=None, hana_db_sql_port=None, hana_db_username=None, hana_hostname=None, hana_subnet=None, id=None, key_vault_id=None, location=None, log_analytics_workspace_arm_id=None, log_analytics_workspace_id=None, log_analytics_workspace_shared_key=None, managed_resource_group_name=None, name=None, provisioning_state=None, tags=None, type=None):
        if enable_customer_analytics and not isinstance(enable_customer_analytics, bool):
            raise TypeError("Expected argument 'enable_customer_analytics' to be a bool")
        pulumi.set(__self__, "enable_customer_analytics", enable_customer_analytics)
        if hana_db_credentials_msi_id and not isinstance(hana_db_credentials_msi_id, str):
            raise TypeError("Expected argument 'hana_db_credentials_msi_id' to be a str")
        pulumi.set(__self__, "hana_db_credentials_msi_id", hana_db_credentials_msi_id)
        if hana_db_name and not isinstance(hana_db_name, str):
            raise TypeError("Expected argument 'hana_db_name' to be a str")
        pulumi.set(__self__, "hana_db_name", hana_db_name)
        if hana_db_password and not isinstance(hana_db_password, str):
            raise TypeError("Expected argument 'hana_db_password' to be a str")
        pulumi.set(__self__, "hana_db_password", hana_db_password)
        if hana_db_password_key_vault_url and not isinstance(hana_db_password_key_vault_url, str):
            raise TypeError("Expected argument 'hana_db_password_key_vault_url' to be a str")
        pulumi.set(__self__, "hana_db_password_key_vault_url", hana_db_password_key_vault_url)
        if hana_db_sql_port and not isinstance(hana_db_sql_port, int):
            raise TypeError("Expected argument 'hana_db_sql_port' to be a int")
        pulumi.set(__self__, "hana_db_sql_port", hana_db_sql_port)
        if hana_db_username and not isinstance(hana_db_username, str):
            raise TypeError("Expected argument 'hana_db_username' to be a str")
        pulumi.set(__self__, "hana_db_username", hana_db_username)
        if hana_hostname and not isinstance(hana_hostname, str):
            raise TypeError("Expected argument 'hana_hostname' to be a str")
        pulumi.set(__self__, "hana_hostname", hana_hostname)
        if hana_subnet and not isinstance(hana_subnet, str):
            raise TypeError("Expected argument 'hana_subnet' to be a str")
        pulumi.set(__self__, "hana_subnet", hana_subnet)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_vault_id and not isinstance(key_vault_id, str):
            raise TypeError("Expected argument 'key_vault_id' to be a str")
        pulumi.set(__self__, "key_vault_id", key_vault_id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if log_analytics_workspace_arm_id and not isinstance(log_analytics_workspace_arm_id, str):
            raise TypeError("Expected argument 'log_analytics_workspace_arm_id' to be a str")
        pulumi.set(__self__, "log_analytics_workspace_arm_id", log_analytics_workspace_arm_id)
        if log_analytics_workspace_id and not isinstance(log_analytics_workspace_id, str):
            raise TypeError("Expected argument 'log_analytics_workspace_id' to be a str")
        pulumi.set(__self__, "log_analytics_workspace_id", log_analytics_workspace_id)
        if log_analytics_workspace_shared_key and not isinstance(log_analytics_workspace_shared_key, str):
            raise TypeError("Expected argument 'log_analytics_workspace_shared_key' to be a str")
        pulumi.set(__self__, "log_analytics_workspace_shared_key", log_analytics_workspace_shared_key)
        if managed_resource_group_name and not isinstance(managed_resource_group_name, str):
            raise TypeError("Expected argument 'managed_resource_group_name' to be a str")
        pulumi.set(__self__, "managed_resource_group_name", managed_resource_group_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="enableCustomerAnalytics")
    def enable_customer_analytics(self) -> Optional[bool]:
        """
        The value indicating whether to send analytics to Microsoft
        """
        return pulumi.get(self, "enable_customer_analytics")

    @property
    @pulumi.getter(name="hanaDbCredentialsMsiId")
    def hana_db_credentials_msi_id(self) -> Optional[str]:
        """
        MSI ID passed by customer which has access to customer's KeyVault and to be assigned to the Collector VM.
        """
        return pulumi.get(self, "hana_db_credentials_msi_id")

    @property
    @pulumi.getter(name="hanaDbName")
    def hana_db_name(self) -> Optional[str]:
        """
        Database name of the HANA instance.
        """
        return pulumi.get(self, "hana_db_name")

    @property
    @pulumi.getter(name="hanaDbPassword")
    def hana_db_password(self) -> Optional[str]:
        """
        Database password of the HANA instance.
        """
        return pulumi.get(self, "hana_db_password")

    @property
    @pulumi.getter(name="hanaDbPasswordKeyVaultUrl")
    def hana_db_password_key_vault_url(self) -> Optional[str]:
        """
        KeyVault URL link to the password for the HANA database.
        """
        return pulumi.get(self, "hana_db_password_key_vault_url")

    @property
    @pulumi.getter(name="hanaDbSqlPort")
    def hana_db_sql_port(self) -> Optional[int]:
        """
        Database port of the HANA instance.
        """
        return pulumi.get(self, "hana_db_sql_port")

    @property
    @pulumi.getter(name="hanaDbUsername")
    def hana_db_username(self) -> Optional[str]:
        """
        Database username of the HANA instance.
        """
        return pulumi.get(self, "hana_db_username")

    @property
    @pulumi.getter(name="hanaHostname")
    def hana_hostname(self) -> Optional[str]:
        """
        Hostname of the HANA instance.
        """
        return pulumi.get(self, "hana_hostname")

    @property
    @pulumi.getter(name="hanaSubnet")
    def hana_subnet(self) -> Optional[str]:
        """
        Specifies the SAP monitor unique ID.
        """
        return pulumi.get(self, "hana_subnet")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyVaultId")
    def key_vault_id(self) -> Optional[str]:
        """
        Key Vault ID containing customer's HANA credentials.
        """
        return pulumi.get(self, "key_vault_id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Resource location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="logAnalyticsWorkspaceArmId")
    def log_analytics_workspace_arm_id(self) -> Optional[str]:
        """
        The ARM ID of the Log Analytics Workspace that is used for monitoring
        """
        return pulumi.get(self, "log_analytics_workspace_arm_id")

    @property
    @pulumi.getter(name="logAnalyticsWorkspaceId")
    def log_analytics_workspace_id(self) -> Optional[str]:
        """
        The workspace ID of the log analytics workspace to be used for monitoring
        """
        return pulumi.get(self, "log_analytics_workspace_id")

    @property
    @pulumi.getter(name="logAnalyticsWorkspaceSharedKey")
    def log_analytics_workspace_shared_key(self) -> Optional[str]:
        """
        The shared key of the log analytics workspace that is used for monitoring
        """
        return pulumi.get(self, "log_analytics_workspace_shared_key")

    @property
    @pulumi.getter(name="managedResourceGroupName")
    def managed_resource_group_name(self) -> str:
        """
        The name of the resource group the SAP Monitor resources get deployed into.
        """
        return pulumi.get(self, "managed_resource_group_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        """
        State of provisioning of the HanaInstance
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")


class AwaitableGetSapMonitorResult(GetSapMonitorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSapMonitorResult(
            enable_customer_analytics=self.enable_customer_analytics,
            hana_db_credentials_msi_id=self.hana_db_credentials_msi_id,
            hana_db_name=self.hana_db_name,
            hana_db_password=self.hana_db_password,
            hana_db_password_key_vault_url=self.hana_db_password_key_vault_url,
            hana_db_sql_port=self.hana_db_sql_port,
            hana_db_username=self.hana_db_username,
            hana_hostname=self.hana_hostname,
            hana_subnet=self.hana_subnet,
            id=self.id,
            key_vault_id=self.key_vault_id,
            location=self.location,
            log_analytics_workspace_arm_id=self.log_analytics_workspace_arm_id,
            log_analytics_workspace_id=self.log_analytics_workspace_id,
            log_analytics_workspace_shared_key=self.log_analytics_workspace_shared_key,
            managed_resource_group_name=self.managed_resource_group_name,
            name=self.name,
            provisioning_state=self.provisioning_state,
            tags=self.tags,
            type=self.type)


def get_sap_monitor(resource_group_name: Optional[str] = None,
                    sap_monitor_name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSapMonitorResult:
    """
    Use this data source to access information about an existing resource.

    :param str resource_group_name: Name of the resource group.
    :param str sap_monitor_name: Name of the SAP monitor resource.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['sapMonitorName'] = sap_monitor_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-nextgen:hanaonazure/v20171103preview:getSapMonitor', __args__, opts=opts, typ=GetSapMonitorResult).value

    return AwaitableGetSapMonitorResult(
        enable_customer_analytics=__ret__.enable_customer_analytics,
        hana_db_credentials_msi_id=__ret__.hana_db_credentials_msi_id,
        hana_db_name=__ret__.hana_db_name,
        hana_db_password=__ret__.hana_db_password,
        hana_db_password_key_vault_url=__ret__.hana_db_password_key_vault_url,
        hana_db_sql_port=__ret__.hana_db_sql_port,
        hana_db_username=__ret__.hana_db_username,
        hana_hostname=__ret__.hana_hostname,
        hana_subnet=__ret__.hana_subnet,
        id=__ret__.id,
        key_vault_id=__ret__.key_vault_id,
        location=__ret__.location,
        log_analytics_workspace_arm_id=__ret__.log_analytics_workspace_arm_id,
        log_analytics_workspace_id=__ret__.log_analytics_workspace_id,
        log_analytics_workspace_shared_key=__ret__.log_analytics_workspace_shared_key,
        managed_resource_group_name=__ret__.managed_resource_group_name,
        name=__ret__.name,
        provisioning_state=__ret__.provisioning_state,
        tags=__ret__.tags,
        type=__ret__.type)
