# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Case']


class Case(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 case_id: Optional[pulumi.Input[str]] = None,
                 close_reason: Optional[pulumi.Input[str]] = None,
                 closed_reason_text: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 end_time_utc: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operational_insights_resource_provider: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[pulumi.InputType['UserInfoArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 start_time_utc: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Represents a case in Azure Security Insights.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] case_id: Case ID
        :param pulumi.Input[str] close_reason: The reason the case was closed
        :param pulumi.Input[str] closed_reason_text: the case close reason details
        :param pulumi.Input[str] description: The description of the case
        :param pulumi.Input[str] end_time_utc: The end time of the case
        :param pulumi.Input[str] etag: Etag of the azure resource
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: List of labels relevant to this case
        :param pulumi.Input[str] operational_insights_resource_provider: The namespace of workspaces resource provider- Microsoft.OperationalInsights.
        :param pulumi.Input[pulumi.InputType['UserInfoArgs']] owner: Describes a user that the case is assigned to
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.
        :param pulumi.Input[str] severity: The severity of the case
        :param pulumi.Input[str] start_time_utc: The start time of the case
        :param pulumi.Input[str] status: The status of the case
        :param pulumi.Input[str] title: The title of the case
        :param pulumi.Input[str] workspace_name: The name of the workspace.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if case_id is None:
                raise TypeError("Missing required property 'case_id'")
            __props__['case_id'] = case_id
            __props__['close_reason'] = close_reason
            __props__['closed_reason_text'] = closed_reason_text
            __props__['description'] = description
            __props__['end_time_utc'] = end_time_utc
            __props__['etag'] = etag
            __props__['labels'] = labels
            if operational_insights_resource_provider is None:
                raise TypeError("Missing required property 'operational_insights_resource_provider'")
            __props__['operational_insights_resource_provider'] = operational_insights_resource_provider
            __props__['owner'] = owner
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if severity is None:
                raise TypeError("Missing required property 'severity'")
            __props__['severity'] = severity
            if start_time_utc is None:
                raise TypeError("Missing required property 'start_time_utc'")
            __props__['start_time_utc'] = start_time_utc
            if status is None:
                raise TypeError("Missing required property 'status'")
            __props__['status'] = status
            if title is None:
                raise TypeError("Missing required property 'title'")
            __props__['title'] = title
            if workspace_name is None:
                raise TypeError("Missing required property 'workspace_name'")
            __props__['workspace_name'] = workspace_name
            __props__['case_number'] = None
            __props__['created_time_utc'] = None
            __props__['last_comment'] = None
            __props__['last_updated_time_utc'] = None
            __props__['name'] = None
            __props__['related_alert_ids'] = None
            __props__['tactics'] = None
            __props__['total_comments'] = None
            __props__['type'] = None
        super(Case, __self__).__init__(
            'azure-nextgen:securityinsights/v20190101preview:Case',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Case':
        """
        Get an existing Case resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Case(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="caseNumber")
    def case_number(self) -> pulumi.Output[int]:
        """
        a sequential number
        """
        return pulumi.get(self, "case_number")

    @property
    @pulumi.getter(name="closeReason")
    def close_reason(self) -> pulumi.Output[Optional[str]]:
        """
        The reason the case was closed
        """
        return pulumi.get(self, "close_reason")

    @property
    @pulumi.getter(name="closedReasonText")
    def closed_reason_text(self) -> pulumi.Output[Optional[str]]:
        """
        the case close reason details
        """
        return pulumi.get(self, "closed_reason_text")

    @property
    @pulumi.getter(name="createdTimeUtc")
    def created_time_utc(self) -> pulumi.Output[str]:
        """
        The time the case was created
        """
        return pulumi.get(self, "created_time_utc")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the case
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> pulumi.Output[Optional[str]]:
        """
        The end time of the case
        """
        return pulumi.get(self, "end_time_utc")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[Optional[str]]:
        """
        Etag of the azure resource
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of labels relevant to this case
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastComment")
    def last_comment(self) -> pulumi.Output[str]:
        """
        the last comment in the case
        """
        return pulumi.get(self, "last_comment")

    @property
    @pulumi.getter(name="lastUpdatedTimeUtc")
    def last_updated_time_utc(self) -> pulumi.Output[str]:
        """
        The last time the case was updated
        """
        return pulumi.get(self, "last_updated_time_utc")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Azure resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[Optional['outputs.UserInfoResponse']]:
        """
        Describes a user that the case is assigned to
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="relatedAlertIds")
    def related_alert_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        List of related alert identifiers
        """
        return pulumi.get(self, "related_alert_ids")

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Output[str]:
        """
        The severity of the case
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> pulumi.Output[str]:
        """
        The start time of the case
        """
        return pulumi.get(self, "start_time_utc")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the case
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tactics(self) -> pulumi.Output[Sequence[str]]:
        """
        The tactics associated with case
        """
        return pulumi.get(self, "tactics")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        The title of the case
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="totalComments")
    def total_comments(self) -> pulumi.Output[int]:
        """
        the number of total comments in the case
        """
        return pulumi.get(self, "total_comments")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Azure resource type
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

