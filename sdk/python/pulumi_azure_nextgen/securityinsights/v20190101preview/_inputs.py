# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'IncidentInfoArgs',
    'IncidentLabelArgs',
    'IncidentOwnerInfoArgs',
    'RelationNodeArgs',
    'ThreatIntelligenceGranularMarkingModelArgs',
    'ThreatIntelligenceKillChainPhaseArgs',
    'UserInfoArgs',
    'WatchlistItemArgs',
]

@pulumi.input_type
class IncidentInfoArgs:
    def __init__(__self__, *,
                 incident_id: pulumi.Input[str],
                 relation_name: pulumi.Input[str],
                 severity: pulumi.Input[str],
                 title: pulumi.Input[str]):
        """
        Describes related incident information for the bookmark
        :param pulumi.Input[str] incident_id: Incident Id
        :param pulumi.Input[str] relation_name: Relation Name
        :param pulumi.Input[str] severity: The severity of the incident
        :param pulumi.Input[str] title: The title of the incident
        """
        pulumi.set(__self__, "incident_id", incident_id)
        pulumi.set(__self__, "relation_name", relation_name)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="incidentId")
    def incident_id(self) -> pulumi.Input[str]:
        """
        Incident Id
        """
        return pulumi.get(self, "incident_id")

    @incident_id.setter
    def incident_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "incident_id", value)

    @property
    @pulumi.getter(name="relationName")
    def relation_name(self) -> pulumi.Input[str]:
        """
        Relation Name
        """
        return pulumi.get(self, "relation_name")

    @relation_name.setter
    def relation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "relation_name", value)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[str]:
        """
        The severity of the incident
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the incident
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class IncidentLabelArgs:
    def __init__(__self__, *,
                 label_name: pulumi.Input[str]):
        """
        Represents an incident label
        :param pulumi.Input[str] label_name: The name of the label
        """
        pulumi.set(__self__, "label_name", label_name)

    @property
    @pulumi.getter(name="labelName")
    def label_name(self) -> pulumi.Input[str]:
        """
        The name of the label
        """
        return pulumi.get(self, "label_name")

    @label_name.setter
    def label_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "label_name", value)


@pulumi.input_type
class IncidentOwnerInfoArgs:
    def __init__(__self__, *,
                 assigned_to: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 user_principal_name: Optional[pulumi.Input[str]] = None):
        """
        Information on the user an incident is assigned to
        :param pulumi.Input[str] assigned_to: The name of the user the incident is assigned to.
        :param pulumi.Input[str] email: The email of the user the incident is assigned to.
        :param pulumi.Input[str] object_id: The object id of the user the incident is assigned to.
        :param pulumi.Input[str] user_principal_name: The user principal name of the user the incident is assigned to.
        """
        if assigned_to is not None:
            pulumi.set(__self__, "assigned_to", assigned_to)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if user_principal_name is not None:
            pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="assignedTo")
    def assigned_to(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the user the incident is assigned to.
        """
        return pulumi.get(self, "assigned_to")

    @assigned_to.setter
    def assigned_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assigned_to", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The email of the user the incident is assigned to.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        The object id of the user the incident is assigned to.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user principal name of the user the incident is assigned to.
        """
        return pulumi.get(self, "user_principal_name")

    @user_principal_name.setter
    def user_principal_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_principal_name", value)


@pulumi.input_type
class RelationNodeArgs:
    def __init__(__self__, *,
                 etag: Optional[pulumi.Input[str]] = None,
                 relation_additional_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 relation_node_id: Optional[pulumi.Input[str]] = None):
        """
        Relation node
        :param pulumi.Input[str] etag: Etag for relation node
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] relation_additional_properties: Additional set of properties
        :param pulumi.Input[str] relation_node_id: Relation Node Id
        """
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if relation_additional_properties is not None:
            pulumi.set(__self__, "relation_additional_properties", relation_additional_properties)
        if relation_node_id is not None:
            pulumi.set(__self__, "relation_node_id", relation_node_id)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        Etag for relation node
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="relationAdditionalProperties")
    def relation_additional_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional set of properties
        """
        return pulumi.get(self, "relation_additional_properties")

    @relation_additional_properties.setter
    def relation_additional_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "relation_additional_properties", value)

    @property
    @pulumi.getter(name="relationNodeId")
    def relation_node_id(self) -> Optional[pulumi.Input[str]]:
        """
        Relation Node Id
        """
        return pulumi.get(self, "relation_node_id")

    @relation_node_id.setter
    def relation_node_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relation_node_id", value)


@pulumi.input_type
class ThreatIntelligenceGranularMarkingModelArgs:
    def __init__(__self__, *,
                 language: Optional[pulumi.Input[str]] = None,
                 marking_ref: Optional[pulumi.Input[int]] = None,
                 selectors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Describes threat granular marking model entity
        :param pulumi.Input[str] language: Language granular marking model
        :param pulumi.Input[int] marking_ref: marking reference granular marking model
        :param pulumi.Input[Sequence[pulumi.Input[str]]] selectors: granular marking model selectors
        """
        if language is not None:
            pulumi.set(__self__, "language", language)
        if marking_ref is not None:
            pulumi.set(__self__, "marking_ref", marking_ref)
        if selectors is not None:
            pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        """
        Language granular marking model
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter(name="markingRef")
    def marking_ref(self) -> Optional[pulumi.Input[int]]:
        """
        marking reference granular marking model
        """
        return pulumi.get(self, "marking_ref")

    @marking_ref.setter
    def marking_ref(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "marking_ref", value)

    @property
    @pulumi.getter
    def selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        granular marking model selectors
        """
        return pulumi.get(self, "selectors")

    @selectors.setter
    def selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "selectors", value)


@pulumi.input_type
class ThreatIntelligenceKillChainPhaseArgs:
    def __init__(__self__, *,
                 kill_chain_name: Optional[pulumi.Input[str]] = None,
                 phase_name: Optional[pulumi.Input[int]] = None):
        """
        Describes threat kill chain phase entity
        :param pulumi.Input[str] kill_chain_name: Kill chainName name
        :param pulumi.Input[int] phase_name: Phase name
        """
        if kill_chain_name is not None:
            pulumi.set(__self__, "kill_chain_name", kill_chain_name)
        if phase_name is not None:
            pulumi.set(__self__, "phase_name", phase_name)

    @property
    @pulumi.getter(name="killChainName")
    def kill_chain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Kill chainName name
        """
        return pulumi.get(self, "kill_chain_name")

    @kill_chain_name.setter
    def kill_chain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kill_chain_name", value)

    @property
    @pulumi.getter(name="phaseName")
    def phase_name(self) -> Optional[pulumi.Input[int]]:
        """
        Phase name
        """
        return pulumi.get(self, "phase_name")

    @phase_name.setter
    def phase_name(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "phase_name", value)


@pulumi.input_type
class UserInfoArgs:
    def __init__(__self__, *,
                 object_id: Optional[pulumi.Input[str]] = None):
        """
        User information that made some action
        :param pulumi.Input[str] object_id: The object id of the user.
        """
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        The object id of the user.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)


@pulumi.input_type
class WatchlistItemArgs:
    def __init__(__self__, *,
                 watchlist_id: pulumi.Input[str],
                 watchlist_item_pair: pulumi.Input[Mapping[str, Any]],
                 created_by: Optional[pulumi.Input['UserInfoArgs']] = None,
                 created_time_utc: Optional[pulumi.Input[str]] = None,
                 entity_mapping: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 last_updated_time_utc: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 time_to_live_utc: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input['UserInfoArgs']] = None,
                 watchlist_item_name: Optional[pulumi.Input[str]] = None,
                 watchlist_item_type: Optional[pulumi.Input[str]] = None):
        """
        Represents a Watchlist Item in Azure Security Insights.
        :param pulumi.Input[str] watchlist_id: The watchlist id of the parent of this watchlist item
        :param pulumi.Input[Mapping[str, Any]] watchlist_item_pair: A key-value pair for a watchlist item
        :param pulumi.Input['UserInfoArgs'] created_by: Describes a user that created the watchlist
        :param pulumi.Input[str] created_time_utc: The time the watchlist item was created
        :param pulumi.Input[Mapping[str, Any]] entity_mapping: A key-value pair for a watchlist item entity mapping
        :param pulumi.Input[str] last_updated_time_utc: The last time the watchlist item was updated
        :param pulumi.Input[str] tenant_id: The tenantId to which this watchlist item belongs to
        :param pulumi.Input[str] time_to_live_utc: The time to live for the watchlist item
        :param pulumi.Input['UserInfoArgs'] updated_by: Describes a user that updated the watchlist
        :param pulumi.Input[str] watchlist_item_name: Name of the watchlist item
        :param pulumi.Input[str] watchlist_item_type: The type of the watchlist item
        """
        pulumi.set(__self__, "watchlist_id", watchlist_id)
        pulumi.set(__self__, "watchlist_item_pair", watchlist_item_pair)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_time_utc is not None:
            pulumi.set(__self__, "created_time_utc", created_time_utc)
        if entity_mapping is not None:
            pulumi.set(__self__, "entity_mapping", entity_mapping)
        if last_updated_time_utc is not None:
            pulumi.set(__self__, "last_updated_time_utc", last_updated_time_utc)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if time_to_live_utc is not None:
            pulumi.set(__self__, "time_to_live_utc", time_to_live_utc)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if watchlist_item_name is not None:
            pulumi.set(__self__, "watchlist_item_name", watchlist_item_name)
        if watchlist_item_type is not None:
            pulumi.set(__self__, "watchlist_item_type", watchlist_item_type)

    @property
    @pulumi.getter(name="watchlistId")
    def watchlist_id(self) -> pulumi.Input[str]:
        """
        The watchlist id of the parent of this watchlist item
        """
        return pulumi.get(self, "watchlist_id")

    @watchlist_id.setter
    def watchlist_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "watchlist_id", value)

    @property
    @pulumi.getter(name="watchlistItemPair")
    def watchlist_item_pair(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        A key-value pair for a watchlist item
        """
        return pulumi.get(self, "watchlist_item_pair")

    @watchlist_item_pair.setter
    def watchlist_item_pair(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "watchlist_item_pair", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input['UserInfoArgs']]:
        """
        Describes a user that created the watchlist
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input['UserInfoArgs']]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdTimeUtc")
    def created_time_utc(self) -> Optional[pulumi.Input[str]]:
        """
        The time the watchlist item was created
        """
        return pulumi.get(self, "created_time_utc")

    @created_time_utc.setter
    def created_time_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_time_utc", value)

    @property
    @pulumi.getter(name="entityMapping")
    def entity_mapping(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A key-value pair for a watchlist item entity mapping
        """
        return pulumi.get(self, "entity_mapping")

    @entity_mapping.setter
    def entity_mapping(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "entity_mapping", value)

    @property
    @pulumi.getter(name="lastUpdatedTimeUtc")
    def last_updated_time_utc(self) -> Optional[pulumi.Input[str]]:
        """
        The last time the watchlist item was updated
        """
        return pulumi.get(self, "last_updated_time_utc")

    @last_updated_time_utc.setter
    def last_updated_time_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated_time_utc", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The tenantId to which this watchlist item belongs to
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="timeToLiveUtc")
    def time_to_live_utc(self) -> Optional[pulumi.Input[str]]:
        """
        The time to live for the watchlist item
        """
        return pulumi.get(self, "time_to_live_utc")

    @time_to_live_utc.setter
    def time_to_live_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_to_live_utc", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input['UserInfoArgs']]:
        """
        Describes a user that updated the watchlist
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input['UserInfoArgs']]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="watchlistItemName")
    def watchlist_item_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the watchlist item
        """
        return pulumi.get(self, "watchlist_item_name")

    @watchlist_item_name.setter
    def watchlist_item_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "watchlist_item_name", value)

    @property
    @pulumi.getter(name="watchlistItemType")
    def watchlist_item_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the watchlist item
        """
        return pulumi.get(self, "watchlist_item_type")

    @watchlist_item_type.setter
    def watchlist_item_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "watchlist_item_type", value)


