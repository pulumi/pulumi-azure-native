# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Vault(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    The supported Azure location where the key vault should be created.
    """
    name: pulumi.Output[str]
    """
    The name of the key vault.
    """
    properties: pulumi.Output[dict]
    """
    Properties of the vault
      * `access_policies` (`list`) - An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.
        * `application_id` (`str`) -  Application ID of the client making request on behalf of a principal
        * `object_id` (`str`) - The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
        * `permissions` (`dict`) - Permissions the identity has for keys, secrets and certificates.
          * `certificates` (`list`) - Permissions to certificates
          * `keys` (`list`) - Permissions to keys
          * `secrets` (`list`) - Permissions to secrets
          * `storage` (`list`) - Permissions to storage accounts

        * `tenant_id` (`str`) - The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.

      * `create_mode` (`str`) - The vault's create mode to indicate whether the vault need to be recovered or not.
      * `enable_purge_protection` (`bool`) - Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
      * `enable_soft_delete` (`bool`) - Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
      * `enabled_for_deployment` (`bool`) - Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
      * `enabled_for_disk_encryption` (`bool`) - Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
      * `enabled_for_template_deployment` (`bool`) - Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
      * `sku` (`dict`) - SKU details
        * `family` (`str`) - SKU family name
        * `name` (`str`) - SKU name to specify whether the key vault is a standard vault or a premium vault.

      * `tenant_id` (`str`) - The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
      * `vault_uri` (`str`) - The URI of the vault for performing operations on keys and secrets.
    """
    tags: pulumi.Output[dict]
    """
    The tags that will be assigned to the key vault. 
    """
    type: pulumi.Output[str]
    """
    The resource type of the key vault.
    """
    def __init__(__self__, resource_name, opts=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Resource information with extended details.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: The supported Azure location where the key vault should be created.
        :param pulumi.Input[str] name: Name of the vault
        :param pulumi.Input[dict] properties: Properties of the vault
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group to which the server belongs.
        :param pulumi.Input[dict] tags: The tags that will be assigned to the key vault.

        The **properties** object supports the following:

          * `access_policies` (`pulumi.Input[list]`) - An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.
            * `application_id` (`pulumi.Input[str]`) -  Application ID of the client making request on behalf of a principal
            * `object_id` (`pulumi.Input[str]`) - The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
            * `permissions` (`pulumi.Input[dict]`) - Permissions the identity has for keys, secrets and certificates.
              * `certificates` (`pulumi.Input[list]`) - Permissions to certificates
              * `keys` (`pulumi.Input[list]`) - Permissions to keys
              * `secrets` (`pulumi.Input[list]`) - Permissions to secrets
              * `storage` (`pulumi.Input[list]`) - Permissions to storage accounts

            * `tenant_id` (`pulumi.Input[str]`) - The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.

          * `create_mode` (`pulumi.Input[str]`) - The vault's create mode to indicate whether the vault need to be recovered or not.
          * `enable_purge_protection` (`pulumi.Input[bool]`) - Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
          * `enable_soft_delete` (`pulumi.Input[bool]`) - Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
          * `enabled_for_deployment` (`pulumi.Input[bool]`) - Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
          * `enabled_for_disk_encryption` (`pulumi.Input[bool]`) - Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
          * `enabled_for_template_deployment` (`pulumi.Input[bool]`) - Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
          * `sku` (`pulumi.Input[dict]`) - SKU details
            * `family` (`pulumi.Input[str]`) - SKU family name
            * `name` (`pulumi.Input[str]`) - SKU name to specify whether the key vault is a standard vault or a premium vault.

          * `tenant_id` (`pulumi.Input[str]`) - The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
          * `vault_uri` (`pulumi.Input[str]`) - The URI of the vault for performing operations on keys and secrets.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if properties is None:
                raise TypeError("Missing required property 'properties'")
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(Vault, __self__).__init__(
            'azurerm:keyvault/v20161001:Vault',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Vault resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Vault(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
