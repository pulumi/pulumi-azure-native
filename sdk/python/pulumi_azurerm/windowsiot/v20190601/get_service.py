# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetServiceResult:
    """
    The description of the Windows IoT Device Service.
    """
    def __init__(__self__, admin_domain_name=None, billing_domain_name=None, etag=None, location=None, name=None, notes=None, quantity=None, start_date=None, tags=None, type=None):
        if admin_domain_name and not isinstance(admin_domain_name, str):
            raise TypeError("Expected argument 'admin_domain_name' to be a str")
        __self__.admin_domain_name = admin_domain_name
        """
        Windows IoT Device Service OEM AAD domain
        """
        if billing_domain_name and not isinstance(billing_domain_name, str):
            raise TypeError("Expected argument 'billing_domain_name' to be a str")
        __self__.billing_domain_name = billing_domain_name
        """
        Windows IoT Device Service ODM AAD domain
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The Azure Region where the resource lives
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource
        """
        if notes and not isinstance(notes, str):
            raise TypeError("Expected argument 'notes' to be a str")
        __self__.notes = notes
        """
        Windows IoT Device Service notes.
        """
        if quantity and not isinstance(quantity, float):
            raise TypeError("Expected argument 'quantity' to be a float")
        __self__.quantity = quantity
        """
        Windows IoT Device Service device allocation,
        """
        if start_date and not isinstance(start_date, str):
            raise TypeError("Expected argument 'start_date' to be a str")
        __self__.start_date = start_date
        """
        Windows IoT Device Service start date,
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """


class AwaitableGetServiceResult(GetServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceResult(
            admin_domain_name=self.admin_domain_name,
            billing_domain_name=self.billing_domain_name,
            etag=self.etag,
            location=self.location,
            name=self.name,
            notes=self.notes,
            quantity=self.quantity,
            start_date=self.start_date,
            tags=self.tags,
            type=self.type)


def get_service(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the Windows IoT Device Service.
    :param str resource_group_name: The name of the resource group that contains the Windows IoT Device Service.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:windowsiot/v20190601:getService', __args__, opts=opts).value

    return AwaitableGetServiceResult(
        admin_domain_name=__ret__.get('adminDomainName'),
        billing_domain_name=__ret__.get('billingDomainName'),
        etag=__ret__.get('etag'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        notes=__ret__.get('notes'),
        quantity=__ret__.get('quantity'),
        start_date=__ret__.get('startDate'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
