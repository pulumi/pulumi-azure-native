# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Service(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.
    """
    location: pulumi.Output[str]
    """
    The Azure Region where the resource lives
    """
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    properties: pulumi.Output[dict]
    """
    The properties of a Windows IoT Device Service.
      * `admin_domain_name` (`str`) - Windows IoT Device Service OEM AAD domain
      * `billing_domain_name` (`str`) - Windows IoT Device Service ODM AAD domain
      * `notes` (`str`) - Windows IoT Device Service notes.
      * `quantity` (`float`) - Windows IoT Device Service device allocation,
      * `start_date` (`str`) - Windows IoT Device Service start date,
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    def __init__(__self__, resource_name, opts=None, admin_domain_name=None, billing_domain_name=None, name=None, notes=None, quantity=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The description of the Windows IoT Device Service.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_domain_name: Windows IoT Device Service OEM AAD domain
        :param pulumi.Input[str] billing_domain_name: Windows IoT Device Service ODM AAD domain
        :param pulumi.Input[str] name: The name of the Windows IoT Device Service.
        :param pulumi.Input[str] notes: Windows IoT Device Service notes.
        :param pulumi.Input[float] quantity: Windows IoT Device Service device allocation,
        :param pulumi.Input[str] resource_group_name: The name of the resource group that contains the Windows IoT Device Service.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['admin_domain_name'] = admin_domain_name
            __props__['billing_domain_name'] = billing_domain_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['notes'] = notes
            __props__['quantity'] = quantity
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['etag'] = None
            __props__['location'] = None
            __props__['properties'] = None
            __props__['tags'] = None
            __props__['type'] = None
        super(Service, __self__).__init__(
            'azurerm:windowsiot/v20190601:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Service(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
