# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetRegistryResult:
    """
    An object that represents a container registry.
    """
    def __init__(__self__, admin_user_enabled=None, creation_date=None, location=None, login_server=None, name=None, network_rule_set=None, provisioning_state=None, sku=None, status=None, storage_account=None, tags=None, type=None):
        if admin_user_enabled and not isinstance(admin_user_enabled, bool):
            raise TypeError("Expected argument 'admin_user_enabled' to be a bool")
        __self__.admin_user_enabled = admin_user_enabled
        """
        The value that indicates whether the admin user is enabled.
        """
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        __self__.creation_date = creation_date
        """
        The creation date of the container registry in ISO8601 format.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The location of the resource. This cannot be changed after the resource is created.
        """
        if login_server and not isinstance(login_server, str):
            raise TypeError("Expected argument 'login_server' to be a str")
        __self__.login_server = login_server
        """
        The URL that can be used to log into the container registry.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if network_rule_set and not isinstance(network_rule_set, dict):
            raise TypeError("Expected argument 'network_rule_set' to be a dict")
        __self__.network_rule_set = network_rule_set
        """
        The network rule set for a container registry.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the container registry at the time the operation was called.
        """
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        The SKU of the container registry.
        """
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        __self__.status = status
        """
        The status of the container registry at the time the operation was called.
        """
        if storage_account and not isinstance(storage_account, dict):
            raise TypeError("Expected argument 'storage_account' to be a dict")
        __self__.storage_account = storage_account
        """
        The properties of the storage account for the container registry. Only applicable to Classic SKU.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The tags of the resource.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """


class AwaitableGetRegistryResult(GetRegistryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistryResult(
            admin_user_enabled=self.admin_user_enabled,
            creation_date=self.creation_date,
            location=self.location,
            login_server=self.login_server,
            name=self.name,
            network_rule_set=self.network_rule_set,
            provisioning_state=self.provisioning_state,
            sku=self.sku,
            status=self.status,
            storage_account=self.storage_account,
            tags=self.tags,
            type=self.type)


def get_registry(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the container registry.
    :param str resource_group_name: The name of the resource group to which the container registry belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:containerregistry/v20171001:getRegistry', __args__, opts=opts).value

    return AwaitableGetRegistryResult(
        admin_user_enabled=__ret__.get('adminUserEnabled'),
        creation_date=__ret__.get('creationDate'),
        location=__ret__.get('location'),
        login_server=__ret__.get('loginServer'),
        name=__ret__.get('name'),
        network_rule_set=__ret__.get('networkRuleSet'),
        provisioning_state=__ret__.get('provisioningState'),
        sku=__ret__.get('sku'),
        status=__ret__.get('status'),
        storage_account=__ret__.get('storageAccount'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
