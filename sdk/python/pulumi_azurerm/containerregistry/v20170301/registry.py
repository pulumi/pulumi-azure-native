# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Registry(pulumi.CustomResource):
    admin_user_enabled: pulumi.Output[bool]
    """
    The value that indicates whether the admin user is enabled.
    """
    creation_date: pulumi.Output[str]
    """
    The creation date of the container registry in ISO8601 format.
    """
    location: pulumi.Output[str]
    """
    The location of the resource. This cannot be changed after the resource is created.
    """
    login_server: pulumi.Output[str]
    """
    The URL that can be used to log into the container registry.
    """
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    provisioning_state: pulumi.Output[str]
    """
    The provisioning state of the container registry at the time the operation was called.
    """
    sku: pulumi.Output[dict]
    """
    The SKU of the container registry.
      * `name` (`str`) - The SKU name of the container registry. Required for registry creation. Allowed value: Basic.
      * `tier` (`str`) - The SKU tier based on the SKU name.
    """
    storage_account: pulumi.Output[dict]
    """
    The properties of the storage account for the container registry.
      * `name` (`str`) - The name of the storage account.
    """
    tags: pulumi.Output[dict]
    """
    The tags of the resource.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    def __init__(__self__, resource_name, opts=None, admin_user_enabled=None, location=None, name=None, resource_group_name=None, sku=None, storage_account=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        An object that represents a container registry.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] admin_user_enabled: The value that indicates whether the admin user is enabled.
        :param pulumi.Input[str] location: The location of the container registry. This cannot be changed after the resource is created.
        :param pulumi.Input[str] name: The name of the container registry.
        :param pulumi.Input[str] resource_group_name: The name of the resource group to which the container registry belongs.
        :param pulumi.Input[dict] sku: The SKU of the container registry.
        :param pulumi.Input[dict] storage_account: The parameters of a storage account for the container registry. If specified, the storage account must be in the same physical location as the container registry.
        :param pulumi.Input[dict] tags: The tags for the container registry.

        The **sku** object supports the following:

          * `name` (`pulumi.Input[str]`) - The SKU name of the container registry. Required for registry creation. Allowed value: Basic.

        The **storage_account** object supports the following:

          * `access_key` (`pulumi.Input[str]`) - The access key to the storage account.
          * `name` (`pulumi.Input[str]`) - The name of the storage account.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['admin_user_enabled'] = admin_user_enabled
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if sku is None:
                raise TypeError("Missing required property 'sku'")
            __props__['sku'] = sku
            if storage_account is None:
                raise TypeError("Missing required property 'storage_account'")
            __props__['storage_account'] = storage_account
            __props__['tags'] = tags
            __props__['creation_date'] = None
            __props__['login_server'] = None
            __props__['provisioning_state'] = None
            __props__['type'] = None
        super(Registry, __self__).__init__(
            'azurerm:containerregistry/v20170301:Registry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Registry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Registry(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
