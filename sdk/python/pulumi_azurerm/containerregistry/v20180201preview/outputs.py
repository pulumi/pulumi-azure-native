# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'BuildArgumentResponseResult',
    'BuildStepPropertiesResponse',
    'PlatformPropertiesResponse',
    'SourceControlAuthInfoResponse',
    'SourceRepositoryPropertiesResponse',
]

@pulumi.output_type
class BuildArgumentResponseResult(dict):
    """
    Properties of a build argument.
    """
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 value: str,
                 is_secret: Optional[bool] = None):
        """
        Properties of a build argument.
        :param str name: The name of the argument.
        :param str type: The type of the argument.
        :param str value: The value of the argument.
        :param bool is_secret: Flag to indicate whether the argument represents a secret and want to be removed from build logs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the argument.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the argument.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the argument.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        """
        Flag to indicate whether the argument represents a secret and want to be removed from build logs.
        """
        return pulumi.get(self, "is_secret")


@pulumi.output_type
class BuildStepPropertiesResponse(dict):
    """
    Base properties for any build step.
    """
    def __init__(__self__, *,
                 provisioning_state: str,
                 type: str):
        """
        Base properties for any build step.
        :param str provisioning_state: The provisioning state of the build step.
        :param str type: The type of the step.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the build step.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the step.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PlatformPropertiesResponse(dict):
    """
    The platform properties against which the build has to happen.
    """
    def __init__(__self__, *,
                 os_type: str,
                 cpu: Optional[float] = None):
        """
        The platform properties against which the build has to happen.
        :param str os_type: The operating system type required for the build.
        :param float cpu: The CPU configuration in terms of number of cores required for the build.
        """
        pulumi.set(__self__, "os_type", os_type)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        The operating system type required for the build.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[float]:
        """
        The CPU configuration in terms of number of cores required for the build.
        """
        return pulumi.get(self, "cpu")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SourceControlAuthInfoResponse(dict):
    """
    The authorization properties for accessing the source code repository.
    """
    def __init__(__self__, *,
                 token: str,
                 expires_in: Optional[float] = None,
                 refresh_token: Optional[str] = None,
                 scope: Optional[str] = None,
                 token_type: Optional[str] = None):
        """
        The authorization properties for accessing the source code repository.
        :param str token: The access token used to access the source control provider.
        :param float expires_in: Time in seconds that the token remains valid
        :param str refresh_token: The refresh token used to refresh the access token.
        :param str scope: The scope of the access token.
        :param str token_type: The type of Auth token.
        """
        pulumi.set(__self__, "token", token)
        if expires_in is not None:
            pulumi.set(__self__, "expires_in", expires_in)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if token_type is not None:
            pulumi.set(__self__, "token_type", token_type)

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The access token used to access the source control provider.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="expiresIn")
    def expires_in(self) -> Optional[float]:
        """
        Time in seconds that the token remains valid
        """
        return pulumi.get(self, "expires_in")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[str]:
        """
        The refresh token used to refresh the access token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The scope of the access token.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="tokenType")
    def token_type(self) -> Optional[str]:
        """
        The type of Auth token.
        """
        return pulumi.get(self, "token_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SourceRepositoryPropertiesResponse(dict):
    """
    The properties of the source code repository.
    """
    def __init__(__self__, *,
                 repository_url: str,
                 source_control_type: str,
                 is_commit_trigger_enabled: Optional[bool] = None,
                 source_control_auth_properties: Optional['outputs.SourceControlAuthInfoResponse'] = None):
        """
        The properties of the source code repository.
        :param str repository_url: The full URL to the source code repository
        :param str source_control_type: The type of source control service.
        :param bool is_commit_trigger_enabled: The value of this property indicates whether the source control commit trigger is enabled or not.
        :param 'SourceControlAuthInfoResponseArgs' source_control_auth_properties: The authorization properties for accessing the source code repository.
        """
        pulumi.set(__self__, "repository_url", repository_url)
        pulumi.set(__self__, "source_control_type", source_control_type)
        if is_commit_trigger_enabled is not None:
            pulumi.set(__self__, "is_commit_trigger_enabled", is_commit_trigger_enabled)
        if source_control_auth_properties is not None:
            pulumi.set(__self__, "source_control_auth_properties", source_control_auth_properties)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> str:
        """
        The full URL to the source code repository
        """
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="sourceControlType")
    def source_control_type(self) -> str:
        """
        The type of source control service.
        """
        return pulumi.get(self, "source_control_type")

    @property
    @pulumi.getter(name="isCommitTriggerEnabled")
    def is_commit_trigger_enabled(self) -> Optional[bool]:
        """
        The value of this property indicates whether the source control commit trigger is enabled or not.
        """
        return pulumi.get(self, "is_commit_trigger_enabled")

    @property
    @pulumi.getter(name="sourceControlAuthProperties")
    def source_control_auth_properties(self) -> Optional['outputs.SourceControlAuthInfoResponse']:
        """
        The authorization properties for accessing the source code repository.
        """
        return pulumi.get(self, "source_control_auth_properties")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


