# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ListTaskDetailsResult:
    """
    The task that has the ARM resource and task properties. 
    The task will have all information to schedule a run against it.
    """
    def __init__(__self__, agent_configuration=None, creation_date=None, credentials=None, location=None, name=None, platform=None, provisioning_state=None, status=None, step=None, tags=None, timeout=None, trigger=None, type=None):
        if agent_configuration and not isinstance(agent_configuration, dict):
            raise TypeError("Expected argument 'agent_configuration' to be a dict")
        __self__.agent_configuration = agent_configuration
        """
        The machine configuration of the run agent.
        """
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        __self__.creation_date = creation_date
        """
        The creation date of task.
        """
        if credentials and not isinstance(credentials, dict):
            raise TypeError("Expected argument 'credentials' to be a dict")
        __self__.credentials = credentials
        """
        The properties that describes a set of credentials that will be used when this run is invoked.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The location of the resource. This cannot be changed after the resource is created.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if platform and not isinstance(platform, dict):
            raise TypeError("Expected argument 'platform' to be a dict")
        __self__.platform = platform
        """
        The platform properties against which the run has to happen.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the task.
        """
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        """
        The current status of task.
        """
        if step and not isinstance(step, dict):
            raise TypeError("Expected argument 'step' to be a dict")
        __self__.step = step
        """
        The properties of a task step.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The tags of the resource.
        """
        if timeout and not isinstance(timeout, float):
            raise TypeError("Expected argument 'timeout' to be a float")
        __self__.timeout = timeout
        """
        Run timeout in seconds.
        """
        if trigger and not isinstance(trigger, dict):
            raise TypeError("Expected argument 'trigger' to be a dict")
        __self__.trigger = trigger
        """
        The properties that describe all triggers for the task.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """


class AwaitableListTaskDetailsResult(ListTaskDetailsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListTaskDetailsResult(
            agent_configuration=self.agent_configuration,
            creation_date=self.creation_date,
            credentials=self.credentials,
            location=self.location,
            name=self.name,
            platform=self.platform,
            provisioning_state=self.provisioning_state,
            status=self.status,
            step=self.step,
            tags=self.tags,
            timeout=self.timeout,
            trigger=self.trigger,
            type=self.type)


def list_task_details(name=None, registry_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the container registry task.
    :param str registry_name: The name of the container registry.
    :param str resource_group_name: The name of the resource group to which the container registry belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['registryName'] = registry_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:containerregistry/v20180901:listTaskDetails', __args__, opts=opts).value

    return AwaitableListTaskDetailsResult(
        agent_configuration=__ret__.get('agentConfiguration'),
        creation_date=__ret__.get('creationDate'),
        credentials=__ret__.get('credentials'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        platform=__ret__.get('platform'),
        provisioning_state=__ret__.get('provisioningState'),
        status=__ret__.get('status'),
        step=__ret__.get('step'),
        tags=__ret__.get('tags'),
        timeout=__ret__.get('timeout'),
        trigger=__ret__.get('trigger'),
        type=__ret__.get('type'))
