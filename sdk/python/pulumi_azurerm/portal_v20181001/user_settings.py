# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class UserSettings(pulumi.CustomResource):
    properties: pulumi.Output[dict]
    """
    The cloud shell user settings properties.
      * `preferred_location` (`str`) - The preferred location of the cloud shell.
      * `preferred_os_type` (`str`) - The operating system type of the cloud shell. Deprecated, use preferredShellType.
      * `preferred_shell_type` (`str`) - The shell type of the cloud shell.
      * `storage_profile` (`dict`) - The storage profile of the user settings.
        * `disk_size_in_gb` (`float`) - Size of file share
        * `file_share_name` (`str`) - Name of the mounted file share. 63 characters or less, lowercase alphabet, numbers, and -
        * `storage_account_resource_id` (`str`) - Full resource ID of storage account.

      * `terminal_settings` (`dict`) - Settings for terminal appearance.
        * `font_size` (`str`) - Size of terminal font.
        * `font_style` (`str`) - Style of terminal font.
    """
    def __init__(__self__, resource_name, opts=None, properties=None, user_settings_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Response to get user settings

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] properties: The cloud shell user settings properties.
        :param pulumi.Input[str] user_settings_name: The name of the user settings

        The **properties** object supports the following:

          * `preferred_location` (`pulumi.Input[str]`) - The preferred location of the cloud shell.
          * `preferred_os_type` (`pulumi.Input[str]`) - The operating system type of the cloud shell. Deprecated, use preferredShellType.
          * `preferred_shell_type` (`pulumi.Input[str]`) - The shell type of the cloud shell.
          * `storage_profile` (`pulumi.Input[dict]`) - The storage profile of the user settings.
            * `disk_size_in_gb` (`pulumi.Input[float]`) - Size of file share
            * `file_share_name` (`pulumi.Input[str]`) - Name of the mounted file share. 63 characters or less, lowercase alphabet, numbers, and -
            * `storage_account_resource_id` (`pulumi.Input[str]`) - Full resource ID of storage account.

          * `terminal_settings` (`pulumi.Input[dict]`) - Settings for terminal appearance.
            * `font_size` (`pulumi.Input[str]`) - Size of terminal font.
            * `font_style` (`pulumi.Input[str]`) - Style of terminal font.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if properties is None:
                raise TypeError("Missing required property 'properties'")
            __props__['properties'] = properties
            if user_settings_name is None:
                raise TypeError("Missing required property 'user_settings_name'")
            __props__['user_settings_name'] = user_settings_name
        super(UserSettings, __self__).__init__(
            'azurerm:portal/v20181001:UserSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing UserSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return UserSettings(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
