# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetClusterPrincipalAssignmentResult:
    """
    Class representing a cluster principal assignment.
    """
    def __init__(__self__, name=None, principal_id=None, principal_name=None, principal_type=None, provisioning_state=None, role=None, tenant_id=None, tenant_name=None, type=None):
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource
        """
        if principal_id and not isinstance(principal_id, str):
            raise TypeError("Expected argument 'principal_id' to be a str")
        __self__.principal_id = principal_id
        """
        The principal ID assigned to the cluster principal. It can be a user email, application ID, or security group name.
        """
        if principal_name and not isinstance(principal_name, str):
            raise TypeError("Expected argument 'principal_name' to be a str")
        __self__.principal_name = principal_name
        """
        The principal name
        """
        if principal_type and not isinstance(principal_type, str):
            raise TypeError("Expected argument 'principal_type' to be a str")
        __self__.principal_type = principal_type
        """
        Principal type.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioned state of the resource.
        """
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        __self__.role = role
        """
        Cluster principal role.
        """
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        __self__.tenant_id = tenant_id
        """
        The tenant id of the principal
        """
        if tenant_name and not isinstance(tenant_name, str):
            raise TypeError("Expected argument 'tenant_name' to be a str")
        __self__.tenant_name = tenant_name
        """
        The tenant name of the principal
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        """


class AwaitableGetClusterPrincipalAssignmentResult(GetClusterPrincipalAssignmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterPrincipalAssignmentResult(
            name=self.name,
            principal_id=self.principal_id,
            principal_name=self.principal_name,
            principal_type=self.principal_type,
            provisioning_state=self.provisioning_state,
            role=self.role,
            tenant_id=self.tenant_id,
            tenant_name=self.tenant_name,
            type=self.type)


def get_cluster_principal_assignment(cluster_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str cluster_name: The name of the Kusto cluster.
    :param str name: The name of the Kusto principalAssignment.
    :param str resource_group_name: The name of the resource group containing the Kusto cluster.
    """
    __args__ = dict()
    __args__['clusterName'] = cluster_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:kusto/v20200215:getClusterPrincipalAssignment', __args__, opts=opts).value

    return AwaitableGetClusterPrincipalAssignmentResult(
        name=__ret__.get('name'),
        principal_id=__ret__.get('principalId'),
        principal_name=__ret__.get('principalName'),
        principal_type=__ret__.get('principalType'),
        provisioning_state=__ret__.get('provisioningState'),
        role=__ret__.get('role'),
        tenant_id=__ret__.get('tenantId'),
        tenant_name=__ret__.get('tenantName'),
        type=__ret__.get('type'))
