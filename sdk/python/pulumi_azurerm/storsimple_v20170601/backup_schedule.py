# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class BackupSchedule(pulumi.CustomResource):
    kind: pulumi.Output[str]
    """
    The Kind of the object. Currently only Series8000 is supported
    """
    name: pulumi.Output[str]
    """
    The name of the object.
    """
    properties: pulumi.Output[dict]
    """
    The properties of the backup schedule.
      * `backup_type` (`str`) - The type of backup which needs to be taken.
      * `last_successful_run` (`str`) - The last successful backup run which was triggered for the schedule.
      * `retention_count` (`float`) - The number of backups to be retained.
      * `schedule_recurrence` (`dict`) - The schedule recurrence.
        * `recurrence_type` (`str`) - The recurrence type.
        * `recurrence_value` (`float`) - The recurrence value.
        * `weekly_days_list` (`list`) - The week days list. Applicable only for schedules of recurrence type 'weekly'.

      * `schedule_status` (`str`) - The schedule status.
      * `start_time` (`str`) - The start time of the schedule.
    """
    type: pulumi.Output[str]
    """
    The hierarchical type of the object.
    """
    def __init__(__self__, resource_name, opts=None, backup_policy_name=None, device_name=None, kind=None, manager_name=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The backup schedule.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_policy_name: The backup policy name.
        :param pulumi.Input[str] device_name: The device name
        :param pulumi.Input[str] kind: The Kind of the object. Currently only Series8000 is supported
        :param pulumi.Input[str] manager_name: The manager name
        :param pulumi.Input[str] name: The backup schedule name.
        :param pulumi.Input[dict] properties: The properties of the backup schedule.
        :param pulumi.Input[str] resource_group_name: The resource group name

        The **properties** object supports the following:

          * `backup_type` (`pulumi.Input[str]`) - The type of backup which needs to be taken.
          * `retention_count` (`pulumi.Input[float]`) - The number of backups to be retained.
          * `schedule_recurrence` (`pulumi.Input[dict]`) - The schedule recurrence.
            * `recurrence_type` (`pulumi.Input[str]`) - The recurrence type.
            * `recurrence_value` (`pulumi.Input[float]`) - The recurrence value.
            * `weekly_days_list` (`pulumi.Input[list]`) - The week days list. Applicable only for schedules of recurrence type 'weekly'.

          * `schedule_status` (`pulumi.Input[str]`) - The schedule status.
          * `start_time` (`pulumi.Input[str]`) - The start time of the schedule.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if backup_policy_name is None:
                raise TypeError("Missing required property 'backup_policy_name'")
            __props__['backup_policy_name'] = backup_policy_name
            if device_name is None:
                raise TypeError("Missing required property 'device_name'")
            __props__['device_name'] = device_name
            __props__['kind'] = kind
            if manager_name is None:
                raise TypeError("Missing required property 'manager_name'")
            __props__['manager_name'] = manager_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if properties is None:
                raise TypeError("Missing required property 'properties'")
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['type'] = None
        super(BackupSchedule, __self__).__init__(
            'azurerm:storsimple/v20170601:BackupSchedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing BackupSchedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return BackupSchedule(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
