# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class Pipeline(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    Etag identifies change in the resource.
    """
    name: pulumi.Output[str]
    """
    The resource name.
    """
    properties: pulumi.Output[dict]
    """
    Properties of the pipeline.
      * `activities` (`list`) - List of activities in pipeline.
        * `depends_on` (`list`) - Activity depends on condition.
          * `activity` (`str`) - Activity name.
          * `dependency_conditions` (`list`) - Match-Condition for the dependency.

        * `description` (`str`) - Activity description.
        * `name` (`str`) - Activity name.
        * `type` (`str`) - Type of activity.
        * `user_properties` (`list`) - Activity user properties.
          * `name` (`str`) - User property name.
          * `value` (`dict`) - User property value. Type: string (or Expression with resultType string).

      * `annotations` (`list`) - List of tags that can be used for describing the Pipeline.
      * `concurrency` (`float`) - The max number of concurrent runs for the pipeline.
      * `description` (`str`) - The description of the pipeline.
      * `folder` (`dict`) - The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
        * `name` (`str`) - The name of the folder that this Pipeline is in.

      * `parameters` (`dict`) - List of parameters for pipeline.
      * `run_dimensions` (`dict`) - Dimensions emitted by Pipeline.
      * `variables` (`dict`) - List of variables for pipeline.
    """
    type: pulumi.Output[str]
    """
    The resource type.
    """
    def __init__(__self__, resource_name, opts=None, factory_name=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Pipeline resource type.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] factory_name: The factory name.
        :param pulumi.Input[str] name: The pipeline name.
        :param pulumi.Input[dict] properties: Properties of the pipeline.
        :param pulumi.Input[str] resource_group_name: The resource group name.

        The **properties** object supports the following:

          * `activities` (`pulumi.Input[list]`) - List of activities in pipeline.
            * `depends_on` (`pulumi.Input[list]`) - Activity depends on condition.
              * `activity` (`pulumi.Input[str]`) - Activity name.
              * `dependency_conditions` (`pulumi.Input[list]`) - Match-Condition for the dependency.

            * `description` (`pulumi.Input[str]`) - Activity description.
            * `name` (`pulumi.Input[str]`) - Activity name.
            * `type` (`pulumi.Input[str]`) - Type of activity.
            * `user_properties` (`pulumi.Input[list]`) - Activity user properties.
              * `name` (`pulumi.Input[str]`) - User property name.
              * `value` (`pulumi.Input[dict]`) - User property value. Type: string (or Expression with resultType string).

          * `annotations` (`pulumi.Input[list]`) - List of tags that can be used for describing the Pipeline.
          * `concurrency` (`pulumi.Input[float]`) - The max number of concurrent runs for the pipeline.
          * `description` (`pulumi.Input[str]`) - The description of the pipeline.
          * `folder` (`pulumi.Input[dict]`) - The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
            * `name` (`pulumi.Input[str]`) - The name of the folder that this Pipeline is in.

          * `parameters` (`pulumi.Input[dict]`) - List of parameters for pipeline.
          * `run_dimensions` (`pulumi.Input[dict]`) - Dimensions emitted by Pipeline.
          * `variables` (`pulumi.Input[dict]`) - List of variables for pipeline.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if factory_name is None:
                raise TypeError("Missing required property 'factory_name'")
            __props__['factory_name'] = factory_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if properties is None:
                raise TypeError("Missing required property 'properties'")
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['etag'] = None
            __props__['type'] = None
        super(Pipeline, __self__).__init__(
            'azurerm:datafactory:Pipeline',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Pipeline resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Pipeline(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
