# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ManagedPrivateEndpoint(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    Etag identifies change in the resource.
    """
    name: pulumi.Output[str]
    """
    The resource name.
    """
    properties: pulumi.Output[dict]
    """
    Managed private endpoint properties.
      * `connection_state` (`dict`) - The managed private endpoint connection state
        * `actions_required` (`str`) - The actions required on the managed private endpoint
        * `description` (`str`) - The managed private endpoint description
        * `status` (`str`) - The approval status

      * `fqdns` (`list`) - Fully qualified domain names
      * `group_id` (`str`) - The groupId to which the managed private endpoint is created
      * `is_reserved` (`bool`) - Denotes whether the managed private endpoint is reserved
      * `private_link_resource_id` (`str`) - The ARM resource ID of the resource to which the managed private endpoint is created
      * `provisioning_state` (`str`) - The managed private endpoint provisioning state
    """
    type: pulumi.Output[str]
    """
    The resource type.
    """
    def __init__(__self__, resource_name, opts=None, factory_name=None, managed_virtual_network_name=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Managed private endpoint resource type.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] factory_name: The factory name.
        :param pulumi.Input[str] managed_virtual_network_name: Managed virtual network name
        :param pulumi.Input[str] name: Managed private endpoint name
        :param pulumi.Input[dict] properties: Managed private endpoint properties.
        :param pulumi.Input[str] resource_group_name: The resource group name.

        The **properties** object supports the following:

          * `fqdns` (`pulumi.Input[list]`) - Fully qualified domain names
          * `group_id` (`pulumi.Input[str]`) - The groupId to which the managed private endpoint is created
          * `private_link_resource_id` (`pulumi.Input[str]`) - The ARM resource ID of the resource to which the managed private endpoint is created
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if factory_name is None:
                raise TypeError("Missing required property 'factory_name'")
            __props__['factory_name'] = factory_name
            if managed_virtual_network_name is None:
                raise TypeError("Missing required property 'managed_virtual_network_name'")
            __props__['managed_virtual_network_name'] = managed_virtual_network_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if properties is None:
                raise TypeError("Missing required property 'properties'")
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['etag'] = None
            __props__['type'] = None
        super(ManagedPrivateEndpoint, __self__).__init__(
            'azurerm:datafactory/v20180601:ManagedPrivateEndpoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ManagedPrivateEndpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ManagedPrivateEndpoint(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
