# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetFactoryResult:
    """
    Factory resource type.
    """
    def __init__(__self__, create_time=None, e_tag=None, global_parameters=None, identity=None, location=None, name=None, provisioning_state=None, repo_configuration=None, tags=None, type=None, version=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        __self__.create_time = create_time
        """
        Time the factory was created in ISO8601 format.
        """
        if e_tag and not isinstance(e_tag, str):
            raise TypeError("Expected argument 'e_tag' to be a str")
        __self__.e_tag = e_tag
        """
        Etag identifies change in the resource.
        """
        if global_parameters and not isinstance(global_parameters, dict):
            raise TypeError("Expected argument 'global_parameters' to be a dict")
        __self__.global_parameters = global_parameters
        """
        List of parameters for factory.
        """
        if identity and not isinstance(identity, dict):
            raise TypeError("Expected argument 'identity' to be a dict")
        __self__.identity = identity
        """
        Managed service identity of the factory.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The resource name.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Factory provisioning state, example Succeeded.
        """
        if repo_configuration and not isinstance(repo_configuration, dict):
            raise TypeError("Expected argument 'repo_configuration' to be a dict")
        __self__.repo_configuration = repo_configuration
        """
        Git repo information of the factory.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The resource type.
        """
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        __self__.version = version
        """
        Version of the factory.
        """


class AwaitableGetFactoryResult(GetFactoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFactoryResult(
            create_time=self.create_time,
            e_tag=self.e_tag,
            global_parameters=self.global_parameters,
            identity=self.identity,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            repo_configuration=self.repo_configuration,
            tags=self.tags,
            type=self.type,
            version=self.version)


def get_factory(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The factory name.
    :param str resource_group_name: The resource group name.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:datafactory/v20180601:getFactory', __args__, opts=opts).value

    return AwaitableGetFactoryResult(
        create_time=__ret__.get('createTime'),
        e_tag=__ret__.get('eTag'),
        global_parameters=__ret__.get('globalParameters'),
        identity=__ret__.get('identity'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        repo_configuration=__ret__.get('repoConfiguration'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        version=__ret__.get('version'))
