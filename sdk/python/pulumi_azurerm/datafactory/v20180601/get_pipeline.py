# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetPipelineResult:
    """
    Pipeline resource type.
    """
    def __init__(__self__, activities=None, annotations=None, concurrency=None, description=None, etag=None, folder=None, name=None, parameters=None, run_dimensions=None, type=None, variables=None):
        if activities and not isinstance(activities, list):
            raise TypeError("Expected argument 'activities' to be a list")
        __self__.activities = activities
        """
        List of activities in pipeline.
        """
        if annotations and not isinstance(annotations, list):
            raise TypeError("Expected argument 'annotations' to be a list")
        __self__.annotations = annotations
        """
        List of tags that can be used for describing the Pipeline.
        """
        if concurrency and not isinstance(concurrency, float):
            raise TypeError("Expected argument 'concurrency' to be a float")
        __self__.concurrency = concurrency
        """
        The max number of concurrent runs for the pipeline.
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        The description of the pipeline.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Etag identifies change in the resource.
        """
        if folder and not isinstance(folder, dict):
            raise TypeError("Expected argument 'folder' to be a dict")
        __self__.folder = folder
        """
        The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The resource name.
        """
        if parameters and not isinstance(parameters, dict):
            raise TypeError("Expected argument 'parameters' to be a dict")
        __self__.parameters = parameters
        """
        List of parameters for pipeline.
        """
        if run_dimensions and not isinstance(run_dimensions, dict):
            raise TypeError("Expected argument 'run_dimensions' to be a dict")
        __self__.run_dimensions = run_dimensions
        """
        Dimensions emitted by Pipeline.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The resource type.
        """
        if variables and not isinstance(variables, dict):
            raise TypeError("Expected argument 'variables' to be a dict")
        __self__.variables = variables
        """
        List of variables for pipeline.
        """


class AwaitableGetPipelineResult(GetPipelineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelineResult(
            activities=self.activities,
            annotations=self.annotations,
            concurrency=self.concurrency,
            description=self.description,
            etag=self.etag,
            folder=self.folder,
            name=self.name,
            parameters=self.parameters,
            run_dimensions=self.run_dimensions,
            type=self.type,
            variables=self.variables)


def get_pipeline(factory_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str factory_name: The factory name.
    :param str name: The pipeline name.
    :param str resource_group_name: The resource group name.
    """
    __args__ = dict()
    __args__['factoryName'] = factory_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:datafactory/v20180601:getPipeline', __args__, opts=opts).value

    return AwaitableGetPipelineResult(
        activities=__ret__.get('activities'),
        annotations=__ret__.get('annotations'),
        concurrency=__ret__.get('concurrency'),
        description=__ret__.get('description'),
        etag=__ret__.get('etag'),
        folder=__ret__.get('folder'),
        name=__ret__.get('name'),
        parameters=__ret__.get('parameters'),
        run_dimensions=__ret__.get('runDimensions'),
        type=__ret__.get('type'),
        variables=__ret__.get('variables'))
