# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetLiveEventResult:
    """
    The Live Event.
    """
    def __init__(__self__, created=None, cross_site_access_policies=None, description=None, encoding=None, input=None, last_modified=None, location=None, name=None, preview=None, provisioning_state=None, resource_state=None, stream_options=None, tags=None, type=None, vanity_url=None):
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        __self__.created = created
        """
        The exact time the Live Event was created.
        """
        if cross_site_access_policies and not isinstance(cross_site_access_policies, dict):
            raise TypeError("Expected argument 'cross_site_access_policies' to be a dict")
        __self__.cross_site_access_policies = cross_site_access_policies
        """
        The Live Event access policies.
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        The Live Event description.
        """
        if encoding and not isinstance(encoding, dict):
            raise TypeError("Expected argument 'encoding' to be a dict")
        __self__.encoding = encoding
        """
        The Live Event encoding.
        """
        if input and not isinstance(input, dict):
            raise TypeError("Expected argument 'input' to be a dict")
        __self__.input = input
        """
        The Live Event input.
        """
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        __self__.last_modified = last_modified
        """
        The exact time the Live Event was last modified.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The Azure Region of the resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if preview and not isinstance(preview, dict):
            raise TypeError("Expected argument 'preview' to be a dict")
        __self__.preview = preview
        """
        The Live Event preview.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the Live Event.
        """
        if resource_state and not isinstance(resource_state, str):
            raise TypeError("Expected argument 'resource_state' to be a str")
        __self__.resource_state = resource_state
        """
        The resource state of the Live Event.
        """
        if stream_options and not isinstance(stream_options, list):
            raise TypeError("Expected argument 'stream_options' to be a list")
        __self__.stream_options = stream_options
        """
        The options to use for the LiveEvent.  This value is specified at creation time and cannot be updated.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """
        if vanity_url and not isinstance(vanity_url, bool):
            raise TypeError("Expected argument 'vanity_url' to be a bool")
        __self__.vanity_url = vanity_url
        """
        Specifies whether to use a vanity url with the Live Event.  This value is specified at creation time and cannot be updated.
        """


class AwaitableGetLiveEventResult(GetLiveEventResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLiveEventResult(
            created=self.created,
            cross_site_access_policies=self.cross_site_access_policies,
            description=self.description,
            encoding=self.encoding,
            input=self.input,
            last_modified=self.last_modified,
            location=self.location,
            name=self.name,
            preview=self.preview,
            provisioning_state=self.provisioning_state,
            resource_state=self.resource_state,
            stream_options=self.stream_options,
            tags=self.tags,
            type=self.type,
            vanity_url=self.vanity_url)


def get_live_event(account_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str account_name: The Media Services account name.
    :param str name: The name of the Live Event.
    :param str resource_group_name: The name of the resource group within the Azure subscription.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:media/v20180701:getLiveEvent', __args__, opts=opts).value

    return AwaitableGetLiveEventResult(
        created=__ret__.get('created'),
        cross_site_access_policies=__ret__.get('crossSiteAccessPolicies'),
        description=__ret__.get('description'),
        encoding=__ret__.get('encoding'),
        input=__ret__.get('input'),
        last_modified=__ret__.get('lastModified'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        preview=__ret__.get('preview'),
        provisioning_state=__ret__.get('provisioningState'),
        resource_state=__ret__.get('resourceState'),
        stream_options=__ret__.get('streamOptions'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        vanity_url=__ret__.get('vanityUrl'))
