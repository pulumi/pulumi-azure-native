# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class LiveOutput(pulumi.CustomResource):
    archive_window_length: pulumi.Output[str]
    """
    ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
    """
    asset_name: pulumi.Output[str]
    """
    The asset name.
    """
    created: pulumi.Output[str]
    """
    The exact time the Live Output was created.
    """
    description: pulumi.Output[str]
    """
    The description of the Live Output.
    """
    hls: pulumi.Output[dict]
    """
    The HLS configuration.
      * `fragments_per_ts_segment` (`float`) - The amount of fragments per HTTP Live Streaming (HLS) segment.
    """
    last_modified: pulumi.Output[str]
    """
    The exact time the Live Output was last modified.
    """
    manifest_name: pulumi.Output[str]
    """
    The manifest file name.  If not provided, the service will generate one automatically.
    """
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    output_snap_time: pulumi.Output[float]
    """
    The output snapshot time.
    """
    provisioning_state: pulumi.Output[str]
    """
    The provisioning state of the Live Output.
    """
    resource_state: pulumi.Output[str]
    """
    The resource state of the Live Output.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    def __init__(__self__, resource_name, opts=None, account_name=None, archive_window_length=None, asset_name=None, description=None, hls=None, live_event_name=None, manifest_name=None, name=None, output_snap_time=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The Live Output.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: The Media Services account name.
        :param pulumi.Input[str] archive_window_length: ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
        :param pulumi.Input[str] asset_name: The asset name.
        :param pulumi.Input[str] description: The description of the Live Output.
        :param pulumi.Input[dict] hls: The HLS configuration.
        :param pulumi.Input[str] live_event_name: The name of the Live Event.
        :param pulumi.Input[str] manifest_name: The manifest file name.  If not provided, the service will generate one automatically.
        :param pulumi.Input[str] name: The name of the Live Output.
        :param pulumi.Input[float] output_snap_time: The output snapshot time.
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the Azure subscription.

        The **hls** object supports the following:

          * `fragments_per_ts_segment` (`pulumi.Input[float]`) - The amount of fragments per HTTP Live Streaming (HLS) segment.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_name is None:
                raise TypeError("Missing required property 'account_name'")
            __props__['account_name'] = account_name
            if archive_window_length is None:
                raise TypeError("Missing required property 'archive_window_length'")
            __props__['archive_window_length'] = archive_window_length
            if asset_name is None:
                raise TypeError("Missing required property 'asset_name'")
            __props__['asset_name'] = asset_name
            __props__['description'] = description
            __props__['hls'] = hls
            if live_event_name is None:
                raise TypeError("Missing required property 'live_event_name'")
            __props__['live_event_name'] = live_event_name
            __props__['manifest_name'] = manifest_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['output_snap_time'] = output_snap_time
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['created'] = None
            __props__['last_modified'] = None
            __props__['provisioning_state'] = None
            __props__['resource_state'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:media/v20200501:LiveOutput")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(LiveOutput, __self__).__init__(
            'azurerm:media/v20180701:LiveOutput',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing LiveOutput resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return LiveOutput(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
