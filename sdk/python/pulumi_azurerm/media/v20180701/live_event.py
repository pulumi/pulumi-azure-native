# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class LiveEvent(pulumi.CustomResource):
    created: pulumi.Output[str]
    """
    The exact time the Live Event was created.
    """
    cross_site_access_policies: pulumi.Output[dict]
    """
    The Live Event access policies.
      * `client_access_policy` (`str`) - The content of clientaccesspolicy.xml used by Silverlight.
      * `cross_domain_policy` (`str`) - The content of crossdomain.xml used by Silverlight.
    """
    description: pulumi.Output[str]
    """
    The Live Event description.
    """
    encoding: pulumi.Output[dict]
    """
    The Live Event encoding.
      * `encoding_type` (`str`) - The encoding type for Live Event.  This value is specified at creation time and cannot be updated.
      * `preset_name` (`str`) - The encoding preset name.  This value is specified at creation time and cannot be updated.
    """
    input: pulumi.Output[dict]
    """
    The Live Event input.
      * `access_control` (`dict`) - The access control for LiveEvent Input.
        * `ip` (`dict`) - The IP access control properties.
          * `allow` (`list`) - The IP allow list.
            * `address` (`str`) - The IP address.
            * `name` (`str`) - The friendly name for the IP address range.
            * `subnet_prefix_length` (`float`) - The subnet mask prefix length (see CIDR notation).

      * `access_token` (`str`) - A unique identifier for a stream.  This can be specified at creation time but cannot be updated.  If omitted, the service will generate a unique value.
      * `endpoints` (`list`) - The input endpoints for the Live Event.
        * `protocol` (`str`) - The endpoint protocol.
        * `url` (`str`) - The endpoint URL.

      * `key_frame_interval_duration` (`str`) - ISO 8601 timespan duration of the key frame interval duration.
      * `streaming_protocol` (`str`) - The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.
    """
    last_modified: pulumi.Output[str]
    """
    The exact time the Live Event was last modified.
    """
    location: pulumi.Output[str]
    """
    The Azure Region of the resource.
    """
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    preview: pulumi.Output[dict]
    """
    The Live Event preview.
      * `access_control` (`dict`) - The access control for LiveEvent preview.
        * `ip` (`dict`) - The IP access control properties.
          * `allow` (`list`) - The IP allow list.
            * `address` (`str`) - The IP address.
            * `name` (`str`) - The friendly name for the IP address range.
            * `subnet_prefix_length` (`float`) - The subnet mask prefix length (see CIDR notation).

      * `alternative_media_id` (`str`) - An Alternative Media Identifier associated with the StreamingLocator created for the preview.  This value is specified at creation time and cannot be updated.  The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
      * `endpoints` (`list`) - The endpoints for preview.
        * `protocol` (`str`) - The endpoint protocol.
        * `url` (`str`) - The endpoint URL.

      * `preview_locator` (`str`) - The identifier of the preview locator in Guid format.  Specifying this at creation time allows the caller to know the preview locator url before the event is created.  If omitted, the service will generate a random identifier.  This value cannot be updated once the live event is created.
      * `streaming_policy_name` (`str`) - The name of streaming policy used for the LiveEvent preview.  This value is specified at creation time and cannot be updated.
    """
    provisioning_state: pulumi.Output[str]
    """
    The provisioning state of the Live Event.
    """
    resource_state: pulumi.Output[str]
    """
    The resource state of the Live Event.
    """
    stream_options: pulumi.Output[list]
    """
    The options to use for the LiveEvent.  This value is specified at creation time and cannot be updated.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    vanity_url: pulumi.Output[bool]
    """
    Specifies whether to use a vanity url with the Live Event.  This value is specified at creation time and cannot be updated.
    """
    def __init__(__self__, resource_name, opts=None, account_name=None, auto_start=None, cross_site_access_policies=None, description=None, encoding=None, input=None, location=None, name=None, preview=None, resource_group_name=None, stream_options=None, tags=None, vanity_url=None, __props__=None, __name__=None, __opts__=None):
        """
        The Live Event.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: The Media Services account name.
        :param pulumi.Input[bool] auto_start: The flag indicates if the resource should be automatically started on creation.
        :param pulumi.Input[dict] cross_site_access_policies: The Live Event access policies.
        :param pulumi.Input[str] description: The Live Event description.
        :param pulumi.Input[dict] encoding: The Live Event encoding.
        :param pulumi.Input[dict] input: The Live Event input.
        :param pulumi.Input[str] location: The Azure Region of the resource.
        :param pulumi.Input[str] name: The name of the Live Event.
        :param pulumi.Input[dict] preview: The Live Event preview.
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the Azure subscription.
        :param pulumi.Input[list] stream_options: The options to use for the LiveEvent.  This value is specified at creation time and cannot be updated.
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[bool] vanity_url: Specifies whether to use a vanity url with the Live Event.  This value is specified at creation time and cannot be updated.

        The **cross_site_access_policies** object supports the following:

          * `client_access_policy` (`pulumi.Input[str]`) - The content of clientaccesspolicy.xml used by Silverlight.
          * `cross_domain_policy` (`pulumi.Input[str]`) - The content of crossdomain.xml used by Silverlight.

        The **encoding** object supports the following:

          * `encoding_type` (`pulumi.Input[str]`) - The encoding type for Live Event.  This value is specified at creation time and cannot be updated.
          * `preset_name` (`pulumi.Input[str]`) - The encoding preset name.  This value is specified at creation time and cannot be updated.

        The **input** object supports the following:

          * `access_control` (`pulumi.Input[dict]`) - The access control for LiveEvent Input.
            * `ip` (`pulumi.Input[dict]`) - The IP access control properties.
              * `allow` (`pulumi.Input[list]`) - The IP allow list.
                * `address` (`pulumi.Input[str]`) - The IP address.
                * `name` (`pulumi.Input[str]`) - The friendly name for the IP address range.
                * `subnet_prefix_length` (`pulumi.Input[float]`) - The subnet mask prefix length (see CIDR notation).

          * `access_token` (`pulumi.Input[str]`) - A unique identifier for a stream.  This can be specified at creation time but cannot be updated.  If omitted, the service will generate a unique value.
          * `endpoints` (`pulumi.Input[list]`) - The input endpoints for the Live Event.
            * `protocol` (`pulumi.Input[str]`) - The endpoint protocol.
            * `url` (`pulumi.Input[str]`) - The endpoint URL.

          * `key_frame_interval_duration` (`pulumi.Input[str]`) - ISO 8601 timespan duration of the key frame interval duration.
          * `streaming_protocol` (`pulumi.Input[str]`) - The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.

        The **preview** object supports the following:

          * `access_control` (`pulumi.Input[dict]`) - The access control for LiveEvent preview.
            * `ip` (`pulumi.Input[dict]`) - The IP access control properties.

          * `alternative_media_id` (`pulumi.Input[str]`) - An Alternative Media Identifier associated with the StreamingLocator created for the preview.  This value is specified at creation time and cannot be updated.  The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
          * `endpoints` (`pulumi.Input[list]`) - The endpoints for preview.
          * `preview_locator` (`pulumi.Input[str]`) - The identifier of the preview locator in Guid format.  Specifying this at creation time allows the caller to know the preview locator url before the event is created.  If omitted, the service will generate a random identifier.  This value cannot be updated once the live event is created.
          * `streaming_policy_name` (`pulumi.Input[str]`) - The name of streaming policy used for the LiveEvent preview.  This value is specified at creation time and cannot be updated.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_name is None:
                raise TypeError("Missing required property 'account_name'")
            __props__['account_name'] = account_name
            __props__['auto_start'] = auto_start
            __props__['cross_site_access_policies'] = cross_site_access_policies
            __props__['description'] = description
            __props__['encoding'] = encoding
            if input is None:
                raise TypeError("Missing required property 'input'")
            __props__['input'] = input
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['preview'] = preview
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['stream_options'] = stream_options
            __props__['tags'] = tags
            __props__['vanity_url'] = vanity_url
            __props__['created'] = None
            __props__['last_modified'] = None
            __props__['provisioning_state'] = None
            __props__['resource_state'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:media/v20200501:LiveEvent")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(LiveEvent, __self__).__init__(
            'azurerm:media/v20180701:LiveEvent',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing LiveEvent resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return LiveEvent(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
