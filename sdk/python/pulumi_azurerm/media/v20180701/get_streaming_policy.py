# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetStreamingPolicyResult:
    """
    A Streaming Policy resource
    """
    def __init__(__self__, common_encryption_cbcs=None, common_encryption_cenc=None, created=None, default_content_key_policy_name=None, envelope_encryption=None, name=None, no_encryption=None, type=None):
        if common_encryption_cbcs and not isinstance(common_encryption_cbcs, dict):
            raise TypeError("Expected argument 'common_encryption_cbcs' to be a dict")
        __self__.common_encryption_cbcs = common_encryption_cbcs
        """
        Configuration of CommonEncryptionCbcs
        """
        if common_encryption_cenc and not isinstance(common_encryption_cenc, dict):
            raise TypeError("Expected argument 'common_encryption_cenc' to be a dict")
        __self__.common_encryption_cenc = common_encryption_cenc
        """
        Configuration of CommonEncryptionCenc
        """
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        __self__.created = created
        """
        Creation time of Streaming Policy
        """
        if default_content_key_policy_name and not isinstance(default_content_key_policy_name, str):
            raise TypeError("Expected argument 'default_content_key_policy_name' to be a str")
        __self__.default_content_key_policy_name = default_content_key_policy_name
        """
        Default ContentKey used by current Streaming Policy
        """
        if envelope_encryption and not isinstance(envelope_encryption, dict):
            raise TypeError("Expected argument 'envelope_encryption' to be a dict")
        __self__.envelope_encryption = envelope_encryption
        """
        Configuration of EnvelopeEncryption
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if no_encryption and not isinstance(no_encryption, dict):
            raise TypeError("Expected argument 'no_encryption' to be a dict")
        __self__.no_encryption = no_encryption
        """
        Configurations of NoEncryption
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """


class AwaitableGetStreamingPolicyResult(GetStreamingPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStreamingPolicyResult(
            common_encryption_cbcs=self.common_encryption_cbcs,
            common_encryption_cenc=self.common_encryption_cenc,
            created=self.created,
            default_content_key_policy_name=self.default_content_key_policy_name,
            envelope_encryption=self.envelope_encryption,
            name=self.name,
            no_encryption=self.no_encryption,
            type=self.type)


def get_streaming_policy(account_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str account_name: The Media Services account name.
    :param str name: The Streaming Policy name.
    :param str resource_group_name: The name of the resource group within the Azure subscription.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:media/v20180701:getStreamingPolicy', __args__, opts=opts).value

    return AwaitableGetStreamingPolicyResult(
        common_encryption_cbcs=__ret__.get('commonEncryptionCbcs'),
        common_encryption_cenc=__ret__.get('commonEncryptionCenc'),
        created=__ret__.get('created'),
        default_content_key_policy_name=__ret__.get('defaultContentKeyPolicyName'),
        envelope_encryption=__ret__.get('envelopeEncryption'),
        name=__ret__.get('name'),
        no_encryption=__ret__.get('noEncryption'),
        type=__ret__.get('type'))
