# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class ListMediaServiceStreamingLocatorPathsResult:
    """
    Class of response for listPaths action
    """
    def __init__(__self__, download_paths=None, streaming_paths=None):
        if download_paths and not isinstance(download_paths, list):
            raise TypeError("Expected argument 'download_paths' to be a list")
        __self__.download_paths = download_paths
        """
        Download Paths supported by current Streaming Locator
        """
        if streaming_paths and not isinstance(streaming_paths, list):
            raise TypeError("Expected argument 'streaming_paths' to be a list")
        __self__.streaming_paths = streaming_paths
        """
        Streaming Paths supported by current Streaming Locator
        """


class AwaitableListMediaServiceStreamingLocatorPathsResult(ListMediaServiceStreamingLocatorPathsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListMediaServiceStreamingLocatorPathsResult(
            download_paths=self.download_paths,
            streaming_paths=self.streaming_paths)


def list_media_service_streaming_locator_paths(account_name=None, resource_group_name=None, streaming_locator_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str account_name: The Media Services account name.
    :param str resource_group_name: The name of the resource group within the Azure subscription.
    :param str streaming_locator_name: The Streaming Locator name.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['streamingLocatorName'] = streaming_locator_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:media:listMediaServiceStreamingLocatorPaths', __args__, opts=opts).value

    return AwaitableListMediaServiceStreamingLocatorPathsResult(
        download_paths=__ret__.get('downloadPaths'),
        streaming_paths=__ret__.get('streamingPaths'))
