# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class ListMediaServiceStreamingLocatorContentKeysResult:
    """
    Class of response for listContentKeys action
    """
    def __init__(__self__, content_keys=None):
        if content_keys and not isinstance(content_keys, list):
            raise TypeError("Expected argument 'content_keys' to be a list")
        __self__.content_keys = content_keys
        """
        ContentKeys used by current Streaming Locator
        """


class AwaitableListMediaServiceStreamingLocatorContentKeysResult(ListMediaServiceStreamingLocatorContentKeysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListMediaServiceStreamingLocatorContentKeysResult(
            content_keys=self.content_keys)


def list_media_service_streaming_locator_content_keys(account_name=None, resource_group_name=None, streaming_locator_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str account_name: The Media Services account name.
    :param str resource_group_name: The name of the resource group within the Azure subscription.
    :param str streaming_locator_name: The Streaming Locator name.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['streamingLocatorName'] = streaming_locator_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:media:listMediaServiceStreamingLocatorContentKeys', __args__, opts=opts).value

    return AwaitableListMediaServiceStreamingLocatorContentKeysResult(
        content_keys=__ret__.get('contentKeys'))
