# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class MediaserviceLiveEventLiveOutput(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    properties: pulumi.Output[dict]
    """
    The Live Output properties.
      * `archive_window_length` (`str`) - ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
      * `asset_name` (`str`) - The asset name.
      * `created` (`str`) - The exact time the Live Output was created.
      * `description` (`str`) - The description of the Live Output.
      * `hls` (`dict`) - The HLS configuration.
        * `fragments_per_ts_segment` (`float`) - The amount of fragments per HTTP Live Streaming (HLS) segment.

      * `last_modified` (`str`) - The exact time the Live Output was last modified.
      * `manifest_name` (`str`) - The manifest file name.  If not provided, the service will generate one automatically.
      * `output_snap_time` (`float`) - The output snapshot time.
      * `provisioning_state` (`str`) - The provisioning state of the Live Output.
      * `resource_state` (`str`) - The resource state of the Live Output.
    """
    type: pulumi.Output[str]
    """
    The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    """
    def __init__(__self__, resource_name, opts=None, account_name=None, live_event_name=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The Live Output.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: The Media Services account name.
        :param pulumi.Input[str] live_event_name: The name of the Live Event.
        :param pulumi.Input[str] name: The name of the Live Output.
        :param pulumi.Input[dict] properties: The Live Output properties.
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the Azure subscription.

        The **properties** object supports the following:

          * `archive_window_length` (`pulumi.Input[str]`) - ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
          * `asset_name` (`pulumi.Input[str]`) - The asset name.
          * `description` (`pulumi.Input[str]`) - The description of the Live Output.
          * `hls` (`pulumi.Input[dict]`) - The HLS configuration.
            * `fragments_per_ts_segment` (`pulumi.Input[float]`) - The amount of fragments per HTTP Live Streaming (HLS) segment.

          * `manifest_name` (`pulumi.Input[str]`) - The manifest file name.  If not provided, the service will generate one automatically.
          * `output_snap_time` (`pulumi.Input[float]`) - The output snapshot time.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_name is None:
                raise TypeError("Missing required property 'account_name'")
            __props__['account_name'] = account_name
            if live_event_name is None:
                raise TypeError("Missing required property 'live_event_name'")
            __props__['live_event_name'] = live_event_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['type'] = None
        super(MediaserviceLiveEventLiveOutput, __self__).__init__(
            'azurerm:media:MediaserviceLiveEventLiveOutput',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, name=None, properties=None, type=None):
        """
        Get an existing MediaserviceLiveEventLiveOutput resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the resource
        :param pulumi.Input[dict] properties: The Live Output properties.
        :param pulumi.Input[str] type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.

        The **properties** object supports the following:

          * `archive_window_length` (`pulumi.Input[str]`) - ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
          * `asset_name` (`pulumi.Input[str]`) - The asset name.
          * `created` (`pulumi.Input[str]`) - The exact time the Live Output was created.
          * `description` (`pulumi.Input[str]`) - The description of the Live Output.
          * `hls` (`pulumi.Input[dict]`) - The HLS configuration.
            * `fragments_per_ts_segment` (`pulumi.Input[float]`) - The amount of fragments per HTTP Live Streaming (HLS) segment.

          * `last_modified` (`pulumi.Input[str]`) - The exact time the Live Output was last modified.
          * `manifest_name` (`pulumi.Input[str]`) - The manifest file name.  If not provided, the service will generate one automatically.
          * `output_snap_time` (`pulumi.Input[float]`) - The output snapshot time.
          * `provisioning_state` (`pulumi.Input[str]`) - The provisioning state of the Live Output.
          * `resource_state` (`pulumi.Input[str]`) - The resource state of the Live Output.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["name"] = name
        __props__["properties"] = properties
        __props__["type"] = type
        return MediaserviceLiveEventLiveOutput(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
