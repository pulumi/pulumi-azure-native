# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'CommandPropertiesResponse',
    'ConnectionInfoResponse',
    'DatabaseInfoResponse',
    'ODataErrorResponse',
    'ProjectTaskPropertiesResponse',
    'ServiceSkuResponse',
]

@pulumi.output_type
class CommandPropertiesResponse(dict):
    """
    Base class for all types of DMS command properties. If command is not supported by current client, this object is returned.
    """
    def __init__(__self__, *,
                 command_type: str,
                 errors: List['outputs.ODataErrorResponse'],
                 state: str):
        """
        Base class for all types of DMS command properties. If command is not supported by current client, this object is returned.
        :param str command_type: Command type.
        :param List['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param str state: The state of the command. This is ignored if submitted.
        """
        pulumi.set(__self__, "command_type", command_type)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="commandType")
    def command_type(self) -> str:
        """
        Command type.
        """
        return pulumi.get(self, "command_type")

    @property
    @pulumi.getter
    def errors(self) -> List['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the command. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectionInfoResponse(dict):
    """
    Defines the connection properties of a server
    """
    def __init__(__self__, *,
                 type: str,
                 password: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        Defines the connection properties of a server
        :param str type: Type of connection info
        :param str password: Password credential.
        :param str user_name: User name
        """
        pulumi.set(__self__, "type", type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of connection info
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseInfoResponse(dict):
    """
    Project Database Details
    """
    def __init__(__self__, *,
                 source_database_name: str):
        """
        Project Database Details
        :param str source_database_name: Name of the database
        """
        pulumi.set(__self__, "source_database_name", source_database_name)

    @property
    @pulumi.getter(name="sourceDatabaseName")
    def source_database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "source_database_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ODataErrorResponse(dict):
    """
    Error information in OData format.
    """
    def __init__(__self__, *,
                 code: str,
                 details: List['outputs.ODataErrorResponse'],
                 message: str):
        """
        Error information in OData format.
        :param str code: The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
        :param List['ODataErrorResponseArgs'] details: Inner errors that caused this error
        :param str message: The human-readable description of the error
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> List['outputs.ODataErrorResponse']:
        """
        Inner errors that caused this error
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The human-readable description of the error
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProjectTaskPropertiesResponse(dict):
    """
    Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
    """
    def __init__(__self__, *,
                 commands: List['outputs.CommandPropertiesResponse'],
                 errors: List['outputs.ODataErrorResponse'],
                 state: str,
                 task_type: str):
        """
        Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
        :param List['CommandPropertiesResponseArgs'] commands: Array of command properties.
        :param List['ODataErrorResponseArgs'] errors: Array of errors. This is ignored if submitted.
        :param str state: The state of the task. This is ignored if submitted.
        :param str task_type: Task type.
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def commands(self) -> List['outputs.CommandPropertiesResponse']:
        """
        Array of command properties.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def errors(self) -> List['outputs.ODataErrorResponse']:
        """
        Array of errors. This is ignored if submitted.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the task. This is ignored if submitted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceSkuResponse(dict):
    """
    An Azure SKU instance
    """
    def __init__(__self__, *,
                 capacity: Optional[float] = None,
                 family: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        An Azure SKU instance
        :param float capacity: The capacity of the SKU, if it supports scaling
        :param str family: The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
        :param str name: The unique name of the SKU, such as 'P3'
        :param str size: The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
        :param str tier: The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[float]:
        """
        The capacity of the SKU, if it supports scaling
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The unique name of the SKU, such as 'P3'
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
        """
        return pulumi.get(self, "tier")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


