# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Project(pulumi.CustomResource):
    creation_time: pulumi.Output[str]
    """
    UTC Date and time when project was created
    """
    databases_info: pulumi.Output[list]
    """
    List of DatabaseInfo
      * `source_database_name` (`str`) - Name of the database
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    provisioning_state: pulumi.Output[str]
    """
    The project's provisioning state
    """
    source_connection_info: pulumi.Output[dict]
    """
    Information for connecting to source
      * `password` (`str`) - Password credential.
      * `type` (`str`) - Type of connection info
      * `user_name` (`str`) - User name
    """
    source_platform: pulumi.Output[str]
    """
    Source platform for the project
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    target_connection_info: pulumi.Output[dict]
    """
    Information for connecting to target
      * `password` (`str`) - Password credential.
      * `type` (`str`) - Type of connection info
      * `user_name` (`str`) - User name
    """
    target_platform: pulumi.Output[str]
    """
    Target platform for the project
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, databases_info=None, group_name=None, location=None, name=None, service_name=None, source_connection_info=None, source_platform=None, tags=None, target_connection_info=None, target_platform=None, __props__=None, __name__=None, __opts__=None):
        """
        A project resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] databases_info: List of DatabaseInfo
        :param pulumi.Input[str] group_name: Name of the resource group
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: Name of the project
        :param pulumi.Input[str] service_name: Name of the service
        :param pulumi.Input[dict] source_connection_info: Information for connecting to source
        :param pulumi.Input[str] source_platform: Source platform for the project
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[dict] target_connection_info: Information for connecting to target
        :param pulumi.Input[str] target_platform: Target platform for the project

        The **databases_info** object supports the following:

          * `source_database_name` (`pulumi.Input[str]`) - Name of the database

        The **source_connection_info** object supports the following:

          * `password` (`pulumi.Input[str]`) - Password credential.
          * `type` (`pulumi.Input[str]`) - Type of connection info
          * `user_name` (`pulumi.Input[str]`) - User name
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['databases_info'] = databases_info
            if group_name is None:
                raise TypeError("Missing required property 'group_name'")
            __props__['group_name'] = group_name
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if service_name is None:
                raise TypeError("Missing required property 'service_name'")
            __props__['service_name'] = service_name
            __props__['source_connection_info'] = source_connection_info
            if source_platform is None:
                raise TypeError("Missing required property 'source_platform'")
            __props__['source_platform'] = source_platform
            __props__['tags'] = tags
            __props__['target_connection_info'] = target_connection_info
            if target_platform is None:
                raise TypeError("Missing required property 'target_platform'")
            __props__['target_platform'] = target_platform
            __props__['creation_time'] = None
            __props__['provisioning_state'] = None
            __props__['type'] = None
        super(Project, __self__).__init__(
            'azurerm:datamigration/v20180419:Project',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Project(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
