# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetProjectResult:
    """
    A project resource
    """
    def __init__(__self__, creation_time=None, databases_info=None, location=None, name=None, provisioning_state=None, source_connection_info=None, source_platform=None, tags=None, target_connection_info=None, target_platform=None, type=None):
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        __self__.creation_time = creation_time
        """
        UTC Date and time when project was created
        """
        if databases_info and not isinstance(databases_info, list):
            raise TypeError("Expected argument 'databases_info' to be a list")
        __self__.databases_info = databases_info
        """
        List of DatabaseInfo
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The project's provisioning state
        """
        if source_connection_info and not isinstance(source_connection_info, dict):
            raise TypeError("Expected argument 'source_connection_info' to be a dict")
        __self__.source_connection_info = source_connection_info
        """
        Information for connecting to source
        """
        if source_platform and not isinstance(source_platform, str):
            raise TypeError("Expected argument 'source_platform' to be a str")
        __self__.source_platform = source_platform
        """
        Source platform for the project
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if target_connection_info and not isinstance(target_connection_info, dict):
            raise TypeError("Expected argument 'target_connection_info' to be a dict")
        __self__.target_connection_info = target_connection_info
        """
        Information for connecting to target
        """
        if target_platform and not isinstance(target_platform, str):
            raise TypeError("Expected argument 'target_platform' to be a str")
        __self__.target_platform = target_platform
        """
        Target platform for the project
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetProjectResult(GetProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectResult(
            creation_time=self.creation_time,
            databases_info=self.databases_info,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            source_connection_info=self.source_connection_info,
            source_platform=self.source_platform,
            tags=self.tags,
            target_connection_info=self.target_connection_info,
            target_platform=self.target_platform,
            type=self.type)


def get_project(group_name=None, name=None, service_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str group_name: Name of the resource group
    :param str name: Name of the project
    :param str service_name: Name of the service
    """
    __args__ = dict()
    __args__['groupName'] = group_name
    __args__['name'] = name
    __args__['serviceName'] = service_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:datamigration/v20180419:getProject', __args__, opts=opts).value

    return AwaitableGetProjectResult(
        creation_time=__ret__.get('creationTime'),
        databases_info=__ret__.get('databasesInfo'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        source_connection_info=__ret__.get('sourceConnectionInfo'),
        source_platform=__ret__.get('sourcePlatform'),
        tags=__ret__.get('tags'),
        target_connection_info=__ret__.get('targetConnectionInfo'),
        target_platform=__ret__.get('targetPlatform'),
        type=__ret__.get('type'))
