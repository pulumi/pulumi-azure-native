# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Task(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    HTTP strong entity tag value. This is ignored if submitted.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    Custom task properties
      * `commands` (`list`) - Array of command properties.
        * `command_type` (`str`) - Command type.
        * `errors` (`list`) - Array of errors. This is ignored if submitted.
          * `code` (`str`) - The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
          * `details` (`list`) - Inner errors that caused this error
          * `message` (`str`) - The human-readable description of the error

        * `state` (`str`) - The state of the command. This is ignored if submitted.

      * `errors` (`list`) - Array of errors. This is ignored if submitted.
      * `state` (`str`) - The state of the task. This is ignored if submitted.
      * `task_type` (`str`) - Task type.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, etag=None, group_name=None, name=None, project_name=None, properties=None, service_name=None, __props__=None, __name__=None, __opts__=None):
        """
        A task resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] etag: HTTP strong entity tag value. This is ignored if submitted.
        :param pulumi.Input[str] group_name: Name of the resource group
        :param pulumi.Input[str] name: Name of the Task
        :param pulumi.Input[str] project_name: Name of the project
        :param pulumi.Input[dict] properties: Custom task properties
        :param pulumi.Input[str] service_name: Name of the service

        The **properties** object supports the following:

          * `task_type` (`pulumi.Input[str]`) - Task type.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['etag'] = etag
            if group_name is None:
                raise TypeError("Missing required property 'group_name'")
            __props__['group_name'] = group_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if project_name is None:
                raise TypeError("Missing required property 'project_name'")
            __props__['project_name'] = project_name
            __props__['properties'] = properties
            if service_name is None:
                raise TypeError("Missing required property 'service_name'")
            __props__['service_name'] = service_name
            __props__['type'] = None
        super(Task, __self__).__init__(
            'azurerm:datamigration/v20180419:Task',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Task resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Task(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
