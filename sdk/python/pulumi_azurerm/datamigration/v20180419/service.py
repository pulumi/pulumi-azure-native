# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Service(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    HTTP strong entity tag value. Ignored if submitted
    """
    kind: pulumi.Output[str]
    """
    The resource kind. Only 'vm' (the default) is supported.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    provisioning_state: pulumi.Output[str]
    """
    The resource's provisioning state
    """
    public_key: pulumi.Output[str]
    """
    The public key of the service, used to encrypt secrets sent to the service
    """
    sku: pulumi.Output[dict]
    """
    Service SKU
      * `capacity` (`float`) - The capacity of the SKU, if it supports scaling
      * `family` (`str`) - The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
      * `name` (`str`) - The unique name of the SKU, such as 'P3'
      * `size` (`str`) - The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
      * `tier` (`str`) - The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    virtual_subnet_id: pulumi.Output[str]
    """
    The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined
    """
    def __init__(__self__, resource_name, opts=None, etag=None, group_name=None, kind=None, location=None, name=None, public_key=None, sku=None, tags=None, virtual_subnet_id=None, __props__=None, __name__=None, __opts__=None):
        """
        A Database Migration Service resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] etag: HTTP strong entity tag value. Ignored if submitted
        :param pulumi.Input[str] group_name: Name of the resource group
        :param pulumi.Input[str] kind: The resource kind. Only 'vm' (the default) is supported.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: Name of the service
        :param pulumi.Input[str] public_key: The public key of the service, used to encrypt secrets sent to the service
        :param pulumi.Input[dict] sku: Service SKU
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[str] virtual_subnet_id: The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined

        The **sku** object supports the following:

          * `capacity` (`pulumi.Input[float]`) - The capacity of the SKU, if it supports scaling
          * `family` (`pulumi.Input[str]`) - The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
          * `name` (`pulumi.Input[str]`) - The unique name of the SKU, such as 'P3'
          * `size` (`pulumi.Input[str]`) - The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
          * `tier` (`pulumi.Input[str]`) - The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['etag'] = etag
            if group_name is None:
                raise TypeError("Missing required property 'group_name'")
            __props__['group_name'] = group_name
            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['public_key'] = public_key
            __props__['sku'] = sku
            __props__['tags'] = tags
            if virtual_subnet_id is None:
                raise TypeError("Missing required property 'virtual_subnet_id'")
            __props__['virtual_subnet_id'] = virtual_subnet_id
            __props__['provisioning_state'] = None
            __props__['type'] = None
        super(Service, __self__).__init__(
            'azurerm:datamigration/v20180419:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Service(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
