# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class ContainerService(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Properties of the container service.
      * `agent_pool_profiles` (`list`) - Properties of the agent pool.
        * `count` (`float`) - Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. 
        * `dns_prefix` (`str`) - DNS prefix to be used to create the FQDN for the agent pool.
        * `fqdn` (`str`) - FQDN for the agent pool.
        * `name` (`str`) - Unique name of the agent pool profile in the context of the subscription and resource group.
        * `os_disk_size_gb` (`dict`) - OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
        * `os_type` (`str`) - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
        * `ports` (`list`) - Ports number array used to expose on this agent pool. The default opened ports are different based on your choice of orchestrator.
        * `storage_profile` (`str`) - Storage profile specifies what kind of storage used. Choose from StorageAccount and ManagedDisks. Leave it empty, we will choose for you based on the orchestrator choice.
        * `vm_size` (`str`) - Size of agent VMs.
        * `vnet_subnet_id` (`str`) - VNet SubnetID specifies the VNet's subnet identifier.

      * `custom_profile` (`dict`) - Properties to configure a custom container service cluster.
        * `orchestrator` (`str`) - The name of the custom orchestrator to use.

      * `diagnostics_profile` (`dict`) - Profile for diagnostics in the container service cluster.
        * `vm_diagnostics` (`dict`) - Profile for diagnostics on the container service VMs.
          * `enabled` (`bool`) - Whether the VM diagnostic agent is provisioned on the VM.
          * `storage_uri` (`str`) - The URI of the storage account where diagnostics are stored.

      * `linux_profile` (`dict`) - Profile for Linux VMs in the container service cluster.
        * `admin_username` (`str`) - The administrator username to use for Linux VMs.
        * `ssh` (`dict`) - SSH configuration for Linux-based VMs running on Azure.
          * `public_keys` (`list`) - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
            * `key_data` (`str`) - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.

      * `master_profile` (`dict`) - Profile for the container service master.
        * `count` (`float`) - Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The default value is 1.
        * `dns_prefix` (`str`) - DNS prefix to be used to create the FQDN for the master pool.
        * `first_consecutive_static_ip` (`str`) - FirstConsecutiveStaticIP used to specify the first static ip of masters.
        * `fqdn` (`str`) - FQDN for the master pool.
        * `os_disk_size_gb` (`dict`) - OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
        * `storage_profile` (`str`) - Storage profile specifies what kind of storage used. Choose from StorageAccount and ManagedDisks. Leave it empty, we will choose for you based on the orchestrator choice.
        * `vm_size` (`str`) - Size of agent VMs.
        * `vnet_subnet_id` (`str`) - VNet SubnetID specifies the VNet's subnet identifier.

      * `orchestrator_profile` (`dict`) - Profile for the container service orchestrator.
        * `orchestrator_type` (`str`) - The orchestrator to use to manage container service cluster resources. Valid values are Kubernetes, Swarm, DCOS, DockerCE and Custom.
        * `orchestrator_version` (`str`) - The version of the orchestrator to use. You can specify the major.minor.patch part of the actual version.For example, you can specify version as "1.6.11".

      * `provisioning_state` (`str`) - The current deployment or provisioning state, which only appears in the response.
      * `service_principal_profile` (`dict`) - Information about a service principal identity for the cluster to use for manipulating Azure APIs. Exact one of secret or keyVaultSecretRef need to be specified.
        * `client_id` (`str`) - The ID for the service principal.
        * `key_vault_secret_ref` (`dict`) - Reference to a secret stored in Azure Key Vault.
          * `secret_name` (`str`) - The secret name.
          * `vault_id` (`str`) - Key vault identifier.
          * `version` (`str`) - The secret version.

        * `secret` (`str`) - The secret password associated with the service principal in plain text.

      * `windows_profile` (`dict`) - Profile for Windows VMs in the container service cluster.
        * `admin_password` (`str`) - The administrator password to use for Windows VMs.
        * `admin_username` (`str`) - The administrator username to use for Windows VMs.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Container service.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The name of the container service in the specified subscription and resource group.
        :param pulumi.Input[dict] properties: Properties of the container service.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] tags: Resource tags

        The **properties** object supports the following:

          * `agent_pool_profiles` (`pulumi.Input[list]`) - Properties of the agent pool.
            * `count` (`pulumi.Input[float]`) - Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. 
            * `dns_prefix` (`pulumi.Input[str]`) - DNS prefix to be used to create the FQDN for the agent pool.
            * `name` (`pulumi.Input[str]`) - Unique name of the agent pool profile in the context of the subscription and resource group.
            * `os_disk_size_gb` (`pulumi.Input[dict]`) - OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
            * `os_type` (`pulumi.Input[str]`) - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
            * `ports` (`pulumi.Input[list]`) - Ports number array used to expose on this agent pool. The default opened ports are different based on your choice of orchestrator.
            * `storage_profile` (`pulumi.Input[str]`) - Storage profile specifies what kind of storage used. Choose from StorageAccount and ManagedDisks. Leave it empty, we will choose for you based on the orchestrator choice.
            * `vm_size` (`pulumi.Input[str]`) - Size of agent VMs.
            * `vnet_subnet_id` (`pulumi.Input[str]`) - VNet SubnetID specifies the VNet's subnet identifier.

          * `custom_profile` (`pulumi.Input[dict]`) - Properties to configure a custom container service cluster.
            * `orchestrator` (`pulumi.Input[str]`) - The name of the custom orchestrator to use.

          * `diagnostics_profile` (`pulumi.Input[dict]`) - Profile for diagnostics in the container service cluster.
            * `vm_diagnostics` (`pulumi.Input[dict]`) - Profile for diagnostics on the container service VMs.
              * `enabled` (`pulumi.Input[bool]`) - Whether the VM diagnostic agent is provisioned on the VM.

          * `linux_profile` (`pulumi.Input[dict]`) - Profile for Linux VMs in the container service cluster.
            * `admin_username` (`pulumi.Input[str]`) - The administrator username to use for Linux VMs.
            * `ssh` (`pulumi.Input[dict]`) - SSH configuration for Linux-based VMs running on Azure.
              * `public_keys` (`pulumi.Input[list]`) - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
                * `key_data` (`pulumi.Input[str]`) - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.

          * `master_profile` (`pulumi.Input[dict]`) - Profile for the container service master.
            * `count` (`pulumi.Input[float]`) - Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The default value is 1.
            * `dns_prefix` (`pulumi.Input[str]`) - DNS prefix to be used to create the FQDN for the master pool.
            * `first_consecutive_static_ip` (`pulumi.Input[str]`) - FirstConsecutiveStaticIP used to specify the first static ip of masters.
            * `os_disk_size_gb` (`pulumi.Input[dict]`) - OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
            * `storage_profile` (`pulumi.Input[str]`) - Storage profile specifies what kind of storage used. Choose from StorageAccount and ManagedDisks. Leave it empty, we will choose for you based on the orchestrator choice.
            * `vm_size` (`pulumi.Input[str]`) - Size of agent VMs.
            * `vnet_subnet_id` (`pulumi.Input[str]`) - VNet SubnetID specifies the VNet's subnet identifier.

          * `orchestrator_profile` (`pulumi.Input[dict]`) - Profile for the container service orchestrator.
            * `orchestrator_type` (`pulumi.Input[str]`) - The orchestrator to use to manage container service cluster resources. Valid values are Kubernetes, Swarm, DCOS, DockerCE and Custom.
            * `orchestrator_version` (`pulumi.Input[str]`) - The version of the orchestrator to use. You can specify the major.minor.patch part of the actual version.For example, you can specify version as "1.6.11".

          * `service_principal_profile` (`pulumi.Input[dict]`) - Information about a service principal identity for the cluster to use for manipulating Azure APIs. Exact one of secret or keyVaultSecretRef need to be specified.
            * `client_id` (`pulumi.Input[str]`) - The ID for the service principal.
            * `key_vault_secret_ref` (`pulumi.Input[dict]`) - Reference to a secret stored in Azure Key Vault.
              * `secret_name` (`pulumi.Input[str]`) - The secret name.
              * `vault_id` (`pulumi.Input[str]`) - Key vault identifier.
              * `version` (`pulumi.Input[str]`) - The secret version.

            * `secret` (`pulumi.Input[str]`) - The secret password associated with the service principal in plain text.

          * `windows_profile` (`pulumi.Input[dict]`) - Profile for Windows VMs in the container service cluster.
            * `admin_password` (`pulumi.Input[str]`) - The administrator password to use for Windows VMs.
            * `admin_username` (`pulumi.Input[str]`) - The administrator username to use for Windows VMs.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(ContainerService, __self__).__init__(
            'azurerm:containerservice/v20170701:ContainerService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ContainerService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ContainerService(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
