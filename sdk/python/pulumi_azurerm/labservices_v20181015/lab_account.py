# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class LabAccount(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    The location of the resource.
    """
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    properties: pulumi.Output[dict]
    """
    The properties of the resource.
      * `enabled_region_selection` (`bool`) - Represents if region selection is enabled
      * `latest_operation_result` (`dict`) - The details of the latest operation. ex: status, error
        * `error_code` (`str`) - Error code on failure.
        * `error_message` (`str`) - The error message.
        * `http_method` (`str`) - The HttpMethod - PUT/POST/DELETE for the operation.
        * `operation_url` (`str`) - The URL to use to check long-running operation status
        * `request_uri` (`str`) - Request URI of the operation.
        * `status` (`str`) - The current status of the operation.

      * `provisioning_state` (`str`) - The provisioning status of the resource.
      * `size_configuration` (`dict`) - Represents the size configuration under the lab account
        * `environment_sizes` (`list`) - Represents a list of size categories supported by this Lab Account (Small, Medium, Large)
          * `max_price` (`float`) - The pay-as-you-go dollar price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost. This is the maximum price of all prices within this tier.
          * `min_memory` (`float`) - The amount of memory available (in GB). This is the minimum amount of memory within this tier.
          * `min_number_of_cores` (`float`) - The number of cores a VM of this size has. This is the minimum number of cores within this tier.
          * `name` (`str`) - The size category
          * `vm_sizes` (`list`) - Represents a set of compute sizes that can serve this given size type
            * `compute_size` (`str`) - Represents the actual compute size, e.g. Standard_A2_v2.
            * `memory` (`float`) - The amount of memory available (in GB).
            * `number_of_cores` (`float`) - The number of cores a VM of this size has.
            * `price` (`float`) - The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.

      * `unique_identifier` (`str`) - The unique immutable identifier of a resource (Guid).
    """
    tags: pulumi.Output[dict]
    """
    The tags of the resource.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    def __init__(__self__, resource_name, opts=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Represents a lab account.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] name: The name of the lab Account.
        :param pulumi.Input[dict] properties: The properties of the resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] tags: The tags of the resource.

        The **properties** object supports the following:

          * `enabled_region_selection` (`pulumi.Input[bool]`) - Represents if region selection is enabled
          * `provisioning_state` (`pulumi.Input[str]`) - The provisioning status of the resource.
          * `unique_identifier` (`pulumi.Input[str]`) - The unique immutable identifier of a resource (Guid).
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(LabAccount, __self__).__init__(
            'azurerm:labservices/v20181015:LabAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing LabAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return LabAccount(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
