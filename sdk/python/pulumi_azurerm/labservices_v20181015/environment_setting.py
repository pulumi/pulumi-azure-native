# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class EnvironmentSetting(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    The location of the resource.
    """
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    properties: pulumi.Output[dict]
    """
    The properties of the Environment Setting resource
      * `configuration_state` (`str`) - Describes the user's progress in configuring their environment setting
      * `description` (`str`) - Describes the environment and its resource settings
      * `last_changed` (`str`) - Time when the template VM was last changed.
      * `last_published` (`str`) - Time when the template VM was last sent for publishing.
      * `latest_operation_result` (`dict`) - The details of the latest operation. ex: status, error
        * `error_code` (`str`) - Error code on failure.
        * `error_message` (`str`) - The error message.
        * `http_method` (`str`) - The HttpMethod - PUT/POST/DELETE for the operation.
        * `operation_url` (`str`) - The URL to use to check long-running operation status
        * `request_uri` (`str`) - Request URI of the operation.
        * `status` (`str`) - The current status of the operation.

      * `provisioning_state` (`str`) - The provisioning status of the resource.
      * `publishing_state` (`str`) - Describes the readiness of this environment setting
      * `resource_settings` (`dict`) - The resource specific settings
        * `cores` (`float`) - The translated compute cores of the virtual machine
        * `gallery_image_resource_id` (`str`) - The resource id of the gallery image used for creating the virtual machine
        * `id` (`str`) - The unique id of the resource setting
        * `image_name` (`str`) - The name of the image used to created the environment setting
        * `reference_vm` (`dict`) - Details specific to Reference Vm
          * `password` (`str`) - The password of the virtual machine. This will be set to null in GET resource API
          * `user_name` (`str`) - The username of the virtual machine
          * `vm_resource_id` (`str`) - VM resource Id for the environment
          * `vm_state_details` (`dict`) - The state details for the reference virtual machine.
            * `last_known_power_state` (`str`) - Last known compute power state captured in DTL
            * `power_state` (`str`) - The power state of the reference virtual machine.
            * `rdp_authority` (`str`) - The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
            * `ssh_authority` (`str`) - The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.

        * `size` (`str`) - The size of the virtual machine

      * `title` (`str`) - Brief title describing the environment and its resource settings
      * `unique_identifier` (`str`) - The unique immutable identifier of a resource (Guid).
    """
    tags: pulumi.Output[dict]
    """
    The tags of the resource.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    def __init__(__self__, resource_name, opts=None, lab_account_name=None, lab_name=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Represents settings of an environment, from which environment instances would be created

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] lab_account_name: The name of the lab Account.
        :param pulumi.Input[str] lab_name: The name of the lab.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] name: The name of the environment Setting.
        :param pulumi.Input[dict] properties: The properties of the Environment Setting resource
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] tags: The tags of the resource.

        The **properties** object supports the following:

          * `configuration_state` (`pulumi.Input[str]`) - Describes the user's progress in configuring their environment setting
          * `description` (`pulumi.Input[str]`) - Describes the environment and its resource settings
          * `provisioning_state` (`pulumi.Input[str]`) - The provisioning status of the resource.
          * `resource_settings` (`pulumi.Input[dict]`) - The resource specific settings
            * `gallery_image_resource_id` (`pulumi.Input[str]`) - The resource id of the gallery image used for creating the virtual machine
            * `reference_vm` (`pulumi.Input[dict]`) - Details specific to Reference Vm
              * `password` (`pulumi.Input[str]`) - The password of the virtual machine. This will be set to null in GET resource API
              * `user_name` (`pulumi.Input[str]`) - The username of the virtual machine

            * `size` (`pulumi.Input[str]`) - The size of the virtual machine

          * `title` (`pulumi.Input[str]`) - Brief title describing the environment and its resource settings
          * `unique_identifier` (`pulumi.Input[str]`) - The unique immutable identifier of a resource (Guid).
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if lab_account_name is None:
                raise TypeError("Missing required property 'lab_account_name'")
            __props__['lab_account_name'] = lab_account_name
            if lab_name is None:
                raise TypeError("Missing required property 'lab_name'")
            __props__['lab_name'] = lab_name
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(EnvironmentSetting, __self__).__init__(
            'azurerm:labservices/v20181015:EnvironmentSetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing EnvironmentSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return EnvironmentSetting(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
