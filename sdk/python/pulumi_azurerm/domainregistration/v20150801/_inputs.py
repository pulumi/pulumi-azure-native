# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'AddressArgs',
    'ContactArgs',
    'DomainPurchaseConsentArgs',
    'HostNameArgs',
]

@pulumi.input_type
class AddressArgs:
    def __init__(__self__, *,
                 address1: Optional[pulumi.Input[str]] = None,
                 address2: Optional[pulumi.Input[str]] = None,
                 city: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        Address information for domain registration
        :param pulumi.Input[str] address1: Address 1
        :param pulumi.Input[str] address2: Address 2
        :param pulumi.Input[str] city: City
        :param pulumi.Input[str] country: Country
        :param pulumi.Input[str] postal_code: Postal code
        :param pulumi.Input[str] state: State
        """
        if address1 is not None:
            pulumi.set(__self__, "address1", address1)
        if address2 is not None:
            pulumi.set(__self__, "address2", address2)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def address1(self) -> Optional[pulumi.Input[str]]:
        """
        Address 1
        """
        return pulumi.get(self, "address1")

    @address1.setter
    def address1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address1", value)

    @property
    @pulumi.getter
    def address2(self) -> Optional[pulumi.Input[str]]:
        """
        Address 2
        """
        return pulumi.get(self, "address2")

    @address2.setter
    def address2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address2", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        """
        City
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        Country
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        """
        Postal code
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class ContactArgs:
    def __init__(__self__, *,
                 address_mailing: Optional[pulumi.Input['AddressArgs']] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 fax: Optional[pulumi.Input[str]] = None,
                 job_title: Optional[pulumi.Input[str]] = None,
                 name_first: Optional[pulumi.Input[str]] = None,
                 name_last: Optional[pulumi.Input[str]] = None,
                 name_middle: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 phone: Optional[pulumi.Input[str]] = None):
        """
        Contact information for domain registration. If 'Domain Privacy' option is not selected then the contact information will be made publicly available through the Whois directories as per ICANN requirements.
        :param pulumi.Input['AddressArgs'] address_mailing: Mailing address
        :param pulumi.Input[str] email: Email address
        :param pulumi.Input[str] fax: Fax number
        :param pulumi.Input[str] job_title: Job title
        :param pulumi.Input[str] name_first: First name
        :param pulumi.Input[str] name_last: Last name
        :param pulumi.Input[str] name_middle: Middle name
        :param pulumi.Input[str] organization: Organization
        :param pulumi.Input[str] phone: Phone number
        """
        if address_mailing is not None:
            pulumi.set(__self__, "address_mailing", address_mailing)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if fax is not None:
            pulumi.set(__self__, "fax", fax)
        if job_title is not None:
            pulumi.set(__self__, "job_title", job_title)
        if name_first is not None:
            pulumi.set(__self__, "name_first", name_first)
        if name_last is not None:
            pulumi.set(__self__, "name_last", name_last)
        if name_middle is not None:
            pulumi.set(__self__, "name_middle", name_middle)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)

    @property
    @pulumi.getter(name="addressMailing")
    def address_mailing(self) -> Optional[pulumi.Input['AddressArgs']]:
        """
        Mailing address
        """
        return pulumi.get(self, "address_mailing")

    @address_mailing.setter
    def address_mailing(self, value: Optional[pulumi.Input['AddressArgs']]):
        pulumi.set(self, "address_mailing", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def fax(self) -> Optional[pulumi.Input[str]]:
        """
        Fax number
        """
        return pulumi.get(self, "fax")

    @fax.setter
    def fax(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fax", value)

    @property
    @pulumi.getter(name="jobTitle")
    def job_title(self) -> Optional[pulumi.Input[str]]:
        """
        Job title
        """
        return pulumi.get(self, "job_title")

    @job_title.setter
    def job_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_title", value)

    @property
    @pulumi.getter(name="nameFirst")
    def name_first(self) -> Optional[pulumi.Input[str]]:
        """
        First name
        """
        return pulumi.get(self, "name_first")

    @name_first.setter
    def name_first(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_first", value)

    @property
    @pulumi.getter(name="nameLast")
    def name_last(self) -> Optional[pulumi.Input[str]]:
        """
        Last name
        """
        return pulumi.get(self, "name_last")

    @name_last.setter
    def name_last(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_last", value)

    @property
    @pulumi.getter(name="nameMiddle")
    def name_middle(self) -> Optional[pulumi.Input[str]]:
        """
        Middle name
        """
        return pulumi.get(self, "name_middle")

    @name_middle.setter
    def name_middle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_middle", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        Organization
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def phone(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone", value)


@pulumi.input_type
class DomainPurchaseConsentArgs:
    def __init__(__self__, *,
                 agreed_at: Optional[pulumi.Input[str]] = None,
                 agreed_by: Optional[pulumi.Input[str]] = None,
                 agreement_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Domain purchase consent object representing acceptance of applicable legal agreements
        :param pulumi.Input[str] agreed_at: Timestamp when the agreements were accepted
        :param pulumi.Input[str] agreed_by: Client IP address
        :param pulumi.Input[Sequence[pulumi.Input[str]]] agreement_keys: List of applicable legal agreement keys. This list can be retrieved using ListLegalAgreements Api under TopLevelDomain resource
        """
        if agreed_at is not None:
            pulumi.set(__self__, "agreed_at", agreed_at)
        if agreed_by is not None:
            pulumi.set(__self__, "agreed_by", agreed_by)
        if agreement_keys is not None:
            pulumi.set(__self__, "agreement_keys", agreement_keys)

    @property
    @pulumi.getter(name="agreedAt")
    def agreed_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the agreements were accepted
        """
        return pulumi.get(self, "agreed_at")

    @agreed_at.setter
    def agreed_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agreed_at", value)

    @property
    @pulumi.getter(name="agreedBy")
    def agreed_by(self) -> Optional[pulumi.Input[str]]:
        """
        Client IP address
        """
        return pulumi.get(self, "agreed_by")

    @agreed_by.setter
    def agreed_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agreed_by", value)

    @property
    @pulumi.getter(name="agreementKeys")
    def agreement_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of applicable legal agreement keys. This list can be retrieved using ListLegalAgreements Api under TopLevelDomain resource
        """
        return pulumi.get(self, "agreement_keys")

    @agreement_keys.setter
    def agreement_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "agreement_keys", value)


@pulumi.input_type
class HostNameArgs:
    def __init__(__self__, *,
                 azure_resource_name: Optional[pulumi.Input[str]] = None,
                 azure_resource_type: Optional[pulumi.Input[str]] = None,
                 custom_host_name_dns_record_type: Optional[pulumi.Input[str]] = None,
                 host_name_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 site_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Details of a hostname derived from a domain
        :param pulumi.Input[str] azure_resource_name: Name of the Azure resource the hostname is assigned to. If it is assigned to a traffic manager then it will be the traffic manager name otherwise it will be the website name
        :param pulumi.Input[str] azure_resource_type: Type of the Azure resource the hostname is assigned to
        :param pulumi.Input[str] custom_host_name_dns_record_type: Type of the Dns record
        :param pulumi.Input[str] host_name_type: Type of the hostname
        :param pulumi.Input[str] name: Name of the hostname
        :param pulumi.Input[Sequence[pulumi.Input[str]]] site_names: List of sites the hostname is assigned to. This list will have more than one site only if the hostname is pointing to a Traffic Manager
        """
        if azure_resource_name is not None:
            pulumi.set(__self__, "azure_resource_name", azure_resource_name)
        if azure_resource_type is not None:
            pulumi.set(__self__, "azure_resource_type", azure_resource_type)
        if custom_host_name_dns_record_type is not None:
            pulumi.set(__self__, "custom_host_name_dns_record_type", custom_host_name_dns_record_type)
        if host_name_type is not None:
            pulumi.set(__self__, "host_name_type", host_name_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if site_names is not None:
            pulumi.set(__self__, "site_names", site_names)

    @property
    @pulumi.getter(name="azureResourceName")
    def azure_resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Azure resource the hostname is assigned to. If it is assigned to a traffic manager then it will be the traffic manager name otherwise it will be the website name
        """
        return pulumi.get(self, "azure_resource_name")

    @azure_resource_name.setter
    def azure_resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_resource_name", value)

    @property
    @pulumi.getter(name="azureResourceType")
    def azure_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the Azure resource the hostname is assigned to
        """
        return pulumi.get(self, "azure_resource_type")

    @azure_resource_type.setter
    def azure_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_resource_type", value)

    @property
    @pulumi.getter(name="customHostNameDnsRecordType")
    def custom_host_name_dns_record_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the Dns record
        """
        return pulumi.get(self, "custom_host_name_dns_record_type")

    @custom_host_name_dns_record_type.setter
    def custom_host_name_dns_record_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_host_name_dns_record_type", value)

    @property
    @pulumi.getter(name="hostNameType")
    def host_name_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the hostname
        """
        return pulumi.get(self, "host_name_type")

    @host_name_type.setter
    def host_name_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the hostname
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="siteNames")
    def site_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of sites the hostname is assigned to. This list will have more than one site only if the hostname is pointing to a Traffic Manager
        """
        return pulumi.get(self, "site_names")

    @site_names.setter
    def site_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "site_names", value)


