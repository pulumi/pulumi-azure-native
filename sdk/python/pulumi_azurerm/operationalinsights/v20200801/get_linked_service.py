# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetLinkedServiceResult:
    """
    The top level Linked service resource container.
    """
    def __init__(__self__, name=None, provisioning_state=None, resource_id=None, tags=None, type=None, write_access_resource_id=None):
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the linked service.
        """
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        __self__.resource_id = resource_id
        """
        The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        """
        if write_access_resource_id and not isinstance(write_access_resource_id, str):
            raise TypeError("Expected argument 'write_access_resource_id' to be a str")
        __self__.write_access_resource_id = write_access_resource_id
        """
        The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access
        """


class AwaitableGetLinkedServiceResult(GetLinkedServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLinkedServiceResult(
            name=self.name,
            provisioning_state=self.provisioning_state,
            resource_id=self.resource_id,
            tags=self.tags,
            type=self.type,
            write_access_resource_id=self.write_access_resource_id)


def get_linked_service(name=None, resource_group_name=None, workspace_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of the linked service.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workspace_name: The name of the workspace.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['workspaceName'] = workspace_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:operationalinsights/v20200801:getLinkedService', __args__, opts=opts).value

    return AwaitableGetLinkedServiceResult(
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        resource_id=__ret__.get('resourceId'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        write_access_resource_id=__ret__.get('writeAccessResourceId'))
