# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class DataExport(pulumi.CustomResource):
    all_tables: pulumi.Output[bool]
    """
    When ‘true’, all workspace's tables are exported.
    """
    created_date: pulumi.Output[str]
    """
    The latest data export rule modification time.
    """
    data_export_id: pulumi.Output[str]
    """
    The data export rule ID.
    """
    enable: pulumi.Output[bool]
    """
    Active when enabled.
    """
    event_hub_name: pulumi.Output[str]
    """
    Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account.
    """
    last_modified_date: pulumi.Output[str]
    """
    Date and time when the export was last modified.
    """
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    resource_id: pulumi.Output[str]
    """
    The destination resource ID. This can be copied from the Properties entry of the destination resource in Azure.
    """
    table_names: pulumi.Output[list]
    """
    An array of tables to export, for example: [“Heartbeat, SecurityEvent”].
    """
    type: pulumi.Output[str]
    """
    The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    """
    def __init__(__self__, resource_name, opts=None, all_tables=None, created_date=None, data_export_id=None, enable=None, event_hub_name=None, last_modified_date=None, name=None, resource_group_name=None, resource_id=None, table_names=None, workspace_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The top level data export resource container.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] all_tables: When ‘true’, all workspace's tables are exported.
        :param pulumi.Input[str] created_date: The latest data export rule modification time.
        :param pulumi.Input[str] data_export_id: The data export rule ID.
        :param pulumi.Input[bool] enable: Active when enabled.
        :param pulumi.Input[str] event_hub_name: Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account.
        :param pulumi.Input[str] last_modified_date: Date and time when the export was last modified.
        :param pulumi.Input[str] name: The data export rule name.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] resource_id: The destination resource ID. This can be copied from the Properties entry of the destination resource in Azure.
        :param pulumi.Input[list] table_names: An array of tables to export, for example: [“Heartbeat, SecurityEvent”].
        :param pulumi.Input[str] workspace_name: The name of the workspace.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['all_tables'] = all_tables
            __props__['created_date'] = created_date
            __props__['data_export_id'] = data_export_id
            __props__['enable'] = enable
            __props__['event_hub_name'] = event_hub_name
            __props__['last_modified_date'] = last_modified_date
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if resource_id is None:
                raise TypeError("Missing required property 'resource_id'")
            __props__['resource_id'] = resource_id
            __props__['table_names'] = table_names
            if workspace_name is None:
                raise TypeError("Missing required property 'workspace_name'")
            __props__['workspace_name'] = workspace_name
            __props__['type'] = None
        super(DataExport, __self__).__init__(
            'azurerm:operationalinsights/v20200801:DataExport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing DataExport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return DataExport(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
