# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetStorageInsightConfigResult:
    """
    The top level storage insight resource container.
    """
    def __init__(__self__, containers=None, e_tag=None, name=None, status=None, storage_account=None, tables=None, tags=None, type=None):
        if containers and not isinstance(containers, list):
            raise TypeError("Expected argument 'containers' to be a list")
        __self__.containers = containers
        """
        The names of the blob containers that the workspace should read
        """
        if e_tag and not isinstance(e_tag, str):
            raise TypeError("Expected argument 'e_tag' to be a str")
        __self__.e_tag = e_tag
        """
        The ETag of the storage insight.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource
        """
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        __self__.status = status
        """
        The status of the storage insight
        """
        if storage_account and not isinstance(storage_account, dict):
            raise TypeError("Expected argument 'storage_account' to be a dict")
        __self__.storage_account = storage_account
        """
        The storage account connection details
        """
        if tables and not isinstance(tables, list):
            raise TypeError("Expected argument 'tables' to be a list")
        __self__.tables = tables
        """
        The names of the Azure tables that the workspace should read
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        """


class AwaitableGetStorageInsightConfigResult(GetStorageInsightConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStorageInsightConfigResult(
            containers=self.containers,
            e_tag=self.e_tag,
            name=self.name,
            status=self.status,
            storage_account=self.storage_account,
            tables=self.tables,
            tags=self.tags,
            type=self.type)


def get_storage_insight_config(name=None, resource_group_name=None, workspace_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of the storageInsightsConfigs resource
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workspace_name: The name of the workspace.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['workspaceName'] = workspace_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:operationalinsights/v20200801:getStorageInsightConfig', __args__, opts=opts).value

    return AwaitableGetStorageInsightConfigResult(
        containers=__ret__.get('containers'),
        e_tag=__ret__.get('eTag'),
        name=__ret__.get('name'),
        status=__ret__.get('status'),
        storage_account=__ret__.get('storageAccount'),
        tables=__ret__.get('tables'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
