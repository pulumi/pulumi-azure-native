# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Workspace(pulumi.CustomResource):
    customer_id: pulumi.Output[str]
    """
    This is a read-only property. Represents the ID associated with the workspace.
    """
    e_tag: pulumi.Output[str]
    """
    The ETag of the workspace.
    """
    location: pulumi.Output[str]
    """
    The geo-location where the resource lives
    """
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    private_link_scoped_resources: pulumi.Output[list]
    """
    List of linked private link scope resources.
      * `resource_id` (`str`) - The full resource Id of the private link scope resource.
      * `scope_id` (`str`) - The private link scope unique Identifier.
    """
    provisioning_state: pulumi.Output[str]
    """
    The provisioning state of the workspace.
    """
    public_network_access_for_ingestion: pulumi.Output[str]
    """
    The network access type for accessing Log Analytics ingestion.
    """
    public_network_access_for_query: pulumi.Output[str]
    """
    The network access type for accessing Log Analytics query.
    """
    retention_in_days: pulumi.Output[float]
    """
    The workspace data retention in days, between 30 and 730.
    """
    sku: pulumi.Output[dict]
    """
    The SKU of the workspace.
      * `capacity_reservation_level` (`float`) - The capacity reservation level for this workspace, when CapacityReservation sku is selected.
      * `last_sku_update` (`str`) - The last time when the sku was updated.
      * `max_capacity_reservation_level` (`float`) - The maximum capacity reservation level available for this workspace, when CapacityReservation sku is selected.
      * `name` (`str`) - The name of the SKU.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    """
    workspace_capping: pulumi.Output[dict]
    """
    The daily volume cap for ingestion.
      * `daily_quota_gb` (`float`) - The workspace daily quota for ingestion.
      * `data_ingestion_status` (`str`) - The status of data ingestion for this workspace.
      * `quota_next_reset_time` (`str`) - The time when the quota will be rest.
    """
    def __init__(__self__, resource_name, opts=None, e_tag=None, location=None, name=None, provisioning_state=None, public_network_access_for_ingestion=None, public_network_access_for_query=None, resource_group_name=None, retention_in_days=None, sku=None, tags=None, workspace_capping=None, __props__=None, __name__=None, __opts__=None):
        """
        The top level Workspace resource container.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] e_tag: The ETag of the workspace.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] name: The name of the workspace.
        :param pulumi.Input[str] provisioning_state: The provisioning state of the workspace.
        :param pulumi.Input[str] public_network_access_for_ingestion: The network access type for accessing Log Analytics ingestion.
        :param pulumi.Input[str] public_network_access_for_query: The network access type for accessing Log Analytics query.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[float] retention_in_days: The workspace data retention in days, between 30 and 730.
        :param pulumi.Input[dict] sku: The SKU of the workspace.
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[dict] workspace_capping: The daily volume cap for ingestion.

        The **sku** object supports the following:

          * `capacity_reservation_level` (`pulumi.Input[float]`) - The capacity reservation level for this workspace, when CapacityReservation sku is selected.
          * `name` (`pulumi.Input[str]`) - The name of the SKU.

        The **workspace_capping** object supports the following:

          * `daily_quota_gb` (`pulumi.Input[float]`) - The workspace daily quota for ingestion.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['e_tag'] = e_tag
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['provisioning_state'] = provisioning_state
            __props__['public_network_access_for_ingestion'] = public_network_access_for_ingestion
            __props__['public_network_access_for_query'] = public_network_access_for_query
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['retention_in_days'] = retention_in_days
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['workspace_capping'] = workspace_capping
            __props__['customer_id'] = None
            __props__['private_link_scoped_resources'] = None
            __props__['type'] = None
        super(Workspace, __self__).__init__(
            'azurerm:operationalinsights/v20200801:Workspace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Workspace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Workspace(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
