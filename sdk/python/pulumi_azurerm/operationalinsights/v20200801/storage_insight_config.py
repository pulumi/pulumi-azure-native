# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class StorageInsightConfig(pulumi.CustomResource):
    containers: pulumi.Output[list]
    """
    The names of the blob containers that the workspace should read
    """
    e_tag: pulumi.Output[str]
    """
    The ETag of the storage insight.
    """
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    status: pulumi.Output[dict]
    """
    The status of the storage insight
      * `description` (`str`) - Description of the state of the storage insight.
      * `state` (`str`) - The state of the storage insight connection to the workspace
    """
    storage_account: pulumi.Output[dict]
    """
    The storage account connection details
      * `id` (`str`) - The Azure Resource Manager ID of the storage account resource.
      * `key` (`str`) - The storage account key.
    """
    tables: pulumi.Output[list]
    """
    The names of the Azure tables that the workspace should read
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    """
    def __init__(__self__, resource_name, opts=None, containers=None, e_tag=None, name=None, resource_group_name=None, storage_account=None, tables=None, tags=None, workspace_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The top level storage insight resource container.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] containers: The names of the blob containers that the workspace should read
        :param pulumi.Input[str] e_tag: The ETag of the storage insight.
        :param pulumi.Input[str] name: Name of the storageInsightsConfigs resource
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[dict] storage_account: The storage account connection details
        :param pulumi.Input[list] tables: The names of the Azure tables that the workspace should read
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[str] workspace_name: The name of the workspace.

        The **storage_account** object supports the following:

          * `id` (`pulumi.Input[str]`) - The Azure Resource Manager ID of the storage account resource.
          * `key` (`pulumi.Input[str]`) - The storage account key.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['containers'] = containers
            __props__['e_tag'] = e_tag
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if storage_account is None:
                raise TypeError("Missing required property 'storage_account'")
            __props__['storage_account'] = storage_account
            __props__['tables'] = tables
            __props__['tags'] = tags
            if workspace_name is None:
                raise TypeError("Missing required property 'workspace_name'")
            __props__['workspace_name'] = workspace_name
            __props__['status'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:operationalinsights/v20150320:StorageInsightConfig")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(StorageInsightConfig, __self__).__init__(
            'azurerm:operationalinsights/v20200801:StorageInsightConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing StorageInsightConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return StorageInsightConfig(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
