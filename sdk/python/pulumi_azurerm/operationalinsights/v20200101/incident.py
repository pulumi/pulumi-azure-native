# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Incident(pulumi.CustomResource):
    additional_data: pulumi.Output[dict]
    """
    Additional data on the incident
      * `alert_product_names` (`list`) - List of product names of alerts in the incident
      * `alerts_count` (`float`) - The number of alerts in the incident
      * `bookmarks_count` (`float`) - The number of bookmarks in the incident
      * `comments_count` (`float`) - The number of comments in the incident
      * `tactics` (`list`) - The tactics associated with incident
    """
    classification: pulumi.Output[str]
    """
    The reason the incident was closed
    """
    classification_comment: pulumi.Output[str]
    """
    Describes the reason the incident was closed
    """
    classification_reason: pulumi.Output[str]
    """
    The classification reason the incident was closed with
    """
    created_time_utc: pulumi.Output[str]
    """
    The time the incident was created
    """
    description: pulumi.Output[str]
    """
    The description of the incident
    """
    etag: pulumi.Output[str]
    """
    Etag of the azure resource
    """
    first_activity_time_utc: pulumi.Output[str]
    """
    The time of the first activity in the incident
    """
    incident_number: pulumi.Output[float]
    """
    A sequential number
    """
    incident_url: pulumi.Output[str]
    """
    The deep-link url to the incident in Azure portal
    """
    labels: pulumi.Output[list]
    """
    List of labels relevant to this incident
      * `label_name` (`str`) - The name of the label
      * `label_type` (`str`) - The type of the label
    """
    last_activity_time_utc: pulumi.Output[str]
    """
    The time of the last activity in the incident
    """
    last_modified_time_utc: pulumi.Output[str]
    """
    The last time the incident was updated
    """
    name: pulumi.Output[str]
    """
    Azure resource name
    """
    owner: pulumi.Output[dict]
    """
    Describes a user that the incident is assigned to
      * `assigned_to` (`str`) - The name of the user the incident is assigned to.
      * `email` (`str`) - The email of the user the incident is assigned to.
      * `object_id` (`str`) - The object id of the user the incident is assigned to.
      * `user_principal_name` (`str`) - The user principal name of the user the incident is assigned to.
    """
    related_analytic_rule_ids: pulumi.Output[list]
    """
    List of resource ids of Analytic rules related to the incident
    """
    severity: pulumi.Output[str]
    """
    The severity of the incident
    """
    status: pulumi.Output[str]
    """
    The status of the incident
    """
    title: pulumi.Output[str]
    """
    The title of the incident
    """
    type: pulumi.Output[str]
    """
    Azure resource type
    """
    def __init__(__self__, resource_name, opts=None, classification=None, classification_comment=None, classification_reason=None, description=None, etag=None, first_activity_time_utc=None, labels=None, last_activity_time_utc=None, name=None, owner=None, resource_group_name=None, severity=None, status=None, title=None, workspace_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Represents an incident in Azure Security Insights.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] classification: The reason the incident was closed
        :param pulumi.Input[str] classification_comment: Describes the reason the incident was closed
        :param pulumi.Input[str] classification_reason: The classification reason the incident was closed with
        :param pulumi.Input[str] description: The description of the incident
        :param pulumi.Input[str] etag: Etag of the azure resource
        :param pulumi.Input[str] first_activity_time_utc: The time of the first activity in the incident
        :param pulumi.Input[list] labels: List of labels relevant to this incident
        :param pulumi.Input[str] last_activity_time_utc: The time of the last activity in the incident
        :param pulumi.Input[str] name: Incident ID
        :param pulumi.Input[dict] owner: Describes a user that the incident is assigned to
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.
        :param pulumi.Input[str] severity: The severity of the incident
        :param pulumi.Input[str] status: The status of the incident
        :param pulumi.Input[str] title: The title of the incident
        :param pulumi.Input[str] workspace_name: The name of the workspace.

        The **labels** object supports the following:

          * `label_name` (`pulumi.Input[str]`) - The name of the label

        The **owner** object supports the following:

          * `assigned_to` (`pulumi.Input[str]`) - The name of the user the incident is assigned to.
          * `email` (`pulumi.Input[str]`) - The email of the user the incident is assigned to.
          * `object_id` (`pulumi.Input[str]`) - The object id of the user the incident is assigned to.
          * `user_principal_name` (`pulumi.Input[str]`) - The user principal name of the user the incident is assigned to.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['classification'] = classification
            __props__['classification_comment'] = classification_comment
            __props__['classification_reason'] = classification_reason
            __props__['description'] = description
            __props__['etag'] = etag
            __props__['first_activity_time_utc'] = first_activity_time_utc
            __props__['labels'] = labels
            __props__['last_activity_time_utc'] = last_activity_time_utc
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['owner'] = owner
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if severity is None:
                raise TypeError("Missing required property 'severity'")
            __props__['severity'] = severity
            if status is None:
                raise TypeError("Missing required property 'status'")
            __props__['status'] = status
            if title is None:
                raise TypeError("Missing required property 'title'")
            __props__['title'] = title
            if workspace_name is None:
                raise TypeError("Missing required property 'workspace_name'")
            __props__['workspace_name'] = workspace_name
            __props__['additional_data'] = None
            __props__['created_time_utc'] = None
            __props__['incident_number'] = None
            __props__['incident_url'] = None
            __props__['last_modified_time_utc'] = None
            __props__['related_analytic_rule_ids'] = None
            __props__['type'] = None
        super(Incident, __self__).__init__(
            'azurerm:operationalinsights/v20200101:Incident',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Incident resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Incident(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
