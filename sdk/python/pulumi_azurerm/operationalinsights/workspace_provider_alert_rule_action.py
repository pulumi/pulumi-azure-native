# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class WorkspaceProviderAlertRuleAction(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    Etag of the action.
    """
    name: pulumi.Output[str]
    """
    Azure resource name
    """
    properties: pulumi.Output[dict]
    """
    Action properties for get request
      * `logic_app_resource_id` (`str`) - Logic App Resource Id, providers/Microsoft.Logic/workflows/{WorkflowID}.
      * `workflow_id` (`str`) - The name of the logic app's workflow.
    """
    type: pulumi.Output[str]
    """
    Azure resource type
    """
    def __init__(__self__, resource_name, opts=None, etag=None, name=None, properties=None, resource_group_name=None, rule_id=None, workspace_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Action for alert rule.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] etag: Etag of the azure resource
        :param pulumi.Input[str] name: Action ID
        :param pulumi.Input[dict] properties: Action properties for put request
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.
        :param pulumi.Input[str] rule_id: Alert rule ID
        :param pulumi.Input[str] workspace_name: The name of the workspace.

        The **properties** object supports the following:

          * `logic_app_resource_id` (`pulumi.Input[str]`) - Logic App Resource Id, providers/Microsoft.Logic/workflows/{WorkflowID}.
          * `trigger_uri` (`pulumi.Input[str]`) - Logic App Callback URL for this specific workflow.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['etag'] = etag
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if rule_id is None:
                raise TypeError("Missing required property 'rule_id'")
            __props__['rule_id'] = rule_id
            if workspace_name is None:
                raise TypeError("Missing required property 'workspace_name'")
            __props__['workspace_name'] = workspace_name
            __props__['type'] = None
        super(WorkspaceProviderAlertRuleAction, __self__).__init__(
            'azurerm:operationalinsights:WorkspaceProviderAlertRuleAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, etag=None, name=None, properties=None, type=None):
        """
        Get an existing WorkspaceProviderAlertRuleAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] etag: Etag of the action.
        :param pulumi.Input[str] name: Azure resource name
        :param pulumi.Input[dict] properties: Action properties for get request
        :param pulumi.Input[str] type: Azure resource type

        The **properties** object supports the following:

          * `logic_app_resource_id` (`pulumi.Input[str]`) - Logic App Resource Id, providers/Microsoft.Logic/workflows/{WorkflowID}.
          * `workflow_id` (`pulumi.Input[str]`) - The name of the logic app's workflow.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["etag"] = etag
        __props__["name"] = name
        __props__["properties"] = properties
        __props__["type"] = type
        return WorkspaceProviderAlertRuleAction(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
