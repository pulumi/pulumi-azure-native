# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetManagementLockResult:
    """
    Management lock information.
    """
    def __init__(__self__, level=None, name=None, notes=None, type=None):
        if level and not isinstance(level, str):
            raise TypeError("Expected argument 'level' to be a str")
        __self__.level = level
        """
        The lock level of the management lock.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the lock.
        """
        if notes and not isinstance(notes, str):
            raise TypeError("Expected argument 'notes' to be a str")
        __self__.notes = notes
        """
        The notes of the management lock.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the lock.
        """


class AwaitableGetManagementLockResult(GetManagementLockResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagementLockResult(
            level=self.level,
            name=self.name,
            notes=self.notes,
            type=self.type)


def get_management_lock(name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of the management lock.
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:authorization/v20150101:getManagementLock', __args__, opts=opts).value

    return AwaitableGetManagementLockResult(
        level=__ret__.get('level'),
        name=__ret__.get('name'),
        notes=__ret__.get('notes'),
        type=__ret__.get('type'))
