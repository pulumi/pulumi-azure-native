# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetManagementLockAtResourceLevelResult:
    """
    The lock information.
    """
    def __init__(__self__, level=None, name=None, notes=None, owners=None, type=None):
        if level and not isinstance(level, str):
            raise TypeError("Expected argument 'level' to be a str")
        __self__.level = level
        """
        The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the lock.
        """
        if notes and not isinstance(notes, str):
            raise TypeError("Expected argument 'notes' to be a str")
        __self__.notes = notes
        """
        Notes about the lock. Maximum of 512 characters.
        """
        if owners and not isinstance(owners, list):
            raise TypeError("Expected argument 'owners' to be a list")
        __self__.owners = owners
        """
        The owners of the lock.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The resource type of the lock - Microsoft.Authorization/locks.
        """


class AwaitableGetManagementLockAtResourceLevelResult(GetManagementLockAtResourceLevelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagementLockAtResourceLevelResult(
            level=self.level,
            name=self.name,
            notes=self.notes,
            owners=self.owners,
            type=self.type)


def get_management_lock_at_resource_level(name=None, parent_resource_path=None, resource_group_name=None, resource_name=None, resource_provider_namespace=None, resource_type=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of lock.
    :param str parent_resource_path: An extra path parameter needed in some services, like SQL Databases.
    :param str resource_group_name: The name of the resource group. 
    :param str resource_name: The name of the resource.
    :param str resource_provider_namespace: The namespace of the resource provider.
    :param str resource_type: The type of the resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['parentResourcePath'] = parent_resource_path
    __args__['resourceGroupName'] = resource_group_name
    __args__['resourceName'] = resource_name
    __args__['resourceProviderNamespace'] = resource_provider_namespace
    __args__['resourceType'] = resource_type
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:authorization/v20160901:getManagementLockAtResourceLevel', __args__, opts=opts).value

    return AwaitableGetManagementLockAtResourceLevelResult(
        level=__ret__.get('level'),
        name=__ret__.get('name'),
        notes=__ret__.get('notes'),
        owners=__ret__.get('owners'),
        type=__ret__.get('type'))
