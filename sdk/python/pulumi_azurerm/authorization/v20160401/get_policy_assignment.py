# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetPolicyAssignmentResult:
    """
    The policy assignment.
    """
    def __init__(__self__, display_name=None, name=None, policy_definition_id=None, scope=None, type=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        __self__.display_name = display_name
        """
        The display name of the policy assignment.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the policy assignment.
        """
        if policy_definition_id and not isinstance(policy_definition_id, str):
            raise TypeError("Expected argument 'policy_definition_id' to be a str")
        __self__.policy_definition_id = policy_definition_id
        """
        The ID of the policy definition.
        """
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        __self__.scope = scope
        """
        The scope for the policy assignment.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the policy assignment.
        """


class AwaitableGetPolicyAssignmentResult(GetPolicyAssignmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyAssignmentResult(
            display_name=self.display_name,
            name=self.name,
            policy_definition_id=self.policy_definition_id,
            scope=self.scope,
            type=self.type)


def get_policy_assignment(name=None, scope=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the policy assignment to get.
    :param str scope: The scope of the policy assignment.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['scope'] = scope
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:authorization/v20160401:getPolicyAssignment', __args__, opts=opts).value

    return AwaitableGetPolicyAssignmentResult(
        display_name=__ret__.get('displayName'),
        name=__ret__.get('name'),
        policy_definition_id=__ret__.get('policyDefinitionId'),
        scope=__ret__.get('scope'),
        type=__ret__.get('type'))
