# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'BotPropertiesResponse',
    'ChannelResponse',
    'ConnectionSettingParameterResponse',
    'ConnectionSettingPropertiesResponse',
    'ServiceProviderParameterResponseResult',
    'ServiceProviderPropertiesResponseResult',
    'ServiceProviderResponseResult',
    'SkuResponse',
]

@pulumi.output_type
class BotPropertiesResponse(dict):
    """
    The parameters to provide for the Bot.
    """
    def __init__(__self__, *,
                 configured_channels: List[str],
                 display_name: str,
                 enabled_channels: List[str],
                 endpoint: str,
                 endpoint_version: str,
                 msa_app_id: str,
                 description: Optional[str] = None,
                 developer_app_insight_key: Optional[str] = None,
                 developer_app_insights_api_key: Optional[str] = None,
                 developer_app_insights_application_id: Optional[str] = None,
                 icon_url: Optional[str] = None,
                 luis_app_ids: Optional[List[str]] = None,
                 luis_key: Optional[str] = None):
        """
        The parameters to provide for the Bot.
        :param List[str] configured_channels: Collection of channels for which the bot is configured
        :param str display_name: The Name of the bot
        :param List[str] enabled_channels: Collection of channels for which the bot is enabled
        :param str endpoint: The bot's endpoint
        :param str endpoint_version: The bot's endpoint version
        :param str msa_app_id: Microsoft App Id for the bot
        :param str description: The description of the bot
        :param str developer_app_insight_key: The Application Insights key
        :param str developer_app_insights_api_key: The Application Insights Api Key
        :param str developer_app_insights_application_id: The Application Insights App Id
        :param str icon_url: The Icon Url of the bot
        :param List[str] luis_app_ids: Collection of LUIS App Ids
        :param str luis_key: The LUIS Key
        """
        pulumi.set(__self__, "configured_channels", configured_channels)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enabled_channels", enabled_channels)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "endpoint_version", endpoint_version)
        pulumi.set(__self__, "msa_app_id", msa_app_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if developer_app_insight_key is not None:
            pulumi.set(__self__, "developer_app_insight_key", developer_app_insight_key)
        if developer_app_insights_api_key is not None:
            pulumi.set(__self__, "developer_app_insights_api_key", developer_app_insights_api_key)
        if developer_app_insights_application_id is not None:
            pulumi.set(__self__, "developer_app_insights_application_id", developer_app_insights_application_id)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if luis_app_ids is not None:
            pulumi.set(__self__, "luis_app_ids", luis_app_ids)
        if luis_key is not None:
            pulumi.set(__self__, "luis_key", luis_key)

    @property
    @pulumi.getter(name="configuredChannels")
    def configured_channels(self) -> List[str]:
        """
        Collection of channels for which the bot is configured
        """
        return pulumi.get(self, "configured_channels")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The Name of the bot
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="enabledChannels")
    def enabled_channels(self) -> List[str]:
        """
        Collection of channels for which the bot is enabled
        """
        return pulumi.get(self, "enabled_channels")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        The bot's endpoint
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="endpointVersion")
    def endpoint_version(self) -> str:
        """
        The bot's endpoint version
        """
        return pulumi.get(self, "endpoint_version")

    @property
    @pulumi.getter(name="msaAppId")
    def msa_app_id(self) -> str:
        """
        Microsoft App Id for the bot
        """
        return pulumi.get(self, "msa_app_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the bot
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="developerAppInsightKey")
    def developer_app_insight_key(self) -> Optional[str]:
        """
        The Application Insights key
        """
        return pulumi.get(self, "developer_app_insight_key")

    @property
    @pulumi.getter(name="developerAppInsightsApiKey")
    def developer_app_insights_api_key(self) -> Optional[str]:
        """
        The Application Insights Api Key
        """
        return pulumi.get(self, "developer_app_insights_api_key")

    @property
    @pulumi.getter(name="developerAppInsightsApplicationId")
    def developer_app_insights_application_id(self) -> Optional[str]:
        """
        The Application Insights App Id
        """
        return pulumi.get(self, "developer_app_insights_application_id")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[str]:
        """
        The Icon Url of the bot
        """
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter(name="luisAppIds")
    def luis_app_ids(self) -> Optional[List[str]]:
        """
        Collection of LUIS App Ids
        """
        return pulumi.get(self, "luis_app_ids")

    @property
    @pulumi.getter(name="luisKey")
    def luis_key(self) -> Optional[str]:
        """
        The LUIS Key
        """
        return pulumi.get(self, "luis_key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ChannelResponse(dict):
    """
    Channel definition
    """
    def __init__(__self__, *,
                 channel_name: str):
        """
        Channel definition
        :param str channel_name: The channel name
        """
        pulumi.set(__self__, "channel_name", channel_name)

    @property
    @pulumi.getter(name="channelName")
    def channel_name(self) -> str:
        """
        The channel name
        """
        return pulumi.get(self, "channel_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectionSettingParameterResponse(dict):
    """
    Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
    """
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
        :param str key: Key for the Connection Setting Parameter.
        :param str value: Value associated with the Connection Setting Parameter.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key for the Connection Setting Parameter.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value associated with the Connection Setting Parameter.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectionSettingPropertiesResponse(dict):
    """
    Properties for a Connection Setting Item
    """
    def __init__(__self__, *,
                 setting_id: str,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 parameters: Optional[List['outputs.ConnectionSettingParameterResponse']] = None,
                 scopes: Optional[str] = None,
                 service_provider_display_name: Optional[str] = None,
                 service_provider_id: Optional[str] = None):
        """
        Properties for a Connection Setting Item
        :param str setting_id: Setting Id set by the service for the Connection Setting.
        :param str client_id: Client Id associated with the Connection Setting.
        :param str client_secret: Client Secret associated with the Connection Setting
        :param List['ConnectionSettingParameterResponseArgs'] parameters: Service Provider Parameters associated with the Connection Setting
        :param str scopes: Scopes associated with the Connection Setting
        :param str service_provider_display_name: Service Provider Display Name associated with the Connection Setting
        :param str service_provider_id: Service Provider Id associated with the Connection Setting
        """
        pulumi.set(__self__, "setting_id", setting_id)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if service_provider_display_name is not None:
            pulumi.set(__self__, "service_provider_display_name", service_provider_display_name)
        if service_provider_id is not None:
            pulumi.set(__self__, "service_provider_id", service_provider_id)

    @property
    @pulumi.getter(name="settingId")
    def setting_id(self) -> str:
        """
        Setting Id set by the service for the Connection Setting.
        """
        return pulumi.get(self, "setting_id")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        Client Id associated with the Connection Setting.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        """
        Client Secret associated with the Connection Setting
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[List['outputs.ConnectionSettingParameterResponse']]:
        """
        Service Provider Parameters associated with the Connection Setting
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[str]:
        """
        Scopes associated with the Connection Setting
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="serviceProviderDisplayName")
    def service_provider_display_name(self) -> Optional[str]:
        """
        Service Provider Display Name associated with the Connection Setting
        """
        return pulumi.get(self, "service_provider_display_name")

    @property
    @pulumi.getter(name="serviceProviderId")
    def service_provider_id(self) -> Optional[str]:
        """
        Service Provider Id associated with the Connection Setting
        """
        return pulumi.get(self, "service_provider_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceProviderParameterResponseResult(dict):
    """
    Extra Parameters specific to each Service Provider
    """
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 display_name: str,
                 help_url: str,
                 name: str,
                 type: str):
        """
        Extra Parameters specific to each Service Provider
        :param str default: Default Name for the Service Provider
        :param str description: Description of the Service Provider
        :param str display_name: Display Name of the Service Provider
        :param str help_url: Help Url for the  Service Provider
        :param str name: Name of the Service Provider
        :param str type: Type of the Service Provider
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "help_url", help_url)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Default Name for the Service Provider
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the Service Provider
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name of the Service Provider
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> str:
        """
        Help Url for the  Service Provider
        """
        return pulumi.get(self, "help_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Service Provider
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Service Provider
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceProviderPropertiesResponseResult(dict):
    """
    The Object used to describe a Service Provider supported by Bot Service
    """
    def __init__(__self__, *,
                 dev_portal_url: str,
                 display_name: str,
                 icon_url: str,
                 id: str,
                 service_provider_name: str,
                 parameters: Optional[List['outputs.ServiceProviderParameterResponseResult']] = None):
        """
        The Object used to describe a Service Provider supported by Bot Service
        :param str dev_portal_url: Display Name of the Service Provider
        :param str display_name: Display Name of the Service Provider
        :param str icon_url: Display Name of the Service Provider
        :param str id: Id for Service Provider
        :param str service_provider_name: Display Name of the Service Provider
        :param List['ServiceProviderParameterResponseArgs'] parameters: The list of parameters for the Service Provider
        """
        pulumi.set(__self__, "dev_portal_url", dev_portal_url)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "icon_url", icon_url)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "service_provider_name", service_provider_name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="devPortalUrl")
    def dev_portal_url(self) -> str:
        """
        Display Name of the Service Provider
        """
        return pulumi.get(self, "dev_portal_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name of the Service Provider
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> str:
        """
        Display Name of the Service Provider
        """
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id for Service Provider
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serviceProviderName")
    def service_provider_name(self) -> str:
        """
        Display Name of the Service Provider
        """
        return pulumi.get(self, "service_provider_name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[List['outputs.ServiceProviderParameterResponseResult']]:
        """
        The list of parameters for the Service Provider
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ServiceProviderResponseResult(dict):
    """
    Service Provider Definition
    """
    def __init__(__self__, *,
                 properties: Optional['outputs.ServiceProviderPropertiesResponseResult'] = None):
        """
        Service Provider Definition
        :param 'ServiceProviderPropertiesResponseArgs' properties: The Properties of a Service Provider Object
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ServiceProviderPropertiesResponseResult']:
        """
        The Properties of a Service Provider Object
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class SkuResponse(dict):
    """
    The SKU of the cognitive services account.
    """
    def __init__(__self__, *,
                 name: str,
                 tier: str):
        """
        The SKU of the cognitive services account.
        :param str name: The sku name
        :param str tier: Gets the sku tier. This is based on the SKU name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The sku name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tier(self) -> str:
        """
        Gets the sku tier. This is based on the SKU name.
        """
        return pulumi.get(self, "tier")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


