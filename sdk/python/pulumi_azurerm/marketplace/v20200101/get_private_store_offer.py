# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetPrivateStoreOfferResult:
    """
    The privateStore offer data structure.
    """
    def __init__(__self__, created_by=None, created_date=None, e_tag=None, name=None, offer_display_name=None, private_store_id=None, publisher_display_name=None, specific_plan_ids_limitation=None, type=None, unique_offer_id=None):
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        __self__.created_by = created_by
        """
        Private store offer creator name
        """
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        __self__.created_date = created_date
        """
        Private store offer created date
        """
        if e_tag and not isinstance(e_tag, str):
            raise TypeError("Expected argument 'e_tag' to be a str")
        __self__.e_tag = e_tag
        """
        Identifier for purposes of race condition
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if offer_display_name and not isinstance(offer_display_name, str):
            raise TypeError("Expected argument 'offer_display_name' to be a str")
        __self__.offer_display_name = offer_display_name
        """
        It will be displayed prominently in the marketplace
        """
        if private_store_id and not isinstance(private_store_id, str):
            raise TypeError("Expected argument 'private_store_id' to be a str")
        __self__.private_store_id = private_store_id
        """
        Private store unique id
        """
        if publisher_display_name and not isinstance(publisher_display_name, str):
            raise TypeError("Expected argument 'publisher_display_name' to be a str")
        __self__.publisher_display_name = publisher_display_name
        """
        Publisher name that will be displayed prominently in the marketplace
        """
        if specific_plan_ids_limitation and not isinstance(specific_plan_ids_limitation, list):
            raise TypeError("Expected argument 'specific_plan_ids_limitation' to be a list")
        __self__.specific_plan_ids_limitation = specific_plan_ids_limitation
        """
        Plan ids limitation for this offer
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """
        if unique_offer_id and not isinstance(unique_offer_id, str):
            raise TypeError("Expected argument 'unique_offer_id' to be a str")
        __self__.unique_offer_id = unique_offer_id
        """
        Offers unique id
        """


class AwaitableGetPrivateStoreOfferResult(GetPrivateStoreOfferResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateStoreOfferResult(
            created_by=self.created_by,
            created_date=self.created_date,
            e_tag=self.e_tag,
            name=self.name,
            offer_display_name=self.offer_display_name,
            private_store_id=self.private_store_id,
            publisher_display_name=self.publisher_display_name,
            specific_plan_ids_limitation=self.specific_plan_ids_limitation,
            type=self.type,
            unique_offer_id=self.unique_offer_id)


def get_private_store_offer(name=None, private_store_id=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The offer ID to update or delete
    :param str private_store_id: The store ID - must use the tenant ID
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['privateStoreId'] = private_store_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:marketplace/v20200101:getPrivateStoreOffer', __args__, opts=opts).value

    return AwaitableGetPrivateStoreOfferResult(
        created_by=__ret__.get('createdBy'),
        created_date=__ret__.get('createdDate'),
        e_tag=__ret__.get('eTag'),
        name=__ret__.get('name'),
        offer_display_name=__ret__.get('offerDisplayName'),
        private_store_id=__ret__.get('privateStoreId'),
        publisher_display_name=__ret__.get('publisherDisplayName'),
        specific_plan_ids_limitation=__ret__.get('specificPlanIdsLimitation'),
        type=__ret__.get('type'),
        unique_offer_id=__ret__.get('uniqueOfferId'))
