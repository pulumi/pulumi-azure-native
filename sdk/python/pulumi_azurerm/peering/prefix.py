# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class Prefix(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    properties: pulumi.Output[dict]
    """
    Gets or sets the peering prefix properties.
      * `error_message` (`str`) - The error message for validation state
      * `events` (`list`) - The list of events for peering service prefix
        * `event_description` (`str`) - The description of the event associated with a prefix.
        * `event_level` (`str`) - The level of the event associated with a prefix.
        * `event_summary` (`str`) - The summary of the event associated with a prefix.
        * `event_timestamp` (`str`) - The timestamp of the event associated with a prefix.
        * `event_type` (`str`) - The type of the event associated with a prefix.

      * `learned_type` (`str`) - The prefix learned type
      * `peering_service_prefix_key` (`str`) - The peering service prefix key
      * `prefix` (`str`) - The prefix from which your traffic originates.
      * `prefix_validation_state` (`str`) - The prefix validation state
      * `provisioning_state` (`str`) - The provisioning state of the resource.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    def __init__(__self__, resource_name, opts=None, name=None, peering_service_name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The peering service prefix class.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the prefix.
        :param pulumi.Input[str] peering_service_name: The name of the peering service.
        :param pulumi.Input[dict] properties: Gets or sets the peering prefix properties.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.

        The **properties** object supports the following:

          * `peering_service_prefix_key` (`pulumi.Input[str]`) - The peering service prefix key
          * `prefix` (`pulumi.Input[str]`) - The prefix from which your traffic originates.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if peering_service_name is None:
                raise TypeError("Missing required property 'peering_service_name'")
            __props__['peering_service_name'] = peering_service_name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['type'] = None
        super(Prefix, __self__).__init__(
            'azurerm:peering:Prefix',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Prefix resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Prefix(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
