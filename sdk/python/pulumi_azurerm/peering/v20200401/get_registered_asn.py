# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetRegisteredAsnResult:
    """
    The customer's ASN that is registered by the peering service provider.
    """
    def __init__(__self__, asn=None, name=None, peering_service_prefix_key=None, provisioning_state=None, type=None):
        if asn and not isinstance(asn, float):
            raise TypeError("Expected argument 'asn' to be a float")
        __self__.asn = asn
        """
        The customer's ASN from which traffic originates.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if peering_service_prefix_key and not isinstance(peering_service_prefix_key, str):
            raise TypeError("Expected argument 'peering_service_prefix_key' to be a str")
        __self__.peering_service_prefix_key = peering_service_prefix_key
        """
        The peering service prefix key that is to be shared with the customer.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the resource.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """


class AwaitableGetRegisteredAsnResult(GetRegisteredAsnResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegisteredAsnResult(
            asn=self.asn,
            name=self.name,
            peering_service_prefix_key=self.peering_service_prefix_key,
            provisioning_state=self.provisioning_state,
            type=self.type)


def get_registered_asn(name=None, peering_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the registered ASN.
    :param str peering_name: The name of the peering.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['peeringName'] = peering_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:peering/v20200401:getRegisteredAsn', __args__, opts=opts).value

    return AwaitableGetRegisteredAsnResult(
        asn=__ret__.get('asn'),
        name=__ret__.get('name'),
        peering_service_prefix_key=__ret__.get('peeringServicePrefixKey'),
        provisioning_state=__ret__.get('provisioningState'),
        type=__ret__.get('type'))
