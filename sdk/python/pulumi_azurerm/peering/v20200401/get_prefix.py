# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetPrefixResult:
    """
    The peering service prefix class.
    """
    def __init__(__self__, error_message=None, events=None, learned_type=None, name=None, peering_service_prefix_key=None, prefix=None, prefix_validation_state=None, provisioning_state=None, type=None):
        if error_message and not isinstance(error_message, str):
            raise TypeError("Expected argument 'error_message' to be a str")
        __self__.error_message = error_message
        """
        The error message for validation state
        """
        if events and not isinstance(events, list):
            raise TypeError("Expected argument 'events' to be a list")
        __self__.events = events
        """
        The list of events for peering service prefix
        """
        if learned_type and not isinstance(learned_type, str):
            raise TypeError("Expected argument 'learned_type' to be a str")
        __self__.learned_type = learned_type
        """
        The prefix learned type
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if peering_service_prefix_key and not isinstance(peering_service_prefix_key, str):
            raise TypeError("Expected argument 'peering_service_prefix_key' to be a str")
        __self__.peering_service_prefix_key = peering_service_prefix_key
        """
        The peering service prefix key
        """
        if prefix and not isinstance(prefix, str):
            raise TypeError("Expected argument 'prefix' to be a str")
        __self__.prefix = prefix
        """
        The prefix from which your traffic originates.
        """
        if prefix_validation_state and not isinstance(prefix_validation_state, str):
            raise TypeError("Expected argument 'prefix_validation_state' to be a str")
        __self__.prefix_validation_state = prefix_validation_state
        """
        The prefix validation state
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the resource.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """


class AwaitableGetPrefixResult(GetPrefixResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrefixResult(
            error_message=self.error_message,
            events=self.events,
            learned_type=self.learned_type,
            name=self.name,
            peering_service_prefix_key=self.peering_service_prefix_key,
            prefix=self.prefix,
            prefix_validation_state=self.prefix_validation_state,
            provisioning_state=self.provisioning_state,
            type=self.type)


def get_prefix(expand=None, name=None, peering_service_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str expand: The properties to be expanded.
    :param str name: The name of the prefix.
    :param str peering_service_name: The name of the peering service.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['expand'] = expand
    __args__['name'] = name
    __args__['peeringServiceName'] = peering_service_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:peering/v20200401:getPrefix', __args__, opts=opts).value

    return AwaitableGetPrefixResult(
        error_message=__ret__.get('errorMessage'),
        events=__ret__.get('events'),
        learned_type=__ret__.get('learnedType'),
        name=__ret__.get('name'),
        peering_service_prefix_key=__ret__.get('peeringServicePrefixKey'),
        prefix=__ret__.get('prefix'),
        prefix_validation_state=__ret__.get('prefixValidationState'),
        provisioning_state=__ret__.get('provisioningState'),
        type=__ret__.get('type'))
