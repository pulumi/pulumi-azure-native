# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Peering(pulumi.CustomResource):
    direct: pulumi.Output[dict]
    """
    The properties that define a direct peering.
      * `connections` (`list`) - The set of connections that constitute a direct peering.
        * `bandwidth_in_mbps` (`float`) - The bandwidth of the connection.
        * `bgp_session` (`dict`) - The BGP session associated with the connection.
          * `max_prefixes_advertised_v4` (`float`) - The maximum number of prefixes advertised over the IPv4 session.
          * `max_prefixes_advertised_v6` (`float`) - The maximum number of prefixes advertised over the IPv6 session.
          * `md5_authentication_key` (`str`) - The MD5 authentication key of the session.
          * `microsoft_session_i_pv4_address` (`str`) - The IPv4 session address on Microsoft's end.
          * `microsoft_session_i_pv6_address` (`str`) - The IPv6 session address on Microsoft's end.
          * `peer_session_i_pv4_address` (`str`) - The IPv4 session address on peer's end.
          * `peer_session_i_pv6_address` (`str`) - The IPv6 session address on peer's end.
          * `session_prefix_v4` (`str`) - The IPv4 prefix that contains both ends' IPv4 addresses.
          * `session_prefix_v6` (`str`) - The IPv6 prefix that contains both ends' IPv6 addresses.
          * `session_state_v4` (`str`) - The state of the IPv4 session.
          * `session_state_v6` (`str`) - The state of the IPv6 session.

        * `connection_identifier` (`str`) - The unique identifier (GUID) for the connection.
        * `connection_state` (`str`) - The state of the connection.
        * `error_message` (`str`) - The error message related to the connection state, if any.
        * `peering_db_facility_id` (`float`) - The PeeringDB.com ID of the facility at which the connection has to be set up.
        * `provisioned_bandwidth_in_mbps` (`float`) - The bandwidth that is actually provisioned.
        * `session_address_provider` (`str`) - The field indicating if Microsoft provides session ip addresses.
        * `use_for_peering_service` (`bool`) - The flag that indicates whether or not the connection is used for peering service.

      * `direct_peering_type` (`str`) - The type of direct peering.
      * `peer_asn` (`dict`) - The reference of the peer ASN.
        * `id` (`str`) - The identifier of the referenced resource.

      * `use_for_peering_service` (`bool`) - The flag that indicates whether or not the peering is used for peering service.
    """
    exchange: pulumi.Output[dict]
    """
    The properties that define an exchange peering.
      * `connections` (`list`) - The set of connections that constitute an exchange peering.
        * `bgp_session` (`dict`) - The BGP session associated with the connection.
          * `max_prefixes_advertised_v4` (`float`) - The maximum number of prefixes advertised over the IPv4 session.
          * `max_prefixes_advertised_v6` (`float`) - The maximum number of prefixes advertised over the IPv6 session.
          * `md5_authentication_key` (`str`) - The MD5 authentication key of the session.
          * `microsoft_session_i_pv4_address` (`str`) - The IPv4 session address on Microsoft's end.
          * `microsoft_session_i_pv6_address` (`str`) - The IPv6 session address on Microsoft's end.
          * `peer_session_i_pv4_address` (`str`) - The IPv4 session address on peer's end.
          * `peer_session_i_pv6_address` (`str`) - The IPv6 session address on peer's end.
          * `session_prefix_v4` (`str`) - The IPv4 prefix that contains both ends' IPv4 addresses.
          * `session_prefix_v6` (`str`) - The IPv6 prefix that contains both ends' IPv6 addresses.
          * `session_state_v4` (`str`) - The state of the IPv4 session.
          * `session_state_v6` (`str`) - The state of the IPv6 session.

        * `connection_identifier` (`str`) - The unique identifier (GUID) for the connection.
        * `connection_state` (`str`) - The state of the connection.
        * `error_message` (`str`) - The error message related to the connection state, if any.
        * `peering_db_facility_id` (`float`) - The PeeringDB.com ID of the facility at which the connection has to be set up.

      * `peer_asn` (`dict`) - The reference of the peer ASN.
        * `id` (`str`) - The identifier of the referenced resource.
    """
    kind: pulumi.Output[str]
    """
    The kind of the peering.
    """
    location: pulumi.Output[str]
    """
    The location of the resource.
    """
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    peering_location: pulumi.Output[str]
    """
    The location of the peering.
    """
    provisioning_state: pulumi.Output[str]
    """
    The provisioning state of the resource.
    """
    sku: pulumi.Output[dict]
    """
    The SKU that defines the tier and kind of the peering.
      * `family` (`str`) - The family of the peering SKU.
      * `name` (`str`) - The name of the peering SKU.
      * `size` (`str`) - The size of the peering SKU.
      * `tier` (`str`) - The tier of the peering SKU.
    """
    tags: pulumi.Output[dict]
    """
    The resource tags.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    def __init__(__self__, resource_name, opts=None, direct=None, exchange=None, kind=None, location=None, name=None, peering_location=None, resource_group_name=None, sku=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] direct: The properties that define a direct peering.
        :param pulumi.Input[dict] exchange: The properties that define an exchange peering.
        :param pulumi.Input[str] kind: The kind of the peering.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] name: The name of the peering.
        :param pulumi.Input[str] peering_location: The location of the peering.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] sku: The SKU that defines the tier and kind of the peering.
        :param pulumi.Input[dict] tags: The resource tags.

        The **direct** object supports the following:

          * `connections` (`pulumi.Input[list]`) - The set of connections that constitute a direct peering.
            * `bandwidth_in_mbps` (`pulumi.Input[float]`) - The bandwidth of the connection.
            * `bgp_session` (`pulumi.Input[dict]`) - The BGP session associated with the connection.
              * `max_prefixes_advertised_v4` (`pulumi.Input[float]`) - The maximum number of prefixes advertised over the IPv4 session.
              * `max_prefixes_advertised_v6` (`pulumi.Input[float]`) - The maximum number of prefixes advertised over the IPv6 session.
              * `md5_authentication_key` (`pulumi.Input[str]`) - The MD5 authentication key of the session.
              * `microsoft_session_i_pv4_address` (`pulumi.Input[str]`) - The IPv4 session address on Microsoft's end.
              * `microsoft_session_i_pv6_address` (`pulumi.Input[str]`) - The IPv6 session address on Microsoft's end.
              * `peer_session_i_pv4_address` (`pulumi.Input[str]`) - The IPv4 session address on peer's end.
              * `peer_session_i_pv6_address` (`pulumi.Input[str]`) - The IPv6 session address on peer's end.
              * `session_prefix_v4` (`pulumi.Input[str]`) - The IPv4 prefix that contains both ends' IPv4 addresses.
              * `session_prefix_v6` (`pulumi.Input[str]`) - The IPv6 prefix that contains both ends' IPv6 addresses.

            * `connection_identifier` (`pulumi.Input[str]`) - The unique identifier (GUID) for the connection.
            * `peering_db_facility_id` (`pulumi.Input[float]`) - The PeeringDB.com ID of the facility at which the connection has to be set up.
            * `session_address_provider` (`pulumi.Input[str]`) - The field indicating if Microsoft provides session ip addresses.
            * `use_for_peering_service` (`pulumi.Input[bool]`) - The flag that indicates whether or not the connection is used for peering service.

          * `direct_peering_type` (`pulumi.Input[str]`) - The type of direct peering.
          * `peer_asn` (`pulumi.Input[dict]`) - The reference of the peer ASN.
            * `id` (`pulumi.Input[str]`) - The identifier of the referenced resource.

        The **exchange** object supports the following:

          * `connections` (`pulumi.Input[list]`) - The set of connections that constitute an exchange peering.
            * `bgp_session` (`pulumi.Input[dict]`) - The BGP session associated with the connection.
            * `connection_identifier` (`pulumi.Input[str]`) - The unique identifier (GUID) for the connection.
            * `peering_db_facility_id` (`pulumi.Input[float]`) - The PeeringDB.com ID of the facility at which the connection has to be set up.

          * `peer_asn` (`pulumi.Input[dict]`) - The reference of the peer ASN.

        The **sku** object supports the following:

          * `family` (`pulumi.Input[str]`) - The family of the peering SKU.
          * `name` (`pulumi.Input[str]`) - The name of the peering SKU.
          * `size` (`pulumi.Input[str]`) - The size of the peering SKU.
          * `tier` (`pulumi.Input[str]`) - The tier of the peering SKU.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['direct'] = direct
            __props__['exchange'] = exchange
            if kind is None:
                raise TypeError("Missing required property 'kind'")
            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['peering_location'] = peering_location
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if sku is None:
                raise TypeError("Missing required property 'sku'")
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['provisioning_state'] = None
            __props__['type'] = None
        super(Peering, __self__).__init__(
            'azurerm:peering/v20200401:Peering',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Peering resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Peering(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
