# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class PeerAsn(pulumi.CustomResource):
    error_message: pulumi.Output[str]
    """
    The error message for the validation state
    """
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    peer_asn: pulumi.Output[float]
    """
    The Autonomous System Number (ASN) of the peer.
    """
    peer_contact_detail: pulumi.Output[list]
    """
    The contact details of the peer.
      * `email` (`str`) - The e-mail address of the contact.
      * `phone` (`str`) - The phone number of the contact.
      * `role` (`str`) - The role of the contact.
    """
    peer_name: pulumi.Output[str]
    """
    The name of the peer.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    validation_state: pulumi.Output[str]
    """
    The validation state of the ASN associated with the peer.
    """
    def __init__(__self__, resource_name, opts=None, name=None, peer_asn=None, peer_contact_detail=None, peer_name=None, validation_state=None, __props__=None, __name__=None, __opts__=None):
        """
        The essential information related to the peer's ASN.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The peer ASN name.
        :param pulumi.Input[float] peer_asn: The Autonomous System Number (ASN) of the peer.
        :param pulumi.Input[list] peer_contact_detail: The contact details of the peer.
        :param pulumi.Input[str] peer_name: The name of the peer.
        :param pulumi.Input[str] validation_state: The validation state of the ASN associated with the peer.

        The **peer_contact_detail** object supports the following:

          * `email` (`pulumi.Input[str]`) - The e-mail address of the contact.
          * `phone` (`pulumi.Input[str]`) - The phone number of the contact.
          * `role` (`pulumi.Input[str]`) - The role of the contact.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['peer_asn'] = peer_asn
            __props__['peer_contact_detail'] = peer_contact_detail
            __props__['peer_name'] = peer_name
            __props__['validation_state'] = validation_state
            __props__['error_message'] = None
            __props__['type'] = None
        super(PeerAsn, __self__).__init__(
            'azurerm:peering/v20200401:PeerAsn',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing PeerAsn resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return PeerAsn(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
