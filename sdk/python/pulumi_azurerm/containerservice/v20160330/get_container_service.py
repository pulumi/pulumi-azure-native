# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetContainerServiceResult:
    """
    Container service.
    """
    def __init__(__self__, agent_pool_profiles=None, diagnostics_profile=None, linux_profile=None, location=None, master_profile=None, name=None, orchestrator_profile=None, provisioning_state=None, tags=None, type=None, windows_profile=None):
        if agent_pool_profiles and not isinstance(agent_pool_profiles, list):
            raise TypeError("Expected argument 'agent_pool_profiles' to be a list")
        __self__.agent_pool_profiles = agent_pool_profiles
        """
        Properties of the agent pool.
        """
        if diagnostics_profile and not isinstance(diagnostics_profile, dict):
            raise TypeError("Expected argument 'diagnostics_profile' to be a dict")
        __self__.diagnostics_profile = diagnostics_profile
        """
        Properties of the diagnostic agent.
        """
        if linux_profile and not isinstance(linux_profile, dict):
            raise TypeError("Expected argument 'linux_profile' to be a dict")
        __self__.linux_profile = linux_profile
        """
        Properties of Linux VMs.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if master_profile and not isinstance(master_profile, dict):
            raise TypeError("Expected argument 'master_profile' to be a dict")
        __self__.master_profile = master_profile
        """
        Properties of master agents.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if orchestrator_profile and not isinstance(orchestrator_profile, dict):
            raise TypeError("Expected argument 'orchestrator_profile' to be a dict")
        __self__.orchestrator_profile = orchestrator_profile
        """
        Properties of the orchestrator.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        the current deployment or provisioning state, which only appears in the response.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """
        if windows_profile and not isinstance(windows_profile, dict):
            raise TypeError("Expected argument 'windows_profile' to be a dict")
        __self__.windows_profile = windows_profile
        """
        Properties of Windows VMs.
        """


class AwaitableGetContainerServiceResult(GetContainerServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerServiceResult(
            agent_pool_profiles=self.agent_pool_profiles,
            diagnostics_profile=self.diagnostics_profile,
            linux_profile=self.linux_profile,
            location=self.location,
            master_profile=self.master_profile,
            name=self.name,
            orchestrator_profile=self.orchestrator_profile,
            provisioning_state=self.provisioning_state,
            tags=self.tags,
            type=self.type,
            windows_profile=self.windows_profile)


def get_container_service(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the container service in the specified subscription and resource group.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:containerservice/v20160330:getContainerService', __args__, opts=opts).value

    return AwaitableGetContainerServiceResult(
        agent_pool_profiles=__ret__.get('agentPoolProfiles'),
        diagnostics_profile=__ret__.get('diagnosticsProfile'),
        linux_profile=__ret__.get('linuxProfile'),
        location=__ret__.get('location'),
        master_profile=__ret__.get('masterProfile'),
        name=__ret__.get('name'),
        orchestrator_profile=__ret__.get('orchestratorProfile'),
        provisioning_state=__ret__.get('provisioningState'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        windows_profile=__ret__.get('windowsProfile'))
