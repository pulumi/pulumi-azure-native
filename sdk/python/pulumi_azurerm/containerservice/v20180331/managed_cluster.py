# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ManagedCluster(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Properties of a managed cluster.
      * `aad_profile` (`dict`) - Profile of Azure Active Directory configuration.
        * `client_app_id` (`str`) - The client AAD application ID.
        * `server_app_id` (`str`) - The server AAD application ID.
        * `server_app_secret` (`str`) - The server AAD application secret.
        * `tenant_id` (`str`) - The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.

      * `addon_profiles` (`dict`) - Profile of managed cluster add-on.
      * `agent_pool_profiles` (`list`) - Properties of the agent pool. Currently only one agent pool can exist.
        * `count` (`float`) - Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. 
        * `max_pods` (`float`) - Maximum number of pods that can run on a node.
        * `name` (`str`) - Unique name of the agent pool profile in the context of the subscription and resource group.
        * `os_disk_size_gb` (`float`) - OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
        * `os_type` (`str`) - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
        * `storage_profile` (`str`) - Storage profile specifies what kind of storage used. Defaults to ManagedDisks.
        * `vm_size` (`str`) - Size of agent VMs.
        * `vnet_subnet_id` (`str`) - VNet SubnetID specifies the VNet's subnet identifier.

      * `dns_prefix` (`str`) - DNS prefix specified when creating the managed cluster.
      * `enable_rbac` (`bool`) - Whether to enable Kubernetes Role-Based Access Control.
      * `fqdn` (`str`) - FQDN for the master pool.
      * `kubernetes_version` (`str`) - Version of Kubernetes specified when creating the managed cluster.
      * `linux_profile` (`dict`) - Profile for Linux VMs in the container service cluster.
        * `admin_username` (`str`) - The administrator username to use for Linux VMs.
        * `ssh` (`dict`) - SSH configuration for Linux-based VMs running on Azure.
          * `public_keys` (`list`) - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
            * `key_data` (`str`) - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.

      * `network_profile` (`dict`) - Profile of network configuration.
        * `dns_service_ip` (`str`) - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
        * `docker_bridge_cidr` (`str`) - A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
        * `network_plugin` (`str`) - Network plugin used for building Kubernetes network.
        * `network_policy` (`str`) - Network policy used for building Kubernetes network.
        * `pod_cidr` (`str`) - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
        * `service_cidr` (`str`) - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.

      * `node_resource_group` (`str`) - Name of the resource group containing agent pool nodes.
      * `provisioning_state` (`str`) - The current deployment or provisioning state, which only appears in the response.
      * `service_principal_profile` (`dict`) - Information about a service principal identity for the cluster to use for manipulating Azure APIs.
        * `client_id` (`str`) - The ID for the service principal.
        * `secret` (`str`) - The secret password associated with the service principal in plain text.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, aad_profile=None, addon_profiles=None, agent_pool_profiles=None, dns_prefix=None, enable_rbac=None, kubernetes_version=None, linux_profile=None, location=None, name=None, network_profile=None, resource_group_name=None, service_principal_profile=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Managed cluster.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] aad_profile: Profile of Azure Active Directory configuration.
        :param pulumi.Input[dict] addon_profiles: Profile of managed cluster add-on.
        :param pulumi.Input[list] agent_pool_profiles: Properties of the agent pool. Currently only one agent pool can exist.
        :param pulumi.Input[str] dns_prefix: DNS prefix specified when creating the managed cluster.
        :param pulumi.Input[bool] enable_rbac: Whether to enable Kubernetes Role-Based Access Control.
        :param pulumi.Input[str] kubernetes_version: Version of Kubernetes specified when creating the managed cluster.
        :param pulumi.Input[dict] linux_profile: Profile for Linux VMs in the container service cluster.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The name of the managed cluster resource.
        :param pulumi.Input[dict] network_profile: Profile of network configuration.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] service_principal_profile: Information about a service principal identity for the cluster to use for manipulating Azure APIs.
        :param pulumi.Input[dict] tags: Resource tags

        The **aad_profile** object supports the following:

          * `client_app_id` (`pulumi.Input[str]`) - The client AAD application ID.
          * `server_app_id` (`pulumi.Input[str]`) - The server AAD application ID.
          * `server_app_secret` (`pulumi.Input[str]`) - The server AAD application secret.
          * `tenant_id` (`pulumi.Input[str]`) - The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.

        The **agent_pool_profiles** object supports the following:

          * `count` (`pulumi.Input[float]`) - Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. 
          * `max_pods` (`pulumi.Input[float]`) - Maximum number of pods that can run on a node.
          * `name` (`pulumi.Input[str]`) - Unique name of the agent pool profile in the context of the subscription and resource group.
          * `os_disk_size_gb` (`pulumi.Input[float]`) - OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
          * `os_type` (`pulumi.Input[str]`) - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
          * `vm_size` (`pulumi.Input[str]`) - Size of agent VMs.
          * `vnet_subnet_id` (`pulumi.Input[str]`) - VNet SubnetID specifies the VNet's subnet identifier.

        The **linux_profile** object supports the following:

          * `admin_username` (`pulumi.Input[str]`) - The administrator username to use for Linux VMs.
          * `ssh` (`pulumi.Input[dict]`) - SSH configuration for Linux-based VMs running on Azure.
            * `public_keys` (`pulumi.Input[list]`) - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
              * `key_data` (`pulumi.Input[str]`) - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.

        The **network_profile** object supports the following:

          * `dns_service_ip` (`pulumi.Input[str]`) - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
          * `docker_bridge_cidr` (`pulumi.Input[str]`) - A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
          * `network_plugin` (`pulumi.Input[str]`) - Network plugin used for building Kubernetes network.
          * `network_policy` (`pulumi.Input[str]`) - Network policy used for building Kubernetes network.
          * `pod_cidr` (`pulumi.Input[str]`) - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
          * `service_cidr` (`pulumi.Input[str]`) - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.

        The **service_principal_profile** object supports the following:

          * `client_id` (`pulumi.Input[str]`) - The ID for the service principal.
          * `secret` (`pulumi.Input[str]`) - The secret password associated with the service principal in plain text.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['aad_profile'] = aad_profile
            __props__['addon_profiles'] = addon_profiles
            __props__['agent_pool_profiles'] = agent_pool_profiles
            __props__['dns_prefix'] = dns_prefix
            __props__['enable_rbac'] = enable_rbac
            __props__['kubernetes_version'] = kubernetes_version
            __props__['linux_profile'] = linux_profile
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['network_profile'] = network_profile
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['service_principal_profile'] = service_principal_profile
            __props__['tags'] = tags
            __props__['properties'] = None
            __props__['type'] = None
        super(ManagedCluster, __self__).__init__(
            'azurerm:containerservice/v20180331:ManagedCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ManagedCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ManagedCluster(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
