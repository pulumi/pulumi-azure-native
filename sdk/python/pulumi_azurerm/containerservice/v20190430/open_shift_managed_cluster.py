# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class OpenShiftManagedCluster(pulumi.CustomResource):
    agent_pool_profiles: pulumi.Output[list]
    """
    Configuration of OpenShift cluster VMs.
      * `count` (`float`) - Number of agents (VMs) to host docker containers.
      * `name` (`str`) - Unique name of the pool profile in the context of the subscription and resource group.
      * `os_type` (`str`) - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
      * `role` (`str`) - Define the role of the AgentPoolProfile.
      * `subnet_cidr` (`str`) - Subnet CIDR for the peering.
      * `vm_size` (`str`) - Size of agent VMs.
    """
    auth_profile: pulumi.Output[dict]
    """
    Configures OpenShift authentication.
      * `identity_providers` (`list`) - Type of authentication profile to use.
        * `name` (`str`) - Name of the provider.
        * `provider` (`dict`) - Configuration of the provider.
          * `kind` (`str`) - The kind of the provider.
    """
    cluster_version: pulumi.Output[str]
    """
    Version of OpenShift specified when creating the cluster.
    """
    fqdn: pulumi.Output[str]
    """
    Service generated FQDN for OpenShift API server loadbalancer internal hostname.
    """
    location: pulumi.Output[str]
    """
    Resource location
    """
    master_pool_profile: pulumi.Output[dict]
    """
    Configuration for OpenShift master VMs.
      * `count` (`float`) - Number of masters (VMs) to host docker containers. The default value is 3.
      * `name` (`str`) - Unique name of the master pool profile in the context of the subscription and resource group.
      * `os_type` (`str`) - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
      * `subnet_cidr` (`str`) - Subnet CIDR for the peering.
      * `vm_size` (`str`) - Size of agent VMs.
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    network_profile: pulumi.Output[dict]
    """
    Configuration for OpenShift networking.
      * `peer_vnet_id` (`str`) - CIDR of the Vnet to peer.
      * `vnet_cidr` (`str`) - CIDR for the OpenShift Vnet.
      * `vnet_id` (`str`) - ID of the Vnet created for OSA cluster.
    """
    open_shift_version: pulumi.Output[str]
    """
    Version of OpenShift specified when creating the cluster.
    """
    plan: pulumi.Output[dict]
    """
    Define the resource plan as required by ARM for billing purposes
      * `name` (`str`) - The plan ID.
      * `product` (`str`) - Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
      * `promotion_code` (`str`) - The promotion code.
      * `publisher` (`str`) - The plan ID.
    """
    provisioning_state: pulumi.Output[str]
    """
    The current deployment or provisioning state, which only appears in the response.
    """
    public_hostname: pulumi.Output[str]
    """
    Service generated FQDN for OpenShift API server.
    """
    router_profiles: pulumi.Output[list]
    """
    Configuration for OpenShift router(s).
      * `fqdn` (`str`) - Auto-allocated FQDN for the OpenShift router.
      * `name` (`str`) - Name of the router profile.
      * `public_subdomain` (`str`) - DNS subdomain for OpenShift router.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, agent_pool_profiles=None, auth_profile=None, location=None, master_pool_profile=None, name=None, network_profile=None, open_shift_version=None, plan=None, resource_group_name=None, router_profiles=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        OpenShift Managed cluster.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] agent_pool_profiles: Configuration of OpenShift cluster VMs.
        :param pulumi.Input[dict] auth_profile: Configures OpenShift authentication.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[dict] master_pool_profile: Configuration for OpenShift master VMs.
        :param pulumi.Input[str] name: The name of the OpenShift managed cluster resource.
        :param pulumi.Input[dict] network_profile: Configuration for OpenShift networking.
        :param pulumi.Input[str] open_shift_version: Version of OpenShift specified when creating the cluster.
        :param pulumi.Input[dict] plan: Define the resource plan as required by ARM for billing purposes
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[list] router_profiles: Configuration for OpenShift router(s).
        :param pulumi.Input[dict] tags: Resource tags

        The **agent_pool_profiles** object supports the following:

          * `count` (`pulumi.Input[float]`) - Number of agents (VMs) to host docker containers.
          * `name` (`pulumi.Input[str]`) - Unique name of the pool profile in the context of the subscription and resource group.
          * `os_type` (`pulumi.Input[str]`) - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
          * `role` (`pulumi.Input[str]`) - Define the role of the AgentPoolProfile.
          * `subnet_cidr` (`pulumi.Input[str]`) - Subnet CIDR for the peering.
          * `vm_size` (`pulumi.Input[str]`) - Size of agent VMs.

        The **auth_profile** object supports the following:

          * `identity_providers` (`pulumi.Input[list]`) - Type of authentication profile to use.
            * `name` (`pulumi.Input[str]`) - Name of the provider.
            * `provider` (`pulumi.Input[dict]`) - Configuration of the provider.
              * `kind` (`pulumi.Input[str]`) - The kind of the provider.

        The **master_pool_profile** object supports the following:

          * `count` (`pulumi.Input[float]`) - Number of masters (VMs) to host docker containers. The default value is 3.
          * `name` (`pulumi.Input[str]`) - Unique name of the master pool profile in the context of the subscription and resource group.
          * `os_type` (`pulumi.Input[str]`) - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
          * `subnet_cidr` (`pulumi.Input[str]`) - Subnet CIDR for the peering.
          * `vm_size` (`pulumi.Input[str]`) - Size of agent VMs.

        The **network_profile** object supports the following:

          * `peer_vnet_id` (`pulumi.Input[str]`) - CIDR of the Vnet to peer.
          * `vnet_cidr` (`pulumi.Input[str]`) - CIDR for the OpenShift Vnet.
          * `vnet_id` (`pulumi.Input[str]`) - ID of the Vnet created for OSA cluster.

        The **plan** object supports the following:

          * `name` (`pulumi.Input[str]`) - The plan ID.
          * `product` (`pulumi.Input[str]`) - Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
          * `promotion_code` (`pulumi.Input[str]`) - The promotion code.
          * `publisher` (`pulumi.Input[str]`) - The plan ID.

        The **router_profiles** object supports the following:

          * `name` (`pulumi.Input[str]`) - Name of the router profile.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['agent_pool_profiles'] = agent_pool_profiles
            __props__['auth_profile'] = auth_profile
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            __props__['master_pool_profile'] = master_pool_profile
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['network_profile'] = network_profile
            if open_shift_version is None:
                raise TypeError("Missing required property 'open_shift_version'")
            __props__['open_shift_version'] = open_shift_version
            __props__['plan'] = plan
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['router_profiles'] = router_profiles
            __props__['tags'] = tags
            __props__['cluster_version'] = None
            __props__['fqdn'] = None
            __props__['provisioning_state'] = None
            __props__['public_hostname'] = None
            __props__['type'] = None
        super(OpenShiftManagedCluster, __self__).__init__(
            'azurerm:containerservice/v20190430:OpenShiftManagedCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing OpenShiftManagedCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return OpenShiftManagedCluster(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
