# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetOpenShiftManagedClusterResult:
    """
    OpenShift Managed cluster.
    """
    def __init__(__self__, agent_pool_profiles=None, auth_profile=None, cluster_version=None, fqdn=None, location=None, master_pool_profile=None, name=None, network_profile=None, open_shift_version=None, plan=None, provisioning_state=None, public_hostname=None, router_profiles=None, tags=None, type=None):
        if agent_pool_profiles and not isinstance(agent_pool_profiles, list):
            raise TypeError("Expected argument 'agent_pool_profiles' to be a list")
        __self__.agent_pool_profiles = agent_pool_profiles
        """
        Configuration of OpenShift cluster VMs.
        """
        if auth_profile and not isinstance(auth_profile, dict):
            raise TypeError("Expected argument 'auth_profile' to be a dict")
        __self__.auth_profile = auth_profile
        """
        Configures OpenShift authentication.
        """
        if cluster_version and not isinstance(cluster_version, str):
            raise TypeError("Expected argument 'cluster_version' to be a str")
        __self__.cluster_version = cluster_version
        """
        Version of OpenShift specified when creating the cluster.
        """
        if fqdn and not isinstance(fqdn, str):
            raise TypeError("Expected argument 'fqdn' to be a str")
        __self__.fqdn = fqdn
        """
        Service generated FQDN for OpenShift API server loadbalancer internal hostname.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if master_pool_profile and not isinstance(master_pool_profile, dict):
            raise TypeError("Expected argument 'master_pool_profile' to be a dict")
        __self__.master_pool_profile = master_pool_profile
        """
        Configuration for OpenShift master VMs.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if network_profile and not isinstance(network_profile, dict):
            raise TypeError("Expected argument 'network_profile' to be a dict")
        __self__.network_profile = network_profile
        """
        Configuration for OpenShift networking.
        """
        if open_shift_version and not isinstance(open_shift_version, str):
            raise TypeError("Expected argument 'open_shift_version' to be a str")
        __self__.open_shift_version = open_shift_version
        """
        Version of OpenShift specified when creating the cluster.
        """
        if plan and not isinstance(plan, dict):
            raise TypeError("Expected argument 'plan' to be a dict")
        __self__.plan = plan
        """
        Define the resource plan as required by ARM for billing purposes
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The current deployment or provisioning state, which only appears in the response.
        """
        if public_hostname and not isinstance(public_hostname, str):
            raise TypeError("Expected argument 'public_hostname' to be a str")
        __self__.public_hostname = public_hostname
        """
        Service generated FQDN for OpenShift API server.
        """
        if router_profiles and not isinstance(router_profiles, list):
            raise TypeError("Expected argument 'router_profiles' to be a list")
        __self__.router_profiles = router_profiles
        """
        Configuration for OpenShift router(s).
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """


class AwaitableGetOpenShiftManagedClusterResult(GetOpenShiftManagedClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOpenShiftManagedClusterResult(
            agent_pool_profiles=self.agent_pool_profiles,
            auth_profile=self.auth_profile,
            cluster_version=self.cluster_version,
            fqdn=self.fqdn,
            location=self.location,
            master_pool_profile=self.master_pool_profile,
            name=self.name,
            network_profile=self.network_profile,
            open_shift_version=self.open_shift_version,
            plan=self.plan,
            provisioning_state=self.provisioning_state,
            public_hostname=self.public_hostname,
            router_profiles=self.router_profiles,
            tags=self.tags,
            type=self.type)


def get_open_shift_managed_cluster(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the OpenShift managed cluster resource.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:containerservice/v20190430:getOpenShiftManagedCluster', __args__, opts=opts).value

    return AwaitableGetOpenShiftManagedClusterResult(
        agent_pool_profiles=__ret__.get('agentPoolProfiles'),
        auth_profile=__ret__.get('authProfile'),
        cluster_version=__ret__.get('clusterVersion'),
        fqdn=__ret__.get('fqdn'),
        location=__ret__.get('location'),
        master_pool_profile=__ret__.get('masterPoolProfile'),
        name=__ret__.get('name'),
        network_profile=__ret__.get('networkProfile'),
        open_shift_version=__ret__.get('openShiftVersion'),
        plan=__ret__.get('plan'),
        provisioning_state=__ret__.get('provisioningState'),
        public_hostname=__ret__.get('publicHostname'),
        router_profiles=__ret__.get('routerProfiles'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
