# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetAgentPoolResult:
    """
    Agent Pool.
    """
    def __init__(__self__, availability_zones=None, count=None, enable_auto_scaling=None, enable_node_public_ip=None, max_count=None, max_pods=None, min_count=None, mode=None, name=None, node_labels=None, node_taints=None, orchestrator_version=None, os_disk_size_gb=None, os_type=None, provisioning_state=None, scale_set_eviction_policy=None, scale_set_priority=None, spot_max_price=None, tags=None, type=None, vm_size=None, vnet_subnet_id=None):
        if availability_zones and not isinstance(availability_zones, list):
            raise TypeError("Expected argument 'availability_zones' to be a list")
        __self__.availability_zones = availability_zones
        """
        Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
        """
        if count and not isinstance(count, float):
            raise TypeError("Expected argument 'count' to be a float")
        __self__.count = count
        """
        Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The default value is 1.
        """
        if enable_auto_scaling and not isinstance(enable_auto_scaling, bool):
            raise TypeError("Expected argument 'enable_auto_scaling' to be a bool")
        __self__.enable_auto_scaling = enable_auto_scaling
        """
        Whether to enable auto-scaler
        """
        if enable_node_public_ip and not isinstance(enable_node_public_ip, bool):
            raise TypeError("Expected argument 'enable_node_public_ip' to be a bool")
        __self__.enable_node_public_ip = enable_node_public_ip
        """
        Enable public IP for nodes
        """
        if max_count and not isinstance(max_count, float):
            raise TypeError("Expected argument 'max_count' to be a float")
        __self__.max_count = max_count
        """
        Maximum number of nodes for auto-scaling
        """
        if max_pods and not isinstance(max_pods, float):
            raise TypeError("Expected argument 'max_pods' to be a float")
        __self__.max_pods = max_pods
        """
        Maximum number of pods that can run on a node.
        """
        if min_count and not isinstance(min_count, float):
            raise TypeError("Expected argument 'min_count' to be a float")
        __self__.min_count = min_count
        """
        Minimum number of nodes for auto-scaling
        """
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        __self__.mode = mode
        """
        AgentPoolMode represents mode of an agent pool
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource that is unique within a resource group. This name can be used to access the resource.
        """
        if node_labels and not isinstance(node_labels, dict):
            raise TypeError("Expected argument 'node_labels' to be a dict")
        __self__.node_labels = node_labels
        """
        Agent pool node labels to be persisted across all nodes in agent pool.
        """
        if node_taints and not isinstance(node_taints, list):
            raise TypeError("Expected argument 'node_taints' to be a list")
        __self__.node_taints = node_taints
        """
        Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
        """
        if orchestrator_version and not isinstance(orchestrator_version, str):
            raise TypeError("Expected argument 'orchestrator_version' to be a str")
        __self__.orchestrator_version = orchestrator_version
        """
        Version of orchestrator specified when creating the managed cluster.
        """
        if os_disk_size_gb and not isinstance(os_disk_size_gb, float):
            raise TypeError("Expected argument 'os_disk_size_gb' to be a float")
        __self__.os_disk_size_gb = os_disk_size_gb
        """
        OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
        """
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        __self__.os_type = os_type
        """
        OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The current deployment or provisioning state, which only appears in the response.
        """
        if scale_set_eviction_policy and not isinstance(scale_set_eviction_policy, str):
            raise TypeError("Expected argument 'scale_set_eviction_policy' to be a str")
        __self__.scale_set_eviction_policy = scale_set_eviction_policy
        """
        ScaleSetEvictionPolicy to be used to specify eviction policy for Spot or low priority virtual machine scale set. Default to Delete.
        """
        if scale_set_priority and not isinstance(scale_set_priority, str):
            raise TypeError("Expected argument 'scale_set_priority' to be a str")
        __self__.scale_set_priority = scale_set_priority
        """
        ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular.
        """
        if spot_max_price and not isinstance(spot_max_price, float):
            raise TypeError("Expected argument 'spot_max_price' to be a float")
        __self__.spot_max_price = spot_max_price
        """
        SpotMaxPrice to be used to specify the maximum price you are willing to pay in US Dollars. Possible values are any decimal value greater than zero or -1 which indicates default price to be up-to on-demand.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Agent pool tags to be persisted on the agent pool virtual machine scale set.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        AgentPoolType represents types of an agent pool
        """
        if vm_size and not isinstance(vm_size, str):
            raise TypeError("Expected argument 'vm_size' to be a str")
        __self__.vm_size = vm_size
        """
        Size of agent VMs.
        """
        if vnet_subnet_id and not isinstance(vnet_subnet_id, str):
            raise TypeError("Expected argument 'vnet_subnet_id' to be a str")
        __self__.vnet_subnet_id = vnet_subnet_id
        """
        VNet SubnetID specifies the VNet's subnet identifier.
        """


class AwaitableGetAgentPoolResult(GetAgentPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAgentPoolResult(
            availability_zones=self.availability_zones,
            count=self.count,
            enable_auto_scaling=self.enable_auto_scaling,
            enable_node_public_ip=self.enable_node_public_ip,
            max_count=self.max_count,
            max_pods=self.max_pods,
            min_count=self.min_count,
            mode=self.mode,
            name=self.name,
            node_labels=self.node_labels,
            node_taints=self.node_taints,
            orchestrator_version=self.orchestrator_version,
            os_disk_size_gb=self.os_disk_size_gb,
            os_type=self.os_type,
            provisioning_state=self.provisioning_state,
            scale_set_eviction_policy=self.scale_set_eviction_policy,
            scale_set_priority=self.scale_set_priority,
            spot_max_price=self.spot_max_price,
            tags=self.tags,
            type=self.type,
            vm_size=self.vm_size,
            vnet_subnet_id=self.vnet_subnet_id)


def get_agent_pool(name=None, resource_group_name=None, resource_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the agent pool.
    :param str resource_group_name: The name of the resource group.
    :param str resource_name: The name of the managed cluster resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['resourceName'] = resource_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:containerservice/v20200301:getAgentPool', __args__, opts=opts).value

    return AwaitableGetAgentPoolResult(
        availability_zones=__ret__.get('availabilityZones'),
        count=__ret__.get('count'),
        enable_auto_scaling=__ret__.get('enableAutoScaling'),
        enable_node_public_ip=__ret__.get('enableNodePublicIP'),
        max_count=__ret__.get('maxCount'),
        max_pods=__ret__.get('maxPods'),
        min_count=__ret__.get('minCount'),
        mode=__ret__.get('mode'),
        name=__ret__.get('name'),
        node_labels=__ret__.get('nodeLabels'),
        node_taints=__ret__.get('nodeTaints'),
        orchestrator_version=__ret__.get('orchestratorVersion'),
        os_disk_size_gb=__ret__.get('osDiskSizeGB'),
        os_type=__ret__.get('osType'),
        provisioning_state=__ret__.get('provisioningState'),
        scale_set_eviction_policy=__ret__.get('scaleSetEvictionPolicy'),
        scale_set_priority=__ret__.get('scaleSetPriority'),
        spot_max_price=__ret__.get('spotMaxPrice'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        vm_size=__ret__.get('vmSize'),
        vnet_subnet_id=__ret__.get('vnetSubnetID'))
