# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'DiagnosticConditionResponse',
    'DiagnosticsResponse',
    'FunctionPropertiesResponse',
    'FunctionResponse',
    'InputPropertiesResponse',
    'InputResponse',
    'OutputDataSourceResponse',
    'OutputResponse',
    'SerializationResponse',
    'SkuResponse',
    'TransformationResponse',
]

@pulumi.output_type
class DiagnosticConditionResponse(dict):
    """
    Condition applicable to the resource, or to the job overall, that warrant customer attention.
    """
    def __init__(__self__, *,
                 code: str,
                 message: str,
                 since: str):
        """
        Condition applicable to the resource, or to the job overall, that warrant customer attention.
        :param str code: The opaque diagnostic code.
        :param str message: The human-readable message describing the condition in detail. Localized in the Accept-Language of the client request.
        :param str since: The UTC timestamp of when the condition started. Customers should be able to find a corresponding event in the ops log around this time.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "since", since)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The opaque diagnostic code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The human-readable message describing the condition in detail. Localized in the Accept-Language of the client request.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def since(self) -> str:
        """
        The UTC timestamp of when the condition started. Customers should be able to find a corresponding event in the ops log around this time.
        """
        return pulumi.get(self, "since")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiagnosticsResponse(dict):
    """
    Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
    """
    def __init__(__self__, *,
                 conditions: List['outputs.DiagnosticConditionResponse']):
        """
        Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
        :param List['DiagnosticConditionResponseArgs'] conditions: A collection of zero or more conditions applicable to the resource, or to the job overall, that warrant customer attention.
        """
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> List['outputs.DiagnosticConditionResponse']:
        """
        A collection of zero or more conditions applicable to the resource, or to the job overall, that warrant customer attention.
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionPropertiesResponse(dict):
    """
    The properties that are associated with a function.
    """
    def __init__(__self__, *,
                 etag: str,
                 type: Optional[str] = None):
        """
        The properties that are associated with a function.
        :param str etag: The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
        :param str type: Indicates the type of function.
        """
        pulumi.set(__self__, "etag", etag)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Indicates the type of function.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionResponse(dict):
    """
    A function object, containing all information associated with the named function. All functions are contained under a streaming job.
    """
    def __init__(__self__, *,
                 id: str,
                 type: str,
                 name: Optional[str] = None,
                 properties: Optional['outputs.FunctionPropertiesResponse'] = None):
        """
        A function object, containing all information associated with the named function. All functions are contained under a streaming job.
        :param str id: Resource Id
        :param str type: Resource type
        :param str name: Resource name
        :param 'FunctionPropertiesResponseArgs' properties: The properties that are associated with a function.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.FunctionPropertiesResponse']:
        """
        The properties that are associated with a function.
        """
        return pulumi.get(self, "properties")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InputPropertiesResponse(dict):
    """
    The properties that are associated with an input.
    """
    def __init__(__self__, *,
                 diagnostics: 'outputs.DiagnosticsResponse',
                 etag: str,
                 serialization: Optional['outputs.SerializationResponse'] = None,
                 type: Optional[str] = None):
        """
        The properties that are associated with an input.
        :param 'DiagnosticsResponseArgs' diagnostics: Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
        :param str etag: The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
        :param 'SerializationResponseArgs' serialization: Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
        :param str type: Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
        """
        pulumi.set(__self__, "diagnostics", diagnostics)
        pulumi.set(__self__, "etag", etag)
        if serialization is not None:
            pulumi.set(__self__, "serialization", serialization)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def diagnostics(self) -> 'outputs.DiagnosticsResponse':
        """
        Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
        """
        return pulumi.get(self, "diagnostics")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def serialization(self) -> Optional['outputs.SerializationResponse']:
        """
        Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
        """
        return pulumi.get(self, "serialization")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InputResponse(dict):
    """
    An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
    """
    def __init__(__self__, *,
                 id: str,
                 type: str,
                 name: Optional[str] = None,
                 properties: Optional['outputs.InputPropertiesResponse'] = None):
        """
        An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
        :param str id: Resource Id
        :param str type: Resource type
        :param str name: Resource name
        :param 'InputPropertiesResponseArgs' properties: The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.InputPropertiesResponse']:
        """
        The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
        """
        return pulumi.get(self, "properties")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OutputDataSourceResponse(dict):
    """
    Describes the data source that output will be written to.
    """
    def __init__(__self__, *,
                 type: Optional[str] = None):
        """
        Describes the data source that output will be written to.
        :param str type: Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OutputResponse(dict):
    """
    An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
    """
    def __init__(__self__, *,
                 diagnostics: 'outputs.DiagnosticsResponse',
                 etag: str,
                 id: str,
                 type: str,
                 datasource: Optional['outputs.OutputDataSourceResponse'] = None,
                 name: Optional[str] = None,
                 serialization: Optional['outputs.SerializationResponse'] = None):
        """
        An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
        :param 'DiagnosticsResponseArgs' diagnostics: Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
        :param str etag: The current entity tag for the output. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
        :param str id: Resource Id
        :param str type: Resource type
        :param 'OutputDataSourceResponseArgs' datasource: Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
        :param str name: Resource name
        :param 'SerializationResponseArgs' serialization: Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
        """
        pulumi.set(__self__, "diagnostics", diagnostics)
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if datasource is not None:
            pulumi.set(__self__, "datasource", datasource)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if serialization is not None:
            pulumi.set(__self__, "serialization", serialization)

    @property
    @pulumi.getter
    def diagnostics(self) -> 'outputs.DiagnosticsResponse':
        """
        Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
        """
        return pulumi.get(self, "diagnostics")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        The current entity tag for the output. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def datasource(self) -> Optional['outputs.OutputDataSourceResponse']:
        """
        Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
        """
        return pulumi.get(self, "datasource")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def serialization(self) -> Optional['outputs.SerializationResponse']:
        """
        Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
        """
        return pulumi.get(self, "serialization")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SerializationResponse(dict):
    """
    Describes how data from an input is serialized or how data is serialized when written to an output.
    """
    def __init__(__self__, *,
                 type: Optional[str] = None):
        """
        Describes how data from an input is serialized or how data is serialized when written to an output.
        :param str type: Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SkuResponse(dict):
    """
    The properties that are associated with a SKU.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        The properties that are associated with a SKU.
        :param str name: The name of the SKU. Required on PUT (CreateOrReplace) requests.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the SKU. Required on PUT (CreateOrReplace) requests.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TransformationResponse(dict):
    """
    A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
    """
    def __init__(__self__, *,
                 etag: str,
                 id: str,
                 type: str,
                 name: Optional[str] = None,
                 query: Optional[str] = None,
                 streaming_units: Optional[float] = None):
        """
        A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
        :param str etag: The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
        :param str id: Resource Id
        :param str type: Resource type
        :param str name: Resource name
        :param str query: Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
        :param float streaming_units: Specifies the number of streaming units that the streaming job uses.
        """
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if streaming_units is not None:
            pulumi.set(__self__, "streaming_units", streaming_units)

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        """
        Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="streamingUnits")
    def streaming_units(self) -> Optional[float]:
        """
        Specifies the number of streaming units that the streaming job uses.
        """
        return pulumi.get(self, "streaming_units")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


