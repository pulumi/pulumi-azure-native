# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class DedicatedCloudNode(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Azure region
    """
    name: pulumi.Output[str]
    """
    {dedicatedCloudNodeName}
    """
    properties: pulumi.Output[dict]
    """
    Dedicated Cloud Nodes properties
      * `availability_zone_id` (`str`) - Availability Zone id, e.g. "az1"
      * `availability_zone_name` (`str`) - Availability Zone name, e.g. "Availability Zone 1"
      * `cloud_rack_name` (`str`) - VMWare Cloud Rack Name
      * `created` (`dict`) - date time the resource was created
      * `nodes_count` (`float`) - count of nodes to create
      * `placement_group_id` (`str`) - Placement Group id, e.g. "n1"
      * `placement_group_name` (`str`) - Placement Name, e.g. "Placement Group 1"
      * `private_cloud_id` (`str`) - Private Cloud Id
      * `private_cloud_name` (`str`) - Resource Pool Name
      * `provisioning_state` (`str`) - The provisioning status of the resource
      * `purchase_id` (`str`) - purchase id
      * `sku_description` (`dict`) - Dedicated Cloud Nodes SKU's description
        * `id` (`str`) - SKU's id
        * `name` (`str`) - SKU's name

      * `status` (`str`) - Node status, indicates is private cloud set up on this node or not
      * `vmware_cluster_name` (`str`) - VMWare Cluster Name
    """
    sku: pulumi.Output[dict]
    """
    Dedicated Cloud Nodes SKU
      * `capacity` (`str`) - The capacity of the SKU
      * `description` (`str`) - dedicatedCloudNode example: 8 x Ten-Core Intel速 Xeon速 Processor E5-2640 v4 2.40GHz 25MB Cache (90W); 12 x 64GB PC4-19200 2400MHz DDR4 ECC Registered DIMM, ...
      * `family` (`str`) - If the service has different generations of hardware, for the same SKU, then that can be captured here
      * `name` (`str`) - The name of the SKU for VMWare CloudSimple Node
      * `tier` (`str`) - The tier of the SKU
    """
    tags: pulumi.Output[dict]
    """
    Dedicated Cloud Nodes tags
    """
    type: pulumi.Output[str]
    """
    {resourceProviderNamespace}/{resourceType}
    """
    def __init__(__self__, resource_name, opts=None, referer=None, location=None, name=None, properties=None, resource_group_name=None, sku=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Dedicated cloud node model

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] referer: referer url
        :param pulumi.Input[str] location: Azure region
        :param pulumi.Input[str] name: dedicated cloud node name
        :param pulumi.Input[dict] properties: Dedicated Cloud Nodes properties
        :param pulumi.Input[str] resource_group_name: The name of the resource group
        :param pulumi.Input[dict] sku: Dedicated Cloud Nodes SKU
        :param pulumi.Input[dict] tags: Dedicated Cloud Nodes tags

        The **properties** object supports the following:

          * `availability_zone_id` (`pulumi.Input[str]`) - Availability Zone id, e.g. "az1"
          * `nodes_count` (`pulumi.Input[float]`) - count of nodes to create
          * `placement_group_id` (`pulumi.Input[str]`) - Placement Group id, e.g. "n1"
          * `purchase_id` (`pulumi.Input[str]`) - purchase id
          * `sku_description` (`pulumi.Input[dict]`) - Dedicated Cloud Nodes SKU's description
            * `id` (`pulumi.Input[str]`) - SKU's id
            * `name` (`pulumi.Input[str]`) - SKU's name

        The **sku** object supports the following:

          * `capacity` (`pulumi.Input[str]`) - The capacity of the SKU
          * `description` (`pulumi.Input[str]`) - dedicatedCloudNode example: 8 x Ten-Core Intel速 Xeon速 Processor E5-2640 v4 2.40GHz 25MB Cache (90W); 12 x 64GB PC4-19200 2400MHz DDR4 ECC Registered DIMM, ...
          * `family` (`pulumi.Input[str]`) - If the service has different generations of hardware, for the same SKU, then that can be captured here
          * `name` (`pulumi.Input[str]`) - The name of the SKU for VMWare CloudSimple Node
          * `tier` (`pulumi.Input[str]`) - The tier of the SKU
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if referer is None:
                raise TypeError("Missing required property 'referer'")
            __props__['referer'] = referer
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['type'] = None
        super(DedicatedCloudNode, __self__).__init__(
            'azurerm:vmwarecloudsimple/v20190401:DedicatedCloudNode',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing DedicatedCloudNode resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return DedicatedCloudNode(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
