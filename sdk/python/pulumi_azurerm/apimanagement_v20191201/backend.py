# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class Backend(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    Backend entity contract properties.
      * `credentials` (`dict`) - Backend Credentials Contract Properties
        * `authorization` (`dict`) - Authorization header authentication
          * `parameter` (`str`) - Authentication Parameter value.
          * `scheme` (`str`) - Authentication Scheme name.

        * `certificate` (`list`) - List of Client Certificate Thumbprint.
        * `header` (`dict`) - Header Parameter description.
        * `query` (`dict`) - Query Parameter description.

      * `description` (`str`) - Backend Description.
      * `properties` (`dict`) - Backend Properties contract
        * `service_fabric_cluster` (`dict`) - Backend Service Fabric Cluster Properties
          * `client_certificatethumbprint` (`str`) - The client certificate thumbprint for the management endpoint.
          * `management_endpoints` (`list`) - The cluster management endpoint.
          * `max_partition_resolution_retries` (`float`) - Maximum number of retries while attempting resolve the partition.
          * `server_certificate_thumbprints` (`list`) - Thumbprints of certificates cluster management service uses for tls communication
          * `server_x509_names` (`list`) - Server X509 Certificate Names Collection
            * `issuer_certificate_thumbprint` (`str`) - Thumbprint for the Issuer of the Certificate.
            * `name` (`str`) - Common Name of the Certificate.

      * `protocol` (`str`) - Backend communication protocol.
      * `proxy` (`dict`) - Backend Proxy Contract Properties
        * `password` (`str`) - Password to connect to the WebProxy Server
        * `url` (`str`) - WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
        * `username` (`str`) - Username to connect to the WebProxy server

      * `resource_id` (`str`) - Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.
      * `title` (`str`) - Backend Title.
      * `tls` (`dict`) - Backend TLS Properties
        * `validate_certificate_chain` (`bool`) - Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
        * `validate_certificate_name` (`bool`) - Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.

      * `url` (`str`) - Runtime Url of the Backend.
    """
    type: pulumi.Output[str]
    """
    Resource type for API Management resource.
    """
    def __init__(__self__, resource_name, opts=None, name=None, properties=None, resource_group_name=None, service_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Backend details.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Identifier of the Backend entity. Must be unique in the current API Management service instance.
        :param pulumi.Input[dict] properties: Backend entity contract properties.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[str] service_name: The name of the API Management service.

        The **properties** object supports the following:

          * `credentials` (`pulumi.Input[dict]`) - Backend Credentials Contract Properties
            * `authorization` (`pulumi.Input[dict]`) - Authorization header authentication
              * `parameter` (`pulumi.Input[str]`) - Authentication Parameter value.
              * `scheme` (`pulumi.Input[str]`) - Authentication Scheme name.

            * `certificate` (`pulumi.Input[list]`) - List of Client Certificate Thumbprint.
            * `header` (`pulumi.Input[dict]`) - Header Parameter description.
            * `query` (`pulumi.Input[dict]`) - Query Parameter description.

          * `description` (`pulumi.Input[str]`) - Backend Description.
          * `properties` (`pulumi.Input[dict]`) - Backend Properties contract
            * `service_fabric_cluster` (`pulumi.Input[dict]`) - Backend Service Fabric Cluster Properties
              * `client_certificatethumbprint` (`pulumi.Input[str]`) - The client certificate thumbprint for the management endpoint.
              * `management_endpoints` (`pulumi.Input[list]`) - The cluster management endpoint.
              * `max_partition_resolution_retries` (`pulumi.Input[float]`) - Maximum number of retries while attempting resolve the partition.
              * `server_certificate_thumbprints` (`pulumi.Input[list]`) - Thumbprints of certificates cluster management service uses for tls communication
              * `server_x509_names` (`pulumi.Input[list]`) - Server X509 Certificate Names Collection
                * `issuer_certificate_thumbprint` (`pulumi.Input[str]`) - Thumbprint for the Issuer of the Certificate.
                * `name` (`pulumi.Input[str]`) - Common Name of the Certificate.

          * `protocol` (`pulumi.Input[str]`) - Backend communication protocol.
          * `proxy` (`pulumi.Input[dict]`) - Backend Proxy Contract Properties
            * `password` (`pulumi.Input[str]`) - Password to connect to the WebProxy Server
            * `url` (`pulumi.Input[str]`) - WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
            * `username` (`pulumi.Input[str]`) - Username to connect to the WebProxy server

          * `resource_id` (`pulumi.Input[str]`) - Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.
          * `title` (`pulumi.Input[str]`) - Backend Title.
          * `tls` (`pulumi.Input[dict]`) - Backend TLS Properties
            * `validate_certificate_chain` (`pulumi.Input[bool]`) - Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
            * `validate_certificate_name` (`pulumi.Input[bool]`) - Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.

          * `url` (`pulumi.Input[str]`) - Runtime Url of the Backend.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if service_name is None:
                raise TypeError("Missing required property 'service_name'")
            __props__['service_name'] = service_name
            __props__['type'] = None
        super(Backend, __self__).__init__(
            'azurerm:apimanagement/v20191201:Backend',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Backend resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Backend(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
