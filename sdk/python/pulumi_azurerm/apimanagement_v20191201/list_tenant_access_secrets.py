# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class ListTenantAccessSecretsResult:
    """
    Tenant access information contract of the API Management service.
    """
    def __init__(__self__, enabled=None, primary_key=None, secondary_key=None):
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        __self__.enabled = enabled
        """
        Determines whether direct access is enabled.
        """
        if primary_key and not isinstance(primary_key, str):
            raise TypeError("Expected argument 'primary_key' to be a str")
        __self__.primary_key = primary_key
        """
        Primary access key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
        """
        if secondary_key and not isinstance(secondary_key, str):
            raise TypeError("Expected argument 'secondary_key' to be a str")
        __self__.secondary_key = secondary_key
        """
        Secondary access key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
        """


class AwaitableListTenantAccessSecretsResult(ListTenantAccessSecretsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListTenantAccessSecretsResult(
            enabled=self.enabled,
            primary_key=self.primary_key,
            secondary_key=self.secondary_key)


def list_tenant_access_secrets(access_name=None, resource_group_name=None, service_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str access_name: The identifier of the Access configuration.
    :param str resource_group_name: The name of the resource group.
    :param str service_name: The name of the API Management service.
    """
    __args__ = dict()
    __args__['accessName'] = access_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['serviceName'] = service_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:apimanagement/v20191201:listTenantAccessSecrets', __args__, opts=opts).value

    return AwaitableListTenantAccessSecretsResult(
        enabled=__ret__.get('enabled'),
        primary_key=__ret__.get('primaryKey'),
        secondary_key=__ret__.get('secondaryKey'))
