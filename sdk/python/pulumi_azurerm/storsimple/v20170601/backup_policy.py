# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class BackupPolicy(pulumi.CustomResource):
    kind: pulumi.Output[str]
    """
    The Kind of the object. Currently only Series8000 is supported
    """
    name: pulumi.Output[str]
    """
    The name of the object.
    """
    properties: pulumi.Output[dict]
    """
    The properties of the backup policy.
      * `backup_policy_creation_type` (`str`) - The backup policy creation type. Indicates whether this was created through SaaS or through StorSimple Snapshot Manager.
      * `last_backup_time` (`str`) - The time of the last backup for the backup policy.
      * `next_backup_time` (`str`) - The time of the next backup for the backup policy.
      * `scheduled_backup_status` (`str`) - Indicates whether at least one of the schedules in the backup policy is active or not.
      * `schedules_count` (`float`) - The count of schedules the backup policy contains.
      * `ssm_host_name` (`str`) - If the backup policy was created by StorSimple Snapshot Manager, then this field indicates the hostname of the StorSimple Snapshot Manager.
      * `volume_ids` (`list`) - The path IDs of the volumes which are part of the backup policy.
    """
    type: pulumi.Output[str]
    """
    The hierarchical type of the object.
    """
    def __init__(__self__, resource_name, opts=None, device_name=None, kind=None, manager_name=None, name=None, resource_group_name=None, volume_ids=None, __props__=None, __name__=None, __opts__=None):
        """
        The backup policy.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device_name: The device name
        :param pulumi.Input[str] kind: The Kind of the object. Currently only Series8000 is supported
        :param pulumi.Input[str] manager_name: The manager name
        :param pulumi.Input[str] name: The name of the backup policy to be created/updated.
        :param pulumi.Input[str] resource_group_name: The resource group name
        :param pulumi.Input[list] volume_ids: The path IDs of the volumes which are part of the backup policy.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if device_name is None:
                raise TypeError("Missing required property 'device_name'")
            __props__['device_name'] = device_name
            __props__['kind'] = kind
            if manager_name is None:
                raise TypeError("Missing required property 'manager_name'")
            __props__['manager_name'] = manager_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if volume_ids is None:
                raise TypeError("Missing required property 'volume_ids'")
            __props__['volume_ids'] = volume_ids
            __props__['properties'] = None
            __props__['type'] = None
        super(BackupPolicy, __self__).__init__(
            'azurerm:storsimple/v20170601:BackupPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing BackupPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return BackupPolicy(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
