# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetStorageAccountCredentialResult:
    """
    The storage account credential.
    """
    def __init__(__self__, access_key=None, end_point=None, kind=None, name=None, ssl_status=None, type=None, volumes_count=None):
        if access_key and not isinstance(access_key, dict):
            raise TypeError("Expected argument 'access_key' to be a dict")
        __self__.access_key = access_key
        """
        The details of the storage account password.
        """
        if end_point and not isinstance(end_point, str):
            raise TypeError("Expected argument 'end_point' to be a str")
        __self__.end_point = end_point
        """
        The storage endpoint
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        The Kind of the object. Currently only Series8000 is supported
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the object.
        """
        if ssl_status and not isinstance(ssl_status, str):
            raise TypeError("Expected argument 'ssl_status' to be a str")
        __self__.ssl_status = ssl_status
        """
        Signifies whether SSL needs to be enabled or not.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The hierarchical type of the object.
        """
        if volumes_count and not isinstance(volumes_count, float):
            raise TypeError("Expected argument 'volumes_count' to be a float")
        __self__.volumes_count = volumes_count
        """
        The count of volumes using this storage account credential.
        """


class AwaitableGetStorageAccountCredentialResult(GetStorageAccountCredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStorageAccountCredentialResult(
            access_key=self.access_key,
            end_point=self.end_point,
            kind=self.kind,
            name=self.name,
            ssl_status=self.ssl_status,
            type=self.type,
            volumes_count=self.volumes_count)


def get_storage_account_credential(manager_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str manager_name: The manager name
    :param str name: The name of storage account credential to be fetched.
    :param str resource_group_name: The resource group name
    """
    __args__ = dict()
    __args__['managerName'] = manager_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:storsimple/v20170601:getStorageAccountCredential', __args__, opts=opts).value

    return AwaitableGetStorageAccountCredentialResult(
        access_key=__ret__.get('accessKey'),
        end_point=__ret__.get('endPoint'),
        kind=__ret__.get('kind'),
        name=__ret__.get('name'),
        ssl_status=__ret__.get('sslStatus'),
        type=__ret__.get('type'),
        volumes_count=__ret__.get('volumesCount'))
