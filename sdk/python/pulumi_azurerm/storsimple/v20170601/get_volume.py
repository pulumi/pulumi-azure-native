# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVolumeResult:
    """
    The volume.
    """
    def __init__(__self__, access_control_record_ids=None, backup_policy_ids=None, backup_status=None, kind=None, monitoring_status=None, name=None, operation_status=None, size_in_bytes=None, type=None, volume_container_id=None, volume_status=None, volume_type=None):
        if access_control_record_ids and not isinstance(access_control_record_ids, list):
            raise TypeError("Expected argument 'access_control_record_ids' to be a list")
        __self__.access_control_record_ids = access_control_record_ids
        """
        The IDs of the access control records, associated with the volume.
        """
        if backup_policy_ids and not isinstance(backup_policy_ids, list):
            raise TypeError("Expected argument 'backup_policy_ids' to be a list")
        __self__.backup_policy_ids = backup_policy_ids
        """
        The IDs of the backup policies, in which this volume is part of.
        """
        if backup_status and not isinstance(backup_status, str):
            raise TypeError("Expected argument 'backup_status' to be a str")
        __self__.backup_status = backup_status
        """
        The backup status of the volume.
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        The Kind of the object. Currently only Series8000 is supported
        """
        if monitoring_status and not isinstance(monitoring_status, str):
            raise TypeError("Expected argument 'monitoring_status' to be a str")
        __self__.monitoring_status = monitoring_status
        """
        The monitoring status of the volume.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the object.
        """
        if operation_status and not isinstance(operation_status, str):
            raise TypeError("Expected argument 'operation_status' to be a str")
        __self__.operation_status = operation_status
        """
        The operation status on the volume.
        """
        if size_in_bytes and not isinstance(size_in_bytes, float):
            raise TypeError("Expected argument 'size_in_bytes' to be a float")
        __self__.size_in_bytes = size_in_bytes
        """
        The size of the volume in bytes.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The hierarchical type of the object.
        """
        if volume_container_id and not isinstance(volume_container_id, str):
            raise TypeError("Expected argument 'volume_container_id' to be a str")
        __self__.volume_container_id = volume_container_id
        """
        The ID of the volume container, in which this volume is created.
        """
        if volume_status and not isinstance(volume_status, str):
            raise TypeError("Expected argument 'volume_status' to be a str")
        __self__.volume_status = volume_status
        """
        The volume status.
        """
        if volume_type and not isinstance(volume_type, str):
            raise TypeError("Expected argument 'volume_type' to be a str")
        __self__.volume_type = volume_type
        """
        The type of the volume.
        """


class AwaitableGetVolumeResult(GetVolumeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVolumeResult(
            access_control_record_ids=self.access_control_record_ids,
            backup_policy_ids=self.backup_policy_ids,
            backup_status=self.backup_status,
            kind=self.kind,
            monitoring_status=self.monitoring_status,
            name=self.name,
            operation_status=self.operation_status,
            size_in_bytes=self.size_in_bytes,
            type=self.type,
            volume_container_id=self.volume_container_id,
            volume_status=self.volume_status,
            volume_type=self.volume_type)


def get_volume(device_name=None, manager_name=None, name=None, resource_group_name=None, volume_container_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str device_name: The device name
    :param str manager_name: The manager name
    :param str name: The volume name.
    :param str resource_group_name: The resource group name
    :param str volume_container_name: The volume container name.
    """
    __args__ = dict()
    __args__['deviceName'] = device_name
    __args__['managerName'] = manager_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['volumeContainerName'] = volume_container_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:storsimple/v20170601:getVolume', __args__, opts=opts).value

    return AwaitableGetVolumeResult(
        access_control_record_ids=__ret__.get('accessControlRecordIds'),
        backup_policy_ids=__ret__.get('backupPolicyIds'),
        backup_status=__ret__.get('backupStatus'),
        kind=__ret__.get('kind'),
        monitoring_status=__ret__.get('monitoringStatus'),
        name=__ret__.get('name'),
        operation_status=__ret__.get('operationStatus'),
        size_in_bytes=__ret__.get('sizeInBytes'),
        type=__ret__.get('type'),
        volume_container_id=__ret__.get('volumeContainerId'),
        volume_status=__ret__.get('volumeStatus'),
        volume_type=__ret__.get('volumeType'))
