# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class StorageDomain(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    The name.
    """
    properties: pulumi.Output[dict]
    """
    The properties.
      * `encryption_key` (`dict`) - The encryption key used to encrypt the data. This is a user secret.
        * `encryption_algorithm` (`str`) - Algorithm used to encrypt "Value"
        * `encryption_certificate_thumbprint` (`str`) - Thumbprint certificate that was used to encrypt "Value"
        * `value` (`str`) - The value of the secret itself. If the secret is in plaintext then EncryptionAlgorithm will be none and EncryptionCertThumbprint will be null.

      * `encryption_status` (`str`) - The encryption status "Enabled | Disabled".
      * `storage_account_credential_ids` (`list`) - The storage account credentials.
    """
    type: pulumi.Output[str]
    """
    The type.
    """
    def __init__(__self__, resource_name, opts=None, encryption_key=None, encryption_status=None, manager_name=None, name=None, resource_group_name=None, storage_account_credential_ids=None, __props__=None, __name__=None, __opts__=None):
        """
        The storage domain.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] encryption_key: The encryption key used to encrypt the data. This is a user secret.
        :param pulumi.Input[str] encryption_status: The encryption status "Enabled | Disabled".
        :param pulumi.Input[str] manager_name: The manager name
        :param pulumi.Input[str] name: The storage domain name.
        :param pulumi.Input[str] resource_group_name: The resource group name
        :param pulumi.Input[list] storage_account_credential_ids: The storage account credentials.

        The **encryption_key** object supports the following:

          * `encryption_algorithm` (`pulumi.Input[str]`) - Algorithm used to encrypt "Value"
          * `encryption_certificate_thumbprint` (`pulumi.Input[str]`) - Thumbprint certificate that was used to encrypt "Value"
          * `value` (`pulumi.Input[str]`) - The value of the secret itself. If the secret is in plaintext then EncryptionAlgorithm will be none and EncryptionCertThumbprint will be null.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['encryption_key'] = encryption_key
            if encryption_status is None:
                raise TypeError("Missing required property 'encryption_status'")
            __props__['encryption_status'] = encryption_status
            if manager_name is None:
                raise TypeError("Missing required property 'manager_name'")
            __props__['manager_name'] = manager_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if storage_account_credential_ids is None:
                raise TypeError("Missing required property 'storage_account_credential_ids'")
            __props__['storage_account_credential_ids'] = storage_account_credential_ids
            __props__['properties'] = None
            __props__['type'] = None
        super(StorageDomain, __self__).__init__(
            'azurerm:storsimple/v20161001:StorageDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing StorageDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return StorageDomain(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
