# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class IscsiDisk(pulumi.CustomResource):
    access_control_records: pulumi.Output[list]
    """
    The access control records.
    """
    data_policy: pulumi.Output[str]
    """
    The data policy.
    """
    description: pulumi.Output[str]
    """
    The description.
    """
    disk_status: pulumi.Output[str]
    """
    The disk status.
    """
    local_used_capacity_in_bytes: pulumi.Output[float]
    """
    The local used capacity in bytes.
    """
    monitoring_status: pulumi.Output[str]
    """
    The monitoring.
    """
    name: pulumi.Output[str]
    """
    The name.
    """
    provisioned_capacity_in_bytes: pulumi.Output[float]
    """
    The provisioned capacity in bytes.
    """
    type: pulumi.Output[str]
    """
    The type.
    """
    used_capacity_in_bytes: pulumi.Output[float]
    """
    The used capacity in bytes.
    """
    def __init__(__self__, resource_name, opts=None, access_control_records=None, data_policy=None, description=None, device_name=None, disk_status=None, iscsi_server_name=None, manager_name=None, monitoring_status=None, name=None, provisioned_capacity_in_bytes=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The iSCSI disk.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] access_control_records: The access control records.
        :param pulumi.Input[str] data_policy: The data policy.
        :param pulumi.Input[str] description: The description.
        :param pulumi.Input[str] device_name: The device name.
        :param pulumi.Input[str] disk_status: The disk status.
        :param pulumi.Input[str] iscsi_server_name: The iSCSI server name.
        :param pulumi.Input[str] manager_name: The manager name
        :param pulumi.Input[str] monitoring_status: The monitoring.
        :param pulumi.Input[str] name: The disk name.
        :param pulumi.Input[float] provisioned_capacity_in_bytes: The provisioned capacity in bytes.
        :param pulumi.Input[str] resource_group_name: The resource group name
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if access_control_records is None:
                raise TypeError("Missing required property 'access_control_records'")
            __props__['access_control_records'] = access_control_records
            if data_policy is None:
                raise TypeError("Missing required property 'data_policy'")
            __props__['data_policy'] = data_policy
            __props__['description'] = description
            if device_name is None:
                raise TypeError("Missing required property 'device_name'")
            __props__['device_name'] = device_name
            if disk_status is None:
                raise TypeError("Missing required property 'disk_status'")
            __props__['disk_status'] = disk_status
            if iscsi_server_name is None:
                raise TypeError("Missing required property 'iscsi_server_name'")
            __props__['iscsi_server_name'] = iscsi_server_name
            if manager_name is None:
                raise TypeError("Missing required property 'manager_name'")
            __props__['manager_name'] = manager_name
            if monitoring_status is None:
                raise TypeError("Missing required property 'monitoring_status'")
            __props__['monitoring_status'] = monitoring_status
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if provisioned_capacity_in_bytes is None:
                raise TypeError("Missing required property 'provisioned_capacity_in_bytes'")
            __props__['provisioned_capacity_in_bytes'] = provisioned_capacity_in_bytes
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['local_used_capacity_in_bytes'] = None
            __props__['type'] = None
            __props__['used_capacity_in_bytes'] = None
        super(IscsiDisk, __self__).__init__(
            'azurerm:storsimple/v20161001:IscsiDisk',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing IscsiDisk resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return IscsiDisk(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
