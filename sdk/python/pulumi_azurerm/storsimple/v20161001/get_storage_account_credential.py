# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetStorageAccountCredentialResult:
    """
    The storage account credential
    """
    def __init__(__self__, access_key=None, cloud_type=None, enable_ssl=None, end_point=None, location=None, login=None, name=None, type=None):
        if access_key and not isinstance(access_key, dict):
            raise TypeError("Expected argument 'access_key' to be a dict")
        __self__.access_key = access_key
        """
        The details of the storage account password
        """
        if cloud_type and not isinstance(cloud_type, str):
            raise TypeError("Expected argument 'cloud_type' to be a str")
        __self__.cloud_type = cloud_type
        """
        The cloud service provider
        """
        if enable_ssl and not isinstance(enable_ssl, str):
            raise TypeError("Expected argument 'enable_ssl' to be a str")
        __self__.enable_ssl = enable_ssl
        """
        SSL needs to be enabled or not
        """
        if end_point and not isinstance(end_point, str):
            raise TypeError("Expected argument 'end_point' to be a str")
        __self__.end_point = end_point
        """
        The storage endpoint
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The storage account's geo location
        """
        if login and not isinstance(login, str):
            raise TypeError("Expected argument 'login' to be a str")
        __self__.login = login
        """
        The storage account login
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type.
        """


class AwaitableGetStorageAccountCredentialResult(GetStorageAccountCredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStorageAccountCredentialResult(
            access_key=self.access_key,
            cloud_type=self.cloud_type,
            enable_ssl=self.enable_ssl,
            end_point=self.end_point,
            location=self.location,
            login=self.login,
            name=self.name,
            type=self.type)


def get_storage_account_credential(manager_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str manager_name: The manager name
    :param str name: The name of storage account credential to be fetched.
    :param str resource_group_name: The resource group name
    """
    __args__ = dict()
    __args__['managerName'] = manager_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:storsimple/v20161001:getStorageAccountCredential', __args__, opts=opts).value

    return AwaitableGetStorageAccountCredentialResult(
        access_key=__ret__.get('accessKey'),
        cloud_type=__ret__.get('cloudType'),
        enable_ssl=__ret__.get('enableSSL'),
        end_point=__ret__.get('endPoint'),
        location=__ret__.get('location'),
        login=__ret__.get('login'),
        name=__ret__.get('name'),
        type=__ret__.get('type'))
