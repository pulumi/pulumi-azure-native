# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class FileShare(pulumi.CustomResource):
    admin_user: pulumi.Output[str]
    """
    The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\\xyz.
    """
    data_policy: pulumi.Output[str]
    """
    The data policy
    """
    description: pulumi.Output[str]
    """
    Description for file share
    """
    local_used_capacity_in_bytes: pulumi.Output[float]
    """
    The local used capacity in Bytes.
    """
    monitoring_status: pulumi.Output[str]
    """
    The monitoring status
    """
    name: pulumi.Output[str]
    """
    The name.
    """
    provisioned_capacity_in_bytes: pulumi.Output[float]
    """
    The total provisioned capacity in Bytes
    """
    share_status: pulumi.Output[str]
    """
    The Share Status
    """
    type: pulumi.Output[str]
    """
    The type.
    """
    used_capacity_in_bytes: pulumi.Output[float]
    """
    The used capacity in Bytes.
    """
    def __init__(__self__, resource_name, opts=None, admin_user=None, data_policy=None, description=None, device_name=None, file_server_name=None, manager_name=None, monitoring_status=None, name=None, provisioned_capacity_in_bytes=None, resource_group_name=None, share_status=None, __props__=None, __name__=None, __opts__=None):
        """
        The File Share.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_user: The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\\xyz.
        :param pulumi.Input[str] data_policy: The data policy
        :param pulumi.Input[str] description: Description for file share
        :param pulumi.Input[str] device_name: The device name.
        :param pulumi.Input[str] file_server_name: The file server name.
        :param pulumi.Input[str] manager_name: The manager name
        :param pulumi.Input[str] monitoring_status: The monitoring status
        :param pulumi.Input[str] name: The file share name.
        :param pulumi.Input[float] provisioned_capacity_in_bytes: The total provisioned capacity in Bytes
        :param pulumi.Input[str] resource_group_name: The resource group name
        :param pulumi.Input[str] share_status: The Share Status
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if admin_user is None:
                raise TypeError("Missing required property 'admin_user'")
            __props__['admin_user'] = admin_user
            if data_policy is None:
                raise TypeError("Missing required property 'data_policy'")
            __props__['data_policy'] = data_policy
            __props__['description'] = description
            if device_name is None:
                raise TypeError("Missing required property 'device_name'")
            __props__['device_name'] = device_name
            if file_server_name is None:
                raise TypeError("Missing required property 'file_server_name'")
            __props__['file_server_name'] = file_server_name
            if manager_name is None:
                raise TypeError("Missing required property 'manager_name'")
            __props__['manager_name'] = manager_name
            if monitoring_status is None:
                raise TypeError("Missing required property 'monitoring_status'")
            __props__['monitoring_status'] = monitoring_status
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if provisioned_capacity_in_bytes is None:
                raise TypeError("Missing required property 'provisioned_capacity_in_bytes'")
            __props__['provisioned_capacity_in_bytes'] = provisioned_capacity_in_bytes
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if share_status is None:
                raise TypeError("Missing required property 'share_status'")
            __props__['share_status'] = share_status
            __props__['local_used_capacity_in_bytes'] = None
            __props__['type'] = None
            __props__['used_capacity_in_bytes'] = None
        super(FileShare, __self__).__init__(
            'azurerm:storsimple/v20161001:FileShare',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing FileShare resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return FileShare(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
