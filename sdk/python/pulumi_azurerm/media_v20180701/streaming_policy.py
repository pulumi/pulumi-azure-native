# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class StreamingPolicy(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    properties: pulumi.Output[dict]
    """
    Class to specify properties of Streaming Policy
      * `common_encryption_cbcs` (`dict`) - Configuration of CommonEncryptionCbcs
        * `clear_tracks` (`list`) - Representing which tracks should not be encrypted
          * `track_selections` (`list`) - TrackSelections is a track property condition list which can specify track(s)
            * `operation` (`str`) - Track property condition operation
            * `property` (`str`) - Track property type
            * `value` (`str`) - Track property value

        * `content_keys` (`dict`) - Representing default content key for each encryption scheme and separate content keys for specific tracks
          * `default_key` (`dict`) - Default content key for an encryption scheme
            * `label` (`str`) - Label can be used to specify Content Key when creating a Streaming Locator
            * `policy_name` (`str`) - Policy used by Default Key

          * `key_to_track_mappings` (`list`) - Representing tracks needs separate content key
            * `label` (`str`) - Label can be used to specify Content Key when creating a Streaming Locator
            * `policy_name` (`str`) - Policy used by Content Key
            * `tracks` (`list`) - Tracks which use this content key

        * `drm` (`dict`) - Configuration of DRMs for current encryption scheme
          * `fair_play` (`dict`) - FairPlay configurations
            * `allow_persistent_license` (`bool`) - All license to be persistent or not
            * `custom_license_acquisition_url_template` (`str`) - Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.

          * `play_ready` (`dict`) - PlayReady configurations
            * `custom_license_acquisition_url_template` (`str`) - Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
            * `play_ready_custom_attributes` (`str`) - Custom attributes for PlayReady

          * `widevine` (`dict`) - Widevine configurations
            * `custom_license_acquisition_url_template` (`str`) - Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.

        * `enabled_protocols` (`dict`) - Representing supported protocols
          * `dash` (`bool`) - Enable DASH protocol or not
          * `download` (`bool`) - Enable Download protocol or not
          * `hls` (`bool`) - Enable HLS protocol or not
          * `smooth_streaming` (`bool`) - Enable SmoothStreaming protocol or not

      * `common_encryption_cenc` (`dict`) - Configuration of CommonEncryptionCenc
        * `clear_tracks` (`list`) - Representing which tracks should not be encrypted
        * `content_keys` (`dict`) - Representing default content key for each encryption scheme and separate content keys for specific tracks
        * `drm` (`dict`) - Configuration of DRMs for CommonEncryptionCenc encryption scheme
          * `play_ready` (`dict`) - PlayReady configurations
          * `widevine` (`dict`) - Widevine configurations

        * `enabled_protocols` (`dict`) - Representing supported protocols

      * `created` (`str`) - Creation time of Streaming Policy
      * `default_content_key_policy_name` (`str`) - Default ContentKey used by current Streaming Policy
      * `envelope_encryption` (`dict`) - Configuration of EnvelopeEncryption
        * `clear_tracks` (`list`) - Representing which tracks should not be encrypted
        * `content_keys` (`dict`) - Representing default content key for each encryption scheme and separate content keys for specific tracks
        * `custom_key_acquisition_url_template` (`str`) - Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
        * `enabled_protocols` (`dict`) - Representing supported protocols

      * `no_encryption` (`dict`) - Configurations of NoEncryption
        * `enabled_protocols` (`dict`) - Representing supported protocols
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    def __init__(__self__, resource_name, opts=None, account_name=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        A Streaming Policy resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: The Media Services account name.
        :param pulumi.Input[str] name: The Streaming Policy name.
        :param pulumi.Input[dict] properties: Class to specify properties of Streaming Policy
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the Azure subscription.

        The **properties** object supports the following:

          * `common_encryption_cbcs` (`pulumi.Input[dict]`) - Configuration of CommonEncryptionCbcs
            * `clear_tracks` (`pulumi.Input[list]`) - Representing which tracks should not be encrypted
              * `track_selections` (`pulumi.Input[list]`) - TrackSelections is a track property condition list which can specify track(s)
                * `operation` (`pulumi.Input[str]`) - Track property condition operation
                * `property` (`pulumi.Input[str]`) - Track property type
                * `value` (`pulumi.Input[str]`) - Track property value

            * `content_keys` (`pulumi.Input[dict]`) - Representing default content key for each encryption scheme and separate content keys for specific tracks
              * `default_key` (`pulumi.Input[dict]`) - Default content key for an encryption scheme
                * `label` (`pulumi.Input[str]`) - Label can be used to specify Content Key when creating a Streaming Locator
                * `policy_name` (`pulumi.Input[str]`) - Policy used by Default Key

              * `key_to_track_mappings` (`pulumi.Input[list]`) - Representing tracks needs separate content key
                * `label` (`pulumi.Input[str]`) - Label can be used to specify Content Key when creating a Streaming Locator
                * `policy_name` (`pulumi.Input[str]`) - Policy used by Content Key
                * `tracks` (`pulumi.Input[list]`) - Tracks which use this content key

            * `drm` (`pulumi.Input[dict]`) - Configuration of DRMs for current encryption scheme
              * `fair_play` (`pulumi.Input[dict]`) - FairPlay configurations
                * `allow_persistent_license` (`pulumi.Input[bool]`) - All license to be persistent or not
                * `custom_license_acquisition_url_template` (`pulumi.Input[str]`) - Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.

              * `play_ready` (`pulumi.Input[dict]`) - PlayReady configurations
                * `custom_license_acquisition_url_template` (`pulumi.Input[str]`) - Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
                * `play_ready_custom_attributes` (`pulumi.Input[str]`) - Custom attributes for PlayReady

              * `widevine` (`pulumi.Input[dict]`) - Widevine configurations
                * `custom_license_acquisition_url_template` (`pulumi.Input[str]`) - Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.

            * `enabled_protocols` (`pulumi.Input[dict]`) - Representing supported protocols
              * `dash` (`pulumi.Input[bool]`) - Enable DASH protocol or not
              * `download` (`pulumi.Input[bool]`) - Enable Download protocol or not
              * `hls` (`pulumi.Input[bool]`) - Enable HLS protocol or not
              * `smooth_streaming` (`pulumi.Input[bool]`) - Enable SmoothStreaming protocol or not

          * `common_encryption_cenc` (`pulumi.Input[dict]`) - Configuration of CommonEncryptionCenc
            * `clear_tracks` (`pulumi.Input[list]`) - Representing which tracks should not be encrypted
            * `content_keys` (`pulumi.Input[dict]`) - Representing default content key for each encryption scheme and separate content keys for specific tracks
            * `drm` (`pulumi.Input[dict]`) - Configuration of DRMs for CommonEncryptionCenc encryption scheme
              * `play_ready` (`pulumi.Input[dict]`) - PlayReady configurations
              * `widevine` (`pulumi.Input[dict]`) - Widevine configurations

            * `enabled_protocols` (`pulumi.Input[dict]`) - Representing supported protocols

          * `default_content_key_policy_name` (`pulumi.Input[str]`) - Default ContentKey used by current Streaming Policy
          * `envelope_encryption` (`pulumi.Input[dict]`) - Configuration of EnvelopeEncryption
            * `clear_tracks` (`pulumi.Input[list]`) - Representing which tracks should not be encrypted
            * `content_keys` (`pulumi.Input[dict]`) - Representing default content key for each encryption scheme and separate content keys for specific tracks
            * `custom_key_acquisition_url_template` (`pulumi.Input[str]`) - Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
            * `enabled_protocols` (`pulumi.Input[dict]`) - Representing supported protocols

          * `no_encryption` (`pulumi.Input[dict]`) - Configurations of NoEncryption
            * `enabled_protocols` (`pulumi.Input[dict]`) - Representing supported protocols
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_name is None:
                raise TypeError("Missing required property 'account_name'")
            __props__['account_name'] = account_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['type'] = None
        super(StreamingPolicy, __self__).__init__(
            'azurerm:media/v20180701:StreamingPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing StreamingPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return StreamingPolicy(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
