# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ContainerAccountResponse',
    'DomainSecuritySettingsResponse',
    'HealthAlertResponse',
    'HealthMonitorResponse',
    'LdapsSettingsResponse',
    'NotificationSettingsResponse',
    'ReplicaSetResponse',
]

@pulumi.output_type
class ContainerAccountResponse(dict):
    """
    Container Account Description
    """
    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 password: Optional[str] = None,
                 spn: Optional[str] = None):
        """
        Container Account Description
        :param str account_name: The account name
        :param str password: The account password
        :param str spn: The account spn
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if spn is not None:
            pulumi.set(__self__, "spn", spn)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        The account name
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The account password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def spn(self) -> Optional[str]:
        """
        The account spn
        """
        return pulumi.get(self, "spn")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainSecuritySettingsResponse(dict):
    """
    Domain Security Settings
    """
    def __init__(__self__, *,
                 ntlm_v1: Optional[str] = None,
                 sync_ntlm_passwords: Optional[str] = None,
                 tls_v1: Optional[str] = None):
        """
        Domain Security Settings
        :param str ntlm_v1: A flag to determine whether or not NtlmV1 is enabled or disabled.
        :param str sync_ntlm_passwords: A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
        :param str tls_v1: A flag to determine whether or not TlsV1 is enabled or disabled.
        """
        if ntlm_v1 is not None:
            pulumi.set(__self__, "ntlm_v1", ntlm_v1)
        if sync_ntlm_passwords is not None:
            pulumi.set(__self__, "sync_ntlm_passwords", sync_ntlm_passwords)
        if tls_v1 is not None:
            pulumi.set(__self__, "tls_v1", tls_v1)

    @property
    @pulumi.getter(name="ntlmV1")
    def ntlm_v1(self) -> Optional[str]:
        """
        A flag to determine whether or not NtlmV1 is enabled or disabled.
        """
        return pulumi.get(self, "ntlm_v1")

    @property
    @pulumi.getter(name="syncNtlmPasswords")
    def sync_ntlm_passwords(self) -> Optional[str]:
        """
        A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
        """
        return pulumi.get(self, "sync_ntlm_passwords")

    @property
    @pulumi.getter(name="tlsV1")
    def tls_v1(self) -> Optional[str]:
        """
        A flag to determine whether or not TlsV1 is enabled or disabled.
        """
        return pulumi.get(self, "tls_v1")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HealthAlertResponse(dict):
    """
    Health Alert Description
    """
    def __init__(__self__, *,
                 id: str,
                 issue: str,
                 last_detected: str,
                 name: str,
                 raised: str,
                 resolution_uri: str,
                 severity: str):
        """
        Health Alert Description
        :param str id: Health Alert Id
        :param str issue: Health Alert Issue
        :param str last_detected: Health Alert Last Detected DateTime
        :param str name: Health Alert Name
        :param str raised: Health Alert Raised DateTime
        :param str resolution_uri: Health Alert TSG Link
        :param str severity: Health Alert Severity
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issue", issue)
        pulumi.set(__self__, "last_detected", last_detected)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "raised", raised)
        pulumi.set(__self__, "resolution_uri", resolution_uri)
        pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Health Alert Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def issue(self) -> str:
        """
        Health Alert Issue
        """
        return pulumi.get(self, "issue")

    @property
    @pulumi.getter(name="lastDetected")
    def last_detected(self) -> str:
        """
        Health Alert Last Detected DateTime
        """
        return pulumi.get(self, "last_detected")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Health Alert Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def raised(self) -> str:
        """
        Health Alert Raised DateTime
        """
        return pulumi.get(self, "raised")

    @property
    @pulumi.getter(name="resolutionUri")
    def resolution_uri(self) -> str:
        """
        Health Alert TSG Link
        """
        return pulumi.get(self, "resolution_uri")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        Health Alert Severity
        """
        return pulumi.get(self, "severity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HealthMonitorResponse(dict):
    """
    Health Monitor Description
    """
    def __init__(__self__, *,
                 details: str,
                 id: str,
                 name: str):
        """
        Health Monitor Description
        :param str details: Health Monitor Details
        :param str id: Health Monitor Id
        :param str name: Health Monitor Name
        """
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def details(self) -> str:
        """
        Health Monitor Details
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Health Monitor Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Health Monitor Name
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LdapsSettingsResponse(dict):
    """
    Secure LDAP Settings
    """
    def __init__(__self__, *,
                 certificate_not_after: str,
                 certificate_thumbprint: str,
                 public_certificate: str,
                 external_access: Optional[str] = None,
                 ldaps: Optional[str] = None,
                 pfx_certificate: Optional[str] = None,
                 pfx_certificate_password: Optional[str] = None):
        """
        Secure LDAP Settings
        :param str certificate_not_after: NotAfter DateTime of configure ldaps certificate.
        :param str certificate_thumbprint: Thumbprint of configure ldaps certificate.
        :param str public_certificate: Public certificate used to configure secure ldap.
        :param str external_access: A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
        :param str ldaps: A flag to determine whether or not Secure LDAP is enabled or disabled.
        :param str pfx_certificate: The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
        :param str pfx_certificate_password: The password to decrypt the provided Secure LDAP certificate pfx file.
        """
        pulumi.set(__self__, "certificate_not_after", certificate_not_after)
        pulumi.set(__self__, "certificate_thumbprint", certificate_thumbprint)
        pulumi.set(__self__, "public_certificate", public_certificate)
        if external_access is not None:
            pulumi.set(__self__, "external_access", external_access)
        if ldaps is not None:
            pulumi.set(__self__, "ldaps", ldaps)
        if pfx_certificate is not None:
            pulumi.set(__self__, "pfx_certificate", pfx_certificate)
        if pfx_certificate_password is not None:
            pulumi.set(__self__, "pfx_certificate_password", pfx_certificate_password)

    @property
    @pulumi.getter(name="certificateNotAfter")
    def certificate_not_after(self) -> str:
        """
        NotAfter DateTime of configure ldaps certificate.
        """
        return pulumi.get(self, "certificate_not_after")

    @property
    @pulumi.getter(name="certificateThumbprint")
    def certificate_thumbprint(self) -> str:
        """
        Thumbprint of configure ldaps certificate.
        """
        return pulumi.get(self, "certificate_thumbprint")

    @property
    @pulumi.getter(name="publicCertificate")
    def public_certificate(self) -> str:
        """
        Public certificate used to configure secure ldap.
        """
        return pulumi.get(self, "public_certificate")

    @property
    @pulumi.getter(name="externalAccess")
    def external_access(self) -> Optional[str]:
        """
        A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
        """
        return pulumi.get(self, "external_access")

    @property
    @pulumi.getter
    def ldaps(self) -> Optional[str]:
        """
        A flag to determine whether or not Secure LDAP is enabled or disabled.
        """
        return pulumi.get(self, "ldaps")

    @property
    @pulumi.getter(name="pfxCertificate")
    def pfx_certificate(self) -> Optional[str]:
        """
        The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
        """
        return pulumi.get(self, "pfx_certificate")

    @property
    @pulumi.getter(name="pfxCertificatePassword")
    def pfx_certificate_password(self) -> Optional[str]:
        """
        The password to decrypt the provided Secure LDAP certificate pfx file.
        """
        return pulumi.get(self, "pfx_certificate_password")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NotificationSettingsResponse(dict):
    """
    Settings for notification
    """
    def __init__(__self__, *,
                 additional_recipients: Optional[Sequence[str]] = None,
                 notify_dc_admins: Optional[str] = None,
                 notify_global_admins: Optional[str] = None):
        """
        Settings for notification
        :param Sequence[str] additional_recipients: The list of additional recipients
        :param str notify_dc_admins: Should domain controller admins be notified
        :param str notify_global_admins: Should global admins be notified
        """
        if additional_recipients is not None:
            pulumi.set(__self__, "additional_recipients", additional_recipients)
        if notify_dc_admins is not None:
            pulumi.set(__self__, "notify_dc_admins", notify_dc_admins)
        if notify_global_admins is not None:
            pulumi.set(__self__, "notify_global_admins", notify_global_admins)

    @property
    @pulumi.getter(name="additionalRecipients")
    def additional_recipients(self) -> Optional[Sequence[str]]:
        """
        The list of additional recipients
        """
        return pulumi.get(self, "additional_recipients")

    @property
    @pulumi.getter(name="notifyDcAdmins")
    def notify_dc_admins(self) -> Optional[str]:
        """
        Should domain controller admins be notified
        """
        return pulumi.get(self, "notify_dc_admins")

    @property
    @pulumi.getter(name="notifyGlobalAdmins")
    def notify_global_admins(self) -> Optional[str]:
        """
        Should global admins be notified
        """
        return pulumi.get(self, "notify_global_admins")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ReplicaSetResponse(dict):
    """
    Replica Set Definition
    """
    def __init__(__self__, *,
                 domain_controller_ip_address: Sequence[str],
                 external_access_ip_address: str,
                 health_alerts: Sequence['outputs.HealthAlertResponse'],
                 health_last_evaluated: str,
                 health_monitors: Sequence['outputs.HealthMonitorResponse'],
                 replica_set_id: str,
                 service_status: str,
                 vnet_site_id: str,
                 location: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        Replica Set Definition
        :param Sequence[str] domain_controller_ip_address: List of Domain Controller IP Address
        :param str external_access_ip_address: External access ip address.
        :param Sequence['HealthAlertResponseArgs'] health_alerts: List of Domain Health Alerts
        :param str health_last_evaluated: Last domain evaluation run DateTime
        :param Sequence['HealthMonitorResponseArgs'] health_monitors: List of Domain Health Monitors
        :param str replica_set_id: ReplicaSet Id
        :param str service_status: Status of Domain Service instance
        :param str vnet_site_id: Virtual network site id
        :param str location: Virtual network location
        :param str subnet_id: The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
        """
        pulumi.set(__self__, "domain_controller_ip_address", domain_controller_ip_address)
        pulumi.set(__self__, "external_access_ip_address", external_access_ip_address)
        pulumi.set(__self__, "health_alerts", health_alerts)
        pulumi.set(__self__, "health_last_evaluated", health_last_evaluated)
        pulumi.set(__self__, "health_monitors", health_monitors)
        pulumi.set(__self__, "replica_set_id", replica_set_id)
        pulumi.set(__self__, "service_status", service_status)
        pulumi.set(__self__, "vnet_site_id", vnet_site_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="domainControllerIpAddress")
    def domain_controller_ip_address(self) -> Sequence[str]:
        """
        List of Domain Controller IP Address
        """
        return pulumi.get(self, "domain_controller_ip_address")

    @property
    @pulumi.getter(name="externalAccessIpAddress")
    def external_access_ip_address(self) -> str:
        """
        External access ip address.
        """
        return pulumi.get(self, "external_access_ip_address")

    @property
    @pulumi.getter(name="healthAlerts")
    def health_alerts(self) -> Sequence['outputs.HealthAlertResponse']:
        """
        List of Domain Health Alerts
        """
        return pulumi.get(self, "health_alerts")

    @property
    @pulumi.getter(name="healthLastEvaluated")
    def health_last_evaluated(self) -> str:
        """
        Last domain evaluation run DateTime
        """
        return pulumi.get(self, "health_last_evaluated")

    @property
    @pulumi.getter(name="healthMonitors")
    def health_monitors(self) -> Sequence['outputs.HealthMonitorResponse']:
        """
        List of Domain Health Monitors
        """
        return pulumi.get(self, "health_monitors")

    @property
    @pulumi.getter(name="replicaSetId")
    def replica_set_id(self) -> str:
        """
        ReplicaSet Id
        """
        return pulumi.get(self, "replica_set_id")

    @property
    @pulumi.getter(name="serviceStatus")
    def service_status(self) -> str:
        """
        Status of Domain Service instance
        """
        return pulumi.get(self, "service_status")

    @property
    @pulumi.getter(name="vnetSiteId")
    def vnet_site_id(self) -> str:
        """
        Virtual network site id
        """
        return pulumi.get(self, "vnet_site_id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Virtual network location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
        """
        return pulumi.get(self, "subnet_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


