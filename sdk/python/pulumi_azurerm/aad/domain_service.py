# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class DomainService(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    Resource etag
    """
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Domain service properties
      * `deployment_id` (`str`) - Deployment Id
      * `domain_name` (`str`) - The name of the Azure domain that the user would like to deploy Domain Services to.
      * `domain_security_settings` (`dict`) - DomainSecurity Settings
        * `ntlm_v1` (`str`) - A flag to determine whether or not NtlmV1 is enabled or disabled.
        * `sync_ntlm_passwords` (`str`) - A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
        * `tls_v1` (`str`) - A flag to determine whether or not TlsV1 is enabled or disabled.

      * `filtered_sync` (`str`) - Enabled or Disabled flag to turn on Group-based filtered sync
      * `ldaps_settings` (`dict`) - Secure LDAP Settings
        * `certificate_not_after` (`str`) - NotAfter DateTime of configure ldaps certificate.
        * `certificate_thumbprint` (`str`) - Thumbprint of configure ldaps certificate.
        * `external_access` (`str`) - A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
        * `ldaps` (`str`) - A flag to determine whether or not Secure LDAP is enabled or disabled.
        * `pfx_certificate` (`str`) - The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
        * `pfx_certificate_password` (`str`) - The password to decrypt the provided Secure LDAP certificate pfx file.
        * `public_certificate` (`str`) - Public certificate used to configure secure ldap.

      * `notification_settings` (`dict`) - Notification Settings
        * `additional_recipients` (`list`) - The list of additional recipients
        * `notify_dc_admins` (`str`) - Should domain controller admins be notified
        * `notify_global_admins` (`str`) - Should global admins be notified

      * `provisioning_state` (`str`) - the current deployment or provisioning state, which only appears in the response.
      * `replica_sets` (`list`) - List of ReplicaSets
        * `domain_controller_ip_address` (`list`) - List of Domain Controller IP Address
        * `external_access_ip_address` (`str`) - External access ip address.
        * `health_alerts` (`list`) - List of Domain Health Alerts
          * `id` (`str`) - Health Alert Id
          * `issue` (`str`) - Health Alert Issue
          * `last_detected` (`str`) - Health Alert Last Detected DateTime
          * `name` (`str`) - Health Alert Name
          * `raised` (`str`) - Health Alert Raised DateTime
          * `resolution_uri` (`str`) - Health Alert TSG Link
          * `severity` (`str`) - Health Alert Severity

        * `health_last_evaluated` (`str`) - Last domain evaluation run DateTime
        * `health_monitors` (`list`) - List of Domain Health Monitors
          * `details` (`str`) - Health Monitor Details
          * `id` (`str`) - Health Monitor Id
          * `name` (`str`) - Health Monitor Name

        * `location` (`str`) - Virtual network location
        * `replica_set_id` (`str`) - ReplicaSet Id
        * `service_status` (`str`) - Status of Domain Service instance
        * `subnet_id` (`str`) - The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
        * `vnet_site_id` (`str`) - Virtual network site id

      * `sync_owner` (`str`) - SyncOwner ReplicaSet Id
      * `tenant_id` (`str`) - Azure Active Directory Tenant Id
      * `version` (`float`) - Data Model Version
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, etag=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Domain service.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] etag: Resource etag
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The name of the domain service.
        :param pulumi.Input[dict] properties: Domain service properties
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.
        :param pulumi.Input[dict] tags: Resource tags

        The **properties** object supports the following:

          * `domain_name` (`pulumi.Input[str]`) - The name of the Azure domain that the user would like to deploy Domain Services to.
          * `domain_security_settings` (`pulumi.Input[dict]`) - DomainSecurity Settings
            * `ntlm_v1` (`pulumi.Input[str]`) - A flag to determine whether or not NtlmV1 is enabled or disabled.
            * `sync_ntlm_passwords` (`pulumi.Input[str]`) - A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
            * `tls_v1` (`pulumi.Input[str]`) - A flag to determine whether or not TlsV1 is enabled or disabled.

          * `filtered_sync` (`pulumi.Input[str]`) - Enabled or Disabled flag to turn on Group-based filtered sync
          * `ldaps_settings` (`pulumi.Input[dict]`) - Secure LDAP Settings
            * `external_access` (`pulumi.Input[str]`) - A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
            * `ldaps` (`pulumi.Input[str]`) - A flag to determine whether or not Secure LDAP is enabled or disabled.
            * `pfx_certificate` (`pulumi.Input[str]`) - The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
            * `pfx_certificate_password` (`pulumi.Input[str]`) - The password to decrypt the provided Secure LDAP certificate pfx file.

          * `notification_settings` (`pulumi.Input[dict]`) - Notification Settings
            * `additional_recipients` (`pulumi.Input[list]`) - The list of additional recipients
            * `notify_dc_admins` (`pulumi.Input[str]`) - Should domain controller admins be notified
            * `notify_global_admins` (`pulumi.Input[str]`) - Should global admins be notified

          * `replica_sets` (`pulumi.Input[list]`) - List of ReplicaSets
            * `location` (`pulumi.Input[str]`) - Virtual network location
            * `subnet_id` (`pulumi.Input[str]`) - The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['etag'] = etag
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(DomainService, __self__).__init__(
            'azurerm:aad:DomainService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, etag=None, location=None, name=None, properties=None, tags=None, type=None):
        """
        Get an existing DomainService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] etag: Resource etag
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: Resource name
        :param pulumi.Input[dict] properties: Domain service properties
        :param pulumi.Input[dict] tags: Resource tags
        :param pulumi.Input[str] type: Resource type

        The **properties** object supports the following:

          * `deployment_id` (`pulumi.Input[str]`) - Deployment Id
          * `domain_name` (`pulumi.Input[str]`) - The name of the Azure domain that the user would like to deploy Domain Services to.
          * `domain_security_settings` (`pulumi.Input[dict]`) - DomainSecurity Settings
            * `ntlm_v1` (`pulumi.Input[str]`) - A flag to determine whether or not NtlmV1 is enabled or disabled.
            * `sync_ntlm_passwords` (`pulumi.Input[str]`) - A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
            * `tls_v1` (`pulumi.Input[str]`) - A flag to determine whether or not TlsV1 is enabled or disabled.

          * `filtered_sync` (`pulumi.Input[str]`) - Enabled or Disabled flag to turn on Group-based filtered sync
          * `ldaps_settings` (`pulumi.Input[dict]`) - Secure LDAP Settings
            * `certificate_not_after` (`pulumi.Input[str]`) - NotAfter DateTime of configure ldaps certificate.
            * `certificate_thumbprint` (`pulumi.Input[str]`) - Thumbprint of configure ldaps certificate.
            * `external_access` (`pulumi.Input[str]`) - A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
            * `ldaps` (`pulumi.Input[str]`) - A flag to determine whether or not Secure LDAP is enabled or disabled.
            * `pfx_certificate` (`pulumi.Input[str]`) - The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
            * `pfx_certificate_password` (`pulumi.Input[str]`) - The password to decrypt the provided Secure LDAP certificate pfx file.
            * `public_certificate` (`pulumi.Input[str]`) - Public certificate used to configure secure ldap.

          * `notification_settings` (`pulumi.Input[dict]`) - Notification Settings
            * `additional_recipients` (`pulumi.Input[list]`) - The list of additional recipients
            * `notify_dc_admins` (`pulumi.Input[str]`) - Should domain controller admins be notified
            * `notify_global_admins` (`pulumi.Input[str]`) - Should global admins be notified

          * `provisioning_state` (`pulumi.Input[str]`) - the current deployment or provisioning state, which only appears in the response.
          * `replica_sets` (`pulumi.Input[list]`) - List of ReplicaSets
            * `domain_controller_ip_address` (`pulumi.Input[list]`) - List of Domain Controller IP Address
            * `external_access_ip_address` (`pulumi.Input[str]`) - External access ip address.
            * `health_alerts` (`pulumi.Input[list]`) - List of Domain Health Alerts
              * `id` (`pulumi.Input[str]`) - Health Alert Id
              * `issue` (`pulumi.Input[str]`) - Health Alert Issue
              * `last_detected` (`pulumi.Input[str]`) - Health Alert Last Detected DateTime
              * `name` (`pulumi.Input[str]`) - Health Alert Name
              * `raised` (`pulumi.Input[str]`) - Health Alert Raised DateTime
              * `resolution_uri` (`pulumi.Input[str]`) - Health Alert TSG Link
              * `severity` (`pulumi.Input[str]`) - Health Alert Severity

            * `health_last_evaluated` (`pulumi.Input[str]`) - Last domain evaluation run DateTime
            * `health_monitors` (`pulumi.Input[list]`) - List of Domain Health Monitors
              * `details` (`pulumi.Input[str]`) - Health Monitor Details
              * `id` (`pulumi.Input[str]`) - Health Monitor Id
              * `name` (`pulumi.Input[str]`) - Health Monitor Name

            * `location` (`pulumi.Input[str]`) - Virtual network location
            * `replica_set_id` (`pulumi.Input[str]`) - ReplicaSet Id
            * `service_status` (`pulumi.Input[str]`) - Status of Domain Service instance
            * `subnet_id` (`pulumi.Input[str]`) - The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
            * `vnet_site_id` (`pulumi.Input[str]`) - Virtual network site id

          * `sync_owner` (`pulumi.Input[str]`) - SyncOwner ReplicaSet Id
          * `tenant_id` (`pulumi.Input[str]`) - Azure Active Directory Tenant Id
          * `version` (`pulumi.Input[float]`) - Data Model Version
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["etag"] = etag
        __props__["location"] = location
        __props__["name"] = name
        __props__["properties"] = properties
        __props__["tags"] = tags
        __props__["type"] = type
        return DomainService(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
