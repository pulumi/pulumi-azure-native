# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetDomainServiceResult:
    """
    Domain service.
    """
    def __init__(__self__, deployment_id=None, domain_name=None, domain_security_settings=None, etag=None, filtered_sync=None, ldaps_settings=None, location=None, name=None, notification_settings=None, provisioning_state=None, replica_sets=None, sync_owner=None, tags=None, tenant_id=None, type=None, version=None):
        if deployment_id and not isinstance(deployment_id, str):
            raise TypeError("Expected argument 'deployment_id' to be a str")
        __self__.deployment_id = deployment_id
        """
        Deployment Id
        """
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        __self__.domain_name = domain_name
        """
        The name of the Azure domain that the user would like to deploy Domain Services to.
        """
        if domain_security_settings and not isinstance(domain_security_settings, dict):
            raise TypeError("Expected argument 'domain_security_settings' to be a dict")
        __self__.domain_security_settings = domain_security_settings
        """
        DomainSecurity Settings
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Resource etag
        """
        if filtered_sync and not isinstance(filtered_sync, str):
            raise TypeError("Expected argument 'filtered_sync' to be a str")
        __self__.filtered_sync = filtered_sync
        """
        Enabled or Disabled flag to turn on Group-based filtered sync
        """
        if ldaps_settings and not isinstance(ldaps_settings, dict):
            raise TypeError("Expected argument 'ldaps_settings' to be a dict")
        __self__.ldaps_settings = ldaps_settings
        """
        Secure LDAP Settings
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if notification_settings and not isinstance(notification_settings, dict):
            raise TypeError("Expected argument 'notification_settings' to be a dict")
        __self__.notification_settings = notification_settings
        """
        Notification Settings
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        the current deployment or provisioning state, which only appears in the response.
        """
        if replica_sets and not isinstance(replica_sets, list):
            raise TypeError("Expected argument 'replica_sets' to be a list")
        __self__.replica_sets = replica_sets
        """
        List of ReplicaSets
        """
        if sync_owner and not isinstance(sync_owner, str):
            raise TypeError("Expected argument 'sync_owner' to be a str")
        __self__.sync_owner = sync_owner
        """
        SyncOwner ReplicaSet Id
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        __self__.tenant_id = tenant_id
        """
        Azure Active Directory Tenant Id
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """
        if version and not isinstance(version, float):
            raise TypeError("Expected argument 'version' to be a float")
        __self__.version = version
        """
        Data Model Version
        """


class AwaitableGetDomainServiceResult(GetDomainServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainServiceResult(
            deployment_id=self.deployment_id,
            domain_name=self.domain_name,
            domain_security_settings=self.domain_security_settings,
            etag=self.etag,
            filtered_sync=self.filtered_sync,
            ldaps_settings=self.ldaps_settings,
            location=self.location,
            name=self.name,
            notification_settings=self.notification_settings,
            provisioning_state=self.provisioning_state,
            replica_sets=self.replica_sets,
            sync_owner=self.sync_owner,
            tags=self.tags,
            tenant_id=self.tenant_id,
            type=self.type,
            version=self.version)


def get_domain_service(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the domain service.
    :param str resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:aad/v20200101:getDomainService', __args__, opts=opts).value

    return AwaitableGetDomainServiceResult(
        deployment_id=__ret__.get('deploymentId'),
        domain_name=__ret__.get('domainName'),
        domain_security_settings=__ret__.get('domainSecuritySettings'),
        etag=__ret__.get('etag'),
        filtered_sync=__ret__.get('filteredSync'),
        ldaps_settings=__ret__.get('ldapsSettings'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        notification_settings=__ret__.get('notificationSettings'),
        provisioning_state=__ret__.get('provisioningState'),
        replica_sets=__ret__.get('replicaSets'),
        sync_owner=__ret__.get('syncOwner'),
        tags=__ret__.get('tags'),
        tenant_id=__ret__.get('tenantId'),
        type=__ret__.get('type'),
        version=__ret__.get('version'))
