# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class DomainService(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    Resource etag
    """
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Domain service properties
      * `domain_controller_ip_address` (`list`) - List of Domain Controller IP Address
      * `domain_name` (`str`) - The name of the Azure domain that the user would like to deploy Domain Services to.
      * `domain_security_settings` (`dict`) - DomainSecurity Settings
        * `ntlm_v1` (`str`) - A flag to determine whether or not NtlmV1 is enabled or disabled.
        * `sync_ntlm_passwords` (`str`) - A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
        * `tls_v1` (`str`) - A flag to determine whether or not TlsV1 is enabled or disabled.

      * `filtered_sync` (`str`) - Enabled or Disabled flag to turn on Group-based filtered sync
      * `health_alerts` (`list`) - List of Domain Health Alerts
        * `id` (`str`) - Health Alert Id
        * `issue` (`str`) - Health Alert Issue
        * `last_detected` (`str`) - Health Alert Last Detected DateTime
        * `name` (`str`) - Health Alert Name
        * `raised` (`str`) - Health Alert Raised DateTime
        * `resolution_uri` (`str`) - Health Alert TSG Link
        * `severity` (`str`) - Health Alert Severity

      * `health_last_evaluated` (`str`) - Last domain evaluation run DateTime
      * `health_monitors` (`list`) - List of Domain Health Monitors
        * `details` (`str`) - Health Monitor Details
        * `id` (`str`) - Health Monitor Id
        * `name` (`str`) - Health Monitor Name

      * `ldaps_settings` (`dict`) - Secure LDAP Settings
        * `certificate_not_after` (`str`) - NotAfter DateTime of configure ldaps certificate.
        * `certificate_thumbprint` (`str`) - Thumbprint of configure ldaps certificate.
        * `external_access` (`str`) - A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
        * `external_access_ip_address` (`str`) - External access ip address.
        * `ldaps` (`str`) - A flag to determine whether or not Secure LDAP is enabled or disabled.
        * `pfx_certificate` (`str`) - The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
        * `pfx_certificate_password` (`str`) - The password to decrypt the provided Secure LDAP certificate pfx file.
        * `public_certificate` (`str`) - Public certificate used to configure secure ldap.

      * `notification_settings` (`dict`) - Notification Settings
        * `additional_recipients` (`list`) - The list of additional recipients
        * `notify_dc_admins` (`str`) - Should domain controller admins be notified
        * `notify_global_admins` (`str`) - Should global admins be notified

      * `provisioning_state` (`str`) - the current deployment or provisioning state, which only appears in the response.
      * `service_status` (`str`) - Status of Domain Service instance
      * `subnet_id` (`str`) - The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
      * `tenant_id` (`str`) - Azure Active Directory tenant id
      * `vnet_site_id` (`str`) - Virtual network site id
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, domain_name=None, domain_security_settings=None, etag=None, filtered_sync=None, ldaps_settings=None, location=None, name=None, notification_settings=None, resource_group_name=None, subnet_id=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Domain service.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain_name: The name of the Azure domain that the user would like to deploy Domain Services to.
        :param pulumi.Input[dict] domain_security_settings: DomainSecurity Settings
        :param pulumi.Input[str] etag: Resource etag
        :param pulumi.Input[str] filtered_sync: Enabled or Disabled flag to turn on Group-based filtered sync
        :param pulumi.Input[dict] ldaps_settings: Secure LDAP Settings
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The name of the domain service.
        :param pulumi.Input[dict] notification_settings: Notification Settings
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.
        :param pulumi.Input[str] subnet_id: The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
        :param pulumi.Input[dict] tags: Resource tags

        The **domain_security_settings** object supports the following:

          * `ntlm_v1` (`pulumi.Input[str]`) - A flag to determine whether or not NtlmV1 is enabled or disabled.
          * `sync_ntlm_passwords` (`pulumi.Input[str]`) - A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
          * `tls_v1` (`pulumi.Input[str]`) - A flag to determine whether or not TlsV1 is enabled or disabled.

        The **ldaps_settings** object supports the following:

          * `external_access` (`pulumi.Input[str]`) - A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
          * `ldaps` (`pulumi.Input[str]`) - A flag to determine whether or not Secure LDAP is enabled or disabled.
          * `pfx_certificate` (`pulumi.Input[str]`) - The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
          * `pfx_certificate_password` (`pulumi.Input[str]`) - The password to decrypt the provided Secure LDAP certificate pfx file.

        The **notification_settings** object supports the following:

          * `additional_recipients` (`pulumi.Input[list]`) - The list of additional recipients
          * `notify_dc_admins` (`pulumi.Input[str]`) - Should domain controller admins be notified
          * `notify_global_admins` (`pulumi.Input[str]`) - Should global admins be notified
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['domain_name'] = domain_name
            __props__['domain_security_settings'] = domain_security_settings
            __props__['etag'] = etag
            __props__['filtered_sync'] = filtered_sync
            __props__['ldaps_settings'] = ldaps_settings
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['notification_settings'] = notification_settings
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['subnet_id'] = subnet_id
            __props__['tags'] = tags
            __props__['properties'] = None
            __props__['type'] = None
        super(DomainService, __self__).__init__(
            'azurerm:aad/v20170601:DomainService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing DomainService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return DomainService(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
