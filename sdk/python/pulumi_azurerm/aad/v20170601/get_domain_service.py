# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetDomainServiceResult:
    """
    Domain service.
    """
    def __init__(__self__, domain_controller_ip_address=None, domain_name=None, domain_security_settings=None, etag=None, filtered_sync=None, health_alerts=None, health_last_evaluated=None, health_monitors=None, ldaps_settings=None, location=None, name=None, notification_settings=None, provisioning_state=None, service_status=None, subnet_id=None, tags=None, tenant_id=None, type=None, vnet_site_id=None):
        if domain_controller_ip_address and not isinstance(domain_controller_ip_address, list):
            raise TypeError("Expected argument 'domain_controller_ip_address' to be a list")
        __self__.domain_controller_ip_address = domain_controller_ip_address
        """
        List of Domain Controller IP Address
        """
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        __self__.domain_name = domain_name
        """
        The name of the Azure domain that the user would like to deploy Domain Services to.
        """
        if domain_security_settings and not isinstance(domain_security_settings, dict):
            raise TypeError("Expected argument 'domain_security_settings' to be a dict")
        __self__.domain_security_settings = domain_security_settings
        """
        DomainSecurity Settings
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Resource etag
        """
        if filtered_sync and not isinstance(filtered_sync, str):
            raise TypeError("Expected argument 'filtered_sync' to be a str")
        __self__.filtered_sync = filtered_sync
        """
        Enabled or Disabled flag to turn on Group-based filtered sync
        """
        if health_alerts and not isinstance(health_alerts, list):
            raise TypeError("Expected argument 'health_alerts' to be a list")
        __self__.health_alerts = health_alerts
        """
        List of Domain Health Alerts
        """
        if health_last_evaluated and not isinstance(health_last_evaluated, str):
            raise TypeError("Expected argument 'health_last_evaluated' to be a str")
        __self__.health_last_evaluated = health_last_evaluated
        """
        Last domain evaluation run DateTime
        """
        if health_monitors and not isinstance(health_monitors, list):
            raise TypeError("Expected argument 'health_monitors' to be a list")
        __self__.health_monitors = health_monitors
        """
        List of Domain Health Monitors
        """
        if ldaps_settings and not isinstance(ldaps_settings, dict):
            raise TypeError("Expected argument 'ldaps_settings' to be a dict")
        __self__.ldaps_settings = ldaps_settings
        """
        Secure LDAP Settings
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if notification_settings and not isinstance(notification_settings, dict):
            raise TypeError("Expected argument 'notification_settings' to be a dict")
        __self__.notification_settings = notification_settings
        """
        Notification Settings
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        the current deployment or provisioning state, which only appears in the response.
        """
        if service_status and not isinstance(service_status, str):
            raise TypeError("Expected argument 'service_status' to be a str")
        __self__.service_status = service_status
        """
        Status of Domain Service instance
        """
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        __self__.subnet_id = subnet_id
        """
        The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        __self__.tenant_id = tenant_id
        """
        Azure Active Directory tenant id
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """
        if vnet_site_id and not isinstance(vnet_site_id, str):
            raise TypeError("Expected argument 'vnet_site_id' to be a str")
        __self__.vnet_site_id = vnet_site_id
        """
        Virtual network site id
        """


class AwaitableGetDomainServiceResult(GetDomainServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainServiceResult(
            domain_controller_ip_address=self.domain_controller_ip_address,
            domain_name=self.domain_name,
            domain_security_settings=self.domain_security_settings,
            etag=self.etag,
            filtered_sync=self.filtered_sync,
            health_alerts=self.health_alerts,
            health_last_evaluated=self.health_last_evaluated,
            health_monitors=self.health_monitors,
            ldaps_settings=self.ldaps_settings,
            location=self.location,
            name=self.name,
            notification_settings=self.notification_settings,
            provisioning_state=self.provisioning_state,
            service_status=self.service_status,
            subnet_id=self.subnet_id,
            tags=self.tags,
            tenant_id=self.tenant_id,
            type=self.type,
            vnet_site_id=self.vnet_site_id)


def get_domain_service(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the domain service.
    :param str resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:aad/v20170601:getDomainService', __args__, opts=opts).value

    return AwaitableGetDomainServiceResult(
        domain_controller_ip_address=__ret__.get('domainControllerIpAddress'),
        domain_name=__ret__.get('domainName'),
        domain_security_settings=__ret__.get('domainSecuritySettings'),
        etag=__ret__.get('etag'),
        filtered_sync=__ret__.get('filteredSync'),
        health_alerts=__ret__.get('healthAlerts'),
        health_last_evaluated=__ret__.get('healthLastEvaluated'),
        health_monitors=__ret__.get('healthMonitors'),
        ldaps_settings=__ret__.get('ldapsSettings'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        notification_settings=__ret__.get('notificationSettings'),
        provisioning_state=__ret__.get('provisioningState'),
        service_status=__ret__.get('serviceStatus'),
        subnet_id=__ret__.get('subnetId'),
        tags=__ret__.get('tags'),
        tenant_id=__ret__.get('tenantId'),
        type=__ret__.get('type'),
        vnet_site_id=__ret__.get('vnetSiteId'))
