# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class User(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    User entity contract properties.
      * `email` (`str`) - Email address.
      * `first_name` (`str`) - First name.
      * `groups` (`list`) - Collection of groups user is part of.
        * `built_in` (`bool`) - true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.
        * `description` (`str`) - Group description. Can contain HTML formatting tags.
        * `display_name` (`str`) - Group name.
        * `external_id` (`str`) - For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null.
        * `type` (`str`) - Group type.

      * `identities` (`list`) - Collection of user identities.
        * `id` (`str`) - Identifier value within provider.
        * `provider` (`str`) - Identity provider name.

      * `last_name` (`str`) - Last name.
      * `note` (`str`) - Optional note about a user set by the administrator.
      * `registration_date` (`str`) - Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
      * `state` (`str`) - Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
    """
    type: pulumi.Output[str]
    """
    Resource type for API Management resource.
    """
    def __init__(__self__, resource_name, opts=None, name=None, notify=None, properties=None, resource_group_name=None, service_name=None, __props__=None, __name__=None, __opts__=None):
        """
        User details.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: User identifier. Must be unique in the current API Management service instance.
        :param pulumi.Input[bool] notify: Send an Email notification to the User.
        :param pulumi.Input[dict] properties: User entity create contract properties.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[str] service_name: The name of the API Management service.

        The **properties** object supports the following:

          * `app_type` (`pulumi.Input[str]`) - Determines the type of application which send the create user request. Default is legacy portal.
          * `confirmation` (`pulumi.Input[str]`) - Determines the type of confirmation e-mail that will be sent to the newly created user.
          * `email` (`pulumi.Input[str]`) - Email address. Must not be empty and must be unique within the service instance.
          * `first_name` (`pulumi.Input[str]`) - First name.
          * `identities` (`pulumi.Input[list]`) - Collection of user identities.
            * `id` (`pulumi.Input[str]`) - Identifier value within provider.
            * `provider` (`pulumi.Input[str]`) - Identity provider name.

          * `last_name` (`pulumi.Input[str]`) - Last name.
          * `note` (`pulumi.Input[str]`) - Optional note about a user set by the administrator.
          * `password` (`pulumi.Input[str]`) - User Password. If no value is provided, a default password is generated.
          * `state` (`pulumi.Input[str]`) - Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['notify'] = notify
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if service_name is None:
                raise TypeError("Missing required property 'service_name'")
            __props__['service_name'] = service_name
            __props__['type'] = None
        super(User, __self__).__init__(
            'azurerm:apimanagement:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return User(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
