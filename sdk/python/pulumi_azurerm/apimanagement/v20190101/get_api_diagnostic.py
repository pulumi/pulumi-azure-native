# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetApiDiagnosticResult:
    """
    Diagnostic details.
    """
    def __init__(__self__, always_log=None, backend=None, enable_http_correlation_headers=None, frontend=None, http_correlation_protocol=None, logger_id=None, name=None, sampling=None, type=None, verbosity=None):
        if always_log and not isinstance(always_log, str):
            raise TypeError("Expected argument 'always_log' to be a str")
        __self__.always_log = always_log
        """
        Specifies for what type of messages sampling settings should not apply.
        """
        if backend and not isinstance(backend, dict):
            raise TypeError("Expected argument 'backend' to be a dict")
        __self__.backend = backend
        """
        Diagnostic settings for incoming/outgoing HTTP messages to the Backend
        """
        if enable_http_correlation_headers and not isinstance(enable_http_correlation_headers, bool):
            raise TypeError("Expected argument 'enable_http_correlation_headers' to be a bool")
        __self__.enable_http_correlation_headers = enable_http_correlation_headers
        """
        Whether to process Correlation Headers coming to Api Management Service. Only applicable to Application Insights diagnostics. Default is true.
        """
        if frontend and not isinstance(frontend, dict):
            raise TypeError("Expected argument 'frontend' to be a dict")
        __self__.frontend = frontend
        """
        Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
        """
        if http_correlation_protocol and not isinstance(http_correlation_protocol, str):
            raise TypeError("Expected argument 'http_correlation_protocol' to be a str")
        __self__.http_correlation_protocol = http_correlation_protocol
        """
        Sets correlation protocol to use for Application Insights diagnostics.
        """
        if logger_id and not isinstance(logger_id, str):
            raise TypeError("Expected argument 'logger_id' to be a str")
        __self__.logger_id = logger_id
        """
        Resource Id of a target logger.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if sampling and not isinstance(sampling, dict):
            raise TypeError("Expected argument 'sampling' to be a dict")
        __self__.sampling = sampling
        """
        Sampling settings for Diagnostic.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type for API Management resource.
        """
        if verbosity and not isinstance(verbosity, str):
            raise TypeError("Expected argument 'verbosity' to be a str")
        __self__.verbosity = verbosity
        """
        The verbosity level applied to traces emitted by trace policies.
        """


class AwaitableGetApiDiagnosticResult(GetApiDiagnosticResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiDiagnosticResult(
            always_log=self.always_log,
            backend=self.backend,
            enable_http_correlation_headers=self.enable_http_correlation_headers,
            frontend=self.frontend,
            http_correlation_protocol=self.http_correlation_protocol,
            logger_id=self.logger_id,
            name=self.name,
            sampling=self.sampling,
            type=self.type,
            verbosity=self.verbosity)


def get_api_diagnostic(api_id=None, name=None, resource_group_name=None, service_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str api_id: API identifier. Must be unique in the current API Management service instance.
    :param str name: Diagnostic identifier. Must be unique in the current API Management service instance.
    :param str resource_group_name: The name of the resource group.
    :param str service_name: The name of the API Management service.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['serviceName'] = service_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:apimanagement/v20190101:getApiDiagnostic', __args__, opts=opts).value

    return AwaitableGetApiDiagnosticResult(
        always_log=__ret__.get('alwaysLog'),
        backend=__ret__.get('backend'),
        enable_http_correlation_headers=__ret__.get('enableHttpCorrelationHeaders'),
        frontend=__ret__.get('frontend'),
        http_correlation_protocol=__ret__.get('httpCorrelationProtocol'),
        logger_id=__ret__.get('loggerId'),
        name=__ret__.get('name'),
        sampling=__ret__.get('sampling'),
        type=__ret__.get('type'),
        verbosity=__ret__.get('verbosity'))
