# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetEmailTemplateResult:
    """
    Email Template details.
    """
    def __init__(__self__, body=None, description=None, is_default=None, name=None, parameters=None, subject=None, title=None, type=None):
        if body and not isinstance(body, str):
            raise TypeError("Expected argument 'body' to be a str")
        __self__.body = body
        """
        Email Template Body. This should be a valid XDocument
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        Description of the Email Template.
        """
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        __self__.is_default = is_default
        """
        Whether the template is the default template provided by Api Management or has been edited.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if parameters and not isinstance(parameters, list):
            raise TypeError("Expected argument 'parameters' to be a list")
        __self__.parameters = parameters
        """
        Email Template Parameter values.
        """
        if subject and not isinstance(subject, str):
            raise TypeError("Expected argument 'subject' to be a str")
        __self__.subject = subject
        """
        Subject of the Template.
        """
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        __self__.title = title
        """
        Title of the Template.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type for API Management resource.
        """


class AwaitableGetEmailTemplateResult(GetEmailTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEmailTemplateResult(
            body=self.body,
            description=self.description,
            is_default=self.is_default,
            name=self.name,
            parameters=self.parameters,
            subject=self.subject,
            title=self.title,
            type=self.type)


def get_email_template(name=None, resource_group_name=None, service_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Email Template Name Identifier.
    :param str resource_group_name: The name of the resource group.
    :param str service_name: The name of the API Management service.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['serviceName'] = service_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:apimanagement/v20190101:getEmailTemplate', __args__, opts=opts).value

    return AwaitableGetEmailTemplateResult(
        body=__ret__.get('body'),
        description=__ret__.get('description'),
        is_default=__ret__.get('isDefault'),
        name=__ret__.get('name'),
        parameters=__ret__.get('parameters'),
        subject=__ret__.get('subject'),
        title=__ret__.get('title'),
        type=__ret__.get('type'))
