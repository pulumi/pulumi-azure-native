# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetApiIssueCommentResult:
    """
    Issue Comment Contract details.
    """
    def __init__(__self__, created_date=None, name=None, text=None, type=None, user_id=None):
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        __self__.created_date = created_date
        """
        Date and time when the comment was created.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if text and not isinstance(text, str):
            raise TypeError("Expected argument 'text' to be a str")
        __self__.text = text
        """
        Comment text.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type for API Management resource.
        """
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        __self__.user_id = user_id
        """
        A resource identifier for the user who left the comment.
        """


class AwaitableGetApiIssueCommentResult(GetApiIssueCommentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiIssueCommentResult(
            created_date=self.created_date,
            name=self.name,
            text=self.text,
            type=self.type,
            user_id=self.user_id)


def get_api_issue_comment(api_id=None, issue_id=None, name=None, resource_group_name=None, service_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str api_id: API identifier. Must be unique in the current API Management service instance.
    :param str issue_id: Issue identifier. Must be unique in the current API Management service instance.
    :param str name: Comment identifier within an Issue. Must be unique in the current Issue.
    :param str resource_group_name: The name of the resource group.
    :param str service_name: The name of the API Management service.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['issueId'] = issue_id
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['serviceName'] = service_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:apimanagement/v20190101:getApiIssueComment', __args__, opts=opts).value

    return AwaitableGetApiIssueCommentResult(
        created_date=__ret__.get('createdDate'),
        name=__ret__.get('name'),
        text=__ret__.get('text'),
        type=__ret__.get('type'),
        user_id=__ret__.get('userId'))
