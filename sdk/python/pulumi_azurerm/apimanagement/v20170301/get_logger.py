# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetLoggerResult:
    """
    Logger details.
    """
    def __init__(__self__, credentials=None, description=None, is_buffered=None, logger_type=None, name=None, sampling=None, type=None):
        if credentials and not isinstance(credentials, dict):
            raise TypeError("Expected argument 'credentials' to be a dict")
        __self__.credentials = credentials
        """
        The name and SendRule connection string of the event hub for azureEventHub logger.
        Instrumentation key for applicationInsights logger.
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        Logger description.
        """
        if is_buffered and not isinstance(is_buffered, bool):
            raise TypeError("Expected argument 'is_buffered' to be a bool")
        __self__.is_buffered = is_buffered
        """
        Whether records are buffered in the logger before publishing. Default is assumed to be true.
        """
        if logger_type and not isinstance(logger_type, str):
            raise TypeError("Expected argument 'logger_type' to be a str")
        __self__.logger_type = logger_type
        """
        Logger type.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if sampling and not isinstance(sampling, dict):
            raise TypeError("Expected argument 'sampling' to be a dict")
        __self__.sampling = sampling
        """
        Sampling settings for an ApplicationInsights logger.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type for API Management resource.
        """


class AwaitableGetLoggerResult(GetLoggerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLoggerResult(
            credentials=self.credentials,
            description=self.description,
            is_buffered=self.is_buffered,
            logger_type=self.logger_type,
            name=self.name,
            sampling=self.sampling,
            type=self.type)


def get_logger(name=None, resource_group_name=None, service_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Logger identifier. Must be unique in the API Management service instance.
    :param str resource_group_name: The name of the resource group.
    :param str service_name: The name of the API Management service.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['serviceName'] = service_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:apimanagement/v20170301:getLogger', __args__, opts=opts).value

    return AwaitableGetLoggerResult(
        credentials=__ret__.get('credentials'),
        description=__ret__.get('description'),
        is_buffered=__ret__.get('isBuffered'),
        logger_type=__ret__.get('loggerType'),
        name=__ret__.get('name'),
        sampling=__ret__.get('sampling'),
        type=__ret__.get('type'))
