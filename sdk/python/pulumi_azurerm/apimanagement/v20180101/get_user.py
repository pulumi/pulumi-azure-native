# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetUserResult:
    """
    User details.
    """
    def __init__(__self__, email=None, first_name=None, groups=None, identities=None, last_name=None, name=None, note=None, registration_date=None, state=None, type=None):
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        __self__.email = email
        """
        Email address.
        """
        if first_name and not isinstance(first_name, str):
            raise TypeError("Expected argument 'first_name' to be a str")
        __self__.first_name = first_name
        """
        First name.
        """
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        __self__.groups = groups
        """
        Collection of groups user is part of.
        """
        if identities and not isinstance(identities, list):
            raise TypeError("Expected argument 'identities' to be a list")
        __self__.identities = identities
        """
        Collection of user identities.
        """
        if last_name and not isinstance(last_name, str):
            raise TypeError("Expected argument 'last_name' to be a str")
        __self__.last_name = last_name
        """
        Last name.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if note and not isinstance(note, str):
            raise TypeError("Expected argument 'note' to be a str")
        __self__.note = note
        """
        Optional note about a user set by the administrator.
        """
        if registration_date and not isinstance(registration_date, str):
            raise TypeError("Expected argument 'registration_date' to be a str")
        __self__.registration_date = registration_date
        """
        Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        """
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        __self__.state = state
        """
        Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type for API Management resource.
        """


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            email=self.email,
            first_name=self.first_name,
            groups=self.groups,
            identities=self.identities,
            last_name=self.last_name,
            name=self.name,
            note=self.note,
            registration_date=self.registration_date,
            state=self.state,
            type=self.type)


def get_user(name=None, resource_group_name=None, service_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: User identifier. Must be unique in the current API Management service instance.
    :param str resource_group_name: The name of the resource group.
    :param str service_name: The name of the API Management service.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['serviceName'] = service_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:apimanagement/v20180101:getUser', __args__, opts=opts).value

    return AwaitableGetUserResult(
        email=__ret__.get('email'),
        first_name=__ret__.get('firstName'),
        groups=__ret__.get('groups'),
        identities=__ret__.get('identities'),
        last_name=__ret__.get('lastName'),
        name=__ret__.get('name'),
        note=__ret__.get('note'),
        registration_date=__ret__.get('registrationDate'),
        state=__ret__.get('state'),
        type=__ret__.get('type'))
