# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ApiManagementService(pulumi.CustomResource):
    additional_locations: pulumi.Output[list]
    """
    Additional datacenter locations of the API Management service.
      * `gateway_regional_url` (`str`) - Gateway URL of the API Management service in the Region.
      * `location` (`str`) - The location name of the additional region among Azure Data center regions.
      * `private_ip_addresses` (`list`) - Private Static Load Balanced IP addresses of the API Management service which is deployed in an Internal Virtual Network in a particular additional location. Available only for Basic, Standard and Premium SKU.
      * `public_ip_addresses` (`list`) - Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
      * `sku` (`dict`) - SKU properties of the API Management service.
        * `capacity` (`float`) - Capacity of the SKU (number of deployed units of the SKU). The default value is 1.
        * `name` (`str`) - Name of the Sku.

      * `virtual_network_configuration` (`dict`) - Virtual network configuration for the location.
        * `subnet_resource_id` (`str`) - The full resource ID of a subnet in a virtual network to deploy the API Management service in.
        * `subnetname` (`str`) - The name of the subnet.
        * `vnetid` (`str`) - The virtual network ID. This is typically a GUID. Expect a null GUID by default.
    """
    certificates: pulumi.Output[list]
    """
    List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10.
      * `certificate` (`dict`) - Certificate information.
        * `expiry` (`str`) - Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        * `subject` (`str`) - Subject of the certificate.
        * `thumbprint` (`str`) - Thumbprint of the certificate.

      * `certificate_password` (`str`) - Certificate Password.
      * `encoded_certificate` (`str`) - Base64 Encoded certificate.
      * `store_name` (`str`) - The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations.
    """
    created_at_utc: pulumi.Output[str]
    """
    Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
    """
    custom_properties: pulumi.Output[dict]
    """
    Custom properties of the API Management service. Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1 and setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.
    """
    etag: pulumi.Output[str]
    """
    ETag of the resource.
    """
    gateway_regional_url: pulumi.Output[str]
    """
    Gateway URL of the API Management service in the Default Region.
    """
    gateway_url: pulumi.Output[str]
    """
    Gateway URL of the API Management service.
    """
    hostname_configurations: pulumi.Output[list]
    """
    Custom hostname configuration of the API Management service.
      * `certificate` (`dict`) - Certificate information.
        * `expiry` (`str`) - Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        * `subject` (`str`) - Subject of the certificate.
        * `thumbprint` (`str`) - Thumbprint of the certificate.

      * `certificate_password` (`str`) - Certificate Password.
      * `default_ssl_binding` (`bool`) - Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
      * `encoded_certificate` (`str`) - Base64 Encoded certificate.
      * `host_name` (`str`) - Hostname to configure on the Api Management service.
      * `key_vault_id` (`str`) - Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*
      * `negotiate_client_certificate` (`bool`) - Specify true to always negotiate client certificate on the hostname. Default Value is false.
      * `type` (`str`) - Hostname type.
    """
    identity: pulumi.Output[dict]
    """
    Managed service identity of the Api Management service.
      * `principal_id` (`str`) - The principal id of the identity.
      * `tenant_id` (`str`) - The client tenant id of the identity.
      * `type` (`str`) - The identity type. Currently the only supported type is 'SystemAssigned'.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    management_api_url: pulumi.Output[str]
    """
    Management API endpoint URL of the API Management service.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    notification_sender_email: pulumi.Output[str]
    """
    Email address from which the notification will be sent.
    """
    portal_url: pulumi.Output[str]
    """
    Publisher portal endpoint Url of the API Management service.
    """
    private_ip_addresses: pulumi.Output[list]
    """
    Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard and Premium SKU.
    """
    provisioning_state: pulumi.Output[str]
    """
    The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
    """
    public_ip_addresses: pulumi.Output[list]
    """
    Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard and Premium SKU.
    """
    publisher_email: pulumi.Output[str]
    """
    Publisher email.
    """
    publisher_name: pulumi.Output[str]
    """
    Publisher name.
    """
    scm_url: pulumi.Output[str]
    """
    SCM endpoint URL of the API Management service.
    """
    sku: pulumi.Output[dict]
    """
    SKU properties of the API Management service.
      * `capacity` (`float`) - Capacity of the SKU (number of deployed units of the SKU). The default value is 1.
      * `name` (`str`) - Name of the Sku.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    target_provisioning_state: pulumi.Output[str]
    """
    The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
    """
    type: pulumi.Output[str]
    """
    Resource type for API Management resource is set to Microsoft.ApiManagement.
    """
    virtual_network_configuration: pulumi.Output[dict]
    """
    Virtual network configuration of the API Management service.
      * `subnet_resource_id` (`str`) - The full resource ID of a subnet in a virtual network to deploy the API Management service in.
      * `subnetname` (`str`) - The name of the subnet.
      * `vnetid` (`str`) - The virtual network ID. This is typically a GUID. Expect a null GUID by default.
    """
    virtual_network_type: pulumi.Output[str]
    """
    The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
    """
    def __init__(__self__, resource_name, opts=None, additional_locations=None, certificates=None, custom_properties=None, hostname_configurations=None, identity=None, location=None, name=None, notification_sender_email=None, publisher_email=None, publisher_name=None, resource_group_name=None, sku=None, tags=None, virtual_network_configuration=None, virtual_network_type=None, __props__=None, __name__=None, __opts__=None):
        """
        A single API Management service resource in List or Get response.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] additional_locations: Additional datacenter locations of the API Management service.
        :param pulumi.Input[list] certificates: List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10.
        :param pulumi.Input[dict] custom_properties: Custom properties of the API Management service. Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1 and setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.
        :param pulumi.Input[list] hostname_configurations: Custom hostname configuration of the API Management service.
        :param pulumi.Input[dict] identity: Managed service identity of the Api Management service.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: The name of the API Management service.
        :param pulumi.Input[str] notification_sender_email: Email address from which the notification will be sent.
        :param pulumi.Input[str] publisher_email: Publisher email.
        :param pulumi.Input[str] publisher_name: Publisher name.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] sku: SKU properties of the API Management service.
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[dict] virtual_network_configuration: Virtual network configuration of the API Management service.
        :param pulumi.Input[str] virtual_network_type: The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.

        The **additional_locations** object supports the following:

          * `location` (`pulumi.Input[str]`) - The location name of the additional region among Azure Data center regions.
          * `sku` (`pulumi.Input[dict]`) - SKU properties of the API Management service.
            * `capacity` (`pulumi.Input[float]`) - Capacity of the SKU (number of deployed units of the SKU). The default value is 1.
            * `name` (`pulumi.Input[str]`) - Name of the Sku.

          * `virtual_network_configuration` (`pulumi.Input[dict]`) - Virtual network configuration for the location.
            * `subnet_resource_id` (`pulumi.Input[str]`) - The full resource ID of a subnet in a virtual network to deploy the API Management service in.

        The **certificates** object supports the following:

          * `certificate` (`pulumi.Input[dict]`) - Certificate information.
            * `expiry` (`pulumi.Input[str]`) - Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
            * `subject` (`pulumi.Input[str]`) - Subject of the certificate.
            * `thumbprint` (`pulumi.Input[str]`) - Thumbprint of the certificate.

          * `certificate_password` (`pulumi.Input[str]`) - Certificate Password.
          * `encoded_certificate` (`pulumi.Input[str]`) - Base64 Encoded certificate.
          * `store_name` (`pulumi.Input[str]`) - The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations.

        The **hostname_configurations** object supports the following:

          * `certificate` (`pulumi.Input[dict]`) - Certificate information.
          * `certificate_password` (`pulumi.Input[str]`) - Certificate Password.
          * `default_ssl_binding` (`pulumi.Input[bool]`) - Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
          * `encoded_certificate` (`pulumi.Input[str]`) - Base64 Encoded certificate.
          * `host_name` (`pulumi.Input[str]`) - Hostname to configure on the Api Management service.
          * `key_vault_id` (`pulumi.Input[str]`) - Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*
          * `negotiate_client_certificate` (`pulumi.Input[bool]`) - Specify true to always negotiate client certificate on the hostname. Default Value is false.
          * `type` (`pulumi.Input[str]`) - Hostname type.

        The **identity** object supports the following:

          * `type` (`pulumi.Input[str]`) - The identity type. Currently the only supported type is 'SystemAssigned'.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['additional_locations'] = additional_locations
            __props__['certificates'] = certificates
            __props__['custom_properties'] = custom_properties
            __props__['hostname_configurations'] = hostname_configurations
            __props__['identity'] = identity
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['notification_sender_email'] = notification_sender_email
            if publisher_email is None:
                raise TypeError("Missing required property 'publisher_email'")
            __props__['publisher_email'] = publisher_email
            if publisher_name is None:
                raise TypeError("Missing required property 'publisher_name'")
            __props__['publisher_name'] = publisher_name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if sku is None:
                raise TypeError("Missing required property 'sku'")
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['virtual_network_configuration'] = virtual_network_configuration
            __props__['virtual_network_type'] = virtual_network_type
            __props__['created_at_utc'] = None
            __props__['etag'] = None
            __props__['gateway_regional_url'] = None
            __props__['gateway_url'] = None
            __props__['management_api_url'] = None
            __props__['portal_url'] = None
            __props__['private_ip_addresses'] = None
            __props__['provisioning_state'] = None
            __props__['public_ip_addresses'] = None
            __props__['scm_url'] = None
            __props__['target_provisioning_state'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:apimanagement/v20160707:ApiManagementService"), pulumi.Alias(type_="azurerm:apimanagement/v20161010:ApiManagementService"), pulumi.Alias(type_="azurerm:apimanagement/v20170301:ApiManagementService"), pulumi.Alias(type_="azurerm:apimanagement/v20190101:ApiManagementService"), pulumi.Alias(type_="azurerm:apimanagement/v20191201:ApiManagementService")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(ApiManagementService, __self__).__init__(
            'azurerm:apimanagement/v20180101:ApiManagementService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ApiManagementService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ApiManagementService(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
