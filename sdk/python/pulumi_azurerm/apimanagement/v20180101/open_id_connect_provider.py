# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class OpenIdConnectProvider(pulumi.CustomResource):
    client_id: pulumi.Output[str]
    """
    Client ID of developer console which is the client application.
    """
    client_secret: pulumi.Output[str]
    """
    Client Secret of developer console which is the client application.
    """
    description: pulumi.Output[str]
    """
    User-friendly description of OpenID Connect Provider.
    """
    display_name: pulumi.Output[str]
    """
    User-friendly OpenID Connect Provider name.
    """
    metadata_endpoint: pulumi.Output[str]
    """
    Metadata endpoint URI.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    type: pulumi.Output[str]
    """
    Resource type for API Management resource.
    """
    def __init__(__self__, resource_name, opts=None, client_id=None, client_secret=None, description=None, display_name=None, metadata_endpoint=None, name=None, resource_group_name=None, service_name=None, __props__=None, __name__=None, __opts__=None):
        """
        OpenId Connect Provider details.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_id: Client ID of developer console which is the client application.
        :param pulumi.Input[str] client_secret: Client Secret of developer console which is the client application.
        :param pulumi.Input[str] description: User-friendly description of OpenID Connect Provider.
        :param pulumi.Input[str] display_name: User-friendly OpenID Connect Provider name.
        :param pulumi.Input[str] metadata_endpoint: Metadata endpoint URI.
        :param pulumi.Input[str] name: Identifier of the OpenID Connect Provider.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[str] service_name: The name of the API Management service.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if client_id is None:
                raise TypeError("Missing required property 'client_id'")
            __props__['client_id'] = client_id
            __props__['client_secret'] = client_secret
            __props__['description'] = description
            if display_name is None:
                raise TypeError("Missing required property 'display_name'")
            __props__['display_name'] = display_name
            if metadata_endpoint is None:
                raise TypeError("Missing required property 'metadata_endpoint'")
            __props__['metadata_endpoint'] = metadata_endpoint
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if service_name is None:
                raise TypeError("Missing required property 'service_name'")
            __props__['service_name'] = service_name
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:apimanagement/v20160707:OpenIdConnectProvider"), pulumi.Alias(type_="azurerm:apimanagement/v20161010:OpenIdConnectProvider"), pulumi.Alias(type_="azurerm:apimanagement/v20170301:OpenIdConnectProvider"), pulumi.Alias(type_="azurerm:apimanagement/v20190101:OpenIdConnectProvider"), pulumi.Alias(type_="azurerm:apimanagement/v20191201:OpenIdConnectProvider")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(OpenIdConnectProvider, __self__).__init__(
            'azurerm:apimanagement/v20180101:OpenIdConnectProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing OpenIdConnectProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return OpenIdConnectProvider(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
