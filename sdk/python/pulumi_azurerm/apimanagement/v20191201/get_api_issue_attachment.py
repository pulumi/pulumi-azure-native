# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetApiIssueAttachmentResult:
    """
    Issue Attachment Contract details.
    """
    def __init__(__self__, content=None, content_format=None, name=None, title=None, type=None):
        if content and not isinstance(content, str):
            raise TypeError("Expected argument 'content' to be a str")
        __self__.content = content
        """
        An HTTP link or Base64-encoded binary data.
        """
        if content_format and not isinstance(content_format, str):
            raise TypeError("Expected argument 'content_format' to be a str")
        __self__.content_format = content_format
        """
        Either 'link' if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the 'content' property.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        __self__.title = title
        """
        Filename by which the binary data will be saved.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type for API Management resource.
        """


class AwaitableGetApiIssueAttachmentResult(GetApiIssueAttachmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiIssueAttachmentResult(
            content=self.content,
            content_format=self.content_format,
            name=self.name,
            title=self.title,
            type=self.type)


def get_api_issue_attachment(api_id=None, issue_id=None, name=None, resource_group_name=None, service_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str api_id: API identifier. Must be unique in the current API Management service instance.
    :param str issue_id: Issue identifier. Must be unique in the current API Management service instance.
    :param str name: Attachment identifier within an Issue. Must be unique in the current Issue.
    :param str resource_group_name: The name of the resource group.
    :param str service_name: The name of the API Management service.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['issueId'] = issue_id
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['serviceName'] = service_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:apimanagement/v20191201:getApiIssueAttachment', __args__, opts=opts).value

    return AwaitableGetApiIssueAttachmentResult(
        content=__ret__.get('content'),
        content_format=__ret__.get('contentFormat'),
        name=__ret__.get('name'),
        title=__ret__.get('title'),
        type=__ret__.get('type'))
