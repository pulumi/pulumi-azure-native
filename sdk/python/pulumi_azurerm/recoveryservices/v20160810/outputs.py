# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'CurrentScenarioDetailsResponse',
    'EncryptionDetailsResponse',
    'FabricPropertiesResponse',
    'FabricSpecificDetailsResponse',
    'HealthErrorResponse',
    'NetworkMappingFabricSpecificSettingsResponse',
    'NetworkMappingPropertiesResponse',
    'PolicyPropertiesResponse',
    'PolicyProviderSpecificDetailsResponse',
    'ProtectionContainerMappingPropertiesResponse',
    'ProtectionContainerMappingProviderSpecificDetailsResponse',
    'RecoveryPlanActionDetailsResponse',
    'RecoveryPlanActionResponse',
    'RecoveryPlanGroupResponse',
    'RecoveryPlanPropertiesResponse',
    'RecoveryPlanProtectedItemResponse',
    'ReplicationProtectedItemPropertiesResponse',
    'ReplicationProviderSpecificSettingsResponse',
    'StorageClassificationMappingPropertiesResponse',
    'VCenterPropertiesResponse',
]

@pulumi.output_type
class CurrentScenarioDetailsResponse(dict):
    """
    Current scenario details of the protected entity.
    """
    def __init__(__self__, *,
                 job_id: Optional[str] = None,
                 scenario_name: Optional[str] = None,
                 start_time: Optional[str] = None):
        """
        Current scenario details of the protected entity.
        :param str job_id: ARM Id of the job being executed.
        :param str scenario_name: Scenario name.
        :param str start_time: Start time of the workflow.
        """
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if scenario_name is not None:
            pulumi.set(__self__, "scenario_name", scenario_name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[str]:
        """
        ARM Id of the job being executed.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="scenarioName")
    def scenario_name(self) -> Optional[str]:
        """
        Scenario name.
        """
        return pulumi.get(self, "scenario_name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        Start time of the workflow.
        """
        return pulumi.get(self, "start_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EncryptionDetailsResponse(dict):
    """
    Encryption details for the fabric.
    """
    def __init__(__self__, *,
                 kek_cert_expiry_date: Optional[str] = None,
                 kek_cert_thumbprint: Optional[str] = None,
                 kek_state: Optional[str] = None):
        """
        Encryption details for the fabric.
        :param str kek_cert_expiry_date: The key encryption key certificate expiry date.
        :param str kek_cert_thumbprint: The key encryption key certificate thumbprint.
        :param str kek_state: The key encryption key state for the Vmm.
        """
        if kek_cert_expiry_date is not None:
            pulumi.set(__self__, "kek_cert_expiry_date", kek_cert_expiry_date)
        if kek_cert_thumbprint is not None:
            pulumi.set(__self__, "kek_cert_thumbprint", kek_cert_thumbprint)
        if kek_state is not None:
            pulumi.set(__self__, "kek_state", kek_state)

    @property
    @pulumi.getter(name="kekCertExpiryDate")
    def kek_cert_expiry_date(self) -> Optional[str]:
        """
        The key encryption key certificate expiry date.
        """
        return pulumi.get(self, "kek_cert_expiry_date")

    @property
    @pulumi.getter(name="kekCertThumbprint")
    def kek_cert_thumbprint(self) -> Optional[str]:
        """
        The key encryption key certificate thumbprint.
        """
        return pulumi.get(self, "kek_cert_thumbprint")

    @property
    @pulumi.getter(name="kekState")
    def kek_state(self) -> Optional[str]:
        """
        The key encryption key state for the Vmm.
        """
        return pulumi.get(self, "kek_state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FabricPropertiesResponse(dict):
    """
    Fabric properties.
    """
    def __init__(__self__, *,
                 bcdr_state: Optional[str] = None,
                 custom_details: Optional['outputs.FabricSpecificDetailsResponse'] = None,
                 encryption_details: Optional['outputs.EncryptionDetailsResponse'] = None,
                 friendly_name: Optional[str] = None,
                 health: Optional[str] = None,
                 health_error_details: Optional[List['outputs.HealthErrorResponse']] = None,
                 internal_identifier: Optional[str] = None,
                 rollover_encryption_details: Optional['outputs.EncryptionDetailsResponse'] = None):
        """
        Fabric properties.
        :param str bcdr_state: BCDR state of the fabric.
        :param 'FabricSpecificDetailsResponseArgs' custom_details: Fabric specific settings.
        :param 'EncryptionDetailsResponseArgs' encryption_details: Encryption details for the fabric.
        :param str friendly_name: Friendly name of the fabric.
        :param str health: Health of fabric.
        :param List['HealthErrorResponseArgs'] health_error_details: Fabric health error details.
        :param str internal_identifier: Dra Registration Id.
        :param 'EncryptionDetailsResponseArgs' rollover_encryption_details: Rollover encryption details for the fabric.
        """
        if bcdr_state is not None:
            pulumi.set(__self__, "bcdr_state", bcdr_state)
        if custom_details is not None:
            pulumi.set(__self__, "custom_details", custom_details)
        if encryption_details is not None:
            pulumi.set(__self__, "encryption_details", encryption_details)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if health_error_details is not None:
            pulumi.set(__self__, "health_error_details", health_error_details)
        if internal_identifier is not None:
            pulumi.set(__self__, "internal_identifier", internal_identifier)
        if rollover_encryption_details is not None:
            pulumi.set(__self__, "rollover_encryption_details", rollover_encryption_details)

    @property
    @pulumi.getter(name="bcdrState")
    def bcdr_state(self) -> Optional[str]:
        """
        BCDR state of the fabric.
        """
        return pulumi.get(self, "bcdr_state")

    @property
    @pulumi.getter(name="customDetails")
    def custom_details(self) -> Optional['outputs.FabricSpecificDetailsResponse']:
        """
        Fabric specific settings.
        """
        return pulumi.get(self, "custom_details")

    @property
    @pulumi.getter(name="encryptionDetails")
    def encryption_details(self) -> Optional['outputs.EncryptionDetailsResponse']:
        """
        Encryption details for the fabric.
        """
        return pulumi.get(self, "encryption_details")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[str]:
        """
        Friendly name of the fabric.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def health(self) -> Optional[str]:
        """
        Health of fabric.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="healthErrorDetails")
    def health_error_details(self) -> Optional[List['outputs.HealthErrorResponse']]:
        """
        Fabric health error details.
        """
        return pulumi.get(self, "health_error_details")

    @property
    @pulumi.getter(name="internalIdentifier")
    def internal_identifier(self) -> Optional[str]:
        """
        Dra Registration Id.
        """
        return pulumi.get(self, "internal_identifier")

    @property
    @pulumi.getter(name="rolloverEncryptionDetails")
    def rollover_encryption_details(self) -> Optional['outputs.EncryptionDetailsResponse']:
        """
        Rollover encryption details for the fabric.
        """
        return pulumi.get(self, "rollover_encryption_details")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FabricSpecificDetailsResponse(dict):
    """
    Fabric specific details.
    """
    def __init__(__self__, *,
                 instance_type: str):
        """
        Fabric specific details.
        :param str instance_type: Gets the class type. Overridden in derived classes.
        """
        pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the class type. Overridden in derived classes.
        """
        return pulumi.get(self, "instance_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HealthErrorResponse(dict):
    """
    Health Error
    """
    def __init__(__self__, *,
                 child_errors: Optional[List['outputs.HealthErrorResponse']] = None,
                 creation_time_utc: Optional[str] = None,
                 entity_id: Optional[str] = None,
                 error_code: Optional[str] = None,
                 error_level: Optional[str] = None,
                 error_message: Optional[str] = None,
                 error_source: Optional[str] = None,
                 error_type: Optional[str] = None,
                 possible_causes: Optional[str] = None,
                 recommended_action: Optional[str] = None,
                 recovery_provider_error_message: Optional[str] = None):
        """
        Health Error
        :param List['HealthErrorResponseArgs'] child_errors: The child health errors.
        :param str creation_time_utc: Error creation time (UTC)
        :param str entity_id: ID of the entity.
        :param str error_code: Error code.
        :param str error_level: Level of error.
        :param str error_message: Error message.
        :param str error_source: Source of error.
        :param str error_type: Type of error.
        :param str possible_causes: Possible causes of error.
        :param str recommended_action: Recommended action to resolve error.
        :param str recovery_provider_error_message: DRA error message.
        """
        if child_errors is not None:
            pulumi.set(__self__, "child_errors", child_errors)
        if creation_time_utc is not None:
            pulumi.set(__self__, "creation_time_utc", creation_time_utc)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_level is not None:
            pulumi.set(__self__, "error_level", error_level)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if error_source is not None:
            pulumi.set(__self__, "error_source", error_source)
        if error_type is not None:
            pulumi.set(__self__, "error_type", error_type)
        if possible_causes is not None:
            pulumi.set(__self__, "possible_causes", possible_causes)
        if recommended_action is not None:
            pulumi.set(__self__, "recommended_action", recommended_action)
        if recovery_provider_error_message is not None:
            pulumi.set(__self__, "recovery_provider_error_message", recovery_provider_error_message)

    @property
    @pulumi.getter(name="childErrors")
    def child_errors(self) -> Optional[List['outputs.HealthErrorResponse']]:
        """
        The child health errors.
        """
        return pulumi.get(self, "child_errors")

    @property
    @pulumi.getter(name="creationTimeUtc")
    def creation_time_utc(self) -> Optional[str]:
        """
        Error creation time (UTC)
        """
        return pulumi.get(self, "creation_time_utc")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        """
        ID of the entity.
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        Error code.
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorLevel")
    def error_level(self) -> Optional[str]:
        """
        Level of error.
        """
        return pulumi.get(self, "error_level")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error message.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="errorSource")
    def error_source(self) -> Optional[str]:
        """
        Source of error.
        """
        return pulumi.get(self, "error_source")

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[str]:
        """
        Type of error.
        """
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter(name="possibleCauses")
    def possible_causes(self) -> Optional[str]:
        """
        Possible causes of error.
        """
        return pulumi.get(self, "possible_causes")

    @property
    @pulumi.getter(name="recommendedAction")
    def recommended_action(self) -> Optional[str]:
        """
        Recommended action to resolve error.
        """
        return pulumi.get(self, "recommended_action")

    @property
    @pulumi.getter(name="recoveryProviderErrorMessage")
    def recovery_provider_error_message(self) -> Optional[str]:
        """
        DRA error message.
        """
        return pulumi.get(self, "recovery_provider_error_message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkMappingFabricSpecificSettingsResponse(dict):
    """
    Network Mapping fabric specific settings.
    """
    def __init__(__self__, *,
                 instance_type: str):
        """
        Network Mapping fabric specific settings.
        :param str instance_type: Gets the Instance type.
        """
        pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        """
        return pulumi.get(self, "instance_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkMappingPropertiesResponse(dict):
    """
    Network Mapping Properties.
    """
    def __init__(__self__, *,
                 fabric_specific_settings: Optional['outputs.NetworkMappingFabricSpecificSettingsResponse'] = None,
                 primary_fabric_friendly_name: Optional[str] = None,
                 primary_network_friendly_name: Optional[str] = None,
                 primary_network_id: Optional[str] = None,
                 recovery_fabric_arm_id: Optional[str] = None,
                 recovery_fabric_friendly_name: Optional[str] = None,
                 recovery_network_friendly_name: Optional[str] = None,
                 recovery_network_id: Optional[str] = None,
                 state: Optional[str] = None):
        """
        Network Mapping Properties.
        :param 'NetworkMappingFabricSpecificSettingsResponseArgs' fabric_specific_settings: The fabric specific settings.
        :param str primary_fabric_friendly_name: The primary fabric friendly name.
        :param str primary_network_friendly_name: The primary network friendly name.
        :param str primary_network_id: The primary network id for network mapping.
        :param str recovery_fabric_arm_id: The recovery fabric ARM id.
        :param str recovery_fabric_friendly_name: The recovery fabric friendly name.
        :param str recovery_network_friendly_name: The recovery network friendly name.
        :param str recovery_network_id: The recovery network id for network mapping.
        :param str state: The pairing state for network mapping.
        """
        if fabric_specific_settings is not None:
            pulumi.set(__self__, "fabric_specific_settings", fabric_specific_settings)
        if primary_fabric_friendly_name is not None:
            pulumi.set(__self__, "primary_fabric_friendly_name", primary_fabric_friendly_name)
        if primary_network_friendly_name is not None:
            pulumi.set(__self__, "primary_network_friendly_name", primary_network_friendly_name)
        if primary_network_id is not None:
            pulumi.set(__self__, "primary_network_id", primary_network_id)
        if recovery_fabric_arm_id is not None:
            pulumi.set(__self__, "recovery_fabric_arm_id", recovery_fabric_arm_id)
        if recovery_fabric_friendly_name is not None:
            pulumi.set(__self__, "recovery_fabric_friendly_name", recovery_fabric_friendly_name)
        if recovery_network_friendly_name is not None:
            pulumi.set(__self__, "recovery_network_friendly_name", recovery_network_friendly_name)
        if recovery_network_id is not None:
            pulumi.set(__self__, "recovery_network_id", recovery_network_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="fabricSpecificSettings")
    def fabric_specific_settings(self) -> Optional['outputs.NetworkMappingFabricSpecificSettingsResponse']:
        """
        The fabric specific settings.
        """
        return pulumi.get(self, "fabric_specific_settings")

    @property
    @pulumi.getter(name="primaryFabricFriendlyName")
    def primary_fabric_friendly_name(self) -> Optional[str]:
        """
        The primary fabric friendly name.
        """
        return pulumi.get(self, "primary_fabric_friendly_name")

    @property
    @pulumi.getter(name="primaryNetworkFriendlyName")
    def primary_network_friendly_name(self) -> Optional[str]:
        """
        The primary network friendly name.
        """
        return pulumi.get(self, "primary_network_friendly_name")

    @property
    @pulumi.getter(name="primaryNetworkId")
    def primary_network_id(self) -> Optional[str]:
        """
        The primary network id for network mapping.
        """
        return pulumi.get(self, "primary_network_id")

    @property
    @pulumi.getter(name="recoveryFabricArmId")
    def recovery_fabric_arm_id(self) -> Optional[str]:
        """
        The recovery fabric ARM id.
        """
        return pulumi.get(self, "recovery_fabric_arm_id")

    @property
    @pulumi.getter(name="recoveryFabricFriendlyName")
    def recovery_fabric_friendly_name(self) -> Optional[str]:
        """
        The recovery fabric friendly name.
        """
        return pulumi.get(self, "recovery_fabric_friendly_name")

    @property
    @pulumi.getter(name="recoveryNetworkFriendlyName")
    def recovery_network_friendly_name(self) -> Optional[str]:
        """
        The recovery network friendly name.
        """
        return pulumi.get(self, "recovery_network_friendly_name")

    @property
    @pulumi.getter(name="recoveryNetworkId")
    def recovery_network_id(self) -> Optional[str]:
        """
        The recovery network id for network mapping.
        """
        return pulumi.get(self, "recovery_network_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The pairing state for network mapping.
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyPropertiesResponse(dict):
    """
    Protection profile custom data details.
    """
    def __init__(__self__, *,
                 friendly_name: Optional[str] = None,
                 provider_specific_details: Optional['outputs.PolicyProviderSpecificDetailsResponse'] = None):
        """
        Protection profile custom data details.
        :param str friendly_name: The FriendlyName.
        :param 'PolicyProviderSpecificDetailsResponseArgs' provider_specific_details: The ReplicationChannelSetting.
        """
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if provider_specific_details is not None:
            pulumi.set(__self__, "provider_specific_details", provider_specific_details)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[str]:
        """
        The FriendlyName.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter(name="providerSpecificDetails")
    def provider_specific_details(self) -> Optional['outputs.PolicyProviderSpecificDetailsResponse']:
        """
        The ReplicationChannelSetting.
        """
        return pulumi.get(self, "provider_specific_details")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyProviderSpecificDetailsResponse(dict):
    """
    Base class for Provider specific details for policies.
    """
    def __init__(__self__, *,
                 instance_type: str):
        """
        Base class for Provider specific details for policies.
        :param str instance_type: Gets the class type. Overridden in derived classes.
        """
        pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the class type. Overridden in derived classes.
        """
        return pulumi.get(self, "instance_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProtectionContainerMappingPropertiesResponse(dict):
    """
    Protection container mapping properties.
    """
    def __init__(__self__, *,
                 health: Optional[str] = None,
                 health_error_details: Optional[List['outputs.HealthErrorResponse']] = None,
                 policy_friendly_name: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 provider_specific_details: Optional['outputs.ProtectionContainerMappingProviderSpecificDetailsResponse'] = None,
                 source_fabric_friendly_name: Optional[str] = None,
                 source_protection_container_friendly_name: Optional[str] = None,
                 state: Optional[str] = None,
                 target_fabric_friendly_name: Optional[str] = None,
                 target_protection_container_friendly_name: Optional[str] = None,
                 target_protection_container_id: Optional[str] = None):
        """
        Protection container mapping properties.
        :param str health: Health of pairing.
        :param List['HealthErrorResponseArgs'] health_error_details: Health error.
        :param str policy_friendly_name: Friendly name of replication policy.
        :param str policy_id: Policy ARM Id.
        :param 'ProtectionContainerMappingProviderSpecificDetailsResponseArgs' provider_specific_details: Provider specific provider details.
        :param str source_fabric_friendly_name: Friendly name of source fabric.
        :param str source_protection_container_friendly_name: Friendly name of source protection container.
        :param str state: Association Status
        :param str target_fabric_friendly_name: Friendly name of target fabric.
        :param str target_protection_container_friendly_name: Friendly name of paired container.
        :param str target_protection_container_id: Paired protection container ARM ID.
        """
        if health is not None:
            pulumi.set(__self__, "health", health)
        if health_error_details is not None:
            pulumi.set(__self__, "health_error_details", health_error_details)
        if policy_friendly_name is not None:
            pulumi.set(__self__, "policy_friendly_name", policy_friendly_name)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if provider_specific_details is not None:
            pulumi.set(__self__, "provider_specific_details", provider_specific_details)
        if source_fabric_friendly_name is not None:
            pulumi.set(__self__, "source_fabric_friendly_name", source_fabric_friendly_name)
        if source_protection_container_friendly_name is not None:
            pulumi.set(__self__, "source_protection_container_friendly_name", source_protection_container_friendly_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target_fabric_friendly_name is not None:
            pulumi.set(__self__, "target_fabric_friendly_name", target_fabric_friendly_name)
        if target_protection_container_friendly_name is not None:
            pulumi.set(__self__, "target_protection_container_friendly_name", target_protection_container_friendly_name)
        if target_protection_container_id is not None:
            pulumi.set(__self__, "target_protection_container_id", target_protection_container_id)

    @property
    @pulumi.getter
    def health(self) -> Optional[str]:
        """
        Health of pairing.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="healthErrorDetails")
    def health_error_details(self) -> Optional[List['outputs.HealthErrorResponse']]:
        """
        Health error.
        """
        return pulumi.get(self, "health_error_details")

    @property
    @pulumi.getter(name="policyFriendlyName")
    def policy_friendly_name(self) -> Optional[str]:
        """
        Friendly name of replication policy.
        """
        return pulumi.get(self, "policy_friendly_name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        """
        Policy ARM Id.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="providerSpecificDetails")
    def provider_specific_details(self) -> Optional['outputs.ProtectionContainerMappingProviderSpecificDetailsResponse']:
        """
        Provider specific provider details.
        """
        return pulumi.get(self, "provider_specific_details")

    @property
    @pulumi.getter(name="sourceFabricFriendlyName")
    def source_fabric_friendly_name(self) -> Optional[str]:
        """
        Friendly name of source fabric.
        """
        return pulumi.get(self, "source_fabric_friendly_name")

    @property
    @pulumi.getter(name="sourceProtectionContainerFriendlyName")
    def source_protection_container_friendly_name(self) -> Optional[str]:
        """
        Friendly name of source protection container.
        """
        return pulumi.get(self, "source_protection_container_friendly_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Association Status
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetFabricFriendlyName")
    def target_fabric_friendly_name(self) -> Optional[str]:
        """
        Friendly name of target fabric.
        """
        return pulumi.get(self, "target_fabric_friendly_name")

    @property
    @pulumi.getter(name="targetProtectionContainerFriendlyName")
    def target_protection_container_friendly_name(self) -> Optional[str]:
        """
        Friendly name of paired container.
        """
        return pulumi.get(self, "target_protection_container_friendly_name")

    @property
    @pulumi.getter(name="targetProtectionContainerId")
    def target_protection_container_id(self) -> Optional[str]:
        """
        Paired protection container ARM ID.
        """
        return pulumi.get(self, "target_protection_container_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProtectionContainerMappingProviderSpecificDetailsResponse(dict):
    """
    Container mapping provider specific details.
    """
    def __init__(__self__, *,
                 instance_type: str):
        """
        Container mapping provider specific details.
        :param str instance_type: Gets the class type. Overridden in derived classes.
        """
        pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the class type. Overridden in derived classes.
        """
        return pulumi.get(self, "instance_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RecoveryPlanActionDetailsResponse(dict):
    """
    Recovery plan action custom details.
    """
    def __init__(__self__, *,
                 instance_type: str):
        """
        Recovery plan action custom details.
        :param str instance_type: Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
        """
        pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
        """
        return pulumi.get(self, "instance_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RecoveryPlanActionResponse(dict):
    """
    Recovery plan action details.
    """
    def __init__(__self__, *,
                 action_name: str,
                 custom_details: 'outputs.RecoveryPlanActionDetailsResponse',
                 failover_directions: List[str],
                 failover_types: List[str]):
        """
        Recovery plan action details.
        :param str action_name: The action name.
        :param 'RecoveryPlanActionDetailsResponseArgs' custom_details: The custom details.
        :param List[str] failover_directions: The list of failover directions.
        :param List[str] failover_types: The list of failover types.
        """
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "custom_details", custom_details)
        pulumi.set(__self__, "failover_directions", failover_directions)
        pulumi.set(__self__, "failover_types", failover_types)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> str:
        """
        The action name.
        """
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="customDetails")
    def custom_details(self) -> 'outputs.RecoveryPlanActionDetailsResponse':
        """
        The custom details.
        """
        return pulumi.get(self, "custom_details")

    @property
    @pulumi.getter(name="failoverDirections")
    def failover_directions(self) -> List[str]:
        """
        The list of failover directions.
        """
        return pulumi.get(self, "failover_directions")

    @property
    @pulumi.getter(name="failoverTypes")
    def failover_types(self) -> List[str]:
        """
        The list of failover types.
        """
        return pulumi.get(self, "failover_types")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RecoveryPlanGroupResponse(dict):
    """
    Recovery plan group details.
    """
    def __init__(__self__, *,
                 group_type: str,
                 end_group_actions: Optional[List['outputs.RecoveryPlanActionResponse']] = None,
                 replication_protected_items: Optional[List['outputs.RecoveryPlanProtectedItemResponse']] = None,
                 start_group_actions: Optional[List['outputs.RecoveryPlanActionResponse']] = None):
        """
        Recovery plan group details.
        :param str group_type: The group type.
        :param List['RecoveryPlanActionResponseArgs'] end_group_actions: The end group actions.
        :param List['RecoveryPlanProtectedItemResponseArgs'] replication_protected_items: The list of protected items.
        :param List['RecoveryPlanActionResponseArgs'] start_group_actions: The start group actions.
        """
        pulumi.set(__self__, "group_type", group_type)
        if end_group_actions is not None:
            pulumi.set(__self__, "end_group_actions", end_group_actions)
        if replication_protected_items is not None:
            pulumi.set(__self__, "replication_protected_items", replication_protected_items)
        if start_group_actions is not None:
            pulumi.set(__self__, "start_group_actions", start_group_actions)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> str:
        """
        The group type.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter(name="endGroupActions")
    def end_group_actions(self) -> Optional[List['outputs.RecoveryPlanActionResponse']]:
        """
        The end group actions.
        """
        return pulumi.get(self, "end_group_actions")

    @property
    @pulumi.getter(name="replicationProtectedItems")
    def replication_protected_items(self) -> Optional[List['outputs.RecoveryPlanProtectedItemResponse']]:
        """
        The list of protected items.
        """
        return pulumi.get(self, "replication_protected_items")

    @property
    @pulumi.getter(name="startGroupActions")
    def start_group_actions(self) -> Optional[List['outputs.RecoveryPlanActionResponse']]:
        """
        The start group actions.
        """
        return pulumi.get(self, "start_group_actions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RecoveryPlanPropertiesResponse(dict):
    """
    Recovery plan custom details.
    """
    def __init__(__self__, *,
                 allowed_operations: Optional[List[str]] = None,
                 current_scenario: Optional['outputs.CurrentScenarioDetailsResponse'] = None,
                 current_scenario_status: Optional[str] = None,
                 current_scenario_status_description: Optional[str] = None,
                 failover_deployment_model: Optional[str] = None,
                 friendly_name: Optional[str] = None,
                 groups: Optional[List['outputs.RecoveryPlanGroupResponse']] = None,
                 last_planned_failover_time: Optional[str] = None,
                 last_test_failover_time: Optional[str] = None,
                 last_unplanned_failover_time: Optional[str] = None,
                 primary_fabric_friendly_name: Optional[str] = None,
                 primary_fabric_id: Optional[str] = None,
                 recovery_fabric_friendly_name: Optional[str] = None,
                 recovery_fabric_id: Optional[str] = None,
                 replication_providers: Optional[List[str]] = None):
        """
        Recovery plan custom details.
        :param List[str] allowed_operations: The list of allowed operations.
        :param 'CurrentScenarioDetailsResponseArgs' current_scenario: The current scenario details.
        :param str current_scenario_status: The recovery plan status.
        :param str current_scenario_status_description: The recovery plan status description.
        :param str failover_deployment_model: The failover deployment model.
        :param str friendly_name: The friendly name.
        :param List['RecoveryPlanGroupResponseArgs'] groups: The recovery plan groups.
        :param str last_planned_failover_time: The start time of the last planned failover.
        :param str last_test_failover_time: The start time of the last test failover.
        :param str last_unplanned_failover_time: The start time of the last unplanned failover.
        :param str primary_fabric_friendly_name: The primary fabric friendly name.
        :param str primary_fabric_id: The primary fabric Id.
        :param str recovery_fabric_friendly_name: The recovery fabric friendly name.
        :param str recovery_fabric_id: The recovery fabric Id.
        :param List[str] replication_providers: The list of replication providers.
        """
        if allowed_operations is not None:
            pulumi.set(__self__, "allowed_operations", allowed_operations)
        if current_scenario is not None:
            pulumi.set(__self__, "current_scenario", current_scenario)
        if current_scenario_status is not None:
            pulumi.set(__self__, "current_scenario_status", current_scenario_status)
        if current_scenario_status_description is not None:
            pulumi.set(__self__, "current_scenario_status_description", current_scenario_status_description)
        if failover_deployment_model is not None:
            pulumi.set(__self__, "failover_deployment_model", failover_deployment_model)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if last_planned_failover_time is not None:
            pulumi.set(__self__, "last_planned_failover_time", last_planned_failover_time)
        if last_test_failover_time is not None:
            pulumi.set(__self__, "last_test_failover_time", last_test_failover_time)
        if last_unplanned_failover_time is not None:
            pulumi.set(__self__, "last_unplanned_failover_time", last_unplanned_failover_time)
        if primary_fabric_friendly_name is not None:
            pulumi.set(__self__, "primary_fabric_friendly_name", primary_fabric_friendly_name)
        if primary_fabric_id is not None:
            pulumi.set(__self__, "primary_fabric_id", primary_fabric_id)
        if recovery_fabric_friendly_name is not None:
            pulumi.set(__self__, "recovery_fabric_friendly_name", recovery_fabric_friendly_name)
        if recovery_fabric_id is not None:
            pulumi.set(__self__, "recovery_fabric_id", recovery_fabric_id)
        if replication_providers is not None:
            pulumi.set(__self__, "replication_providers", replication_providers)

    @property
    @pulumi.getter(name="allowedOperations")
    def allowed_operations(self) -> Optional[List[str]]:
        """
        The list of allowed operations.
        """
        return pulumi.get(self, "allowed_operations")

    @property
    @pulumi.getter(name="currentScenario")
    def current_scenario(self) -> Optional['outputs.CurrentScenarioDetailsResponse']:
        """
        The current scenario details.
        """
        return pulumi.get(self, "current_scenario")

    @property
    @pulumi.getter(name="currentScenarioStatus")
    def current_scenario_status(self) -> Optional[str]:
        """
        The recovery plan status.
        """
        return pulumi.get(self, "current_scenario_status")

    @property
    @pulumi.getter(name="currentScenarioStatusDescription")
    def current_scenario_status_description(self) -> Optional[str]:
        """
        The recovery plan status description.
        """
        return pulumi.get(self, "current_scenario_status_description")

    @property
    @pulumi.getter(name="failoverDeploymentModel")
    def failover_deployment_model(self) -> Optional[str]:
        """
        The failover deployment model.
        """
        return pulumi.get(self, "failover_deployment_model")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[str]:
        """
        The friendly name.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def groups(self) -> Optional[List['outputs.RecoveryPlanGroupResponse']]:
        """
        The recovery plan groups.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="lastPlannedFailoverTime")
    def last_planned_failover_time(self) -> Optional[str]:
        """
        The start time of the last planned failover.
        """
        return pulumi.get(self, "last_planned_failover_time")

    @property
    @pulumi.getter(name="lastTestFailoverTime")
    def last_test_failover_time(self) -> Optional[str]:
        """
        The start time of the last test failover.
        """
        return pulumi.get(self, "last_test_failover_time")

    @property
    @pulumi.getter(name="lastUnplannedFailoverTime")
    def last_unplanned_failover_time(self) -> Optional[str]:
        """
        The start time of the last unplanned failover.
        """
        return pulumi.get(self, "last_unplanned_failover_time")

    @property
    @pulumi.getter(name="primaryFabricFriendlyName")
    def primary_fabric_friendly_name(self) -> Optional[str]:
        """
        The primary fabric friendly name.
        """
        return pulumi.get(self, "primary_fabric_friendly_name")

    @property
    @pulumi.getter(name="primaryFabricId")
    def primary_fabric_id(self) -> Optional[str]:
        """
        The primary fabric Id.
        """
        return pulumi.get(self, "primary_fabric_id")

    @property
    @pulumi.getter(name="recoveryFabricFriendlyName")
    def recovery_fabric_friendly_name(self) -> Optional[str]:
        """
        The recovery fabric friendly name.
        """
        return pulumi.get(self, "recovery_fabric_friendly_name")

    @property
    @pulumi.getter(name="recoveryFabricId")
    def recovery_fabric_id(self) -> Optional[str]:
        """
        The recovery fabric Id.
        """
        return pulumi.get(self, "recovery_fabric_id")

    @property
    @pulumi.getter(name="replicationProviders")
    def replication_providers(self) -> Optional[List[str]]:
        """
        The list of replication providers.
        """
        return pulumi.get(self, "replication_providers")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RecoveryPlanProtectedItemResponse(dict):
    """
    Recovery plan protected item.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 virtual_machine_id: Optional[str] = None):
        """
        Recovery plan protected item.
        :param str id: The ARM Id of the recovery plan protected item.
        :param str virtual_machine_id: The virtual machine Id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if virtual_machine_id is not None:
            pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ARM Id of the recovery plan protected item.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[str]:
        """
        The virtual machine Id.
        """
        return pulumi.get(self, "virtual_machine_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ReplicationProtectedItemPropertiesResponse(dict):
    """
    Replication protected item custom data details.
    """
    def __init__(__self__, *,
                 active_location: Optional[str] = None,
                 allowed_operations: Optional[List[str]] = None,
                 current_scenario: Optional['outputs.CurrentScenarioDetailsResponse'] = None,
                 failover_health: Optional[str] = None,
                 failover_health_errors: Optional[List['outputs.HealthErrorResponse']] = None,
                 failover_recovery_point_id: Optional[str] = None,
                 friendly_name: Optional[str] = None,
                 last_successful_failover_time: Optional[str] = None,
                 last_successful_test_failover_time: Optional[str] = None,
                 policy_friendly_name: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 primary_fabric_friendly_name: Optional[str] = None,
                 primary_protection_container_friendly_name: Optional[str] = None,
                 protectable_item_id: Optional[str] = None,
                 protected_item_type: Optional[str] = None,
                 protection_state: Optional[str] = None,
                 protection_state_description: Optional[str] = None,
                 provider_specific_details: Optional['outputs.ReplicationProviderSpecificSettingsResponse'] = None,
                 recovery_container_id: Optional[str] = None,
                 recovery_fabric_friendly_name: Optional[str] = None,
                 recovery_fabric_id: Optional[str] = None,
                 recovery_protection_container_friendly_name: Optional[str] = None,
                 recovery_services_provider_id: Optional[str] = None,
                 replication_health: Optional[str] = None,
                 replication_health_errors: Optional[List['outputs.HealthErrorResponse']] = None,
                 test_failover_state: Optional[str] = None,
                 test_failover_state_description: Optional[str] = None):
        """
        Replication protected item custom data details.
        :param str active_location: The Current active location of the PE.
        :param List[str] allowed_operations: The allowed operations on the Replication protected item.
        :param 'CurrentScenarioDetailsResponseArgs' current_scenario: The current scenario.
        :param str failover_health: The consolidated failover health for the VM.
        :param List['HealthErrorResponseArgs'] failover_health_errors: List of failover health errors.
        :param str failover_recovery_point_id: The recovery point ARM Id to which the Vm was failed over.
        :param str friendly_name: The name.
        :param str last_successful_failover_time: The Last successful failover time.
        :param str last_successful_test_failover_time: The Last successful test failover time.
        :param str policy_friendly_name: The name of Policy governing this PE.
        :param str policy_id: The ID of Policy governing this PE.
        :param str primary_fabric_friendly_name: The friendly name of the primary fabric.
        :param str primary_protection_container_friendly_name: The name of primary protection container friendly name.
        :param str protectable_item_id: The protected item ARM Id.
        :param str protected_item_type: The type of protected item type.
        :param str protection_state: The protection status.
        :param str protection_state_description: The protection state description.
        :param 'ReplicationProviderSpecificSettingsResponseArgs' provider_specific_details: The Replication provider custom settings.
        :param str recovery_container_id: The recovery container Id.
        :param str recovery_fabric_friendly_name: The friendly name of recovery fabric.
        :param str recovery_fabric_id: The Arm Id of recovery fabric.
        :param str recovery_protection_container_friendly_name: The name of recovery container friendly name.
        :param str recovery_services_provider_id: The recovery provider ARM Id.
        :param str replication_health: The consolidated protection health for the VM taking any issues with SRS as well as all the replication units associated with the VM's replication group into account. This is a string representation of the ProtectionHealth enumeration.
        :param List['HealthErrorResponseArgs'] replication_health_errors: List of replication health errors.
        :param str test_failover_state: The Test failover state.
        :param str test_failover_state_description: The Test failover state description.
        """
        if active_location is not None:
            pulumi.set(__self__, "active_location", active_location)
        if allowed_operations is not None:
            pulumi.set(__self__, "allowed_operations", allowed_operations)
        if current_scenario is not None:
            pulumi.set(__self__, "current_scenario", current_scenario)
        if failover_health is not None:
            pulumi.set(__self__, "failover_health", failover_health)
        if failover_health_errors is not None:
            pulumi.set(__self__, "failover_health_errors", failover_health_errors)
        if failover_recovery_point_id is not None:
            pulumi.set(__self__, "failover_recovery_point_id", failover_recovery_point_id)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if last_successful_failover_time is not None:
            pulumi.set(__self__, "last_successful_failover_time", last_successful_failover_time)
        if last_successful_test_failover_time is not None:
            pulumi.set(__self__, "last_successful_test_failover_time", last_successful_test_failover_time)
        if policy_friendly_name is not None:
            pulumi.set(__self__, "policy_friendly_name", policy_friendly_name)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if primary_fabric_friendly_name is not None:
            pulumi.set(__self__, "primary_fabric_friendly_name", primary_fabric_friendly_name)
        if primary_protection_container_friendly_name is not None:
            pulumi.set(__self__, "primary_protection_container_friendly_name", primary_protection_container_friendly_name)
        if protectable_item_id is not None:
            pulumi.set(__self__, "protectable_item_id", protectable_item_id)
        if protected_item_type is not None:
            pulumi.set(__self__, "protected_item_type", protected_item_type)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if protection_state_description is not None:
            pulumi.set(__self__, "protection_state_description", protection_state_description)
        if provider_specific_details is not None:
            pulumi.set(__self__, "provider_specific_details", provider_specific_details)
        if recovery_container_id is not None:
            pulumi.set(__self__, "recovery_container_id", recovery_container_id)
        if recovery_fabric_friendly_name is not None:
            pulumi.set(__self__, "recovery_fabric_friendly_name", recovery_fabric_friendly_name)
        if recovery_fabric_id is not None:
            pulumi.set(__self__, "recovery_fabric_id", recovery_fabric_id)
        if recovery_protection_container_friendly_name is not None:
            pulumi.set(__self__, "recovery_protection_container_friendly_name", recovery_protection_container_friendly_name)
        if recovery_services_provider_id is not None:
            pulumi.set(__self__, "recovery_services_provider_id", recovery_services_provider_id)
        if replication_health is not None:
            pulumi.set(__self__, "replication_health", replication_health)
        if replication_health_errors is not None:
            pulumi.set(__self__, "replication_health_errors", replication_health_errors)
        if test_failover_state is not None:
            pulumi.set(__self__, "test_failover_state", test_failover_state)
        if test_failover_state_description is not None:
            pulumi.set(__self__, "test_failover_state_description", test_failover_state_description)

    @property
    @pulumi.getter(name="activeLocation")
    def active_location(self) -> Optional[str]:
        """
        The Current active location of the PE.
        """
        return pulumi.get(self, "active_location")

    @property
    @pulumi.getter(name="allowedOperations")
    def allowed_operations(self) -> Optional[List[str]]:
        """
        The allowed operations on the Replication protected item.
        """
        return pulumi.get(self, "allowed_operations")

    @property
    @pulumi.getter(name="currentScenario")
    def current_scenario(self) -> Optional['outputs.CurrentScenarioDetailsResponse']:
        """
        The current scenario.
        """
        return pulumi.get(self, "current_scenario")

    @property
    @pulumi.getter(name="failoverHealth")
    def failover_health(self) -> Optional[str]:
        """
        The consolidated failover health for the VM.
        """
        return pulumi.get(self, "failover_health")

    @property
    @pulumi.getter(name="failoverHealthErrors")
    def failover_health_errors(self) -> Optional[List['outputs.HealthErrorResponse']]:
        """
        List of failover health errors.
        """
        return pulumi.get(self, "failover_health_errors")

    @property
    @pulumi.getter(name="failoverRecoveryPointId")
    def failover_recovery_point_id(self) -> Optional[str]:
        """
        The recovery point ARM Id to which the Vm was failed over.
        """
        return pulumi.get(self, "failover_recovery_point_id")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[str]:
        """
        The name.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter(name="lastSuccessfulFailoverTime")
    def last_successful_failover_time(self) -> Optional[str]:
        """
        The Last successful failover time.
        """
        return pulumi.get(self, "last_successful_failover_time")

    @property
    @pulumi.getter(name="lastSuccessfulTestFailoverTime")
    def last_successful_test_failover_time(self) -> Optional[str]:
        """
        The Last successful test failover time.
        """
        return pulumi.get(self, "last_successful_test_failover_time")

    @property
    @pulumi.getter(name="policyFriendlyName")
    def policy_friendly_name(self) -> Optional[str]:
        """
        The name of Policy governing this PE.
        """
        return pulumi.get(self, "policy_friendly_name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        """
        The ID of Policy governing this PE.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="primaryFabricFriendlyName")
    def primary_fabric_friendly_name(self) -> Optional[str]:
        """
        The friendly name of the primary fabric.
        """
        return pulumi.get(self, "primary_fabric_friendly_name")

    @property
    @pulumi.getter(name="primaryProtectionContainerFriendlyName")
    def primary_protection_container_friendly_name(self) -> Optional[str]:
        """
        The name of primary protection container friendly name.
        """
        return pulumi.get(self, "primary_protection_container_friendly_name")

    @property
    @pulumi.getter(name="protectableItemId")
    def protectable_item_id(self) -> Optional[str]:
        """
        The protected item ARM Id.
        """
        return pulumi.get(self, "protectable_item_id")

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> Optional[str]:
        """
        The type of protected item type.
        """
        return pulumi.get(self, "protected_item_type")

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[str]:
        """
        The protection status.
        """
        return pulumi.get(self, "protection_state")

    @property
    @pulumi.getter(name="protectionStateDescription")
    def protection_state_description(self) -> Optional[str]:
        """
        The protection state description.
        """
        return pulumi.get(self, "protection_state_description")

    @property
    @pulumi.getter(name="providerSpecificDetails")
    def provider_specific_details(self) -> Optional['outputs.ReplicationProviderSpecificSettingsResponse']:
        """
        The Replication provider custom settings.
        """
        return pulumi.get(self, "provider_specific_details")

    @property
    @pulumi.getter(name="recoveryContainerId")
    def recovery_container_id(self) -> Optional[str]:
        """
        The recovery container Id.
        """
        return pulumi.get(self, "recovery_container_id")

    @property
    @pulumi.getter(name="recoveryFabricFriendlyName")
    def recovery_fabric_friendly_name(self) -> Optional[str]:
        """
        The friendly name of recovery fabric.
        """
        return pulumi.get(self, "recovery_fabric_friendly_name")

    @property
    @pulumi.getter(name="recoveryFabricId")
    def recovery_fabric_id(self) -> Optional[str]:
        """
        The Arm Id of recovery fabric.
        """
        return pulumi.get(self, "recovery_fabric_id")

    @property
    @pulumi.getter(name="recoveryProtectionContainerFriendlyName")
    def recovery_protection_container_friendly_name(self) -> Optional[str]:
        """
        The name of recovery container friendly name.
        """
        return pulumi.get(self, "recovery_protection_container_friendly_name")

    @property
    @pulumi.getter(name="recoveryServicesProviderId")
    def recovery_services_provider_id(self) -> Optional[str]:
        """
        The recovery provider ARM Id.
        """
        return pulumi.get(self, "recovery_services_provider_id")

    @property
    @pulumi.getter(name="replicationHealth")
    def replication_health(self) -> Optional[str]:
        """
        The consolidated protection health for the VM taking any issues with SRS as well as all the replication units associated with the VM's replication group into account. This is a string representation of the ProtectionHealth enumeration.
        """
        return pulumi.get(self, "replication_health")

    @property
    @pulumi.getter(name="replicationHealthErrors")
    def replication_health_errors(self) -> Optional[List['outputs.HealthErrorResponse']]:
        """
        List of replication health errors.
        """
        return pulumi.get(self, "replication_health_errors")

    @property
    @pulumi.getter(name="testFailoverState")
    def test_failover_state(self) -> Optional[str]:
        """
        The Test failover state.
        """
        return pulumi.get(self, "test_failover_state")

    @property
    @pulumi.getter(name="testFailoverStateDescription")
    def test_failover_state_description(self) -> Optional[str]:
        """
        The Test failover state description.
        """
        return pulumi.get(self, "test_failover_state_description")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ReplicationProviderSpecificSettingsResponse(dict):
    """
    Replication provider specific settings.
    """
    def __init__(__self__, *,
                 instance_type: str):
        """
        Replication provider specific settings.
        :param str instance_type: Gets the Instance type.
        """
        pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        """
        return pulumi.get(self, "instance_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StorageClassificationMappingPropertiesResponse(dict):
    """
    Storage mapping properties.
    """
    def __init__(__self__, *,
                 target_storage_classification_id: Optional[str] = None):
        """
        Storage mapping properties.
        :param str target_storage_classification_id: Target storage object Id.
        """
        if target_storage_classification_id is not None:
            pulumi.set(__self__, "target_storage_classification_id", target_storage_classification_id)

    @property
    @pulumi.getter(name="targetStorageClassificationId")
    def target_storage_classification_id(self) -> Optional[str]:
        """
        Target storage object Id.
        """
        return pulumi.get(self, "target_storage_classification_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VCenterPropertiesResponse(dict):
    """
    vCenter properties.
    """
    def __init__(__self__, *,
                 discovery_status: Optional[str] = None,
                 fabric_arm_resource_name: Optional[str] = None,
                 friendly_name: Optional[str] = None,
                 infrastructure_id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 last_heartbeat: Optional[str] = None,
                 port: Optional[str] = None,
                 process_server_id: Optional[str] = None,
                 run_as_account_id: Optional[str] = None):
        """
        vCenter properties.
        :param str discovery_status: The VCenter discovery status.
        :param str fabric_arm_resource_name: The ARM resource name of the fabric containing this VCenter.
        :param str friendly_name: Friendly name of the vCenter.
        :param str infrastructure_id: The infrastructure Id of vCenter.
        :param str internal_id: VCenter internal ID.
        :param str ip_address: The IP address of the vCenter.
        :param str last_heartbeat: The time when the last heartbeat was received by vCenter.
        :param str port: The port number for discovery.
        :param str process_server_id: The process server Id.
        :param str run_as_account_id: The account Id which has privileges to discover the vCenter.
        """
        if discovery_status is not None:
            pulumi.set(__self__, "discovery_status", discovery_status)
        if fabric_arm_resource_name is not None:
            pulumi.set(__self__, "fabric_arm_resource_name", fabric_arm_resource_name)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if infrastructure_id is not None:
            pulumi.set(__self__, "infrastructure_id", infrastructure_id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if last_heartbeat is not None:
            pulumi.set(__self__, "last_heartbeat", last_heartbeat)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if process_server_id is not None:
            pulumi.set(__self__, "process_server_id", process_server_id)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)

    @property
    @pulumi.getter(name="discoveryStatus")
    def discovery_status(self) -> Optional[str]:
        """
        The VCenter discovery status.
        """
        return pulumi.get(self, "discovery_status")

    @property
    @pulumi.getter(name="fabricArmResourceName")
    def fabric_arm_resource_name(self) -> Optional[str]:
        """
        The ARM resource name of the fabric containing this VCenter.
        """
        return pulumi.get(self, "fabric_arm_resource_name")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[str]:
        """
        Friendly name of the vCenter.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter(name="infrastructureId")
    def infrastructure_id(self) -> Optional[str]:
        """
        The infrastructure Id of vCenter.
        """
        return pulumi.get(self, "infrastructure_id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        """
        VCenter internal ID.
        """
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        The IP address of the vCenter.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="lastHeartbeat")
    def last_heartbeat(self) -> Optional[str]:
        """
        The time when the last heartbeat was received by vCenter.
        """
        return pulumi.get(self, "last_heartbeat")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        The port number for discovery.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="processServerId")
    def process_server_id(self) -> Optional[str]:
        """
        The process server Id.
        """
        return pulumi.get(self, "process_server_id")

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[str]:
        """
        The account Id which has privileges to discover the vCenter.
        """
        return pulumi.get(self, "run_as_account_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


