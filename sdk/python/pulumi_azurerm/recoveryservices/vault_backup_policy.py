# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class VaultBackupPolicy(pulumi.CustomResource):
    e_tag: pulumi.Output[str]
    """
    Optional ETag.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name associated with the resource.
    """
    properties: pulumi.Output[dict]
    """
    The base class for a backup policy. Workload-specific backup policies are derived from this class.
      * `backup_management_type` (`str`) - This property is used as the discriminator for deciding the specific types in the polymorphic chain of types.
      * `protected_items_count` (`float`) - The number of items associated with this policy.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
    """
    def __init__(__self__, resource_name, opts=None, e_tag=None, id=None, location=None, name=None, policy_name=None, properties=None, resource_group_name=None, tags=None, type=None, vault_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The base class for backup policy. Workload-specific backup policies are derived from this class.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] e_tag: Optional ETag.
        :param pulumi.Input[str] id: Resource ID represents the complete path to the resource.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: Resource name associated with the resource.
        :param pulumi.Input[str] policy_name: The backup policy to be created.
        :param pulumi.Input[dict] properties: The base class for a backup policy. Workload-specific backup policies are derived from this class.
        :param pulumi.Input[str] resource_group_name: The name of the resource group associated with the Recovery Services vault.
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[str] type: Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
        :param pulumi.Input[str] vault_name: The name of the Recovery Services vault.

        The **properties** object supports the following:

          * `backup_management_type` (`pulumi.Input[str]`) - This property is used as the discriminator for deciding the specific types in the polymorphic chain of types.
          * `protected_items_count` (`pulumi.Input[float]`) - The number of items associated with this policy.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['e_tag'] = e_tag
            __props__['id'] = id
            __props__['location'] = location
            __props__['name'] = name
            if policy_name is None:
                raise TypeError("Missing required property 'policy_name'")
            __props__['policy_name'] = policy_name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = type
            if vault_name is None:
                raise TypeError("Missing required property 'vault_name'")
            __props__['vault_name'] = vault_name
        super(VaultBackupPolicy, __self__).__init__(
            'azurerm:recoveryservices:VaultBackupPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, e_tag=None, location=None, name=None, properties=None, tags=None, type=None):
        """
        Get an existing VaultBackupPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] e_tag: Optional ETag.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: Resource name associated with the resource.
        :param pulumi.Input[dict] properties: The base class for a backup policy. Workload-specific backup policies are derived from this class.
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[str] type: Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...

        The **properties** object supports the following:

          * `backup_management_type` (`pulumi.Input[str]`) - This property is used as the discriminator for deciding the specific types in the polymorphic chain of types.
          * `protected_items_count` (`pulumi.Input[float]`) - The number of items associated with this policy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["e_tag"] = e_tag
        __props__["location"] = location
        __props__["name"] = name
        __props__["properties"] = properties
        __props__["tags"] = tags
        __props__["type"] = type
        return VaultBackupPolicy(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
