# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables

__all__ = [
    'AddRecoveryServicesProviderInputPropertiesArgs',
    'AddVCenterRequestPropertiesArgs',
    'CreateNetworkMappingInputPropertiesArgs',
    'CreatePolicyInputPropertiesArgs',
    'CreateProtectionContainerMappingInputPropertiesArgs',
    'CreateRecoveryPlanInputPropertiesArgs',
    'EnableMigrationInputPropertiesArgs',
    'EnableMigrationProviderSpecificInputArgs',
    'EnableProtectionInputPropertiesArgs',
    'EnableProtectionProviderSpecificInputArgs',
    'FabricCreationInputPropertiesArgs',
    'FabricSpecificCreateNetworkMappingInputArgs',
    'FabricSpecificCreationInputArgs',
    'IdentityDataArgs',
    'IdentityProviderInputArgs',
    'PolicyProviderSpecificInputArgs',
    'PrivateEndpointArgs',
    'PrivateEndpointConnectionArgs',
    'PrivateLinkServiceConnectionStateArgs',
    'ProtectedItemArgs',
    'ProtectionContainerArgs',
    'ProtectionIntentArgs',
    'ProtectionPolicyArgs',
    'RecoveryPlanActionArgs',
    'RecoveryPlanGroupArgs',
    'RecoveryPlanProtectedItemArgs',
    'RecoveryPlanProviderSpecificInputArgs',
    'ReplicationProviderSpecificContainerMappingInputArgs',
    'SkuArgs',
    'StorageMappingInputPropertiesArgs',
]

@pulumi.input_type
class AddRecoveryServicesProviderInputPropertiesArgs:
    def __init__(__self__, *,
                 authentication_identity_input: pulumi.Input['IdentityProviderInputArgs'],
                 machine_name: pulumi.Input[str],
                 resource_access_identity_input: pulumi.Input['IdentityProviderInputArgs']):
        """
        The properties of an add provider request.
        :param pulumi.Input['IdentityProviderInputArgs'] authentication_identity_input: The identity provider input for DRA authentication.
        :param pulumi.Input[str] machine_name: The name of the machine where the provider is getting added.
        :param pulumi.Input['IdentityProviderInputArgs'] resource_access_identity_input: The identity provider input for resource access.
        """
        pulumi.set(__self__, "authentication_identity_input", authentication_identity_input)
        pulumi.set(__self__, "machine_name", machine_name)
        pulumi.set(__self__, "resource_access_identity_input", resource_access_identity_input)

    @property
    @pulumi.getter(name="authenticationIdentityInput")
    def authentication_identity_input(self) -> pulumi.Input['IdentityProviderInputArgs']:
        """
        The identity provider input for DRA authentication.
        """
        return pulumi.get(self, "authentication_identity_input")

    @authentication_identity_input.setter
    def authentication_identity_input(self, value: pulumi.Input['IdentityProviderInputArgs']):
        pulumi.set(self, "authentication_identity_input", value)

    @property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> pulumi.Input[str]:
        """
        The name of the machine where the provider is getting added.
        """
        return pulumi.get(self, "machine_name")

    @machine_name.setter
    def machine_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_name", value)

    @property
    @pulumi.getter(name="resourceAccessIdentityInput")
    def resource_access_identity_input(self) -> pulumi.Input['IdentityProviderInputArgs']:
        """
        The identity provider input for resource access.
        """
        return pulumi.get(self, "resource_access_identity_input")

    @resource_access_identity_input.setter
    def resource_access_identity_input(self, value: pulumi.Input['IdentityProviderInputArgs']):
        pulumi.set(self, "resource_access_identity_input", value)


@pulumi.input_type
class AddVCenterRequestPropertiesArgs:
    def __init__(__self__, *,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 process_server_id: Optional[pulumi.Input[str]] = None,
                 run_as_account_id: Optional[pulumi.Input[str]] = None):
        """
        The properties of an add vCenter request.
        :param pulumi.Input[str] friendly_name: The friendly name of the vCenter.
        :param pulumi.Input[str] ip_address: The IP address of the vCenter to be discovered.
        :param pulumi.Input[str] port: The port number for discovery.
        :param pulumi.Input[str] process_server_id: The process server Id from where the discovery is orchestrated.
        :param pulumi.Input[str] run_as_account_id: The account Id which has privileges to discover the vCenter.
        """
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if process_server_id is not None:
            pulumi.set(__self__, "process_server_id", process_server_id)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of the vCenter.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the vCenter to be discovered.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        The port number for discovery.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="processServerId")
    def process_server_id(self) -> Optional[pulumi.Input[str]]:
        """
        The process server Id from where the discovery is orchestrated.
        """
        return pulumi.get(self, "process_server_id")

    @process_server_id.setter
    def process_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_server_id", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account Id which has privileges to discover the vCenter.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_account_id", value)


@pulumi.input_type
class CreateNetworkMappingInputPropertiesArgs:
    def __init__(__self__, *,
                 fabric_specific_details: Optional[pulumi.Input['FabricSpecificCreateNetworkMappingInputArgs']] = None,
                 recovery_fabric_name: Optional[pulumi.Input[str]] = None,
                 recovery_network_id: Optional[pulumi.Input[str]] = None):
        """
        Common input details for network mapping operation.
        :param pulumi.Input['FabricSpecificCreateNetworkMappingInputArgs'] fabric_specific_details: Fabric specific input properties.
        :param pulumi.Input[str] recovery_fabric_name: Recovery fabric Name.
        :param pulumi.Input[str] recovery_network_id: Recovery network Id.
        """
        if fabric_specific_details is not None:
            pulumi.set(__self__, "fabric_specific_details", fabric_specific_details)
        if recovery_fabric_name is not None:
            pulumi.set(__self__, "recovery_fabric_name", recovery_fabric_name)
        if recovery_network_id is not None:
            pulumi.set(__self__, "recovery_network_id", recovery_network_id)

    @property
    @pulumi.getter(name="fabricSpecificDetails")
    def fabric_specific_details(self) -> Optional[pulumi.Input['FabricSpecificCreateNetworkMappingInputArgs']]:
        """
        Fabric specific input properties.
        """
        return pulumi.get(self, "fabric_specific_details")

    @fabric_specific_details.setter
    def fabric_specific_details(self, value: Optional[pulumi.Input['FabricSpecificCreateNetworkMappingInputArgs']]):
        pulumi.set(self, "fabric_specific_details", value)

    @property
    @pulumi.getter(name="recoveryFabricName")
    def recovery_fabric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery fabric Name.
        """
        return pulumi.get(self, "recovery_fabric_name")

    @recovery_fabric_name.setter
    def recovery_fabric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_fabric_name", value)

    @property
    @pulumi.getter(name="recoveryNetworkId")
    def recovery_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery network Id.
        """
        return pulumi.get(self, "recovery_network_id")

    @recovery_network_id.setter
    def recovery_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_network_id", value)


@pulumi.input_type
class CreatePolicyInputPropertiesArgs:
    def __init__(__self__, *,
                 provider_specific_input: Optional[pulumi.Input['PolicyProviderSpecificInputArgs']] = None):
        """
        Policy creation properties.
        :param pulumi.Input['PolicyProviderSpecificInputArgs'] provider_specific_input: The ReplicationProviderSettings.
        """
        if provider_specific_input is not None:
            pulumi.set(__self__, "provider_specific_input", provider_specific_input)

    @property
    @pulumi.getter(name="providerSpecificInput")
    def provider_specific_input(self) -> Optional[pulumi.Input['PolicyProviderSpecificInputArgs']]:
        """
        The ReplicationProviderSettings.
        """
        return pulumi.get(self, "provider_specific_input")

    @provider_specific_input.setter
    def provider_specific_input(self, value: Optional[pulumi.Input['PolicyProviderSpecificInputArgs']]):
        pulumi.set(self, "provider_specific_input", value)


@pulumi.input_type
class CreateProtectionContainerMappingInputPropertiesArgs:
    def __init__(__self__, *,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 provider_specific_input: Optional[pulumi.Input['ReplicationProviderSpecificContainerMappingInputArgs']] = None,
                 target_protection_container_id: Optional[pulumi.Input[str]] = None):
        """
        Configure pairing input properties.
        :param pulumi.Input[str] policy_id: Applicable policy.
        :param pulumi.Input['ReplicationProviderSpecificContainerMappingInputArgs'] provider_specific_input: Provider specific input for pairing.
        :param pulumi.Input[str] target_protection_container_id: The target unique protection container name.
        """
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if provider_specific_input is not None:
            pulumi.set(__self__, "provider_specific_input", provider_specific_input)
        if target_protection_container_id is not None:
            pulumi.set(__self__, "target_protection_container_id", target_protection_container_id)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Applicable policy.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="providerSpecificInput")
    def provider_specific_input(self) -> Optional[pulumi.Input['ReplicationProviderSpecificContainerMappingInputArgs']]:
        """
        Provider specific input for pairing.
        """
        return pulumi.get(self, "provider_specific_input")

    @provider_specific_input.setter
    def provider_specific_input(self, value: Optional[pulumi.Input['ReplicationProviderSpecificContainerMappingInputArgs']]):
        pulumi.set(self, "provider_specific_input", value)

    @property
    @pulumi.getter(name="targetProtectionContainerId")
    def target_protection_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target unique protection container name.
        """
        return pulumi.get(self, "target_protection_container_id")

    @target_protection_container_id.setter
    def target_protection_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_protection_container_id", value)


@pulumi.input_type
class CreateRecoveryPlanInputPropertiesArgs:
    def __init__(__self__, *,
                 groups: pulumi.Input[List[pulumi.Input['RecoveryPlanGroupArgs']]],
                 primary_fabric_id: pulumi.Input[str],
                 recovery_fabric_id: pulumi.Input[str],
                 failover_deployment_model: Optional[pulumi.Input[str]] = None,
                 provider_specific_input: Optional[pulumi.Input[List[pulumi.Input['RecoveryPlanProviderSpecificInputArgs']]]] = None):
        """
        Recovery plan creation properties.
        :param pulumi.Input[List[pulumi.Input['RecoveryPlanGroupArgs']]] groups: The recovery plan groups.
        :param pulumi.Input[str] primary_fabric_id: The primary fabric Id.
        :param pulumi.Input[str] recovery_fabric_id: The recovery fabric Id.
        :param pulumi.Input[str] failover_deployment_model: The failover deployment model.
        :param pulumi.Input[List[pulumi.Input['RecoveryPlanProviderSpecificInputArgs']]] provider_specific_input: The provider specific input.
        """
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "primary_fabric_id", primary_fabric_id)
        pulumi.set(__self__, "recovery_fabric_id", recovery_fabric_id)
        if failover_deployment_model is not None:
            pulumi.set(__self__, "failover_deployment_model", failover_deployment_model)
        if provider_specific_input is not None:
            pulumi.set(__self__, "provider_specific_input", provider_specific_input)

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Input[List[pulumi.Input['RecoveryPlanGroupArgs']]]:
        """
        The recovery plan groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: pulumi.Input[List[pulumi.Input['RecoveryPlanGroupArgs']]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="primaryFabricId")
    def primary_fabric_id(self) -> pulumi.Input[str]:
        """
        The primary fabric Id.
        """
        return pulumi.get(self, "primary_fabric_id")

    @primary_fabric_id.setter
    def primary_fabric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_fabric_id", value)

    @property
    @pulumi.getter(name="recoveryFabricId")
    def recovery_fabric_id(self) -> pulumi.Input[str]:
        """
        The recovery fabric Id.
        """
        return pulumi.get(self, "recovery_fabric_id")

    @recovery_fabric_id.setter
    def recovery_fabric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "recovery_fabric_id", value)

    @property
    @pulumi.getter(name="failoverDeploymentModel")
    def failover_deployment_model(self) -> Optional[pulumi.Input[str]]:
        """
        The failover deployment model.
        """
        return pulumi.get(self, "failover_deployment_model")

    @failover_deployment_model.setter
    def failover_deployment_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failover_deployment_model", value)

    @property
    @pulumi.getter(name="providerSpecificInput")
    def provider_specific_input(self) -> Optional[pulumi.Input[List[pulumi.Input['RecoveryPlanProviderSpecificInputArgs']]]]:
        """
        The provider specific input.
        """
        return pulumi.get(self, "provider_specific_input")

    @provider_specific_input.setter
    def provider_specific_input(self, value: Optional[pulumi.Input[List[pulumi.Input['RecoveryPlanProviderSpecificInputArgs']]]]):
        pulumi.set(self, "provider_specific_input", value)


@pulumi.input_type
class EnableMigrationInputPropertiesArgs:
    def __init__(__self__, *,
                 policy_id: pulumi.Input[str],
                 provider_specific_details: pulumi.Input['EnableMigrationProviderSpecificInputArgs']):
        """
        Enable migration input properties.
        :param pulumi.Input[str] policy_id: The policy Id.
        :param pulumi.Input['EnableMigrationProviderSpecificInputArgs'] provider_specific_details: The provider specific details.
        """
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "provider_specific_details", provider_specific_details)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[str]:
        """
        The policy Id.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="providerSpecificDetails")
    def provider_specific_details(self) -> pulumi.Input['EnableMigrationProviderSpecificInputArgs']:
        """
        The provider specific details.
        """
        return pulumi.get(self, "provider_specific_details")

    @provider_specific_details.setter
    def provider_specific_details(self, value: pulumi.Input['EnableMigrationProviderSpecificInputArgs']):
        pulumi.set(self, "provider_specific_details", value)


@pulumi.input_type
class EnableMigrationProviderSpecificInputArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str]):
        """
        Enable migration provider specific input.
        :param pulumi.Input[str] instance_type: The class type.
        """
        pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The class type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class EnableProtectionInputPropertiesArgs:
    def __init__(__self__, *,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 protectable_item_id: Optional[pulumi.Input[str]] = None,
                 provider_specific_details: Optional[pulumi.Input['EnableProtectionProviderSpecificInputArgs']] = None):
        """
        Enable protection input properties.
        :param pulumi.Input[str] policy_id: The Policy Id.
        :param pulumi.Input[str] protectable_item_id: The protectable item Id.
        :param pulumi.Input['EnableProtectionProviderSpecificInputArgs'] provider_specific_details: The ReplicationProviderInput. For HyperVReplicaAzure provider, it will be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For HyperVReplicaAzure provider, it can be null.
        """
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protectable_item_id is not None:
            pulumi.set(__self__, "protectable_item_id", protectable_item_id)
        if provider_specific_details is not None:
            pulumi.set(__self__, "provider_specific_details", provider_specific_details)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Policy Id.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="protectableItemId")
    def protectable_item_id(self) -> Optional[pulumi.Input[str]]:
        """
        The protectable item Id.
        """
        return pulumi.get(self, "protectable_item_id")

    @protectable_item_id.setter
    def protectable_item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protectable_item_id", value)

    @property
    @pulumi.getter(name="providerSpecificDetails")
    def provider_specific_details(self) -> Optional[pulumi.Input['EnableProtectionProviderSpecificInputArgs']]:
        """
        The ReplicationProviderInput. For HyperVReplicaAzure provider, it will be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For HyperVReplicaAzure provider, it can be null.
        """
        return pulumi.get(self, "provider_specific_details")

    @provider_specific_details.setter
    def provider_specific_details(self, value: Optional[pulumi.Input['EnableProtectionProviderSpecificInputArgs']]):
        pulumi.set(self, "provider_specific_details", value)


@pulumi.input_type
class EnableProtectionProviderSpecificInputArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None):
        """
        Enable protection provider specific input.
        :param pulumi.Input[str] instance_type: The class type.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The class type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class FabricCreationInputPropertiesArgs:
    def __init__(__self__, *,
                 custom_details: Optional[pulumi.Input['FabricSpecificCreationInputArgs']] = None):
        """
        Properties of site details provided during the time of site creation
        :param pulumi.Input['FabricSpecificCreationInputArgs'] custom_details: Fabric provider specific creation input.
        """
        if custom_details is not None:
            pulumi.set(__self__, "custom_details", custom_details)

    @property
    @pulumi.getter(name="customDetails")
    def custom_details(self) -> Optional[pulumi.Input['FabricSpecificCreationInputArgs']]:
        """
        Fabric provider specific creation input.
        """
        return pulumi.get(self, "custom_details")

    @custom_details.setter
    def custom_details(self, value: Optional[pulumi.Input['FabricSpecificCreationInputArgs']]):
        pulumi.set(self, "custom_details", value)


@pulumi.input_type
class FabricSpecificCreateNetworkMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None):
        """
        Input details specific to fabrics during Network Mapping.
        :param pulumi.Input[str] instance_type: The instance type.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class FabricSpecificCreationInputArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None):
        """
        Fabric provider specific settings.
        :param pulumi.Input[str] instance_type: Gets the class type.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the class type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class IdentityDataArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        """
        Identity for the resource.
        :param pulumi.Input[str] type: The identity type.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class IdentityProviderInputArgs:
    def __init__(__self__, *,
                 aad_authority: pulumi.Input[str],
                 application_id: pulumi.Input[str],
                 audience: pulumi.Input[str],
                 object_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str]):
        """
        Identity provider input.
        :param pulumi.Input[str] aad_authority: The base authority for Azure Active Directory authentication.
        :param pulumi.Input[str] application_id: The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param pulumi.Input[str] audience: The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param pulumi.Input[str] object_id: The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param pulumi.Input[str] tenant_id: The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        pulumi.set(__self__, "aad_authority", aad_authority)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="aadAuthority")
    def aad_authority(self) -> pulumi.Input[str]:
        """
        The base authority for Azure Active Directory authentication.
        """
        return pulumi.get(self, "aad_authority")

    @aad_authority.setter
    def aad_authority(self, value: pulumi.Input[str]):
        pulumi.set(self, "aad_authority", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def audience(self) -> pulumi.Input[str]:
        """
        The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: pulumi.Input[str]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Input[str]:
        """
        The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class PolicyProviderSpecificInputArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None):
        """
        Base class for provider specific input
        :param pulumi.Input[str] instance_type: The class type.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The class type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class PrivateEndpointArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        The Private Endpoint network resource that is linked to the Private Endpoint connection
        :param pulumi.Input[str] id: Gets or sets id
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PrivateEndpointConnectionArgs:
    def __init__(__self__, *,
                 private_endpoint: Optional[pulumi.Input['PrivateEndpointArgs']] = None,
                 private_link_service_connection_state: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']] = None,
                 provisioning_state: Optional[pulumi.Input[str]] = None):
        """
        Private Endpoint Connection Response Properties
        :param pulumi.Input['PrivateEndpointArgs'] private_endpoint: Gets or sets private endpoint associated with the private endpoint connection
        :param pulumi.Input['PrivateLinkServiceConnectionStateArgs'] private_link_service_connection_state: Gets or sets private link service connection state
        :param pulumi.Input[str] provisioning_state: Gets or sets provisioning state of the private endpoint connection
        """
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_link_service_connection_state is not None:
            pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional[pulumi.Input['PrivateEndpointArgs']]:
        """
        Gets or sets private endpoint associated with the private endpoint connection
        """
        return pulumi.get(self, "private_endpoint")

    @private_endpoint.setter
    def private_endpoint(self, value: Optional[pulumi.Input['PrivateEndpointArgs']]):
        pulumi.set(self, "private_endpoint", value)

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]:
        """
        Gets or sets private link service connection state
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @private_link_service_connection_state.setter
    def private_link_service_connection_state(self, value: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]):
        pulumi.set(self, "private_link_service_connection_state", value)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets provisioning state of the private endpoint connection
        """
        return pulumi.get(self, "provisioning_state")

    @provisioning_state.setter
    def provisioning_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioning_state", value)


@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 action_required: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Private Link Service Connection State
        :param pulumi.Input[str] action_required: Gets or sets actions required
        :param pulumi.Input[str] description: Gets or sets description
        :param pulumi.Input[str] status: Gets or sets the status
        """
        if action_required is not None:
            pulumi.set(__self__, "action_required", action_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionRequired")
    def action_required(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets actions required
        """
        return pulumi.get(self, "action_required")

    @action_required.setter
    def action_required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_required", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProtectedItemArgs:
    def __init__(__self__, *,
                 protected_item_type: pulumi.Input[str],
                 backup_management_type: Optional[pulumi.Input[str]] = None,
                 backup_set_name: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 create_mode: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_in_utc: Optional[pulumi.Input[str]] = None,
                 deferred_delete_time_remaining: Optional[pulumi.Input[str]] = None,
                 is_deferred_delete_schedule_upcoming: Optional[pulumi.Input[bool]] = None,
                 is_rehydrate: Optional[pulumi.Input[bool]] = None,
                 is_scheduled_for_deferred_delete: Optional[pulumi.Input[bool]] = None,
                 last_recovery_point: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[str]] = None):
        """
        Base class for backup items.
        :param pulumi.Input[str] protected_item_type: backup item type.
        :param pulumi.Input[str] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] backup_set_name: Name of the backup set the backup item belongs to
        :param pulumi.Input[str] container_name: Unique name of container
        :param pulumi.Input[str] create_mode: Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        :param pulumi.Input[str] deferred_delete_time_in_utc: Time for deferred deletion in UTC
        :param pulumi.Input[str] deferred_delete_time_remaining: Time remaining before the DS marked for deferred delete is permanently deleted
        :param pulumi.Input[bool] is_deferred_delete_schedule_upcoming: Flag to identify whether the deferred deleted DS is to be purged soon
        :param pulumi.Input[bool] is_rehydrate: Flag to identify that deferred deleted DS is to be moved into Pause state
        :param pulumi.Input[bool] is_scheduled_for_deferred_delete: Flag to identify whether the DS is scheduled for deferred delete
        :param pulumi.Input[str] last_recovery_point: Timestamp when the last (latest) backup copy was created for this backup item.
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        :param pulumi.Input[str] workload_type: Type of workload this item represents.
        """
        pulumi.set(__self__, "protected_item_type", protected_item_type)
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if backup_set_name is not None:
            pulumi.set(__self__, "backup_set_name", backup_set_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if deferred_delete_time_in_utc is not None:
            pulumi.set(__self__, "deferred_delete_time_in_utc", deferred_delete_time_in_utc)
        if deferred_delete_time_remaining is not None:
            pulumi.set(__self__, "deferred_delete_time_remaining", deferred_delete_time_remaining)
        if is_deferred_delete_schedule_upcoming is not None:
            pulumi.set(__self__, "is_deferred_delete_schedule_upcoming", is_deferred_delete_schedule_upcoming)
        if is_rehydrate is not None:
            pulumi.set(__self__, "is_rehydrate", is_rehydrate)
        if is_scheduled_for_deferred_delete is not None:
            pulumi.set(__self__, "is_scheduled_for_deferred_delete", is_scheduled_for_deferred_delete)
        if last_recovery_point is not None:
            pulumi.set(__self__, "last_recovery_point", last_recovery_point)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="protectedItemType")
    def protected_item_type(self) -> pulumi.Input[str]:
        """
        backup item type.
        """
        return pulumi.get(self, "protected_item_type")

    @protected_item_type.setter
    def protected_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protected_item_type", value)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="backupSetName")
    def backup_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup set the backup item belongs to
        """
        return pulumi.get(self, "backup_set_name")

    @backup_set_name.setter
    def backup_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_set_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of container
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        """
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeInUTC")
    def deferred_delete_time_in_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Time for deferred deletion in UTC
        """
        return pulumi.get(self, "deferred_delete_time_in_utc")

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_in_utc", value)

    @property
    @pulumi.getter(name="deferredDeleteTimeRemaining")
    def deferred_delete_time_remaining(self) -> Optional[pulumi.Input[str]]:
        """
        Time remaining before the DS marked for deferred delete is permanently deleted
        """
        return pulumi.get(self, "deferred_delete_time_remaining")

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deferred_delete_time_remaining", value)

    @property
    @pulumi.getter(name="isDeferredDeleteScheduleUpcoming")
    def is_deferred_delete_schedule_upcoming(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the deferred deleted DS is to be purged soon
        """
        return pulumi.get(self, "is_deferred_delete_schedule_upcoming")

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deferred_delete_schedule_upcoming", value)

    @property
    @pulumi.getter(name="isRehydrate")
    def is_rehydrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify that deferred deleted DS is to be moved into Pause state
        """
        return pulumi.get(self, "is_rehydrate")

    @is_rehydrate.setter
    def is_rehydrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rehydrate", value)

    @property
    @pulumi.getter(name="isScheduledForDeferredDelete")
    def is_scheduled_for_deferred_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to identify whether the DS is scheduled for deferred delete
        """
        return pulumi.get(self, "is_scheduled_for_deferred_delete")

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scheduled_for_deferred_delete", value)

    @property
    @pulumi.getter(name="lastRecoveryPoint")
    def last_recovery_point(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the last (latest) backup copy was created for this backup item.
        """
        return pulumi.get(self, "last_recovery_point")

    @last_recovery_point.setter
    def last_recovery_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_recovery_point", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of workload this item represents.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class ProtectionContainerArgs:
    def __init__(__self__, *,
                 backup_management_type: Optional[pulumi.Input[str]] = None,
                 container_type: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 registration_status: Optional[pulumi.Input[str]] = None):
        """
        Base class for container with backup items. Containers with specific workloads are derived from this class.
        :param pulumi.Input[str] backup_management_type: Type of backup management for the container.
        :param pulumi.Input[str] container_type: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
               Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
               Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
               Backup is VMAppContainer
        :param pulumi.Input[str] friendly_name: Friendly name of the container.
        :param pulumi.Input[str] health_status: Status of health of the container.
        :param pulumi.Input[str] registration_status: Status of registration of the container with the Recovery Services Vault.
        """
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if container_type is not None:
            pulumi.set(__self__, "container_type", container_type)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if registration_status is not None:
            pulumi.set(__self__, "registration_status", registration_status)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of backup management for the container.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        Backup is VMAppContainer
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the container.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of health of the container.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="registrationStatus")
    def registration_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of registration of the container with the Recovery Services Vault.
        """
        return pulumi.get(self, "registration_status")

    @registration_status.setter
    def registration_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_status", value)


@pulumi.input_type
class ProtectionIntentArgs:
    def __init__(__self__, *,
                 backup_management_type: Optional[pulumi.Input[str]] = None,
                 item_id: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 protection_intent_item_type: Optional[pulumi.Input[str]] = None,
                 protection_state: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None):
        """
        Base class for backup ProtectionIntent.
        :param pulumi.Input[str] backup_management_type: Type of backup management for the backed up item.
        :param pulumi.Input[str] item_id: ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
        :param pulumi.Input[str] policy_id: ID of the backup policy with which this item is backed up.
        :param pulumi.Input[str] protection_intent_item_type: backup protectionIntent type.
        :param pulumi.Input[str] protection_state: Backup state of this backup item.
        :param pulumi.Input[str] source_resource_id: ARM ID of the resource to be backed up.
        """
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if item_id is not None:
            pulumi.set(__self__, "item_id", item_id)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protection_intent_item_type is not None:
            pulumi.set(__self__, "protection_intent_item_type", protection_intent_item_type)
        if protection_state is not None:
            pulumi.set(__self__, "protection_state", protection_state)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of backup management for the backed up item.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
        """
        return pulumi.get(self, "item_id")

    @item_id.setter
    def item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "item_id", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup policy with which this item is backed up.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="protectionIntentItemType")
    def protection_intent_item_type(self) -> Optional[pulumi.Input[str]]:
        """
        backup protectionIntent type.
        """
        return pulumi.get(self, "protection_intent_item_type")

    @protection_intent_item_type.setter
    def protection_intent_item_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_intent_item_type", value)

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> Optional[pulumi.Input[str]]:
        """
        Backup state of this backup item.
        """
        return pulumi.get(self, "protection_state")

    @protection_state.setter
    def protection_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_state", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of the resource to be backed up.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)


@pulumi.input_type
class ProtectionPolicyArgs:
    def __init__(__self__, *,
                 backup_management_type: Optional[pulumi.Input[str]] = None,
                 protected_items_count: Optional[pulumi.Input[float]] = None):
        """
        The base class for a backup policy. Workload-specific backup policies are derived from this class.
        :param pulumi.Input[str] backup_management_type: This property is used as the discriminator for deciding the specific types in the polymorphic chain of types.
        :param pulumi.Input[float] protected_items_count: The number of items associated with this policy.
        """
        if backup_management_type is not None:
            pulumi.set(__self__, "backup_management_type", backup_management_type)
        if protected_items_count is not None:
            pulumi.set(__self__, "protected_items_count", protected_items_count)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> Optional[pulumi.Input[str]]:
        """
        This property is used as the discriminator for deciding the specific types in the polymorphic chain of types.
        """
        return pulumi.get(self, "backup_management_type")

    @backup_management_type.setter
    def backup_management_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_management_type", value)

    @property
    @pulumi.getter(name="protectedItemsCount")
    def protected_items_count(self) -> Optional[pulumi.Input[float]]:
        """
        The number of items associated with this policy.
        """
        return pulumi.get(self, "protected_items_count")

    @protected_items_count.setter
    def protected_items_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "protected_items_count", value)


@pulumi.input_type
class RecoveryPlanActionArgs:
    def __init__(__self__, *,
                 action_name: pulumi.Input[str],
                 failover_directions: pulumi.Input[List[pulumi.Input[str]]],
                 failover_types: pulumi.Input[List[pulumi.Input[str]]]):
        """
        Recovery plan action details.
        :param pulumi.Input[str] action_name: The action name.
        :param pulumi.Input[List[pulumi.Input[str]]] failover_directions: The list of failover directions.
        :param pulumi.Input[List[pulumi.Input[str]]] failover_types: The list of failover types.
        """
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "failover_directions", failover_directions)
        pulumi.set(__self__, "failover_types", failover_types)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> pulumi.Input[str]:
        """
        The action name.
        """
        return pulumi.get(self, "action_name")

    @action_name.setter
    def action_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_name", value)

    @property
    @pulumi.getter(name="failoverDirections")
    def failover_directions(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        The list of failover directions.
        """
        return pulumi.get(self, "failover_directions")

    @failover_directions.setter
    def failover_directions(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        pulumi.set(self, "failover_directions", value)

    @property
    @pulumi.getter(name="failoverTypes")
    def failover_types(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        The list of failover types.
        """
        return pulumi.get(self, "failover_types")

    @failover_types.setter
    def failover_types(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        pulumi.set(self, "failover_types", value)


@pulumi.input_type
class RecoveryPlanGroupArgs:
    def __init__(__self__, *,
                 group_type: pulumi.Input[str],
                 end_group_actions: Optional[pulumi.Input[List[pulumi.Input['RecoveryPlanActionArgs']]]] = None,
                 replication_protected_items: Optional[pulumi.Input[List[pulumi.Input['RecoveryPlanProtectedItemArgs']]]] = None,
                 start_group_actions: Optional[pulumi.Input[List[pulumi.Input['RecoveryPlanActionArgs']]]] = None):
        """
        Recovery plan group details.
        :param pulumi.Input[str] group_type: The group type.
        :param pulumi.Input[List[pulumi.Input['RecoveryPlanActionArgs']]] end_group_actions: The end group actions.
        :param pulumi.Input[List[pulumi.Input['RecoveryPlanProtectedItemArgs']]] replication_protected_items: The list of protected items.
        :param pulumi.Input[List[pulumi.Input['RecoveryPlanActionArgs']]] start_group_actions: The start group actions.
        """
        pulumi.set(__self__, "group_type", group_type)
        if end_group_actions is not None:
            pulumi.set(__self__, "end_group_actions", end_group_actions)
        if replication_protected_items is not None:
            pulumi.set(__self__, "replication_protected_items", replication_protected_items)
        if start_group_actions is not None:
            pulumi.set(__self__, "start_group_actions", start_group_actions)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Input[str]:
        """
        The group type.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter(name="endGroupActions")
    def end_group_actions(self) -> Optional[pulumi.Input[List[pulumi.Input['RecoveryPlanActionArgs']]]]:
        """
        The end group actions.
        """
        return pulumi.get(self, "end_group_actions")

    @end_group_actions.setter
    def end_group_actions(self, value: Optional[pulumi.Input[List[pulumi.Input['RecoveryPlanActionArgs']]]]):
        pulumi.set(self, "end_group_actions", value)

    @property
    @pulumi.getter(name="replicationProtectedItems")
    def replication_protected_items(self) -> Optional[pulumi.Input[List[pulumi.Input['RecoveryPlanProtectedItemArgs']]]]:
        """
        The list of protected items.
        """
        return pulumi.get(self, "replication_protected_items")

    @replication_protected_items.setter
    def replication_protected_items(self, value: Optional[pulumi.Input[List[pulumi.Input['RecoveryPlanProtectedItemArgs']]]]):
        pulumi.set(self, "replication_protected_items", value)

    @property
    @pulumi.getter(name="startGroupActions")
    def start_group_actions(self) -> Optional[pulumi.Input[List[pulumi.Input['RecoveryPlanActionArgs']]]]:
        """
        The start group actions.
        """
        return pulumi.get(self, "start_group_actions")

    @start_group_actions.setter
    def start_group_actions(self, value: Optional[pulumi.Input[List[pulumi.Input['RecoveryPlanActionArgs']]]]):
        pulumi.set(self, "start_group_actions", value)


@pulumi.input_type
class RecoveryPlanProtectedItemArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None):
        """
        Recovery plan protected item.
        :param pulumi.Input[str] id: The ARM Id of the recovery plan protected item.
        :param pulumi.Input[str] virtual_machine_id: The virtual machine Id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if virtual_machine_id is not None:
            pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM Id of the recovery plan protected item.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        The virtual machine Id.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_id", value)


@pulumi.input_type
class RecoveryPlanProviderSpecificInputArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None):
        """
        Recovery plan provider specific input base class.
        :param pulumi.Input[str] instance_type: Gets the Instance type.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the Instance type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class ReplicationProviderSpecificContainerMappingInputArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None):
        """
        Provider specific input for pairing operations.
        :param pulumi.Input[str] instance_type: The class type.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The class type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Identifies the unique system identifier for each Azure resource.
        :param pulumi.Input[str] name: The Sku name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Sku name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StorageMappingInputPropertiesArgs:
    def __init__(__self__, *,
                 target_storage_classification_id: Optional[pulumi.Input[str]] = None):
        """
        Storage mapping input properties.
        :param pulumi.Input[str] target_storage_classification_id: The ID of the storage object.
        """
        if target_storage_classification_id is not None:
            pulumi.set(__self__, "target_storage_classification_id", target_storage_classification_id)

    @property
    @pulumi.getter(name="targetStorageClassificationId")
    def target_storage_classification_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the storage object.
        """
        return pulumi.get(self, "target_storage_classification_id")

    @target_storage_classification_id.setter
    def target_storage_classification_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_storage_classification_id", value)


