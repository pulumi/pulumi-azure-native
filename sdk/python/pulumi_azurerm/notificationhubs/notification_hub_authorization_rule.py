# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class NotificationHubAuthorizationRule(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Properties of the Namespace AuthorizationRule.
      * `claim_type` (`str`) - A string that describes the claim type
      * `claim_value` (`str`) - A string that describes the claim value
      * `created_time` (`str`) - The created time for this rule
      * `key_name` (`str`) - A string that describes the authorization rule.
      * `modified_time` (`str`) - The last modified time for this rule
      * `primary_key` (`str`) - A base64-encoded 256-bit primary key for signing and validating the SAS token.
      * `revision` (`float`) - The revision number for the rule
      * `rights` (`list`) - The rights associated with the rule.
      * `secondary_key` (`str`) - A base64-encoded 256-bit primary key for signing and validating the SAS token.
    """
    sku: pulumi.Output[dict]
    """
    The sku of the created namespace
      * `capacity` (`float`) - The capacity of the resource
      * `family` (`str`) - The Sku Family
      * `name` (`str`) - Name of the notification hub sku
      * `size` (`str`) - The Sku size
      * `tier` (`str`) - The tier of particular sku
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, name=None, namespace_name=None, notification_hub_name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Description of a Namespace AuthorizationRules.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Authorization Rule Name.
        :param pulumi.Input[str] namespace_name: The namespace name.
        :param pulumi.Input[str] notification_hub_name: The notification hub name.
        :param pulumi.Input[dict] properties: Properties of the Namespace AuthorizationRules.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.

        The **properties** object supports the following:

          * `rights` (`pulumi.Input[list]`) - The rights associated with the rule.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if namespace_name is None:
                raise TypeError("Missing required property 'namespace_name'")
            __props__['namespace_name'] = namespace_name
            if notification_hub_name is None:
                raise TypeError("Missing required property 'notification_hub_name'")
            __props__['notification_hub_name'] = notification_hub_name
            if properties is None:
                raise TypeError("Missing required property 'properties'")
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['location'] = None
            __props__['sku'] = None
            __props__['tags'] = None
            __props__['type'] = None
        super(NotificationHubAuthorizationRule, __self__).__init__(
            'azurerm:notificationhubs:NotificationHubAuthorizationRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing NotificationHubAuthorizationRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return NotificationHubAuthorizationRule(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
