# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetNamespaceAuthorizationRuleResult:
    """
    Description of a Namespace AuthorizationRules.
    """
    def __init__(__self__, claim_type=None, claim_value=None, created_time=None, key_name=None, location=None, modified_time=None, name=None, primary_key=None, revision=None, rights=None, secondary_key=None, sku=None, tags=None, type=None):
        if claim_type and not isinstance(claim_type, str):
            raise TypeError("Expected argument 'claim_type' to be a str")
        __self__.claim_type = claim_type
        """
        A string that describes the claim type
        """
        if claim_value and not isinstance(claim_value, str):
            raise TypeError("Expected argument 'claim_value' to be a str")
        __self__.claim_value = claim_value
        """
        A string that describes the claim value
        """
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        __self__.created_time = created_time
        """
        The created time for this rule
        """
        if key_name and not isinstance(key_name, str):
            raise TypeError("Expected argument 'key_name' to be a str")
        __self__.key_name = key_name
        """
        A string that describes the authorization rule.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        __self__.modified_time = modified_time
        """
        The last modified time for this rule
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if primary_key and not isinstance(primary_key, str):
            raise TypeError("Expected argument 'primary_key' to be a str")
        __self__.primary_key = primary_key
        """
        A base64-encoded 256-bit primary key for signing and validating the SAS token.
        """
        if revision and not isinstance(revision, float):
            raise TypeError("Expected argument 'revision' to be a float")
        __self__.revision = revision
        """
        The revision number for the rule
        """
        if rights and not isinstance(rights, list):
            raise TypeError("Expected argument 'rights' to be a list")
        __self__.rights = rights
        """
        The rights associated with the rule.
        """
        if secondary_key and not isinstance(secondary_key, str):
            raise TypeError("Expected argument 'secondary_key' to be a str")
        __self__.secondary_key = secondary_key
        """
        A base64-encoded 256-bit primary key for signing and validating the SAS token.
        """
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        The sku of the created namespace
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """


class AwaitableGetNamespaceAuthorizationRuleResult(GetNamespaceAuthorizationRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNamespaceAuthorizationRuleResult(
            claim_type=self.claim_type,
            claim_value=self.claim_value,
            created_time=self.created_time,
            key_name=self.key_name,
            location=self.location,
            modified_time=self.modified_time,
            name=self.name,
            primary_key=self.primary_key,
            revision=self.revision,
            rights=self.rights,
            secondary_key=self.secondary_key,
            sku=self.sku,
            tags=self.tags,
            type=self.type)


def get_namespace_authorization_rule(name=None, namespace_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Authorization rule name.
    :param str namespace_name: The namespace name
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['namespaceName'] = namespace_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:notificationhubs/v20170401:getNamespaceAuthorizationRule', __args__, opts=opts).value

    return AwaitableGetNamespaceAuthorizationRuleResult(
        claim_type=__ret__.get('claimType'),
        claim_value=__ret__.get('claimValue'),
        created_time=__ret__.get('createdTime'),
        key_name=__ret__.get('keyName'),
        location=__ret__.get('location'),
        modified_time=__ret__.get('modifiedTime'),
        name=__ret__.get('name'),
        primary_key=__ret__.get('primaryKey'),
        revision=__ret__.get('revision'),
        rights=__ret__.get('rights'),
        secondary_key=__ret__.get('secondaryKey'),
        sku=__ret__.get('sku'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
