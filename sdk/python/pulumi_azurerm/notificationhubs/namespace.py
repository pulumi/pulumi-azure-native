# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class Namespace(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Properties of the Namespace.
      * `created_at` (`str`) - The time the namespace was created.
      * `critical` (`bool`) - Whether or not the namespace is set as Critical.
      * `data_center` (`str`) - Data center for the namespace
      * `enabled` (`bool`) - Whether or not the namespace is currently enabled.
      * `metric_id` (`str`) - Identifier for Azure Insights metrics
      * `name` (`str`) - The name of the namespace.
      * `namespace_type` (`str`) - The namespace type.
      * `provisioning_state` (`str`) - Provisioning state of the Namespace.
      * `region` (`str`) - Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe
      * `scale_unit` (`str`) - ScaleUnit where the namespace gets created
      * `service_bus_endpoint` (`str`) - Endpoint you can use to perform NotificationHub operations.
      * `status` (`str`) - Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting
      * `subscription_id` (`str`) - The Id of the Azure subscription associated with the namespace.
      * `updated_at` (`str`) - The time the namespace was updated.
    """
    sku: pulumi.Output[dict]
    """
    The sku of the created namespace
      * `capacity` (`float`) - The capacity of the resource
      * `family` (`str`) - The Sku Family
      * `name` (`str`) - Name of the notification hub sku
      * `size` (`str`) - The Sku size
      * `tier` (`str`) - The tier of particular sku
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, location=None, name=None, properties=None, resource_group_name=None, sku=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Description of a Namespace resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The namespace name.
        :param pulumi.Input[dict] properties: Properties of the Namespace.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] sku: The sku of the created namespace
        :param pulumi.Input[dict] tags: Resource tags

        The **properties** object supports the following:

          * `created_at` (`pulumi.Input[str]`) - The time the namespace was created.
          * `critical` (`pulumi.Input[bool]`) - Whether or not the namespace is set as Critical.
          * `data_center` (`pulumi.Input[str]`) - Data center for the namespace
          * `enabled` (`pulumi.Input[bool]`) - Whether or not the namespace is currently enabled.
          * `name` (`pulumi.Input[str]`) - The name of the namespace.
          * `namespace_type` (`pulumi.Input[str]`) - The namespace type.
          * `provisioning_state` (`pulumi.Input[str]`) - Provisioning state of the Namespace.
          * `region` (`pulumi.Input[str]`) - Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe
          * `scale_unit` (`pulumi.Input[str]`) - ScaleUnit where the namespace gets created
          * `service_bus_endpoint` (`pulumi.Input[str]`) - Endpoint you can use to perform NotificationHub operations.
          * `status` (`pulumi.Input[str]`) - Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting
          * `subscription_id` (`pulumi.Input[str]`) - The Id of the Azure subscription associated with the namespace.
          * `updated_at` (`pulumi.Input[str]`) - The time the namespace was updated.

        The **sku** object supports the following:

          * `capacity` (`pulumi.Input[float]`) - The capacity of the resource
          * `family` (`pulumi.Input[str]`) - The Sku Family
          * `name` (`pulumi.Input[str]`) - Name of the notification hub sku
          * `size` (`pulumi.Input[str]`) - The Sku size
          * `tier` (`pulumi.Input[str]`) - The tier of particular sku
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['type'] = None
        super(Namespace, __self__).__init__(
            'azurerm:notificationhubs:Namespace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, location=None, name=None, properties=None, sku=None, tags=None, type=None):
        """
        Get an existing Namespace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: Resource name
        :param pulumi.Input[dict] properties: Properties of the Namespace.
        :param pulumi.Input[dict] sku: The sku of the created namespace
        :param pulumi.Input[dict] tags: Resource tags
        :param pulumi.Input[str] type: Resource type

        The **properties** object supports the following:

          * `created_at` (`pulumi.Input[str]`) - The time the namespace was created.
          * `critical` (`pulumi.Input[bool]`) - Whether or not the namespace is set as Critical.
          * `data_center` (`pulumi.Input[str]`) - Data center for the namespace
          * `enabled` (`pulumi.Input[bool]`) - Whether or not the namespace is currently enabled.
          * `metric_id` (`pulumi.Input[str]`) - Identifier for Azure Insights metrics
          * `name` (`pulumi.Input[str]`) - The name of the namespace.
          * `namespace_type` (`pulumi.Input[str]`) - The namespace type.
          * `provisioning_state` (`pulumi.Input[str]`) - Provisioning state of the Namespace.
          * `region` (`pulumi.Input[str]`) - Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe
          * `scale_unit` (`pulumi.Input[str]`) - ScaleUnit where the namespace gets created
          * `service_bus_endpoint` (`pulumi.Input[str]`) - Endpoint you can use to perform NotificationHub operations.
          * `status` (`pulumi.Input[str]`) - Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting
          * `subscription_id` (`pulumi.Input[str]`) - The Id of the Azure subscription associated with the namespace.
          * `updated_at` (`pulumi.Input[str]`) - The time the namespace was updated.

        The **sku** object supports the following:

          * `capacity` (`pulumi.Input[float]`) - The capacity of the resource
          * `family` (`pulumi.Input[str]`) - The Sku Family
          * `name` (`pulumi.Input[str]`) - Name of the notification hub sku
          * `size` (`pulumi.Input[str]`) - The Sku size
          * `tier` (`pulumi.Input[str]`) - The tier of particular sku
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["location"] = location
        __props__["name"] = name
        __props__["properties"] = properties
        __props__["sku"] = sku
        __props__["tags"] = tags
        __props__["type"] = type
        return Namespace(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
