# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetContainerGroupResult:
    """
    A container group.
    """
    def __init__(__self__, containers=None, image_registry_credentials=None, instance_view=None, ip_address=None, location=None, name=None, os_type=None, provisioning_state=None, restart_policy=None, tags=None, type=None, volumes=None):
        if containers and not isinstance(containers, list):
            raise TypeError("Expected argument 'containers' to be a list")
        __self__.containers = containers
        """
        The containers within the container group.
        """
        if image_registry_credentials and not isinstance(image_registry_credentials, list):
            raise TypeError("Expected argument 'image_registry_credentials' to be a list")
        __self__.image_registry_credentials = image_registry_credentials
        """
        The image registry credentials by which the container group is created from.
        """
        if instance_view and not isinstance(instance_view, dict):
            raise TypeError("Expected argument 'instance_view' to be a dict")
        __self__.instance_view = instance_view
        """
        The instance view of the container group. Only valid in response.
        """
        if ip_address and not isinstance(ip_address, dict):
            raise TypeError("Expected argument 'ip_address' to be a dict")
        __self__.ip_address = ip_address
        """
        The IP address type of the container group.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The resource name.
        """
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        __self__.os_type = os_type
        """
        The operating system type required by the containers in the container group.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the container group. This only appears in the response.
        """
        if restart_policy and not isinstance(restart_policy, str):
            raise TypeError("Expected argument 'restart_policy' to be a str")
        __self__.restart_policy = restart_policy
        """
        Restart policy for all containers within the container group. 
        - `Always` Always restart
        - `OnFailure` Restart on failure
        - `Never` Never restart
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The resource type.
        """
        if volumes and not isinstance(volumes, list):
            raise TypeError("Expected argument 'volumes' to be a list")
        __self__.volumes = volumes
        """
        The list of volumes that can be mounted by containers in this container group.
        """


class AwaitableGetContainerGroupResult(GetContainerGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerGroupResult(
            containers=self.containers,
            image_registry_credentials=self.image_registry_credentials,
            instance_view=self.instance_view,
            ip_address=self.ip_address,
            location=self.location,
            name=self.name,
            os_type=self.os_type,
            provisioning_state=self.provisioning_state,
            restart_policy=self.restart_policy,
            tags=self.tags,
            type=self.type,
            volumes=self.volumes)


def get_container_group(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the container group.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:containerinstance/v20180401:getContainerGroup', __args__, opts=opts).value

    return AwaitableGetContainerGroupResult(
        containers=__ret__.get('containers'),
        image_registry_credentials=__ret__.get('imageRegistryCredentials'),
        instance_view=__ret__.get('instanceView'),
        ip_address=__ret__.get('ipAddress'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        os_type=__ret__.get('osType'),
        provisioning_state=__ret__.get('provisioningState'),
        restart_policy=__ret__.get('restartPolicy'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        volumes=__ret__.get('volumes'))
