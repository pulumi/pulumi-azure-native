# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Workspace(pulumi.CustomResource):
    allow_public_access_when_behind_vnet: pulumi.Output[bool]
    """
    The flag to indicate whether to allow public access when behind VNet.
    """
    application_insights: pulumi.Output[str]
    """
    ARM id of the application insights associated with this workspace. This cannot be changed once the workspace has been created
    """
    container_registry: pulumi.Output[str]
    """
    ARM id of the container registry associated with this workspace. This cannot be changed once the workspace has been created
    """
    creation_time: pulumi.Output[str]
    """
    The creation time of the machine learning workspace in ISO8601 format.
    """
    description: pulumi.Output[str]
    """
    The description of this workspace.
    """
    discovery_url: pulumi.Output[str]
    """
    Url for the discovery service to identify regional endpoints for machine learning experimentation services
    """
    encryption: pulumi.Output[dict]
    """
    The encryption settings of Azure ML workspace.
      * `key_vault_properties` (`dict`) - Customer Key vault properties.
        * `identity_client_id` (`str`) - For future use - The client id of the identity which will be used to access key vault.
        * `key_identifier` (`str`) - Key vault uri to access the encryption key.
        * `key_vault_arm_id` (`str`) - The ArmId of the keyVault where the customer owned encryption key is present.

      * `status` (`str`) - Indicates whether or not the encryption is enabled for the workspace.
    """
    friendly_name: pulumi.Output[str]
    """
    The friendly name for this workspace. This name in mutable
    """
    hbi_workspace: pulumi.Output[bool]
    """
    The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service
    """
    identity: pulumi.Output[dict]
    """
    The identity of the resource.
      * `principal_id` (`str`) - The principal ID of resource identity.
      * `tenant_id` (`str`) - The tenant ID of resource.
      * `type` (`str`) - The identity type.
      * `user_assigned_identities` (`dict`) - The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
    """
    image_build_compute: pulumi.Output[str]
    """
    The compute name for image build
    """
    key_vault: pulumi.Output[str]
    """
    ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been created
    """
    location: pulumi.Output[str]
    """
    Specifies the location of the resource.
    """
    name: pulumi.Output[str]
    """
    Specifies the name of the resource.
    """
    notebook_info: pulumi.Output[dict]
    """
    The notebook info of Azure ML workspace.
      * `fqdn` (`str`)
      * `notebook_preparation_error` (`dict`) - The error that occurs when preparing notebook.
        * `error_message` (`str`)
        * `status_code` (`float`)

      * `resource_id` (`str`) - the data plane resourceId that used to initialize notebook component
    """
    private_endpoint_connections: pulumi.Output[list]
    """
    The list of private endpoint connections in the workspace.
      * `id` (`str`) - Specifies the resource ID.
      * `identity` (`dict`) - The identity of the resource.
        * `principal_id` (`str`) - The principal ID of resource identity.
        * `tenant_id` (`str`) - The tenant ID of resource.
        * `type` (`str`) - The identity type.
        * `user_assigned_identities` (`dict`) - The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.

      * `location` (`str`) - Specifies the location of the resource.
      * `name` (`str`) - Specifies the name of the resource.
      * `private_endpoint` (`dict`) - The resource of private end point.
        * `id` (`str`) - The ARM identifier for Private Endpoint

      * `private_link_service_connection_state` (`dict`) - A collection of information about the state of the connection between service consumer and provider.
        * `actions_required` (`str`) - A message indicating if changes on the service provider require any updates on the consumer.
        * `description` (`str`) - The reason for approval/rejection of the connection.
        * `status` (`str`) - Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.

      * `provisioning_state` (`str`) - The provisioning state of the private endpoint connection resource.
      * `sku` (`dict`) - The sku of the workspace.
        * `name` (`str`) - Name of the sku
        * `tier` (`str`) - Tier of the sku like Basic or Enterprise

      * `tags` (`dict`) - Contains resource tags defined as key/value pairs.
      * `type` (`str`) - Specifies the type of the resource.
    """
    private_link_count: pulumi.Output[float]
    """
    Count of private connections in the workspace
    """
    provisioning_state: pulumi.Output[str]
    """
    The current deployment state of workspace resource. The provisioningState is to indicate states for resource provisioning.
    """
    service_provisioned_resource_group: pulumi.Output[str]
    """
    The name of the managed resource group created by workspace RP in customer subscription if the workspace is CMK workspace
    """
    shared_private_link_resources: pulumi.Output[list]
    """
    The list of shared private link resources in this workspace.
      * `group_id` (`str`) - The private link resource group id.
      * `name` (`str`) - Unique name of the private link.
      * `private_link_resource_id` (`str`) - The resource id that private link links to.
      * `request_message` (`str`) - Request message.
      * `status` (`str`) - Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    """
    sku: pulumi.Output[dict]
    """
    The sku of the workspace.
      * `name` (`str`) - Name of the sku
      * `tier` (`str`) - Tier of the sku like Basic or Enterprise
    """
    storage_account: pulumi.Output[str]
    """
    ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been created
    """
    tags: pulumi.Output[dict]
    """
    Contains resource tags defined as key/value pairs.
    """
    type: pulumi.Output[str]
    """
    Specifies the type of the resource.
    """
    workspace_id: pulumi.Output[str]
    """
    The immutable id associated with this workspace.
    """
    def __init__(__self__, resource_name, opts=None, allow_public_access_when_behind_vnet=None, application_insights=None, container_registry=None, description=None, discovery_url=None, encryption=None, friendly_name=None, hbi_workspace=None, identity=None, image_build_compute=None, key_vault=None, location=None, name=None, resource_group_name=None, shared_private_link_resources=None, sku=None, storage_account=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        An object that represents a machine learning workspace.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_public_access_when_behind_vnet: The flag to indicate whether to allow public access when behind VNet.
        :param pulumi.Input[str] application_insights: ARM id of the application insights associated with this workspace. This cannot be changed once the workspace has been created
        :param pulumi.Input[str] container_registry: ARM id of the container registry associated with this workspace. This cannot be changed once the workspace has been created
        :param pulumi.Input[str] description: The description of this workspace.
        :param pulumi.Input[str] discovery_url: Url for the discovery service to identify regional endpoints for machine learning experimentation services
        :param pulumi.Input[dict] encryption: The encryption settings of Azure ML workspace.
        :param pulumi.Input[str] friendly_name: The friendly name for this workspace. This name in mutable
        :param pulumi.Input[bool] hbi_workspace: The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service
        :param pulumi.Input[dict] identity: The identity of the resource.
        :param pulumi.Input[str] image_build_compute: The compute name for image build
        :param pulumi.Input[str] key_vault: ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been created
        :param pulumi.Input[str] location: Specifies the location of the resource.
        :param pulumi.Input[str] name: Name of Azure Machine Learning workspace.
        :param pulumi.Input[str] resource_group_name: Name of the resource group in which workspace is located.
        :param pulumi.Input[list] shared_private_link_resources: The list of shared private link resources in this workspace.
        :param pulumi.Input[dict] sku: The sku of the workspace.
        :param pulumi.Input[str] storage_account: ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been created
        :param pulumi.Input[dict] tags: Contains resource tags defined as key/value pairs.

        The **encryption** object supports the following:

          * `key_vault_properties` (`pulumi.Input[dict]`) - Customer Key vault properties.
            * `identity_client_id` (`pulumi.Input[str]`) - For future use - The client id of the identity which will be used to access key vault.
            * `key_identifier` (`pulumi.Input[str]`) - Key vault uri to access the encryption key.
            * `key_vault_arm_id` (`pulumi.Input[str]`) - The ArmId of the keyVault where the customer owned encryption key is present.

          * `status` (`pulumi.Input[str]`) - Indicates whether or not the encryption is enabled for the workspace.

        The **identity** object supports the following:

          * `type` (`pulumi.Input[str]`) - The identity type.

        The **shared_private_link_resources** object supports the following:

          * `group_id` (`pulumi.Input[str]`) - The private link resource group id.
          * `name` (`pulumi.Input[str]`) - Unique name of the private link.
          * `private_link_resource_id` (`pulumi.Input[str]`) - The resource id that private link links to.
          * `request_message` (`pulumi.Input[str]`) - Request message.
          * `status` (`pulumi.Input[str]`) - Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.

        The **sku** object supports the following:

          * `name` (`pulumi.Input[str]`) - Name of the sku
          * `tier` (`pulumi.Input[str]`) - Tier of the sku like Basic or Enterprise
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow_public_access_when_behind_vnet'] = allow_public_access_when_behind_vnet
            __props__['application_insights'] = application_insights
            __props__['container_registry'] = container_registry
            __props__['description'] = description
            __props__['discovery_url'] = discovery_url
            __props__['encryption'] = encryption
            __props__['friendly_name'] = friendly_name
            __props__['hbi_workspace'] = hbi_workspace
            __props__['identity'] = identity
            __props__['image_build_compute'] = image_build_compute
            __props__['key_vault'] = key_vault
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['shared_private_link_resources'] = shared_private_link_resources
            __props__['sku'] = sku
            __props__['storage_account'] = storage_account
            __props__['tags'] = tags
            __props__['creation_time'] = None
            __props__['notebook_info'] = None
            __props__['private_endpoint_connections'] = None
            __props__['private_link_count'] = None
            __props__['provisioning_state'] = None
            __props__['service_provisioned_resource_group'] = None
            __props__['type'] = None
            __props__['workspace_id'] = None
        super(Workspace, __self__).__init__(
            'azurerm:machinelearningservices/v20200601:Workspace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Workspace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Workspace(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
