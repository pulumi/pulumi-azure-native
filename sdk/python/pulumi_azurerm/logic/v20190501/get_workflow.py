# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetWorkflowResult:
    """
    The workflow type.
    """
    def __init__(__self__, access_control=None, access_endpoint=None, changed_time=None, created_time=None, definition=None, endpoints_configuration=None, integration_account=None, integration_service_environment=None, location=None, name=None, parameters=None, provisioning_state=None, sku=None, state=None, tags=None, type=None, version=None):
        if access_control and not isinstance(access_control, dict):
            raise TypeError("Expected argument 'access_control' to be a dict")
        __self__.access_control = access_control
        """
        The access control configuration.
        """
        if access_endpoint and not isinstance(access_endpoint, str):
            raise TypeError("Expected argument 'access_endpoint' to be a str")
        __self__.access_endpoint = access_endpoint
        """
        Gets the access endpoint.
        """
        if changed_time and not isinstance(changed_time, str):
            raise TypeError("Expected argument 'changed_time' to be a str")
        __self__.changed_time = changed_time
        """
        Gets the changed time.
        """
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        __self__.created_time = created_time
        """
        Gets the created time.
        """
        if definition and not isinstance(definition, dict):
            raise TypeError("Expected argument 'definition' to be a dict")
        __self__.definition = definition
        """
        The definition.
        """
        if endpoints_configuration and not isinstance(endpoints_configuration, dict):
            raise TypeError("Expected argument 'endpoints_configuration' to be a dict")
        __self__.endpoints_configuration = endpoints_configuration
        """
        The endpoints configuration.
        """
        if integration_account and not isinstance(integration_account, dict):
            raise TypeError("Expected argument 'integration_account' to be a dict")
        __self__.integration_account = integration_account
        """
        The integration account.
        """
        if integration_service_environment and not isinstance(integration_service_environment, dict):
            raise TypeError("Expected argument 'integration_service_environment' to be a dict")
        __self__.integration_service_environment = integration_service_environment
        """
        The integration service environment.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Gets the resource name.
        """
        if parameters and not isinstance(parameters, dict):
            raise TypeError("Expected argument 'parameters' to be a dict")
        __self__.parameters = parameters
        """
        The parameters.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Gets the provisioning state.
        """
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        The sku.
        """
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        __self__.state = state
        """
        The state.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Gets the resource type.
        """
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        __self__.version = version
        """
        Gets the version.
        """


class AwaitableGetWorkflowResult(GetWorkflowResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkflowResult(
            access_control=self.access_control,
            access_endpoint=self.access_endpoint,
            changed_time=self.changed_time,
            created_time=self.created_time,
            definition=self.definition,
            endpoints_configuration=self.endpoints_configuration,
            integration_account=self.integration_account,
            integration_service_environment=self.integration_service_environment,
            location=self.location,
            name=self.name,
            parameters=self.parameters,
            provisioning_state=self.provisioning_state,
            sku=self.sku,
            state=self.state,
            tags=self.tags,
            type=self.type,
            version=self.version)


def get_workflow(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The workflow name.
    :param str resource_group_name: The resource group name.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:logic/v20190501:getWorkflow', __args__, opts=opts).value

    return AwaitableGetWorkflowResult(
        access_control=__ret__.get('accessControl'),
        access_endpoint=__ret__.get('accessEndpoint'),
        changed_time=__ret__.get('changedTime'),
        created_time=__ret__.get('createdTime'),
        definition=__ret__.get('definition'),
        endpoints_configuration=__ret__.get('endpointsConfiguration'),
        integration_account=__ret__.get('integrationAccount'),
        integration_service_environment=__ret__.get('integrationServiceEnvironment'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        parameters=__ret__.get('parameters'),
        provisioning_state=__ret__.get('provisioningState'),
        sku=__ret__.get('sku'),
        state=__ret__.get('state'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        version=__ret__.get('version'))
