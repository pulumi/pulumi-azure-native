# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class IntegrationAccountSchema(pulumi.CustomResource):
    changed_time: pulumi.Output[str]
    """
    The changed time.
    """
    content: pulumi.Output[str]
    """
    The content.
    """
    content_link: pulumi.Output[dict]
    """
    The content link.
      * `content_hash` (`dict`) - The content hash.
        * `algorithm` (`str`) - The algorithm of the content hash.
        * `value` (`str`) - The value of the content hash.

      * `content_size` (`float`) - The content size.
      * `content_version` (`str`) - The content version.
      * `metadata` (`dict`) - The metadata.
      * `uri` (`str`) - The content link URI.
    """
    content_type: pulumi.Output[str]
    """
    The content type.
    """
    created_time: pulumi.Output[str]
    """
    The created time.
    """
    document_name: pulumi.Output[str]
    """
    The document name.
    """
    file_name: pulumi.Output[str]
    """
    The file name.
    """
    location: pulumi.Output[str]
    """
    The resource location.
    """
    metadata: pulumi.Output[dict]
    """
    The metadata.
    """
    name: pulumi.Output[str]
    """
    Gets the resource name.
    """
    schema_type: pulumi.Output[str]
    """
    The schema type.
    """
    tags: pulumi.Output[dict]
    """
    The resource tags.
    """
    target_namespace: pulumi.Output[str]
    """
    The target namespace of the schema.
    """
    type: pulumi.Output[str]
    """
    Gets the resource type.
    """
    def __init__(__self__, resource_name, opts=None, content=None, content_type=None, document_name=None, file_name=None, integration_account_name=None, location=None, metadata=None, name=None, resource_group_name=None, schema_type=None, tags=None, target_namespace=None, __props__=None, __name__=None, __opts__=None):
        """
        The integration account schema.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: The content.
        :param pulumi.Input[str] content_type: The content type.
        :param pulumi.Input[str] document_name: The document name.
        :param pulumi.Input[str] file_name: The file name.
        :param pulumi.Input[str] integration_account_name: The integration account name.
        :param pulumi.Input[str] location: The resource location.
        :param pulumi.Input[dict] metadata: The metadata.
        :param pulumi.Input[str] name: The integration account schema name.
        :param pulumi.Input[str] resource_group_name: The resource group name.
        :param pulumi.Input[str] schema_type: The schema type.
        :param pulumi.Input[dict] tags: The resource tags.
        :param pulumi.Input[str] target_namespace: The target namespace of the schema.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['content'] = content
            __props__['content_type'] = content_type
            __props__['document_name'] = document_name
            __props__['file_name'] = file_name
            if integration_account_name is None:
                raise TypeError("Missing required property 'integration_account_name'")
            __props__['integration_account_name'] = integration_account_name
            __props__['location'] = location
            __props__['metadata'] = metadata
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if schema_type is None:
                raise TypeError("Missing required property 'schema_type'")
            __props__['schema_type'] = schema_type
            __props__['tags'] = tags
            __props__['target_namespace'] = target_namespace
            __props__['changed_time'] = None
            __props__['content_link'] = None
            __props__['created_time'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:logic/v20160601:IntegrationAccountSchema")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(IntegrationAccountSchema, __self__).__init__(
            'azurerm:logic/v20190501:IntegrationAccountSchema',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing IntegrationAccountSchema resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return IntegrationAccountSchema(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
