# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetIntegrationAccountAgreementResult:
    """
    The integration account agreement.
    """
    def __init__(__self__, agreement_type=None, changed_time=None, content=None, created_time=None, guest_identity=None, guest_partner=None, host_identity=None, host_partner=None, location=None, metadata=None, name=None, tags=None, type=None):
        if agreement_type and not isinstance(agreement_type, str):
            raise TypeError("Expected argument 'agreement_type' to be a str")
        __self__.agreement_type = agreement_type
        """
        The agreement type.
        """
        if changed_time and not isinstance(changed_time, str):
            raise TypeError("Expected argument 'changed_time' to be a str")
        __self__.changed_time = changed_time
        """
        The changed time.
        """
        if content and not isinstance(content, dict):
            raise TypeError("Expected argument 'content' to be a dict")
        __self__.content = content
        """
        The agreement content.
        """
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        __self__.created_time = created_time
        """
        The created time.
        """
        if guest_identity and not isinstance(guest_identity, dict):
            raise TypeError("Expected argument 'guest_identity' to be a dict")
        __self__.guest_identity = guest_identity
        """
        The business identity of the guest partner.
        """
        if guest_partner and not isinstance(guest_partner, str):
            raise TypeError("Expected argument 'guest_partner' to be a str")
        __self__.guest_partner = guest_partner
        """
        The integration account partner that is set as guest partner for this agreement.
        """
        if host_identity and not isinstance(host_identity, dict):
            raise TypeError("Expected argument 'host_identity' to be a dict")
        __self__.host_identity = host_identity
        """
        The business identity of the host partner.
        """
        if host_partner and not isinstance(host_partner, str):
            raise TypeError("Expected argument 'host_partner' to be a str")
        __self__.host_partner = host_partner
        """
        The integration account partner that is set as host partner for this agreement.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The resource location.
        """
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        __self__.metadata = metadata
        """
        The metadata.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Gets the resource name.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Gets the resource type.
        """


class AwaitableGetIntegrationAccountAgreementResult(GetIntegrationAccountAgreementResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIntegrationAccountAgreementResult(
            agreement_type=self.agreement_type,
            changed_time=self.changed_time,
            content=self.content,
            created_time=self.created_time,
            guest_identity=self.guest_identity,
            guest_partner=self.guest_partner,
            host_identity=self.host_identity,
            host_partner=self.host_partner,
            location=self.location,
            metadata=self.metadata,
            name=self.name,
            tags=self.tags,
            type=self.type)


def get_integration_account_agreement(integration_account_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str integration_account_name: The integration account name.
    :param str name: The integration account agreement name.
    :param str resource_group_name: The resource group name.
    """
    __args__ = dict()
    __args__['integrationAccountName'] = integration_account_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:logic/v20190501:getIntegrationAccountAgreement', __args__, opts=opts).value

    return AwaitableGetIntegrationAccountAgreementResult(
        agreement_type=__ret__.get('agreementType'),
        changed_time=__ret__.get('changedTime'),
        content=__ret__.get('content'),
        created_time=__ret__.get('createdTime'),
        guest_identity=__ret__.get('guestIdentity'),
        guest_partner=__ret__.get('guestPartner'),
        host_identity=__ret__.get('hostIdentity'),
        host_partner=__ret__.get('hostPartner'),
        location=__ret__.get('location'),
        metadata=__ret__.get('metadata'),
        name=__ret__.get('name'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
