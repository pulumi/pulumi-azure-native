# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Agreement(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    The resource location.
    """
    name: pulumi.Output[str]
    """
    Gets the resource name.
    """
    properties: pulumi.Output[dict]
    """
    The integration account agreement properties.
      * `agreement_type` (`str`) - The agreement type.
      * `changed_time` (`str`) - The changed time.
      * `content` (`dict`) - The agreement content.
        * `a_s2` (`dict`) - The AS2 agreement content.
          * `receive_agreement` (`dict`) - The AS2 one-way receive agreement.
            * `protocol_settings` (`dict`) - The AS2 protocol settings.
              * `acknowledgement_connection_settings` (`dict`) - The acknowledgement connection settings.
                * `ignore_certificate_name_mismatch` (`bool`) - The value indicating whether to ignore mismatch in certificate name.
                * `keep_http_connection_alive` (`bool`) - The value indicating whether to keep the connection alive.
                * `support_http_status_code_continue` (`bool`) - The value indicating whether to support HTTP status code 'CONTINUE'.
                * `unfold_http_headers` (`bool`) - The value indicating whether to unfold the HTTP headers.

              * `envelope_settings` (`dict`) - The envelope settings.
                * `autogenerate_file_name` (`bool`) - The value indicating whether to auto generate file name.
                * `file_name_template` (`str`) - The template for file name.
                * `message_content_type` (`str`) - The message content type.
                * `suspend_message_on_file_name_generation_error` (`bool`) - The value indicating whether to suspend message on file name generation error.
                * `transmit_file_name_in_mime_header` (`bool`) - The value indicating whether to transmit file name in mime header.

              * `error_settings` (`dict`) - The error settings.
                * `resend_if_mdn_not_received` (`bool`) - The value indicating whether to resend message If MDN is not received.
                * `suspend_duplicate_message` (`bool`) - The value indicating whether to suspend duplicate message.

              * `mdn_settings` (`dict`) - The MDN settings.
                * `disposition_notification_to` (`str`) - The disposition notification to header value.
                * `mdn_text` (`str`) - The MDN text.
                * `mic_hashing_algorithm` (`str`) - The signing or hashing algorithm.
                * `need_mdn` (`bool`) - The value indicating whether to send or request a MDN.
                * `receipt_delivery_url` (`str`) - The receipt delivery URL.
                * `send_inbound_mdn_to_message_box` (`bool`) - The value indicating whether to send inbound MDN to message box.
                * `send_mdn_asynchronously` (`bool`) - The value indicating whether to send the asynchronous MDN.
                * `sign_mdn` (`bool`) - The value indicating whether the MDN needs to be signed or not.
                * `sign_outbound_mdn_if_optional` (`bool`) - The value indicating whether to sign the outbound MDN if optional.

              * `message_connection_settings` (`dict`) - The message connection settings.
                * `ignore_certificate_name_mismatch` (`bool`) - The value indicating whether to ignore mismatch in certificate name.
                * `keep_http_connection_alive` (`bool`) - The value indicating whether to keep the connection alive.
                * `support_http_status_code_continue` (`bool`) - The value indicating whether to support HTTP status code 'CONTINUE'.
                * `unfold_http_headers` (`bool`) - The value indicating whether to unfold the HTTP headers.

              * `security_settings` (`dict`) - The security settings.
                * `enable_nrr_for_inbound_decoded_messages` (`bool`) - The value indicating whether to enable NRR for inbound decoded messages.
                * `enable_nrr_for_inbound_encoded_messages` (`bool`) - The value indicating whether to enable NRR for inbound encoded messages.
                * `enable_nrr_for_inbound_mdn` (`bool`) - The value indicating whether to enable NRR for inbound MDN.
                * `enable_nrr_for_outbound_decoded_messages` (`bool`) - The value indicating whether to enable NRR for outbound decoded messages.
                * `enable_nrr_for_outbound_encoded_messages` (`bool`) - The value indicating whether to enable NRR for outbound encoded messages.
                * `enable_nrr_for_outbound_mdn` (`bool`) - The value indicating whether to enable NRR for outbound MDN.
                * `encryption_certificate_name` (`str`) - The name of the encryption certificate.
                * `override_group_signing_certificate` (`bool`) - The value indicating whether to send or request a MDN.
                * `sha2_algorithm_format` (`str`) - The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
                * `signing_certificate_name` (`str`) - The name of the signing certificate.

              * `validation_settings` (`dict`) - The validation settings.
                * `check_certificate_revocation_list_on_receive` (`bool`) - The value indicating whether to check for certificate revocation list on receive.
                * `check_certificate_revocation_list_on_send` (`bool`) - The value indicating whether to check for certificate revocation list on send.
                * `check_duplicate_message` (`bool`) - The value indicating whether to check for duplicate message.
                * `compress_message` (`bool`) - The value indicating whether the message has to be compressed.
                * `encrypt_message` (`bool`) - The value indicating whether the message has to be encrypted.
                * `encryption_algorithm` (`str`) - The encryption algorithm.
                * `interchange_duplicates_validity_days` (`float`) - The number of days to look back for duplicate interchange.
                * `override_message_properties` (`bool`) - The value indicating whether to override incoming message properties with those in agreement.
                * `sign_message` (`bool`) - The value indicating whether the message has to be signed.
                * `signing_algorithm` (`str`) - The signing algorithm.

            * `receiver_business_identity` (`dict`) - The receiver business identity
              * `qualifier` (`str`) - The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
              * `value` (`str`) - The user defined business identity value.

            * `sender_business_identity` (`dict`) - The sender business identity

          * `send_agreement` (`dict`) - The AS2 one-way send agreement.

        * `edifact` (`dict`) - The EDIFACT agreement content.
          * `receive_agreement` (`dict`) - The EDIFACT one-way receive agreement.
            * `protocol_settings` (`dict`) - The EDIFACT protocol settings.
              * `acknowledgement_settings` (`dict`) - The EDIFACT acknowledgement settings.
                * `acknowledgement_control_number_lower_bound` (`float`) - The acknowledgement control number lower bound.
                * `acknowledgement_control_number_prefix` (`str`) - The acknowledgement control number prefix.
                * `acknowledgement_control_number_suffix` (`str`) - The acknowledgement control number suffix.
                * `acknowledgement_control_number_upper_bound` (`float`) - The acknowledgement control number upper bound.
                * `batch_functional_acknowledgements` (`bool`) - The value indicating whether to batch functional acknowledgements.
                * `batch_technical_acknowledgements` (`bool`) - The value indicating whether to batch the technical acknowledgements.
                * `need_functional_acknowledgement` (`bool`) - The value indicating whether functional acknowledgement is needed.
                * `need_loop_for_valid_messages` (`bool`) - The value indicating whether a loop is needed for valid messages.
                * `need_technical_acknowledgement` (`bool`) - The value indicating whether technical acknowledgement is needed.
                * `rollover_acknowledgement_control_number` (`bool`) - The value indicating whether to rollover acknowledgement control number.
                * `send_synchronous_acknowledgement` (`bool`) - The value indicating whether to send synchronous acknowledgement.

              * `edifact_delimiter_overrides` (`list`) - The EDIFACT delimiter override settings.
                * `component_separator` (`float`) - The component separator.
                * `data_element_separator` (`float`) - The data element separator.
                * `decimal_point_indicator` (`str`) - The decimal point indicator.
                * `message_association_assigned_code` (`str`) - The message association assigned code.
                * `message_id` (`str`) - The message id.
                * `message_release` (`str`) - The message release.
                * `message_version` (`str`) - The message version.
                * `release_indicator` (`float`) - The release indicator.
                * `repetition_separator` (`float`) - The repetition separator.
                * `segment_terminator` (`float`) - The segment terminator.
                * `segment_terminator_suffix` (`str`) - The segment terminator suffix.
                * `target_namespace` (`str`) - The target namespace on which this delimiter settings has to be applied.

              * `envelope_overrides` (`list`) - The EDIFACT envelope override settings.
                * `application_password` (`str`) - The application password.
                * `association_assigned_code` (`str`) - The association assigned code.
                * `controlling_agency_code` (`str`) - The controlling agency code.
                * `functional_group_id` (`str`) - The functional group id.
                * `group_header_message_release` (`str`) - The group header message release.
                * `group_header_message_version` (`str`) - The group header message version.
                * `message_association_assigned_code` (`str`) - The message association assigned code.
                * `message_id` (`str`) - The message id on which this envelope settings has to be applied.
                * `message_release` (`str`) - The message release version on which this envelope settings has to be applied.
                * `message_version` (`str`) - The message version on which this envelope settings has to be applied.
                * `receiver_application_id` (`str`) - The receiver application id.
                * `receiver_application_qualifier` (`str`) - The receiver application qualifier.
                * `sender_application_id` (`str`) - The sender application id.
                * `sender_application_qualifier` (`str`) - The sender application qualifier.
                * `target_namespace` (`str`) - The target namespace on which this envelope settings has to be applied.

              * `envelope_settings` (`dict`) - The EDIFACT envelope settings.
                * `application_reference_id` (`str`) - The application reference id.
                * `apply_delimiter_string_advice` (`bool`) - The value indicating whether to apply delimiter string advice.
                * `communication_agreement_id` (`str`) - The communication agreement id.
                * `create_grouping_segments` (`bool`) - The value indicating whether to create grouping segments.
                * `enable_default_group_headers` (`bool`) - The value indicating whether to enable default group headers.
                * `functional_group_id` (`str`) - The functional group id.
                * `group_application_password` (`str`) - The group application password.
                * `group_application_receiver_id` (`str`) - The group application receiver id.
                * `group_application_receiver_qualifier` (`str`) - The group application receiver qualifier.
                * `group_application_sender_id` (`str`) - The group application sender id.
                * `group_application_sender_qualifier` (`str`) - The group application sender qualifier.
                * `group_association_assigned_code` (`str`) - The group association assigned code.
                * `group_control_number_lower_bound` (`float`) - The group control number lower bound.
                * `group_control_number_prefix` (`str`) - The group control number prefix.
                * `group_control_number_suffix` (`str`) - The group control number suffix.
                * `group_control_number_upper_bound` (`float`) - The group control number upper bound.
                * `group_controlling_agency_code` (`str`) - The group controlling agency code.
                * `group_message_release` (`str`) - The group message release.
                * `group_message_version` (`str`) - The group message version.
                * `interchange_control_number_lower_bound` (`float`) - The interchange control number lower bound.
                * `interchange_control_number_prefix` (`str`) - The interchange control number prefix.
                * `interchange_control_number_suffix` (`str`) - The interchange control number suffix.
                * `interchange_control_number_upper_bound` (`float`) - The interchange control number upper bound.
                * `is_test_interchange` (`bool`) - The value indicating whether the message is a test interchange.
                * `overwrite_existing_transaction_set_control_number` (`bool`) - The value indicating whether to overwrite existing transaction set control number.
                * `processing_priority_code` (`str`) - The processing priority code.
                * `receiver_internal_identification` (`str`) - The receiver internal identification.
                * `receiver_internal_sub_identification` (`str`) - The receiver internal sub identification.
                * `receiver_reverse_routing_address` (`str`) - The receiver reverse routing address.
                * `recipient_reference_password_qualifier` (`str`) - The recipient reference password qualifier.
                * `recipient_reference_password_value` (`str`) - The recipient reference password value.
                * `rollover_group_control_number` (`bool`) - The value indicating whether to rollover group control number.
                * `rollover_interchange_control_number` (`bool`) - The value indicating whether to rollover interchange control number.
                * `rollover_transaction_set_control_number` (`bool`) - The value indicating whether to rollover transaction set control number.
                * `sender_internal_identification` (`str`) - The sender internal identification.
                * `sender_internal_sub_identification` (`str`) - The sender internal sub identification.
                * `sender_reverse_routing_address` (`str`) - The sender reverse routing address.
                * `transaction_set_control_number_lower_bound` (`float`) - The transaction set control number lower bound.
                * `transaction_set_control_number_prefix` (`str`) - The transaction set control number prefix.
                * `transaction_set_control_number_suffix` (`str`) - The transaction set control number suffix.
                * `transaction_set_control_number_upper_bound` (`float`) - The transaction set control number upper bound.

              * `framing_settings` (`dict`) - The EDIFACT framing settings.
                * `character_encoding` (`str`) - The character encoding.
                * `character_set` (`str`) - The EDIFACT frame setting characterSet.
                * `component_separator` (`float`) - The component separator.
                * `data_element_separator` (`float`) - The data element separator.
                * `decimal_point_indicator` (`str`) - The EDIFACT frame setting decimal indicator.
                * `protocol_version` (`float`) - The protocol version.
                * `release_indicator` (`float`) - The release indicator.
                * `repetition_separator` (`float`) - The repetition separator.
                * `segment_terminator` (`float`) - The segment terminator.
                * `segment_terminator_suffix` (`str`) - The EDIFACT frame setting segment terminator suffix.
                * `service_code_list_directory_version` (`str`) - The service code list directory version.

              * `message_filter` (`dict`) - The EDIFACT message filter.
                * `message_filter_type` (`str`) - The message filter type.

              * `message_filter_list` (`list`) - The EDIFACT message filter list.
                * `message_id` (`str`) - The message id on which this envelope settings has to be applied.

              * `processing_settings` (`dict`) - The EDIFACT processing Settings.
                * `create_empty_xml_tags_for_trailing_separators` (`bool`) - The value indicating whether to create empty xml tags for trailing separators.
                * `mask_security_info` (`bool`) - The value indicating whether to mask security information.
                * `preserve_interchange` (`bool`) - The value indicating whether to preserve interchange.
                * `suspend_interchange_on_error` (`bool`) - The value indicating whether to suspend interchange on error.
                * `use_dot_as_decimal_separator` (`bool`) - The value indicating whether to use dot as decimal separator.

              * `schema_references` (`list`) - The EDIFACT schema references.
                * `association_assigned_code` (`str`) - The association assigned code.
                * `message_id` (`str`) - The message id.
                * `message_release` (`str`) - The message release version.
                * `message_version` (`str`) - The message version.
                * `schema_name` (`str`) - The schema name.
                * `sender_application_id` (`str`) - The sender application id.
                * `sender_application_qualifier` (`str`) - The sender application qualifier.

              * `validation_overrides` (`list`) - The EDIFACT validation override settings.
                * `allow_leading_and_trailing_spaces_and_zeroes` (`bool`) - The value indicating whether to allow leading and trailing spaces and zeroes.
                * `enforce_character_set` (`bool`) - The value indicating whether to validate character Set.
                * `message_id` (`str`) - The message id on which the validation settings has to be applied.
                * `trailing_separator_policy` (`str`) - The trailing separator policy.
                * `trim_leading_and_trailing_spaces_and_zeroes` (`bool`) - The value indicating whether to trim leading and trailing spaces and zeroes.
                * `validate_edi_types` (`bool`) - The value indicating whether to validate EDI types.
                * `validate_xsd_types` (`bool`) - The value indicating whether to validate XSD types.

              * `validation_settings` (`dict`) - The EDIFACT validation settings.
                * `allow_leading_and_trailing_spaces_and_zeroes` (`bool`) - The value indicating whether to allow leading and trailing spaces and zeroes.
                * `check_duplicate_group_control_number` (`bool`) - The value indicating whether to check for duplicate group control number.
                * `check_duplicate_interchange_control_number` (`bool`) - The value indicating whether to check for duplicate interchange control number.
                * `check_duplicate_transaction_set_control_number` (`bool`) - The value indicating whether to check for duplicate transaction set control number.
                * `interchange_control_number_validity_days` (`float`) - The validity period of interchange control number.
                * `trailing_separator_policy` (`str`) - The trailing separator policy.
                * `trim_leading_and_trailing_spaces_and_zeroes` (`bool`) - The value indicating whether to trim leading and trailing spaces and zeroes.
                * `validate_character_set` (`bool`) - The value indicating whether to validate character set in the message.
                * `validate_edi_types` (`bool`) - The value indicating whether to Whether to validate EDI types.
                * `validate_xsd_types` (`bool`) - The value indicating whether to Whether to validate XSD types.

            * `receiver_business_identity` (`dict`) - The receiver business identity
            * `sender_business_identity` (`dict`) - The sender business identity

          * `send_agreement` (`dict`) - The EDIFACT one-way send agreement.

        * `x12` (`dict`) - The X12 agreement content.
          * `receive_agreement` (`dict`) - The X12 one-way receive agreement.
            * `protocol_settings` (`dict`) - The X12 protocol settings.
              * `acknowledgement_settings` (`dict`) - The X12 acknowledgment settings.
                * `acknowledgement_control_number_lower_bound` (`float`) - The acknowledgement control number lower bound.
                * `acknowledgement_control_number_prefix` (`str`) - The acknowledgement control number prefix.
                * `acknowledgement_control_number_suffix` (`str`) - The acknowledgement control number suffix.
                * `acknowledgement_control_number_upper_bound` (`float`) - The acknowledgement control number upper bound.
                * `batch_functional_acknowledgements` (`bool`) - The value indicating whether to batch functional acknowledgements.
                * `batch_implementation_acknowledgements` (`bool`) - The value indicating whether to batch implementation acknowledgements.
                * `batch_technical_acknowledgements` (`bool`) - The value indicating whether to batch the technical acknowledgements.
                * `functional_acknowledgement_version` (`str`) - The functional acknowledgement version.
                * `implementation_acknowledgement_version` (`str`) - The implementation acknowledgement version.
                * `need_functional_acknowledgement` (`bool`) - The value indicating whether functional acknowledgement is needed.
                * `need_implementation_acknowledgement` (`bool`) - The value indicating whether implementation acknowledgement is needed.
                * `need_loop_for_valid_messages` (`bool`) - The value indicating whether a loop is needed for valid messages.
                * `need_technical_acknowledgement` (`bool`) - The value indicating whether technical acknowledgement is needed.
                * `rollover_acknowledgement_control_number` (`bool`) - The value indicating whether to rollover acknowledgement control number.
                * `send_synchronous_acknowledgement` (`bool`) - The value indicating whether to send synchronous acknowledgement.

              * `envelope_overrides` (`list`) - The X12 envelope override settings.
                * `date_format` (`str`) - The date format.
                * `functional_identifier_code` (`str`) - The functional identifier code.
                * `header_version` (`str`) - The header version.
                * `message_id` (`str`) - The message id on which this envelope settings has to be applied.
                * `protocol_version` (`str`) - The protocol version on which this envelope settings has to be applied.
                * `receiver_application_id` (`str`) - The receiver application id.
                * `responsible_agency_code` (`str`) - The responsible agency code.
                * `sender_application_id` (`str`) - The sender application id.
                * `target_namespace` (`str`) - The target namespace on which this envelope settings has to be applied.
                * `time_format` (`str`) - The time format.

              * `envelope_settings` (`dict`) - The X12 envelope settings.
                * `control_standards_id` (`float`) - The controls standards id.
                * `control_version_number` (`str`) - The control version number.
                * `enable_default_group_headers` (`bool`) - The value indicating whether to enable default group headers.
                * `functional_group_id` (`str`) - The functional group id.
                * `group_control_number_lower_bound` (`float`) - The group control number lower bound.
                * `group_control_number_upper_bound` (`float`) - The group control number upper bound.
                * `group_header_agency_code` (`str`) - The group header agency code.
                * `group_header_date_format` (`str`) - The group header date format.
                * `group_header_time_format` (`str`) - The group header time format.
                * `group_header_version` (`str`) - The group header version.
                * `interchange_control_number_lower_bound` (`float`) - The interchange  control number lower bound.
                * `interchange_control_number_upper_bound` (`float`) - The interchange  control number upper bound.
                * `overwrite_existing_transaction_set_control_number` (`bool`) - The value indicating whether to overwrite existing transaction set control number.
                * `receiver_application_id` (`str`) - The receiver application id.
                * `rollover_group_control_number` (`bool`) - The value indicating whether to rollover group control number.
                * `rollover_interchange_control_number` (`bool`) - The value indicating whether to rollover interchange control number.
                * `rollover_transaction_set_control_number` (`bool`) - The value indicating whether to rollover transaction set control number.
                * `sender_application_id` (`str`) - The sender application id.
                * `transaction_set_control_number_lower_bound` (`float`) - The transaction set control number lower bound.
                * `transaction_set_control_number_prefix` (`str`) - The transaction set control number prefix.
                * `transaction_set_control_number_suffix` (`str`) - The transaction set control number suffix.
                * `transaction_set_control_number_upper_bound` (`float`) - The transaction set control number upper bound.
                * `usage_indicator` (`str`) - The usage indicator.
                * `use_control_standards_id_as_repetition_character` (`bool`) - The value indicating whether to use control standards id as repetition character.

              * `framing_settings` (`dict`) - The X12 framing settings.
                * `character_set` (`str`) - The X12 character set.
                * `component_separator` (`float`) - The component separator.
                * `data_element_separator` (`float`) - The data element separator.
                * `replace_character` (`float`) - The replacement character.
                * `replace_separators_in_payload` (`bool`) - The value indicating whether to replace separators in payload.
                * `segment_terminator` (`float`) - The segment terminator.
                * `segment_terminator_suffix` (`str`) - The segment terminator suffix.

              * `message_filter` (`dict`) - The X12 message filter.
                * `message_filter_type` (`str`) - The message filter type.

              * `message_filter_list` (`list`) - The X12 message filter list.
                * `message_id` (`str`) - The message id.

              * `processing_settings` (`dict`) - The X12 processing settings.
                * `convert_implied_decimal` (`bool`) - The value indicating whether to convert numerical type to implied decimal.
                * `create_empty_xml_tags_for_trailing_separators` (`bool`) - The value indicating whether to create empty xml tags for trailing separators.
                * `mask_security_info` (`bool`) - The value indicating whether to mask security information.
                * `preserve_interchange` (`bool`) - The value indicating whether to preserve interchange.
                * `suspend_interchange_on_error` (`bool`) - The value indicating whether to suspend interchange on error.
                * `use_dot_as_decimal_separator` (`bool`) - The value indicating whether to use dot as decimal separator.

              * `schema_references` (`list`) - The X12 schema references.
                * `message_id` (`str`) - The message id.
                * `schema_name` (`str`) - The schema name.
                * `schema_version` (`str`) - The schema version.
                * `sender_application_id` (`str`) - The sender application id.

              * `security_settings` (`dict`) - The X12 security settings.
                * `authorization_qualifier` (`str`) - The authorization qualifier.
                * `authorization_value` (`str`) - The authorization value.
                * `password_value` (`str`) - The password value.
                * `security_qualifier` (`str`) - The security qualifier.

              * `validation_overrides` (`list`) - The X12 validation override settings.
                * `allow_leading_and_trailing_spaces_and_zeroes` (`bool`) - The value indicating whether to allow leading and trailing spaces and zeroes.
                * `message_id` (`str`) - The message id on which the validation settings has to be applied.
                * `trailing_separator_policy` (`str`) - The trailing separator policy.
                * `trim_leading_and_trailing_spaces_and_zeroes` (`bool`) - The value indicating whether to trim leading and trailing spaces and zeroes.
                * `validate_character_set` (`bool`) - The value indicating whether to validate character Set.
                * `validate_edi_types` (`bool`) - The value indicating whether to validate EDI types.
                * `validate_xsd_types` (`bool`) - The value indicating whether to validate XSD types.

              * `validation_settings` (`dict`) - The X12 validation settings.
                * `allow_leading_and_trailing_spaces_and_zeroes` (`bool`) - The value indicating whether to allow leading and trailing spaces and zeroes.
                * `check_duplicate_group_control_number` (`bool`) - The value indicating whether to check for duplicate group control number.
                * `check_duplicate_interchange_control_number` (`bool`) - The value indicating whether to check for duplicate interchange control number.
                * `check_duplicate_transaction_set_control_number` (`bool`) - The value indicating whether to check for duplicate transaction set control number.
                * `interchange_control_number_validity_days` (`float`) - The validity period of interchange control number.
                * `trailing_separator_policy` (`str`) - The trailing separator policy.
                * `trim_leading_and_trailing_spaces_and_zeroes` (`bool`) - The value indicating whether to trim leading and trailing spaces and zeroes.
                * `validate_character_set` (`bool`) - The value indicating whether to validate character set in the message.
                * `validate_edi_types` (`bool`) - The value indicating whether to Whether to validate EDI types.
                * `validate_xsd_types` (`bool`) - The value indicating whether to Whether to validate XSD types.

              * `x12_delimiter_overrides` (`list`) - The X12 delimiter override settings.
                * `component_separator` (`float`) - The component separator.
                * `data_element_separator` (`float`) - The data element separator.
                * `message_id` (`str`) - The message id.
                * `protocol_version` (`str`) - The protocol version.
                * `replace_character` (`float`) - The replacement character.
                * `replace_separators_in_payload` (`bool`) - The value indicating whether to replace separators in payload.
                * `segment_terminator` (`float`) - The segment terminator.
                * `segment_terminator_suffix` (`str`) - The segment terminator suffix.
                * `target_namespace` (`str`) - The target namespace on which this delimiter settings has to be applied.

            * `receiver_business_identity` (`dict`) - The receiver business identity
            * `sender_business_identity` (`dict`) - The sender business identity

          * `send_agreement` (`dict`) - The X12 one-way send agreement.

      * `created_time` (`str`) - The created time.
      * `guest_identity` (`dict`) - The business identity of the guest partner.
      * `guest_partner` (`str`) - The integration account partner that is set as guest partner for this agreement.
      * `host_identity` (`dict`) - The business identity of the host partner.
      * `host_partner` (`str`) - The integration account partner that is set as host partner for this agreement.
      * `metadata` (`dict`) - The metadata.
    """
    tags: pulumi.Output[dict]
    """
    The resource tags.
    """
    type: pulumi.Output[str]
    """
    Gets the resource type.
    """
    def __init__(__self__, resource_name, opts=None, agreement_type=None, content=None, guest_identity=None, guest_partner=None, host_identity=None, host_partner=None, integration_account_name=None, location=None, metadata=None, name=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        The integration account agreement.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] agreement_type: The agreement type.
        :param pulumi.Input[dict] content: The agreement content.
        :param pulumi.Input[dict] guest_identity: The business identity of the guest partner.
        :param pulumi.Input[str] guest_partner: The integration account partner that is set as guest partner for this agreement.
        :param pulumi.Input[dict] host_identity: The business identity of the host partner.
        :param pulumi.Input[str] host_partner: The integration account partner that is set as host partner for this agreement.
        :param pulumi.Input[str] integration_account_name: The integration account name.
        :param pulumi.Input[str] location: The resource location.
        :param pulumi.Input[dict] metadata: The metadata.
        :param pulumi.Input[str] name: The integration account agreement name.
        :param pulumi.Input[str] resource_group_name: The resource group name.
        :param pulumi.Input[dict] tags: The resource tags.

        The **content** object supports the following:

          * `a_s2` (`pulumi.Input[dict]`) - The AS2 agreement content.
            * `receive_agreement` (`pulumi.Input[dict]`) - The AS2 one-way receive agreement.
              * `protocol_settings` (`pulumi.Input[dict]`) - The AS2 protocol settings.
                * `acknowledgement_connection_settings` (`pulumi.Input[dict]`) - The acknowledgement connection settings.
                  * `ignore_certificate_name_mismatch` (`pulumi.Input[bool]`) - The value indicating whether to ignore mismatch in certificate name.
                  * `keep_http_connection_alive` (`pulumi.Input[bool]`) - The value indicating whether to keep the connection alive.
                  * `support_http_status_code_continue` (`pulumi.Input[bool]`) - The value indicating whether to support HTTP status code 'CONTINUE'.
                  * `unfold_http_headers` (`pulumi.Input[bool]`) - The value indicating whether to unfold the HTTP headers.

                * `envelope_settings` (`pulumi.Input[dict]`) - The envelope settings.
                  * `autogenerate_file_name` (`pulumi.Input[bool]`) - The value indicating whether to auto generate file name.
                  * `file_name_template` (`pulumi.Input[str]`) - The template for file name.
                  * `message_content_type` (`pulumi.Input[str]`) - The message content type.
                  * `suspend_message_on_file_name_generation_error` (`pulumi.Input[bool]`) - The value indicating whether to suspend message on file name generation error.
                  * `transmit_file_name_in_mime_header` (`pulumi.Input[bool]`) - The value indicating whether to transmit file name in mime header.

                * `error_settings` (`pulumi.Input[dict]`) - The error settings.
                  * `resend_if_mdn_not_received` (`pulumi.Input[bool]`) - The value indicating whether to resend message If MDN is not received.
                  * `suspend_duplicate_message` (`pulumi.Input[bool]`) - The value indicating whether to suspend duplicate message.

                * `mdn_settings` (`pulumi.Input[dict]`) - The MDN settings.
                  * `disposition_notification_to` (`pulumi.Input[str]`) - The disposition notification to header value.
                  * `mdn_text` (`pulumi.Input[str]`) - The MDN text.
                  * `mic_hashing_algorithm` (`pulumi.Input[str]`) - The signing or hashing algorithm.
                  * `need_mdn` (`pulumi.Input[bool]`) - The value indicating whether to send or request a MDN.
                  * `receipt_delivery_url` (`pulumi.Input[str]`) - The receipt delivery URL.
                  * `send_inbound_mdn_to_message_box` (`pulumi.Input[bool]`) - The value indicating whether to send inbound MDN to message box.
                  * `send_mdn_asynchronously` (`pulumi.Input[bool]`) - The value indicating whether to send the asynchronous MDN.
                  * `sign_mdn` (`pulumi.Input[bool]`) - The value indicating whether the MDN needs to be signed or not.
                  * `sign_outbound_mdn_if_optional` (`pulumi.Input[bool]`) - The value indicating whether to sign the outbound MDN if optional.

                * `message_connection_settings` (`pulumi.Input[dict]`) - The message connection settings.
                  * `ignore_certificate_name_mismatch` (`pulumi.Input[bool]`) - The value indicating whether to ignore mismatch in certificate name.
                  * `keep_http_connection_alive` (`pulumi.Input[bool]`) - The value indicating whether to keep the connection alive.
                  * `support_http_status_code_continue` (`pulumi.Input[bool]`) - The value indicating whether to support HTTP status code 'CONTINUE'.
                  * `unfold_http_headers` (`pulumi.Input[bool]`) - The value indicating whether to unfold the HTTP headers.

                * `security_settings` (`pulumi.Input[dict]`) - The security settings.
                  * `enable_nrr_for_inbound_decoded_messages` (`pulumi.Input[bool]`) - The value indicating whether to enable NRR for inbound decoded messages.
                  * `enable_nrr_for_inbound_encoded_messages` (`pulumi.Input[bool]`) - The value indicating whether to enable NRR for inbound encoded messages.
                  * `enable_nrr_for_inbound_mdn` (`pulumi.Input[bool]`) - The value indicating whether to enable NRR for inbound MDN.
                  * `enable_nrr_for_outbound_decoded_messages` (`pulumi.Input[bool]`) - The value indicating whether to enable NRR for outbound decoded messages.
                  * `enable_nrr_for_outbound_encoded_messages` (`pulumi.Input[bool]`) - The value indicating whether to enable NRR for outbound encoded messages.
                  * `enable_nrr_for_outbound_mdn` (`pulumi.Input[bool]`) - The value indicating whether to enable NRR for outbound MDN.
                  * `encryption_certificate_name` (`pulumi.Input[str]`) - The name of the encryption certificate.
                  * `override_group_signing_certificate` (`pulumi.Input[bool]`) - The value indicating whether to send or request a MDN.
                  * `sha2_algorithm_format` (`pulumi.Input[str]`) - The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
                  * `signing_certificate_name` (`pulumi.Input[str]`) - The name of the signing certificate.

                * `validation_settings` (`pulumi.Input[dict]`) - The validation settings.
                  * `check_certificate_revocation_list_on_receive` (`pulumi.Input[bool]`) - The value indicating whether to check for certificate revocation list on receive.
                  * `check_certificate_revocation_list_on_send` (`pulumi.Input[bool]`) - The value indicating whether to check for certificate revocation list on send.
                  * `check_duplicate_message` (`pulumi.Input[bool]`) - The value indicating whether to check for duplicate message.
                  * `compress_message` (`pulumi.Input[bool]`) - The value indicating whether the message has to be compressed.
                  * `encrypt_message` (`pulumi.Input[bool]`) - The value indicating whether the message has to be encrypted.
                  * `encryption_algorithm` (`pulumi.Input[str]`) - The encryption algorithm.
                  * `interchange_duplicates_validity_days` (`pulumi.Input[float]`) - The number of days to look back for duplicate interchange.
                  * `override_message_properties` (`pulumi.Input[bool]`) - The value indicating whether to override incoming message properties with those in agreement.
                  * `sign_message` (`pulumi.Input[bool]`) - The value indicating whether the message has to be signed.
                  * `signing_algorithm` (`pulumi.Input[str]`) - The signing algorithm.

              * `receiver_business_identity` (`pulumi.Input[dict]`) - The receiver business identity
                * `qualifier` (`pulumi.Input[str]`) - The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
                * `value` (`pulumi.Input[str]`) - The user defined business identity value.

              * `sender_business_identity` (`pulumi.Input[dict]`) - The sender business identity

            * `send_agreement` (`pulumi.Input[dict]`) - The AS2 one-way send agreement.

          * `edifact` (`pulumi.Input[dict]`) - The EDIFACT agreement content.
            * `receive_agreement` (`pulumi.Input[dict]`) - The EDIFACT one-way receive agreement.
              * `protocol_settings` (`pulumi.Input[dict]`) - The EDIFACT protocol settings.
                * `acknowledgement_settings` (`pulumi.Input[dict]`) - The EDIFACT acknowledgement settings.
                  * `acknowledgement_control_number_lower_bound` (`pulumi.Input[float]`) - The acknowledgement control number lower bound.
                  * `acknowledgement_control_number_prefix` (`pulumi.Input[str]`) - The acknowledgement control number prefix.
                  * `acknowledgement_control_number_suffix` (`pulumi.Input[str]`) - The acknowledgement control number suffix.
                  * `acknowledgement_control_number_upper_bound` (`pulumi.Input[float]`) - The acknowledgement control number upper bound.
                  * `batch_functional_acknowledgements` (`pulumi.Input[bool]`) - The value indicating whether to batch functional acknowledgements.
                  * `batch_technical_acknowledgements` (`pulumi.Input[bool]`) - The value indicating whether to batch the technical acknowledgements.
                  * `need_functional_acknowledgement` (`pulumi.Input[bool]`) - The value indicating whether functional acknowledgement is needed.
                  * `need_loop_for_valid_messages` (`pulumi.Input[bool]`) - The value indicating whether a loop is needed for valid messages.
                  * `need_technical_acknowledgement` (`pulumi.Input[bool]`) - The value indicating whether technical acknowledgement is needed.
                  * `rollover_acknowledgement_control_number` (`pulumi.Input[bool]`) - The value indicating whether to rollover acknowledgement control number.
                  * `send_synchronous_acknowledgement` (`pulumi.Input[bool]`) - The value indicating whether to send synchronous acknowledgement.

                * `edifact_delimiter_overrides` (`pulumi.Input[list]`) - The EDIFACT delimiter override settings.
                  * `component_separator` (`pulumi.Input[float]`) - The component separator.
                  * `data_element_separator` (`pulumi.Input[float]`) - The data element separator.
                  * `decimal_point_indicator` (`pulumi.Input[str]`) - The decimal point indicator.
                  * `message_association_assigned_code` (`pulumi.Input[str]`) - The message association assigned code.
                  * `message_id` (`pulumi.Input[str]`) - The message id.
                  * `message_release` (`pulumi.Input[str]`) - The message release.
                  * `message_version` (`pulumi.Input[str]`) - The message version.
                  * `release_indicator` (`pulumi.Input[float]`) - The release indicator.
                  * `repetition_separator` (`pulumi.Input[float]`) - The repetition separator.
                  * `segment_terminator` (`pulumi.Input[float]`) - The segment terminator.
                  * `segment_terminator_suffix` (`pulumi.Input[str]`) - The segment terminator suffix.
                  * `target_namespace` (`pulumi.Input[str]`) - The target namespace on which this delimiter settings has to be applied.

                * `envelope_overrides` (`pulumi.Input[list]`) - The EDIFACT envelope override settings.
                  * `application_password` (`pulumi.Input[str]`) - The application password.
                  * `association_assigned_code` (`pulumi.Input[str]`) - The association assigned code.
                  * `controlling_agency_code` (`pulumi.Input[str]`) - The controlling agency code.
                  * `functional_group_id` (`pulumi.Input[str]`) - The functional group id.
                  * `group_header_message_release` (`pulumi.Input[str]`) - The group header message release.
                  * `group_header_message_version` (`pulumi.Input[str]`) - The group header message version.
                  * `message_association_assigned_code` (`pulumi.Input[str]`) - The message association assigned code.
                  * `message_id` (`pulumi.Input[str]`) - The message id on which this envelope settings has to be applied.
                  * `message_release` (`pulumi.Input[str]`) - The message release version on which this envelope settings has to be applied.
                  * `message_version` (`pulumi.Input[str]`) - The message version on which this envelope settings has to be applied.
                  * `receiver_application_id` (`pulumi.Input[str]`) - The receiver application id.
                  * `receiver_application_qualifier` (`pulumi.Input[str]`) - The receiver application qualifier.
                  * `sender_application_id` (`pulumi.Input[str]`) - The sender application id.
                  * `sender_application_qualifier` (`pulumi.Input[str]`) - The sender application qualifier.
                  * `target_namespace` (`pulumi.Input[str]`) - The target namespace on which this envelope settings has to be applied.

                * `envelope_settings` (`pulumi.Input[dict]`) - The EDIFACT envelope settings.
                  * `application_reference_id` (`pulumi.Input[str]`) - The application reference id.
                  * `apply_delimiter_string_advice` (`pulumi.Input[bool]`) - The value indicating whether to apply delimiter string advice.
                  * `communication_agreement_id` (`pulumi.Input[str]`) - The communication agreement id.
                  * `create_grouping_segments` (`pulumi.Input[bool]`) - The value indicating whether to create grouping segments.
                  * `enable_default_group_headers` (`pulumi.Input[bool]`) - The value indicating whether to enable default group headers.
                  * `functional_group_id` (`pulumi.Input[str]`) - The functional group id.
                  * `group_application_password` (`pulumi.Input[str]`) - The group application password.
                  * `group_application_receiver_id` (`pulumi.Input[str]`) - The group application receiver id.
                  * `group_application_receiver_qualifier` (`pulumi.Input[str]`) - The group application receiver qualifier.
                  * `group_application_sender_id` (`pulumi.Input[str]`) - The group application sender id.
                  * `group_application_sender_qualifier` (`pulumi.Input[str]`) - The group application sender qualifier.
                  * `group_association_assigned_code` (`pulumi.Input[str]`) - The group association assigned code.
                  * `group_control_number_lower_bound` (`pulumi.Input[float]`) - The group control number lower bound.
                  * `group_control_number_prefix` (`pulumi.Input[str]`) - The group control number prefix.
                  * `group_control_number_suffix` (`pulumi.Input[str]`) - The group control number suffix.
                  * `group_control_number_upper_bound` (`pulumi.Input[float]`) - The group control number upper bound.
                  * `group_controlling_agency_code` (`pulumi.Input[str]`) - The group controlling agency code.
                  * `group_message_release` (`pulumi.Input[str]`) - The group message release.
                  * `group_message_version` (`pulumi.Input[str]`) - The group message version.
                  * `interchange_control_number_lower_bound` (`pulumi.Input[float]`) - The interchange control number lower bound.
                  * `interchange_control_number_prefix` (`pulumi.Input[str]`) - The interchange control number prefix.
                  * `interchange_control_number_suffix` (`pulumi.Input[str]`) - The interchange control number suffix.
                  * `interchange_control_number_upper_bound` (`pulumi.Input[float]`) - The interchange control number upper bound.
                  * `is_test_interchange` (`pulumi.Input[bool]`) - The value indicating whether the message is a test interchange.
                  * `overwrite_existing_transaction_set_control_number` (`pulumi.Input[bool]`) - The value indicating whether to overwrite existing transaction set control number.
                  * `processing_priority_code` (`pulumi.Input[str]`) - The processing priority code.
                  * `receiver_internal_identification` (`pulumi.Input[str]`) - The receiver internal identification.
                  * `receiver_internal_sub_identification` (`pulumi.Input[str]`) - The receiver internal sub identification.
                  * `receiver_reverse_routing_address` (`pulumi.Input[str]`) - The receiver reverse routing address.
                  * `recipient_reference_password_qualifier` (`pulumi.Input[str]`) - The recipient reference password qualifier.
                  * `recipient_reference_password_value` (`pulumi.Input[str]`) - The recipient reference password value.
                  * `rollover_group_control_number` (`pulumi.Input[bool]`) - The value indicating whether to rollover group control number.
                  * `rollover_interchange_control_number` (`pulumi.Input[bool]`) - The value indicating whether to rollover interchange control number.
                  * `rollover_transaction_set_control_number` (`pulumi.Input[bool]`) - The value indicating whether to rollover transaction set control number.
                  * `sender_internal_identification` (`pulumi.Input[str]`) - The sender internal identification.
                  * `sender_internal_sub_identification` (`pulumi.Input[str]`) - The sender internal sub identification.
                  * `sender_reverse_routing_address` (`pulumi.Input[str]`) - The sender reverse routing address.
                  * `transaction_set_control_number_lower_bound` (`pulumi.Input[float]`) - The transaction set control number lower bound.
                  * `transaction_set_control_number_prefix` (`pulumi.Input[str]`) - The transaction set control number prefix.
                  * `transaction_set_control_number_suffix` (`pulumi.Input[str]`) - The transaction set control number suffix.
                  * `transaction_set_control_number_upper_bound` (`pulumi.Input[float]`) - The transaction set control number upper bound.

                * `framing_settings` (`pulumi.Input[dict]`) - The EDIFACT framing settings.
                  * `character_encoding` (`pulumi.Input[str]`) - The character encoding.
                  * `character_set` (`pulumi.Input[str]`) - The EDIFACT frame setting characterSet.
                  * `component_separator` (`pulumi.Input[float]`) - The component separator.
                  * `data_element_separator` (`pulumi.Input[float]`) - The data element separator.
                  * `decimal_point_indicator` (`pulumi.Input[str]`) - The EDIFACT frame setting decimal indicator.
                  * `protocol_version` (`pulumi.Input[float]`) - The protocol version.
                  * `release_indicator` (`pulumi.Input[float]`) - The release indicator.
                  * `repetition_separator` (`pulumi.Input[float]`) - The repetition separator.
                  * `segment_terminator` (`pulumi.Input[float]`) - The segment terminator.
                  * `segment_terminator_suffix` (`pulumi.Input[str]`) - The EDIFACT frame setting segment terminator suffix.
                  * `service_code_list_directory_version` (`pulumi.Input[str]`) - The service code list directory version.

                * `message_filter` (`pulumi.Input[dict]`) - The EDIFACT message filter.
                  * `message_filter_type` (`pulumi.Input[str]`) - The message filter type.

                * `message_filter_list` (`pulumi.Input[list]`) - The EDIFACT message filter list.
                  * `message_id` (`pulumi.Input[str]`) - The message id on which this envelope settings has to be applied.

                * `processing_settings` (`pulumi.Input[dict]`) - The EDIFACT processing Settings.
                  * `create_empty_xml_tags_for_trailing_separators` (`pulumi.Input[bool]`) - The value indicating whether to create empty xml tags for trailing separators.
                  * `mask_security_info` (`pulumi.Input[bool]`) - The value indicating whether to mask security information.
                  * `preserve_interchange` (`pulumi.Input[bool]`) - The value indicating whether to preserve interchange.
                  * `suspend_interchange_on_error` (`pulumi.Input[bool]`) - The value indicating whether to suspend interchange on error.
                  * `use_dot_as_decimal_separator` (`pulumi.Input[bool]`) - The value indicating whether to use dot as decimal separator.

                * `schema_references` (`pulumi.Input[list]`) - The EDIFACT schema references.
                  * `association_assigned_code` (`pulumi.Input[str]`) - The association assigned code.
                  * `message_id` (`pulumi.Input[str]`) - The message id.
                  * `message_release` (`pulumi.Input[str]`) - The message release version.
                  * `message_version` (`pulumi.Input[str]`) - The message version.
                  * `schema_name` (`pulumi.Input[str]`) - The schema name.
                  * `sender_application_id` (`pulumi.Input[str]`) - The sender application id.
                  * `sender_application_qualifier` (`pulumi.Input[str]`) - The sender application qualifier.

                * `validation_overrides` (`pulumi.Input[list]`) - The EDIFACT validation override settings.
                  * `allow_leading_and_trailing_spaces_and_zeroes` (`pulumi.Input[bool]`) - The value indicating whether to allow leading and trailing spaces and zeroes.
                  * `enforce_character_set` (`pulumi.Input[bool]`) - The value indicating whether to validate character Set.
                  * `message_id` (`pulumi.Input[str]`) - The message id on which the validation settings has to be applied.
                  * `trailing_separator_policy` (`pulumi.Input[str]`) - The trailing separator policy.
                  * `trim_leading_and_trailing_spaces_and_zeroes` (`pulumi.Input[bool]`) - The value indicating whether to trim leading and trailing spaces and zeroes.
                  * `validate_edi_types` (`pulumi.Input[bool]`) - The value indicating whether to validate EDI types.
                  * `validate_xsd_types` (`pulumi.Input[bool]`) - The value indicating whether to validate XSD types.

                * `validation_settings` (`pulumi.Input[dict]`) - The EDIFACT validation settings.
                  * `allow_leading_and_trailing_spaces_and_zeroes` (`pulumi.Input[bool]`) - The value indicating whether to allow leading and trailing spaces and zeroes.
                  * `check_duplicate_group_control_number` (`pulumi.Input[bool]`) - The value indicating whether to check for duplicate group control number.
                  * `check_duplicate_interchange_control_number` (`pulumi.Input[bool]`) - The value indicating whether to check for duplicate interchange control number.
                  * `check_duplicate_transaction_set_control_number` (`pulumi.Input[bool]`) - The value indicating whether to check for duplicate transaction set control number.
                  * `interchange_control_number_validity_days` (`pulumi.Input[float]`) - The validity period of interchange control number.
                  * `trailing_separator_policy` (`pulumi.Input[str]`) - The trailing separator policy.
                  * `trim_leading_and_trailing_spaces_and_zeroes` (`pulumi.Input[bool]`) - The value indicating whether to trim leading and trailing spaces and zeroes.
                  * `validate_character_set` (`pulumi.Input[bool]`) - The value indicating whether to validate character set in the message.
                  * `validate_edi_types` (`pulumi.Input[bool]`) - The value indicating whether to Whether to validate EDI types.
                  * `validate_xsd_types` (`pulumi.Input[bool]`) - The value indicating whether to Whether to validate XSD types.

              * `receiver_business_identity` (`pulumi.Input[dict]`) - The receiver business identity
              * `sender_business_identity` (`pulumi.Input[dict]`) - The sender business identity

            * `send_agreement` (`pulumi.Input[dict]`) - The EDIFACT one-way send agreement.

          * `x12` (`pulumi.Input[dict]`) - The X12 agreement content.
            * `receive_agreement` (`pulumi.Input[dict]`) - The X12 one-way receive agreement.
              * `protocol_settings` (`pulumi.Input[dict]`) - The X12 protocol settings.
                * `acknowledgement_settings` (`pulumi.Input[dict]`) - The X12 acknowledgment settings.
                  * `acknowledgement_control_number_lower_bound` (`pulumi.Input[float]`) - The acknowledgement control number lower bound.
                  * `acknowledgement_control_number_prefix` (`pulumi.Input[str]`) - The acknowledgement control number prefix.
                  * `acknowledgement_control_number_suffix` (`pulumi.Input[str]`) - The acknowledgement control number suffix.
                  * `acknowledgement_control_number_upper_bound` (`pulumi.Input[float]`) - The acknowledgement control number upper bound.
                  * `batch_functional_acknowledgements` (`pulumi.Input[bool]`) - The value indicating whether to batch functional acknowledgements.
                  * `batch_implementation_acknowledgements` (`pulumi.Input[bool]`) - The value indicating whether to batch implementation acknowledgements.
                  * `batch_technical_acknowledgements` (`pulumi.Input[bool]`) - The value indicating whether to batch the technical acknowledgements.
                  * `functional_acknowledgement_version` (`pulumi.Input[str]`) - The functional acknowledgement version.
                  * `implementation_acknowledgement_version` (`pulumi.Input[str]`) - The implementation acknowledgement version.
                  * `need_functional_acknowledgement` (`pulumi.Input[bool]`) - The value indicating whether functional acknowledgement is needed.
                  * `need_implementation_acknowledgement` (`pulumi.Input[bool]`) - The value indicating whether implementation acknowledgement is needed.
                  * `need_loop_for_valid_messages` (`pulumi.Input[bool]`) - The value indicating whether a loop is needed for valid messages.
                  * `need_technical_acknowledgement` (`pulumi.Input[bool]`) - The value indicating whether technical acknowledgement is needed.
                  * `rollover_acknowledgement_control_number` (`pulumi.Input[bool]`) - The value indicating whether to rollover acknowledgement control number.
                  * `send_synchronous_acknowledgement` (`pulumi.Input[bool]`) - The value indicating whether to send synchronous acknowledgement.

                * `envelope_overrides` (`pulumi.Input[list]`) - The X12 envelope override settings.
                  * `date_format` (`pulumi.Input[str]`) - The date format.
                  * `functional_identifier_code` (`pulumi.Input[str]`) - The functional identifier code.
                  * `header_version` (`pulumi.Input[str]`) - The header version.
                  * `message_id` (`pulumi.Input[str]`) - The message id on which this envelope settings has to be applied.
                  * `protocol_version` (`pulumi.Input[str]`) - The protocol version on which this envelope settings has to be applied.
                  * `receiver_application_id` (`pulumi.Input[str]`) - The receiver application id.
                  * `responsible_agency_code` (`pulumi.Input[str]`) - The responsible agency code.
                  * `sender_application_id` (`pulumi.Input[str]`) - The sender application id.
                  * `target_namespace` (`pulumi.Input[str]`) - The target namespace on which this envelope settings has to be applied.
                  * `time_format` (`pulumi.Input[str]`) - The time format.

                * `envelope_settings` (`pulumi.Input[dict]`) - The X12 envelope settings.
                  * `control_standards_id` (`pulumi.Input[float]`) - The controls standards id.
                  * `control_version_number` (`pulumi.Input[str]`) - The control version number.
                  * `enable_default_group_headers` (`pulumi.Input[bool]`) - The value indicating whether to enable default group headers.
                  * `functional_group_id` (`pulumi.Input[str]`) - The functional group id.
                  * `group_control_number_lower_bound` (`pulumi.Input[float]`) - The group control number lower bound.
                  * `group_control_number_upper_bound` (`pulumi.Input[float]`) - The group control number upper bound.
                  * `group_header_agency_code` (`pulumi.Input[str]`) - The group header agency code.
                  * `group_header_date_format` (`pulumi.Input[str]`) - The group header date format.
                  * `group_header_time_format` (`pulumi.Input[str]`) - The group header time format.
                  * `group_header_version` (`pulumi.Input[str]`) - The group header version.
                  * `interchange_control_number_lower_bound` (`pulumi.Input[float]`) - The interchange  control number lower bound.
                  * `interchange_control_number_upper_bound` (`pulumi.Input[float]`) - The interchange  control number upper bound.
                  * `overwrite_existing_transaction_set_control_number` (`pulumi.Input[bool]`) - The value indicating whether to overwrite existing transaction set control number.
                  * `receiver_application_id` (`pulumi.Input[str]`) - The receiver application id.
                  * `rollover_group_control_number` (`pulumi.Input[bool]`) - The value indicating whether to rollover group control number.
                  * `rollover_interchange_control_number` (`pulumi.Input[bool]`) - The value indicating whether to rollover interchange control number.
                  * `rollover_transaction_set_control_number` (`pulumi.Input[bool]`) - The value indicating whether to rollover transaction set control number.
                  * `sender_application_id` (`pulumi.Input[str]`) - The sender application id.
                  * `transaction_set_control_number_lower_bound` (`pulumi.Input[float]`) - The transaction set control number lower bound.
                  * `transaction_set_control_number_prefix` (`pulumi.Input[str]`) - The transaction set control number prefix.
                  * `transaction_set_control_number_suffix` (`pulumi.Input[str]`) - The transaction set control number suffix.
                  * `transaction_set_control_number_upper_bound` (`pulumi.Input[float]`) - The transaction set control number upper bound.
                  * `usage_indicator` (`pulumi.Input[str]`) - The usage indicator.
                  * `use_control_standards_id_as_repetition_character` (`pulumi.Input[bool]`) - The value indicating whether to use control standards id as repetition character.

                * `framing_settings` (`pulumi.Input[dict]`) - The X12 framing settings.
                  * `character_set` (`pulumi.Input[str]`) - The X12 character set.
                  * `component_separator` (`pulumi.Input[float]`) - The component separator.
                  * `data_element_separator` (`pulumi.Input[float]`) - The data element separator.
                  * `replace_character` (`pulumi.Input[float]`) - The replacement character.
                  * `replace_separators_in_payload` (`pulumi.Input[bool]`) - The value indicating whether to replace separators in payload.
                  * `segment_terminator` (`pulumi.Input[float]`) - The segment terminator.
                  * `segment_terminator_suffix` (`pulumi.Input[str]`) - The segment terminator suffix.

                * `message_filter` (`pulumi.Input[dict]`) - The X12 message filter.
                  * `message_filter_type` (`pulumi.Input[str]`) - The message filter type.

                * `message_filter_list` (`pulumi.Input[list]`) - The X12 message filter list.
                  * `message_id` (`pulumi.Input[str]`) - The message id.

                * `processing_settings` (`pulumi.Input[dict]`) - The X12 processing settings.
                  * `convert_implied_decimal` (`pulumi.Input[bool]`) - The value indicating whether to convert numerical type to implied decimal.
                  * `create_empty_xml_tags_for_trailing_separators` (`pulumi.Input[bool]`) - The value indicating whether to create empty xml tags for trailing separators.
                  * `mask_security_info` (`pulumi.Input[bool]`) - The value indicating whether to mask security information.
                  * `preserve_interchange` (`pulumi.Input[bool]`) - The value indicating whether to preserve interchange.
                  * `suspend_interchange_on_error` (`pulumi.Input[bool]`) - The value indicating whether to suspend interchange on error.
                  * `use_dot_as_decimal_separator` (`pulumi.Input[bool]`) - The value indicating whether to use dot as decimal separator.

                * `schema_references` (`pulumi.Input[list]`) - The X12 schema references.
                  * `message_id` (`pulumi.Input[str]`) - The message id.
                  * `schema_name` (`pulumi.Input[str]`) - The schema name.
                  * `schema_version` (`pulumi.Input[str]`) - The schema version.
                  * `sender_application_id` (`pulumi.Input[str]`) - The sender application id.

                * `security_settings` (`pulumi.Input[dict]`) - The X12 security settings.
                  * `authorization_qualifier` (`pulumi.Input[str]`) - The authorization qualifier.
                  * `authorization_value` (`pulumi.Input[str]`) - The authorization value.
                  * `password_value` (`pulumi.Input[str]`) - The password value.
                  * `security_qualifier` (`pulumi.Input[str]`) - The security qualifier.

                * `validation_overrides` (`pulumi.Input[list]`) - The X12 validation override settings.
                  * `allow_leading_and_trailing_spaces_and_zeroes` (`pulumi.Input[bool]`) - The value indicating whether to allow leading and trailing spaces and zeroes.
                  * `message_id` (`pulumi.Input[str]`) - The message id on which the validation settings has to be applied.
                  * `trailing_separator_policy` (`pulumi.Input[str]`) - The trailing separator policy.
                  * `trim_leading_and_trailing_spaces_and_zeroes` (`pulumi.Input[bool]`) - The value indicating whether to trim leading and trailing spaces and zeroes.
                  * `validate_character_set` (`pulumi.Input[bool]`) - The value indicating whether to validate character Set.
                  * `validate_edi_types` (`pulumi.Input[bool]`) - The value indicating whether to validate EDI types.
                  * `validate_xsd_types` (`pulumi.Input[bool]`) - The value indicating whether to validate XSD types.

                * `validation_settings` (`pulumi.Input[dict]`) - The X12 validation settings.
                  * `allow_leading_and_trailing_spaces_and_zeroes` (`pulumi.Input[bool]`) - The value indicating whether to allow leading and trailing spaces and zeroes.
                  * `check_duplicate_group_control_number` (`pulumi.Input[bool]`) - The value indicating whether to check for duplicate group control number.
                  * `check_duplicate_interchange_control_number` (`pulumi.Input[bool]`) - The value indicating whether to check for duplicate interchange control number.
                  * `check_duplicate_transaction_set_control_number` (`pulumi.Input[bool]`) - The value indicating whether to check for duplicate transaction set control number.
                  * `interchange_control_number_validity_days` (`pulumi.Input[float]`) - The validity period of interchange control number.
                  * `trailing_separator_policy` (`pulumi.Input[str]`) - The trailing separator policy.
                  * `trim_leading_and_trailing_spaces_and_zeroes` (`pulumi.Input[bool]`) - The value indicating whether to trim leading and trailing spaces and zeroes.
                  * `validate_character_set` (`pulumi.Input[bool]`) - The value indicating whether to validate character set in the message.
                  * `validate_edi_types` (`pulumi.Input[bool]`) - The value indicating whether to Whether to validate EDI types.
                  * `validate_xsd_types` (`pulumi.Input[bool]`) - The value indicating whether to Whether to validate XSD types.

                * `x12_delimiter_overrides` (`pulumi.Input[list]`) - The X12 delimiter override settings.
                  * `component_separator` (`pulumi.Input[float]`) - The component separator.
                  * `data_element_separator` (`pulumi.Input[float]`) - The data element separator.
                  * `message_id` (`pulumi.Input[str]`) - The message id.
                  * `protocol_version` (`pulumi.Input[str]`) - The protocol version.
                  * `replace_character` (`pulumi.Input[float]`) - The replacement character.
                  * `replace_separators_in_payload` (`pulumi.Input[bool]`) - The value indicating whether to replace separators in payload.
                  * `segment_terminator` (`pulumi.Input[float]`) - The segment terminator.
                  * `segment_terminator_suffix` (`pulumi.Input[str]`) - The segment terminator suffix.
                  * `target_namespace` (`pulumi.Input[str]`) - The target namespace on which this delimiter settings has to be applied.

              * `receiver_business_identity` (`pulumi.Input[dict]`) - The receiver business identity
              * `sender_business_identity` (`pulumi.Input[dict]`) - The sender business identity

            * `send_agreement` (`pulumi.Input[dict]`) - The X12 one-way send agreement.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if agreement_type is None:
                raise TypeError("Missing required property 'agreement_type'")
            __props__['agreement_type'] = agreement_type
            if content is None:
                raise TypeError("Missing required property 'content'")
            __props__['content'] = content
            if guest_identity is None:
                raise TypeError("Missing required property 'guest_identity'")
            __props__['guest_identity'] = guest_identity
            if guest_partner is None:
                raise TypeError("Missing required property 'guest_partner'")
            __props__['guest_partner'] = guest_partner
            if host_identity is None:
                raise TypeError("Missing required property 'host_identity'")
            __props__['host_identity'] = host_identity
            if host_partner is None:
                raise TypeError("Missing required property 'host_partner'")
            __props__['host_partner'] = host_partner
            if integration_account_name is None:
                raise TypeError("Missing required property 'integration_account_name'")
            __props__['integration_account_name'] = integration_account_name
            __props__['location'] = location
            __props__['metadata'] = metadata
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['properties'] = None
            __props__['type'] = None
        super(Agreement, __self__).__init__(
            'azurerm:logic/v20160601:Agreement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Agreement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Agreement(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
