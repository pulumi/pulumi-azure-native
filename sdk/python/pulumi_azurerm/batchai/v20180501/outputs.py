# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'AppInsightsReferenceResponse',
    'AutoScaleSettingsResponse',
    'AzureBlobFileSystemReferenceResponse',
    'AzureFileShareReferenceResponse',
    'AzureStorageCredentialsInfoResponse',
    'BatchAIErrorResponse',
    'CNTKsettingsResponse',
    'Caffe2SettingsResponse',
    'CaffeSettingsResponse',
    'ChainerSettingsResponse',
    'ContainerSettingsResponse',
    'CustomMpiSettingsResponse',
    'CustomToolkitSettingsResponse',
    'DataDisksResponse',
    'EnvironmentVariableResponse',
    'EnvironmentVariableWithSecretValueResponse',
    'FileResponseResult',
    'FileServerReferenceResponse',
    'HorovodSettingsResponse',
    'ImageReferenceResponse',
    'ImageSourceRegistryResponse',
    'InputDirectoryResponse',
    'JobPreparationResponse',
    'JobPropertiesResponseConstraints',
    'JobPropertiesResponseExecutionInfo',
    'KeyVaultSecretReferenceResponse',
    'ManualScaleSettingsResponse',
    'MountSettingsResponse',
    'MountVolumesResponse',
    'NameValuePairResponse',
    'NodeSetupResponse',
    'NodeStateCountsResponse',
    'OutputDirectoryResponse',
    'PerformanceCountersSettingsResponse',
    'PrivateRegistryCredentialsResponse',
    'PyTorchSettingsResponse',
    'RemoteLoginInformationResponseResult',
    'ResourceIdResponse',
    'ScaleSettingsResponse',
    'SetupTaskResponse',
    'SshConfigurationResponse',
    'TensorFlowSettingsResponse',
    'UnmanagedFileSystemReferenceResponse',
    'UserAccountSettingsResponse',
    'VirtualMachineConfigurationResponse',
]

@pulumi.output_type
class AppInsightsReferenceResponse(dict):
    """
    Azure Application Insights information for performance counters reporting.
    """
    def __init__(__self__, *,
                 component: 'outputs.ResourceIdResponse',
                 instrumentation_key: Optional[str] = None,
                 instrumentation_key_secret_reference: Optional['outputs.KeyVaultSecretReferenceResponse'] = None):
        """
        Azure Application Insights information for performance counters reporting.
        :param 'ResourceIdResponseArgs' component: Azure Application Insights component resource ID.
        :param str instrumentation_key: Value of the Azure Application Insights instrumentation key.
        :param 'KeyVaultSecretReferenceResponseArgs' instrumentation_key_secret_reference: KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
        """
        pulumi.set(__self__, "component", component)
        if instrumentation_key is not None:
            pulumi.set(__self__, "instrumentation_key", instrumentation_key)
        if instrumentation_key_secret_reference is not None:
            pulumi.set(__self__, "instrumentation_key_secret_reference", instrumentation_key_secret_reference)

    @property
    @pulumi.getter
    def component(self) -> 'outputs.ResourceIdResponse':
        """
        Azure Application Insights component resource ID.
        """
        return pulumi.get(self, "component")

    @property
    @pulumi.getter(name="instrumentationKey")
    def instrumentation_key(self) -> Optional[str]:
        """
        Value of the Azure Application Insights instrumentation key.
        """
        return pulumi.get(self, "instrumentation_key")

    @property
    @pulumi.getter(name="instrumentationKeySecretReference")
    def instrumentation_key_secret_reference(self) -> Optional['outputs.KeyVaultSecretReferenceResponse']:
        """
        KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
        """
        return pulumi.get(self, "instrumentation_key_secret_reference")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoScaleSettingsResponse(dict):
    """
    Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
    """
    def __init__(__self__, *,
                 maximum_node_count: int,
                 minimum_node_count: int,
                 initial_node_count: Optional[int] = None):
        """
        Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
        :param int maximum_node_count: The maximum number of compute nodes the cluster can have.
        :param int minimum_node_count: The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
        :param int initial_node_count: The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
        """
        pulumi.set(__self__, "maximum_node_count", maximum_node_count)
        pulumi.set(__self__, "minimum_node_count", minimum_node_count)
        if initial_node_count is not None:
            pulumi.set(__self__, "initial_node_count", initial_node_count)

    @property
    @pulumi.getter(name="maximumNodeCount")
    def maximum_node_count(self) -> int:
        """
        The maximum number of compute nodes the cluster can have.
        """
        return pulumi.get(self, "maximum_node_count")

    @property
    @pulumi.getter(name="minimumNodeCount")
    def minimum_node_count(self) -> int:
        """
        The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
        """
        return pulumi.get(self, "minimum_node_count")

    @property
    @pulumi.getter(name="initialNodeCount")
    def initial_node_count(self) -> Optional[int]:
        """
        The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
        """
        return pulumi.get(self, "initial_node_count")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureBlobFileSystemReferenceResponse(dict):
    """
    Azure Blob Storage Container mounting configuration.
    """
    def __init__(__self__, *,
                 account_name: str,
                 container_name: str,
                 credentials: 'outputs.AzureStorageCredentialsInfoResponse',
                 relative_mount_path: str,
                 mount_options: Optional[str] = None):
        """
        Azure Blob Storage Container mounting configuration.
        :param str account_name: Name of the Azure storage account.
        :param str container_name: Name of the Azure Blob Storage container to mount on the cluster.
        :param 'AzureStorageCredentialsInfoResponseArgs' credentials: Information about the Azure storage credentials.
        :param str relative_mount_path: The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        :param str mount_options: Mount options for mounting blobfuse file system.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "relative_mount_path", relative_mount_path)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Name of the Azure storage account.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        """
        Name of the Azure Blob Storage container to mount on the cluster.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.AzureStorageCredentialsInfoResponse':
        """
        Information about the Azure storage credentials.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="relativeMountPath")
    def relative_mount_path(self) -> str:
        """
        The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        """
        return pulumi.get(self, "relative_mount_path")

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[str]:
        """
        Mount options for mounting blobfuse file system.
        """
        return pulumi.get(self, "mount_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureFileShareReferenceResponse(dict):
    """
    Azure File Share mounting configuration.
    """
    def __init__(__self__, *,
                 account_name: str,
                 azure_file_url: str,
                 credentials: 'outputs.AzureStorageCredentialsInfoResponse',
                 relative_mount_path: str,
                 directory_mode: Optional[str] = None,
                 file_mode: Optional[str] = None):
        """
        Azure File Share mounting configuration.
        :param str account_name: Name of the Azure storage account.
        :param str azure_file_url: URL to access the Azure File.
        :param 'AzureStorageCredentialsInfoResponseArgs' credentials: Information about the Azure storage credentials.
        :param str relative_mount_path: The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        :param str directory_mode: File mode for directories on the mounted file share. Default value: 0777.
        :param str file_mode: File mode for files on the mounted file share. Default value: 0777.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "azure_file_url", azure_file_url)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "relative_mount_path", relative_mount_path)
        if directory_mode is not None:
            pulumi.set(__self__, "directory_mode", directory_mode)
        if file_mode is not None:
            pulumi.set(__self__, "file_mode", file_mode)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Name of the Azure storage account.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="azureFileUrl")
    def azure_file_url(self) -> str:
        """
        URL to access the Azure File.
        """
        return pulumi.get(self, "azure_file_url")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.AzureStorageCredentialsInfoResponse':
        """
        Information about the Azure storage credentials.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="relativeMountPath")
    def relative_mount_path(self) -> str:
        """
        The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        """
        return pulumi.get(self, "relative_mount_path")

    @property
    @pulumi.getter(name="directoryMode")
    def directory_mode(self) -> Optional[str]:
        """
        File mode for directories on the mounted file share. Default value: 0777.
        """
        return pulumi.get(self, "directory_mode")

    @property
    @pulumi.getter(name="fileMode")
    def file_mode(self) -> Optional[str]:
        """
        File mode for files on the mounted file share. Default value: 0777.
        """
        return pulumi.get(self, "file_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureStorageCredentialsInfoResponse(dict):
    """
    Azure storage account credentials.
    """
    def __init__(__self__, *,
                 account_key: Optional[str] = None,
                 account_key_secret_reference: Optional['outputs.KeyVaultSecretReferenceResponse'] = None):
        """
        Azure storage account credentials.
        :param str account_key: Storage account key. One of accountKey or accountKeySecretReference must be specified.
        :param 'KeyVaultSecretReferenceResponseArgs' account_key_secret_reference: Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
        """
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)
        if account_key_secret_reference is not None:
            pulumi.set(__self__, "account_key_secret_reference", account_key_secret_reference)

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[str]:
        """
        Storage account key. One of accountKey or accountKeySecretReference must be specified.
        """
        return pulumi.get(self, "account_key")

    @property
    @pulumi.getter(name="accountKeySecretReference")
    def account_key_secret_reference(self) -> Optional['outputs.KeyVaultSecretReferenceResponse']:
        """
        Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
        """
        return pulumi.get(self, "account_key_secret_reference")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BatchAIErrorResponse(dict):
    """
    An error response from the Batch AI service.
    """
    def __init__(__self__, *,
                 code: str,
                 details: Sequence['outputs.NameValuePairResponse'],
                 message: str):
        """
        An error response from the Batch AI service.
        :param str code: An identifier of the error. Codes are invariant and are intended to be consumed programmatically.
        :param Sequence['NameValuePairResponseArgs'] details: A list of additional details about the error.
        :param str message: A message describing the error, intended to be suitable for display in a user interface.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        An identifier of the error. Codes are invariant and are intended to be consumed programmatically.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.NameValuePairResponse']:
        """
        A list of additional details about the error.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        A message describing the error, intended to be suitable for display in a user interface.
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CNTKsettingsResponse(dict):
    """
    CNTK (aka Microsoft Cognitive Toolkit) job settings.
    """
    def __init__(__self__, *,
                 command_line_args: Optional[str] = None,
                 config_file_path: Optional[str] = None,
                 language_type: Optional[str] = None,
                 process_count: Optional[int] = None,
                 python_interpreter_path: Optional[str] = None,
                 python_script_file_path: Optional[str] = None):
        """
        CNTK (aka Microsoft Cognitive Toolkit) job settings.
        :param str command_line_args: Command line arguments that need to be passed to the python script or cntk executable.
        :param str config_file_path: Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
        :param str language_type: The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
        :param int process_count: Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        :param str python_interpreter_path: The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
        :param str python_script_file_path: Python script to execute. This property can be specified only if the languageType is 'Python'.
        """
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if config_file_path is not None:
            pulumi.set(__self__, "config_file_path", config_file_path)
        if language_type is not None:
            pulumi.set(__self__, "language_type", language_type)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)
        if python_script_file_path is not None:
            pulumi.set(__self__, "python_script_file_path", python_script_file_path)

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[str]:
        """
        Command line arguments that need to be passed to the python script or cntk executable.
        """
        return pulumi.get(self, "command_line_args")

    @property
    @pulumi.getter(name="configFilePath")
    def config_file_path(self) -> Optional[str]:
        """
        Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
        """
        return pulumi.get(self, "config_file_path")

    @property
    @pulumi.getter(name="languageType")
    def language_type(self) -> Optional[str]:
        """
        The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
        """
        return pulumi.get(self, "language_type")

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[int]:
        """
        Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[str]:
        """
        The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
        """
        return pulumi.get(self, "python_interpreter_path")

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> Optional[str]:
        """
        Python script to execute. This property can be specified only if the languageType is 'Python'.
        """
        return pulumi.get(self, "python_script_file_path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class Caffe2SettingsResponse(dict):
    """
    Caffe2 job settings.
    """
    def __init__(__self__, *,
                 python_script_file_path: str,
                 command_line_args: Optional[str] = None,
                 python_interpreter_path: Optional[str] = None):
        """
        Caffe2 job settings.
        :param str python_script_file_path: The python script to execute.
        :param str command_line_args: Command line arguments that need to be passed to the python script.
        :param str python_interpreter_path: The path to the Python interpreter.
        """
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> str:
        """
        The python script to execute.
        """
        return pulumi.get(self, "python_script_file_path")

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[str]:
        """
        Command line arguments that need to be passed to the python script.
        """
        return pulumi.get(self, "command_line_args")

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[str]:
        """
        The path to the Python interpreter.
        """
        return pulumi.get(self, "python_interpreter_path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CaffeSettingsResponse(dict):
    """
    Caffe job settings.
    """
    def __init__(__self__, *,
                 command_line_args: Optional[str] = None,
                 config_file_path: Optional[str] = None,
                 process_count: Optional[int] = None,
                 python_interpreter_path: Optional[str] = None,
                 python_script_file_path: Optional[str] = None):
        """
        Caffe job settings.
        :param str command_line_args: Command line arguments that need to be passed to the Caffe job.
        :param str config_file_path: Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
        :param int process_count: Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        :param str python_interpreter_path: The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
        :param str python_script_file_path: Python script to execute. This property cannot be specified if configFilePath is specified.
        """
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if config_file_path is not None:
            pulumi.set(__self__, "config_file_path", config_file_path)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)
        if python_script_file_path is not None:
            pulumi.set(__self__, "python_script_file_path", python_script_file_path)

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[str]:
        """
        Command line arguments that need to be passed to the Caffe job.
        """
        return pulumi.get(self, "command_line_args")

    @property
    @pulumi.getter(name="configFilePath")
    def config_file_path(self) -> Optional[str]:
        """
        Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
        """
        return pulumi.get(self, "config_file_path")

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[int]:
        """
        Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[str]:
        """
        The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
        """
        return pulumi.get(self, "python_interpreter_path")

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> Optional[str]:
        """
        Python script to execute. This property cannot be specified if configFilePath is specified.
        """
        return pulumi.get(self, "python_script_file_path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ChainerSettingsResponse(dict):
    """
    Chainer job settings.
    """
    def __init__(__self__, *,
                 python_script_file_path: str,
                 command_line_args: Optional[str] = None,
                 process_count: Optional[int] = None,
                 python_interpreter_path: Optional[str] = None):
        """
        Chainer job settings.
        :param str python_script_file_path: The python script to execute.
        :param str command_line_args: Command line arguments that need to be passed to the python script.
        :param int process_count: Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        :param str python_interpreter_path: The path to the Python interpreter.
        """
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> str:
        """
        The python script to execute.
        """
        return pulumi.get(self, "python_script_file_path")

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[str]:
        """
        Command line arguments that need to be passed to the python script.
        """
        return pulumi.get(self, "command_line_args")

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[int]:
        """
        Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[str]:
        """
        The path to the Python interpreter.
        """
        return pulumi.get(self, "python_interpreter_path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerSettingsResponse(dict):
    """
    Docker container settings.
    """
    def __init__(__self__, *,
                 image_source_registry: 'outputs.ImageSourceRegistryResponse',
                 shm_size: Optional[str] = None):
        """
        Docker container settings.
        :param 'ImageSourceRegistryResponseArgs' image_source_registry: Information about docker image and docker registry to download the container from.
        :param str shm_size: Size of /dev/shm. Please refer to docker documentation for supported argument formats.
        """
        pulumi.set(__self__, "image_source_registry", image_source_registry)
        if shm_size is not None:
            pulumi.set(__self__, "shm_size", shm_size)

    @property
    @pulumi.getter(name="imageSourceRegistry")
    def image_source_registry(self) -> 'outputs.ImageSourceRegistryResponse':
        """
        Information about docker image and docker registry to download the container from.
        """
        return pulumi.get(self, "image_source_registry")

    @property
    @pulumi.getter(name="shmSize")
    def shm_size(self) -> Optional[str]:
        """
        Size of /dev/shm. Please refer to docker documentation for supported argument formats.
        """
        return pulumi.get(self, "shm_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CustomMpiSettingsResponse(dict):
    """
    Custom MPI job settings.
    """
    def __init__(__self__, *,
                 command_line: str,
                 process_count: Optional[int] = None):
        """
        Custom MPI job settings.
        :param str command_line: The command line to be executed by mpi runtime on each compute node.
        :param int process_count: Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        pulumi.set(__self__, "command_line", command_line)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)

    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> str:
        """
        The command line to be executed by mpi runtime on each compute node.
        """
        return pulumi.get(self, "command_line")

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[int]:
        """
        Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CustomToolkitSettingsResponse(dict):
    """
    Custom tool kit job settings.
    """
    def __init__(__self__, *,
                 command_line: Optional[str] = None):
        """
        Custom tool kit job settings.
        :param str command_line: The command line to execute on the master node.
        """
        if command_line is not None:
            pulumi.set(__self__, "command_line", command_line)

    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> Optional[str]:
        """
        The command line to execute on the master node.
        """
        return pulumi.get(self, "command_line")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DataDisksResponse(dict):
    """
    Data disks settings.
    """
    def __init__(__self__, *,
                 disk_count: int,
                 disk_size_in_gb: int,
                 storage_account_type: str,
                 caching_type: Optional[str] = None):
        """
        Data disks settings.
        :param int disk_count: Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
        :param int disk_size_in_gb: Disk size in GB for the blank data disks.
        :param str storage_account_type: Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
        :param str caching_type: Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
        """
        pulumi.set(__self__, "disk_count", disk_count)
        pulumi.set(__self__, "disk_size_in_gb", disk_size_in_gb)
        pulumi.set(__self__, "storage_account_type", storage_account_type)
        if caching_type is not None:
            pulumi.set(__self__, "caching_type", caching_type)

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> int:
        """
        Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
        """
        return pulumi.get(self, "disk_count")

    @property
    @pulumi.getter(name="diskSizeInGB")
    def disk_size_in_gb(self) -> int:
        """
        Disk size in GB for the blank data disks.
        """
        return pulumi.get(self, "disk_size_in_gb")

    @property
    @pulumi.getter(name="storageAccountType")
    def storage_account_type(self) -> str:
        """
        Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
        """
        return pulumi.get(self, "storage_account_type")

    @property
    @pulumi.getter(name="cachingType")
    def caching_type(self) -> Optional[str]:
        """
        Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
        """
        return pulumi.get(self, "caching_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EnvironmentVariableResponse(dict):
    """
    An environment variable definition.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        An environment variable definition.
        :param str name: The name of the environment variable.
        :param str value: The value of the environment variable.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the environment variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the environment variable.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EnvironmentVariableWithSecretValueResponse(dict):
    """
    An environment variable with secret value definition.
    """
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_secret_reference: Optional['outputs.KeyVaultSecretReferenceResponse'] = None):
        """
        An environment variable with secret value definition.
        :param str name: The name of the environment variable to store the secret value.
        :param str value: The value of the environment variable. This value will never be reported back by Batch AI.
        :param 'KeyVaultSecretReferenceResponseArgs' value_secret_reference: KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_secret_reference is not None:
            pulumi.set(__self__, "value_secret_reference", value_secret_reference)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the environment variable to store the secret value.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the environment variable. This value will never be reported back by Batch AI.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueSecretReference")
    def value_secret_reference(self) -> Optional['outputs.KeyVaultSecretReferenceResponse']:
        """
        KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
        """
        return pulumi.get(self, "value_secret_reference")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FileResponseResult(dict):
    """
    Properties of the file or directory.
    """
    def __init__(__self__, *,
                 content_length: int,
                 download_url: str,
                 file_type: str,
                 last_modified: str,
                 name: str):
        """
        Properties of the file or directory.
        :param int content_length: The file of the size.
        :param str download_url: URL to download the corresponding file. The downloadUrl is not returned for directories.
        :param str file_type: Type of the file. Possible values are file and directory.
        :param str last_modified: The time at which the file was last modified.
        :param str name: Name of the file.
        """
        pulumi.set(__self__, "content_length", content_length)
        pulumi.set(__self__, "download_url", download_url)
        pulumi.set(__self__, "file_type", file_type)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> int:
        """
        The file of the size.
        """
        return pulumi.get(self, "content_length")

    @property
    @pulumi.getter(name="downloadUrl")
    def download_url(self) -> str:
        """
        URL to download the corresponding file. The downloadUrl is not returned for directories.
        """
        return pulumi.get(self, "download_url")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> str:
        """
        Type of the file. Possible values are file and directory.
        """
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The time at which the file was last modified.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the file.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FileServerReferenceResponse(dict):
    """
    File Server mounting configuration.
    """
    def __init__(__self__, *,
                 file_server: 'outputs.ResourceIdResponse',
                 relative_mount_path: str,
                 mount_options: Optional[str] = None,
                 source_directory: Optional[str] = None):
        """
        File Server mounting configuration.
        :param 'ResourceIdResponseArgs' file_server: Resource ID of the existing File Server to be mounted.
        :param str relative_mount_path: The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        :param str mount_options: Mount options to be passed to mount command.
        :param str source_directory: File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
        """
        pulumi.set(__self__, "file_server", file_server)
        pulumi.set(__self__, "relative_mount_path", relative_mount_path)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)
        if source_directory is not None:
            pulumi.set(__self__, "source_directory", source_directory)

    @property
    @pulumi.getter(name="fileServer")
    def file_server(self) -> 'outputs.ResourceIdResponse':
        """
        Resource ID of the existing File Server to be mounted.
        """
        return pulumi.get(self, "file_server")

    @property
    @pulumi.getter(name="relativeMountPath")
    def relative_mount_path(self) -> str:
        """
        The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        """
        return pulumi.get(self, "relative_mount_path")

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[str]:
        """
        Mount options to be passed to mount command.
        """
        return pulumi.get(self, "mount_options")

    @property
    @pulumi.getter(name="sourceDirectory")
    def source_directory(self) -> Optional[str]:
        """
        File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
        """
        return pulumi.get(self, "source_directory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorovodSettingsResponse(dict):
    """
    Specifies the settings for Horovod job.
    """
    def __init__(__self__, *,
                 python_script_file_path: str,
                 command_line_args: Optional[str] = None,
                 process_count: Optional[int] = None,
                 python_interpreter_path: Optional[str] = None):
        """
        Specifies the settings for Horovod job.
        :param str python_script_file_path: The python script to execute.
        :param str command_line_args: Command line arguments that need to be passed to the python script.
        :param int process_count: Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        :param str python_interpreter_path: The path to the Python interpreter.
        """
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> str:
        """
        The python script to execute.
        """
        return pulumi.get(self, "python_script_file_path")

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[str]:
        """
        Command line arguments that need to be passed to the python script.
        """
        return pulumi.get(self, "command_line_args")

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[int]:
        """
        Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[str]:
        """
        The path to the Python interpreter.
        """
        return pulumi.get(self, "python_interpreter_path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ImageReferenceResponse(dict):
    """
    The OS image reference.
    """
    def __init__(__self__, *,
                 offer: str,
                 publisher: str,
                 sku: str,
                 version: Optional[str] = None,
                 virtual_machine_image_id: Optional[str] = None):
        """
        The OS image reference.
        :param str offer: Offer of the image.
        :param str publisher: Publisher of the image.
        :param str sku: SKU of the image.
        :param str version: Version of the image.
        :param str virtual_machine_image_id: The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
        """
        pulumi.set(__self__, "offer", offer)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "sku", sku)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if virtual_machine_image_id is not None:
            pulumi.set(__self__, "virtual_machine_image_id", virtual_machine_image_id)

    @property
    @pulumi.getter
    def offer(self) -> str:
        """
        Offer of the image.
        """
        return pulumi.get(self, "offer")

    @property
    @pulumi.getter
    def publisher(self) -> str:
        """
        Publisher of the image.
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter
    def sku(self) -> str:
        """
        SKU of the image.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the image.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="virtualMachineImageId")
    def virtual_machine_image_id(self) -> Optional[str]:
        """
        The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
        """
        return pulumi.get(self, "virtual_machine_image_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ImageSourceRegistryResponse(dict):
    """
    Information about docker image for the job.
    """
    def __init__(__self__, *,
                 image: str,
                 credentials: Optional['outputs.PrivateRegistryCredentialsResponse'] = None,
                 server_url: Optional[str] = None):
        """
        Information about docker image for the job.
        :param str image: The name of the image in the image repository.
        :param 'PrivateRegistryCredentialsResponseArgs' credentials: Credentials to access the private docker repository.
        :param str server_url: URL for image repository.
        """
        pulumi.set(__self__, "image", image)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        The name of the image in the image repository.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.PrivateRegistryCredentialsResponse']:
        """
        Credentials to access the private docker repository.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[str]:
        """
        URL for image repository.
        """
        return pulumi.get(self, "server_url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InputDirectoryResponse(dict):
    """
    Input directory for the job.
    """
    def __init__(__self__, *,
                 id: str,
                 path: str):
        """
        Input directory for the job.
        :param str id: The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
        :param str path: The path to the input directory.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path to the input directory.
        """
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobPreparationResponse(dict):
    """
    Job preparation settings.
    """
    def __init__(__self__, *,
                 command_line: str):
        """
        Job preparation settings.
        :param str command_line: The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
        """
        pulumi.set(__self__, "command_line", command_line)

    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> str:
        """
        The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
        """
        return pulumi.get(self, "command_line")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobPropertiesResponseConstraints(dict):
    """
    Constraints associated with the Job.
    """
    def __init__(__self__, *,
                 max_wall_clock_time: Optional[str] = None):
        """
        Constraints associated with the Job.
        :param str max_wall_clock_time: Max time the job can run. Default value: 1 week.
        """
        if max_wall_clock_time is not None:
            pulumi.set(__self__, "max_wall_clock_time", max_wall_clock_time)

    @property
    @pulumi.getter(name="maxWallClockTime")
    def max_wall_clock_time(self) -> Optional[str]:
        """
        Max time the job can run. Default value: 1 week.
        """
        return pulumi.get(self, "max_wall_clock_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobPropertiesResponseExecutionInfo(dict):
    """
    Information about the execution of a job.
    """
    def __init__(__self__, *,
                 end_time: str,
                 errors: Sequence['outputs.BatchAIErrorResponse'],
                 exit_code: int,
                 start_time: str):
        """
        Information about the execution of a job.
        :param str end_time: The time at which the job completed. This property is only returned if the job is in completed state.
        :param Sequence['BatchAIErrorResponseArgs'] errors: A collection of errors encountered by the service during job execution.
        :param int exit_code: The exit code of the job. This property is only returned if the job is in completed state.
        :param str start_time: The time at which the job started running. 'Running' corresponds to the running state. If the job has been restarted or retried, this is the most recent time at which the job started running. This property is present only for job that are in the running or completed state.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "exit_code", exit_code)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The time at which the job completed. This property is only returned if the job is in completed state.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.BatchAIErrorResponse']:
        """
        A collection of errors encountered by the service during job execution.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> int:
        """
        The exit code of the job. This property is only returned if the job is in completed state.
        """
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The time at which the job started running. 'Running' corresponds to the running state. If the job has been restarted or retried, this is the most recent time at which the job started running. This property is present only for job that are in the running or completed state.
        """
        return pulumi.get(self, "start_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultSecretReferenceResponse(dict):
    """
    Key Vault Secret reference.
    """
    def __init__(__self__, *,
                 secret_url: str,
                 source_vault: 'outputs.ResourceIdResponse'):
        """
        Key Vault Secret reference.
        :param str secret_url: The URL referencing a secret in the Key Vault.
        :param 'ResourceIdResponseArgs' source_vault: Fully qualified resource identifier of the Key Vault.
        """
        pulumi.set(__self__, "secret_url", secret_url)
        pulumi.set(__self__, "source_vault", source_vault)

    @property
    @pulumi.getter(name="secretUrl")
    def secret_url(self) -> str:
        """
        The URL referencing a secret in the Key Vault.
        """
        return pulumi.get(self, "secret_url")

    @property
    @pulumi.getter(name="sourceVault")
    def source_vault(self) -> 'outputs.ResourceIdResponse':
        """
        Fully qualified resource identifier of the Key Vault.
        """
        return pulumi.get(self, "source_vault")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManualScaleSettingsResponse(dict):
    """
    Manual scale settings for the cluster.
    """
    def __init__(__self__, *,
                 target_node_count: int,
                 node_deallocation_option: Optional[str] = None):
        """
        Manual scale settings for the cluster.
        :param int target_node_count: The desired number of compute nodes in the Cluster. Default is 0.
        :param str node_deallocation_option: An action to be performed when the cluster size is decreasing. The default value is requeue.
        """
        pulumi.set(__self__, "target_node_count", target_node_count)
        if node_deallocation_option is not None:
            pulumi.set(__self__, "node_deallocation_option", node_deallocation_option)

    @property
    @pulumi.getter(name="targetNodeCount")
    def target_node_count(self) -> int:
        """
        The desired number of compute nodes in the Cluster. Default is 0.
        """
        return pulumi.get(self, "target_node_count")

    @property
    @pulumi.getter(name="nodeDeallocationOption")
    def node_deallocation_option(self) -> Optional[str]:
        """
        An action to be performed when the cluster size is decreasing. The default value is requeue.
        """
        return pulumi.get(self, "node_deallocation_option")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MountSettingsResponse(dict):
    """
    File Server mount Information.
    """
    def __init__(__self__, *,
                 file_server_internal_ip: Optional[str] = None,
                 file_server_public_ip: Optional[str] = None,
                 mount_point: Optional[str] = None):
        """
        File Server mount Information.
        :param str file_server_internal_ip: Internal IP address of the File Server which can be used to access the File Server from within the subnet.
        :param str file_server_public_ip: Public IP address of the File Server which can be used to SSH to the node from outside of the subnet.
        :param str mount_point: Path where the data disks are mounted on the File Server.
        """
        if file_server_internal_ip is not None:
            pulumi.set(__self__, "file_server_internal_ip", file_server_internal_ip)
        if file_server_public_ip is not None:
            pulumi.set(__self__, "file_server_public_ip", file_server_public_ip)
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)

    @property
    @pulumi.getter(name="fileServerInternalIP")
    def file_server_internal_ip(self) -> Optional[str]:
        """
        Internal IP address of the File Server which can be used to access the File Server from within the subnet.
        """
        return pulumi.get(self, "file_server_internal_ip")

    @property
    @pulumi.getter(name="fileServerPublicIP")
    def file_server_public_ip(self) -> Optional[str]:
        """
        Public IP address of the File Server which can be used to SSH to the node from outside of the subnet.
        """
        return pulumi.get(self, "file_server_public_ip")

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[str]:
        """
        Path where the data disks are mounted on the File Server.
        """
        return pulumi.get(self, "mount_point")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MountVolumesResponse(dict):
    """
    Details of volumes to mount on the cluster.
    """
    def __init__(__self__, *,
                 azure_blob_file_systems: Optional[Sequence['outputs.AzureBlobFileSystemReferenceResponse']] = None,
                 azure_file_shares: Optional[Sequence['outputs.AzureFileShareReferenceResponse']] = None,
                 file_servers: Optional[Sequence['outputs.FileServerReferenceResponse']] = None,
                 unmanaged_file_systems: Optional[Sequence['outputs.UnmanagedFileSystemReferenceResponse']] = None):
        """
        Details of volumes to mount on the cluster.
        :param Sequence['AzureBlobFileSystemReferenceResponseArgs'] azure_blob_file_systems: A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
        :param Sequence['AzureFileShareReferenceResponseArgs'] azure_file_shares: A collection of Azure File Shares that are to be mounted to the cluster nodes.
        :param Sequence['FileServerReferenceResponseArgs'] file_servers: A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
        :param Sequence['UnmanagedFileSystemReferenceResponseArgs'] unmanaged_file_systems: A collection of unmanaged file systems that are to be mounted to the cluster nodes.
        """
        if azure_blob_file_systems is not None:
            pulumi.set(__self__, "azure_blob_file_systems", azure_blob_file_systems)
        if azure_file_shares is not None:
            pulumi.set(__self__, "azure_file_shares", azure_file_shares)
        if file_servers is not None:
            pulumi.set(__self__, "file_servers", file_servers)
        if unmanaged_file_systems is not None:
            pulumi.set(__self__, "unmanaged_file_systems", unmanaged_file_systems)

    @property
    @pulumi.getter(name="azureBlobFileSystems")
    def azure_blob_file_systems(self) -> Optional[Sequence['outputs.AzureBlobFileSystemReferenceResponse']]:
        """
        A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
        """
        return pulumi.get(self, "azure_blob_file_systems")

    @property
    @pulumi.getter(name="azureFileShares")
    def azure_file_shares(self) -> Optional[Sequence['outputs.AzureFileShareReferenceResponse']]:
        """
        A collection of Azure File Shares that are to be mounted to the cluster nodes.
        """
        return pulumi.get(self, "azure_file_shares")

    @property
    @pulumi.getter(name="fileServers")
    def file_servers(self) -> Optional[Sequence['outputs.FileServerReferenceResponse']]:
        """
        A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
        """
        return pulumi.get(self, "file_servers")

    @property
    @pulumi.getter(name="unmanagedFileSystems")
    def unmanaged_file_systems(self) -> Optional[Sequence['outputs.UnmanagedFileSystemReferenceResponse']]:
        """
        A collection of unmanaged file systems that are to be mounted to the cluster nodes.
        """
        return pulumi.get(self, "unmanaged_file_systems")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NameValuePairResponse(dict):
    """
    Name-value pair.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Name-value pair.
        :param str name: The name in the name-value pair.
        :param str value: The value in the name-value pair.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name in the name-value pair.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value in the name-value pair.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodeSetupResponse(dict):
    """
    Node setup settings.
    """
    def __init__(__self__, *,
                 mount_volumes: Optional['outputs.MountVolumesResponse'] = None,
                 performance_counters_settings: Optional['outputs.PerformanceCountersSettingsResponse'] = None,
                 setup_task: Optional['outputs.SetupTaskResponse'] = None):
        """
        Node setup settings.
        :param 'MountVolumesResponseArgs' mount_volumes: Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
        :param 'PerformanceCountersSettingsResponseArgs' performance_counters_settings: Settings for performance counters collecting and uploading.
        :param 'SetupTaskResponseArgs' setup_task: Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
        """
        if mount_volumes is not None:
            pulumi.set(__self__, "mount_volumes", mount_volumes)
        if performance_counters_settings is not None:
            pulumi.set(__self__, "performance_counters_settings", performance_counters_settings)
        if setup_task is not None:
            pulumi.set(__self__, "setup_task", setup_task)

    @property
    @pulumi.getter(name="mountVolumes")
    def mount_volumes(self) -> Optional['outputs.MountVolumesResponse']:
        """
        Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
        """
        return pulumi.get(self, "mount_volumes")

    @property
    @pulumi.getter(name="performanceCountersSettings")
    def performance_counters_settings(self) -> Optional['outputs.PerformanceCountersSettingsResponse']:
        """
        Settings for performance counters collecting and uploading.
        """
        return pulumi.get(self, "performance_counters_settings")

    @property
    @pulumi.getter(name="setupTask")
    def setup_task(self) -> Optional['outputs.SetupTaskResponse']:
        """
        Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
        """
        return pulumi.get(self, "setup_task")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodeStateCountsResponse(dict):
    """
    Counts of various compute node states on the cluster.
    """
    def __init__(__self__, *,
                 idle_node_count: int,
                 leaving_node_count: int,
                 preparing_node_count: int,
                 running_node_count: int,
                 unusable_node_count: int):
        """
        Counts of various compute node states on the cluster.
        :param int idle_node_count: Number of compute nodes in idle state.
        :param int leaving_node_count: Number of compute nodes which are leaving the cluster.
        :param int preparing_node_count: Number of compute nodes which are being prepared.
        :param int running_node_count: Number of compute nodes which are running jobs.
        :param int unusable_node_count: Number of compute nodes which are in unusable state.
        """
        pulumi.set(__self__, "idle_node_count", idle_node_count)
        pulumi.set(__self__, "leaving_node_count", leaving_node_count)
        pulumi.set(__self__, "preparing_node_count", preparing_node_count)
        pulumi.set(__self__, "running_node_count", running_node_count)
        pulumi.set(__self__, "unusable_node_count", unusable_node_count)

    @property
    @pulumi.getter(name="idleNodeCount")
    def idle_node_count(self) -> int:
        """
        Number of compute nodes in idle state.
        """
        return pulumi.get(self, "idle_node_count")

    @property
    @pulumi.getter(name="leavingNodeCount")
    def leaving_node_count(self) -> int:
        """
        Number of compute nodes which are leaving the cluster.
        """
        return pulumi.get(self, "leaving_node_count")

    @property
    @pulumi.getter(name="preparingNodeCount")
    def preparing_node_count(self) -> int:
        """
        Number of compute nodes which are being prepared.
        """
        return pulumi.get(self, "preparing_node_count")

    @property
    @pulumi.getter(name="runningNodeCount")
    def running_node_count(self) -> int:
        """
        Number of compute nodes which are running jobs.
        """
        return pulumi.get(self, "running_node_count")

    @property
    @pulumi.getter(name="unusableNodeCount")
    def unusable_node_count(self) -> int:
        """
        Number of compute nodes which are in unusable state.
        """
        return pulumi.get(self, "unusable_node_count")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OutputDirectoryResponse(dict):
    """
    Output directory for the job.
    """
    def __init__(__self__, *,
                 id: str,
                 path_prefix: str,
                 path_suffix: Optional[str] = None):
        """
        Output directory for the job.
        :param str id: The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
        :param str path_prefix: The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
        :param str path_suffix: The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path_prefix", path_prefix)
        if path_suffix is not None:
            pulumi.set(__self__, "path_suffix", path_suffix)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="pathPrefix")
    def path_prefix(self) -> str:
        """
        The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
        """
        return pulumi.get(self, "path_prefix")

    @property
    @pulumi.getter(name="pathSuffix")
    def path_suffix(self) -> Optional[str]:
        """
        The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
        """
        return pulumi.get(self, "path_suffix")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PerformanceCountersSettingsResponse(dict):
    """
    Performance counters reporting settings.
    """
    def __init__(__self__, *,
                 app_insights_reference: 'outputs.AppInsightsReferenceResponse'):
        """
        Performance counters reporting settings.
        :param 'AppInsightsReferenceResponseArgs' app_insights_reference: Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
        """
        pulumi.set(__self__, "app_insights_reference", app_insights_reference)

    @property
    @pulumi.getter(name="appInsightsReference")
    def app_insights_reference(self) -> 'outputs.AppInsightsReferenceResponse':
        """
        Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
        """
        return pulumi.get(self, "app_insights_reference")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrivateRegistryCredentialsResponse(dict):
    """
    Credentials to access a container image in a private repository.
    """
    def __init__(__self__, *,
                 username: str,
                 password: Optional[str] = None,
                 password_secret_reference: Optional['outputs.KeyVaultSecretReferenceResponse'] = None):
        """
        Credentials to access a container image in a private repository.
        :param str username: User name to login to the repository.
        :param str password: User password to login to the docker repository. One of password or passwordSecretReference must be specified.
        :param 'KeyVaultSecretReferenceResponseArgs' password_secret_reference: KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
        """
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_secret_reference is not None:
            pulumi.set(__self__, "password_secret_reference", password_secret_reference)

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        User name to login to the repository.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        User password to login to the docker repository. One of password or passwordSecretReference must be specified.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordSecretReference")
    def password_secret_reference(self) -> Optional['outputs.KeyVaultSecretReferenceResponse']:
        """
        KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
        """
        return pulumi.get(self, "password_secret_reference")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PyTorchSettingsResponse(dict):
    """
    pyTorch job settings.
    """
    def __init__(__self__, *,
                 python_script_file_path: str,
                 command_line_args: Optional[str] = None,
                 communication_backend: Optional[str] = None,
                 process_count: Optional[int] = None,
                 python_interpreter_path: Optional[str] = None):
        """
        pyTorch job settings.
        :param str python_script_file_path: The python script to execute.
        :param str command_line_args: Command line arguments that need to be passed to the python script.
        :param str communication_backend: Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
        :param int process_count: Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        :param str python_interpreter_path: The path to the Python interpreter.
        """
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if communication_backend is not None:
            pulumi.set(__self__, "communication_backend", communication_backend)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> str:
        """
        The python script to execute.
        """
        return pulumi.get(self, "python_script_file_path")

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[str]:
        """
        Command line arguments that need to be passed to the python script.
        """
        return pulumi.get(self, "command_line_args")

    @property
    @pulumi.getter(name="communicationBackend")
    def communication_backend(self) -> Optional[str]:
        """
        Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
        """
        return pulumi.get(self, "communication_backend")

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[int]:
        """
        Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[str]:
        """
        The path to the Python interpreter.
        """
        return pulumi.get(self, "python_interpreter_path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RemoteLoginInformationResponseResult(dict):
    """
    Login details to SSH to a compute node in cluster.
    """
    def __init__(__self__, *,
                 ip_address: str,
                 node_id: str,
                 port: float):
        """
        Login details to SSH to a compute node in cluster.
        :param str ip_address: Public IP address of the compute node.
        :param str node_id: ID of the compute node.
        :param float port: SSH port number of the node.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        Public IP address of the compute node.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        ID of the compute node.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter
    def port(self) -> float:
        """
        SSH port number of the node.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ResourceIdResponse(dict):
    """
    Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        :param str id: The ID of the resource
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the resource
        """
        return pulumi.get(self, "id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSettingsResponse(dict):
    """
    At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
    """
    def __init__(__self__, *,
                 auto_scale: Optional['outputs.AutoScaleSettingsResponse'] = None,
                 manual: Optional['outputs.ManualScaleSettingsResponse'] = None):
        """
        At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
        :param 'AutoScaleSettingsResponseArgs' auto_scale: Auto-scale settings for the cluster.
        :param 'ManualScaleSettingsResponseArgs' manual: Manual scale settings for the cluster.
        """
        if auto_scale is not None:
            pulumi.set(__self__, "auto_scale", auto_scale)
        if manual is not None:
            pulumi.set(__self__, "manual", manual)

    @property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> Optional['outputs.AutoScaleSettingsResponse']:
        """
        Auto-scale settings for the cluster.
        """
        return pulumi.get(self, "auto_scale")

    @property
    @pulumi.getter
    def manual(self) -> Optional['outputs.ManualScaleSettingsResponse']:
        """
        Manual scale settings for the cluster.
        """
        return pulumi.get(self, "manual")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SetupTaskResponse(dict):
    """
    Specifies a setup task which can be used to customize the compute nodes of the cluster.
    """
    def __init__(__self__, *,
                 command_line: str,
                 std_out_err_path_prefix: str,
                 std_out_err_path_suffix: str,
                 environment_variables: Optional[Sequence['outputs.EnvironmentVariableResponse']] = None,
                 secrets: Optional[Sequence['outputs.EnvironmentVariableWithSecretValueResponse']] = None):
        """
        Specifies a setup task which can be used to customize the compute nodes of the cluster.
        :param str command_line: The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
        :param str std_out_err_path_prefix: The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
        :param str std_out_err_path_suffix: A path segment appended by Batch AI to stdOutErrPathPrefix to form a path where stdout, stderr and execution log of the setup task will be uploaded. Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. The full path can be obtained by concatenation of stdOutErrPathPrefix and stdOutErrPathSuffix.
        :param Sequence['EnvironmentVariableResponseArgs'] environment_variables: A collection of user defined environment variables to be set for setup task.
        :param Sequence['EnvironmentVariableWithSecretValueResponseArgs'] secrets: A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
        """
        pulumi.set(__self__, "command_line", command_line)
        pulumi.set(__self__, "std_out_err_path_prefix", std_out_err_path_prefix)
        pulumi.set(__self__, "std_out_err_path_suffix", std_out_err_path_suffix)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> str:
        """
        The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
        """
        return pulumi.get(self, "command_line")

    @property
    @pulumi.getter(name="stdOutErrPathPrefix")
    def std_out_err_path_prefix(self) -> str:
        """
        The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
        """
        return pulumi.get(self, "std_out_err_path_prefix")

    @property
    @pulumi.getter(name="stdOutErrPathSuffix")
    def std_out_err_path_suffix(self) -> str:
        """
        A path segment appended by Batch AI to stdOutErrPathPrefix to form a path where stdout, stderr and execution log of the setup task will be uploaded. Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. The full path can be obtained by concatenation of stdOutErrPathPrefix and stdOutErrPathSuffix.
        """
        return pulumi.get(self, "std_out_err_path_suffix")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Sequence['outputs.EnvironmentVariableResponse']]:
        """
        A collection of user defined environment variables to be set for setup task.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence['outputs.EnvironmentVariableWithSecretValueResponse']]:
        """
        A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
        """
        return pulumi.get(self, "secrets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SshConfigurationResponse(dict):
    """
    SSH configuration.
    """
    def __init__(__self__, *,
                 user_account_settings: 'outputs.UserAccountSettingsResponse',
                 public_ips_to_allow: Optional[Sequence[str]] = None):
        """
        SSH configuration.
        :param 'UserAccountSettingsResponseArgs' user_account_settings: Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
        :param Sequence[str] public_ips_to_allow: List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
        """
        pulumi.set(__self__, "user_account_settings", user_account_settings)
        if public_ips_to_allow is not None:
            pulumi.set(__self__, "public_ips_to_allow", public_ips_to_allow)

    @property
    @pulumi.getter(name="userAccountSettings")
    def user_account_settings(self) -> 'outputs.UserAccountSettingsResponse':
        """
        Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
        """
        return pulumi.get(self, "user_account_settings")

    @property
    @pulumi.getter(name="publicIPsToAllow")
    def public_ips_to_allow(self) -> Optional[Sequence[str]]:
        """
        List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
        """
        return pulumi.get(self, "public_ips_to_allow")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TensorFlowSettingsResponse(dict):
    """
    TensorFlow job settings.
    """
    def __init__(__self__, *,
                 python_script_file_path: str,
                 master_command_line_args: Optional[str] = None,
                 parameter_server_command_line_args: Optional[str] = None,
                 parameter_server_count: Optional[int] = None,
                 python_interpreter_path: Optional[str] = None,
                 worker_command_line_args: Optional[str] = None,
                 worker_count: Optional[int] = None):
        """
        TensorFlow job settings.
        :param str python_script_file_path: The python script to execute.
        :param str master_command_line_args: Command line arguments that need to be passed to the python script for the master task.
        :param str parameter_server_command_line_args: Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
        :param int parameter_server_count: The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
        :param str python_interpreter_path: The path to the Python interpreter.
        :param str worker_command_line_args: Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
        :param int worker_count: The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
        """
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if master_command_line_args is not None:
            pulumi.set(__self__, "master_command_line_args", master_command_line_args)
        if parameter_server_command_line_args is not None:
            pulumi.set(__self__, "parameter_server_command_line_args", parameter_server_command_line_args)
        if parameter_server_count is not None:
            pulumi.set(__self__, "parameter_server_count", parameter_server_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)
        if worker_command_line_args is not None:
            pulumi.set(__self__, "worker_command_line_args", worker_command_line_args)
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> str:
        """
        The python script to execute.
        """
        return pulumi.get(self, "python_script_file_path")

    @property
    @pulumi.getter(name="masterCommandLineArgs")
    def master_command_line_args(self) -> Optional[str]:
        """
        Command line arguments that need to be passed to the python script for the master task.
        """
        return pulumi.get(self, "master_command_line_args")

    @property
    @pulumi.getter(name="parameterServerCommandLineArgs")
    def parameter_server_command_line_args(self) -> Optional[str]:
        """
        Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
        """
        return pulumi.get(self, "parameter_server_command_line_args")

    @property
    @pulumi.getter(name="parameterServerCount")
    def parameter_server_count(self) -> Optional[int]:
        """
        The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
        """
        return pulumi.get(self, "parameter_server_count")

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[str]:
        """
        The path to the Python interpreter.
        """
        return pulumi.get(self, "python_interpreter_path")

    @property
    @pulumi.getter(name="workerCommandLineArgs")
    def worker_command_line_args(self) -> Optional[str]:
        """
        Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
        """
        return pulumi.get(self, "worker_command_line_args")

    @property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[int]:
        """
        The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
        """
        return pulumi.get(self, "worker_count")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UnmanagedFileSystemReferenceResponse(dict):
    """
    Unmanaged file system mounting configuration.
    """
    def __init__(__self__, *,
                 mount_command: str,
                 relative_mount_path: str):
        """
        Unmanaged file system mounting configuration.
        :param str mount_command: Mount command line. Note, Batch AI will append mount path to the command on its own.
        :param str relative_mount_path: The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        """
        pulumi.set(__self__, "mount_command", mount_command)
        pulumi.set(__self__, "relative_mount_path", relative_mount_path)

    @property
    @pulumi.getter(name="mountCommand")
    def mount_command(self) -> str:
        """
        Mount command line. Note, Batch AI will append mount path to the command on its own.
        """
        return pulumi.get(self, "mount_command")

    @property
    @pulumi.getter(name="relativeMountPath")
    def relative_mount_path(self) -> str:
        """
        The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        """
        return pulumi.get(self, "relative_mount_path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserAccountSettingsResponse(dict):
    """
    Settings for user account that gets created on each on the nodes of a cluster.
    """
    def __init__(__self__, *,
                 admin_user_name: str,
                 admin_user_password: Optional[str] = None,
                 admin_user_ssh_public_key: Optional[str] = None):
        """
        Settings for user account that gets created on each on the nodes of a cluster.
        :param str admin_user_name: Name of the administrator user account which can be used to SSH to nodes.
        :param str admin_user_password: Password of the administrator user account.
        :param str admin_user_ssh_public_key: SSH public key of the administrator user account.
        """
        pulumi.set(__self__, "admin_user_name", admin_user_name)
        if admin_user_password is not None:
            pulumi.set(__self__, "admin_user_password", admin_user_password)
        if admin_user_ssh_public_key is not None:
            pulumi.set(__self__, "admin_user_ssh_public_key", admin_user_ssh_public_key)

    @property
    @pulumi.getter(name="adminUserName")
    def admin_user_name(self) -> str:
        """
        Name of the administrator user account which can be used to SSH to nodes.
        """
        return pulumi.get(self, "admin_user_name")

    @property
    @pulumi.getter(name="adminUserPassword")
    def admin_user_password(self) -> Optional[str]:
        """
        Password of the administrator user account.
        """
        return pulumi.get(self, "admin_user_password")

    @property
    @pulumi.getter(name="adminUserSshPublicKey")
    def admin_user_ssh_public_key(self) -> Optional[str]:
        """
        SSH public key of the administrator user account.
        """
        return pulumi.get(self, "admin_user_ssh_public_key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineConfigurationResponse(dict):
    """
    VM configuration.
    """
    def __init__(__self__, *,
                 image_reference: Optional['outputs.ImageReferenceResponse'] = None):
        """
        VM configuration.
        :param 'ImageReferenceResponseArgs' image_reference: OS image reference for cluster nodes.
        """
        if image_reference is not None:
            pulumi.set(__self__, "image_reference", image_reference)

    @property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> Optional['outputs.ImageReferenceResponse']:
        """
        OS image reference for cluster nodes.
        """
        return pulumi.get(self, "image_reference")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


