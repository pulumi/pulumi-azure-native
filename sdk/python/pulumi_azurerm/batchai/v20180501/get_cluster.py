# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetClusterResult:
    """
    Information about a Cluster.
    """
    def __init__(__self__, allocation_state=None, allocation_state_transition_time=None, creation_time=None, current_node_count=None, errors=None, name=None, node_setup=None, node_state_counts=None, provisioning_state=None, provisioning_state_transition_time=None, scale_settings=None, subnet=None, type=None, user_account_settings=None, virtual_machine_configuration=None, vm_priority=None, vm_size=None):
        if allocation_state and not isinstance(allocation_state, str):
            raise TypeError("Expected argument 'allocation_state' to be a str")
        __self__.allocation_state = allocation_state
        """
        Allocation state of the cluster. Possible values are: steady - Indicates that the cluster is not resizing. There are no changes to the number of compute nodes in the cluster in progress. A cluster enters this state when it is created and when no operations are being performed on the cluster to change the number of compute nodes. resizing - Indicates that the cluster is resizing; that is, compute nodes are being added to or removed from the cluster.
        """
        if allocation_state_transition_time and not isinstance(allocation_state_transition_time, str):
            raise TypeError("Expected argument 'allocation_state_transition_time' to be a str")
        __self__.allocation_state_transition_time = allocation_state_transition_time
        """
        The time at which the cluster entered its current allocation state.
        """
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        __self__.creation_time = creation_time
        """
        The time when the cluster was created.
        """
        if current_node_count and not isinstance(current_node_count, float):
            raise TypeError("Expected argument 'current_node_count' to be a float")
        __self__.current_node_count = current_node_count
        """
        The number of compute nodes currently assigned to the cluster.
        """
        if errors and not isinstance(errors, list):
            raise TypeError("Expected argument 'errors' to be a list")
        __self__.errors = errors
        """
        Collection of errors encountered by various compute nodes during node setup.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if node_setup and not isinstance(node_setup, dict):
            raise TypeError("Expected argument 'node_setup' to be a dict")
        __self__.node_setup = node_setup
        """
        Setup (mount file systems, performance counters settings and custom setup task) to be performed on each compute node in the cluster.
        """
        if node_state_counts and not isinstance(node_state_counts, dict):
            raise TypeError("Expected argument 'node_state_counts' to be a dict")
        __self__.node_state_counts = node_state_counts
        """
        Counts of various node states on the cluster.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Provisioning state of the cluster. Possible value are: creating - Specifies that the cluster is being created. succeeded - Specifies that the cluster has been created successfully. failed - Specifies that the cluster creation has failed. deleting - Specifies that the cluster is being deleted.
        """
        if provisioning_state_transition_time and not isinstance(provisioning_state_transition_time, str):
            raise TypeError("Expected argument 'provisioning_state_transition_time' to be a str")
        __self__.provisioning_state_transition_time = provisioning_state_transition_time
        """
        Time when the provisioning state was changed.
        """
        if scale_settings and not isinstance(scale_settings, dict):
            raise TypeError("Expected argument 'scale_settings' to be a dict")
        __self__.scale_settings = scale_settings
        """
        Scale settings of the cluster.
        """
        if subnet and not isinstance(subnet, dict):
            raise TypeError("Expected argument 'subnet' to be a dict")
        __self__.subnet = subnet
        """
        Virtual network subnet resource ID the cluster nodes belong to.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """
        if user_account_settings and not isinstance(user_account_settings, dict):
            raise TypeError("Expected argument 'user_account_settings' to be a dict")
        __self__.user_account_settings = user_account_settings
        """
        Administrator user account settings which can be used to SSH to compute nodes.
        """
        if virtual_machine_configuration and not isinstance(virtual_machine_configuration, dict):
            raise TypeError("Expected argument 'virtual_machine_configuration' to be a dict")
        __self__.virtual_machine_configuration = virtual_machine_configuration
        """
        Virtual machine configuration (OS image) of the compute nodes. All nodes in a cluster have the same OS image configuration.
        """
        if vm_priority and not isinstance(vm_priority, str):
            raise TypeError("Expected argument 'vm_priority' to be a str")
        __self__.vm_priority = vm_priority
        """
        VM priority of cluster nodes.
        """
        if vm_size and not isinstance(vm_size, str):
            raise TypeError("Expected argument 'vm_size' to be a str")
        __self__.vm_size = vm_size
        """
        The size of the virtual machines in the cluster. All nodes in a cluster have the same VM size.
        """


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            allocation_state=self.allocation_state,
            allocation_state_transition_time=self.allocation_state_transition_time,
            creation_time=self.creation_time,
            current_node_count=self.current_node_count,
            errors=self.errors,
            name=self.name,
            node_setup=self.node_setup,
            node_state_counts=self.node_state_counts,
            provisioning_state=self.provisioning_state,
            provisioning_state_transition_time=self.provisioning_state_transition_time,
            scale_settings=self.scale_settings,
            subnet=self.subnet,
            type=self.type,
            user_account_settings=self.user_account_settings,
            virtual_machine_configuration=self.virtual_machine_configuration,
            vm_priority=self.vm_priority,
            vm_size=self.vm_size)


def get_cluster(name=None, resource_group_name=None, workspace_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the cluster within the specified resource group. Cluster names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    :param str workspace_name: The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['workspaceName'] = workspace_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:batchai/v20180501:getCluster', __args__, opts=opts).value

    return AwaitableGetClusterResult(
        allocation_state=__ret__.get('allocationState'),
        allocation_state_transition_time=__ret__.get('allocationStateTransitionTime'),
        creation_time=__ret__.get('creationTime'),
        current_node_count=__ret__.get('currentNodeCount'),
        errors=__ret__.get('errors'),
        name=__ret__.get('name'),
        node_setup=__ret__.get('nodeSetup'),
        node_state_counts=__ret__.get('nodeStateCounts'),
        provisioning_state=__ret__.get('provisioningState'),
        provisioning_state_transition_time=__ret__.get('provisioningStateTransitionTime'),
        scale_settings=__ret__.get('scaleSettings'),
        subnet=__ret__.get('subnet'),
        type=__ret__.get('type'),
        user_account_settings=__ret__.get('userAccountSettings'),
        virtual_machine_configuration=__ret__.get('virtualMachineConfiguration'),
        vm_priority=__ret__.get('vmPriority'),
        vm_size=__ret__.get('vmSize'))
