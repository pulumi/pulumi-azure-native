# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'AppInsightsReferenceArgs',
    'AutoScaleSettingsArgs',
    'AzureBlobFileSystemReferenceArgs',
    'AzureFileShareReferenceArgs',
    'AzureStorageCredentialsInfoArgs',
    'CNTKsettingsArgs',
    'Caffe2SettingsArgs',
    'CaffeSettingsArgs',
    'ChainerSettingsArgs',
    'ContainerSettingsArgs',
    'CustomMpiSettingsArgs',
    'CustomToolkitSettingsArgs',
    'DataDisksArgs',
    'EnvironmentVariableArgs',
    'EnvironmentVariableWithSecretValueArgs',
    'FileServerReferenceArgs',
    'HorovodSettingsArgs',
    'ImageReferenceArgs',
    'ImageSourceRegistryArgs',
    'InputDirectoryArgs',
    'JobBasePropertiesConstraintsArgs',
    'JobPreparationArgs',
    'KeyVaultSecretReferenceArgs',
    'ManualScaleSettingsArgs',
    'MountVolumesArgs',
    'NodeSetupArgs',
    'OutputDirectoryArgs',
    'PerformanceCountersSettingsArgs',
    'PrivateRegistryCredentialsArgs',
    'PyTorchSettingsArgs',
    'ResourceIdArgs',
    'ScaleSettingsArgs',
    'SetupTaskArgs',
    'SshConfigurationArgs',
    'TensorFlowSettingsArgs',
    'UnmanagedFileSystemReferenceArgs',
    'UserAccountSettingsArgs',
    'VirtualMachineConfigurationArgs',
]

@pulumi.input_type
class AppInsightsReferenceArgs:
    def __init__(__self__, *,
                 component: pulumi.Input['ResourceIdArgs'],
                 instrumentation_key: Optional[pulumi.Input[str]] = None,
                 instrumentation_key_secret_reference: Optional[pulumi.Input['KeyVaultSecretReferenceArgs']] = None):
        """
        Azure Application Insights information for performance counters reporting.
        :param pulumi.Input['ResourceIdArgs'] component: Azure Application Insights component resource ID.
        :param pulumi.Input[str] instrumentation_key: Value of the Azure Application Insights instrumentation key.
        :param pulumi.Input['KeyVaultSecretReferenceArgs'] instrumentation_key_secret_reference: KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
        """
        pulumi.set(__self__, "component", component)
        if instrumentation_key is not None:
            pulumi.set(__self__, "instrumentation_key", instrumentation_key)
        if instrumentation_key_secret_reference is not None:
            pulumi.set(__self__, "instrumentation_key_secret_reference", instrumentation_key_secret_reference)

    @property
    @pulumi.getter
    def component(self) -> pulumi.Input['ResourceIdArgs']:
        """
        Azure Application Insights component resource ID.
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: pulumi.Input['ResourceIdArgs']):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter(name="instrumentationKey")
    def instrumentation_key(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the Azure Application Insights instrumentation key.
        """
        return pulumi.get(self, "instrumentation_key")

    @instrumentation_key.setter
    def instrumentation_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instrumentation_key", value)

    @property
    @pulumi.getter(name="instrumentationKeySecretReference")
    def instrumentation_key_secret_reference(self) -> Optional[pulumi.Input['KeyVaultSecretReferenceArgs']]:
        """
        KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
        """
        return pulumi.get(self, "instrumentation_key_secret_reference")

    @instrumentation_key_secret_reference.setter
    def instrumentation_key_secret_reference(self, value: Optional[pulumi.Input['KeyVaultSecretReferenceArgs']]):
        pulumi.set(self, "instrumentation_key_secret_reference", value)


@pulumi.input_type
class AutoScaleSettingsArgs:
    def __init__(__self__, *,
                 maximum_node_count: pulumi.Input[int],
                 minimum_node_count: pulumi.Input[int],
                 initial_node_count: Optional[pulumi.Input[int]] = None):
        """
        Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
        :param pulumi.Input[int] maximum_node_count: The maximum number of compute nodes the cluster can have.
        :param pulumi.Input[int] minimum_node_count: The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
        :param pulumi.Input[int] initial_node_count: The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
        """
        pulumi.set(__self__, "maximum_node_count", maximum_node_count)
        pulumi.set(__self__, "minimum_node_count", minimum_node_count)
        if initial_node_count is not None:
            pulumi.set(__self__, "initial_node_count", initial_node_count)

    @property
    @pulumi.getter(name="maximumNodeCount")
    def maximum_node_count(self) -> pulumi.Input[int]:
        """
        The maximum number of compute nodes the cluster can have.
        """
        return pulumi.get(self, "maximum_node_count")

    @maximum_node_count.setter
    def maximum_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "maximum_node_count", value)

    @property
    @pulumi.getter(name="minimumNodeCount")
    def minimum_node_count(self) -> pulumi.Input[int]:
        """
        The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
        """
        return pulumi.get(self, "minimum_node_count")

    @minimum_node_count.setter
    def minimum_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "minimum_node_count", value)

    @property
    @pulumi.getter(name="initialNodeCount")
    def initial_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
        """
        return pulumi.get(self, "initial_node_count")

    @initial_node_count.setter
    def initial_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_node_count", value)


@pulumi.input_type
class AzureBlobFileSystemReferenceArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 container_name: pulumi.Input[str],
                 credentials: pulumi.Input['AzureStorageCredentialsInfoArgs'],
                 relative_mount_path: pulumi.Input[str],
                 mount_options: Optional[pulumi.Input[str]] = None):
        """
        Azure Blob Storage Container mounting configuration.
        :param pulumi.Input[str] account_name: Name of the Azure storage account.
        :param pulumi.Input[str] container_name: Name of the Azure Blob Storage container to mount on the cluster.
        :param pulumi.Input['AzureStorageCredentialsInfoArgs'] credentials: Information about the Azure storage credentials.
        :param pulumi.Input[str] relative_mount_path: The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        :param pulumi.Input[str] mount_options: Mount options for mounting blobfuse file system.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "relative_mount_path", relative_mount_path)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        Name of the Azure storage account.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[str]:
        """
        Name of the Azure Blob Storage container to mount on the cluster.
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['AzureStorageCredentialsInfoArgs']:
        """
        Information about the Azure storage credentials.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['AzureStorageCredentialsInfoArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="relativeMountPath")
    def relative_mount_path(self) -> pulumi.Input[str]:
        """
        The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        """
        return pulumi.get(self, "relative_mount_path")

    @relative_mount_path.setter
    def relative_mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_mount_path", value)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input[str]]:
        """
        Mount options for mounting blobfuse file system.
        """
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_options", value)


@pulumi.input_type
class AzureFileShareReferenceArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 azure_file_url: pulumi.Input[str],
                 credentials: pulumi.Input['AzureStorageCredentialsInfoArgs'],
                 relative_mount_path: pulumi.Input[str],
                 directory_mode: Optional[pulumi.Input[str]] = None,
                 file_mode: Optional[pulumi.Input[str]] = None):
        """
        Azure File Share mounting configuration.
        :param pulumi.Input[str] account_name: Name of the Azure storage account.
        :param pulumi.Input[str] azure_file_url: URL to access the Azure File.
        :param pulumi.Input['AzureStorageCredentialsInfoArgs'] credentials: Information about the Azure storage credentials.
        :param pulumi.Input[str] relative_mount_path: The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        :param pulumi.Input[str] directory_mode: File mode for directories on the mounted file share. Default value: 0777.
        :param pulumi.Input[str] file_mode: File mode for files on the mounted file share. Default value: 0777.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "azure_file_url", azure_file_url)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "relative_mount_path", relative_mount_path)
        if directory_mode is not None:
            pulumi.set(__self__, "directory_mode", directory_mode)
        if file_mode is not None:
            pulumi.set(__self__, "file_mode", file_mode)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        Name of the Azure storage account.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="azureFileUrl")
    def azure_file_url(self) -> pulumi.Input[str]:
        """
        URL to access the Azure File.
        """
        return pulumi.get(self, "azure_file_url")

    @azure_file_url.setter
    def azure_file_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_file_url", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['AzureStorageCredentialsInfoArgs']:
        """
        Information about the Azure storage credentials.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['AzureStorageCredentialsInfoArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="relativeMountPath")
    def relative_mount_path(self) -> pulumi.Input[str]:
        """
        The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        """
        return pulumi.get(self, "relative_mount_path")

    @relative_mount_path.setter
    def relative_mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_mount_path", value)

    @property
    @pulumi.getter(name="directoryMode")
    def directory_mode(self) -> Optional[pulumi.Input[str]]:
        """
        File mode for directories on the mounted file share. Default value: 0777.
        """
        return pulumi.get(self, "directory_mode")

    @directory_mode.setter
    def directory_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory_mode", value)

    @property
    @pulumi.getter(name="fileMode")
    def file_mode(self) -> Optional[pulumi.Input[str]]:
        """
        File mode for files on the mounted file share. Default value: 0777.
        """
        return pulumi.get(self, "file_mode")

    @file_mode.setter
    def file_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_mode", value)


@pulumi.input_type
class AzureStorageCredentialsInfoArgs:
    def __init__(__self__, *,
                 account_key: Optional[pulumi.Input[str]] = None,
                 account_key_secret_reference: Optional[pulumi.Input['KeyVaultSecretReferenceArgs']] = None):
        """
        Azure storage account credentials.
        :param pulumi.Input[str] account_key: Storage account key. One of accountKey or accountKeySecretReference must be specified.
        :param pulumi.Input['KeyVaultSecretReferenceArgs'] account_key_secret_reference: Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
        """
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)
        if account_key_secret_reference is not None:
            pulumi.set(__self__, "account_key_secret_reference", account_key_secret_reference)

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[pulumi.Input[str]]:
        """
        Storage account key. One of accountKey or accountKeySecretReference must be specified.
        """
        return pulumi.get(self, "account_key")

    @account_key.setter
    def account_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_key", value)

    @property
    @pulumi.getter(name="accountKeySecretReference")
    def account_key_secret_reference(self) -> Optional[pulumi.Input['KeyVaultSecretReferenceArgs']]:
        """
        Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
        """
        return pulumi.get(self, "account_key_secret_reference")

    @account_key_secret_reference.setter
    def account_key_secret_reference(self, value: Optional[pulumi.Input['KeyVaultSecretReferenceArgs']]):
        pulumi.set(self, "account_key_secret_reference", value)


@pulumi.input_type
class CNTKsettingsArgs:
    def __init__(__self__, *,
                 command_line_args: Optional[pulumi.Input[str]] = None,
                 config_file_path: Optional[pulumi.Input[str]] = None,
                 language_type: Optional[pulumi.Input[str]] = None,
                 process_count: Optional[pulumi.Input[int]] = None,
                 python_interpreter_path: Optional[pulumi.Input[str]] = None,
                 python_script_file_path: Optional[pulumi.Input[str]] = None):
        """
        CNTK (aka Microsoft Cognitive Toolkit) job settings.
        :param pulumi.Input[str] command_line_args: Command line arguments that need to be passed to the python script or cntk executable.
        :param pulumi.Input[str] config_file_path: Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
        :param pulumi.Input[str] language_type: The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
        :param pulumi.Input[int] process_count: Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        :param pulumi.Input[str] python_interpreter_path: The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
        :param pulumi.Input[str] python_script_file_path: Python script to execute. This property can be specified only if the languageType is 'Python'.
        """
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if config_file_path is not None:
            pulumi.set(__self__, "config_file_path", config_file_path)
        if language_type is not None:
            pulumi.set(__self__, "language_type", language_type)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)
        if python_script_file_path is not None:
            pulumi.set(__self__, "python_script_file_path", python_script_file_path)

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[pulumi.Input[str]]:
        """
        Command line arguments that need to be passed to the python script or cntk executable.
        """
        return pulumi.get(self, "command_line_args")

    @command_line_args.setter
    def command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_line_args", value)

    @property
    @pulumi.getter(name="configFilePath")
    def config_file_path(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
        """
        return pulumi.get(self, "config_file_path")

    @config_file_path.setter
    def config_file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_file_path", value)

    @property
    @pulumi.getter(name="languageType")
    def language_type(self) -> Optional[pulumi.Input[str]]:
        """
        The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
        """
        return pulumi.get(self, "language_type")

    @language_type.setter
    def language_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_type", value)

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @process_count.setter
    def process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_count", value)

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
        """
        return pulumi.get(self, "python_interpreter_path")

    @python_interpreter_path.setter
    def python_interpreter_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_interpreter_path", value)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> Optional[pulumi.Input[str]]:
        """
        Python script to execute. This property can be specified only if the languageType is 'Python'.
        """
        return pulumi.get(self, "python_script_file_path")

    @python_script_file_path.setter
    def python_script_file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_script_file_path", value)


@pulumi.input_type
class Caffe2SettingsArgs:
    def __init__(__self__, *,
                 python_script_file_path: pulumi.Input[str],
                 command_line_args: Optional[pulumi.Input[str]] = None,
                 python_interpreter_path: Optional[pulumi.Input[str]] = None):
        """
        Caffe2 job settings.
        :param pulumi.Input[str] python_script_file_path: The python script to execute.
        :param pulumi.Input[str] command_line_args: Command line arguments that need to be passed to the python script.
        :param pulumi.Input[str] python_interpreter_path: The path to the Python interpreter.
        """
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> pulumi.Input[str]:
        """
        The python script to execute.
        """
        return pulumi.get(self, "python_script_file_path")

    @python_script_file_path.setter
    def python_script_file_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "python_script_file_path", value)

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[pulumi.Input[str]]:
        """
        Command line arguments that need to be passed to the python script.
        """
        return pulumi.get(self, "command_line_args")

    @command_line_args.setter
    def command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_line_args", value)

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the Python interpreter.
        """
        return pulumi.get(self, "python_interpreter_path")

    @python_interpreter_path.setter
    def python_interpreter_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_interpreter_path", value)


@pulumi.input_type
class CaffeSettingsArgs:
    def __init__(__self__, *,
                 command_line_args: Optional[pulumi.Input[str]] = None,
                 config_file_path: Optional[pulumi.Input[str]] = None,
                 process_count: Optional[pulumi.Input[int]] = None,
                 python_interpreter_path: Optional[pulumi.Input[str]] = None,
                 python_script_file_path: Optional[pulumi.Input[str]] = None):
        """
        Caffe job settings.
        :param pulumi.Input[str] command_line_args: Command line arguments that need to be passed to the Caffe job.
        :param pulumi.Input[str] config_file_path: Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
        :param pulumi.Input[int] process_count: Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        :param pulumi.Input[str] python_interpreter_path: The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
        :param pulumi.Input[str] python_script_file_path: Python script to execute. This property cannot be specified if configFilePath is specified.
        """
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if config_file_path is not None:
            pulumi.set(__self__, "config_file_path", config_file_path)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)
        if python_script_file_path is not None:
            pulumi.set(__self__, "python_script_file_path", python_script_file_path)

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[pulumi.Input[str]]:
        """
        Command line arguments that need to be passed to the Caffe job.
        """
        return pulumi.get(self, "command_line_args")

    @command_line_args.setter
    def command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_line_args", value)

    @property
    @pulumi.getter(name="configFilePath")
    def config_file_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
        """
        return pulumi.get(self, "config_file_path")

    @config_file_path.setter
    def config_file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_file_path", value)

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @process_count.setter
    def process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_count", value)

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
        """
        return pulumi.get(self, "python_interpreter_path")

    @python_interpreter_path.setter
    def python_interpreter_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_interpreter_path", value)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> Optional[pulumi.Input[str]]:
        """
        Python script to execute. This property cannot be specified if configFilePath is specified.
        """
        return pulumi.get(self, "python_script_file_path")

    @python_script_file_path.setter
    def python_script_file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_script_file_path", value)


@pulumi.input_type
class ChainerSettingsArgs:
    def __init__(__self__, *,
                 python_script_file_path: pulumi.Input[str],
                 command_line_args: Optional[pulumi.Input[str]] = None,
                 process_count: Optional[pulumi.Input[int]] = None,
                 python_interpreter_path: Optional[pulumi.Input[str]] = None):
        """
        Chainer job settings.
        :param pulumi.Input[str] python_script_file_path: The python script to execute.
        :param pulumi.Input[str] command_line_args: Command line arguments that need to be passed to the python script.
        :param pulumi.Input[int] process_count: Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        :param pulumi.Input[str] python_interpreter_path: The path to the Python interpreter.
        """
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> pulumi.Input[str]:
        """
        The python script to execute.
        """
        return pulumi.get(self, "python_script_file_path")

    @python_script_file_path.setter
    def python_script_file_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "python_script_file_path", value)

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[pulumi.Input[str]]:
        """
        Command line arguments that need to be passed to the python script.
        """
        return pulumi.get(self, "command_line_args")

    @command_line_args.setter
    def command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_line_args", value)

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @process_count.setter
    def process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_count", value)

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the Python interpreter.
        """
        return pulumi.get(self, "python_interpreter_path")

    @python_interpreter_path.setter
    def python_interpreter_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_interpreter_path", value)


@pulumi.input_type
class ContainerSettingsArgs:
    def __init__(__self__, *,
                 image_source_registry: pulumi.Input['ImageSourceRegistryArgs'],
                 shm_size: Optional[pulumi.Input[str]] = None):
        """
        Docker container settings.
        :param pulumi.Input['ImageSourceRegistryArgs'] image_source_registry: Information about docker image and docker registry to download the container from.
        :param pulumi.Input[str] shm_size: Size of /dev/shm. Please refer to docker documentation for supported argument formats.
        """
        pulumi.set(__self__, "image_source_registry", image_source_registry)
        if shm_size is not None:
            pulumi.set(__self__, "shm_size", shm_size)

    @property
    @pulumi.getter(name="imageSourceRegistry")
    def image_source_registry(self) -> pulumi.Input['ImageSourceRegistryArgs']:
        """
        Information about docker image and docker registry to download the container from.
        """
        return pulumi.get(self, "image_source_registry")

    @image_source_registry.setter
    def image_source_registry(self, value: pulumi.Input['ImageSourceRegistryArgs']):
        pulumi.set(self, "image_source_registry", value)

    @property
    @pulumi.getter(name="shmSize")
    def shm_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size of /dev/shm. Please refer to docker documentation for supported argument formats.
        """
        return pulumi.get(self, "shm_size")

    @shm_size.setter
    def shm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shm_size", value)


@pulumi.input_type
class CustomMpiSettingsArgs:
    def __init__(__self__, *,
                 command_line: pulumi.Input[str],
                 process_count: Optional[pulumi.Input[int]] = None):
        """
        Custom MPI job settings.
        :param pulumi.Input[str] command_line: The command line to be executed by mpi runtime on each compute node.
        :param pulumi.Input[int] process_count: Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        pulumi.set(__self__, "command_line", command_line)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)

    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> pulumi.Input[str]:
        """
        The command line to be executed by mpi runtime on each compute node.
        """
        return pulumi.get(self, "command_line")

    @command_line.setter
    def command_line(self, value: pulumi.Input[str]):
        pulumi.set(self, "command_line", value)

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @process_count.setter
    def process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_count", value)


@pulumi.input_type
class CustomToolkitSettingsArgs:
    def __init__(__self__, *,
                 command_line: Optional[pulumi.Input[str]] = None):
        """
        Custom tool kit job settings.
        :param pulumi.Input[str] command_line: The command line to execute on the master node.
        """
        if command_line is not None:
            pulumi.set(__self__, "command_line", command_line)

    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> Optional[pulumi.Input[str]]:
        """
        The command line to execute on the master node.
        """
        return pulumi.get(self, "command_line")

    @command_line.setter
    def command_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_line", value)


@pulumi.input_type
class DataDisksArgs:
    def __init__(__self__, *,
                 disk_count: pulumi.Input[int],
                 disk_size_in_gb: pulumi.Input[int],
                 storage_account_type: pulumi.Input[str],
                 caching_type: Optional[pulumi.Input[str]] = None):
        """
        Data disks settings.
        :param pulumi.Input[int] disk_count: Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
        :param pulumi.Input[int] disk_size_in_gb: Disk size in GB for the blank data disks.
        :param pulumi.Input[str] storage_account_type: Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
        :param pulumi.Input[str] caching_type: Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
        """
        pulumi.set(__self__, "disk_count", disk_count)
        pulumi.set(__self__, "disk_size_in_gb", disk_size_in_gb)
        pulumi.set(__self__, "storage_account_type", storage_account_type)
        if caching_type is not None:
            pulumi.set(__self__, "caching_type", caching_type)

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> pulumi.Input[int]:
        """
        Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
        """
        return pulumi.get(self, "disk_count")

    @disk_count.setter
    def disk_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_count", value)

    @property
    @pulumi.getter(name="diskSizeInGB")
    def disk_size_in_gb(self) -> pulumi.Input[int]:
        """
        Disk size in GB for the blank data disks.
        """
        return pulumi.get(self, "disk_size_in_gb")

    @disk_size_in_gb.setter
    def disk_size_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size_in_gb", value)

    @property
    @pulumi.getter(name="storageAccountType")
    def storage_account_type(self) -> pulumi.Input[str]:
        """
        Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
        """
        return pulumi.get(self, "storage_account_type")

    @storage_account_type.setter
    def storage_account_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account_type", value)

    @property
    @pulumi.getter(name="cachingType")
    def caching_type(self) -> Optional[pulumi.Input[str]]:
        """
        Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
        """
        return pulumi.get(self, "caching_type")

    @caching_type.setter
    def caching_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching_type", value)


@pulumi.input_type
class EnvironmentVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        An environment variable definition.
        :param pulumi.Input[str] name: The name of the environment variable.
        :param pulumi.Input[str] value: The value of the environment variable.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the environment variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the environment variable.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EnvironmentVariableWithSecretValueArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_secret_reference: Optional[pulumi.Input['KeyVaultSecretReferenceArgs']] = None):
        """
        An environment variable with secret value definition.
        :param pulumi.Input[str] name: The name of the environment variable to store the secret value.
        :param pulumi.Input[str] value: The value of the environment variable. This value will never be reported back by Batch AI.
        :param pulumi.Input['KeyVaultSecretReferenceArgs'] value_secret_reference: KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_secret_reference is not None:
            pulumi.set(__self__, "value_secret_reference", value_secret_reference)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the environment variable to store the secret value.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the environment variable. This value will never be reported back by Batch AI.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueSecretReference")
    def value_secret_reference(self) -> Optional[pulumi.Input['KeyVaultSecretReferenceArgs']]:
        """
        KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
        """
        return pulumi.get(self, "value_secret_reference")

    @value_secret_reference.setter
    def value_secret_reference(self, value: Optional[pulumi.Input['KeyVaultSecretReferenceArgs']]):
        pulumi.set(self, "value_secret_reference", value)


@pulumi.input_type
class FileServerReferenceArgs:
    def __init__(__self__, *,
                 file_server: pulumi.Input['ResourceIdArgs'],
                 relative_mount_path: pulumi.Input[str],
                 mount_options: Optional[pulumi.Input[str]] = None,
                 source_directory: Optional[pulumi.Input[str]] = None):
        """
        File Server mounting configuration.
        :param pulumi.Input['ResourceIdArgs'] file_server: Resource ID of the existing File Server to be mounted.
        :param pulumi.Input[str] relative_mount_path: The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        :param pulumi.Input[str] mount_options: Mount options to be passed to mount command.
        :param pulumi.Input[str] source_directory: File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
        """
        pulumi.set(__self__, "file_server", file_server)
        pulumi.set(__self__, "relative_mount_path", relative_mount_path)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)
        if source_directory is not None:
            pulumi.set(__self__, "source_directory", source_directory)

    @property
    @pulumi.getter(name="fileServer")
    def file_server(self) -> pulumi.Input['ResourceIdArgs']:
        """
        Resource ID of the existing File Server to be mounted.
        """
        return pulumi.get(self, "file_server")

    @file_server.setter
    def file_server(self, value: pulumi.Input['ResourceIdArgs']):
        pulumi.set(self, "file_server", value)

    @property
    @pulumi.getter(name="relativeMountPath")
    def relative_mount_path(self) -> pulumi.Input[str]:
        """
        The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        """
        return pulumi.get(self, "relative_mount_path")

    @relative_mount_path.setter
    def relative_mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_mount_path", value)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input[str]]:
        """
        Mount options to be passed to mount command.
        """
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_options", value)

    @property
    @pulumi.getter(name="sourceDirectory")
    def source_directory(self) -> Optional[pulumi.Input[str]]:
        """
        File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
        """
        return pulumi.get(self, "source_directory")

    @source_directory.setter
    def source_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_directory", value)


@pulumi.input_type
class HorovodSettingsArgs:
    def __init__(__self__, *,
                 python_script_file_path: pulumi.Input[str],
                 command_line_args: Optional[pulumi.Input[str]] = None,
                 process_count: Optional[pulumi.Input[int]] = None,
                 python_interpreter_path: Optional[pulumi.Input[str]] = None):
        """
        Specifies the settings for Horovod job.
        :param pulumi.Input[str] python_script_file_path: The python script to execute.
        :param pulumi.Input[str] command_line_args: Command line arguments that need to be passed to the python script.
        :param pulumi.Input[int] process_count: Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        :param pulumi.Input[str] python_interpreter_path: The path to the Python interpreter.
        """
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> pulumi.Input[str]:
        """
        The python script to execute.
        """
        return pulumi.get(self, "python_script_file_path")

    @python_script_file_path.setter
    def python_script_file_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "python_script_file_path", value)

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[pulumi.Input[str]]:
        """
        Command line arguments that need to be passed to the python script.
        """
        return pulumi.get(self, "command_line_args")

    @command_line_args.setter
    def command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_line_args", value)

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @process_count.setter
    def process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_count", value)

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the Python interpreter.
        """
        return pulumi.get(self, "python_interpreter_path")

    @python_interpreter_path.setter
    def python_interpreter_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_interpreter_path", value)


@pulumi.input_type
class ImageReferenceArgs:
    def __init__(__self__, *,
                 offer: pulumi.Input[str],
                 publisher: pulumi.Input[str],
                 sku: pulumi.Input[str],
                 version: Optional[pulumi.Input[str]] = None,
                 virtual_machine_image_id: Optional[pulumi.Input[str]] = None):
        """
        The OS image reference.
        :param pulumi.Input[str] offer: Offer of the image.
        :param pulumi.Input[str] publisher: Publisher of the image.
        :param pulumi.Input[str] sku: SKU of the image.
        :param pulumi.Input[str] version: Version of the image.
        :param pulumi.Input[str] virtual_machine_image_id: The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
        """
        pulumi.set(__self__, "offer", offer)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "sku", sku)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if virtual_machine_image_id is not None:
            pulumi.set(__self__, "virtual_machine_image_id", virtual_machine_image_id)

    @property
    @pulumi.getter
    def offer(self) -> pulumi.Input[str]:
        """
        Offer of the image.
        """
        return pulumi.get(self, "offer")

    @offer.setter
    def offer(self, value: pulumi.Input[str]):
        pulumi.set(self, "offer", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[str]:
        """
        Publisher of the image.
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Input[str]:
        """
        SKU of the image.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: pulumi.Input[str]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the image.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="virtualMachineImageId")
    def virtual_machine_image_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
        """
        return pulumi.get(self, "virtual_machine_image_id")

    @virtual_machine_image_id.setter
    def virtual_machine_image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_image_id", value)


@pulumi.input_type
class ImageSourceRegistryArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['PrivateRegistryCredentialsArgs']] = None,
                 server_url: Optional[pulumi.Input[str]] = None):
        """
        Information about docker image for the job.
        :param pulumi.Input[str] image: The name of the image in the image repository.
        :param pulumi.Input['PrivateRegistryCredentialsArgs'] credentials: Credentials to access the private docker repository.
        :param pulumi.Input[str] server_url: URL for image repository.
        """
        pulumi.set(__self__, "image", image)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        The name of the image in the image repository.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['PrivateRegistryCredentialsArgs']]:
        """
        Credentials to access the private docker repository.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['PrivateRegistryCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL for image repository.
        """
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_url", value)


@pulumi.input_type
class InputDirectoryArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 path: pulumi.Input[str]):
        """
        Input directory for the job.
        :param pulumi.Input[str] id: The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
        :param pulumi.Input[str] path: The path to the input directory.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The path to the input directory.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class JobBasePropertiesConstraintsArgs:
    def __init__(__self__, *,
                 max_wall_clock_time: Optional[pulumi.Input[str]] = None):
        """
        Constraints associated with the Job.
        :param pulumi.Input[str] max_wall_clock_time: Max time the job can run. Default value: 1 week.
        """
        if max_wall_clock_time is not None:
            pulumi.set(__self__, "max_wall_clock_time", max_wall_clock_time)

    @property
    @pulumi.getter(name="maxWallClockTime")
    def max_wall_clock_time(self) -> Optional[pulumi.Input[str]]:
        """
        Max time the job can run. Default value: 1 week.
        """
        return pulumi.get(self, "max_wall_clock_time")

    @max_wall_clock_time.setter
    def max_wall_clock_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_wall_clock_time", value)


@pulumi.input_type
class JobPreparationArgs:
    def __init__(__self__, *,
                 command_line: pulumi.Input[str]):
        """
        Job preparation settings.
        :param pulumi.Input[str] command_line: The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
        """
        pulumi.set(__self__, "command_line", command_line)

    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> pulumi.Input[str]:
        """
        The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
        """
        return pulumi.get(self, "command_line")

    @command_line.setter
    def command_line(self, value: pulumi.Input[str]):
        pulumi.set(self, "command_line", value)


@pulumi.input_type
class KeyVaultSecretReferenceArgs:
    def __init__(__self__, *,
                 secret_url: pulumi.Input[str],
                 source_vault: pulumi.Input['ResourceIdArgs']):
        """
        Key Vault Secret reference.
        :param pulumi.Input[str] secret_url: The URL referencing a secret in the Key Vault.
        :param pulumi.Input['ResourceIdArgs'] source_vault: Fully qualified resource identifier of the Key Vault.
        """
        pulumi.set(__self__, "secret_url", secret_url)
        pulumi.set(__self__, "source_vault", source_vault)

    @property
    @pulumi.getter(name="secretUrl")
    def secret_url(self) -> pulumi.Input[str]:
        """
        The URL referencing a secret in the Key Vault.
        """
        return pulumi.get(self, "secret_url")

    @secret_url.setter
    def secret_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_url", value)

    @property
    @pulumi.getter(name="sourceVault")
    def source_vault(self) -> pulumi.Input['ResourceIdArgs']:
        """
        Fully qualified resource identifier of the Key Vault.
        """
        return pulumi.get(self, "source_vault")

    @source_vault.setter
    def source_vault(self, value: pulumi.Input['ResourceIdArgs']):
        pulumi.set(self, "source_vault", value)


@pulumi.input_type
class ManualScaleSettingsArgs:
    def __init__(__self__, *,
                 target_node_count: pulumi.Input[int],
                 node_deallocation_option: Optional[pulumi.Input[str]] = None):
        """
        Manual scale settings for the cluster.
        :param pulumi.Input[int] target_node_count: The desired number of compute nodes in the Cluster. Default is 0.
        :param pulumi.Input[str] node_deallocation_option: An action to be performed when the cluster size is decreasing. The default value is requeue.
        """
        pulumi.set(__self__, "target_node_count", target_node_count)
        if node_deallocation_option is not None:
            pulumi.set(__self__, "node_deallocation_option", node_deallocation_option)

    @property
    @pulumi.getter(name="targetNodeCount")
    def target_node_count(self) -> pulumi.Input[int]:
        """
        The desired number of compute nodes in the Cluster. Default is 0.
        """
        return pulumi.get(self, "target_node_count")

    @target_node_count.setter
    def target_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_node_count", value)

    @property
    @pulumi.getter(name="nodeDeallocationOption")
    def node_deallocation_option(self) -> Optional[pulumi.Input[str]]:
        """
        An action to be performed when the cluster size is decreasing. The default value is requeue.
        """
        return pulumi.get(self, "node_deallocation_option")

    @node_deallocation_option.setter
    def node_deallocation_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_deallocation_option", value)


@pulumi.input_type
class MountVolumesArgs:
    def __init__(__self__, *,
                 azure_blob_file_systems: Optional[pulumi.Input[Sequence[pulumi.Input['AzureBlobFileSystemReferenceArgs']]]] = None,
                 azure_file_shares: Optional[pulumi.Input[Sequence[pulumi.Input['AzureFileShareReferenceArgs']]]] = None,
                 file_servers: Optional[pulumi.Input[Sequence[pulumi.Input['FileServerReferenceArgs']]]] = None,
                 unmanaged_file_systems: Optional[pulumi.Input[Sequence[pulumi.Input['UnmanagedFileSystemReferenceArgs']]]] = None):
        """
        Details of volumes to mount on the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['AzureBlobFileSystemReferenceArgs']]] azure_blob_file_systems: A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
        :param pulumi.Input[Sequence[pulumi.Input['AzureFileShareReferenceArgs']]] azure_file_shares: A collection of Azure File Shares that are to be mounted to the cluster nodes.
        :param pulumi.Input[Sequence[pulumi.Input['FileServerReferenceArgs']]] file_servers: A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
        :param pulumi.Input[Sequence[pulumi.Input['UnmanagedFileSystemReferenceArgs']]] unmanaged_file_systems: A collection of unmanaged file systems that are to be mounted to the cluster nodes.
        """
        if azure_blob_file_systems is not None:
            pulumi.set(__self__, "azure_blob_file_systems", azure_blob_file_systems)
        if azure_file_shares is not None:
            pulumi.set(__self__, "azure_file_shares", azure_file_shares)
        if file_servers is not None:
            pulumi.set(__self__, "file_servers", file_servers)
        if unmanaged_file_systems is not None:
            pulumi.set(__self__, "unmanaged_file_systems", unmanaged_file_systems)

    @property
    @pulumi.getter(name="azureBlobFileSystems")
    def azure_blob_file_systems(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureBlobFileSystemReferenceArgs']]]]:
        """
        A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
        """
        return pulumi.get(self, "azure_blob_file_systems")

    @azure_blob_file_systems.setter
    def azure_blob_file_systems(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureBlobFileSystemReferenceArgs']]]]):
        pulumi.set(self, "azure_blob_file_systems", value)

    @property
    @pulumi.getter(name="azureFileShares")
    def azure_file_shares(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureFileShareReferenceArgs']]]]:
        """
        A collection of Azure File Shares that are to be mounted to the cluster nodes.
        """
        return pulumi.get(self, "azure_file_shares")

    @azure_file_shares.setter
    def azure_file_shares(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureFileShareReferenceArgs']]]]):
        pulumi.set(self, "azure_file_shares", value)

    @property
    @pulumi.getter(name="fileServers")
    def file_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FileServerReferenceArgs']]]]:
        """
        A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
        """
        return pulumi.get(self, "file_servers")

    @file_servers.setter
    def file_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FileServerReferenceArgs']]]]):
        pulumi.set(self, "file_servers", value)

    @property
    @pulumi.getter(name="unmanagedFileSystems")
    def unmanaged_file_systems(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UnmanagedFileSystemReferenceArgs']]]]:
        """
        A collection of unmanaged file systems that are to be mounted to the cluster nodes.
        """
        return pulumi.get(self, "unmanaged_file_systems")

    @unmanaged_file_systems.setter
    def unmanaged_file_systems(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UnmanagedFileSystemReferenceArgs']]]]):
        pulumi.set(self, "unmanaged_file_systems", value)


@pulumi.input_type
class NodeSetupArgs:
    def __init__(__self__, *,
                 mount_volumes: Optional[pulumi.Input['MountVolumesArgs']] = None,
                 performance_counters_settings: Optional[pulumi.Input['PerformanceCountersSettingsArgs']] = None,
                 setup_task: Optional[pulumi.Input['SetupTaskArgs']] = None):
        """
        Node setup settings.
        :param pulumi.Input['MountVolumesArgs'] mount_volumes: Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
        :param pulumi.Input['PerformanceCountersSettingsArgs'] performance_counters_settings: Settings for performance counters collecting and uploading.
        :param pulumi.Input['SetupTaskArgs'] setup_task: Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
        """
        if mount_volumes is not None:
            pulumi.set(__self__, "mount_volumes", mount_volumes)
        if performance_counters_settings is not None:
            pulumi.set(__self__, "performance_counters_settings", performance_counters_settings)
        if setup_task is not None:
            pulumi.set(__self__, "setup_task", setup_task)

    @property
    @pulumi.getter(name="mountVolumes")
    def mount_volumes(self) -> Optional[pulumi.Input['MountVolumesArgs']]:
        """
        Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
        """
        return pulumi.get(self, "mount_volumes")

    @mount_volumes.setter
    def mount_volumes(self, value: Optional[pulumi.Input['MountVolumesArgs']]):
        pulumi.set(self, "mount_volumes", value)

    @property
    @pulumi.getter(name="performanceCountersSettings")
    def performance_counters_settings(self) -> Optional[pulumi.Input['PerformanceCountersSettingsArgs']]:
        """
        Settings for performance counters collecting and uploading.
        """
        return pulumi.get(self, "performance_counters_settings")

    @performance_counters_settings.setter
    def performance_counters_settings(self, value: Optional[pulumi.Input['PerformanceCountersSettingsArgs']]):
        pulumi.set(self, "performance_counters_settings", value)

    @property
    @pulumi.getter(name="setupTask")
    def setup_task(self) -> Optional[pulumi.Input['SetupTaskArgs']]:
        """
        Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
        """
        return pulumi.get(self, "setup_task")

    @setup_task.setter
    def setup_task(self, value: Optional[pulumi.Input['SetupTaskArgs']]):
        pulumi.set(self, "setup_task", value)


@pulumi.input_type
class OutputDirectoryArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 path_prefix: pulumi.Input[str],
                 path_suffix: Optional[pulumi.Input[str]] = None):
        """
        Output directory for the job.
        :param pulumi.Input[str] id: The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
        :param pulumi.Input[str] path_prefix: The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
        :param pulumi.Input[str] path_suffix: The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path_prefix", path_prefix)
        if path_suffix is not None:
            pulumi.set(__self__, "path_suffix", path_suffix)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="pathPrefix")
    def path_prefix(self) -> pulumi.Input[str]:
        """
        The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
        """
        return pulumi.get(self, "path_prefix")

    @path_prefix.setter
    def path_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "path_prefix", value)

    @property
    @pulumi.getter(name="pathSuffix")
    def path_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
        """
        return pulumi.get(self, "path_suffix")

    @path_suffix.setter
    def path_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_suffix", value)


@pulumi.input_type
class PerformanceCountersSettingsArgs:
    def __init__(__self__, *,
                 app_insights_reference: pulumi.Input['AppInsightsReferenceArgs']):
        """
        Performance counters reporting settings.
        :param pulumi.Input['AppInsightsReferenceArgs'] app_insights_reference: Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
        """
        pulumi.set(__self__, "app_insights_reference", app_insights_reference)

    @property
    @pulumi.getter(name="appInsightsReference")
    def app_insights_reference(self) -> pulumi.Input['AppInsightsReferenceArgs']:
        """
        Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
        """
        return pulumi.get(self, "app_insights_reference")

    @app_insights_reference.setter
    def app_insights_reference(self, value: pulumi.Input['AppInsightsReferenceArgs']):
        pulumi.set(self, "app_insights_reference", value)


@pulumi.input_type
class PrivateRegistryCredentialsArgs:
    def __init__(__self__, *,
                 username: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 password_secret_reference: Optional[pulumi.Input['KeyVaultSecretReferenceArgs']] = None):
        """
        Credentials to access a container image in a private repository.
        :param pulumi.Input[str] username: User name to login to the repository.
        :param pulumi.Input[str] password: User password to login to the docker repository. One of password or passwordSecretReference must be specified.
        :param pulumi.Input['KeyVaultSecretReferenceArgs'] password_secret_reference: KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
        """
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_secret_reference is not None:
            pulumi.set(__self__, "password_secret_reference", password_secret_reference)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        User name to login to the repository.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        User password to login to the docker repository. One of password or passwordSecretReference must be specified.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordSecretReference")
    def password_secret_reference(self) -> Optional[pulumi.Input['KeyVaultSecretReferenceArgs']]:
        """
        KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
        """
        return pulumi.get(self, "password_secret_reference")

    @password_secret_reference.setter
    def password_secret_reference(self, value: Optional[pulumi.Input['KeyVaultSecretReferenceArgs']]):
        pulumi.set(self, "password_secret_reference", value)


@pulumi.input_type
class PyTorchSettingsArgs:
    def __init__(__self__, *,
                 python_script_file_path: pulumi.Input[str],
                 command_line_args: Optional[pulumi.Input[str]] = None,
                 communication_backend: Optional[pulumi.Input[str]] = None,
                 process_count: Optional[pulumi.Input[int]] = None,
                 python_interpreter_path: Optional[pulumi.Input[str]] = None):
        """
        pyTorch job settings.
        :param pulumi.Input[str] python_script_file_path: The python script to execute.
        :param pulumi.Input[str] command_line_args: Command line arguments that need to be passed to the python script.
        :param pulumi.Input[str] communication_backend: Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
        :param pulumi.Input[int] process_count: Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        :param pulumi.Input[str] python_interpreter_path: The path to the Python interpreter.
        """
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if command_line_args is not None:
            pulumi.set(__self__, "command_line_args", command_line_args)
        if communication_backend is not None:
            pulumi.set(__self__, "communication_backend", communication_backend)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> pulumi.Input[str]:
        """
        The python script to execute.
        """
        return pulumi.get(self, "python_script_file_path")

    @python_script_file_path.setter
    def python_script_file_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "python_script_file_path", value)

    @property
    @pulumi.getter(name="commandLineArgs")
    def command_line_args(self) -> Optional[pulumi.Input[str]]:
        """
        Command line arguments that need to be passed to the python script.
        """
        return pulumi.get(self, "command_line_args")

    @command_line_args.setter
    def command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_line_args", value)

    @property
    @pulumi.getter(name="communicationBackend")
    def communication_backend(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
        """
        return pulumi.get(self, "communication_backend")

    @communication_backend.setter
    def communication_backend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "communication_backend", value)

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
        """
        return pulumi.get(self, "process_count")

    @process_count.setter
    def process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_count", value)

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the Python interpreter.
        """
        return pulumi.get(self, "python_interpreter_path")

    @python_interpreter_path.setter
    def python_interpreter_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_interpreter_path", value)


@pulumi.input_type
class ResourceIdArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        :param pulumi.Input[str] id: The ID of the resource
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ScaleSettingsArgs:
    def __init__(__self__, *,
                 auto_scale: Optional[pulumi.Input['AutoScaleSettingsArgs']] = None,
                 manual: Optional[pulumi.Input['ManualScaleSettingsArgs']] = None):
        """
        At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
        :param pulumi.Input['AutoScaleSettingsArgs'] auto_scale: Auto-scale settings for the cluster.
        :param pulumi.Input['ManualScaleSettingsArgs'] manual: Manual scale settings for the cluster.
        """
        if auto_scale is not None:
            pulumi.set(__self__, "auto_scale", auto_scale)
        if manual is not None:
            pulumi.set(__self__, "manual", manual)

    @property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> Optional[pulumi.Input['AutoScaleSettingsArgs']]:
        """
        Auto-scale settings for the cluster.
        """
        return pulumi.get(self, "auto_scale")

    @auto_scale.setter
    def auto_scale(self, value: Optional[pulumi.Input['AutoScaleSettingsArgs']]):
        pulumi.set(self, "auto_scale", value)

    @property
    @pulumi.getter
    def manual(self) -> Optional[pulumi.Input['ManualScaleSettingsArgs']]:
        """
        Manual scale settings for the cluster.
        """
        return pulumi.get(self, "manual")

    @manual.setter
    def manual(self, value: Optional[pulumi.Input['ManualScaleSettingsArgs']]):
        pulumi.set(self, "manual", value)


@pulumi.input_type
class SetupTaskArgs:
    def __init__(__self__, *,
                 command_line: pulumi.Input[str],
                 std_out_err_path_prefix: pulumi.Input[str],
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentVariableArgs']]]] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentVariableWithSecretValueArgs']]]] = None):
        """
        Specifies a setup task which can be used to customize the compute nodes of the cluster.
        :param pulumi.Input[str] command_line: The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
        :param pulumi.Input[str] std_out_err_path_prefix: The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
        :param pulumi.Input[Sequence[pulumi.Input['EnvironmentVariableArgs']]] environment_variables: A collection of user defined environment variables to be set for setup task.
        :param pulumi.Input[Sequence[pulumi.Input['EnvironmentVariableWithSecretValueArgs']]] secrets: A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
        """
        pulumi.set(__self__, "command_line", command_line)
        pulumi.set(__self__, "std_out_err_path_prefix", std_out_err_path_prefix)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> pulumi.Input[str]:
        """
        The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
        """
        return pulumi.get(self, "command_line")

    @command_line.setter
    def command_line(self, value: pulumi.Input[str]):
        pulumi.set(self, "command_line", value)

    @property
    @pulumi.getter(name="stdOutErrPathPrefix")
    def std_out_err_path_prefix(self) -> pulumi.Input[str]:
        """
        The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
        """
        return pulumi.get(self, "std_out_err_path_prefix")

    @std_out_err_path_prefix.setter
    def std_out_err_path_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "std_out_err_path_prefix", value)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentVariableArgs']]]]:
        """
        A collection of user defined environment variables to be set for setup task.
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentVariableArgs']]]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentVariableWithSecretValueArgs']]]]:
        """
        A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentVariableWithSecretValueArgs']]]]):
        pulumi.set(self, "secrets", value)


@pulumi.input_type
class SshConfigurationArgs:
    def __init__(__self__, *,
                 user_account_settings: pulumi.Input['UserAccountSettingsArgs'],
                 public_ips_to_allow: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        SSH configuration.
        :param pulumi.Input['UserAccountSettingsArgs'] user_account_settings: Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_ips_to_allow: List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
        """
        pulumi.set(__self__, "user_account_settings", user_account_settings)
        if public_ips_to_allow is not None:
            pulumi.set(__self__, "public_ips_to_allow", public_ips_to_allow)

    @property
    @pulumi.getter(name="userAccountSettings")
    def user_account_settings(self) -> pulumi.Input['UserAccountSettingsArgs']:
        """
        Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
        """
        return pulumi.get(self, "user_account_settings")

    @user_account_settings.setter
    def user_account_settings(self, value: pulumi.Input['UserAccountSettingsArgs']):
        pulumi.set(self, "user_account_settings", value)

    @property
    @pulumi.getter(name="publicIPsToAllow")
    def public_ips_to_allow(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
        """
        return pulumi.get(self, "public_ips_to_allow")

    @public_ips_to_allow.setter
    def public_ips_to_allow(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_ips_to_allow", value)


@pulumi.input_type
class TensorFlowSettingsArgs:
    def __init__(__self__, *,
                 python_script_file_path: pulumi.Input[str],
                 master_command_line_args: Optional[pulumi.Input[str]] = None,
                 parameter_server_command_line_args: Optional[pulumi.Input[str]] = None,
                 parameter_server_count: Optional[pulumi.Input[int]] = None,
                 python_interpreter_path: Optional[pulumi.Input[str]] = None,
                 worker_command_line_args: Optional[pulumi.Input[str]] = None,
                 worker_count: Optional[pulumi.Input[int]] = None):
        """
        TensorFlow job settings.
        :param pulumi.Input[str] python_script_file_path: The python script to execute.
        :param pulumi.Input[str] master_command_line_args: Command line arguments that need to be passed to the python script for the master task.
        :param pulumi.Input[str] parameter_server_command_line_args: Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
        :param pulumi.Input[int] parameter_server_count: The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
        :param pulumi.Input[str] python_interpreter_path: The path to the Python interpreter.
        :param pulumi.Input[str] worker_command_line_args: Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
        :param pulumi.Input[int] worker_count: The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
        """
        pulumi.set(__self__, "python_script_file_path", python_script_file_path)
        if master_command_line_args is not None:
            pulumi.set(__self__, "master_command_line_args", master_command_line_args)
        if parameter_server_command_line_args is not None:
            pulumi.set(__self__, "parameter_server_command_line_args", parameter_server_command_line_args)
        if parameter_server_count is not None:
            pulumi.set(__self__, "parameter_server_count", parameter_server_count)
        if python_interpreter_path is not None:
            pulumi.set(__self__, "python_interpreter_path", python_interpreter_path)
        if worker_command_line_args is not None:
            pulumi.set(__self__, "worker_command_line_args", worker_command_line_args)
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)

    @property
    @pulumi.getter(name="pythonScriptFilePath")
    def python_script_file_path(self) -> pulumi.Input[str]:
        """
        The python script to execute.
        """
        return pulumi.get(self, "python_script_file_path")

    @python_script_file_path.setter
    def python_script_file_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "python_script_file_path", value)

    @property
    @pulumi.getter(name="masterCommandLineArgs")
    def master_command_line_args(self) -> Optional[pulumi.Input[str]]:
        """
        Command line arguments that need to be passed to the python script for the master task.
        """
        return pulumi.get(self, "master_command_line_args")

    @master_command_line_args.setter
    def master_command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_command_line_args", value)

    @property
    @pulumi.getter(name="parameterServerCommandLineArgs")
    def parameter_server_command_line_args(self) -> Optional[pulumi.Input[str]]:
        """
        Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
        """
        return pulumi.get(self, "parameter_server_command_line_args")

    @parameter_server_command_line_args.setter
    def parameter_server_command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_server_command_line_args", value)

    @property
    @pulumi.getter(name="parameterServerCount")
    def parameter_server_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
        """
        return pulumi.get(self, "parameter_server_count")

    @parameter_server_count.setter
    def parameter_server_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parameter_server_count", value)

    @property
    @pulumi.getter(name="pythonInterpreterPath")
    def python_interpreter_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the Python interpreter.
        """
        return pulumi.get(self, "python_interpreter_path")

    @python_interpreter_path.setter
    def python_interpreter_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_interpreter_path", value)

    @property
    @pulumi.getter(name="workerCommandLineArgs")
    def worker_command_line_args(self) -> Optional[pulumi.Input[str]]:
        """
        Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
        """
        return pulumi.get(self, "worker_command_line_args")

    @worker_command_line_args.setter
    def worker_command_line_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_command_line_args", value)

    @property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "worker_count", value)


@pulumi.input_type
class UnmanagedFileSystemReferenceArgs:
    def __init__(__self__, *,
                 mount_command: pulumi.Input[str],
                 relative_mount_path: pulumi.Input[str]):
        """
        Unmanaged file system mounting configuration.
        :param pulumi.Input[str] mount_command: Mount command line. Note, Batch AI will append mount path to the command on its own.
        :param pulumi.Input[str] relative_mount_path: The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        """
        pulumi.set(__self__, "mount_command", mount_command)
        pulumi.set(__self__, "relative_mount_path", relative_mount_path)

    @property
    @pulumi.getter(name="mountCommand")
    def mount_command(self) -> pulumi.Input[str]:
        """
        Mount command line. Note, Batch AI will append mount path to the command on its own.
        """
        return pulumi.get(self, "mount_command")

    @mount_command.setter
    def mount_command(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_command", value)

    @property
    @pulumi.getter(name="relativeMountPath")
    def relative_mount_path(self) -> pulumi.Input[str]:
        """
        The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        """
        return pulumi.get(self, "relative_mount_path")

    @relative_mount_path.setter
    def relative_mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_mount_path", value)


@pulumi.input_type
class UserAccountSettingsArgs:
    def __init__(__self__, *,
                 admin_user_name: pulumi.Input[str],
                 admin_user_password: Optional[pulumi.Input[str]] = None,
                 admin_user_ssh_public_key: Optional[pulumi.Input[str]] = None):
        """
        Settings for user account that gets created on each on the nodes of a cluster.
        :param pulumi.Input[str] admin_user_name: Name of the administrator user account which can be used to SSH to nodes.
        :param pulumi.Input[str] admin_user_password: Password of the administrator user account.
        :param pulumi.Input[str] admin_user_ssh_public_key: SSH public key of the administrator user account.
        """
        pulumi.set(__self__, "admin_user_name", admin_user_name)
        if admin_user_password is not None:
            pulumi.set(__self__, "admin_user_password", admin_user_password)
        if admin_user_ssh_public_key is not None:
            pulumi.set(__self__, "admin_user_ssh_public_key", admin_user_ssh_public_key)

    @property
    @pulumi.getter(name="adminUserName")
    def admin_user_name(self) -> pulumi.Input[str]:
        """
        Name of the administrator user account which can be used to SSH to nodes.
        """
        return pulumi.get(self, "admin_user_name")

    @admin_user_name.setter
    def admin_user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "admin_user_name", value)

    @property
    @pulumi.getter(name="adminUserPassword")
    def admin_user_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the administrator user account.
        """
        return pulumi.get(self, "admin_user_password")

    @admin_user_password.setter
    def admin_user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_user_password", value)

    @property
    @pulumi.getter(name="adminUserSshPublicKey")
    def admin_user_ssh_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        SSH public key of the administrator user account.
        """
        return pulumi.get(self, "admin_user_ssh_public_key")

    @admin_user_ssh_public_key.setter
    def admin_user_ssh_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_user_ssh_public_key", value)


@pulumi.input_type
class VirtualMachineConfigurationArgs:
    def __init__(__self__, *,
                 image_reference: Optional[pulumi.Input['ImageReferenceArgs']] = None):
        """
        VM configuration.
        :param pulumi.Input['ImageReferenceArgs'] image_reference: OS image reference for cluster nodes.
        """
        if image_reference is not None:
            pulumi.set(__self__, "image_reference", image_reference)

    @property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> Optional[pulumi.Input['ImageReferenceArgs']]:
        """
        OS image reference for cluster nodes.
        """
        return pulumi.get(self, "image_reference")

    @image_reference.setter
    def image_reference(self, value: Optional[pulumi.Input['ImageReferenceArgs']]):
        pulumi.set(self, "image_reference", value)


