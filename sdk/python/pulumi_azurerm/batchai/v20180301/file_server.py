# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class FileServer(pulumi.CustomResource):
    creation_time: pulumi.Output[str]
    data_disks: pulumi.Output[dict]
    """
    Settings for the data disk which would be created for the File Server.
      * `caching_type` (`str`)
      * `disk_count` (`float`)
      * `disk_size_in_gb` (`float`)
      * `storage_account_type` (`str`)
    """
    location: pulumi.Output[str]
    """
    The location of the resource
    """
    mount_settings: pulumi.Output[dict]
    """
    Details of the File Server.
      * `file_server_internal_ip` (`str`)
      * `file_server_public_ip` (`str`)
      * `file_server_type` (`str`)
      * `mount_point` (`str`)
    """
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    provisioning_state: pulumi.Output[str]
    """
    Possible values: creating - The File Server is getting created. updating - The File Server creation has been accepted and it is getting updated. deleting - The user has requested that the File Server be deleted, and it is in the process of being deleted. failed - The File Server creation has failed with the specified errorCode. Details about the error code are specified in the message field. succeeded - The File Server creation has succeeded.
    """
    provisioning_state_transition_time: pulumi.Output[str]
    ssh_configuration: pulumi.Output[dict]
    """
    SSH configuration settings for the VM
      * `public_i_ps_to_allow` (`list`) - Default value is '*' can be used to match all source IPs. Maximum number of IP ranges that can be specified are 400.
      * `user_account_settings` (`dict`) - Settings for user account that gets created on each on the nodes of a cluster.
        * `admin_user_name` (`str`)
        * `admin_user_password` (`str`)
        * `admin_user_ssh_public_key` (`str`)
    """
    subnet: pulumi.Output[dict]
    """
    Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
      * `id` (`str`) - The ID of the resource
    """
    tags: pulumi.Output[dict]
    """
    The tags of the resource
    """
    type: pulumi.Output[str]
    """
    The type of the resource
    """
    vm_size: pulumi.Output[str]
    """
    For information about available VM sizes for File Server from the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
    """
    def __init__(__self__, resource_name, opts=None, data_disks=None, location=None, name=None, resource_group_name=None, ssh_configuration=None, subnet=None, tags=None, vm_size=None, __props__=None, __name__=None, __opts__=None):
        """
        Contains information about the File Server.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] data_disks: Settings for the data disk which would be created for the File Server.
        :param pulumi.Input[str] location: The region in which to create the File Server.
        :param pulumi.Input[str] name: The name of the file server within the specified resource group. File server names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        :param pulumi.Input[str] resource_group_name: Name of the resource group to which the resource belongs.
        :param pulumi.Input[dict] ssh_configuration: SSH configuration settings for the VM
        :param pulumi.Input[dict] subnet: Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        :param pulumi.Input[dict] tags: The user specified tags associated with the File Server.
        :param pulumi.Input[str] vm_size: For information about available VM sizes for fileservers from the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).

        The **data_disks** object supports the following:

          * `caching_type` (`pulumi.Input[str]`)
          * `disk_count` (`pulumi.Input[float]`)
          * `disk_size_in_gb` (`pulumi.Input[float]`)
          * `storage_account_type` (`pulumi.Input[str]`)

        The **ssh_configuration** object supports the following:

          * `public_i_ps_to_allow` (`pulumi.Input[list]`) - Default value is '*' can be used to match all source IPs. Maximum number of IP ranges that can be specified are 400.
          * `user_account_settings` (`pulumi.Input[dict]`) - Settings for user account that gets created on each on the nodes of a cluster.
            * `admin_user_name` (`pulumi.Input[str]`)
            * `admin_user_password` (`pulumi.Input[str]`)
            * `admin_user_ssh_public_key` (`pulumi.Input[str]`)

        The **subnet** object supports the following:

          * `id` (`pulumi.Input[str]`) - The ID of the resource
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if data_disks is None:
                raise TypeError("Missing required property 'data_disks'")
            __props__['data_disks'] = data_disks
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if ssh_configuration is None:
                raise TypeError("Missing required property 'ssh_configuration'")
            __props__['ssh_configuration'] = ssh_configuration
            __props__['subnet'] = subnet
            __props__['tags'] = tags
            if vm_size is None:
                raise TypeError("Missing required property 'vm_size'")
            __props__['vm_size'] = vm_size
            __props__['creation_time'] = None
            __props__['mount_settings'] = None
            __props__['provisioning_state'] = None
            __props__['provisioning_state_transition_time'] = None
            __props__['type'] = None
        super(FileServer, __self__).__init__(
            'azurerm:batchai/v20180301:FileServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing FileServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return FileServer(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
