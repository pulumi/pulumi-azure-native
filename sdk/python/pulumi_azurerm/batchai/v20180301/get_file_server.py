# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetFileServerResult:
    """
    Contains information about the File Server.
    """
    def __init__(__self__, creation_time=None, data_disks=None, location=None, mount_settings=None, name=None, provisioning_state=None, provisioning_state_transition_time=None, ssh_configuration=None, subnet=None, tags=None, type=None, vm_size=None):
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        __self__.creation_time = creation_time
        if data_disks and not isinstance(data_disks, dict):
            raise TypeError("Expected argument 'data_disks' to be a dict")
        __self__.data_disks = data_disks
        """
        Settings for the data disk which would be created for the File Server.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The location of the resource
        """
        if mount_settings and not isinstance(mount_settings, dict):
            raise TypeError("Expected argument 'mount_settings' to be a dict")
        __self__.mount_settings = mount_settings
        """
        Details of the File Server.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Possible values: creating - The File Server is getting created. updating - The File Server creation has been accepted and it is getting updated. deleting - The user has requested that the File Server be deleted, and it is in the process of being deleted. failed - The File Server creation has failed with the specified errorCode. Details about the error code are specified in the message field. succeeded - The File Server creation has succeeded.
        """
        if provisioning_state_transition_time and not isinstance(provisioning_state_transition_time, str):
            raise TypeError("Expected argument 'provisioning_state_transition_time' to be a str")
        __self__.provisioning_state_transition_time = provisioning_state_transition_time
        if ssh_configuration and not isinstance(ssh_configuration, dict):
            raise TypeError("Expected argument 'ssh_configuration' to be a dict")
        __self__.ssh_configuration = ssh_configuration
        """
        SSH configuration settings for the VM
        """
        if subnet and not isinstance(subnet, dict):
            raise TypeError("Expected argument 'subnet' to be a dict")
        __self__.subnet = subnet
        """
        Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The tags of the resource
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource
        """
        if vm_size and not isinstance(vm_size, str):
            raise TypeError("Expected argument 'vm_size' to be a str")
        __self__.vm_size = vm_size
        """
        For information about available VM sizes for File Server from the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
        """


class AwaitableGetFileServerResult(GetFileServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFileServerResult(
            creation_time=self.creation_time,
            data_disks=self.data_disks,
            location=self.location,
            mount_settings=self.mount_settings,
            name=self.name,
            provisioning_state=self.provisioning_state,
            provisioning_state_transition_time=self.provisioning_state_transition_time,
            ssh_configuration=self.ssh_configuration,
            subnet=self.subnet,
            tags=self.tags,
            type=self.type,
            vm_size=self.vm_size)


def get_file_server(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the file server within the specified resource group. File server names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:batchai/v20180301:getFileServer', __args__, opts=opts).value

    return AwaitableGetFileServerResult(
        creation_time=__ret__.get('creationTime'),
        data_disks=__ret__.get('dataDisks'),
        location=__ret__.get('location'),
        mount_settings=__ret__.get('mountSettings'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        provisioning_state_transition_time=__ret__.get('provisioningStateTransitionTime'),
        ssh_configuration=__ret__.get('sshConfiguration'),
        subnet=__ret__.get('subnet'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        vm_size=__ret__.get('vmSize'))
