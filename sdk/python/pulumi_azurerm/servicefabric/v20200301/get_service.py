# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetServiceResult:
    """
    The service resource.
    """
    def __init__(__self__, correlation_scheme=None, default_move_cost=None, etag=None, location=None, name=None, partition_description=None, placement_constraints=None, provisioning_state=None, service_dns_name=None, service_kind=None, service_load_metrics=None, service_package_activation_mode=None, service_placement_policies=None, service_type_name=None, tags=None, type=None):
        if correlation_scheme and not isinstance(correlation_scheme, list):
            raise TypeError("Expected argument 'correlation_scheme' to be a list")
        __self__.correlation_scheme = correlation_scheme
        """
        A list that describes the correlation of the service with other services.
        """
        if default_move_cost and not isinstance(default_move_cost, str):
            raise TypeError("Expected argument 'default_move_cost' to be a str")
        __self__.default_move_cost = default_move_cost
        """
        Specifies the move cost for the service.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Azure resource etag.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        It will be deprecated in New API, resource location depends on the parent resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Azure resource name.
        """
        if partition_description and not isinstance(partition_description, dict):
            raise TypeError("Expected argument 'partition_description' to be a dict")
        __self__.partition_description = partition_description
        """
        Describes how the service is partitioned.
        """
        if placement_constraints and not isinstance(placement_constraints, str):
            raise TypeError("Expected argument 'placement_constraints' to be a str")
        __self__.placement_constraints = placement_constraints
        """
        The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The current deployment or provisioning state, which only appears in the response
        """
        if service_dns_name and not isinstance(service_dns_name, str):
            raise TypeError("Expected argument 'service_dns_name' to be a str")
        __self__.service_dns_name = service_dns_name
        """
        Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
        """
        if service_kind and not isinstance(service_kind, str):
            raise TypeError("Expected argument 'service_kind' to be a str")
        __self__.service_kind = service_kind
        """
        The kind of service (Stateless or Stateful).
        """
        if service_load_metrics and not isinstance(service_load_metrics, list):
            raise TypeError("Expected argument 'service_load_metrics' to be a list")
        __self__.service_load_metrics = service_load_metrics
        """
        The service load metrics is given as an array of ServiceLoadMetricDescription objects.
        """
        if service_package_activation_mode and not isinstance(service_package_activation_mode, str):
            raise TypeError("Expected argument 'service_package_activation_mode' to be a str")
        __self__.service_package_activation_mode = service_package_activation_mode
        """
        The activation Mode of the service package
        """
        if service_placement_policies and not isinstance(service_placement_policies, list):
            raise TypeError("Expected argument 'service_placement_policies' to be a list")
        __self__.service_placement_policies = service_placement_policies
        """
        A list that describes the correlation of the service with other services.
        """
        if service_type_name and not isinstance(service_type_name, str):
            raise TypeError("Expected argument 'service_type_name' to be a str")
        __self__.service_type_name = service_type_name
        """
        The name of the service type
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Azure resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Azure resource type.
        """


class AwaitableGetServiceResult(GetServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceResult(
            correlation_scheme=self.correlation_scheme,
            default_move_cost=self.default_move_cost,
            etag=self.etag,
            location=self.location,
            name=self.name,
            partition_description=self.partition_description,
            placement_constraints=self.placement_constraints,
            provisioning_state=self.provisioning_state,
            service_dns_name=self.service_dns_name,
            service_kind=self.service_kind,
            service_load_metrics=self.service_load_metrics,
            service_package_activation_mode=self.service_package_activation_mode,
            service_placement_policies=self.service_placement_policies,
            service_type_name=self.service_type_name,
            tags=self.tags,
            type=self.type)


def get_service(application_name=None, cluster_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str application_name: The name of the application resource.
    :param str cluster_name: The name of the cluster resource.
    :param str name: The name of the service resource in the format of {applicationName}~{serviceName}.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['applicationName'] = application_name
    __args__['clusterName'] = cluster_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:servicefabric/v20200301:getService', __args__, opts=opts).value

    return AwaitableGetServiceResult(
        correlation_scheme=__ret__.get('correlationScheme'),
        default_move_cost=__ret__.get('defaultMoveCost'),
        etag=__ret__.get('etag'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        partition_description=__ret__.get('partitionDescription'),
        placement_constraints=__ret__.get('placementConstraints'),
        provisioning_state=__ret__.get('provisioningState'),
        service_dns_name=__ret__.get('serviceDnsName'),
        service_kind=__ret__.get('serviceKind'),
        service_load_metrics=__ret__.get('serviceLoadMetrics'),
        service_package_activation_mode=__ret__.get('servicePackageActivationMode'),
        service_placement_policies=__ret__.get('servicePlacementPolicies'),
        service_type_name=__ret__.get('serviceTypeName'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
