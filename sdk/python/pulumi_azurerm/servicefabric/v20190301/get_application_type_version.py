# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetApplicationTypeVersionResult:
    """
    An application type version resource for the specified application type name resource.
    """
    def __init__(__self__, app_package_url=None, default_parameter_list=None, etag=None, location=None, name=None, provisioning_state=None, tags=None, type=None):
        if app_package_url and not isinstance(app_package_url, str):
            raise TypeError("Expected argument 'app_package_url' to be a str")
        __self__.app_package_url = app_package_url
        """
        The URL to the application package
        """
        if default_parameter_list and not isinstance(default_parameter_list, dict):
            raise TypeError("Expected argument 'default_parameter_list' to be a dict")
        __self__.default_parameter_list = default_parameter_list
        """
        List of application type parameters that can be overridden when creating or updating the application.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Azure resource etag.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        It will be deprecated in New API, resource location depends on the parent resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Azure resource name.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The current deployment or provisioning state, which only appears in the response
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Azure resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Azure resource type.
        """


class AwaitableGetApplicationTypeVersionResult(GetApplicationTypeVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApplicationTypeVersionResult(
            app_package_url=self.app_package_url,
            default_parameter_list=self.default_parameter_list,
            etag=self.etag,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            tags=self.tags,
            type=self.type)


def get_application_type_version(application_type_name=None, cluster_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str application_type_name: The name of the application type name resource.
    :param str cluster_name: The name of the cluster resource.
    :param str name: The application type version.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['applicationTypeName'] = application_type_name
    __args__['clusterName'] = cluster_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:servicefabric/v20190301:getApplicationTypeVersion', __args__, opts=opts).value

    return AwaitableGetApplicationTypeVersionResult(
        app_package_url=__ret__.get('appPackageUrl'),
        default_parameter_list=__ret__.get('defaultParameterList'),
        etag=__ret__.get('etag'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
