# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetAuthorizationResult:
    """
    ExpressRoute Circuit Authorization
    """
    def __init__(__self__, express_route_authorization_id=None, express_route_authorization_key=None, name=None, provisioning_state=None, type=None):
        if express_route_authorization_id and not isinstance(express_route_authorization_id, str):
            raise TypeError("Expected argument 'express_route_authorization_id' to be a str")
        __self__.express_route_authorization_id = express_route_authorization_id
        """
        The ID of the ExpressRoute Circuit Authorization
        """
        if express_route_authorization_key and not isinstance(express_route_authorization_key, str):
            raise TypeError("Expected argument 'express_route_authorization_key' to be a str")
        __self__.express_route_authorization_key = express_route_authorization_key
        """
        The key of the ExpressRoute Circuit Authorization
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The state of the  ExpressRoute Circuit Authorization provisioning
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetAuthorizationResult(GetAuthorizationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorizationResult(
            express_route_authorization_id=self.express_route_authorization_id,
            express_route_authorization_key=self.express_route_authorization_key,
            name=self.name,
            provisioning_state=self.provisioning_state,
            type=self.type)


def get_authorization(name=None, private_cloud_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of the ExpressRoute Circuit Authorization in the private cloud
    :param str private_cloud_name: Name of the private cloud
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['privateCloudName'] = private_cloud_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:avs/v20200320:getAuthorization', __args__, opts=opts).value

    return AwaitableGetAuthorizationResult(
        express_route_authorization_id=__ret__.get('expressRouteAuthorizationId'),
        express_route_authorization_key=__ret__.get('expressRouteAuthorizationKey'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        type=__ret__.get('type'))
