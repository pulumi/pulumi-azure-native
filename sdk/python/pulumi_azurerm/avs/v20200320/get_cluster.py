# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetClusterResult:
    """
    A cluster resource
    """
    def __init__(__self__, cluster_id=None, cluster_size=None, hosts=None, name=None, provisioning_state=None, sku=None, type=None):
        if cluster_id and not isinstance(cluster_id, float):
            raise TypeError("Expected argument 'cluster_id' to be a float")
        __self__.cluster_id = cluster_id
        """
        The identity
        """
        if cluster_size and not isinstance(cluster_size, float):
            raise TypeError("Expected argument 'cluster_size' to be a float")
        __self__.cluster_size = cluster_size
        """
        The cluster size
        """
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        __self__.hosts = hosts
        """
        The hosts
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The state of the cluster provisioning
        """
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        The cluster SKU
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            cluster_id=self.cluster_id,
            cluster_size=self.cluster_size,
            hosts=self.hosts,
            name=self.name,
            provisioning_state=self.provisioning_state,
            sku=self.sku,
            type=self.type)


def get_cluster(name=None, private_cloud_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of the cluster in the private cloud
    :param str private_cloud_name: Name of the private cloud
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['privateCloudName'] = private_cloud_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:avs/v20200320:getCluster', __args__, opts=opts).value

    return AwaitableGetClusterResult(
        cluster_id=__ret__.get('clusterId'),
        cluster_size=__ret__.get('clusterSize'),
        hosts=__ret__.get('hosts'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        sku=__ret__.get('sku'),
        type=__ret__.get('type'))
