# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ListPrivateCloudAdminCredentialsResult:
    """
    Administrative credentials for accessing vCenter and NSX-T
    """
    def __init__(__self__, nsxt_password=None, nsxt_username=None, vcenter_password=None, vcenter_username=None):
        if nsxt_password and not isinstance(nsxt_password, str):
            raise TypeError("Expected argument 'nsxt_password' to be a str")
        __self__.nsxt_password = nsxt_password
        """
        NSX-T Manager password
        """
        if nsxt_username and not isinstance(nsxt_username, str):
            raise TypeError("Expected argument 'nsxt_username' to be a str")
        __self__.nsxt_username = nsxt_username
        """
        NSX-T Manager username
        """
        if vcenter_password and not isinstance(vcenter_password, str):
            raise TypeError("Expected argument 'vcenter_password' to be a str")
        __self__.vcenter_password = vcenter_password
        """
        vCenter admin password
        """
        if vcenter_username and not isinstance(vcenter_username, str):
            raise TypeError("Expected argument 'vcenter_username' to be a str")
        __self__.vcenter_username = vcenter_username
        """
        vCenter admin username
        """


class AwaitableListPrivateCloudAdminCredentialsResult(ListPrivateCloudAdminCredentialsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListPrivateCloudAdminCredentialsResult(
            nsxt_password=self.nsxt_password,
            nsxt_username=self.nsxt_username,
            vcenter_password=self.vcenter_password,
            vcenter_username=self.vcenter_username)


def list_private_cloud_admin_credentials(private_cloud_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str private_cloud_name: Name of the private cloud
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['privateCloudName'] = private_cloud_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:avs/v20200320:listPrivateCloudAdminCredentials', __args__, opts=opts).value

    return AwaitableListPrivateCloudAdminCredentialsResult(
        nsxt_password=__ret__.get('nsxtPassword'),
        nsxt_username=__ret__.get('nsxtUsername'),
        vcenter_password=__ret__.get('vcenterPassword'),
        vcenter_username=__ret__.get('vcenterUsername'))
