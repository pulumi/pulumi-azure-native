# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class PrivateCloud(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    The properties of a private cloud resource
      * `circuit` (`dict`) - An ExpressRoute Circuit
        * `express_route_id` (`str`) - Identifier of the ExpressRoute Circuit (Microsoft Colo only)
        * `express_route_private_peering_id` (`str`) - ExpressRoute Circuit private peering identifier
        * `primary_subnet` (`str`) - CIDR of primary subnet
        * `secondary_subnet` (`str`) - CIDR of secondary subnet

      * `endpoints` (`dict`) - The endpoints
        * `hcx_cloud_manager` (`str`) - Endpoint for the HCX Cloud Manager
        * `nsxt_manager` (`str`) - Endpoint for the NSX-T Data Center manager
        * `vcsa` (`str`) - Endpoint for Virtual Center Server Appliance

      * `identity_sources` (`list`) - vCenter Single Sign On Identity Sources
        * `alias` (`str`) - The domain's NetBIOS name
        * `base_group_dn` (`str`) - The base distinguished name for groups
        * `base_user_dn` (`str`) - The base distinguished name for users
        * `domain` (`str`) - The domain's dns name
        * `name` (`str`) - The name of the identity source
        * `password` (`str`) - The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups.
        * `primary_server` (`str`) - Primary server URL
        * `secondary_server` (`str`) - Secondary server URL
        * `ssl` (`str`) - Protect LDAP communication using SSL certificate (LDAPS)
        * `username` (`str`) - The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group

      * `internet` (`str`) - Connectivity to internet is enabled or disabled
      * `management_cluster` (`dict`) - The default cluster used for management
        * `cluster_id` (`float`) - The identity
        * `cluster_size` (`float`) - The cluster size
        * `hosts` (`list`) - The hosts

      * `management_network` (`str`) - Network used to access vCenter Server and NSX-T Manager
      * `network_block` (`str`) - The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
      * `nsxt_certificate_thumbprint` (`str`) - Thumbprint of the NSX-T Manager SSL certificate
      * `nsxt_password` (`str`) - Optionally, set the NSX-T Manager password when the private cloud is created
      * `provisioning_network` (`str`) - Used for virtual machine cold migration, cloning, and snapshot migration
      * `provisioning_state` (`str`) - The provisioning state
      * `vcenter_certificate_thumbprint` (`str`) - Thumbprint of the vCenter Server SSL certificate
      * `vcenter_password` (`str`) - Optionally, set the vCenter admin password when the private cloud is created
      * `vmotion_network` (`str`) - Used for live migration of virtual machines
    """
    sku: pulumi.Output[dict]
    """
    The private cloud SKU
      * `name` (`str`) - The name of the SKU.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, circuit=None, identity_sources=None, internet=None, location=None, management_cluster=None, name=None, network_block=None, nsxt_password=None, resource_group_name=None, sku=None, tags=None, vcenter_password=None, __props__=None, __name__=None, __opts__=None):
        """
        A private cloud resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] circuit: An ExpressRoute Circuit
        :param pulumi.Input[list] identity_sources: vCenter Single Sign On Identity Sources
        :param pulumi.Input[str] internet: Connectivity to internet is enabled or disabled
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[dict] management_cluster: The default cluster used for management
        :param pulumi.Input[str] name: Name of the private cloud
        :param pulumi.Input[str] network_block: The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
        :param pulumi.Input[str] nsxt_password: Optionally, set the NSX-T Manager password when the private cloud is created
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[dict] sku: The private cloud SKU
        :param pulumi.Input[dict] tags: Resource tags
        :param pulumi.Input[str] vcenter_password: Optionally, set the vCenter admin password when the private cloud is created

        The **identity_sources** object supports the following:

          * `alias` (`pulumi.Input[str]`) - The domain's NetBIOS name
          * `base_group_dn` (`pulumi.Input[str]`) - The base distinguished name for groups
          * `base_user_dn` (`pulumi.Input[str]`) - The base distinguished name for users
          * `domain` (`pulumi.Input[str]`) - The domain's dns name
          * `name` (`pulumi.Input[str]`) - The name of the identity source
          * `password` (`pulumi.Input[str]`) - The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups.
          * `primary_server` (`pulumi.Input[str]`) - Primary server URL
          * `secondary_server` (`pulumi.Input[str]`) - Secondary server URL
          * `ssl` (`pulumi.Input[str]`) - Protect LDAP communication using SSL certificate (LDAPS)
          * `username` (`pulumi.Input[str]`) - The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group

        The **management_cluster** object supports the following:

          * `cluster_size` (`pulumi.Input[float]`) - The cluster size

        The **sku** object supports the following:

          * `name` (`pulumi.Input[str]`) - The name of the SKU.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['circuit'] = circuit
            __props__['identity_sources'] = identity_sources
            __props__['internet'] = internet
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if management_cluster is None:
                raise TypeError("Missing required property 'management_cluster'")
            __props__['management_cluster'] = management_cluster
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if network_block is None:
                raise TypeError("Missing required property 'network_block'")
            __props__['network_block'] = network_block
            __props__['nsxt_password'] = nsxt_password
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if sku is None:
                raise TypeError("Missing required property 'sku'")
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['vcenter_password'] = vcenter_password
            __props__['properties'] = None
            __props__['type'] = None
        super(PrivateCloud, __self__).__init__(
            'azurerm:avs/v20200320:PrivateCloud',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing PrivateCloud resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return PrivateCloud(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
