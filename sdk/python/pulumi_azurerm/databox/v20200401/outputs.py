# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'AdditionalErrorInfoResponse',
    'AzureFileFilterDetailsResponse',
    'BlobFilterDetailsResponse',
    'CloudErrorResponse',
    'ContactDetailsResponse',
    'CopyLogDetailsResponse',
    'DataAccountDetailsResponse',
    'DataExportDetailsResponse',
    'DataImportDetailsResponse',
    'DcAccessSecurityCodeResponseResult',
    'FilterFileDetailsResponse',
    'JobDeliveryInfoResponse',
    'JobDetailsResponse',
    'JobSecretsResponseResult',
    'JobStagesResponse',
    'KeyEncryptionKeyResponse',
    'NotificationPreferenceResponse',
    'PackageShippingDetailsResponse',
    'PreferencesResponse',
    'ResourceIdentityResponse',
    'ShippingAddressResponse',
    'SkuResponse',
    'TransferAllDetailsResponse',
    'TransferConfigurationResponse',
    'TransferConfigurationResponseTransferAllDetails',
    'TransferConfigurationResponseTransferFilterDetails',
    'TransferFilterDetailsResponse',
    'TransportPreferencesResponse',
    'UnencryptedCredentialsResponseResult',
]

@pulumi.output_type
class AdditionalErrorInfoResponse(dict):
    """
    Additional error info.
    """
    def __init__(__self__, *,
                 info: Optional[Mapping[str, Any]] = None,
                 type: Optional[str] = None):
        """
        Additional error info.
        :param Mapping[str, Any] info: Additional error info.
        :param str type: Additional error type.
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, Any]]:
        """
        Additional error info.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Additional error type.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureFileFilterDetailsResponse(dict):
    """
    Filter details to transfer Azure files
    """
    def __init__(__self__, *,
                 file_path_list: Optional[List[str]] = None,
                 file_prefix_list: Optional[List[str]] = None,
                 file_share_list: Optional[List[str]] = None):
        """
        Filter details to transfer Azure files
        :param List[str] file_path_list: List of full path of the files to be transferred.
        :param List[str] file_prefix_list: Prefix list of the Azure files to be transferred.
        :param List[str] file_share_list: List of file shares to be transferred.
        """
        if file_path_list is not None:
            pulumi.set(__self__, "file_path_list", file_path_list)
        if file_prefix_list is not None:
            pulumi.set(__self__, "file_prefix_list", file_prefix_list)
        if file_share_list is not None:
            pulumi.set(__self__, "file_share_list", file_share_list)

    @property
    @pulumi.getter(name="filePathList")
    def file_path_list(self) -> Optional[List[str]]:
        """
        List of full path of the files to be transferred.
        """
        return pulumi.get(self, "file_path_list")

    @property
    @pulumi.getter(name="filePrefixList")
    def file_prefix_list(self) -> Optional[List[str]]:
        """
        Prefix list of the Azure files to be transferred.
        """
        return pulumi.get(self, "file_prefix_list")

    @property
    @pulumi.getter(name="fileShareList")
    def file_share_list(self) -> Optional[List[str]]:
        """
        List of file shares to be transferred.
        """
        return pulumi.get(self, "file_share_list")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BlobFilterDetailsResponse(dict):
    """
    Filter details to transfer Azure Blobs
    """
    def __init__(__self__, *,
                 blob_path_list: Optional[List[str]] = None,
                 blob_prefix_list: Optional[List[str]] = None,
                 container_list: Optional[List[str]] = None):
        """
        Filter details to transfer Azure Blobs
        :param List[str] blob_path_list: List of full path of the blobs to be transferred.
        :param List[str] blob_prefix_list: Prefix list of the Azure blobs to be transferred.
        :param List[str] container_list: List of blob containers to be transferred.
        """
        if blob_path_list is not None:
            pulumi.set(__self__, "blob_path_list", blob_path_list)
        if blob_prefix_list is not None:
            pulumi.set(__self__, "blob_prefix_list", blob_prefix_list)
        if container_list is not None:
            pulumi.set(__self__, "container_list", container_list)

    @property
    @pulumi.getter(name="blobPathList")
    def blob_path_list(self) -> Optional[List[str]]:
        """
        List of full path of the blobs to be transferred.
        """
        return pulumi.get(self, "blob_path_list")

    @property
    @pulumi.getter(name="blobPrefixList")
    def blob_prefix_list(self) -> Optional[List[str]]:
        """
        Prefix list of the Azure blobs to be transferred.
        """
        return pulumi.get(self, "blob_prefix_list")

    @property
    @pulumi.getter(name="containerList")
    def container_list(self) -> Optional[List[str]]:
        """
        List of blob containers to be transferred.
        """
        return pulumi.get(self, "container_list")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CloudErrorResponse(dict):
    """
    Cloud error.
    """
    def __init__(__self__, *,
                 additional_info: List['outputs.AdditionalErrorInfoResponse'],
                 details: List['outputs.CloudErrorResponse'],
                 code: Optional[str] = None,
                 message: Optional[str] = None,
                 target: Optional[str] = None):
        """
        Cloud error.
        :param List['AdditionalErrorInfoResponseArgs'] additional_info: Cloud error additional info.
        :param List['CloudErrorResponseArgs'] details: Cloud error details.
        :param str code: Cloud error code.
        :param str message: Cloud error message.
        :param str target: Cloud error target.
        """
        pulumi.set(__self__, "additional_info", additional_info)
        pulumi.set(__self__, "details", details)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> List['outputs.AdditionalErrorInfoResponse']:
        """
        Cloud error additional info.
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter
    def details(self) -> List['outputs.CloudErrorResponse']:
        """
        Cloud error details.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        Cloud error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Cloud error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        Cloud error target.
        """
        return pulumi.get(self, "target")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContactDetailsResponse(dict):
    """
    Contact Details.
    """
    def __init__(__self__, *,
                 contact_name: str,
                 email_list: List[str],
                 phone: str,
                 mobile: Optional[str] = None,
                 notification_preference: Optional[List['outputs.NotificationPreferenceResponse']] = None,
                 phone_extension: Optional[str] = None):
        """
        Contact Details.
        :param str contact_name: Contact name of the person.
        :param List[str] email_list: List of Email-ids to be notified about job progress.
        :param str phone: Phone number of the contact person.
        :param str mobile: Mobile number of the contact person.
        :param List['NotificationPreferenceResponseArgs'] notification_preference: Notification preference for a job stage.
        :param str phone_extension: Phone extension number of the contact person.
        """
        pulumi.set(__self__, "contact_name", contact_name)
        pulumi.set(__self__, "email_list", email_list)
        pulumi.set(__self__, "phone", phone)
        if mobile is not None:
            pulumi.set(__self__, "mobile", mobile)
        if notification_preference is not None:
            pulumi.set(__self__, "notification_preference", notification_preference)
        if phone_extension is not None:
            pulumi.set(__self__, "phone_extension", phone_extension)

    @property
    @pulumi.getter(name="contactName")
    def contact_name(self) -> str:
        """
        Contact name of the person.
        """
        return pulumi.get(self, "contact_name")

    @property
    @pulumi.getter(name="emailList")
    def email_list(self) -> List[str]:
        """
        List of Email-ids to be notified about job progress.
        """
        return pulumi.get(self, "email_list")

    @property
    @pulumi.getter
    def phone(self) -> str:
        """
        Phone number of the contact person.
        """
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter
    def mobile(self) -> Optional[str]:
        """
        Mobile number of the contact person.
        """
        return pulumi.get(self, "mobile")

    @property
    @pulumi.getter(name="notificationPreference")
    def notification_preference(self) -> Optional[List['outputs.NotificationPreferenceResponse']]:
        """
        Notification preference for a job stage.
        """
        return pulumi.get(self, "notification_preference")

    @property
    @pulumi.getter(name="phoneExtension")
    def phone_extension(self) -> Optional[str]:
        """
        Phone extension number of the contact person.
        """
        return pulumi.get(self, "phone_extension")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CopyLogDetailsResponse(dict):
    """
    Details for log generated during copy.
    """
    def __init__(__self__, *,
                 copy_log_details_type: str):
        """
        Details for log generated during copy.
        :param str copy_log_details_type: Indicates the type of job details.
        """
        pulumi.set(__self__, "copy_log_details_type", copy_log_details_type)

    @property
    @pulumi.getter(name="copyLogDetailsType")
    def copy_log_details_type(self) -> str:
        """
        Indicates the type of job details.
        """
        return pulumi.get(self, "copy_log_details_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DataAccountDetailsResponse(dict):
    """
    Account details of the data to be transferred
    """
    def __init__(__self__, *,
                 data_account_type: str,
                 share_password: Optional[str] = None):
        """
        Account details of the data to be transferred
        :param str data_account_type: Account Type of the data to be transferred.
        :param str share_password: Password for all the shares to be created on the device. Should not be passed for TransferType:ExportFromAzure jobs. If this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements :  Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets, numbers and these characters : @#\-$%^!+=;:_()]+
        """
        pulumi.set(__self__, "data_account_type", data_account_type)
        if share_password is not None:
            pulumi.set(__self__, "share_password", share_password)

    @property
    @pulumi.getter(name="dataAccountType")
    def data_account_type(self) -> str:
        """
        Account Type of the data to be transferred.
        """
        return pulumi.get(self, "data_account_type")

    @property
    @pulumi.getter(name="sharePassword")
    def share_password(self) -> Optional[str]:
        """
        Password for all the shares to be created on the device. Should not be passed for TransferType:ExportFromAzure jobs. If this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements :  Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets, numbers and these characters : @#\-$%^!+=;:_()]+
        """
        return pulumi.get(self, "share_password")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DataExportDetailsResponse(dict):
    """
    Details of the data to be used for exporting data from azure.
    """
    def __init__(__self__, *,
                 account_details: 'outputs.DataAccountDetailsResponse',
                 transfer_configuration: 'outputs.TransferConfigurationResponse',
                 log_collection_level: Optional[str] = None):
        """
        Details of the data to be used for exporting data from azure.
        :param 'DataAccountDetailsResponseArgs' account_details: Account details of the data to be transferred
        :param 'TransferConfigurationResponseArgs' transfer_configuration: Configuration for the data transfer.
        :param str log_collection_level: Level of the logs to be collected.
        """
        pulumi.set(__self__, "account_details", account_details)
        pulumi.set(__self__, "transfer_configuration", transfer_configuration)
        if log_collection_level is not None:
            pulumi.set(__self__, "log_collection_level", log_collection_level)

    @property
    @pulumi.getter(name="accountDetails")
    def account_details(self) -> 'outputs.DataAccountDetailsResponse':
        """
        Account details of the data to be transferred
        """
        return pulumi.get(self, "account_details")

    @property
    @pulumi.getter(name="transferConfiguration")
    def transfer_configuration(self) -> 'outputs.TransferConfigurationResponse':
        """
        Configuration for the data transfer.
        """
        return pulumi.get(self, "transfer_configuration")

    @property
    @pulumi.getter(name="logCollectionLevel")
    def log_collection_level(self) -> Optional[str]:
        """
        Level of the logs to be collected.
        """
        return pulumi.get(self, "log_collection_level")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DataImportDetailsResponse(dict):
    """
    Details of the data to be used for importing data to azure.
    """
    def __init__(__self__, *,
                 account_details: 'outputs.DataAccountDetailsResponse'):
        """
        Details of the data to be used for importing data to azure.
        :param 'DataAccountDetailsResponseArgs' account_details: Account details of the data to be transferred
        """
        pulumi.set(__self__, "account_details", account_details)

    @property
    @pulumi.getter(name="accountDetails")
    def account_details(self) -> 'outputs.DataAccountDetailsResponse':
        """
        Account details of the data to be transferred
        """
        return pulumi.get(self, "account_details")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DcAccessSecurityCodeResponseResult(dict):
    """
    Dc access security code
    """
    def __init__(__self__, *,
                 forward_dc_access_code: Optional[str] = None,
                 reverse_dc_access_code: Optional[str] = None):
        """
        Dc access security code
        :param str forward_dc_access_code: Forward Dc access security code.
        :param str reverse_dc_access_code: Reverse Dc access security code.
        """
        if forward_dc_access_code is not None:
            pulumi.set(__self__, "forward_dc_access_code", forward_dc_access_code)
        if reverse_dc_access_code is not None:
            pulumi.set(__self__, "reverse_dc_access_code", reverse_dc_access_code)

    @property
    @pulumi.getter(name="forwardDcAccessCode")
    def forward_dc_access_code(self) -> Optional[str]:
        """
        Forward Dc access security code.
        """
        return pulumi.get(self, "forward_dc_access_code")

    @property
    @pulumi.getter(name="reverseDcAccessCode")
    def reverse_dc_access_code(self) -> Optional[str]:
        """
        Reverse Dc access security code.
        """
        return pulumi.get(self, "reverse_dc_access_code")


@pulumi.output_type
class FilterFileDetailsResponse(dict):
    """
    Details of the filter files to be used for data transfer.
    """
    def __init__(__self__, *,
                 filter_file_path: str,
                 filter_file_type: str):
        """
        Details of the filter files to be used for data transfer.
        :param str filter_file_path: Path of the file that contains the details of all items to transfer.
        :param str filter_file_type: Type of the filter file.
        """
        pulumi.set(__self__, "filter_file_path", filter_file_path)
        pulumi.set(__self__, "filter_file_type", filter_file_type)

    @property
    @pulumi.getter(name="filterFilePath")
    def filter_file_path(self) -> str:
        """
        Path of the file that contains the details of all items to transfer.
        """
        return pulumi.get(self, "filter_file_path")

    @property
    @pulumi.getter(name="filterFileType")
    def filter_file_type(self) -> str:
        """
        Type of the filter file.
        """
        return pulumi.get(self, "filter_file_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobDeliveryInfoResponse(dict):
    """
    Additional delivery info.
    """
    def __init__(__self__, *,
                 scheduled_date_time: Optional[str] = None):
        """
        Additional delivery info.
        :param str scheduled_date_time: Scheduled date time.
        """
        if scheduled_date_time is not None:
            pulumi.set(__self__, "scheduled_date_time", scheduled_date_time)

    @property
    @pulumi.getter(name="scheduledDateTime")
    def scheduled_date_time(self) -> Optional[str]:
        """
        Scheduled date time.
        """
        return pulumi.get(self, "scheduled_date_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobDetailsResponse(dict):
    """
    Job details.
    """
    def __init__(__self__, *,
                 chain_of_custody_sas_key: str,
                 contact_details: 'outputs.ContactDetailsResponse',
                 copy_log_details: List['outputs.CopyLogDetailsResponse'],
                 delivery_package: 'outputs.PackageShippingDetailsResponse',
                 job_details_type: str,
                 job_stages: List['outputs.JobStagesResponse'],
                 key_encryption_key: 'outputs.KeyEncryptionKeyResponse',
                 return_package: 'outputs.PackageShippingDetailsResponse',
                 reverse_shipment_label_sas_key: str,
                 data_export_details: Optional[List['outputs.DataExportDetailsResponse']] = None,
                 data_import_details: Optional[List['outputs.DataImportDetailsResponse']] = None,
                 expected_data_size_in_terabytes: Optional[float] = None,
                 preferences: Optional['outputs.PreferencesResponse'] = None,
                 shipping_address: Optional['outputs.ShippingAddressResponse'] = None):
        """
        Job details.
        :param str chain_of_custody_sas_key: Shared access key to download the chain of custody logs
        :param 'ContactDetailsResponseArgs' contact_details: Contact details for notification and shipping.
        :param List['CopyLogDetailsResponseArgs'] copy_log_details: List of copy log details.
        :param 'PackageShippingDetailsResponseArgs' delivery_package: Delivery package shipping details.
        :param str job_details_type: Indicates the type of job details.
        :param List['JobStagesResponseArgs'] job_stages: List of stages that run in the job.
        :param 'KeyEncryptionKeyResponseArgs' key_encryption_key: Details about which key encryption type is being used.
        :param 'PackageShippingDetailsResponseArgs' return_package: Return package shipping details.
        :param str reverse_shipment_label_sas_key: Shared access key to download the return shipment label
        :param List['DataExportDetailsResponseArgs'] data_export_details: Details of the data to be exported from azure.
        :param List['DataImportDetailsResponseArgs'] data_import_details: Details of the data to be imported into azure.
        :param float expected_data_size_in_terabytes: The expected size of the data, which needs to be transferred in this job, in terabytes.
        :param 'PreferencesResponseArgs' preferences: Preferences for the order.
        :param 'ShippingAddressResponseArgs' shipping_address: Shipping address of the customer.
        """
        pulumi.set(__self__, "chain_of_custody_sas_key", chain_of_custody_sas_key)
        pulumi.set(__self__, "contact_details", contact_details)
        pulumi.set(__self__, "copy_log_details", copy_log_details)
        pulumi.set(__self__, "delivery_package", delivery_package)
        pulumi.set(__self__, "job_details_type", job_details_type)
        pulumi.set(__self__, "job_stages", job_stages)
        pulumi.set(__self__, "key_encryption_key", key_encryption_key)
        pulumi.set(__self__, "return_package", return_package)
        pulumi.set(__self__, "reverse_shipment_label_sas_key", reverse_shipment_label_sas_key)
        if data_export_details is not None:
            pulumi.set(__self__, "data_export_details", data_export_details)
        if data_import_details is not None:
            pulumi.set(__self__, "data_import_details", data_import_details)
        if expected_data_size_in_terabytes is not None:
            pulumi.set(__self__, "expected_data_size_in_terabytes", expected_data_size_in_terabytes)
        if preferences is not None:
            pulumi.set(__self__, "preferences", preferences)
        if shipping_address is not None:
            pulumi.set(__self__, "shipping_address", shipping_address)

    @property
    @pulumi.getter(name="chainOfCustodySasKey")
    def chain_of_custody_sas_key(self) -> str:
        """
        Shared access key to download the chain of custody logs
        """
        return pulumi.get(self, "chain_of_custody_sas_key")

    @property
    @pulumi.getter(name="contactDetails")
    def contact_details(self) -> 'outputs.ContactDetailsResponse':
        """
        Contact details for notification and shipping.
        """
        return pulumi.get(self, "contact_details")

    @property
    @pulumi.getter(name="copyLogDetails")
    def copy_log_details(self) -> List['outputs.CopyLogDetailsResponse']:
        """
        List of copy log details.
        """
        return pulumi.get(self, "copy_log_details")

    @property
    @pulumi.getter(name="deliveryPackage")
    def delivery_package(self) -> 'outputs.PackageShippingDetailsResponse':
        """
        Delivery package shipping details.
        """
        return pulumi.get(self, "delivery_package")

    @property
    @pulumi.getter(name="jobDetailsType")
    def job_details_type(self) -> str:
        """
        Indicates the type of job details.
        """
        return pulumi.get(self, "job_details_type")

    @property
    @pulumi.getter(name="jobStages")
    def job_stages(self) -> List['outputs.JobStagesResponse']:
        """
        List of stages that run in the job.
        """
        return pulumi.get(self, "job_stages")

    @property
    @pulumi.getter(name="keyEncryptionKey")
    def key_encryption_key(self) -> 'outputs.KeyEncryptionKeyResponse':
        """
        Details about which key encryption type is being used.
        """
        return pulumi.get(self, "key_encryption_key")

    @property
    @pulumi.getter(name="returnPackage")
    def return_package(self) -> 'outputs.PackageShippingDetailsResponse':
        """
        Return package shipping details.
        """
        return pulumi.get(self, "return_package")

    @property
    @pulumi.getter(name="reverseShipmentLabelSasKey")
    def reverse_shipment_label_sas_key(self) -> str:
        """
        Shared access key to download the return shipment label
        """
        return pulumi.get(self, "reverse_shipment_label_sas_key")

    @property
    @pulumi.getter(name="dataExportDetails")
    def data_export_details(self) -> Optional[List['outputs.DataExportDetailsResponse']]:
        """
        Details of the data to be exported from azure.
        """
        return pulumi.get(self, "data_export_details")

    @property
    @pulumi.getter(name="dataImportDetails")
    def data_import_details(self) -> Optional[List['outputs.DataImportDetailsResponse']]:
        """
        Details of the data to be imported into azure.
        """
        return pulumi.get(self, "data_import_details")

    @property
    @pulumi.getter(name="expectedDataSizeInTerabytes")
    def expected_data_size_in_terabytes(self) -> Optional[float]:
        """
        The expected size of the data, which needs to be transferred in this job, in terabytes.
        """
        return pulumi.get(self, "expected_data_size_in_terabytes")

    @property
    @pulumi.getter
    def preferences(self) -> Optional['outputs.PreferencesResponse']:
        """
        Preferences for the order.
        """
        return pulumi.get(self, "preferences")

    @property
    @pulumi.getter(name="shippingAddress")
    def shipping_address(self) -> Optional['outputs.ShippingAddressResponse']:
        """
        Shipping address of the customer.
        """
        return pulumi.get(self, "shipping_address")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobSecretsResponseResult(dict):
    """
    The base class for the secrets
    """
    def __init__(__self__, *,
                 dc_access_security_code: 'outputs.DcAccessSecurityCodeResponseResult',
                 error: 'outputs.CloudErrorResponse',
                 job_secrets_type: str):
        """
        The base class for the secrets
        :param 'DcAccessSecurityCodeResponseArgs' dc_access_security_code: Dc Access Security Code for Customer Managed Shipping
        :param 'CloudErrorResponseArgs' error: Error while fetching the secrets.
        :param str job_secrets_type: Used to indicate what type of job secrets object.
        """
        pulumi.set(__self__, "dc_access_security_code", dc_access_security_code)
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "job_secrets_type", job_secrets_type)

    @property
    @pulumi.getter(name="dcAccessSecurityCode")
    def dc_access_security_code(self) -> 'outputs.DcAccessSecurityCodeResponseResult':
        """
        Dc Access Security Code for Customer Managed Shipping
        """
        return pulumi.get(self, "dc_access_security_code")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.CloudErrorResponse':
        """
        Error while fetching the secrets.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="jobSecretsType")
    def job_secrets_type(self) -> str:
        """
        Used to indicate what type of job secrets object.
        """
        return pulumi.get(self, "job_secrets_type")


@pulumi.output_type
class JobStagesResponse(dict):
    """
    Job stages.
    """
    def __init__(__self__, *,
                 display_name: str,
                 job_stage_details: Mapping[str, Any],
                 stage_name: str,
                 stage_status: str,
                 stage_time: str):
        """
        Job stages.
        :param str display_name: Display name of the job stage.
        :param Mapping[str, Any] job_stage_details: Job Stage Details
        :param str stage_name: Name of the job stage.
        :param str stage_status: Status of the job stage.
        :param str stage_time: Time for the job stage in UTC ISO 8601 format.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "job_stage_details", job_stage_details)
        pulumi.set(__self__, "stage_name", stage_name)
        pulumi.set(__self__, "stage_status", stage_status)
        pulumi.set(__self__, "stage_time", stage_time)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name of the job stage.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="jobStageDetails")
    def job_stage_details(self) -> Mapping[str, Any]:
        """
        Job Stage Details
        """
        return pulumi.get(self, "job_stage_details")

    @property
    @pulumi.getter(name="stageName")
    def stage_name(self) -> str:
        """
        Name of the job stage.
        """
        return pulumi.get(self, "stage_name")

    @property
    @pulumi.getter(name="stageStatus")
    def stage_status(self) -> str:
        """
        Status of the job stage.
        """
        return pulumi.get(self, "stage_status")

    @property
    @pulumi.getter(name="stageTime")
    def stage_time(self) -> str:
        """
        Time for the job stage in UTC ISO 8601 format.
        """
        return pulumi.get(self, "stage_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyEncryptionKeyResponse(dict):
    """
    Encryption key containing details about key to encrypt different keys.
    """
    def __init__(__self__, *,
                 kek_type: str,
                 kek_url: Optional[str] = None,
                 kek_vault_resource_id: Optional[str] = None):
        """
        Encryption key containing details about key to encrypt different keys.
        :param str kek_type: Type of encryption key used for key encryption.
        :param str kek_url: Key encryption key. It is required in case of Customer managed KekType.
        :param str kek_vault_resource_id: Kek vault resource id. It is required in case of Customer managed KekType.
        """
        pulumi.set(__self__, "kek_type", kek_type)
        if kek_url is not None:
            pulumi.set(__self__, "kek_url", kek_url)
        if kek_vault_resource_id is not None:
            pulumi.set(__self__, "kek_vault_resource_id", kek_vault_resource_id)

    @property
    @pulumi.getter(name="kekType")
    def kek_type(self) -> str:
        """
        Type of encryption key used for key encryption.
        """
        return pulumi.get(self, "kek_type")

    @property
    @pulumi.getter(name="kekUrl")
    def kek_url(self) -> Optional[str]:
        """
        Key encryption key. It is required in case of Customer managed KekType.
        """
        return pulumi.get(self, "kek_url")

    @property
    @pulumi.getter(name="kekVaultResourceID")
    def kek_vault_resource_id(self) -> Optional[str]:
        """
        Kek vault resource id. It is required in case of Customer managed KekType.
        """
        return pulumi.get(self, "kek_vault_resource_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NotificationPreferenceResponse(dict):
    """
    Notification preference for a job stage.
    """
    def __init__(__self__, *,
                 send_notification: bool,
                 stage_name: str):
        """
        Notification preference for a job stage.
        :param bool send_notification: Notification is required or not.
        :param str stage_name: Name of the stage.
        """
        pulumi.set(__self__, "send_notification", send_notification)
        pulumi.set(__self__, "stage_name", stage_name)

    @property
    @pulumi.getter(name="sendNotification")
    def send_notification(self) -> bool:
        """
        Notification is required or not.
        """
        return pulumi.get(self, "send_notification")

    @property
    @pulumi.getter(name="stageName")
    def stage_name(self) -> str:
        """
        Name of the stage.
        """
        return pulumi.get(self, "stage_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageShippingDetailsResponse(dict):
    """
    Shipping details.
    """
    def __init__(__self__, *,
                 carrier_name: str,
                 tracking_id: str,
                 tracking_url: str):
        """
        Shipping details.
        :param str carrier_name: Name of the carrier.
        :param str tracking_id: Tracking Id of shipment.
        :param str tracking_url: Url where shipment can be tracked.
        """
        pulumi.set(__self__, "carrier_name", carrier_name)
        pulumi.set(__self__, "tracking_id", tracking_id)
        pulumi.set(__self__, "tracking_url", tracking_url)

    @property
    @pulumi.getter(name="carrierName")
    def carrier_name(self) -> str:
        """
        Name of the carrier.
        """
        return pulumi.get(self, "carrier_name")

    @property
    @pulumi.getter(name="trackingId")
    def tracking_id(self) -> str:
        """
        Tracking Id of shipment.
        """
        return pulumi.get(self, "tracking_id")

    @property
    @pulumi.getter(name="trackingUrl")
    def tracking_url(self) -> str:
        """
        Url where shipment can be tracked.
        """
        return pulumi.get(self, "tracking_url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreferencesResponse(dict):
    """
    Preferences related to the order
    """
    def __init__(__self__, *,
                 preferred_data_center_region: Optional[List[str]] = None,
                 transport_preferences: Optional['outputs.TransportPreferencesResponse'] = None):
        """
        Preferences related to the order
        :param List[str] preferred_data_center_region: Preferred data center region.
        :param 'TransportPreferencesResponseArgs' transport_preferences: Preferences related to the shipment logistics of the sku.
        """
        if preferred_data_center_region is not None:
            pulumi.set(__self__, "preferred_data_center_region", preferred_data_center_region)
        if transport_preferences is not None:
            pulumi.set(__self__, "transport_preferences", transport_preferences)

    @property
    @pulumi.getter(name="preferredDataCenterRegion")
    def preferred_data_center_region(self) -> Optional[List[str]]:
        """
        Preferred data center region.
        """
        return pulumi.get(self, "preferred_data_center_region")

    @property
    @pulumi.getter(name="transportPreferences")
    def transport_preferences(self) -> Optional['outputs.TransportPreferencesResponse']:
        """
        Preferences related to the shipment logistics of the sku.
        """
        return pulumi.get(self, "transport_preferences")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourceIdentityResponse(dict):
    """
    Msi identity details of the resource
    """
    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None):
        """
        Msi identity details of the resource
        :param str principal_id: Service Principal Id backing the Msi
        :param str tenant_id: Home Tenant Id
        :param str type: Identity type
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        Service Principal Id backing the Msi
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        Home Tenant Id
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Identity type
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ShippingAddressResponse(dict):
    """
    Shipping address where customer wishes to receive the device.
    """
    def __init__(__self__, *,
                 country: str,
                 postal_code: str,
                 street_address1: str,
                 address_type: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 state_or_province: Optional[str] = None,
                 street_address2: Optional[str] = None,
                 street_address3: Optional[str] = None,
                 zip_extended_code: Optional[str] = None):
        """
        Shipping address where customer wishes to receive the device.
        :param str country: Name of the Country.
        :param str postal_code: Postal code.
        :param str street_address1: Street Address line 1.
        :param str address_type: Type of address.
        :param str city: Name of the City.
        :param str company_name: Name of the company.
        :param str state_or_province: Name of the State or Province.
        :param str street_address2: Street Address line 2.
        :param str street_address3: Street Address line 3.
        :param str zip_extended_code: Extended Zip Code.
        """
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "street_address1", street_address1)
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if state_or_province is not None:
            pulumi.set(__self__, "state_or_province", state_or_province)
        if street_address2 is not None:
            pulumi.set(__self__, "street_address2", street_address2)
        if street_address3 is not None:
            pulumi.set(__self__, "street_address3", street_address3)
        if zip_extended_code is not None:
            pulumi.set(__self__, "zip_extended_code", zip_extended_code)

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        Name of the Country.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter(name="streetAddress1")
    def street_address1(self) -> str:
        """
        Street Address line 1.
        """
        return pulumi.get(self, "street_address1")

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[str]:
        """
        Type of address.
        """
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        """
        Name of the City.
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        """
        Name of the company.
        """
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> Optional[str]:
        """
        Name of the State or Province.
        """
        return pulumi.get(self, "state_or_province")

    @property
    @pulumi.getter(name="streetAddress2")
    def street_address2(self) -> Optional[str]:
        """
        Street Address line 2.
        """
        return pulumi.get(self, "street_address2")

    @property
    @pulumi.getter(name="streetAddress3")
    def street_address3(self) -> Optional[str]:
        """
        Street Address line 3.
        """
        return pulumi.get(self, "street_address3")

    @property
    @pulumi.getter(name="zipExtendedCode")
    def zip_extended_code(self) -> Optional[str]:
        """
        Extended Zip Code.
        """
        return pulumi.get(self, "zip_extended_code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SkuResponse(dict):
    """
    The Sku.
    """
    def __init__(__self__, *,
                 name: str,
                 display_name: Optional[str] = None,
                 family: Optional[str] = None):
        """
        The Sku.
        :param str name: The sku name.
        :param str display_name: The display name of the sku.
        :param str family: The sku family.
        """
        pulumi.set(__self__, "name", name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if family is not None:
            pulumi.set(__self__, "family", family)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The sku name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the sku.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        The sku family.
        """
        return pulumi.get(self, "family")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TransferAllDetailsResponse(dict):
    """
    Details to transfer all data.
    """
    def __init__(__self__, *,
                 data_account_type: str,
                 transfer_all_blobs: Optional[bool] = None,
                 transfer_all_files: Optional[bool] = None):
        """
        Details to transfer all data.
        :param str data_account_type: Type of the account of data
        :param bool transfer_all_blobs: To indicate if all Azure blobs have to be transferred
        :param bool transfer_all_files: To indicate if all Azure Files have to be transferred
        """
        pulumi.set(__self__, "data_account_type", data_account_type)
        if transfer_all_blobs is not None:
            pulumi.set(__self__, "transfer_all_blobs", transfer_all_blobs)
        if transfer_all_files is not None:
            pulumi.set(__self__, "transfer_all_files", transfer_all_files)

    @property
    @pulumi.getter(name="dataAccountType")
    def data_account_type(self) -> str:
        """
        Type of the account of data
        """
        return pulumi.get(self, "data_account_type")

    @property
    @pulumi.getter(name="transferAllBlobs")
    def transfer_all_blobs(self) -> Optional[bool]:
        """
        To indicate if all Azure blobs have to be transferred
        """
        return pulumi.get(self, "transfer_all_blobs")

    @property
    @pulumi.getter(name="transferAllFiles")
    def transfer_all_files(self) -> Optional[bool]:
        """
        To indicate if all Azure Files have to be transferred
        """
        return pulumi.get(self, "transfer_all_files")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TransferConfigurationResponse(dict):
    """
    Configuration for defining the transfer of data.
    """
    def __init__(__self__, *,
                 transfer_configuration_type: str,
                 transfer_all_details: Optional['outputs.TransferConfigurationResponseTransferAllDetails'] = None,
                 transfer_filter_details: Optional['outputs.TransferConfigurationResponseTransferFilterDetails'] = None):
        """
        Configuration for defining the transfer of data.
        :param str transfer_configuration_type: Type of the configuration for transfer.
        :param 'TransferConfigurationResponseTransferAllDetailsArgs' transfer_all_details: Map of filter type and the details to transfer all data. This field is required only if the TransferConfigurationType is given as TransferAll
        :param 'TransferConfigurationResponseTransferFilterDetailsArgs' transfer_filter_details: Map of filter type and the details to filter. This field is required only if the TransferConfigurationType is given as TransferUsingFilter.
        """
        pulumi.set(__self__, "transfer_configuration_type", transfer_configuration_type)
        if transfer_all_details is not None:
            pulumi.set(__self__, "transfer_all_details", transfer_all_details)
        if transfer_filter_details is not None:
            pulumi.set(__self__, "transfer_filter_details", transfer_filter_details)

    @property
    @pulumi.getter(name="transferConfigurationType")
    def transfer_configuration_type(self) -> str:
        """
        Type of the configuration for transfer.
        """
        return pulumi.get(self, "transfer_configuration_type")

    @property
    @pulumi.getter(name="transferAllDetails")
    def transfer_all_details(self) -> Optional['outputs.TransferConfigurationResponseTransferAllDetails']:
        """
        Map of filter type and the details to transfer all data. This field is required only if the TransferConfigurationType is given as TransferAll
        """
        return pulumi.get(self, "transfer_all_details")

    @property
    @pulumi.getter(name="transferFilterDetails")
    def transfer_filter_details(self) -> Optional['outputs.TransferConfigurationResponseTransferFilterDetails']:
        """
        Map of filter type and the details to filter. This field is required only if the TransferConfigurationType is given as TransferUsingFilter.
        """
        return pulumi.get(self, "transfer_filter_details")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TransferConfigurationResponseTransferAllDetails(dict):
    """
    Map of filter type and the details to transfer all data. This field is required only if the TransferConfigurationType is given as TransferAll
    """
    def __init__(__self__, *,
                 include: Optional['outputs.TransferAllDetailsResponse'] = None):
        """
        Map of filter type and the details to transfer all data. This field is required only if the TransferConfigurationType is given as TransferAll
        :param 'TransferAllDetailsResponseArgs' include: Details to transfer all data.
        """
        if include is not None:
            pulumi.set(__self__, "include", include)

    @property
    @pulumi.getter
    def include(self) -> Optional['outputs.TransferAllDetailsResponse']:
        """
        Details to transfer all data.
        """
        return pulumi.get(self, "include")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TransferConfigurationResponseTransferFilterDetails(dict):
    """
    Map of filter type and the details to filter. This field is required only if the TransferConfigurationType is given as TransferUsingFilter.
    """
    def __init__(__self__, *,
                 include: Optional['outputs.TransferFilterDetailsResponse'] = None):
        """
        Map of filter type and the details to filter. This field is required only if the TransferConfigurationType is given as TransferUsingFilter.
        :param 'TransferFilterDetailsResponseArgs' include: Details of the filtering the transfer of data.
        """
        if include is not None:
            pulumi.set(__self__, "include", include)

    @property
    @pulumi.getter
    def include(self) -> Optional['outputs.TransferFilterDetailsResponse']:
        """
        Details of the filtering the transfer of data.
        """
        return pulumi.get(self, "include")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TransferFilterDetailsResponse(dict):
    """
    Details of the filtering the transfer of data.
    """
    def __init__(__self__, *,
                 data_account_type: str,
                 azure_file_filter_details: Optional['outputs.AzureFileFilterDetailsResponse'] = None,
                 blob_filter_details: Optional['outputs.BlobFilterDetailsResponse'] = None,
                 filter_file_details: Optional[List['outputs.FilterFileDetailsResponse']] = None):
        """
        Details of the filtering the transfer of data.
        :param str data_account_type: Type of the account of data.
        :param 'AzureFileFilterDetailsResponseArgs' azure_file_filter_details: Filter details to transfer Azure files.
        :param 'BlobFilterDetailsResponseArgs' blob_filter_details: Filter details to transfer blobs.
        :param List['FilterFileDetailsResponseArgs'] filter_file_details: Details of the filter files to be used for data transfer.
        """
        pulumi.set(__self__, "data_account_type", data_account_type)
        if azure_file_filter_details is not None:
            pulumi.set(__self__, "azure_file_filter_details", azure_file_filter_details)
        if blob_filter_details is not None:
            pulumi.set(__self__, "blob_filter_details", blob_filter_details)
        if filter_file_details is not None:
            pulumi.set(__self__, "filter_file_details", filter_file_details)

    @property
    @pulumi.getter(name="dataAccountType")
    def data_account_type(self) -> str:
        """
        Type of the account of data.
        """
        return pulumi.get(self, "data_account_type")

    @property
    @pulumi.getter(name="azureFileFilterDetails")
    def azure_file_filter_details(self) -> Optional['outputs.AzureFileFilterDetailsResponse']:
        """
        Filter details to transfer Azure files.
        """
        return pulumi.get(self, "azure_file_filter_details")

    @property
    @pulumi.getter(name="blobFilterDetails")
    def blob_filter_details(self) -> Optional['outputs.BlobFilterDetailsResponse']:
        """
        Filter details to transfer blobs.
        """
        return pulumi.get(self, "blob_filter_details")

    @property
    @pulumi.getter(name="filterFileDetails")
    def filter_file_details(self) -> Optional[List['outputs.FilterFileDetailsResponse']]:
        """
        Details of the filter files to be used for data transfer.
        """
        return pulumi.get(self, "filter_file_details")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TransportPreferencesResponse(dict):
    """
    Preferences related to the shipment logistics of the sku
    """
    def __init__(__self__, *,
                 preferred_shipment_type: str):
        """
        Preferences related to the shipment logistics of the sku
        :param str preferred_shipment_type: Indicates Shipment Logistics type that the customer preferred.
        """
        pulumi.set(__self__, "preferred_shipment_type", preferred_shipment_type)

    @property
    @pulumi.getter(name="preferredShipmentType")
    def preferred_shipment_type(self) -> str:
        """
        Indicates Shipment Logistics type that the customer preferred.
        """
        return pulumi.get(self, "preferred_shipment_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UnencryptedCredentialsResponseResult(dict):
    """
    Unencrypted credentials for accessing device.
    """
    def __init__(__self__, *,
                 job_name: str,
                 job_secrets: 'outputs.JobSecretsResponseResult'):
        """
        Unencrypted credentials for accessing device.
        :param str job_name: Name of the job.
        :param 'JobSecretsResponseArgs' job_secrets: Secrets related to this job.
        """
        pulumi.set(__self__, "job_name", job_name)
        pulumi.set(__self__, "job_secrets", job_secrets)

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> str:
        """
        Name of the job.
        """
        return pulumi.get(self, "job_name")

    @property
    @pulumi.getter(name="jobSecrets")
    def job_secrets(self) -> 'outputs.JobSecretsResponseResult':
        """
        Secrets related to this job.
        """
        return pulumi.get(self, "job_secrets")


