# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables

__all__ = [
    'IdentityArgs',
    'ServerPropertiesVnetInjArgsArgs',
    'SkuArgs',
    'StorageProfileArgs',
]

@pulumi.input_type
class IdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Identity for the resource.
        :param pulumi.Input[str] type: The identity type.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServerPropertiesVnetInjArgsArgs:
    def __init__(__self__, *,
                 delegated_subnet_name: Optional[pulumi.Input[str]] = None,
                 delegated_vnet_id: Optional[pulumi.Input[str]] = None,
                 delegated_vnet_name: Optional[pulumi.Input[str]] = None,
                 delegated_vnet_resource_group: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] delegated_subnet_name: delegated subnet name
        :param pulumi.Input[str] delegated_vnet_id: delegated vNet ID
        :param pulumi.Input[str] delegated_vnet_name: delegated vNet name
        :param pulumi.Input[str] delegated_vnet_resource_group: delegated vNet resource group name
        """
        if delegated_subnet_name is not None:
            pulumi.set(__self__, "delegated_subnet_name", delegated_subnet_name)
        if delegated_vnet_id is not None:
            pulumi.set(__self__, "delegated_vnet_id", delegated_vnet_id)
        if delegated_vnet_name is not None:
            pulumi.set(__self__, "delegated_vnet_name", delegated_vnet_name)
        if delegated_vnet_resource_group is not None:
            pulumi.set(__self__, "delegated_vnet_resource_group", delegated_vnet_resource_group)

    @property
    @pulumi.getter(name="delegatedSubnetName")
    def delegated_subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        delegated subnet name
        """
        return pulumi.get(self, "delegated_subnet_name")

    @delegated_subnet_name.setter
    def delegated_subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delegated_subnet_name", value)

    @property
    @pulumi.getter(name="delegatedVnetID")
    def delegated_vnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        delegated vNet ID
        """
        return pulumi.get(self, "delegated_vnet_id")

    @delegated_vnet_id.setter
    def delegated_vnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delegated_vnet_id", value)

    @property
    @pulumi.getter(name="delegatedVnetName")
    def delegated_vnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        delegated vNet name
        """
        return pulumi.get(self, "delegated_vnet_name")

    @delegated_vnet_name.setter
    def delegated_vnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delegated_vnet_name", value)

    @property
    @pulumi.getter(name="delegatedVnetResourceGroup")
    def delegated_vnet_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        delegated vNet resource group name
        """
        return pulumi.get(self, "delegated_vnet_resource_group")

    @delegated_vnet_resource_group.setter
    def delegated_vnet_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delegated_vnet_resource_group", value)


@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        """
        Sku information related properties of a server.
        :param pulumi.Input[str] name: The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3.
        :param pulumi.Input[str] tier: The tier of the particular SKU, e.g. Burstable.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        The tier of the particular SKU, e.g. Burstable.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


@pulumi.input_type
class StorageProfileArgs:
    def __init__(__self__, *,
                 backup_retention_days: Optional[pulumi.Input[float]] = None,
                 storage_mb: Optional[pulumi.Input[float]] = None):
        """
        Storage Profile properties of a server
        :param pulumi.Input[float] backup_retention_days: Backup retention days for the server.
        :param pulumi.Input[float] storage_mb: Max storage allowed for a server.
        """
        if backup_retention_days is not None:
            pulumi.set(__self__, "backup_retention_days", backup_retention_days)
        if storage_mb is not None:
            pulumi.set(__self__, "storage_mb", storage_mb)

    @property
    @pulumi.getter(name="backupRetentionDays")
    def backup_retention_days(self) -> Optional[pulumi.Input[float]]:
        """
        Backup retention days for the server.
        """
        return pulumi.get(self, "backup_retention_days")

    @backup_retention_days.setter
    def backup_retention_days(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "backup_retention_days", value)

    @property
    @pulumi.getter(name="storageMB")
    def storage_mb(self) -> Optional[pulumi.Input[float]]:
        """
        Max storage allowed for a server.
        """
        return pulumi.get(self, "storage_mb")

    @storage_mb.setter
    def storage_mb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storage_mb", value)


