# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class ReportConfig(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    The properties of the report config.
      * `definition` (`dict`) - Has definition for the report config.
        * `dataset` (`dict`) - Has definition for data in this report config.
          * `aggregation` (`dict`) - Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
          * `configuration` (`dict`) - Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
            * `columns` (`list`) - Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.

          * `filter` (`dict`) - Has filter expression to use in the report.
            * `and` (`list`) - The logical "AND" expression. Must have at least 2 items.
            * `dimension` (`dict`) - Has comparison expression for a dimension
              * `name` (`str`) - The name of the column to use in comparison.
              * `operator` (`str`) - The operator to use for comparison.
              * `values` (`list`) - Array of values to use for comparison

            * `not` (`dict`) - The logical "NOT" expression.
            * `or` (`list`) - The logical "OR" expression. Must have at least 2 items.
            * `tag` (`dict`) - Has comparison expression for a tag

          * `granularity` (`str`) - The granularity of rows in the report.
          * `grouping` (`list`) - Array of group by expression to use in the report. Report can have up to 2 group by clauses.
            * `column_type` (`str`) - Has type of the column to group.
            * `name` (`str`) - The name of the column to group.

        * `time_period` (`dict`) - Has time period for pulling data for the report.
          * `from` (`str`) - The start date to pull data from.
          * `to` (`str`) - The end date to pull data to.

        * `timeframe` (`str`) - The time frame for pulling data for the report. If custom, then a specific time period must be provided.
        * `type` (`str`) - The type of the report.

      * `delivery_info` (`dict`) - Has delivery information for the report config.
        * `destination` (`dict`) - Has destination for the report being delivered.
          * `container` (`str`) - The name of the container where reports will be uploaded.
          * `resource_id` (`str`) - The resource id of the storage account where reports will be delivered.
          * `root_folder_path` (`str`) - The name of the directory where reports will be uploaded.

      * `format` (`str`) - The format of the report being delivered.
      * `schedule` (`dict`) - Has schedule information for the report config.
        * `recurrence` (`str`) - The schedule recurrence.
        * `recurrence_period` (`dict`) - Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
          * `from` (`str`) - The start date of recurrence.
          * `to` (`str`) - The end date of recurrence. If not provided, we default this to 10 years from the start date.

        * `status` (`str`) - The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, name=None, properties=None, __props__=None, __name__=None, __opts__=None):
        """
        A report config resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Report Config Name.
        :param pulumi.Input[dict] properties: The properties of the report config.

        The **properties** object supports the following:

          * `definition` (`pulumi.Input[dict]`) - Has definition for the report config.
            * `dataset` (`pulumi.Input[dict]`) - Has definition for data in this report config.
              * `aggregation` (`pulumi.Input[dict]`) - Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
              * `configuration` (`pulumi.Input[dict]`) - Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
                * `columns` (`pulumi.Input[list]`) - Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.

              * `filter` (`pulumi.Input[dict]`) - Has filter expression to use in the report.
                * `and` (`pulumi.Input[list]`) - The logical "AND" expression. Must have at least 2 items.
                * `dimension` (`pulumi.Input[dict]`) - Has comparison expression for a dimension
                  * `name` (`pulumi.Input[str]`) - The name of the column to use in comparison.
                  * `operator` (`pulumi.Input[str]`) - The operator to use for comparison.
                  * `values` (`pulumi.Input[list]`) - Array of values to use for comparison

                * `not` (`pulumi.Input[dict]`) - The logical "NOT" expression.
                * `or` (`pulumi.Input[list]`) - The logical "OR" expression. Must have at least 2 items.
                * `tag` (`pulumi.Input[dict]`) - Has comparison expression for a tag

              * `granularity` (`pulumi.Input[str]`) - The granularity of rows in the report.
              * `grouping` (`pulumi.Input[list]`) - Array of group by expression to use in the report. Report can have up to 2 group by clauses.
                * `column_type` (`pulumi.Input[str]`) - Has type of the column to group.
                * `name` (`pulumi.Input[str]`) - The name of the column to group.

            * `time_period` (`pulumi.Input[dict]`) - Has time period for pulling data for the report.
              * `from` (`pulumi.Input[str]`) - The start date to pull data from.
              * `to` (`pulumi.Input[str]`) - The end date to pull data to.

            * `timeframe` (`pulumi.Input[str]`) - The time frame for pulling data for the report. If custom, then a specific time period must be provided.
            * `type` (`pulumi.Input[str]`) - The type of the report.

          * `delivery_info` (`pulumi.Input[dict]`) - Has delivery information for the report config.
            * `destination` (`pulumi.Input[dict]`) - Has destination for the report being delivered.
              * `container` (`pulumi.Input[str]`) - The name of the container where reports will be uploaded.
              * `resource_id` (`pulumi.Input[str]`) - The resource id of the storage account where reports will be delivered.
              * `root_folder_path` (`pulumi.Input[str]`) - The name of the directory where reports will be uploaded.

          * `format` (`pulumi.Input[str]`) - The format of the report being delivered.
          * `schedule` (`pulumi.Input[dict]`) - Has schedule information for the report config.
            * `recurrence` (`pulumi.Input[str]`) - The schedule recurrence.
            * `recurrence_period` (`pulumi.Input[dict]`) - Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
              * `from` (`pulumi.Input[str]`) - The start date of recurrence.
              * `to` (`pulumi.Input[str]`) - The end date of recurrence. If not provided, we default this to 10 years from the start date.

            * `status` (`pulumi.Input[str]`) - The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            __props__['tags'] = None
            __props__['type'] = None
        super(ReportConfig, __self__).__init__(
            'azurerm:costmanagement/v20180531:ReportConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ReportConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ReportConfig(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
