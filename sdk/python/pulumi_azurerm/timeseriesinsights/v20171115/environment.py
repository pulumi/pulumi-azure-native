# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Environment(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Properties of the environment.
      * `creation_time` (`str`) - The time the resource was created.
      * `data_access_fqdn` (`str`) - The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
      * `data_access_id` (`str`) - An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
      * `data_retention_time` (`str`) - ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
      * `partition_key_properties` (`list`) - The list of partition keys according to which the data in the environment will be ordered.
        * `name` (`str`) - The name of the property.
        * `type` (`str`) - The type of the property.

      * `provisioning_state` (`str`) - Provisioning state of the resource.
      * `status` (`dict`) - An object that represents the status of the environment, and its internal state in the Time Series Insights service.
        * `ingress` (`dict`) - An object that represents the status of ingress on an environment.
          * `state` (`str`) - This string represents the state of ingress operations on an environment. It can be "Disabled", "Ready", "Running", "Paused" or "Unknown"
          * `state_details` (`dict`) - An object that contains the details about an environment's state.
            * `code` (`str`) - Contains the code that represents the reason of an environment being in a particular state. Can be used to programmatically handle specific cases.
            * `message` (`str`) - A message that describes the state in detail.

      * `storage_limit_exceeded_behavior` (`str`) - The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
    """
    sku: pulumi.Output[dict]
    """
    The sku determines the capacity of the environment, the SLA (in queries-per-minute and total capacity), and the billing rate.
      * `capacity` (`float`) - The capacity of the sku. This value can be changed to support scale out of environments after they have been created.
      * `name` (`str`) - The name of this SKU.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, data_retention_time=None, location=None, name=None, partition_key_properties=None, resource_group_name=None, sku=None, storage_limit_exceeded_behavior=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] data_retention_time: ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] name: Name of the environment
        :param pulumi.Input[list] partition_key_properties: The list of partition keys according to which the data in the environment will be ordered.
        :param pulumi.Input[str] resource_group_name: Name of an Azure Resource group.
        :param pulumi.Input[dict] sku: The sku determines the capacity of the environment, the SLA (in queries-per-minute and total capacity), and the billing rate.
        :param pulumi.Input[str] storage_limit_exceeded_behavior: The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
        :param pulumi.Input[dict] tags: Key-value pairs of additional properties for the resource.

        The **partition_key_properties** object supports the following:

          * `name` (`pulumi.Input[str]`) - The name of the property.
          * `type` (`pulumi.Input[str]`) - The type of the property.

        The **sku** object supports the following:

          * `capacity` (`pulumi.Input[float]`) - The capacity of the sku. This value can be changed to support scale out of environments after they have been created.
          * `name` (`pulumi.Input[str]`) - The name of this SKU.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if data_retention_time is None:
                raise TypeError("Missing required property 'data_retention_time'")
            __props__['data_retention_time'] = data_retention_time
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['partition_key_properties'] = partition_key_properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if sku is None:
                raise TypeError("Missing required property 'sku'")
            __props__['sku'] = sku
            __props__['storage_limit_exceeded_behavior'] = storage_limit_exceeded_behavior
            __props__['tags'] = tags
            __props__['properties'] = None
            __props__['type'] = None
        super(Environment, __self__).__init__(
            'azurerm:timeseriesinsights/v20171115:Environment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Environment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Environment(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
