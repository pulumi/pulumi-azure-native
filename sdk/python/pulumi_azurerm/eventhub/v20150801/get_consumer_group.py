# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetConsumerGroupResult:
    """
    Single item in List or Get Consumer group operation
    """
    def __init__(__self__, created_at=None, event_hub_path=None, location=None, name=None, type=None, updated_at=None, user_metadata=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        __self__.created_at = created_at
        """
        Exact time the message was created.
        """
        if event_hub_path and not isinstance(event_hub_path, str):
            raise TypeError("Expected argument 'event_hub_path' to be a str")
        __self__.event_hub_path = event_hub_path
        """
        The path of the Event Hub.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        __self__.updated_at = updated_at
        """
        The exact time the message was updated.
        """
        if user_metadata and not isinstance(user_metadata, str):
            raise TypeError("Expected argument 'user_metadata' to be a str")
        __self__.user_metadata = user_metadata
        """
        The user metadata.
        """


class AwaitableGetConsumerGroupResult(GetConsumerGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConsumerGroupResult(
            created_at=self.created_at,
            event_hub_path=self.event_hub_path,
            location=self.location,
            name=self.name,
            type=self.type,
            updated_at=self.updated_at,
            user_metadata=self.user_metadata)


def get_consumer_group(event_hub_name=None, name=None, namespace_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str event_hub_name: The Event Hub name
    :param str name: The consumer group name
    :param str namespace_name: The Namespace name
    :param str resource_group_name: Name of the resource group within the azure subscription.
    """
    __args__ = dict()
    __args__['eventHubName'] = event_hub_name
    __args__['name'] = name
    __args__['namespaceName'] = namespace_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:eventhub/v20150801:getConsumerGroup', __args__, opts=opts).value

    return AwaitableGetConsumerGroupResult(
        created_at=__ret__.get('createdAt'),
        event_hub_path=__ret__.get('eventHubPath'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        type=__ret__.get('type'),
        updated_at=__ret__.get('updatedAt'),
        user_metadata=__ret__.get('userMetadata'))
