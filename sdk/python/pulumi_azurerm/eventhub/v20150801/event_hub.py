# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class EventHub(pulumi.CustomResource):
    created_at: pulumi.Output[str]
    """
    Exact time the Event Hub was created.
    """
    location: pulumi.Output[str]
    """
    Resource location
    """
    message_retention_in_days: pulumi.Output[float]
    """
    Number of days to retain the events for this Event Hub.
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    partition_count: pulumi.Output[float]
    """
    Number of partitions created for the Event Hub.
    """
    partition_ids: pulumi.Output[list]
    """
    Current number of shards on the Event Hub.
    """
    status: pulumi.Output[str]
    """
    Enumerates the possible values for the status of the Event Hub.
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    updated_at: pulumi.Output[str]
    """
    The exact time the message was updated.
    """
    def __init__(__self__, resource_name, opts=None, location=None, message_retention_in_days=None, name=None, namespace_name=None, partition_count=None, resource_group_name=None, status=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        Single item in List or Get Event Hub operation

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: Location of the resource.
        :param pulumi.Input[float] message_retention_in_days: Number of days to retain the events for this Event Hub.
        :param pulumi.Input[str] name: The Event Hub name
        :param pulumi.Input[str] namespace_name: The Namespace name
        :param pulumi.Input[float] partition_count: Number of partitions created for the Event Hub.
        :param pulumi.Input[str] resource_group_name: Name of the resource group within the azure subscription.
        :param pulumi.Input[str] status: Enumerates the possible values for the status of the Event Hub.
        :param pulumi.Input[str] type: ARM type of the Namespace.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            __props__['message_retention_in_days'] = message_retention_in_days
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if namespace_name is None:
                raise TypeError("Missing required property 'namespace_name'")
            __props__['namespace_name'] = namespace_name
            __props__['partition_count'] = partition_count
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['status'] = status
            __props__['type'] = type
            __props__['created_at'] = None
            __props__['partition_ids'] = None
            __props__['updated_at'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:eventhub/v20140901:EventHub"), pulumi.Alias(type_="azurerm:eventhub/v20170401:EventHub")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(EventHub, __self__).__init__(
            'azurerm:eventhub/v20150801:EventHub',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing EventHub resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return EventHub(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
