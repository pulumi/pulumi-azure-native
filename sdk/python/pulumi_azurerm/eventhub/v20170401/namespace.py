# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Namespace(pulumi.CustomResource):
    created_at: pulumi.Output[str]
    """
    The time the Namespace was created.
    """
    is_auto_inflate_enabled: pulumi.Output[bool]
    """
    Value that indicates whether AutoInflate is enabled for eventhub namespace.
    """
    kafka_enabled: pulumi.Output[bool]
    """
    Value that indicates whether Kafka is enabled for eventhub namespace.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    maximum_throughput_units: pulumi.Output[float]
    """
    Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20 throughput units. ( '0' if AutoInflateEnabled = true)
    """
    metric_id: pulumi.Output[str]
    """
    Identifier for Azure Insights metrics.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    provisioning_state: pulumi.Output[str]
    """
    Provisioning state of the Namespace.
    """
    service_bus_endpoint: pulumi.Output[str]
    """
    Endpoint you can use to perform Service Bus operations.
    """
    sku: pulumi.Output[dict]
    """
    Properties of sku resource
      * `capacity` (`float`) - The Event Hubs throughput units, value should be 0 to 20 throughput units.
      * `name` (`str`) - Name of this SKU.
      * `tier` (`str`) - The billing tier of this particular SKU.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    updated_at: pulumi.Output[str]
    """
    The time the Namespace was updated.
    """
    def __init__(__self__, resource_name, opts=None, is_auto_inflate_enabled=None, kafka_enabled=None, location=None, maximum_throughput_units=None, name=None, resource_group_name=None, sku=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Single Namespace item in List or Get Operation

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] is_auto_inflate_enabled: Value that indicates whether AutoInflate is enabled for eventhub namespace.
        :param pulumi.Input[bool] kafka_enabled: Value that indicates whether Kafka is enabled for eventhub namespace.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[float] maximum_throughput_units: Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20 throughput units. ( '0' if AutoInflateEnabled = true)
        :param pulumi.Input[str] name: The Namespace name
        :param pulumi.Input[str] resource_group_name: Name of the resource group within the azure subscription.
        :param pulumi.Input[dict] sku: Properties of sku resource
        :param pulumi.Input[dict] tags: Resource tags.

        The **sku** object supports the following:

          * `capacity` (`pulumi.Input[float]`) - The Event Hubs throughput units, value should be 0 to 20 throughput units.
          * `name` (`pulumi.Input[str]`) - Name of this SKU.
          * `tier` (`pulumi.Input[str]`) - The billing tier of this particular SKU.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['is_auto_inflate_enabled'] = is_auto_inflate_enabled
            __props__['kafka_enabled'] = kafka_enabled
            __props__['location'] = location
            __props__['maximum_throughput_units'] = maximum_throughput_units
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['created_at'] = None
            __props__['metric_id'] = None
            __props__['provisioning_state'] = None
            __props__['service_bus_endpoint'] = None
            __props__['type'] = None
            __props__['updated_at'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:eventhub/v20140901:Namespace"), pulumi.Alias(type_="azurerm:eventhub/v20150801:Namespace")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Namespace, __self__).__init__(
            'azurerm:eventhub/v20170401:Namespace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Namespace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Namespace(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
