# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class EventHub(pulumi.CustomResource):
    capture_description: pulumi.Output[dict]
    """
    Properties of capture description
      * `destination` (`dict`) - Properties of Destination where capture will be stored. (Storage Account, Blob Names)
        * `archive_name_format` (`str`) - Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        * `blob_container` (`str`) - Blob container Name
        * `name` (`str`) - Name for capture destination
        * `storage_account_resource_id` (`str`) - Resource id of the storage account to be used to create the blobs

      * `enabled` (`bool`) - A value that indicates whether capture description is enabled. 
      * `encoding` (`str`) - Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated in New API Version
      * `interval_in_seconds` (`float`) - The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds
      * `size_limit_in_bytes` (`float`) - The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes
      * `skip_empty_archives` (`bool`) - A value that indicates whether to Skip Empty Archives
    """
    created_at: pulumi.Output[str]
    """
    Exact time the Event Hub was created.
    """
    message_retention_in_days: pulumi.Output[float]
    """
    Number of days to retain the events for this Event Hub, value should be 1 to 7 days
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    partition_count: pulumi.Output[float]
    """
    Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.
    """
    partition_ids: pulumi.Output[list]
    """
    Current number of shards on the Event Hub.
    """
    status: pulumi.Output[str]
    """
    Enumerates the possible values for the status of the Event Hub.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    updated_at: pulumi.Output[str]
    """
    The exact time the message was updated.
    """
    def __init__(__self__, resource_name, opts=None, capture_description=None, message_retention_in_days=None, name=None, namespace_name=None, partition_count=None, resource_group_name=None, status=None, __props__=None, __name__=None, __opts__=None):
        """
        Single item in List or Get Event Hub operation

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] capture_description: Properties of capture description
        :param pulumi.Input[float] message_retention_in_days: Number of days to retain the events for this Event Hub, value should be 1 to 7 days
        :param pulumi.Input[str] name: The Event Hub name
        :param pulumi.Input[str] namespace_name: The Namespace name
        :param pulumi.Input[float] partition_count: Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.
        :param pulumi.Input[str] resource_group_name: Name of the resource group within the azure subscription.
        :param pulumi.Input[str] status: Enumerates the possible values for the status of the Event Hub.

        The **capture_description** object supports the following:

          * `destination` (`pulumi.Input[dict]`) - Properties of Destination where capture will be stored. (Storage Account, Blob Names)
            * `archive_name_format` (`pulumi.Input[str]`) - Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
            * `blob_container` (`pulumi.Input[str]`) - Blob container Name
            * `name` (`pulumi.Input[str]`) - Name for capture destination
            * `storage_account_resource_id` (`pulumi.Input[str]`) - Resource id of the storage account to be used to create the blobs

          * `enabled` (`pulumi.Input[bool]`) - A value that indicates whether capture description is enabled. 
          * `encoding` (`pulumi.Input[str]`) - Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated in New API Version
          * `interval_in_seconds` (`pulumi.Input[float]`) - The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds
          * `size_limit_in_bytes` (`pulumi.Input[float]`) - The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes
          * `skip_empty_archives` (`pulumi.Input[bool]`) - A value that indicates whether to Skip Empty Archives
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['capture_description'] = capture_description
            __props__['message_retention_in_days'] = message_retention_in_days
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if namespace_name is None:
                raise TypeError("Missing required property 'namespace_name'")
            __props__['namespace_name'] = namespace_name
            __props__['partition_count'] = partition_count
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['status'] = status
            __props__['created_at'] = None
            __props__['partition_ids'] = None
            __props__['type'] = None
            __props__['updated_at'] = None
        super(EventHub, __self__).__init__(
            'azurerm:eventhub/v20170401:EventHub',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing EventHub resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return EventHub(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
