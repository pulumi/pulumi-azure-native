# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ListRemediationDeploymentsAtSubscriptionResult:
    """
    List of deployments for a remediation.
    """
    def __init__(__self__, next_link=None, value=None):
        if next_link and not isinstance(next_link, str):
            raise TypeError("Expected argument 'next_link' to be a str")
        __self__.next_link = next_link
        """
        The URL to get the next set of results.
        """
        if value and not isinstance(value, list):
            raise TypeError("Expected argument 'value' to be a list")
        __self__.value = value
        """
        Array of deployments for the remediation.
        """


class AwaitableListRemediationDeploymentsAtSubscriptionResult(ListRemediationDeploymentsAtSubscriptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListRemediationDeploymentsAtSubscriptionResult(
            next_link=self.next_link,
            value=self.value)


def list_remediation_deployments_at_subscription(remediation_name=None, top=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str remediation_name: The name of the remediation.
    :param float top: Maximum number of records to return.
    """
    __args__ = dict()
    __args__['remediationName'] = remediation_name
    __args__['top'] = top
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:policyinsights/v20190701:listRemediationDeploymentsAtSubscription', __args__, opts=opts).value

    return AwaitableListRemediationDeploymentsAtSubscriptionResult(
        next_link=__ret__.get('nextLink'),
        value=__ret__.get('value'))
