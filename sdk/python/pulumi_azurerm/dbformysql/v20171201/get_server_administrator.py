# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetServerAdministratorResult:
    """
    Represents a and external administrator to be created.
    """
    def __init__(__self__, administrator_type=None, login=None, name=None, sid=None, tenant_id=None, type=None):
        if administrator_type and not isinstance(administrator_type, str):
            raise TypeError("Expected argument 'administrator_type' to be a str")
        __self__.administrator_type = administrator_type
        """
        The type of administrator.
        """
        if login and not isinstance(login, str):
            raise TypeError("Expected argument 'login' to be a str")
        __self__.login = login
        """
        The server administrator login account name.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource
        """
        if sid and not isinstance(sid, str):
            raise TypeError("Expected argument 'sid' to be a str")
        __self__.sid = sid
        """
        The server administrator Sid (Secure ID).
        """
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        __self__.tenant_id = tenant_id
        """
        The server Active Directory Administrator tenant id.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        """


class AwaitableGetServerAdministratorResult(GetServerAdministratorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServerAdministratorResult(
            administrator_type=self.administrator_type,
            login=self.login,
            name=self.name,
            sid=self.sid,
            tenant_id=self.tenant_id,
            type=self.type)


def get_server_administrator(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the server.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:dbformysql/v20171201:getServerAdministrator', __args__, opts=opts).value

    return AwaitableGetServerAdministratorResult(
        administrator_type=__ret__.get('administratorType'),
        login=__ret__.get('login'),
        name=__ret__.get('name'),
        sid=__ret__.get('sid'),
        tenant_id=__ret__.get('tenantId'),
        type=__ret__.get('type'))
