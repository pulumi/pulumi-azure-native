# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables

__all__ = [
    'IdentityResponse',
    'SkuResponse',
    'StorageProfileResponse',
    'VnetInjArgsResponse',
]

@pulumi.output_type
class IdentityResponse(dict):
    """
    Identity for the resource.
    """
    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None):
        """
        Identity for the resource.
        :param str principal_id: The principal ID of resource identity.
        :param str tenant_id: The tenant ID of resource.
        :param str type: The identity type.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of resource identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of resource.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SkuResponse(dict):
    """
    Billing information related properties of a server.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        Billing information related properties of a server.
        :param str name: The name of the sku, e.g. Standard_D32s_v3.
        :param str tier: The tier of the particular SKU, e.g. GeneralPurpose.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the sku, e.g. Standard_D32s_v3.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        The tier of the particular SKU, e.g. GeneralPurpose.
        """
        return pulumi.get(self, "tier")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StorageProfileResponse(dict):
    """
    Storage Profile properties of a server
    """
    def __init__(__self__, *,
                 backup_retention_days: Optional[float] = None,
                 storage_autogrow: Optional[str] = None,
                 storage_iops: Optional[float] = None,
                 storage_mb: Optional[float] = None):
        """
        Storage Profile properties of a server
        :param float backup_retention_days: Backup retention days for the server.
        :param str storage_autogrow: Enable Storage Auto Grow.
        :param float storage_iops: Storage IOPS for a server.
        :param float storage_mb: Max storage allowed for a server.
        """
        if backup_retention_days is not None:
            pulumi.set(__self__, "backup_retention_days", backup_retention_days)
        if storage_autogrow is not None:
            pulumi.set(__self__, "storage_autogrow", storage_autogrow)
        if storage_iops is not None:
            pulumi.set(__self__, "storage_iops", storage_iops)
        if storage_mb is not None:
            pulumi.set(__self__, "storage_mb", storage_mb)

    @property
    @pulumi.getter(name="backupRetentionDays")
    def backup_retention_days(self) -> Optional[float]:
        """
        Backup retention days for the server.
        """
        return pulumi.get(self, "backup_retention_days")

    @property
    @pulumi.getter(name="storageAutogrow")
    def storage_autogrow(self) -> Optional[str]:
        """
        Enable Storage Auto Grow.
        """
        return pulumi.get(self, "storage_autogrow")

    @property
    @pulumi.getter(name="storageIops")
    def storage_iops(self) -> Optional[float]:
        """
        Storage IOPS for a server.
        """
        return pulumi.get(self, "storage_iops")

    @property
    @pulumi.getter(name="storageMB")
    def storage_mb(self) -> Optional[float]:
        """
        Max storage allowed for a server.
        """
        return pulumi.get(self, "storage_mb")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VnetInjArgsResponse(dict):
    """
    Vnet properties of a server
    """
    def __init__(__self__, *,
                 delegated_subnet_name: Optional[str] = None,
                 delegated_vnet_id: Optional[str] = None,
                 delegated_vnet_name: Optional[str] = None):
        """
        Vnet properties of a server
        :param str delegated_subnet_name: delegated subnet name
        :param str delegated_vnet_id: delegated vNet ID
        :param str delegated_vnet_name: delegated vNet name
        """
        if delegated_subnet_name is not None:
            pulumi.set(__self__, "delegated_subnet_name", delegated_subnet_name)
        if delegated_vnet_id is not None:
            pulumi.set(__self__, "delegated_vnet_id", delegated_vnet_id)
        if delegated_vnet_name is not None:
            pulumi.set(__self__, "delegated_vnet_name", delegated_vnet_name)

    @property
    @pulumi.getter(name="delegatedSubnetName")
    def delegated_subnet_name(self) -> Optional[str]:
        """
        delegated subnet name
        """
        return pulumi.get(self, "delegated_subnet_name")

    @property
    @pulumi.getter(name="delegatedVnetID")
    def delegated_vnet_id(self) -> Optional[str]:
        """
        delegated vNet ID
        """
        return pulumi.get(self, "delegated_vnet_id")

    @property
    @pulumi.getter(name="delegatedVnetName")
    def delegated_vnet_name(self) -> Optional[str]:
        """
        delegated vNet name
        """
        return pulumi.get(self, "delegated_vnet_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


