# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetSmartDetectorAlertRuleResult:
    """
    The alert rule information
    """
    def __init__(__self__, action_groups=None, description=None, detector=None, frequency=None, location=None, name=None, scope=None, severity=None, state=None, tags=None, throttling=None, type=None):
        if action_groups and not isinstance(action_groups, dict):
            raise TypeError("Expected argument 'action_groups' to be a dict")
        __self__.action_groups = action_groups
        """
        The alert rule actions.
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        The alert rule description.
        """
        if detector and not isinstance(detector, dict):
            raise TypeError("Expected argument 'detector' to be a dict")
        __self__.detector = detector
        """
        The alert rule's detector.
        """
        if frequency and not isinstance(frequency, str):
            raise TypeError("Expected argument 'frequency' to be a str")
        __self__.frequency = frequency
        """
        The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The resource name.
        """
        if scope and not isinstance(scope, list):
            raise TypeError("Expected argument 'scope' to be a list")
        __self__.scope = scope
        """
        The alert rule resources scope.
        """
        if severity and not isinstance(severity, str):
            raise TypeError("Expected argument 'severity' to be a str")
        __self__.severity = severity
        """
        The alert rule severity.
        """
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        __self__.state = state
        """
        The alert rule state.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The resource tags.
        """
        if throttling and not isinstance(throttling, dict):
            raise TypeError("Expected argument 'throttling' to be a dict")
        __self__.throttling = throttling
        """
        The alert rule throttling information.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The resource type.
        """


class AwaitableGetSmartDetectorAlertRuleResult(GetSmartDetectorAlertRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSmartDetectorAlertRuleResult(
            action_groups=self.action_groups,
            description=self.description,
            detector=self.detector,
            frequency=self.frequency,
            location=self.location,
            name=self.name,
            scope=self.scope,
            severity=self.severity,
            state=self.state,
            tags=self.tags,
            throttling=self.throttling,
            type=self.type)


def get_smart_detector_alert_rule(expand_detector=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param bool expand_detector: Indicates if Smart Detector should be expanded.
    :param str name: The name of the alert rule.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['expandDetector'] = expand_detector
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:alertsmanagement/v20190601:getSmartDetectorAlertRule', __args__, opts=opts).value

    return AwaitableGetSmartDetectorAlertRuleResult(
        action_groups=__ret__.get('actionGroups'),
        description=__ret__.get('description'),
        detector=__ret__.get('detector'),
        frequency=__ret__.get('frequency'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        scope=__ret__.get('scope'),
        severity=__ret__.get('severity'),
        state=__ret__.get('state'),
        tags=__ret__.get('tags'),
        throttling=__ret__.get('throttling'),
        type=__ret__.get('type'))
