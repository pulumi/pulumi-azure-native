# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class RegisteredServer(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    properties: pulumi.Output[dict]
    """
    RegisteredServer properties.
      * `agent_version` (`str`) - Registered Server Agent Version
      * `cluster_id` (`str`) - Registered Server clusterId
      * `cluster_name` (`str`) - Registered Server clusterName
      * `discovery_endpoint_uri` (`str`) - Resource discoveryEndpointUri
      * `friendly_name` (`str`) - Friendly Name
      * `last_heart_beat` (`str`) - Registered Server last heart beat
      * `last_operation_name` (`str`) - Resource Last Operation Name
      * `last_workflow_id` (`str`) - Registered Server lastWorkflowId
      * `management_endpoint_uri` (`str`) - Management Endpoint Uri
      * `monitoring_configuration` (`str`) - Monitoring Configuration
      * `provisioning_state` (`str`) - Registered Server Provisioning State
      * `resource_location` (`str`) - Resource Location
      * `server_certificate` (`str`) - Registered Server Certificate
      * `server_id` (`str`) - Registered Server serverId
      * `server_management_error_code` (`float`) - Registered Server Management Error Code
      * `server_os_version` (`str`) - Registered Server OS Version
      * `server_role` (`str`) - Registered Server serverRole
      * `service_location` (`str`) - Service Location
      * `storage_sync_service_uid` (`str`) - Registered Server storageSyncServiceUid
    """
    type: pulumi.Output[str]
    """
    The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    """
    def __init__(__self__, resource_name, opts=None, agent_version=None, cluster_id=None, cluster_name=None, friendly_name=None, last_heart_beat=None, name=None, resource_group_name=None, server_certificate=None, server_os_version=None, server_role=None, storage_sync_service_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Registered Server resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] agent_version: Registered Server Agent Version
        :param pulumi.Input[str] cluster_id: Registered Server clusterId
        :param pulumi.Input[str] cluster_name: Registered Server clusterName
        :param pulumi.Input[str] friendly_name: Friendly Name
        :param pulumi.Input[str] last_heart_beat: Registered Server last heart beat
        :param pulumi.Input[str] name: Registered Server serverId
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] server_certificate: Registered Server Certificate
        :param pulumi.Input[str] server_os_version: Registered Server OS Version
        :param pulumi.Input[str] server_role: Registered Server serverRole
        :param pulumi.Input[str] storage_sync_service_name: Name of Storage Sync Service resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['agent_version'] = agent_version
            __props__['cluster_id'] = cluster_id
            __props__['cluster_name'] = cluster_name
            __props__['friendly_name'] = friendly_name
            __props__['last_heart_beat'] = last_heart_beat
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['server_certificate'] = server_certificate
            __props__['server_os_version'] = server_os_version
            __props__['server_role'] = server_role
            if storage_sync_service_name is None:
                raise TypeError("Missing required property 'storage_sync_service_name'")
            __props__['storage_sync_service_name'] = storage_sync_service_name
            __props__['properties'] = None
            __props__['type'] = None
        super(RegisteredServer, __self__).__init__(
            'azurerm:storagesync/v20181001:RegisteredServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing RegisteredServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return RegisteredServer(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
