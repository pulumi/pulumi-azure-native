# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetRegisteredServerResult:
    """
    Registered Server resource.
    """
    def __init__(__self__, agent_version=None, cluster_id=None, cluster_name=None, discovery_endpoint_uri=None, friendly_name=None, last_heart_beat=None, last_operation_name=None, last_workflow_id=None, management_endpoint_uri=None, monitoring_configuration=None, name=None, provisioning_state=None, resource_location=None, server_certificate=None, server_id=None, server_management_error_code=None, server_os_version=None, server_role=None, service_location=None, storage_sync_service_uid=None, type=None):
        if agent_version and not isinstance(agent_version, str):
            raise TypeError("Expected argument 'agent_version' to be a str")
        __self__.agent_version = agent_version
        """
        Registered Server Agent Version
        """
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        __self__.cluster_id = cluster_id
        """
        Registered Server clusterId
        """
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        __self__.cluster_name = cluster_name
        """
        Registered Server clusterName
        """
        if discovery_endpoint_uri and not isinstance(discovery_endpoint_uri, str):
            raise TypeError("Expected argument 'discovery_endpoint_uri' to be a str")
        __self__.discovery_endpoint_uri = discovery_endpoint_uri
        """
        Resource discoveryEndpointUri
        """
        if friendly_name and not isinstance(friendly_name, str):
            raise TypeError("Expected argument 'friendly_name' to be a str")
        __self__.friendly_name = friendly_name
        """
        Friendly Name
        """
        if last_heart_beat and not isinstance(last_heart_beat, str):
            raise TypeError("Expected argument 'last_heart_beat' to be a str")
        __self__.last_heart_beat = last_heart_beat
        """
        Registered Server last heart beat
        """
        if last_operation_name and not isinstance(last_operation_name, str):
            raise TypeError("Expected argument 'last_operation_name' to be a str")
        __self__.last_operation_name = last_operation_name
        """
        Resource Last Operation Name
        """
        if last_workflow_id and not isinstance(last_workflow_id, str):
            raise TypeError("Expected argument 'last_workflow_id' to be a str")
        __self__.last_workflow_id = last_workflow_id
        """
        Registered Server lastWorkflowId
        """
        if management_endpoint_uri and not isinstance(management_endpoint_uri, str):
            raise TypeError("Expected argument 'management_endpoint_uri' to be a str")
        __self__.management_endpoint_uri = management_endpoint_uri
        """
        Management Endpoint Uri
        """
        if monitoring_configuration and not isinstance(monitoring_configuration, str):
            raise TypeError("Expected argument 'monitoring_configuration' to be a str")
        __self__.monitoring_configuration = monitoring_configuration
        """
        Monitoring Configuration
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Registered Server Provisioning State
        """
        if resource_location and not isinstance(resource_location, str):
            raise TypeError("Expected argument 'resource_location' to be a str")
        __self__.resource_location = resource_location
        """
        Resource Location
        """
        if server_certificate and not isinstance(server_certificate, str):
            raise TypeError("Expected argument 'server_certificate' to be a str")
        __self__.server_certificate = server_certificate
        """
        Registered Server Certificate
        """
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        __self__.server_id = server_id
        """
        Registered Server serverId
        """
        if server_management_error_code and not isinstance(server_management_error_code, float):
            raise TypeError("Expected argument 'server_management_error_code' to be a float")
        __self__.server_management_error_code = server_management_error_code
        """
        Registered Server Management Error Code
        """
        if server_os_version and not isinstance(server_os_version, str):
            raise TypeError("Expected argument 'server_os_version' to be a str")
        __self__.server_os_version = server_os_version
        """
        Registered Server OS Version
        """
        if server_role and not isinstance(server_role, str):
            raise TypeError("Expected argument 'server_role' to be a str")
        __self__.server_role = server_role
        """
        Registered Server serverRole
        """
        if service_location and not isinstance(service_location, str):
            raise TypeError("Expected argument 'service_location' to be a str")
        __self__.service_location = service_location
        """
        Service Location
        """
        if storage_sync_service_uid and not isinstance(storage_sync_service_uid, str):
            raise TypeError("Expected argument 'storage_sync_service_uid' to be a str")
        __self__.storage_sync_service_uid = storage_sync_service_uid
        """
        Registered Server storageSyncServiceUid
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        """


class AwaitableGetRegisteredServerResult(GetRegisteredServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegisteredServerResult(
            agent_version=self.agent_version,
            cluster_id=self.cluster_id,
            cluster_name=self.cluster_name,
            discovery_endpoint_uri=self.discovery_endpoint_uri,
            friendly_name=self.friendly_name,
            last_heart_beat=self.last_heart_beat,
            last_operation_name=self.last_operation_name,
            last_workflow_id=self.last_workflow_id,
            management_endpoint_uri=self.management_endpoint_uri,
            monitoring_configuration=self.monitoring_configuration,
            name=self.name,
            provisioning_state=self.provisioning_state,
            resource_location=self.resource_location,
            server_certificate=self.server_certificate,
            server_id=self.server_id,
            server_management_error_code=self.server_management_error_code,
            server_os_version=self.server_os_version,
            server_role=self.server_role,
            service_location=self.service_location,
            storage_sync_service_uid=self.storage_sync_service_uid,
            type=self.type)


def get_registered_server(name=None, resource_group_name=None, storage_sync_service_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: GUID identifying the on-premises server.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str storage_sync_service_name: Name of Storage Sync Service resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['storageSyncServiceName'] = storage_sync_service_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:storagesync/v20190201:getRegisteredServer', __args__, opts=opts).value

    return AwaitableGetRegisteredServerResult(
        agent_version=__ret__.get('agentVersion'),
        cluster_id=__ret__.get('clusterId'),
        cluster_name=__ret__.get('clusterName'),
        discovery_endpoint_uri=__ret__.get('discoveryEndpointUri'),
        friendly_name=__ret__.get('friendlyName'),
        last_heart_beat=__ret__.get('lastHeartBeat'),
        last_operation_name=__ret__.get('lastOperationName'),
        last_workflow_id=__ret__.get('lastWorkflowId'),
        management_endpoint_uri=__ret__.get('managementEndpointUri'),
        monitoring_configuration=__ret__.get('monitoringConfiguration'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        resource_location=__ret__.get('resourceLocation'),
        server_certificate=__ret__.get('serverCertificate'),
        server_id=__ret__.get('serverId'),
        server_management_error_code=__ret__.get('serverManagementErrorCode'),
        server_os_version=__ret__.get('serverOSVersion'),
        server_role=__ret__.get('serverRole'),
        service_location=__ret__.get('serviceLocation'),
        storage_sync_service_uid=__ret__.get('storageSyncServiceUid'),
        type=__ret__.get('type'))
