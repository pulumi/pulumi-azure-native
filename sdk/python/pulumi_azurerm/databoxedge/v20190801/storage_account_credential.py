# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class StorageAccountCredential(pulumi.CustomResource):
    account_key: pulumi.Output[dict]
    """
    Encrypted storage key.
      * `encryption_algorithm` (`str`) - The algorithm used to encrypt "Value".
      * `encryption_cert_thumbprint` (`str`) - Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
      * `value` (`str`) - The value of the secret.
    """
    account_type: pulumi.Output[str]
    """
    Type of storage accessed on the storage account.
    """
    alias: pulumi.Output[str]
    """
    Alias for the storage account.
    """
    blob_domain_name: pulumi.Output[str]
    """
    Blob end point for private clouds.
    """
    connection_string: pulumi.Output[str]
    """
    Connection string for the storage account. Use this string if username and account key are not specified.
    """
    name: pulumi.Output[str]
    """
    The object name.
    """
    ssl_status: pulumi.Output[str]
    """
    Signifies whether SSL needs to be enabled or not.
    """
    storage_account_id: pulumi.Output[str]
    """
    Id of the storage account.
    """
    type: pulumi.Output[str]
    """
    The hierarchical type of the object.
    """
    user_name: pulumi.Output[str]
    """
    Username for the storage account.
    """
    def __init__(__self__, resource_name, opts=None, account_key=None, account_type=None, alias=None, blob_domain_name=None, connection_string=None, device_name=None, name=None, resource_group_name=None, ssl_status=None, storage_account_id=None, user_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The storage account credential.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] account_key: Encrypted storage key.
        :param pulumi.Input[str] account_type: Type of storage accessed on the storage account.
        :param pulumi.Input[str] alias: Alias for the storage account.
        :param pulumi.Input[str] blob_domain_name: Blob end point for private clouds.
        :param pulumi.Input[str] connection_string: Connection string for the storage account. Use this string if username and account key are not specified.
        :param pulumi.Input[str] device_name: The device name.
        :param pulumi.Input[str] name: The storage account credential name.
        :param pulumi.Input[str] resource_group_name: The resource group name.
        :param pulumi.Input[str] ssl_status: Signifies whether SSL needs to be enabled or not.
        :param pulumi.Input[str] storage_account_id: Id of the storage account.
        :param pulumi.Input[str] user_name: Username for the storage account.

        The **account_key** object supports the following:

          * `encryption_algorithm` (`pulumi.Input[str]`) - The algorithm used to encrypt "Value".
          * `encryption_cert_thumbprint` (`pulumi.Input[str]`) - Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
          * `value` (`pulumi.Input[str]`) - The value of the secret.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['account_key'] = account_key
            if account_type is None:
                raise TypeError("Missing required property 'account_type'")
            __props__['account_type'] = account_type
            if alias is None:
                raise TypeError("Missing required property 'alias'")
            __props__['alias'] = alias
            __props__['blob_domain_name'] = blob_domain_name
            __props__['connection_string'] = connection_string
            if device_name is None:
                raise TypeError("Missing required property 'device_name'")
            __props__['device_name'] = device_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if ssl_status is None:
                raise TypeError("Missing required property 'ssl_status'")
            __props__['ssl_status'] = ssl_status
            __props__['storage_account_id'] = storage_account_id
            __props__['user_name'] = user_name
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:databoxedge/v20190301:StorageAccountCredential"), pulumi.Alias(type_="azurerm:databoxedge/v20190701:StorageAccountCredential")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(StorageAccountCredential, __self__).__init__(
            'azurerm:databoxedge/v20190801:StorageAccountCredential',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing StorageAccountCredential resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return StorageAccountCredential(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
