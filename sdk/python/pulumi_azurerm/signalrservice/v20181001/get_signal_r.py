# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetSignalRResult:
    """
    A class represent a SignalR service resource.
    """
    def __init__(__self__, cors=None, external_ip=None, features=None, host_name=None, host_name_prefix=None, location=None, name=None, provisioning_state=None, public_port=None, server_port=None, sku=None, tags=None, type=None, version=None):
        if cors and not isinstance(cors, dict):
            raise TypeError("Expected argument 'cors' to be a dict")
        __self__.cors = cors
        """
        Cross-Origin Resource Sharing (CORS) settings.
        """
        if external_ip and not isinstance(external_ip, str):
            raise TypeError("Expected argument 'external_ip' to be a str")
        __self__.external_ip = external_ip
        """
        The publicly accessible IP of the SignalR service.
        """
        if features and not isinstance(features, list):
            raise TypeError("Expected argument 'features' to be a list")
        __self__.features = features
        """
        List of SignalR featureFlags. e.g. ServiceMode.
        
        FeatureFlags that are not included in the parameters for the update operation will not be modified.
        And the response will only include featureFlags that are explicitly set. 
        When a featureFlag is not explicitly set, SignalR service will use its globally default value. 
        But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        """
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        __self__.host_name = host_name
        """
        FQDN of the SignalR service instance. Format: xxx.service.signalr.net
        """
        if host_name_prefix and not isinstance(host_name_prefix, str):
            raise TypeError("Expected argument 'host_name_prefix' to be a str")
        __self__.host_name_prefix = host_name_prefix
        """
        Prefix for the hostName of the SignalR service. Retained for future use.
        The hostname will be of format: &lt;hostNamePrefix&gt;.service.signalr.net.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The GEO location of the SignalR service. e.g. West US | East US | North Central US | South Central US.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Provisioning state of the resource.
        """
        if public_port and not isinstance(public_port, float):
            raise TypeError("Expected argument 'public_port' to be a float")
        __self__.public_port = public_port
        """
        The publicly accessible port of the SignalR service which is designed for browser/client side usage.
        """
        if server_port and not isinstance(server_port, float):
            raise TypeError("Expected argument 'server_port' to be a float")
        __self__.server_port = server_port
        """
        The publicly accessible port of the SignalR service which is designed for customer server side usage.
        """
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        SKU of the service.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Tags of the service which is a list of key value pairs that describe the resource.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the service - e.g. "Microsoft.SignalRService/SignalR"
        """
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        __self__.version = version
        """
        Version of the SignalR resource. Probably you need the same or higher version of client SDKs.
        """


class AwaitableGetSignalRResult(GetSignalRResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSignalRResult(
            cors=self.cors,
            external_ip=self.external_ip,
            features=self.features,
            host_name=self.host_name,
            host_name_prefix=self.host_name_prefix,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            public_port=self.public_port,
            server_port=self.server_port,
            sku=self.sku,
            tags=self.tags,
            type=self.type,
            version=self.version)


def get_signal_r(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the SignalR resource.
    :param str resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:signalrservice/v20181001:getSignalR', __args__, opts=opts).value

    return AwaitableGetSignalRResult(
        cors=__ret__.get('cors'),
        external_ip=__ret__.get('externalIP'),
        features=__ret__.get('features'),
        host_name=__ret__.get('hostName'),
        host_name_prefix=__ret__.get('hostNamePrefix'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        public_port=__ret__.get('publicPort'),
        server_port=__ret__.get('serverPort'),
        sku=__ret__.get('sku'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        version=__ret__.get('version'))
