# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ApplicationDefinition(pulumi.CustomResource):
    artifacts: pulumi.Output[list]
    """
    The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.
      * `name` (`str`) - The managed application definition artifact name.
      * `type` (`str`) - The managed application definition artifact type.
      * `uri` (`str`) - The managed application definition artifact blob uri.
    """
    authorizations: pulumi.Output[list]
    """
    The managed application provider authorizations.
      * `principal_id` (`str`) - The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the managed application resources.
      * `role_definition_id` (`str`) - The provider's role definition identifier. This role will define all the permissions that the provider must have on the managed application's container resource group. This role definition cannot have permission to delete the resource group.
    """
    create_ui_definition: pulumi.Output[dict]
    """
    The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.
    """
    deployment_policy: pulumi.Output[dict]
    """
    The managed application deployment policy.
      * `deployment_mode` (`str`) - The managed application deployment mode.
    """
    description: pulumi.Output[str]
    """
    The managed application definition description.
    """
    display_name: pulumi.Output[str]
    """
    The managed application definition display name.
    """
    is_enabled: pulumi.Output[bool]
    """
    A value indicating whether the package is enabled or not.
    """
    location: pulumi.Output[str]
    """
    Resource location
    """
    lock_level: pulumi.Output[str]
    """
    The managed application lock level.
    """
    locking_policy: pulumi.Output[dict]
    """
    The managed application locking policy.
      * `allowed_actions` (`list`) - The deny assignment excluded actions.
    """
    main_template: pulumi.Output[dict]
    """
    The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.
    """
    managed_by: pulumi.Output[str]
    """
    ID of the resource that manages this resource.
    """
    management_policy: pulumi.Output[dict]
    """
    The managed application management policy that determines publisher's access to the managed resource group.
      * `mode` (`str`) - The managed application management mode.
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    notification_policy: pulumi.Output[dict]
    """
    The managed application notification policy.
      * `notification_endpoints` (`list`) - The managed application notification endpoint.
        * `uri` (`str`) - The managed application notification endpoint uri.
    """
    package_file_uri: pulumi.Output[str]
    """
    The managed application definition package file Uri. Use this element
    """
    policies: pulumi.Output[list]
    """
    The managed application provider policies.
      * `name` (`str`) - The policy name
      * `parameters` (`str`) - The policy parameters.
      * `policy_definition_id` (`str`) - The policy definition Id.
    """
    sku: pulumi.Output[dict]
    """
    The SKU of the resource.
      * `capacity` (`float`) - The SKU capacity.
      * `family` (`str`) - The SKU family.
      * `model` (`str`) - The SKU model.
      * `name` (`str`) - The SKU name.
      * `size` (`str`) - The SKU size.
      * `tier` (`str`) - The SKU tier.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, artifacts=None, authorizations=None, create_ui_definition=None, deployment_policy=None, description=None, display_name=None, is_enabled=None, location=None, lock_level=None, locking_policy=None, main_template=None, managed_by=None, management_policy=None, name=None, notification_policy=None, package_file_uri=None, policies=None, resource_group_name=None, sku=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Information about managed application definition.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] artifacts: The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.
        :param pulumi.Input[list] authorizations: The managed application provider authorizations.
        :param pulumi.Input[dict] create_ui_definition: The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.
        :param pulumi.Input[dict] deployment_policy: The managed application deployment policy.
        :param pulumi.Input[str] description: The managed application definition description.
        :param pulumi.Input[str] display_name: The managed application definition display name.
        :param pulumi.Input[bool] is_enabled: A value indicating whether the package is enabled or not.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] lock_level: The managed application lock level.
        :param pulumi.Input[dict] locking_policy: The managed application locking policy.
        :param pulumi.Input[dict] main_template: The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.
        :param pulumi.Input[str] managed_by: ID of the resource that manages this resource.
        :param pulumi.Input[dict] management_policy: The managed application management policy that determines publisher's access to the managed resource group.
        :param pulumi.Input[str] name: The name of the managed application definition.
        :param pulumi.Input[dict] notification_policy: The managed application notification policy.
        :param pulumi.Input[str] package_file_uri: The managed application definition package file Uri. Use this element
        :param pulumi.Input[list] policies: The managed application provider policies.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[dict] sku: The SKU of the resource.
        :param pulumi.Input[dict] tags: Resource tags

        The **artifacts** object supports the following:

          * `name` (`pulumi.Input[str]`) - The managed application definition artifact name.
          * `type` (`pulumi.Input[str]`) - The managed application definition artifact type.
          * `uri` (`pulumi.Input[str]`) - The managed application definition artifact blob uri.

        The **authorizations** object supports the following:

          * `principal_id` (`pulumi.Input[str]`) - The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the managed application resources.
          * `role_definition_id` (`pulumi.Input[str]`) - The provider's role definition identifier. This role will define all the permissions that the provider must have on the managed application's container resource group. This role definition cannot have permission to delete the resource group.

        The **deployment_policy** object supports the following:

          * `deployment_mode` (`pulumi.Input[str]`) - The managed application deployment mode.

        The **locking_policy** object supports the following:

          * `allowed_actions` (`pulumi.Input[list]`) - The deny assignment excluded actions.

        The **management_policy** object supports the following:

          * `mode` (`pulumi.Input[str]`) - The managed application management mode.

        The **notification_policy** object supports the following:

          * `notification_endpoints` (`pulumi.Input[list]`) - The managed application notification endpoint.
            * `uri` (`pulumi.Input[str]`) - The managed application notification endpoint uri.

        The **policies** object supports the following:

          * `name` (`pulumi.Input[str]`) - The policy name
          * `parameters` (`pulumi.Input[str]`) - The policy parameters.
          * `policy_definition_id` (`pulumi.Input[str]`) - The policy definition Id.

        The **sku** object supports the following:

          * `capacity` (`pulumi.Input[float]`) - The SKU capacity.
          * `family` (`pulumi.Input[str]`) - The SKU family.
          * `model` (`pulumi.Input[str]`) - The SKU model.
          * `name` (`pulumi.Input[str]`) - The SKU name.
          * `size` (`pulumi.Input[str]`) - The SKU size.
          * `tier` (`pulumi.Input[str]`) - The SKU tier.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['artifacts'] = artifacts
            __props__['authorizations'] = authorizations
            __props__['create_ui_definition'] = create_ui_definition
            __props__['deployment_policy'] = deployment_policy
            __props__['description'] = description
            __props__['display_name'] = display_name
            __props__['is_enabled'] = is_enabled
            __props__['location'] = location
            if lock_level is None:
                raise TypeError("Missing required property 'lock_level'")
            __props__['lock_level'] = lock_level
            __props__['locking_policy'] = locking_policy
            __props__['main_template'] = main_template
            __props__['managed_by'] = managed_by
            __props__['management_policy'] = management_policy
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['notification_policy'] = notification_policy
            __props__['package_file_uri'] = package_file_uri
            __props__['policies'] = policies
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:solutions/v20170901:ApplicationDefinition"), pulumi.Alias(type_="azurerm:solutions/v20180601:ApplicationDefinition")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(ApplicationDefinition, __self__).__init__(
            'azurerm:solutions/v20190701:ApplicationDefinition',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ApplicationDefinition resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ApplicationDefinition(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
