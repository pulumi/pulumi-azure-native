# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class JitRequest(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    The JIT request properties.
      * `application_resource_id` (`str`) - The parent application id.
      * `created_by` (`dict`) - The client entity that created the JIT request.
        * `application_id` (`str`) - The client application Id.
        * `oid` (`str`) - The client Oid.
        * `puid` (`str`) - The client Puid

      * `jit_authorization_policies` (`list`) - The JIT authorization policies.
        * `principal_id` (`str`) - The the principal id that will be granted JIT access.
        * `role_definition_id` (`str`) - The role definition id that will be granted to the Principal.

      * `jit_request_state` (`str`) - The JIT request state.
      * `jit_scheduling_policy` (`dict`) - The JIT request properties.
        * `duration` (`str`)
        * `start_time` (`str`) - The start time of the request.
        * `type` (`str`) - The type of JIT schedule.

      * `provisioning_state` (`str`) - The JIT request provisioning state.
      * `publisher_tenant_id` (`str`) - The publisher tenant id.
      * `updated_by` (`dict`) - The client entity that last updated the JIT request.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Information about JIT request definition.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The name of the JIT request.
        :param pulumi.Input[dict] properties: The JIT request properties.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[dict] tags: Resource tags

        The **properties** object supports the following:

          * `application_resource_id` (`pulumi.Input[str]`) - The parent application id.
          * `jit_authorization_policies` (`pulumi.Input[list]`) - The JIT authorization policies.
            * `principal_id` (`pulumi.Input[str]`) - The the principal id that will be granted JIT access.
            * `role_definition_id` (`pulumi.Input[str]`) - The role definition id that will be granted to the Principal.

          * `jit_scheduling_policy` (`pulumi.Input[dict]`) - The JIT request properties.
            * `duration` (`pulumi.Input[str]`)
            * `start_time` (`pulumi.Input[str]`) - The start time of the request.
            * `type` (`pulumi.Input[str]`) - The type of JIT schedule.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(JitRequest, __self__).__init__(
            'azurerm:solutions/v20190701:JitRequest',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing JitRequest resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return JitRequest(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
