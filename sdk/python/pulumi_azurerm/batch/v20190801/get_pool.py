# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetPoolResult:
    """
    Contains information about a pool.
    """
    def __init__(__self__, allocation_state=None, allocation_state_transition_time=None, application_licenses=None, application_packages=None, auto_scale_run=None, certificates=None, creation_time=None, current_dedicated_nodes=None, current_low_priority_nodes=None, deployment_configuration=None, display_name=None, etag=None, inter_node_communication=None, last_modified=None, max_tasks_per_node=None, metadata=None, mount_configuration=None, name=None, network_configuration=None, provisioning_state=None, provisioning_state_transition_time=None, resize_operation_status=None, scale_settings=None, start_task=None, task_scheduling_policy=None, type=None, user_accounts=None, vm_size=None):
        if allocation_state and not isinstance(allocation_state, str):
            raise TypeError("Expected argument 'allocation_state' to be a str")
        __self__.allocation_state = allocation_state
        if allocation_state_transition_time and not isinstance(allocation_state_transition_time, str):
            raise TypeError("Expected argument 'allocation_state_transition_time' to be a str")
        __self__.allocation_state_transition_time = allocation_state_transition_time
        if application_licenses and not isinstance(application_licenses, list):
            raise TypeError("Expected argument 'application_licenses' to be a list")
        __self__.application_licenses = application_licenses
        """
        The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
        """
        if application_packages and not isinstance(application_packages, list):
            raise TypeError("Expected argument 'application_packages' to be a list")
        __self__.application_packages = application_packages
        """
        Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references on any given pool.
        """
        if auto_scale_run and not isinstance(auto_scale_run, dict):
            raise TypeError("Expected argument 'auto_scale_run' to be a dict")
        __self__.auto_scale_run = auto_scale_run
        """
        This property is set only if the pool automatically scales, i.e. autoScaleSettings are used.
        """
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        __self__.certificates = certificates
        """
        For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
        """
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        __self__.creation_time = creation_time
        if current_dedicated_nodes and not isinstance(current_dedicated_nodes, float):
            raise TypeError("Expected argument 'current_dedicated_nodes' to be a float")
        __self__.current_dedicated_nodes = current_dedicated_nodes
        if current_low_priority_nodes and not isinstance(current_low_priority_nodes, float):
            raise TypeError("Expected argument 'current_low_priority_nodes' to be a float")
        __self__.current_low_priority_nodes = current_low_priority_nodes
        if deployment_configuration and not isinstance(deployment_configuration, dict):
            raise TypeError("Expected argument 'deployment_configuration' to be a dict")
        __self__.deployment_configuration = deployment_configuration
        """
        Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
        """
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        __self__.display_name = display_name
        """
        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        The ETag of the resource, used for concurrency statements.
        """
        if inter_node_communication and not isinstance(inter_node_communication, str):
            raise TypeError("Expected argument 'inter_node_communication' to be a str")
        __self__.inter_node_communication = inter_node_communication
        """
        This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
        """
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        __self__.last_modified = last_modified
        """
        This is the last time at which the pool level data, such as the targetDedicatedNodes or autoScaleSettings, changed. It does not factor in node-level changes such as a compute node changing state.
        """
        if max_tasks_per_node and not isinstance(max_tasks_per_node, float):
            raise TypeError("Expected argument 'max_tasks_per_node' to be a float")
        __self__.max_tasks_per_node = max_tasks_per_node
        """
        The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        """
        if metadata and not isinstance(metadata, list):
            raise TypeError("Expected argument 'metadata' to be a list")
        __self__.metadata = metadata
        """
        The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
        """
        if mount_configuration and not isinstance(mount_configuration, list):
            raise TypeError("Expected argument 'mount_configuration' to be a list")
        __self__.mount_configuration = mount_configuration
        """
        This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if network_configuration and not isinstance(network_configuration, dict):
            raise TypeError("Expected argument 'network_configuration' to be a dict")
        __self__.network_configuration = network_configuration
        """
        The network configuration for a pool.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        if provisioning_state_transition_time and not isinstance(provisioning_state_transition_time, str):
            raise TypeError("Expected argument 'provisioning_state_transition_time' to be a str")
        __self__.provisioning_state_transition_time = provisioning_state_transition_time
        if resize_operation_status and not isinstance(resize_operation_status, dict):
            raise TypeError("Expected argument 'resize_operation_status' to be a dict")
        __self__.resize_operation_status = resize_operation_status
        """
        Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
        """
        if scale_settings and not isinstance(scale_settings, dict):
            raise TypeError("Expected argument 'scale_settings' to be a dict")
        __self__.scale_settings = scale_settings
        """
        Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
        """
        if start_task and not isinstance(start_task, dict):
            raise TypeError("Expected argument 'start_task' to be a dict")
        __self__.start_task = start_task
        """
        In an PATCH (update) operation, this property can be set to an empty object to remove the start task from the pool.
        """
        if task_scheduling_policy and not isinstance(task_scheduling_policy, dict):
            raise TypeError("Expected argument 'task_scheduling_policy' to be a dict")
        __self__.task_scheduling_policy = task_scheduling_policy
        """
        If not specified, the default is spread.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """
        if user_accounts and not isinstance(user_accounts, list):
            raise TypeError("Expected argument 'user_accounts' to be a list")
        __self__.user_accounts = user_accounts
        if vm_size and not isinstance(vm_size, str):
            raise TypeError("Expected argument 'vm_size' to be a str")
        __self__.vm_size = vm_size
        """
        For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
        """


class AwaitableGetPoolResult(GetPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPoolResult(
            allocation_state=self.allocation_state,
            allocation_state_transition_time=self.allocation_state_transition_time,
            application_licenses=self.application_licenses,
            application_packages=self.application_packages,
            auto_scale_run=self.auto_scale_run,
            certificates=self.certificates,
            creation_time=self.creation_time,
            current_dedicated_nodes=self.current_dedicated_nodes,
            current_low_priority_nodes=self.current_low_priority_nodes,
            deployment_configuration=self.deployment_configuration,
            display_name=self.display_name,
            etag=self.etag,
            inter_node_communication=self.inter_node_communication,
            last_modified=self.last_modified,
            max_tasks_per_node=self.max_tasks_per_node,
            metadata=self.metadata,
            mount_configuration=self.mount_configuration,
            name=self.name,
            network_configuration=self.network_configuration,
            provisioning_state=self.provisioning_state,
            provisioning_state_transition_time=self.provisioning_state_transition_time,
            resize_operation_status=self.resize_operation_status,
            scale_settings=self.scale_settings,
            start_task=self.start_task,
            task_scheduling_policy=self.task_scheduling_policy,
            type=self.type,
            user_accounts=self.user_accounts,
            vm_size=self.vm_size)


def get_pool(account_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str account_name: The name of the Batch account.
    :param str name: The pool name. This must be unique within the account.
    :param str resource_group_name: The name of the resource group that contains the Batch account.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:batch/v20190801:getPool', __args__, opts=opts).value

    return AwaitableGetPoolResult(
        allocation_state=__ret__.get('allocationState'),
        allocation_state_transition_time=__ret__.get('allocationStateTransitionTime'),
        application_licenses=__ret__.get('applicationLicenses'),
        application_packages=__ret__.get('applicationPackages'),
        auto_scale_run=__ret__.get('autoScaleRun'),
        certificates=__ret__.get('certificates'),
        creation_time=__ret__.get('creationTime'),
        current_dedicated_nodes=__ret__.get('currentDedicatedNodes'),
        current_low_priority_nodes=__ret__.get('currentLowPriorityNodes'),
        deployment_configuration=__ret__.get('deploymentConfiguration'),
        display_name=__ret__.get('displayName'),
        etag=__ret__.get('etag'),
        inter_node_communication=__ret__.get('interNodeCommunication'),
        last_modified=__ret__.get('lastModified'),
        max_tasks_per_node=__ret__.get('maxTasksPerNode'),
        metadata=__ret__.get('metadata'),
        mount_configuration=__ret__.get('mountConfiguration'),
        name=__ret__.get('name'),
        network_configuration=__ret__.get('networkConfiguration'),
        provisioning_state=__ret__.get('provisioningState'),
        provisioning_state_transition_time=__ret__.get('provisioningStateTransitionTime'),
        resize_operation_status=__ret__.get('resizeOperationStatus'),
        scale_settings=__ret__.get('scaleSettings'),
        start_task=__ret__.get('startTask'),
        task_scheduling_policy=__ret__.get('taskSchedulingPolicy'),
        type=__ret__.get('type'),
        user_accounts=__ret__.get('userAccounts'),
        vm_size=__ret__.get('vmSize'))
