# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetBatchAccountResult:
    """
    Contains information about an Azure Batch account.
    """
    def __init__(__self__, account_endpoint=None, active_job_and_job_schedule_quota=None, auto_storage=None, dedicated_core_quota=None, dedicated_core_quota_per_vm_family=None, dedicated_core_quota_per_vm_family_enforced=None, key_vault_reference=None, location=None, low_priority_core_quota=None, name=None, pool_allocation_mode=None, pool_quota=None, provisioning_state=None, tags=None, type=None):
        if account_endpoint and not isinstance(account_endpoint, str):
            raise TypeError("Expected argument 'account_endpoint' to be a str")
        __self__.account_endpoint = account_endpoint
        """
        The account endpoint used to interact with the Batch service.
        """
        if active_job_and_job_schedule_quota and not isinstance(active_job_and_job_schedule_quota, float):
            raise TypeError("Expected argument 'active_job_and_job_schedule_quota' to be a float")
        __self__.active_job_and_job_schedule_quota = active_job_and_job_schedule_quota
        if auto_storage and not isinstance(auto_storage, dict):
            raise TypeError("Expected argument 'auto_storage' to be a dict")
        __self__.auto_storage = auto_storage
        """
        Contains information about the auto-storage account associated with a Batch account.
        """
        if dedicated_core_quota and not isinstance(dedicated_core_quota, float):
            raise TypeError("Expected argument 'dedicated_core_quota' to be a float")
        __self__.dedicated_core_quota = dedicated_core_quota
        """
        For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
        """
        if dedicated_core_quota_per_vm_family and not isinstance(dedicated_core_quota_per_vm_family, list):
            raise TypeError("Expected argument 'dedicated_core_quota_per_vm_family' to be a list")
        __self__.dedicated_core_quota_per_vm_family = dedicated_core_quota_per_vm_family
        """
        A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
        """
        if dedicated_core_quota_per_vm_family_enforced and not isinstance(dedicated_core_quota_per_vm_family_enforced, bool):
            raise TypeError("Expected argument 'dedicated_core_quota_per_vm_family_enforced' to be a bool")
        __self__.dedicated_core_quota_per_vm_family_enforced = dedicated_core_quota_per_vm_family_enforced
        """
        Batch is transitioning its core quota system for dedicated cores to be enforced per Virtual Machine family. During this transitional phase, the dedicated core quota per Virtual Machine family may not yet be enforced. If this flag is false, dedicated core quota is enforced via the old dedicatedCoreQuota property on the account and does not consider Virtual Machine family. If this flag is true, dedicated core quota is enforced via the dedicatedCoreQuotaPerVMFamily property on the account, and the old dedicatedCoreQuota does not apply.
        """
        if key_vault_reference and not isinstance(key_vault_reference, dict):
            raise TypeError("Expected argument 'key_vault_reference' to be a dict")
        __self__.key_vault_reference = key_vault_reference
        """
        Identifies the Azure key vault associated with a Batch account.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The location of the resource.
        """
        if low_priority_core_quota and not isinstance(low_priority_core_quota, float):
            raise TypeError("Expected argument 'low_priority_core_quota' to be a float")
        __self__.low_priority_core_quota = low_priority_core_quota
        """
        For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if pool_allocation_mode and not isinstance(pool_allocation_mode, str):
            raise TypeError("Expected argument 'pool_allocation_mode' to be a str")
        __self__.pool_allocation_mode = pool_allocation_mode
        """
        The allocation mode for creating pools in the Batch account.
        """
        if pool_quota and not isinstance(pool_quota, float):
            raise TypeError("Expected argument 'pool_quota' to be a float")
        __self__.pool_quota = pool_quota
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioned state of the resource
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The tags of the resource.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """


class AwaitableGetBatchAccountResult(GetBatchAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBatchAccountResult(
            account_endpoint=self.account_endpoint,
            active_job_and_job_schedule_quota=self.active_job_and_job_schedule_quota,
            auto_storage=self.auto_storage,
            dedicated_core_quota=self.dedicated_core_quota,
            dedicated_core_quota_per_vm_family=self.dedicated_core_quota_per_vm_family,
            dedicated_core_quota_per_vm_family_enforced=self.dedicated_core_quota_per_vm_family_enforced,
            key_vault_reference=self.key_vault_reference,
            location=self.location,
            low_priority_core_quota=self.low_priority_core_quota,
            name=self.name,
            pool_allocation_mode=self.pool_allocation_mode,
            pool_quota=self.pool_quota,
            provisioning_state=self.provisioning_state,
            tags=self.tags,
            type=self.type)


def get_batch_account(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the Batch account.
    :param str resource_group_name: The name of the resource group that contains the Batch account.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:batch/v20190801:getBatchAccount', __args__, opts=opts).value

    return AwaitableGetBatchAccountResult(
        account_endpoint=__ret__.get('accountEndpoint'),
        active_job_and_job_schedule_quota=__ret__.get('activeJobAndJobScheduleQuota'),
        auto_storage=__ret__.get('autoStorage'),
        dedicated_core_quota=__ret__.get('dedicatedCoreQuota'),
        dedicated_core_quota_per_vm_family=__ret__.get('dedicatedCoreQuotaPerVMFamily'),
        dedicated_core_quota_per_vm_family_enforced=__ret__.get('dedicatedCoreQuotaPerVMFamilyEnforced'),
        key_vault_reference=__ret__.get('keyVaultReference'),
        location=__ret__.get('location'),
        low_priority_core_quota=__ret__.get('lowPriorityCoreQuota'),
        name=__ret__.get('name'),
        pool_allocation_mode=__ret__.get('poolAllocationMode'),
        pool_quota=__ret__.get('poolQuota'),
        provisioning_state=__ret__.get('provisioningState'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
