# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class IotSecuritySolution(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    The resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Security Solution data
      * `auto_discovered_resources` (`list`) - List of resources that were automatically discovered as relevant to the security solution.
      * `disabled_data_sources` (`list`) - Disabled data sources. Disabling these data sources compromises the system.
      * `display_name` (`str`) - Resource display name.
      * `export` (`list`) - List of additional options for exporting to workspace data.
      * `iot_hubs` (`list`) - IoT Hub resource IDs
      * `recommendations_configuration` (`dict`) - List of the configuration status for each recommendation type.
      * `status` (`str`) - Status of the IoT Security solution.
      * `unmasked_ip_logging_status` (`str`) - Unmasked IP address logging status
      * `user_defined_resources` (`dict`) - Properties of the IoT Security solution's user defined resources.
        * `query` (`str`) - Azure Resource Graph query which represents the security solution's user defined resources. Required to start with "where type != "Microsoft.Devices/IotHubs""
        * `query_subscriptions` (`list`) - List of Azure subscription ids on which the user defined resources query should be executed.

      * `workspace` (`str`) - Workspace resource ID
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        IoT Security solution configuration and resource information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: The resource location.
        :param pulumi.Input[str] name: The name of the IoT Security solution.
        :param pulumi.Input[dict] properties: Security Solution data
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.
        :param pulumi.Input[dict] tags: Resource tags

        The **properties** object supports the following:

          * `disabled_data_sources` (`pulumi.Input[list]`) - Disabled data sources. Disabling these data sources compromises the system.
          * `display_name` (`pulumi.Input[str]`) - Resource display name.
          * `export` (`pulumi.Input[list]`) - List of additional options for exporting to workspace data.
          * `iot_hubs` (`pulumi.Input[list]`) - IoT Hub resource IDs
          * `recommendations_configuration` (`pulumi.Input[dict]`) - List of the configuration status for each recommendation type.
          * `status` (`pulumi.Input[str]`) - Status of the IoT Security solution.
          * `unmasked_ip_logging_status` (`pulumi.Input[str]`) - Unmasked IP address logging status
          * `user_defined_resources` (`pulumi.Input[dict]`) - Properties of the IoT Security solution's user defined resources.
            * `query` (`pulumi.Input[str]`) - Azure Resource Graph query which represents the security solution's user defined resources. Required to start with "where type != "Microsoft.Devices/IotHubs""
            * `query_subscriptions` (`pulumi.Input[list]`) - List of Azure subscription ids on which the user defined resources query should be executed.

          * `workspace` (`pulumi.Input[str]`) - Workspace resource ID
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(IotSecuritySolution, __self__).__init__(
            'azurerm:security/v20190801:IotSecuritySolution',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing IotSecuritySolution resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return IotSecuritySolution(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
