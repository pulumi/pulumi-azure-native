# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class JitNetworkAccessPolicy(pulumi.CustomResource):
    kind: pulumi.Output[str]
    """
    Kind of the resource
    """
    location: pulumi.Output[str]
    """
    Location where the resource is stored
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, asc_location=None, kind=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a JitNetworkAccessPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations
        :param pulumi.Input[str] kind: Kind of the resource
        :param pulumi.Input[str] name: Name of a Just-in-Time access configuration policy.
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.

        The **properties** object supports the following:

          * `requests` (`pulumi.Input[list]`)
            * `justification` (`pulumi.Input[str]`) - The justification for making the initiate request
            * `requestor` (`pulumi.Input[str]`) - The identity of the person who made the request
            * `start_time_utc` (`pulumi.Input[str]`) - The start time of the request in UTC
            * `virtual_machines` (`pulumi.Input[list]`)
              * `id` (`pulumi.Input[str]`) - Resource ID of the virtual machine that is linked to this policy
              * `ports` (`pulumi.Input[list]`) - The ports that were opened for the virtual machine
                * `allowed_source_address_prefix` (`pulumi.Input[str]`) - Mutually exclusive with the "allowedSourceAddressPrefixes" parameter. Should be an IP address or CIDR, for example "192.168.0.3" or "192.168.0.0/16".
                * `allowed_source_address_prefixes` (`pulumi.Input[list]`) - Mutually exclusive with the "allowedSourceAddressPrefix" parameter.
                * `end_time_utc` (`pulumi.Input[str]`) - The date & time at which the request ends in UTC
                * `mapped_port` (`pulumi.Input[float]`) - The port which is mapped to this port's `number` in the Azure Firewall, if applicable
                * `number` (`pulumi.Input[float]`)
                * `status` (`pulumi.Input[str]`) - The status of the port
                * `status_reason` (`pulumi.Input[str]`) - A description of why the `status` has its value

          * `virtual_machines` (`pulumi.Input[list]`) - Configurations for Microsoft.Compute/virtualMachines resource type.
            * `id` (`pulumi.Input[str]`) - Resource ID of the virtual machine that is linked to this policy
            * `ports` (`pulumi.Input[list]`) - Port configurations for the virtual machine
              * `allowed_source_address_prefix` (`pulumi.Input[str]`) - Mutually exclusive with the "allowedSourceAddressPrefixes" parameter. Should be an IP address or CIDR, for example "192.168.0.3" or "192.168.0.0/16".
              * `allowed_source_address_prefixes` (`pulumi.Input[list]`) - Mutually exclusive with the "allowedSourceAddressPrefix" parameter.
              * `max_request_access_duration` (`pulumi.Input[str]`) - Maximum duration requests can be made for. In ISO 8601 duration format. Minimum 5 minutes, maximum 1 day
              * `number` (`pulumi.Input[float]`)
              * `protocol` (`pulumi.Input[str]`)

            * `public_ip_address` (`pulumi.Input[str]`) - Public IP address of the Azure Firewall that is linked to this policy, if applicable
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if asc_location is None:
                raise TypeError("Missing required property 'asc_location'")
            __props__['asc_location'] = asc_location
            __props__['kind'] = kind
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if properties is None:
                raise TypeError("Missing required property 'properties'")
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['location'] = None
            __props__['type'] = None
        super(JitNetworkAccessPolicy, __self__).__init__(
            'azurerm:security/v20200101:JitNetworkAccessPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing JitNetworkAccessPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return JitNetworkAccessPolicy(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
