# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetAssessmentResult:
    """
    Security assessment on a resource
    """
    def __init__(__self__, additional_data=None, display_name=None, links=None, metadata=None, name=None, partners_data=None, resource_details=None, status=None, type=None):
        if additional_data and not isinstance(additional_data, dict):
            raise TypeError("Expected argument 'additional_data' to be a dict")
        __self__.additional_data = additional_data
        """
        Additional data regarding the assessment
        """
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        __self__.display_name = display_name
        """
        User friendly display name of the assessment
        """
        if links and not isinstance(links, dict):
            raise TypeError("Expected argument 'links' to be a dict")
        __self__.links = links
        """
        Links relevant to the assessment
        """
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        __self__.metadata = metadata
        """
        Describes properties of an assessment metadata.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if partners_data and not isinstance(partners_data, dict):
            raise TypeError("Expected argument 'partners_data' to be a dict")
        __self__.partners_data = partners_data
        """
        Data regarding 3rd party partner integration
        """
        if resource_details and not isinstance(resource_details, dict):
            raise TypeError("Expected argument 'resource_details' to be a dict")
        __self__.resource_details = resource_details
        """
        Details of the resource that was assessed
        """
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        __self__.status = status
        """
        The result of the assessment
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """


class AwaitableGetAssessmentResult(GetAssessmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAssessmentResult(
            additional_data=self.additional_data,
            display_name=self.display_name,
            links=self.links,
            metadata=self.metadata,
            name=self.name,
            partners_data=self.partners_data,
            resource_details=self.resource_details,
            status=self.status,
            type=self.type)


def get_assessment(name=None, resource_id=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The Assessment Key - Unique key for the assessment type
    :param str resource_id: The identifier of the resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceId'] = resource_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:security/v20200101:getAssessment', __args__, opts=opts).value

    return AwaitableGetAssessmentResult(
        additional_data=__ret__.get('additionalData'),
        display_name=__ret__.get('displayName'),
        links=__ret__.get('links'),
        metadata=__ret__.get('metadata'),
        name=__ret__.get('name'),
        partners_data=__ret__.get('partnersData'),
        resource_details=__ret__.get('resourceDetails'),
        status=__ret__.get('status'),
        type=__ret__.get('type'))
