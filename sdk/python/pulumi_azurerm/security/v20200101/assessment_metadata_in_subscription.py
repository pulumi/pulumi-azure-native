# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class AssessmentMetadataInSubscription(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Describes properties of an assessment metadata.
      * `assessment_type` (`str`) - BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition
      * `category` (`list`)
      * `description` (`str`) - Human readable description of the assessment
      * `display_name` (`str`) - User friendly display name of the assessment
      * `implementation_effort` (`str`) - The implementation effort required to remediate this assessment
      * `partner_data` (`dict`) - Describes the partner that created the assessment
        * `partner_name` (`str`) - Name of the company of the partner
        * `product_name` (`str`) - Name of the product of the partner that created the assessment
        * `secret` (`str`) - Secret to authenticate the partner and verify it created the assessment - write only

      * `policy_definition_id` (`str`) - Azure resource ID of the policy definition that turns this assessment calculation on
      * `preview` (`bool`) - True if this assessment is in preview release status
      * `remediation_description` (`str`) - Human readable description of what you should do to mitigate this security issue
      * `severity` (`str`) - The severity level of the assessment
      * `threats` (`list`)
      * `user_impact` (`str`) - The user impact of the assessment
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, assessment_type=None, category=None, description=None, display_name=None, implementation_effort=None, name=None, partner_data=None, preview=None, remediation_description=None, severity=None, threats=None, user_impact=None, __props__=None, __name__=None, __opts__=None):
        """
        Security assessment metadata

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assessment_type: BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition
        :param pulumi.Input[str] description: Human readable description of the assessment
        :param pulumi.Input[str] display_name: User friendly display name of the assessment
        :param pulumi.Input[str] implementation_effort: The implementation effort required to remediate this assessment
        :param pulumi.Input[str] name: The Assessment Key - Unique key for the assessment type
        :param pulumi.Input[dict] partner_data: Describes the partner that created the assessment
        :param pulumi.Input[bool] preview: True if this assessment is in preview release status
        :param pulumi.Input[str] remediation_description: Human readable description of what you should do to mitigate this security issue
        :param pulumi.Input[str] severity: The severity level of the assessment
        :param pulumi.Input[str] user_impact: The user impact of the assessment

        The **partner_data** object supports the following:

          * `partner_name` (`pulumi.Input[str]`) - Name of the company of the partner
          * `product_name` (`pulumi.Input[str]`) - Name of the product of the partner that created the assessment
          * `secret` (`pulumi.Input[str]`) - Secret to authenticate the partner and verify it created the assessment - write only
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if assessment_type is None:
                raise TypeError("Missing required property 'assessment_type'")
            __props__['assessment_type'] = assessment_type
            __props__['category'] = category
            __props__['description'] = description
            if display_name is None:
                raise TypeError("Missing required property 'display_name'")
            __props__['display_name'] = display_name
            __props__['implementation_effort'] = implementation_effort
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['partner_data'] = partner_data
            __props__['preview'] = preview
            __props__['remediation_description'] = remediation_description
            if severity is None:
                raise TypeError("Missing required property 'severity'")
            __props__['severity'] = severity
            __props__['threats'] = threats
            __props__['user_impact'] = user_impact
            __props__['properties'] = None
            __props__['type'] = None
        super(AssessmentMetadataInSubscription, __self__).__init__(
            'azurerm:security/v20200101:AssessmentMetadataInSubscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing AssessmentMetadataInSubscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return AssessmentMetadataInSubscription(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
