# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetAdaptiveApplicationControlResult:
    def __init__(__self__, configuration_status=None, enforcement_mode=None, issues=None, location=None, name=None, path_recommendations=None, protection_mode=None, recommendation_status=None, source_system=None, type=None, vm_recommendations=None):
        if configuration_status and not isinstance(configuration_status, str):
            raise TypeError("Expected argument 'configuration_status' to be a str")
        __self__.configuration_status = configuration_status
        """
        The configuration status of the machines group or machine or rule
        """
        if enforcement_mode and not isinstance(enforcement_mode, str):
            raise TypeError("Expected argument 'enforcement_mode' to be a str")
        __self__.enforcement_mode = enforcement_mode
        """
        The application control policy enforcement/protection mode of the machine group
        """
        if issues and not isinstance(issues, list):
            raise TypeError("Expected argument 'issues' to be a list")
        __self__.issues = issues
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Location where the resource is stored
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if path_recommendations and not isinstance(path_recommendations, list):
            raise TypeError("Expected argument 'path_recommendations' to be a list")
        __self__.path_recommendations = path_recommendations
        if protection_mode and not isinstance(protection_mode, dict):
            raise TypeError("Expected argument 'protection_mode' to be a dict")
        __self__.protection_mode = protection_mode
        """
        The protection mode of the collection/file types. Exe/Msi/Script are used for Windows, Executable is used for Linux.
        """
        if recommendation_status and not isinstance(recommendation_status, str):
            raise TypeError("Expected argument 'recommendation_status' to be a str")
        __self__.recommendation_status = recommendation_status
        """
        The initial recommendation status of the machine group or machine
        """
        if source_system and not isinstance(source_system, str):
            raise TypeError("Expected argument 'source_system' to be a str")
        __self__.source_system = source_system
        """
        The source type of the machine group
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """
        if vm_recommendations and not isinstance(vm_recommendations, list):
            raise TypeError("Expected argument 'vm_recommendations' to be a list")
        __self__.vm_recommendations = vm_recommendations


class AwaitableGetAdaptiveApplicationControlResult(GetAdaptiveApplicationControlResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAdaptiveApplicationControlResult(
            configuration_status=self.configuration_status,
            enforcement_mode=self.enforcement_mode,
            issues=self.issues,
            location=self.location,
            name=self.name,
            path_recommendations=self.path_recommendations,
            protection_mode=self.protection_mode,
            recommendation_status=self.recommendation_status,
            source_system=self.source_system,
            type=self.type,
            vm_recommendations=self.vm_recommendations)


def get_adaptive_application_control(asc_location=None, name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations
    :param str name: Name of an application control machine group
    """
    __args__ = dict()
    __args__['ascLocation'] = asc_location
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:security/v20200101:getAdaptiveApplicationControl', __args__, opts=opts).value

    return AwaitableGetAdaptiveApplicationControlResult(
        configuration_status=__ret__.get('configurationStatus'),
        enforcement_mode=__ret__.get('enforcementMode'),
        issues=__ret__.get('issues'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        path_recommendations=__ret__.get('pathRecommendations'),
        protection_mode=__ret__.get('protectionMode'),
        recommendation_status=__ret__.get('recommendationStatus'),
        source_system=__ret__.get('sourceSystem'),
        type=__ret__.get('type'),
        vm_recommendations=__ret__.get('vmRecommendations'))
