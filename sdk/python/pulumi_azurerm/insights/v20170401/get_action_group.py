# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetActionGroupResult:
    """
    An action group resource.
    """
    def __init__(__self__, automation_runbook_receivers=None, azure_app_push_receivers=None, email_receivers=None, enabled=None, group_short_name=None, itsm_receivers=None, location=None, name=None, sms_receivers=None, tags=None, type=None, webhook_receivers=None):
        if automation_runbook_receivers and not isinstance(automation_runbook_receivers, list):
            raise TypeError("Expected argument 'automation_runbook_receivers' to be a list")
        __self__.automation_runbook_receivers = automation_runbook_receivers
        """
        The list of AutomationRunbook receivers that are part of this action group.
        """
        if azure_app_push_receivers and not isinstance(azure_app_push_receivers, list):
            raise TypeError("Expected argument 'azure_app_push_receivers' to be a list")
        __self__.azure_app_push_receivers = azure_app_push_receivers
        """
        The list of AzureAppPush receivers that are part of this action group.
        """
        if email_receivers and not isinstance(email_receivers, list):
            raise TypeError("Expected argument 'email_receivers' to be a list")
        __self__.email_receivers = email_receivers
        """
        The list of email receivers that are part of this action group.
        """
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        __self__.enabled = enabled
        """
        Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications.
        """
        if group_short_name and not isinstance(group_short_name, str):
            raise TypeError("Expected argument 'group_short_name' to be a str")
        __self__.group_short_name = group_short_name
        """
        The short name of the action group. This will be used in SMS messages.
        """
        if itsm_receivers and not isinstance(itsm_receivers, list):
            raise TypeError("Expected argument 'itsm_receivers' to be a list")
        __self__.itsm_receivers = itsm_receivers
        """
        The list of ITSM receivers that are part of this action group.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Azure resource name
        """
        if sms_receivers and not isinstance(sms_receivers, list):
            raise TypeError("Expected argument 'sms_receivers' to be a list")
        __self__.sms_receivers = sms_receivers
        """
        The list of SMS receivers that are part of this action group.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Azure resource type
        """
        if webhook_receivers and not isinstance(webhook_receivers, list):
            raise TypeError("Expected argument 'webhook_receivers' to be a list")
        __self__.webhook_receivers = webhook_receivers
        """
        The list of webhook receivers that are part of this action group.
        """


class AwaitableGetActionGroupResult(GetActionGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetActionGroupResult(
            automation_runbook_receivers=self.automation_runbook_receivers,
            azure_app_push_receivers=self.azure_app_push_receivers,
            email_receivers=self.email_receivers,
            enabled=self.enabled,
            group_short_name=self.group_short_name,
            itsm_receivers=self.itsm_receivers,
            location=self.location,
            name=self.name,
            sms_receivers=self.sms_receivers,
            tags=self.tags,
            type=self.type,
            webhook_receivers=self.webhook_receivers)


def get_action_group(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the action group.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:insights/v20170401:getActionGroup', __args__, opts=opts).value

    return AwaitableGetActionGroupResult(
        automation_runbook_receivers=__ret__.get('automationRunbookReceivers'),
        azure_app_push_receivers=__ret__.get('azureAppPushReceivers'),
        email_receivers=__ret__.get('emailReceivers'),
        enabled=__ret__.get('enabled'),
        group_short_name=__ret__.get('groupShortName'),
        itsm_receivers=__ret__.get('itsmReceivers'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        sms_receivers=__ret__.get('smsReceivers'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        webhook_receivers=__ret__.get('webhookReceivers'))
