# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetScheduledQueryRuleResult:
    """
    The Log Search Rule resource.
    """
    def __init__(__self__, action=None, description=None, enabled=None, last_updated_time=None, location=None, name=None, provisioning_state=None, schedule=None, source=None, tags=None, type=None):
        if action and not isinstance(action, dict):
            raise TypeError("Expected argument 'action' to be a dict")
        __self__.action = action
        """
        Action needs to be taken on rule execution.
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        The description of the Log Search rule.
        """
        if enabled and not isinstance(enabled, str):
            raise TypeError("Expected argument 'enabled' to be a str")
        __self__.enabled = enabled
        """
        The flag which indicates whether the Log Search rule is enabled. Value should be true or false
        """
        if last_updated_time and not isinstance(last_updated_time, str):
            raise TypeError("Expected argument 'last_updated_time' to be a str")
        __self__.last_updated_time = last_updated_time
        """
        Last time the rule was updated in IS08601 format.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Azure resource name
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Provisioning state of the scheduled query rule
        """
        if schedule and not isinstance(schedule, dict):
            raise TypeError("Expected argument 'schedule' to be a dict")
        __self__.schedule = schedule
        """
        Schedule (Frequency, Time Window) for rule. Required for action type - AlertingAction
        """
        if source and not isinstance(source, dict):
            raise TypeError("Expected argument 'source' to be a dict")
        __self__.source = source
        """
        Data Source against which rule will Query Data
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Azure resource type
        """


class AwaitableGetScheduledQueryRuleResult(GetScheduledQueryRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScheduledQueryRuleResult(
            action=self.action,
            description=self.description,
            enabled=self.enabled,
            last_updated_time=self.last_updated_time,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            schedule=self.schedule,
            source=self.source,
            tags=self.tags,
            type=self.type)


def get_scheduled_query_rule(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the rule.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:insights/v20180416:getScheduledQueryRule', __args__, opts=opts).value

    return AwaitableGetScheduledQueryRuleResult(
        action=__ret__.get('action'),
        description=__ret__.get('description'),
        enabled=__ret__.get('enabled'),
        last_updated_time=__ret__.get('lastUpdatedTime'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        schedule=__ret__.get('schedule'),
        source=__ret__.get('source'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
