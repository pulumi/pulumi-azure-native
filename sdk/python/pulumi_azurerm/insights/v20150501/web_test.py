# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class WebTest(pulumi.CustomResource):
    kind: pulumi.Output[str]
    """
    The kind of web test that this web test watches. Choices are ping and multistep.
    """
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Azure resource name
    """
    properties: pulumi.Output[dict]
    """
    Metadata describing a web test for an Azure resource.
      * `configuration` (`dict`) - An XML configuration specification for a WebTest.
        * `web_test` (`str`) - The XML specification of a WebTest to run against an application.

      * `description` (`str`) - Purpose/user defined descriptive test for this WebTest.
      * `enabled` (`bool`) - Is the test actively being monitored.
      * `frequency` (`float`) - Interval in seconds between test runs for this WebTest. Default value is 300.
      * `kind` (`str`) - The kind of web test this is, valid choices are ping and multistep.
      * `locations` (`list`) - A list of where to physically run the tests from to give global coverage for accessibility of your application.
        * `id` (`str`) - Location ID for the webtest to run from.

      * `name` (`str`) - User defined name if this WebTest.
      * `retry_enabled` (`bool`) - Allow for retries should this WebTest fail.
      * `synthetic_monitor_id` (`str`) - Unique ID of this WebTest. This is typically the same value as the Name field.
      * `timeout` (`float`) - Seconds until this WebTest will timeout and fail. Default value is 30.
      * `provisioning_state` (`str`) - Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Azure resource type
    """
    def __init__(__self__, resource_name, opts=None, kind=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        An Application Insights web test definition.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] kind: The kind of web test that this web test watches. Choices are ping and multistep.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The name of the Application Insights webtest resource.
        :param pulumi.Input[dict] properties: Metadata describing a web test for an Azure resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[dict] tags: Resource tags

        The **properties** object supports the following:

          * `configuration` (`pulumi.Input[dict]`) - An XML configuration specification for a WebTest.
            * `web_test` (`pulumi.Input[str]`) - The XML specification of a WebTest to run against an application.

          * `description` (`pulumi.Input[str]`) - Purpose/user defined descriptive test for this WebTest.
          * `enabled` (`pulumi.Input[bool]`) - Is the test actively being monitored.
          * `frequency` (`pulumi.Input[float]`) - Interval in seconds between test runs for this WebTest. Default value is 300.
          * `kind` (`pulumi.Input[str]`) - The kind of web test this is, valid choices are ping and multistep.
          * `locations` (`pulumi.Input[list]`) - A list of where to physically run the tests from to give global coverage for accessibility of your application.
            * `id` (`pulumi.Input[str]`) - Location ID for the webtest to run from.

          * `name` (`pulumi.Input[str]`) - User defined name if this WebTest.
          * `retry_enabled` (`pulumi.Input[bool]`) - Allow for retries should this WebTest fail.
          * `synthetic_monitor_id` (`pulumi.Input[str]`) - Unique ID of this WebTest. This is typically the same value as the Name field.
          * `timeout` (`pulumi.Input[float]`) - Seconds until this WebTest will timeout and fail. Default value is 30.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(WebTest, __self__).__init__(
            'azurerm:insights/v20150501:WebTest',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing WebTest resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return WebTest(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
