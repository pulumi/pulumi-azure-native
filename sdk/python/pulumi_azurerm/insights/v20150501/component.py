# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Component(pulumi.CustomResource):
    kind: pulumi.Output[str]
    """
    The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone.
    """
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Azure resource name
    """
    properties: pulumi.Output[dict]
    """
    Properties that define an Application Insights component resource.
      * `app_id` (`str`) - Application Insights Unique ID for your Application.
      * `application_id` (`str`) - The unique ID of your application. This field mirrors the 'Name' field and cannot be changed.
      * `application__type` (`str`) - Type of application being monitored.
      * `connection_string` (`str`) - Application Insights component connection string.
      * `creation_date` (`str`) - Creation Date for the Application Insights component, in ISO 8601 format.
      * `disable_ip_masking` (`bool`) - Disable IP masking.
      * `flow__type` (`str`) - Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
      * `hockey_app_id` (`str`) - The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.
      * `hockey_app_token` (`str`) - Token used to authenticate communications with between Application Insights and HockeyApp.
      * `immediate_purge_data_on30_days` (`bool`) - Purge data immediately after 30 days.
      * `ingestion_mode` (`str`) - Indicates the flow of the ingestion.
      * `instrumentation_key` (`str`) - Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component.
      * `private_link_scoped_resources` (`list`) - List of linked private link scope resources.
        * `resource_id` (`str`) - The full resource Id of the private link scope resource.
        * `scope_id` (`str`) - The private link scope unique Identifier.

      * `request__source` (`str`) - Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
      * `retention_in_days` (`float`) - Retention period in days.
      * `sampling_percentage` (`float`) - Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.
      * `tenant_id` (`str`) - Azure Tenant Id.
      * `provisioning_state` (`str`) - Current state of this component: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Azure resource type
    """
    def __init__(__self__, resource_name, opts=None, kind=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        An Application Insights component definition.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] kind: The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The name of the Application Insights component resource.
        :param pulumi.Input[dict] properties: Properties that define an Application Insights component resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[dict] tags: Resource tags

        The **properties** object supports the following:

          * `application__type` (`pulumi.Input[str]`) - Type of application being monitored.
          * `disable_ip_masking` (`pulumi.Input[bool]`) - Disable IP masking.
          * `flow__type` (`pulumi.Input[str]`) - Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
          * `hockey_app_id` (`pulumi.Input[str]`) - The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.
          * `immediate_purge_data_on30_days` (`pulumi.Input[bool]`) - Purge data immediately after 30 days.
          * `ingestion_mode` (`pulumi.Input[str]`) - Indicates the flow of the ingestion.
          * `request__source` (`pulumi.Input[str]`) - Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
          * `retention_in_days` (`pulumi.Input[float]`) - Retention period in days.
          * `sampling_percentage` (`pulumi.Input[float]`) - Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if kind is None:
                raise TypeError("Missing required property 'kind'")
            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(Component, __self__).__init__(
            'azurerm:insights/v20150501:Component',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Component resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Component(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
