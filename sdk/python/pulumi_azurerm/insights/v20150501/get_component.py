# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetComponentResult:
    """
    An Application Insights component definition.
    """
    def __init__(__self__, app_id=None, application_id=None, application_type=None, connection_string=None, creation_date=None, disable_ip_masking=None, flow_type=None, hockey_app_id=None, hockey_app_token=None, immediate_purge_data_on30_days=None, ingestion_mode=None, instrumentation_key=None, kind=None, location=None, name=None, private_link_scoped_resources=None, provisioning_state=None, request_source=None, retention_in_days=None, sampling_percentage=None, tags=None, tenant_id=None, type=None):
        if app_id and not isinstance(app_id, str):
            raise TypeError("Expected argument 'app_id' to be a str")
        __self__.app_id = app_id
        """
        Application Insights Unique ID for your Application.
        """
        if application_id and not isinstance(application_id, str):
            raise TypeError("Expected argument 'application_id' to be a str")
        __self__.application_id = application_id
        """
        The unique ID of your application. This field mirrors the 'Name' field and cannot be changed.
        """
        if application_type and not isinstance(application_type, str):
            raise TypeError("Expected argument 'application_type' to be a str")
        __self__.application_type = application_type
        """
        Type of application being monitored.
        """
        if connection_string and not isinstance(connection_string, str):
            raise TypeError("Expected argument 'connection_string' to be a str")
        __self__.connection_string = connection_string
        """
        Application Insights component connection string.
        """
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        __self__.creation_date = creation_date
        """
        Creation Date for the Application Insights component, in ISO 8601 format.
        """
        if disable_ip_masking and not isinstance(disable_ip_masking, bool):
            raise TypeError("Expected argument 'disable_ip_masking' to be a bool")
        __self__.disable_ip_masking = disable_ip_masking
        """
        Disable IP masking.
        """
        if flow_type and not isinstance(flow_type, str):
            raise TypeError("Expected argument 'flow_type' to be a str")
        __self__.flow_type = flow_type
        """
        Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
        """
        if hockey_app_id and not isinstance(hockey_app_id, str):
            raise TypeError("Expected argument 'hockey_app_id' to be a str")
        __self__.hockey_app_id = hockey_app_id
        """
        The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.
        """
        if hockey_app_token and not isinstance(hockey_app_token, str):
            raise TypeError("Expected argument 'hockey_app_token' to be a str")
        __self__.hockey_app_token = hockey_app_token
        """
        Token used to authenticate communications with between Application Insights and HockeyApp.
        """
        if immediate_purge_data_on30_days and not isinstance(immediate_purge_data_on30_days, bool):
            raise TypeError("Expected argument 'immediate_purge_data_on30_days' to be a bool")
        __self__.immediate_purge_data_on30_days = immediate_purge_data_on30_days
        """
        Purge data immediately after 30 days.
        """
        if ingestion_mode and not isinstance(ingestion_mode, str):
            raise TypeError("Expected argument 'ingestion_mode' to be a str")
        __self__.ingestion_mode = ingestion_mode
        """
        Indicates the flow of the ingestion.
        """
        if instrumentation_key and not isinstance(instrumentation_key, str):
            raise TypeError("Expected argument 'instrumentation_key' to be a str")
        __self__.instrumentation_key = instrumentation_key
        """
        Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component.
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Azure resource name
        """
        if private_link_scoped_resources and not isinstance(private_link_scoped_resources, list):
            raise TypeError("Expected argument 'private_link_scoped_resources' to be a list")
        __self__.private_link_scoped_resources = private_link_scoped_resources
        """
        List of linked private link scope resources.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Current state of this component: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
        """
        if request_source and not isinstance(request_source, str):
            raise TypeError("Expected argument 'request_source' to be a str")
        __self__.request_source = request_source
        """
        Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
        """
        if retention_in_days and not isinstance(retention_in_days, float):
            raise TypeError("Expected argument 'retention_in_days' to be a float")
        __self__.retention_in_days = retention_in_days
        """
        Retention period in days.
        """
        if sampling_percentage and not isinstance(sampling_percentage, float):
            raise TypeError("Expected argument 'sampling_percentage' to be a float")
        __self__.sampling_percentage = sampling_percentage
        """
        Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        __self__.tenant_id = tenant_id
        """
        Azure Tenant Id.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Azure resource type
        """


class AwaitableGetComponentResult(GetComponentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComponentResult(
            app_id=self.app_id,
            application_id=self.application_id,
            application_type=self.application_type,
            connection_string=self.connection_string,
            creation_date=self.creation_date,
            disable_ip_masking=self.disable_ip_masking,
            flow_type=self.flow_type,
            hockey_app_id=self.hockey_app_id,
            hockey_app_token=self.hockey_app_token,
            immediate_purge_data_on30_days=self.immediate_purge_data_on30_days,
            ingestion_mode=self.ingestion_mode,
            instrumentation_key=self.instrumentation_key,
            kind=self.kind,
            location=self.location,
            name=self.name,
            private_link_scoped_resources=self.private_link_scoped_resources,
            provisioning_state=self.provisioning_state,
            request_source=self.request_source,
            retention_in_days=self.retention_in_days,
            sampling_percentage=self.sampling_percentage,
            tags=self.tags,
            tenant_id=self.tenant_id,
            type=self.type)


def get_component(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the Application Insights component resource.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:insights/v20150501:getComponent', __args__, opts=opts).value

    return AwaitableGetComponentResult(
        app_id=__ret__.get('appId'),
        application_id=__ret__.get('applicationId'),
        application_type=__ret__.get('applicationType'),
        connection_string=__ret__.get('connectionString'),
        creation_date=__ret__.get('creationDate'),
        disable_ip_masking=__ret__.get('disableIpMasking'),
        flow_type=__ret__.get('flowType'),
        hockey_app_id=__ret__.get('hockeyAppId'),
        hockey_app_token=__ret__.get('hockeyAppToken'),
        immediate_purge_data_on30_days=__ret__.get('immediatePurgeDataOn30Days'),
        ingestion_mode=__ret__.get('ingestionMode'),
        instrumentation_key=__ret__.get('instrumentationKey'),
        kind=__ret__.get('kind'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        private_link_scoped_resources=__ret__.get('privateLinkScopedResources'),
        provisioning_state=__ret__.get('provisioningState'),
        request_source=__ret__.get('requestSource'),
        retention_in_days=__ret__.get('retentionInDays'),
        sampling_percentage=__ret__.get('samplingPercentage'),
        tags=__ret__.get('tags'),
        tenant_id=__ret__.get('tenantId'),
        type=__ret__.get('type'))
