# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetFavoriteResult:
    """
    Properties that define a favorite that is associated to an Application Insights component.
    """
    def __init__(__self__, category=None, config=None, favorite_id=None, favorite_type=None, is_generated_from_template=None, name=None, source_type=None, tags=None, time_modified=None, user_id=None, version=None):
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        __self__.category = category
        """
        Favorite category, as defined by the user at creation time.
        """
        if config and not isinstance(config, str):
            raise TypeError("Expected argument 'config' to be a str")
        __self__.config = config
        """
        Configuration of this particular favorite, which are driven by the Azure portal UX. Configuration data is a string containing valid JSON
        """
        if favorite_id and not isinstance(favorite_id, str):
            raise TypeError("Expected argument 'favorite_id' to be a str")
        __self__.favorite_id = favorite_id
        """
        Internally assigned unique id of the favorite definition.
        """
        if favorite_type and not isinstance(favorite_type, str):
            raise TypeError("Expected argument 'favorite_type' to be a str")
        __self__.favorite_type = favorite_type
        """
        Enum indicating if this favorite definition is owned by a specific user or is shared between all users with access to the Application Insights component.
        """
        if is_generated_from_template and not isinstance(is_generated_from_template, bool):
            raise TypeError("Expected argument 'is_generated_from_template' to be a bool")
        __self__.is_generated_from_template = is_generated_from_template
        """
        Flag denoting wether or not this favorite was generated from a template.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The user-defined name of the favorite.
        """
        if source_type and not isinstance(source_type, str):
            raise TypeError("Expected argument 'source_type' to be a str")
        __self__.source_type = source_type
        """
        The source of the favorite definition.
        """
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        __self__.tags = tags
        """
        A list of 0 or more tags that are associated with this favorite definition
        """
        if time_modified and not isinstance(time_modified, str):
            raise TypeError("Expected argument 'time_modified' to be a str")
        __self__.time_modified = time_modified
        """
        Date and time in UTC of the last modification that was made to this favorite definition.
        """
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        __self__.user_id = user_id
        """
        Unique user id of the specific user that owns this favorite.
        """
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        __self__.version = version
        """
        This instance's version of the data model. This can change as new features are added that can be marked favorite. Current examples include MetricsExplorer (ME) and Search.
        """


class AwaitableGetFavoriteResult(GetFavoriteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFavoriteResult(
            category=self.category,
            config=self.config,
            favorite_id=self.favorite_id,
            favorite_type=self.favorite_type,
            is_generated_from_template=self.is_generated_from_template,
            name=self.name,
            source_type=self.source_type,
            tags=self.tags,
            time_modified=self.time_modified,
            user_id=self.user_id,
            version=self.version)


def get_favorite(name=None, resource_group_name=None, resource_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The Id of a specific favorite defined in the Application Insights component
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str resource_name: The name of the Application Insights component resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['resourceName'] = resource_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:insights/v20150501:getFavorite', __args__, opts=opts).value

    return AwaitableGetFavoriteResult(
        category=__ret__.get('category'),
        config=__ret__.get('config'),
        favorite_id=__ret__.get('favoriteId'),
        favorite_type=__ret__.get('favoriteType'),
        is_generated_from_template=__ret__.get('isGeneratedFromTemplate'),
        name=__ret__.get('name'),
        source_type=__ret__.get('sourceType'),
        tags=__ret__.get('tags'),
        time_modified=__ret__.get('timeModified'),
        user_id=__ret__.get('userId'),
        version=__ret__.get('version'))
