# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetWebTestResult:
    """
    An Application Insights web test definition.
    """
    def __init__(__self__, configuration=None, description=None, enabled=None, frequency=None, kind=None, location=None, locations=None, name=None, provisioning_state=None, retry_enabled=None, synthetic_monitor_id=None, tags=None, timeout=None, type=None, web_test_kind=None, web_test_name=None):
        if configuration and not isinstance(configuration, dict):
            raise TypeError("Expected argument 'configuration' to be a dict")
        __self__.configuration = configuration
        """
        An XML configuration specification for a WebTest.
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        Purpose/user defined descriptive test for this WebTest.
        """
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        __self__.enabled = enabled
        """
        Is the test actively being monitored.
        """
        if frequency and not isinstance(frequency, float):
            raise TypeError("Expected argument 'frequency' to be a float")
        __self__.frequency = frequency
        """
        Interval in seconds between test runs for this WebTest. Default value is 300.
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        The kind of web test that this web test watches. Choices are ping and multistep.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        __self__.locations = locations
        """
        A list of where to physically run the tests from to give global coverage for accessibility of your application.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Azure resource name
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
        """
        if retry_enabled and not isinstance(retry_enabled, bool):
            raise TypeError("Expected argument 'retry_enabled' to be a bool")
        __self__.retry_enabled = retry_enabled
        """
        Allow for retries should this WebTest fail.
        """
        if synthetic_monitor_id and not isinstance(synthetic_monitor_id, str):
            raise TypeError("Expected argument 'synthetic_monitor_id' to be a str")
        __self__.synthetic_monitor_id = synthetic_monitor_id
        """
        Unique ID of this WebTest. This is typically the same value as the Name field.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if timeout and not isinstance(timeout, float):
            raise TypeError("Expected argument 'timeout' to be a float")
        __self__.timeout = timeout
        """
        Seconds until this WebTest will timeout and fail. Default value is 30.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Azure resource type
        """
        if web_test_kind and not isinstance(web_test_kind, str):
            raise TypeError("Expected argument 'web_test_kind' to be a str")
        __self__.web_test_kind = web_test_kind
        """
        The kind of web test this is, valid choices are ping and multistep.
        """
        if web_test_name and not isinstance(web_test_name, str):
            raise TypeError("Expected argument 'web_test_name' to be a str")
        __self__.web_test_name = web_test_name
        """
        User defined name if this WebTest.
        """


class AwaitableGetWebTestResult(GetWebTestResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebTestResult(
            configuration=self.configuration,
            description=self.description,
            enabled=self.enabled,
            frequency=self.frequency,
            kind=self.kind,
            location=self.location,
            locations=self.locations,
            name=self.name,
            provisioning_state=self.provisioning_state,
            retry_enabled=self.retry_enabled,
            synthetic_monitor_id=self.synthetic_monitor_id,
            tags=self.tags,
            timeout=self.timeout,
            type=self.type,
            web_test_kind=self.web_test_kind,
            web_test_name=self.web_test_name)


def get_web_test(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the Application Insights webtest resource.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:insights/v20150501:getWebTest', __args__, opts=opts).value

    return AwaitableGetWebTestResult(
        configuration=__ret__.get('configuration'),
        description=__ret__.get('description'),
        enabled=__ret__.get('enabled'),
        frequency=__ret__.get('frequency'),
        kind=__ret__.get('kind'),
        location=__ret__.get('location'),
        locations=__ret__.get('locations'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        retry_enabled=__ret__.get('retryEnabled'),
        synthetic_monitor_id=__ret__.get('syntheticMonitorId'),
        tags=__ret__.get('tags'),
        timeout=__ret__.get('timeout'),
        type=__ret__.get('type'),
        web_test_kind=__ret__.get('webTestKind'),
        web_test_name=__ret__.get('webTestName'))
