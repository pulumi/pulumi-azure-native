# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Workbook(pulumi.CustomResource):
    kind: pulumi.Output[str]
    """
    The kind of workbook. Choices are user and shared.
    """
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Azure resource name
    """
    properties: pulumi.Output[dict]
    """
    Metadata describing a web test for an Azure resource.
      * `category` (`str`) - Workbook category, as defined by the user at creation time.
      * `kind` (`str`) - Enum indicating if this workbook definition is owned by a specific user or is shared between all users with access to the Application Insights component.
      * `name` (`str`) - The user-defined name of the workbook.
      * `serialized_data` (`str`) - Configuration of this particular workbook. Configuration data is a string containing valid JSON
      * `source_resource_id` (`str`) - Optional resourceId for a source resource.
      * `tags` (`list`) - A list of 0 or more tags that are associated with this workbook definition
      * `time_modified` (`str`) - Date and time in UTC of the last modification that was made to this workbook definition.
      * `user_id` (`str`) - Unique user id of the specific user that owns this workbook.
      * `version` (`str`) - This instance's version of the data model. This can change as new features are added that can be marked workbook.
      * `workbook_id` (`str`) - Internally assigned unique id of the workbook definition.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Azure resource type
    """
    def __init__(__self__, resource_name, opts=None, kind=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        An Application Insights workbook definition.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] kind: The kind of workbook. Choices are user and shared.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The name of the Application Insights component resource.
        :param pulumi.Input[dict] properties: Metadata describing a web test for an Azure resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[dict] tags: Resource tags

        The **properties** object supports the following:

          * `category` (`pulumi.Input[str]`) - Workbook category, as defined by the user at creation time.
          * `name` (`pulumi.Input[str]`) - The user-defined name of the workbook.
          * `serialized_data` (`pulumi.Input[str]`) - Configuration of this particular workbook. Configuration data is a string containing valid JSON
          * `shared_type_kind` (`pulumi.Input[str]`) - Enum indicating if this workbook definition is owned by a specific user or is shared between all users with access to the Application Insights component.
          * `source_resource_id` (`pulumi.Input[str]`) - Optional resourceId for a source resource.
          * `tags` (`pulumi.Input[list]`) - A list of 0 or more tags that are associated with this workbook definition
          * `user_id` (`pulumi.Input[str]`) - Unique user id of the specific user that owns this workbook.
          * `version` (`pulumi.Input[str]`) - This instance's version of the data model. This can change as new features are added that can be marked workbook.
          * `workbook_id` (`pulumi.Input[str]`) - Internally assigned unique id of the workbook definition.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['kind'] = kind
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(Workbook, __self__).__init__(
            'azurerm:insights/v20150501:Workbook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Workbook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Workbook(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
