# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetLogProfileResult:
    """
    The log profile resource.
    """
    def __init__(__self__, categories=None, location=None, locations=None, name=None, retention_policy=None, service_bus_rule_id=None, storage_account_id=None, tags=None, type=None):
        if categories and not isinstance(categories, list):
            raise TypeError("Expected argument 'categories' to be a list")
        __self__.categories = categories
        """
        the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        __self__.locations = locations
        """
        List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Azure resource name
        """
        if retention_policy and not isinstance(retention_policy, dict):
            raise TypeError("Expected argument 'retention_policy' to be a dict")
        __self__.retention_policy = retention_policy
        """
        the retention policy for the events in the log.
        """
        if service_bus_rule_id and not isinstance(service_bus_rule_id, str):
            raise TypeError("Expected argument 'service_bus_rule_id' to be a str")
        __self__.service_bus_rule_id = service_bus_rule_id
        """
        The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
        """
        if storage_account_id and not isinstance(storage_account_id, str):
            raise TypeError("Expected argument 'storage_account_id' to be a str")
        __self__.storage_account_id = storage_account_id
        """
        the resource id of the storage account to which you would like to send the Activity Log.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Azure resource type
        """


class AwaitableGetLogProfileResult(GetLogProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogProfileResult(
            categories=self.categories,
            location=self.location,
            locations=self.locations,
            name=self.name,
            retention_policy=self.retention_policy,
            service_bus_rule_id=self.service_bus_rule_id,
            storage_account_id=self.storage_account_id,
            tags=self.tags,
            type=self.type)


def get_log_profile(name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the log profile.
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:insights/v20160301:getLogProfile', __args__, opts=opts).value

    return AwaitableGetLogProfileResult(
        categories=__ret__.get('categories'),
        location=__ret__.get('location'),
        locations=__ret__.get('locations'),
        name=__ret__.get('name'),
        retention_policy=__ret__.get('retentionPolicy'),
        service_bus_rule_id=__ret__.get('serviceBusRuleId'),
        storage_account_id=__ret__.get('storageAccountId'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
