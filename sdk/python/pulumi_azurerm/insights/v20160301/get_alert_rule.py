# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetAlertRuleResult:
    """
    The alert rule resource.
    """
    def __init__(__self__, actions=None, condition=None, description=None, is_enabled=None, last_updated_time=None, location=None, name=None, tags=None, type=None):
        if actions and not isinstance(actions, list):
            raise TypeError("Expected argument 'actions' to be a list")
        __self__.actions = actions
        """
        the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
        """
        if condition and not isinstance(condition, dict):
            raise TypeError("Expected argument 'condition' to be a dict")
        __self__.condition = condition
        """
        the condition that results in the alert rule being activated.
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        the description of the alert rule that will be included in the alert email.
        """
        if is_enabled and not isinstance(is_enabled, bool):
            raise TypeError("Expected argument 'is_enabled' to be a bool")
        __self__.is_enabled = is_enabled
        """
        the flag that indicates whether the alert rule is enabled.
        """
        if last_updated_time and not isinstance(last_updated_time, str):
            raise TypeError("Expected argument 'last_updated_time' to be a str")
        __self__.last_updated_time = last_updated_time
        """
        Last time the rule was updated in ISO8601 format.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Azure resource name
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Azure resource type
        """


class AwaitableGetAlertRuleResult(GetAlertRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlertRuleResult(
            actions=self.actions,
            condition=self.condition,
            description=self.description,
            is_enabled=self.is_enabled,
            last_updated_time=self.last_updated_time,
            location=self.location,
            name=self.name,
            tags=self.tags,
            type=self.type)


def get_alert_rule(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the rule.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:insights/v20160301:getAlertRule', __args__, opts=opts).value

    return AwaitableGetAlertRuleResult(
        actions=__ret__.get('actions'),
        condition=__ret__.get('condition'),
        description=__ret__.get('description'),
        is_enabled=__ret__.get('isEnabled'),
        last_updated_time=__ret__.get('lastUpdatedTime'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
