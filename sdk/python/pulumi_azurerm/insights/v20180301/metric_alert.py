# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class MetricAlert(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Azure resource name
    """
    properties: pulumi.Output[dict]
    """
    The alert rule properties of the resource.
      * `actions` (`list`) - the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
        * `action_group_id` (`str`) - the id of the action group to use.
        * `web_hook_properties` (`dict`) - The properties of a webhook object.

      * `auto_mitigate` (`bool`) - the flag that indicates whether the alert should be auto resolved or not. The default is true.
      * `description` (`str`) - the description of the metric alert that will be included in the alert email.
      * `enabled` (`bool`) - the flag that indicates whether the metric alert is enabled.
      * `evaluation_frequency` (`str`) - how often the metric alert is evaluated represented in ISO 8601 duration format.
      * `last_updated_time` (`str`) - Last time the rule was updated in ISO8601 format.
      * `scopes` (`list`) - the list of resource id's that this metric alert is scoped to.
      * `severity` (`float`) - Alert severity {0, 1, 2, 3, 4}
      * `target_resource_region` (`str`) - the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
      * `target_resource_type` (`str`) - the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
      * `window_size` (`str`) - the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Azure resource type
    """
    def __init__(__self__, resource_name, opts=None, actions=None, auto_mitigate=None, description=None, enabled=None, evaluation_frequency=None, location=None, name=None, resource_group_name=None, scopes=None, severity=None, tags=None, target_resource_region=None, target_resource_type=None, window_size=None, __props__=None, __name__=None, __opts__=None):
        """
        The metric alert resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] actions: the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
        :param pulumi.Input[bool] auto_mitigate: the flag that indicates whether the alert should be auto resolved or not. The default is true.
        :param pulumi.Input[str] description: the description of the metric alert that will be included in the alert email.
        :param pulumi.Input[bool] enabled: the flag that indicates whether the metric alert is enabled.
        :param pulumi.Input[str] evaluation_frequency: how often the metric alert is evaluated represented in ISO 8601 duration format.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The name of the rule.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[list] scopes: the list of resource id's that this metric alert is scoped to.
        :param pulumi.Input[float] severity: Alert severity {0, 1, 2, 3, 4}
        :param pulumi.Input[dict] tags: Resource tags
        :param pulumi.Input[str] target_resource_region: the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
        :param pulumi.Input[str] target_resource_type: the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
        :param pulumi.Input[str] window_size: the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.

        The **actions** object supports the following:

          * `action_group_id` (`pulumi.Input[str]`) - the id of the action group to use.
          * `web_hook_properties` (`pulumi.Input[dict]`) - The properties of a webhook object.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['actions'] = actions
            __props__['auto_mitigate'] = auto_mitigate
            if description is None:
                raise TypeError("Missing required property 'description'")
            __props__['description'] = description
            if enabled is None:
                raise TypeError("Missing required property 'enabled'")
            __props__['enabled'] = enabled
            if evaluation_frequency is None:
                raise TypeError("Missing required property 'evaluation_frequency'")
            __props__['evaluation_frequency'] = evaluation_frequency
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['scopes'] = scopes
            if severity is None:
                raise TypeError("Missing required property 'severity'")
            __props__['severity'] = severity
            __props__['tags'] = tags
            __props__['target_resource_region'] = target_resource_region
            __props__['target_resource_type'] = target_resource_type
            if window_size is None:
                raise TypeError("Missing required property 'window_size'")
            __props__['window_size'] = window_size
            __props__['properties'] = None
            __props__['type'] = None
        super(MetricAlert, __self__).__init__(
            'azurerm:insights/v20180301:MetricAlert',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing MetricAlert resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return MetricAlert(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
