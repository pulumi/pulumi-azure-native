# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetSubscriptionResult:
    """
    Description of subscription resource.
    """
    def __init__(__self__, accessed_at=None, auto_delete_on_idle=None, count_details=None, created_at=None, dead_lettering_on_filter_evaluation_exceptions=None, dead_lettering_on_message_expiration=None, default_message_time_to_live=None, enable_batched_operations=None, entity_availability_status=None, is_read_only=None, location=None, lock_duration=None, max_delivery_count=None, message_count=None, name=None, requires_session=None, status=None, type=None, updated_at=None):
        if accessed_at and not isinstance(accessed_at, str):
            raise TypeError("Expected argument 'accessed_at' to be a str")
        __self__.accessed_at = accessed_at
        """
        Last time there was a receive request to this subscription.
        """
        if auto_delete_on_idle and not isinstance(auto_delete_on_idle, str):
            raise TypeError("Expected argument 'auto_delete_on_idle' to be a str")
        __self__.auto_delete_on_idle = auto_delete_on_idle
        """
        TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
        """
        if count_details and not isinstance(count_details, dict):
            raise TypeError("Expected argument 'count_details' to be a dict")
        __self__.count_details = count_details
        """
        Message Count Details.
        """
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        __self__.created_at = created_at
        """
        Exact time the message was created.
        """
        if dead_lettering_on_filter_evaluation_exceptions and not isinstance(dead_lettering_on_filter_evaluation_exceptions, bool):
            raise TypeError("Expected argument 'dead_lettering_on_filter_evaluation_exceptions' to be a bool")
        __self__.dead_lettering_on_filter_evaluation_exceptions = dead_lettering_on_filter_evaluation_exceptions
        """
        Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
        """
        if dead_lettering_on_message_expiration and not isinstance(dead_lettering_on_message_expiration, bool):
            raise TypeError("Expected argument 'dead_lettering_on_message_expiration' to be a bool")
        __self__.dead_lettering_on_message_expiration = dead_lettering_on_message_expiration
        """
        Value that indicates whether a subscription has dead letter support when a message expires.
        """
        if default_message_time_to_live and not isinstance(default_message_time_to_live, str):
            raise TypeError("Expected argument 'default_message_time_to_live' to be a str")
        __self__.default_message_time_to_live = default_message_time_to_live
        """
        Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
        """
        if enable_batched_operations and not isinstance(enable_batched_operations, bool):
            raise TypeError("Expected argument 'enable_batched_operations' to be a bool")
        __self__.enable_batched_operations = enable_batched_operations
        """
        Value that indicates whether server-side batched operations are enabled.
        """
        if entity_availability_status and not isinstance(entity_availability_status, str):
            raise TypeError("Expected argument 'entity_availability_status' to be a str")
        __self__.entity_availability_status = entity_availability_status
        """
        Entity availability status for the topic.
        """
        if is_read_only and not isinstance(is_read_only, bool):
            raise TypeError("Expected argument 'is_read_only' to be a bool")
        __self__.is_read_only = is_read_only
        """
        Value that indicates whether the entity description is read-only.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if lock_duration and not isinstance(lock_duration, str):
            raise TypeError("Expected argument 'lock_duration' to be a str")
        __self__.lock_duration = lock_duration
        """
        The lock duration time span for the subscription.
        """
        if max_delivery_count and not isinstance(max_delivery_count, float):
            raise TypeError("Expected argument 'max_delivery_count' to be a float")
        __self__.max_delivery_count = max_delivery_count
        """
        Number of maximum deliveries.
        """
        if message_count and not isinstance(message_count, float):
            raise TypeError("Expected argument 'message_count' to be a float")
        __self__.message_count = message_count
        """
        Number of messages.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if requires_session and not isinstance(requires_session, bool):
            raise TypeError("Expected argument 'requires_session' to be a bool")
        __self__.requires_session = requires_session
        """
        Value indicating if a subscription supports the concept of sessions.
        """
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        """
        Enumerates the possible values for the status of a messaging entity.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        __self__.updated_at = updated_at
        """
        The exact time the message was updated.
        """


class AwaitableGetSubscriptionResult(GetSubscriptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubscriptionResult(
            accessed_at=self.accessed_at,
            auto_delete_on_idle=self.auto_delete_on_idle,
            count_details=self.count_details,
            created_at=self.created_at,
            dead_lettering_on_filter_evaluation_exceptions=self.dead_lettering_on_filter_evaluation_exceptions,
            dead_lettering_on_message_expiration=self.dead_lettering_on_message_expiration,
            default_message_time_to_live=self.default_message_time_to_live,
            enable_batched_operations=self.enable_batched_operations,
            entity_availability_status=self.entity_availability_status,
            is_read_only=self.is_read_only,
            location=self.location,
            lock_duration=self.lock_duration,
            max_delivery_count=self.max_delivery_count,
            message_count=self.message_count,
            name=self.name,
            requires_session=self.requires_session,
            status=self.status,
            type=self.type,
            updated_at=self.updated_at)


def get_subscription(name=None, namespace_name=None, resource_group_name=None, topic_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The subscription name.
    :param str namespace_name: The namespace name
    :param str resource_group_name: Name of the Resource group within the Azure subscription.
    :param str topic_name: The topic name.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['namespaceName'] = namespace_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['topicName'] = topic_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:servicebus/v20140901:getSubscription', __args__, opts=opts).value

    return AwaitableGetSubscriptionResult(
        accessed_at=__ret__.get('accessedAt'),
        auto_delete_on_idle=__ret__.get('autoDeleteOnIdle'),
        count_details=__ret__.get('countDetails'),
        created_at=__ret__.get('createdAt'),
        dead_lettering_on_filter_evaluation_exceptions=__ret__.get('deadLetteringOnFilterEvaluationExceptions'),
        dead_lettering_on_message_expiration=__ret__.get('deadLetteringOnMessageExpiration'),
        default_message_time_to_live=__ret__.get('defaultMessageTimeToLive'),
        enable_batched_operations=__ret__.get('enableBatchedOperations'),
        entity_availability_status=__ret__.get('entityAvailabilityStatus'),
        is_read_only=__ret__.get('isReadOnly'),
        location=__ret__.get('location'),
        lock_duration=__ret__.get('lockDuration'),
        max_delivery_count=__ret__.get('maxDeliveryCount'),
        message_count=__ret__.get('messageCount'),
        name=__ret__.get('name'),
        requires_session=__ret__.get('requiresSession'),
        status=__ret__.get('status'),
        type=__ret__.get('type'),
        updated_at=__ret__.get('updatedAt'))
