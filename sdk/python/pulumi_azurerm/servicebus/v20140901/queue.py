# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Queue(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    The Queue Properties definition.
      * `accessed_at` (`str`) - Last time a message was sent, or the last time there was a receive request to this queue.
      * `auto_delete_on_idle` (`str`) - the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
      * `count_details` (`dict`) - Message Count Details.
        * `active_message_count` (`float`) - Number of active messages in the queue, topic, or subscription.
        * `dead_letter_message_count` (`float`) - Number of messages that are dead lettered.
        * `scheduled_message_count` (`float`) - Number of scheduled messages.
        * `transfer_dead_letter_message_count` (`float`) - Number of messages transferred into dead letters.
        * `transfer_message_count` (`float`) - Number of messages transferred to another queue, topic, or subscription.

      * `created_at` (`str`) - The exact time the message was created.
      * `dead_lettering_on_message_expiration` (`bool`) - A value that indicates whether this queue has dead letter support when a message expires.
      * `default_message_time_to_live` (`str`) - The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
      * `duplicate_detection_history_time_window` (`str`) - TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
      * `enable_batched_operations` (`bool`) - A value that indicates whether server-side batched operations are enabled.
      * `enable_express` (`bool`) - A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
      * `enable_partitioning` (`bool`) - A value that indicates whether the queue is to be partitioned across multiple message brokers.
      * `entity_availability_status` (`str`) - Entity availability status for the queue.
      * `is_anonymous_accessible` (`bool`) - A value that indicates whether the message is accessible anonymously.
      * `lock_duration` (`str`) - The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
      * `max_delivery_count` (`float`) - The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
      * `max_size_in_megabytes` (`float`) - The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
      * `message_count` (`float`) - The number of messages in the queue.
      * `requires_duplicate_detection` (`bool`) - A value indicating if this queue requires duplicate detection.
      * `requires_session` (`bool`) - A value that indicates whether the queue supports the concept of sessions.
      * `size_in_bytes` (`float`) - The size of the queue, in bytes.
      * `status` (`str`) - Enumerates the possible values for the status of a messaging entity.
      * `support_ordering` (`bool`) - A value that indicates whether the queue supports ordering.
      * `updated_at` (`str`) - The exact time the message was updated.
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, location=None, name=None, namespace_name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Description of queue Resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: location of the resource.
        :param pulumi.Input[str] name: The queue name.
        :param pulumi.Input[str] namespace_name: The namespace name
        :param pulumi.Input[dict] properties: The Queue Properties definition.
        :param pulumi.Input[str] resource_group_name: Name of the Resource group within the Azure subscription.

        The **properties** object supports the following:

          * `auto_delete_on_idle` (`pulumi.Input[str]`) - the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
          * `dead_lettering_on_message_expiration` (`pulumi.Input[bool]`) - A value that indicates whether this queue has dead letter support when a message expires.
          * `default_message_time_to_live` (`pulumi.Input[str]`) - The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
          * `duplicate_detection_history_time_window` (`pulumi.Input[str]`) - TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
          * `enable_batched_operations` (`pulumi.Input[bool]`) - A value that indicates whether server-side batched operations are enabled.
          * `enable_express` (`pulumi.Input[bool]`) - A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
          * `enable_partitioning` (`pulumi.Input[bool]`) - A value that indicates whether the queue is to be partitioned across multiple message brokers.
          * `entity_availability_status` (`pulumi.Input[str]`) - Entity availability status for the queue.
          * `is_anonymous_accessible` (`pulumi.Input[bool]`) - A value that indicates whether the message is accessible anonymously.
          * `lock_duration` (`pulumi.Input[str]`) - The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
          * `max_delivery_count` (`pulumi.Input[float]`) - The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
          * `max_size_in_megabytes` (`pulumi.Input[float]`) - The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
          * `requires_duplicate_detection` (`pulumi.Input[bool]`) - A value indicating if this queue requires duplicate detection.
          * `requires_session` (`pulumi.Input[bool]`) - A value that indicates whether the queue supports the concept of sessions.
          * `status` (`pulumi.Input[str]`) - Enumerates the possible values for the status of a messaging entity.
          * `support_ordering` (`pulumi.Input[bool]`) - A value that indicates whether the queue supports ordering.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if namespace_name is None:
                raise TypeError("Missing required property 'namespace_name'")
            __props__['namespace_name'] = namespace_name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['type'] = None
        super(Queue, __self__).__init__(
            'azurerm:servicebus/v20140901:Queue',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Queue resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Queue(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
