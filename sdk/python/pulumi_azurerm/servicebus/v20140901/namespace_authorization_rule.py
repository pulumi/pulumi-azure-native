# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class NamespaceAuthorizationRule(pulumi.CustomResource):
    claim_type: pulumi.Output[str]
    """
    A string that describes Claim Type for authorization rule.
    """
    claim_value: pulumi.Output[str]
    """
    A string that describes Claim Value of authorization rule.
    """
    created_time: pulumi.Output[str]
    """
    The time the namespace was created.
    """
    key_name: pulumi.Output[str]
    """
    A string that describes the Key Name of authorization rule.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    modified_time: pulumi.Output[str]
    """
    The time the namespace was updated.
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    primary_key: pulumi.Output[str]
    """
    A base64-encoded 256-bit primary key for signing and validating the SAS token.
    """
    rights: pulumi.Output[list]
    """
    The rights associated with the rule.
    """
    secondary_key: pulumi.Output[str]
    """
    A base64-encoded 256-bit primary key for signing and validating the SAS token.
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, claim_type=None, claim_value=None, key_name=None, location=None, name=None, namespace_name=None, primary_key=None, resource_group_name=None, rights=None, secondary_key=None, __props__=None, __name__=None, __opts__=None):
        """
        Description of a namespace authorization rule.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] claim_type: A string that describes Claim Type for authorization rule.
        :param pulumi.Input[str] claim_value: A string that describes Claim Value of authorization rule.
        :param pulumi.Input[str] key_name: A string that describes the Key Name of authorization rule.
        :param pulumi.Input[str] location: data center location.
        :param pulumi.Input[str] name: The authorization rule name.
        :param pulumi.Input[str] namespace_name: The namespace name
        :param pulumi.Input[str] primary_key: A base64-encoded 256-bit primary key for signing and validating the SAS token.
        :param pulumi.Input[str] resource_group_name: Name of the Resource group within the Azure subscription.
        :param pulumi.Input[list] rights: The rights associated with the rule.
        :param pulumi.Input[str] secondary_key: A base64-encoded 256-bit primary key for signing and validating the SAS token.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['claim_type'] = claim_type
            __props__['claim_value'] = claim_value
            __props__['key_name'] = key_name
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if namespace_name is None:
                raise TypeError("Missing required property 'namespace_name'")
            __props__['namespace_name'] = namespace_name
            __props__['primary_key'] = primary_key
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if rights is None:
                raise TypeError("Missing required property 'rights'")
            __props__['rights'] = rights
            __props__['secondary_key'] = secondary_key
            __props__['created_time'] = None
            __props__['modified_time'] = None
            __props__['type'] = None
        super(NamespaceAuthorizationRule, __self__).__init__(
            'azurerm:servicebus/v20140901:NamespaceAuthorizationRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing NamespaceAuthorizationRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return NamespaceAuthorizationRule(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
