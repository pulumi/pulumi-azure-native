# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Subscription(pulumi.CustomResource):
    accessed_at: pulumi.Output[str]
    """
    Last time there was a receive request to this subscription.
    """
    auto_delete_on_idle: pulumi.Output[str]
    """
    TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
    """
    count_details: pulumi.Output[dict]
    """
    Message Count Details.
      * `active_message_count` (`float`) - Number of active messages in the queue, topic, or subscription.
      * `dead_letter_message_count` (`float`) - Number of messages that are dead lettered.
      * `scheduled_message_count` (`float`) - Number of scheduled messages.
      * `transfer_dead_letter_message_count` (`float`) - Number of messages transferred into dead letters.
      * `transfer_message_count` (`float`) - Number of messages transferred to another queue, topic, or subscription.
    """
    created_at: pulumi.Output[str]
    """
    Exact time the message was created.
    """
    dead_lettering_on_filter_evaluation_exceptions: pulumi.Output[bool]
    """
    Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
    """
    dead_lettering_on_message_expiration: pulumi.Output[bool]
    """
    Value that indicates whether a subscription has dead letter support when a message expires.
    """
    default_message_time_to_live: pulumi.Output[str]
    """
    Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
    """
    enable_batched_operations: pulumi.Output[bool]
    """
    Value that indicates whether server-side batched operations are enabled.
    """
    entity_availability_status: pulumi.Output[str]
    """
    Entity availability status for the topic.
    """
    is_read_only: pulumi.Output[bool]
    """
    Value that indicates whether the entity description is read-only.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    lock_duration: pulumi.Output[str]
    """
    The lock duration time span for the subscription.
    """
    max_delivery_count: pulumi.Output[float]
    """
    Number of maximum deliveries.
    """
    message_count: pulumi.Output[float]
    """
    Number of messages.
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    requires_session: pulumi.Output[bool]
    """
    Value indicating if a subscription supports the concept of sessions.
    """
    status: pulumi.Output[str]
    """
    Enumerates the possible values for the status of a messaging entity.
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    updated_at: pulumi.Output[str]
    """
    The exact time the message was updated.
    """
    def __init__(__self__, resource_name, opts=None, auto_delete_on_idle=None, dead_lettering_on_filter_evaluation_exceptions=None, dead_lettering_on_message_expiration=None, default_message_time_to_live=None, enable_batched_operations=None, entity_availability_status=None, is_read_only=None, location=None, lock_duration=None, max_delivery_count=None, name=None, namespace_name=None, requires_session=None, resource_group_name=None, status=None, topic_name=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        Description of subscription resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_delete_on_idle: TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
        :param pulumi.Input[bool] dead_lettering_on_filter_evaluation_exceptions: Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
        :param pulumi.Input[bool] dead_lettering_on_message_expiration: Value that indicates whether a subscription has dead letter support when a message expires.
        :param pulumi.Input[str] default_message_time_to_live: Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
        :param pulumi.Input[bool] enable_batched_operations: Value that indicates whether server-side batched operations are enabled.
        :param pulumi.Input[str] entity_availability_status: Entity availability status for the topic.
        :param pulumi.Input[bool] is_read_only: Value that indicates whether the entity description is read-only.
        :param pulumi.Input[str] location: Subscription data center location.
        :param pulumi.Input[str] lock_duration: The lock duration time span for the subscription.
        :param pulumi.Input[float] max_delivery_count: Number of maximum deliveries.
        :param pulumi.Input[str] name: The subscription name.
        :param pulumi.Input[str] namespace_name: The namespace name
        :param pulumi.Input[bool] requires_session: Value indicating if a subscription supports the concept of sessions.
        :param pulumi.Input[str] resource_group_name: Name of the Resource group within the Azure subscription.
        :param pulumi.Input[str] status: Enumerates the possible values for the status of a messaging entity.
        :param pulumi.Input[str] topic_name: The topic name.
        :param pulumi.Input[str] type: Resource manager type of the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['auto_delete_on_idle'] = auto_delete_on_idle
            __props__['dead_lettering_on_filter_evaluation_exceptions'] = dead_lettering_on_filter_evaluation_exceptions
            __props__['dead_lettering_on_message_expiration'] = dead_lettering_on_message_expiration
            __props__['default_message_time_to_live'] = default_message_time_to_live
            __props__['enable_batched_operations'] = enable_batched_operations
            __props__['entity_availability_status'] = entity_availability_status
            __props__['is_read_only'] = is_read_only
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            __props__['lock_duration'] = lock_duration
            __props__['max_delivery_count'] = max_delivery_count
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if namespace_name is None:
                raise TypeError("Missing required property 'namespace_name'")
            __props__['namespace_name'] = namespace_name
            __props__['requires_session'] = requires_session
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['status'] = status
            if topic_name is None:
                raise TypeError("Missing required property 'topic_name'")
            __props__['topic_name'] = topic_name
            __props__['type'] = type
            __props__['accessed_at'] = None
            __props__['count_details'] = None
            __props__['created_at'] = None
            __props__['message_count'] = None
            __props__['updated_at'] = None
        super(Subscription, __self__).__init__(
            'azurerm:servicebus/v20140901:Subscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Subscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Subscription(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
