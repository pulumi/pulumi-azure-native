# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Queue(pulumi.CustomResource):
    accessed_at: pulumi.Output[str]
    """
    Last time a message was sent, or the last time there was a receive request to this queue.
    """
    auto_delete_on_idle: pulumi.Output[str]
    """
    ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
    """
    count_details: pulumi.Output[dict]
    """
    Message Count Details.
      * `active_message_count` (`float`) - Number of active messages in the queue, topic, or subscription.
      * `dead_letter_message_count` (`float`) - Number of messages that are dead lettered.
      * `scheduled_message_count` (`float`) - Number of scheduled messages.
      * `transfer_dead_letter_message_count` (`float`) - Number of messages transferred into dead letters.
      * `transfer_message_count` (`float`) - Number of messages transferred to another queue, topic, or subscription.
    """
    created_at: pulumi.Output[str]
    """
    The exact time the message was created.
    """
    dead_lettering_on_message_expiration: pulumi.Output[bool]
    """
    A value that indicates whether this queue has dead letter support when a message expires.
    """
    default_message_time_to_live: pulumi.Output[str]
    """
    ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
    """
    duplicate_detection_history_time_window: pulumi.Output[str]
    """
    ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
    """
    enable_batched_operations: pulumi.Output[bool]
    """
    Value that indicates whether server-side batched operations are enabled.
    """
    enable_express: pulumi.Output[bool]
    """
    A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
    """
    enable_partitioning: pulumi.Output[bool]
    """
    A value that indicates whether the queue is to be partitioned across multiple message brokers.
    """
    forward_dead_lettered_messages_to: pulumi.Output[str]
    """
    Queue/Topic name to forward the Dead Letter message
    """
    forward_to: pulumi.Output[str]
    """
    Queue/Topic name to forward the messages
    """
    lock_duration: pulumi.Output[str]
    """
    ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
    """
    max_delivery_count: pulumi.Output[float]
    """
    The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
    """
    max_size_in_megabytes: pulumi.Output[float]
    """
    The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
    """
    message_count: pulumi.Output[float]
    """
    The number of messages in the queue.
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    requires_duplicate_detection: pulumi.Output[bool]
    """
    A value indicating if this queue requires duplicate detection.
    """
    requires_session: pulumi.Output[bool]
    """
    A value that indicates whether the queue supports the concept of sessions.
    """
    size_in_bytes: pulumi.Output[float]
    """
    The size of the queue, in bytes.
    """
    status: pulumi.Output[str]
    """
    Enumerates the possible values for the status of a messaging entity.
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    updated_at: pulumi.Output[str]
    """
    The exact time the message was updated.
    """
    def __init__(__self__, resource_name, opts=None, auto_delete_on_idle=None, dead_lettering_on_message_expiration=None, default_message_time_to_live=None, duplicate_detection_history_time_window=None, enable_batched_operations=None, enable_express=None, enable_partitioning=None, forward_dead_lettered_messages_to=None, forward_to=None, lock_duration=None, max_delivery_count=None, max_size_in_megabytes=None, name=None, namespace_name=None, requires_duplicate_detection=None, requires_session=None, resource_group_name=None, status=None, __props__=None, __name__=None, __opts__=None):
        """
        Description of queue Resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_delete_on_idle: ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
        :param pulumi.Input[bool] dead_lettering_on_message_expiration: A value that indicates whether this queue has dead letter support when a message expires.
        :param pulumi.Input[str] default_message_time_to_live: ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
        :param pulumi.Input[str] duplicate_detection_history_time_window: ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
        :param pulumi.Input[bool] enable_batched_operations: Value that indicates whether server-side batched operations are enabled.
        :param pulumi.Input[bool] enable_express: A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
        :param pulumi.Input[bool] enable_partitioning: A value that indicates whether the queue is to be partitioned across multiple message brokers.
        :param pulumi.Input[str] forward_dead_lettered_messages_to: Queue/Topic name to forward the Dead Letter message
        :param pulumi.Input[str] forward_to: Queue/Topic name to forward the messages
        :param pulumi.Input[str] lock_duration: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
        :param pulumi.Input[float] max_delivery_count: The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
        :param pulumi.Input[float] max_size_in_megabytes: The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
        :param pulumi.Input[str] name: The queue name.
        :param pulumi.Input[str] namespace_name: The namespace name
        :param pulumi.Input[bool] requires_duplicate_detection: A value indicating if this queue requires duplicate detection.
        :param pulumi.Input[bool] requires_session: A value that indicates whether the queue supports the concept of sessions.
        :param pulumi.Input[str] resource_group_name: Name of the Resource group within the Azure subscription.
        :param pulumi.Input[str] status: Enumerates the possible values for the status of a messaging entity.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['auto_delete_on_idle'] = auto_delete_on_idle
            __props__['dead_lettering_on_message_expiration'] = dead_lettering_on_message_expiration
            __props__['default_message_time_to_live'] = default_message_time_to_live
            __props__['duplicate_detection_history_time_window'] = duplicate_detection_history_time_window
            __props__['enable_batched_operations'] = enable_batched_operations
            __props__['enable_express'] = enable_express
            __props__['enable_partitioning'] = enable_partitioning
            __props__['forward_dead_lettered_messages_to'] = forward_dead_lettered_messages_to
            __props__['forward_to'] = forward_to
            __props__['lock_duration'] = lock_duration
            __props__['max_delivery_count'] = max_delivery_count
            __props__['max_size_in_megabytes'] = max_size_in_megabytes
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if namespace_name is None:
                raise TypeError("Missing required property 'namespace_name'")
            __props__['namespace_name'] = namespace_name
            __props__['requires_duplicate_detection'] = requires_duplicate_detection
            __props__['requires_session'] = requires_session
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['status'] = status
            __props__['accessed_at'] = None
            __props__['count_details'] = None
            __props__['created_at'] = None
            __props__['message_count'] = None
            __props__['size_in_bytes'] = None
            __props__['type'] = None
            __props__['updated_at'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:servicebus/v20140901:Queue"), pulumi.Alias(type_="azurerm:servicebus/v20150801:Queue")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Queue, __self__).__init__(
            'azurerm:servicebus/v20170401:Queue',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Queue resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Queue(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
