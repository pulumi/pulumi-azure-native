# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetRuleResult:
    """
    Description of Rule Resource.
    """
    def __init__(__self__, action=None, correlation_filter=None, filter_type=None, name=None, sql_filter=None, type=None):
        if action and not isinstance(action, dict):
            raise TypeError("Expected argument 'action' to be a dict")
        __self__.action = action
        """
        Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
        """
        if correlation_filter and not isinstance(correlation_filter, dict):
            raise TypeError("Expected argument 'correlation_filter' to be a dict")
        __self__.correlation_filter = correlation_filter
        """
        Properties of correlationFilter
        """
        if filter_type and not isinstance(filter_type, str):
            raise TypeError("Expected argument 'filter_type' to be a str")
        __self__.filter_type = filter_type
        """
        Filter type that is evaluated against a BrokeredMessage.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if sql_filter and not isinstance(sql_filter, dict):
            raise TypeError("Expected argument 'sql_filter' to be a dict")
        __self__.sql_filter = sql_filter
        """
        Properties of sqlFilter
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """


class AwaitableGetRuleResult(GetRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRuleResult(
            action=self.action,
            correlation_filter=self.correlation_filter,
            filter_type=self.filter_type,
            name=self.name,
            sql_filter=self.sql_filter,
            type=self.type)


def get_rule(name=None, namespace_name=None, resource_group_name=None, subscription_name=None, topic_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The rule name.
    :param str namespace_name: The namespace name
    :param str resource_group_name: Name of the Resource group within the Azure subscription.
    :param str subscription_name: The subscription name.
    :param str topic_name: The topic name.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['namespaceName'] = namespace_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['subscriptionName'] = subscription_name
    __args__['topicName'] = topic_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:servicebus/v20170401:getRule', __args__, opts=opts).value

    return AwaitableGetRuleResult(
        action=__ret__.get('action'),
        correlation_filter=__ret__.get('correlationFilter'),
        filter_type=__ret__.get('filterType'),
        name=__ret__.get('name'),
        sql_filter=__ret__.get('sqlFilter'),
        type=__ret__.get('type'))
