# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetDisasterRecoveryConfigResult:
    """
    Single item in List or Get Alias(Disaster Recovery configuration) operation
    """
    def __init__(__self__, alternate_name=None, name=None, partner_namespace=None, pending_replication_operations_count=None, provisioning_state=None, role=None, type=None):
        if alternate_name and not isinstance(alternate_name, str):
            raise TypeError("Expected argument 'alternate_name' to be a str")
        __self__.alternate_name = alternate_name
        """
        Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if partner_namespace and not isinstance(partner_namespace, str):
            raise TypeError("Expected argument 'partner_namespace' to be a str")
        __self__.partner_namespace = partner_namespace
        """
        ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
        """
        if pending_replication_operations_count and not isinstance(pending_replication_operations_count, float):
            raise TypeError("Expected argument 'pending_replication_operations_count' to be a float")
        __self__.pending_replication_operations_count = pending_replication_operations_count
        """
        Number of entities pending to be replicated.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Provisioning state of the Alias(Disaster Recovery configuration) - possible values 'Accepted' or 'Succeeded' or 'Failed'
        """
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        __self__.role = role
        """
        role of namespace in GEO DR - possible values 'Primary' or 'PrimaryNotReplicating' or 'Secondary'
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """


class AwaitableGetDisasterRecoveryConfigResult(GetDisasterRecoveryConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDisasterRecoveryConfigResult(
            alternate_name=self.alternate_name,
            name=self.name,
            partner_namespace=self.partner_namespace,
            pending_replication_operations_count=self.pending_replication_operations_count,
            provisioning_state=self.provisioning_state,
            role=self.role,
            type=self.type)


def get_disaster_recovery_config(name=None, namespace_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The Disaster Recovery configuration name
    :param str namespace_name: The namespace name
    :param str resource_group_name: Name of the Resource group within the Azure subscription.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['namespaceName'] = namespace_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:servicebus/v20170401:getDisasterRecoveryConfig', __args__, opts=opts).value

    return AwaitableGetDisasterRecoveryConfigResult(
        alternate_name=__ret__.get('alternateName'),
        name=__ret__.get('name'),
        partner_namespace=__ret__.get('partnerNamespace'),
        pending_replication_operations_count=__ret__.get('pendingReplicationOperationsCount'),
        provisioning_state=__ret__.get('provisioningState'),
        role=__ret__.get('role'),
        type=__ret__.get('type'))
