# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ConsolePropertiesResponse',
    'DashboardLensResponse',
    'DashboardPartsResponse',
    'DashboardPartsResponsePosition',
    'StorageProfileResponse',
    'TerminalSettingsResponse',
    'UserPropertiesResponse',
]

@pulumi.output_type
class ConsolePropertiesResponse(dict):
    """
    Cloud shell console properties.
    """
    def __init__(__self__, *,
                 os_type: str,
                 provisioning_state: str,
                 uri: str):
        """
        Cloud shell console properties.
        :param str os_type: The operating system type of the cloud shell.
        :param str provisioning_state: Provisioning state of the console.
        :param str uri: Uri of the console.
        """
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        The operating system type of the cloud shell.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the console.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        Uri of the console.
        """
        return pulumi.get(self, "uri")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DashboardLensResponse(dict):
    """
    A dashboard lens.
    """
    def __init__(__self__, *,
                 order: float,
                 parts: Mapping[str, 'outputs.DashboardPartsResponse'],
                 metadata: Optional[Mapping[str, Mapping[str, Any]]] = None):
        """
        A dashboard lens.
        :param float order: The lens order.
        :param Mapping[str, 'DashboardPartsResponseArgs'] parts: The dashboard parts.
        :param Mapping[str, Mapping[str, Any]] metadata: The dashboard len's metadata.
        """
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "parts", parts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def order(self) -> float:
        """
        The lens order.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def parts(self) -> Mapping[str, 'outputs.DashboardPartsResponse']:
        """
        The dashboard parts.
        """
        return pulumi.get(self, "parts")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Mapping[str, Any]]]:
        """
        The dashboard len's metadata.
        """
        return pulumi.get(self, "metadata")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DashboardPartsResponse(dict):
    """
    A dashboard part.
    """
    def __init__(__self__, *,
                 position: 'outputs.DashboardPartsResponsePosition',
                 metadata: Optional[Mapping[str, Mapping[str, Any]]] = None):
        """
        A dashboard part.
        :param 'DashboardPartsResponsePositionArgs' position: The dashboard's part position.
        :param Mapping[str, Mapping[str, Any]] metadata: The dashboard part's metadata.
        """
        pulumi.set(__self__, "position", position)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def position(self) -> 'outputs.DashboardPartsResponsePosition':
        """
        The dashboard's part position.
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Mapping[str, Any]]]:
        """
        The dashboard part's metadata.
        """
        return pulumi.get(self, "metadata")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DashboardPartsResponsePosition(dict):
    """
    The dashboard's part position.
    """
    def __init__(__self__, *,
                 col_span: float,
                 row_span: float,
                 x: float,
                 y: float,
                 metadata: Optional[Mapping[str, Mapping[str, Any]]] = None):
        """
        The dashboard's part position.
        :param float col_span: The dashboard's part column span.
        :param float row_span: The dashboard's part row span.
        :param float x: The dashboard's part x coordinate.
        :param float y: The dashboard's part y coordinate.
        :param Mapping[str, Mapping[str, Any]] metadata: The dashboard part's metadata.
        """
        pulumi.set(__self__, "col_span", col_span)
        pulumi.set(__self__, "row_span", row_span)
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="colSpan")
    def col_span(self) -> float:
        """
        The dashboard's part column span.
        """
        return pulumi.get(self, "col_span")

    @property
    @pulumi.getter(name="rowSpan")
    def row_span(self) -> float:
        """
        The dashboard's part row span.
        """
        return pulumi.get(self, "row_span")

    @property
    @pulumi.getter
    def x(self) -> float:
        """
        The dashboard's part x coordinate.
        """
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> float:
        """
        The dashboard's part y coordinate.
        """
        return pulumi.get(self, "y")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Mapping[str, Any]]]:
        """
        The dashboard part's metadata.
        """
        return pulumi.get(self, "metadata")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StorageProfileResponse(dict):
    """
    The storage profile of the user settings.
    """
    def __init__(__self__, *,
                 disk_size_in_gb: Optional[float] = None,
                 file_share_name: Optional[str] = None,
                 storage_account_resource_id: Optional[str] = None):
        """
        The storage profile of the user settings.
        :param float disk_size_in_gb: Size of file share
        :param str file_share_name: Name of the mounted file share. 63 characters or less, lowercase alphabet, numbers, and -
        :param str storage_account_resource_id: Full resource ID of storage account.
        """
        if disk_size_in_gb is not None:
            pulumi.set(__self__, "disk_size_in_gb", disk_size_in_gb)
        if file_share_name is not None:
            pulumi.set(__self__, "file_share_name", file_share_name)
        if storage_account_resource_id is not None:
            pulumi.set(__self__, "storage_account_resource_id", storage_account_resource_id)

    @property
    @pulumi.getter(name="diskSizeInGB")
    def disk_size_in_gb(self) -> Optional[float]:
        """
        Size of file share
        """
        return pulumi.get(self, "disk_size_in_gb")

    @property
    @pulumi.getter(name="fileShareName")
    def file_share_name(self) -> Optional[str]:
        """
        Name of the mounted file share. 63 characters or less, lowercase alphabet, numbers, and -
        """
        return pulumi.get(self, "file_share_name")

    @property
    @pulumi.getter(name="storageAccountResourceId")
    def storage_account_resource_id(self) -> Optional[str]:
        """
        Full resource ID of storage account.
        """
        return pulumi.get(self, "storage_account_resource_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TerminalSettingsResponse(dict):
    """
    Settings for terminal appearance.
    """
    def __init__(__self__, *,
                 font_size: Optional[str] = None,
                 font_style: Optional[str] = None):
        """
        Settings for terminal appearance.
        :param str font_size: Size of terminal font.
        :param str font_style: Style of terminal font.
        """
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_style is not None:
            pulumi.set(__self__, "font_style", font_style)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[str]:
        """
        Size of terminal font.
        """
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontStyle")
    def font_style(self) -> Optional[str]:
        """
        Style of terminal font.
        """
        return pulumi.get(self, "font_style")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPropertiesResponse(dict):
    """
    The cloud shell user settings properties.
    """
    def __init__(__self__, *,
                 preferred_location: str,
                 preferred_os_type: str,
                 preferred_shell_type: str,
                 storage_profile: 'outputs.StorageProfileResponse',
                 terminal_settings: 'outputs.TerminalSettingsResponse'):
        """
        The cloud shell user settings properties.
        :param str preferred_location: The preferred location of the cloud shell.
        :param str preferred_os_type: The operating system type of the cloud shell. Deprecated, use preferredShellType.
        :param str preferred_shell_type: The shell type of the cloud shell.
        :param 'StorageProfileResponseArgs' storage_profile: The storage profile of the user settings.
        :param 'TerminalSettingsResponseArgs' terminal_settings: Settings for terminal appearance.
        """
        pulumi.set(__self__, "preferred_location", preferred_location)
        pulumi.set(__self__, "preferred_os_type", preferred_os_type)
        pulumi.set(__self__, "preferred_shell_type", preferred_shell_type)
        pulumi.set(__self__, "storage_profile", storage_profile)
        pulumi.set(__self__, "terminal_settings", terminal_settings)

    @property
    @pulumi.getter(name="preferredLocation")
    def preferred_location(self) -> str:
        """
        The preferred location of the cloud shell.
        """
        return pulumi.get(self, "preferred_location")

    @property
    @pulumi.getter(name="preferredOsType")
    def preferred_os_type(self) -> str:
        """
        The operating system type of the cloud shell. Deprecated, use preferredShellType.
        """
        return pulumi.get(self, "preferred_os_type")

    @property
    @pulumi.getter(name="preferredShellType")
    def preferred_shell_type(self) -> str:
        """
        The shell type of the cloud shell.
        """
        return pulumi.get(self, "preferred_shell_type")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> 'outputs.StorageProfileResponse':
        """
        The storage profile of the user settings.
        """
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter(name="terminalSettings")
    def terminal_settings(self) -> 'outputs.TerminalSettingsResponse':
        """
        Settings for terminal appearance.
        """
        return pulumi.get(self, "terminal_settings")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


