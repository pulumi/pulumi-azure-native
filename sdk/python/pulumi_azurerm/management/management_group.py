# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class ManagementGroup(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    The name of the management group. For example, 00000000-0000-0000-0000-000000000000
    """
    properties: pulumi.Output[dict]
    """
    The generic properties of a management group.
      * `children` (`list`) - The list of children.
        * `children` (`list`) - The list of children.
        * `display_name` (`str`) - The friendly name of the child resource.
        * `id` (`str`) - The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
        * `name` (`str`) - The name of the child entity.
        * `roles` (`list`) - The roles definitions associated with the management group.
        * `type` (`str`) - The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups)

      * `details` (`dict`) - The details of a management group.
        * `parent` (`dict`) - (Optional) The ID of the parent management group.
          * `display_name` (`str`) - The friendly name of the parent management group.
          * `id` (`str`) - The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
          * `name` (`str`) - The name of the parent management group

        * `updated_by` (`str`) - The identity of the principal or process that updated the object.
        * `updated_time` (`str`) - The date and time when this object was last updated.
        * `version` (`float`) - The version number of the object.

      * `display_name` (`str`) - The friendly name of the management group.
      * `path` (`list`) - The path from the root to the current group.
        * `display_name` (`str`) - The friendly name of the group.
        * `name` (`str`) - The name of the group.

      * `roles` (`list`) - The role definitions associated with the management group.
      * `tenant_id` (`str`) - The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
    """
    type: pulumi.Output[str]
    """
    The type of the resource.  For example, Microsoft.Management/managementGroups
    """
    def __init__(__self__, resource_name, opts=None, name=None, properties=None, __props__=None, __name__=None, __opts__=None):
        """
        The management group details.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Management Group ID.
        :param pulumi.Input[dict] properties: The generic properties of a management group used during creation.

        The **properties** object supports the following:

          * `details` (`pulumi.Input[dict]`) - The details of a management group used during creation.
            * `parent` (`pulumi.Input[dict]`) - (Optional) The ID of the parent management group used during creation.
              * `id` (`pulumi.Input[str]`) - The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000

          * `display_name` (`pulumi.Input[str]`) - The friendly name of the management group. If no value is passed then this  field will be set to the groupId.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            __props__['type'] = None
        super(ManagementGroup, __self__).__init__(
            'azurerm:management:ManagementGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ManagementGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ManagementGroup(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
