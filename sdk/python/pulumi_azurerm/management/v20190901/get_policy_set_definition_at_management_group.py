# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetPolicySetDefinitionAtManagementGroupResult:
    """
    The policy set definition.
    """
    def __init__(__self__, description=None, display_name=None, metadata=None, name=None, parameters=None, policy_definition_groups=None, policy_definitions=None, policy_type=None, type=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        The policy set definition description.
        """
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        __self__.display_name = display_name
        """
        The display name of the policy set definition.
        """
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        __self__.metadata = metadata
        """
        The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the policy set definition.
        """
        if parameters and not isinstance(parameters, dict):
            raise TypeError("Expected argument 'parameters' to be a dict")
        __self__.parameters = parameters
        """
        The policy set definition parameters that can be used in policy definition references.
        """
        if policy_definition_groups and not isinstance(policy_definition_groups, list):
            raise TypeError("Expected argument 'policy_definition_groups' to be a list")
        __self__.policy_definition_groups = policy_definition_groups
        """
        The metadata describing groups of policy definition references within the policy set definition.
        """
        if policy_definitions and not isinstance(policy_definitions, list):
            raise TypeError("Expected argument 'policy_definitions' to be a list")
        __self__.policy_definitions = policy_definitions
        """
        An array of policy definition references.
        """
        if policy_type and not isinstance(policy_type, str):
            raise TypeError("Expected argument 'policy_type' to be a str")
        __self__.policy_type = policy_type
        """
        The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource (Microsoft.Authorization/policySetDefinitions).
        """


class AwaitableGetPolicySetDefinitionAtManagementGroupResult(GetPolicySetDefinitionAtManagementGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicySetDefinitionAtManagementGroupResult(
            description=self.description,
            display_name=self.display_name,
            metadata=self.metadata,
            name=self.name,
            parameters=self.parameters,
            policy_definition_groups=self.policy_definition_groups,
            policy_definitions=self.policy_definitions,
            policy_type=self.policy_type,
            type=self.type)


def get_policy_set_definition_at_management_group(management_group_id=None, name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str management_group_id: The ID of the management group.
    :param str name: The name of the policy set definition to get.
    """
    __args__ = dict()
    __args__['managementGroupId'] = management_group_id
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:management/v20190901:getPolicySetDefinitionAtManagementGroup', __args__, opts=opts).value

    return AwaitableGetPolicySetDefinitionAtManagementGroupResult(
        description=__ret__.get('description'),
        display_name=__ret__.get('displayName'),
        metadata=__ret__.get('metadata'),
        name=__ret__.get('name'),
        parameters=__ret__.get('parameters'),
        policy_definition_groups=__ret__.get('policyDefinitionGroups'),
        policy_definitions=__ret__.get('policyDefinitions'),
        policy_type=__ret__.get('policyType'),
        type=__ret__.get('type'))
