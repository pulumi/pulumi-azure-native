# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetManagementGroupResult:
    """
    The management group details.
    """
    def __init__(__self__, children=None, details=None, display_name=None, name=None, path=None, tenant_id=None, type=None):
        if children and not isinstance(children, list):
            raise TypeError("Expected argument 'children' to be a list")
        __self__.children = children
        """
        The list of children.
        """
        if details and not isinstance(details, dict):
            raise TypeError("Expected argument 'details' to be a dict")
        __self__.details = details
        """
        The details of a management group.
        """
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        __self__.display_name = display_name
        """
        The friendly name of the management group.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the management group. For example, 00000000-0000-0000-0000-000000000000
        """
        if path and not isinstance(path, list):
            raise TypeError("Expected argument 'path' to be a list")
        __self__.path = path
        """
        The path from the root to the current group.
        """
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        __self__.tenant_id = tenant_id
        """
        The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.  For example, Microsoft.Management/managementGroups
        """


class AwaitableGetManagementGroupResult(GetManagementGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagementGroupResult(
            children=self.children,
            details=self.details,
            display_name=self.display_name,
            name=self.name,
            path=self.path,
            tenant_id=self.tenant_id,
            type=self.type)


def get_management_group(expand=None, filter=None, name=None, recurse=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str expand: The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.
    :param str filter: A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription')
    :param str name: Management Group ID.
    :param bool recurse: The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true.
    """
    __args__ = dict()
    __args__['expand'] = expand
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['recurse'] = recurse
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:management/v20200501:getManagementGroup', __args__, opts=opts).value

    return AwaitableGetManagementGroupResult(
        children=__ret__.get('children'),
        details=__ret__.get('details'),
        display_name=__ret__.get('displayName'),
        name=__ret__.get('name'),
        path=__ret__.get('path'),
        tenant_id=__ret__.get('tenantId'),
        type=__ret__.get('type'))
