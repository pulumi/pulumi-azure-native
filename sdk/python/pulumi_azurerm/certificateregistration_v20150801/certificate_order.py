# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class CertificateOrder(pulumi.CustomResource):
    kind: pulumi.Output[str]
    """
    Kind of resource
    """
    location: pulumi.Output[str]
    """
    Resource Location
    """
    name: pulumi.Output[str]
    """
    Resource Name
    """
    properties: pulumi.Output[dict]
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, id=None, kind=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        Certificate purchase order

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] id: Resource Id
        :param pulumi.Input[str] kind: Kind of resource
        :param pulumi.Input[str] location: Resource Location
        :param pulumi.Input[str] name: Resource Name
        :param pulumi.Input[str] resource_group_name: Azure resource group name
        :param pulumi.Input[dict] tags: Resource tags
        :param pulumi.Input[str] type: Resource type

        The **properties** object supports the following:

          * `auto_renew` (`pulumi.Input[bool]`) - Auto renew
          * `certificates` (`pulumi.Input[dict]`) - State of the Key Vault secret
          * `csr` (`pulumi.Input[str]`) - Last CSR that was created for this order
          * `distinguished_name` (`pulumi.Input[str]`) - Certificate distinguished name
          * `domain_verification_token` (`pulumi.Input[str]`) - Domain Verification Token
          * `expiration_time` (`pulumi.Input[str]`) - Certificate expiration time
          * `intermediate` (`pulumi.Input[dict]`) - Intermediate certificate
            * `id` (`pulumi.Input[str]`) - Resource Id
            * `kind` (`pulumi.Input[str]`) - Kind of resource
            * `location` (`pulumi.Input[str]`) - Resource Location
            * `name` (`pulumi.Input[str]`) - Resource Name
            * `properties` (`pulumi.Input[dict]`)
              * `issuer` (`pulumi.Input[str]`) - Issuer
              * `not_after` (`pulumi.Input[str]`) - Valid to
              * `not_before` (`pulumi.Input[str]`) - Valid from
              * `raw_data` (`pulumi.Input[str]`) - Raw certificate data
              * `serial_number` (`pulumi.Input[str]`) - Serial Number
              * `signature_algorithm` (`pulumi.Input[str]`) - Signature Algorithm
              * `subject` (`pulumi.Input[str]`) - Subject
              * `thumbprint` (`pulumi.Input[str]`) - Thumbprint
              * `version` (`pulumi.Input[float]`) - Version

            * `tags` (`pulumi.Input[dict]`) - Resource tags
            * `type` (`pulumi.Input[str]`) - Resource type

          * `key_size` (`pulumi.Input[float]`) - Certificate Key Size
          * `last_certificate_issuance_time` (`pulumi.Input[str]`) - Certificate last issuance time
          * `product_type` (`pulumi.Input[str]`) - Certificate product type
          * `provisioning_state` (`pulumi.Input[str]`) - Status of certificate order
          * `root` (`pulumi.Input[dict]`) - Root certificate
          * `serial_number` (`pulumi.Input[str]`) - Current serial number of the certificate
          * `signed_certificate` (`pulumi.Input[dict]`) - Signed certificate
          * `status` (`pulumi.Input[str]`) - Current order status
          * `validity_in_years` (`pulumi.Input[float]`) - Duration in years (must be between 1 and 3)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['id'] = id
            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = type
        super(CertificateOrder, __self__).__init__(
            'azurerm:certificateregistration/v20150801:CertificateOrder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing CertificateOrder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return CertificateOrder(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
