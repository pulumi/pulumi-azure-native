# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class Service(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    An etag associated with the resource, used for optimistic concurrency when editing it.
    """
    identity: pulumi.Output[dict]
    """
    Setting indicating whether the service has a managed identity associated with it.
      * `principal_id` (`str`) - The principal ID of the resource identity.
      * `tenant_id` (`str`) - The tenant ID of the resource.
      * `type` (`str`) - Type of identity being specified, currently SystemAssigned and None are allowed.
    """
    kind: pulumi.Output[str]
    """
    The kind of the service.
    """
    location: pulumi.Output[str]
    """
    The resource location.
    """
    name: pulumi.Output[str]
    """
    The resource name.
    """
    properties: pulumi.Output[dict]
    """
    The common properties of a service.
      * `access_policies` (`dict`) - The access policies of the service instance.
      * `authentication_configuration` (`dict`) - The authentication configuration for the service instance.
        * `audience` (`str`) - The audience url for the service
        * `authority` (`str`) - The authority url for the service
        * `smart_proxy_enabled` (`bool`) - If the SMART on FHIR proxy is enabled

      * `cors_configuration` (`dict`) - The settings for the CORS configuration of the service instance.
        * `allow_credentials` (`bool`) - If credentials are allowed via CORS.
        * `headers` (`list`) - The headers to be allowed via CORS.
        * `max_age` (`float`) - The max age to be allowed via CORS.
        * `methods` (`list`) - The methods to be allowed via CORS.
        * `origins` (`list`) - The origins to be allowed via CORS.

      * `cosmos_db_configuration` (`dict`) - The settings for the Cosmos DB database backing the service.
        * `offer_throughput` (`float`) - The provisioned throughput for the backing database.

      * `export_configuration` (`dict`) - The settings for the export operation of the service instance.
        * `storage_account_name` (`str`) - The name of the default export storage account.

      * `provisioning_state` (`str`) - The provisioning state.
    """
    tags: pulumi.Output[dict]
    """
    The resource tags.
    """
    type: pulumi.Output[str]
    """
    The resource type.
    """
    def __init__(__self__, resource_name, opts=None, etag=None, identity=None, kind=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        The description of the service.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] etag: An etag associated with the resource, used for optimistic concurrency when editing it.
        :param pulumi.Input[dict] identity: Setting indicating whether the service has a managed identity associated with it.
        :param pulumi.Input[str] kind: The kind of the service.
        :param pulumi.Input[str] location: The resource location.
        :param pulumi.Input[str] name: The name of the service instance.
        :param pulumi.Input[dict] properties: The common properties of a service.
        :param pulumi.Input[str] resource_group_name: The name of the resource group that contains the service instance.
        :param pulumi.Input[dict] tags: The resource tags.

        The **identity** object supports the following:

          * `type` (`pulumi.Input[str]`) - Type of identity being specified, currently SystemAssigned and None are allowed.

        The **properties** object supports the following:

          * `access_policies` (`pulumi.Input[dict]`) - The access policies of the service instance.
          * `authentication_configuration` (`pulumi.Input[dict]`) - The authentication configuration for the service instance.
            * `audience` (`pulumi.Input[str]`) - The audience url for the service
            * `authority` (`pulumi.Input[str]`) - The authority url for the service
            * `smart_proxy_enabled` (`pulumi.Input[bool]`) - If the SMART on FHIR proxy is enabled

          * `cors_configuration` (`pulumi.Input[dict]`) - The settings for the CORS configuration of the service instance.
            * `allow_credentials` (`pulumi.Input[bool]`) - If credentials are allowed via CORS.
            * `headers` (`pulumi.Input[list]`) - The headers to be allowed via CORS.
            * `max_age` (`pulumi.Input[float]`) - The max age to be allowed via CORS.
            * `methods` (`pulumi.Input[list]`) - The methods to be allowed via CORS.
            * `origins` (`pulumi.Input[list]`) - The origins to be allowed via CORS.

          * `cosmos_db_configuration` (`pulumi.Input[dict]`) - The settings for the Cosmos DB database backing the service.
            * `offer_throughput` (`pulumi.Input[float]`) - The provisioned throughput for the backing database.

          * `export_configuration` (`pulumi.Input[dict]`) - The settings for the export operation of the service instance.
            * `storage_account_name` (`pulumi.Input[str]`) - The name of the default export storage account.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['etag'] = etag
            __props__['identity'] = identity
            if kind is None:
                raise TypeError("Missing required property 'kind'")
            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(Service, __self__).__init__(
            'azurerm:healthcareapis:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, etag=None, identity=None, kind=None, location=None, name=None, properties=None, tags=None, type=None):
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] etag: An etag associated with the resource, used for optimistic concurrency when editing it.
        :param pulumi.Input[dict] identity: Setting indicating whether the service has a managed identity associated with it.
        :param pulumi.Input[str] kind: The kind of the service.
        :param pulumi.Input[str] location: The resource location.
        :param pulumi.Input[str] name: The resource name.
        :param pulumi.Input[dict] properties: The common properties of a service.
        :param pulumi.Input[dict] tags: The resource tags.
        :param pulumi.Input[str] type: The resource type.

        The **identity** object supports the following:

          * `principal_id` (`pulumi.Input[str]`) - The principal ID of the resource identity.
          * `tenant_id` (`pulumi.Input[str]`) - The tenant ID of the resource.
          * `type` (`pulumi.Input[str]`) - Type of identity being specified, currently SystemAssigned and None are allowed.

        The **properties** object supports the following:

          * `access_policies` (`pulumi.Input[dict]`) - The access policies of the service instance.
          * `authentication_configuration` (`pulumi.Input[dict]`) - The authentication configuration for the service instance.
            * `audience` (`pulumi.Input[str]`) - The audience url for the service
            * `authority` (`pulumi.Input[str]`) - The authority url for the service
            * `smart_proxy_enabled` (`pulumi.Input[bool]`) - If the SMART on FHIR proxy is enabled

          * `cors_configuration` (`pulumi.Input[dict]`) - The settings for the CORS configuration of the service instance.
            * `allow_credentials` (`pulumi.Input[bool]`) - If credentials are allowed via CORS.
            * `headers` (`pulumi.Input[list]`) - The headers to be allowed via CORS.
            * `max_age` (`pulumi.Input[float]`) - The max age to be allowed via CORS.
            * `methods` (`pulumi.Input[list]`) - The methods to be allowed via CORS.
            * `origins` (`pulumi.Input[list]`) - The origins to be allowed via CORS.

          * `cosmos_db_configuration` (`pulumi.Input[dict]`) - The settings for the Cosmos DB database backing the service.
            * `offer_throughput` (`pulumi.Input[float]`) - The provisioned throughput for the backing database.

          * `export_configuration` (`pulumi.Input[dict]`) - The settings for the export operation of the service instance.
            * `storage_account_name` (`pulumi.Input[str]`) - The name of the default export storage account.

          * `provisioning_state` (`pulumi.Input[str]`) - The provisioning state.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["etag"] = etag
        __props__["identity"] = identity
        __props__["kind"] = kind
        __props__["location"] = location
        __props__["name"] = name
        __props__["properties"] = properties
        __props__["tags"] = tags
        __props__["type"] = type
        return Service(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
