# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Webhook(pulumi.CustomResource):
    creation_time: pulumi.Output[str]
    """
    Gets or sets the creation time.
    """
    description: pulumi.Output[str]
    """
    Gets or sets the description.
    """
    expiry_time: pulumi.Output[str]
    """
    Gets or sets the expiry time.
    """
    is_enabled: pulumi.Output[bool]
    """
    Gets or sets the value of the enabled flag of the webhook.
    """
    last_invoked_time: pulumi.Output[str]
    """
    Gets or sets the last invoked time.
    """
    last_modified_by: pulumi.Output[str]
    """
    Details of the user who last modified the Webhook
    """
    last_modified_time: pulumi.Output[str]
    """
    Gets or sets the last modified time.
    """
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    parameters: pulumi.Output[dict]
    """
    Gets or sets the parameters of the job that is created when the webhook calls the runbook it is associated with.
    """
    run_on: pulumi.Output[str]
    """
    Gets or sets the name of the hybrid worker group the webhook job will run on.
    """
    runbook: pulumi.Output[dict]
    """
    Gets or sets the runbook the webhook is associated with.
      * `name` (`str`) - Gets or sets the name of the runbook.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    uri: pulumi.Output[str]
    """
    Gets or sets the webhook uri.
    """
    def __init__(__self__, resource_name, opts=None, automation_account_name=None, expiry_time=None, is_enabled=None, name=None, parameters=None, resource_group_name=None, run_on=None, runbook=None, uri=None, __props__=None, __name__=None, __opts__=None):
        """
        Definition of the webhook type.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] automation_account_name: The name of the automation account.
        :param pulumi.Input[str] expiry_time: Gets or sets the expiry time.
        :param pulumi.Input[bool] is_enabled: Gets or sets the value of the enabled flag of webhook.
        :param pulumi.Input[str] name: The webhook name.
        :param pulumi.Input[dict] parameters: Gets or sets the parameters of the job.
        :param pulumi.Input[str] resource_group_name: Name of an Azure Resource group.
        :param pulumi.Input[str] run_on: Gets or sets the name of the hybrid worker group the webhook job will run on.
        :param pulumi.Input[dict] runbook: Gets or sets the runbook.
        :param pulumi.Input[str] uri: Gets or sets the uri.

        The **runbook** object supports the following:

          * `name` (`pulumi.Input[str]`) - Gets or sets the name of the runbook.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if automation_account_name is None:
                raise TypeError("Missing required property 'automation_account_name'")
            __props__['automation_account_name'] = automation_account_name
            __props__['expiry_time'] = expiry_time
            __props__['is_enabled'] = is_enabled
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['parameters'] = parameters
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['run_on'] = run_on
            __props__['runbook'] = runbook
            __props__['uri'] = uri
            __props__['creation_time'] = None
            __props__['description'] = None
            __props__['last_invoked_time'] = None
            __props__['last_modified_by'] = None
            __props__['last_modified_time'] = None
            __props__['type'] = None
        super(Webhook, __self__).__init__(
            'azurerm:automation/v20151031:Webhook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Webhook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Webhook(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
