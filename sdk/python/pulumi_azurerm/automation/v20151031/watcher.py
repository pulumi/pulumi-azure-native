# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Watcher(pulumi.CustomResource):
    creation_time: pulumi.Output[str]
    """
    Gets or sets the creation time.
    """
    description: pulumi.Output[str]
    """
    Gets or sets the description.
    """
    etag: pulumi.Output[str]
    """
    Gets or sets the etag of the resource.
    """
    execution_frequency_in_seconds: pulumi.Output[float]
    """
    Gets or sets the frequency at which the watcher is invoked.
    """
    last_modified_by: pulumi.Output[str]
    """
    Details of the user who last modified the watcher.
    """
    last_modified_time: pulumi.Output[str]
    """
    Gets or sets the last modified time.
    """
    location: pulumi.Output[str]
    """
    The Azure Region where the resource lives
    """
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    script_name: pulumi.Output[str]
    """
    Gets or sets the name of the script the watcher is attached to, i.e. the name of an existing runbook.
    """
    script_parameters: pulumi.Output[dict]
    """
    Gets or sets the parameters of the script.
    """
    script_run_on: pulumi.Output[str]
    """
    Gets or sets the name of the hybrid worker group the watcher will run on.
    """
    status: pulumi.Output[str]
    """
    Gets the current status of the watcher.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    def __init__(__self__, resource_name, opts=None, automation_account_name=None, description=None, etag=None, execution_frequency_in_seconds=None, location=None, name=None, resource_group_name=None, script_name=None, script_parameters=None, script_run_on=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Definition of the watcher type.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] automation_account_name: The name of the automation account.
        :param pulumi.Input[str] description: Gets or sets the description.
        :param pulumi.Input[str] etag: Gets or sets the etag of the resource.
        :param pulumi.Input[float] execution_frequency_in_seconds: Gets or sets the frequency at which the watcher is invoked.
        :param pulumi.Input[str] location: The Azure Region where the resource lives
        :param pulumi.Input[str] name: The watcher name.
        :param pulumi.Input[str] resource_group_name: Name of an Azure Resource group.
        :param pulumi.Input[str] script_name: Gets or sets the name of the script the watcher is attached to, i.e. the name of an existing runbook.
        :param pulumi.Input[dict] script_parameters: Gets or sets the parameters of the script.
        :param pulumi.Input[str] script_run_on: Gets or sets the name of the hybrid worker group the watcher will run on.
        :param pulumi.Input[dict] tags: Resource tags.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if automation_account_name is None:
                raise TypeError("Missing required property 'automation_account_name'")
            __props__['automation_account_name'] = automation_account_name
            __props__['description'] = description
            __props__['etag'] = etag
            __props__['execution_frequency_in_seconds'] = execution_frequency_in_seconds
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['script_name'] = script_name
            __props__['script_parameters'] = script_parameters
            __props__['script_run_on'] = script_run_on
            __props__['tags'] = tags
            __props__['creation_time'] = None
            __props__['last_modified_by'] = None
            __props__['last_modified_time'] = None
            __props__['status'] = None
            __props__['type'] = None
        super(Watcher, __self__).__init__(
            'azurerm:automation/v20151031:Watcher',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Watcher resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Watcher(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
