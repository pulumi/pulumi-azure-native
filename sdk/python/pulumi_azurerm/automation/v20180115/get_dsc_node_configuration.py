# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetDscNodeConfigurationResult:
    """
    Definition of the dsc node configuration.
    """
    def __init__(__self__, configuration=None, creation_time=None, increment_node_configuration_build=None, last_modified_time=None, name=None, node_count=None, source=None, type=None):
        if configuration and not isinstance(configuration, dict):
            raise TypeError("Expected argument 'configuration' to be a dict")
        __self__.configuration = configuration
        """
        Gets or sets the configuration of the node.
        """
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        __self__.creation_time = creation_time
        """
        Gets or sets creation time.
        """
        if increment_node_configuration_build and not isinstance(increment_node_configuration_build, bool):
            raise TypeError("Expected argument 'increment_node_configuration_build' to be a bool")
        __self__.increment_node_configuration_build = increment_node_configuration_build
        """
        If a new build version of NodeConfiguration is required.
        """
        if last_modified_time and not isinstance(last_modified_time, str):
            raise TypeError("Expected argument 'last_modified_time' to be a str")
        __self__.last_modified_time = last_modified_time
        """
        Gets or sets the last modified time.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource
        """
        if node_count and not isinstance(node_count, float):
            raise TypeError("Expected argument 'node_count' to be a float")
        __self__.node_count = node_count
        """
        Number of nodes with this node configuration assigned
        """
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        __self__.source = source
        """
        Source of node configuration.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """


class AwaitableGetDscNodeConfigurationResult(GetDscNodeConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDscNodeConfigurationResult(
            configuration=self.configuration,
            creation_time=self.creation_time,
            increment_node_configuration_build=self.increment_node_configuration_build,
            last_modified_time=self.last_modified_time,
            name=self.name,
            node_count=self.node_count,
            source=self.source,
            type=self.type)


def get_dsc_node_configuration(automation_account_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str automation_account_name: The name of the automation account.
    :param str name: The Dsc node configuration name.
    :param str resource_group_name: Name of an Azure Resource group.
    """
    __args__ = dict()
    __args__['automationAccountName'] = automation_account_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:automation/v20180115:getDscNodeConfiguration', __args__, opts=opts).value

    return AwaitableGetDscNodeConfigurationResult(
        configuration=__ret__.get('configuration'),
        creation_time=__ret__.get('creationTime'),
        increment_node_configuration_build=__ret__.get('incrementNodeConfigurationBuild'),
        last_modified_time=__ret__.get('lastModifiedTime'),
        name=__ret__.get('name'),
        node_count=__ret__.get('nodeCount'),
        source=__ret__.get('source'),
        type=__ret__.get('type'))
