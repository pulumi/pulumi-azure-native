# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'MigrateProjectPropertiesResponse',
    'MigrateProjectResponseTags',
    'ProjectSummaryResponse',
    'SolutionDetailsResponse',
    'SolutionPropertiesResponse',
    'SolutionSummaryResponse',
]

@pulumi.output_type
class MigrateProjectPropertiesResponse(dict):
    """
    Class for migrate project properties.
    """
    def __init__(__self__, *,
                 last_summary_refreshed_time: str,
                 refresh_summary_state: str,
                 summary: Mapping[str, 'outputs.ProjectSummaryResponse'],
                 provisioning_state: Optional[str] = None,
                 registered_tools: Optional[List[str]] = None):
        """
        Class for migrate project properties.
        :param str last_summary_refreshed_time: Gets the last time the project summary was refreshed.
        :param str refresh_summary_state: Gets the refresh summary state.
        :param Mapping[str, 'ProjectSummaryResponseArgs'] summary: Gets the summary of the migrate project.
        :param str provisioning_state: Provisioning state of the migrate project.
        :param List[str] registered_tools: Gets or sets the list of tools registered with the migrate project.
        """
        pulumi.set(__self__, "last_summary_refreshed_time", last_summary_refreshed_time)
        pulumi.set(__self__, "refresh_summary_state", refresh_summary_state)
        pulumi.set(__self__, "summary", summary)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)
        if registered_tools is not None:
            pulumi.set(__self__, "registered_tools", registered_tools)

    @property
    @pulumi.getter(name="lastSummaryRefreshedTime")
    def last_summary_refreshed_time(self) -> str:
        """
        Gets the last time the project summary was refreshed.
        """
        return pulumi.get(self, "last_summary_refreshed_time")

    @property
    @pulumi.getter(name="refreshSummaryState")
    def refresh_summary_state(self) -> str:
        """
        Gets the refresh summary state.
        """
        return pulumi.get(self, "refresh_summary_state")

    @property
    @pulumi.getter
    def summary(self) -> Mapping[str, 'outputs.ProjectSummaryResponse']:
        """
        Gets the summary of the migrate project.
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        """
        Provisioning state of the migrate project.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="registeredTools")
    def registered_tools(self) -> Optional[List[str]]:
        """
        Gets or sets the list of tools registered with the migrate project.
        """
        return pulumi.get(self, "registered_tools")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MigrateProjectResponseTags(dict):
    """
    Gets or sets the tags.
    """
    def __init__(__self__, *,
                 additional_properties: Optional[str] = None):
        """
        Gets or sets the tags.
        """
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProjectSummaryResponse(dict):
    """
    The project summary class.
    """
    def __init__(__self__, *,
                 instance_type: str,
                 extended_summary: Optional[Mapping[str, str]] = None,
                 last_summary_refreshed_time: Optional[str] = None,
                 refresh_summary_state: Optional[str] = None):
        """
        The project summary class.
        :param str instance_type: Gets the Instance type.
        :param Mapping[str, str] extended_summary: Gets or sets the extended summary.
        :param str last_summary_refreshed_time: Gets or sets the time when summary was last refreshed.
        :param str refresh_summary_state: Gets or sets the state of refresh summary.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        if extended_summary is not None:
            pulumi.set(__self__, "extended_summary", extended_summary)
        if last_summary_refreshed_time is not None:
            pulumi.set(__self__, "last_summary_refreshed_time", last_summary_refreshed_time)
        if refresh_summary_state is not None:
            pulumi.set(__self__, "refresh_summary_state", refresh_summary_state)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="extendedSummary")
    def extended_summary(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the extended summary.
        """
        return pulumi.get(self, "extended_summary")

    @property
    @pulumi.getter(name="lastSummaryRefreshedTime")
    def last_summary_refreshed_time(self) -> Optional[str]:
        """
        Gets or sets the time when summary was last refreshed.
        """
        return pulumi.get(self, "last_summary_refreshed_time")

    @property
    @pulumi.getter(name="refreshSummaryState")
    def refresh_summary_state(self) -> Optional[str]:
        """
        Gets or sets the state of refresh summary.
        """
        return pulumi.get(self, "refresh_summary_state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SolutionDetailsResponse(dict):
    """
    Class representing the details of the solution.
    """
    def __init__(__self__, *,
                 assessment_count: Optional[float] = None,
                 extended_details: Optional[Mapping[str, str]] = None,
                 group_count: Optional[float] = None):
        """
        Class representing the details of the solution.
        :param float assessment_count: Gets or sets the count of assessments reported by the solution.
        :param Mapping[str, str] extended_details: Gets or sets the extended details reported by the solution.
        :param float group_count: Gets or sets the count of groups reported by the solution.
        """
        if assessment_count is not None:
            pulumi.set(__self__, "assessment_count", assessment_count)
        if extended_details is not None:
            pulumi.set(__self__, "extended_details", extended_details)
        if group_count is not None:
            pulumi.set(__self__, "group_count", group_count)

    @property
    @pulumi.getter(name="assessmentCount")
    def assessment_count(self) -> Optional[float]:
        """
        Gets or sets the count of assessments reported by the solution.
        """
        return pulumi.get(self, "assessment_count")

    @property
    @pulumi.getter(name="extendedDetails")
    def extended_details(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the extended details reported by the solution.
        """
        return pulumi.get(self, "extended_details")

    @property
    @pulumi.getter(name="groupCount")
    def group_count(self) -> Optional[float]:
        """
        Gets or sets the count of groups reported by the solution.
        """
        return pulumi.get(self, "group_count")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SolutionPropertiesResponse(dict):
    """
    Class for solution properties.
    """
    def __init__(__self__, *,
                 cleanup_state: Optional[str] = None,
                 details: Optional['outputs.SolutionDetailsResponse'] = None,
                 goal: Optional[str] = None,
                 purpose: Optional[str] = None,
                 status: Optional[str] = None,
                 summary: Optional['outputs.SolutionSummaryResponse'] = None,
                 tool: Optional[str] = None):
        """
        Class for solution properties.
        :param str cleanup_state: Gets or sets the cleanup state of the solution.
        :param 'SolutionDetailsResponseArgs' details: Gets or sets the details of the solution.
        :param str goal: Gets or sets the goal of the solution.
        :param str purpose: Gets or sets the purpose of the solution.
        :param str status: Gets or sets the current status of the solution.
        :param 'SolutionSummaryResponseArgs' summary: Gets or sets the summary of the solution.
        :param str tool: Gets or sets the tool being used in the solution.
        """
        if cleanup_state is not None:
            pulumi.set(__self__, "cleanup_state", cleanup_state)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if goal is not None:
            pulumi.set(__self__, "goal", goal)
        if purpose is not None:
            pulumi.set(__self__, "purpose", purpose)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if tool is not None:
            pulumi.set(__self__, "tool", tool)

    @property
    @pulumi.getter(name="cleanupState")
    def cleanup_state(self) -> Optional[str]:
        """
        Gets or sets the cleanup state of the solution.
        """
        return pulumi.get(self, "cleanup_state")

    @property
    @pulumi.getter
    def details(self) -> Optional['outputs.SolutionDetailsResponse']:
        """
        Gets or sets the details of the solution.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def goal(self) -> Optional[str]:
        """
        Gets or sets the goal of the solution.
        """
        return pulumi.get(self, "goal")

    @property
    @pulumi.getter
    def purpose(self) -> Optional[str]:
        """
        Gets or sets the purpose of the solution.
        """
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Gets or sets the current status of the solution.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def summary(self) -> Optional['outputs.SolutionSummaryResponse']:
        """
        Gets or sets the summary of the solution.
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def tool(self) -> Optional[str]:
        """
        Gets or sets the tool being used in the solution.
        """
        return pulumi.get(self, "tool")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SolutionSummaryResponse(dict):
    """
    The solution summary class.
    """
    def __init__(__self__, *,
                 instance_type: str):
        """
        The solution summary class.
        :param str instance_type: Gets the Instance type.
        """
        pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        """
        return pulumi.get(self, "instance_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


