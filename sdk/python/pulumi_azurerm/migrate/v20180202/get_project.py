# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetProjectResult:
    """
    Azure Migrate Project.
    """
    def __init__(__self__, created_timestamp=None, customer_workspace_id=None, customer_workspace_location=None, discovery_status=None, e_tag=None, last_assessment_timestamp=None, last_discovery_session_id=None, last_discovery_timestamp=None, location=None, name=None, number_of_assessments=None, number_of_groups=None, number_of_machines=None, provisioning_state=None, tags=None, type=None, updated_timestamp=None):
        if created_timestamp and not isinstance(created_timestamp, str):
            raise TypeError("Expected argument 'created_timestamp' to be a str")
        __self__.created_timestamp = created_timestamp
        """
        Time when this project was created. Date-Time represented in ISO-8601 format.
        """
        if customer_workspace_id and not isinstance(customer_workspace_id, str):
            raise TypeError("Expected argument 'customer_workspace_id' to be a str")
        __self__.customer_workspace_id = customer_workspace_id
        """
        ARM ID of the Service Map workspace created by user.
        """
        if customer_workspace_location and not isinstance(customer_workspace_location, str):
            raise TypeError("Expected argument 'customer_workspace_location' to be a str")
        __self__.customer_workspace_location = customer_workspace_location
        """
        Location of the Service Map workspace created by user.
        """
        if discovery_status and not isinstance(discovery_status, str):
            raise TypeError("Expected argument 'discovery_status' to be a str")
        __self__.discovery_status = discovery_status
        """
        Reports whether project is under discovery.
        """
        if e_tag and not isinstance(e_tag, str):
            raise TypeError("Expected argument 'e_tag' to be a str")
        __self__.e_tag = e_tag
        """
        For optimistic concurrency control.
        """
        if last_assessment_timestamp and not isinstance(last_assessment_timestamp, str):
            raise TypeError("Expected argument 'last_assessment_timestamp' to be a str")
        __self__.last_assessment_timestamp = last_assessment_timestamp
        """
        Time when last assessment was created. Date-Time represented in ISO-8601 format. This value will be null until assessment is created.
        """
        if last_discovery_session_id and not isinstance(last_discovery_session_id, str):
            raise TypeError("Expected argument 'last_discovery_session_id' to be a str")
        __self__.last_discovery_session_id = last_discovery_session_id
        """
        Session id of the last discovery.
        """
        if last_discovery_timestamp and not isinstance(last_discovery_timestamp, str):
            raise TypeError("Expected argument 'last_discovery_timestamp' to be a str")
        __self__.last_discovery_timestamp = last_discovery_timestamp
        """
        Time when this project was created. Date-Time represented in ISO-8601 format. This value will be null until discovery is complete.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Azure location in which project is created.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Name of the project.
        """
        if number_of_assessments and not isinstance(number_of_assessments, float):
            raise TypeError("Expected argument 'number_of_assessments' to be a float")
        __self__.number_of_assessments = number_of_assessments
        """
        Number of assessments created in the project.
        """
        if number_of_groups and not isinstance(number_of_groups, float):
            raise TypeError("Expected argument 'number_of_groups' to be a float")
        __self__.number_of_groups = number_of_groups
        """
        Number of groups created in the project.
        """
        if number_of_machines and not isinstance(number_of_machines, float):
            raise TypeError("Expected argument 'number_of_machines' to be a float")
        __self__.number_of_machines = number_of_machines
        """
        Number of machines in the project.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Provisioning state of the project.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Tags provided by Azure Tagging service.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Type of the object = [Microsoft.Migrate/projects].
        """
        if updated_timestamp and not isinstance(updated_timestamp, str):
            raise TypeError("Expected argument 'updated_timestamp' to be a str")
        __self__.updated_timestamp = updated_timestamp
        """
        Time when this project was last updated. Date-Time represented in ISO-8601 format.
        """


class AwaitableGetProjectResult(GetProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectResult(
            created_timestamp=self.created_timestamp,
            customer_workspace_id=self.customer_workspace_id,
            customer_workspace_location=self.customer_workspace_location,
            discovery_status=self.discovery_status,
            e_tag=self.e_tag,
            last_assessment_timestamp=self.last_assessment_timestamp,
            last_discovery_session_id=self.last_discovery_session_id,
            last_discovery_timestamp=self.last_discovery_timestamp,
            location=self.location,
            name=self.name,
            number_of_assessments=self.number_of_assessments,
            number_of_groups=self.number_of_groups,
            number_of_machines=self.number_of_machines,
            provisioning_state=self.provisioning_state,
            tags=self.tags,
            type=self.type,
            updated_timestamp=self.updated_timestamp)


def get_project(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of the Azure Migrate project.
    :param str resource_group_name: Name of the Azure Resource Group that project is part of.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:migrate/v20180202:getProject', __args__, opts=opts).value

    return AwaitableGetProjectResult(
        created_timestamp=__ret__.get('createdTimestamp'),
        customer_workspace_id=__ret__.get('customerWorkspaceId'),
        customer_workspace_location=__ret__.get('customerWorkspaceLocation'),
        discovery_status=__ret__.get('discoveryStatus'),
        e_tag=__ret__.get('eTag'),
        last_assessment_timestamp=__ret__.get('lastAssessmentTimestamp'),
        last_discovery_session_id=__ret__.get('lastDiscoverySessionId'),
        last_discovery_timestamp=__ret__.get('lastDiscoveryTimestamp'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        number_of_assessments=__ret__.get('numberOfAssessments'),
        number_of_groups=__ret__.get('numberOfGroups'),
        number_of_machines=__ret__.get('numberOfMachines'),
        provisioning_state=__ret__.get('provisioningState'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        updated_timestamp=__ret__.get('updatedTimestamp'))
