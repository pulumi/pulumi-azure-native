# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Assessment(pulumi.CustomResource):
    e_tag: pulumi.Output[str]
    """
    For optimistic concurrency control.
    """
    name: pulumi.Output[str]
    """
    Unique name of an assessment.
    """
    properties: pulumi.Output[dict]
    """
    Properties of the assessment.
      * `azure_hybrid_use_benefit` (`str`) - AHUB discount on windows virtual machines.
      * `azure_location` (`str`) - Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
      * `azure_offer_code` (`str`) - Offer code according to which cost estimation is done.
      * `azure_pricing_tier` (`str`) - Pricing tier for Size evaluation.
      * `azure_storage_redundancy` (`str`) - Storage Redundancy type offered by Azure.
      * `confidence_rating_in_percentage` (`float`) - Confidence rating percentage for assessment. Can be in the range [0, 100].
      * `created_timestamp` (`str`) - Time when this project was created. Date-Time represented in ISO-8601 format.
      * `currency` (`str`) - Currency to report prices in.
      * `discount_percentage` (`float`) - Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
      * `monthly_bandwidth_cost` (`float`) - Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
      * `monthly_compute_cost` (`float`) - Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
      * `monthly_storage_cost` (`float`) - Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
      * `number_of_machines` (`float`) - Number of assessed machines part of this assessment.
      * `percentile` (`str`) - Percentile of performance data used to recommend Azure size.
      * `prices_timestamp` (`str`) - Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format.
      * `scaling_factor` (`float`) - Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.
      * `sizing_criterion` (`str`) - Assessment sizing criterion.
      * `stage` (`str`) - User configurable setting that describes the status of the assessment.
      * `status` (`str`) - Whether the assessment has been created and is valid.
      * `time_range` (`str`) - Time range of performance data used to recommend a size.
      * `updated_timestamp` (`str`) - Time when this project was last updated. Date-Time represented in ISO-8601 format.
    """
    type: pulumi.Output[str]
    """
    Type of the object = [Microsoft.Migrate/projects/groups/assessments].
    """
    def __init__(__self__, resource_name, opts=None, azure_hybrid_use_benefit=None, azure_location=None, azure_offer_code=None, azure_pricing_tier=None, azure_storage_redundancy=None, currency=None, discount_percentage=None, e_tag=None, group_name=None, name=None, percentile=None, project_name=None, resource_group_name=None, scaling_factor=None, sizing_criterion=None, stage=None, time_range=None, __props__=None, __name__=None, __opts__=None):
        """
        An assessment created for a group in the Migration project.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] azure_hybrid_use_benefit: AHUB discount on windows virtual machines.
        :param pulumi.Input[str] azure_location: Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
        :param pulumi.Input[str] azure_offer_code: Offer code according to which cost estimation is done.
        :param pulumi.Input[str] azure_pricing_tier: Pricing tier for Size evaluation.
        :param pulumi.Input[str] azure_storage_redundancy: Storage Redundancy type offered by Azure.
        :param pulumi.Input[str] currency: Currency to report prices in.
        :param pulumi.Input[float] discount_percentage: Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
        :param pulumi.Input[str] e_tag: For optimistic concurrency control.
        :param pulumi.Input[str] group_name: Unique name of a group within a project.
        :param pulumi.Input[str] name: Unique name of an assessment within a project.
        :param pulumi.Input[str] percentile: Percentile of performance data used to recommend Azure size.
        :param pulumi.Input[str] project_name: Name of the Azure Migrate project.
        :param pulumi.Input[str] resource_group_name: Name of the Azure Resource Group that project is part of.
        :param pulumi.Input[float] scaling_factor: Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.
        :param pulumi.Input[str] sizing_criterion: Assessment sizing criterion.
        :param pulumi.Input[str] stage: User configurable setting that describes the status of the assessment.
        :param pulumi.Input[str] time_range: Time range of performance data used to recommend a size.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if azure_hybrid_use_benefit is None:
                raise TypeError("Missing required property 'azure_hybrid_use_benefit'")
            __props__['azure_hybrid_use_benefit'] = azure_hybrid_use_benefit
            if azure_location is None:
                raise TypeError("Missing required property 'azure_location'")
            __props__['azure_location'] = azure_location
            if azure_offer_code is None:
                raise TypeError("Missing required property 'azure_offer_code'")
            __props__['azure_offer_code'] = azure_offer_code
            if azure_pricing_tier is None:
                raise TypeError("Missing required property 'azure_pricing_tier'")
            __props__['azure_pricing_tier'] = azure_pricing_tier
            if azure_storage_redundancy is None:
                raise TypeError("Missing required property 'azure_storage_redundancy'")
            __props__['azure_storage_redundancy'] = azure_storage_redundancy
            if currency is None:
                raise TypeError("Missing required property 'currency'")
            __props__['currency'] = currency
            if discount_percentage is None:
                raise TypeError("Missing required property 'discount_percentage'")
            __props__['discount_percentage'] = discount_percentage
            __props__['e_tag'] = e_tag
            if group_name is None:
                raise TypeError("Missing required property 'group_name'")
            __props__['group_name'] = group_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if percentile is None:
                raise TypeError("Missing required property 'percentile'")
            __props__['percentile'] = percentile
            if project_name is None:
                raise TypeError("Missing required property 'project_name'")
            __props__['project_name'] = project_name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if scaling_factor is None:
                raise TypeError("Missing required property 'scaling_factor'")
            __props__['scaling_factor'] = scaling_factor
            if sizing_criterion is None:
                raise TypeError("Missing required property 'sizing_criterion'")
            __props__['sizing_criterion'] = sizing_criterion
            if stage is None:
                raise TypeError("Missing required property 'stage'")
            __props__['stage'] = stage
            if time_range is None:
                raise TypeError("Missing required property 'time_range'")
            __props__['time_range'] = time_range
            __props__['properties'] = None
            __props__['type'] = None
        super(Assessment, __self__).__init__(
            'azurerm:migrate/v20180202:Assessment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Assessment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Assessment(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
