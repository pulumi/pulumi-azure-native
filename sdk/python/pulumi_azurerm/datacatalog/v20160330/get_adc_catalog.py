# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetADCCatalogResult:
    """
    Azure Data Catalog.
    """
    def __init__(__self__, admins=None, enable_automatic_unit_adjustment=None, etag=None, location=None, name=None, sku=None, successfully_provisioned=None, tags=None, type=None, units=None, users=None):
        if admins and not isinstance(admins, list):
            raise TypeError("Expected argument 'admins' to be a list")
        __self__.admins = admins
        """
        Azure data catalog admin list.
        """
        if enable_automatic_unit_adjustment and not isinstance(enable_automatic_unit_adjustment, bool):
            raise TypeError("Expected argument 'enable_automatic_unit_adjustment' to be a bool")
        __self__.enable_automatic_unit_adjustment = enable_automatic_unit_adjustment
        """
        Automatic unit adjustment enabled or not.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Resource etag
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if sku and not isinstance(sku, str):
            raise TypeError("Expected argument 'sku' to be a str")
        __self__.sku = sku
        """
        Azure data catalog SKU.
        """
        if successfully_provisioned and not isinstance(successfully_provisioned, bool):
            raise TypeError("Expected argument 'successfully_provisioned' to be a bool")
        __self__.successfully_provisioned = successfully_provisioned
        """
        Azure data catalog provision status.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """
        if units and not isinstance(units, float):
            raise TypeError("Expected argument 'units' to be a float")
        __self__.units = units
        """
        Azure data catalog units.
        """
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        __self__.users = users
        """
        Azure data catalog user list.
        """


class AwaitableGetADCCatalogResult(GetADCCatalogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetADCCatalogResult(
            admins=self.admins,
            enable_automatic_unit_adjustment=self.enable_automatic_unit_adjustment,
            etag=self.etag,
            location=self.location,
            name=self.name,
            sku=self.sku,
            successfully_provisioned=self.successfully_provisioned,
            tags=self.tags,
            type=self.type,
            units=self.units,
            users=self.users)


def get_adc_catalog(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the data catalog in the specified subscription and resource group.
    :param str resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:datacatalog/v20160330:getADCCatalog', __args__, opts=opts).value

    return AwaitableGetADCCatalogResult(
        admins=__ret__.get('admins'),
        enable_automatic_unit_adjustment=__ret__.get('enableAutomaticUnitAdjustment'),
        etag=__ret__.get('etag'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        sku=__ret__.get('sku'),
        successfully_provisioned=__ret__.get('successfullyProvisioned'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        units=__ret__.get('units'),
        users=__ret__.get('users'))
