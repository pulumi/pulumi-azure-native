# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class AdaptiveApplicationControl(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Location where the resource is stored
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Represents a VM/server group and set of rules to be allowed running on a machine
      * `configuration_status` (`str`) - The configuration status of the VM/server group or machine or rule on the machine
      * `enforcement_mode` (`str`) - The application control policy enforcement/protection mode of the VM/server group
      * `issues` (`dict`)
      * `path_recommendations` (`dict`)
      * `protection_mode` (`dict`) - The protection mode of the collection/file types. Exe/Msi/Script are used for Windows, Executable is used for Linux.
        * `exe` (`str`) - The application control policy enforcement/protection mode of the VM/server group
        * `executable` (`str`) - The application control policy enforcement/protection mode of the VM/server group
        * `msi` (`str`) - The application control policy enforcement/protection mode of the VM/server group
        * `script` (`str`) - The application control policy enforcement/protection mode of the VM/server group

      * `recommendation_status` (`str`) - The recommendation status of the VM/server group or VM/server
      * `source_system` (`str`) - The source type of the VM/server group
      * `vm_recommendations` (`dict`)
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, asc_location=None, name=None, properties=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a AdaptiveApplicationControl resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations
        :param pulumi.Input[str] name: Name of an application control VM/server group
        :param pulumi.Input[dict] properties: Represents a VM/server group and set of rules to be allowed running on a machine

        The **properties** object supports the following:

          * `enforcement_mode` (`pulumi.Input[str]`) - The application control policy enforcement/protection mode of the VM/server group
          * `path_recommendations` (`pulumi.Input[dict]`)
          * `protection_mode` (`pulumi.Input[dict]`) - The protection mode of the collection/file types. Exe/Msi/Script are used for Windows, Executable is used for Linux.
            * `exe` (`pulumi.Input[str]`) - The application control policy enforcement/protection mode of the VM/server group
            * `executable` (`pulumi.Input[str]`) - The application control policy enforcement/protection mode of the VM/server group
            * `msi` (`pulumi.Input[str]`) - The application control policy enforcement/protection mode of the VM/server group
            * `script` (`pulumi.Input[str]`) - The application control policy enforcement/protection mode of the VM/server group

          * `vm_recommendations` (`pulumi.Input[dict]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if asc_location is None:
                raise TypeError("Missing required property 'asc_location'")
            __props__['asc_location'] = asc_location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if properties is None:
                raise TypeError("Missing required property 'properties'")
            __props__['properties'] = properties
            __props__['location'] = None
            __props__['type'] = None
        super(AdaptiveApplicationControl, __self__).__init__(
            'azurerm:security/v20200101:AdaptiveApplicationControl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing AdaptiveApplicationControl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return AdaptiveApplicationControl(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
