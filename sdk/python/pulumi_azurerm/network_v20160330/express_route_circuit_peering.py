# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class ExpressRouteCircuitPeering(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    A unique read-only string that changes whenever the resource is updated
    """
    name: pulumi.Output[str]
    """
    Gets name of the resource that is unique within a resource group. This name can be used to access the resource
    """
    properties: pulumi.Output[dict]
    def __init__(__self__, resource_name, opts=None, circuit_name=None, etag=None, id=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Peering in a ExpressRouteCircuit resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] circuit_name: The name of the express route circuit.
        :param pulumi.Input[str] etag: A unique read-only string that changes whenever the resource is updated
        :param pulumi.Input[str] id: Resource Id
        :param pulumi.Input[str] name: The name of the peering.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.

        The **properties** object supports the following:

          * `azure_asn` (`pulumi.Input[float]`) - Gets or sets the azure ASN
          * `microsoft_peering_config` (`pulumi.Input[dict]`) - Gets or sets the Microsoft peering config
            * `advertised_public_prefixes` (`pulumi.Input[list]`) - Gets or sets the reference of AdvertisedPublicPrefixes
            * `advertised_public_prefixes_state` (`pulumi.Input[str]`) - Gets or sets AdvertisedPublicPrefixState of the Peering resource 
            * `customer_asn` (`pulumi.Input[float]`) - Gets or Sets CustomerAsn of the peering.
            * `routing_registry_name` (`pulumi.Input[str]`) - Gets or Sets RoutingRegistryName of the config.

          * `peer_asn` (`pulumi.Input[float]`) - Gets or sets the peer ASN
          * `peering_type` (`pulumi.Input[str]`) - Gets or sets PeeringType
          * `primary_azure_port` (`pulumi.Input[str]`) - Gets or sets the primary port
          * `primary_peer_address_prefix` (`pulumi.Input[str]`) - Gets or sets the primary address prefix
          * `provisioning_state` (`pulumi.Input[str]`) - Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
          * `secondary_azure_port` (`pulumi.Input[str]`) - Gets or sets the secondary port
          * `secondary_peer_address_prefix` (`pulumi.Input[str]`) - Gets or sets the secondary address prefix
          * `shared_key` (`pulumi.Input[str]`) - Gets or sets the shared key
          * `state` (`pulumi.Input[str]`) - Gets or sets state of Peering
          * `stats` (`pulumi.Input[dict]`) - Gets or peering stats
            * `primarybytes_in` (`pulumi.Input[float]`) - Gets BytesIn of the peering.
            * `primarybytes_out` (`pulumi.Input[float]`) - Gets BytesOut of the peering.
            * `secondarybytes_in` (`pulumi.Input[float]`) - Gets BytesIn of the peering.
            * `secondarybytes_out` (`pulumi.Input[float]`) - Gets BytesOut of the peering.

          * `vlan_id` (`pulumi.Input[float]`) - Gets or sets the vlan id
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if circuit_name is None:
                raise TypeError("Missing required property 'circuit_name'")
            __props__['circuit_name'] = circuit_name
            __props__['etag'] = etag
            __props__['id'] = id
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
        super(ExpressRouteCircuitPeering, __self__).__init__(
            'azurerm:network/v20160330:ExpressRouteCircuitPeering',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ExpressRouteCircuitPeering resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ExpressRouteCircuitPeering(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
