# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetUserAssignedIdentityResult:
    """
    Describes an identity resource.
    """
    def __init__(__self__, client_id=None, location=None, name=None, principal_id=None, tags=None, tenant_id=None, type=None):
        if client_id and not isinstance(client_id, str):
            raise TypeError("Expected argument 'client_id' to be a str")
        __self__.client_id = client_id
        """
        The id of the app associated with the identity. This is a random generated UUID by MSI.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The geo-location where the resource lives
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource
        """
        if principal_id and not isinstance(principal_id, str):
            raise TypeError("Expected argument 'principal_id' to be a str")
        __self__.principal_id = principal_id
        """
        The id of the service principal object associated with the created identity.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        __self__.tenant_id = tenant_id
        """
        The id of the tenant which the identity belongs to.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        """


class AwaitableGetUserAssignedIdentityResult(GetUserAssignedIdentityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserAssignedIdentityResult(
            client_id=self.client_id,
            location=self.location,
            name=self.name,
            principal_id=self.principal_id,
            tags=self.tags,
            tenant_id=self.tenant_id,
            type=self.type)


def get_user_assigned_identity(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the identity resource.
    :param str resource_group_name: The name of the Resource Group to which the identity belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:managedidentity/v20181130:getUserAssignedIdentity', __args__, opts=opts).value

    return AwaitableGetUserAssignedIdentityResult(
        client_id=__ret__.get('clientId'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        principal_id=__ret__.get('principalId'),
        tags=__ret__.get('tags'),
        tenant_id=__ret__.get('tenantId'),
        type=__ret__.get('type'))
