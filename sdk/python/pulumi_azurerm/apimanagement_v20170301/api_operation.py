# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class ApiOperation(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    Properties of the Operation Contract.
      * `description` (`str`) - Description of the operation. May include HTML formatting tags.
      * `display_name` (`str`) - Operation Name.
      * `method` (`str`) - A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
      * `policies` (`str`) - Operation Policies
      * `request` (`dict`) - An entity containing request details.
        * `description` (`str`) - Operation request description.
        * `headers` (`list`) - Collection of operation request headers.
          * `default_value` (`str`) - Default parameter value.
          * `description` (`str`) - Parameter description.
          * `name` (`str`) - Parameter name.
          * `required` (`bool`) - whether parameter is required or not.
          * `type` (`str`) - Parameter type.
          * `values` (`list`) - Parameter values.

        * `query_parameters` (`list`) - Collection of operation request query parameters.
        * `representations` (`list`) - Collection of operation request representations.
          * `content_type` (`str`) - Specifies a registered or custom content type for this representation, e.g. application/xml.
          * `form_parameters` (`list`) - Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'..
          * `sample` (`str`) - An example of the representation.
          * `schema_id` (`str`) - Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
          * `type_name` (`str`) - Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.

      * `responses` (`list`) - Array of Operation responses.
        * `description` (`str`) - Operation response description.
        * `headers` (`list`) - Collection of operation response headers.
        * `representations` (`list`) - Collection of operation response representations.
        * `status_code` (`float`) - Operation response HTTP status code.

      * `template_parameters` (`list`) - Collection of URL template parameters.
      * `url_template` (`str`) - Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
    """
    type: pulumi.Output[str]
    """
    Resource type for API Management resource.
    """
    def __init__(__self__, resource_name, opts=None, api_id=None, name=None, properties=None, resource_group_name=None, service_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Api Operation details.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_id: API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
        :param pulumi.Input[str] name: Operation identifier within an API. Must be unique in the current API Management service instance.
        :param pulumi.Input[dict] properties: Properties of the Operation Contract.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[str] service_name: The name of the API Management service.

        The **properties** object supports the following:

          * `description` (`pulumi.Input[str]`) - Description of the operation. May include HTML formatting tags.
          * `display_name` (`pulumi.Input[str]`) - Operation Name.
          * `method` (`pulumi.Input[str]`) - A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
          * `policies` (`pulumi.Input[str]`) - Operation Policies
          * `request` (`pulumi.Input[dict]`) - An entity containing request details.
            * `description` (`pulumi.Input[str]`) - Operation request description.
            * `headers` (`pulumi.Input[list]`) - Collection of operation request headers.
              * `default_value` (`pulumi.Input[str]`) - Default parameter value.
              * `description` (`pulumi.Input[str]`) - Parameter description.
              * `name` (`pulumi.Input[str]`) - Parameter name.
              * `required` (`pulumi.Input[bool]`) - whether parameter is required or not.
              * `type` (`pulumi.Input[str]`) - Parameter type.
              * `values` (`pulumi.Input[list]`) - Parameter values.

            * `query_parameters` (`pulumi.Input[list]`) - Collection of operation request query parameters.
            * `representations` (`pulumi.Input[list]`) - Collection of operation request representations.
              * `content_type` (`pulumi.Input[str]`) - Specifies a registered or custom content type for this representation, e.g. application/xml.
              * `form_parameters` (`pulumi.Input[list]`) - Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'..
              * `sample` (`pulumi.Input[str]`) - An example of the representation.
              * `schema_id` (`pulumi.Input[str]`) - Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
              * `type_name` (`pulumi.Input[str]`) - Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.

          * `responses` (`pulumi.Input[list]`) - Array of Operation responses.
            * `description` (`pulumi.Input[str]`) - Operation response description.
            * `headers` (`pulumi.Input[list]`) - Collection of operation response headers.
            * `representations` (`pulumi.Input[list]`) - Collection of operation response representations.
            * `status_code` (`pulumi.Input[float]`) - Operation response HTTP status code.

          * `template_parameters` (`pulumi.Input[list]`) - Collection of URL template parameters.
          * `url_template` (`pulumi.Input[str]`) - Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if api_id is None:
                raise TypeError("Missing required property 'api_id'")
            __props__['api_id'] = api_id
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if service_name is None:
                raise TypeError("Missing required property 'service_name'")
            __props__['service_name'] = service_name
            __props__['type'] = None
        super(ApiOperation, __self__).__init__(
            'azurerm:apimanagement/v20170301:ApiOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ApiOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ApiOperation(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
