# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class HubProfile(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    The profile type definition.
      * `api_entity_set_name` (`str`) - The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
      * `attributes` (`dict`) - The attributes for the Type.
      * `description` (`dict`) - Localized descriptions for the property.
      * `display_name` (`dict`) - Localized display names for the property.
      * `entity_type` (`str`) - Type of entity.
      * `fields` (`list`) - The properties of the Profile.
        * `array_value_separator` (`str`) - Array value separator for properties with isArray set.
        * `data_source_precedence_rules` (`list`) - This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
          * `data_source` (`dict`) - Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
            * `data_source_reference_id` (`str`) - The data source reference id.
            * `data_source_type` (`str`) - The data source type.
            * `id` (`float`) - The data source ID.
            * `name` (`str`) - The data source name
            * `status` (`str`) - The data source status.

          * `precedence` (`float`) - the precedence value.

        * `enum_valid_values` (`list`) - Describes valid values for an enum property.
          * `localized_value_names` (`dict`) - Localized names of the enum member.
          * `value` (`float`) - The integer value of the enum member.

        * `field_name` (`str`) - Name of the property.
        * `field_type` (`str`) - Type of the property.
        * `is_array` (`bool`) - Indicates if the property is actually an array of the fieldType above on the data api.
        * `is_available_in_graph` (`bool`) - Whether property is available in graph or not.
        * `is_enum` (`bool`) - Indicates if the property is an enum.
        * `is_flag_enum` (`bool`) - Indicates if the property is an flag enum.
        * `is_image` (`bool`) - Whether the property is an Image.
        * `is_localized_string` (`bool`) - Whether the property is a localized string.
        * `is_name` (`bool`) - Whether the property is a name or a part of name.
        * `is_required` (`bool`) - Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
        * `max_length` (`float`) - Max length of string. Used only if type is string.
        * `property_id` (`str`) - The ID associated with the property.
        * `schema_item_prop_link` (`str`) - URL encoded schema.org item prop link for the property.

      * `instances_count` (`float`) - The instance count.
      * `large_image` (`str`) - Large Image associated with the Property or EntityType.
      * `last_changed_utc` (`str`) - The last changed time for the type definition.
      * `localized_attributes` (`dict`) - Any custom localized attributes for the Type.
      * `medium_image` (`str`) - Medium Image associated with the Property or EntityType.
      * `provisioning_state` (`str`) - Provisioning state.
      * `schema_item_type_link` (`str`) - The schema org link. This helps ACI identify and suggest semantic models.
      * `small_image` (`str`) - Small Image associated with the Property or EntityType.
      * `strong_ids` (`list`) - The strong IDs.
        * `description` (`dict`) - Localized descriptions.
        * `display_name` (`dict`) - Localized display name.
        * `key_property_names` (`list`) - The properties which make up the unique ID.
        * `strong_id_name` (`str`) - The Name identifying the strong ID.

      * `tenant_id` (`str`) - The hub name.
      * `timestamp_field_name` (`str`) - The timestamp property name. Represents the time when the interaction or profile update happened.
      * `type_name` (`str`) - The name of the entity.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, hub_name=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The profile resource format.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] hub_name: The name of the hub.
        :param pulumi.Input[str] name: The name of the profile.
        :param pulumi.Input[dict] properties: The profile type definition.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.

        The **properties** object supports the following:

          * `api_entity_set_name` (`pulumi.Input[str]`) - The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
          * `attributes` (`pulumi.Input[dict]`) - The attributes for the Type.
          * `description` (`pulumi.Input[dict]`) - Localized descriptions for the property.
          * `display_name` (`pulumi.Input[dict]`) - Localized display names for the property.
          * `entity_type` (`pulumi.Input[str]`) - Type of entity.
          * `fields` (`pulumi.Input[list]`) - The properties of the Profile.
            * `array_value_separator` (`pulumi.Input[str]`) - Array value separator for properties with isArray set.
            * `enum_valid_values` (`pulumi.Input[list]`) - Describes valid values for an enum property.
              * `localized_value_names` (`pulumi.Input[dict]`) - Localized names of the enum member.
              * `value` (`pulumi.Input[float]`) - The integer value of the enum member.

            * `field_name` (`pulumi.Input[str]`) - Name of the property.
            * `field_type` (`pulumi.Input[str]`) - Type of the property.
            * `is_array` (`pulumi.Input[bool]`) - Indicates if the property is actually an array of the fieldType above on the data api.
            * `is_available_in_graph` (`pulumi.Input[bool]`) - Whether property is available in graph or not.
            * `is_enum` (`pulumi.Input[bool]`) - Indicates if the property is an enum.
            * `is_flag_enum` (`pulumi.Input[bool]`) - Indicates if the property is an flag enum.
            * `is_image` (`pulumi.Input[bool]`) - Whether the property is an Image.
            * `is_localized_string` (`pulumi.Input[bool]`) - Whether the property is a localized string.
            * `is_name` (`pulumi.Input[bool]`) - Whether the property is a name or a part of name.
            * `is_required` (`pulumi.Input[bool]`) - Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
            * `max_length` (`pulumi.Input[float]`) - Max length of string. Used only if type is string.
            * `property_id` (`pulumi.Input[str]`) - The ID associated with the property.
            * `schema_item_prop_link` (`pulumi.Input[str]`) - URL encoded schema.org item prop link for the property.

          * `instances_count` (`pulumi.Input[float]`) - The instance count.
          * `large_image` (`pulumi.Input[str]`) - Large Image associated with the Property or EntityType.
          * `localized_attributes` (`pulumi.Input[dict]`) - Any custom localized attributes for the Type.
          * `medium_image` (`pulumi.Input[str]`) - Medium Image associated with the Property or EntityType.
          * `schema_item_type_link` (`pulumi.Input[str]`) - The schema org link. This helps ACI identify and suggest semantic models.
          * `small_image` (`pulumi.Input[str]`) - Small Image associated with the Property or EntityType.
          * `strong_ids` (`pulumi.Input[list]`) - The strong IDs.
            * `description` (`pulumi.Input[dict]`) - Localized descriptions.
            * `display_name` (`pulumi.Input[dict]`) - Localized display name.
            * `key_property_names` (`pulumi.Input[list]`) - The properties which make up the unique ID.
            * `strong_id_name` (`pulumi.Input[str]`) - The Name identifying the strong ID.

          * `timestamp_field_name` (`pulumi.Input[str]`) - The timestamp property name. Represents the time when the interaction or profile update happened.
          * `type_name` (`pulumi.Input[str]`) - The name of the entity.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if hub_name is None:
                raise TypeError("Missing required property 'hub_name'")
            __props__['hub_name'] = hub_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['type'] = None
        super(HubProfile, __self__).__init__(
            'azurerm:customerinsights:HubProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, name=None, properties=None, type=None):
        """
        Get an existing HubProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Resource name.
        :param pulumi.Input[dict] properties: The profile type definition.
        :param pulumi.Input[str] type: Resource type.

        The **properties** object supports the following:

          * `api_entity_set_name` (`pulumi.Input[str]`) - The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
          * `attributes` (`pulumi.Input[dict]`) - The attributes for the Type.
          * `description` (`pulumi.Input[dict]`) - Localized descriptions for the property.
          * `display_name` (`pulumi.Input[dict]`) - Localized display names for the property.
          * `entity_type` (`pulumi.Input[str]`) - Type of entity.
          * `fields` (`pulumi.Input[list]`) - The properties of the Profile.
            * `array_value_separator` (`pulumi.Input[str]`) - Array value separator for properties with isArray set.
            * `data_source_precedence_rules` (`pulumi.Input[list]`) - This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
              * `data_source` (`pulumi.Input[dict]`) - Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
                * `data_source_reference_id` (`pulumi.Input[str]`) - The data source reference id.
                * `data_source_type` (`pulumi.Input[str]`) - The data source type.
                * `id` (`pulumi.Input[float]`) - The data source ID.
                * `name` (`pulumi.Input[str]`) - The data source name
                * `status` (`pulumi.Input[str]`) - The data source status.

              * `precedence` (`pulumi.Input[float]`) - the precedence value.

            * `enum_valid_values` (`pulumi.Input[list]`) - Describes valid values for an enum property.
              * `localized_value_names` (`pulumi.Input[dict]`) - Localized names of the enum member.
              * `value` (`pulumi.Input[float]`) - The integer value of the enum member.

            * `field_name` (`pulumi.Input[str]`) - Name of the property.
            * `field_type` (`pulumi.Input[str]`) - Type of the property.
            * `is_array` (`pulumi.Input[bool]`) - Indicates if the property is actually an array of the fieldType above on the data api.
            * `is_available_in_graph` (`pulumi.Input[bool]`) - Whether property is available in graph or not.
            * `is_enum` (`pulumi.Input[bool]`) - Indicates if the property is an enum.
            * `is_flag_enum` (`pulumi.Input[bool]`) - Indicates if the property is an flag enum.
            * `is_image` (`pulumi.Input[bool]`) - Whether the property is an Image.
            * `is_localized_string` (`pulumi.Input[bool]`) - Whether the property is a localized string.
            * `is_name` (`pulumi.Input[bool]`) - Whether the property is a name or a part of name.
            * `is_required` (`pulumi.Input[bool]`) - Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
            * `max_length` (`pulumi.Input[float]`) - Max length of string. Used only if type is string.
            * `property_id` (`pulumi.Input[str]`) - The ID associated with the property.
            * `schema_item_prop_link` (`pulumi.Input[str]`) - URL encoded schema.org item prop link for the property.

          * `instances_count` (`pulumi.Input[float]`) - The instance count.
          * `large_image` (`pulumi.Input[str]`) - Large Image associated with the Property or EntityType.
          * `last_changed_utc` (`pulumi.Input[str]`) - The last changed time for the type definition.
          * `localized_attributes` (`pulumi.Input[dict]`) - Any custom localized attributes for the Type.
          * `medium_image` (`pulumi.Input[str]`) - Medium Image associated with the Property or EntityType.
          * `provisioning_state` (`pulumi.Input[str]`) - Provisioning state.
          * `schema_item_type_link` (`pulumi.Input[str]`) - The schema org link. This helps ACI identify and suggest semantic models.
          * `small_image` (`pulumi.Input[str]`) - Small Image associated with the Property or EntityType.
          * `strong_ids` (`pulumi.Input[list]`) - The strong IDs.
            * `description` (`pulumi.Input[dict]`) - Localized descriptions.
            * `display_name` (`pulumi.Input[dict]`) - Localized display name.
            * `key_property_names` (`pulumi.Input[list]`) - The properties which make up the unique ID.
            * `strong_id_name` (`pulumi.Input[str]`) - The Name identifying the strong ID.

          * `tenant_id` (`pulumi.Input[str]`) - The hub name.
          * `timestamp_field_name` (`pulumi.Input[str]`) - The timestamp property name. Represents the time when the interaction or profile update happened.
          * `type_name` (`pulumi.Input[str]`) - The name of the entity.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["name"] = name
        __props__["properties"] = properties
        __props__["type"] = type
        return HubProfile(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
