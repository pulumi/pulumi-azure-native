# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class HubLink(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    The definition of Link.
      * `description` (`dict`) - Localized descriptions for the Link.
      * `display_name` (`dict`) - Localized display name for the Link.
      * `link_name` (`str`) - The link name.
      * `mappings` (`list`) - The set of properties mappings between the source and target Types.
        * `link_type` (`str`) - Link type.
        * `source_property_name` (`str`) -  Property name on the source Entity Type.
        * `target_property_name` (`str`) - Property name on the target Entity Type.

      * `operation_type` (`str`) - Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
      * `participant_property_references` (`list`) - The properties that represent the participating profile.
        * `source_property_name` (`str`) - The source property that maps to the target property.
        * `target_property_name` (`str`) - The target property that maps to the source property.

      * `provisioning_state` (`str`) - Provisioning state.
      * `reference_only` (`bool`) - Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
      * `source_entity_type` (`str`) - Type of source entity.
      * `source_entity_type_name` (`str`) - Name of the source Entity Type.
      * `target_entity_type` (`str`) - Type of target entity.
      * `target_entity_type_name` (`str`) - Name of the target Entity Type.
      * `tenant_id` (`str`) - The hub name.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, hub_name=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The link resource format.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] hub_name: The name of the hub.
        :param pulumi.Input[str] name: The name of the link.
        :param pulumi.Input[dict] properties: The definition of Link.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.

        The **properties** object supports the following:

          * `description` (`pulumi.Input[dict]`) - Localized descriptions for the Link.
          * `display_name` (`pulumi.Input[dict]`) - Localized display name for the Link.
          * `mappings` (`pulumi.Input[list]`) - The set of properties mappings between the source and target Types.
            * `link_type` (`pulumi.Input[str]`) - Link type.
            * `source_property_name` (`pulumi.Input[str]`) -  Property name on the source Entity Type.
            * `target_property_name` (`pulumi.Input[str]`) - Property name on the target Entity Type.

          * `operation_type` (`pulumi.Input[str]`) - Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
          * `participant_property_references` (`pulumi.Input[list]`) - The properties that represent the participating profile.
            * `source_property_name` (`pulumi.Input[str]`) - The source property that maps to the target property.
            * `target_property_name` (`pulumi.Input[str]`) - The target property that maps to the source property.

          * `reference_only` (`pulumi.Input[bool]`) - Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
          * `source_entity_type` (`pulumi.Input[str]`) - Type of source entity.
          * `source_entity_type_name` (`pulumi.Input[str]`) - Name of the source Entity Type.
          * `target_entity_type` (`pulumi.Input[str]`) - Type of target entity.
          * `target_entity_type_name` (`pulumi.Input[str]`) - Name of the target Entity Type.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if hub_name is None:
                raise TypeError("Missing required property 'hub_name'")
            __props__['hub_name'] = hub_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['type'] = None
        super(HubLink, __self__).__init__(
            'azurerm:customerinsights:HubLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, name=None, properties=None, type=None):
        """
        Get an existing HubLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Resource name.
        :param pulumi.Input[dict] properties: The definition of Link.
        :param pulumi.Input[str] type: Resource type.

        The **properties** object supports the following:

          * `description` (`pulumi.Input[dict]`) - Localized descriptions for the Link.
          * `display_name` (`pulumi.Input[dict]`) - Localized display name for the Link.
          * `link_name` (`pulumi.Input[str]`) - The link name.
          * `mappings` (`pulumi.Input[list]`) - The set of properties mappings between the source and target Types.
            * `link_type` (`pulumi.Input[str]`) - Link type.
            * `source_property_name` (`pulumi.Input[str]`) -  Property name on the source Entity Type.
            * `target_property_name` (`pulumi.Input[str]`) - Property name on the target Entity Type.

          * `operation_type` (`pulumi.Input[str]`) - Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
          * `participant_property_references` (`pulumi.Input[list]`) - The properties that represent the participating profile.
            * `source_property_name` (`pulumi.Input[str]`) - The source property that maps to the target property.
            * `target_property_name` (`pulumi.Input[str]`) - The target property that maps to the source property.

          * `provisioning_state` (`pulumi.Input[str]`) - Provisioning state.
          * `reference_only` (`pulumi.Input[bool]`) - Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
          * `source_entity_type` (`pulumi.Input[str]`) - Type of source entity.
          * `source_entity_type_name` (`pulumi.Input[str]`) - Name of the source Entity Type.
          * `target_entity_type` (`pulumi.Input[str]`) - Type of target entity.
          * `target_entity_type_name` (`pulumi.Input[str]`) - Name of the target Entity Type.
          * `tenant_id` (`pulumi.Input[str]`) - The hub name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["name"] = name
        __props__["properties"] = properties
        __props__["type"] = type
        return HubLink(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
