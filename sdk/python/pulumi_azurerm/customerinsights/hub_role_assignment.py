# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class HubRoleAssignment(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    The Role Assignment definition.
      * `assignment_name` (`str`) - The name of the metadata object.
      * `conflation_policies` (`dict`) - Widget types set for the assignment.
        * `elements` (`list`) - The elements included in the set.
        * `exceptions` (`list`) - The elements that are not included in the set, in case elements contains '*' indicating 'all'.

      * `connectors` (`dict`) - Connectors set for the assignment.
      * `description` (`dict`) - Localized description for the metadata.
      * `display_name` (`dict`) - Localized display names for the metadata.
      * `interactions` (`dict`) - Interactions set for the assignment.
      * `kpis` (`dict`) - Kpis set for the assignment.
      * `links` (`dict`) - Links set for the assignment.
      * `principals` (`list`) - The principals being assigned to.
        * `principal_id` (`str`) - The principal id being assigned to.
        * `principal_metadata` (`dict`) - Other metadata for the principal.
        * `principal_type` (`str`) - The Type of the principal ID.

      * `profiles` (`dict`) - Profiles set for the assignment.
      * `provisioning_state` (`str`) - Provisioning state.
      * `relationship_links` (`dict`) - The Role assignments set for the relationship links.
      * `relationships` (`dict`) - The Role assignments set for the relationships.
      * `role` (`str`) - Type of roles.
      * `role_assignments` (`dict`) - The Role assignments set for the assignment.
      * `sas_policies` (`dict`) - Sas Policies set for the assignment.
      * `segments` (`dict`) - The Role assignments set for the assignment.
      * `tenant_id` (`str`) - The hub name.
      * `views` (`dict`) - Views set for the assignment.
      * `widget_types` (`dict`) - Widget types set for the assignment.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, hub_name=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The Role Assignment resource format.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] hub_name: The name of the hub.
        :param pulumi.Input[str] name: The assignment name
        :param pulumi.Input[dict] properties: The Role Assignment definition.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.

        The **properties** object supports the following:

          * `conflation_policies` (`pulumi.Input[dict]`) - Widget types set for the assignment.
            * `elements` (`pulumi.Input[list]`) - The elements included in the set.
            * `exceptions` (`pulumi.Input[list]`) - The elements that are not included in the set, in case elements contains '*' indicating 'all'.

          * `connectors` (`pulumi.Input[dict]`) - Connectors set for the assignment.
          * `description` (`pulumi.Input[dict]`) - Localized description for the metadata.
          * `display_name` (`pulumi.Input[dict]`) - Localized display names for the metadata.
          * `interactions` (`pulumi.Input[dict]`) - Interactions set for the assignment.
          * `kpis` (`pulumi.Input[dict]`) - Kpis set for the assignment.
          * `links` (`pulumi.Input[dict]`) - Links set for the assignment.
          * `principals` (`pulumi.Input[list]`) - The principals being assigned to.
            * `principal_id` (`pulumi.Input[str]`) - The principal id being assigned to.
            * `principal_metadata` (`pulumi.Input[dict]`) - Other metadata for the principal.
            * `principal_type` (`pulumi.Input[str]`) - The Type of the principal ID.

          * `profiles` (`pulumi.Input[dict]`) - Profiles set for the assignment.
          * `relationship_links` (`pulumi.Input[dict]`) - The Role assignments set for the relationship links.
          * `relationships` (`pulumi.Input[dict]`) - The Role assignments set for the relationships.
          * `role` (`pulumi.Input[str]`) - Type of roles.
          * `role_assignments` (`pulumi.Input[dict]`) - The Role assignments set for the assignment.
          * `sas_policies` (`pulumi.Input[dict]`) - Sas Policies set for the assignment.
          * `segments` (`pulumi.Input[dict]`) - The Role assignments set for the assignment.
          * `views` (`pulumi.Input[dict]`) - Views set for the assignment.
          * `widget_types` (`pulumi.Input[dict]`) - Widget types set for the assignment.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if hub_name is None:
                raise TypeError("Missing required property 'hub_name'")
            __props__['hub_name'] = hub_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['type'] = None
        super(HubRoleAssignment, __self__).__init__(
            'azurerm:customerinsights:HubRoleAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, name=None, properties=None, type=None):
        """
        Get an existing HubRoleAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Resource name.
        :param pulumi.Input[dict] properties: The Role Assignment definition.
        :param pulumi.Input[str] type: Resource type.

        The **properties** object supports the following:

          * `assignment_name` (`pulumi.Input[str]`) - The name of the metadata object.
          * `conflation_policies` (`pulumi.Input[dict]`) - Widget types set for the assignment.
            * `elements` (`pulumi.Input[list]`) - The elements included in the set.
            * `exceptions` (`pulumi.Input[list]`) - The elements that are not included in the set, in case elements contains '*' indicating 'all'.

          * `connectors` (`pulumi.Input[dict]`) - Connectors set for the assignment.
          * `description` (`pulumi.Input[dict]`) - Localized description for the metadata.
          * `display_name` (`pulumi.Input[dict]`) - Localized display names for the metadata.
          * `interactions` (`pulumi.Input[dict]`) - Interactions set for the assignment.
          * `kpis` (`pulumi.Input[dict]`) - Kpis set for the assignment.
          * `links` (`pulumi.Input[dict]`) - Links set for the assignment.
          * `principals` (`pulumi.Input[list]`) - The principals being assigned to.
            * `principal_id` (`pulumi.Input[str]`) - The principal id being assigned to.
            * `principal_metadata` (`pulumi.Input[dict]`) - Other metadata for the principal.
            * `principal_type` (`pulumi.Input[str]`) - The Type of the principal ID.

          * `profiles` (`pulumi.Input[dict]`) - Profiles set for the assignment.
          * `provisioning_state` (`pulumi.Input[str]`) - Provisioning state.
          * `relationship_links` (`pulumi.Input[dict]`) - The Role assignments set for the relationship links.
          * `relationships` (`pulumi.Input[dict]`) - The Role assignments set for the relationships.
          * `role` (`pulumi.Input[str]`) - Type of roles.
          * `role_assignments` (`pulumi.Input[dict]`) - The Role assignments set for the assignment.
          * `sas_policies` (`pulumi.Input[dict]`) - Sas Policies set for the assignment.
          * `segments` (`pulumi.Input[dict]`) - The Role assignments set for the assignment.
          * `tenant_id` (`pulumi.Input[str]`) - The hub name.
          * `views` (`pulumi.Input[dict]`) - Views set for the assignment.
          * `widget_types` (`pulumi.Input[dict]`) - Widget types set for the assignment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["name"] = name
        __props__["properties"] = properties
        __props__["type"] = type
        return HubRoleAssignment(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
