# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Relationship(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    The definition of Relationship.
      * `cardinality` (`str`) - The Relationship Cardinality.
      * `description` (`dict`) - Localized descriptions for the Relationship.
      * `display_name` (`dict`) - Localized display name for the Relationship.
      * `expiry_date_time_utc` (`str`) - The expiry date time in UTC.
      * `fields` (`list`) - The properties of the Relationship.
        * `array_value_separator` (`str`) - Array value separator for properties with isArray set.
        * `data_source_precedence_rules` (`list`) - This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
          * `data_source` (`dict`) - Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
            * `data_source_reference_id` (`str`) - The data source reference id.
            * `data_source_type` (`str`) - The data source type.
            * `id` (`float`) - The data source ID.
            * `name` (`str`) - The data source name
            * `status` (`str`) - The data source status.

          * `precedence` (`float`) - the precedence value.

        * `enum_valid_values` (`list`) - Describes valid values for an enum property.
          * `localized_value_names` (`dict`) - Localized names of the enum member.
          * `value` (`float`) - The integer value of the enum member.

        * `field_name` (`str`) - Name of the property.
        * `field_type` (`str`) - Type of the property.
        * `is_array` (`bool`) - Indicates if the property is actually an array of the fieldType above on the data api.
        * `is_available_in_graph` (`bool`) - Whether property is available in graph or not.
        * `is_enum` (`bool`) - Indicates if the property is an enum.
        * `is_flag_enum` (`bool`) - Indicates if the property is an flag enum.
        * `is_image` (`bool`) - Whether the property is an Image.
        * `is_localized_string` (`bool`) - Whether the property is a localized string.
        * `is_name` (`bool`) - Whether the property is a name or a part of name.
        * `is_required` (`bool`) - Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
        * `max_length` (`float`) - Max length of string. Used only if type is string.
        * `property_id` (`str`) - The ID associated with the property.
        * `schema_item_prop_link` (`str`) - URL encoded schema.org item prop link for the property.

      * `lookup_mappings` (`list`) - Optional property to be used to map fields in profile to their strong ids in related profile.
        * `field_mappings` (`list`) - Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
          * `profile_field_name` (`str`) - Specifies the fieldName in profile.
          * `related_profile_key_property` (`str`) - Specifies the KeyProperty (from StrongId) of the related profile.

      * `profile_type` (`str`) - Profile type.
      * `provisioning_state` (`str`) - Provisioning state.
      * `related_profile_type` (`str`) - Related profile being referenced.
      * `relationship_guid_id` (`str`) - The relationship guid id.
      * `relationship_name` (`str`) - The Relationship name.
      * `tenant_id` (`str`) - The hub name.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, cardinality=None, description=None, display_name=None, expiry_date_time_utc=None, fields=None, hub_name=None, lookup_mappings=None, name=None, profile_type=None, related_profile_type=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The relationship resource format.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cardinality: The Relationship Cardinality.
        :param pulumi.Input[dict] description: Localized descriptions for the Relationship.
        :param pulumi.Input[dict] display_name: Localized display name for the Relationship.
        :param pulumi.Input[str] expiry_date_time_utc: The expiry date time in UTC.
        :param pulumi.Input[list] fields: The properties of the Relationship.
        :param pulumi.Input[str] hub_name: The name of the hub.
        :param pulumi.Input[list] lookup_mappings: Optional property to be used to map fields in profile to their strong ids in related profile.
        :param pulumi.Input[str] name: The name of the Relationship.
        :param pulumi.Input[str] profile_type: Profile type.
        :param pulumi.Input[str] related_profile_type: Related profile being referenced.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.

        The **fields** object supports the following:

          * `array_value_separator` (`pulumi.Input[str]`) - Array value separator for properties with isArray set.
          * `enum_valid_values` (`pulumi.Input[list]`) - Describes valid values for an enum property.
            * `localized_value_names` (`pulumi.Input[dict]`) - Localized names of the enum member.
            * `value` (`pulumi.Input[float]`) - The integer value of the enum member.

          * `field_name` (`pulumi.Input[str]`) - Name of the property.
          * `field_type` (`pulumi.Input[str]`) - Type of the property.
          * `is_array` (`pulumi.Input[bool]`) - Indicates if the property is actually an array of the fieldType above on the data api.
          * `is_available_in_graph` (`pulumi.Input[bool]`) - Whether property is available in graph or not.
          * `is_enum` (`pulumi.Input[bool]`) - Indicates if the property is an enum.
          * `is_flag_enum` (`pulumi.Input[bool]`) - Indicates if the property is an flag enum.
          * `is_image` (`pulumi.Input[bool]`) - Whether the property is an Image.
          * `is_localized_string` (`pulumi.Input[bool]`) - Whether the property is a localized string.
          * `is_name` (`pulumi.Input[bool]`) - Whether the property is a name or a part of name.
          * `is_required` (`pulumi.Input[bool]`) - Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
          * `max_length` (`pulumi.Input[float]`) - Max length of string. Used only if type is string.
          * `property_id` (`pulumi.Input[str]`) - The ID associated with the property.
          * `schema_item_prop_link` (`pulumi.Input[str]`) - URL encoded schema.org item prop link for the property.

        The **lookup_mappings** object supports the following:

          * `field_mappings` (`pulumi.Input[list]`) - Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
            * `profile_field_name` (`pulumi.Input[str]`) - Specifies the fieldName in profile.
            * `related_profile_key_property` (`pulumi.Input[str]`) - Specifies the KeyProperty (from StrongId) of the related profile.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['cardinality'] = cardinality
            __props__['description'] = description
            __props__['display_name'] = display_name
            __props__['expiry_date_time_utc'] = expiry_date_time_utc
            __props__['fields'] = fields
            if hub_name is None:
                raise TypeError("Missing required property 'hub_name'")
            __props__['hub_name'] = hub_name
            __props__['lookup_mappings'] = lookup_mappings
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if profile_type is None:
                raise TypeError("Missing required property 'profile_type'")
            __props__['profile_type'] = profile_type
            if related_profile_type is None:
                raise TypeError("Missing required property 'related_profile_type'")
            __props__['related_profile_type'] = related_profile_type
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['properties'] = None
            __props__['type'] = None
        super(Relationship, __self__).__init__(
            'azurerm:customerinsights/v20170101:Relationship',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Relationship resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Relationship(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
