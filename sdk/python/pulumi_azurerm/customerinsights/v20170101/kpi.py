# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Kpi(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    Defines the KPI Threshold limits.
      * `aliases` (`list`) - The aliases.
        * `alias_name` (`str`) - KPI alias name.
        * `expression` (`str`) - The expression.

      * `calculation_window` (`str`) - The calculation window.
      * `calculation_window_field_name` (`str`) - Name of calculation window field.
      * `description` (`dict`) - Localized description for the KPI.
      * `display_name` (`dict`) - Localized display name for the KPI.
      * `entity_type` (`str`) - The mapping entity type.
      * `entity_type_name` (`str`) - The mapping entity name.
      * `expression` (`str`) - The computation expression for the KPI.
      * `extracts` (`list`) - The KPI extracts.
        * `expression` (`str`) - The expression.
        * `extract_name` (`str`) - KPI extract name.

      * `filter` (`str`) - The filter expression for the KPI.
      * `function` (`str`) - The computation function for the KPI.
      * `group_by` (`list`) - the group by properties for the KPI.
      * `group_by_metadata` (`list`) - The KPI GroupByMetadata.
        * `display_name` (`dict`) - The display name.
        * `field_name` (`str`) - The name of the field.
        * `field_type` (`str`) - The type of the field.

      * `kpi_name` (`str`) - The KPI name.
      * `participant_profiles_metadata` (`list`) - The participant profiles.
        * `type_name` (`str`) - Name of the type.

      * `provisioning_state` (`str`) - Provisioning state.
      * `tenant_id` (`str`) - The hub name.
      * `thres_holds` (`dict`) - The KPI thresholds.
        * `increasing_kpi` (`bool`) - Whether or not the KPI is an increasing KPI.
        * `lower_limit` (`float`) - The lower threshold limit.
        * `upper_limit` (`float`) - The upper threshold limit.

      * `unit` (`str`) - The unit of measurement for the KPI.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, hub_name=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The KPI resource format.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] hub_name: The name of the hub.
        :param pulumi.Input[str] name: The name of the KPI.
        :param pulumi.Input[dict] properties: Defines the KPI Threshold limits.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.

        The **properties** object supports the following:

          * `aliases` (`pulumi.Input[list]`) - The aliases.
            * `alias_name` (`pulumi.Input[str]`) - KPI alias name.
            * `expression` (`pulumi.Input[str]`) - The expression.

          * `calculation_window` (`pulumi.Input[str]`) - The calculation window.
          * `calculation_window_field_name` (`pulumi.Input[str]`) - Name of calculation window field.
          * `description` (`pulumi.Input[dict]`) - Localized description for the KPI.
          * `display_name` (`pulumi.Input[dict]`) - Localized display name for the KPI.
          * `entity_type` (`pulumi.Input[str]`) - The mapping entity type.
          * `entity_type_name` (`pulumi.Input[str]`) - The mapping entity name.
          * `expression` (`pulumi.Input[str]`) - The computation expression for the KPI.
          * `extracts` (`pulumi.Input[list]`) - The KPI extracts.
            * `expression` (`pulumi.Input[str]`) - The expression.
            * `extract_name` (`pulumi.Input[str]`) - KPI extract name.

          * `filter` (`pulumi.Input[str]`) - The filter expression for the KPI.
          * `function` (`pulumi.Input[str]`) - The computation function for the KPI.
          * `group_by` (`pulumi.Input[list]`) - the group by properties for the KPI.
          * `thres_holds` (`pulumi.Input[dict]`) - The KPI thresholds.
            * `increasing_kpi` (`pulumi.Input[bool]`) - Whether or not the KPI is an increasing KPI.
            * `lower_limit` (`pulumi.Input[float]`) - The lower threshold limit.
            * `upper_limit` (`pulumi.Input[float]`) - The upper threshold limit.

          * `unit` (`pulumi.Input[str]`) - The unit of measurement for the KPI.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if hub_name is None:
                raise TypeError("Missing required property 'hub_name'")
            __props__['hub_name'] = hub_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['type'] = None
        super(Kpi, __self__).__init__(
            'azurerm:customerinsights/v20170101:Kpi',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Kpi resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Kpi(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
