# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class View(pulumi.CustomResource):
    changed: pulumi.Output[str]
    """
    Date time when view was last modified.
    """
    created: pulumi.Output[str]
    """
    Date time when view was created.
    """
    definition: pulumi.Output[str]
    """
    View definition.
    """
    display_name: pulumi.Output[dict]
    """
    Localized display name for the view.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    tenant_id: pulumi.Output[str]
    """
    the hub name.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    user_id: pulumi.Output[str]
    """
    the user ID.
    """
    view_name: pulumi.Output[str]
    """
    Name of the view.
    """
    def __init__(__self__, resource_name, opts=None, definition=None, display_name=None, hub_name=None, name=None, resource_group_name=None, user_id=None, __props__=None, __name__=None, __opts__=None):
        """
        The view resource format.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] definition: View definition.
        :param pulumi.Input[dict] display_name: Localized display name for the view.
        :param pulumi.Input[str] hub_name: The name of the hub.
        :param pulumi.Input[str] name: The name of the view.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[str] user_id: the user ID.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if definition is None:
                raise TypeError("Missing required property 'definition'")
            __props__['definition'] = definition
            __props__['display_name'] = display_name
            if hub_name is None:
                raise TypeError("Missing required property 'hub_name'")
            __props__['hub_name'] = hub_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['user_id'] = user_id
            __props__['changed'] = None
            __props__['created'] = None
            __props__['tenant_id'] = None
            __props__['type'] = None
            __props__['view_name'] = None
        super(View, __self__).__init__(
            'azurerm:customerinsights/v20170101:View',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing View resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return View(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
