# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Link(pulumi.CustomResource):
    description: pulumi.Output[dict]
    """
    Localized descriptions for the Link.
    """
    display_name: pulumi.Output[dict]
    """
    Localized display name for the Link.
    """
    link_name: pulumi.Output[str]
    """
    The link name.
    """
    mappings: pulumi.Output[list]
    """
    The set of properties mappings between the source and target Types.
      * `interaction_type_property_name` (`str`) -  Property name on the source Interaction Type.
      * `is_profile_type_id` (`bool`) - Flag to indicate whether the Profile Type property is an id on the Profile Type.
      * `link_type` (`str`) - Link type.
      * `profile_type_property_name` (`str`) - Property name on the target Profile Type.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    operation_type: pulumi.Output[str]
    """
    Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
    """
    participant_property_references: pulumi.Output[list]
    """
    The properties that represent the participating profile.
      * `interaction_property_name` (`str`) - The interaction property that maps to the profile property.
      * `profile_property_name` (`str`) - The profile property that maps to the interaction property.
    """
    provisioning_state: pulumi.Output[str]
    """
    Provisioning state.
    """
    reference_only: pulumi.Output[bool]
    """
    Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
    """
    source_interaction_type: pulumi.Output[str]
    """
    Name of the source Interaction Type.
    """
    target_profile_type: pulumi.Output[str]
    """
    Name of the target Profile Type.
    """
    tenant_id: pulumi.Output[str]
    """
    The hub name.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, description=None, display_name=None, hub_name=None, mappings=None, name=None, operation_type=None, participant_property_references=None, reference_only=None, resource_group_name=None, source_interaction_type=None, target_profile_type=None, __props__=None, __name__=None, __opts__=None):
        """
        The link resource format.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] description: Localized descriptions for the Link.
        :param pulumi.Input[dict] display_name: Localized display name for the Link.
        :param pulumi.Input[str] hub_name: The name of the hub.
        :param pulumi.Input[list] mappings: The set of properties mappings between the source and target Types.
        :param pulumi.Input[str] name: The name of the link.
        :param pulumi.Input[str] operation_type: Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
        :param pulumi.Input[list] participant_property_references: The properties that represent the participating profile.
        :param pulumi.Input[bool] reference_only: Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[str] source_interaction_type: Name of the source Interaction Type.
        :param pulumi.Input[str] target_profile_type: Name of the target Profile Type.

        The **mappings** object supports the following:

          * `interaction_type_property_name` (`pulumi.Input[str]`) -  Property name on the source Interaction Type.
          * `is_profile_type_id` (`pulumi.Input[bool]`) - Flag to indicate whether the Profile Type property is an id on the Profile Type.
          * `link_type` (`pulumi.Input[str]`) - Link type.
          * `profile_type_property_name` (`pulumi.Input[str]`) - Property name on the target Profile Type.

        The **participant_property_references** object supports the following:

          * `interaction_property_name` (`pulumi.Input[str]`) - The interaction property that maps to the profile property.
          * `profile_property_name` (`pulumi.Input[str]`) - The profile property that maps to the interaction property.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['display_name'] = display_name
            if hub_name is None:
                raise TypeError("Missing required property 'hub_name'")
            __props__['hub_name'] = hub_name
            __props__['mappings'] = mappings
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['operation_type'] = operation_type
            if participant_property_references is None:
                raise TypeError("Missing required property 'participant_property_references'")
            __props__['participant_property_references'] = participant_property_references
            __props__['reference_only'] = reference_only
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if source_interaction_type is None:
                raise TypeError("Missing required property 'source_interaction_type'")
            __props__['source_interaction_type'] = source_interaction_type
            if target_profile_type is None:
                raise TypeError("Missing required property 'target_profile_type'")
            __props__['target_profile_type'] = target_profile_type
            __props__['link_name'] = None
            __props__['provisioning_state'] = None
            __props__['tenant_id'] = None
            __props__['type'] = None
        super(Link, __self__).__init__(
            'azurerm:customerinsights/v20170101:Link',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Link resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Link(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
