# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetRelationshipResult:
    """
    The relationship resource format.
    """
    def __init__(__self__, cardinality=None, description=None, display_name=None, expiry_date_time_utc=None, fields=None, lookup_mappings=None, name=None, profile_type=None, provisioning_state=None, related_profile_type=None, relationship_guid_id=None, relationship_name=None, tenant_id=None, type=None):
        if cardinality and not isinstance(cardinality, str):
            raise TypeError("Expected argument 'cardinality' to be a str")
        __self__.cardinality = cardinality
        """
        The Relationship Cardinality.
        """
        if description and not isinstance(description, dict):
            raise TypeError("Expected argument 'description' to be a dict")
        __self__.description = description
        """
        Localized descriptions for the Relationship.
        """
        if display_name and not isinstance(display_name, dict):
            raise TypeError("Expected argument 'display_name' to be a dict")
        __self__.display_name = display_name
        """
        Localized display name for the Relationship.
        """
        if expiry_date_time_utc and not isinstance(expiry_date_time_utc, str):
            raise TypeError("Expected argument 'expiry_date_time_utc' to be a str")
        __self__.expiry_date_time_utc = expiry_date_time_utc
        """
        The expiry date time in UTC.
        """
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        __self__.fields = fields
        """
        The properties of the Relationship.
        """
        if lookup_mappings and not isinstance(lookup_mappings, list):
            raise TypeError("Expected argument 'lookup_mappings' to be a list")
        __self__.lookup_mappings = lookup_mappings
        """
        Optional property to be used to map fields in profile to their strong ids in related profile.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if profile_type and not isinstance(profile_type, str):
            raise TypeError("Expected argument 'profile_type' to be a str")
        __self__.profile_type = profile_type
        """
        Profile type.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Provisioning state.
        """
        if related_profile_type and not isinstance(related_profile_type, str):
            raise TypeError("Expected argument 'related_profile_type' to be a str")
        __self__.related_profile_type = related_profile_type
        """
        Related profile being referenced.
        """
        if relationship_guid_id and not isinstance(relationship_guid_id, str):
            raise TypeError("Expected argument 'relationship_guid_id' to be a str")
        __self__.relationship_guid_id = relationship_guid_id
        """
        The relationship guid id.
        """
        if relationship_name and not isinstance(relationship_name, str):
            raise TypeError("Expected argument 'relationship_name' to be a str")
        __self__.relationship_name = relationship_name
        """
        The Relationship name.
        """
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        __self__.tenant_id = tenant_id
        """
        The hub name.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetRelationshipResult(GetRelationshipResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRelationshipResult(
            cardinality=self.cardinality,
            description=self.description,
            display_name=self.display_name,
            expiry_date_time_utc=self.expiry_date_time_utc,
            fields=self.fields,
            lookup_mappings=self.lookup_mappings,
            name=self.name,
            profile_type=self.profile_type,
            provisioning_state=self.provisioning_state,
            related_profile_type=self.related_profile_type,
            relationship_guid_id=self.relationship_guid_id,
            relationship_name=self.relationship_name,
            tenant_id=self.tenant_id,
            type=self.type)


def get_relationship(hub_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str hub_name: The name of the hub.
    :param str name: The name of the relationship.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['hubName'] = hub_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:customerinsights/v20170426:getRelationship', __args__, opts=opts).value

    return AwaitableGetRelationshipResult(
        cardinality=__ret__.get('cardinality'),
        description=__ret__.get('description'),
        display_name=__ret__.get('displayName'),
        expiry_date_time_utc=__ret__.get('expiryDateTimeUtc'),
        fields=__ret__.get('fields'),
        lookup_mappings=__ret__.get('lookupMappings'),
        name=__ret__.get('name'),
        profile_type=__ret__.get('profileType'),
        provisioning_state=__ret__.get('provisioningState'),
        related_profile_type=__ret__.get('relatedProfileType'),
        relationship_guid_id=__ret__.get('relationshipGuidId'),
        relationship_name=__ret__.get('relationshipName'),
        tenant_id=__ret__.get('tenantId'),
        type=__ret__.get('type'))
