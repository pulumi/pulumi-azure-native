# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Hub(pulumi.CustomResource):
    api_endpoint: pulumi.Output[str]
    """
    API endpoint URL of the hub.
    """
    hub_billing_info: pulumi.Output[dict]
    """
    Billing settings of the hub.
      * `max_units` (`float`) - The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
      * `min_units` (`float`) - The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
      * `sku_name` (`str`) - The sku name.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    provisioning_state: pulumi.Output[str]
    """
    Provisioning state of the hub.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    tenant_features: pulumi.Output[float]
    """
    The bit flags for enabled hub features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to 0.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    web_endpoint: pulumi.Output[str]
    """
    Web endpoint URL of the hub.
    """
    def __init__(__self__, resource_name, opts=None, hub_billing_info=None, location=None, name=None, resource_group_name=None, tags=None, tenant_features=None, __props__=None, __name__=None, __opts__=None):
        """
        Hub resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] hub_billing_info: Billing settings of the hub.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: The name of the Hub.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[float] tenant_features: The bit flags for enabled hub features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to 0.

        The **hub_billing_info** object supports the following:

          * `max_units` (`pulumi.Input[float]`) - The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
          * `min_units` (`pulumi.Input[float]`) - The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
          * `sku_name` (`pulumi.Input[str]`) - The sku name.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['hub_billing_info'] = hub_billing_info
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['tenant_features'] = tenant_features
            __props__['api_endpoint'] = None
            __props__['provisioning_state'] = None
            __props__['type'] = None
            __props__['web_endpoint'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:customerinsights/v20170101:Hub")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Hub, __self__).__init__(
            'azurerm:customerinsights/v20170426:Hub',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Hub resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Hub(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
