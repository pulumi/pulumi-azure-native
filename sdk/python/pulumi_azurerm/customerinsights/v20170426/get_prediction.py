# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetPredictionResult:
    """
    The prediction resource format.
    """
    def __init__(__self__, auto_analyze=None, description=None, display_name=None, grades=None, involved_interaction_types=None, involved_kpi_types=None, involved_relationships=None, mappings=None, name=None, negative_outcome_expression=None, positive_outcome_expression=None, prediction_name=None, primary_profile_type=None, provisioning_state=None, scope_expression=None, score_label=None, system_generated_entities=None, tenant_id=None, type=None):
        if auto_analyze and not isinstance(auto_analyze, bool):
            raise TypeError("Expected argument 'auto_analyze' to be a bool")
        __self__.auto_analyze = auto_analyze
        """
        Whether do auto analyze.
        """
        if description and not isinstance(description, dict):
            raise TypeError("Expected argument 'description' to be a dict")
        __self__.description = description
        """
        Description of the prediction.
        """
        if display_name and not isinstance(display_name, dict):
            raise TypeError("Expected argument 'display_name' to be a dict")
        __self__.display_name = display_name
        """
        Display name of the prediction.
        """
        if grades and not isinstance(grades, list):
            raise TypeError("Expected argument 'grades' to be a list")
        __self__.grades = grades
        """
        The prediction grades.
        """
        if involved_interaction_types and not isinstance(involved_interaction_types, list):
            raise TypeError("Expected argument 'involved_interaction_types' to be a list")
        __self__.involved_interaction_types = involved_interaction_types
        """
        Interaction types involved in the prediction.
        """
        if involved_kpi_types and not isinstance(involved_kpi_types, list):
            raise TypeError("Expected argument 'involved_kpi_types' to be a list")
        __self__.involved_kpi_types = involved_kpi_types
        """
        KPI types involved in the prediction.
        """
        if involved_relationships and not isinstance(involved_relationships, list):
            raise TypeError("Expected argument 'involved_relationships' to be a list")
        __self__.involved_relationships = involved_relationships
        """
        Relationships involved in the prediction.
        """
        if mappings and not isinstance(mappings, dict):
            raise TypeError("Expected argument 'mappings' to be a dict")
        __self__.mappings = mappings
        """
        Definition of the link mapping of prediction.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if negative_outcome_expression and not isinstance(negative_outcome_expression, str):
            raise TypeError("Expected argument 'negative_outcome_expression' to be a str")
        __self__.negative_outcome_expression = negative_outcome_expression
        """
        Negative outcome expression.
        """
        if positive_outcome_expression and not isinstance(positive_outcome_expression, str):
            raise TypeError("Expected argument 'positive_outcome_expression' to be a str")
        __self__.positive_outcome_expression = positive_outcome_expression
        """
        Positive outcome expression.
        """
        if prediction_name and not isinstance(prediction_name, str):
            raise TypeError("Expected argument 'prediction_name' to be a str")
        __self__.prediction_name = prediction_name
        """
        Name of the prediction.
        """
        if primary_profile_type and not isinstance(primary_profile_type, str):
            raise TypeError("Expected argument 'primary_profile_type' to be a str")
        __self__.primary_profile_type = primary_profile_type
        """
        Primary profile type.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Provisioning state.
        """
        if scope_expression and not isinstance(scope_expression, str):
            raise TypeError("Expected argument 'scope_expression' to be a str")
        __self__.scope_expression = scope_expression
        """
        Scope expression.
        """
        if score_label and not isinstance(score_label, str):
            raise TypeError("Expected argument 'score_label' to be a str")
        __self__.score_label = score_label
        """
        Score label.
        """
        if system_generated_entities and not isinstance(system_generated_entities, dict):
            raise TypeError("Expected argument 'system_generated_entities' to be a dict")
        __self__.system_generated_entities = system_generated_entities
        """
        System generated entities.
        """
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        __self__.tenant_id = tenant_id
        """
        The hub name.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetPredictionResult(GetPredictionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPredictionResult(
            auto_analyze=self.auto_analyze,
            description=self.description,
            display_name=self.display_name,
            grades=self.grades,
            involved_interaction_types=self.involved_interaction_types,
            involved_kpi_types=self.involved_kpi_types,
            involved_relationships=self.involved_relationships,
            mappings=self.mappings,
            name=self.name,
            negative_outcome_expression=self.negative_outcome_expression,
            positive_outcome_expression=self.positive_outcome_expression,
            prediction_name=self.prediction_name,
            primary_profile_type=self.primary_profile_type,
            provisioning_state=self.provisioning_state,
            scope_expression=self.scope_expression,
            score_label=self.score_label,
            system_generated_entities=self.system_generated_entities,
            tenant_id=self.tenant_id,
            type=self.type)


def get_prediction(hub_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str hub_name: The name of the hub.
    :param str name: The name of the Prediction.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['hubName'] = hub_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:customerinsights/v20170426:getPrediction', __args__, opts=opts).value

    return AwaitableGetPredictionResult(
        auto_analyze=__ret__.get('autoAnalyze'),
        description=__ret__.get('description'),
        display_name=__ret__.get('displayName'),
        grades=__ret__.get('grades'),
        involved_interaction_types=__ret__.get('involvedInteractionTypes'),
        involved_kpi_types=__ret__.get('involvedKpiTypes'),
        involved_relationships=__ret__.get('involvedRelationships'),
        mappings=__ret__.get('mappings'),
        name=__ret__.get('name'),
        negative_outcome_expression=__ret__.get('negativeOutcomeExpression'),
        positive_outcome_expression=__ret__.get('positiveOutcomeExpression'),
        prediction_name=__ret__.get('predictionName'),
        primary_profile_type=__ret__.get('primaryProfileType'),
        provisioning_state=__ret__.get('provisioningState'),
        scope_expression=__ret__.get('scopeExpression'),
        score_label=__ret__.get('scoreLabel'),
        system_generated_entities=__ret__.get('systemGeneratedEntities'),
        tenant_id=__ret__.get('tenantId'),
        type=__ret__.get('type'))
