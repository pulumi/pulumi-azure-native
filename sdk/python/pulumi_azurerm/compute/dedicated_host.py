# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class DedicatedHost(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Properties of the dedicated host.
      * `auto_replace_on_failure` (`bool`) - Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided.
      * `host_id` (`str`) - A unique id generated and assigned to the dedicated host by the platform. <br><br> Does not change throughout the lifetime of the host.
      * `instance_view` (`dict`) - The dedicated host instance view.
        * `asset_id` (`str`) - Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
        * `available_capacity` (`dict`) - Unutilized capacity of the dedicated host.
          * `allocatable_v_ms` (`list`) - The unutilized capacity of the dedicated host represented in terms of each VM size that is allowed to be deployed to the dedicated host.
            * `count` (`float`) - Maximum number of VMs of size vmSize that can fit in the dedicated host's remaining capacity.
            * `vm_size` (`str`) - VM size in terms of which the unutilized capacity is represented.

        * `statuses` (`list`) - The resource status information.
          * `code` (`str`) - The status code.
          * `display_status` (`str`) - The short localizable label for the status.
          * `level` (`str`) - The level code.
          * `message` (`str`) - The detailed status message, including for alerts and error messages.
          * `time` (`str`) - The time of the status.

      * `license_type` (`str`) - Specifies the software license type that will be applied to the VMs deployed on the dedicated host. <br><br> Possible values are: <br><br> **None** <br><br> **Windows_Server_Hybrid** <br><br> **Windows_Server_Perpetual** <br><br> Default: **None**
      * `platform_fault_domain` (`float`) - Fault domain of the dedicated host within a dedicated host group.
      * `provisioning_state` (`str`) - The provisioning state, which only appears in the response.
      * `provisioning_time` (`str`) - The date when the host was first provisioned.
      * `virtual_machines` (`list`) - A list of references to all virtual machines in the Dedicated Host.
        * `id` (`str`) - Resource Id
    """
    sku: pulumi.Output[dict]
    """
    SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be set. List Microsoft.Compute SKUs for a list of possible values.
      * `capacity` (`float`) - Specifies the number of virtual machines in the scale set.
      * `name` (`str`) - The sku name.
      * `tier` (`str`) - Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, host_group_name=None, location=None, name=None, properties=None, resource_group_name=None, sku=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Specifies information about the Dedicated host.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] host_group_name: The name of the dedicated host group.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The name of the dedicated host .
        :param pulumi.Input[dict] properties: Properties of the dedicated host.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] sku: SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be set. List Microsoft.Compute SKUs for a list of possible values.
        :param pulumi.Input[dict] tags: Resource tags

        The **properties** object supports the following:

          * `auto_replace_on_failure` (`pulumi.Input[bool]`) - Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided.
          * `license_type` (`pulumi.Input[str]`) - Specifies the software license type that will be applied to the VMs deployed on the dedicated host. <br><br> Possible values are: <br><br> **None** <br><br> **Windows_Server_Hybrid** <br><br> **Windows_Server_Perpetual** <br><br> Default: **None**
          * `platform_fault_domain` (`pulumi.Input[float]`) - Fault domain of the dedicated host within a dedicated host group.

        The **sku** object supports the following:

          * `capacity` (`pulumi.Input[float]`) - Specifies the number of virtual machines in the scale set.
          * `name` (`pulumi.Input[str]`) - The sku name.
          * `tier` (`pulumi.Input[str]`) - Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if host_group_name is None:
                raise TypeError("Missing required property 'host_group_name'")
            __props__['host_group_name'] = host_group_name
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if sku is None:
                raise TypeError("Missing required property 'sku'")
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['type'] = None
        super(DedicatedHost, __self__).__init__(
            'azurerm:compute:DedicatedHost',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing DedicatedHost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return DedicatedHost(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
