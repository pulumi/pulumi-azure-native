# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ProximityPlacementGroup(pulumi.CustomResource):
    availability_sets: pulumi.Output[list]
    """
    A list of references to all availability sets in the proximity placement group.
      * `colocation_status` (`dict`) - Describes colocation status of a resource in the Proximity Placement Group.
        * `code` (`str`) - The status code.
        * `display_status` (`str`) - The short localizable label for the status.
        * `level` (`str`) - The level code.
        * `message` (`str`) - The detailed status message, including for alerts and error messages.
        * `time` (`str`) - The time of the status.

      * `id` (`str`) - Resource Id
    """
    colocation_status: pulumi.Output[dict]
    """
    Describes colocation status of the Proximity Placement Group.
      * `code` (`str`) - The status code.
      * `display_status` (`str`) - The short localizable label for the status.
      * `level` (`str`) - The level code.
      * `message` (`str`) - The detailed status message, including for alerts and error messages.
      * `time` (`str`) - The time of the status.
    """
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    proximity_placement_group_type: pulumi.Output[str]
    """
    Specifies the type of the proximity placement group. <br><br> Possible values are: <br><br> **Standard** : Co-locate resources within an Azure region or Availability Zone. <br><br> **Ultra** : For future use.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    virtual_machine_scale_sets: pulumi.Output[list]
    """
    A list of references to all virtual machine scale sets in the proximity placement group.
      * `colocation_status` (`dict`) - Describes colocation status of a resource in the Proximity Placement Group.
        * `code` (`str`) - The status code.
        * `display_status` (`str`) - The short localizable label for the status.
        * `level` (`str`) - The level code.
        * `message` (`str`) - The detailed status message, including for alerts and error messages.
        * `time` (`str`) - The time of the status.

      * `id` (`str`) - Resource Id
    """
    virtual_machines: pulumi.Output[list]
    """
    A list of references to all virtual machines in the proximity placement group.
      * `colocation_status` (`dict`) - Describes colocation status of a resource in the Proximity Placement Group.
        * `code` (`str`) - The status code.
        * `display_status` (`str`) - The short localizable label for the status.
        * `level` (`str`) - The level code.
        * `message` (`str`) - The detailed status message, including for alerts and error messages.
        * `time` (`str`) - The time of the status.

      * `id` (`str`) - Resource Id
    """
    def __init__(__self__, resource_name, opts=None, colocation_status=None, location=None, name=None, proximity_placement_group_type=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Specifies information about the proximity placement group.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] colocation_status: Describes colocation status of the Proximity Placement Group.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The name of the proximity placement group.
        :param pulumi.Input[str] proximity_placement_group_type: Specifies the type of the proximity placement group. <br><br> Possible values are: <br><br> **Standard** : Co-locate resources within an Azure region or Availability Zone. <br><br> **Ultra** : For future use.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] tags: Resource tags

        The **colocation_status** object supports the following:

          * `code` (`pulumi.Input[str]`) - The status code.
          * `display_status` (`pulumi.Input[str]`) - The short localizable label for the status.
          * `level` (`pulumi.Input[str]`) - The level code.
          * `message` (`pulumi.Input[str]`) - The detailed status message, including for alerts and error messages.
          * `time` (`pulumi.Input[str]`) - The time of the status.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['colocation_status'] = colocation_status
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['proximity_placement_group_type'] = proximity_placement_group_type
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['availability_sets'] = None
            __props__['type'] = None
            __props__['virtual_machine_scale_sets'] = None
            __props__['virtual_machines'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:compute/v20180401:ProximityPlacementGroup"), pulumi.Alias(type_="azurerm:compute/v20180601:ProximityPlacementGroup"), pulumi.Alias(type_="azurerm:compute/v20181001:ProximityPlacementGroup"), pulumi.Alias(type_="azurerm:compute/v20190301:ProximityPlacementGroup"), pulumi.Alias(type_="azurerm:compute/v20190701:ProximityPlacementGroup"), pulumi.Alias(type_="azurerm:compute/v20191201:ProximityPlacementGroup")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(ProximityPlacementGroup, __self__).__init__(
            'azurerm:compute/v20200601:ProximityPlacementGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ProximityPlacementGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ProximityPlacementGroup(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
