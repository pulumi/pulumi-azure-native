# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVirtualMachineScaleSetVMResult:
    """
    Describes a virtual machine scale set virtual machine.
    """
    def __init__(__self__, additional_capabilities=None, availability_set=None, diagnostics_profile=None, hardware_profile=None, instance_id=None, instance_view=None, latest_model_applied=None, license_type=None, location=None, model_definition_applied=None, name=None, network_profile=None, network_profile_configuration=None, os_profile=None, plan=None, protection_policy=None, provisioning_state=None, resources=None, sku=None, storage_profile=None, tags=None, type=None, vm_id=None, zones=None):
        if additional_capabilities and not isinstance(additional_capabilities, dict):
            raise TypeError("Expected argument 'additional_capabilities' to be a dict")
        __self__.additional_capabilities = additional_capabilities
        """
        Specifies additional capabilities enabled or disabled on the virtual machine in the scale set. For instance: whether the virtual machine has the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
        """
        if availability_set and not isinstance(availability_set, dict):
            raise TypeError("Expected argument 'availability_set' to be a dict")
        __self__.availability_set = availability_set
        """
        Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Manage the availability of virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). <br><br> For more information on Azure planned maintenance, see [Planned maintenance for virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
        """
        if diagnostics_profile and not isinstance(diagnostics_profile, dict):
            raise TypeError("Expected argument 'diagnostics_profile' to be a dict")
        __self__.diagnostics_profile = diagnostics_profile
        """
        Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
        """
        if hardware_profile and not isinstance(hardware_profile, dict):
            raise TypeError("Expected argument 'hardware_profile' to be a dict")
        __self__.hardware_profile = hardware_profile
        """
        Specifies the hardware settings for the virtual machine.
        """
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        __self__.instance_id = instance_id
        """
        The virtual machine instance ID.
        """
        if instance_view and not isinstance(instance_view, dict):
            raise TypeError("Expected argument 'instance_view' to be a dict")
        __self__.instance_view = instance_view
        """
        The virtual machine instance view.
        """
        if latest_model_applied and not isinstance(latest_model_applied, bool):
            raise TypeError("Expected argument 'latest_model_applied' to be a bool")
        __self__.latest_model_applied = latest_model_applied
        """
        Specifies whether the latest model has been applied to the virtual machine.
        """
        if license_type and not isinstance(license_type, str):
            raise TypeError("Expected argument 'license_type' to be a str")
        __self__.license_type = license_type
        """
        Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if model_definition_applied and not isinstance(model_definition_applied, str):
            raise TypeError("Expected argument 'model_definition_applied' to be a str")
        __self__.model_definition_applied = model_definition_applied
        """
        Specifies whether the model applied to the virtual machine is the model of the virtual machine scale set or the customized model for the virtual machine.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if network_profile and not isinstance(network_profile, dict):
            raise TypeError("Expected argument 'network_profile' to be a dict")
        __self__.network_profile = network_profile
        """
        Specifies the network interfaces of the virtual machine.
        """
        if network_profile_configuration and not isinstance(network_profile_configuration, dict):
            raise TypeError("Expected argument 'network_profile_configuration' to be a dict")
        __self__.network_profile_configuration = network_profile_configuration
        """
        Specifies the network profile configuration of the virtual machine.
        """
        if os_profile and not isinstance(os_profile, dict):
            raise TypeError("Expected argument 'os_profile' to be a dict")
        __self__.os_profile = os_profile
        """
        Specifies the operating system settings for the virtual machine.
        """
        if plan and not isinstance(plan, dict):
            raise TypeError("Expected argument 'plan' to be a dict")
        __self__.plan = plan
        """
        Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
        """
        if protection_policy and not isinstance(protection_policy, dict):
            raise TypeError("Expected argument 'protection_policy' to be a dict")
        __self__.protection_policy = protection_policy
        """
        Specifies the protection policy of the virtual machine.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state, which only appears in the response.
        """
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        __self__.resources = resources
        """
        The virtual machine child extension resources.
        """
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        The virtual machine SKU.
        """
        if storage_profile and not isinstance(storage_profile, dict):
            raise TypeError("Expected argument 'storage_profile' to be a dict")
        __self__.storage_profile = storage_profile
        """
        Specifies the storage settings for the virtual machine disks.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """
        if vm_id and not isinstance(vm_id, str):
            raise TypeError("Expected argument 'vm_id' to be a str")
        __self__.vm_id = vm_id
        """
        Azure VM unique ID.
        """
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        __self__.zones = zones
        """
        The virtual machine zones.
        """


class AwaitableGetVirtualMachineScaleSetVMResult(GetVirtualMachineScaleSetVMResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualMachineScaleSetVMResult(
            additional_capabilities=self.additional_capabilities,
            availability_set=self.availability_set,
            diagnostics_profile=self.diagnostics_profile,
            hardware_profile=self.hardware_profile,
            instance_id=self.instance_id,
            instance_view=self.instance_view,
            latest_model_applied=self.latest_model_applied,
            license_type=self.license_type,
            location=self.location,
            model_definition_applied=self.model_definition_applied,
            name=self.name,
            network_profile=self.network_profile,
            network_profile_configuration=self.network_profile_configuration,
            os_profile=self.os_profile,
            plan=self.plan,
            protection_policy=self.protection_policy,
            provisioning_state=self.provisioning_state,
            resources=self.resources,
            sku=self.sku,
            storage_profile=self.storage_profile,
            tags=self.tags,
            type=self.type,
            vm_id=self.vm_id,
            zones=self.zones)


def get_virtual_machine_scale_set_vm(expand=None, name=None, resource_group_name=None, vm_scale_set_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str expand: The expand expression to apply on the operation.
    :param str name: The instance ID of the virtual machine.
    :param str resource_group_name: The name of the resource group.
    :param str vm_scale_set_name: The name of the VM scale set.
    """
    __args__ = dict()
    __args__['expand'] = expand
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['vmScaleSetName'] = vm_scale_set_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:compute/v20190701:getVirtualMachineScaleSetVM', __args__, opts=opts).value

    return AwaitableGetVirtualMachineScaleSetVMResult(
        additional_capabilities=__ret__.get('additionalCapabilities'),
        availability_set=__ret__.get('availabilitySet'),
        diagnostics_profile=__ret__.get('diagnosticsProfile'),
        hardware_profile=__ret__.get('hardwareProfile'),
        instance_id=__ret__.get('instanceId'),
        instance_view=__ret__.get('instanceView'),
        latest_model_applied=__ret__.get('latestModelApplied'),
        license_type=__ret__.get('licenseType'),
        location=__ret__.get('location'),
        model_definition_applied=__ret__.get('modelDefinitionApplied'),
        name=__ret__.get('name'),
        network_profile=__ret__.get('networkProfile'),
        network_profile_configuration=__ret__.get('networkProfileConfiguration'),
        os_profile=__ret__.get('osProfile'),
        plan=__ret__.get('plan'),
        protection_policy=__ret__.get('protectionPolicy'),
        provisioning_state=__ret__.get('provisioningState'),
        resources=__ret__.get('resources'),
        sku=__ret__.get('sku'),
        storage_profile=__ret__.get('storageProfile'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        vm_id=__ret__.get('vmId'),
        zones=__ret__.get('zones'))
