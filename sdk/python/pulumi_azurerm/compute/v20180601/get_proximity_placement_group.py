# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetProximityPlacementGroupResult:
    """
    Specifies information about the proximity placement group.
    """
    def __init__(__self__, availability_sets=None, location=None, name=None, proximity_placement_group_type=None, tags=None, type=None, virtual_machine_scale_sets=None, virtual_machines=None):
        if availability_sets and not isinstance(availability_sets, list):
            raise TypeError("Expected argument 'availability_sets' to be a list")
        __self__.availability_sets = availability_sets
        """
        A list of references to all availability sets in the proximity placement group.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if proximity_placement_group_type and not isinstance(proximity_placement_group_type, str):
            raise TypeError("Expected argument 'proximity_placement_group_type' to be a str")
        __self__.proximity_placement_group_type = proximity_placement_group_type
        """
        Specifies the type of the proximity placement group. <br><br> Possible values are: <br><br> **Standard** : Co-locate resources within an Azure region or Availability Zone. <br><br> **Ultra** : For future use.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """
        if virtual_machine_scale_sets and not isinstance(virtual_machine_scale_sets, list):
            raise TypeError("Expected argument 'virtual_machine_scale_sets' to be a list")
        __self__.virtual_machine_scale_sets = virtual_machine_scale_sets
        """
        A list of references to all virtual machine scale sets in the proximity placement group.
        """
        if virtual_machines and not isinstance(virtual_machines, list):
            raise TypeError("Expected argument 'virtual_machines' to be a list")
        __self__.virtual_machines = virtual_machines
        """
        A list of references to all virtual machines in the proximity placement group.
        """


class AwaitableGetProximityPlacementGroupResult(GetProximityPlacementGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProximityPlacementGroupResult(
            availability_sets=self.availability_sets,
            location=self.location,
            name=self.name,
            proximity_placement_group_type=self.proximity_placement_group_type,
            tags=self.tags,
            type=self.type,
            virtual_machine_scale_sets=self.virtual_machine_scale_sets,
            virtual_machines=self.virtual_machines)


def get_proximity_placement_group(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the proximity placement group.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:compute/v20180601:getProximityPlacementGroup', __args__, opts=opts).value

    return AwaitableGetProximityPlacementGroupResult(
        availability_sets=__ret__.get('availabilitySets'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        proximity_placement_group_type=__ret__.get('proximityPlacementGroupType'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        virtual_machine_scale_sets=__ret__.get('virtualMachineScaleSets'),
        virtual_machines=__ret__.get('virtualMachines'))
