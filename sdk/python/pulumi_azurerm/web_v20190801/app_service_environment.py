# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class AppServiceEnvironment(pulumi.CustomResource):
    kind: pulumi.Output[str]
    """
    Kind of resource.
    """
    location: pulumi.Output[str]
    """
    Resource Location.
    """
    name: pulumi.Output[str]
    """
    Resource Name.
    """
    properties: pulumi.Output[dict]
    """
    Core resource properties
      * `allowed_multi_sizes` (`str`) - List of comma separated strings describing which VM sizes are allowed for front-ends.
      * `allowed_worker_sizes` (`str`) - List of comma separated strings describing which VM sizes are allowed for workers.
      * `api_management_account_id` (`str`) - API Management Account associated with the App Service Environment.
      * `cluster_settings` (`list`) - Custom settings for changing the behavior of the App Service Environment.
        * `name` (`str`) - Pair name.
        * `value` (`str`) - Pair value.

      * `database_edition` (`str`) - Edition of the metadata database for the App Service Environment, e.g. "Standard".
      * `database_service_objective` (`str`) - Service objective of the metadata database for the App Service Environment, e.g. "S0".
      * `default_front_end_scale_factor` (`float`) - Default Scale Factor for FrontEnds.
      * `dns_suffix` (`str`) - DNS suffix of the App Service Environment.
      * `dynamic_cache_enabled` (`bool`) - True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available
        (most likely because NSG blocked the incoming traffic).
      * `environment_capacities` (`list`) - Current total, used, and available worker capacities.
        * `available_capacity` (`float`) - Available capacity (# of machines, bytes of storage etc...).
        * `compute_mode` (`str`) - Shared/dedicated workers.
        * `exclude_from_capacity_allocation` (`bool`) - If <code>true</code>, it includes basic apps.
          Basic apps are not used for capacity allocation.
        * `is_applicable_for_all_compute_modes` (`bool`) - <code>true</code> if capacity is applicable for all apps; otherwise, <code>false</code>.
        * `is_linux` (`bool`) - Is this a linux stamp capacity
        * `name` (`str`) - Name of the stamp.
        * `site_mode` (`str`) - Shared or Dedicated.
        * `total_capacity` (`float`) - Total capacity (# of machines, bytes of storage etc...).
        * `unit` (`str`) - Name of the unit.
        * `worker_size` (`str`) - Size of the machines.
        * `worker_size_id` (`float`) - Size ID of machines: 
          0 - Small
          1 - Medium
          2 - Large

      * `environment_is_healthy` (`bool`) - True/false indicating whether the App Service Environment is healthy.
      * `environment_status` (`str`) - Detailed message about with results of the last check of the App Service Environment.
      * `front_end_scale_factor` (`float`) - Scale factor for front-ends.
      * `has_linux_workers` (`bool`) - Flag that displays whether an ASE has linux workers or not
      * `internal_load_balancing_mode` (`str`) - Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
      * `ipssl_address_count` (`float`) - Number of IP SSL addresses reserved for the App Service Environment.
      * `last_action` (`str`) - Last deployment action on the App Service Environment.
      * `last_action_result` (`str`) - Result of the last deployment action on the App Service Environment.
      * `location` (`str`) - Location of the App Service Environment, e.g. "West US".
      * `maximum_number_of_machines` (`float`) - Maximum number of VMs in the App Service Environment.
      * `multi_role_count` (`float`) - Number of front-end instances.
      * `multi_size` (`str`) - Front-end VM size, e.g. "Medium", "Large".
      * `name` (`str`) - Name of the App Service Environment.
      * `network_access_control_list` (`list`) - Access control list for controlling traffic to the App Service Environment.
        * `action` (`str`) - Action object.
        * `description` (`str`) - Description of network access control entry.
        * `order` (`float`) - Order of precedence.
        * `remote_subnet` (`str`) - Remote subnet.

      * `provisioning_state` (`str`) - Provisioning state of the App Service Environment.
      * `resource_group` (`str`) - Resource group of the App Service Environment.
      * `ssl_cert_key_vault_id` (`str`) - Key Vault ID for ILB App Service Environment default SSL certificate
      * `ssl_cert_key_vault_secret_name` (`str`) - Key Vault Secret Name for ILB App Service Environment default SSL certificate
      * `status` (`str`) - Current status of the App Service Environment.
      * `subscription_id` (`str`) - Subscription of the App Service Environment.
      * `suspended` (`bool`) - <code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available
         (most likely because NSG blocked the incoming traffic).
      * `upgrade_domains` (`float`) - Number of upgrade domains of the App Service Environment.
      * `user_whitelisted_ip_ranges` (`list`) - User added ip ranges to whitelist on ASE db
      * `vip_mappings` (`list`) - Description of IP SSL mapping for the App Service Environment.
        * `in_use` (`bool`) - Is virtual IP mapping in use.
        * `internal_http_port` (`float`) - Internal HTTP port.
        * `internal_https_port` (`float`) - Internal HTTPS port.
        * `service_name` (`str`) - name of the service that virtual IP is assigned to
        * `virtual_ip` (`str`) - Virtual IP address.

      * `virtual_network` (`dict`) - Description of the Virtual Network.
        * `id` (`str`) - Resource id of the Virtual Network.
        * `name` (`str`) - Name of the Virtual Network (read-only).
        * `subnet` (`str`) - Subnet within the Virtual Network.
        * `type` (`str`) - Resource type of the Virtual Network (read-only).

      * `vnet_name` (`str`) - Name of the Virtual Network for the App Service Environment.
      * `vnet_resource_group_name` (`str`) - Resource group of the Virtual Network.
      * `vnet_subnet_name` (`str`) - Subnet of the Virtual Network.
      * `worker_pools` (`list`) - Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.
        * `compute_mode` (`str`) - Shared or dedicated app hosting.
        * `instance_names` (`list`) - Names of all instances in the worker pool (read only).
        * `worker_count` (`float`) - Number of instances in the worker pool.
        * `worker_size` (`str`) - VM size of the worker pool instances.
        * `worker_size_id` (`float`) - Worker size ID for referencing this worker pool.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, kind=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        App Service Environment ARM resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] kind: Kind of resource.
        :param pulumi.Input[str] location: Resource Location.
        :param pulumi.Input[str] name: Name of the App Service Environment.
        :param pulumi.Input[dict] properties: Core resource properties
        :param pulumi.Input[str] resource_group_name: Name of the resource group to which the resource belongs.
        :param pulumi.Input[dict] tags: Resource tags.

        The **properties** object supports the following:

          * `api_management_account_id` (`pulumi.Input[str]`) - API Management Account associated with the App Service Environment.
          * `cluster_settings` (`pulumi.Input[list]`) - Custom settings for changing the behavior of the App Service Environment.
            * `name` (`pulumi.Input[str]`) - Pair name.
            * `value` (`pulumi.Input[str]`) - Pair value.

          * `dns_suffix` (`pulumi.Input[str]`) - DNS suffix of the App Service Environment.
          * `dynamic_cache_enabled` (`pulumi.Input[bool]`) - True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available
            (most likely because NSG blocked the incoming traffic).
          * `front_end_scale_factor` (`pulumi.Input[float]`) - Scale factor for front-ends.
          * `has_linux_workers` (`pulumi.Input[bool]`) - Flag that displays whether an ASE has linux workers or not
          * `internal_load_balancing_mode` (`pulumi.Input[str]`) - Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
          * `ipssl_address_count` (`pulumi.Input[float]`) - Number of IP SSL addresses reserved for the App Service Environment.
          * `location` (`pulumi.Input[str]`) - Location of the App Service Environment, e.g. "West US".
          * `multi_role_count` (`pulumi.Input[float]`) - Number of front-end instances.
          * `multi_size` (`pulumi.Input[str]`) - Front-end VM size, e.g. "Medium", "Large".
          * `name` (`pulumi.Input[str]`) - Name of the App Service Environment.
          * `network_access_control_list` (`pulumi.Input[list]`) - Access control list for controlling traffic to the App Service Environment.
            * `action` (`pulumi.Input[str]`) - Action object.
            * `description` (`pulumi.Input[str]`) - Description of network access control entry.
            * `order` (`pulumi.Input[float]`) - Order of precedence.
            * `remote_subnet` (`pulumi.Input[str]`) - Remote subnet.

          * `ssl_cert_key_vault_id` (`pulumi.Input[str]`) - Key Vault ID for ILB App Service Environment default SSL certificate
          * `ssl_cert_key_vault_secret_name` (`pulumi.Input[str]`) - Key Vault Secret Name for ILB App Service Environment default SSL certificate
          * `suspended` (`pulumi.Input[bool]`) - <code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available
             (most likely because NSG blocked the incoming traffic).
          * `user_whitelisted_ip_ranges` (`pulumi.Input[list]`) - User added ip ranges to whitelist on ASE db
          * `virtual_network` (`pulumi.Input[dict]`) - Description of the Virtual Network.
            * `id` (`pulumi.Input[str]`) - Resource id of the Virtual Network.
            * `subnet` (`pulumi.Input[str]`) - Subnet within the Virtual Network.

          * `vnet_name` (`pulumi.Input[str]`) - Name of the Virtual Network for the App Service Environment.
          * `vnet_resource_group_name` (`pulumi.Input[str]`) - Resource group of the Virtual Network.
          * `vnet_subnet_name` (`pulumi.Input[str]`) - Subnet of the Virtual Network.
          * `worker_pools` (`pulumi.Input[list]`) - Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.
            * `compute_mode` (`pulumi.Input[str]`) - Shared or dedicated app hosting.
            * `worker_count` (`pulumi.Input[float]`) - Number of instances in the worker pool.
            * `worker_size` (`pulumi.Input[str]`) - VM size of the worker pool instances.
            * `worker_size_id` (`pulumi.Input[float]`) - Worker size ID for referencing this worker pool.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(AppServiceEnvironment, __self__).__init__(
            'azurerm:web/v20190801:AppServiceEnvironment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing AppServiceEnvironment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return AppServiceEnvironment(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
