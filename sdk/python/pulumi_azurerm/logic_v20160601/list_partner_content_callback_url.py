# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class ListPartnerContentCallbackUrlResult:
    """
    The workflow trigger callback URL.
    """
    def __init__(__self__, base_path=None, method=None, queries=None, relative_path=None, relative_path_parameters=None, value=None):
        if base_path and not isinstance(base_path, str):
            raise TypeError("Expected argument 'base_path' to be a str")
        __self__.base_path = base_path
        """
        Gets the workflow trigger callback URL base path.
        """
        if method and not isinstance(method, str):
            raise TypeError("Expected argument 'method' to be a str")
        __self__.method = method
        """
        Gets the workflow trigger callback URL HTTP method.
        """
        if queries and not isinstance(queries, dict):
            raise TypeError("Expected argument 'queries' to be a dict")
        __self__.queries = queries
        """
        Gets the workflow trigger callback URL query parameters.
        """
        if relative_path and not isinstance(relative_path, str):
            raise TypeError("Expected argument 'relative_path' to be a str")
        __self__.relative_path = relative_path
        """
        Gets the workflow trigger callback URL relative path.
        """
        if relative_path_parameters and not isinstance(relative_path_parameters, list):
            raise TypeError("Expected argument 'relative_path_parameters' to be a list")
        __self__.relative_path_parameters = relative_path_parameters
        """
        Gets the workflow trigger callback URL relative path parameters.
        """
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        __self__.value = value
        """
        Gets the workflow trigger callback URL.
        """


class AwaitableListPartnerContentCallbackUrlResult(ListPartnerContentCallbackUrlResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListPartnerContentCallbackUrlResult(
            base_path=self.base_path,
            method=self.method,
            queries=self.queries,
            relative_path=self.relative_path,
            relative_path_parameters=self.relative_path_parameters,
            value=self.value)


def list_partner_content_callback_url(integration_account_name=None, key_type=None, not_after=None, partner_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str integration_account_name: The integration account name.
    :param str key_type: The key type.
    :param str not_after: The expiry time.
    :param str partner_name: The integration account partner name.
    :param str resource_group_name: The resource group name.
    """
    __args__ = dict()
    __args__['integrationAccountName'] = integration_account_name
    __args__['keyType'] = key_type
    __args__['notAfter'] = not_after
    __args__['partnerName'] = partner_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:logic/v20160601:listPartnerContentCallbackUrl', __args__, opts=opts).value

    return AwaitableListPartnerContentCallbackUrlResult(
        base_path=__ret__.get('basePath'),
        method=__ret__.get('method'),
        queries=__ret__.get('queries'),
        relative_path=__ret__.get('relativePath'),
        relative_path_parameters=__ret__.get('relativePathParameters'),
        value=__ret__.get('value'))
