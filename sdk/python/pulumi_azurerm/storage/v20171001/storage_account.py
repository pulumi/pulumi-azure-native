# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class StorageAccount(pulumi.CustomResource):
    identity: pulumi.Output[dict]
    """
    The identity of the resource.
      * `principal_id` (`str`) - The principal ID of resource identity.
      * `tenant_id` (`str`) - The tenant ID of resource.
      * `type` (`str`) - The identity type.
    """
    kind: pulumi.Output[str]
    """
    Gets the Kind.
    """
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Properties of the storage account.
      * `access_tier` (`str`) - Required for storage accounts where kind = BlobStorage. The access tier used for billing.
      * `creation_time` (`str`) - Gets the creation date and time of the storage account in UTC.
      * `custom_domain` (`dict`) - Gets the custom domain the user assigned to this storage account.
        * `name` (`str`) - Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
        * `use_sub_domain_name` (`bool`) - Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.

      * `encryption` (`dict`) - Gets the encryption settings on the account. If unspecified, the account is unencrypted.
        * `key_source` (`str`) - The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
        * `keyvaultproperties` (`dict`) - Properties provided by key vault.
          * `keyname` (`str`) - The name of KeyVault key.
          * `keyvaulturi` (`str`) - The Uri of KeyVault.
          * `keyversion` (`str`) - The version of KeyVault key.

        * `services` (`dict`) - List of services which support encryption.
          * `blob` (`dict`) - The encryption function of the blob storage service.
            * `enabled` (`bool`) - A boolean indicating whether or not the service encrypts the data as it is stored.
            * `last_enabled_time` (`str`) - Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.

          * `file` (`dict`) - The encryption function of the file storage service.
          * `queue` (`dict`) - The encryption function of the queue storage service.
          * `table` (`dict`) - The encryption function of the table storage service.

      * `last_geo_failover_time` (`str`) - Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.
      * `network_acls` (`dict`) - Network rule set
        * `bypass` (`str`) - Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
        * `default_action` (`str`) - Specifies the default action of allow or deny when no other rules match.
        * `ip_rules` (`list`) - Sets the IP ACL rules
          * `action` (`str`) - The action of IP ACL rule.
          * `value` (`str`) - Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.

        * `virtual_network_rules` (`list`) - Sets the virtual network rules
          * `action` (`str`) - The action of virtual network rule.
          * `id` (`str`) - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
          * `state` (`str`) - Gets the state of virtual network rule.

      * `primary_endpoints` (`dict`) - Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object. Note that Standard_ZRS and Premium_LRS accounts only return the blob endpoint.
        * `blob` (`str`) - Gets the blob endpoint.
        * `file` (`str`) - Gets the file endpoint.
        * `queue` (`str`) - Gets the queue endpoint.
        * `table` (`str`) - Gets the table endpoint.

      * `primary_location` (`str`) - Gets the location of the primary data center for the storage account.
      * `provisioning_state` (`str`) - Gets the status of the storage account at the time the operation was called.
      * `secondary_endpoints` (`dict`) - Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object from the secondary location of the storage account. Only available if the SKU name is Standard_RAGRS.
      * `secondary_location` (`str`) - Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.
      * `status_of_primary` (`str`) - Gets the status indicating whether the primary location of the storage account is available or unavailable.
      * `status_of_secondary` (`str`) - Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
      * `supports_https_traffic_only` (`bool`) - Allows https traffic only to storage service if sets to true.
    """
    sku: pulumi.Output[dict]
    """
    Gets the SKU.
      * `capabilities` (`list`) - The capability information in the specified sku, including file encryption, network acls, change notification, etc.
        * `name` (`str`) - The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.
        * `value` (`str`) - A string value to indicate states of given capability. Possibly 'true' or 'false'.

      * `kind` (`str`) - Indicates the type of storage account.
      * `locations` (`list`) - The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
      * `name` (`str`) - Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.
      * `resource_type` (`str`) - The type of the resource, usually it is 'storageAccounts'.
      * `restrictions` (`list`) - The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
        * `reason_code` (`str`) - The reason for the restriction. As of now this can be "QuotaId" or "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The "NotAvailableForSubscription" is related to capacity at DC.
        * `type` (`str`) - The type of restrictions. As of now only possible value for this is location.
        * `values` (`list`) - The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.

      * `tier` (`str`) - Gets the sku tier. This is based on the SKU name.
    """
    tags: pulumi.Output[dict]
    """
    Tags assigned to a resource; can be used for viewing and grouping a resource (across resource groups).
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, identity=None, kind=None, location=None, name=None, properties=None, resource_group_name=None, sku=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        The storage account.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] identity: The identity of the resource.
        :param pulumi.Input[str] kind: Required. Indicates the type of storage account.
        :param pulumi.Input[str] location: Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed.
        :param pulumi.Input[str] name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
        :param pulumi.Input[dict] properties: The parameters used to create the storage account.
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.
        :param pulumi.Input[dict] sku: Required. Gets or sets the sku name.
        :param pulumi.Input[dict] tags: Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters.

        The **identity** object supports the following:

          * `type` (`pulumi.Input[str]`) - The identity type.

        The **properties** object supports the following:

          * `access_tier` (`pulumi.Input[str]`) - Required for storage accounts where kind = BlobStorage. The access tier used for billing.
          * `custom_domain` (`pulumi.Input[dict]`) - User domain assigned to the storage account. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property.
            * `name` (`pulumi.Input[str]`) - Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
            * `use_sub_domain_name` (`pulumi.Input[bool]`) - Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.

          * `encryption` (`pulumi.Input[dict]`) - Provides the encryption settings on the account. If left unspecified the account encryption settings will remain the same. The default setting is unencrypted.
            * `key_source` (`pulumi.Input[str]`) - The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
            * `keyvaultproperties` (`pulumi.Input[dict]`) - Properties provided by key vault.
              * `keyname` (`pulumi.Input[str]`) - The name of KeyVault key.
              * `keyvaulturi` (`pulumi.Input[str]`) - The Uri of KeyVault.
              * `keyversion` (`pulumi.Input[str]`) - The version of KeyVault key.

            * `services` (`pulumi.Input[dict]`) - List of services which support encryption.
              * `blob` (`pulumi.Input[dict]`) - The encryption function of the blob storage service.
                * `enabled` (`pulumi.Input[bool]`) - A boolean indicating whether or not the service encrypts the data as it is stored.

              * `file` (`pulumi.Input[dict]`) - The encryption function of the file storage service.

          * `network_acls` (`pulumi.Input[dict]`) - Network rule set
            * `bypass` (`pulumi.Input[str]`) - Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
            * `default_action` (`pulumi.Input[str]`) - Specifies the default action of allow or deny when no other rules match.
            * `ip_rules` (`pulumi.Input[list]`) - Sets the IP ACL rules
              * `action` (`pulumi.Input[str]`) - The action of IP ACL rule.
              * `value` (`pulumi.Input[str]`) - Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.

            * `virtual_network_rules` (`pulumi.Input[list]`) - Sets the virtual network rules
              * `action` (`pulumi.Input[str]`) - The action of virtual network rule.
              * `id` (`pulumi.Input[str]`) - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
              * `state` (`pulumi.Input[str]`) - Gets the state of virtual network rule.

          * `supports_https_traffic_only` (`pulumi.Input[bool]`) - Allows https traffic only to storage service if sets to true.

        The **sku** object supports the following:

          * `name` (`pulumi.Input[str]`) - Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.
          * `restrictions` (`pulumi.Input[list]`) - The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
            * `reason_code` (`pulumi.Input[str]`) - The reason for the restriction. As of now this can be "QuotaId" or "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The "NotAvailableForSubscription" is related to capacity at DC.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['identity'] = identity
            if kind is None:
                raise TypeError("Missing required property 'kind'")
            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if sku is None:
                raise TypeError("Missing required property 'sku'")
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['type'] = None
        super(StorageAccount, __self__).__init__(
            'azurerm:storage/v20171001:StorageAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing StorageAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return StorageAccount(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
