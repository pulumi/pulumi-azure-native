# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetStorageAccountResult:
    """
    The storage account.
    """
    def __init__(__self__, access_tier=None, creation_time=None, custom_domain=None, enable_https_traffic_only=None, encryption=None, identity=None, is_hns_enabled=None, kind=None, last_geo_failover_time=None, location=None, name=None, network_rule_set=None, primary_endpoints=None, primary_location=None, provisioning_state=None, secondary_endpoints=None, secondary_location=None, sku=None, status_of_primary=None, status_of_secondary=None, tags=None, type=None):
        if access_tier and not isinstance(access_tier, str):
            raise TypeError("Expected argument 'access_tier' to be a str")
        __self__.access_tier = access_tier
        """
        Required for storage accounts where kind = BlobStorage. The access tier used for billing.
        """
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        __self__.creation_time = creation_time
        """
        Gets the creation date and time of the storage account in UTC.
        """
        if custom_domain and not isinstance(custom_domain, dict):
            raise TypeError("Expected argument 'custom_domain' to be a dict")
        __self__.custom_domain = custom_domain
        """
        Gets the custom domain the user assigned to this storage account.
        """
        if enable_https_traffic_only and not isinstance(enable_https_traffic_only, bool):
            raise TypeError("Expected argument 'enable_https_traffic_only' to be a bool")
        __self__.enable_https_traffic_only = enable_https_traffic_only
        """
        Allows https traffic only to storage service if sets to true.
        """
        if encryption and not isinstance(encryption, dict):
            raise TypeError("Expected argument 'encryption' to be a dict")
        __self__.encryption = encryption
        """
        Gets the encryption settings on the account. If unspecified, the account is unencrypted.
        """
        if identity and not isinstance(identity, dict):
            raise TypeError("Expected argument 'identity' to be a dict")
        __self__.identity = identity
        """
        The identity of the resource.
        """
        if is_hns_enabled and not isinstance(is_hns_enabled, bool):
            raise TypeError("Expected argument 'is_hns_enabled' to be a bool")
        __self__.is_hns_enabled = is_hns_enabled
        """
        Account HierarchicalNamespace enabled if sets to true.
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Gets the Kind.
        """
        if last_geo_failover_time and not isinstance(last_geo_failover_time, str):
            raise TypeError("Expected argument 'last_geo_failover_time' to be a str")
        __self__.last_geo_failover_time = last_geo_failover_time
        """
        Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The geo-location where the resource lives
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource
        """
        if network_rule_set and not isinstance(network_rule_set, dict):
            raise TypeError("Expected argument 'network_rule_set' to be a dict")
        __self__.network_rule_set = network_rule_set
        """
        Network rule set
        """
        if primary_endpoints and not isinstance(primary_endpoints, dict):
            raise TypeError("Expected argument 'primary_endpoints' to be a dict")
        __self__.primary_endpoints = primary_endpoints
        """
        Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object. Note that Standard_ZRS and Premium_LRS accounts only return the blob endpoint.
        """
        if primary_location and not isinstance(primary_location, str):
            raise TypeError("Expected argument 'primary_location' to be a str")
        __self__.primary_location = primary_location
        """
        Gets the location of the primary data center for the storage account.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Gets the status of the storage account at the time the operation was called.
        """
        if secondary_endpoints and not isinstance(secondary_endpoints, dict):
            raise TypeError("Expected argument 'secondary_endpoints' to be a dict")
        __self__.secondary_endpoints = secondary_endpoints
        """
        Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object from the secondary location of the storage account. Only available if the SKU name is Standard_RAGRS.
        """
        if secondary_location and not isinstance(secondary_location, str):
            raise TypeError("Expected argument 'secondary_location' to be a str")
        __self__.secondary_location = secondary_location
        """
        Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.
        """
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        Gets the SKU.
        """
        if status_of_primary and not isinstance(status_of_primary, str):
            raise TypeError("Expected argument 'status_of_primary' to be a str")
        __self__.status_of_primary = status_of_primary
        """
        Gets the status indicating whether the primary location of the storage account is available or unavailable.
        """
        if status_of_secondary and not isinstance(status_of_secondary, str):
            raise TypeError("Expected argument 'status_of_secondary' to be a str")
        __self__.status_of_secondary = status_of_secondary
        """
        Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        """


class AwaitableGetStorageAccountResult(GetStorageAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStorageAccountResult(
            access_tier=self.access_tier,
            creation_time=self.creation_time,
            custom_domain=self.custom_domain,
            enable_https_traffic_only=self.enable_https_traffic_only,
            encryption=self.encryption,
            identity=self.identity,
            is_hns_enabled=self.is_hns_enabled,
            kind=self.kind,
            last_geo_failover_time=self.last_geo_failover_time,
            location=self.location,
            name=self.name,
            network_rule_set=self.network_rule_set,
            primary_endpoints=self.primary_endpoints,
            primary_location=self.primary_location,
            provisioning_state=self.provisioning_state,
            secondary_endpoints=self.secondary_endpoints,
            secondary_location=self.secondary_location,
            sku=self.sku,
            status_of_primary=self.status_of_primary,
            status_of_secondary=self.status_of_secondary,
            tags=self.tags,
            type=self.type)


def get_storage_account(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.  
    :param str resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:storage/v20180201:getStorageAccount', __args__, opts=opts).value

    return AwaitableGetStorageAccountResult(
        access_tier=__ret__.get('accessTier'),
        creation_time=__ret__.get('creationTime'),
        custom_domain=__ret__.get('customDomain'),
        enable_https_traffic_only=__ret__.get('enableHttpsTrafficOnly'),
        encryption=__ret__.get('encryption'),
        identity=__ret__.get('identity'),
        is_hns_enabled=__ret__.get('isHnsEnabled'),
        kind=__ret__.get('kind'),
        last_geo_failover_time=__ret__.get('lastGeoFailoverTime'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        network_rule_set=__ret__.get('networkRuleSet'),
        primary_endpoints=__ret__.get('primaryEndpoints'),
        primary_location=__ret__.get('primaryLocation'),
        provisioning_state=__ret__.get('provisioningState'),
        secondary_endpoints=__ret__.get('secondaryEndpoints'),
        secondary_location=__ret__.get('secondaryLocation'),
        sku=__ret__.get('sku'),
        status_of_primary=__ret__.get('statusOfPrimary'),
        status_of_secondary=__ret__.get('statusOfSecondary'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
