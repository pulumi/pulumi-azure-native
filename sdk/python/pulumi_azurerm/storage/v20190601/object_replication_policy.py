# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ObjectReplicationPolicy(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    properties: pulumi.Output[dict]
    """
    Returns the Storage Account Object Replication Policy.
      * `destination_account` (`str`) - Required. Destination account name.
      * `enabled_time` (`str`) - Indicates when the policy is enabled on the source account.
      * `policy_id` (`str`) - A unique id for object replication policy.
      * `rules` (`list`) - The storage account object replication rules.
        * `destination_container` (`str`) - Required. Destination container name.
        * `filters` (`dict`) - Optional. An object that defines the filter set.
          * `min_creation_time` (`str`) - Blobs created after the time will be replicated to the destination. It must be in datetime format 'yyyy-MM-ddTHH:mm:ssZ'. Example: 2020-02-19T16:05:00Z
          * `prefix_match` (`list`) - Optional. Filters the results to replicate only blobs whose names begin with the specified prefix.

        * `rule_id` (`str`) - Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
        * `source_container` (`str`) - Required. Source container name.

      * `source_account` (`str`) - Required. Source account name.
    """
    type: pulumi.Output[str]
    """
    The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    """
    def __init__(__self__, resource_name, opts=None, account_name=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The replication policy between two storage accounts. Multiple rules can be defined in one policy.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
        :param pulumi.Input[str] name: The ID of object replication policy or 'default' if the policy ID is unknown.
        :param pulumi.Input[dict] properties: Returns the Storage Account Object Replication Policy.
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.

        The **properties** object supports the following:

          * `destination_account` (`pulumi.Input[str]`) - Required. Destination account name.
          * `rules` (`pulumi.Input[list]`) - The storage account object replication rules.
            * `destination_container` (`pulumi.Input[str]`) - Required. Destination container name.
            * `filters` (`pulumi.Input[dict]`) - Optional. An object that defines the filter set.
              * `min_creation_time` (`pulumi.Input[str]`) - Blobs created after the time will be replicated to the destination. It must be in datetime format 'yyyy-MM-ddTHH:mm:ssZ'. Example: 2020-02-19T16:05:00Z
              * `prefix_match` (`pulumi.Input[list]`) - Optional. Filters the results to replicate only blobs whose names begin with the specified prefix.

            * `rule_id` (`pulumi.Input[str]`) - Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
            * `source_container` (`pulumi.Input[str]`) - Required. Source container name.

          * `source_account` (`pulumi.Input[str]`) - Required. Source account name.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_name is None:
                raise TypeError("Missing required property 'account_name'")
            __props__['account_name'] = account_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['type'] = None
        super(ObjectReplicationPolicy, __self__).__init__(
            'azurerm:storage/v20190601:ObjectReplicationPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ObjectReplicationPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ObjectReplicationPolicy(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
