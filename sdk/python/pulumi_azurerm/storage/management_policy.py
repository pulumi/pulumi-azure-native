# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class ManagementPolicy(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    properties: pulumi.Output[dict]
    """
    Returns the Storage Account Data Policies Rules.
      * `last_modified_time` (`str`) - Returns the date and time the ManagementPolicies was last modified.
      * `policy` (`dict`) - The Storage Account ManagementPolicy, in JSON format. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
        * `rules` (`list`) - The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
          * `definition` (`dict`) - An object that defines the Lifecycle rule.
            * `actions` (`dict`) - An object that defines the action set.
              * `base_blob` (`dict`) - The management policy action for base blob
                * `delete` (`dict`) - The function to delete the blob
                  * `days_after_modification_greater_than` (`float`) - Value indicating the age in days after last modification

                * `tier_to_archive` (`dict`) - The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier
                * `tier_to_cool` (`dict`) - The function to tier blobs to cool storage. Support blobs currently at Hot tier

              * `snapshot` (`dict`) - The management policy action for snapshot
                * `delete` (`dict`) - The function to delete the blob snapshot
                  * `days_after_creation_greater_than` (`float`) - Value indicating the age in days after creation

            * `filters` (`dict`) - An object that defines the filter set.
              * `blob_index_match` (`list`) - An array of blob index tag based filters, there can be at most 10 tag filters
                * `name` (`str`) - This is the filter tag name, it can have 1 - 128 characters
                * `op` (`str`) - This is the comparison operator which is used for object comparison and filtering. Only == (equality operator) is currently supported
                * `value` (`str`) - This is the filter tag value field used for tag based filtering, it can have 0 - 256 characters

              * `blob_types` (`list`) - An array of predefined enum values. Only blockBlob is supported.
              * `prefix_match` (`list`) - An array of strings for prefixes to be match.

          * `enabled` (`bool`) - Rule is enabled if set to true.
          * `name` (`str`) - A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
          * `type` (`str`) - The valid value is Lifecycle
    """
    type: pulumi.Output[str]
    """
    The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    """
    def __init__(__self__, resource_name, opts=None, account_name=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The Get Storage Account ManagementPolicies operation response.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
        :param pulumi.Input[str] name: The name of the Storage Account Management Policy. It should always be 'default'
        :param pulumi.Input[dict] properties: Returns the Storage Account Data Policies Rules.
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive.

        The **properties** object supports the following:

          * `policy` (`pulumi.Input[dict]`) - The Storage Account ManagementPolicy, in JSON format. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
            * `rules` (`pulumi.Input[list]`) - The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
              * `definition` (`pulumi.Input[dict]`) - An object that defines the Lifecycle rule.
                * `actions` (`pulumi.Input[dict]`) - An object that defines the action set.
                  * `base_blob` (`pulumi.Input[dict]`) - The management policy action for base blob
                    * `delete` (`pulumi.Input[dict]`) - The function to delete the blob
                      * `days_after_modification_greater_than` (`pulumi.Input[float]`) - Value indicating the age in days after last modification

                    * `tier_to_archive` (`pulumi.Input[dict]`) - The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier
                    * `tier_to_cool` (`pulumi.Input[dict]`) - The function to tier blobs to cool storage. Support blobs currently at Hot tier

                  * `snapshot` (`pulumi.Input[dict]`) - The management policy action for snapshot
                    * `delete` (`pulumi.Input[dict]`) - The function to delete the blob snapshot
                      * `days_after_creation_greater_than` (`pulumi.Input[float]`) - Value indicating the age in days after creation

                * `filters` (`pulumi.Input[dict]`) - An object that defines the filter set.
                  * `blob_index_match` (`pulumi.Input[list]`) - An array of blob index tag based filters, there can be at most 10 tag filters
                    * `name` (`pulumi.Input[str]`) - This is the filter tag name, it can have 1 - 128 characters
                    * `op` (`pulumi.Input[str]`) - This is the comparison operator which is used for object comparison and filtering. Only == (equality operator) is currently supported
                    * `value` (`pulumi.Input[str]`) - This is the filter tag value field used for tag based filtering, it can have 0 - 256 characters

                  * `blob_types` (`pulumi.Input[list]`) - An array of predefined enum values. Only blockBlob is supported.
                  * `prefix_match` (`pulumi.Input[list]`) - An array of strings for prefixes to be match.

              * `enabled` (`pulumi.Input[bool]`) - Rule is enabled if set to true.
              * `name` (`pulumi.Input[str]`) - A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
              * `type` (`pulumi.Input[str]`) - The valid value is Lifecycle
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_name is None:
                raise TypeError("Missing required property 'account_name'")
            __props__['account_name'] = account_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['type'] = None
        super(ManagementPolicy, __self__).__init__(
            'azurerm:storage:ManagementPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ManagementPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ManagementPolicy(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
