# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetCacheResult:
    """
    A Cache instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
    """
    def __init__(__self__, cache_size_gb=None, health=None, location=None, mount_addresses=None, name=None, provisioning_state=None, sku=None, subnet=None, tags=None, type=None, upgrade_status=None):
        if cache_size_gb and not isinstance(cache_size_gb, float):
            raise TypeError("Expected argument 'cache_size_gb' to be a float")
        __self__.cache_size_gb = cache_size_gb
        """
        The size of this Cache, in GB.
        """
        if health and not isinstance(health, dict):
            raise TypeError("Expected argument 'health' to be a dict")
        __self__.health = health
        """
        Health of the Cache.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Region name string.
        """
        if mount_addresses and not isinstance(mount_addresses, list):
            raise TypeError("Expected argument 'mount_addresses' to be a list")
        __self__.mount_addresses = mount_addresses
        """
        Array of IP addresses that can be used by clients mounting this Cache.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Name of Cache.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        """
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        SKU for the Cache.
        """
        if subnet and not isinstance(subnet, str):
            raise TypeError("Expected argument 'subnet' to be a str")
        __self__.subnet = subnet
        """
        Subnet used for the Cache.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        ARM tags as name/value pairs.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Type of the Cache; Microsoft.StorageCache/Cache
        """
        if upgrade_status and not isinstance(upgrade_status, dict):
            raise TypeError("Expected argument 'upgrade_status' to be a dict")
        __self__.upgrade_status = upgrade_status
        """
        Upgrade status of the Cache.
        """


class AwaitableGetCacheResult(GetCacheResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCacheResult(
            cache_size_gb=self.cache_size_gb,
            health=self.health,
            location=self.location,
            mount_addresses=self.mount_addresses,
            name=self.name,
            provisioning_state=self.provisioning_state,
            sku=self.sku,
            subnet=self.subnet,
            tags=self.tags,
            type=self.type,
            upgrade_status=self.upgrade_status)


def get_cache(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of Cache.
    :param str resource_group_name: Target resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:storagecache/v20191101:getCache', __args__, opts=opts).value

    return AwaitableGetCacheResult(
        cache_size_gb=__ret__.get('cacheSizeGB'),
        health=__ret__.get('health'),
        location=__ret__.get('location'),
        mount_addresses=__ret__.get('mountAddresses'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        sku=__ret__.get('sku'),
        subnet=__ret__.get('subnet'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        upgrade_status=__ret__.get('upgradeStatus'))
