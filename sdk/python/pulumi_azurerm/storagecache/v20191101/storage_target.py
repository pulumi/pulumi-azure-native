# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class StorageTarget(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    Name of the Storage Target.
    """
    properties: pulumi.Output[dict]
    """
    Properties of the Storage Target.
      * `clfs` (`dict`) - Properties when targetType is clfs.
        * `target` (`str`) - Resource ID of storage container.

      * `junctions` (`list`) - List of Cache namespace junctions to target for namespace associations.
        * `namespace_path` (`str`) - Namespace path on a Cache for a Storage Target.
        * `nfs_export` (`str`) - NFS export where targetPath exists.
        * `target_path` (`str`) - Path in Storage Target to which namespacePath points.

      * `nfs3` (`dict`) - Properties when targetType is nfs3.
        * `target` (`str`) - IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
        * `usage_model` (`str`) - Identifies the primary usage model to be used for this Storage Target. Get choices from .../usageModels

      * `provisioning_state` (`str`) - ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
      * `target_type` (`str`) - Type of the Storage Target.
      * `unknown` (`dict`) - Properties when targetType is unknown.
        * `unknown_map` (`dict`) - Dictionary of string->string pairs containing information about the Storage Target.
    """
    type: pulumi.Output[str]
    """
    Type of the Storage Target; Microsoft.StorageCache/Cache/StorageTarget
    """
    def __init__(__self__, resource_name, opts=None, cache_name=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        A storage system being cached by a Cache.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cache_name: Name of Cache.
        :param pulumi.Input[str] name: Name of the Storage Target.
        :param pulumi.Input[dict] properties: Properties of the Storage Target.
        :param pulumi.Input[str] resource_group_name: Target resource group.

        The **properties** object supports the following:

          * `clfs` (`pulumi.Input[dict]`) - Properties when targetType is clfs.
            * `target` (`pulumi.Input[str]`) - Resource ID of storage container.

          * `junctions` (`pulumi.Input[list]`) - List of Cache namespace junctions to target for namespace associations.
            * `namespace_path` (`pulumi.Input[str]`) - Namespace path on a Cache for a Storage Target.
            * `nfs_export` (`pulumi.Input[str]`) - NFS export where targetPath exists.
            * `target_path` (`pulumi.Input[str]`) - Path in Storage Target to which namespacePath points.

          * `nfs3` (`pulumi.Input[dict]`) - Properties when targetType is nfs3.
            * `target` (`pulumi.Input[str]`) - IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
            * `usage_model` (`pulumi.Input[str]`) - Identifies the primary usage model to be used for this Storage Target. Get choices from .../usageModels

          * `provisioning_state` (`pulumi.Input[str]`) - ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
          * `target_type` (`pulumi.Input[str]`) - Type of the Storage Target.
          * `unknown` (`pulumi.Input[dict]`) - Properties when targetType is unknown.
            * `unknown_map` (`pulumi.Input[dict]`) - Dictionary of string->string pairs containing information about the Storage Target.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if cache_name is None:
                raise TypeError("Missing required property 'cache_name'")
            __props__['cache_name'] = cache_name
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['type'] = None
        super(StorageTarget, __self__).__init__(
            'azurerm:storagecache/v20191101:StorageTarget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing StorageTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return StorageTarget(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
