# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ElasticPool(pulumi.CustomResource):
    kind: pulumi.Output[str]
    """
    Kind of elastic pool.  This is metadata used for the Azure portal experience.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    The properties representing the resource.
      * `creation_date` (`str`) - The creation date of the elastic pool (ISO8601 format).
      * `database_dtu_max` (`float`) - The maximum DTU any one database can consume.
      * `database_dtu_min` (`float`) - The minimum DTU all databases are guaranteed.
      * `dtu` (`float`) - The total shared DTU for the database elastic pool.
      * `edition` (`str`) - The edition of the elastic pool.
      * `state` (`str`) - The state of the elastic pool.
      * `storage_mb` (`float`) - Gets storage limit for the database elastic pool in MB.
      * `zone_redundant` (`bool`) - Whether or not this database elastic pool is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, location=None, name=None, properties=None, resource_group_name=None, server_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Represents a database elastic pool.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: The name of the elastic pool to be operated on (updated or created).
        :param pulumi.Input[dict] properties: The properties representing the resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        :param pulumi.Input[str] server_name: The name of the server.
        :param pulumi.Input[dict] tags: Resource tags.

        The **properties** object supports the following:

          * `database_dtu_max` (`pulumi.Input[float]`) - The maximum DTU any one database can consume.
          * `database_dtu_min` (`pulumi.Input[float]`) - The minimum DTU all databases are guaranteed.
          * `dtu` (`pulumi.Input[float]`) - The total shared DTU for the database elastic pool.
          * `edition` (`pulumi.Input[str]`) - The edition of the elastic pool.
          * `storage_mb` (`pulumi.Input[float]`) - Gets storage limit for the database elastic pool in MB.
          * `zone_redundant` (`pulumi.Input[bool]`) - Whether or not this database elastic pool is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if server_name is None:
                raise TypeError("Missing required property 'server_name'")
            __props__['server_name'] = server_name
            __props__['tags'] = tags
            __props__['kind'] = None
            __props__['type'] = None
        super(ElasticPool, __self__).__init__(
            'azurerm:sql/v20140401:ElasticPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ElasticPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ElasticPool(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
