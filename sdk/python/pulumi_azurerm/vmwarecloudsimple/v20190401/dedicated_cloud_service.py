# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class DedicatedCloudService(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Azure region
    """
    name: pulumi.Output[str]
    """
    {dedicatedCloudServiceName}
    """
    properties: pulumi.Output[dict]
    """
    The properties of Dedicated Node Service
      * `gateway_subnet` (`str`) - gateway Subnet for the account. It will collect the subnet address and always treat it as /28
      * `is_account_onboarded` (`str`) - indicates whether account onboarded or not in a given region
      * `nodes` (`float`) - total nodes purchased
      * `service_url` (`str`) - link to a service management web portal
    """
    tags: pulumi.Output[dict]
    """
    The list of tags
    """
    type: pulumi.Output[str]
    """
    {resourceProviderNamespace}/{resourceType}
    """
    def __init__(__self__, resource_name, opts=None, gateway_subnet=None, location=None, name=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Dedicated cloud service model

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] gateway_subnet: gateway Subnet for the account. It will collect the subnet address and always treat it as /28
        :param pulumi.Input[str] location: Azure region
        :param pulumi.Input[str] name: dedicated cloud Service name
        :param pulumi.Input[str] resource_group_name: The name of the resource group
        :param pulumi.Input[dict] tags: The list of tags
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if gateway_subnet is None:
                raise TypeError("Missing required property 'gateway_subnet'")
            __props__['gateway_subnet'] = gateway_subnet
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['properties'] = None
            __props__['type'] = None
        super(DedicatedCloudService, __self__).__init__(
            'azurerm:vmwarecloudsimple/v20190401:DedicatedCloudService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing DedicatedCloudService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return DedicatedCloudService(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
