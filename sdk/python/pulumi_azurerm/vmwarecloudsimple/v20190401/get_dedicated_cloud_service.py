# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetDedicatedCloudServiceResult:
    """
    Dedicated cloud service model
    """
    def __init__(__self__, gateway_subnet=None, is_account_onboarded=None, location=None, name=None, nodes=None, service_url=None, tags=None, type=None):
        if gateway_subnet and not isinstance(gateway_subnet, str):
            raise TypeError("Expected argument 'gateway_subnet' to be a str")
        __self__.gateway_subnet = gateway_subnet
        """
        gateway Subnet for the account. It will collect the subnet address and always treat it as /28
        """
        if is_account_onboarded and not isinstance(is_account_onboarded, str):
            raise TypeError("Expected argument 'is_account_onboarded' to be a str")
        __self__.is_account_onboarded = is_account_onboarded
        """
        indicates whether account onboarded or not in a given region
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Azure region
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        {dedicatedCloudServiceName}
        """
        if nodes and not isinstance(nodes, float):
            raise TypeError("Expected argument 'nodes' to be a float")
        __self__.nodes = nodes
        """
        total nodes purchased
        """
        if service_url and not isinstance(service_url, str):
            raise TypeError("Expected argument 'service_url' to be a str")
        __self__.service_url = service_url
        """
        link to a service management web portal
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The list of tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        {resourceProviderNamespace}/{resourceType}
        """


class AwaitableGetDedicatedCloudServiceResult(GetDedicatedCloudServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDedicatedCloudServiceResult(
            gateway_subnet=self.gateway_subnet,
            is_account_onboarded=self.is_account_onboarded,
            location=self.location,
            name=self.name,
            nodes=self.nodes,
            service_url=self.service_url,
            tags=self.tags,
            type=self.type)


def get_dedicated_cloud_service(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: dedicated cloud Service name
    :param str resource_group_name: The name of the resource group
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:vmwarecloudsimple/v20190401:getDedicatedCloudService', __args__, opts=opts).value

    return AwaitableGetDedicatedCloudServiceResult(
        gateway_subnet=__ret__.get('gatewaySubnet'),
        is_account_onboarded=__ret__.get('isAccountOnboarded'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        nodes=__ret__.get('nodes'),
        service_url=__ret__.get('serviceURL'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
