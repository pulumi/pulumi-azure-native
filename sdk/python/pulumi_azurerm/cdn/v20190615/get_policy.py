# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetPolicyResult:
    """
    Defines web application firewall policy for Azure CDN.
    """
    def __init__(__self__, custom_rules=None, endpoint_links=None, etag=None, location=None, managed_rules=None, name=None, policy_settings=None, provisioning_state=None, rate_limit_rules=None, resource_state=None, sku=None, tags=None, type=None):
        if custom_rules and not isinstance(custom_rules, dict):
            raise TypeError("Expected argument 'custom_rules' to be a dict")
        __self__.custom_rules = custom_rules
        """
        Describes custom rules inside the policy.
        """
        if endpoint_links and not isinstance(endpoint_links, list):
            raise TypeError("Expected argument 'endpoint_links' to be a list")
        __self__.endpoint_links = endpoint_links
        """
        Describes Azure CDN endpoints associated with this Web Application Firewall policy.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Gets a unique read-only string that changes whenever the resource is updated.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if managed_rules and not isinstance(managed_rules, dict):
            raise TypeError("Expected argument 'managed_rules' to be a dict")
        __self__.managed_rules = managed_rules
        """
        Describes managed rules inside the policy.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if policy_settings and not isinstance(policy_settings, dict):
            raise TypeError("Expected argument 'policy_settings' to be a dict")
        __self__.policy_settings = policy_settings
        """
        Describes  policySettings for policy
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Provisioning state of the WebApplicationFirewallPolicy.
        """
        if rate_limit_rules and not isinstance(rate_limit_rules, dict):
            raise TypeError("Expected argument 'rate_limit_rules' to be a dict")
        __self__.rate_limit_rules = rate_limit_rules
        """
        Describes rate limit rules inside the policy.
        """
        if resource_state and not isinstance(resource_state, str):
            raise TypeError("Expected argument 'resource_state' to be a str")
        __self__.resource_state = resource_state
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        The pricing tier (defines a CDN provider, feature list and rate) of the CdnWebApplicationFirewallPolicy.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetPolicyResult(GetPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyResult(
            custom_rules=self.custom_rules,
            endpoint_links=self.endpoint_links,
            etag=self.etag,
            location=self.location,
            managed_rules=self.managed_rules,
            name=self.name,
            policy_settings=self.policy_settings,
            provisioning_state=self.provisioning_state,
            rate_limit_rules=self.rate_limit_rules,
            resource_state=self.resource_state,
            sku=self.sku,
            tags=self.tags,
            type=self.type)


def get_policy(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the CdnWebApplicationFirewallPolicy.
    :param str resource_group_name: Name of the Resource group within the Azure subscription.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:cdn/v20190615:getPolicy', __args__, opts=opts).value

    return AwaitableGetPolicyResult(
        custom_rules=__ret__.get('customRules'),
        endpoint_links=__ret__.get('endpointLinks'),
        etag=__ret__.get('etag'),
        location=__ret__.get('location'),
        managed_rules=__ret__.get('managedRules'),
        name=__ret__.get('name'),
        policy_settings=__ret__.get('policySettings'),
        provisioning_state=__ret__.get('provisioningState'),
        rate_limit_rules=__ret__.get('rateLimitRules'),
        resource_state=__ret__.get('resourceState'),
        sku=__ret__.get('sku'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
