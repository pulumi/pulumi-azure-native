# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetSnapshotResult:
    """
    Snapshot of a Volume
    """
    def __init__(__self__, created=None, file_system_id=None, location=None, name=None, provisioning_state=None, snapshot_id=None, type=None):
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        __self__.created = created
        """
        The creation date of the snapshot
        """
        if file_system_id and not isinstance(file_system_id, str):
            raise TypeError("Expected argument 'file_system_id' to be a str")
        __self__.file_system_id = file_system_id
        """
        UUID v4 used to identify the FileSystem
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Azure lifecycle management
        """
        if snapshot_id and not isinstance(snapshot_id, str):
            raise TypeError("Expected argument 'snapshot_id' to be a str")
        __self__.snapshot_id = snapshot_id
        """
        UUID v4 used to identify the Snapshot
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """


class AwaitableGetSnapshotResult(GetSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnapshotResult(
            created=self.created,
            file_system_id=self.file_system_id,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            snapshot_id=self.snapshot_id,
            type=self.type)


def get_snapshot(account_name=None, name=None, pool_name=None, resource_group_name=None, volume_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str account_name: The name of the NetApp account
    :param str name: The name of the mount target
    :param str pool_name: The name of the capacity pool
    :param str resource_group_name: The name of the resource group.
    :param str volume_name: The name of the volume
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['name'] = name
    __args__['poolName'] = pool_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['volumeName'] = volume_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:netapp/v20191101:getSnapshot', __args__, opts=opts).value

    return AwaitableGetSnapshotResult(
        created=__ret__.get('created'),
        file_system_id=__ret__.get('fileSystemId'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        snapshot_id=__ret__.get('snapshotId'),
        type=__ret__.get('type'))
