# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVolumeResult:
    """
    Volume resource
    """
    def __init__(__self__, baremetal_tenant_id=None, creation_token=None, data_protection=None, export_policy=None, file_system_id=None, is_restoring=None, location=None, mount_targets=None, name=None, protocol_types=None, provisioning_state=None, service_level=None, snapshot_directory_visible=None, snapshot_id=None, subnet_id=None, tags=None, type=None, usage_threshold=None, volume_type=None):
        if baremetal_tenant_id and not isinstance(baremetal_tenant_id, str):
            raise TypeError("Expected argument 'baremetal_tenant_id' to be a str")
        __self__.baremetal_tenant_id = baremetal_tenant_id
        """
        Unique Baremetal Tenant Identifier.
        """
        if creation_token and not isinstance(creation_token, str):
            raise TypeError("Expected argument 'creation_token' to be a str")
        __self__.creation_token = creation_token
        """
        A unique file path for the volume. Used when creating mount targets
        """
        if data_protection and not isinstance(data_protection, dict):
            raise TypeError("Expected argument 'data_protection' to be a dict")
        __self__.data_protection = data_protection
        """
        DataProtection type volumes include an object containing details of the replication
        """
        if export_policy and not isinstance(export_policy, dict):
            raise TypeError("Expected argument 'export_policy' to be a dict")
        __self__.export_policy = export_policy
        """
        Set of export policy rules
        """
        if file_system_id and not isinstance(file_system_id, str):
            raise TypeError("Expected argument 'file_system_id' to be a str")
        __self__.file_system_id = file_system_id
        """
        Unique FileSystem Identifier.
        """
        if is_restoring and not isinstance(is_restoring, bool):
            raise TypeError("Expected argument 'is_restoring' to be a bool")
        __self__.is_restoring = is_restoring
        """
        Restoring
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if mount_targets and not isinstance(mount_targets, list):
            raise TypeError("Expected argument 'mount_targets' to be a list")
        __self__.mount_targets = mount_targets
        """
        List of mount targets
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if protocol_types and not isinstance(protocol_types, list):
            raise TypeError("Expected argument 'protocol_types' to be a list")
        __self__.protocol_types = protocol_types
        """
        Set of protocol types
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Azure lifecycle management
        """
        if service_level and not isinstance(service_level, str):
            raise TypeError("Expected argument 'service_level' to be a str")
        __self__.service_level = service_level
        """
        The service level of the file system
        """
        if snapshot_directory_visible and not isinstance(snapshot_directory_visible, bool):
            raise TypeError("Expected argument 'snapshot_directory_visible' to be a bool")
        __self__.snapshot_directory_visible = snapshot_directory_visible
        """
        If enabled (true) the volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots (default to true).
        """
        if snapshot_id and not isinstance(snapshot_id, str):
            raise TypeError("Expected argument 'snapshot_id' to be a str")
        __self__.snapshot_id = snapshot_id
        """
        UUID v4 or resource identifier used to identify the Snapshot.
        """
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        __self__.subnet_id = subnet_id
        """
        The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """
        if usage_threshold and not isinstance(usage_threshold, float):
            raise TypeError("Expected argument 'usage_threshold' to be a float")
        __self__.usage_threshold = usage_threshold
        """
        Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
        """
        if volume_type and not isinstance(volume_type, str):
            raise TypeError("Expected argument 'volume_type' to be a str")
        __self__.volume_type = volume_type
        """
        What type of volume is this
        """


class AwaitableGetVolumeResult(GetVolumeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVolumeResult(
            baremetal_tenant_id=self.baremetal_tenant_id,
            creation_token=self.creation_token,
            data_protection=self.data_protection,
            export_policy=self.export_policy,
            file_system_id=self.file_system_id,
            is_restoring=self.is_restoring,
            location=self.location,
            mount_targets=self.mount_targets,
            name=self.name,
            protocol_types=self.protocol_types,
            provisioning_state=self.provisioning_state,
            service_level=self.service_level,
            snapshot_directory_visible=self.snapshot_directory_visible,
            snapshot_id=self.snapshot_id,
            subnet_id=self.subnet_id,
            tags=self.tags,
            type=self.type,
            usage_threshold=self.usage_threshold,
            volume_type=self.volume_type)


def get_volume(account_name=None, name=None, pool_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str account_name: The name of the NetApp account
    :param str name: The name of the volume
    :param str pool_name: The name of the capacity pool
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['name'] = name
    __args__['poolName'] = pool_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:netapp/v20200201:getVolume', __args__, opts=opts).value

    return AwaitableGetVolumeResult(
        baremetal_tenant_id=__ret__.get('baremetalTenantId'),
        creation_token=__ret__.get('creationToken'),
        data_protection=__ret__.get('dataProtection'),
        export_policy=__ret__.get('exportPolicy'),
        file_system_id=__ret__.get('fileSystemId'),
        is_restoring=__ret__.get('isRestoring'),
        location=__ret__.get('location'),
        mount_targets=__ret__.get('mountTargets'),
        name=__ret__.get('name'),
        protocol_types=__ret__.get('protocolTypes'),
        provisioning_state=__ret__.get('provisioningState'),
        service_level=__ret__.get('serviceLevel'),
        snapshot_directory_visible=__ret__.get('snapshotDirectoryVisible'),
        snapshot_id=__ret__.get('snapshotId'),
        subnet_id=__ret__.get('subnetId'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        usage_threshold=__ret__.get('usageThreshold'),
        volume_type=__ret__.get('volumeType'))
