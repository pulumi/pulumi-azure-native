# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetHybridUseBenefitResult:
    """
    Response on GET of a hybrid use benefit
    """
    def __init__(__self__, created_date=None, etag=None, last_updated_date=None, name=None, provisioning_state=None, sku=None, type=None):
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        __self__.created_date = created_date
        """
        Created date
        """
        if etag and not isinstance(etag, float):
            raise TypeError("Expected argument 'etag' to be a float")
        __self__.etag = etag
        """
        Indicates the revision of the hybrid use benefit
        """
        if last_updated_date and not isinstance(last_updated_date, str):
            raise TypeError("Expected argument 'last_updated_date' to be a str")
        __self__.last_updated_date = last_updated_date
        """
        Last updated date
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Provisioning state
        """
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        Hybrid use benefit SKU
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        """


class AwaitableGetHybridUseBenefitResult(GetHybridUseBenefitResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHybridUseBenefitResult(
            created_date=self.created_date,
            etag=self.etag,
            last_updated_date=self.last_updated_date,
            name=self.name,
            provisioning_state=self.provisioning_state,
            sku=self.sku,
            type=self.type)


def get_hybrid_use_benefit(name=None, scope=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: This is a unique identifier for a plan. Should be a guid.
    :param str scope: The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['scope'] = scope
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:softwareplan/v20191201:getHybridUseBenefit', __args__, opts=opts).value

    return AwaitableGetHybridUseBenefitResult(
        created_date=__ret__.get('createdDate'),
        etag=__ret__.get('etag'),
        last_updated_date=__ret__.get('lastUpdatedDate'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        sku=__ret__.get('sku'),
        type=__ret__.get('type'))
