# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Workspace(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    The geo-location where the resource lives
    """
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    properties: pulumi.Output[dict]
    """
    The workspace properties.
      * `authorizations` (`list`) - The workspace provider authorizations.
        * `principal_id` (`str`) - The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the workspace resources.
        * `role_definition_id` (`str`) - The provider's role definition identifier. This role will define all the permissions that the provider must have on the workspace's container resource group. This role definition cannot have permission to delete the resource group.

      * `created_by` (`dict`) - Indicates the Object ID, PUID and Application ID of entity that created the workspace.
        * `application_id` (`str`) - The application ID of the application that initiated the creation of the workspace. For example, Azure Portal.
        * `oid` (`str`) - The Object ID that created the workspace.
        * `puid` (`str`) - The Personal Object ID corresponding to the object ID above

      * `created_date_time` (`str`) - Specifies the date and time when the workspace is created.
      * `managed_resource_group_id` (`str`) - The managed resource group Id.
      * `parameters` (`dict`) - The workspace's custom parameters.
        * `custom_private_subnet_name` (`dict`) - The name of the Private Subnet within the Virtual Network
          * `type` (`str`) - The type of variable that this is
          * `value` (`str`) - The value which should be used for this field.

        * `custom_public_subnet_name` (`dict`) - The name of a Public Subnet within the Virtual Network
        * `custom_virtual_network_id` (`dict`) - The ID of a Virtual Network where this Databricks Cluster should be created
        * `enable_no_public_ip` (`dict`) - Should the Public IP be Disabled?
          * `type` (`str`) - The type of variable that this is
          * `value` (`bool`) - The value which should be used for this field.

        * `encryption` (`dict`) - Contains the encryption details for Customer-Managed Key (CMK) enabled workspace.
          * `type` (`str`) - The type of variable that this is
          * `value` (`dict`) - The value which should be used for this field.
            * `key_name` (`str`) - The name of KeyVault key.
            * `key_source` (`str`) - The encryption keySource (provider). Possible values (case-insensitive):  Default, Microsoft.Keyvault
            * `keyvaulturi` (`str`) - The Uri of KeyVault.
            * `keyversion` (`str`) - The version of KeyVault key.

        * `prepare_encryption` (`dict`) - Prepare the workspace for encryption. Enables the Managed Identity for managed storage account.

      * `provisioning_state` (`str`) - The workspace provisioning state.
      * `storage_account_identity` (`dict`) - The details of Managed Identity of Storage Account
        * `principal_id` (`str`) - The objectId of the Managed Identity that is linked to the Managed Storage account.
        * `tenant_id` (`str`) - The tenant Id where the Managed Identity is created.
        * `type` (`str`) - The type of Identity created. It can be either SystemAssigned or UserAssigned.

      * `ui_definition_uri` (`str`) - The blob URI where the UI definition file is located.
      * `updated_by` (`dict`) - Indicates the Object ID, PUID and Application ID of entity that last updated the workspace.
      * `workspace_id` (`str`) - The unique identifier of the databricks workspace in databricks control plane.
      * `workspace_url` (`str`) - The workspace URL which is of the format 'adb-{workspaceId}.{random}.azuredatabricks.net'
    """
    sku: pulumi.Output[dict]
    """
    The SKU of the resource.
      * `name` (`str`) - The SKU name.
      * `tier` (`str`) - The SKU tier.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    """
    def __init__(__self__, resource_name, opts=None, authorizations=None, created_date_time=None, location=None, managed_resource_group_id=None, name=None, parameters=None, resource_group_name=None, sku=None, tags=None, ui_definition_uri=None, __props__=None, __name__=None, __opts__=None):
        """
        Information about workspace.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] authorizations: The workspace provider authorizations.
        :param pulumi.Input[str] created_date_time: Specifies the date and time when the workspace is created.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] managed_resource_group_id: The managed resource group Id.
        :param pulumi.Input[str] name: The name of the workspace.
        :param pulumi.Input[dict] parameters: The workspace's custom parameters.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[dict] sku: The SKU of the resource.
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[str] ui_definition_uri: The blob URI where the UI definition file is located.

        The **authorizations** object supports the following:

          * `principal_id` (`pulumi.Input[str]`) - The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the workspace resources.
          * `role_definition_id` (`pulumi.Input[str]`) - The provider's role definition identifier. This role will define all the permissions that the provider must have on the workspace's container resource group. This role definition cannot have permission to delete the resource group.

        The **parameters** object supports the following:

          * `custom_private_subnet_name` (`pulumi.Input[dict]`) - The name of the Private Subnet within the Virtual Network
            * `type` (`pulumi.Input[str]`) - The type of variable that this is
            * `value` (`pulumi.Input[str]`) - The value which should be used for this field.

          * `custom_public_subnet_name` (`pulumi.Input[dict]`) - The name of a Public Subnet within the Virtual Network
          * `custom_virtual_network_id` (`pulumi.Input[dict]`) - The ID of a Virtual Network where this Databricks Cluster should be created
          * `enable_no_public_ip` (`pulumi.Input[dict]`) - Should the Public IP be Disabled?
            * `type` (`pulumi.Input[str]`) - The type of variable that this is
            * `value` (`pulumi.Input[bool]`) - The value which should be used for this field.

          * `encryption` (`pulumi.Input[dict]`) - Contains the encryption details for Customer-Managed Key (CMK) enabled workspace.
            * `type` (`pulumi.Input[str]`) - The type of variable that this is
            * `value` (`pulumi.Input[dict]`) - The value which should be used for this field.
              * `key_name` (`pulumi.Input[str]`) - The name of KeyVault key.
              * `key_source` (`pulumi.Input[str]`) - The encryption keySource (provider). Possible values (case-insensitive):  Default, Microsoft.Keyvault
              * `key_vault_uri` (`pulumi.Input[str]`) - The Uri of KeyVault.
              * `key_version` (`pulumi.Input[str]`) - The version of KeyVault key.

          * `prepare_encryption` (`pulumi.Input[dict]`) - Prepare the workspace for encryption. Enables the Managed Identity for managed storage account.

        The **sku** object supports the following:

          * `name` (`pulumi.Input[str]`) - The SKU name.
          * `tier` (`pulumi.Input[str]`) - The SKU tier.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['authorizations'] = authorizations
            __props__['created_date_time'] = created_date_time
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if managed_resource_group_id is None:
                raise TypeError("Missing required property 'managed_resource_group_id'")
            __props__['managed_resource_group_id'] = managed_resource_group_id
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['parameters'] = parameters
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['ui_definition_uri'] = ui_definition_uri
            __props__['properties'] = None
            __props__['type'] = None
        super(Workspace, __self__).__init__(
            'azurerm:databricks/v20180401:Workspace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Workspace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Workspace(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
