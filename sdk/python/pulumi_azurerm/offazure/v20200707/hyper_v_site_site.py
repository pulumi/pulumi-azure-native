# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class HyperVSiteSite(pulumi.CustomResource):
    e_tag: pulumi.Output[str]
    """
    eTag for concurrency control.
    """
    location: pulumi.Output[str]
    """
    Azure location in which Sites is created.
    """
    name: pulumi.Output[str]
    """
    Name of the Hyper-V site.
    """
    properties: pulumi.Output[dict]
    """
    Nested properties of Hyper-V site.
      * `agent_details` (`dict`) - On-premises agent details.
        * `id` (`str`) - ID of the agent.
        * `key_vault_id` (`str`) - Key vault ARM Id.
        * `key_vault_uri` (`str`) - Key vault URI.
        * `last_heart_beat_utc` (`str`) - Last heartbeat time of the agent in UTC.
        * `version` (`str`) - Version of the agent.

      * `appliance_name` (`str`) - Appliance Name.
      * `discovery_solution_id` (`str`) - ARM ID of migration hub solution for SDS.
      * `service_endpoint` (`str`) - Service endpoint.
      * `service_principal_identity_details` (`dict`) - Service principal identity details used by agent for communication to the service.
        * `aad_authority` (`str`) - AAD Authority URL which was used to request the token for the service principal.
        * `application_id` (`str`) - Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        * `audience` (`str`) - Intended audience for the service principal.
        * `object_id` (`str`) - Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        * `raw_cert_data` (`str`) - Raw certificate data for building certificate expiry flows.
        * `tenant_id` (`str`) - Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
    """
    tags: pulumi.Output[dict]
    type: pulumi.Output[str]
    """
    Type of resource. Type = Microsoft.OffAzure/HyperVSites.
    """
    def __init__(__self__, resource_name, opts=None, e_tag=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Site REST Resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] e_tag: eTag for concurrency control.
        :param pulumi.Input[str] location: Azure location in which Sites is created.
        :param pulumi.Input[str] name: Site name.
        :param pulumi.Input[dict] properties: Nested properties of Hyper-V site.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.

        The **properties** object supports the following:

          * `agent_details` (`pulumi.Input[dict]`) - On-premises agent details.
            * `key_vault_id` (`pulumi.Input[str]`) - Key vault ARM Id.
            * `key_vault_uri` (`pulumi.Input[str]`) - Key vault URI.

          * `appliance_name` (`pulumi.Input[str]`) - Appliance Name.
          * `discovery_solution_id` (`pulumi.Input[str]`) - ARM ID of migration hub solution for SDS.
          * `service_principal_identity_details` (`pulumi.Input[dict]`) - Service principal identity details used by agent for communication to the service.
            * `aad_authority` (`pulumi.Input[str]`) - AAD Authority URL which was used to request the token for the service principal.
            * `application_id` (`pulumi.Input[str]`) - Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
            * `audience` (`pulumi.Input[str]`) - Intended audience for the service principal.
            * `object_id` (`pulumi.Input[str]`) - Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
            * `raw_cert_data` (`pulumi.Input[str]`) - Raw certificate data for building certificate expiry flows.
            * `tenant_id` (`pulumi.Input[str]`) - Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['e_tag'] = e_tag
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:offazure/v20200101:HyperVSiteSite")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(HyperVSiteSite, __self__).__init__(
            'azurerm:offazure/v20200707:HyperVSiteSite',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing HyperVSiteSite resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return HyperVSiteSite(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
