# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class IotDpsResource(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.
    """
    location: pulumi.Output[str]
    """
    The resource location.
    """
    name: pulumi.Output[str]
    """
    The resource name.
    """
    properties: pulumi.Output[dict]
    """
    Service specific properties for a provisioning service
      * `allocation_policy` (`str`) - Allocation policy to be used by this provisioning service.
      * `authorization_policies` (`list`) - List of authorization keys for a provisioning service.
        * `key_name` (`str`) - Name of the key.
        * `primary_key` (`str`) - Primary SAS key value.
        * `rights` (`str`) - Rights that this key has.
        * `secondary_key` (`str`) - Secondary SAS key value.

      * `device_provisioning_host_name` (`str`) - Device endpoint for this provisioning service.
      * `id_scope` (`str`) - Unique identifier of this provisioning service.
      * `iot_hubs` (`list`) - List of IoT hubs associated with this provisioning service.
        * `allocation_weight` (`float`) - Weight to apply for a given IoT hub.
        * `apply_allocation_policy` (`bool`) - Flag for applying allocationPolicy or not for a given IoT hub.
        * `connection_string` (`str`) - Connection string of the IoT hub.
        * `location` (`str`) - ARM region of the IoT hub.
        * `name` (`str`) - Host name of the IoT hub.

      * `provisioning_state` (`str`) - The ARM provisioning state of the provisioning service.
      * `service_operations_host_name` (`str`) - Service endpoint for provisioning service.
      * `state` (`str`) - Current state of the provisioning service.
    """
    sku: pulumi.Output[dict]
    """
    SKU info for a provisioning service.
      * `capacity` (`float`) - The number of units to provision
      * `name` (`str`) - Sku name.
      * `tier` (`str`) - Pricing tier name of the provisioning service.
    """
    tags: pulumi.Output[dict]
    """
    The resource tags.
    """
    type: pulumi.Output[str]
    """
    The resource type.
    """
    def __init__(__self__, resource_name, opts=None, etag=None, location=None, name=None, properties=None, resource_group_name=None, sku=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        The description of the provisioning service.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] etag: The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.
        :param pulumi.Input[str] location: The resource location.
        :param pulumi.Input[str] name: Name of provisioning service to create or update.
        :param pulumi.Input[dict] properties: Service specific properties for a provisioning service
        :param pulumi.Input[str] resource_group_name: Resource group identifier.
        :param pulumi.Input[dict] sku: SKU info for a provisioning service.
        :param pulumi.Input[dict] tags: The resource tags.

        The **properties** object supports the following:

          * `allocation_policy` (`pulumi.Input[str]`) - Allocation policy to be used by this provisioning service.
          * `authorization_policies` (`pulumi.Input[list]`) - List of authorization keys for a provisioning service.
            * `key_name` (`pulumi.Input[str]`) - Name of the key.
            * `primary_key` (`pulumi.Input[str]`) - Primary SAS key value.
            * `rights` (`pulumi.Input[str]`) - Rights that this key has.
            * `secondary_key` (`pulumi.Input[str]`) - Secondary SAS key value.

          * `iot_hubs` (`pulumi.Input[list]`) - List of IoT hubs associated with this provisioning service.
            * `allocation_weight` (`pulumi.Input[float]`) - Weight to apply for a given IoT hub.
            * `apply_allocation_policy` (`pulumi.Input[bool]`) - Flag for applying allocationPolicy or not for a given IoT hub.
            * `connection_string` (`pulumi.Input[str]`) - Connection string of the IoT hub.
            * `location` (`pulumi.Input[str]`) - ARM region of the IoT hub.

          * `provisioning_state` (`pulumi.Input[str]`) - The ARM provisioning state of the provisioning service.
          * `state` (`pulumi.Input[str]`) - Current state of the provisioning service.

        The **sku** object supports the following:

          * `capacity` (`pulumi.Input[float]`) - The number of units to provision
          * `name` (`pulumi.Input[str]`) - Sku name.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['etag'] = etag
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if properties is None:
                raise TypeError("Missing required property 'properties'")
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if sku is None:
                raise TypeError("Missing required property 'sku'")
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['type'] = None
        super(IotDpsResource, __self__).__init__(
            'azurerm:devices/v20171115:IotDpsResource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing IotDpsResource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return IotDpsResource(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
