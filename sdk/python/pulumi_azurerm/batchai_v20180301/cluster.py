# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class Cluster(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    The location of the resource
    """
    name: pulumi.Output[str]
    """
    The name of the resource
    """
    properties: pulumi.Output[dict]
    """
    The properties associated with the Cluster.
      * `allocation_state` (`str`) - Possible values are: steady and resizing. steady state indicates that the cluster is not resizing. There are no changes to the number of compute nodes in the cluster in progress. A cluster enters this state when it is created and when no operations are being performed on the cluster to change the number of compute nodes. resizing state indicates that the cluster is resizing; that is, compute nodes are being added to or removed from the cluster.
      * `allocation_state_transition_time` (`str`)
      * `creation_time` (`str`)
      * `current_node_count` (`float`)
      * `errors` (`list`) - This element contains all the errors encountered by various compute nodes during node setup.
        * `code` (`str`) - An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
        * `details` (`list`) - A list of additional details about the error.
          * `name` (`str`)
          * `value` (`str`)

        * `message` (`str`) - A message describing the error, intended to be suitable for display in a user interface.

      * `node_setup` (`dict`) - Use this to prepare the VM. NOTE: The volumes specified in mountVolumes are mounted first and then the setupTask is run. Therefore the setup task can use local mountPaths in its execution.
        * `mount_volumes` (`dict`) - Specified mount volumes will be available to all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
          * `azure_blob_file_systems` (`list`) - References to Azure Blob FUSE that are to be mounted to the cluster nodes.
            * `account_name` (`str`)
            * `container_name` (`str`)
            * `credentials` (`dict`) - Credentials to access Azure File Share.
              * `account_key` (`str`) - One of accountKey or accountKeySecretReference must be specified.
              * `account_key_secret_reference` (`dict`) - Users can store their secrets in Azure KeyVault and pass it to the Batch AI Service to integrate with KeyVault. One of accountKey or accountKeySecretReference must be specified.
                * `secret_url` (`str`)
                * `source_vault` (`dict`) - Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
                  * `id` (`str`) - The ID of the resource

            * `mount_options` (`str`)
            * `relative_mount_path` (`str`) - Note that all cluster level blob file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level blob file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.

          * `azure_file_shares` (`list`) - References to Azure File Shares that are to be mounted to the cluster nodes.
            * `account_name` (`str`)
            * `azure_file_url` (`str`)
            * `credentials` (`dict`) - Credentials to access Azure File Share.
            * `directory_mode` (`str`) - Default value is 0777. Valid only if OS is linux.
            * `file_mode` (`str`) - Default value is 0777. Valid only if OS is linux.
            * `relative_mount_path` (`str`) - Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.

          * `file_servers` (`list`)
            * `file_server` (`dict`) - Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
            * `mount_options` (`str`)
            * `relative_mount_path` (`str`) - Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
            * `source_directory` (`str`) - If this property is not specified, the entire File Server will be mounted.

          * `unmanaged_file_systems` (`list`)
            * `mount_command` (`str`)
            * `relative_mount_path` (`str`) - Note that all cluster level unmanaged file system will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and job level unmanaged file system will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.

        * `performance_counters_settings` (`dict`) - Performance counters reporting settings.
          * `app_insights_reference` (`dict`) - If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
            * `component` (`dict`) - Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
            * `instrumentation_key` (`str`)
            * `instrumentation_key_secret_reference` (`dict`) - Specifies KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.

        * `setup_task` (`dict`) - Specifies a setup task which can be used to customize the compute nodes of the cluster.
          * `command_line` (`str`)
          * `environment_variables` (`list`)
            * `name` (`str`)
            * `value` (`str`)

          * `run_elevated` (`bool`) - Note. Non-elevated tasks are run under an account added into sudoer list and can perform sudo when required.
          * `secrets` (`list`) - Server will never report values of these variables back.
            * `name` (`str`)
            * `value` (`str`)
            * `value_secret_reference` (`dict`) - Specifies KeyVault Store and Secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.

          * `std_out_err_path_prefix` (`str`) - The prefix of a path where the Batch AI service will upload the stdout and stderr of the setup task.
          * `std_out_err_path_suffix` (`str`) - Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. You can concatenate stdOutErrPathPrefix and stdOutErrPathSuffix to get the full path to the output directory.

      * `node_state_counts` (`dict`) - Counts of various compute node states on the cluster.
        * `idle_node_count` (`float`)
        * `leaving_node_count` (`float`)
        * `preparing_node_count` (`float`)
        * `running_node_count` (`float`)
        * `unusable_node_count` (`float`)

      * `provisioning_state` (`str`) - Possible value are: creating - Specifies that the cluster is being created. succeeded - Specifies that the cluster has been created successfully. failed - Specifies that the cluster creation has failed. deleting - Specifies that the cluster is being deleted.
      * `provisioning_state_transition_time` (`str`)
      * `scale_settings` (`dict`) - At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
        * `auto_scale` (`dict`) - The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the pending and running jobs on the cluster.
          * `initial_node_count` (`float`)
          * `maximum_node_count` (`float`)
          * `minimum_node_count` (`float`)

        * `manual` (`dict`) - Manual scale settings for the cluster.
          * `node_deallocation_option` (`str`) - The default value is requeue.
          * `target_node_count` (`float`) - Default is 0. If autoScaleSettings are not specified, then the Cluster starts with this target.

      * `subnet` (`dict`) - Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
      * `user_account_settings` (`dict`) - Settings for user account that gets created on each on the nodes of a cluster.
        * `admin_user_name` (`str`)
        * `admin_user_password` (`str`)
        * `admin_user_ssh_public_key` (`str`)

      * `virtual_machine_configuration` (`dict`) - Settings for OS image.
        * `image_reference` (`dict`) - The image reference.
          * `offer` (`str`)
          * `publisher` (`str`)
          * `sku` (`str`)
          * `version` (`str`)
          * `virtual_machine_image_id` (`str`) - The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.

      * `vm_priority` (`str`) - The default value is dedicated. The node can get preempted while the task is running if lowpriority is chosen. This is best suited if the workload is checkpointing and can be restarted.
      * `vm_size` (`str`) - All virtual machines in a cluster are the same size. For information about available VM sizes for clusters using images from the Virtual Machines Marketplace (see Sizes for Virtual Machines (Linux) or Sizes for Virtual Machines (Windows). Batch AI service supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
    """
    tags: pulumi.Output[dict]
    """
    The tags of the resource
    """
    type: pulumi.Output[str]
    """
    The type of the resource
    """
    def __init__(__self__, resource_name, opts=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Contains information about a Cluster.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: The region in which to create the cluster.
        :param pulumi.Input[str] name: The name of the cluster within the specified resource group. Cluster names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        :param pulumi.Input[dict] properties: The properties of the Cluster.
        :param pulumi.Input[str] resource_group_name: Name of the resource group to which the resource belongs.
        :param pulumi.Input[dict] tags: The user specified tags associated with the Cluster.

        The **properties** object supports the following:

          * `node_setup` (`pulumi.Input[dict]`) - Use this to prepare the VM. NOTE: The volumes specified in mountVolumes are mounted first and then the setupTask is run. Therefore the setup task can use local mountPaths in its execution.
            * `mount_volumes` (`pulumi.Input[dict]`) - Specified mount volumes will be available to all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
              * `azure_blob_file_systems` (`pulumi.Input[list]`) - References to Azure Blob FUSE that are to be mounted to the cluster nodes.
                * `account_name` (`pulumi.Input[str]`)
                * `container_name` (`pulumi.Input[str]`)
                * `credentials` (`pulumi.Input[dict]`) - Credentials to access Azure File Share.
                  * `account_key` (`pulumi.Input[str]`) - One of accountKey or accountKeySecretReference must be specified.
                  * `account_key_secret_reference` (`pulumi.Input[dict]`) - Users can store their secrets in Azure KeyVault and pass it to the Batch AI Service to integrate with KeyVault. One of accountKey or accountKeySecretReference must be specified.
                    * `secret_url` (`pulumi.Input[str]`)
                    * `source_vault` (`pulumi.Input[dict]`) - Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
                      * `id` (`pulumi.Input[str]`) - The ID of the resource

                * `mount_options` (`pulumi.Input[str]`)
                * `relative_mount_path` (`pulumi.Input[str]`) - Note that all cluster level blob file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level blob file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.

              * `azure_file_shares` (`pulumi.Input[list]`) - References to Azure File Shares that are to be mounted to the cluster nodes.
                * `account_name` (`pulumi.Input[str]`)
                * `azure_file_url` (`pulumi.Input[str]`)
                * `credentials` (`pulumi.Input[dict]`) - Credentials to access Azure File Share.
                * `directory_mode` (`pulumi.Input[str]`) - Default value is 0777. Valid only if OS is linux.
                * `file_mode` (`pulumi.Input[str]`) - Default value is 0777. Valid only if OS is linux.
                * `relative_mount_path` (`pulumi.Input[str]`) - Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.

              * `file_servers` (`pulumi.Input[list]`)
                * `file_server` (`pulumi.Input[dict]`) - Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
                * `mount_options` (`pulumi.Input[str]`)
                * `relative_mount_path` (`pulumi.Input[str]`) - Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
                * `source_directory` (`pulumi.Input[str]`) - If this property is not specified, the entire File Server will be mounted.

              * `unmanaged_file_systems` (`pulumi.Input[list]`)
                * `mount_command` (`pulumi.Input[str]`)
                * `relative_mount_path` (`pulumi.Input[str]`) - Note that all cluster level unmanaged file system will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and job level unmanaged file system will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.

            * `performance_counters_settings` (`pulumi.Input[dict]`) - Performance counters reporting settings.
              * `app_insights_reference` (`pulumi.Input[dict]`) - If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
                * `component` (`pulumi.Input[dict]`) - Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
                * `instrumentation_key` (`pulumi.Input[str]`)
                * `instrumentation_key_secret_reference` (`pulumi.Input[dict]`) - Specifies KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.

            * `setup_task` (`pulumi.Input[dict]`) - Specifies a setup task which can be used to customize the compute nodes of the cluster.
              * `command_line` (`pulumi.Input[str]`)
              * `environment_variables` (`pulumi.Input[list]`)
                * `name` (`pulumi.Input[str]`)
                * `value` (`pulumi.Input[str]`)

              * `run_elevated` (`pulumi.Input[bool]`) - Note. Non-elevated tasks are run under an account added into sudoer list and can perform sudo when required.
              * `secrets` (`pulumi.Input[list]`) - Server will never report values of these variables back.
                * `name` (`pulumi.Input[str]`)
                * `value` (`pulumi.Input[str]`)
                * `value_secret_reference` (`pulumi.Input[dict]`) - Specifies KeyVault Store and Secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.

              * `std_out_err_path_prefix` (`pulumi.Input[str]`) - The prefix of a path where the Batch AI service will upload the stdout and stderr of the setup task.

          * `scale_settings` (`pulumi.Input[dict]`) - At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
            * `auto_scale` (`pulumi.Input[dict]`) - The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the pending and running jobs on the cluster.
              * `initial_node_count` (`pulumi.Input[float]`)
              * `maximum_node_count` (`pulumi.Input[float]`)
              * `minimum_node_count` (`pulumi.Input[float]`)

            * `manual` (`pulumi.Input[dict]`) - Manual scale settings for the cluster.
              * `node_deallocation_option` (`pulumi.Input[str]`) - The default value is requeue.
              * `target_node_count` (`pulumi.Input[float]`) - Default is 0. If autoScaleSettings are not specified, then the Cluster starts with this target.

          * `subnet` (`pulumi.Input[dict]`) - Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
          * `user_account_settings` (`pulumi.Input[dict]`) - Settings for user account that gets created on each on the nodes of a cluster.
            * `admin_user_name` (`pulumi.Input[str]`)
            * `admin_user_password` (`pulumi.Input[str]`)
            * `admin_user_ssh_public_key` (`pulumi.Input[str]`)

          * `virtual_machine_configuration` (`pulumi.Input[dict]`) - Settings for OS image.
            * `image_reference` (`pulumi.Input[dict]`) - The image reference.
              * `offer` (`pulumi.Input[str]`)
              * `publisher` (`pulumi.Input[str]`)
              * `sku` (`pulumi.Input[str]`)
              * `version` (`pulumi.Input[str]`)
              * `virtual_machine_image_id` (`pulumi.Input[str]`) - The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.

          * `vm_priority` (`pulumi.Input[str]`) - Default is dedicated.
          * `vm_size` (`pulumi.Input[str]`) - All virtual machines in a cluster are the same size. For information about available VM sizes for clusters using images from the Virtual Machines Marketplace (see Sizes for Virtual Machines (Linux) or Sizes for Virtual Machines (Windows). Batch AI service supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(Cluster, __self__).__init__(
            'azurerm:batchai/v20180301:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Cluster(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
