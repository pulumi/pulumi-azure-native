# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Budget(pulumi.CustomResource):
    e_tag: pulumi.Output[str]
    """
    eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    The properties of the budget.
      * `amount` (`float`) - The total amount of cost to track with the budget
      * `category` (`str`) - The category of the budget, whether the budget tracks cost or usage.
      * `current_spend` (`dict`) - The current amount of cost which is being tracked for a budget.
        * `amount` (`float`) - The total amount of cost which is being tracked by the budget.
        * `unit` (`str`) - The unit of measure for the budget amount.

      * `filters` (`dict`) - May be used to filter budgets by resource group, resource, or meter.
        * `meters` (`list`) - The list of filters on meters (GUID), mandatory for budgets of usage category. 
        * `resource_groups` (`list`) - The list of filters on resource groups, allowed at subscription level only.
        * `resources` (`list`) - The list of filters on resources.
        * `tags` (`dict`) - The dictionary of filters on tags.

      * `notifications` (`dict`) - Dictionary of notifications associated with the budget. Budget can have up to five notifications.
      * `time_grain` (`str`) - The time covered by a budget. Tracking of the amount will be reset based on the time grain.
      * `time_period` (`dict`) - Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than three months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
        * `end_date` (`str`) - The end date for the budget. If not provided, we default this to 10 years from the start date.
        * `start_date` (`str`) - The start date for the budget.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, e_tag=None, name=None, properties=None, __props__=None, __name__=None, __opts__=None):
        """
        A budget resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] e_tag: eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
        :param pulumi.Input[str] name: Budget Name.
        :param pulumi.Input[dict] properties: The properties of the budget.

        The **properties** object supports the following:

          * `amount` (`pulumi.Input[float]`) - The total amount of cost to track with the budget
          * `category` (`pulumi.Input[str]`) - The category of the budget, whether the budget tracks cost or usage.
          * `filters` (`pulumi.Input[dict]`) - May be used to filter budgets by resource group, resource, or meter.
            * `meters` (`pulumi.Input[list]`) - The list of filters on meters (GUID), mandatory for budgets of usage category. 
            * `resource_groups` (`pulumi.Input[list]`) - The list of filters on resource groups, allowed at subscription level only.
            * `resources` (`pulumi.Input[list]`) - The list of filters on resources.
            * `tags` (`pulumi.Input[dict]`) - The dictionary of filters on tags.

          * `notifications` (`pulumi.Input[dict]`) - Dictionary of notifications associated with the budget. Budget can have up to five notifications.
          * `time_grain` (`pulumi.Input[str]`) - The time covered by a budget. Tracking of the amount will be reset based on the time grain.
          * `time_period` (`pulumi.Input[dict]`) - Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than three months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
            * `end_date` (`pulumi.Input[str]`) - The end date for the budget. If not provided, we default this to 10 years from the start date.
            * `start_date` (`pulumi.Input[str]`) - The start date for the budget.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['e_tag'] = e_tag
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            __props__['type'] = None
        super(Budget, __self__).__init__(
            'azurerm:consumption/v20180630:Budget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Budget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Budget(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
