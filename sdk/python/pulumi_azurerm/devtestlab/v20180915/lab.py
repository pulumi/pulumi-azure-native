# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Lab(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    The location of the resource.
    """
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    properties: pulumi.Output[dict]
    """
    The properties of the resource.
      * `announcement` (`dict`) - The properties of any lab announcement associated with this lab
        * `enabled` (`str`) - Is the lab announcement active/enabled at this time?
        * `expiration_date` (`str`) - The time at which the announcement expires (null for never)
        * `expired` (`bool`) - Has this announcement expired?
        * `markdown` (`str`) - The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
        * `provisioning_state` (`str`) - The provisioning status of the resource.
        * `title` (`str`) - The plain text title for the lab announcement
        * `unique_identifier` (`str`) - The unique immutable identifier of a resource (Guid).

      * `artifacts_storage_account` (`str`) - The lab's artifact storage account.
      * `created_date` (`str`) - The creation date of the lab.
      * `default_premium_storage_account` (`str`) - The lab's default premium storage account.
      * `default_storage_account` (`str`) - The lab's default storage account.
      * `environment_permission` (`str`) - The access rights to be granted to the user when provisioning an environment
      * `extended_properties` (`dict`) - Extended properties of the lab used for experimental features
      * `lab_storage_type` (`str`) - Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
      * `load_balancer_id` (`str`) - The load balancer used to for lab VMs that use shared IP address.
      * `mandatory_artifacts_resource_ids_linux` (`list`) - The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.
      * `mandatory_artifacts_resource_ids_windows` (`list`) - The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.
      * `network_security_group_id` (`str`) - The Network Security Group attached to the lab VMs Network interfaces to restrict open ports.
      * `premium_data_disk_storage_account` (`str`) - The lab's premium data disk storage account.
      * `premium_data_disks` (`str`) - The setting to enable usage of premium data disks.
        When its value is 'Enabled', creation of standard or premium data disks is allowed.
        When its value is 'Disabled', only creation of standard data disks is allowed.
      * `provisioning_state` (`str`) - The provisioning status of the resource.
      * `public_ip_id` (`str`) - The public IP address for the lab's load balancer.
      * `support` (`dict`) - The properties of any lab support message associated with this lab
        * `enabled` (`str`) - Is the lab support banner active/enabled at this time?
        * `markdown` (`str`) - The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.

      * `unique_identifier` (`str`) - The unique immutable identifier of a resource (Guid).
      * `vault_name` (`str`) - The lab's Key vault.
      * `vm_creation_resource_group` (`str`) - The resource group in which all new lab virtual machines will be created. To let DevTest Labs manage resource group creation, set this value to null.
    """
    tags: pulumi.Output[dict]
    """
    The tags of the resource.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    def __init__(__self__, resource_name, opts=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        A lab.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] name: The name of the lab.
        :param pulumi.Input[dict] properties: The properties of the resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] tags: The tags of the resource.

        The **properties** object supports the following:

          * `announcement` (`pulumi.Input[dict]`) - The properties of any lab announcement associated with this lab
            * `enabled` (`pulumi.Input[str]`) - Is the lab announcement active/enabled at this time?
            * `expiration_date` (`pulumi.Input[str]`) - The time at which the announcement expires (null for never)
            * `expired` (`pulumi.Input[bool]`) - Has this announcement expired?
            * `markdown` (`pulumi.Input[str]`) - The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
            * `title` (`pulumi.Input[str]`) - The plain text title for the lab announcement

          * `environment_permission` (`pulumi.Input[str]`) - The access rights to be granted to the user when provisioning an environment
          * `extended_properties` (`pulumi.Input[dict]`) - Extended properties of the lab used for experimental features
          * `lab_storage_type` (`pulumi.Input[str]`) - Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
          * `mandatory_artifacts_resource_ids_linux` (`pulumi.Input[list]`) - The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.
          * `mandatory_artifacts_resource_ids_windows` (`pulumi.Input[list]`) - The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.
          * `premium_data_disks` (`pulumi.Input[str]`) - The setting to enable usage of premium data disks.
            When its value is 'Enabled', creation of standard or premium data disks is allowed.
            When its value is 'Disabled', only creation of standard data disks is allowed.
          * `support` (`pulumi.Input[dict]`) - The properties of any lab support message associated with this lab
            * `enabled` (`pulumi.Input[str]`) - Is the lab support banner active/enabled at this time?
            * `markdown` (`pulumi.Input[str]`) - The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(Lab, __self__).__init__(
            'azurerm:devtestlab/v20180915:Lab',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Lab resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Lab(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
