# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class VirtualNetwork(pulumi.CustomResource):
    allowed_subnets: pulumi.Output[list]
    """
    The allowed subnets of the virtual network.
      * `allow_public_ip` (`str`) - The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)).
      * `lab_subnet_name` (`str`) - The name of the subnet as seen in the lab.
      * `resource_id` (`str`) - The resource ID of the subnet.
    """
    created_date: pulumi.Output[str]
    """
    The creation date of the virtual network.
    """
    description: pulumi.Output[str]
    """
    The description of the virtual network.
    """
    external_provider_resource_id: pulumi.Output[str]
    """
    The Microsoft.Network resource identifier of the virtual network.
    """
    external_subnets: pulumi.Output[list]
    """
    The external subnet properties.
      * `id` (`str`) - Gets or sets the identifier.
      * `name` (`str`) - Gets or sets the name.
    """
    location: pulumi.Output[str]
    """
    The location of the resource.
    """
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    provisioning_state: pulumi.Output[str]
    """
    The provisioning status of the resource.
    """
    subnet_overrides: pulumi.Output[list]
    """
    The subnet overrides of the virtual network.
      * `lab_subnet_name` (`str`) - The name given to the subnet within the lab.
      * `resource_id` (`str`) - The resource ID of the subnet.
      * `shared_public_ip_address_configuration` (`dict`) - Properties that virtual machines on this subnet will share.
        * `allowed_ports` (`list`) - Backend ports that virtual machines on this subnet are allowed to expose
          * `backend_port` (`float`) - Backend port of the target virtual machine.
          * `transport_protocol` (`str`) - Protocol type of the port.

      * `use_in_vm_creation_permission` (`str`) - Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
      * `use_public_ip_address_permission` (`str`) - Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
      * `virtual_network_pool_name` (`str`) - The virtual network pool associated with this subnet.
    """
    tags: pulumi.Output[dict]
    """
    The tags of the resource.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    unique_identifier: pulumi.Output[str]
    """
    The unique immutable identifier of a resource (Guid).
    """
    def __init__(__self__, resource_name, opts=None, allowed_subnets=None, description=None, external_provider_resource_id=None, lab_name=None, location=None, name=None, resource_group_name=None, subnet_overrides=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        A virtual network.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] allowed_subnets: The allowed subnets of the virtual network.
        :param pulumi.Input[str] description: The description of the virtual network.
        :param pulumi.Input[str] external_provider_resource_id: The Microsoft.Network resource identifier of the virtual network.
        :param pulumi.Input[str] lab_name: The name of the lab.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] name: The name of the virtual network.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[list] subnet_overrides: The subnet overrides of the virtual network.
        :param pulumi.Input[dict] tags: The tags of the resource.

        The **allowed_subnets** object supports the following:

          * `allow_public_ip` (`pulumi.Input[str]`) - The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)).
          * `lab_subnet_name` (`pulumi.Input[str]`) - The name of the subnet as seen in the lab.
          * `resource_id` (`pulumi.Input[str]`) - The resource ID of the subnet.

        The **subnet_overrides** object supports the following:

          * `lab_subnet_name` (`pulumi.Input[str]`) - The name given to the subnet within the lab.
          * `resource_id` (`pulumi.Input[str]`) - The resource ID of the subnet.
          * `shared_public_ip_address_configuration` (`pulumi.Input[dict]`) - Properties that virtual machines on this subnet will share.
            * `allowed_ports` (`pulumi.Input[list]`) - Backend ports that virtual machines on this subnet are allowed to expose
              * `backend_port` (`pulumi.Input[float]`) - Backend port of the target virtual machine.
              * `transport_protocol` (`pulumi.Input[str]`) - Protocol type of the port.

          * `use_in_vm_creation_permission` (`pulumi.Input[str]`) - Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
          * `use_public_ip_address_permission` (`pulumi.Input[str]`) - Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
          * `virtual_network_pool_name` (`pulumi.Input[str]`) - The virtual network pool associated with this subnet.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allowed_subnets'] = allowed_subnets
            __props__['description'] = description
            __props__['external_provider_resource_id'] = external_provider_resource_id
            if lab_name is None:
                raise TypeError("Missing required property 'lab_name'")
            __props__['lab_name'] = lab_name
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['subnet_overrides'] = subnet_overrides
            __props__['tags'] = tags
            __props__['created_date'] = None
            __props__['external_subnets'] = None
            __props__['provisioning_state'] = None
            __props__['type'] = None
            __props__['unique_identifier'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:devtestlab/v20160515:VirtualNetwork")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(VirtualNetwork, __self__).__init__(
            'azurerm:devtestlab/v20180915:VirtualNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing VirtualNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return VirtualNetwork(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
