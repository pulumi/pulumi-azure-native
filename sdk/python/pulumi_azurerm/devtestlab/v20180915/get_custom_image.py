# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetCustomImageResult:
    """
    A custom image.
    """
    def __init__(__self__, author=None, creation_date=None, custom_image_plan=None, data_disk_storage_info=None, description=None, is_plan_authorized=None, location=None, managed_image_id=None, managed_snapshot_id=None, name=None, provisioning_state=None, tags=None, type=None, unique_identifier=None, vhd=None, vm=None):
        if author and not isinstance(author, str):
            raise TypeError("Expected argument 'author' to be a str")
        __self__.author = author
        """
        The author of the custom image.
        """
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        __self__.creation_date = creation_date
        """
        The creation date of the custom image.
        """
        if custom_image_plan and not isinstance(custom_image_plan, dict):
            raise TypeError("Expected argument 'custom_image_plan' to be a dict")
        __self__.custom_image_plan = custom_image_plan
        """
        Storage information about the plan related to this custom image
        """
        if data_disk_storage_info and not isinstance(data_disk_storage_info, list):
            raise TypeError("Expected argument 'data_disk_storage_info' to be a list")
        __self__.data_disk_storage_info = data_disk_storage_info
        """
        Storage information about the data disks present in the custom image
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        The description of the custom image.
        """
        if is_plan_authorized and not isinstance(is_plan_authorized, bool):
            raise TypeError("Expected argument 'is_plan_authorized' to be a bool")
        __self__.is_plan_authorized = is_plan_authorized
        """
        Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The location of the resource.
        """
        if managed_image_id and not isinstance(managed_image_id, str):
            raise TypeError("Expected argument 'managed_image_id' to be a str")
        __self__.managed_image_id = managed_image_id
        """
        The Managed Image Id backing the custom image.
        """
        if managed_snapshot_id and not isinstance(managed_snapshot_id, str):
            raise TypeError("Expected argument 'managed_snapshot_id' to be a str")
        __self__.managed_snapshot_id = managed_snapshot_id
        """
        The Managed Snapshot Id backing the custom image.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning status of the resource.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The tags of the resource.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """
        if unique_identifier and not isinstance(unique_identifier, str):
            raise TypeError("Expected argument 'unique_identifier' to be a str")
        __self__.unique_identifier = unique_identifier
        """
        The unique immutable identifier of a resource (Guid).
        """
        if vhd and not isinstance(vhd, dict):
            raise TypeError("Expected argument 'vhd' to be a dict")
        __self__.vhd = vhd
        """
        The VHD from which the image is to be created.
        """
        if vm and not isinstance(vm, dict):
            raise TypeError("Expected argument 'vm' to be a dict")
        __self__.vm = vm
        """
        The virtual machine from which the image is to be created.
        """


class AwaitableGetCustomImageResult(GetCustomImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomImageResult(
            author=self.author,
            creation_date=self.creation_date,
            custom_image_plan=self.custom_image_plan,
            data_disk_storage_info=self.data_disk_storage_info,
            description=self.description,
            is_plan_authorized=self.is_plan_authorized,
            location=self.location,
            managed_image_id=self.managed_image_id,
            managed_snapshot_id=self.managed_snapshot_id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            tags=self.tags,
            type=self.type,
            unique_identifier=self.unique_identifier,
            vhd=self.vhd,
            vm=self.vm)


def get_custom_image(lab_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str lab_name: The name of the lab.
    :param str name: The name of the custom image.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['labName'] = lab_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:devtestlab/v20180915:getCustomImage', __args__, opts=opts).value

    return AwaitableGetCustomImageResult(
        author=__ret__.get('author'),
        creation_date=__ret__.get('creationDate'),
        custom_image_plan=__ret__.get('customImagePlan'),
        data_disk_storage_info=__ret__.get('dataDiskStorageInfo'),
        description=__ret__.get('description'),
        is_plan_authorized=__ret__.get('isPlanAuthorized'),
        location=__ret__.get('location'),
        managed_image_id=__ret__.get('managedImageId'),
        managed_snapshot_id=__ret__.get('managedSnapshotId'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        unique_identifier=__ret__.get('uniqueIdentifier'),
        vhd=__ret__.get('vhd'),
        vm=__ret__.get('vm'))
