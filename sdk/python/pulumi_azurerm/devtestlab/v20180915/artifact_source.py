# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ArtifactSource(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    The location of the resource.
    """
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    properties: pulumi.Output[dict]
    """
    The properties of the resource.
      * `arm_template_folder_path` (`str`) - The folder containing Azure Resource Manager templates.
      * `branch_ref` (`str`) - The artifact source's branch reference.
      * `created_date` (`str`) - The artifact source's creation date.
      * `display_name` (`str`) - The artifact source's display name.
      * `folder_path` (`str`) - The folder containing artifacts.
      * `provisioning_state` (`str`) - The provisioning status of the resource.
      * `security_token` (`str`) - The security token to authenticate to the artifact source.
      * `source_type` (`str`) - The artifact source's type.
      * `status` (`str`) - Indicates if the artifact source is enabled (values: Enabled, Disabled).
      * `unique_identifier` (`str`) - The unique immutable identifier of a resource (Guid).
      * `uri` (`str`) - The artifact source's URI.
    """
    tags: pulumi.Output[dict]
    """
    The tags of the resource.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    def __init__(__self__, resource_name, opts=None, arm_template_folder_path=None, branch_ref=None, display_name=None, folder_path=None, lab_name=None, location=None, name=None, resource_group_name=None, security_token=None, source_type=None, status=None, tags=None, uri=None, __props__=None, __name__=None, __opts__=None):
        """
        Properties of an artifact source.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arm_template_folder_path: The folder containing Azure Resource Manager templates.
        :param pulumi.Input[str] branch_ref: The artifact source's branch reference.
        :param pulumi.Input[str] display_name: The artifact source's display name.
        :param pulumi.Input[str] folder_path: The folder containing artifacts.
        :param pulumi.Input[str] lab_name: The name of the lab.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] name: The name of the artifact source.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[str] security_token: The security token to authenticate to the artifact source.
        :param pulumi.Input[str] source_type: The artifact source's type.
        :param pulumi.Input[str] status: Indicates if the artifact source is enabled (values: Enabled, Disabled).
        :param pulumi.Input[dict] tags: The tags of the resource.
        :param pulumi.Input[str] uri: The artifact source's URI.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['arm_template_folder_path'] = arm_template_folder_path
            __props__['branch_ref'] = branch_ref
            __props__['display_name'] = display_name
            __props__['folder_path'] = folder_path
            if lab_name is None:
                raise TypeError("Missing required property 'lab_name'")
            __props__['lab_name'] = lab_name
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['security_token'] = security_token
            __props__['source_type'] = source_type
            __props__['status'] = status
            __props__['tags'] = tags
            __props__['uri'] = uri
            __props__['properties'] = None
            __props__['type'] = None
        super(ArtifactSource, __self__).__init__(
            'azurerm:devtestlab/v20180915:ArtifactSource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ArtifactSource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ArtifactSource(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
