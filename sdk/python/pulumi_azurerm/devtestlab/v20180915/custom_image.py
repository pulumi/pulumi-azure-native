# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class CustomImage(pulumi.CustomResource):
    author: pulumi.Output[str]
    """
    The author of the custom image.
    """
    creation_date: pulumi.Output[str]
    """
    The creation date of the custom image.
    """
    custom_image_plan: pulumi.Output[dict]
    """
    Storage information about the plan related to this custom image
      * `id` (`str`) - The id of the plan, equivalent to name of the plan
      * `offer` (`str`) - The offer for the plan from the marketplace image the custom image is derived from
      * `publisher` (`str`) - The publisher for the plan from the marketplace image the custom image is derived from
    """
    data_disk_storage_info: pulumi.Output[list]
    """
    Storage information about the data disks present in the custom image
      * `lun` (`str`) - Disk Lun
      * `storage_type` (`str`) - Disk Storage Type
    """
    description: pulumi.Output[str]
    """
    The description of the custom image.
    """
    is_plan_authorized: pulumi.Output[bool]
    """
    Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
    """
    location: pulumi.Output[str]
    """
    The location of the resource.
    """
    managed_image_id: pulumi.Output[str]
    """
    The Managed Image Id backing the custom image.
    """
    managed_snapshot_id: pulumi.Output[str]
    """
    The Managed Snapshot Id backing the custom image.
    """
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    provisioning_state: pulumi.Output[str]
    """
    The provisioning status of the resource.
    """
    tags: pulumi.Output[dict]
    """
    The tags of the resource.
    """
    type: pulumi.Output[str]
    """
    The type of the resource.
    """
    unique_identifier: pulumi.Output[str]
    """
    The unique immutable identifier of a resource (Guid).
    """
    vhd: pulumi.Output[dict]
    """
    The VHD from which the image is to be created.
      * `image_name` (`str`) - The image name.
      * `os_type` (`str`) - The OS type of the custom image (i.e. Windows, Linux)
      * `sys_prep` (`bool`) - Indicates whether sysprep has been run on the VHD.
    """
    vm: pulumi.Output[dict]
    """
    The virtual machine from which the image is to be created.
      * `linux_os_info` (`dict`) - The Linux OS information of the VM.
        * `linux_os_state` (`str`) - The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).

      * `source_vm_id` (`str`) - The source vm identifier.
      * `windows_os_info` (`dict`) - The Windows OS information of the VM.
        * `windows_os_state` (`str`) - The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied).
    """
    def __init__(__self__, resource_name, opts=None, author=None, custom_image_plan=None, data_disk_storage_info=None, description=None, is_plan_authorized=None, lab_name=None, location=None, managed_image_id=None, managed_snapshot_id=None, name=None, resource_group_name=None, tags=None, vhd=None, vm=None, __props__=None, __name__=None, __opts__=None):
        """
        A custom image.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] author: The author of the custom image.
        :param pulumi.Input[dict] custom_image_plan: Storage information about the plan related to this custom image
        :param pulumi.Input[list] data_disk_storage_info: Storage information about the data disks present in the custom image
        :param pulumi.Input[str] description: The description of the custom image.
        :param pulumi.Input[bool] is_plan_authorized: Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
        :param pulumi.Input[str] lab_name: The name of the lab.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] managed_image_id: The Managed Image Id backing the custom image.
        :param pulumi.Input[str] managed_snapshot_id: The Managed Snapshot Id backing the custom image.
        :param pulumi.Input[str] name: The name of the custom image.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] tags: The tags of the resource.
        :param pulumi.Input[dict] vhd: The VHD from which the image is to be created.
        :param pulumi.Input[dict] vm: The virtual machine from which the image is to be created.

        The **custom_image_plan** object supports the following:

          * `id` (`pulumi.Input[str]`) - The id of the plan, equivalent to name of the plan
          * `offer` (`pulumi.Input[str]`) - The offer for the plan from the marketplace image the custom image is derived from
          * `publisher` (`pulumi.Input[str]`) - The publisher for the plan from the marketplace image the custom image is derived from

        The **data_disk_storage_info** object supports the following:

          * `lun` (`pulumi.Input[str]`) - Disk Lun
          * `storage_type` (`pulumi.Input[str]`) - Disk Storage Type

        The **vhd** object supports the following:

          * `image_name` (`pulumi.Input[str]`) - The image name.
          * `os_type` (`pulumi.Input[str]`) - The OS type of the custom image (i.e. Windows, Linux)
          * `sys_prep` (`pulumi.Input[bool]`) - Indicates whether sysprep has been run on the VHD.

        The **vm** object supports the following:

          * `linux_os_info` (`pulumi.Input[dict]`) - The Linux OS information of the VM.
            * `linux_os_state` (`pulumi.Input[str]`) - The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).

          * `source_vm_id` (`pulumi.Input[str]`) - The source vm identifier.
          * `windows_os_info` (`pulumi.Input[dict]`) - The Windows OS information of the VM.
            * `windows_os_state` (`pulumi.Input[str]`) - The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied).
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['author'] = author
            __props__['custom_image_plan'] = custom_image_plan
            __props__['data_disk_storage_info'] = data_disk_storage_info
            __props__['description'] = description
            __props__['is_plan_authorized'] = is_plan_authorized
            if lab_name is None:
                raise TypeError("Missing required property 'lab_name'")
            __props__['lab_name'] = lab_name
            __props__['location'] = location
            __props__['managed_image_id'] = managed_image_id
            __props__['managed_snapshot_id'] = managed_snapshot_id
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['vhd'] = vhd
            __props__['vm'] = vm
            __props__['creation_date'] = None
            __props__['provisioning_state'] = None
            __props__['type'] = None
            __props__['unique_identifier'] = None
        super(CustomImage, __self__).__init__(
            'azurerm:devtestlab/v20180915:CustomImage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing CustomImage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return CustomImage(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
