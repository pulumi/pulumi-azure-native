# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ListVirtualMachineApplicableSchedulesResult:
    """
    Schedules applicable to a virtual machine. The schedules may have been defined on a VM or on lab level.
    """
    def __init__(__self__, lab_vms_shutdown=None, lab_vms_startup=None, location=None, name=None, tags=None, type=None):
        if lab_vms_shutdown and not isinstance(lab_vms_shutdown, dict):
            raise TypeError("Expected argument 'lab_vms_shutdown' to be a dict")
        __self__.lab_vms_shutdown = lab_vms_shutdown
        """
        The auto-shutdown schedule, if one has been set at the lab or lab resource level.
        """
        if lab_vms_startup and not isinstance(lab_vms_startup, dict):
            raise TypeError("Expected argument 'lab_vms_startup' to be a dict")
        __self__.lab_vms_startup = lab_vms_startup
        """
        The auto-startup schedule, if one has been set at the lab or lab resource level.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The location of the resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The tags of the resource.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of the resource.
        """


class AwaitableListVirtualMachineApplicableSchedulesResult(ListVirtualMachineApplicableSchedulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListVirtualMachineApplicableSchedulesResult(
            lab_vms_shutdown=self.lab_vms_shutdown,
            lab_vms_startup=self.lab_vms_startup,
            location=self.location,
            name=self.name,
            tags=self.tags,
            type=self.type)


def list_virtual_machine_applicable_schedules(lab_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str lab_name: The name of the lab.
    :param str name: The name of the virtual machine.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['labName'] = lab_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:devtestlab/v20160515:listVirtualMachineApplicableSchedules', __args__, opts=opts).value

    return AwaitableListVirtualMachineApplicableSchedulesResult(
        lab_vms_shutdown=__ret__.get('labVmsShutdown'),
        lab_vms_startup=__ret__.get('labVmsStartup'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
