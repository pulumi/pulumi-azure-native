# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetSiteRelayServiceConnectionResult:
    """
    Class that represents a BizTalk Hybrid Connection
    """
    def __init__(__self__, biztalk_uri=None, entity_connection_string=None, entity_name=None, hostname=None, kind=None, location=None, name=None, port=None, resource_connection_string=None, resource_type=None, tags=None, type=None):
        if biztalk_uri and not isinstance(biztalk_uri, str):
            raise TypeError("Expected argument 'biztalk_uri' to be a str")
        __self__.biztalk_uri = biztalk_uri
        if entity_connection_string and not isinstance(entity_connection_string, str):
            raise TypeError("Expected argument 'entity_connection_string' to be a str")
        __self__.entity_connection_string = entity_connection_string
        if entity_name and not isinstance(entity_name, str):
            raise TypeError("Expected argument 'entity_name' to be a str")
        __self__.entity_name = entity_name
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        __self__.hostname = hostname
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Kind of resource
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource Location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource Name
        """
        if port and not isinstance(port, float):
            raise TypeError("Expected argument 'port' to be a float")
        __self__.port = port
        if resource_connection_string and not isinstance(resource_connection_string, str):
            raise TypeError("Expected argument 'resource_connection_string' to be a str")
        __self__.resource_connection_string = resource_connection_string
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        __self__.resource_type = resource_type
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """


class AwaitableGetSiteRelayServiceConnectionResult(GetSiteRelayServiceConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSiteRelayServiceConnectionResult(
            biztalk_uri=self.biztalk_uri,
            entity_connection_string=self.entity_connection_string,
            entity_name=self.entity_name,
            hostname=self.hostname,
            kind=self.kind,
            location=self.location,
            name=self.name,
            port=self.port,
            resource_connection_string=self.resource_connection_string,
            resource_type=self.resource_type,
            tags=self.tags,
            type=self.type)


def get_site_relay_service_connection(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name by which the Hybrid Connection is identified
    :param str resource_group_name: The resource group name
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20150801:getSiteRelayServiceConnection', __args__, opts=opts).value

    return AwaitableGetSiteRelayServiceConnectionResult(
        biztalk_uri=__ret__.get('biztalkUri'),
        entity_connection_string=__ret__.get('entityConnectionString'),
        entity_name=__ret__.get('entityName'),
        hostname=__ret__.get('hostname'),
        kind=__ret__.get('kind'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        port=__ret__.get('port'),
        resource_connection_string=__ret__.get('resourceConnectionString'),
        resource_type=__ret__.get('resourceType'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
