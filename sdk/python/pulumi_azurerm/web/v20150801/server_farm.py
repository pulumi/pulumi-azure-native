# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ServerFarm(pulumi.CustomResource):
    admin_site_name: pulumi.Output[str]
    """
    App Service Plan administration site
    """
    geo_region: pulumi.Output[str]
    """
    Geographical location for the App Service Plan
    """
    hosting_environment_profile: pulumi.Output[dict]
    """
    Specification for the hosting environment (App Service Environment) to use for the App Service Plan
      * `id` (`str`) - Resource id of the hostingEnvironment (App Service Environment)
      * `name` (`str`) - Name of the hostingEnvironment (App Service Environment) (read only)
      * `type` (`str`) - Resource type of the hostingEnvironment (App Service Environment) (read only)
    """
    kind: pulumi.Output[str]
    """
    Kind of resource
    """
    location: pulumi.Output[str]
    """
    Resource Location
    """
    maximum_number_of_workers: pulumi.Output[float]
    """
    Maximum number of instances that can be assigned to this App Service Plan
    """
    name: pulumi.Output[str]
    """
    Resource Name
    """
    number_of_sites: pulumi.Output[float]
    """
    Number of web apps assigned to this App Service Plan
    """
    per_site_scaling: pulumi.Output[bool]
    """
    If True apps assigned to this App Service Plan can be scaled independently
                If False apps assigned to this App Service Plan will scale to all instances of the plan
    """
    reserved: pulumi.Output[bool]
    """
    Enables creation of a Linux App Service Plan
    """
    resource_group: pulumi.Output[str]
    """
    Resource group of the server farm
    """
    sku: pulumi.Output[dict]
    """
    Describes a sku for a scalable resource
      * `capacity` (`float`) - Current number of instances assigned to the resource
      * `family` (`str`) - Family code of the resource sku
      * `name` (`str`) - Name of the resource sku
      * `size` (`str`) - Size specifier of the resource sku
      * `tier` (`str`) - Service Tier of the resource sku
    """
    status: pulumi.Output[str]
    """
    App Service Plan Status
    """
    subscription: pulumi.Output[str]
    """
    App Service Plan Subscription
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    worker_tier_name: pulumi.Output[str]
    """
    Target worker tier assigned to the App Service Plan
    """
    def __init__(__self__, resource_name, opts=None, admin_site_name=None, allow_pending_state=None, hosting_environment_profile=None, id=None, kind=None, location=None, maximum_number_of_workers=None, name=None, per_site_scaling=None, reserved=None, resource_group_name=None, sku=None, tags=None, type=None, worker_tier_name=None, __props__=None, __name__=None, __opts__=None):
        """
        App Service Plan Model

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_site_name: App Service Plan administration site
        :param pulumi.Input[bool] allow_pending_state: OBSOLETE: If true, allow pending state for App Service Plan
        :param pulumi.Input[dict] hosting_environment_profile: Specification for the hosting environment (App Service Environment) to use for the App Service Plan
        :param pulumi.Input[str] id: Resource Id
        :param pulumi.Input[str] kind: Kind of resource
        :param pulumi.Input[str] location: Resource Location
        :param pulumi.Input[float] maximum_number_of_workers: Maximum number of instances that can be assigned to this App Service Plan
        :param pulumi.Input[str] name: Resource Name
        :param pulumi.Input[bool] per_site_scaling: If True apps assigned to this App Service Plan can be scaled independently
                           If False apps assigned to this App Service Plan will scale to all instances of the plan
        :param pulumi.Input[bool] reserved: Enables creation of a Linux App Service Plan
        :param pulumi.Input[str] resource_group_name: Name of resource group
        :param pulumi.Input[dict] sku: Describes a sku for a scalable resource
        :param pulumi.Input[dict] tags: Resource tags
        :param pulumi.Input[str] type: Resource type
        :param pulumi.Input[str] worker_tier_name: Target worker tier assigned to the App Service Plan

        The **hosting_environment_profile** object supports the following:

          * `id` (`pulumi.Input[str]`) - Resource id of the hostingEnvironment (App Service Environment)
          * `name` (`pulumi.Input[str]`) - Name of the hostingEnvironment (App Service Environment) (read only)
          * `type` (`pulumi.Input[str]`) - Resource type of the hostingEnvironment (App Service Environment) (read only)

        The **sku** object supports the following:

          * `capacity` (`pulumi.Input[float]`) - Current number of instances assigned to the resource
          * `family` (`pulumi.Input[str]`) - Family code of the resource sku
          * `name` (`pulumi.Input[str]`) - Name of the resource sku
          * `size` (`pulumi.Input[str]`) - Size specifier of the resource sku
          * `tier` (`pulumi.Input[str]`) - Service Tier of the resource sku
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['admin_site_name'] = admin_site_name
            __props__['allow_pending_state'] = allow_pending_state
            __props__['hosting_environment_profile'] = hosting_environment_profile
            __props__['id'] = id
            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            __props__['maximum_number_of_workers'] = maximum_number_of_workers
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['per_site_scaling'] = per_site_scaling
            __props__['reserved'] = reserved
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['type'] = type
            __props__['worker_tier_name'] = worker_tier_name
            __props__['geo_region'] = None
            __props__['number_of_sites'] = None
            __props__['resource_group'] = None
            __props__['status'] = None
            __props__['subscription'] = None
        super(ServerFarm, __self__).__init__(
            'azurerm:web/v20150801:ServerFarm',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ServerFarm resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ServerFarm(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
