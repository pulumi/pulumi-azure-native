# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class HostingEnvironment(pulumi.CustomResource):
    kind: pulumi.Output[str]
    """
    Kind of resource
    """
    location: pulumi.Output[str]
    """
    Resource Location
    """
    name: pulumi.Output[str]
    """
    Resource Name
    """
    properties: pulumi.Output[dict]
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, id=None, kind=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        Description of an hostingEnvironment (App Service Environment)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] id: Resource Id
        :param pulumi.Input[str] kind: Kind of resource
        :param pulumi.Input[str] location: Resource Location
        :param pulumi.Input[str] name: Resource Name
        :param pulumi.Input[str] resource_group_name: Name of resource group
        :param pulumi.Input[dict] tags: Resource tags
        :param pulumi.Input[str] type: Resource type

        The **properties** object supports the following:

          * `allowed_multi_sizes` (`pulumi.Input[str]`) - List of comma separated strings describing which VM sizes are allowed for front-ends
          * `allowed_worker_sizes` (`pulumi.Input[str]`) - List of comma separated strings describing which VM sizes are allowed for workers
          * `api_management_account_id` (`pulumi.Input[str]`) - Api Management Account associated with this Hosting Environment
          * `cluster_settings` (`pulumi.Input[list]`) - Custom settings for changing the behavior of the hosting environment
            * `name` (`pulumi.Input[str]`) - Pair name
            * `value` (`pulumi.Input[str]`) - Pair value

          * `database_edition` (`pulumi.Input[str]`) - Edition of the metadata database for the hostingEnvironment (App Service Environment) e.g. "Standard"
          * `database_service_objective` (`pulumi.Input[str]`) - Service objective of the metadata database for the hostingEnvironment (App Service Environment) e.g. "S0"
          * `dns_suffix` (`pulumi.Input[str]`) - DNS suffix of the hostingEnvironment (App Service Environment)
          * `environment_capacities` (`pulumi.Input[list]`) - Current total, used, and available worker capacities
            * `available_capacity` (`pulumi.Input[float]`) - Available capacity (# of machines, bytes of storage etc...)
            * `compute_mode` (`pulumi.Input[str]`) - Shared/Dedicated workers
            * `exclude_from_capacity_allocation` (`pulumi.Input[bool]`) - If true it includes basic sites
                          Basic sites are not used for capacity allocation.
            * `is_applicable_for_all_compute_modes` (`pulumi.Input[bool]`) - Is capacity applicable for all sites?
            * `name` (`pulumi.Input[str]`) - Name of the stamp
            * `site_mode` (`pulumi.Input[str]`) - Shared or Dedicated
            * `total_capacity` (`pulumi.Input[float]`) - Total capacity (# of machines, bytes of storage etc...)
            * `unit` (`pulumi.Input[str]`) - Name of the unit
            * `worker_size` (`pulumi.Input[str]`) - Size of the machines
            * `worker_size_id` (`pulumi.Input[float]`) - Size Id of machines: 
                          0 - Small
                          1 - Medium
                          2 - Large

          * `environment_is_healthy` (`pulumi.Input[bool]`) - True/false indicating whether the hostingEnvironment (App Service Environment) is healthy
          * `environment_status` (`pulumi.Input[str]`) - Detailed message about with results of the last check of the hostingEnvironment (App Service Environment)
          * `internal_load_balancing_mode` (`pulumi.Input[str]`) - Specifies which endpoints to serve internally in the hostingEnvironment's (App Service Environment) VNET
          * `ipssl_address_count` (`pulumi.Input[float]`) - Number of IP SSL addresses reserved for this hostingEnvironment (App Service Environment)
          * `last_action` (`pulumi.Input[str]`) - Last deployment action on this hostingEnvironment (App Service Environment)
          * `last_action_result` (`pulumi.Input[str]`) - Result of the last deployment action on this hostingEnvironment (App Service Environment)
          * `location` (`pulumi.Input[str]`) - Location of the hostingEnvironment (App Service Environment), e.g. "West US"
          * `maximum_number_of_machines` (`pulumi.Input[float]`) - Maximum number of VMs in this hostingEnvironment (App Service Environment)
          * `multi_role_count` (`pulumi.Input[float]`) - Number of front-end instances
          * `multi_size` (`pulumi.Input[str]`) - Front-end VM size, e.g. "Medium", "Large"
          * `name` (`pulumi.Input[str]`) - Name of the hostingEnvironment (App Service Environment)
          * `network_access_control_list` (`pulumi.Input[list]`) - Access control list for controlling traffic to the hostingEnvironment (App Service Environment)
            * `action` (`pulumi.Input[str]`)
            * `description` (`pulumi.Input[str]`)
            * `order` (`pulumi.Input[float]`)
            * `remote_subnet` (`pulumi.Input[str]`)

          * `provisioning_state` (`pulumi.Input[str]`) - Provisioning state of the hostingEnvironment (App Service Environment)
          * `resource_group` (`pulumi.Input[str]`) - Resource group of the hostingEnvironment (App Service Environment)
          * `status` (`pulumi.Input[str]`) - Current status of the hostingEnvironment (App Service Environment)
          * `subscription_id` (`pulumi.Input[str]`) - Subscription of the hostingEnvironment (App Service Environment)
          * `suspended` (`pulumi.Input[bool]`) - True/false indicating whether the hostingEnvironment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available
                        (most likely because NSG blocked the incoming traffic)
          * `upgrade_domains` (`pulumi.Input[float]`) - Number of upgrade domains of this hostingEnvironment (App Service Environment)
          * `vip_mappings` (`pulumi.Input[list]`) - Description of IP SSL mapping for this hostingEnvironment (App Service Environment)
            * `in_use` (`pulumi.Input[bool]`) - Is VIP mapping in use
            * `internal_http_port` (`pulumi.Input[float]`) - Internal HTTP port
            * `internal_https_port` (`pulumi.Input[float]`) - Internal HTTPS port
            * `virtual_ip` (`pulumi.Input[str]`) - Virtual IP address

          * `virtual_network` (`pulumi.Input[dict]`) - Description of the hostingEnvironment's (App Service Environment) virtual network
            * `id` (`pulumi.Input[str]`) - Resource id of the virtual network
            * `name` (`pulumi.Input[str]`) - Name of the virtual network (read-only)
            * `subnet` (`pulumi.Input[str]`) - Subnet within the virtual network
            * `type` (`pulumi.Input[str]`) - Resource type of the virtual network (read-only)

          * `vnet_name` (`pulumi.Input[str]`) - Name of the hostingEnvironment's (App Service Environment) virtual network
          * `vnet_resource_group_name` (`pulumi.Input[str]`) - Resource group of the hostingEnvironment's (App Service Environment) virtual network
          * `vnet_subnet_name` (`pulumi.Input[str]`) - Subnet of the hostingEnvironment's (App Service Environment) virtual network
          * `worker_pools` (`pulumi.Input[list]`) - Description of worker pools with worker size ids, VM sizes, and number of workers in each pool
            * `id` (`pulumi.Input[str]`) - Resource Id
            * `kind` (`pulumi.Input[str]`) - Kind of resource
            * `location` (`pulumi.Input[str]`) - Resource Location
            * `name` (`pulumi.Input[str]`) - Resource Name
            * `properties` (`pulumi.Input[dict]`)
              * `compute_mode` (`pulumi.Input[str]`) - Shared or dedicated web app hosting
              * `instance_names` (`pulumi.Input[list]`) - Names of all instances in the worker pool (read only)
              * `worker_count` (`pulumi.Input[float]`) - Number of instances in the worker pool
              * `worker_size` (`pulumi.Input[str]`) - VM size of the worker pool instances
              * `worker_size_id` (`pulumi.Input[float]`) - Worker size id for referencing this worker pool

            * `sku` (`pulumi.Input[dict]`) - Describes a sku for a scalable resource
              * `capacity` (`pulumi.Input[float]`) - Current number of instances assigned to the resource
              * `family` (`pulumi.Input[str]`) - Family code of the resource sku
              * `name` (`pulumi.Input[str]`) - Name of the resource sku
              * `size` (`pulumi.Input[str]`) - Size specifier of the resource sku
              * `tier` (`pulumi.Input[str]`) - Service Tier of the resource sku

            * `tags` (`pulumi.Input[dict]`) - Resource tags
            * `type` (`pulumi.Input[str]`) - Resource type
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['id'] = id
            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = type
        super(HostingEnvironment, __self__).__init__(
            'azurerm:web/v20150801:HostingEnvironment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing HostingEnvironment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return HostingEnvironment(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
