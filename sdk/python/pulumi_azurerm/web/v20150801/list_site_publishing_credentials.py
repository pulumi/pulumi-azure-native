# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ListSitePublishingCredentialsResult:
    """
    Represents user credentials used for publishing activity
    """
    def __init__(__self__, kind=None, location=None, name=None, publishing_password=None, publishing_user_name=None, scm_uri=None, tags=None, type=None):
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Kind of resource
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource Location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource Name
        """
        if publishing_password and not isinstance(publishing_password, str):
            raise TypeError("Expected argument 'publishing_password' to be a str")
        __self__.publishing_password = publishing_password
        """
        Password used for publishing
        """
        if publishing_user_name and not isinstance(publishing_user_name, str):
            raise TypeError("Expected argument 'publishing_user_name' to be a str")
        __self__.publishing_user_name = publishing_user_name
        """
        Username used for publishing
        """
        if scm_uri and not isinstance(scm_uri, str):
            raise TypeError("Expected argument 'scm_uri' to be a str")
        __self__.scm_uri = scm_uri
        """
        Service Control Manager URI, including username and password
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """


class AwaitableListSitePublishingCredentialsResult(ListSitePublishingCredentialsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListSitePublishingCredentialsResult(
            kind=self.kind,
            location=self.location,
            name=self.name,
            publishing_password=self.publishing_password,
            publishing_user_name=self.publishing_user_name,
            scm_uri=self.scm_uri,
            tags=self.tags,
            type=self.type)


def list_site_publishing_credentials(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of web app
    :param str resource_group_name: Name of resource group
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20150801:listSitePublishingCredentials', __args__, opts=opts).value

    return AwaitableListSitePublishingCredentialsResult(
        kind=__ret__.get('kind'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        publishing_password=__ret__.get('publishingPassword'),
        publishing_user_name=__ret__.get('publishingUserName'),
        scm_uri=__ret__.get('scmUri'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
