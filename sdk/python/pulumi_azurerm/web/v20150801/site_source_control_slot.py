# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class SiteSourceControlSlot(pulumi.CustomResource):
    branch: pulumi.Output[str]
    """
    Name of branch to use for deployment
    """
    deployment_rollback_enabled: pulumi.Output[bool]
    """
    Whether to manual or continuous integration
    """
    is_manual_integration: pulumi.Output[bool]
    """
    Whether to manual or continuous integration
    """
    is_mercurial: pulumi.Output[bool]
    """
    Mercurial or Git repository type
    """
    kind: pulumi.Output[str]
    """
    Kind of resource
    """
    location: pulumi.Output[str]
    """
    Resource Location
    """
    name: pulumi.Output[str]
    """
    Resource Name
    """
    repo_url: pulumi.Output[str]
    """
    Repository or source control url
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, branch=None, deployment_rollback_enabled=None, id=None, is_manual_integration=None, is_mercurial=None, kind=None, location=None, name=None, repo_url=None, resource_group_name=None, tags=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        Describes the source control configuration for web app

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] branch: Name of branch to use for deployment
        :param pulumi.Input[bool] deployment_rollback_enabled: Whether to manual or continuous integration
        :param pulumi.Input[str] id: Resource Id
        :param pulumi.Input[bool] is_manual_integration: Whether to manual or continuous integration
        :param pulumi.Input[bool] is_mercurial: Mercurial or Git repository type
        :param pulumi.Input[str] kind: Kind of resource
        :param pulumi.Input[str] location: Resource Location
        :param pulumi.Input[str] name: Name of web app slot. If not specified then will default to production slot.
        :param pulumi.Input[str] repo_url: Repository or source control url
        :param pulumi.Input[str] resource_group_name: Name of resource group
        :param pulumi.Input[dict] tags: Resource tags
        :param pulumi.Input[str] type: Resource type
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['branch'] = branch
            __props__['deployment_rollback_enabled'] = deployment_rollback_enabled
            __props__['id'] = id
            __props__['is_manual_integration'] = is_manual_integration
            __props__['is_mercurial'] = is_mercurial
            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['repo_url'] = repo_url
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = type
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:web/v20160801:SiteSourceControlSlot"), pulumi.Alias(type_="azurerm:web/v20180201:SiteSourceControlSlot"), pulumi.Alias(type_="azurerm:web/v20181101:SiteSourceControlSlot"), pulumi.Alias(type_="azurerm:web/v20190801:SiteSourceControlSlot")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(SiteSourceControlSlot, __self__).__init__(
            'azurerm:web/v20150801:SiteSourceControlSlot',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing SiteSourceControlSlot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return SiteSourceControlSlot(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
