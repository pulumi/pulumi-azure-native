# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetSiteSourceControlResult:
    """
    Describes the source control configuration for web app
    """
    def __init__(__self__, branch=None, deployment_rollback_enabled=None, is_manual_integration=None, is_mercurial=None, kind=None, location=None, name=None, repo_url=None, tags=None, type=None):
        if branch and not isinstance(branch, str):
            raise TypeError("Expected argument 'branch' to be a str")
        __self__.branch = branch
        """
        Name of branch to use for deployment
        """
        if deployment_rollback_enabled and not isinstance(deployment_rollback_enabled, bool):
            raise TypeError("Expected argument 'deployment_rollback_enabled' to be a bool")
        __self__.deployment_rollback_enabled = deployment_rollback_enabled
        """
        Whether to manual or continuous integration
        """
        if is_manual_integration and not isinstance(is_manual_integration, bool):
            raise TypeError("Expected argument 'is_manual_integration' to be a bool")
        __self__.is_manual_integration = is_manual_integration
        """
        Whether to manual or continuous integration
        """
        if is_mercurial and not isinstance(is_mercurial, bool):
            raise TypeError("Expected argument 'is_mercurial' to be a bool")
        __self__.is_mercurial = is_mercurial
        """
        Mercurial or Git repository type
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Kind of resource
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource Location
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource Name
        """
        if repo_url and not isinstance(repo_url, str):
            raise TypeError("Expected argument 'repo_url' to be a str")
        __self__.repo_url = repo_url
        """
        Repository or source control url
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """


class AwaitableGetSiteSourceControlResult(GetSiteSourceControlResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSiteSourceControlResult(
            branch=self.branch,
            deployment_rollback_enabled=self.deployment_rollback_enabled,
            is_manual_integration=self.is_manual_integration,
            is_mercurial=self.is_mercurial,
            kind=self.kind,
            location=self.location,
            name=self.name,
            repo_url=self.repo_url,
            tags=self.tags,
            type=self.type)


def get_site_source_control(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of web app
    :param str resource_group_name: Name of resource group
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20150801:getSiteSourceControl', __args__, opts=opts).value

    return AwaitableGetSiteSourceControlResult(
        branch=__ret__.get('branch'),
        deployment_rollback_enabled=__ret__.get('deploymentRollbackEnabled'),
        is_manual_integration=__ret__.get('isManualIntegration'),
        is_mercurial=__ret__.get('isMercurial'),
        kind=__ret__.get('kind'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        repo_url=__ret__.get('repoUrl'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
