# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class SiteVNETConnectionSlot(pulumi.CustomResource):
    cert_blob: pulumi.Output[str]
    """
    A certificate file (.cer) blob containing the public key of the private key used to authenticate a 
                Point-To-Site VPN connection.
    """
    cert_thumbprint: pulumi.Output[str]
    """
    The client certificate thumbprint
    """
    dns_servers: pulumi.Output[str]
    """
    Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
    """
    kind: pulumi.Output[str]
    """
    Kind of resource
    """
    location: pulumi.Output[str]
    """
    Resource Location
    """
    name: pulumi.Output[str]
    """
    Resource Name
    """
    resync_required: pulumi.Output[bool]
    """
    Flag to determine if a resync is required
    """
    routes: pulumi.Output[list]
    """
    The routes that this virtual network connection uses.
      * `end_address` (`str`) - The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.
      * `id` (`str`) - Resource Id
      * `kind` (`str`) - Kind of resource
      * `location` (`str`) - Resource Location
      * `name` (`str`) - Resource Name
      * `route_type` (`str`) - The type of route this is:
                    DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918
                    INHERITED - Routes inherited from the real Virtual Network routes
                    STATIC - Static route set on the web app only
                    
                    These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them
                    with new INHERITED routes.
      * `start_address` (`str`) - The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.
      * `tags` (`dict`) - Resource tags
      * `type` (`str`) - Resource type
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    vnet_resource_id: pulumi.Output[str]
    """
    The vnet resource id
    """
    def __init__(__self__, resource_name, opts=None, cert_blob=None, cert_thumbprint=None, dns_servers=None, id=None, kind=None, location=None, name=None, resource_group_name=None, resync_required=None, routes=None, slot=None, tags=None, type=None, vnet_resource_id=None, __props__=None, __name__=None, __opts__=None):
        """
        VNETInfo contract. This contract is public and is a stripped down version of VNETInfoInternal

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cert_blob: A certificate file (.cer) blob containing the public key of the private key used to authenticate a 
                           Point-To-Site VPN connection.
        :param pulumi.Input[str] cert_thumbprint: The client certificate thumbprint
        :param pulumi.Input[str] dns_servers: Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
        :param pulumi.Input[str] id: Resource Id
        :param pulumi.Input[str] kind: Kind of resource
        :param pulumi.Input[str] location: Resource Location
        :param pulumi.Input[str] name: The name of the Virtual Network
        :param pulumi.Input[str] resource_group_name: The resource group name
        :param pulumi.Input[bool] resync_required: Flag to determine if a resync is required
        :param pulumi.Input[list] routes: The routes that this virtual network connection uses.
        :param pulumi.Input[str] slot: The name of the slot for this web app.
        :param pulumi.Input[dict] tags: Resource tags
        :param pulumi.Input[str] type: Resource type
        :param pulumi.Input[str] vnet_resource_id: The vnet resource id

        The **routes** object supports the following:

          * `end_address` (`pulumi.Input[str]`) - The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.
          * `id` (`pulumi.Input[str]`) - Resource Id
          * `kind` (`pulumi.Input[str]`) - Kind of resource
          * `location` (`pulumi.Input[str]`) - Resource Location
          * `name` (`pulumi.Input[str]`) - Resource Name
          * `route_type` (`pulumi.Input[str]`) - The type of route this is:
                        DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918
                        INHERITED - Routes inherited from the real Virtual Network routes
                        STATIC - Static route set on the web app only
                        
                        These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them
                        with new INHERITED routes.
          * `start_address` (`pulumi.Input[str]`) - The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.
          * `tags` (`pulumi.Input[dict]`) - Resource tags
          * `type` (`pulumi.Input[str]`) - Resource type
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['cert_blob'] = cert_blob
            __props__['cert_thumbprint'] = cert_thumbprint
            __props__['dns_servers'] = dns_servers
            __props__['id'] = id
            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['resync_required'] = resync_required
            __props__['routes'] = routes
            if slot is None:
                raise TypeError("Missing required property 'slot'")
            __props__['slot'] = slot
            __props__['tags'] = tags
            __props__['type'] = type
            __props__['vnet_resource_id'] = vnet_resource_id
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:web/v20160801:SiteVNETConnectionSlot"), pulumi.Alias(type_="azurerm:web/v20180201:SiteVNETConnectionSlot"), pulumi.Alias(type_="azurerm:web/v20181101:SiteVNETConnectionSlot"), pulumi.Alias(type_="azurerm:web/v20190801:SiteVNETConnectionSlot"), pulumi.Alias(type_="azurerm:web/v20200601:SiteVNETConnectionSlot")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(SiteVNETConnectionSlot, __self__).__init__(
            'azurerm:web/v20150801:SiteVNETConnectionSlot',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing SiteVNETConnectionSlot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return SiteVNETConnectionSlot(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
