# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetStaticSiteResult:
    """
    Static Site ARM resource.
    """
    def __init__(__self__, branch=None, build_properties=None, custom_domains=None, default_hostname=None, kind=None, location=None, name=None, repository_token=None, repository_url=None, sku=None, tags=None, type=None):
        if branch and not isinstance(branch, str):
            raise TypeError("Expected argument 'branch' to be a str")
        __self__.branch = branch
        """
        The target branch in the repository.
        """
        if build_properties and not isinstance(build_properties, dict):
            raise TypeError("Expected argument 'build_properties' to be a dict")
        __self__.build_properties = build_properties
        """
        Build properties to configure on the repository.
        """
        if custom_domains and not isinstance(custom_domains, list):
            raise TypeError("Expected argument 'custom_domains' to be a list")
        __self__.custom_domains = custom_domains
        """
        The custom domains associated with this static site.
        """
        if default_hostname and not isinstance(default_hostname, str):
            raise TypeError("Expected argument 'default_hostname' to be a str")
        __self__.default_hostname = default_hostname
        """
        The default autogenerated hostname for the static site.
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Kind of resource.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource Location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource Name.
        """
        if repository_token and not isinstance(repository_token, str):
            raise TypeError("Expected argument 'repository_token' to be a str")
        __self__.repository_token = repository_token
        """
        A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
        """
        if repository_url and not isinstance(repository_url, str):
            raise TypeError("Expected argument 'repository_url' to be a str")
        __self__.repository_url = repository_url
        """
        URL for the repository of the static site.
        """
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        Description of a SKU for a scalable resource.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetStaticSiteResult(GetStaticSiteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStaticSiteResult(
            branch=self.branch,
            build_properties=self.build_properties,
            custom_domains=self.custom_domains,
            default_hostname=self.default_hostname,
            kind=self.kind,
            location=self.location,
            name=self.name,
            repository_token=self.repository_token,
            repository_url=self.repository_url,
            sku=self.sku,
            tags=self.tags,
            type=self.type)


def get_static_site(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of the static site.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20190801:getStaticSite', __args__, opts=opts).value

    return AwaitableGetStaticSiteResult(
        branch=__ret__.get('branch'),
        build_properties=__ret__.get('buildProperties'),
        custom_domains=__ret__.get('customDomains'),
        default_hostname=__ret__.get('defaultHostname'),
        kind=__ret__.get('kind'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        repository_token=__ret__.get('repositoryToken'),
        repository_url=__ret__.get('repositoryUrl'),
        sku=__ret__.get('sku'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
