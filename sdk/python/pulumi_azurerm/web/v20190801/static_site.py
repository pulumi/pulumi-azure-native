# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class StaticSite(pulumi.CustomResource):
    branch: pulumi.Output[str]
    """
    The target branch in the repository.
    """
    build_properties: pulumi.Output[dict]
    """
    Build properties to configure on the repository.
      * `api_location` (`str`) - The path to the api code within the repository.
      * `app_artifact_location` (`str`) - The path of the app artifacts after building.
      * `app_location` (`str`) - The path to the app code within the repository.
    """
    custom_domains: pulumi.Output[list]
    """
    The custom domains associated with this static site.
    """
    default_hostname: pulumi.Output[str]
    """
    The default autogenerated hostname for the static site.
    """
    kind: pulumi.Output[str]
    """
    Kind of resource.
    """
    location: pulumi.Output[str]
    """
    Resource Location.
    """
    name: pulumi.Output[str]
    """
    Resource Name.
    """
    repository_token: pulumi.Output[str]
    """
    A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
    """
    repository_url: pulumi.Output[str]
    """
    URL for the repository of the static site.
    """
    sku: pulumi.Output[dict]
    """
    Description of a SKU for a scalable resource.
      * `capabilities` (`list`) - Capabilities of the SKU, e.g., is traffic manager enabled?
        * `name` (`str`) - Name of the SKU capability.
        * `reason` (`str`) - Reason of the SKU capability.
        * `value` (`str`) - Value of the SKU capability.

      * `capacity` (`float`) - Current number of instances assigned to the resource.
      * `family` (`str`) - Family code of the resource SKU.
      * `locations` (`list`) - Locations of the SKU.
      * `name` (`str`) - Name of the resource SKU.
      * `size` (`str`) - Size specifier of the resource SKU.
      * `sku_capacity` (`dict`) - Min, max, and default scale values of the SKU.
        * `default` (`float`) - Default number of workers for this App Service plan SKU.
        * `maximum` (`float`) - Maximum number of workers for this App Service plan SKU.
        * `minimum` (`float`) - Minimum number of workers for this App Service plan SKU.
        * `scale_type` (`str`) - Available scale configurations for an App Service plan.

      * `tier` (`str`) - Service tier of the resource SKU.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, branch=None, build_properties=None, kind=None, location=None, name=None, repository_token=None, repository_url=None, resource_group_name=None, sku=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Static Site ARM resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] branch: The target branch in the repository.
        :param pulumi.Input[dict] build_properties: Build properties to configure on the repository.
        :param pulumi.Input[str] kind: Kind of resource.
        :param pulumi.Input[str] location: Resource Location.
        :param pulumi.Input[str] name: Name of the static site to create or update.
        :param pulumi.Input[str] repository_token: A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
        :param pulumi.Input[str] repository_url: URL for the repository of the static site.
        :param pulumi.Input[str] resource_group_name: Name of the resource group to which the resource belongs.
        :param pulumi.Input[dict] sku: Description of a SKU for a scalable resource.
        :param pulumi.Input[dict] tags: Resource tags.

        The **build_properties** object supports the following:

          * `api_location` (`pulumi.Input[str]`) - The path to the api code within the repository.
          * `app_artifact_location` (`pulumi.Input[str]`) - The path of the app artifacts after building.
          * `app_location` (`pulumi.Input[str]`) - The path to the app code within the repository.

        The **sku** object supports the following:

          * `capabilities` (`pulumi.Input[list]`) - Capabilities of the SKU, e.g., is traffic manager enabled?
            * `name` (`pulumi.Input[str]`) - Name of the SKU capability.
            * `reason` (`pulumi.Input[str]`) - Reason of the SKU capability.
            * `value` (`pulumi.Input[str]`) - Value of the SKU capability.

          * `capacity` (`pulumi.Input[float]`) - Current number of instances assigned to the resource.
          * `family` (`pulumi.Input[str]`) - Family code of the resource SKU.
          * `locations` (`pulumi.Input[list]`) - Locations of the SKU.
          * `name` (`pulumi.Input[str]`) - Name of the resource SKU.
          * `size` (`pulumi.Input[str]`) - Size specifier of the resource SKU.
          * `sku_capacity` (`pulumi.Input[dict]`) - Min, max, and default scale values of the SKU.
            * `default` (`pulumi.Input[float]`) - Default number of workers for this App Service plan SKU.
            * `maximum` (`pulumi.Input[float]`) - Maximum number of workers for this App Service plan SKU.
            * `minimum` (`pulumi.Input[float]`) - Minimum number of workers for this App Service plan SKU.
            * `scale_type` (`pulumi.Input[str]`) - Available scale configurations for an App Service plan.

          * `tier` (`pulumi.Input[str]`) - Service tier of the resource SKU.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['branch'] = branch
            __props__['build_properties'] = build_properties
            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['repository_token'] = repository_token
            __props__['repository_url'] = repository_url
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['custom_domains'] = None
            __props__['default_hostname'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:web/v20200601:StaticSite")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(StaticSite, __self__).__init__(
            'azurerm:web/v20190801:StaticSite',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing StaticSite resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return StaticSite(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
