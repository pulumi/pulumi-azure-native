# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetWebAppDeploymentResult:
    """
    User credentials used for publishing activity.
    """
    def __init__(__self__, active=None, author=None, author_email=None, deployer=None, details=None, end_time=None, kind=None, message=None, name=None, start_time=None, status=None, type=None):
        if active and not isinstance(active, bool):
            raise TypeError("Expected argument 'active' to be a bool")
        __self__.active = active
        """
        True if deployment is currently active, false if completed and null if not started.
        """
        if author and not isinstance(author, str):
            raise TypeError("Expected argument 'author' to be a str")
        __self__.author = author
        """
        Who authored the deployment.
        """
        if author_email and not isinstance(author_email, str):
            raise TypeError("Expected argument 'author_email' to be a str")
        __self__.author_email = author_email
        """
        Author email.
        """
        if deployer and not isinstance(deployer, str):
            raise TypeError("Expected argument 'deployer' to be a str")
        __self__.deployer = deployer
        """
        Who performed the deployment.
        """
        if details and not isinstance(details, str):
            raise TypeError("Expected argument 'details' to be a str")
        __self__.details = details
        """
        Details on deployment.
        """
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        __self__.end_time = end_time
        """
        End time.
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Kind of resource.
        """
        if message and not isinstance(message, str):
            raise TypeError("Expected argument 'message' to be a str")
        __self__.message = message
        """
        Details about deployment status.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource Name.
        """
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        __self__.start_time = start_time
        """
        Start time.
        """
        if status and not isinstance(status, float):
            raise TypeError("Expected argument 'status' to be a float")
        __self__.status = status
        """
        Deployment status.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetWebAppDeploymentResult(GetWebAppDeploymentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebAppDeploymentResult(
            active=self.active,
            author=self.author,
            author_email=self.author_email,
            deployer=self.deployer,
            details=self.details,
            end_time=self.end_time,
            kind=self.kind,
            message=self.message,
            name=self.name,
            start_time=self.start_time,
            status=self.status,
            type=self.type)


def get_web_app_deployment(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Deployment ID.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20200601:getWebAppDeployment', __args__, opts=opts).value

    return AwaitableGetWebAppDeploymentResult(
        active=__ret__.get('active'),
        author=__ret__.get('author'),
        author_email=__ret__.get('authorEmail'),
        deployer=__ret__.get('deployer'),
        details=__ret__.get('details'),
        end_time=__ret__.get('endTime'),
        kind=__ret__.get('kind'),
        message=__ret__.get('message'),
        name=__ret__.get('name'),
        start_time=__ret__.get('startTime'),
        status=__ret__.get('status'),
        type=__ret__.get('type'))
