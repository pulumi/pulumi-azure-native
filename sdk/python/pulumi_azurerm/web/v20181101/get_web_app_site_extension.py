# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetWebAppSiteExtensionResult:
    """
    Site Extension Information.
    """
    def __init__(__self__, authors=None, comment=None, description=None, download_count=None, extension_id=None, extension_type=None, extension_url=None, feed_url=None, icon_url=None, installed_date_time=None, installer_command_line_params=None, kind=None, license_url=None, local_is_latest_version=None, local_path=None, name=None, project_url=None, provisioning_state=None, published_date_time=None, summary=None, title=None, type=None, version=None):
        if authors and not isinstance(authors, list):
            raise TypeError("Expected argument 'authors' to be a list")
        __self__.authors = authors
        """
        List of authors.
        """
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        __self__.comment = comment
        """
        Site Extension comment.
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        Detailed description.
        """
        if download_count and not isinstance(download_count, float):
            raise TypeError("Expected argument 'download_count' to be a float")
        __self__.download_count = download_count
        """
        Count of downloads.
        """
        if extension_id and not isinstance(extension_id, str):
            raise TypeError("Expected argument 'extension_id' to be a str")
        __self__.extension_id = extension_id
        """
        Site extension ID.
        """
        if extension_type and not isinstance(extension_type, str):
            raise TypeError("Expected argument 'extension_type' to be a str")
        __self__.extension_type = extension_type
        """
        Site extension type.
        """
        if extension_url and not isinstance(extension_url, str):
            raise TypeError("Expected argument 'extension_url' to be a str")
        __self__.extension_url = extension_url
        """
        Extension URL.
        """
        if feed_url and not isinstance(feed_url, str):
            raise TypeError("Expected argument 'feed_url' to be a str")
        __self__.feed_url = feed_url
        """
        Feed URL.
        """
        if icon_url and not isinstance(icon_url, str):
            raise TypeError("Expected argument 'icon_url' to be a str")
        __self__.icon_url = icon_url
        """
        Icon URL.
        """
        if installed_date_time and not isinstance(installed_date_time, str):
            raise TypeError("Expected argument 'installed_date_time' to be a str")
        __self__.installed_date_time = installed_date_time
        """
        Installed timestamp.
        """
        if installer_command_line_params and not isinstance(installer_command_line_params, str):
            raise TypeError("Expected argument 'installer_command_line_params' to be a str")
        __self__.installer_command_line_params = installer_command_line_params
        """
        Installer command line parameters.
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Kind of resource.
        """
        if license_url and not isinstance(license_url, str):
            raise TypeError("Expected argument 'license_url' to be a str")
        __self__.license_url = license_url
        """
        License URL.
        """
        if local_is_latest_version and not isinstance(local_is_latest_version, bool):
            raise TypeError("Expected argument 'local_is_latest_version' to be a bool")
        __self__.local_is_latest_version = local_is_latest_version
        """
        <code>true</code> if the local version is the latest version; <code>false</code> otherwise.
        """
        if local_path and not isinstance(local_path, str):
            raise TypeError("Expected argument 'local_path' to be a str")
        __self__.local_path = local_path
        """
        Local path.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource Name.
        """
        if project_url and not isinstance(project_url, str):
            raise TypeError("Expected argument 'project_url' to be a str")
        __self__.project_url = project_url
        """
        Project URL.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Provisioning state.
        """
        if published_date_time and not isinstance(published_date_time, str):
            raise TypeError("Expected argument 'published_date_time' to be a str")
        __self__.published_date_time = published_date_time
        """
        Published timestamp.
        """
        if summary and not isinstance(summary, str):
            raise TypeError("Expected argument 'summary' to be a str")
        __self__.summary = summary
        """
        Summary description.
        """
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        __self__.title = title
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        __self__.version = version
        """
        Version information.
        """


class AwaitableGetWebAppSiteExtensionResult(GetWebAppSiteExtensionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebAppSiteExtensionResult(
            authors=self.authors,
            comment=self.comment,
            description=self.description,
            download_count=self.download_count,
            extension_id=self.extension_id,
            extension_type=self.extension_type,
            extension_url=self.extension_url,
            feed_url=self.feed_url,
            icon_url=self.icon_url,
            installed_date_time=self.installed_date_time,
            installer_command_line_params=self.installer_command_line_params,
            kind=self.kind,
            license_url=self.license_url,
            local_is_latest_version=self.local_is_latest_version,
            local_path=self.local_path,
            name=self.name,
            project_url=self.project_url,
            provisioning_state=self.provisioning_state,
            published_date_time=self.published_date_time,
            summary=self.summary,
            title=self.title,
            type=self.type,
            version=self.version)


def get_web_app_site_extension(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Site extension name.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20181101:getWebAppSiteExtension', __args__, opts=opts).value

    return AwaitableGetWebAppSiteExtensionResult(
        authors=__ret__.get('authors'),
        comment=__ret__.get('comment'),
        description=__ret__.get('description'),
        download_count=__ret__.get('downloadCount'),
        extension_id=__ret__.get('extensionId'),
        extension_type=__ret__.get('extensionType'),
        extension_url=__ret__.get('extensionUrl'),
        feed_url=__ret__.get('feedUrl'),
        icon_url=__ret__.get('iconUrl'),
        installed_date_time=__ret__.get('installedDateTime'),
        installer_command_line_params=__ret__.get('installerCommandLineParams'),
        kind=__ret__.get('kind'),
        license_url=__ret__.get('licenseUrl'),
        local_is_latest_version=__ret__.get('localIsLatestVersion'),
        local_path=__ret__.get('localPath'),
        name=__ret__.get('name'),
        project_url=__ret__.get('projectUrl'),
        provisioning_state=__ret__.get('provisioningState'),
        published_date_time=__ret__.get('publishedDateTime'),
        summary=__ret__.get('summary'),
        title=__ret__.get('title'),
        type=__ret__.get('type'),
        version=__ret__.get('version'))
