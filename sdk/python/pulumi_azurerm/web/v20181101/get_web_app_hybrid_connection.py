# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetWebAppHybridConnectionResult:
    """
    Hybrid Connection contract. This is used to configure a Hybrid Connection.
    """
    def __init__(__self__, hostname=None, kind=None, name=None, port=None, relay_arm_uri=None, relay_name=None, send_key_name=None, send_key_value=None, service_bus_namespace=None, service_bus_suffix=None, type=None):
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        __self__.hostname = hostname
        """
        The hostname of the endpoint.
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Kind of resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource Name.
        """
        if port and not isinstance(port, float):
            raise TypeError("Expected argument 'port' to be a float")
        __self__.port = port
        """
        The port of the endpoint.
        """
        if relay_arm_uri and not isinstance(relay_arm_uri, str):
            raise TypeError("Expected argument 'relay_arm_uri' to be a str")
        __self__.relay_arm_uri = relay_arm_uri
        """
        The ARM URI to the Service Bus relay.
        """
        if relay_name and not isinstance(relay_name, str):
            raise TypeError("Expected argument 'relay_name' to be a str")
        __self__.relay_name = relay_name
        """
        The name of the Service Bus relay.
        """
        if send_key_name and not isinstance(send_key_name, str):
            raise TypeError("Expected argument 'send_key_name' to be a str")
        __self__.send_key_name = send_key_name
        """
        The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.
        """
        if send_key_value and not isinstance(send_key_value, str):
            raise TypeError("Expected argument 'send_key_value' to be a str")
        __self__.send_key_value = send_key_value
        """
        The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned
        normally, use the POST /listKeys API instead.
        """
        if service_bus_namespace and not isinstance(service_bus_namespace, str):
            raise TypeError("Expected argument 'service_bus_namespace' to be a str")
        __self__.service_bus_namespace = service_bus_namespace
        """
        The name of the Service Bus namespace.
        """
        if service_bus_suffix and not isinstance(service_bus_suffix, str):
            raise TypeError("Expected argument 'service_bus_suffix' to be a str")
        __self__.service_bus_suffix = service_bus_suffix
        """
        The suffix for the service bus endpoint. By default this is .servicebus.windows.net
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetWebAppHybridConnectionResult(GetWebAppHybridConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebAppHybridConnectionResult(
            hostname=self.hostname,
            kind=self.kind,
            name=self.name,
            port=self.port,
            relay_arm_uri=self.relay_arm_uri,
            relay_name=self.relay_name,
            send_key_name=self.send_key_name,
            send_key_value=self.send_key_value,
            service_bus_namespace=self.service_bus_namespace,
            service_bus_suffix=self.service_bus_suffix,
            type=self.type)


def get_web_app_hybrid_connection(name=None, namespace_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The relay name for this hybrid connection.
    :param str namespace_name: The namespace for this hybrid connection.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['namespaceName'] = namespace_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20181101:getWebAppHybridConnection', __args__, opts=opts).value

    return AwaitableGetWebAppHybridConnectionResult(
        hostname=__ret__.get('hostname'),
        kind=__ret__.get('kind'),
        name=__ret__.get('name'),
        port=__ret__.get('port'),
        relay_arm_uri=__ret__.get('relayArmUri'),
        relay_name=__ret__.get('relayName'),
        send_key_name=__ret__.get('sendKeyName'),
        send_key_value=__ret__.get('sendKeyValue'),
        service_bus_namespace=__ret__.get('serviceBusNamespace'),
        service_bus_suffix=__ret__.get('serviceBusSuffix'),
        type=__ret__.get('type'))
