# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Certificate(pulumi.CustomResource):
    cer_blob: pulumi.Output[str]
    """
    Raw bytes of .cer file
    """
    expiration_date: pulumi.Output[str]
    """
    Certificate expiration date.
    """
    friendly_name: pulumi.Output[str]
    """
    Friendly name of the certificate.
    """
    host_names: pulumi.Output[list]
    """
    Host names the certificate applies to.
    """
    hosting_environment_profile: pulumi.Output[dict]
    """
    Specification for the App Service Environment to use for the certificate.
      * `id` (`str`) - Resource ID of the App Service Environment.
      * `name` (`str`) - Name of the App Service Environment.
      * `type` (`str`) - Resource type of the App Service Environment.
    """
    issue_date: pulumi.Output[str]
    """
    Certificate issue Date.
    """
    issuer: pulumi.Output[str]
    """
    Certificate issuer.
    """
    key_vault_id: pulumi.Output[str]
    """
    Key Vault Csm resource Id.
    """
    key_vault_secret_name: pulumi.Output[str]
    """
    Key Vault secret name.
    """
    key_vault_secret_status: pulumi.Output[str]
    """
    Status of the Key Vault secret.
    """
    kind: pulumi.Output[str]
    """
    Kind of resource.
    """
    location: pulumi.Output[str]
    """
    Resource Location.
    """
    name: pulumi.Output[str]
    """
    Resource Name.
    """
    password: pulumi.Output[str]
    """
    Certificate password.
    """
    pfx_blob: pulumi.Output[str]
    """
    Pfx blob.
    """
    public_key_hash: pulumi.Output[str]
    """
    Public key hash.
    """
    self_link: pulumi.Output[str]
    """
    Self link.
    """
    server_farm_id: pulumi.Output[str]
    """
    Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
    """
    site_name: pulumi.Output[str]
    """
    App name.
    """
    subject_name: pulumi.Output[str]
    """
    Subject name of the certificate.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    thumbprint: pulumi.Output[str]
    """
    Certificate thumbprint.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    valid: pulumi.Output[bool]
    """
    Is the certificate valid?.
    """
    def __init__(__self__, resource_name, opts=None, host_names=None, key_vault_id=None, key_vault_secret_name=None, kind=None, location=None, name=None, password=None, pfx_blob=None, resource_group_name=None, server_farm_id=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        SSL certificate for an app.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] host_names: Host names the certificate applies to.
        :param pulumi.Input[str] key_vault_id: Key Vault Csm resource Id.
        :param pulumi.Input[str] key_vault_secret_name: Key Vault secret name.
        :param pulumi.Input[str] kind: Kind of resource.
        :param pulumi.Input[str] location: Resource Location.
        :param pulumi.Input[str] name: Name of the certificate.
        :param pulumi.Input[str] password: Certificate password.
        :param pulumi.Input[str] pfx_blob: Pfx blob.
        :param pulumi.Input[str] resource_group_name: Name of the resource group to which the resource belongs.
        :param pulumi.Input[str] server_farm_id: Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
        :param pulumi.Input[dict] tags: Resource tags.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['host_names'] = host_names
            __props__['key_vault_id'] = key_vault_id
            __props__['key_vault_secret_name'] = key_vault_secret_name
            __props__['kind'] = kind
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if password is None:
                raise TypeError("Missing required property 'password'")
            __props__['password'] = password
            __props__['pfx_blob'] = pfx_blob
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['server_farm_id'] = server_farm_id
            __props__['tags'] = tags
            __props__['cer_blob'] = None
            __props__['expiration_date'] = None
            __props__['friendly_name'] = None
            __props__['hosting_environment_profile'] = None
            __props__['issue_date'] = None
            __props__['issuer'] = None
            __props__['key_vault_secret_status'] = None
            __props__['public_key_hash'] = None
            __props__['self_link'] = None
            __props__['site_name'] = None
            __props__['subject_name'] = None
            __props__['thumbprint'] = None
            __props__['type'] = None
            __props__['valid'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:web/v20150801:Certificate"), pulumi.Alias(type_="azurerm:web/v20160301:Certificate"), pulumi.Alias(type_="azurerm:web/v20180201:Certificate"), pulumi.Alias(type_="azurerm:web/v20190801:Certificate"), pulumi.Alias(type_="azurerm:web/v20200601:Certificate")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Certificate, __self__).__init__(
            'azurerm:web/v20181101:Certificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Certificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Certificate(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
