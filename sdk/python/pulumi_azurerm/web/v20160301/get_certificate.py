# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetCertificateResult:
    """
    SSL certificate for an app.
    """
    def __init__(__self__, cer_blob=None, expiration_date=None, friendly_name=None, geo_region=None, host_names=None, hosting_environment_profile=None, issue_date=None, issuer=None, key_vault_id=None, key_vault_secret_name=None, key_vault_secret_status=None, kind=None, location=None, name=None, password=None, pfx_blob=None, public_key_hash=None, self_link=None, server_farm_id=None, site_name=None, subject_name=None, tags=None, thumbprint=None, type=None, valid=None):
        if cer_blob and not isinstance(cer_blob, str):
            raise TypeError("Expected argument 'cer_blob' to be a str")
        __self__.cer_blob = cer_blob
        """
        Raw bytes of .cer file
        """
        if expiration_date and not isinstance(expiration_date, str):
            raise TypeError("Expected argument 'expiration_date' to be a str")
        __self__.expiration_date = expiration_date
        """
        Certificate expiration date.
        """
        if friendly_name and not isinstance(friendly_name, str):
            raise TypeError("Expected argument 'friendly_name' to be a str")
        __self__.friendly_name = friendly_name
        """
        Friendly name of the certificate.
        """
        if geo_region and not isinstance(geo_region, str):
            raise TypeError("Expected argument 'geo_region' to be a str")
        __self__.geo_region = geo_region
        """
        Region of the certificate.
        """
        if host_names and not isinstance(host_names, list):
            raise TypeError("Expected argument 'host_names' to be a list")
        __self__.host_names = host_names
        """
        Host names the certificate applies to.
        """
        if hosting_environment_profile and not isinstance(hosting_environment_profile, dict):
            raise TypeError("Expected argument 'hosting_environment_profile' to be a dict")
        __self__.hosting_environment_profile = hosting_environment_profile
        """
        Specification for the App Service Environment to use for the certificate.
        """
        if issue_date and not isinstance(issue_date, str):
            raise TypeError("Expected argument 'issue_date' to be a str")
        __self__.issue_date = issue_date
        """
        Certificate issue Date.
        """
        if issuer and not isinstance(issuer, str):
            raise TypeError("Expected argument 'issuer' to be a str")
        __self__.issuer = issuer
        """
        Certificate issuer.
        """
        if key_vault_id and not isinstance(key_vault_id, str):
            raise TypeError("Expected argument 'key_vault_id' to be a str")
        __self__.key_vault_id = key_vault_id
        """
        Key Vault Csm resource Id.
        """
        if key_vault_secret_name and not isinstance(key_vault_secret_name, str):
            raise TypeError("Expected argument 'key_vault_secret_name' to be a str")
        __self__.key_vault_secret_name = key_vault_secret_name
        """
        Key Vault secret name.
        """
        if key_vault_secret_status and not isinstance(key_vault_secret_status, str):
            raise TypeError("Expected argument 'key_vault_secret_status' to be a str")
        __self__.key_vault_secret_status = key_vault_secret_status
        """
        Status of the Key Vault secret.
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Kind of resource.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource Location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource Name.
        """
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        __self__.password = password
        """
        Certificate password.
        """
        if pfx_blob and not isinstance(pfx_blob, str):
            raise TypeError("Expected argument 'pfx_blob' to be a str")
        __self__.pfx_blob = pfx_blob
        """
        Pfx blob.
        """
        if public_key_hash and not isinstance(public_key_hash, str):
            raise TypeError("Expected argument 'public_key_hash' to be a str")
        __self__.public_key_hash = public_key_hash
        """
        Public key hash.
        """
        if self_link and not isinstance(self_link, str):
            raise TypeError("Expected argument 'self_link' to be a str")
        __self__.self_link = self_link
        """
        Self link.
        """
        if server_farm_id and not isinstance(server_farm_id, str):
            raise TypeError("Expected argument 'server_farm_id' to be a str")
        __self__.server_farm_id = server_farm_id
        """
        Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
        """
        if site_name and not isinstance(site_name, str):
            raise TypeError("Expected argument 'site_name' to be a str")
        __self__.site_name = site_name
        """
        App name.
        """
        if subject_name and not isinstance(subject_name, str):
            raise TypeError("Expected argument 'subject_name' to be a str")
        __self__.subject_name = subject_name
        """
        Subject name of the certificate.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if thumbprint and not isinstance(thumbprint, str):
            raise TypeError("Expected argument 'thumbprint' to be a str")
        __self__.thumbprint = thumbprint
        """
        Certificate thumbprint.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if valid and not isinstance(valid, bool):
            raise TypeError("Expected argument 'valid' to be a bool")
        __self__.valid = valid
        """
        Is the certificate valid?.
        """


class AwaitableGetCertificateResult(GetCertificateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCertificateResult(
            cer_blob=self.cer_blob,
            expiration_date=self.expiration_date,
            friendly_name=self.friendly_name,
            geo_region=self.geo_region,
            host_names=self.host_names,
            hosting_environment_profile=self.hosting_environment_profile,
            issue_date=self.issue_date,
            issuer=self.issuer,
            key_vault_id=self.key_vault_id,
            key_vault_secret_name=self.key_vault_secret_name,
            key_vault_secret_status=self.key_vault_secret_status,
            kind=self.kind,
            location=self.location,
            name=self.name,
            password=self.password,
            pfx_blob=self.pfx_blob,
            public_key_hash=self.public_key_hash,
            self_link=self.self_link,
            server_farm_id=self.server_farm_id,
            site_name=self.site_name,
            subject_name=self.subject_name,
            tags=self.tags,
            thumbprint=self.thumbprint,
            type=self.type,
            valid=self.valid)


def get_certificate(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of the certificate.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20160301:getCertificate', __args__, opts=opts).value

    return AwaitableGetCertificateResult(
        cer_blob=__ret__.get('cerBlob'),
        expiration_date=__ret__.get('expirationDate'),
        friendly_name=__ret__.get('friendlyName'),
        geo_region=__ret__.get('geoRegion'),
        host_names=__ret__.get('hostNames'),
        hosting_environment_profile=__ret__.get('hostingEnvironmentProfile'),
        issue_date=__ret__.get('issueDate'),
        issuer=__ret__.get('issuer'),
        key_vault_id=__ret__.get('keyVaultId'),
        key_vault_secret_name=__ret__.get('keyVaultSecretName'),
        key_vault_secret_status=__ret__.get('keyVaultSecretStatus'),
        kind=__ret__.get('kind'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        password=__ret__.get('password'),
        pfx_blob=__ret__.get('pfxBlob'),
        public_key_hash=__ret__.get('publicKeyHash'),
        self_link=__ret__.get('selfLink'),
        server_farm_id=__ret__.get('serverFarmId'),
        site_name=__ret__.get('siteName'),
        subject_name=__ret__.get('subjectName'),
        tags=__ret__.get('tags'),
        thumbprint=__ret__.get('thumbprint'),
        type=__ret__.get('type'),
        valid=__ret__.get('valid'))
