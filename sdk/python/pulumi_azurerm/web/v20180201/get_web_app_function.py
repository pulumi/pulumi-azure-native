# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetWebAppFunctionResult:
    """
    Function information.
    """
    def __init__(__self__, config=None, config_href=None, files=None, function_app_id=None, href=None, invoke_url_template=None, is_disabled=None, kind=None, language=None, name=None, script_href=None, script_root_path_href=None, secrets_file_href=None, test_data=None, test_data_href=None, type=None):
        if config and not isinstance(config, dict):
            raise TypeError("Expected argument 'config' to be a dict")
        __self__.config = config
        """
        Config information.
        """
        if config_href and not isinstance(config_href, str):
            raise TypeError("Expected argument 'config_href' to be a str")
        __self__.config_href = config_href
        """
        Config URI.
        """
        if files and not isinstance(files, dict):
            raise TypeError("Expected argument 'files' to be a dict")
        __self__.files = files
        """
        File list.
        """
        if function_app_id and not isinstance(function_app_id, str):
            raise TypeError("Expected argument 'function_app_id' to be a str")
        __self__.function_app_id = function_app_id
        """
        Function App ID.
        """
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        __self__.href = href
        """
        Function URI.
        """
        if invoke_url_template and not isinstance(invoke_url_template, str):
            raise TypeError("Expected argument 'invoke_url_template' to be a str")
        __self__.invoke_url_template = invoke_url_template
        """
        The invocation URL
        """
        if is_disabled and not isinstance(is_disabled, bool):
            raise TypeError("Expected argument 'is_disabled' to be a bool")
        __self__.is_disabled = is_disabled
        """
        Value indicating whether the function is disabled
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Kind of resource.
        """
        if language and not isinstance(language, str):
            raise TypeError("Expected argument 'language' to be a str")
        __self__.language = language
        """
        The function language
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource Name.
        """
        if script_href and not isinstance(script_href, str):
            raise TypeError("Expected argument 'script_href' to be a str")
        __self__.script_href = script_href
        """
        Script URI.
        """
        if script_root_path_href and not isinstance(script_root_path_href, str):
            raise TypeError("Expected argument 'script_root_path_href' to be a str")
        __self__.script_root_path_href = script_root_path_href
        """
        Script root path URI.
        """
        if secrets_file_href and not isinstance(secrets_file_href, str):
            raise TypeError("Expected argument 'secrets_file_href' to be a str")
        __self__.secrets_file_href = secrets_file_href
        """
        Secrets file URI.
        """
        if test_data and not isinstance(test_data, str):
            raise TypeError("Expected argument 'test_data' to be a str")
        __self__.test_data = test_data
        """
        Test data used when testing via the Azure Portal.
        """
        if test_data_href and not isinstance(test_data_href, str):
            raise TypeError("Expected argument 'test_data_href' to be a str")
        __self__.test_data_href = test_data_href
        """
        Test data URI.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetWebAppFunctionResult(GetWebAppFunctionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebAppFunctionResult(
            config=self.config,
            config_href=self.config_href,
            files=self.files,
            function_app_id=self.function_app_id,
            href=self.href,
            invoke_url_template=self.invoke_url_template,
            is_disabled=self.is_disabled,
            kind=self.kind,
            language=self.language,
            name=self.name,
            script_href=self.script_href,
            script_root_path_href=self.script_root_path_href,
            secrets_file_href=self.secrets_file_href,
            test_data=self.test_data,
            test_data_href=self.test_data_href,
            type=self.type)


def get_web_app_function(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Function name.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20180201:getWebAppFunction', __args__, opts=opts).value

    return AwaitableGetWebAppFunctionResult(
        config=__ret__.get('config'),
        config_href=__ret__.get('config_href'),
        files=__ret__.get('files'),
        function_app_id=__ret__.get('function_app_id'),
        href=__ret__.get('href'),
        invoke_url_template=__ret__.get('invoke_url_template'),
        is_disabled=__ret__.get('isDisabled'),
        kind=__ret__.get('kind'),
        language=__ret__.get('language'),
        name=__ret__.get('name'),
        script_href=__ret__.get('script_href'),
        script_root_path_href=__ret__.get('script_root_path_href'),
        secrets_file_href=__ret__.get('secrets_file_href'),
        test_data=__ret__.get('test_data'),
        test_data_href=__ret__.get('test_data_href'),
        type=__ret__.get('type'))
