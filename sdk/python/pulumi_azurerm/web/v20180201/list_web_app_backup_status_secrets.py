# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ListWebAppBackupStatusSecretsResult:
    """
    Backup description.
    """
    def __init__(__self__, backup_id=None, blob_name=None, correlation_id=None, created=None, databases=None, finished_time_stamp=None, kind=None, last_restore_time_stamp=None, log=None, name=None, scheduled=None, size_in_bytes=None, status=None, storage_account_url=None, type=None, website_size_in_bytes=None):
        if backup_id and not isinstance(backup_id, float):
            raise TypeError("Expected argument 'backup_id' to be a float")
        __self__.backup_id = backup_id
        """
        Id of the backup.
        """
        if blob_name and not isinstance(blob_name, str):
            raise TypeError("Expected argument 'blob_name' to be a str")
        __self__.blob_name = blob_name
        """
        Name of the blob which contains data for this backup.
        """
        if correlation_id and not isinstance(correlation_id, str):
            raise TypeError("Expected argument 'correlation_id' to be a str")
        __self__.correlation_id = correlation_id
        """
        Unique correlation identifier. Please use this along with the timestamp while communicating with Azure support.
        """
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        __self__.created = created
        """
        Timestamp of the backup creation.
        """
        if databases and not isinstance(databases, list):
            raise TypeError("Expected argument 'databases' to be a list")
        __self__.databases = databases
        """
        List of databases included in the backup.
        """
        if finished_time_stamp and not isinstance(finished_time_stamp, str):
            raise TypeError("Expected argument 'finished_time_stamp' to be a str")
        __self__.finished_time_stamp = finished_time_stamp
        """
        Timestamp when this backup finished.
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Kind of resource.
        """
        if last_restore_time_stamp and not isinstance(last_restore_time_stamp, str):
            raise TypeError("Expected argument 'last_restore_time_stamp' to be a str")
        __self__.last_restore_time_stamp = last_restore_time_stamp
        """
        Timestamp of a last restore operation which used this backup.
        """
        if log and not isinstance(log, str):
            raise TypeError("Expected argument 'log' to be a str")
        __self__.log = log
        """
        Details regarding this backup. Might contain an error message.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource Name.
        """
        if scheduled and not isinstance(scheduled, bool):
            raise TypeError("Expected argument 'scheduled' to be a bool")
        __self__.scheduled = scheduled
        """
        True if this backup has been created due to a schedule being triggered.
        """
        if size_in_bytes and not isinstance(size_in_bytes, float):
            raise TypeError("Expected argument 'size_in_bytes' to be a float")
        __self__.size_in_bytes = size_in_bytes
        """
        Size of the backup in bytes.
        """
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        """
        Backup status.
        """
        if storage_account_url and not isinstance(storage_account_url, str):
            raise TypeError("Expected argument 'storage_account_url' to be a str")
        __self__.storage_account_url = storage_account_url
        """
        SAS URL for the storage account container which contains this backup.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if website_size_in_bytes and not isinstance(website_size_in_bytes, float):
            raise TypeError("Expected argument 'website_size_in_bytes' to be a float")
        __self__.website_size_in_bytes = website_size_in_bytes
        """
        Size of the original web app which has been backed up.
        """


class AwaitableListWebAppBackupStatusSecretsResult(ListWebAppBackupStatusSecretsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListWebAppBackupStatusSecretsResult(
            backup_id=self.backup_id,
            blob_name=self.blob_name,
            correlation_id=self.correlation_id,
            created=self.created,
            databases=self.databases,
            finished_time_stamp=self.finished_time_stamp,
            kind=self.kind,
            last_restore_time_stamp=self.last_restore_time_stamp,
            log=self.log,
            name=self.name,
            scheduled=self.scheduled,
            size_in_bytes=self.size_in_bytes,
            status=self.status,
            storage_account_url=self.storage_account_url,
            type=self.type,
            website_size_in_bytes=self.website_size_in_bytes)


def list_web_app_backup_status_secrets(backup_name=None, backup_schedule=None, databases=None, enabled=None, kind=None, name=None, resource_group_name=None, storage_account_url=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str backup_name: Name of the backup.
    :param dict backup_schedule: Schedule for the backup if it is executed periodically.
    :param list databases: Databases included in the backup.
    :param bool enabled: True if the backup schedule is enabled (must be included in that case), false if the backup schedule should be disabled.
    :param str kind: Kind of resource.
    :param str name: ID of backup.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    :param str storage_account_url: SAS URL to the container.

    The **backup_schedule** object supports the following:

      * `frequency_interval` (`float`) - How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
      * `frequency_unit` (`str`) - The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
      * `keep_at_least_one_backup` (`bool`) - True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
      * `retention_period_in_days` (`float`) - After how many days backups should be deleted.
      * `start_time` (`str`) - When the schedule should start working.

    The **databases** object supports the following:

      * `connection_string` (`str`) - Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.
      * `connection_string_name` (`str`) - Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.
        This is used during restore with overwrite connection strings options.
      * `database_type` (`str`) - Database type (e.g. SqlAzure / MySql).
      * `name` (`str`)
    """
    __args__ = dict()
    __args__['backupName'] = backup_name
    __args__['backupSchedule'] = backup_schedule
    __args__['databases'] = databases
    __args__['enabled'] = enabled
    __args__['kind'] = kind
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['storageAccountUrl'] = storage_account_url
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20180201:listWebAppBackupStatusSecrets', __args__, opts=opts).value

    return AwaitableListWebAppBackupStatusSecretsResult(
        backup_id=__ret__.get('backupId'),
        blob_name=__ret__.get('blobName'),
        correlation_id=__ret__.get('correlationId'),
        created=__ret__.get('created'),
        databases=__ret__.get('databases'),
        finished_time_stamp=__ret__.get('finishedTimeStamp'),
        kind=__ret__.get('kind'),
        last_restore_time_stamp=__ret__.get('lastRestoreTimeStamp'),
        log=__ret__.get('log'),
        name=__ret__.get('name'),
        scheduled=__ret__.get('scheduled'),
        size_in_bytes=__ret__.get('sizeInBytes'),
        status=__ret__.get('status'),
        storage_account_url=__ret__.get('storageAccountUrl'),
        type=__ret__.get('type'),
        website_size_in_bytes=__ret__.get('websiteSizeInBytes'))
