# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetWebAppPremierAddOnSlotResult:
    """
    Premier add-on.
    """
    def __init__(__self__, kind=None, location=None, marketplace_offer=None, marketplace_publisher=None, name=None, premier_add_on_name=None, product=None, sku=None, tags=None, type=None, vendor=None):
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Kind of resource.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource Location.
        """
        if marketplace_offer and not isinstance(marketplace_offer, str):
            raise TypeError("Expected argument 'marketplace_offer' to be a str")
        __self__.marketplace_offer = marketplace_offer
        """
        Premier add on Marketplace offer.
        """
        if marketplace_publisher and not isinstance(marketplace_publisher, str):
            raise TypeError("Expected argument 'marketplace_publisher' to be a str")
        __self__.marketplace_publisher = marketplace_publisher
        """
        Premier add on Marketplace publisher.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource Name.
        """
        if premier_add_on_name and not isinstance(premier_add_on_name, str):
            raise TypeError("Expected argument 'premier_add_on_name' to be a str")
        __self__.premier_add_on_name = premier_add_on_name
        """
        Premier add on Name.
        """
        if product and not isinstance(product, str):
            raise TypeError("Expected argument 'product' to be a str")
        __self__.product = product
        """
        Premier add on Product.
        """
        if sku and not isinstance(sku, str):
            raise TypeError("Expected argument 'sku' to be a str")
        __self__.sku = sku
        """
        Premier add on SKU.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if vendor and not isinstance(vendor, str):
            raise TypeError("Expected argument 'vendor' to be a str")
        __self__.vendor = vendor
        """
        Premier add on Vendor.
        """


class AwaitableGetWebAppPremierAddOnSlotResult(GetWebAppPremierAddOnSlotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebAppPremierAddOnSlotResult(
            kind=self.kind,
            location=self.location,
            marketplace_offer=self.marketplace_offer,
            marketplace_publisher=self.marketplace_publisher,
            name=self.name,
            premier_add_on_name=self.premier_add_on_name,
            product=self.product,
            sku=self.sku,
            tags=self.tags,
            type=self.type,
            vendor=self.vendor)


def get_web_app_premier_add_on_slot(name=None, resource_group_name=None, slot=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Add-on name.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    :param str slot: Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['slot'] = slot
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20160801:getWebAppPremierAddOnSlot', __args__, opts=opts).value

    return AwaitableGetWebAppPremierAddOnSlotResult(
        kind=__ret__.get('kind'),
        location=__ret__.get('location'),
        marketplace_offer=__ret__.get('marketplaceOffer'),
        marketplace_publisher=__ret__.get('marketplacePublisher'),
        name=__ret__.get('name'),
        premier_add_on_name=__ret__.get('premierAddOnName'),
        product=__ret__.get('product'),
        sku=__ret__.get('sku'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        vendor=__ret__.get('vendor'))
