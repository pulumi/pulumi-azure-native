# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ListWebAppBackupConfigurationResult:
    """
    Description of a backup which will be performed.
    """
    def __init__(__self__, backup_request_name=None, backup_schedule=None, databases=None, enabled=None, kind=None, name=None, storage_account_url=None, type=None):
        if backup_request_name and not isinstance(backup_request_name, str):
            raise TypeError("Expected argument 'backup_request_name' to be a str")
        __self__.backup_request_name = backup_request_name
        """
        Name of the backup.
        """
        if backup_schedule and not isinstance(backup_schedule, dict):
            raise TypeError("Expected argument 'backup_schedule' to be a dict")
        __self__.backup_schedule = backup_schedule
        """
        Schedule for the backup if it is executed periodically.
        """
        if databases and not isinstance(databases, list):
            raise TypeError("Expected argument 'databases' to be a list")
        __self__.databases = databases
        """
        Databases included in the backup.
        """
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        __self__.enabled = enabled
        """
        True if the backup schedule is enabled (must be included in that case), false if the backup schedule should be disabled.
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        Kind of resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource Name.
        """
        if storage_account_url and not isinstance(storage_account_url, str):
            raise TypeError("Expected argument 'storage_account_url' to be a str")
        __self__.storage_account_url = storage_account_url
        """
        SAS URL to the container.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableListWebAppBackupConfigurationResult(ListWebAppBackupConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListWebAppBackupConfigurationResult(
            backup_request_name=self.backup_request_name,
            backup_schedule=self.backup_schedule,
            databases=self.databases,
            enabled=self.enabled,
            kind=self.kind,
            name=self.name,
            storage_account_url=self.storage_account_url,
            type=self.type)


def list_web_app_backup_configuration(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of the app.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20160801:listWebAppBackupConfiguration', __args__, opts=opts).value

    return AwaitableListWebAppBackupConfigurationResult(
        backup_request_name=__ret__.get('backupRequestName'),
        backup_schedule=__ret__.get('backupSchedule'),
        databases=__ret__.get('databases'),
        enabled=__ret__.get('enabled'),
        kind=__ret__.get('kind'),
        name=__ret__.get('name'),
        storage_account_url=__ret__.get('storageAccountUrl'),
        type=__ret__.get('type'))
