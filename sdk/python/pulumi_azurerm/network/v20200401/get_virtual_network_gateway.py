# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVirtualNetworkGatewayResult:
    """
    A common class for general resource information.
    """
    def __init__(__self__, active_active=None, bgp_settings=None, custom_routes=None, enable_bgp=None, enable_dns_forwarding=None, enable_private_ip_address=None, etag=None, gateway_default_site=None, gateway_type=None, inbound_dns_forwarding_endpoint=None, ip_configurations=None, location=None, name=None, provisioning_state=None, resource_guid=None, sku=None, tags=None, type=None, vpn_client_configuration=None, vpn_gateway_generation=None, vpn_type=None):
        if active_active and not isinstance(active_active, bool):
            raise TypeError("Expected argument 'active_active' to be a bool")
        __self__.active_active = active_active
        """
        ActiveActive flag.
        """
        if bgp_settings and not isinstance(bgp_settings, dict):
            raise TypeError("Expected argument 'bgp_settings' to be a dict")
        __self__.bgp_settings = bgp_settings
        """
        Virtual network gateway's BGP speaker settings.
        """
        if custom_routes and not isinstance(custom_routes, dict):
            raise TypeError("Expected argument 'custom_routes' to be a dict")
        __self__.custom_routes = custom_routes
        """
        The reference to the address space resource which represents the custom routes address space specified by the customer for virtual network gateway and VpnClient.
        """
        if enable_bgp and not isinstance(enable_bgp, bool):
            raise TypeError("Expected argument 'enable_bgp' to be a bool")
        __self__.enable_bgp = enable_bgp
        """
        Whether BGP is enabled for this virtual network gateway or not.
        """
        if enable_dns_forwarding and not isinstance(enable_dns_forwarding, bool):
            raise TypeError("Expected argument 'enable_dns_forwarding' to be a bool")
        __self__.enable_dns_forwarding = enable_dns_forwarding
        """
        Whether dns forwarding is enabled or not.
        """
        if enable_private_ip_address and not isinstance(enable_private_ip_address, bool):
            raise TypeError("Expected argument 'enable_private_ip_address' to be a bool")
        __self__.enable_private_ip_address = enable_private_ip_address
        """
        Whether private IP needs to be enabled on this gateway for connections or not.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if gateway_default_site and not isinstance(gateway_default_site, dict):
            raise TypeError("Expected argument 'gateway_default_site' to be a dict")
        __self__.gateway_default_site = gateway_default_site
        """
        The reference to the LocalNetworkGateway resource which represents local network site having default routes. Assign Null value in case of removing existing default site setting.
        """
        if gateway_type and not isinstance(gateway_type, str):
            raise TypeError("Expected argument 'gateway_type' to be a str")
        __self__.gateway_type = gateway_type
        """
        The type of this virtual network gateway.
        """
        if inbound_dns_forwarding_endpoint and not isinstance(inbound_dns_forwarding_endpoint, str):
            raise TypeError("Expected argument 'inbound_dns_forwarding_endpoint' to be a str")
        __self__.inbound_dns_forwarding_endpoint = inbound_dns_forwarding_endpoint
        """
        The IP address allocated by the gateway to which dns requests can be sent.
        """
        if ip_configurations and not isinstance(ip_configurations, list):
            raise TypeError("Expected argument 'ip_configurations' to be a list")
        __self__.ip_configurations = ip_configurations
        """
        IP configurations for virtual network gateway.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the virtual network gateway resource.
        """
        if resource_guid and not isinstance(resource_guid, str):
            raise TypeError("Expected argument 'resource_guid' to be a str")
        __self__.resource_guid = resource_guid
        """
        The resource GUID property of the virtual network gateway resource.
        """
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        The reference to the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network gateway.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if vpn_client_configuration and not isinstance(vpn_client_configuration, dict):
            raise TypeError("Expected argument 'vpn_client_configuration' to be a dict")
        __self__.vpn_client_configuration = vpn_client_configuration
        """
        The reference to the VpnClientConfiguration resource which represents the P2S VpnClient configurations.
        """
        if vpn_gateway_generation and not isinstance(vpn_gateway_generation, str):
            raise TypeError("Expected argument 'vpn_gateway_generation' to be a str")
        __self__.vpn_gateway_generation = vpn_gateway_generation
        """
        The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
        """
        if vpn_type and not isinstance(vpn_type, str):
            raise TypeError("Expected argument 'vpn_type' to be a str")
        __self__.vpn_type = vpn_type
        """
        The type of this virtual network gateway.
        """


class AwaitableGetVirtualNetworkGatewayResult(GetVirtualNetworkGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualNetworkGatewayResult(
            active_active=self.active_active,
            bgp_settings=self.bgp_settings,
            custom_routes=self.custom_routes,
            enable_bgp=self.enable_bgp,
            enable_dns_forwarding=self.enable_dns_forwarding,
            enable_private_ip_address=self.enable_private_ip_address,
            etag=self.etag,
            gateway_default_site=self.gateway_default_site,
            gateway_type=self.gateway_type,
            inbound_dns_forwarding_endpoint=self.inbound_dns_forwarding_endpoint,
            ip_configurations=self.ip_configurations,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            resource_guid=self.resource_guid,
            sku=self.sku,
            tags=self.tags,
            type=self.type,
            vpn_client_configuration=self.vpn_client_configuration,
            vpn_gateway_generation=self.vpn_gateway_generation,
            vpn_type=self.vpn_type)


def get_virtual_network_gateway(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the virtual network gateway.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20200401:getVirtualNetworkGateway', __args__, opts=opts).value

    return AwaitableGetVirtualNetworkGatewayResult(
        active_active=__ret__.get('activeActive'),
        bgp_settings=__ret__.get('bgpSettings'),
        custom_routes=__ret__.get('customRoutes'),
        enable_bgp=__ret__.get('enableBgp'),
        enable_dns_forwarding=__ret__.get('enableDnsForwarding'),
        enable_private_ip_address=__ret__.get('enablePrivateIpAddress'),
        etag=__ret__.get('etag'),
        gateway_default_site=__ret__.get('gatewayDefaultSite'),
        gateway_type=__ret__.get('gatewayType'),
        inbound_dns_forwarding_endpoint=__ret__.get('inboundDnsForwardingEndpoint'),
        ip_configurations=__ret__.get('ipConfigurations'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        resource_guid=__ret__.get('resourceGuid'),
        sku=__ret__.get('sku'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        vpn_client_configuration=__ret__.get('vpnClientConfiguration'),
        vpn_gateway_generation=__ret__.get('vpnGatewayGeneration'),
        vpn_type=__ret__.get('vpnType'))
