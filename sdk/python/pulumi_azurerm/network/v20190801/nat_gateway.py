# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class NatGateway(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    A unique read-only string that changes whenever the resource is updated.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    properties: pulumi.Output[dict]
    """
    Nat Gateway properties.
      * `idle_timeout_in_minutes` (`float`) - The idle timeout of the nat gateway.
      * `provisioning_state` (`str`) - The provisioning state of the NAT gateway resource.
      * `public_ip_addresses` (`list`) - An array of public ip addresses associated with the nat gateway resource.
        * `id` (`str`) - Resource ID.

      * `public_ip_prefixes` (`list`) - An array of public ip prefixes associated with the nat gateway resource.
      * `resource_guid` (`str`) - The resource GUID property of the NAT gateway resource.
      * `subnets` (`list`) - An array of references to the subnets using this nat gateway resource.
    """
    sku: pulumi.Output[dict]
    """
    The nat gateway SKU.
      * `name` (`str`) - Name of Nat Gateway SKU.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    zones: pulumi.Output[list]
    """
    A list of availability zones denoting the zone in which Nat Gateway should be deployed.
    """
    def __init__(__self__, resource_name, opts=None, etag=None, id=None, location=None, name=None, properties=None, resource_group_name=None, sku=None, tags=None, zones=None, __props__=None, __name__=None, __opts__=None):
        """
        Nat Gateway resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] etag: A unique read-only string that changes whenever the resource is updated.
        :param pulumi.Input[str] id: Resource ID.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: The name of the nat gateway.
        :param pulumi.Input[dict] properties: Nat Gateway properties.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] sku: The nat gateway SKU.
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[list] zones: A list of availability zones denoting the zone in which Nat Gateway should be deployed.

        The **properties** object supports the following:

          * `idle_timeout_in_minutes` (`pulumi.Input[float]`) - The idle timeout of the nat gateway.
          * `provisioning_state` (`pulumi.Input[str]`) - The provisioning state of the NAT gateway resource.
          * `public_ip_addresses` (`pulumi.Input[list]`) - An array of public ip addresses associated with the nat gateway resource.
            * `id` (`pulumi.Input[str]`) - Resource ID.

          * `public_ip_prefixes` (`pulumi.Input[list]`) - An array of public ip prefixes associated with the nat gateway resource.
          * `resource_guid` (`pulumi.Input[str]`) - The resource GUID property of the NAT gateway resource.

        The **sku** object supports the following:

          * `name` (`pulumi.Input[str]`) - Name of Nat Gateway SKU.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['etag'] = etag
            __props__['id'] = id
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['zones'] = zones
            __props__['type'] = None
        super(NatGateway, __self__).__init__(
            'azurerm:network/v20190801:NatGateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing NatGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return NatGateway(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
