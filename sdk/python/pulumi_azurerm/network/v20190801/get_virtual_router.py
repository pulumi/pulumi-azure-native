# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVirtualRouterResult:
    """
    VirtualRouter Resource.
    """
    def __init__(__self__, etag=None, hosted_gateway=None, hosted_subnet=None, location=None, name=None, peerings=None, provisioning_state=None, tags=None, type=None, virtual_router_asn=None, virtual_router_ips=None):
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Gets a unique read-only string that changes whenever the resource is updated.
        """
        if hosted_gateway and not isinstance(hosted_gateway, dict):
            raise TypeError("Expected argument 'hosted_gateway' to be a dict")
        __self__.hosted_gateway = hosted_gateway
        """
        The Gateway on which VirtualRouter is hosted.
        """
        if hosted_subnet and not isinstance(hosted_subnet, dict):
            raise TypeError("Expected argument 'hosted_subnet' to be a dict")
        __self__.hosted_subnet = hosted_subnet
        """
        The Subnet on which VirtualRouter is hosted.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if peerings and not isinstance(peerings, list):
            raise TypeError("Expected argument 'peerings' to be a list")
        __self__.peerings = peerings
        """
        List of references to VirtualRouterPeerings
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the resource.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if virtual_router_asn and not isinstance(virtual_router_asn, float):
            raise TypeError("Expected argument 'virtual_router_asn' to be a float")
        __self__.virtual_router_asn = virtual_router_asn
        """
        VirtualRouter ASN.
        """
        if virtual_router_ips and not isinstance(virtual_router_ips, list):
            raise TypeError("Expected argument 'virtual_router_ips' to be a list")
        __self__.virtual_router_ips = virtual_router_ips
        """
        VirtualRouter IPs
        """


class AwaitableGetVirtualRouterResult(GetVirtualRouterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualRouterResult(
            etag=self.etag,
            hosted_gateway=self.hosted_gateway,
            hosted_subnet=self.hosted_subnet,
            location=self.location,
            name=self.name,
            peerings=self.peerings,
            provisioning_state=self.provisioning_state,
            tags=self.tags,
            type=self.type,
            virtual_router_asn=self.virtual_router_asn,
            virtual_router_ips=self.virtual_router_ips)


def get_virtual_router(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the Virtual Router.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20190801:getVirtualRouter', __args__, opts=opts).value

    return AwaitableGetVirtualRouterResult(
        etag=__ret__.get('etag'),
        hosted_gateway=__ret__.get('hostedGateway'),
        hosted_subnet=__ret__.get('hostedSubnet'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        peerings=__ret__.get('peerings'),
        provisioning_state=__ret__.get('provisioningState'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        virtual_router_asn=__ret__.get('virtualRouterAsn'),
        virtual_router_ips=__ret__.get('virtualRouterIps'))
