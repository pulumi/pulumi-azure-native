# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class VirtualWan(pulumi.CustomResource):
    allow_branch_to_branch_traffic: pulumi.Output[bool]
    """
    True if branch to branch traffic is allowed.
    """
    allow_vnet_to_vnet_traffic: pulumi.Output[bool]
    """
    True if Vnet to Vnet traffic is allowed.
    """
    disable_vpn_encryption: pulumi.Output[bool]
    """
    Vpn encryption to be disabled or not.
    """
    etag: pulumi.Output[str]
    """
    A unique read-only string that changes whenever the resource is updated.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    office365_local_breakout_category: pulumi.Output[str]
    """
    The office local breakout category.
    """
    provisioning_state: pulumi.Output[str]
    """
    The provisioning state of the virtual WAN resource.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    virtual_hubs: pulumi.Output[list]
    """
    List of VirtualHubs in the VirtualWAN.
      * `id` (`str`) - Resource ID.
    """
    vpn_sites: pulumi.Output[list]
    """
    List of VpnSites in the VirtualWAN.
      * `id` (`str`) - Resource ID.
    """
    def __init__(__self__, resource_name, opts=None, allow_branch_to_branch_traffic=None, allow_vnet_to_vnet_traffic=None, disable_vpn_encryption=None, id=None, location=None, name=None, office365_local_breakout_category=None, resource_group_name=None, tags=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        VirtualWAN Resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_branch_to_branch_traffic: True if branch to branch traffic is allowed.
        :param pulumi.Input[bool] allow_vnet_to_vnet_traffic: True if Vnet to Vnet traffic is allowed.
        :param pulumi.Input[bool] disable_vpn_encryption: Vpn encryption to be disabled or not.
        :param pulumi.Input[str] id: Resource ID.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: The name of the VirtualWAN being created or updated.
        :param pulumi.Input[str] office365_local_breakout_category: The office local breakout category.
        :param pulumi.Input[str] resource_group_name: The resource group name of the VirtualWan.
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[str] type: The type of the VirtualWAN.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow_branch_to_branch_traffic'] = allow_branch_to_branch_traffic
            __props__['allow_vnet_to_vnet_traffic'] = allow_vnet_to_vnet_traffic
            __props__['disable_vpn_encryption'] = disable_vpn_encryption
            __props__['id'] = id
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['office365_local_breakout_category'] = office365_local_breakout_category
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = type
            __props__['etag'] = None
            __props__['provisioning_state'] = None
            __props__['virtual_hubs'] = None
            __props__['vpn_sites'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:network/v20180401:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20180601:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20180701:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20180801:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20181001:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20181101:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20181201:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20190201:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20190401:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20190601:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20190701:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20190801:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20190901:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20191101:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20200301:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20200401:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20200501:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20200601:VirtualWan")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(VirtualWan, __self__).__init__(
            'azurerm:network/v20191201:VirtualWan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing VirtualWan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return VirtualWan(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
