# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetP2sVpnGatewayResult:
    """
    P2SVpnGateway Resource.
    """
    def __init__(__self__, etag=None, location=None, name=None, p2_s_connection_configurations=None, provisioning_state=None, tags=None, type=None, virtual_hub=None, vpn_client_connection_health=None, vpn_gateway_scale_unit=None, vpn_server_configuration=None):
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if p2_s_connection_configurations and not isinstance(p2_s_connection_configurations, list):
            raise TypeError("Expected argument 'p2_s_connection_configurations' to be a list")
        __self__.p2_s_connection_configurations = p2_s_connection_configurations
        """
        List of all p2s connection configurations of the gateway.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the P2S VPN gateway resource.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if virtual_hub and not isinstance(virtual_hub, dict):
            raise TypeError("Expected argument 'virtual_hub' to be a dict")
        __self__.virtual_hub = virtual_hub
        """
        The VirtualHub to which the gateway belongs.
        """
        if vpn_client_connection_health and not isinstance(vpn_client_connection_health, dict):
            raise TypeError("Expected argument 'vpn_client_connection_health' to be a dict")
        __self__.vpn_client_connection_health = vpn_client_connection_health
        """
        All P2S VPN clients' connection health status.
        """
        if vpn_gateway_scale_unit and not isinstance(vpn_gateway_scale_unit, float):
            raise TypeError("Expected argument 'vpn_gateway_scale_unit' to be a float")
        __self__.vpn_gateway_scale_unit = vpn_gateway_scale_unit
        """
        The scale unit for this p2s vpn gateway.
        """
        if vpn_server_configuration and not isinstance(vpn_server_configuration, dict):
            raise TypeError("Expected argument 'vpn_server_configuration' to be a dict")
        __self__.vpn_server_configuration = vpn_server_configuration
        """
        The VpnServerConfiguration to which the p2sVpnGateway is attached to.
        """


class AwaitableGetP2sVpnGatewayResult(GetP2sVpnGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetP2sVpnGatewayResult(
            etag=self.etag,
            location=self.location,
            name=self.name,
            p2_s_connection_configurations=self.p2_s_connection_configurations,
            provisioning_state=self.provisioning_state,
            tags=self.tags,
            type=self.type,
            virtual_hub=self.virtual_hub,
            vpn_client_connection_health=self.vpn_client_connection_health,
            vpn_gateway_scale_unit=self.vpn_gateway_scale_unit,
            vpn_server_configuration=self.vpn_server_configuration)


def get_p2s_vpn_gateway(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the gateway.
    :param str resource_group_name: The resource group name of the P2SVpnGateway.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20191201:getP2sVpnGateway', __args__, opts=opts).value

    return AwaitableGetP2sVpnGatewayResult(
        etag=__ret__.get('etag'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        p2_s_connection_configurations=__ret__.get('p2SConnectionConfigurations'),
        provisioning_state=__ret__.get('provisioningState'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        virtual_hub=__ret__.get('virtualHub'),
        vpn_client_connection_health=__ret__.get('vpnClientConnectionHealth'),
        vpn_gateway_scale_unit=__ret__.get('vpnGatewayScaleUnit'),
        vpn_server_configuration=__ret__.get('vpnServerConfiguration'))
