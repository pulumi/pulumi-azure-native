# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetAzureFirewallResult:
    """
    Azure Firewall resource.
    """
    def __init__(__self__, application_rule_collections=None, etag=None, ip_configurations=None, location=None, name=None, nat_rule_collections=None, network_rule_collections=None, provisioning_state=None, tags=None, threat_intel_mode=None, type=None, zones=None):
        if application_rule_collections and not isinstance(application_rule_collections, list):
            raise TypeError("Expected argument 'application_rule_collections' to be a list")
        __self__.application_rule_collections = application_rule_collections
        """
        Collection of application rule collections used by Azure Firewall.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Gets a unique read-only string that changes whenever the resource is updated.
        """
        if ip_configurations and not isinstance(ip_configurations, list):
            raise TypeError("Expected argument 'ip_configurations' to be a list")
        __self__.ip_configurations = ip_configurations
        """
        IP configuration of the Azure Firewall resource.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if nat_rule_collections and not isinstance(nat_rule_collections, list):
            raise TypeError("Expected argument 'nat_rule_collections' to be a list")
        __self__.nat_rule_collections = nat_rule_collections
        """
        Collection of NAT rule collections used by Azure Firewall.
        """
        if network_rule_collections and not isinstance(network_rule_collections, list):
            raise TypeError("Expected argument 'network_rule_collections' to be a list")
        __self__.network_rule_collections = network_rule_collections
        """
        Collection of network rule collections used by Azure Firewall.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the resource.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if threat_intel_mode and not isinstance(threat_intel_mode, str):
            raise TypeError("Expected argument 'threat_intel_mode' to be a str")
        __self__.threat_intel_mode = threat_intel_mode
        """
        The operation mode for Threat Intelligence.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        __self__.zones = zones
        """
        A list of availability zones denoting where the resource needs to come from.
        """


class AwaitableGetAzureFirewallResult(GetAzureFirewallResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAzureFirewallResult(
            application_rule_collections=self.application_rule_collections,
            etag=self.etag,
            ip_configurations=self.ip_configurations,
            location=self.location,
            name=self.name,
            nat_rule_collections=self.nat_rule_collections,
            network_rule_collections=self.network_rule_collections,
            provisioning_state=self.provisioning_state,
            tags=self.tags,
            threat_intel_mode=self.threat_intel_mode,
            type=self.type,
            zones=self.zones)


def get_azure_firewall(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the Azure Firewall.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20190401:getAzureFirewall', __args__, opts=opts).value

    return AwaitableGetAzureFirewallResult(
        application_rule_collections=__ret__.get('applicationRuleCollections'),
        etag=__ret__.get('etag'),
        ip_configurations=__ret__.get('ipConfigurations'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        nat_rule_collections=__ret__.get('natRuleCollections'),
        network_rule_collections=__ret__.get('networkRuleCollections'),
        provisioning_state=__ret__.get('provisioningState'),
        tags=__ret__.get('tags'),
        threat_intel_mode=__ret__.get('threatIntelMode'),
        type=__ret__.get('type'),
        zones=__ret__.get('zones'))
