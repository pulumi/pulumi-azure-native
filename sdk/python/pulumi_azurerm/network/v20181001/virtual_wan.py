# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class VirtualWan(pulumi.CustomResource):
    allow_branch_to_branch_traffic: pulumi.Output[bool]
    """
    True if branch to branch traffic is allowed.
    """
    allow_vnet_to_vnet_traffic: pulumi.Output[bool]
    """
    True if Vnet to Vnet traffic is allowed.
    """
    disable_vpn_encryption: pulumi.Output[bool]
    """
    Vpn encryption to be disabled or not.
    """
    etag: pulumi.Output[str]
    """
    Gets a unique read-only string that changes whenever the resource is updated.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    office365_local_breakout_category: pulumi.Output[str]
    """
    The office local breakout category.
    """
    p2_s_vpn_server_configurations: pulumi.Output[list]
    """
    list of all P2SVpnServerConfigurations associated with the virtual wan.
      * `etag` (`str`) - A unique read-only string that changes whenever the resource is updated.
      * `id` (`str`) - Resource ID.
      * `name` (`str`) - The name of the P2SVpnServerConfiguration that is unique within a VirtualWan in a resource group. This name can be used to access the resource along with Parent VirtualWan resource name.
      * `p2_s_vpn_gateways` (`list`)
        * `id` (`str`) - Resource ID.

      * `p2_s_vpn_server_config_radius_client_root_certificates` (`list`) - Radius client root certificate of P2SVpnServerConfiguration.
        * `etag` (`str`) - A unique read-only string that changes whenever the resource is updated.
        * `id` (`str`) - Resource ID.
        * `name` (`str`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        * `provisioning_state` (`str`) - The provisioning state of the Radius client root certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        * `thumbprint` (`str`) - The Radius client root certificate thumbprint.

      * `p2_s_vpn_server_config_radius_server_root_certificates` (`list`) - Radius Server root certificate of P2SVpnServerConfiguration.
        * `etag` (`str`) - A unique read-only string that changes whenever the resource is updated.
        * `id` (`str`) - Resource ID.
        * `name` (`str`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        * `provisioning_state` (`str`) - The provisioning state of the P2SVpnServerConfiguration Radius Server root certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        * `public_cert_data` (`str`) - The certificate public data.

      * `p2_s_vpn_server_config_vpn_client_revoked_certificates` (`list`) - VPN client revoked certificate of P2SVpnServerConfiguration.
        * `etag` (`str`) - A unique read-only string that changes whenever the resource is updated.
        * `id` (`str`) - Resource ID.
        * `name` (`str`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        * `provisioning_state` (`str`) - The provisioning state of the VPN client revoked certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        * `thumbprint` (`str`) - The revoked VPN client certificate thumbprint.

      * `p2_s_vpn_server_config_vpn_client_root_certificates` (`list`) - VPN client root certificate of P2SVpnServerConfiguration.
        * `etag` (`str`) - A unique read-only string that changes whenever the resource is updated.
        * `id` (`str`) - Resource ID.
        * `name` (`str`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        * `provisioning_state` (`str`) - The provisioning state of the P2SVpnServerConfiguration VPN client root certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        * `public_cert_data` (`str`) - The certificate public data.

      * `provisioning_state` (`str`) - The provisioning state of the P2SVpnServerConfiguration resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
      * `radius_server_address` (`str`) - The radius server address property of the P2SVpnServerConfiguration resource for point to site client connection.
      * `radius_server_secret` (`str`) - The radius secret property of the P2SVpnServerConfiguration resource for point to site client connection.
      * `vpn_client_ipsec_policies` (`list`) - VpnClientIpsecPolicies for P2SVpnServerConfiguration.
        * `dh_group` (`str`) - The DH Groups used in IKE Phase 1 for initial SA.
        * `ike_encryption` (`str`) - The IKE encryption algorithm (IKE phase 2).
        * `ike_integrity` (`str`) - The IKE integrity algorithm (IKE phase 2).
        * `ipsec_encryption` (`str`) - The IPSec encryption algorithm (IKE phase 1).
        * `ipsec_integrity` (`str`) - The IPSec integrity algorithm (IKE phase 1).
        * `pfs_group` (`str`) - The Pfs Groups used in IKE Phase 2 for new child SA.
        * `sa_data_size_kilobytes` (`float`) - The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
        * `sa_life_time_seconds` (`float`) - The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.

      * `vpn_protocols` (`list`) - vpnProtocols for the P2SVpnServerConfiguration.
    """
    provisioning_state: pulumi.Output[str]
    """
    The provisioning state of the resource.
    """
    security_provider_name: pulumi.Output[str]
    """
    The Security Provider name.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    virtual_hubs: pulumi.Output[list]
    """
    List of VirtualHubs in the VirtualWAN.
      * `id` (`str`) - Resource ID.
    """
    vpn_sites: pulumi.Output[list]
    def __init__(__self__, resource_name, opts=None, allow_branch_to_branch_traffic=None, allow_vnet_to_vnet_traffic=None, disable_vpn_encryption=None, id=None, location=None, name=None, office365_local_breakout_category=None, p2_s_vpn_server_configurations=None, provisioning_state=None, resource_group_name=None, security_provider_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        VirtualWAN Resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_branch_to_branch_traffic: True if branch to branch traffic is allowed.
        :param pulumi.Input[bool] allow_vnet_to_vnet_traffic: True if Vnet to Vnet traffic is allowed.
        :param pulumi.Input[bool] disable_vpn_encryption: Vpn encryption to be disabled or not.
        :param pulumi.Input[str] id: Resource ID.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: The name of the VirtualWAN being created or updated.
        :param pulumi.Input[str] office365_local_breakout_category: The office local breakout category.
        :param pulumi.Input[list] p2_s_vpn_server_configurations: list of all P2SVpnServerConfigurations associated with the virtual wan.
        :param pulumi.Input[str] provisioning_state: The provisioning state of the resource.
        :param pulumi.Input[str] resource_group_name: The resource group name of the VirtualWan.
        :param pulumi.Input[str] security_provider_name: The Security Provider name.
        :param pulumi.Input[dict] tags: Resource tags.

        The **p2_s_vpn_server_configurations** object supports the following:

          * `etag` (`pulumi.Input[str]`) - A unique read-only string that changes whenever the resource is updated.
          * `id` (`pulumi.Input[str]`) - Resource ID.
          * `name` (`pulumi.Input[str]`) - The name of the P2SVpnServerConfiguration that is unique within a VirtualWan in a resource group. This name can be used to access the resource along with Parent VirtualWan resource name.
          * `p2_s_vpn_server_config_radius_client_root_certificates` (`pulumi.Input[list]`) - Radius client root certificate of P2SVpnServerConfiguration.
            * `etag` (`pulumi.Input[str]`) - A unique read-only string that changes whenever the resource is updated.
            * `id` (`pulumi.Input[str]`) - Resource ID.
            * `name` (`pulumi.Input[str]`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            * `thumbprint` (`pulumi.Input[str]`) - The Radius client root certificate thumbprint.

          * `p2_s_vpn_server_config_radius_server_root_certificates` (`pulumi.Input[list]`) - Radius Server root certificate of P2SVpnServerConfiguration.
            * `etag` (`pulumi.Input[str]`) - A unique read-only string that changes whenever the resource is updated.
            * `id` (`pulumi.Input[str]`) - Resource ID.
            * `name` (`pulumi.Input[str]`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            * `public_cert_data` (`pulumi.Input[str]`) - The certificate public data.

          * `p2_s_vpn_server_config_vpn_client_revoked_certificates` (`pulumi.Input[list]`) - VPN client revoked certificate of P2SVpnServerConfiguration.
            * `etag` (`pulumi.Input[str]`) - A unique read-only string that changes whenever the resource is updated.
            * `id` (`pulumi.Input[str]`) - Resource ID.
            * `name` (`pulumi.Input[str]`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            * `thumbprint` (`pulumi.Input[str]`) - The revoked VPN client certificate thumbprint.

          * `p2_s_vpn_server_config_vpn_client_root_certificates` (`pulumi.Input[list]`) - VPN client root certificate of P2SVpnServerConfiguration.
            * `etag` (`pulumi.Input[str]`) - A unique read-only string that changes whenever the resource is updated.
            * `id` (`pulumi.Input[str]`) - Resource ID.
            * `name` (`pulumi.Input[str]`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            * `public_cert_data` (`pulumi.Input[str]`) - The certificate public data.

          * `radius_server_address` (`pulumi.Input[str]`) - The radius server address property of the P2SVpnServerConfiguration resource for point to site client connection.
          * `radius_server_secret` (`pulumi.Input[str]`) - The radius secret property of the P2SVpnServerConfiguration resource for point to site client connection.
          * `vpn_client_ipsec_policies` (`pulumi.Input[list]`) - VpnClientIpsecPolicies for P2SVpnServerConfiguration.
            * `dh_group` (`pulumi.Input[str]`) - The DH Groups used in IKE Phase 1 for initial SA.
            * `ike_encryption` (`pulumi.Input[str]`) - The IKE encryption algorithm (IKE phase 2).
            * `ike_integrity` (`pulumi.Input[str]`) - The IKE integrity algorithm (IKE phase 2).
            * `ipsec_encryption` (`pulumi.Input[str]`) - The IPSec encryption algorithm (IKE phase 1).
            * `ipsec_integrity` (`pulumi.Input[str]`) - The IPSec integrity algorithm (IKE phase 1).
            * `pfs_group` (`pulumi.Input[str]`) - The Pfs Groups used in IKE Phase 2 for new child SA.
            * `sa_data_size_kilobytes` (`pulumi.Input[float]`) - The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
            * `sa_life_time_seconds` (`pulumi.Input[float]`) - The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.

          * `vpn_protocols` (`pulumi.Input[list]`) - vpnProtocols for the P2SVpnServerConfiguration.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow_branch_to_branch_traffic'] = allow_branch_to_branch_traffic
            __props__['allow_vnet_to_vnet_traffic'] = allow_vnet_to_vnet_traffic
            __props__['disable_vpn_encryption'] = disable_vpn_encryption
            __props__['id'] = id
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['office365_local_breakout_category'] = office365_local_breakout_category
            __props__['p2_s_vpn_server_configurations'] = p2_s_vpn_server_configurations
            __props__['provisioning_state'] = provisioning_state
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['security_provider_name'] = security_provider_name
            __props__['tags'] = tags
            __props__['etag'] = None
            __props__['type'] = None
            __props__['virtual_hubs'] = None
            __props__['vpn_sites'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:network/v20180401:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20180601:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20180701:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20180801:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20181101:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20181201:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20190201:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20190401:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20190601:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20190701:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20190801:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20190901:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20191101:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20191201:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20200301:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20200401:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20200501:VirtualWan"), pulumi.Alias(type_="azurerm:network/v20200601:VirtualWan")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(VirtualWan, __self__).__init__(
            'azurerm:network/v20181001:VirtualWan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing VirtualWan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return VirtualWan(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
