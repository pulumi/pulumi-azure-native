# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVpnSiteResult:
    """
    VpnSite Resource.
    """
    def __init__(__self__, address_space=None, bgp_properties=None, device_properties=None, etag=None, ip_address=None, is_security_site=None, location=None, name=None, provisioning_state=None, site_key=None, tags=None, type=None, virtual_wan=None):
        if address_space and not isinstance(address_space, dict):
            raise TypeError("Expected argument 'address_space' to be a dict")
        __self__.address_space = address_space
        """
        The AddressSpace that contains an array of IP address ranges.
        """
        if bgp_properties and not isinstance(bgp_properties, dict):
            raise TypeError("Expected argument 'bgp_properties' to be a dict")
        __self__.bgp_properties = bgp_properties
        """
        The set of bgp properties.
        """
        if device_properties and not isinstance(device_properties, dict):
            raise TypeError("Expected argument 'device_properties' to be a dict")
        __self__.device_properties = device_properties
        """
        The device properties
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Gets a unique read-only string that changes whenever the resource is updated.
        """
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        __self__.ip_address = ip_address
        """
        The ip-address for the vpn-site.
        """
        if is_security_site and not isinstance(is_security_site, bool):
            raise TypeError("Expected argument 'is_security_site' to be a bool")
        __self__.is_security_site = is_security_site
        """
        IsSecuritySite flag
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the resource.
        """
        if site_key and not isinstance(site_key, str):
            raise TypeError("Expected argument 'site_key' to be a str")
        __self__.site_key = site_key
        """
        The key for vpn-site that can be used for connections.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if virtual_wan and not isinstance(virtual_wan, dict):
            raise TypeError("Expected argument 'virtual_wan' to be a dict")
        __self__.virtual_wan = virtual_wan
        """
        The VirtualWAN to which the vpnSite belongs
        """


class AwaitableGetVpnSiteResult(GetVpnSiteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpnSiteResult(
            address_space=self.address_space,
            bgp_properties=self.bgp_properties,
            device_properties=self.device_properties,
            etag=self.etag,
            ip_address=self.ip_address,
            is_security_site=self.is_security_site,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            site_key=self.site_key,
            tags=self.tags,
            type=self.type,
            virtual_wan=self.virtual_wan)


def get_vpn_site(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the VpnSite being retrieved.
    :param str resource_group_name: The resource group name of the VpnSite.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20181001:getVpnSite', __args__, opts=opts).value

    return AwaitableGetVpnSiteResult(
        address_space=__ret__.get('addressSpace'),
        bgp_properties=__ret__.get('bgpProperties'),
        device_properties=__ret__.get('deviceProperties'),
        etag=__ret__.get('etag'),
        ip_address=__ret__.get('ipAddress'),
        is_security_site=__ret__.get('isSecuritySite'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        site_key=__ret__.get('siteKey'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        virtual_wan=__ret__.get('virtualWan'))
