# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ConnectionMonitor(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    A unique read-only string that changes whenever the resource is updated.
    """
    location: pulumi.Output[str]
    """
    Connection monitor location.
    """
    name: pulumi.Output[str]
    """
    Name of the connection monitor.
    """
    properties: pulumi.Output[dict]
    """
    Properties of the connection monitor result.
      * `auto_start` (`bool`) - Determines if the connection monitor will start automatically once created.
      * `destination` (`dict`) - Describes the destination of connection monitor.
        * `address` (`str`) - Address of the connection monitor destination (IP or domain name).
        * `port` (`float`) - The destination port used by connection monitor.
        * `resource_id` (`str`) - The ID of the resource used as the destination by connection monitor.

      * `monitoring_interval_in_seconds` (`float`) - Monitoring interval in seconds.
      * `monitoring_status` (`str`) - The monitoring status of the connection monitor.
      * `provisioning_state` (`str`) - The provisioning state of the connection monitor.
      * `source` (`dict`) - Describes the source of connection monitor.
        * `port` (`float`) - The source port used by connection monitor.
        * `resource_id` (`str`) - The ID of the resource used as the source by connection monitor.

      * `start_time` (`str`) - The date and time when the connection monitor was started.
    """
    tags: pulumi.Output[dict]
    """
    Connection monitor tags.
    """
    type: pulumi.Output[str]
    """
    Connection monitor type.
    """
    def __init__(__self__, resource_name, opts=None, location=None, name=None, network_watcher_name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Information about the connection monitor.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: Connection monitor location.
        :param pulumi.Input[str] name: The name of the connection monitor.
        :param pulumi.Input[str] network_watcher_name: The name of the Network Watcher resource.
        :param pulumi.Input[dict] properties: Properties of the connection monitor.
        :param pulumi.Input[str] resource_group_name: The name of the resource group containing Network Watcher.
        :param pulumi.Input[dict] tags: Connection monitor tags.

        The **properties** object supports the following:

          * `auto_start` (`pulumi.Input[bool]`) - Determines if the connection monitor will start automatically once created.
          * `destination` (`pulumi.Input[dict]`) - Describes the destination of connection monitor.
            * `address` (`pulumi.Input[str]`) - Address of the connection monitor destination (IP or domain name).
            * `port` (`pulumi.Input[float]`) - The destination port used by connection monitor.
            * `resource_id` (`pulumi.Input[str]`) - The ID of the resource used as the destination by connection monitor.

          * `monitoring_interval_in_seconds` (`pulumi.Input[float]`) - Monitoring interval in seconds.
          * `source` (`pulumi.Input[dict]`) - Describes the source of connection monitor.
            * `port` (`pulumi.Input[float]`) - The source port used by connection monitor.
            * `resource_id` (`pulumi.Input[str]`) - The ID of the resource used as the source by connection monitor.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if network_watcher_name is None:
                raise TypeError("Missing required property 'network_watcher_name'")
            __props__['network_watcher_name'] = network_watcher_name
            if properties is None:
                raise TypeError("Missing required property 'properties'")
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['etag'] = None
            __props__['type'] = None
        super(ConnectionMonitor, __self__).__init__(
            'azurerm:network/v20190201:ConnectionMonitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ConnectionMonitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ConnectionMonitor(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
