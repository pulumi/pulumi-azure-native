# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVirtualHubResult:
    """
    VirtualHub Resource.
    """
    def __init__(__self__, address_prefix=None, etag=None, express_route_gateway=None, location=None, name=None, p2_s_vpn_gateway=None, provisioning_state=None, route_table=None, tags=None, type=None, virtual_network_connections=None, virtual_wan=None, vpn_gateway=None):
        if address_prefix and not isinstance(address_prefix, str):
            raise TypeError("Expected argument 'address_prefix' to be a str")
        __self__.address_prefix = address_prefix
        """
        Address-prefix for this VirtualHub.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Gets a unique read-only string that changes whenever the resource is updated.
        """
        if express_route_gateway and not isinstance(express_route_gateway, dict):
            raise TypeError("Expected argument 'express_route_gateway' to be a dict")
        __self__.express_route_gateway = express_route_gateway
        """
        The expressRouteGateway associated with this VirtualHub
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if p2_s_vpn_gateway and not isinstance(p2_s_vpn_gateway, dict):
            raise TypeError("Expected argument 'p2_s_vpn_gateway' to be a dict")
        __self__.p2_s_vpn_gateway = p2_s_vpn_gateway
        """
        The P2SVpnGateway associated with this VirtualHub
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the resource.
        """
        if route_table and not isinstance(route_table, dict):
            raise TypeError("Expected argument 'route_table' to be a dict")
        __self__.route_table = route_table
        """
        The routeTable associated with this virtual hub.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if virtual_network_connections and not isinstance(virtual_network_connections, list):
            raise TypeError("Expected argument 'virtual_network_connections' to be a list")
        __self__.virtual_network_connections = virtual_network_connections
        """
        list of all vnet connections with this VirtualHub.
        """
        if virtual_wan and not isinstance(virtual_wan, dict):
            raise TypeError("Expected argument 'virtual_wan' to be a dict")
        __self__.virtual_wan = virtual_wan
        """
        The VirtualWAN to which the VirtualHub belongs
        """
        if vpn_gateway and not isinstance(vpn_gateway, dict):
            raise TypeError("Expected argument 'vpn_gateway' to be a dict")
        __self__.vpn_gateway = vpn_gateway
        """
        The VpnGateway associated with this VirtualHub
        """


class AwaitableGetVirtualHubResult(GetVirtualHubResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualHubResult(
            address_prefix=self.address_prefix,
            etag=self.etag,
            express_route_gateway=self.express_route_gateway,
            location=self.location,
            name=self.name,
            p2_s_vpn_gateway=self.p2_s_vpn_gateway,
            provisioning_state=self.provisioning_state,
            route_table=self.route_table,
            tags=self.tags,
            type=self.type,
            virtual_network_connections=self.virtual_network_connections,
            virtual_wan=self.virtual_wan,
            vpn_gateway=self.vpn_gateway)


def get_virtual_hub(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the VirtualHub.
    :param str resource_group_name: The resource group name of the VirtualHub.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20180801:getVirtualHub', __args__, opts=opts).value

    return AwaitableGetVirtualHubResult(
        address_prefix=__ret__.get('addressPrefix'),
        etag=__ret__.get('etag'),
        express_route_gateway=__ret__.get('expressRouteGateway'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        p2_s_vpn_gateway=__ret__.get('p2SVpnGateway'),
        provisioning_state=__ret__.get('provisioningState'),
        route_table=__ret__.get('routeTable'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        virtual_network_connections=__ret__.get('virtualNetworkConnections'),
        virtual_wan=__ret__.get('virtualWan'),
        vpn_gateway=__ret__.get('vpnGateway'))
