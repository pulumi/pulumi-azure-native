# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetP2sVpnServerConfigurationResult:
    """
    P2SVpnServerConfiguration Resource.
    """
    def __init__(__self__, etag=None, name=None, p2_s_vpn_gateways=None, p2_s_vpn_server_config_radius_client_root_certificates=None, p2_s_vpn_server_config_radius_server_root_certificates=None, p2_s_vpn_server_config_vpn_client_revoked_certificates=None, p2_s_vpn_server_config_vpn_client_root_certificates=None, provisioning_state=None, radius_server_address=None, radius_server_secret=None, vpn_client_ipsec_policies=None, vpn_protocols=None):
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the P2SVpnServerConfiguration that is unique within a VirtualWan in a resource group. This name can be used to access the resource along with Paren VirtualWan resource name.
        """
        if p2_s_vpn_gateways and not isinstance(p2_s_vpn_gateways, list):
            raise TypeError("Expected argument 'p2_s_vpn_gateways' to be a list")
        __self__.p2_s_vpn_gateways = p2_s_vpn_gateways
        if p2_s_vpn_server_config_radius_client_root_certificates and not isinstance(p2_s_vpn_server_config_radius_client_root_certificates, list):
            raise TypeError("Expected argument 'p2_s_vpn_server_config_radius_client_root_certificates' to be a list")
        __self__.p2_s_vpn_server_config_radius_client_root_certificates = p2_s_vpn_server_config_radius_client_root_certificates
        """
        Radius client root certificate of P2SVpnServerConfiguration.
        """
        if p2_s_vpn_server_config_radius_server_root_certificates and not isinstance(p2_s_vpn_server_config_radius_server_root_certificates, list):
            raise TypeError("Expected argument 'p2_s_vpn_server_config_radius_server_root_certificates' to be a list")
        __self__.p2_s_vpn_server_config_radius_server_root_certificates = p2_s_vpn_server_config_radius_server_root_certificates
        """
        Radius Server root certificate of P2SVpnServerConfiguration.
        """
        if p2_s_vpn_server_config_vpn_client_revoked_certificates and not isinstance(p2_s_vpn_server_config_vpn_client_revoked_certificates, list):
            raise TypeError("Expected argument 'p2_s_vpn_server_config_vpn_client_revoked_certificates' to be a list")
        __self__.p2_s_vpn_server_config_vpn_client_revoked_certificates = p2_s_vpn_server_config_vpn_client_revoked_certificates
        """
        VPN client revoked certificate of P2SVpnServerConfiguration.
        """
        if p2_s_vpn_server_config_vpn_client_root_certificates and not isinstance(p2_s_vpn_server_config_vpn_client_root_certificates, list):
            raise TypeError("Expected argument 'p2_s_vpn_server_config_vpn_client_root_certificates' to be a list")
        __self__.p2_s_vpn_server_config_vpn_client_root_certificates = p2_s_vpn_server_config_vpn_client_root_certificates
        """
        VPN client root certificate of P2SVpnServerConfiguration.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the P2SVpnServerConfiguration resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        """
        if radius_server_address and not isinstance(radius_server_address, str):
            raise TypeError("Expected argument 'radius_server_address' to be a str")
        __self__.radius_server_address = radius_server_address
        """
        The radius server address property of the P2SVpnServerConfiguration resource for point to site client connection.
        """
        if radius_server_secret and not isinstance(radius_server_secret, str):
            raise TypeError("Expected argument 'radius_server_secret' to be a str")
        __self__.radius_server_secret = radius_server_secret
        """
        The radius secret property of the P2SVpnServerConfiguration resource for point to site client connection.
        """
        if vpn_client_ipsec_policies and not isinstance(vpn_client_ipsec_policies, list):
            raise TypeError("Expected argument 'vpn_client_ipsec_policies' to be a list")
        __self__.vpn_client_ipsec_policies = vpn_client_ipsec_policies
        """
        VpnClientIpsecPolicies for P2SVpnServerConfiguration.
        """
        if vpn_protocols and not isinstance(vpn_protocols, list):
            raise TypeError("Expected argument 'vpn_protocols' to be a list")
        __self__.vpn_protocols = vpn_protocols
        """
        VPN protocols for the P2SVpnServerConfiguration.
        """


class AwaitableGetP2sVpnServerConfigurationResult(GetP2sVpnServerConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetP2sVpnServerConfigurationResult(
            etag=self.etag,
            name=self.name,
            p2_s_vpn_gateways=self.p2_s_vpn_gateways,
            p2_s_vpn_server_config_radius_client_root_certificates=self.p2_s_vpn_server_config_radius_client_root_certificates,
            p2_s_vpn_server_config_radius_server_root_certificates=self.p2_s_vpn_server_config_radius_server_root_certificates,
            p2_s_vpn_server_config_vpn_client_revoked_certificates=self.p2_s_vpn_server_config_vpn_client_revoked_certificates,
            p2_s_vpn_server_config_vpn_client_root_certificates=self.p2_s_vpn_server_config_vpn_client_root_certificates,
            provisioning_state=self.provisioning_state,
            radius_server_address=self.radius_server_address,
            radius_server_secret=self.radius_server_secret,
            vpn_client_ipsec_policies=self.vpn_client_ipsec_policies,
            vpn_protocols=self.vpn_protocols)


def get_p2s_vpn_server_configuration(name=None, resource_group_name=None, virtual_wan_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the P2SVpnServerConfiguration.
    :param str resource_group_name: The resource group name of the P2SVpnServerConfiguration.
    :param str virtual_wan_name: The name of the VirtualWan.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['virtualWanName'] = virtual_wan_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20181201:getP2sVpnServerConfiguration', __args__, opts=opts).value

    return AwaitableGetP2sVpnServerConfigurationResult(
        etag=__ret__.get('etag'),
        name=__ret__.get('name'),
        p2_s_vpn_gateways=__ret__.get('p2SVpnGateways'),
        p2_s_vpn_server_config_radius_client_root_certificates=__ret__.get('p2SVpnServerConfigRadiusClientRootCertificates'),
        p2_s_vpn_server_config_radius_server_root_certificates=__ret__.get('p2SVpnServerConfigRadiusServerRootCertificates'),
        p2_s_vpn_server_config_vpn_client_revoked_certificates=__ret__.get('p2SVpnServerConfigVpnClientRevokedCertificates'),
        p2_s_vpn_server_config_vpn_client_root_certificates=__ret__.get('p2SVpnServerConfigVpnClientRootCertificates'),
        provisioning_state=__ret__.get('provisioningState'),
        radius_server_address=__ret__.get('radiusServerAddress'),
        radius_server_secret=__ret__.get('radiusServerSecret'),
        vpn_client_ipsec_policies=__ret__.get('vpnClientIpsecPolicies'),
        vpn_protocols=__ret__.get('vpnProtocols'))
