# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class NetworkVirtualApplianceVirtualApplianceSite(pulumi.CustomResource):
    etag: pulumi.Output[str]
    """
    A unique read-only string that changes whenever the resource is updated.
    """
    name: pulumi.Output[str]
    """
    Name of the virtual appliance site.
    """
    properties: pulumi.Output[dict]
    """
    The properties of the Virtual Appliance Sites.
      * `address_prefix` (`str`) - Address Prefix.
      * `o365_policy` (`dict`) - Office 365 Policy.
        * `break_out_categories` (`dict`) - Office 365 breakout categories.
          * `allow` (`bool`) - Flag to control breakout of o365 allow category.
          * `default` (`bool`) - Flag to control breakout of o365 default category.
          * `optimize` (`bool`) - Flag to control breakout of o365 optimize category.

      * `provisioning_state` (`str`) - The provisioning state of the resource.
    """
    type: pulumi.Output[str]
    """
    Site type.
    """
    def __init__(__self__, resource_name, opts=None, id=None, name=None, network_virtual_appliance_name=None, properties=None, resource_group_name=None, site_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Virtual Appliance Site resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] id: Resource ID.
        :param pulumi.Input[str] name: Name of the virtual appliance site.
        :param pulumi.Input[str] network_virtual_appliance_name: The name of the Network Virtual Appliance.
        :param pulumi.Input[dict] properties: The properties of the Virtual Appliance Sites.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[str] site_name: The name of the site.

        The **properties** object supports the following:

          * `address_prefix` (`pulumi.Input[str]`) - Address Prefix.
          * `o365_policy` (`pulumi.Input[dict]`) - Office 365 Policy.
            * `break_out_categories` (`pulumi.Input[dict]`) - Office 365 breakout categories.
              * `allow` (`pulumi.Input[bool]`) - Flag to control breakout of o365 allow category.
              * `default` (`pulumi.Input[bool]`) - Flag to control breakout of o365 default category.
              * `optimize` (`pulumi.Input[bool]`) - Flag to control breakout of o365 optimize category.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['id'] = id
            __props__['name'] = name
            if network_virtual_appliance_name is None:
                raise TypeError("Missing required property 'network_virtual_appliance_name'")
            __props__['network_virtual_appliance_name'] = network_virtual_appliance_name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if site_name is None:
                raise TypeError("Missing required property 'site_name'")
            __props__['site_name'] = site_name
            __props__['etag'] = None
            __props__['type'] = None
        super(NetworkVirtualApplianceVirtualApplianceSite, __self__).__init__(
            'azurerm:network:NetworkVirtualApplianceVirtualApplianceSite',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, etag=None, name=None, properties=None, type=None):
        """
        Get an existing NetworkVirtualApplianceVirtualApplianceSite resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] etag: A unique read-only string that changes whenever the resource is updated.
        :param pulumi.Input[str] name: Name of the virtual appliance site.
        :param pulumi.Input[dict] properties: The properties of the Virtual Appliance Sites.
        :param pulumi.Input[str] type: Site type.

        The **properties** object supports the following:

          * `address_prefix` (`pulumi.Input[str]`) - Address Prefix.
          * `o365_policy` (`pulumi.Input[dict]`) - Office 365 Policy.
            * `break_out_categories` (`pulumi.Input[dict]`) - Office 365 breakout categories.
              * `allow` (`pulumi.Input[bool]`) - Flag to control breakout of o365 allow category.
              * `default` (`pulumi.Input[bool]`) - Flag to control breakout of o365 default category.
              * `optimize` (`pulumi.Input[bool]`) - Flag to control breakout of o365 optimize category.

          * `provisioning_state` (`pulumi.Input[str]`) - The provisioning state of the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["etag"] = etag
        __props__["name"] = name
        __props__["properties"] = properties
        __props__["type"] = type
        return NetworkVirtualApplianceVirtualApplianceSite(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
