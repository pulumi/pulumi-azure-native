# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Profile(pulumi.CustomResource):
    location: pulumi.Output[str]
    """
    Resource location
    """
    name: pulumi.Output[str]
    """
    Resource name
    """
    properties: pulumi.Output[dict]
    """
    Class representing the Traffic Manager profile properties.
      * `dns_config` (`dict`) - Gets or sets the DNS settings of the Traffic Manager profile.
        * `fqdn` (`str`) - Gets or sets the fully-qualified domain name (FQDN) of the Traffic Manager profile.  This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
        * `relative_name` (`str`) - Gets or sets the relative DNS name provided by this Traffic Manager profile.  This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
        * `ttl` (`float`) - Gets or sets the DNS Time-To-Live (TTL), in seconds.  This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.

      * `endpoints` (`list`) - Gets or sets the list of endpoints in the Traffic Manager profile.
        * `id` (`str`) - Gets or sets the ID of the Traffic Manager endpoint.
        * `name` (`str`) - Gets or sets the name of the Traffic Manager endpoint.
        * `properties` (`dict`) - Class representing a Traffic Manager endpoint properties.
          * `endpoint_location` (`str`) - Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
          * `endpoint_monitor_status` (`str`) - Gets or sets the monitoring status of the endpoint.
          * `endpoint_status` (`str`) - Gets or sets the status of the endpoint..  If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.  Possible values are 'Enabled' and 'Disabled'.
          * `min_child_endpoints` (`float`) - Gets or sets the minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
          * `priority` (`float`) - Gets or sets the priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
          * `target` (`str`) - Gets or sets the fully-qualified DNS name of the endpoint.  Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
          * `target_resource_id` (`str`) - Gets or sets the Azure Resource URI of the of the endpoint.  Not applicable to endpoints of type 'ExternalEndpoints'.
          * `weight` (`float`) - Gets or sets the weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.

        * `type` (`str`) - Gets or sets the endpoint type of the Traffic Manager endpoint.

      * `monitor_config` (`dict`) - Gets or sets the endpoint monitoring settings of the Traffic Manager profile.
        * `path` (`str`) - Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.
        * `port` (`float`) - Gets or sets the TCP port used to probe for endpoint health.
        * `profile_monitor_status` (`str`) - Gets or sets the profile-level monitoring status of the Traffic Manager profile.
        * `protocol` (`str`) - Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.

      * `profile_status` (`str`) - Gets or sets the status of the Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.
      * `traffic_routing_method` (`str`) - Gets or sets the traffic routing method of the Traffic Manager profile.  Possible values are 'Performance', 'Weighted', or 'Priority'.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags
    """
    type: pulumi.Output[str]
    """
    Resource type
    """
    def __init__(__self__, resource_name, opts=None, location=None, name=None, properties=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Class representing a Traffic Manager profile.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: Resource location
        :param pulumi.Input[str] name: The name of the Traffic Manager profile.
        :param pulumi.Input[dict] properties: Class representing the Traffic Manager profile properties.
        :param pulumi.Input[str] resource_group_name: The name of the resource group containing the Traffic Manager profile.
        :param pulumi.Input[dict] tags: Resource tags

        The **properties** object supports the following:

          * `dns_config` (`pulumi.Input[dict]`) - Gets or sets the DNS settings of the Traffic Manager profile.
            * `fqdn` (`pulumi.Input[str]`) - Gets or sets the fully-qualified domain name (FQDN) of the Traffic Manager profile.  This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
            * `relative_name` (`pulumi.Input[str]`) - Gets or sets the relative DNS name provided by this Traffic Manager profile.  This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
            * `ttl` (`pulumi.Input[float]`) - Gets or sets the DNS Time-To-Live (TTL), in seconds.  This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.

          * `endpoints` (`pulumi.Input[list]`) - Gets or sets the list of endpoints in the Traffic Manager profile.
            * `name` (`pulumi.Input[str]`) - Gets or sets the name of the Traffic Manager endpoint.
            * `properties` (`pulumi.Input[dict]`) - Class representing a Traffic Manager endpoint properties.
              * `endpoint_location` (`pulumi.Input[str]`) - Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
              * `endpoint_monitor_status` (`pulumi.Input[str]`) - Gets or sets the monitoring status of the endpoint.
              * `endpoint_status` (`pulumi.Input[str]`) - Gets or sets the status of the endpoint..  If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.  Possible values are 'Enabled' and 'Disabled'.
              * `min_child_endpoints` (`pulumi.Input[float]`) - Gets or sets the minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
              * `priority` (`pulumi.Input[float]`) - Gets or sets the priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
              * `target` (`pulumi.Input[str]`) - Gets or sets the fully-qualified DNS name of the endpoint.  Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
              * `target_resource_id` (`pulumi.Input[str]`) - Gets or sets the Azure Resource URI of the of the endpoint.  Not applicable to endpoints of type 'ExternalEndpoints'.
              * `weight` (`pulumi.Input[float]`) - Gets or sets the weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.

            * `type` (`pulumi.Input[str]`) - Gets or sets the endpoint type of the Traffic Manager endpoint.

          * `monitor_config` (`pulumi.Input[dict]`) - Gets or sets the endpoint monitoring settings of the Traffic Manager profile.
            * `path` (`pulumi.Input[str]`) - Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.
            * `port` (`pulumi.Input[float]`) - Gets or sets the TCP port used to probe for endpoint health.
            * `profile_monitor_status` (`pulumi.Input[str]`) - Gets or sets the profile-level monitoring status of the Traffic Manager profile.
            * `protocol` (`pulumi.Input[str]`) - Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.

          * `profile_status` (`pulumi.Input[str]`) - Gets or sets the status of the Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.
          * `traffic_routing_method` (`pulumi.Input[str]`) - Gets or sets the traffic routing method of the Traffic Manager profile.  Possible values are 'Performance', 'Weighted', or 'Priority'.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = None
        super(Profile, __self__).__init__(
            'azurerm:network/v20151101:Profile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Profile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Profile(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
