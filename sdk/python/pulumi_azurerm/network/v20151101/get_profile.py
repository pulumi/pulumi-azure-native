# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetProfileResult:
    """
    Class representing a Traffic Manager profile.
    """
    def __init__(__self__, dns_config=None, endpoints=None, location=None, monitor_config=None, name=None, profile_status=None, tags=None, traffic_routing_method=None, type=None):
        if dns_config and not isinstance(dns_config, dict):
            raise TypeError("Expected argument 'dns_config' to be a dict")
        __self__.dns_config = dns_config
        """
        Gets or sets the DNS settings of the Traffic Manager profile.
        """
        if endpoints and not isinstance(endpoints, list):
            raise TypeError("Expected argument 'endpoints' to be a list")
        __self__.endpoints = endpoints
        """
        Gets or sets the list of endpoints in the Traffic Manager profile.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location
        """
        if monitor_config and not isinstance(monitor_config, dict):
            raise TypeError("Expected argument 'monitor_config' to be a dict")
        __self__.monitor_config = monitor_config
        """
        Gets or sets the endpoint monitoring settings of the Traffic Manager profile.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name
        """
        if profile_status and not isinstance(profile_status, str):
            raise TypeError("Expected argument 'profile_status' to be a str")
        __self__.profile_status = profile_status
        """
        Gets or sets the status of the Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags
        """
        if traffic_routing_method and not isinstance(traffic_routing_method, str):
            raise TypeError("Expected argument 'traffic_routing_method' to be a str")
        __self__.traffic_routing_method = traffic_routing_method
        """
        Gets or sets the traffic routing method of the Traffic Manager profile.  Possible values are 'Performance', 'Weighted', or 'Priority'.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type
        """


class AwaitableGetProfileResult(GetProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProfileResult(
            dns_config=self.dns_config,
            endpoints=self.endpoints,
            location=self.location,
            monitor_config=self.monitor_config,
            name=self.name,
            profile_status=self.profile_status,
            tags=self.tags,
            traffic_routing_method=self.traffic_routing_method,
            type=self.type)


def get_profile(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the Traffic Manager profile.
    :param str resource_group_name: The name of the resource group containing the Traffic Manager profile.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20151101:getProfile', __args__, opts=opts).value

    return AwaitableGetProfileResult(
        dns_config=__ret__.get('dnsConfig'),
        endpoints=__ret__.get('endpoints'),
        location=__ret__.get('location'),
        monitor_config=__ret__.get('monitorConfig'),
        name=__ret__.get('name'),
        profile_status=__ret__.get('profileStatus'),
        tags=__ret__.get('tags'),
        traffic_routing_method=__ret__.get('trafficRoutingMethod'),
        type=__ret__.get('type'))
