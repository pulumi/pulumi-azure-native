# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ExpressRouteCircuit(pulumi.CustomResource):
    allow_classic_operations: pulumi.Output[bool]
    """
    Allow classic operations.
    """
    authorizations: pulumi.Output[list]
    """
    The list of authorizations.
      * `authorization_key` (`str`) - The authorization key.
      * `authorization_use_status` (`str`) - The authorization use status.
      * `etag` (`str`) - A unique read-only string that changes whenever the resource is updated.
      * `id` (`str`) - Resource ID.
      * `name` (`str`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
      * `provisioning_state` (`str`) - The provisioning state of the authorization resource.
      * `type` (`str`) - Type of the resource.
    """
    bandwidth_in_gbps: pulumi.Output[float]
    """
    The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
    """
    circuit_provisioning_state: pulumi.Output[str]
    """
    The CircuitProvisioningState state of the resource.
    """
    etag: pulumi.Output[str]
    """
    A unique read-only string that changes whenever the resource is updated.
    """
    express_route_port: pulumi.Output[dict]
    """
    The reference to the ExpressRoutePort resource when the circuit is provisioned on an ExpressRoutePort resource.
      * `id` (`str`) - Resource ID.
    """
    gateway_manager_etag: pulumi.Output[str]
    """
    The GatewayManager Etag.
    """
    global_reach_enabled: pulumi.Output[bool]
    """
    Flag denoting Global reach status.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    peerings: pulumi.Output[list]
    """
    The list of peerings.
      * `azure_asn` (`float`) - The Azure ASN.
      * `connections` (`list`) - The list of circuit connections associated with Azure Private Peering for this circuit.
        * `address_prefix` (`str`) - /29 IP address space to carve out Customer addresses for tunnels.
        * `authorization_key` (`str`) - The authorization key.
        * `circuit_connection_status` (`str`) - Express Route Circuit connection state.
        * `etag` (`str`) - A unique read-only string that changes whenever the resource is updated.
        * `express_route_circuit_peering` (`dict`) - Reference to Express Route Circuit Private Peering Resource of the circuit initiating connection.
          * `id` (`str`) - Resource ID.

        * `id` (`str`) - Resource ID.
        * `name` (`str`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        * `peer_express_route_circuit_peering` (`dict`) - Reference to Express Route Circuit Private Peering Resource of the peered circuit.
        * `provisioning_state` (`str`) - The provisioning state of the express route circuit connection resource.
        * `type` (`str`) - Type of the resource.

      * `etag` (`str`) - A unique read-only string that changes whenever the resource is updated.
      * `express_route_connection` (`dict`) - The ExpressRoute connection.
        * `id` (`str`) - The ID of the ExpressRouteConnection.

      * `gateway_manager_etag` (`str`) - The GatewayManager Etag.
      * `id` (`str`) - Resource ID.
      * `ipv6_peering_config` (`dict`) - The IPv6 peering configuration.
        * `microsoft_peering_config` (`dict`) - The Microsoft peering configuration.
          * `advertised_communities` (`list`) - The communities of bgp peering. Specified for microsoft peering.
          * `advertised_public_prefixes` (`list`) - The reference to AdvertisedPublicPrefixes.
          * `advertised_public_prefixes_state` (`str`) - The advertised public prefix state of the Peering resource.
          * `customer_asn` (`float`) - The CustomerASN of the peering.
          * `legacy_mode` (`float`) - The legacy mode of the peering.
          * `routing_registry_name` (`str`) - The RoutingRegistryName of the configuration.

        * `primary_peer_address_prefix` (`str`) - The primary address prefix.
        * `route_filter` (`dict`) - The reference to the RouteFilter resource.
        * `secondary_peer_address_prefix` (`str`) - The secondary address prefix.
        * `state` (`str`) - The state of peering.

      * `last_modified_by` (`str`) - Who was the last to modify the peering.
      * `microsoft_peering_config` (`dict`) - The Microsoft peering configuration.
      * `name` (`str`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
      * `peer_asn` (`float`) - The peer ASN.
      * `peered_connections` (`list`) - The list of peered circuit connections associated with Azure Private Peering for this circuit.
        * `address_prefix` (`str`) - /29 IP address space to carve out Customer addresses for tunnels.
        * `auth_resource_guid` (`str`) - The resource guid of the authorization used for the express route circuit connection.
        * `circuit_connection_status` (`str`) - Express Route Circuit connection state.
        * `connection_name` (`str`) - The name of the express route circuit connection resource.
        * `etag` (`str`) - A unique read-only string that changes whenever the resource is updated.
        * `express_route_circuit_peering` (`dict`) - Reference to Express Route Circuit Private Peering Resource of the circuit.
        * `id` (`str`) - Resource ID.
        * `name` (`str`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        * `peer_express_route_circuit_peering` (`dict`) - Reference to Express Route Circuit Private Peering Resource of the peered circuit.
        * `provisioning_state` (`str`) - The provisioning state of the peer express route circuit connection resource.
        * `type` (`str`) - Type of the resource.

      * `peering_type` (`str`) - The peering type.
      * `primary_azure_port` (`str`) - The primary port.
      * `primary_peer_address_prefix` (`str`) - The primary address prefix.
      * `provisioning_state` (`str`) - The provisioning state of the express route circuit peering resource.
      * `route_filter` (`dict`) - The reference to the RouteFilter resource.
      * `secondary_azure_port` (`str`) - The secondary port.
      * `secondary_peer_address_prefix` (`str`) - The secondary address prefix.
      * `shared_key` (`str`) - The shared key.
      * `state` (`str`) - The peering state.
      * `stats` (`dict`) - The peering stats of express route circuit.
        * `primarybytes_in` (`float`) - The Primary BytesIn of the peering.
        * `primarybytes_out` (`float`) - The primary BytesOut of the peering.
        * `secondarybytes_in` (`float`) - The secondary BytesIn of the peering.
        * `secondarybytes_out` (`float`) - The secondary BytesOut of the peering.

      * `type` (`str`) - Type of the resource.
      * `vlan_id` (`float`) - The VLAN ID.
    """
    provisioning_state: pulumi.Output[str]
    """
    The provisioning state of the express route circuit resource.
    """
    service_key: pulumi.Output[str]
    """
    The ServiceKey.
    """
    service_provider_notes: pulumi.Output[str]
    """
    The ServiceProviderNotes.
    """
    service_provider_properties: pulumi.Output[dict]
    """
    The ServiceProviderProperties.
      * `bandwidth_in_mbps` (`float`) - The BandwidthInMbps.
      * `peering_location` (`str`) - The peering location.
      * `service_provider_name` (`str`) - The serviceProviderName.
    """
    service_provider_provisioning_state: pulumi.Output[str]
    """
    The ServiceProviderProvisioningState state of the resource.
    """
    sku: pulumi.Output[dict]
    """
    The SKU.
      * `family` (`str`) - The family of the SKU.
      * `name` (`str`) - The name of the SKU.
      * `tier` (`str`) - The tier of the SKU.
    """
    stag: pulumi.Output[float]
    """
    The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    def __init__(__self__, resource_name, opts=None, allow_classic_operations=None, authorizations=None, bandwidth_in_gbps=None, circuit_provisioning_state=None, express_route_port=None, gateway_manager_etag=None, global_reach_enabled=None, id=None, location=None, name=None, peerings=None, resource_group_name=None, service_key=None, service_provider_notes=None, service_provider_properties=None, service_provider_provisioning_state=None, sku=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        ExpressRouteCircuit resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_classic_operations: Allow classic operations.
        :param pulumi.Input[list] authorizations: The list of authorizations.
        :param pulumi.Input[float] bandwidth_in_gbps: The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
        :param pulumi.Input[str] circuit_provisioning_state: The CircuitProvisioningState state of the resource.
        :param pulumi.Input[dict] express_route_port: The reference to the ExpressRoutePort resource when the circuit is provisioned on an ExpressRoutePort resource.
        :param pulumi.Input[str] gateway_manager_etag: The GatewayManager Etag.
        :param pulumi.Input[bool] global_reach_enabled: Flag denoting Global reach status.
        :param pulumi.Input[str] id: Resource ID.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: The name of the circuit.
        :param pulumi.Input[list] peerings: The list of peerings.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[str] service_key: The ServiceKey.
        :param pulumi.Input[str] service_provider_notes: The ServiceProviderNotes.
        :param pulumi.Input[dict] service_provider_properties: The ServiceProviderProperties.
        :param pulumi.Input[str] service_provider_provisioning_state: The ServiceProviderProvisioningState state of the resource.
        :param pulumi.Input[dict] sku: The SKU.
        :param pulumi.Input[dict] tags: Resource tags.

        The **authorizations** object supports the following:

          * `authorization_key` (`pulumi.Input[str]`) - The authorization key.
          * `authorization_use_status` (`pulumi.Input[str]`) - The authorization use status.
          * `id` (`pulumi.Input[str]`) - Resource ID.
          * `name` (`pulumi.Input[str]`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.

        The **express_route_port** object supports the following:

          * `id` (`pulumi.Input[str]`) - Resource ID.

        The **peerings** object supports the following:

          * `azure_asn` (`pulumi.Input[float]`) - The Azure ASN.
          * `connections` (`pulumi.Input[list]`) - The list of circuit connections associated with Azure Private Peering for this circuit.
            * `address_prefix` (`pulumi.Input[str]`) - /29 IP address space to carve out Customer addresses for tunnels.
            * `authorization_key` (`pulumi.Input[str]`) - The authorization key.
            * `circuit_connection_status` (`pulumi.Input[str]`) - Express Route Circuit connection state.
            * `express_route_circuit_peering` (`pulumi.Input[dict]`) - Reference to Express Route Circuit Private Peering Resource of the circuit initiating connection.
            * `id` (`pulumi.Input[str]`) - Resource ID.
            * `name` (`pulumi.Input[str]`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            * `peer_express_route_circuit_peering` (`pulumi.Input[dict]`) - Reference to Express Route Circuit Private Peering Resource of the peered circuit.

          * `gateway_manager_etag` (`pulumi.Input[str]`) - The GatewayManager Etag.
          * `id` (`pulumi.Input[str]`) - Resource ID.
          * `ipv6_peering_config` (`pulumi.Input[dict]`) - The IPv6 peering configuration.
            * `microsoft_peering_config` (`pulumi.Input[dict]`) - The Microsoft peering configuration.
              * `advertised_communities` (`pulumi.Input[list]`) - The communities of bgp peering. Specified for microsoft peering.
              * `advertised_public_prefixes` (`pulumi.Input[list]`) - The reference to AdvertisedPublicPrefixes.
              * `customer_asn` (`pulumi.Input[float]`) - The CustomerASN of the peering.
              * `legacy_mode` (`pulumi.Input[float]`) - The legacy mode of the peering.
              * `routing_registry_name` (`pulumi.Input[str]`) - The RoutingRegistryName of the configuration.

            * `primary_peer_address_prefix` (`pulumi.Input[str]`) - The primary address prefix.
            * `route_filter` (`pulumi.Input[dict]`) - The reference to the RouteFilter resource.
            * `secondary_peer_address_prefix` (`pulumi.Input[str]`) - The secondary address prefix.
            * `state` (`pulumi.Input[str]`) - The state of peering.

          * `microsoft_peering_config` (`pulumi.Input[dict]`) - The Microsoft peering configuration.
          * `name` (`pulumi.Input[str]`) - The name of the resource that is unique within a resource group. This name can be used to access the resource.
          * `peer_asn` (`pulumi.Input[float]`) - The peer ASN.
          * `peering_type` (`pulumi.Input[str]`) - The peering type.
          * `primary_azure_port` (`pulumi.Input[str]`) - The primary port.
          * `primary_peer_address_prefix` (`pulumi.Input[str]`) - The primary address prefix.
          * `route_filter` (`pulumi.Input[dict]`) - The reference to the RouteFilter resource.
          * `secondary_azure_port` (`pulumi.Input[str]`) - The secondary port.
          * `secondary_peer_address_prefix` (`pulumi.Input[str]`) - The secondary address prefix.
          * `shared_key` (`pulumi.Input[str]`) - The shared key.
          * `state` (`pulumi.Input[str]`) - The peering state.
          * `stats` (`pulumi.Input[dict]`) - The peering stats of express route circuit.
            * `primarybytes_in` (`pulumi.Input[float]`) - The Primary BytesIn of the peering.
            * `primarybytes_out` (`pulumi.Input[float]`) - The primary BytesOut of the peering.
            * `secondarybytes_in` (`pulumi.Input[float]`) - The secondary BytesIn of the peering.
            * `secondarybytes_out` (`pulumi.Input[float]`) - The secondary BytesOut of the peering.

          * `vlan_id` (`pulumi.Input[float]`) - The VLAN ID.

        The **service_provider_properties** object supports the following:

          * `bandwidth_in_mbps` (`pulumi.Input[float]`) - The BandwidthInMbps.
          * `peering_location` (`pulumi.Input[str]`) - The peering location.
          * `service_provider_name` (`pulumi.Input[str]`) - The serviceProviderName.

        The **sku** object supports the following:

          * `family` (`pulumi.Input[str]`) - The family of the SKU.
          * `name` (`pulumi.Input[str]`) - The name of the SKU.
          * `tier` (`pulumi.Input[str]`) - The tier of the SKU.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow_classic_operations'] = allow_classic_operations
            __props__['authorizations'] = authorizations
            __props__['bandwidth_in_gbps'] = bandwidth_in_gbps
            __props__['circuit_provisioning_state'] = circuit_provisioning_state
            __props__['express_route_port'] = express_route_port
            __props__['gateway_manager_etag'] = gateway_manager_etag
            __props__['global_reach_enabled'] = global_reach_enabled
            __props__['id'] = id
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['peerings'] = peerings
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['service_key'] = service_key
            __props__['service_provider_notes'] = service_provider_notes
            __props__['service_provider_properties'] = service_provider_properties
            __props__['service_provider_provisioning_state'] = service_provider_provisioning_state
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['etag'] = None
            __props__['provisioning_state'] = None
            __props__['stag'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:network/v20150615:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20160330:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20160601:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20160901:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20161201:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20170301:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20170601:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20170801:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20170901:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20171001:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20171101:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20180101:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20180201:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20180401:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20180601:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20180701:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20180801:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20181001:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20181101:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20181201:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20190201:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20190401:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20190601:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20190701:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20190801:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20190901:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20191201:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20200301:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20200401:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20200501:ExpressRouteCircuit"), pulumi.Alias(type_="azurerm:network/v20200601:ExpressRouteCircuit")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(ExpressRouteCircuit, __self__).__init__(
            'azurerm:network/v20191101:ExpressRouteCircuit',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ExpressRouteCircuit resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ExpressRouteCircuit(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
