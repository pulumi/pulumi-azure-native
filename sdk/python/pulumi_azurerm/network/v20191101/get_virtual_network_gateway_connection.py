# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVirtualNetworkGatewayConnectionResult:
    """
    A common class for general resource information.
    """
    def __init__(__self__, authorization_key=None, connection_protocol=None, connection_status=None, connection_type=None, egress_bytes_transferred=None, enable_bgp=None, etag=None, express_route_gateway_bypass=None, ingress_bytes_transferred=None, ipsec_policies=None, local_network_gateway2=None, location=None, name=None, peer=None, provisioning_state=None, resource_guid=None, routing_weight=None, shared_key=None, tags=None, traffic_selector_policies=None, tunnel_connection_status=None, type=None, use_policy_based_traffic_selectors=None, virtual_network_gateway1=None, virtual_network_gateway2=None):
        if authorization_key and not isinstance(authorization_key, str):
            raise TypeError("Expected argument 'authorization_key' to be a str")
        __self__.authorization_key = authorization_key
        """
        The authorizationKey.
        """
        if connection_protocol and not isinstance(connection_protocol, str):
            raise TypeError("Expected argument 'connection_protocol' to be a str")
        __self__.connection_protocol = connection_protocol
        """
        Connection protocol used for this connection.
        """
        if connection_status and not isinstance(connection_status, str):
            raise TypeError("Expected argument 'connection_status' to be a str")
        __self__.connection_status = connection_status
        """
        Virtual Network Gateway connection status.
        """
        if connection_type and not isinstance(connection_type, str):
            raise TypeError("Expected argument 'connection_type' to be a str")
        __self__.connection_type = connection_type
        """
        Gateway connection type.
        """
        if egress_bytes_transferred and not isinstance(egress_bytes_transferred, float):
            raise TypeError("Expected argument 'egress_bytes_transferred' to be a float")
        __self__.egress_bytes_transferred = egress_bytes_transferred
        """
        The egress bytes transferred in this connection.
        """
        if enable_bgp and not isinstance(enable_bgp, bool):
            raise TypeError("Expected argument 'enable_bgp' to be a bool")
        __self__.enable_bgp = enable_bgp
        """
        EnableBgp flag.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if express_route_gateway_bypass and not isinstance(express_route_gateway_bypass, bool):
            raise TypeError("Expected argument 'express_route_gateway_bypass' to be a bool")
        __self__.express_route_gateway_bypass = express_route_gateway_bypass
        """
        Bypass ExpressRoute Gateway for data forwarding.
        """
        if ingress_bytes_transferred and not isinstance(ingress_bytes_transferred, float):
            raise TypeError("Expected argument 'ingress_bytes_transferred' to be a float")
        __self__.ingress_bytes_transferred = ingress_bytes_transferred
        """
        The ingress bytes transferred in this connection.
        """
        if ipsec_policies and not isinstance(ipsec_policies, list):
            raise TypeError("Expected argument 'ipsec_policies' to be a list")
        __self__.ipsec_policies = ipsec_policies
        """
        The IPSec Policies to be considered by this connection.
        """
        if local_network_gateway2 and not isinstance(local_network_gateway2, dict):
            raise TypeError("Expected argument 'local_network_gateway2' to be a dict")
        __self__.local_network_gateway2 = local_network_gateway2
        """
        The reference to local network gateway resource.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if peer and not isinstance(peer, dict):
            raise TypeError("Expected argument 'peer' to be a dict")
        __self__.peer = peer
        """
        The reference to peerings resource.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the virtual network gateway connection resource.
        """
        if resource_guid and not isinstance(resource_guid, str):
            raise TypeError("Expected argument 'resource_guid' to be a str")
        __self__.resource_guid = resource_guid
        """
        The resource GUID property of the virtual network gateway connection resource.
        """
        if routing_weight and not isinstance(routing_weight, float):
            raise TypeError("Expected argument 'routing_weight' to be a float")
        __self__.routing_weight = routing_weight
        """
        The routing weight.
        """
        if shared_key and not isinstance(shared_key, str):
            raise TypeError("Expected argument 'shared_key' to be a str")
        __self__.shared_key = shared_key
        """
        The IPSec shared key.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if traffic_selector_policies and not isinstance(traffic_selector_policies, list):
            raise TypeError("Expected argument 'traffic_selector_policies' to be a list")
        __self__.traffic_selector_policies = traffic_selector_policies
        """
        The Traffic Selector Policies to be considered by this connection.
        """
        if tunnel_connection_status and not isinstance(tunnel_connection_status, list):
            raise TypeError("Expected argument 'tunnel_connection_status' to be a list")
        __self__.tunnel_connection_status = tunnel_connection_status
        """
        Collection of all tunnels' connection health status.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if use_policy_based_traffic_selectors and not isinstance(use_policy_based_traffic_selectors, bool):
            raise TypeError("Expected argument 'use_policy_based_traffic_selectors' to be a bool")
        __self__.use_policy_based_traffic_selectors = use_policy_based_traffic_selectors
        """
        Enable policy-based traffic selectors.
        """
        if virtual_network_gateway1 and not isinstance(virtual_network_gateway1, dict):
            raise TypeError("Expected argument 'virtual_network_gateway1' to be a dict")
        __self__.virtual_network_gateway1 = virtual_network_gateway1
        """
        The reference to virtual network gateway resource.
        """
        if virtual_network_gateway2 and not isinstance(virtual_network_gateway2, dict):
            raise TypeError("Expected argument 'virtual_network_gateway2' to be a dict")
        __self__.virtual_network_gateway2 = virtual_network_gateway2
        """
        The reference to virtual network gateway resource.
        """


class AwaitableGetVirtualNetworkGatewayConnectionResult(GetVirtualNetworkGatewayConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualNetworkGatewayConnectionResult(
            authorization_key=self.authorization_key,
            connection_protocol=self.connection_protocol,
            connection_status=self.connection_status,
            connection_type=self.connection_type,
            egress_bytes_transferred=self.egress_bytes_transferred,
            enable_bgp=self.enable_bgp,
            etag=self.etag,
            express_route_gateway_bypass=self.express_route_gateway_bypass,
            ingress_bytes_transferred=self.ingress_bytes_transferred,
            ipsec_policies=self.ipsec_policies,
            local_network_gateway2=self.local_network_gateway2,
            location=self.location,
            name=self.name,
            peer=self.peer,
            provisioning_state=self.provisioning_state,
            resource_guid=self.resource_guid,
            routing_weight=self.routing_weight,
            shared_key=self.shared_key,
            tags=self.tags,
            traffic_selector_policies=self.traffic_selector_policies,
            tunnel_connection_status=self.tunnel_connection_status,
            type=self.type,
            use_policy_based_traffic_selectors=self.use_policy_based_traffic_selectors,
            virtual_network_gateway1=self.virtual_network_gateway1,
            virtual_network_gateway2=self.virtual_network_gateway2)


def get_virtual_network_gateway_connection(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the virtual network gateway connection.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20191101:getVirtualNetworkGatewayConnection', __args__, opts=opts).value

    return AwaitableGetVirtualNetworkGatewayConnectionResult(
        authorization_key=__ret__.get('authorizationKey'),
        connection_protocol=__ret__.get('connectionProtocol'),
        connection_status=__ret__.get('connectionStatus'),
        connection_type=__ret__.get('connectionType'),
        egress_bytes_transferred=__ret__.get('egressBytesTransferred'),
        enable_bgp=__ret__.get('enableBgp'),
        etag=__ret__.get('etag'),
        express_route_gateway_bypass=__ret__.get('expressRouteGatewayBypass'),
        ingress_bytes_transferred=__ret__.get('ingressBytesTransferred'),
        ipsec_policies=__ret__.get('ipsecPolicies'),
        local_network_gateway2=__ret__.get('localNetworkGateway2'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        peer=__ret__.get('peer'),
        provisioning_state=__ret__.get('provisioningState'),
        resource_guid=__ret__.get('resourceGuid'),
        routing_weight=__ret__.get('routingWeight'),
        shared_key=__ret__.get('sharedKey'),
        tags=__ret__.get('tags'),
        traffic_selector_policies=__ret__.get('trafficSelectorPolicies'),
        tunnel_connection_status=__ret__.get('tunnelConnectionStatus'),
        type=__ret__.get('type'),
        use_policy_based_traffic_selectors=__ret__.get('usePolicyBasedTrafficSelectors'),
        virtual_network_gateway1=__ret__.get('virtualNetworkGateway1'),
        virtual_network_gateway2=__ret__.get('virtualNetworkGateway2'))
