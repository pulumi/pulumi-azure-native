# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVirtualHubRouteTableV2Result:
    """
    VirtualHubRouteTableV2 Resource.
    """
    def __init__(__self__, attached_connections=None, etag=None, name=None, provisioning_state=None, routes=None):
        if attached_connections and not isinstance(attached_connections, list):
            raise TypeError("Expected argument 'attached_connections' to be a list")
        __self__.attached_connections = attached_connections
        """
        List of all connections attached to this route table v2.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource that is unique within a resource group. This name can be used to access the resource.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the virtual hub route table v2 resource.
        """
        if routes and not isinstance(routes, list):
            raise TypeError("Expected argument 'routes' to be a list")
        __self__.routes = routes
        """
        List of all routes.
        """


class AwaitableGetVirtualHubRouteTableV2Result(GetVirtualHubRouteTableV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualHubRouteTableV2Result(
            attached_connections=self.attached_connections,
            etag=self.etag,
            name=self.name,
            provisioning_state=self.provisioning_state,
            routes=self.routes)


def get_virtual_hub_route_table_v2(name=None, resource_group_name=None, virtual_hub_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the VirtualHubRouteTableV2.
    :param str resource_group_name: The resource group name of the VirtualHubRouteTableV2.
    :param str virtual_hub_name: The name of the VirtualHub.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['virtualHubName'] = virtual_hub_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20191101:getVirtualHubRouteTableV2', __args__, opts=opts).value

    return AwaitableGetVirtualHubRouteTableV2Result(
        attached_connections=__ret__.get('attachedConnections'),
        etag=__ret__.get('etag'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        routes=__ret__.get('routes'))
