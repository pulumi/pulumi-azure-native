# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVirtualHubResult:
    """
    VirtualHub Resource.
    """
    def __init__(__self__, address_prefix=None, azure_firewall=None, bgp_connections=None, enable_virtual_router_route_propogation=None, etag=None, express_route_gateway=None, ip_configurations=None, location=None, name=None, p2_s_vpn_gateway=None, provisioning_state=None, route_table=None, routing_state=None, security_partner_provider=None, security_provider_name=None, sku=None, tags=None, type=None, virtual_hub_route_table_v2s=None, virtual_router_asn=None, virtual_router_ips=None, virtual_wan=None, vpn_gateway=None):
        if address_prefix and not isinstance(address_prefix, str):
            raise TypeError("Expected argument 'address_prefix' to be a str")
        __self__.address_prefix = address_prefix
        """
        Address-prefix for this VirtualHub.
        """
        if azure_firewall and not isinstance(azure_firewall, dict):
            raise TypeError("Expected argument 'azure_firewall' to be a dict")
        __self__.azure_firewall = azure_firewall
        """
        The azureFirewall associated with this VirtualHub.
        """
        if bgp_connections and not isinstance(bgp_connections, list):
            raise TypeError("Expected argument 'bgp_connections' to be a list")
        __self__.bgp_connections = bgp_connections
        """
        List of references to Bgp Connections.
        """
        if enable_virtual_router_route_propogation and not isinstance(enable_virtual_router_route_propogation, bool):
            raise TypeError("Expected argument 'enable_virtual_router_route_propogation' to be a bool")
        __self__.enable_virtual_router_route_propogation = enable_virtual_router_route_propogation
        """
        Flag to control route propogation for VirtualRouter hub.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if express_route_gateway and not isinstance(express_route_gateway, dict):
            raise TypeError("Expected argument 'express_route_gateway' to be a dict")
        __self__.express_route_gateway = express_route_gateway
        """
        The expressRouteGateway associated with this VirtualHub.
        """
        if ip_configurations and not isinstance(ip_configurations, list):
            raise TypeError("Expected argument 'ip_configurations' to be a list")
        __self__.ip_configurations = ip_configurations
        """
        List of references to IpConfigurations.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if p2_s_vpn_gateway and not isinstance(p2_s_vpn_gateway, dict):
            raise TypeError("Expected argument 'p2_s_vpn_gateway' to be a dict")
        __self__.p2_s_vpn_gateway = p2_s_vpn_gateway
        """
        The P2SVpnGateway associated with this VirtualHub.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the virtual hub resource.
        """
        if route_table and not isinstance(route_table, dict):
            raise TypeError("Expected argument 'route_table' to be a dict")
        __self__.route_table = route_table
        """
        The routeTable associated with this virtual hub.
        """
        if routing_state and not isinstance(routing_state, str):
            raise TypeError("Expected argument 'routing_state' to be a str")
        __self__.routing_state = routing_state
        """
        The routing state.
        """
        if security_partner_provider and not isinstance(security_partner_provider, dict):
            raise TypeError("Expected argument 'security_partner_provider' to be a dict")
        __self__.security_partner_provider = security_partner_provider
        """
        The securityPartnerProvider associated with this VirtualHub.
        """
        if security_provider_name and not isinstance(security_provider_name, str):
            raise TypeError("Expected argument 'security_provider_name' to be a str")
        __self__.security_provider_name = security_provider_name
        """
        The Security Provider name.
        """
        if sku and not isinstance(sku, str):
            raise TypeError("Expected argument 'sku' to be a str")
        __self__.sku = sku
        """
        The sku of this VirtualHub.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if virtual_hub_route_table_v2s and not isinstance(virtual_hub_route_table_v2s, list):
            raise TypeError("Expected argument 'virtual_hub_route_table_v2s' to be a list")
        __self__.virtual_hub_route_table_v2s = virtual_hub_route_table_v2s
        """
        List of all virtual hub route table v2s associated with this VirtualHub.
        """
        if virtual_router_asn and not isinstance(virtual_router_asn, float):
            raise TypeError("Expected argument 'virtual_router_asn' to be a float")
        __self__.virtual_router_asn = virtual_router_asn
        """
        VirtualRouter ASN.
        """
        if virtual_router_ips and not isinstance(virtual_router_ips, list):
            raise TypeError("Expected argument 'virtual_router_ips' to be a list")
        __self__.virtual_router_ips = virtual_router_ips
        """
        VirtualRouter IPs.
        """
        if virtual_wan and not isinstance(virtual_wan, dict):
            raise TypeError("Expected argument 'virtual_wan' to be a dict")
        __self__.virtual_wan = virtual_wan
        """
        The VirtualWAN to which the VirtualHub belongs.
        """
        if vpn_gateway and not isinstance(vpn_gateway, dict):
            raise TypeError("Expected argument 'vpn_gateway' to be a dict")
        __self__.vpn_gateway = vpn_gateway
        """
        The VpnGateway associated with this VirtualHub.
        """


class AwaitableGetVirtualHubResult(GetVirtualHubResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualHubResult(
            address_prefix=self.address_prefix,
            azure_firewall=self.azure_firewall,
            bgp_connections=self.bgp_connections,
            enable_virtual_router_route_propogation=self.enable_virtual_router_route_propogation,
            etag=self.etag,
            express_route_gateway=self.express_route_gateway,
            ip_configurations=self.ip_configurations,
            location=self.location,
            name=self.name,
            p2_s_vpn_gateway=self.p2_s_vpn_gateway,
            provisioning_state=self.provisioning_state,
            route_table=self.route_table,
            routing_state=self.routing_state,
            security_partner_provider=self.security_partner_provider,
            security_provider_name=self.security_provider_name,
            sku=self.sku,
            tags=self.tags,
            type=self.type,
            virtual_hub_route_table_v2s=self.virtual_hub_route_table_v2s,
            virtual_router_asn=self.virtual_router_asn,
            virtual_router_ips=self.virtual_router_ips,
            virtual_wan=self.virtual_wan,
            vpn_gateway=self.vpn_gateway)


def get_virtual_hub(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the VirtualHub.
    :param str resource_group_name: The resource group name of the VirtualHub.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20200601:getVirtualHub', __args__, opts=opts).value

    return AwaitableGetVirtualHubResult(
        address_prefix=__ret__.get('addressPrefix'),
        azure_firewall=__ret__.get('azureFirewall'),
        bgp_connections=__ret__.get('bgpConnections'),
        enable_virtual_router_route_propogation=__ret__.get('enableVirtualRouterRoutePropogation'),
        etag=__ret__.get('etag'),
        express_route_gateway=__ret__.get('expressRouteGateway'),
        ip_configurations=__ret__.get('ipConfigurations'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        p2_s_vpn_gateway=__ret__.get('p2SVpnGateway'),
        provisioning_state=__ret__.get('provisioningState'),
        route_table=__ret__.get('routeTable'),
        routing_state=__ret__.get('routingState'),
        security_partner_provider=__ret__.get('securityPartnerProvider'),
        security_provider_name=__ret__.get('securityProviderName'),
        sku=__ret__.get('sku'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        virtual_hub_route_table_v2s=__ret__.get('virtualHubRouteTableV2s'),
        virtual_router_asn=__ret__.get('virtualRouterAsn'),
        virtual_router_ips=__ret__.get('virtualRouterIps'),
        virtual_wan=__ret__.get('virtualWan'),
        vpn_gateway=__ret__.get('vpnGateway'))
