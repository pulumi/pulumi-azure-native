# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetHubRouteTableResult:
    """
    RouteTable resource in a virtual hub.
    """
    def __init__(__self__, associated_connections=None, etag=None, labels=None, name=None, propagating_connections=None, provisioning_state=None, routes=None, type=None):
        if associated_connections and not isinstance(associated_connections, list):
            raise TypeError("Expected argument 'associated_connections' to be a list")
        __self__.associated_connections = associated_connections
        """
        List of all connections associated with this route table.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        __self__.labels = labels
        """
        List of labels associated with this route table.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource that is unique within a resource group. This name can be used to access the resource.
        """
        if propagating_connections and not isinstance(propagating_connections, list):
            raise TypeError("Expected argument 'propagating_connections' to be a list")
        __self__.propagating_connections = propagating_connections
        """
        List of all connections that advertise to this route table.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the RouteTable resource.
        """
        if routes and not isinstance(routes, list):
            raise TypeError("Expected argument 'routes' to be a list")
        __self__.routes = routes
        """
        List of all routes.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetHubRouteTableResult(GetHubRouteTableResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHubRouteTableResult(
            associated_connections=self.associated_connections,
            etag=self.etag,
            labels=self.labels,
            name=self.name,
            propagating_connections=self.propagating_connections,
            provisioning_state=self.provisioning_state,
            routes=self.routes,
            type=self.type)


def get_hub_route_table(name=None, resource_group_name=None, virtual_hub_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the RouteTable.
    :param str resource_group_name: The resource group name of the VirtualHub.
    :param str virtual_hub_name: The name of the VirtualHub.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['virtualHubName'] = virtual_hub_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20200601:getHubRouteTable', __args__, opts=opts).value

    return AwaitableGetHubRouteTableResult(
        associated_connections=__ret__.get('associatedConnections'),
        etag=__ret__.get('etag'),
        labels=__ret__.get('labels'),
        name=__ret__.get('name'),
        propagating_connections=__ret__.get('propagatingConnections'),
        provisioning_state=__ret__.get('provisioningState'),
        routes=__ret__.get('routes'),
        type=__ret__.get('type'))
