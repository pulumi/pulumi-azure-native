# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class HubVirtualNetworkConnection(pulumi.CustomResource):
    allow_hub_to_remote_vnet_transit: pulumi.Output[bool]
    """
    Deprecated: VirtualHub to RemoteVnet transit to enabled or not.
    """
    allow_remote_vnet_to_use_hub_vnet_gateways: pulumi.Output[bool]
    """
    Deprecated: Allow RemoteVnet to use Virtual Hub's gateways.
    """
    enable_internet_security: pulumi.Output[bool]
    """
    Enable internet security.
    """
    etag: pulumi.Output[str]
    """
    A unique read-only string that changes whenever the resource is updated.
    """
    name: pulumi.Output[str]
    """
    The name of the resource that is unique within a resource group. This name can be used to access the resource.
    """
    provisioning_state: pulumi.Output[str]
    """
    The provisioning state of the hub virtual network connection resource.
    """
    remote_virtual_network: pulumi.Output[dict]
    """
    Reference to the remote virtual network.
      * `id` (`str`) - Resource ID.
    """
    routing_configuration: pulumi.Output[dict]
    """
    The Routing Configuration indicating the associated and propagated route tables on this connection.
      * `associated_route_table` (`dict`) - The resource id RouteTable associated with this RoutingConfiguration.
        * `id` (`str`) - Resource ID.

      * `propagated_route_tables` (`dict`) - The list of RouteTables to advertise the routes to.
        * `ids` (`list`) - The list of resource ids of all the RouteTables.
        * `labels` (`list`) - The list of labels.

      * `vnet_routes` (`dict`) - List of routes that control routing from VirtualHub into a virtual network connection.
        * `static_routes` (`list`) - List of all Static Routes.
          * `address_prefixes` (`list`) - List of all address prefixes.
          * `name` (`str`) - The name of the StaticRoute that is unique within a VnetRoute.
          * `next_hop_ip_address` (`str`) - The ip address of the next hop.
    """
    def __init__(__self__, resource_name, opts=None, allow_hub_to_remote_vnet_transit=None, allow_remote_vnet_to_use_hub_vnet_gateways=None, enable_internet_security=None, id=None, name=None, remote_virtual_network=None, resource_group_name=None, routing_configuration=None, virtual_hub_name=None, __props__=None, __name__=None, __opts__=None):
        """
        HubVirtualNetworkConnection Resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_hub_to_remote_vnet_transit: Deprecated: VirtualHub to RemoteVnet transit to enabled or not.
        :param pulumi.Input[bool] allow_remote_vnet_to_use_hub_vnet_gateways: Deprecated: Allow RemoteVnet to use Virtual Hub's gateways.
        :param pulumi.Input[bool] enable_internet_security: Enable internet security.
        :param pulumi.Input[str] id: Resource ID.
        :param pulumi.Input[str] name: The name of the HubVirtualNetworkConnection.
        :param pulumi.Input[dict] remote_virtual_network: Reference to the remote virtual network.
        :param pulumi.Input[str] resource_group_name: The resource group name of the HubVirtualNetworkConnection.
        :param pulumi.Input[dict] routing_configuration: The Routing Configuration indicating the associated and propagated route tables on this connection.
        :param pulumi.Input[str] virtual_hub_name: The name of the VirtualHub.

        The **remote_virtual_network** object supports the following:

          * `id` (`pulumi.Input[str]`) - Resource ID.

        The **routing_configuration** object supports the following:

          * `associated_route_table` (`pulumi.Input[dict]`) - The resource id RouteTable associated with this RoutingConfiguration.
          * `propagated_route_tables` (`pulumi.Input[dict]`) - The list of RouteTables to advertise the routes to.
            * `ids` (`pulumi.Input[list]`) - The list of resource ids of all the RouteTables.
            * `labels` (`pulumi.Input[list]`) - The list of labels.

          * `vnet_routes` (`pulumi.Input[dict]`) - List of routes that control routing from VirtualHub into a virtual network connection.
            * `static_routes` (`pulumi.Input[list]`) - List of all Static Routes.
              * `address_prefixes` (`pulumi.Input[list]`) - List of all address prefixes.
              * `name` (`pulumi.Input[str]`) - The name of the StaticRoute that is unique within a VnetRoute.
              * `next_hop_ip_address` (`pulumi.Input[str]`) - The ip address of the next hop.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow_hub_to_remote_vnet_transit'] = allow_hub_to_remote_vnet_transit
            __props__['allow_remote_vnet_to_use_hub_vnet_gateways'] = allow_remote_vnet_to_use_hub_vnet_gateways
            __props__['enable_internet_security'] = enable_internet_security
            __props__['id'] = id
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['remote_virtual_network'] = remote_virtual_network
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['routing_configuration'] = routing_configuration
            if virtual_hub_name is None:
                raise TypeError("Missing required property 'virtual_hub_name'")
            __props__['virtual_hub_name'] = virtual_hub_name
            __props__['etag'] = None
            __props__['provisioning_state'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:network/v20180401:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20180601:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20180701:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20180801:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20181001:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20181101:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20181201:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20190201:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20190401:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20190601:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20190701:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20190801:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20190901:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20191101:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20191201:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20200301:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20200401:HubVirtualNetworkConnection"), pulumi.Alias(type_="azurerm:network/v20200501:HubVirtualNetworkConnection")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(HubVirtualNetworkConnection, __self__).__init__(
            'azurerm:network/v20200601:HubVirtualNetworkConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing HubVirtualNetworkConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return HubVirtualNetworkConnection(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
