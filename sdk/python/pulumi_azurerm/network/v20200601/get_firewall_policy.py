# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetFirewallPolicyResult:
    """
    FirewallPolicy Resource.
    """
    def __init__(__self__, base_policy=None, child_policies=None, dns_settings=None, etag=None, firewalls=None, location=None, name=None, provisioning_state=None, rule_collection_groups=None, tags=None, threat_intel_mode=None, threat_intel_whitelist=None, type=None):
        if base_policy and not isinstance(base_policy, dict):
            raise TypeError("Expected argument 'base_policy' to be a dict")
        __self__.base_policy = base_policy
        """
        The parent firewall policy from which rules are inherited.
        """
        if child_policies and not isinstance(child_policies, list):
            raise TypeError("Expected argument 'child_policies' to be a list")
        __self__.child_policies = child_policies
        """
        List of references to Child Firewall Policies.
        """
        if dns_settings and not isinstance(dns_settings, dict):
            raise TypeError("Expected argument 'dns_settings' to be a dict")
        __self__.dns_settings = dns_settings
        """
        DNS Proxy Settings definition.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if firewalls and not isinstance(firewalls, list):
            raise TypeError("Expected argument 'firewalls' to be a list")
        __self__.firewalls = firewalls
        """
        List of references to Azure Firewalls that this Firewall Policy is associated with.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the firewall policy resource.
        """
        if rule_collection_groups and not isinstance(rule_collection_groups, list):
            raise TypeError("Expected argument 'rule_collection_groups' to be a list")
        __self__.rule_collection_groups = rule_collection_groups
        """
        List of references to FirewallPolicyRuleCollectionGroups.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if threat_intel_mode and not isinstance(threat_intel_mode, str):
            raise TypeError("Expected argument 'threat_intel_mode' to be a str")
        __self__.threat_intel_mode = threat_intel_mode
        """
        The operation mode for Threat Intelligence.
        """
        if threat_intel_whitelist and not isinstance(threat_intel_whitelist, dict):
            raise TypeError("Expected argument 'threat_intel_whitelist' to be a dict")
        __self__.threat_intel_whitelist = threat_intel_whitelist
        """
        ThreatIntel Whitelist for Firewall Policy.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetFirewallPolicyResult(GetFirewallPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallPolicyResult(
            base_policy=self.base_policy,
            child_policies=self.child_policies,
            dns_settings=self.dns_settings,
            etag=self.etag,
            firewalls=self.firewalls,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            rule_collection_groups=self.rule_collection_groups,
            tags=self.tags,
            threat_intel_mode=self.threat_intel_mode,
            threat_intel_whitelist=self.threat_intel_whitelist,
            type=self.type)


def get_firewall_policy(expand=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str expand: Expands referenced resources.
    :param str name: The name of the Firewall Policy.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['expand'] = expand
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20200601:getFirewallPolicy', __args__, opts=opts).value

    return AwaitableGetFirewallPolicyResult(
        base_policy=__ret__.get('basePolicy'),
        child_policies=__ret__.get('childPolicies'),
        dns_settings=__ret__.get('dnsSettings'),
        etag=__ret__.get('etag'),
        firewalls=__ret__.get('firewalls'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        rule_collection_groups=__ret__.get('ruleCollectionGroups'),
        tags=__ret__.get('tags'),
        threat_intel_mode=__ret__.get('threatIntelMode'),
        threat_intel_whitelist=__ret__.get('threatIntelWhitelist'),
        type=__ret__.get('type'))
