# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetLoadBalancerBackendAddressPoolResult:
    """
    Pool of backend IP addresses.
    """
    def __init__(__self__, backend_ip_configurations=None, etag=None, load_balancer_backend_addresses=None, load_balancing_rules=None, name=None, outbound_rule=None, outbound_rules=None, provisioning_state=None, type=None):
        if backend_ip_configurations and not isinstance(backend_ip_configurations, list):
            raise TypeError("Expected argument 'backend_ip_configurations' to be a list")
        __self__.backend_ip_configurations = backend_ip_configurations
        """
        An array of references to IP addresses defined in network interfaces.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if load_balancer_backend_addresses and not isinstance(load_balancer_backend_addresses, list):
            raise TypeError("Expected argument 'load_balancer_backend_addresses' to be a list")
        __self__.load_balancer_backend_addresses = load_balancer_backend_addresses
        """
        An array of backend addresses.
        """
        if load_balancing_rules and not isinstance(load_balancing_rules, list):
            raise TypeError("Expected argument 'load_balancing_rules' to be a list")
        __self__.load_balancing_rules = load_balancing_rules
        """
        An array of references to load balancing rules that use this backend address pool.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.
        """
        if outbound_rule and not isinstance(outbound_rule, dict):
            raise TypeError("Expected argument 'outbound_rule' to be a dict")
        __self__.outbound_rule = outbound_rule
        """
        A reference to an outbound rule that uses this backend address pool.
        """
        if outbound_rules and not isinstance(outbound_rules, list):
            raise TypeError("Expected argument 'outbound_rules' to be a list")
        __self__.outbound_rules = outbound_rules
        """
        An array of references to outbound rules that use this backend address pool.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the backend address pool resource.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Type of the resource.
        """


class AwaitableGetLoadBalancerBackendAddressPoolResult(GetLoadBalancerBackendAddressPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLoadBalancerBackendAddressPoolResult(
            backend_ip_configurations=self.backend_ip_configurations,
            etag=self.etag,
            load_balancer_backend_addresses=self.load_balancer_backend_addresses,
            load_balancing_rules=self.load_balancing_rules,
            name=self.name,
            outbound_rule=self.outbound_rule,
            outbound_rules=self.outbound_rules,
            provisioning_state=self.provisioning_state,
            type=self.type)


def get_load_balancer_backend_address_pool(load_balancer_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str load_balancer_name: The name of the load balancer.
    :param str name: The name of the backend address pool.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['loadBalancerName'] = load_balancer_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20200601:getLoadBalancerBackendAddressPool', __args__, opts=opts).value

    return AwaitableGetLoadBalancerBackendAddressPoolResult(
        backend_ip_configurations=__ret__.get('backendIPConfigurations'),
        etag=__ret__.get('etag'),
        load_balancer_backend_addresses=__ret__.get('loadBalancerBackendAddresses'),
        load_balancing_rules=__ret__.get('loadBalancingRules'),
        name=__ret__.get('name'),
        outbound_rule=__ret__.get('outboundRule'),
        outbound_rules=__ret__.get('outboundRules'),
        provisioning_state=__ret__.get('provisioningState'),
        type=__ret__.get('type'))
