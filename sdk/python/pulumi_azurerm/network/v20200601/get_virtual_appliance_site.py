# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVirtualApplianceSiteResult:
    """
    Virtual Appliance Site resource.
    """
    def __init__(__self__, address_prefix=None, etag=None, name=None, o365_policy=None, provisioning_state=None, type=None):
        if address_prefix and not isinstance(address_prefix, str):
            raise TypeError("Expected argument 'address_prefix' to be a str")
        __self__.address_prefix = address_prefix
        """
        Address Prefix.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Name of the virtual appliance site.
        """
        if o365_policy and not isinstance(o365_policy, dict):
            raise TypeError("Expected argument 'o365_policy' to be a dict")
        __self__.o365_policy = o365_policy
        """
        Office 365 Policy.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the resource.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Site type.
        """


class AwaitableGetVirtualApplianceSiteResult(GetVirtualApplianceSiteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualApplianceSiteResult(
            address_prefix=self.address_prefix,
            etag=self.etag,
            name=self.name,
            o365_policy=self.o365_policy,
            provisioning_state=self.provisioning_state,
            type=self.type)


def get_virtual_appliance_site(name=None, network_virtual_appliance_name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the site.
    :param str network_virtual_appliance_name: The name of the Network Virtual Appliance.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['networkVirtualApplianceName'] = network_virtual_appliance_name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20200601:getVirtualApplianceSite', __args__, opts=opts).value

    return AwaitableGetVirtualApplianceSiteResult(
        address_prefix=__ret__.get('addressPrefix'),
        etag=__ret__.get('etag'),
        name=__ret__.get('name'),
        o365_policy=__ret__.get('o365Policy'),
        provisioning_state=__ret__.get('provisioningState'),
        type=__ret__.get('type'))
