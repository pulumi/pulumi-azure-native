# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetDscpConfigurationResult:
    """
    DSCP Configuration in a resource group.
    """
    def __init__(__self__, associated_network_interfaces=None, destination_ip_ranges=None, destination_port_ranges=None, etag=None, location=None, markings=None, name=None, protocol=None, provisioning_state=None, qos_collection_id=None, resource_guid=None, source_ip_ranges=None, source_port_ranges=None, tags=None, type=None):
        if associated_network_interfaces and not isinstance(associated_network_interfaces, list):
            raise TypeError("Expected argument 'associated_network_interfaces' to be a list")
        __self__.associated_network_interfaces = associated_network_interfaces
        """
        Associated Network Interfaces to the DSCP Configuration.
        """
        if destination_ip_ranges and not isinstance(destination_ip_ranges, list):
            raise TypeError("Expected argument 'destination_ip_ranges' to be a list")
        __self__.destination_ip_ranges = destination_ip_ranges
        """
        Destination IP ranges.
        """
        if destination_port_ranges and not isinstance(destination_port_ranges, list):
            raise TypeError("Expected argument 'destination_port_ranges' to be a list")
        __self__.destination_port_ranges = destination_port_ranges
        """
        Destination port ranges.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if markings and not isinstance(markings, list):
            raise TypeError("Expected argument 'markings' to be a list")
        __self__.markings = markings
        """
        List of markings to be used in the configuration.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        __self__.protocol = protocol
        """
        RNM supported protocol types.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the DSCP Configuration resource.
        """
        if qos_collection_id and not isinstance(qos_collection_id, str):
            raise TypeError("Expected argument 'qos_collection_id' to be a str")
        __self__.qos_collection_id = qos_collection_id
        """
        Qos Collection ID generated by RNM.
        """
        if resource_guid and not isinstance(resource_guid, str):
            raise TypeError("Expected argument 'resource_guid' to be a str")
        __self__.resource_guid = resource_guid
        """
        The resource GUID property of the DSCP Configuration resource.
        """
        if source_ip_ranges and not isinstance(source_ip_ranges, list):
            raise TypeError("Expected argument 'source_ip_ranges' to be a list")
        __self__.source_ip_ranges = source_ip_ranges
        """
        Source IP ranges.
        """
        if source_port_ranges and not isinstance(source_port_ranges, list):
            raise TypeError("Expected argument 'source_port_ranges' to be a list")
        __self__.source_port_ranges = source_port_ranges
        """
        Sources port ranges.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetDscpConfigurationResult(GetDscpConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDscpConfigurationResult(
            associated_network_interfaces=self.associated_network_interfaces,
            destination_ip_ranges=self.destination_ip_ranges,
            destination_port_ranges=self.destination_port_ranges,
            etag=self.etag,
            location=self.location,
            markings=self.markings,
            name=self.name,
            protocol=self.protocol,
            provisioning_state=self.provisioning_state,
            qos_collection_id=self.qos_collection_id,
            resource_guid=self.resource_guid,
            source_ip_ranges=self.source_ip_ranges,
            source_port_ranges=self.source_port_ranges,
            tags=self.tags,
            type=self.type)


def get_dscp_configuration(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the resource.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20200601:getDscpConfiguration', __args__, opts=opts).value

    return AwaitableGetDscpConfigurationResult(
        associated_network_interfaces=__ret__.get('associatedNetworkInterfaces'),
        destination_ip_ranges=__ret__.get('destinationIpRanges'),
        destination_port_ranges=__ret__.get('destinationPortRanges'),
        etag=__ret__.get('etag'),
        location=__ret__.get('location'),
        markings=__ret__.get('markings'),
        name=__ret__.get('name'),
        protocol=__ret__.get('protocol'),
        provisioning_state=__ret__.get('provisioningState'),
        qos_collection_id=__ret__.get('qosCollectionId'),
        resource_guid=__ret__.get('resourceGuid'),
        source_ip_ranges=__ret__.get('sourceIpRanges'),
        source_port_ranges=__ret__.get('sourcePortRanges'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
