# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVirtualWanResult:
    """
    VirtualWAN Resource.
    """
    def __init__(__self__, allow_branch_to_branch_traffic=None, allow_vnet_to_vnet_traffic=None, disable_vpn_encryption=None, etag=None, location=None, name=None, office365_local_breakout_category=None, p2_s_vpn_server_configurations=None, provisioning_state=None, security_provider_name=None, tags=None, type=None, virtual_hubs=None, vpn_sites=None):
        if allow_branch_to_branch_traffic and not isinstance(allow_branch_to_branch_traffic, bool):
            raise TypeError("Expected argument 'allow_branch_to_branch_traffic' to be a bool")
        __self__.allow_branch_to_branch_traffic = allow_branch_to_branch_traffic
        """
        True if branch to branch traffic is allowed.
        """
        if allow_vnet_to_vnet_traffic and not isinstance(allow_vnet_to_vnet_traffic, bool):
            raise TypeError("Expected argument 'allow_vnet_to_vnet_traffic' to be a bool")
        __self__.allow_vnet_to_vnet_traffic = allow_vnet_to_vnet_traffic
        """
        True if Vnet to Vnet traffic is allowed.
        """
        if disable_vpn_encryption and not isinstance(disable_vpn_encryption, bool):
            raise TypeError("Expected argument 'disable_vpn_encryption' to be a bool")
        __self__.disable_vpn_encryption = disable_vpn_encryption
        """
        Vpn encryption to be disabled or not.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Gets a unique read-only string that changes whenever the resource is updated.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if office365_local_breakout_category and not isinstance(office365_local_breakout_category, str):
            raise TypeError("Expected argument 'office365_local_breakout_category' to be a str")
        __self__.office365_local_breakout_category = office365_local_breakout_category
        """
        The office local breakout category.
        """
        if p2_s_vpn_server_configurations and not isinstance(p2_s_vpn_server_configurations, list):
            raise TypeError("Expected argument 'p2_s_vpn_server_configurations' to be a list")
        __self__.p2_s_vpn_server_configurations = p2_s_vpn_server_configurations
        """
        List of all P2SVpnServerConfigurations associated with the virtual wan.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the resource.
        """
        if security_provider_name and not isinstance(security_provider_name, str):
            raise TypeError("Expected argument 'security_provider_name' to be a str")
        __self__.security_provider_name = security_provider_name
        """
        The Security Provider name.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if virtual_hubs and not isinstance(virtual_hubs, list):
            raise TypeError("Expected argument 'virtual_hubs' to be a list")
        __self__.virtual_hubs = virtual_hubs
        """
        List of VirtualHubs in the VirtualWAN.
        """
        if vpn_sites and not isinstance(vpn_sites, list):
            raise TypeError("Expected argument 'vpn_sites' to be a list")
        __self__.vpn_sites = vpn_sites
        """
        List of VpnSites in the VirtualWAN.
        """


class AwaitableGetVirtualWanResult(GetVirtualWanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualWanResult(
            allow_branch_to_branch_traffic=self.allow_branch_to_branch_traffic,
            allow_vnet_to_vnet_traffic=self.allow_vnet_to_vnet_traffic,
            disable_vpn_encryption=self.disable_vpn_encryption,
            etag=self.etag,
            location=self.location,
            name=self.name,
            office365_local_breakout_category=self.office365_local_breakout_category,
            p2_s_vpn_server_configurations=self.p2_s_vpn_server_configurations,
            provisioning_state=self.provisioning_state,
            security_provider_name=self.security_provider_name,
            tags=self.tags,
            type=self.type,
            virtual_hubs=self.virtual_hubs,
            vpn_sites=self.vpn_sites)


def get_virtual_wan(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the VirtualWAN being retrieved.
    :param str resource_group_name: The resource group name of the VirtualWan.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20190601:getVirtualWan', __args__, opts=opts).value

    return AwaitableGetVirtualWanResult(
        allow_branch_to_branch_traffic=__ret__.get('allowBranchToBranchTraffic'),
        allow_vnet_to_vnet_traffic=__ret__.get('allowVnetToVnetTraffic'),
        disable_vpn_encryption=__ret__.get('disableVpnEncryption'),
        etag=__ret__.get('etag'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        office365_local_breakout_category=__ret__.get('office365LocalBreakoutCategory'),
        p2_s_vpn_server_configurations=__ret__.get('p2SVpnServerConfigurations'),
        provisioning_state=__ret__.get('provisioningState'),
        security_provider_name=__ret__.get('securityProviderName'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        virtual_hubs=__ret__.get('virtualHubs'),
        vpn_sites=__ret__.get('vpnSites'))
