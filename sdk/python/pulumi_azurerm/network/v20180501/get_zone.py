# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetZoneResult:
    """
    Describes a DNS zone.
    """
    def __init__(__self__, etag=None, location=None, max_number_of_record_sets=None, name=None, name_servers=None, number_of_record_sets=None, registration_virtual_networks=None, resolution_virtual_networks=None, tags=None, type=None, zone_type=None):
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        The etag of the zone.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if max_number_of_record_sets and not isinstance(max_number_of_record_sets, float):
            raise TypeError("Expected argument 'max_number_of_record_sets' to be a float")
        __self__.max_number_of_record_sets = max_number_of_record_sets
        """
        The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if name_servers and not isinstance(name_servers, list):
            raise TypeError("Expected argument 'name_servers' to be a list")
        __self__.name_servers = name_servers
        """
        The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.
        """
        if number_of_record_sets and not isinstance(number_of_record_sets, float):
            raise TypeError("Expected argument 'number_of_record_sets' to be a float")
        __self__.number_of_record_sets = number_of_record_sets
        """
        The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
        """
        if registration_virtual_networks and not isinstance(registration_virtual_networks, list):
            raise TypeError("Expected argument 'registration_virtual_networks' to be a list")
        __self__.registration_virtual_networks = registration_virtual_networks
        """
        A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
        """
        if resolution_virtual_networks and not isinstance(resolution_virtual_networks, list):
            raise TypeError("Expected argument 'resolution_virtual_networks' to be a list")
        __self__.resolution_virtual_networks = resolution_virtual_networks
        """
        A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if zone_type and not isinstance(zone_type, str):
            raise TypeError("Expected argument 'zone_type' to be a str")
        __self__.zone_type = zone_type
        """
        The type of this DNS zone (Public or Private).
        """


class AwaitableGetZoneResult(GetZoneResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZoneResult(
            etag=self.etag,
            location=self.location,
            max_number_of_record_sets=self.max_number_of_record_sets,
            name=self.name,
            name_servers=self.name_servers,
            number_of_record_sets=self.number_of_record_sets,
            registration_virtual_networks=self.registration_virtual_networks,
            resolution_virtual_networks=self.resolution_virtual_networks,
            tags=self.tags,
            type=self.type,
            zone_type=self.zone_type)


def get_zone(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the DNS zone (without a terminating dot).
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20180501:getZone', __args__, opts=opts).value

    return AwaitableGetZoneResult(
        etag=__ret__.get('etag'),
        location=__ret__.get('location'),
        max_number_of_record_sets=__ret__.get('maxNumberOfRecordSets'),
        name=__ret__.get('name'),
        name_servers=__ret__.get('nameServers'),
        number_of_record_sets=__ret__.get('numberOfRecordSets'),
        registration_virtual_networks=__ret__.get('registrationVirtualNetworks'),
        resolution_virtual_networks=__ret__.get('resolutionVirtualNetworks'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        zone_type=__ret__.get('zoneType'))
