# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetVirtualHubIpConfigurationResult:
    """
    IpConfigurations.
    """
    def __init__(__self__, etag=None, name=None, private_ip_address=None, private_ip_allocation_method=None, provisioning_state=None, public_ip_address=None, subnet=None, type=None):
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Name of the Ip Configuration.
        """
        if private_ip_address and not isinstance(private_ip_address, str):
            raise TypeError("Expected argument 'private_ip_address' to be a str")
        __self__.private_ip_address = private_ip_address
        """
        The private IP address of the IP configuration.
        """
        if private_ip_allocation_method and not isinstance(private_ip_allocation_method, str):
            raise TypeError("Expected argument 'private_ip_allocation_method' to be a str")
        __self__.private_ip_allocation_method = private_ip_allocation_method
        """
        The private IP address allocation method.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the IP configuration resource.
        """
        if public_ip_address and not isinstance(public_ip_address, dict):
            raise TypeError("Expected argument 'public_ip_address' to be a dict")
        __self__.public_ip_address = public_ip_address
        """
        The reference to the public IP resource.
        """
        if subnet and not isinstance(subnet, dict):
            raise TypeError("Expected argument 'subnet' to be a dict")
        __self__.subnet = subnet
        """
        The reference to the subnet resource.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Ipconfiguration type.
        """


class AwaitableGetVirtualHubIpConfigurationResult(GetVirtualHubIpConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualHubIpConfigurationResult(
            etag=self.etag,
            name=self.name,
            private_ip_address=self.private_ip_address,
            private_ip_allocation_method=self.private_ip_allocation_method,
            provisioning_state=self.provisioning_state,
            public_ip_address=self.public_ip_address,
            subnet=self.subnet,
            type=self.type)


def get_virtual_hub_ip_configuration(name=None, resource_group_name=None, virtual_hub_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the ipconfig.
    :param str resource_group_name: The resource group name of the VirtualHub.
    :param str virtual_hub_name: The name of the VirtualHub.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['virtualHubName'] = virtual_hub_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20200501:getVirtualHubIpConfiguration', __args__, opts=opts).value

    return AwaitableGetVirtualHubIpConfigurationResult(
        etag=__ret__.get('etag'),
        name=__ret__.get('name'),
        private_ip_address=__ret__.get('privateIPAddress'),
        private_ip_allocation_method=__ret__.get('privateIPAllocationMethod'),
        provisioning_state=__ret__.get('provisioningState'),
        public_ip_address=__ret__.get('publicIPAddress'),
        subnet=__ret__.get('subnet'),
        type=__ret__.get('type'))
