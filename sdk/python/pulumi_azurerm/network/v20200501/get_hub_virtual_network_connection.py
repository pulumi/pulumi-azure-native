# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetHubVirtualNetworkConnectionResult:
    """
    HubVirtualNetworkConnection Resource.
    """
    def __init__(__self__, allow_hub_to_remote_vnet_transit=None, allow_remote_vnet_to_use_hub_vnet_gateways=None, enable_internet_security=None, etag=None, name=None, provisioning_state=None, remote_virtual_network=None, routing_configuration=None):
        if allow_hub_to_remote_vnet_transit and not isinstance(allow_hub_to_remote_vnet_transit, bool):
            raise TypeError("Expected argument 'allow_hub_to_remote_vnet_transit' to be a bool")
        __self__.allow_hub_to_remote_vnet_transit = allow_hub_to_remote_vnet_transit
        """
        Deprecated: VirtualHub to RemoteVnet transit to enabled or not.
        """
        if allow_remote_vnet_to_use_hub_vnet_gateways and not isinstance(allow_remote_vnet_to_use_hub_vnet_gateways, bool):
            raise TypeError("Expected argument 'allow_remote_vnet_to_use_hub_vnet_gateways' to be a bool")
        __self__.allow_remote_vnet_to_use_hub_vnet_gateways = allow_remote_vnet_to_use_hub_vnet_gateways
        """
        Deprecated: Allow RemoteVnet to use Virtual Hub's gateways.
        """
        if enable_internet_security and not isinstance(enable_internet_security, bool):
            raise TypeError("Expected argument 'enable_internet_security' to be a bool")
        __self__.enable_internet_security = enable_internet_security
        """
        Enable internet security.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource that is unique within a resource group. This name can be used to access the resource.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the hub virtual network connection resource.
        """
        if remote_virtual_network and not isinstance(remote_virtual_network, dict):
            raise TypeError("Expected argument 'remote_virtual_network' to be a dict")
        __self__.remote_virtual_network = remote_virtual_network
        """
        Reference to the remote virtual network.
        """
        if routing_configuration and not isinstance(routing_configuration, dict):
            raise TypeError("Expected argument 'routing_configuration' to be a dict")
        __self__.routing_configuration = routing_configuration
        """
        The Routing Configuration indicating the associated and propagated route tables on this connection.
        """


class AwaitableGetHubVirtualNetworkConnectionResult(GetHubVirtualNetworkConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHubVirtualNetworkConnectionResult(
            allow_hub_to_remote_vnet_transit=self.allow_hub_to_remote_vnet_transit,
            allow_remote_vnet_to_use_hub_vnet_gateways=self.allow_remote_vnet_to_use_hub_vnet_gateways,
            enable_internet_security=self.enable_internet_security,
            etag=self.etag,
            name=self.name,
            provisioning_state=self.provisioning_state,
            remote_virtual_network=self.remote_virtual_network,
            routing_configuration=self.routing_configuration)


def get_hub_virtual_network_connection(name=None, resource_group_name=None, virtual_hub_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the vpn connection.
    :param str resource_group_name: The resource group name of the VirtualHub.
    :param str virtual_hub_name: The name of the VirtualHub.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['virtualHubName'] = virtual_hub_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20200501:getHubVirtualNetworkConnection', __args__, opts=opts).value

    return AwaitableGetHubVirtualNetworkConnectionResult(
        allow_hub_to_remote_vnet_transit=__ret__.get('allowHubToRemoteVnetTransit'),
        allow_remote_vnet_to_use_hub_vnet_gateways=__ret__.get('allowRemoteVnetToUseHubVnetGateways'),
        enable_internet_security=__ret__.get('enableInternetSecurity'),
        etag=__ret__.get('etag'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        remote_virtual_network=__ret__.get('remoteVirtualNetwork'),
        routing_configuration=__ret__.get('routingConfiguration'))
