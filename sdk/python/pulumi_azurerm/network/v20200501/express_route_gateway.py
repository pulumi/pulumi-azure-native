# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class ExpressRouteGateway(pulumi.CustomResource):
    auto_scale_configuration: pulumi.Output[dict]
    """
    Configuration for auto scaling.
      * `bounds` (`dict`) - Minimum and maximum number of scale units to deploy.
        * `max` (`float`) - Maximum number of scale units deployed for ExpressRoute gateway.
        * `min` (`float`) - Minimum number of scale units deployed for ExpressRoute gateway.
    """
    etag: pulumi.Output[str]
    """
    A unique read-only string that changes whenever the resource is updated.
    """
    express_route_connections: pulumi.Output[list]
    """
    List of ExpressRoute connections to the ExpressRoute gateway.
      * `authorization_key` (`str`) - Authorization key to establish the connection.
      * `enable_internet_security` (`bool`) - Enable internet security.
      * `express_route_circuit_peering` (`dict`) - The ExpressRoute circuit peering.
        * `id` (`str`) - The ID of the ExpressRoute circuit peering.

      * `id` (`str`) - Resource ID.
      * `name` (`str`) - The name of the resource.
      * `provisioning_state` (`str`) - The provisioning state of the express route connection resource.
      * `routing_configuration` (`dict`) - The Routing Configuration indicating the associated and propagated route tables on this connection.
        * `associated_route_table` (`dict`) - The resource id RouteTable associated with this RoutingConfiguration.
          * `id` (`str`) - Resource ID.

        * `propagated_route_tables` (`dict`) - The list of RouteTables to advertise the routes to.
          * `ids` (`list`) - The list of resource ids of all the RouteTables.
          * `labels` (`list`) - The list of labels.

        * `vnet_routes` (`dict`) - List of routes that control routing from VirtualHub into a virtual network connection.
          * `static_routes` (`list`) - List of all Static Routes.
            * `address_prefixes` (`list`) - List of all address prefixes.
            * `name` (`str`) - The name of the StaticRoute that is unique within a VnetRoute.
            * `next_hop_ip_address` (`str`) - The ip address of the next hop.

      * `routing_weight` (`float`) - The routing weight associated to the connection.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    provisioning_state: pulumi.Output[str]
    """
    The provisioning state of the express route gateway resource.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    virtual_hub: pulumi.Output[dict]
    """
    The Virtual Hub where the ExpressRoute gateway is or will be deployed.
      * `id` (`str`) - The resource URI for the Virtual Hub where the ExpressRoute gateway is or will be deployed. The Virtual Hub resource and the ExpressRoute gateway resource reside in the same subscription.
    """
    def __init__(__self__, resource_name, opts=None, auto_scale_configuration=None, id=None, location=None, name=None, resource_group_name=None, tags=None, virtual_hub=None, __props__=None, __name__=None, __opts__=None):
        """
        ExpressRoute gateway resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] auto_scale_configuration: Configuration for auto scaling.
        :param pulumi.Input[str] id: Resource ID.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: The name of the ExpressRoute gateway.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[dict] virtual_hub: The Virtual Hub where the ExpressRoute gateway is or will be deployed.

        The **auto_scale_configuration** object supports the following:

          * `bounds` (`pulumi.Input[dict]`) - Minimum and maximum number of scale units to deploy.
            * `max` (`pulumi.Input[float]`) - Maximum number of scale units deployed for ExpressRoute gateway.
            * `min` (`pulumi.Input[float]`) - Minimum number of scale units deployed for ExpressRoute gateway.

        The **virtual_hub** object supports the following:

          * `id` (`pulumi.Input[str]`) - The resource URI for the Virtual Hub where the ExpressRoute gateway is or will be deployed. The Virtual Hub resource and the ExpressRoute gateway resource reside in the same subscription.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['auto_scale_configuration'] = auto_scale_configuration
            __props__['id'] = id
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            if virtual_hub is None:
                raise TypeError("Missing required property 'virtual_hub'")
            __props__['virtual_hub'] = virtual_hub
            __props__['etag'] = None
            __props__['express_route_connections'] = None
            __props__['provisioning_state'] = None
            __props__['type'] = None
        super(ExpressRouteGateway, __self__).__init__(
            'azurerm:network/v20200501:ExpressRouteGateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing ExpressRouteGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return ExpressRouteGateway(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
