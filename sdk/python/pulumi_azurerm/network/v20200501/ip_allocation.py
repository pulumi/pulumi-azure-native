# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class IpAllocation(pulumi.CustomResource):
    allocation_tags: pulumi.Output[dict]
    """
    IpAllocation tags.
    """
    etag: pulumi.Output[str]
    """
    A unique read-only string that changes whenever the resource is updated.
    """
    ipam_allocation_id: pulumi.Output[str]
    """
    The IPAM allocation ID.
    """
    location: pulumi.Output[str]
    """
    Resource location.
    """
    name: pulumi.Output[str]
    """
    Resource name.
    """
    prefix: pulumi.Output[str]
    """
    The address prefix for the IpAllocation.
    """
    prefix_length: pulumi.Output[float]
    """
    The address prefix length for the IpAllocation.
    """
    prefix_type: pulumi.Output[str]
    """
    The address prefix Type for the IpAllocation.
    """
    subnet: pulumi.Output[dict]
    """
    The Subnet that using the prefix of this IpAllocation resource.
      * `id` (`str`) - Resource ID.
    """
    tags: pulumi.Output[dict]
    """
    Resource tags.
    """
    type: pulumi.Output[str]
    """
    Resource type.
    """
    virtual_network: pulumi.Output[dict]
    """
    The VirtualNetwork that using the prefix of this IpAllocation resource.
      * `id` (`str`) - Resource ID.
    """
    def __init__(__self__, resource_name, opts=None, allocation_tags=None, id=None, ipam_allocation_id=None, location=None, name=None, prefix=None, prefix_length=None, prefix_type=None, resource_group_name=None, tags=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        IpAllocation resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] allocation_tags: IpAllocation tags.
        :param pulumi.Input[str] id: Resource ID.
        :param pulumi.Input[str] ipam_allocation_id: The IPAM allocation ID.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[str] name: The name of the IpAllocation.
        :param pulumi.Input[str] prefix: The address prefix for the IpAllocation.
        :param pulumi.Input[float] prefix_length: The address prefix length for the IpAllocation.
        :param pulumi.Input[str] prefix_type: The address prefix Type for the IpAllocation.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.
        :param pulumi.Input[dict] tags: Resource tags.
        :param pulumi.Input[str] type: The type for the IpAllocation.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allocation_tags'] = allocation_tags
            __props__['id'] = id
            __props__['ipam_allocation_id'] = ipam_allocation_id
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['prefix'] = prefix
            __props__['prefix_length'] = prefix_length
            __props__['prefix_type'] = prefix_type
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['type'] = type
            __props__['etag'] = None
            __props__['subnet'] = None
            __props__['virtual_network'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azurerm:network/v20200301:IpAllocation"), pulumi.Alias(type_="azurerm:network/v20200401:IpAllocation")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(IpAllocation, __self__).__init__(
            'azurerm:network/v20200501:IpAllocation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing IpAllocation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return IpAllocation(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
