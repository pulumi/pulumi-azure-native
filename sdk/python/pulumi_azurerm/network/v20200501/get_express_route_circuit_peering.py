# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetExpressRouteCircuitPeeringResult:
    """
    Peering in an ExpressRouteCircuit resource.
    """
    def __init__(__self__, azure_asn=None, connections=None, etag=None, express_route_connection=None, gateway_manager_etag=None, ipv6_peering_config=None, last_modified_by=None, microsoft_peering_config=None, name=None, peer_asn=None, peered_connections=None, peering_type=None, primary_azure_port=None, primary_peer_address_prefix=None, provisioning_state=None, route_filter=None, secondary_azure_port=None, secondary_peer_address_prefix=None, shared_key=None, state=None, stats=None, type=None, vlan_id=None):
        if azure_asn and not isinstance(azure_asn, float):
            raise TypeError("Expected argument 'azure_asn' to be a float")
        __self__.azure_asn = azure_asn
        """
        The Azure ASN.
        """
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        __self__.connections = connections
        """
        The list of circuit connections associated with Azure Private Peering for this circuit.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if express_route_connection and not isinstance(express_route_connection, dict):
            raise TypeError("Expected argument 'express_route_connection' to be a dict")
        __self__.express_route_connection = express_route_connection
        """
        The ExpressRoute connection.
        """
        if gateway_manager_etag and not isinstance(gateway_manager_etag, str):
            raise TypeError("Expected argument 'gateway_manager_etag' to be a str")
        __self__.gateway_manager_etag = gateway_manager_etag
        """
        The GatewayManager Etag.
        """
        if ipv6_peering_config and not isinstance(ipv6_peering_config, dict):
            raise TypeError("Expected argument 'ipv6_peering_config' to be a dict")
        __self__.ipv6_peering_config = ipv6_peering_config
        """
        The IPv6 peering configuration.
        """
        if last_modified_by and not isinstance(last_modified_by, str):
            raise TypeError("Expected argument 'last_modified_by' to be a str")
        __self__.last_modified_by = last_modified_by
        """
        Who was the last to modify the peering.
        """
        if microsoft_peering_config and not isinstance(microsoft_peering_config, dict):
            raise TypeError("Expected argument 'microsoft_peering_config' to be a dict")
        __self__.microsoft_peering_config = microsoft_peering_config
        """
        The Microsoft peering configuration.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource that is unique within a resource group. This name can be used to access the resource.
        """
        if peer_asn and not isinstance(peer_asn, float):
            raise TypeError("Expected argument 'peer_asn' to be a float")
        __self__.peer_asn = peer_asn
        """
        The peer ASN.
        """
        if peered_connections and not isinstance(peered_connections, list):
            raise TypeError("Expected argument 'peered_connections' to be a list")
        __self__.peered_connections = peered_connections
        """
        The list of peered circuit connections associated with Azure Private Peering for this circuit.
        """
        if peering_type and not isinstance(peering_type, str):
            raise TypeError("Expected argument 'peering_type' to be a str")
        __self__.peering_type = peering_type
        """
        The peering type.
        """
        if primary_azure_port and not isinstance(primary_azure_port, str):
            raise TypeError("Expected argument 'primary_azure_port' to be a str")
        __self__.primary_azure_port = primary_azure_port
        """
        The primary port.
        """
        if primary_peer_address_prefix and not isinstance(primary_peer_address_prefix, str):
            raise TypeError("Expected argument 'primary_peer_address_prefix' to be a str")
        __self__.primary_peer_address_prefix = primary_peer_address_prefix
        """
        The primary address prefix.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the express route circuit peering resource.
        """
        if route_filter and not isinstance(route_filter, dict):
            raise TypeError("Expected argument 'route_filter' to be a dict")
        __self__.route_filter = route_filter
        """
        The reference to the RouteFilter resource.
        """
        if secondary_azure_port and not isinstance(secondary_azure_port, str):
            raise TypeError("Expected argument 'secondary_azure_port' to be a str")
        __self__.secondary_azure_port = secondary_azure_port
        """
        The secondary port.
        """
        if secondary_peer_address_prefix and not isinstance(secondary_peer_address_prefix, str):
            raise TypeError("Expected argument 'secondary_peer_address_prefix' to be a str")
        __self__.secondary_peer_address_prefix = secondary_peer_address_prefix
        """
        The secondary address prefix.
        """
        if shared_key and not isinstance(shared_key, str):
            raise TypeError("Expected argument 'shared_key' to be a str")
        __self__.shared_key = shared_key
        """
        The shared key.
        """
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        __self__.state = state
        """
        The peering state.
        """
        if stats and not isinstance(stats, dict):
            raise TypeError("Expected argument 'stats' to be a dict")
        __self__.stats = stats
        """
        The peering stats of express route circuit.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Type of the resource.
        """
        if vlan_id and not isinstance(vlan_id, float):
            raise TypeError("Expected argument 'vlan_id' to be a float")
        __self__.vlan_id = vlan_id
        """
        The VLAN ID.
        """


class AwaitableGetExpressRouteCircuitPeeringResult(GetExpressRouteCircuitPeeringResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExpressRouteCircuitPeeringResult(
            azure_asn=self.azure_asn,
            connections=self.connections,
            etag=self.etag,
            express_route_connection=self.express_route_connection,
            gateway_manager_etag=self.gateway_manager_etag,
            ipv6_peering_config=self.ipv6_peering_config,
            last_modified_by=self.last_modified_by,
            microsoft_peering_config=self.microsoft_peering_config,
            name=self.name,
            peer_asn=self.peer_asn,
            peered_connections=self.peered_connections,
            peering_type=self.peering_type,
            primary_azure_port=self.primary_azure_port,
            primary_peer_address_prefix=self.primary_peer_address_prefix,
            provisioning_state=self.provisioning_state,
            route_filter=self.route_filter,
            secondary_azure_port=self.secondary_azure_port,
            secondary_peer_address_prefix=self.secondary_peer_address_prefix,
            shared_key=self.shared_key,
            state=self.state,
            stats=self.stats,
            type=self.type,
            vlan_id=self.vlan_id)


def get_express_route_circuit_peering(circuit_name=None, name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str circuit_name: The name of the express route circuit.
    :param str name: The name of the peering.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['circuitName'] = circuit_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20200501:getExpressRouteCircuitPeering', __args__, opts=opts).value

    return AwaitableGetExpressRouteCircuitPeeringResult(
        azure_asn=__ret__.get('azureASN'),
        connections=__ret__.get('connections'),
        etag=__ret__.get('etag'),
        express_route_connection=__ret__.get('expressRouteConnection'),
        gateway_manager_etag=__ret__.get('gatewayManagerEtag'),
        ipv6_peering_config=__ret__.get('ipv6PeeringConfig'),
        last_modified_by=__ret__.get('lastModifiedBy'),
        microsoft_peering_config=__ret__.get('microsoftPeeringConfig'),
        name=__ret__.get('name'),
        peer_asn=__ret__.get('peerASN'),
        peered_connections=__ret__.get('peeredConnections'),
        peering_type=__ret__.get('peeringType'),
        primary_azure_port=__ret__.get('primaryAzurePort'),
        primary_peer_address_prefix=__ret__.get('primaryPeerAddressPrefix'),
        provisioning_state=__ret__.get('provisioningState'),
        route_filter=__ret__.get('routeFilter'),
        secondary_azure_port=__ret__.get('secondaryAzurePort'),
        secondary_peer_address_prefix=__ret__.get('secondaryPeerAddressPrefix'),
        shared_key=__ret__.get('sharedKey'),
        state=__ret__.get('state'),
        stats=__ret__.get('stats'),
        type=__ret__.get('type'),
        vlan_id=__ret__.get('vlanId'))
