# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class ExpressRouteGatewayExpressRouteConnection(pulumi.CustomResource):
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    properties: pulumi.Output[dict]
    """
    Properties of the express route connection.
      * `authorization_key` (`str`) - Authorization key to establish the connection.
      * `enable_internet_security` (`bool`) - Enable internet security.
      * `express_route_circuit_peering` (`dict`) - The ExpressRoute circuit peering.
        * `id` (`str`) - The ID of the ExpressRoute circuit peering.

      * `provisioning_state` (`str`) - The provisioning state of the express route connection resource.
      * `routing_configuration` (`dict`) - The Routing Configuration indicating the associated and propagated route tables on this connection.
        * `associated_route_table` (`dict`) - The resource id RouteTable associated with this RoutingConfiguration.
          * `id` (`str`) - Resource ID.

        * `propagated_route_tables` (`dict`) - The list of RouteTables to advertise the routes to.
          * `ids` (`list`) - The list of resource ids of all the RouteTables.
          * `labels` (`list`) - The list of labels.

        * `vnet_routes` (`dict`) - List of routes that control routing from VirtualHub into a virtual network connection.
          * `static_routes` (`list`) - List of all Static Routes.
            * `address_prefixes` (`list`) - List of all address prefixes.
            * `name` (`str`) - The name of the StaticRoute that is unique within a VnetRoute.
            * `next_hop_ip_address` (`str`) - The ip address of the next hop.

      * `routing_weight` (`float`) - The routing weight associated to the connection.
    """
    def __init__(__self__, resource_name, opts=None, connection_name=None, express_route_gateway_name=None, id=None, name=None, properties=None, resource_group_name=None, __props__=None, __name__=None, __opts__=None):
        """
        ExpressRouteConnection resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] connection_name: The name of the connection subresource.
        :param pulumi.Input[str] express_route_gateway_name: The name of the ExpressRoute gateway.
        :param pulumi.Input[str] id: Resource ID.
        :param pulumi.Input[str] name: The name of the resource.
        :param pulumi.Input[dict] properties: Properties of the express route connection.
        :param pulumi.Input[str] resource_group_name: The name of the resource group.

        The **properties** object supports the following:

          * `authorization_key` (`pulumi.Input[str]`) - Authorization key to establish the connection.
          * `enable_internet_security` (`pulumi.Input[bool]`) - Enable internet security.
          * `express_route_circuit_peering` (`pulumi.Input[dict]`) - The ExpressRoute circuit peering.
            * `id` (`pulumi.Input[str]`) - The ID of the ExpressRoute circuit peering.

          * `routing_configuration` (`pulumi.Input[dict]`) - The Routing Configuration indicating the associated and propagated route tables on this connection.
            * `associated_route_table` (`pulumi.Input[dict]`) - The resource id RouteTable associated with this RoutingConfiguration.
              * `id` (`pulumi.Input[str]`) - Resource ID.

            * `propagated_route_tables` (`pulumi.Input[dict]`) - The list of RouteTables to advertise the routes to.
              * `ids` (`pulumi.Input[list]`) - The list of resource ids of all the RouteTables.
              * `labels` (`pulumi.Input[list]`) - The list of labels.

            * `vnet_routes` (`pulumi.Input[dict]`) - List of routes that control routing from VirtualHub into a virtual network connection.
              * `static_routes` (`pulumi.Input[list]`) - List of all Static Routes.
                * `address_prefixes` (`pulumi.Input[list]`) - List of all address prefixes.
                * `name` (`pulumi.Input[str]`) - The name of the StaticRoute that is unique within a VnetRoute.
                * `next_hop_ip_address` (`pulumi.Input[str]`) - The ip address of the next hop.

          * `routing_weight` (`pulumi.Input[float]`) - The routing weight associated to the connection.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if connection_name is None:
                raise TypeError("Missing required property 'connection_name'")
            __props__['connection_name'] = connection_name
            if express_route_gateway_name is None:
                raise TypeError("Missing required property 'express_route_gateway_name'")
            __props__['express_route_gateway_name'] = express_route_gateway_name
            __props__['id'] = id
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['properties'] = properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
        super(ExpressRouteGatewayExpressRouteConnection, __self__).__init__(
            'azurerm:network:ExpressRouteGatewayExpressRouteConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, name=None, properties=None):
        """
        Get an existing ExpressRouteGatewayExpressRouteConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the resource.
        :param pulumi.Input[dict] properties: Properties of the express route connection.

        The **properties** object supports the following:

          * `authorization_key` (`pulumi.Input[str]`) - Authorization key to establish the connection.
          * `enable_internet_security` (`pulumi.Input[bool]`) - Enable internet security.
          * `express_route_circuit_peering` (`pulumi.Input[dict]`) - The ExpressRoute circuit peering.
            * `id` (`pulumi.Input[str]`) - The ID of the ExpressRoute circuit peering.

          * `provisioning_state` (`pulumi.Input[str]`) - The provisioning state of the express route connection resource.
          * `routing_configuration` (`pulumi.Input[dict]`) - The Routing Configuration indicating the associated and propagated route tables on this connection.
            * `associated_route_table` (`pulumi.Input[dict]`) - The resource id RouteTable associated with this RoutingConfiguration.
              * `id` (`pulumi.Input[str]`) - Resource ID.

            * `propagated_route_tables` (`pulumi.Input[dict]`) - The list of RouteTables to advertise the routes to.
              * `ids` (`pulumi.Input[list]`) - The list of resource ids of all the RouteTables.
              * `labels` (`pulumi.Input[list]`) - The list of labels.

            * `vnet_routes` (`pulumi.Input[dict]`) - List of routes that control routing from VirtualHub into a virtual network connection.
              * `static_routes` (`pulumi.Input[list]`) - List of all Static Routes.
                * `address_prefixes` (`pulumi.Input[list]`) - List of all address prefixes.
                * `name` (`pulumi.Input[str]`) - The name of the StaticRoute that is unique within a VnetRoute.
                * `next_hop_ip_address` (`pulumi.Input[str]`) - The ip address of the next hop.

          * `routing_weight` (`pulumi.Input[float]`) - The routing weight associated to the connection.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["name"] = name
        __props__["properties"] = properties
        return ExpressRouteGatewayExpressRouteConnection(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
