# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetPublicIPPrefixResult:
    """
    Public IP prefix resource.
    """
    def __init__(__self__, etag=None, ip_prefix=None, ip_tags=None, load_balancer_frontend_ip_configuration=None, location=None, name=None, prefix_length=None, provisioning_state=None, public_ip_address_version=None, public_ip_addresses=None, resource_guid=None, sku=None, tags=None, type=None, zones=None):
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if ip_prefix and not isinstance(ip_prefix, str):
            raise TypeError("Expected argument 'ip_prefix' to be a str")
        __self__.ip_prefix = ip_prefix
        """
        The allocated Prefix
        """
        if ip_tags and not isinstance(ip_tags, list):
            raise TypeError("Expected argument 'ip_tags' to be a list")
        __self__.ip_tags = ip_tags
        """
        The list of tags associated with the public IP prefix.
        """
        if load_balancer_frontend_ip_configuration and not isinstance(load_balancer_frontend_ip_configuration, dict):
            raise TypeError("Expected argument 'load_balancer_frontend_ip_configuration' to be a dict")
        __self__.load_balancer_frontend_ip_configuration = load_balancer_frontend_ip_configuration
        """
        The reference to load balancer frontend IP configuration associated with the public IP prefix.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if prefix_length and not isinstance(prefix_length, float):
            raise TypeError("Expected argument 'prefix_length' to be a float")
        __self__.prefix_length = prefix_length
        """
        The Length of the Public IP Prefix.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the Public IP prefix resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        """
        if public_ip_address_version and not isinstance(public_ip_address_version, str):
            raise TypeError("Expected argument 'public_ip_address_version' to be a str")
        __self__.public_ip_address_version = public_ip_address_version
        """
        The public IP address version. Possible values are: 'IPv4' and 'IPv6'.
        """
        if public_ip_addresses and not isinstance(public_ip_addresses, list):
            raise TypeError("Expected argument 'public_ip_addresses' to be a list")
        __self__.public_ip_addresses = public_ip_addresses
        """
        The list of all referenced PublicIPAddresses
        """
        if resource_guid and not isinstance(resource_guid, str):
            raise TypeError("Expected argument 'resource_guid' to be a str")
        __self__.resource_guid = resource_guid
        """
        The resource GUID property of the public IP prefix resource.
        """
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        __self__.sku = sku
        """
        The public IP prefix SKU.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        __self__.zones = zones
        """
        A list of availability zones denoting the IP allocated for the resource needs to come from.
        """


class AwaitableGetPublicIPPrefixResult(GetPublicIPPrefixResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublicIPPrefixResult(
            etag=self.etag,
            ip_prefix=self.ip_prefix,
            ip_tags=self.ip_tags,
            load_balancer_frontend_ip_configuration=self.load_balancer_frontend_ip_configuration,
            location=self.location,
            name=self.name,
            prefix_length=self.prefix_length,
            provisioning_state=self.provisioning_state,
            public_ip_address_version=self.public_ip_address_version,
            public_ip_addresses=self.public_ip_addresses,
            resource_guid=self.resource_guid,
            sku=self.sku,
            tags=self.tags,
            type=self.type,
            zones=self.zones)


def get_public_ip_prefix(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the PublicIPPrefix.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20181101:getPublicIPPrefix', __args__, opts=opts).value

    return AwaitableGetPublicIPPrefixResult(
        etag=__ret__.get('etag'),
        ip_prefix=__ret__.get('ipPrefix'),
        ip_tags=__ret__.get('ipTags'),
        load_balancer_frontend_ip_configuration=__ret__.get('loadBalancerFrontendIpConfiguration'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        prefix_length=__ret__.get('prefixLength'),
        provisioning_state=__ret__.get('provisioningState'),
        public_ip_address_version=__ret__.get('publicIPAddressVersion'),
        public_ip_addresses=__ret__.get('publicIPAddresses'),
        resource_guid=__ret__.get('resourceGuid'),
        sku=__ret__.get('sku'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        zones=__ret__.get('zones'))
