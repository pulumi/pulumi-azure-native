# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetInterfaceEndpointResult:
    """
    Interface endpoint resource.
    """
    def __init__(__self__, endpoint_service=None, etag=None, fqdn=None, location=None, name=None, network_interfaces=None, owner=None, provisioning_state=None, subnet=None, tags=None, type=None):
        if endpoint_service and not isinstance(endpoint_service, dict):
            raise TypeError("Expected argument 'endpoint_service' to be a dict")
        __self__.endpoint_service = endpoint_service
        """
        A reference to the service being brought into the virtual network.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        Gets a unique read-only string that changes whenever the resource is updated.
        """
        if fqdn and not isinstance(fqdn, str):
            raise TypeError("Expected argument 'fqdn' to be a str")
        __self__.fqdn = fqdn
        """
        A first-party service's FQDN that is mapped to the private IP allocated via this interface endpoint.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Resource name.
        """
        if network_interfaces and not isinstance(network_interfaces, list):
            raise TypeError("Expected argument 'network_interfaces' to be a list")
        __self__.network_interfaces = network_interfaces
        """
        Gets an array of references to the network interfaces created for this interface endpoint.
        """
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        __self__.owner = owner
        """
        A read-only property that identifies who created this interface endpoint.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the interface endpoint. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        """
        if subnet and not isinstance(subnet, dict):
            raise TypeError("Expected argument 'subnet' to be a dict")
        __self__.subnet = subnet
        """
        The ID of the subnet from which the private IP will be allocated.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        Resource tags.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Resource type.
        """


class AwaitableGetInterfaceEndpointResult(GetInterfaceEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInterfaceEndpointResult(
            endpoint_service=self.endpoint_service,
            etag=self.etag,
            fqdn=self.fqdn,
            location=self.location,
            name=self.name,
            network_interfaces=self.network_interfaces,
            owner=self.owner,
            provisioning_state=self.provisioning_state,
            subnet=self.subnet,
            tags=self.tags,
            type=self.type)


def get_interface_endpoint(name=None, resource_group_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the interface endpoint.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20181101:getInterfaceEndpoint', __args__, opts=opts).value

    return AwaitableGetInterfaceEndpointResult(
        endpoint_service=__ret__.get('endpointService'),
        etag=__ret__.get('etag'),
        fqdn=__ret__.get('fqdn'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        network_interfaces=__ret__.get('networkInterfaces'),
        owner=__ret__.get('owner'),
        provisioning_state=__ret__.get('provisioningState'),
        subnet=__ret__.get('subnet'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'))
