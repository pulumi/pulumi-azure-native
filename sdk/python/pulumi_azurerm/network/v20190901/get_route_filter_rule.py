# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetRouteFilterRuleResult:
    """
    Route Filter Rule Resource.
    """
    def __init__(__self__, access=None, communities=None, etag=None, location=None, name=None, provisioning_state=None, route_filter_rule_type=None):
        if access and not isinstance(access, str):
            raise TypeError("Expected argument 'access' to be a str")
        __self__.access = access
        """
        The access type of the rule.
        """
        if communities and not isinstance(communities, list):
            raise TypeError("Expected argument 'communities' to be a list")
        __self__.communities = communities
        """
        The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        Resource location.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource that is unique within a resource group. This name can be used to access the resource.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        The provisioning state of the route filter rule resource.
        """
        if route_filter_rule_type and not isinstance(route_filter_rule_type, str):
            raise TypeError("Expected argument 'route_filter_rule_type' to be a str")
        __self__.route_filter_rule_type = route_filter_rule_type
        """
        The rule type of the rule.
        """


class AwaitableGetRouteFilterRuleResult(GetRouteFilterRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouteFilterRuleResult(
            access=self.access,
            communities=self.communities,
            etag=self.etag,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            route_filter_rule_type=self.route_filter_rule_type)


def get_route_filter_rule(name=None, resource_group_name=None, route_filter_name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the rule.
    :param str resource_group_name: The name of the resource group.
    :param str route_filter_name: The name of the route filter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['routeFilterName'] = route_filter_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:network/v20190901:getRouteFilterRule', __args__, opts=opts).value

    return AwaitableGetRouteFilterRuleResult(
        access=__ret__.get('access'),
        communities=__ret__.get('communities'),
        etag=__ret__.get('etag'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        route_filter_rule_type=__ret__.get('routeFilterRuleType'))
