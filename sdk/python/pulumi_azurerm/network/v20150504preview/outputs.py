# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ARecordResponse',
    'AaaaRecordResponse',
    'CnameRecordResponse',
    'MxRecordResponse',
    'NsRecordResponse',
    'PtrRecordResponse',
    'RecordSetPropertiesResponse',
    'SoaRecordResponse',
    'SrvRecordResponse',
    'TxtRecordResponse',
    'ZonePropertiesResponse',
]

@pulumi.output_type
class ARecordResponse(dict):
    """
    An A record.
    """
    def __init__(__self__, *,
                 ipv4_address: Optional[str] = None):
        """
        An A record.
        :param str ipv4_address: Gets or sets the IPv4 address of this A record in string notation.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        """
        Gets or sets the IPv4 address of this A record in string notation.
        """
        return pulumi.get(self, "ipv4_address")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AaaaRecordResponse(dict):
    """
    An AAAA record.
    """
    def __init__(__self__, *,
                 ipv6_address: Optional[str] = None):
        """
        An AAAA record.
        :param str ipv6_address: Gets or sets the IPv6 address of this AAAA record in string notation.
        """
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        """
        Gets or sets the IPv6 address of this AAAA record in string notation.
        """
        return pulumi.get(self, "ipv6_address")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CnameRecordResponse(dict):
    """
    A CNAME record.
    """
    def __init__(__self__, *,
                 cname: Optional[str] = None):
        """
        A CNAME record.
        :param str cname: Gets or sets the canonical name for this record without a terminating dot.
        """
        if cname is not None:
            pulumi.set(__self__, "cname", cname)

    @property
    @pulumi.getter
    def cname(self) -> Optional[str]:
        """
        Gets or sets the canonical name for this record without a terminating dot.
        """
        return pulumi.get(self, "cname")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MxRecordResponse(dict):
    """
    An MX record.
    """
    def __init__(__self__, *,
                 exchange: Optional[str] = None,
                 preference: Optional[int] = None):
        """
        An MX record.
        :param str exchange: Gets or sets the domain name of the mail host, without a terminating dot.
        :param int preference: Gets or sets the preference metric for this record.
        """
        if exchange is not None:
            pulumi.set(__self__, "exchange", exchange)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def exchange(self) -> Optional[str]:
        """
        Gets or sets the domain name of the mail host, without a terminating dot.
        """
        return pulumi.get(self, "exchange")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        """
        Gets or sets the preference metric for this record.
        """
        return pulumi.get(self, "preference")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NsRecordResponse(dict):
    """
    An NS record.
    """
    def __init__(__self__, *,
                 nsdname: Optional[str] = None):
        """
        An NS record.
        :param str nsdname: Gets or sets the name server name for this record, without a terminating dot.
        """
        if nsdname is not None:
            pulumi.set(__self__, "nsdname", nsdname)

    @property
    @pulumi.getter
    def nsdname(self) -> Optional[str]:
        """
        Gets or sets the name server name for this record, without a terminating dot.
        """
        return pulumi.get(self, "nsdname")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PtrRecordResponse(dict):
    """
    A PTR record.
    """
    def __init__(__self__, *,
                 ptrdname: Optional[str] = None):
        """
        A PTR record.
        :param str ptrdname: Gets or sets the PTR target domain name for this record without a terminating dot.
        """
        if ptrdname is not None:
            pulumi.set(__self__, "ptrdname", ptrdname)

    @property
    @pulumi.getter
    def ptrdname(self) -> Optional[str]:
        """
        Gets or sets the PTR target domain name for this record without a terminating dot.
        """
        return pulumi.get(self, "ptrdname")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RecordSetPropertiesResponse(dict):
    """
    Represents the properties of the records in the RecordSet.
    """
    def __init__(__self__, *,
                 a_aaa_records: Optional[Sequence['outputs.AaaaRecordResponse']] = None,
                 a_records: Optional[Sequence['outputs.ARecordResponse']] = None,
                 c_name_record: Optional['outputs.CnameRecordResponse'] = None,
                 m_x_records: Optional[Sequence['outputs.MxRecordResponse']] = None,
                 n_s_records: Optional[Sequence['outputs.NsRecordResponse']] = None,
                 p_tr_records: Optional[Sequence['outputs.PtrRecordResponse']] = None,
                 s_oa_record: Optional['outputs.SoaRecordResponse'] = None,
                 s_rv_records: Optional[Sequence['outputs.SrvRecordResponse']] = None,
                 t_xt_records: Optional[Sequence['outputs.TxtRecordResponse']] = None,
                 ttl: Optional[int] = None):
        """
        Represents the properties of the records in the RecordSet.
        :param Sequence['AaaaRecordResponseArgs'] a_aaa_records: Gets or sets the list of AAAA records in the RecordSet.
        :param Sequence['ARecordResponseArgs'] a_records: Gets or sets the list of A records in the RecordSet.
        :param 'CnameRecordResponseArgs' c_name_record: Gets or sets the CNAME record in the RecordSet.
        :param Sequence['MxRecordResponseArgs'] m_x_records: Gets or sets the list of MX records in the RecordSet.
        :param Sequence['NsRecordResponseArgs'] n_s_records: Gets or sets the list of NS records in the RecordSet.
        :param Sequence['PtrRecordResponseArgs'] p_tr_records: Gets or sets the list of PTR records in the RecordSet.
        :param 'SoaRecordResponseArgs' s_oa_record: Gets or sets the SOA record in the RecordSet.
        :param Sequence['SrvRecordResponseArgs'] s_rv_records: Gets or sets the list of SRV records in the RecordSet.
        :param Sequence['TxtRecordResponseArgs'] t_xt_records: Gets or sets the list of TXT records in the RecordSet.
        :param int ttl: Gets or sets the TTL of the records in the RecordSet.
        """
        if a_aaa_records is not None:
            pulumi.set(__self__, "a_aaa_records", a_aaa_records)
        if a_records is not None:
            pulumi.set(__self__, "a_records", a_records)
        if c_name_record is not None:
            pulumi.set(__self__, "c_name_record", c_name_record)
        if m_x_records is not None:
            pulumi.set(__self__, "m_x_records", m_x_records)
        if n_s_records is not None:
            pulumi.set(__self__, "n_s_records", n_s_records)
        if p_tr_records is not None:
            pulumi.set(__self__, "p_tr_records", p_tr_records)
        if s_oa_record is not None:
            pulumi.set(__self__, "s_oa_record", s_oa_record)
        if s_rv_records is not None:
            pulumi.set(__self__, "s_rv_records", s_rv_records)
        if t_xt_records is not None:
            pulumi.set(__self__, "t_xt_records", t_xt_records)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="aAAARecords")
    def a_aaa_records(self) -> Optional[Sequence['outputs.AaaaRecordResponse']]:
        """
        Gets or sets the list of AAAA records in the RecordSet.
        """
        return pulumi.get(self, "a_aaa_records")

    @property
    @pulumi.getter(name="aRecords")
    def a_records(self) -> Optional[Sequence['outputs.ARecordResponse']]:
        """
        Gets or sets the list of A records in the RecordSet.
        """
        return pulumi.get(self, "a_records")

    @property
    @pulumi.getter(name="cNAMERecord")
    def c_name_record(self) -> Optional['outputs.CnameRecordResponse']:
        """
        Gets or sets the CNAME record in the RecordSet.
        """
        return pulumi.get(self, "c_name_record")

    @property
    @pulumi.getter(name="mXRecords")
    def m_x_records(self) -> Optional[Sequence['outputs.MxRecordResponse']]:
        """
        Gets or sets the list of MX records in the RecordSet.
        """
        return pulumi.get(self, "m_x_records")

    @property
    @pulumi.getter(name="nSRecords")
    def n_s_records(self) -> Optional[Sequence['outputs.NsRecordResponse']]:
        """
        Gets or sets the list of NS records in the RecordSet.
        """
        return pulumi.get(self, "n_s_records")

    @property
    @pulumi.getter(name="pTRRecords")
    def p_tr_records(self) -> Optional[Sequence['outputs.PtrRecordResponse']]:
        """
        Gets or sets the list of PTR records in the RecordSet.
        """
        return pulumi.get(self, "p_tr_records")

    @property
    @pulumi.getter(name="sOARecord")
    def s_oa_record(self) -> Optional['outputs.SoaRecordResponse']:
        """
        Gets or sets the SOA record in the RecordSet.
        """
        return pulumi.get(self, "s_oa_record")

    @property
    @pulumi.getter(name="sRVRecords")
    def s_rv_records(self) -> Optional[Sequence['outputs.SrvRecordResponse']]:
        """
        Gets or sets the list of SRV records in the RecordSet.
        """
        return pulumi.get(self, "s_rv_records")

    @property
    @pulumi.getter(name="tXTRecords")
    def t_xt_records(self) -> Optional[Sequence['outputs.TxtRecordResponse']]:
        """
        Gets or sets the list of TXT records in the RecordSet.
        """
        return pulumi.get(self, "t_xt_records")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        Gets or sets the TTL of the records in the RecordSet.
        """
        return pulumi.get(self, "ttl")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SoaRecordResponse(dict):
    """
    An SOA record.
    """
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 expire_time: Optional[int] = None,
                 host: Optional[str] = None,
                 minimum_ttl: Optional[int] = None,
                 refresh_time: Optional[int] = None,
                 retry_time: Optional[int] = None,
                 serial_number: Optional[int] = None):
        """
        An SOA record.
        :param str email: Gets or sets the email for this record.
        :param int expire_time: Gets or sets the expire time for this record.
        :param str host: Gets or sets the domain name of the authoritative name server, without a terminating dot.
        :param int minimum_ttl: Gets or sets the minimum TTL value for this record.
        :param int refresh_time: Gets or sets the refresh value for this record.
        :param int retry_time: Gets or sets the retry time for this record.
        :param int serial_number: Gets or sets the serial number for this record.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if minimum_ttl is not None:
            pulumi.set(__self__, "minimum_ttl", minimum_ttl)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)
        if retry_time is not None:
            pulumi.set(__self__, "retry_time", retry_time)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Gets or sets the email for this record.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[int]:
        """
        Gets or sets the expire time for this record.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Gets or sets the domain name of the authoritative name server, without a terminating dot.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="minimumTTL")
    def minimum_ttl(self) -> Optional[int]:
        """
        Gets or sets the minimum TTL value for this record.
        """
        return pulumi.get(self, "minimum_ttl")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[int]:
        """
        Gets or sets the refresh value for this record.
        """
        return pulumi.get(self, "refresh_time")

    @property
    @pulumi.getter(name="retryTime")
    def retry_time(self) -> Optional[int]:
        """
        Gets or sets the retry time for this record.
        """
        return pulumi.get(self, "retry_time")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[int]:
        """
        Gets or sets the serial number for this record.
        """
        return pulumi.get(self, "serial_number")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SrvRecordResponse(dict):
    """
    An SRV record.
    """
    def __init__(__self__, *,
                 port: Optional[int] = None,
                 priority: Optional[int] = None,
                 target: Optional[str] = None,
                 weight: Optional[int] = None):
        """
        An SRV record.
        :param int port: Gets or sets the port of the service for this record.
        :param int priority: Gets or sets the priority metric for this record.
        :param str target: Gets or sets the domain name of the target for this record, without a terminating dot.
        :param int weight: Gets or sets the weight metric for this record.
        """
        if port is not None:
            pulumi.set(__self__, "port", port)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Gets or sets the port of the service for this record.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Gets or sets the priority metric for this record.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        Gets or sets the domain name of the target for this record, without a terminating dot.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Gets or sets the weight metric for this record.
        """
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TxtRecordResponse(dict):
    """
    A TXT record.
    """
    def __init__(__self__, *,
                 value: Optional[Sequence[str]] = None):
        """
        A TXT record.
        :param Sequence[str] value: Gets or sets the text value of this record.
        """
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[Sequence[str]]:
        """
        Gets or sets the text value of this record.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ZonePropertiesResponse(dict):
    """
    Represents the properties of the zone.
    """
    def __init__(__self__, *,
                 max_number_of_record_sets: Optional[int] = None,
                 number_of_record_sets: Optional[int] = None):
        """
        Represents the properties of the zone.
        :param int max_number_of_record_sets: Gets or sets the maximum number of record sets that can be created in this zone.
        :param int number_of_record_sets: Gets or sets the current number of record sets in this zone.
        """
        if max_number_of_record_sets is not None:
            pulumi.set(__self__, "max_number_of_record_sets", max_number_of_record_sets)
        if number_of_record_sets is not None:
            pulumi.set(__self__, "number_of_record_sets", number_of_record_sets)

    @property
    @pulumi.getter(name="maxNumberOfRecordSets")
    def max_number_of_record_sets(self) -> Optional[int]:
        """
        Gets or sets the maximum number of record sets that can be created in this zone.
        """
        return pulumi.get(self, "max_number_of_record_sets")

    @property
    @pulumi.getter(name="numberOfRecordSets")
    def number_of_record_sets(self) -> Optional[int]:
        """
        Gets or sets the current number of record sets in this zone.
        """
        return pulumi.get(self, "number_of_record_sets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


