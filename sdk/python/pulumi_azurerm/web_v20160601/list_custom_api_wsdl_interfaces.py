# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class ListCustomApiWsdlInterfacesResult:
    """
    A list of custom API WSDL interfaces
    """
    def __init__(__self__, value=None):
        if value and not isinstance(value, list):
            raise TypeError("Expected argument 'value' to be a list")
        __self__.value = value
        """
        Collection of WSDL interfaces
        """


class AwaitableListCustomApiWsdlInterfacesResult(ListCustomApiWsdlInterfacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListCustomApiWsdlInterfacesResult(
            value=self.value)


def list_custom_api_wsdl_interfaces(content=None, import_method=None, location=None, service=None, url=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str content: The WSDL content
    :param str import_method: The WSDL import method
    :param str location: The location
    :param dict service: The service with name and endpoint names
    :param str url: The WSDL URL

    The **service** object supports the following:

      * `endpoint_qualified_names` (`list`) - List of the endpoints' qualified names
      * `qualified_name` (`str`) - The service's qualified name
    """
    __args__ = dict()
    __args__['content'] = content
    __args__['importMethod'] = import_method
    __args__['location'] = location
    __args__['service'] = service
    __args__['url'] = url
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:web/v20160601:listCustomApiWsdlInterfaces', __args__, opts=opts).value

    return AwaitableListCustomApiWsdlInterfacesResult(
        value=__ret__.get('value'))
