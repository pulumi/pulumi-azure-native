# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class Domain(pulumi.CustomResource):
    endpoint: pulumi.Output[str]
    """
    Endpoint for the domain.
    """
    inbound_ip_rules: pulumi.Output[list]
    """
    This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
      * `action` (`str`) - Action to perform based on the match or no match of the IpMask.
      * `ip_mask` (`str`) - IP Address in CIDR notation e.g., 10.0.0.0/8.
    """
    input_schema: pulumi.Output[str]
    """
    This determines the format that Event Grid should expect for incoming events published to the domain.
    """
    input_schema_mapping: pulumi.Output[dict]
    """
    Information about the InputSchemaMapping which specified the info about mapping event payload.
      * `input_schema_mapping_type` (`str`) - Type of the custom mapping
    """
    location: pulumi.Output[str]
    """
    Location of the resource.
    """
    metric_resource_id: pulumi.Output[str]
    """
    Metric resource id for the domain.
    """
    name: pulumi.Output[str]
    """
    Name of the resource.
    """
    private_endpoint_connections: pulumi.Output[list]
    """
    List of private endpoint connections.
      * `group_ids` (`list`) - GroupIds from the private link service resource.
      * `id` (`str`) - Fully qualified identifier of the resource.
      * `name` (`str`) - Name of the resource.
      * `private_endpoint` (`dict`) - The Private Endpoint resource for this Connection.
        * `id` (`str`) - The ARM identifier for Private Endpoint.

      * `private_link_service_connection_state` (`dict`) - Details about the state of the connection.
        * `actions_required` (`str`) - Actions required (if any).
        * `description` (`str`) - Description of the connection state.
        * `status` (`str`) - Status of the connection.

      * `provisioning_state` (`str`) - Provisioning state of the Private Endpoint Connection.
      * `type` (`str`) - Type of the resource.
    """
    provisioning_state: pulumi.Output[str]
    """
    Provisioning state of the domain.
    """
    public_network_access: pulumi.Output[str]
    """
    This determines if traffic is allowed over public network. By default it is enabled. 
    You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules" />
    """
    tags: pulumi.Output[dict]
    """
    Tags of the resource.
    """
    type: pulumi.Output[str]
    """
    Type of the resource.
    """
    def __init__(__self__, resource_name, opts=None, inbound_ip_rules=None, input_schema=None, input_schema_mapping=None, location=None, name=None, private_endpoint_connections=None, public_network_access=None, resource_group_name=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        EventGrid Domain.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] inbound_ip_rules: This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
        :param pulumi.Input[str] input_schema: This determines the format that Event Grid should expect for incoming events published to the domain.
        :param pulumi.Input[dict] input_schema_mapping: Information about the InputSchemaMapping which specified the info about mapping event payload.
        :param pulumi.Input[str] location: Location of the resource.
        :param pulumi.Input[str] name: Name of the domain.
        :param pulumi.Input[list] private_endpoint_connections: List of private endpoint connections.
        :param pulumi.Input[str] public_network_access: This determines if traffic is allowed over public network. By default it is enabled. 
               You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules" />
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription.
        :param pulumi.Input[dict] tags: Tags of the resource.

        The **inbound_ip_rules** object supports the following:

          * `action` (`pulumi.Input[str]`) - Action to perform based on the match or no match of the IpMask.
          * `ip_mask` (`pulumi.Input[str]`) - IP Address in CIDR notation e.g., 10.0.0.0/8.

        The **input_schema_mapping** object supports the following:

          * `input_schema_mapping_type` (`pulumi.Input[str]`) - Type of the custom mapping

        The **private_endpoint_connections** object supports the following:

          * `group_ids` (`pulumi.Input[list]`) - GroupIds from the private link service resource.
          * `private_endpoint` (`pulumi.Input[dict]`) - The Private Endpoint resource for this Connection.
            * `id` (`pulumi.Input[str]`) - The ARM identifier for Private Endpoint.

          * `private_link_service_connection_state` (`pulumi.Input[dict]`) - Details about the state of the connection.
            * `actions_required` (`pulumi.Input[str]`) - Actions required (if any).
            * `description` (`pulumi.Input[str]`) - Description of the connection state.
            * `status` (`pulumi.Input[str]`) - Status of the connection.

          * `provisioning_state` (`pulumi.Input[str]`) - Provisioning state of the Private Endpoint Connection.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['inbound_ip_rules'] = inbound_ip_rules
            __props__['input_schema'] = input_schema
            __props__['input_schema_mapping'] = input_schema_mapping
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['private_endpoint_connections'] = private_endpoint_connections
            __props__['public_network_access'] = public_network_access
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            __props__['endpoint'] = None
            __props__['metric_resource_id'] = None
            __props__['provisioning_state'] = None
            __props__['type'] = None
        super(Domain, __self__).__init__(
            'azurerm:eventgrid/v20200601:Domain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing Domain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Domain(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
