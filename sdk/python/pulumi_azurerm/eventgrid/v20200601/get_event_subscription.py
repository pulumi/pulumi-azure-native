# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class GetEventSubscriptionResult:
    """
    Event Subscription
    """
    def __init__(__self__, dead_letter_destination=None, destination=None, event_delivery_schema=None, expiration_time_utc=None, filter=None, labels=None, name=None, provisioning_state=None, retry_policy=None, topic=None, type=None):
        if dead_letter_destination and not isinstance(dead_letter_destination, dict):
            raise TypeError("Expected argument 'dead_letter_destination' to be a dict")
        __self__.dead_letter_destination = dead_letter_destination
        """
        The DeadLetter destination of the event subscription.
        """
        if destination and not isinstance(destination, dict):
            raise TypeError("Expected argument 'destination' to be a dict")
        __self__.destination = destination
        """
        Information about the destination where events have to be delivered for the event subscription.
        """
        if event_delivery_schema and not isinstance(event_delivery_schema, str):
            raise TypeError("Expected argument 'event_delivery_schema' to be a str")
        __self__.event_delivery_schema = event_delivery_schema
        """
        The event delivery schema for the event subscription.
        """
        if expiration_time_utc and not isinstance(expiration_time_utc, str):
            raise TypeError("Expected argument 'expiration_time_utc' to be a str")
        __self__.expiration_time_utc = expiration_time_utc
        """
        Expiration time of the event subscription.
        """
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        __self__.filter = filter
        """
        Information about the filter for the event subscription.
        """
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        __self__.labels = labels
        """
        List of user defined labels.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Name of the resource.
        """
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        __self__.provisioning_state = provisioning_state
        """
        Provisioning state of the event subscription.
        """
        if retry_policy and not isinstance(retry_policy, dict):
            raise TypeError("Expected argument 'retry_policy' to be a dict")
        __self__.retry_policy = retry_policy
        """
        The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
        """
        if topic and not isinstance(topic, str):
            raise TypeError("Expected argument 'topic' to be a str")
        __self__.topic = topic
        """
        Name of the topic of the event subscription.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Type of the resource.
        """


class AwaitableGetEventSubscriptionResult(GetEventSubscriptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventSubscriptionResult(
            dead_letter_destination=self.dead_letter_destination,
            destination=self.destination,
            event_delivery_schema=self.event_delivery_schema,
            expiration_time_utc=self.expiration_time_utc,
            filter=self.filter,
            labels=self.labels,
            name=self.name,
            provisioning_state=self.provisioning_state,
            retry_policy=self.retry_policy,
            topic=self.topic,
            type=self.type)


def get_event_subscription(name=None, scope=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of the event subscription.
    :param str scope: The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['scope'] = scope
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azurerm:eventgrid/v20200601:getEventSubscription', __args__, opts=opts).value

    return AwaitableGetEventSubscriptionResult(
        dead_letter_destination=__ret__.get('deadLetterDestination'),
        destination=__ret__.get('destination'),
        event_delivery_schema=__ret__.get('eventDeliverySchema'),
        expiration_time_utc=__ret__.get('expirationTimeUtc'),
        filter=__ret__.get('filter'),
        labels=__ret__.get('labels'),
        name=__ret__.get('name'),
        provisioning_state=__ret__.get('provisioningState'),
        retry_policy=__ret__.get('retryPolicy'),
        topic=__ret__.get('topic'),
        type=__ret__.get('type'))
