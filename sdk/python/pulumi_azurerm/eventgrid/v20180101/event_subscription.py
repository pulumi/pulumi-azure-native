# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import _utilities, _tables


class EventSubscription(pulumi.CustomResource):
    destination: pulumi.Output[dict]
    """
    Information about the destination where events have to be delivered for the event subscription.
      * `endpoint_type` (`str`) - Type of the endpoint for the event subscription destination
    """
    filter: pulumi.Output[dict]
    """
    Information about the filter for the event subscription.
      * `included_event_types` (`list`) - A list of applicable event types that need to be part of the event subscription. 
        If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
      * `is_subject_case_sensitive` (`bool`) - Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter 
        should be compared in a case sensitive manner.
      * `subject_begins_with` (`str`) - An optional string to filter events for an event subscription based on a resource path prefix.
        The format of this depends on the publisher of the events. 
        Wildcard characters are not supported in this path.
      * `subject_ends_with` (`str`) - An optional string to filter events for an event subscription based on a resource path suffix.
        Wildcard characters are not supported in this path.
    """
    labels: pulumi.Output[list]
    """
    List of user defined labels.
    """
    name: pulumi.Output[str]
    """
    Name of the resource
    """
    provisioning_state: pulumi.Output[str]
    """
    Provisioning state of the event subscription.
    """
    topic: pulumi.Output[str]
    """
    Name of the topic of the event subscription.
    """
    type: pulumi.Output[str]
    """
    Type of the resource
    """
    def __init__(__self__, resource_name, opts=None, destination=None, filter=None, labels=None, name=None, scope=None, __props__=None, __name__=None, __opts__=None):
        """
        Event Subscription

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] destination: Information about the destination where events have to be delivered for the event subscription.
        :param pulumi.Input[dict] filter: Information about the filter for the event subscription.
        :param pulumi.Input[list] labels: List of user defined labels.
        :param pulumi.Input[str] name: Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.
        :param pulumi.Input[str] scope: The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.

        The **destination** object supports the following:

          * `endpoint_type` (`pulumi.Input[str]`) - Type of the endpoint for the event subscription destination

        The **filter** object supports the following:

          * `included_event_types` (`pulumi.Input[list]`) - A list of applicable event types that need to be part of the event subscription. 
            If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
          * `is_subject_case_sensitive` (`pulumi.Input[bool]`) - Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter 
            should be compared in a case sensitive manner.
          * `subject_begins_with` (`pulumi.Input[str]`) - An optional string to filter events for an event subscription based on a resource path prefix.
            The format of this depends on the publisher of the events. 
            Wildcard characters are not supported in this path.
          * `subject_ends_with` (`pulumi.Input[str]`) - An optional string to filter events for an event subscription based on a resource path suffix.
            Wildcard characters are not supported in this path.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['destination'] = destination
            __props__['filter'] = filter
            __props__['labels'] = labels
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if scope is None:
                raise TypeError("Missing required property 'scope'")
            __props__['scope'] = scope
            __props__['provisioning_state'] = None
            __props__['topic'] = None
            __props__['type'] = None
        super(EventSubscription, __self__).__init__(
            'azurerm:eventgrid/v20180101:EventSubscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing EventSubscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return EventSubscription(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
