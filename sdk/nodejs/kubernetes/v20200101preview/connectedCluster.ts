// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Represents a connected cluster.
 *
 * @deprecated Version 2020-01-01-preview will be removed in v2 of the provider.
 */
export class ConnectedCluster extends pulumi.CustomResource {
    /**
     * Get an existing ConnectedCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ConnectedCluster {
        pulumi.log.warn("ConnectedCluster is deprecated: Version 2020-01-01-preview will be removed in v2 of the provider.")
        return new ConnectedCluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:kubernetes/v20200101preview:ConnectedCluster';

    /**
     * Returns true if the given object is an instance of ConnectedCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectedCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectedCluster.__pulumiType;
    }

    /**
     * AAD profile of the connected cluster.
     */
    public readonly aadProfile!: pulumi.Output<outputs.kubernetes.v20200101preview.ConnectedClusterAADProfileResponse>;
    /**
     * Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
     */
    public readonly agentPublicKeyCertificate!: pulumi.Output<string>;
    /**
     * Version of the agent running on the connected cluster resource
     */
    public /*out*/ readonly agentVersion!: pulumi.Output<string>;
    /**
     * Represents the connectivity status of the connected cluster.
     */
    public readonly connectivityStatus!: pulumi.Output<string | undefined>;
    /**
     * The Kubernetes distribution running on this connected cluster.
     */
    public readonly distribution!: pulumi.Output<string | undefined>;
    /**
     * The identity of the connected cluster.
     */
    public readonly identity!: pulumi.Output<outputs.kubernetes.v20200101preview.ConnectedClusterIdentityResponse>;
    /**
     * The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
     */
    public readonly infrastructure!: pulumi.Output<string | undefined>;
    /**
     * The Kubernetes version of the connected cluster resource
     */
    public /*out*/ readonly kubernetesVersion!: pulumi.Output<string>;
    /**
     * Time representing the last instance when heart beat was received from the cluster
     */
    public /*out*/ readonly lastConnectivityTime!: pulumi.Output<string>;
    /**
     * The geo-location where the resource lives
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Expiration time of the managed identity certificate
     */
    public /*out*/ readonly managedIdentityCertificateExpirationTime!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Connected cluster offering
     */
    public /*out*/ readonly offering!: pulumi.Output<string>;
    /**
     * Provisioning state of the connected cluster resource.
     */
    public readonly provisioningState!: pulumi.Output<string | undefined>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Number of CPU cores present in the connected cluster resource
     */
    public /*out*/ readonly totalCoreCount!: pulumi.Output<number>;
    /**
     * Number of nodes present in the connected cluster resource
     */
    public /*out*/ readonly totalNodeCount!: pulumi.Output<number>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a ConnectedCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Version 2020-01-01-preview will be removed in v2 of the provider. */
    constructor(name: string, args: ConnectedClusterArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("ConnectedCluster is deprecated: Version 2020-01-01-preview will be removed in v2 of the provider.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.aadProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aadProfile'");
            }
            if ((!args || args.agentPublicKeyCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentPublicKeyCertificate'");
            }
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["aadProfile"] = args ? args.aadProfile : undefined;
            resourceInputs["agentPublicKeyCertificate"] = args ? args.agentPublicKeyCertificate : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["connectivityStatus"] = args ? args.connectivityStatus : undefined;
            resourceInputs["distribution"] = args ? args.distribution : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["infrastructure"] = args ? args.infrastructure : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["provisioningState"] = args ? args.provisioningState : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["agentVersion"] = undefined /*out*/;
            resourceInputs["kubernetesVersion"] = undefined /*out*/;
            resourceInputs["lastConnectivityTime"] = undefined /*out*/;
            resourceInputs["managedIdentityCertificateExpirationTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["offering"] = undefined /*out*/;
            resourceInputs["totalCoreCount"] = undefined /*out*/;
            resourceInputs["totalNodeCount"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["aadProfile"] = undefined /*out*/;
            resourceInputs["agentPublicKeyCertificate"] = undefined /*out*/;
            resourceInputs["agentVersion"] = undefined /*out*/;
            resourceInputs["connectivityStatus"] = undefined /*out*/;
            resourceInputs["distribution"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["infrastructure"] = undefined /*out*/;
            resourceInputs["kubernetesVersion"] = undefined /*out*/;
            resourceInputs["lastConnectivityTime"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["managedIdentityCertificateExpirationTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["offering"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["totalCoreCount"] = undefined /*out*/;
            resourceInputs["totalNodeCount"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:kubernetes:ConnectedCluster" }, { type: "azure-native:kubernetes/v20210301:ConnectedCluster" }, { type: "azure-native:kubernetes/v20210401preview:ConnectedCluster" }, { type: "azure-native:kubernetes/v20211001:ConnectedCluster" }, { type: "azure-native:kubernetes/v20220501preview:ConnectedCluster" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ConnectedCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ConnectedCluster resource.
 */
export interface ConnectedClusterArgs {
    /**
     * AAD profile of the connected cluster.
     */
    aadProfile: pulumi.Input<inputs.kubernetes.v20200101preview.ConnectedClusterAADProfileArgs>;
    /**
     * Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
     */
    agentPublicKeyCertificate: pulumi.Input<string>;
    /**
     * The name of the Kubernetes cluster on which get is called.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Represents the connectivity status of the connected cluster.
     */
    connectivityStatus?: pulumi.Input<string | enums.kubernetes.v20200101preview.ConnectivityStatus>;
    /**
     * The Kubernetes distribution running on this connected cluster.
     */
    distribution?: pulumi.Input<string>;
    /**
     * The identity of the connected cluster.
     */
    identity: pulumi.Input<inputs.kubernetes.v20200101preview.ConnectedClusterIdentityArgs>;
    /**
     * The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
     */
    infrastructure?: pulumi.Input<string>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * Provisioning state of the connected cluster resource.
     */
    provisioningState?: pulumi.Input<string | enums.kubernetes.v20200101preview.ProvisioningState>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
