// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * The description of Dicom Service
 */
/** @deprecated Version v20210601preview will be removed in the next major version of the provider. Upgrade to version v20220515 or later. */
export function getDicomService(args: GetDicomServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetDicomServiceResult> {
    pulumi.log.warn("getDicomService is deprecated: Version v20210601preview will be removed in the next major version of the provider. Upgrade to version v20220515 or later.")
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("azure-native:healthcareapis/v20210601preview:getDicomService", {
        "dicomServiceName": args.dicomServiceName,
        "resourceGroupName": args.resourceGroupName,
        "workspaceName": args.workspaceName,
    }, opts);
}

export interface GetDicomServiceArgs {
    /**
     * The name of DICOM Service resource.
     */
    dicomServiceName: string;
    /**
     * The name of the resource group that contains the service instance.
     */
    resourceGroupName: string;
    /**
     * The name of workspace resource.
     */
    workspaceName: string;
}

/**
 * The description of Dicom Service
 */
export interface GetDicomServiceResult {
    /**
     * Dicom Service authentication configuration.
     */
    readonly authenticationConfiguration?: outputs.healthcareapis.v20210601preview.DicomServiceAuthenticationConfigurationResponse;
    /**
     * An etag associated with the resource, used for optimistic concurrency when editing it.
     */
    readonly etag?: string;
    /**
     * The resource identifier.
     */
    readonly id: string;
    /**
     * The resource location.
     */
    readonly location?: string;
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * The provisioning state.
     */
    readonly provisioningState: string;
    /**
     * The url of the Dicom Services.
     */
    readonly serviceUrl: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: outputs.healthcareapis.v20210601preview.SystemDataResponse;
    /**
     * Resource tags.
     */
    readonly tags?: {[key: string]: string};
    /**
     * The resource type.
     */
    readonly type: string;
}

export function getDicomServiceOutput(args: GetDicomServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDicomServiceResult> {
    return pulumi.output(args).apply(a => getDicomService(a, opts))
}

export interface GetDicomServiceOutputArgs {
    /**
     * The name of DICOM Service resource.
     */
    dicomServiceName: pulumi.Input<string>;
    /**
     * The name of the resource group that contains the service instance.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of workspace resource.
     */
    workspaceName: pulumi.Input<string>;
}
