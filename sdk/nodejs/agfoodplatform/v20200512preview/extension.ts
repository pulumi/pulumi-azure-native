// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Extension resource.
 */
export class Extension extends pulumi.CustomResource {
    /**
     * Get an existing Extension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Extension {
        return new Extension(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:agfoodplatform/v20200512preview:Extension';

    /**
     * Returns true if the given object is an instance of Extension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Extension {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Extension.__pulumiType;
    }

    /**
     * The ETag value to implement optimistic concurrency.
     */
    public /*out*/ readonly eTag!: pulumi.Output<string>;
    /**
     * Extension api docs link.
     */
    public /*out*/ readonly extensionApiDocsLink!: pulumi.Output<string>;
    /**
     * Extension auth link.
     */
    public /*out*/ readonly extensionAuthLink!: pulumi.Output<string>;
    /**
     * Extension category. e.g. weather/sensor/satellite.
     */
    public /*out*/ readonly extensionCategory!: pulumi.Output<string>;
    /**
     * Extension Id.
     */
    public readonly extensionId!: pulumi.Output<string>;
    /**
     * Installed extension version.
     */
    public /*out*/ readonly installedExtensionVersion!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.agfoodplatform.v20200512preview.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Extension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExtensionArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.farmBeatsResourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'farmBeatsResourceName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["extensionId"] = args ? args.extensionId : undefined;
            inputs["farmBeatsResourceName"] = args ? args.farmBeatsResourceName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["eTag"] = undefined /*out*/;
            inputs["extensionApiDocsLink"] = undefined /*out*/;
            inputs["extensionAuthLink"] = undefined /*out*/;
            inputs["extensionCategory"] = undefined /*out*/;
            inputs["installedExtensionVersion"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["eTag"] = undefined /*out*/;
            inputs["extensionApiDocsLink"] = undefined /*out*/;
            inputs["extensionAuthLink"] = undefined /*out*/;
            inputs["extensionCategory"] = undefined /*out*/;
            inputs["extensionId"] = undefined /*out*/;
            inputs["installedExtensionVersion"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:agfoodplatform/v20200512preview:Extension" }, { type: "azure-native:agfoodplatform:Extension" }, { type: "azure-nextgen:agfoodplatform:Extension" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Extension.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Extension resource.
 */
export interface ExtensionArgs {
    /**
     * Id of extension resource.
     */
    extensionId?: pulumi.Input<string>;
    /**
     * FarmBeats resource name.
     */
    farmBeatsResourceName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
}
