// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Azure REST API version: 2023-05-01-preview. Prior API version in Azure Native 1.x: 2022-12-12-preview
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:networkcloud:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The rack definition that is intended to reflect only a single rack in a single rack cluster, or an aggregator rack in a multi-rack cluster.
     */
    public readonly aggregatorOrSingleRackDefinition!: pulumi.Output<outputs.networkcloud.RackDefinitionResponse>;
    /**
     * The resource ID of the Log Analytics Workspace that will be used for storing relevant logs.
     */
    public readonly analyticsWorkspaceId!: pulumi.Output<string | undefined>;
    /**
     * The list of cluster runtime version upgrades available for this cluster.
     */
    public /*out*/ readonly availableUpgradeVersions!: pulumi.Output<outputs.networkcloud.ClusterAvailableUpgradeVersionResponse[]>;
    /**
     * The capacity supported by this cluster.
     */
    public /*out*/ readonly clusterCapacity!: pulumi.Output<outputs.networkcloud.ClusterCapacityResponse>;
    /**
     * The latest heartbeat status between the cluster manager and the cluster.
     */
    public /*out*/ readonly clusterConnectionStatus!: pulumi.Output<string>;
    /**
     * The extended location (custom location) that represents the cluster's control plane location. This extended location is used to route the requests of child objects of the cluster that are handled by the platform operator.
     */
    public /*out*/ readonly clusterExtendedLocation!: pulumi.Output<outputs.networkcloud.ExtendedLocationResponse>;
    /**
     * The customer-provided location information to identify where the cluster resides.
     */
    public readonly clusterLocation!: pulumi.Output<string | undefined>;
    /**
     * The latest connectivity status between cluster manager and the cluster.
     */
    public /*out*/ readonly clusterManagerConnectionStatus!: pulumi.Output<string>;
    /**
     * The resource ID of the cluster manager that manages this cluster. This is set by the Cluster Manager when the cluster is created.
     */
    public /*out*/ readonly clusterManagerId!: pulumi.Output<string>;
    /**
     * The service principal to be used by the cluster during Arc Appliance installation.
     */
    public readonly clusterServicePrincipal!: pulumi.Output<outputs.networkcloud.ServicePrincipalInformationResponse | undefined>;
    /**
     * The type of rack configuration for the cluster.
     */
    public readonly clusterType!: pulumi.Output<string>;
    /**
     * The current runtime version of the cluster.
     */
    public readonly clusterVersion!: pulumi.Output<string>;
    /**
     * The validation threshold indicating the allowable failures of compute machines during environment validation and deployment.
     */
    public readonly computeDeploymentThreshold!: pulumi.Output<outputs.networkcloud.ValidationThresholdResponse | undefined>;
    /**
     * The list of rack definitions for the compute racks in a multi-rack
     * cluster, or an empty list in a single-rack cluster.
     */
    public readonly computeRackDefinitions!: pulumi.Output<outputs.networkcloud.RackDefinitionResponse[] | undefined>;
    /**
     * The current detailed status of the cluster.
     */
    public /*out*/ readonly detailedStatus!: pulumi.Output<string>;
    /**
     * The descriptive message about the detailed status.
     */
    public /*out*/ readonly detailedStatusMessage!: pulumi.Output<string>;
    /**
     * The extended location of the cluster manager associated with the cluster.
     */
    public readonly extendedLocation!: pulumi.Output<outputs.networkcloud.ExtendedLocationResponse>;
    /**
     * Field Deprecated. This field will not be populated in an upcoming version. The extended location (custom location) that represents the Hybrid AKS control plane location. This extended location is used when creating provisioned clusters (Hybrid AKS clusters).
     */
    public /*out*/ readonly hybridAksExtendedLocation!: pulumi.Output<outputs.networkcloud.ExtendedLocationResponse>;
    /**
     * The geo-location where the resource lives
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The configuration of the managed resource group associated with the resource.
     */
    public readonly managedResourceGroupConfiguration!: pulumi.Output<outputs.networkcloud.ManagedResourceGroupConfigurationResponse | undefined>;
    /**
     * The count of Manual Action Taken (MAT) events that have not been validated.
     */
    public /*out*/ readonly manualActionCount!: pulumi.Output<number>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The resource ID of the Network Fabric associated with the cluster.
     */
    public readonly networkFabricId!: pulumi.Output<string>;
    /**
     * The provisioning state of the cluster.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The support end date of the runtime version of the cluster.
     */
    public /*out*/ readonly supportExpiryDate!: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.networkcloud.SystemDataResponse>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The list of workload resource IDs that are hosted within this cluster.
     */
    public /*out*/ readonly workloadResourceIds!: pulumi.Output<string[]>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.aggregatorOrSingleRackDefinition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregatorOrSingleRackDefinition'");
            }
            if ((!args || args.clusterType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterType'");
            }
            if ((!args || args.clusterVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterVersion'");
            }
            if ((!args || args.extendedLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extendedLocation'");
            }
            if ((!args || args.networkFabricId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkFabricId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["aggregatorOrSingleRackDefinition"] = args ? args.aggregatorOrSingleRackDefinition : undefined;
            resourceInputs["analyticsWorkspaceId"] = args ? args.analyticsWorkspaceId : undefined;
            resourceInputs["clusterLocation"] = args ? args.clusterLocation : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterServicePrincipal"] = args ? args.clusterServicePrincipal : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["clusterVersion"] = args ? args.clusterVersion : undefined;
            resourceInputs["computeDeploymentThreshold"] = args ? args.computeDeploymentThreshold : undefined;
            resourceInputs["computeRackDefinitions"] = args ? args.computeRackDefinitions : undefined;
            resourceInputs["extendedLocation"] = args ? args.extendedLocation : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedResourceGroupConfiguration"] = args ? args.managedResourceGroupConfiguration : undefined;
            resourceInputs["networkFabricId"] = args ? args.networkFabricId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["availableUpgradeVersions"] = undefined /*out*/;
            resourceInputs["clusterCapacity"] = undefined /*out*/;
            resourceInputs["clusterConnectionStatus"] = undefined /*out*/;
            resourceInputs["clusterExtendedLocation"] = undefined /*out*/;
            resourceInputs["clusterManagerConnectionStatus"] = undefined /*out*/;
            resourceInputs["clusterManagerId"] = undefined /*out*/;
            resourceInputs["detailedStatus"] = undefined /*out*/;
            resourceInputs["detailedStatusMessage"] = undefined /*out*/;
            resourceInputs["hybridAksExtendedLocation"] = undefined /*out*/;
            resourceInputs["manualActionCount"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["supportExpiryDate"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["workloadResourceIds"] = undefined /*out*/;
        } else {
            resourceInputs["aggregatorOrSingleRackDefinition"] = undefined /*out*/;
            resourceInputs["analyticsWorkspaceId"] = undefined /*out*/;
            resourceInputs["availableUpgradeVersions"] = undefined /*out*/;
            resourceInputs["clusterCapacity"] = undefined /*out*/;
            resourceInputs["clusterConnectionStatus"] = undefined /*out*/;
            resourceInputs["clusterExtendedLocation"] = undefined /*out*/;
            resourceInputs["clusterLocation"] = undefined /*out*/;
            resourceInputs["clusterManagerConnectionStatus"] = undefined /*out*/;
            resourceInputs["clusterManagerId"] = undefined /*out*/;
            resourceInputs["clusterServicePrincipal"] = undefined /*out*/;
            resourceInputs["clusterType"] = undefined /*out*/;
            resourceInputs["clusterVersion"] = undefined /*out*/;
            resourceInputs["computeDeploymentThreshold"] = undefined /*out*/;
            resourceInputs["computeRackDefinitions"] = undefined /*out*/;
            resourceInputs["detailedStatus"] = undefined /*out*/;
            resourceInputs["detailedStatusMessage"] = undefined /*out*/;
            resourceInputs["extendedLocation"] = undefined /*out*/;
            resourceInputs["hybridAksExtendedLocation"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["managedResourceGroupConfiguration"] = undefined /*out*/;
            resourceInputs["manualActionCount"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkFabricId"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["supportExpiryDate"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["workloadResourceIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:networkcloud/v20221212preview:Cluster" }, { type: "azure-native:networkcloud/v20230501preview:Cluster" }, { type: "azure-native:networkcloud/v20230701:Cluster" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The rack definition that is intended to reflect only a single rack in a single rack cluster, or an aggregator rack in a multi-rack cluster.
     */
    aggregatorOrSingleRackDefinition: pulumi.Input<inputs.networkcloud.RackDefinitionArgs>;
    /**
     * The resource ID of the Log Analytics Workspace that will be used for storing relevant logs.
     */
    analyticsWorkspaceId?: pulumi.Input<string>;
    /**
     * The customer-provided location information to identify where the cluster resides.
     */
    clusterLocation?: pulumi.Input<string>;
    /**
     * The name of the cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The service principal to be used by the cluster during Arc Appliance installation.
     */
    clusterServicePrincipal?: pulumi.Input<inputs.networkcloud.ServicePrincipalInformationArgs>;
    /**
     * The type of rack configuration for the cluster.
     */
    clusterType: pulumi.Input<string | enums.networkcloud.ClusterType>;
    /**
     * The current runtime version of the cluster.
     */
    clusterVersion: pulumi.Input<string>;
    /**
     * The validation threshold indicating the allowable failures of compute machines during environment validation and deployment.
     */
    computeDeploymentThreshold?: pulumi.Input<inputs.networkcloud.ValidationThresholdArgs>;
    /**
     * The list of rack definitions for the compute racks in a multi-rack
     * cluster, or an empty list in a single-rack cluster.
     */
    computeRackDefinitions?: pulumi.Input<pulumi.Input<inputs.networkcloud.RackDefinitionArgs>[]>;
    /**
     * The extended location of the cluster manager associated with the cluster.
     */
    extendedLocation: pulumi.Input<inputs.networkcloud.ExtendedLocationArgs>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The configuration of the managed resource group associated with the resource.
     */
    managedResourceGroupConfiguration?: pulumi.Input<inputs.networkcloud.ManagedResourceGroupConfigurationArgs>;
    /**
     * The resource ID of the Network Fabric associated with the cluster.
     */
    networkFabricId: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
