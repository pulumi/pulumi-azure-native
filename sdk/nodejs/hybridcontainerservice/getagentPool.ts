// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Gets the agent pool in the Hybrid AKS provisioned cluster
 * API Version: 2022-05-01-preview.
 */
export function getagentPool(args: GetagentPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetagentPoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:hybridcontainerservice:getagentPool", {
        "agentPoolName": args.agentPoolName,
        "provisionedClustersName": args.provisionedClustersName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface GetagentPoolArgs {
    /**
     * Parameter for the name of the agent pool in the provisioned cluster
     */
    agentPoolName: string;
    /**
     * Parameter for the name of the provisioned cluster
     */
    provisionedClustersName: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
}

/**
 * The agentPool resource definition
 */
export interface GetagentPoolResult {
    /**
     * AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
     */
    readonly availabilityZones?: string[];
    /**
     * The underlying cloud infra provider properties.
     */
    readonly cloudProviderProfile?: outputs.hybridcontainerservice.CloudProviderProfileResponse;
    /**
     * Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
     */
    readonly count?: number;
    readonly extendedLocation?: outputs.hybridcontainerservice.AgentPoolResponseExtendedLocation;
    /**
     * Resource Id
     */
    readonly id: string;
    /**
     * The resource location
     */
    readonly location?: string;
    /**
     * The maximum number of nodes for auto-scaling
     */
    readonly maxCount?: number;
    /**
     * The maximum number of pods that can run on a node.
     */
    readonly maxPods?: number;
    /**
     * The minimum number of nodes for auto-scaling
     */
    readonly minCount?: number;
    /**
     * Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
     */
    readonly mode?: string;
    /**
     * Resource Name
     */
    readonly name: string;
    /**
     * The version of node image
     */
    readonly nodeImageVersion?: string;
    /**
     * NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
     */
    readonly nodeLabels?: {[key: string]: string};
    /**
     * NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
     */
    readonly nodeTaints?: string[];
    /**
     * OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
     */
    readonly osType?: string;
    readonly provisioningState: string;
    /**
     * HybridAKSNodePoolStatus defines the observed state of HybridAKSNodePool
     */
    readonly status?: outputs.hybridcontainerservice.AgentPoolProvisioningStatusResponseStatus;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: outputs.hybridcontainerservice.SystemDataResponse;
    /**
     * Resource tags
     */
    readonly tags?: {[key: string]: string};
    /**
     * Resource Type
     */
    readonly type: string;
    /**
     * VmSize - The size of the agent pool VMs.
     */
    readonly vmSize?: string;
}
/**
 * Gets the agent pool in the Hybrid AKS provisioned cluster
 * API Version: 2022-05-01-preview.
 */
export function getagentPoolOutput(args: GetagentPoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetagentPoolResult> {
    return pulumi.output(args).apply((a: any) => getagentPool(a, opts))
}

export interface GetagentPoolOutputArgs {
    /**
     * Parameter for the name of the agent pool in the provisioned cluster
     */
    agentPoolName: pulumi.Input<string>;
    /**
     * Parameter for the name of the provisioned cluster
     */
    provisionedClustersName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
}
