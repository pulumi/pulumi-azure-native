// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { DataFlowArgs } from "./dataFlow";
export type DataFlow = import("./dataFlow").DataFlow;
export const DataFlow: typeof import("./dataFlow").DataFlow = null as any;

export { DatasetArgs } from "./dataset";
export type Dataset = import("./dataset").Dataset;
export const Dataset: typeof import("./dataset").Dataset = null as any;

export { FactoryArgs } from "./factory";
export type Factory = import("./factory").Factory;
export const Factory: typeof import("./factory").Factory = null as any;

export { GetDataFlowArgs, GetDataFlowResult, GetDataFlowOutputArgs } from "./getDataFlow";
export const getDataFlow: typeof import("./getDataFlow").getDataFlow = null as any;
export const getDataFlowOutput: typeof import("./getDataFlow").getDataFlowOutput = null as any;

export { GetDatasetArgs, GetDatasetResult, GetDatasetOutputArgs } from "./getDataset";
export const getDataset: typeof import("./getDataset").getDataset = null as any;
export const getDatasetOutput: typeof import("./getDataset").getDatasetOutput = null as any;

export { GetExposureControlFeatureValueArgs, GetExposureControlFeatureValueResult, GetExposureControlFeatureValueOutputArgs } from "./getExposureControlFeatureValue";
export const getExposureControlFeatureValue: typeof import("./getExposureControlFeatureValue").getExposureControlFeatureValue = null as any;
export const getExposureControlFeatureValueOutput: typeof import("./getExposureControlFeatureValue").getExposureControlFeatureValueOutput = null as any;

export { GetExposureControlFeatureValueByFactoryArgs, GetExposureControlFeatureValueByFactoryResult, GetExposureControlFeatureValueByFactoryOutputArgs } from "./getExposureControlFeatureValueByFactory";
export const getExposureControlFeatureValueByFactory: typeof import("./getExposureControlFeatureValueByFactory").getExposureControlFeatureValueByFactory = null as any;
export const getExposureControlFeatureValueByFactoryOutput: typeof import("./getExposureControlFeatureValueByFactory").getExposureControlFeatureValueByFactoryOutput = null as any;

export { GetFactoryArgs, GetFactoryResult, GetFactoryOutputArgs } from "./getFactory";
export const getFactory: typeof import("./getFactory").getFactory = null as any;
export const getFactoryOutput: typeof import("./getFactory").getFactoryOutput = null as any;

export { GetFactoryDataPlaneAccessArgs, GetFactoryDataPlaneAccessResult, GetFactoryDataPlaneAccessOutputArgs } from "./getFactoryDataPlaneAccess";
export const getFactoryDataPlaneAccess: typeof import("./getFactoryDataPlaneAccess").getFactoryDataPlaneAccess = null as any;
export const getFactoryDataPlaneAccessOutput: typeof import("./getFactoryDataPlaneAccess").getFactoryDataPlaneAccessOutput = null as any;

export { GetFactoryGitHubAccessTokenArgs, GetFactoryGitHubAccessTokenResult, GetFactoryGitHubAccessTokenOutputArgs } from "./getFactoryGitHubAccessToken";
export const getFactoryGitHubAccessToken: typeof import("./getFactoryGitHubAccessToken").getFactoryGitHubAccessToken = null as any;
export const getFactoryGitHubAccessTokenOutput: typeof import("./getFactoryGitHubAccessToken").getFactoryGitHubAccessTokenOutput = null as any;

export { GetGlobalParameterArgs, GetGlobalParameterResult, GetGlobalParameterOutputArgs } from "./getGlobalParameter";
export const getGlobalParameter: typeof import("./getGlobalParameter").getGlobalParameter = null as any;
export const getGlobalParameterOutput: typeof import("./getGlobalParameter").getGlobalParameterOutput = null as any;

export { GetIntegrationRuntimeArgs, GetIntegrationRuntimeResult, GetIntegrationRuntimeOutputArgs } from "./getIntegrationRuntime";
export const getIntegrationRuntime: typeof import("./getIntegrationRuntime").getIntegrationRuntime = null as any;
export const getIntegrationRuntimeOutput: typeof import("./getIntegrationRuntime").getIntegrationRuntimeOutput = null as any;

export { GetIntegrationRuntimeConnectionInfoArgs, GetIntegrationRuntimeConnectionInfoResult, GetIntegrationRuntimeConnectionInfoOutputArgs } from "./getIntegrationRuntimeConnectionInfo";
export const getIntegrationRuntimeConnectionInfo: typeof import("./getIntegrationRuntimeConnectionInfo").getIntegrationRuntimeConnectionInfo = null as any;
export const getIntegrationRuntimeConnectionInfoOutput: typeof import("./getIntegrationRuntimeConnectionInfo").getIntegrationRuntimeConnectionInfoOutput = null as any;

export { GetIntegrationRuntimeObjectMetadatumArgs, GetIntegrationRuntimeObjectMetadatumResult, GetIntegrationRuntimeObjectMetadatumOutputArgs } from "./getIntegrationRuntimeObjectMetadatum";
export const getIntegrationRuntimeObjectMetadatum: typeof import("./getIntegrationRuntimeObjectMetadatum").getIntegrationRuntimeObjectMetadatum = null as any;
export const getIntegrationRuntimeObjectMetadatumOutput: typeof import("./getIntegrationRuntimeObjectMetadatum").getIntegrationRuntimeObjectMetadatumOutput = null as any;

export { GetIntegrationRuntimeStatusArgs, GetIntegrationRuntimeStatusResult, GetIntegrationRuntimeStatusOutputArgs } from "./getIntegrationRuntimeStatus";
export const getIntegrationRuntimeStatus: typeof import("./getIntegrationRuntimeStatus").getIntegrationRuntimeStatus = null as any;
export const getIntegrationRuntimeStatusOutput: typeof import("./getIntegrationRuntimeStatus").getIntegrationRuntimeStatusOutput = null as any;

export { GetLinkedServiceArgs, GetLinkedServiceResult, GetLinkedServiceOutputArgs } from "./getLinkedService";
export const getLinkedService: typeof import("./getLinkedService").getLinkedService = null as any;
export const getLinkedServiceOutput: typeof import("./getLinkedService").getLinkedServiceOutput = null as any;

export { GetManagedPrivateEndpointArgs, GetManagedPrivateEndpointResult, GetManagedPrivateEndpointOutputArgs } from "./getManagedPrivateEndpoint";
export const getManagedPrivateEndpoint: typeof import("./getManagedPrivateEndpoint").getManagedPrivateEndpoint = null as any;
export const getManagedPrivateEndpointOutput: typeof import("./getManagedPrivateEndpoint").getManagedPrivateEndpointOutput = null as any;

export { GetPipelineArgs, GetPipelineResult, GetPipelineOutputArgs } from "./getPipeline";
export const getPipeline: typeof import("./getPipeline").getPipeline = null as any;
export const getPipelineOutput: typeof import("./getPipeline").getPipelineOutput = null as any;

export { GetPrivateEndpointConnectionArgs, GetPrivateEndpointConnectionResult, GetPrivateEndpointConnectionOutputArgs } from "./getPrivateEndpointConnection";
export const getPrivateEndpointConnection: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnection = null as any;
export const getPrivateEndpointConnectionOutput: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnectionOutput = null as any;

export { GetTriggerArgs, GetTriggerResult, GetTriggerOutputArgs } from "./getTrigger";
export const getTrigger: typeof import("./getTrigger").getTrigger = null as any;
export const getTriggerOutput: typeof import("./getTrigger").getTriggerOutput = null as any;

export { GetTriggerEventSubscriptionStatusArgs, GetTriggerEventSubscriptionStatusResult, GetTriggerEventSubscriptionStatusOutputArgs } from "./getTriggerEventSubscriptionStatus";
export const getTriggerEventSubscriptionStatus: typeof import("./getTriggerEventSubscriptionStatus").getTriggerEventSubscriptionStatus = null as any;
export const getTriggerEventSubscriptionStatusOutput: typeof import("./getTriggerEventSubscriptionStatus").getTriggerEventSubscriptionStatusOutput = null as any;

export { GlobalParameterArgs } from "./globalParameter";
export type GlobalParameter = import("./globalParameter").GlobalParameter;
export const GlobalParameter: typeof import("./globalParameter").GlobalParameter = null as any;

export { IntegrationRuntimeArgs } from "./integrationRuntime";
export type IntegrationRuntime = import("./integrationRuntime").IntegrationRuntime;
export const IntegrationRuntime: typeof import("./integrationRuntime").IntegrationRuntime = null as any;

export { LinkedServiceArgs } from "./linkedService";
export type LinkedService = import("./linkedService").LinkedService;
export const LinkedService: typeof import("./linkedService").LinkedService = null as any;

export { ListIntegrationRuntimeAuthKeysArgs, ListIntegrationRuntimeAuthKeysResult, ListIntegrationRuntimeAuthKeysOutputArgs } from "./listIntegrationRuntimeAuthKeys";
export const listIntegrationRuntimeAuthKeys: typeof import("./listIntegrationRuntimeAuthKeys").listIntegrationRuntimeAuthKeys = null as any;
export const listIntegrationRuntimeAuthKeysOutput: typeof import("./listIntegrationRuntimeAuthKeys").listIntegrationRuntimeAuthKeysOutput = null as any;

export { ManagedPrivateEndpointArgs } from "./managedPrivateEndpoint";
export type ManagedPrivateEndpoint = import("./managedPrivateEndpoint").ManagedPrivateEndpoint;
export const ManagedPrivateEndpoint: typeof import("./managedPrivateEndpoint").ManagedPrivateEndpoint = null as any;

export { PipelineArgs } from "./pipeline";
export type Pipeline = import("./pipeline").Pipeline;
export const Pipeline: typeof import("./pipeline").Pipeline = null as any;

export { PrivateEndpointConnectionArgs } from "./privateEndpointConnection";
export type PrivateEndpointConnection = import("./privateEndpointConnection").PrivateEndpointConnection;
export const PrivateEndpointConnection: typeof import("./privateEndpointConnection").PrivateEndpointConnection = null as any;

export { TriggerArgs } from "./trigger";
export type Trigger = import("./trigger").Trigger;
export const Trigger: typeof import("./trigger").Trigger = null as any;

utilities.lazyLoad(exports, ["DataFlow"], () => require("./dataFlow"));
utilities.lazyLoad(exports, ["Dataset"], () => require("./dataset"));
utilities.lazyLoad(exports, ["Factory"], () => require("./factory"));
utilities.lazyLoad(exports, ["getDataFlow","getDataFlowOutput"], () => require("./getDataFlow"));
utilities.lazyLoad(exports, ["getDataset","getDatasetOutput"], () => require("./getDataset"));
utilities.lazyLoad(exports, ["getExposureControlFeatureValue","getExposureControlFeatureValueOutput"], () => require("./getExposureControlFeatureValue"));
utilities.lazyLoad(exports, ["getExposureControlFeatureValueByFactory","getExposureControlFeatureValueByFactoryOutput"], () => require("./getExposureControlFeatureValueByFactory"));
utilities.lazyLoad(exports, ["getFactory","getFactoryOutput"], () => require("./getFactory"));
utilities.lazyLoad(exports, ["getFactoryDataPlaneAccess","getFactoryDataPlaneAccessOutput"], () => require("./getFactoryDataPlaneAccess"));
utilities.lazyLoad(exports, ["getFactoryGitHubAccessToken","getFactoryGitHubAccessTokenOutput"], () => require("./getFactoryGitHubAccessToken"));
utilities.lazyLoad(exports, ["getGlobalParameter","getGlobalParameterOutput"], () => require("./getGlobalParameter"));
utilities.lazyLoad(exports, ["getIntegrationRuntime","getIntegrationRuntimeOutput"], () => require("./getIntegrationRuntime"));
utilities.lazyLoad(exports, ["getIntegrationRuntimeConnectionInfo","getIntegrationRuntimeConnectionInfoOutput"], () => require("./getIntegrationRuntimeConnectionInfo"));
utilities.lazyLoad(exports, ["getIntegrationRuntimeObjectMetadatum","getIntegrationRuntimeObjectMetadatumOutput"], () => require("./getIntegrationRuntimeObjectMetadatum"));
utilities.lazyLoad(exports, ["getIntegrationRuntimeStatus","getIntegrationRuntimeStatusOutput"], () => require("./getIntegrationRuntimeStatus"));
utilities.lazyLoad(exports, ["getLinkedService","getLinkedServiceOutput"], () => require("./getLinkedService"));
utilities.lazyLoad(exports, ["getManagedPrivateEndpoint","getManagedPrivateEndpointOutput"], () => require("./getManagedPrivateEndpoint"));
utilities.lazyLoad(exports, ["getPipeline","getPipelineOutput"], () => require("./getPipeline"));
utilities.lazyLoad(exports, ["getPrivateEndpointConnection","getPrivateEndpointConnectionOutput"], () => require("./getPrivateEndpointConnection"));
utilities.lazyLoad(exports, ["getTrigger","getTriggerOutput"], () => require("./getTrigger"));
utilities.lazyLoad(exports, ["getTriggerEventSubscriptionStatus","getTriggerEventSubscriptionStatusOutput"], () => require("./getTriggerEventSubscriptionStatus"));
utilities.lazyLoad(exports, ["GlobalParameter"], () => require("./globalParameter"));
utilities.lazyLoad(exports, ["IntegrationRuntime"], () => require("./integrationRuntime"));
utilities.lazyLoad(exports, ["LinkedService"], () => require("./linkedService"));
utilities.lazyLoad(exports, ["listIntegrationRuntimeAuthKeys","listIntegrationRuntimeAuthKeysOutput"], () => require("./listIntegrationRuntimeAuthKeys"));
utilities.lazyLoad(exports, ["ManagedPrivateEndpoint"], () => require("./managedPrivateEndpoint"));
utilities.lazyLoad(exports, ["Pipeline"], () => require("./pipeline"));
utilities.lazyLoad(exports, ["PrivateEndpointConnection"], () => require("./privateEndpointConnection"));
utilities.lazyLoad(exports, ["Trigger"], () => require("./trigger"));

// Export enums:
export * from "../../types/enums/datafactory/v20180601";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:datafactory/v20180601:DataFlow":
                return new DataFlow(name, <any>undefined, { urn })
            case "azure-native:datafactory/v20180601:Dataset":
                return new Dataset(name, <any>undefined, { urn })
            case "azure-native:datafactory/v20180601:Factory":
                return new Factory(name, <any>undefined, { urn })
            case "azure-native:datafactory/v20180601:GlobalParameter":
                return new GlobalParameter(name, <any>undefined, { urn })
            case "azure-native:datafactory/v20180601:IntegrationRuntime":
                return new IntegrationRuntime(name, <any>undefined, { urn })
            case "azure-native:datafactory/v20180601:LinkedService":
                return new LinkedService(name, <any>undefined, { urn })
            case "azure-native:datafactory/v20180601:ManagedPrivateEndpoint":
                return new ManagedPrivateEndpoint(name, <any>undefined, { urn })
            case "azure-native:datafactory/v20180601:Pipeline":
                return new Pipeline(name, <any>undefined, { urn })
            case "azure-native:datafactory/v20180601:PrivateEndpointConnection":
                return new PrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:datafactory/v20180601:Trigger":
                return new Trigger(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "datafactory/v20180601", _module)
