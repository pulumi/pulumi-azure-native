// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * A sql pool resource.
 */
export class SqlPoolsV3 extends pulumi.CustomResource {
    /**
     * Get an existing SqlPoolsV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SqlPoolsV3 {
        return new SqlPoolsV3(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:synapse/v20200401preview:SqlPoolsV3';

    /**
     * Returns true if the given object is an instance of SqlPoolsV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlPoolsV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlPoolsV3.__pulumiType;
    }

    /**
     * The period of inactivity in minutes before automatically pausing the sql pool.
     */
    public readonly autoPauseTimer!: pulumi.Output<number | undefined>;
    /**
     * Indicates whether the sql pool can automatically resume when connection attempts are made.
     */
    public readonly autoResume!: pulumi.Output<boolean | undefined>;
    /**
     * The current service level objective name of the sql pool.
     */
    public /*out*/ readonly currentServiceObjectiveName!: pulumi.Output<string>;
    /**
     * Kind of SqlPool.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * The geo-location where the resource lives
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The max service level objective name of the sql pool.
     */
    public readonly maxServiceObjectiveName!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The requested service level objective name of the sql pool.
     */
    public /*out*/ readonly requestedServiceObjectiveName!: pulumi.Output<string>;
    /**
     * The sql pool SKU. The list of SKUs may vary by region and support offer.
     */
    public readonly sku!: pulumi.Output<outputs.synapse.v20200401preview.SkuResponse | undefined>;
    /**
     * The Guid of the sql pool.
     */
    public /*out*/ readonly sqlPoolGuid!: pulumi.Output<string>;
    /**
     * The status of the sql pool.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * SystemData of SqlPool.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.synapse.v20200401preview.SystemDataResponse>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a SqlPoolsV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlPoolsV3Args, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.workspaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceName'");
            }
            inputs["autoPauseTimer"] = args ? args.autoPauseTimer : undefined;
            inputs["autoResume"] = args ? args.autoResume : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["maxServiceObjectiveName"] = args ? args.maxServiceObjectiveName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["sqlPoolName"] = args ? args.sqlPoolName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["workspaceName"] = args ? args.workspaceName : undefined;
            inputs["currentServiceObjectiveName"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["requestedServiceObjectiveName"] = undefined /*out*/;
            inputs["sqlPoolGuid"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["autoPauseTimer"] = undefined /*out*/;
            inputs["autoResume"] = undefined /*out*/;
            inputs["currentServiceObjectiveName"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["maxServiceObjectiveName"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["requestedServiceObjectiveName"] = undefined /*out*/;
            inputs["sku"] = undefined /*out*/;
            inputs["sqlPoolGuid"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:synapse/v20200401preview:SqlPoolsV3" }, { type: "azure-native:synapse:SqlPoolsV3" }, { type: "azure-nextgen:synapse:SqlPoolsV3" }, { type: "azure-native:synapse/v20190601preview:SqlPoolsV3" }, { type: "azure-nextgen:synapse/v20190601preview:SqlPoolsV3" }, { type: "azure-native:synapse/v20201201:SqlPoolsV3" }, { type: "azure-nextgen:synapse/v20201201:SqlPoolsV3" }, { type: "azure-native:synapse/v20210301:SqlPoolsV3" }, { type: "azure-nextgen:synapse/v20210301:SqlPoolsV3" }, { type: "azure-native:synapse/v20210401preview:SqlPoolsV3" }, { type: "azure-nextgen:synapse/v20210401preview:SqlPoolsV3" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(SqlPoolsV3.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a SqlPoolsV3 resource.
 */
export interface SqlPoolsV3Args {
    /**
     * The period of inactivity in minutes before automatically pausing the sql pool.
     */
    autoPauseTimer?: pulumi.Input<number>;
    /**
     * Indicates whether the sql pool can automatically resume when connection attempts are made.
     */
    autoResume?: pulumi.Input<boolean>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The max service level objective name of the sql pool.
     */
    maxServiceObjectiveName?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The sql pool SKU. The list of SKUs may vary by region and support offer.
     */
    sku?: pulumi.Input<inputs.synapse.v20200401preview.SkuArgs>;
    /**
     * The name of the sql pool.
     */
    sqlPoolName?: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the workspace.
     */
    workspaceName: pulumi.Input<string>;
}
