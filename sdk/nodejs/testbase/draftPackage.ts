// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The Test Base Draft Package resource.
 *
 * Uses Azure REST API version 2023-11-01-preview. In version 2.x of the Azure Native provider, it used API version 2023-11-01-preview.
 */
export class DraftPackage extends pulumi.CustomResource {
    /**
     * Get an existing DraftPackage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DraftPackage {
        return new DraftPackage(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:testbase:DraftPackage';

    /**
     * Returns true if the given object is an instance of DraftPackage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DraftPackage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DraftPackage.__pulumiType;
    }

    /**
     * The name of the app file.
     */
    declare public readonly appFileName: pulumi.Output<string | undefined>;
    /**
     * Application name
     */
    declare public readonly applicationName: pulumi.Output<string | undefined>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * Comments added by user.
     */
    declare public readonly comments: pulumi.Output<string | undefined>;
    /**
     * The relative path of the folder hosting package files.
     */
    declare public /*out*/ readonly draftPackagePath: pulumi.Output<string>;
    /**
     * Specifies whether this draft package is used to edit a package.
     */
    declare public readonly editPackage: pulumi.Output<boolean | undefined>;
    /**
     * The executable launch command for script auto-fill. Will be used to run the application.
     */
    declare public readonly executableLaunchCommand: pulumi.Output<string | undefined>;
    /**
     * The list of first party applications to test along with user application.
     */
    declare public readonly firstPartyApps: pulumi.Output<outputs.testbase.FirstPartyAppDefinitionResponse[] | undefined>;
    /**
     * The flighting ring for feature update.
     */
    declare public readonly flightingRing: pulumi.Output<string | undefined>;
    /**
     * The list of gallery apps to test along with user application.
     */
    declare public readonly galleryApps: pulumi.Output<outputs.testbase.GalleryAppDefinitionResponse[] | undefined>;
    /**
     * The highlight files in the package.
     */
    declare public readonly highlightedFiles: pulumi.Output<outputs.testbase.HighlightedFileResponse[] | undefined>;
    /**
     * Specifies the baseline os and target os for inplace upgrade.
     */
    declare public readonly inplaceUpgradeOSPair: pulumi.Output<outputs.testbase.InplaceUpgradeOSInfoResponse | undefined>;
    /**
     * The metadata of Intune enrollment.
     */
    declare public readonly intuneEnrollmentMetadata: pulumi.Output<outputs.testbase.IntuneEnrollmentMetadataResponse | undefined>;
    /**
     * Metadata used to generate draft package folder and scripts.
     */
    declare public readonly intuneMetadata: pulumi.Output<outputs.testbase.DraftPackageIntuneAppMetadataResponse | undefined>;
    /**
     * The UTC timestamp when the package was last modified.
     */
    declare public /*out*/ readonly lastModifiedTime: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Specifies the package id from which the draft package copied.
     */
    declare public readonly packageId: pulumi.Output<string | undefined>;
    /**
     * Tags of the package to be created.
     */
    declare public readonly packageTags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The process name for script auto-fill. Will be used to identify the application process.
     */
    declare public readonly processName: pulumi.Output<string | undefined>;
    /**
     * The provisioning state of the resource.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * The source type.
     */
    declare public readonly sourceType: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.testbase.SystemDataResponse>;
    /**
     * Tab state.
     */
    declare public readonly tabState: pulumi.Output<outputs.testbase.TabStateResponse | undefined>;
    /**
     * Specifies the target OSs of specific OS Update types.
     */
    declare public readonly targetOSList: pulumi.Output<outputs.testbase.TargetOSInfoResponse[] | undefined>;
    /**
     * OOB, functional or flow driven. Mapped to the data in 'tests' property.
     */
    declare public readonly testTypes: pulumi.Output<string[] | undefined>;
    /**
     * The detailed test information.
     */
    declare public readonly tests: pulumi.Output<outputs.testbase.TestResponse[] | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * Indicates whether user choose to enable script auto-fill.
     */
    declare public readonly useAutofill: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether a sample package should be used instead of the one uploaded by the user.
     */
    declare public readonly useSample: pulumi.Output<boolean | undefined>;
    /**
     * Application version
     */
    declare public readonly version: pulumi.Output<string | undefined>;
    /**
     * The relative path for a temporarily folder for package creation work.
     */
    declare public /*out*/ readonly workingPath: pulumi.Output<string>;

    /**
     * Create a DraftPackage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DraftPackageArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.testBaseAccountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'testBaseAccountName'");
            }
            resourceInputs["appFileName"] = args?.appFileName;
            resourceInputs["applicationName"] = args?.applicationName;
            resourceInputs["comments"] = args?.comments;
            resourceInputs["draftPackageName"] = args?.draftPackageName;
            resourceInputs["editPackage"] = (args?.editPackage) ?? false;
            resourceInputs["executableLaunchCommand"] = args?.executableLaunchCommand;
            resourceInputs["firstPartyApps"] = args?.firstPartyApps;
            resourceInputs["flightingRing"] = args?.flightingRing;
            resourceInputs["galleryApps"] = args?.galleryApps;
            resourceInputs["highlightedFiles"] = args?.highlightedFiles;
            resourceInputs["inplaceUpgradeOSPair"] = args?.inplaceUpgradeOSPair;
            resourceInputs["intuneEnrollmentMetadata"] = args?.intuneEnrollmentMetadata;
            resourceInputs["intuneMetadata"] = args?.intuneMetadata;
            resourceInputs["packageId"] = args?.packageId;
            resourceInputs["packageTags"] = args?.packageTags;
            resourceInputs["processName"] = args?.processName;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["sourceType"] = (args?.sourceType) ?? "Native";
            resourceInputs["tabState"] = args?.tabState;
            resourceInputs["targetOSList"] = args?.targetOSList;
            resourceInputs["testBaseAccountName"] = args?.testBaseAccountName;
            resourceInputs["testTypes"] = args?.testTypes;
            resourceInputs["tests"] = args?.tests;
            resourceInputs["useAutofill"] = args?.useAutofill;
            resourceInputs["useSample"] = args?.useSample;
            resourceInputs["version"] = args?.version;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["draftPackagePath"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["workingPath"] = undefined /*out*/;
        } else {
            resourceInputs["appFileName"] = undefined /*out*/;
            resourceInputs["applicationName"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["comments"] = undefined /*out*/;
            resourceInputs["draftPackagePath"] = undefined /*out*/;
            resourceInputs["editPackage"] = undefined /*out*/;
            resourceInputs["executableLaunchCommand"] = undefined /*out*/;
            resourceInputs["firstPartyApps"] = undefined /*out*/;
            resourceInputs["flightingRing"] = undefined /*out*/;
            resourceInputs["galleryApps"] = undefined /*out*/;
            resourceInputs["highlightedFiles"] = undefined /*out*/;
            resourceInputs["inplaceUpgradeOSPair"] = undefined /*out*/;
            resourceInputs["intuneEnrollmentMetadata"] = undefined /*out*/;
            resourceInputs["intuneMetadata"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["packageId"] = undefined /*out*/;
            resourceInputs["packageTags"] = undefined /*out*/;
            resourceInputs["processName"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tabState"] = undefined /*out*/;
            resourceInputs["targetOSList"] = undefined /*out*/;
            resourceInputs["testTypes"] = undefined /*out*/;
            resourceInputs["tests"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["useAutofill"] = undefined /*out*/;
            resourceInputs["useSample"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["workingPath"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:testbase/v20231101preview:DraftPackage" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(DraftPackage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DraftPackage resource.
 */
export interface DraftPackageArgs {
    /**
     * The name of the app file.
     */
    appFileName?: pulumi.Input<string>;
    /**
     * Application name
     */
    applicationName?: pulumi.Input<string>;
    /**
     * Comments added by user.
     */
    comments?: pulumi.Input<string>;
    /**
     * The resource name of the Test Base Draft Package.
     */
    draftPackageName?: pulumi.Input<string>;
    /**
     * Specifies whether this draft package is used to edit a package.
     */
    editPackage?: pulumi.Input<boolean>;
    /**
     * The executable launch command for script auto-fill. Will be used to run the application.
     */
    executableLaunchCommand?: pulumi.Input<string>;
    /**
     * The list of first party applications to test along with user application.
     */
    firstPartyApps?: pulumi.Input<pulumi.Input<inputs.testbase.FirstPartyAppDefinitionArgs>[]>;
    /**
     * The flighting ring for feature update.
     */
    flightingRing?: pulumi.Input<string>;
    /**
     * The list of gallery apps to test along with user application.
     */
    galleryApps?: pulumi.Input<pulumi.Input<inputs.testbase.GalleryAppDefinitionArgs>[]>;
    /**
     * The highlight files in the package.
     */
    highlightedFiles?: pulumi.Input<pulumi.Input<inputs.testbase.HighlightedFileArgs>[]>;
    /**
     * Specifies the baseline os and target os for inplace upgrade.
     */
    inplaceUpgradeOSPair?: pulumi.Input<inputs.testbase.InplaceUpgradeOSInfoArgs>;
    /**
     * The metadata of Intune enrollment.
     */
    intuneEnrollmentMetadata?: pulumi.Input<inputs.testbase.IntuneEnrollmentMetadataArgs>;
    /**
     * Metadata used to generate draft package folder and scripts.
     */
    intuneMetadata?: pulumi.Input<inputs.testbase.DraftPackageIntuneAppMetadataArgs>;
    /**
     * Specifies the package id from which the draft package copied.
     */
    packageId?: pulumi.Input<string>;
    /**
     * Tags of the package to be created.
     */
    packageTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The process name for script auto-fill. Will be used to identify the application process.
     */
    processName?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The source type.
     */
    sourceType?: pulumi.Input<string | enums.testbase.DraftPackageSourceType>;
    /**
     * Tab state.
     */
    tabState?: pulumi.Input<inputs.testbase.TabStateArgs>;
    /**
     * Specifies the target OSs of specific OS Update types.
     */
    targetOSList?: pulumi.Input<pulumi.Input<inputs.testbase.TargetOSInfoArgs>[]>;
    /**
     * The resource name of the Test Base Account.
     */
    testBaseAccountName: pulumi.Input<string>;
    /**
     * OOB, functional or flow driven. Mapped to the data in 'tests' property.
     */
    testTypes?: pulumi.Input<pulumi.Input<string | enums.testbase.TestType>[]>;
    /**
     * The detailed test information.
     */
    tests?: pulumi.Input<pulumi.Input<inputs.testbase.TestArgs>[]>;
    /**
     * Indicates whether user choose to enable script auto-fill.
     */
    useAutofill?: pulumi.Input<boolean>;
    /**
     * Specifies whether a sample package should be used instead of the one uploaded by the user.
     */
    useSample?: pulumi.Input<boolean>;
    /**
     * Application version
     */
    version?: pulumi.Input<string>;
}
