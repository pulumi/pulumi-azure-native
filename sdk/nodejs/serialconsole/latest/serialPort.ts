// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Represents the serial port of the parent resource.
 * Latest API Version: 2018-05-01.
 *
 * @deprecated The 'latest' version is deprecated. Please migrate to the resource in the top-level module: 'azure-nextgen:serialconsole:SerialPort'.
 */
export class SerialPort extends pulumi.CustomResource {
    /**
     * Get an existing SerialPort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SerialPort {
        pulumi.log.warn("SerialPort is deprecated: The 'latest' version is deprecated. Please migrate to the resource in the top-level module: 'azure-nextgen:serialconsole:SerialPort'.")
        return new SerialPort(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:serialconsole/latest:SerialPort';

    /**
     * Returns true if the given object is an instance of SerialPort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SerialPort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SerialPort.__pulumiType;
    }

    /**
     * Resource name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Specifies whether the port is enabled for a serial console connection.
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * Resource type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a SerialPort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated The 'latest' version is deprecated. Please migrate to the resource in the top-level module: 'azure-nextgen:serialconsole:SerialPort'. */
    constructor(name: string, args: SerialPortArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("SerialPort is deprecated: The 'latest' version is deprecated. Please migrate to the resource in the top-level module: 'azure-nextgen:serialconsole:SerialPort'.")
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if ((!args || args.parentResource === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'parentResource'");
            }
            if ((!args || args.parentResourceType === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'parentResourceType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.resourceProviderNamespace === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resourceProviderNamespace'");
            }
            inputs["parentResource"] = args ? args.parentResource : undefined;
            inputs["parentResourceType"] = args ? args.parentResourceType : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["resourceProviderNamespace"] = args ? args.resourceProviderNamespace : undefined;
            inputs["serialPort"] = args ? args.serialPort : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["name"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:serialconsole:SerialPort" }, { type: "azure-nextgen:serialconsole/v20180501:SerialPort" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(SerialPort.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a SerialPort resource.
 */
export interface SerialPortArgs {
    /**
     * The resource name, or subordinate path, for the parent of the serial port. For example: the name of the virtual machine.
     */
    readonly parentResource: pulumi.Input<string>;
    /**
     * The resource type of the parent resource.  For example: 'virtualMachines' or 'virtualMachineScaleSets'
     */
    readonly parentResourceType: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The namespace of the resource provider.
     */
    readonly resourceProviderNamespace: pulumi.Input<string>;
    /**
     * The name of the serial port to create.
     */
    readonly serialPort?: pulumi.Input<string>;
    /**
     * Specifies whether the port is enabled for a serial console connection.
     */
    readonly state?: pulumi.Input<enums.serialconsole.latest.SerialPortState>;
}
