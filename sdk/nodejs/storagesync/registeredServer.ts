// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Registered Server resource.
 *
 * Uses Azure REST API version 2022-09-01. In version 2.x of the Azure Native provider, it used API version 2022-06-01.
 *
 * Other available API versions: 2022-06-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native storagesync [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class RegisteredServer extends pulumi.CustomResource {
    /**
     * Get an existing RegisteredServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RegisteredServer {
        return new RegisteredServer(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:storagesync:RegisteredServer';

    /**
     * Returns true if the given object is an instance of RegisteredServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegisteredServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegisteredServer.__pulumiType;
    }

    /**
     * Server auth type.
     */
    declare public /*out*/ readonly activeAuthType: pulumi.Output<string>;
    /**
     * Registered Server Agent Version
     */
    declare public readonly agentVersion: pulumi.Output<string | undefined>;
    /**
     * Registered Server Agent Version Expiration Date
     */
    declare public /*out*/ readonly agentVersionExpirationDate: pulumi.Output<string>;
    /**
     * Registered Server Agent Version Status
     */
    declare public /*out*/ readonly agentVersionStatus: pulumi.Output<string>;
    /**
     * Server Application Id
     */
    declare public readonly applicationId: pulumi.Output<string | undefined>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * Registered Server clusterId
     */
    declare public readonly clusterId: pulumi.Output<string | undefined>;
    /**
     * Registered Server clusterName
     */
    declare public readonly clusterName: pulumi.Output<string | undefined>;
    /**
     * Resource discoveryEndpointUri
     */
    declare public /*out*/ readonly discoveryEndpointUri: pulumi.Output<string | undefined>;
    /**
     * Friendly Name
     */
    declare public readonly friendlyName: pulumi.Output<string | undefined>;
    /**
     * Apply server with newly discovered ApplicationId if available.
     */
    declare public readonly identity: pulumi.Output<boolean>;
    /**
     * Registered Server last heart beat
     */
    declare public readonly lastHeartBeat: pulumi.Output<string | undefined>;
    /**
     * Resource Last Operation Name
     */
    declare public /*out*/ readonly lastOperationName: pulumi.Output<string | undefined>;
    /**
     * Registered Server lastWorkflowId
     */
    declare public /*out*/ readonly lastWorkflowId: pulumi.Output<string | undefined>;
    /**
     * Latest Server Application Id discovered from the server. It is not yet applied.
     */
    declare public /*out*/ readonly latestApplicationId: pulumi.Output<string | undefined>;
    /**
     * Management Endpoint Uri
     */
    declare public /*out*/ readonly managementEndpointUri: pulumi.Output<string | undefined>;
    /**
     * Monitoring Configuration
     */
    declare public /*out*/ readonly monitoringConfiguration: pulumi.Output<string | undefined>;
    /**
     * Telemetry Endpoint Uri
     */
    declare public /*out*/ readonly monitoringEndpointUri: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Registered Server Provisioning State
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string | undefined>;
    /**
     * Resource Location
     */
    declare public /*out*/ readonly resourceLocation: pulumi.Output<string | undefined>;
    /**
     * Registered Server Certificate
     */
    declare public readonly serverCertificate: pulumi.Output<string | undefined>;
    /**
     * Registered Server serverId
     */
    declare public readonly serverId: pulumi.Output<string | undefined>;
    /**
     * Registered Server Management Error Code
     */
    declare public /*out*/ readonly serverManagementErrorCode: pulumi.Output<number | undefined>;
    /**
     * Server name
     */
    declare public /*out*/ readonly serverName: pulumi.Output<string>;
    /**
     * Registered Server OS Version
     */
    declare public readonly serverOSVersion: pulumi.Output<string | undefined>;
    /**
     * Registered Server serverRole
     */
    declare public readonly serverRole: pulumi.Output<string | undefined>;
    /**
     * Service Location
     */
    declare public /*out*/ readonly serviceLocation: pulumi.Output<string | undefined>;
    /**
     * Registered Server storageSyncServiceUid
     */
    declare public /*out*/ readonly storageSyncServiceUid: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.storagesync.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a RegisteredServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegisteredServerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.storageSyncServiceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageSyncServiceName'");
            }
            resourceInputs["agentVersion"] = args?.agentVersion;
            resourceInputs["applicationId"] = args?.applicationId;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["clusterName"] = args?.clusterName;
            resourceInputs["friendlyName"] = args?.friendlyName;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["lastHeartBeat"] = args?.lastHeartBeat;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["serverCertificate"] = args?.serverCertificate;
            resourceInputs["serverId"] = args?.serverId;
            resourceInputs["serverOSVersion"] = args?.serverOSVersion;
            resourceInputs["serverRole"] = args?.serverRole;
            resourceInputs["storageSyncServiceName"] = args?.storageSyncServiceName;
            resourceInputs["activeAuthType"] = undefined /*out*/;
            resourceInputs["agentVersionExpirationDate"] = undefined /*out*/;
            resourceInputs["agentVersionStatus"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["discoveryEndpointUri"] = undefined /*out*/;
            resourceInputs["lastOperationName"] = undefined /*out*/;
            resourceInputs["lastWorkflowId"] = undefined /*out*/;
            resourceInputs["latestApplicationId"] = undefined /*out*/;
            resourceInputs["managementEndpointUri"] = undefined /*out*/;
            resourceInputs["monitoringConfiguration"] = undefined /*out*/;
            resourceInputs["monitoringEndpointUri"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceLocation"] = undefined /*out*/;
            resourceInputs["serverManagementErrorCode"] = undefined /*out*/;
            resourceInputs["serverName"] = undefined /*out*/;
            resourceInputs["serviceLocation"] = undefined /*out*/;
            resourceInputs["storageSyncServiceUid"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["activeAuthType"] = undefined /*out*/;
            resourceInputs["agentVersion"] = undefined /*out*/;
            resourceInputs["agentVersionExpirationDate"] = undefined /*out*/;
            resourceInputs["agentVersionStatus"] = undefined /*out*/;
            resourceInputs["applicationId"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["discoveryEndpointUri"] = undefined /*out*/;
            resourceInputs["friendlyName"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["lastHeartBeat"] = undefined /*out*/;
            resourceInputs["lastOperationName"] = undefined /*out*/;
            resourceInputs["lastWorkflowId"] = undefined /*out*/;
            resourceInputs["latestApplicationId"] = undefined /*out*/;
            resourceInputs["managementEndpointUri"] = undefined /*out*/;
            resourceInputs["monitoringConfiguration"] = undefined /*out*/;
            resourceInputs["monitoringEndpointUri"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceLocation"] = undefined /*out*/;
            resourceInputs["serverCertificate"] = undefined /*out*/;
            resourceInputs["serverId"] = undefined /*out*/;
            resourceInputs["serverManagementErrorCode"] = undefined /*out*/;
            resourceInputs["serverName"] = undefined /*out*/;
            resourceInputs["serverOSVersion"] = undefined /*out*/;
            resourceInputs["serverRole"] = undefined /*out*/;
            resourceInputs["serviceLocation"] = undefined /*out*/;
            resourceInputs["storageSyncServiceUid"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:storagesync/v20170605preview:RegisteredServer" }, { type: "azure-native:storagesync/v20180402:RegisteredServer" }, { type: "azure-native:storagesync/v20180701:RegisteredServer" }, { type: "azure-native:storagesync/v20181001:RegisteredServer" }, { type: "azure-native:storagesync/v20190201:RegisteredServer" }, { type: "azure-native:storagesync/v20190301:RegisteredServer" }, { type: "azure-native:storagesync/v20190601:RegisteredServer" }, { type: "azure-native:storagesync/v20191001:RegisteredServer" }, { type: "azure-native:storagesync/v20200301:RegisteredServer" }, { type: "azure-native:storagesync/v20200901:RegisteredServer" }, { type: "azure-native:storagesync/v20220601:RegisteredServer" }, { type: "azure-native:storagesync/v20220901:RegisteredServer" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(RegisteredServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RegisteredServer resource.
 */
export interface RegisteredServerArgs {
    /**
     * Registered Server Agent Version
     */
    agentVersion?: pulumi.Input<string>;
    /**
     * Server ServicePrincipal Id
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Registered Server clusterId
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Registered Server clusterName
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Friendly Name
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * Apply server with newly discovered ApplicationId if available.
     */
    identity?: pulumi.Input<boolean>;
    /**
     * Registered Server last heart beat
     */
    lastHeartBeat?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Registered Server Certificate
     */
    serverCertificate?: pulumi.Input<string>;
    /**
     * Registered Server serverId
     */
    serverId?: pulumi.Input<string>;
    /**
     * Registered Server OS Version
     */
    serverOSVersion?: pulumi.Input<string>;
    /**
     * Registered Server serverRole
     */
    serverRole?: pulumi.Input<string>;
    /**
     * Name of Storage Sync Service resource.
     */
    storageSyncServiceName: pulumi.Input<string>;
}
