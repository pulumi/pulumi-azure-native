// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Security GovernanceRule over a given scope
 */
export function getGovernanceRule(args: GetGovernanceRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetGovernanceRuleResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("azure-native:security/v20220101preview:getGovernanceRule", {
        "ruleId": args.ruleId,
    }, opts);
}

export interface GetGovernanceRuleArgs {
    /**
     * The security GovernanceRule key - unique key for the standard GovernanceRule
     */
    ruleId: string;
}

/**
 * Security GovernanceRule over a given scope
 */
export interface GetGovernanceRuleResult {
    /**
     * description of the governanceRule
     */
    readonly description?: string;
    /**
     * display name of the governanceRule
     */
    readonly displayName: string;
    /**
     * The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
     */
    readonly governanceEmailNotification?: outputs.security.v20220101preview.GovernanceRuleEmailNotificationResponse;
    /**
     * Resource Id
     */
    readonly id: string;
    /**
     * Defines whether the rule is active/inactive
     */
    readonly isDisabled?: boolean;
    /**
     * Defines whether there is a grace period on the governance rule
     */
    readonly isGracePeriod?: boolean;
    /**
     * Resource name
     */
    readonly name: string;
    /**
     * The Owner source for the governance rule - e.g. Manually by user@contoso.com - see example
     */
    readonly ownerSource: outputs.security.v20220101preview.GovernanceRuleOwnerSourceResponse;
    /**
     * Governance rule remediation timeframe - this is the time that will affect on the grace-period duration e.g. 7.00:00:00 - means 7 days
     */
    readonly remediationTimeframe?: string;
    /**
     * The governance rule priority, priority to the lower number. Rules with the same priority on the same subscription will not be allowed
     */
    readonly rulePriority: number;
    /**
     * The rule type of the governance rule, defines the source of the rule e.g. Integrated
     */
    readonly ruleType: string;
    /**
     * The governance rule source, what the rule affects, e.g. Assessments
     */
    readonly sourceResourceType: string;
    /**
     * Resource type
     */
    readonly type: string;
}

export function getGovernanceRuleOutput(args: GetGovernanceRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGovernanceRuleResult> {
    return pulumi.output(args).apply(a => getGovernanceRule(a, opts))
}

export interface GetGovernanceRuleOutputArgs {
    /**
     * The security GovernanceRule key - unique key for the standard GovernanceRule
     */
    ruleId: pulumi.Input<string>;
}
