// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Security Standard on a resource
 *
 * Uses Azure REST API version 2021-08-01-preview. In version 2.x of the Azure Native provider, it used API version 2021-08-01-preview.
 */
export class Standard extends pulumi.CustomResource {
    /**
     * Get an existing Standard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Standard {
        return new Standard(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:security:Standard';

    /**
     * Returns true if the given object is an instance of Standard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Standard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Standard.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * category of the standard provided
     */
    declare public readonly category: pulumi.Output<string | undefined>;
    /**
     * List of component objects containing component unique keys (such as assessment keys) to apply to standard scope.  Currently only supports assessment keys.
     */
    declare public readonly components: pulumi.Output<outputs.security.StandardComponentPropertiesResponse[] | undefined>;
    /**
     * description of the standard
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * display name of the standard, equivalent to the standardId
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * Entity tag is used for comparing two or more entities from the same requested resource.
     */
    declare public /*out*/ readonly etag: pulumi.Output<string | undefined>;
    /**
     * Kind of the resource
     */
    declare public readonly kind: pulumi.Output<string | undefined>;
    /**
     * Location where the resource is stored
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * Resource name
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * standard type (Custom or BuiltIn only currently)
     */
    declare public /*out*/ readonly standardType: pulumi.Output<string>;
    /**
     * List of all standard supported clouds.
     */
    declare public readonly supportedClouds: pulumi.Output<string[] | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.security.SystemDataResponse>;
    /**
     * A list of key value pairs that describe the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a Standard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StandardArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["category"] = args?.category;
            resourceInputs["components"] = args?.components;
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["kind"] = args?.kind;
            resourceInputs["location"] = args?.location;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["standardId"] = args?.standardId;
            resourceInputs["supportedClouds"] = args?.supportedClouds;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["standardType"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["components"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["standardType"] = undefined /*out*/;
            resourceInputs["supportedClouds"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:security/v20210801preview:Standard" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Standard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Standard resource.
 */
export interface StandardArgs {
    /**
     * category of the standard provided
     */
    category?: pulumi.Input<string>;
    /**
     * List of component objects containing component unique keys (such as assessment keys) to apply to standard scope.  Currently only supports assessment keys.
     */
    components?: pulumi.Input<pulumi.Input<inputs.security.StandardComponentPropertiesArgs>[]>;
    /**
     * description of the standard
     */
    description?: pulumi.Input<string>;
    /**
     * display name of the standard, equivalent to the standardId
     */
    displayName?: pulumi.Input<string>;
    /**
     * Kind of the resource
     */
    kind?: pulumi.Input<string>;
    /**
     * Location where the resource is stored
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The Security Standard key - unique key for the standard type
     */
    standardId?: pulumi.Input<string>;
    /**
     * List of all standard supported clouds.
     */
    supportedClouds?: pulumi.Input<pulumi.Input<enums.security.StandardSupportedClouds>[]>;
    /**
     * A list of key value pairs that describe the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
