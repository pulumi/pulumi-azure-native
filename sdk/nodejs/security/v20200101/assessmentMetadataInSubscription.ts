// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Security assessment metadata
 */
export class AssessmentMetadataInSubscription extends pulumi.CustomResource {
    /**
     * Get an existing AssessmentMetadataInSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AssessmentMetadataInSubscription {
        return new AssessmentMetadataInSubscription(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:security/v20200101:AssessmentMetadataInSubscription';

    /**
     * Returns true if the given object is an instance of AssessmentMetadataInSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssessmentMetadataInSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssessmentMetadataInSubscription.__pulumiType;
    }

    /**
     * BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition
     */
    public readonly assessmentType!: pulumi.Output<string>;
    public readonly category!: pulumi.Output<string[] | undefined>;
    /**
     * Human readable description of the assessment
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * User friendly display name of the assessment
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The implementation effort required to remediate this assessment
     */
    public readonly implementationEffort!: pulumi.Output<string | undefined>;
    /**
     * Resource name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Describes the partner that created the assessment
     */
    public readonly partnerData!: pulumi.Output<outputs.security.v20200101.SecurityAssessmentMetadataPartnerDataResponse | undefined>;
    /**
     * Azure resource ID of the policy definition that turns this assessment calculation on
     */
    public /*out*/ readonly policyDefinitionId!: pulumi.Output<string>;
    /**
     * True if this assessment is in preview release status
     */
    public readonly preview!: pulumi.Output<boolean | undefined>;
    /**
     * Human readable description of what you should do to mitigate this security issue
     */
    public readonly remediationDescription!: pulumi.Output<string | undefined>;
    /**
     * The severity level of the assessment
     */
    public readonly severity!: pulumi.Output<string>;
    public readonly threats!: pulumi.Output<string[] | undefined>;
    /**
     * Resource type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The user impact of the assessment
     */
    public readonly userImpact!: pulumi.Output<string | undefined>;

    /**
     * Create a AssessmentMetadataInSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssessmentMetadataInSubscriptionArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.assessmentMetadataName === undefined) {
                throw new Error("Missing required property 'assessmentMetadataName'");
            }
            if (!args || args.assessmentType === undefined) {
                throw new Error("Missing required property 'assessmentType'");
            }
            if (!args || args.displayName === undefined) {
                throw new Error("Missing required property 'displayName'");
            }
            if (!args || args.severity === undefined) {
                throw new Error("Missing required property 'severity'");
            }
            inputs["assessmentMetadataName"] = args ? args.assessmentMetadataName : undefined;
            inputs["assessmentType"] = args ? args.assessmentType : undefined;
            inputs["category"] = args ? args.category : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["implementationEffort"] = args ? args.implementationEffort : undefined;
            inputs["partnerData"] = args ? args.partnerData : undefined;
            inputs["preview"] = args ? args.preview : undefined;
            inputs["remediationDescription"] = args ? args.remediationDescription : undefined;
            inputs["severity"] = args ? args.severity : undefined;
            inputs["threats"] = args ? args.threats : undefined;
            inputs["userImpact"] = args ? args.userImpact : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["policyDefinitionId"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["assessmentType"] = undefined /*out*/;
            inputs["category"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["implementationEffort"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["partnerData"] = undefined /*out*/;
            inputs["policyDefinitionId"] = undefined /*out*/;
            inputs["preview"] = undefined /*out*/;
            inputs["remediationDescription"] = undefined /*out*/;
            inputs["severity"] = undefined /*out*/;
            inputs["threats"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["userImpact"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:security/latest:AssessmentMetadataInSubscription" }, { type: "azure-nextgen:security/v20190101preview:AssessmentMetadataInSubscription" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(AssessmentMetadataInSubscription.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a AssessmentMetadataInSubscription resource.
 */
export interface AssessmentMetadataInSubscriptionArgs {
    /**
     * The Assessment Key - Unique key for the assessment type
     */
    readonly assessmentMetadataName: pulumi.Input<string>;
    /**
     * BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition
     */
    readonly assessmentType: pulumi.Input<string>;
    readonly category?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human readable description of the assessment
     */
    readonly description?: pulumi.Input<string>;
    /**
     * User friendly display name of the assessment
     */
    readonly displayName: pulumi.Input<string>;
    /**
     * The implementation effort required to remediate this assessment
     */
    readonly implementationEffort?: pulumi.Input<string>;
    /**
     * Describes the partner that created the assessment
     */
    readonly partnerData?: pulumi.Input<inputs.security.v20200101.SecurityAssessmentMetadataPartnerData>;
    /**
     * True if this assessment is in preview release status
     */
    readonly preview?: pulumi.Input<boolean>;
    /**
     * Human readable description of what you should do to mitigate this security issue
     */
    readonly remediationDescription?: pulumi.Input<string>;
    /**
     * The severity level of the assessment
     */
    readonly severity: pulumi.Input<string>;
    readonly threats?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The user impact of the assessment
     */
    readonly userImpact?: pulumi.Input<string>;
}
