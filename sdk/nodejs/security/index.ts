// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AdvancedThreatProtectionArgs } from "./advancedThreatProtection";
export type AdvancedThreatProtection = import("./advancedThreatProtection").AdvancedThreatProtection;
export const AdvancedThreatProtection: typeof import("./advancedThreatProtection").AdvancedThreatProtection = null as any;
utilities.lazyLoad(exports, ["AdvancedThreatProtection"], () => require("./advancedThreatProtection"));

export { AlertsSuppressionRuleArgs } from "./alertsSuppressionRule";
export type AlertsSuppressionRule = import("./alertsSuppressionRule").AlertsSuppressionRule;
export const AlertsSuppressionRule: typeof import("./alertsSuppressionRule").AlertsSuppressionRule = null as any;
utilities.lazyLoad(exports, ["AlertsSuppressionRule"], () => require("./alertsSuppressionRule"));

export { APICollectionArgs } from "./apicollection";
export type APICollection = import("./apicollection").APICollection;
export const APICollection: typeof import("./apicollection").APICollection = null as any;
utilities.lazyLoad(exports, ["APICollection"], () => require("./apicollection"));

export { APICollectionByAzureApiManagementServiceArgs } from "./apicollectionByAzureApiManagementService";
export type APICollectionByAzureApiManagementService = import("./apicollectionByAzureApiManagementService").APICollectionByAzureApiManagementService;
export const APICollectionByAzureApiManagementService: typeof import("./apicollectionByAzureApiManagementService").APICollectionByAzureApiManagementService = null as any;
utilities.lazyLoad(exports, ["APICollectionByAzureApiManagementService"], () => require("./apicollectionByAzureApiManagementService"));

export { ApplicationArgs } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { AssessmentArgs } from "./assessment";
export type Assessment = import("./assessment").Assessment;
export const Assessment: typeof import("./assessment").Assessment = null as any;
utilities.lazyLoad(exports, ["Assessment"], () => require("./assessment"));

export { AssessmentMetadataInSubscriptionArgs } from "./assessmentMetadataInSubscription";
export type AssessmentMetadataInSubscription = import("./assessmentMetadataInSubscription").AssessmentMetadataInSubscription;
export const AssessmentMetadataInSubscription: typeof import("./assessmentMetadataInSubscription").AssessmentMetadataInSubscription = null as any;
utilities.lazyLoad(exports, ["AssessmentMetadataInSubscription"], () => require("./assessmentMetadataInSubscription"));

export { AssessmentsMetadataSubscriptionArgs } from "./assessmentsMetadataSubscription";
export type AssessmentsMetadataSubscription = import("./assessmentsMetadataSubscription").AssessmentsMetadataSubscription;
export const AssessmentsMetadataSubscription: typeof import("./assessmentsMetadataSubscription").AssessmentsMetadataSubscription = null as any;
utilities.lazyLoad(exports, ["AssessmentsMetadataSubscription"], () => require("./assessmentsMetadataSubscription"));

export { AssignmentArgs } from "./assignment";
export type Assignment = import("./assignment").Assignment;
export const Assignment: typeof import("./assignment").Assignment = null as any;
utilities.lazyLoad(exports, ["Assignment"], () => require("./assignment"));

export { AutomationArgs } from "./automation";
export type Automation = import("./automation").Automation;
export const Automation: typeof import("./automation").Automation = null as any;
utilities.lazyLoad(exports, ["Automation"], () => require("./automation"));

export { AzureServersSettingArgs } from "./azureServersSetting";
export type AzureServersSetting = import("./azureServersSetting").AzureServersSetting;
export const AzureServersSetting: typeof import("./azureServersSetting").AzureServersSetting = null as any;
utilities.lazyLoad(exports, ["AzureServersSetting"], () => require("./azureServersSetting"));

export { ConnectorArgs } from "./connector";
export type Connector = import("./connector").Connector;
export const Connector: typeof import("./connector").Connector = null as any;
utilities.lazyLoad(exports, ["Connector"], () => require("./connector"));

export { CustomAssessmentAutomationArgs } from "./customAssessmentAutomation";
export type CustomAssessmentAutomation = import("./customAssessmentAutomation").CustomAssessmentAutomation;
export const CustomAssessmentAutomation: typeof import("./customAssessmentAutomation").CustomAssessmentAutomation = null as any;
utilities.lazyLoad(exports, ["CustomAssessmentAutomation"], () => require("./customAssessmentAutomation"));

export { CustomEntityStoreAssignmentArgs } from "./customEntityStoreAssignment";
export type CustomEntityStoreAssignment = import("./customEntityStoreAssignment").CustomEntityStoreAssignment;
export const CustomEntityStoreAssignment: typeof import("./customEntityStoreAssignment").CustomEntityStoreAssignment = null as any;
utilities.lazyLoad(exports, ["CustomEntityStoreAssignment"], () => require("./customEntityStoreAssignment"));

export { CustomRecommendationArgs } from "./customRecommendation";
export type CustomRecommendation = import("./customRecommendation").CustomRecommendation;
export const CustomRecommendation: typeof import("./customRecommendation").CustomRecommendation = null as any;
utilities.lazyLoad(exports, ["CustomRecommendation"], () => require("./customRecommendation"));

export { DefenderForStorageArgs } from "./defenderForStorage";
export type DefenderForStorage = import("./defenderForStorage").DefenderForStorage;
export const DefenderForStorage: typeof import("./defenderForStorage").DefenderForStorage = null as any;
utilities.lazyLoad(exports, ["DefenderForStorage"], () => require("./defenderForStorage"));

export { DevOpsConfigurationArgs } from "./devOpsConfiguration";
export type DevOpsConfiguration = import("./devOpsConfiguration").DevOpsConfiguration;
export const DevOpsConfiguration: typeof import("./devOpsConfiguration").DevOpsConfiguration = null as any;
utilities.lazyLoad(exports, ["DevOpsConfiguration"], () => require("./devOpsConfiguration"));

export { DevOpsPolicyAssignmentArgs } from "./devOpsPolicyAssignment";
export type DevOpsPolicyAssignment = import("./devOpsPolicyAssignment").DevOpsPolicyAssignment;
export const DevOpsPolicyAssignment: typeof import("./devOpsPolicyAssignment").DevOpsPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["DevOpsPolicyAssignment"], () => require("./devOpsPolicyAssignment"));

export { DeviceSecurityGroupArgs } from "./deviceSecurityGroup";
export type DeviceSecurityGroup = import("./deviceSecurityGroup").DeviceSecurityGroup;
export const DeviceSecurityGroup: typeof import("./deviceSecurityGroup").DeviceSecurityGroup = null as any;
utilities.lazyLoad(exports, ["DeviceSecurityGroup"], () => require("./deviceSecurityGroup"));

export { GetAPICollectionArgs, GetAPICollectionResult, GetAPICollectionOutputArgs } from "./getAPICollection";
export const getAPICollection: typeof import("./getAPICollection").getAPICollection = null as any;
export const getAPICollectionOutput: typeof import("./getAPICollection").getAPICollectionOutput = null as any;
utilities.lazyLoad(exports, ["getAPICollection","getAPICollectionOutput"], () => require("./getAPICollection"));

export { GetAPICollectionByAzureApiManagementServiceArgs, GetAPICollectionByAzureApiManagementServiceResult, GetAPICollectionByAzureApiManagementServiceOutputArgs } from "./getAPICollectionByAzureApiManagementService";
export const getAPICollectionByAzureApiManagementService: typeof import("./getAPICollectionByAzureApiManagementService").getAPICollectionByAzureApiManagementService = null as any;
export const getAPICollectionByAzureApiManagementServiceOutput: typeof import("./getAPICollectionByAzureApiManagementService").getAPICollectionByAzureApiManagementServiceOutput = null as any;
utilities.lazyLoad(exports, ["getAPICollectionByAzureApiManagementService","getAPICollectionByAzureApiManagementServiceOutput"], () => require("./getAPICollectionByAzureApiManagementService"));

export { GetAdvancedThreatProtectionArgs, GetAdvancedThreatProtectionResult, GetAdvancedThreatProtectionOutputArgs } from "./getAdvancedThreatProtection";
export const getAdvancedThreatProtection: typeof import("./getAdvancedThreatProtection").getAdvancedThreatProtection = null as any;
export const getAdvancedThreatProtectionOutput: typeof import("./getAdvancedThreatProtection").getAdvancedThreatProtectionOutput = null as any;
utilities.lazyLoad(exports, ["getAdvancedThreatProtection","getAdvancedThreatProtectionOutput"], () => require("./getAdvancedThreatProtection"));

export { GetAlertsSuppressionRuleArgs, GetAlertsSuppressionRuleResult, GetAlertsSuppressionRuleOutputArgs } from "./getAlertsSuppressionRule";
export const getAlertsSuppressionRule: typeof import("./getAlertsSuppressionRule").getAlertsSuppressionRule = null as any;
export const getAlertsSuppressionRuleOutput: typeof import("./getAlertsSuppressionRule").getAlertsSuppressionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAlertsSuppressionRule","getAlertsSuppressionRuleOutput"], () => require("./getAlertsSuppressionRule"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetAssessmentArgs, GetAssessmentResult, GetAssessmentOutputArgs } from "./getAssessment";
export const getAssessment: typeof import("./getAssessment").getAssessment = null as any;
export const getAssessmentOutput: typeof import("./getAssessment").getAssessmentOutput = null as any;
utilities.lazyLoad(exports, ["getAssessment","getAssessmentOutput"], () => require("./getAssessment"));

export { GetAssessmentMetadataInSubscriptionArgs, GetAssessmentMetadataInSubscriptionResult, GetAssessmentMetadataInSubscriptionOutputArgs } from "./getAssessmentMetadataInSubscription";
export const getAssessmentMetadataInSubscription: typeof import("./getAssessmentMetadataInSubscription").getAssessmentMetadataInSubscription = null as any;
export const getAssessmentMetadataInSubscriptionOutput: typeof import("./getAssessmentMetadataInSubscription").getAssessmentMetadataInSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getAssessmentMetadataInSubscription","getAssessmentMetadataInSubscriptionOutput"], () => require("./getAssessmentMetadataInSubscription"));

export { GetAssessmentsMetadataSubscriptionArgs, GetAssessmentsMetadataSubscriptionResult, GetAssessmentsMetadataSubscriptionOutputArgs } from "./getAssessmentsMetadataSubscription";
export const getAssessmentsMetadataSubscription: typeof import("./getAssessmentsMetadataSubscription").getAssessmentsMetadataSubscription = null as any;
export const getAssessmentsMetadataSubscriptionOutput: typeof import("./getAssessmentsMetadataSubscription").getAssessmentsMetadataSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getAssessmentsMetadataSubscription","getAssessmentsMetadataSubscriptionOutput"], () => require("./getAssessmentsMetadataSubscription"));

export { GetAssignmentArgs, GetAssignmentResult, GetAssignmentOutputArgs } from "./getAssignment";
export const getAssignment: typeof import("./getAssignment").getAssignment = null as any;
export const getAssignmentOutput: typeof import("./getAssignment").getAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getAssignment","getAssignmentOutput"], () => require("./getAssignment"));

export { GetAutomationArgs, GetAutomationResult, GetAutomationOutputArgs } from "./getAutomation";
export const getAutomation: typeof import("./getAutomation").getAutomation = null as any;
export const getAutomationOutput: typeof import("./getAutomation").getAutomationOutput = null as any;
utilities.lazyLoad(exports, ["getAutomation","getAutomationOutput"], () => require("./getAutomation"));

export { GetAzureServersSettingArgs, GetAzureServersSettingResult, GetAzureServersSettingOutputArgs } from "./getAzureServersSetting";
export const getAzureServersSetting: typeof import("./getAzureServersSetting").getAzureServersSetting = null as any;
export const getAzureServersSettingOutput: typeof import("./getAzureServersSetting").getAzureServersSettingOutput = null as any;
utilities.lazyLoad(exports, ["getAzureServersSetting","getAzureServersSettingOutput"], () => require("./getAzureServersSetting"));

export { GetConnectorArgs, GetConnectorResult, GetConnectorOutputArgs } from "./getConnector";
export const getConnector: typeof import("./getConnector").getConnector = null as any;
export const getConnectorOutput: typeof import("./getConnector").getConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getConnector","getConnectorOutput"], () => require("./getConnector"));

export { GetCustomAssessmentAutomationArgs, GetCustomAssessmentAutomationResult, GetCustomAssessmentAutomationOutputArgs } from "./getCustomAssessmentAutomation";
export const getCustomAssessmentAutomation: typeof import("./getCustomAssessmentAutomation").getCustomAssessmentAutomation = null as any;
export const getCustomAssessmentAutomationOutput: typeof import("./getCustomAssessmentAutomation").getCustomAssessmentAutomationOutput = null as any;
utilities.lazyLoad(exports, ["getCustomAssessmentAutomation","getCustomAssessmentAutomationOutput"], () => require("./getCustomAssessmentAutomation"));

export { GetCustomEntityStoreAssignmentArgs, GetCustomEntityStoreAssignmentResult, GetCustomEntityStoreAssignmentOutputArgs } from "./getCustomEntityStoreAssignment";
export const getCustomEntityStoreAssignment: typeof import("./getCustomEntityStoreAssignment").getCustomEntityStoreAssignment = null as any;
export const getCustomEntityStoreAssignmentOutput: typeof import("./getCustomEntityStoreAssignment").getCustomEntityStoreAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getCustomEntityStoreAssignment","getCustomEntityStoreAssignmentOutput"], () => require("./getCustomEntityStoreAssignment"));

export { GetCustomRecommendationArgs, GetCustomRecommendationResult, GetCustomRecommendationOutputArgs } from "./getCustomRecommendation";
export const getCustomRecommendation: typeof import("./getCustomRecommendation").getCustomRecommendation = null as any;
export const getCustomRecommendationOutput: typeof import("./getCustomRecommendation").getCustomRecommendationOutput = null as any;
utilities.lazyLoad(exports, ["getCustomRecommendation","getCustomRecommendationOutput"], () => require("./getCustomRecommendation"));

export { GetDefenderForStorageArgs, GetDefenderForStorageResult, GetDefenderForStorageOutputArgs } from "./getDefenderForStorage";
export const getDefenderForStorage: typeof import("./getDefenderForStorage").getDefenderForStorage = null as any;
export const getDefenderForStorageOutput: typeof import("./getDefenderForStorage").getDefenderForStorageOutput = null as any;
utilities.lazyLoad(exports, ["getDefenderForStorage","getDefenderForStorageOutput"], () => require("./getDefenderForStorage"));

export { GetDevOpsConfigurationArgs, GetDevOpsConfigurationResult, GetDevOpsConfigurationOutputArgs } from "./getDevOpsConfiguration";
export const getDevOpsConfiguration: typeof import("./getDevOpsConfiguration").getDevOpsConfiguration = null as any;
export const getDevOpsConfigurationOutput: typeof import("./getDevOpsConfiguration").getDevOpsConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getDevOpsConfiguration","getDevOpsConfigurationOutput"], () => require("./getDevOpsConfiguration"));

export { GetDevOpsPolicyAssignmentArgs, GetDevOpsPolicyAssignmentResult, GetDevOpsPolicyAssignmentOutputArgs } from "./getDevOpsPolicyAssignment";
export const getDevOpsPolicyAssignment: typeof import("./getDevOpsPolicyAssignment").getDevOpsPolicyAssignment = null as any;
export const getDevOpsPolicyAssignmentOutput: typeof import("./getDevOpsPolicyAssignment").getDevOpsPolicyAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getDevOpsPolicyAssignment","getDevOpsPolicyAssignmentOutput"], () => require("./getDevOpsPolicyAssignment"));

export { GetDeviceSecurityGroupArgs, GetDeviceSecurityGroupResult, GetDeviceSecurityGroupOutputArgs } from "./getDeviceSecurityGroup";
export const getDeviceSecurityGroup: typeof import("./getDeviceSecurityGroup").getDeviceSecurityGroup = null as any;
export const getDeviceSecurityGroupOutput: typeof import("./getDeviceSecurityGroup").getDeviceSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceSecurityGroup","getDeviceSecurityGroupOutput"], () => require("./getDeviceSecurityGroup"));

export { GetGovernanceAssignmentArgs, GetGovernanceAssignmentResult, GetGovernanceAssignmentOutputArgs } from "./getGovernanceAssignment";
export const getGovernanceAssignment: typeof import("./getGovernanceAssignment").getGovernanceAssignment = null as any;
export const getGovernanceAssignmentOutput: typeof import("./getGovernanceAssignment").getGovernanceAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getGovernanceAssignment","getGovernanceAssignmentOutput"], () => require("./getGovernanceAssignment"));

export { GetGovernanceRuleArgs, GetGovernanceRuleResult, GetGovernanceRuleOutputArgs } from "./getGovernanceRule";
export const getGovernanceRule: typeof import("./getGovernanceRule").getGovernanceRule = null as any;
export const getGovernanceRuleOutput: typeof import("./getGovernanceRule").getGovernanceRuleOutput = null as any;
utilities.lazyLoad(exports, ["getGovernanceRule","getGovernanceRuleOutput"], () => require("./getGovernanceRule"));

export { GetIotSecuritySolutionArgs, GetIotSecuritySolutionResult, GetIotSecuritySolutionOutputArgs } from "./getIotSecuritySolution";
export const getIotSecuritySolution: typeof import("./getIotSecuritySolution").getIotSecuritySolution = null as any;
export const getIotSecuritySolutionOutput: typeof import("./getIotSecuritySolution").getIotSecuritySolutionOutput = null as any;
utilities.lazyLoad(exports, ["getIotSecuritySolution","getIotSecuritySolutionOutput"], () => require("./getIotSecuritySolution"));

export { GetJitNetworkAccessPolicyArgs, GetJitNetworkAccessPolicyResult, GetJitNetworkAccessPolicyOutputArgs } from "./getJitNetworkAccessPolicy";
export const getJitNetworkAccessPolicy: typeof import("./getJitNetworkAccessPolicy").getJitNetworkAccessPolicy = null as any;
export const getJitNetworkAccessPolicyOutput: typeof import("./getJitNetworkAccessPolicy").getJitNetworkAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getJitNetworkAccessPolicy","getJitNetworkAccessPolicyOutput"], () => require("./getJitNetworkAccessPolicy"));

export { GetPricingArgs, GetPricingResult, GetPricingOutputArgs } from "./getPricing";
export const getPricing: typeof import("./getPricing").getPricing = null as any;
export const getPricingOutput: typeof import("./getPricing").getPricingOutput = null as any;
utilities.lazyLoad(exports, ["getPricing","getPricingOutput"], () => require("./getPricing"));

export { GetSecurityConnectorArgs, GetSecurityConnectorResult, GetSecurityConnectorOutputArgs } from "./getSecurityConnector";
export const getSecurityConnector: typeof import("./getSecurityConnector").getSecurityConnector = null as any;
export const getSecurityConnectorOutput: typeof import("./getSecurityConnector").getSecurityConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityConnector","getSecurityConnectorOutput"], () => require("./getSecurityConnector"));

export { GetSecurityConnectorApplicationArgs, GetSecurityConnectorApplicationResult, GetSecurityConnectorApplicationOutputArgs } from "./getSecurityConnectorApplication";
export const getSecurityConnectorApplication: typeof import("./getSecurityConnectorApplication").getSecurityConnectorApplication = null as any;
export const getSecurityConnectorApplicationOutput: typeof import("./getSecurityConnectorApplication").getSecurityConnectorApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityConnectorApplication","getSecurityConnectorApplicationOutput"], () => require("./getSecurityConnectorApplication"));

export { GetSecurityContactArgs, GetSecurityContactResult, GetSecurityContactOutputArgs } from "./getSecurityContact";
export const getSecurityContact: typeof import("./getSecurityContact").getSecurityContact = null as any;
export const getSecurityContactOutput: typeof import("./getSecurityContact").getSecurityContactOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityContact","getSecurityContactOutput"], () => require("./getSecurityContact"));

export { GetSecurityOperatorArgs, GetSecurityOperatorResult, GetSecurityOperatorOutputArgs } from "./getSecurityOperator";
export const getSecurityOperator: typeof import("./getSecurityOperator").getSecurityOperator = null as any;
export const getSecurityOperatorOutput: typeof import("./getSecurityOperator").getSecurityOperatorOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityOperator","getSecurityOperatorOutput"], () => require("./getSecurityOperator"));

export { GetSecurityStandardArgs, GetSecurityStandardResult, GetSecurityStandardOutputArgs } from "./getSecurityStandard";
export const getSecurityStandard: typeof import("./getSecurityStandard").getSecurityStandard = null as any;
export const getSecurityStandardOutput: typeof import("./getSecurityStandard").getSecurityStandardOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityStandard","getSecurityStandardOutput"], () => require("./getSecurityStandard"));

export { GetServerVulnerabilityAssessmentArgs, GetServerVulnerabilityAssessmentResult, GetServerVulnerabilityAssessmentOutputArgs } from "./getServerVulnerabilityAssessment";
export const getServerVulnerabilityAssessment: typeof import("./getServerVulnerabilityAssessment").getServerVulnerabilityAssessment = null as any;
export const getServerVulnerabilityAssessmentOutput: typeof import("./getServerVulnerabilityAssessment").getServerVulnerabilityAssessmentOutput = null as any;
utilities.lazyLoad(exports, ["getServerVulnerabilityAssessment","getServerVulnerabilityAssessmentOutput"], () => require("./getServerVulnerabilityAssessment"));

export { GetSqlVulnerabilityAssessmentBaselineRuleArgs, GetSqlVulnerabilityAssessmentBaselineRuleResult, GetSqlVulnerabilityAssessmentBaselineRuleOutputArgs } from "./getSqlVulnerabilityAssessmentBaselineRule";
export const getSqlVulnerabilityAssessmentBaselineRule: typeof import("./getSqlVulnerabilityAssessmentBaselineRule").getSqlVulnerabilityAssessmentBaselineRule = null as any;
export const getSqlVulnerabilityAssessmentBaselineRuleOutput: typeof import("./getSqlVulnerabilityAssessmentBaselineRule").getSqlVulnerabilityAssessmentBaselineRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSqlVulnerabilityAssessmentBaselineRule","getSqlVulnerabilityAssessmentBaselineRuleOutput"], () => require("./getSqlVulnerabilityAssessmentBaselineRule"));

export { GetStandardArgs, GetStandardResult, GetStandardOutputArgs } from "./getStandard";
export const getStandard: typeof import("./getStandard").getStandard = null as any;
export const getStandardOutput: typeof import("./getStandard").getStandardOutput = null as any;
utilities.lazyLoad(exports, ["getStandard","getStandardOutput"], () => require("./getStandard"));

export { GetStandardAssignmentArgs, GetStandardAssignmentResult, GetStandardAssignmentOutputArgs } from "./getStandardAssignment";
export const getStandardAssignment: typeof import("./getStandardAssignment").getStandardAssignment = null as any;
export const getStandardAssignmentOutput: typeof import("./getStandardAssignment").getStandardAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getStandardAssignment","getStandardAssignmentOutput"], () => require("./getStandardAssignment"));

export { GetWorkspaceSettingArgs, GetWorkspaceSettingResult, GetWorkspaceSettingOutputArgs } from "./getWorkspaceSetting";
export const getWorkspaceSetting: typeof import("./getWorkspaceSetting").getWorkspaceSetting = null as any;
export const getWorkspaceSettingOutput: typeof import("./getWorkspaceSetting").getWorkspaceSettingOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceSetting","getWorkspaceSettingOutput"], () => require("./getWorkspaceSetting"));

export { GovernanceAssignmentArgs } from "./governanceAssignment";
export type GovernanceAssignment = import("./governanceAssignment").GovernanceAssignment;
export const GovernanceAssignment: typeof import("./governanceAssignment").GovernanceAssignment = null as any;
utilities.lazyLoad(exports, ["GovernanceAssignment"], () => require("./governanceAssignment"));

export { GovernanceRuleArgs } from "./governanceRule";
export type GovernanceRule = import("./governanceRule").GovernanceRule;
export const GovernanceRule: typeof import("./governanceRule").GovernanceRule = null as any;
utilities.lazyLoad(exports, ["GovernanceRule"], () => require("./governanceRule"));

export { IotSecuritySolutionArgs } from "./iotSecuritySolution";
export type IotSecuritySolution = import("./iotSecuritySolution").IotSecuritySolution;
export const IotSecuritySolution: typeof import("./iotSecuritySolution").IotSecuritySolution = null as any;
utilities.lazyLoad(exports, ["IotSecuritySolution"], () => require("./iotSecuritySolution"));

export { JitNetworkAccessPolicyArgs } from "./jitNetworkAccessPolicy";
export type JitNetworkAccessPolicy = import("./jitNetworkAccessPolicy").JitNetworkAccessPolicy;
export const JitNetworkAccessPolicy: typeof import("./jitNetworkAccessPolicy").JitNetworkAccessPolicy = null as any;
utilities.lazyLoad(exports, ["JitNetworkAccessPolicy"], () => require("./jitNetworkAccessPolicy"));

export { ListAzureDevOpsOrgAvailableArgs, ListAzureDevOpsOrgAvailableResult, ListAzureDevOpsOrgAvailableOutputArgs } from "./listAzureDevOpsOrgAvailable";
export const listAzureDevOpsOrgAvailable: typeof import("./listAzureDevOpsOrgAvailable").listAzureDevOpsOrgAvailable = null as any;
export const listAzureDevOpsOrgAvailableOutput: typeof import("./listAzureDevOpsOrgAvailable").listAzureDevOpsOrgAvailableOutput = null as any;
utilities.lazyLoad(exports, ["listAzureDevOpsOrgAvailable","listAzureDevOpsOrgAvailableOutput"], () => require("./listAzureDevOpsOrgAvailable"));

export { ListGitHubOwnerAvailableArgs, ListGitHubOwnerAvailableResult, ListGitHubOwnerAvailableOutputArgs } from "./listGitHubOwnerAvailable";
export const listGitHubOwnerAvailable: typeof import("./listGitHubOwnerAvailable").listGitHubOwnerAvailable = null as any;
export const listGitHubOwnerAvailableOutput: typeof import("./listGitHubOwnerAvailable").listGitHubOwnerAvailableOutput = null as any;
utilities.lazyLoad(exports, ["listGitHubOwnerAvailable","listGitHubOwnerAvailableOutput"], () => require("./listGitHubOwnerAvailable"));

export { ListGitLabGroupAvailableArgs, ListGitLabGroupAvailableResult, ListGitLabGroupAvailableOutputArgs } from "./listGitLabGroupAvailable";
export const listGitLabGroupAvailable: typeof import("./listGitLabGroupAvailable").listGitLabGroupAvailable = null as any;
export const listGitLabGroupAvailableOutput: typeof import("./listGitLabGroupAvailable").listGitLabGroupAvailableOutput = null as any;
utilities.lazyLoad(exports, ["listGitLabGroupAvailable","listGitLabGroupAvailableOutput"], () => require("./listGitLabGroupAvailable"));

export { ListGitLabSubgroupArgs, ListGitLabSubgroupResult, ListGitLabSubgroupOutputArgs } from "./listGitLabSubgroup";
export const listGitLabSubgroup: typeof import("./listGitLabSubgroup").listGitLabSubgroup = null as any;
export const listGitLabSubgroupOutput: typeof import("./listGitLabSubgroup").listGitLabSubgroupOutput = null as any;
utilities.lazyLoad(exports, ["listGitLabSubgroup","listGitLabSubgroupOutput"], () => require("./listGitLabSubgroup"));

export { PricingArgs } from "./pricing";
export type Pricing = import("./pricing").Pricing;
export const Pricing: typeof import("./pricing").Pricing = null as any;
utilities.lazyLoad(exports, ["Pricing"], () => require("./pricing"));

export { SecurityConnectorArgs } from "./securityConnector";
export type SecurityConnector = import("./securityConnector").SecurityConnector;
export const SecurityConnector: typeof import("./securityConnector").SecurityConnector = null as any;
utilities.lazyLoad(exports, ["SecurityConnector"], () => require("./securityConnector"));

export { SecurityConnectorApplicationArgs } from "./securityConnectorApplication";
export type SecurityConnectorApplication = import("./securityConnectorApplication").SecurityConnectorApplication;
export const SecurityConnectorApplication: typeof import("./securityConnectorApplication").SecurityConnectorApplication = null as any;
utilities.lazyLoad(exports, ["SecurityConnectorApplication"], () => require("./securityConnectorApplication"));

export { SecurityContactArgs } from "./securityContact";
export type SecurityContact = import("./securityContact").SecurityContact;
export const SecurityContact: typeof import("./securityContact").SecurityContact = null as any;
utilities.lazyLoad(exports, ["SecurityContact"], () => require("./securityContact"));

export { SecurityOperatorArgs } from "./securityOperator";
export type SecurityOperator = import("./securityOperator").SecurityOperator;
export const SecurityOperator: typeof import("./securityOperator").SecurityOperator = null as any;
utilities.lazyLoad(exports, ["SecurityOperator"], () => require("./securityOperator"));

export { SecurityStandardArgs } from "./securityStandard";
export type SecurityStandard = import("./securityStandard").SecurityStandard;
export const SecurityStandard: typeof import("./securityStandard").SecurityStandard = null as any;
utilities.lazyLoad(exports, ["SecurityStandard"], () => require("./securityStandard"));

export { ServerVulnerabilityAssessmentArgs } from "./serverVulnerabilityAssessment";
export type ServerVulnerabilityAssessment = import("./serverVulnerabilityAssessment").ServerVulnerabilityAssessment;
export const ServerVulnerabilityAssessment: typeof import("./serverVulnerabilityAssessment").ServerVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["ServerVulnerabilityAssessment"], () => require("./serverVulnerabilityAssessment"));

export { SqlVulnerabilityAssessmentBaselineRuleArgs } from "./sqlVulnerabilityAssessmentBaselineRule";
export type SqlVulnerabilityAssessmentBaselineRule = import("./sqlVulnerabilityAssessmentBaselineRule").SqlVulnerabilityAssessmentBaselineRule;
export const SqlVulnerabilityAssessmentBaselineRule: typeof import("./sqlVulnerabilityAssessmentBaselineRule").SqlVulnerabilityAssessmentBaselineRule = null as any;
utilities.lazyLoad(exports, ["SqlVulnerabilityAssessmentBaselineRule"], () => require("./sqlVulnerabilityAssessmentBaselineRule"));

export { StandardArgs } from "./standard";
export type Standard = import("./standard").Standard;
export const Standard: typeof import("./standard").Standard = null as any;
utilities.lazyLoad(exports, ["Standard"], () => require("./standard"));

export { StandardAssignmentArgs } from "./standardAssignment";
export type StandardAssignment = import("./standardAssignment").StandardAssignment;
export const StandardAssignment: typeof import("./standardAssignment").StandardAssignment = null as any;
utilities.lazyLoad(exports, ["StandardAssignment"], () => require("./standardAssignment"));

export { WorkspaceSettingArgs } from "./workspaceSetting";
export type WorkspaceSetting = import("./workspaceSetting").WorkspaceSetting;
export const WorkspaceSetting: typeof import("./workspaceSetting").WorkspaceSetting = null as any;
utilities.lazyLoad(exports, ["WorkspaceSetting"], () => require("./workspaceSetting"));


// Export enums:
export * from "../types/enums/security";

// Export sub-modules:
import * as v20170801preview from "./v20170801preview";
import * as v20190101 from "./v20190101";
import * as v20190101preview from "./v20190101preview";
import * as v20190801 from "./v20190801";
import * as v20200101 from "./v20200101";
import * as v20200101preview from "./v20200101preview";
import * as v20210601 from "./v20210601";
import * as v20210701preview from "./v20210701preview";
import * as v20210801preview from "./v20210801preview";
import * as v20220101preview from "./v20220101preview";
import * as v20220701preview from "./v20220701preview";
import * as v20221120preview from "./v20221120preview";
import * as v20221201preview from "./v20221201preview";
import * as v20230101preview from "./v20230101preview";
import * as v20230201preview from "./v20230201preview";
import * as v20230301preview from "./v20230301preview";
import * as v20230501 from "./v20230501";
import * as v20230901preview from "./v20230901preview";
import * as v20231001preview from "./v20231001preview";
import * as v20231115 from "./v20231115";
import * as v20231201preview from "./v20231201preview";
import * as v20240101 from "./v20240101";
import * as v20240301preview from "./v20240301preview";
import * as v20240401 from "./v20240401";
import * as v20240515preview from "./v20240515preview";
import * as v20240701preview from "./v20240701preview";
import * as v20240801 from "./v20240801";

export {
    v20170801preview,
    v20190101,
    v20190101preview,
    v20190801,
    v20200101,
    v20200101preview,
    v20210601,
    v20210701preview,
    v20210801preview,
    v20220101preview,
    v20220701preview,
    v20221120preview,
    v20221201preview,
    v20230101preview,
    v20230201preview,
    v20230301preview,
    v20230501,
    v20230901preview,
    v20231001preview,
    v20231115,
    v20231201preview,
    v20240101,
    v20240301preview,
    v20240401,
    v20240515preview,
    v20240701preview,
    v20240801,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:security:APICollection":
                return new APICollection(name, <any>undefined, { urn })
            case "azure-native:security:APICollectionByAzureApiManagementService":
                return new APICollectionByAzureApiManagementService(name, <any>undefined, { urn })
            case "azure-native:security:AdvancedThreatProtection":
                return new AdvancedThreatProtection(name, <any>undefined, { urn })
            case "azure-native:security:AlertsSuppressionRule":
                return new AlertsSuppressionRule(name, <any>undefined, { urn })
            case "azure-native:security:Application":
                return new Application(name, <any>undefined, { urn })
            case "azure-native:security:Assessment":
                return new Assessment(name, <any>undefined, { urn })
            case "azure-native:security:AssessmentMetadataInSubscription":
                return new AssessmentMetadataInSubscription(name, <any>undefined, { urn })
            case "azure-native:security:AssessmentsMetadataSubscription":
                return new AssessmentsMetadataSubscription(name, <any>undefined, { urn })
            case "azure-native:security:Assignment":
                return new Assignment(name, <any>undefined, { urn })
            case "azure-native:security:Automation":
                return new Automation(name, <any>undefined, { urn })
            case "azure-native:security:AzureServersSetting":
                return new AzureServersSetting(name, <any>undefined, { urn })
            case "azure-native:security:Connector":
                return new Connector(name, <any>undefined, { urn })
            case "azure-native:security:CustomAssessmentAutomation":
                return new CustomAssessmentAutomation(name, <any>undefined, { urn })
            case "azure-native:security:CustomEntityStoreAssignment":
                return new CustomEntityStoreAssignment(name, <any>undefined, { urn })
            case "azure-native:security:CustomRecommendation":
                return new CustomRecommendation(name, <any>undefined, { urn })
            case "azure-native:security:DefenderForStorage":
                return new DefenderForStorage(name, <any>undefined, { urn })
            case "azure-native:security:DevOpsConfiguration":
                return new DevOpsConfiguration(name, <any>undefined, { urn })
            case "azure-native:security:DevOpsPolicyAssignment":
                return new DevOpsPolicyAssignment(name, <any>undefined, { urn })
            case "azure-native:security:DeviceSecurityGroup":
                return new DeviceSecurityGroup(name, <any>undefined, { urn })
            case "azure-native:security:GovernanceAssignment":
                return new GovernanceAssignment(name, <any>undefined, { urn })
            case "azure-native:security:GovernanceRule":
                return new GovernanceRule(name, <any>undefined, { urn })
            case "azure-native:security:IotSecuritySolution":
                return new IotSecuritySolution(name, <any>undefined, { urn })
            case "azure-native:security:JitNetworkAccessPolicy":
                return new JitNetworkAccessPolicy(name, <any>undefined, { urn })
            case "azure-native:security:Pricing":
                return new Pricing(name, <any>undefined, { urn })
            case "azure-native:security:SecurityConnector":
                return new SecurityConnector(name, <any>undefined, { urn })
            case "azure-native:security:SecurityConnectorApplication":
                return new SecurityConnectorApplication(name, <any>undefined, { urn })
            case "azure-native:security:SecurityContact":
                return new SecurityContact(name, <any>undefined, { urn })
            case "azure-native:security:SecurityOperator":
                return new SecurityOperator(name, <any>undefined, { urn })
            case "azure-native:security:SecurityStandard":
                return new SecurityStandard(name, <any>undefined, { urn })
            case "azure-native:security:ServerVulnerabilityAssessment":
                return new ServerVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azure-native:security:SqlVulnerabilityAssessmentBaselineRule":
                return new SqlVulnerabilityAssessmentBaselineRule(name, <any>undefined, { urn })
            case "azure-native:security:Standard":
                return new Standard(name, <any>undefined, { urn })
            case "azure-native:security:StandardAssignment":
                return new StandardAssignment(name, <any>undefined, { urn })
            case "azure-native:security:WorkspaceSetting":
                return new WorkspaceSetting(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "security", _module)
