// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Describes a hybrid machine.
 */
export class Machine extends pulumi.CustomResource {
    /**
     * Get an existing Machine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Machine {
        return new Machine(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:hybridcompute/v20190802preview:Machine';

    /**
     * Returns true if the given object is an instance of Machine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Machine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Machine.__pulumiType;
    }

    /**
     * The hybrid machine agent full version.
     */
    public /*out*/ readonly agentVersion!: pulumi.Output<string>;
    /**
     * Public Key that the client provides to be used during initial resource onboarding
     */
    public readonly clientPublicKey!: pulumi.Output<string | undefined>;
    /**
     * Specifies the hybrid machine display name.
     */
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    /**
     * Details about the error state.
     */
    public /*out*/ readonly errorDetails!: pulumi.Output<outputs.hybridcompute.v20190802preview.ErrorDetailResponse[]>;
    /**
     * Machine Extensions information
     */
    public readonly extensions!: pulumi.Output<outputs.hybridcompute.v20190802preview.MachineExtensionInstanceViewResponse[] | undefined>;
    /**
     * The time of the last status change.
     */
    public /*out*/ readonly lastStatusChange!: pulumi.Output<string>;
    /**
     * Resource location
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the hybrid machine FQDN.
     */
    public /*out*/ readonly machineFqdn!: pulumi.Output<string>;
    /**
     * Resource name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Operating System running on the hybrid machine.
     */
    public readonly osName!: pulumi.Output<string | undefined>;
    /**
     * Specifies the operating system settings for the hybrid machine.
     */
    public /*out*/ readonly osProfile!: pulumi.Output<outputs.hybridcompute.v20190802preview.OSProfileResponse>;
    /**
     * The version of Operating System running on the hybrid machine.
     */
    public readonly osVersion!: pulumi.Output<string | undefined>;
    /**
     * Resource's Physical Location
     */
    public readonly physicalLocation!: pulumi.Output<string | undefined>;
    /**
     * The identity's principal id.
     */
    public /*out*/ readonly principalId!: pulumi.Output<string>;
    /**
     * The provisioning state, which only appears in the response.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The status of the hybrid machine agent.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The identity's tenant id.
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    /**
     * Resource type
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Specifies the hybrid machine unique ID.
     */
    public /*out*/ readonly vmId!: pulumi.Output<string>;

    /**
     * Create a Machine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MachineArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["clientPublicKey"] = args ? args.clientPublicKey : undefined;
            inputs["extensions"] = args ? args.extensions : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["osName"] = args ? args.osName : undefined;
            inputs["osVersion"] = args ? args.osVersion : undefined;
            inputs["physicalLocation"] = args ? args.physicalLocation : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["agentVersion"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["errorDetails"] = undefined /*out*/;
            inputs["lastStatusChange"] = undefined /*out*/;
            inputs["machineFqdn"] = undefined /*out*/;
            inputs["osProfile"] = undefined /*out*/;
            inputs["principalId"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["tenantId"] = undefined /*out*/;
            inputs["vmId"] = undefined /*out*/;
        } else {
            inputs["agentVersion"] = undefined /*out*/;
            inputs["clientPublicKey"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["errorDetails"] = undefined /*out*/;
            inputs["extensions"] = undefined /*out*/;
            inputs["lastStatusChange"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["machineFqdn"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["osName"] = undefined /*out*/;
            inputs["osProfile"] = undefined /*out*/;
            inputs["osVersion"] = undefined /*out*/;
            inputs["physicalLocation"] = undefined /*out*/;
            inputs["principalId"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["tenantId"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["vmId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:hybridcompute/latest:Machine" }, { type: "azure-nextgen:hybridcompute/v20190318preview:Machine" }, { type: "azure-nextgen:hybridcompute/v20191212:Machine" }, { type: "azure-nextgen:hybridcompute/v20200730preview:Machine" }, { type: "azure-nextgen:hybridcompute/v20200802:Machine" }, { type: "azure-nextgen:hybridcompute/v20200815preview:Machine" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(Machine.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Machine resource.
 */
export interface MachineArgs {
    /**
     * Public Key that the client provides to be used during initial resource onboarding
     */
    readonly clientPublicKey?: pulumi.Input<string>;
    /**
     * Machine Extensions information
     */
    readonly extensions?: pulumi.Input<pulumi.Input<inputs.hybridcompute.v20190802preview.MachineExtensionInstanceView>[]>;
    /**
     * Resource location
     */
    readonly location: pulumi.Input<string>;
    /**
     * The name of the hybrid machine.
     */
    readonly name: pulumi.Input<string>;
    /**
     * The Operating System running on the hybrid machine.
     */
    readonly osName?: pulumi.Input<string>;
    /**
     * The version of Operating System running on the hybrid machine.
     */
    readonly osVersion?: pulumi.Input<string>;
    /**
     * Resource's Physical Location
     */
    readonly physicalLocation?: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The identity type.
     */
    readonly type?: pulumi.Input<string>;
}
