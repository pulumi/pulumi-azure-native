// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Describes a license profile in a hybrid machine.
 *
 * Uses Azure REST API version 2024-07-10. In version 2.x of the Azure Native provider, it used API version 2023-06-20-preview.
 *
 * Other available API versions: 2023-06-20-preview, 2023-10-03-preview, 2024-03-31-preview, 2024-05-20-preview, 2024-07-31-preview, 2024-09-10-preview, 2024-11-10-preview, 2025-01-13, 2025-02-19-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native hybridcompute [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class LicenseProfile extends pulumi.CustomResource {
    /**
     * Get an existing LicenseProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LicenseProfile {
        return new LicenseProfile(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:hybridcompute:LicenseProfile';

    /**
     * Returns true if the given object is an instance of LicenseProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicenseProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicenseProfile.__pulumiType;
    }

    /**
     * The resource id of the license.
     */
    declare public readonly assignedLicense: pulumi.Output<string | undefined>;
    /**
     * The guid id of the license.
     */
    declare public /*out*/ readonly assignedLicenseImmutableId: pulumi.Output<string>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * The timestamp in UTC when the billing ends.
     */
    declare public /*out*/ readonly billingEndDate: pulumi.Output<string>;
    /**
     * The timestamp in UTC when the billing starts.
     */
    declare public /*out*/ readonly billingStartDate: pulumi.Output<string>;
    /**
     * The timestamp in UTC when the user disenrolled the feature.
     */
    declare public /*out*/ readonly disenrollmentDate: pulumi.Output<string>;
    /**
     * The timestamp in UTC when the user enrolls the feature.
     */
    declare public /*out*/ readonly enrollmentDate: pulumi.Output<string>;
    /**
     * The errors that were encountered during the feature enrollment or disenrollment.
     */
    declare public /*out*/ readonly error: pulumi.Output<outputs.hybridcompute.ErrorDetailResponse>;
    /**
     * Indicates the eligibility state of Esu.
     */
    declare public /*out*/ readonly esuEligibility: pulumi.Output<string>;
    /**
     * Indicates whether there is an ESU Key currently active for the machine.
     */
    declare public /*out*/ readonly esuKeyState: pulumi.Output<string>;
    /**
     * The list of ESU keys.
     */
    declare public /*out*/ readonly esuKeys: pulumi.Output<outputs.hybridcompute.EsuKeyResponse[]>;
    /**
     * The geo-location where the resource lives
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The list of product features.
     */
    declare public readonly productFeatures: pulumi.Output<outputs.hybridcompute.ProductFeatureResponse[] | undefined>;
    /**
     * Indicates the product type of the license.
     */
    declare public readonly productType: pulumi.Output<string | undefined>;
    /**
     * The provisioning state, which only appears in the response.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * The type of the Esu servers.
     */
    declare public /*out*/ readonly serverType: pulumi.Output<string>;
    /**
     * Specifies if this machine is licensed as part of a Software Assurance agreement.
     */
    declare public readonly softwareAssuranceCustomer: pulumi.Output<boolean | undefined>;
    /**
     * Indicates the subscription status of the product.
     */
    declare public readonly subscriptionStatus: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.hybridcompute.SystemDataResponse>;
    /**
     * Resource tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a LicenseProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicenseProfileArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.machineName === undefined && !opts.urn) {
                throw new Error("Missing required property 'machineName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["assignedLicense"] = args?.assignedLicense;
            resourceInputs["licenseProfileName"] = args?.licenseProfileName;
            resourceInputs["location"] = args?.location;
            resourceInputs["machineName"] = args?.machineName;
            resourceInputs["productFeatures"] = args?.productFeatures;
            resourceInputs["productType"] = args?.productType;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["softwareAssuranceCustomer"] = args?.softwareAssuranceCustomer;
            resourceInputs["subscriptionStatus"] = args?.subscriptionStatus;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["assignedLicenseImmutableId"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["billingEndDate"] = undefined /*out*/;
            resourceInputs["billingStartDate"] = undefined /*out*/;
            resourceInputs["disenrollmentDate"] = undefined /*out*/;
            resourceInputs["enrollmentDate"] = undefined /*out*/;
            resourceInputs["error"] = undefined /*out*/;
            resourceInputs["esuEligibility"] = undefined /*out*/;
            resourceInputs["esuKeyState"] = undefined /*out*/;
            resourceInputs["esuKeys"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["serverType"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["assignedLicense"] = undefined /*out*/;
            resourceInputs["assignedLicenseImmutableId"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["billingEndDate"] = undefined /*out*/;
            resourceInputs["billingStartDate"] = undefined /*out*/;
            resourceInputs["disenrollmentDate"] = undefined /*out*/;
            resourceInputs["enrollmentDate"] = undefined /*out*/;
            resourceInputs["error"] = undefined /*out*/;
            resourceInputs["esuEligibility"] = undefined /*out*/;
            resourceInputs["esuKeyState"] = undefined /*out*/;
            resourceInputs["esuKeys"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["productFeatures"] = undefined /*out*/;
            resourceInputs["productType"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["serverType"] = undefined /*out*/;
            resourceInputs["softwareAssuranceCustomer"] = undefined /*out*/;
            resourceInputs["subscriptionStatus"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:hybridcompute/v20230620preview:LicenseProfile" }, { type: "azure-native:hybridcompute/v20231003preview:LicenseProfile" }, { type: "azure-native:hybridcompute/v20240331preview:LicenseProfile" }, { type: "azure-native:hybridcompute/v20240520preview:LicenseProfile" }, { type: "azure-native:hybridcompute/v20240710:LicenseProfile" }, { type: "azure-native:hybridcompute/v20240731preview:LicenseProfile" }, { type: "azure-native:hybridcompute/v20240910preview:LicenseProfile" }, { type: "azure-native:hybridcompute/v20241110preview:LicenseProfile" }, { type: "azure-native:hybridcompute/v20250113:LicenseProfile" }, { type: "azure-native:hybridcompute/v20250219preview:LicenseProfile" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(LicenseProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LicenseProfile resource.
 */
export interface LicenseProfileArgs {
    /**
     * The resource id of the license.
     */
    assignedLicense?: pulumi.Input<string>;
    /**
     * The name of the license profile.
     */
    licenseProfileName?: pulumi.Input<string>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the hybrid machine.
     */
    machineName: pulumi.Input<string>;
    /**
     * The list of product features.
     */
    productFeatures?: pulumi.Input<pulumi.Input<inputs.hybridcompute.ProductFeatureArgs>[]>;
    /**
     * Indicates the product type of the license.
     */
    productType?: pulumi.Input<string | enums.hybridcompute.LicenseProfileProductType>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Specifies if this machine is licensed as part of a Software Assurance agreement.
     */
    softwareAssuranceCustomer?: pulumi.Input<boolean>;
    /**
     * Indicates the subscription status of the product.
     */
    subscriptionStatus?: pulumi.Input<string | enums.hybridcompute.LicenseProfileSubscriptionStatus>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
