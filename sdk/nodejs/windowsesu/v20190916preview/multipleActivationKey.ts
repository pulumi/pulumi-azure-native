// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * MAK key details.
 */
export class MultipleActivationKey extends pulumi.CustomResource {
    /**
     * Get an existing MultipleActivationKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MultipleActivationKey {
        return new MultipleActivationKey(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:windowsesu/v20190916preview:MultipleActivationKey';

    /**
     * Returns true if the given object is an instance of MultipleActivationKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MultipleActivationKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MultipleActivationKey.__pulumiType;
    }

    /**
     * Agreement number under which the key is requested.
     */
    public readonly agreementNumber!: pulumi.Output<string | undefined>;
    /**
     * End of support of security updates activated by the MAK key.
     */
    public /*out*/ readonly expirationDate!: pulumi.Output<string>;
    /**
     * Number of activations/servers using the MAK key.
     */
    public readonly installedServerNumber!: pulumi.Output<number | undefined>;
    /**
     * <code> true </code> if user has eligible on-premises Windows physical or virtual machines, and that the requested key will only be used in their organization; <code> false </code> otherwise.
     */
    public readonly isEligible!: pulumi.Output<boolean | undefined>;
    /**
     * The geo-location where the resource lives
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * MAK 5x5 key.
     */
    public /*out*/ readonly multipleActivationKey!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Type of OS for which the key is requested.
     */
    public readonly osType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Type of support
     */
    public readonly supportType!: pulumi.Output<string | undefined>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a MultipleActivationKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MultipleActivationKeyArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.multipleActivationKeyName === undefined) {
                throw new Error("Missing required property 'multipleActivationKeyName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["agreementNumber"] = args ? args.agreementNumber : undefined;
            inputs["installedServerNumber"] = args ? args.installedServerNumber : undefined;
            inputs["isEligible"] = args ? args.isEligible : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["multipleActivationKeyName"] = args ? args.multipleActivationKeyName : undefined;
            inputs["osType"] = args ? args.osType : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["supportType"] = args ? args.supportType : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["expirationDate"] = undefined /*out*/;
            inputs["multipleActivationKey"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["agreementNumber"] = undefined /*out*/;
            inputs["expirationDate"] = undefined /*out*/;
            inputs["installedServerNumber"] = undefined /*out*/;
            inputs["isEligible"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["multipleActivationKey"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["osType"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["supportType"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(MultipleActivationKey.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a MultipleActivationKey resource.
 */
export interface MultipleActivationKeyArgs {
    /**
     * Agreement number under which the key is requested.
     */
    readonly agreementNumber?: pulumi.Input<string>;
    /**
     * Number of activations/servers using the MAK key.
     */
    readonly installedServerNumber?: pulumi.Input<number>;
    /**
     * <code> true </code> if user has eligible on-premises Windows physical or virtual machines, and that the requested key will only be used in their organization; <code> false </code> otherwise.
     */
    readonly isEligible?: pulumi.Input<boolean>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Input<string>;
    /**
     * The name of the MAK key.
     */
    readonly multipleActivationKeyName: pulumi.Input<string>;
    /**
     * Type of OS for which the key is requested.
     */
    readonly osType?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * Type of support
     */
    readonly supportType?: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
