// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ApiGatewayArgs } from "./apiGateway";
export type ApiGateway = import("./apiGateway").ApiGateway;
export const ApiGateway: typeof import("./apiGateway").ApiGateway = null as any;
utilities.lazyLoad(exports, ["ApiGateway"], () => require("./apiGateway"));

export { ApiGatewayConfigConnectionArgs } from "./apiGatewayConfigConnection";
export type ApiGatewayConfigConnection = import("./apiGatewayConfigConnection").ApiGatewayConfigConnection;
export const ApiGatewayConfigConnection: typeof import("./apiGatewayConfigConnection").ApiGatewayConfigConnection = null as any;
utilities.lazyLoad(exports, ["ApiGatewayConfigConnection"], () => require("./apiGatewayConfigConnection"));

export { GetApiGatewayArgs, GetApiGatewayResult, GetApiGatewayOutputArgs } from "./getApiGateway";
export const getApiGateway: typeof import("./getApiGateway").getApiGateway = null as any;
export const getApiGatewayOutput: typeof import("./getApiGateway").getApiGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getApiGateway","getApiGatewayOutput"], () => require("./getApiGateway"));

export { GetApiGatewayConfigConnectionArgs, GetApiGatewayConfigConnectionResult, GetApiGatewayConfigConnectionOutputArgs } from "./getApiGatewayConfigConnection";
export const getApiGatewayConfigConnection: typeof import("./getApiGatewayConfigConnection").getApiGatewayConfigConnection = null as any;
export const getApiGatewayConfigConnectionOutput: typeof import("./getApiGatewayConfigConnection").getApiGatewayConfigConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayConfigConnection","getApiGatewayConfigConnectionOutput"], () => require("./getApiGatewayConfigConnection"));

export { GetApiManagementServiceDomainOwnershipIdentifierArgs, GetApiManagementServiceDomainOwnershipIdentifierResult } from "./getApiManagementServiceDomainOwnershipIdentifier";
export const getApiManagementServiceDomainOwnershipIdentifier: typeof import("./getApiManagementServiceDomainOwnershipIdentifier").getApiManagementServiceDomainOwnershipIdentifier = null as any;
export const getApiManagementServiceDomainOwnershipIdentifierOutput: typeof import("./getApiManagementServiceDomainOwnershipIdentifier").getApiManagementServiceDomainOwnershipIdentifierOutput = null as any;
utilities.lazyLoad(exports, ["getApiManagementServiceDomainOwnershipIdentifier","getApiManagementServiceDomainOwnershipIdentifierOutput"], () => require("./getApiManagementServiceDomainOwnershipIdentifier"));

export { GetWorkspaceApiDiagnosticArgs, GetWorkspaceApiDiagnosticResult, GetWorkspaceApiDiagnosticOutputArgs } from "./getWorkspaceApiDiagnostic";
export const getWorkspaceApiDiagnostic: typeof import("./getWorkspaceApiDiagnostic").getWorkspaceApiDiagnostic = null as any;
export const getWorkspaceApiDiagnosticOutput: typeof import("./getWorkspaceApiDiagnostic").getWorkspaceApiDiagnosticOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceApiDiagnostic","getWorkspaceApiDiagnosticOutput"], () => require("./getWorkspaceApiDiagnostic"));

export { GetWorkspaceBackendArgs, GetWorkspaceBackendResult, GetWorkspaceBackendOutputArgs } from "./getWorkspaceBackend";
export const getWorkspaceBackend: typeof import("./getWorkspaceBackend").getWorkspaceBackend = null as any;
export const getWorkspaceBackendOutput: typeof import("./getWorkspaceBackend").getWorkspaceBackendOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceBackend","getWorkspaceBackendOutput"], () => require("./getWorkspaceBackend"));

export { GetWorkspaceCertificateArgs, GetWorkspaceCertificateResult, GetWorkspaceCertificateOutputArgs } from "./getWorkspaceCertificate";
export const getWorkspaceCertificate: typeof import("./getWorkspaceCertificate").getWorkspaceCertificate = null as any;
export const getWorkspaceCertificateOutput: typeof import("./getWorkspaceCertificate").getWorkspaceCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceCertificate","getWorkspaceCertificateOutput"], () => require("./getWorkspaceCertificate"));

export { GetWorkspaceDiagnosticArgs, GetWorkspaceDiagnosticResult, GetWorkspaceDiagnosticOutputArgs } from "./getWorkspaceDiagnostic";
export const getWorkspaceDiagnostic: typeof import("./getWorkspaceDiagnostic").getWorkspaceDiagnostic = null as any;
export const getWorkspaceDiagnosticOutput: typeof import("./getWorkspaceDiagnostic").getWorkspaceDiagnosticOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceDiagnostic","getWorkspaceDiagnosticOutput"], () => require("./getWorkspaceDiagnostic"));

export { GetWorkspaceLoggerArgs, GetWorkspaceLoggerResult, GetWorkspaceLoggerOutputArgs } from "./getWorkspaceLogger";
export const getWorkspaceLogger: typeof import("./getWorkspaceLogger").getWorkspaceLogger = null as any;
export const getWorkspaceLoggerOutput: typeof import("./getWorkspaceLogger").getWorkspaceLoggerOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceLogger","getWorkspaceLoggerOutput"], () => require("./getWorkspaceLogger"));

export { WorkspaceApiDiagnosticArgs } from "./workspaceApiDiagnostic";
export type WorkspaceApiDiagnostic = import("./workspaceApiDiagnostic").WorkspaceApiDiagnostic;
export const WorkspaceApiDiagnostic: typeof import("./workspaceApiDiagnostic").WorkspaceApiDiagnostic = null as any;
utilities.lazyLoad(exports, ["WorkspaceApiDiagnostic"], () => require("./workspaceApiDiagnostic"));

export { WorkspaceBackendArgs } from "./workspaceBackend";
export type WorkspaceBackend = import("./workspaceBackend").WorkspaceBackend;
export const WorkspaceBackend: typeof import("./workspaceBackend").WorkspaceBackend = null as any;
utilities.lazyLoad(exports, ["WorkspaceBackend"], () => require("./workspaceBackend"));

export { WorkspaceCertificateArgs } from "./workspaceCertificate";
export type WorkspaceCertificate = import("./workspaceCertificate").WorkspaceCertificate;
export const WorkspaceCertificate: typeof import("./workspaceCertificate").WorkspaceCertificate = null as any;
utilities.lazyLoad(exports, ["WorkspaceCertificate"], () => require("./workspaceCertificate"));

export { WorkspaceDiagnosticArgs } from "./workspaceDiagnostic";
export type WorkspaceDiagnostic = import("./workspaceDiagnostic").WorkspaceDiagnostic;
export const WorkspaceDiagnostic: typeof import("./workspaceDiagnostic").WorkspaceDiagnostic = null as any;
utilities.lazyLoad(exports, ["WorkspaceDiagnostic"], () => require("./workspaceDiagnostic"));

export { WorkspaceLoggerArgs } from "./workspaceLogger";
export type WorkspaceLogger = import("./workspaceLogger").WorkspaceLogger;
export const WorkspaceLogger: typeof import("./workspaceLogger").WorkspaceLogger = null as any;
utilities.lazyLoad(exports, ["WorkspaceLogger"], () => require("./workspaceLogger"));


// Export enums:
export * from "../../types/enums/apimanagement/v20230901preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:apimanagement/v20230901preview:ApiGateway":
                return new ApiGateway(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20230901preview:ApiGatewayConfigConnection":
                return new ApiGatewayConfigConnection(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20230901preview:WorkspaceApiDiagnostic":
                return new WorkspaceApiDiagnostic(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20230901preview:WorkspaceBackend":
                return new WorkspaceBackend(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20230901preview:WorkspaceCertificate":
                return new WorkspaceCertificate(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20230901preview:WorkspaceDiagnostic":
                return new WorkspaceDiagnostic(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20230901preview:WorkspaceLogger":
                return new WorkspaceLogger(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "apimanagement/v20230901preview", _module)
