// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gateway hostname configuration details.
 */
export class GatewayHostnameConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing GatewayHostnameConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GatewayHostnameConfiguration {
        return new GatewayHostnameConfiguration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:apimanagement/v20191201:GatewayHostnameConfiguration';

    /**
     * Returns true if the given object is an instance of GatewayHostnameConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayHostnameConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayHostnameConfiguration.__pulumiType;
    }

    /**
     * Identifier of Certificate entity that will be used for TLS connection establishment
     */
    public readonly certificateId!: pulumi.Output<string | undefined>;
    /**
     * Hostname value. Supports valid domain name, partial or full wildcard
     */
    public readonly hostname!: pulumi.Output<string | undefined>;
    /**
     * Resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Determines whether gateway requests client certificate
     */
    public readonly negotiateClientCertificate!: pulumi.Output<boolean | undefined>;
    /**
     * Resource type for API Management resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a GatewayHostnameConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayHostnameConfigurationArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.gatewayId === undefined) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if (!args || args.hcId === undefined) {
                throw new Error("Missing required property 'hcId'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            inputs["certificateId"] = args ? args.certificateId : undefined;
            inputs["gatewayId"] = args ? args.gatewayId : undefined;
            inputs["hcId"] = args ? args.hcId : undefined;
            inputs["hostname"] = args ? args.hostname : undefined;
            inputs["negotiateClientCertificate"] = args ? args.negotiateClientCertificate : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["certificateId"] = undefined /*out*/;
            inputs["hostname"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["negotiateClientCertificate"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:apimanagement/latest:GatewayHostnameConfiguration" }, { type: "azure-nextgen:apimanagement/v20191201preview:GatewayHostnameConfiguration" }, { type: "azure-nextgen:apimanagement/v20200601preview:GatewayHostnameConfiguration" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(GatewayHostnameConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a GatewayHostnameConfiguration resource.
 */
export interface GatewayHostnameConfigurationArgs {
    /**
     * Identifier of Certificate entity that will be used for TLS connection establishment
     */
    readonly certificateId?: pulumi.Input<string>;
    /**
     * Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     */
    readonly gatewayId: pulumi.Input<string>;
    /**
     * Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     */
    readonly hcId: pulumi.Input<string>;
    /**
     * Hostname value. Supports valid domain name, partial or full wildcard
     */
    readonly hostname?: pulumi.Input<string>;
    /**
     * Determines whether gateway requests client certificate
     */
    readonly negotiateClientCertificate?: pulumi.Input<boolean>;
    /**
     * The name of the resource group.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the API Management service.
     */
    readonly serviceName: pulumi.Input<string>;
}
