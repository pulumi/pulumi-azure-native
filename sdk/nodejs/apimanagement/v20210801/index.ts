// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ApiArgs } from "./api";
export type Api = import("./api").Api;
export const Api: typeof import("./api").Api = null as any;

export { ApiDiagnosticArgs } from "./apiDiagnostic";
export type ApiDiagnostic = import("./apiDiagnostic").ApiDiagnostic;
export const ApiDiagnostic: typeof import("./apiDiagnostic").ApiDiagnostic = null as any;

export { ApiIssueArgs } from "./apiIssue";
export type ApiIssue = import("./apiIssue").ApiIssue;
export const ApiIssue: typeof import("./apiIssue").ApiIssue = null as any;

export { ApiIssueAttachmentArgs } from "./apiIssueAttachment";
export type ApiIssueAttachment = import("./apiIssueAttachment").ApiIssueAttachment;
export const ApiIssueAttachment: typeof import("./apiIssueAttachment").ApiIssueAttachment = null as any;

export { ApiIssueCommentArgs } from "./apiIssueComment";
export type ApiIssueComment = import("./apiIssueComment").ApiIssueComment;
export const ApiIssueComment: typeof import("./apiIssueComment").ApiIssueComment = null as any;

export { ApiManagementServiceArgs } from "./apiManagementService";
export type ApiManagementService = import("./apiManagementService").ApiManagementService;
export const ApiManagementService: typeof import("./apiManagementService").ApiManagementService = null as any;

export { ApiOperationArgs } from "./apiOperation";
export type ApiOperation = import("./apiOperation").ApiOperation;
export const ApiOperation: typeof import("./apiOperation").ApiOperation = null as any;

export { ApiOperationPolicyArgs } from "./apiOperationPolicy";
export type ApiOperationPolicy = import("./apiOperationPolicy").ApiOperationPolicy;
export const ApiOperationPolicy: typeof import("./apiOperationPolicy").ApiOperationPolicy = null as any;

export { ApiPolicyArgs } from "./apiPolicy";
export type ApiPolicy = import("./apiPolicy").ApiPolicy;
export const ApiPolicy: typeof import("./apiPolicy").ApiPolicy = null as any;

export { ApiReleaseArgs } from "./apiRelease";
export type ApiRelease = import("./apiRelease").ApiRelease;
export const ApiRelease: typeof import("./apiRelease").ApiRelease = null as any;

export { ApiSchemaArgs } from "./apiSchema";
export type ApiSchema = import("./apiSchema").ApiSchema;
export const ApiSchema: typeof import("./apiSchema").ApiSchema = null as any;

export { ApiTagDescriptionArgs } from "./apiTagDescription";
export type ApiTagDescription = import("./apiTagDescription").ApiTagDescription;
export const ApiTagDescription: typeof import("./apiTagDescription").ApiTagDescription = null as any;

export { ApiVersionSetArgs } from "./apiVersionSet";
export type ApiVersionSet = import("./apiVersionSet").ApiVersionSet;
export const ApiVersionSet: typeof import("./apiVersionSet").ApiVersionSet = null as any;

export { AuthorizationServerArgs } from "./authorizationServer";
export type AuthorizationServer = import("./authorizationServer").AuthorizationServer;
export const AuthorizationServer: typeof import("./authorizationServer").AuthorizationServer = null as any;

export { BackendArgs } from "./backend";
export type Backend = import("./backend").Backend;
export const Backend: typeof import("./backend").Backend = null as any;

export { CacheArgs } from "./cache";
export type Cache = import("./cache").Cache;
export const Cache: typeof import("./cache").Cache = null as any;

export { CertificateArgs } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;

export { ContentItemArgs } from "./contentItem";
export type ContentItem = import("./contentItem").ContentItem;
export const ContentItem: typeof import("./contentItem").ContentItem = null as any;

export { ContentTypeArgs } from "./contentType";
export type ContentType = import("./contentType").ContentType;
export const ContentType: typeof import("./contentType").ContentType = null as any;

export { DiagnosticArgs } from "./diagnostic";
export type Diagnostic = import("./diagnostic").Diagnostic;
export const Diagnostic: typeof import("./diagnostic").Diagnostic = null as any;

export { EmailTemplateArgs } from "./emailTemplate";
export type EmailTemplate = import("./emailTemplate").EmailTemplate;
export const EmailTemplate: typeof import("./emailTemplate").EmailTemplate = null as any;

export { GatewayArgs } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;

export { GatewayApiEntityTagArgs } from "./gatewayApiEntityTag";
export type GatewayApiEntityTag = import("./gatewayApiEntityTag").GatewayApiEntityTag;
export const GatewayApiEntityTag: typeof import("./gatewayApiEntityTag").GatewayApiEntityTag = null as any;

export { GatewayCertificateAuthorityArgs } from "./gatewayCertificateAuthority";
export type GatewayCertificateAuthority = import("./gatewayCertificateAuthority").GatewayCertificateAuthority;
export const GatewayCertificateAuthority: typeof import("./gatewayCertificateAuthority").GatewayCertificateAuthority = null as any;

export { GatewayHostnameConfigurationArgs } from "./gatewayHostnameConfiguration";
export type GatewayHostnameConfiguration = import("./gatewayHostnameConfiguration").GatewayHostnameConfiguration;
export const GatewayHostnameConfiguration: typeof import("./gatewayHostnameConfiguration").GatewayHostnameConfiguration = null as any;

export { GetApiArgs, GetApiResult, GetApiOutputArgs } from "./getApi";
export const getApi: typeof import("./getApi").getApi = null as any;
export const getApiOutput: typeof import("./getApi").getApiOutput = null as any;

export { GetApiDiagnosticArgs, GetApiDiagnosticResult, GetApiDiagnosticOutputArgs } from "./getApiDiagnostic";
export const getApiDiagnostic: typeof import("./getApiDiagnostic").getApiDiagnostic = null as any;
export const getApiDiagnosticOutput: typeof import("./getApiDiagnostic").getApiDiagnosticOutput = null as any;

export { GetApiIssueArgs, GetApiIssueResult, GetApiIssueOutputArgs } from "./getApiIssue";
export const getApiIssue: typeof import("./getApiIssue").getApiIssue = null as any;
export const getApiIssueOutput: typeof import("./getApiIssue").getApiIssueOutput = null as any;

export { GetApiIssueAttachmentArgs, GetApiIssueAttachmentResult, GetApiIssueAttachmentOutputArgs } from "./getApiIssueAttachment";
export const getApiIssueAttachment: typeof import("./getApiIssueAttachment").getApiIssueAttachment = null as any;
export const getApiIssueAttachmentOutput: typeof import("./getApiIssueAttachment").getApiIssueAttachmentOutput = null as any;

export { GetApiIssueCommentArgs, GetApiIssueCommentResult, GetApiIssueCommentOutputArgs } from "./getApiIssueComment";
export const getApiIssueComment: typeof import("./getApiIssueComment").getApiIssueComment = null as any;
export const getApiIssueCommentOutput: typeof import("./getApiIssueComment").getApiIssueCommentOutput = null as any;

export { GetApiManagementServiceArgs, GetApiManagementServiceResult, GetApiManagementServiceOutputArgs } from "./getApiManagementService";
export const getApiManagementService: typeof import("./getApiManagementService").getApiManagementService = null as any;
export const getApiManagementServiceOutput: typeof import("./getApiManagementService").getApiManagementServiceOutput = null as any;

export { GetApiManagementServiceDomainOwnershipIdentifierArgs, GetApiManagementServiceDomainOwnershipIdentifierResult } from "./getApiManagementServiceDomainOwnershipIdentifier";
export const getApiManagementServiceDomainOwnershipIdentifier: typeof import("./getApiManagementServiceDomainOwnershipIdentifier").getApiManagementServiceDomainOwnershipIdentifier = null as any;

export { GetApiManagementServiceSsoTokenArgs, GetApiManagementServiceSsoTokenResult, GetApiManagementServiceSsoTokenOutputArgs } from "./getApiManagementServiceSsoToken";
export const getApiManagementServiceSsoToken: typeof import("./getApiManagementServiceSsoToken").getApiManagementServiceSsoToken = null as any;
export const getApiManagementServiceSsoTokenOutput: typeof import("./getApiManagementServiceSsoToken").getApiManagementServiceSsoTokenOutput = null as any;

export { GetApiOperationArgs, GetApiOperationResult, GetApiOperationOutputArgs } from "./getApiOperation";
export const getApiOperation: typeof import("./getApiOperation").getApiOperation = null as any;
export const getApiOperationOutput: typeof import("./getApiOperation").getApiOperationOutput = null as any;

export { GetApiOperationPolicyArgs, GetApiOperationPolicyResult, GetApiOperationPolicyOutputArgs } from "./getApiOperationPolicy";
export const getApiOperationPolicy: typeof import("./getApiOperationPolicy").getApiOperationPolicy = null as any;
export const getApiOperationPolicyOutput: typeof import("./getApiOperationPolicy").getApiOperationPolicyOutput = null as any;

export { GetApiPolicyArgs, GetApiPolicyResult, GetApiPolicyOutputArgs } from "./getApiPolicy";
export const getApiPolicy: typeof import("./getApiPolicy").getApiPolicy = null as any;
export const getApiPolicyOutput: typeof import("./getApiPolicy").getApiPolicyOutput = null as any;

export { GetApiReleaseArgs, GetApiReleaseResult, GetApiReleaseOutputArgs } from "./getApiRelease";
export const getApiRelease: typeof import("./getApiRelease").getApiRelease = null as any;
export const getApiReleaseOutput: typeof import("./getApiRelease").getApiReleaseOutput = null as any;

export { GetApiSchemaArgs, GetApiSchemaResult, GetApiSchemaOutputArgs } from "./getApiSchema";
export const getApiSchema: typeof import("./getApiSchema").getApiSchema = null as any;
export const getApiSchemaOutput: typeof import("./getApiSchema").getApiSchemaOutput = null as any;

export { GetApiTagDescriptionArgs, GetApiTagDescriptionResult, GetApiTagDescriptionOutputArgs } from "./getApiTagDescription";
export const getApiTagDescription: typeof import("./getApiTagDescription").getApiTagDescription = null as any;
export const getApiTagDescriptionOutput: typeof import("./getApiTagDescription").getApiTagDescriptionOutput = null as any;

export { GetApiVersionSetArgs, GetApiVersionSetResult, GetApiVersionSetOutputArgs } from "./getApiVersionSet";
export const getApiVersionSet: typeof import("./getApiVersionSet").getApiVersionSet = null as any;
export const getApiVersionSetOutput: typeof import("./getApiVersionSet").getApiVersionSetOutput = null as any;

export { GetAuthorizationServerArgs, GetAuthorizationServerResult, GetAuthorizationServerOutputArgs } from "./getAuthorizationServer";
export const getAuthorizationServer: typeof import("./getAuthorizationServer").getAuthorizationServer = null as any;
export const getAuthorizationServerOutput: typeof import("./getAuthorizationServer").getAuthorizationServerOutput = null as any;

export { GetBackendArgs, GetBackendResult, GetBackendOutputArgs } from "./getBackend";
export const getBackend: typeof import("./getBackend").getBackend = null as any;
export const getBackendOutput: typeof import("./getBackend").getBackendOutput = null as any;

export { GetCacheArgs, GetCacheResult, GetCacheOutputArgs } from "./getCache";
export const getCache: typeof import("./getCache").getCache = null as any;
export const getCacheOutput: typeof import("./getCache").getCacheOutput = null as any;

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;

export { GetContentItemArgs, GetContentItemResult, GetContentItemOutputArgs } from "./getContentItem";
export const getContentItem: typeof import("./getContentItem").getContentItem = null as any;
export const getContentItemOutput: typeof import("./getContentItem").getContentItemOutput = null as any;

export { GetContentTypeArgs, GetContentTypeResult, GetContentTypeOutputArgs } from "./getContentType";
export const getContentType: typeof import("./getContentType").getContentType = null as any;
export const getContentTypeOutput: typeof import("./getContentType").getContentTypeOutput = null as any;

export { GetDiagnosticArgs, GetDiagnosticResult, GetDiagnosticOutputArgs } from "./getDiagnostic";
export const getDiagnostic: typeof import("./getDiagnostic").getDiagnostic = null as any;
export const getDiagnosticOutput: typeof import("./getDiagnostic").getDiagnosticOutput = null as any;

export { GetEmailTemplateArgs, GetEmailTemplateResult, GetEmailTemplateOutputArgs } from "./getEmailTemplate";
export const getEmailTemplate: typeof import("./getEmailTemplate").getEmailTemplate = null as any;
export const getEmailTemplateOutput: typeof import("./getEmailTemplate").getEmailTemplateOutput = null as any;

export { GetGatewayArgs, GetGatewayResult, GetGatewayOutputArgs } from "./getGateway";
export const getGateway: typeof import("./getGateway").getGateway = null as any;
export const getGatewayOutput: typeof import("./getGateway").getGatewayOutput = null as any;

export { GetGatewayCertificateAuthorityArgs, GetGatewayCertificateAuthorityResult, GetGatewayCertificateAuthorityOutputArgs } from "./getGatewayCertificateAuthority";
export const getGatewayCertificateAuthority: typeof import("./getGatewayCertificateAuthority").getGatewayCertificateAuthority = null as any;
export const getGatewayCertificateAuthorityOutput: typeof import("./getGatewayCertificateAuthority").getGatewayCertificateAuthorityOutput = null as any;

export { GetGatewayHostnameConfigurationArgs, GetGatewayHostnameConfigurationResult, GetGatewayHostnameConfigurationOutputArgs } from "./getGatewayHostnameConfiguration";
export const getGatewayHostnameConfiguration: typeof import("./getGatewayHostnameConfiguration").getGatewayHostnameConfiguration = null as any;
export const getGatewayHostnameConfigurationOutput: typeof import("./getGatewayHostnameConfiguration").getGatewayHostnameConfigurationOutput = null as any;

export { GetGlobalSchemaArgs, GetGlobalSchemaResult, GetGlobalSchemaOutputArgs } from "./getGlobalSchema";
export const getGlobalSchema: typeof import("./getGlobalSchema").getGlobalSchema = null as any;
export const getGlobalSchemaOutput: typeof import("./getGlobalSchema").getGlobalSchemaOutput = null as any;

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;

export { GetIdentityProviderArgs, GetIdentityProviderResult, GetIdentityProviderOutputArgs } from "./getIdentityProvider";
export const getIdentityProvider: typeof import("./getIdentityProvider").getIdentityProvider = null as any;
export const getIdentityProviderOutput: typeof import("./getIdentityProvider").getIdentityProviderOutput = null as any;

export { GetLoggerArgs, GetLoggerResult, GetLoggerOutputArgs } from "./getLogger";
export const getLogger: typeof import("./getLogger").getLogger = null as any;
export const getLoggerOutput: typeof import("./getLogger").getLoggerOutput = null as any;

export { GetNamedValueArgs, GetNamedValueResult, GetNamedValueOutputArgs } from "./getNamedValue";
export const getNamedValue: typeof import("./getNamedValue").getNamedValue = null as any;
export const getNamedValueOutput: typeof import("./getNamedValue").getNamedValueOutput = null as any;

export { GetOpenIdConnectProviderArgs, GetOpenIdConnectProviderResult, GetOpenIdConnectProviderOutputArgs } from "./getOpenIdConnectProvider";
export const getOpenIdConnectProvider: typeof import("./getOpenIdConnectProvider").getOpenIdConnectProvider = null as any;
export const getOpenIdConnectProviderOutput: typeof import("./getOpenIdConnectProvider").getOpenIdConnectProviderOutput = null as any;

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;

export { GetPrivateEndpointConnectionByNameArgs, GetPrivateEndpointConnectionByNameResult, GetPrivateEndpointConnectionByNameOutputArgs } from "./getPrivateEndpointConnectionByName";
export const getPrivateEndpointConnectionByName: typeof import("./getPrivateEndpointConnectionByName").getPrivateEndpointConnectionByName = null as any;
export const getPrivateEndpointConnectionByNameOutput: typeof import("./getPrivateEndpointConnectionByName").getPrivateEndpointConnectionByNameOutput = null as any;

export { GetProductArgs, GetProductResult, GetProductOutputArgs } from "./getProduct";
export const getProduct: typeof import("./getProduct").getProduct = null as any;
export const getProductOutput: typeof import("./getProduct").getProductOutput = null as any;

export { GetProductPolicyArgs, GetProductPolicyResult, GetProductPolicyOutputArgs } from "./getProductPolicy";
export const getProductPolicy: typeof import("./getProductPolicy").getProductPolicy = null as any;
export const getProductPolicyOutput: typeof import("./getProductPolicy").getProductPolicyOutput = null as any;

export { GetSubscriptionArgs, GetSubscriptionResult, GetSubscriptionOutputArgs } from "./getSubscription";
export const getSubscription: typeof import("./getSubscription").getSubscription = null as any;
export const getSubscriptionOutput: typeof import("./getSubscription").getSubscriptionOutput = null as any;

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;

export { GetTagByApiArgs, GetTagByApiResult, GetTagByApiOutputArgs } from "./getTagByApi";
export const getTagByApi: typeof import("./getTagByApi").getTagByApi = null as any;
export const getTagByApiOutput: typeof import("./getTagByApi").getTagByApiOutput = null as any;

export { GetTagByOperationArgs, GetTagByOperationResult, GetTagByOperationOutputArgs } from "./getTagByOperation";
export const getTagByOperation: typeof import("./getTagByOperation").getTagByOperation = null as any;
export const getTagByOperationOutput: typeof import("./getTagByOperation").getTagByOperationOutput = null as any;

export { GetTagByProductArgs, GetTagByProductResult, GetTagByProductOutputArgs } from "./getTagByProduct";
export const getTagByProduct: typeof import("./getTagByProduct").getTagByProduct = null as any;
export const getTagByProductOutput: typeof import("./getTagByProduct").getTagByProductOutput = null as any;

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;

export { GetUserSharedAccessTokenArgs, GetUserSharedAccessTokenResult, GetUserSharedAccessTokenOutputArgs } from "./getUserSharedAccessToken";
export const getUserSharedAccessToken: typeof import("./getUserSharedAccessToken").getUserSharedAccessToken = null as any;
export const getUserSharedAccessTokenOutput: typeof import("./getUserSharedAccessToken").getUserSharedAccessTokenOutput = null as any;

export { GlobalSchemaArgs } from "./globalSchema";
export type GlobalSchema = import("./globalSchema").GlobalSchema;
export const GlobalSchema: typeof import("./globalSchema").GlobalSchema = null as any;

export { GroupArgs } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;

export { GroupUserArgs } from "./groupUser";
export type GroupUser = import("./groupUser").GroupUser;
export const GroupUser: typeof import("./groupUser").GroupUser = null as any;

export { IdentityProviderArgs } from "./identityProvider";
export type IdentityProvider = import("./identityProvider").IdentityProvider;
export const IdentityProvider: typeof import("./identityProvider").IdentityProvider = null as any;

export { ListAuthorizationServerSecretsArgs, ListAuthorizationServerSecretsResult, ListAuthorizationServerSecretsOutputArgs } from "./listAuthorizationServerSecrets";
export const listAuthorizationServerSecrets: typeof import("./listAuthorizationServerSecrets").listAuthorizationServerSecrets = null as any;
export const listAuthorizationServerSecretsOutput: typeof import("./listAuthorizationServerSecrets").listAuthorizationServerSecretsOutput = null as any;

export { ListDelegationSettingSecretsArgs, ListDelegationSettingSecretsResult, ListDelegationSettingSecretsOutputArgs } from "./listDelegationSettingSecrets";
export const listDelegationSettingSecrets: typeof import("./listDelegationSettingSecrets").listDelegationSettingSecrets = null as any;
export const listDelegationSettingSecretsOutput: typeof import("./listDelegationSettingSecrets").listDelegationSettingSecretsOutput = null as any;

export { ListGatewayKeysArgs, ListGatewayKeysResult, ListGatewayKeysOutputArgs } from "./listGatewayKeys";
export const listGatewayKeys: typeof import("./listGatewayKeys").listGatewayKeys = null as any;
export const listGatewayKeysOutput: typeof import("./listGatewayKeys").listGatewayKeysOutput = null as any;

export { ListIdentityProviderSecretsArgs, ListIdentityProviderSecretsResult, ListIdentityProviderSecretsOutputArgs } from "./listIdentityProviderSecrets";
export const listIdentityProviderSecrets: typeof import("./listIdentityProviderSecrets").listIdentityProviderSecrets = null as any;
export const listIdentityProviderSecretsOutput: typeof import("./listIdentityProviderSecrets").listIdentityProviderSecretsOutput = null as any;

export { ListNamedValueArgs, ListNamedValueResult, ListNamedValueOutputArgs } from "./listNamedValue";
export const listNamedValue: typeof import("./listNamedValue").listNamedValue = null as any;
export const listNamedValueOutput: typeof import("./listNamedValue").listNamedValueOutput = null as any;

export { ListOpenIdConnectProviderSecretsArgs, ListOpenIdConnectProviderSecretsResult, ListOpenIdConnectProviderSecretsOutputArgs } from "./listOpenIdConnectProviderSecrets";
export const listOpenIdConnectProviderSecrets: typeof import("./listOpenIdConnectProviderSecrets").listOpenIdConnectProviderSecrets = null as any;
export const listOpenIdConnectProviderSecretsOutput: typeof import("./listOpenIdConnectProviderSecrets").listOpenIdConnectProviderSecretsOutput = null as any;

export { ListSubscriptionSecretsArgs, ListSubscriptionSecretsResult, ListSubscriptionSecretsOutputArgs } from "./listSubscriptionSecrets";
export const listSubscriptionSecrets: typeof import("./listSubscriptionSecrets").listSubscriptionSecrets = null as any;
export const listSubscriptionSecretsOutput: typeof import("./listSubscriptionSecrets").listSubscriptionSecretsOutput = null as any;

export { ListTenantAccessSecretsArgs, ListTenantAccessSecretsResult, ListTenantAccessSecretsOutputArgs } from "./listTenantAccessSecrets";
export const listTenantAccessSecrets: typeof import("./listTenantAccessSecrets").listTenantAccessSecrets = null as any;
export const listTenantAccessSecretsOutput: typeof import("./listTenantAccessSecrets").listTenantAccessSecretsOutput = null as any;

export { LoggerArgs } from "./logger";
export type Logger = import("./logger").Logger;
export const Logger: typeof import("./logger").Logger = null as any;

export { NamedValueArgs } from "./namedValue";
export type NamedValue = import("./namedValue").NamedValue;
export const NamedValue: typeof import("./namedValue").NamedValue = null as any;

export { NotificationRecipientEmailArgs } from "./notificationRecipientEmail";
export type NotificationRecipientEmail = import("./notificationRecipientEmail").NotificationRecipientEmail;
export const NotificationRecipientEmail: typeof import("./notificationRecipientEmail").NotificationRecipientEmail = null as any;

export { NotificationRecipientUserArgs } from "./notificationRecipientUser";
export type NotificationRecipientUser = import("./notificationRecipientUser").NotificationRecipientUser;
export const NotificationRecipientUser: typeof import("./notificationRecipientUser").NotificationRecipientUser = null as any;

export { OpenIdConnectProviderArgs } from "./openIdConnectProvider";
export type OpenIdConnectProvider = import("./openIdConnectProvider").OpenIdConnectProvider;
export const OpenIdConnectProvider: typeof import("./openIdConnectProvider").OpenIdConnectProvider = null as any;

export { PolicyArgs } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;

export { PrivateEndpointConnectionByNameArgs } from "./privateEndpointConnectionByName";
export type PrivateEndpointConnectionByName = import("./privateEndpointConnectionByName").PrivateEndpointConnectionByName;
export const PrivateEndpointConnectionByName: typeof import("./privateEndpointConnectionByName").PrivateEndpointConnectionByName = null as any;

export { ProductArgs } from "./product";
export type Product = import("./product").Product;
export const Product: typeof import("./product").Product = null as any;

export { ProductApiArgs } from "./productApi";
export type ProductApi = import("./productApi").ProductApi;
export const ProductApi: typeof import("./productApi").ProductApi = null as any;

export { ProductGroupArgs } from "./productGroup";
export type ProductGroup = import("./productGroup").ProductGroup;
export const ProductGroup: typeof import("./productGroup").ProductGroup = null as any;

export { ProductPolicyArgs } from "./productPolicy";
export type ProductPolicy = import("./productPolicy").ProductPolicy;
export const ProductPolicy: typeof import("./productPolicy").ProductPolicy = null as any;

export { SubscriptionArgs } from "./subscription";
export type Subscription = import("./subscription").Subscription;
export const Subscription: typeof import("./subscription").Subscription = null as any;

export { TagArgs } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;

export { TagByApiArgs } from "./tagByApi";
export type TagByApi = import("./tagByApi").TagByApi;
export const TagByApi: typeof import("./tagByApi").TagByApi = null as any;

export { TagByOperationArgs } from "./tagByOperation";
export type TagByOperation = import("./tagByOperation").TagByOperation;
export const TagByOperation: typeof import("./tagByOperation").TagByOperation = null as any;

export { TagByProductArgs } from "./tagByProduct";
export type TagByProduct = import("./tagByProduct").TagByProduct;
export const TagByProduct: typeof import("./tagByProduct").TagByProduct = null as any;

export { UserArgs } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;

utilities.lazyLoad(exports, ["Api"], () => require("./api"));
utilities.lazyLoad(exports, ["ApiDiagnostic"], () => require("./apiDiagnostic"));
utilities.lazyLoad(exports, ["ApiIssue"], () => require("./apiIssue"));
utilities.lazyLoad(exports, ["ApiIssueAttachment"], () => require("./apiIssueAttachment"));
utilities.lazyLoad(exports, ["ApiIssueComment"], () => require("./apiIssueComment"));
utilities.lazyLoad(exports, ["ApiManagementService"], () => require("./apiManagementService"));
utilities.lazyLoad(exports, ["ApiOperation"], () => require("./apiOperation"));
utilities.lazyLoad(exports, ["ApiOperationPolicy"], () => require("./apiOperationPolicy"));
utilities.lazyLoad(exports, ["ApiPolicy"], () => require("./apiPolicy"));
utilities.lazyLoad(exports, ["ApiRelease"], () => require("./apiRelease"));
utilities.lazyLoad(exports, ["ApiSchema"], () => require("./apiSchema"));
utilities.lazyLoad(exports, ["ApiTagDescription"], () => require("./apiTagDescription"));
utilities.lazyLoad(exports, ["ApiVersionSet"], () => require("./apiVersionSet"));
utilities.lazyLoad(exports, ["AuthorizationServer"], () => require("./authorizationServer"));
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));
utilities.lazyLoad(exports, ["Cache"], () => require("./cache"));
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));
utilities.lazyLoad(exports, ["ContentItem"], () => require("./contentItem"));
utilities.lazyLoad(exports, ["ContentType"], () => require("./contentType"));
utilities.lazyLoad(exports, ["Diagnostic"], () => require("./diagnostic"));
utilities.lazyLoad(exports, ["EmailTemplate"], () => require("./emailTemplate"));
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));
utilities.lazyLoad(exports, ["GatewayApiEntityTag"], () => require("./gatewayApiEntityTag"));
utilities.lazyLoad(exports, ["GatewayCertificateAuthority"], () => require("./gatewayCertificateAuthority"));
utilities.lazyLoad(exports, ["GatewayHostnameConfiguration"], () => require("./gatewayHostnameConfiguration"));
utilities.lazyLoad(exports, ["getApi","getApiOutput"], () => require("./getApi"));
utilities.lazyLoad(exports, ["getApiDiagnostic","getApiDiagnosticOutput"], () => require("./getApiDiagnostic"));
utilities.lazyLoad(exports, ["getApiIssue","getApiIssueOutput"], () => require("./getApiIssue"));
utilities.lazyLoad(exports, ["getApiIssueAttachment","getApiIssueAttachmentOutput"], () => require("./getApiIssueAttachment"));
utilities.lazyLoad(exports, ["getApiIssueComment","getApiIssueCommentOutput"], () => require("./getApiIssueComment"));
utilities.lazyLoad(exports, ["getApiManagementService","getApiManagementServiceOutput"], () => require("./getApiManagementService"));
utilities.lazyLoad(exports, ["getApiManagementServiceDomainOwnershipIdentifier"], () => require("./getApiManagementServiceDomainOwnershipIdentifier"));
utilities.lazyLoad(exports, ["getApiManagementServiceSsoToken","getApiManagementServiceSsoTokenOutput"], () => require("./getApiManagementServiceSsoToken"));
utilities.lazyLoad(exports, ["getApiOperation","getApiOperationOutput"], () => require("./getApiOperation"));
utilities.lazyLoad(exports, ["getApiOperationPolicy","getApiOperationPolicyOutput"], () => require("./getApiOperationPolicy"));
utilities.lazyLoad(exports, ["getApiPolicy","getApiPolicyOutput"], () => require("./getApiPolicy"));
utilities.lazyLoad(exports, ["getApiRelease","getApiReleaseOutput"], () => require("./getApiRelease"));
utilities.lazyLoad(exports, ["getApiSchema","getApiSchemaOutput"], () => require("./getApiSchema"));
utilities.lazyLoad(exports, ["getApiTagDescription","getApiTagDescriptionOutput"], () => require("./getApiTagDescription"));
utilities.lazyLoad(exports, ["getApiVersionSet","getApiVersionSetOutput"], () => require("./getApiVersionSet"));
utilities.lazyLoad(exports, ["getAuthorizationServer","getAuthorizationServerOutput"], () => require("./getAuthorizationServer"));
utilities.lazyLoad(exports, ["getBackend","getBackendOutput"], () => require("./getBackend"));
utilities.lazyLoad(exports, ["getCache","getCacheOutput"], () => require("./getCache"));
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));
utilities.lazyLoad(exports, ["getContentItem","getContentItemOutput"], () => require("./getContentItem"));
utilities.lazyLoad(exports, ["getContentType","getContentTypeOutput"], () => require("./getContentType"));
utilities.lazyLoad(exports, ["getDiagnostic","getDiagnosticOutput"], () => require("./getDiagnostic"));
utilities.lazyLoad(exports, ["getEmailTemplate","getEmailTemplateOutput"], () => require("./getEmailTemplate"));
utilities.lazyLoad(exports, ["getGateway","getGatewayOutput"], () => require("./getGateway"));
utilities.lazyLoad(exports, ["getGatewayCertificateAuthority","getGatewayCertificateAuthorityOutput"], () => require("./getGatewayCertificateAuthority"));
utilities.lazyLoad(exports, ["getGatewayHostnameConfiguration","getGatewayHostnameConfigurationOutput"], () => require("./getGatewayHostnameConfiguration"));
utilities.lazyLoad(exports, ["getGlobalSchema","getGlobalSchemaOutput"], () => require("./getGlobalSchema"));
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));
utilities.lazyLoad(exports, ["getIdentityProvider","getIdentityProviderOutput"], () => require("./getIdentityProvider"));
utilities.lazyLoad(exports, ["getLogger","getLoggerOutput"], () => require("./getLogger"));
utilities.lazyLoad(exports, ["getNamedValue","getNamedValueOutput"], () => require("./getNamedValue"));
utilities.lazyLoad(exports, ["getOpenIdConnectProvider","getOpenIdConnectProviderOutput"], () => require("./getOpenIdConnectProvider"));
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));
utilities.lazyLoad(exports, ["getPrivateEndpointConnectionByName","getPrivateEndpointConnectionByNameOutput"], () => require("./getPrivateEndpointConnectionByName"));
utilities.lazyLoad(exports, ["getProduct","getProductOutput"], () => require("./getProduct"));
utilities.lazyLoad(exports, ["getProductPolicy","getProductPolicyOutput"], () => require("./getProductPolicy"));
utilities.lazyLoad(exports, ["getSubscription","getSubscriptionOutput"], () => require("./getSubscription"));
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));
utilities.lazyLoad(exports, ["getTagByApi","getTagByApiOutput"], () => require("./getTagByApi"));
utilities.lazyLoad(exports, ["getTagByOperation","getTagByOperationOutput"], () => require("./getTagByOperation"));
utilities.lazyLoad(exports, ["getTagByProduct","getTagByProductOutput"], () => require("./getTagByProduct"));
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));
utilities.lazyLoad(exports, ["getUserSharedAccessToken","getUserSharedAccessTokenOutput"], () => require("./getUserSharedAccessToken"));
utilities.lazyLoad(exports, ["GlobalSchema"], () => require("./globalSchema"));
utilities.lazyLoad(exports, ["Group"], () => require("./group"));
utilities.lazyLoad(exports, ["GroupUser"], () => require("./groupUser"));
utilities.lazyLoad(exports, ["IdentityProvider"], () => require("./identityProvider"));
utilities.lazyLoad(exports, ["listAuthorizationServerSecrets","listAuthorizationServerSecretsOutput"], () => require("./listAuthorizationServerSecrets"));
utilities.lazyLoad(exports, ["listDelegationSettingSecrets","listDelegationSettingSecretsOutput"], () => require("./listDelegationSettingSecrets"));
utilities.lazyLoad(exports, ["listGatewayKeys","listGatewayKeysOutput"], () => require("./listGatewayKeys"));
utilities.lazyLoad(exports, ["listIdentityProviderSecrets","listIdentityProviderSecretsOutput"], () => require("./listIdentityProviderSecrets"));
utilities.lazyLoad(exports, ["listNamedValue","listNamedValueOutput"], () => require("./listNamedValue"));
utilities.lazyLoad(exports, ["listOpenIdConnectProviderSecrets","listOpenIdConnectProviderSecretsOutput"], () => require("./listOpenIdConnectProviderSecrets"));
utilities.lazyLoad(exports, ["listSubscriptionSecrets","listSubscriptionSecretsOutput"], () => require("./listSubscriptionSecrets"));
utilities.lazyLoad(exports, ["listTenantAccessSecrets","listTenantAccessSecretsOutput"], () => require("./listTenantAccessSecrets"));
utilities.lazyLoad(exports, ["Logger"], () => require("./logger"));
utilities.lazyLoad(exports, ["NamedValue"], () => require("./namedValue"));
utilities.lazyLoad(exports, ["NotificationRecipientEmail"], () => require("./notificationRecipientEmail"));
utilities.lazyLoad(exports, ["NotificationRecipientUser"], () => require("./notificationRecipientUser"));
utilities.lazyLoad(exports, ["OpenIdConnectProvider"], () => require("./openIdConnectProvider"));
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));
utilities.lazyLoad(exports, ["PrivateEndpointConnectionByName"], () => require("./privateEndpointConnectionByName"));
utilities.lazyLoad(exports, ["Product"], () => require("./product"));
utilities.lazyLoad(exports, ["ProductApi"], () => require("./productApi"));
utilities.lazyLoad(exports, ["ProductGroup"], () => require("./productGroup"));
utilities.lazyLoad(exports, ["ProductPolicy"], () => require("./productPolicy"));
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));
utilities.lazyLoad(exports, ["TagByApi"], () => require("./tagByApi"));
utilities.lazyLoad(exports, ["TagByOperation"], () => require("./tagByOperation"));
utilities.lazyLoad(exports, ["TagByProduct"], () => require("./tagByProduct"));
utilities.lazyLoad(exports, ["User"], () => require("./user"));

// Export enums:
export * from "../../types/enums/apimanagement/v20210801";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:apimanagement/v20210801:Api":
                return new Api(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiDiagnostic":
                return new ApiDiagnostic(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiIssue":
                return new ApiIssue(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiIssueAttachment":
                return new ApiIssueAttachment(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiIssueComment":
                return new ApiIssueComment(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiManagementService":
                return new ApiManagementService(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiOperation":
                return new ApiOperation(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiOperationPolicy":
                return new ApiOperationPolicy(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiPolicy":
                return new ApiPolicy(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiRelease":
                return new ApiRelease(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiSchema":
                return new ApiSchema(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiTagDescription":
                return new ApiTagDescription(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiVersionSet":
                return new ApiVersionSet(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:AuthorizationServer":
                return new AuthorizationServer(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:Backend":
                return new Backend(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:Cache":
                return new Cache(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ContentItem":
                return new ContentItem(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ContentType":
                return new ContentType(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:Diagnostic":
                return new Diagnostic(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:EmailTemplate":
                return new EmailTemplate(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:GatewayApiEntityTag":
                return new GatewayApiEntityTag(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:GatewayCertificateAuthority":
                return new GatewayCertificateAuthority(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:GatewayHostnameConfiguration":
                return new GatewayHostnameConfiguration(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:GlobalSchema":
                return new GlobalSchema(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:Group":
                return new Group(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:GroupUser":
                return new GroupUser(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:IdentityProvider":
                return new IdentityProvider(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:Logger":
                return new Logger(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:NamedValue":
                return new NamedValue(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:NotificationRecipientEmail":
                return new NotificationRecipientEmail(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:NotificationRecipientUser":
                return new NotificationRecipientUser(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:OpenIdConnectProvider":
                return new OpenIdConnectProvider(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:PrivateEndpointConnectionByName":
                return new PrivateEndpointConnectionByName(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:Product":
                return new Product(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ProductApi":
                return new ProductApi(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ProductGroup":
                return new ProductGroup(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ProductPolicy":
                return new ProductPolicy(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:TagByApi":
                return new TagByApi(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:TagByOperation":
                return new TagByOperation(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:TagByProduct":
                return new TagByProduct(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "apimanagement/v20210801", _module)
