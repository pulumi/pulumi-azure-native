// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Diagnostic details.
 *
 * Uses Azure REST API version 2024-06-01-preview. In version 2.x of the Azure Native provider, it used API version 2023-09-01-preview.
 *
 * Other available API versions: 2023-09-01-preview, 2024-05-01, 2024-10-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native apimanagement [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class WorkspaceApiDiagnostic extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceApiDiagnostic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): WorkspaceApiDiagnostic {
        return new WorkspaceApiDiagnostic(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:apimanagement:WorkspaceApiDiagnostic';

    /**
     * Returns true if the given object is an instance of WorkspaceApiDiagnostic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspaceApiDiagnostic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceApiDiagnostic.__pulumiType;
    }

    /**
     * Specifies for what type of messages sampling settings should not apply.
     */
    declare public readonly alwaysLog: pulumi.Output<string | undefined>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * Diagnostic settings for incoming/outgoing HTTP messages to the Backend
     */
    declare public readonly backend: pulumi.Output<outputs.apimanagement.PipelineDiagnosticSettingsResponse | undefined>;
    /**
     * Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
     */
    declare public readonly frontend: pulumi.Output<outputs.apimanagement.PipelineDiagnosticSettingsResponse | undefined>;
    /**
     * Sets correlation protocol to use for Application Insights diagnostics.
     */
    declare public readonly httpCorrelationProtocol: pulumi.Output<string | undefined>;
    /**
     * Large Language Models diagnostic settings
     */
    declare public readonly largeLanguageModel: pulumi.Output<outputs.apimanagement.LLMDiagnosticSettingsResponse | undefined>;
    /**
     * Log the ClientIP. Default is false.
     */
    declare public readonly logClientIp: pulumi.Output<boolean | undefined>;
    /**
     * Resource Id of a target logger.
     */
    declare public readonly loggerId: pulumi.Output<string>;
    /**
     * Emit custom metrics via emit-metric policy. Applicable only to Application Insights diagnostic settings.
     */
    declare public readonly metrics: pulumi.Output<boolean | undefined>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The format of the Operation Name for Application Insights telemetries. Default is Name.
     */
    declare public readonly operationNameFormat: pulumi.Output<string | undefined>;
    /**
     * Sampling settings for Diagnostic.
     */
    declare public readonly sampling: pulumi.Output<outputs.apimanagement.SamplingSettingsResponse | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * The verbosity level applied to traces emitted by trace policies.
     */
    declare public readonly verbosity: pulumi.Output<string | undefined>;

    /**
     * Create a WorkspaceApiDiagnostic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceApiDiagnosticArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.apiId === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if (args?.loggerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'loggerId'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.serviceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["alwaysLog"] = args?.alwaysLog;
            resourceInputs["apiId"] = args?.apiId;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["diagnosticId"] = args?.diagnosticId;
            resourceInputs["frontend"] = args?.frontend;
            resourceInputs["httpCorrelationProtocol"] = args?.httpCorrelationProtocol;
            resourceInputs["largeLanguageModel"] = args?.largeLanguageModel;
            resourceInputs["logClientIp"] = args?.logClientIp;
            resourceInputs["loggerId"] = args?.loggerId;
            resourceInputs["metrics"] = args?.metrics;
            resourceInputs["operationNameFormat"] = args?.operationNameFormat;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["sampling"] = args?.sampling;
            resourceInputs["serviceName"] = args?.serviceName;
            resourceInputs["verbosity"] = args?.verbosity;
            resourceInputs["workspaceId"] = args?.workspaceId;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["alwaysLog"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["backend"] = undefined /*out*/;
            resourceInputs["frontend"] = undefined /*out*/;
            resourceInputs["httpCorrelationProtocol"] = undefined /*out*/;
            resourceInputs["largeLanguageModel"] = undefined /*out*/;
            resourceInputs["logClientIp"] = undefined /*out*/;
            resourceInputs["loggerId"] = undefined /*out*/;
            resourceInputs["metrics"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["operationNameFormat"] = undefined /*out*/;
            resourceInputs["sampling"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["verbosity"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:apimanagement/v20230901preview:WorkspaceApiDiagnostic" }, { type: "azure-native:apimanagement/v20240501:WorkspaceApiDiagnostic" }, { type: "azure-native:apimanagement/v20240601preview:WorkspaceApiDiagnostic" }, { type: "azure-native:apimanagement/v20241001preview:WorkspaceApiDiagnostic" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(WorkspaceApiDiagnostic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a WorkspaceApiDiagnostic resource.
 */
export interface WorkspaceApiDiagnosticArgs {
    /**
     * Specifies for what type of messages sampling settings should not apply.
     */
    alwaysLog?: pulumi.Input<string | enums.apimanagement.AlwaysLog>;
    /**
     * API identifier. Must be unique in the current API Management service instance.
     */
    apiId: pulumi.Input<string>;
    /**
     * Diagnostic settings for incoming/outgoing HTTP messages to the Backend
     */
    backend?: pulumi.Input<inputs.apimanagement.PipelineDiagnosticSettingsArgs>;
    /**
     * Diagnostic identifier. Must be unique in the current API Management service instance.
     */
    diagnosticId?: pulumi.Input<string>;
    /**
     * Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
     */
    frontend?: pulumi.Input<inputs.apimanagement.PipelineDiagnosticSettingsArgs>;
    /**
     * Sets correlation protocol to use for Application Insights diagnostics.
     */
    httpCorrelationProtocol?: pulumi.Input<string | enums.apimanagement.HttpCorrelationProtocol>;
    /**
     * Large Language Models diagnostic settings
     */
    largeLanguageModel?: pulumi.Input<inputs.apimanagement.LLMDiagnosticSettingsArgs>;
    /**
     * Log the ClientIP. Default is false.
     */
    logClientIp?: pulumi.Input<boolean>;
    /**
     * Resource Id of a target logger.
     */
    loggerId: pulumi.Input<string>;
    /**
     * Emit custom metrics via emit-metric policy. Applicable only to Application Insights diagnostic settings.
     */
    metrics?: pulumi.Input<boolean>;
    /**
     * The format of the Operation Name for Application Insights telemetries. Default is Name.
     */
    operationNameFormat?: pulumi.Input<string | enums.apimanagement.OperationNameFormat>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Sampling settings for Diagnostic.
     */
    sampling?: pulumi.Input<inputs.apimanagement.SamplingSettingsArgs>;
    /**
     * The name of the API Management service.
     */
    serviceName: pulumi.Input<string>;
    /**
     * The verbosity level applied to traces emitted by trace policies.
     */
    verbosity?: pulumi.Input<string | enums.apimanagement.Verbosity>;
    /**
     * Workspace identifier. Must be unique in the current API Management service instance.
     */
    workspaceId: pulumi.Input<string>;
}
