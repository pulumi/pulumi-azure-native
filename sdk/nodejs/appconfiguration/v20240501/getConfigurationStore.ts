// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets the properties of the specified configuration store.
 */
export function getConfigurationStore(args: GetConfigurationStoreArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigurationStoreResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:appconfiguration/v20240501:getConfigurationStore", {
        "configStoreName": args.configStoreName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface GetConfigurationStoreArgs {
    /**
     * The name of the configuration store.
     */
    configStoreName: string;
    /**
     * The name of the resource group to which the container registry belongs.
     */
    resourceGroupName: string;
}

/**
 * The configuration store along with all resource properties. The Configuration Store will have all information to begin utilizing it.
 */
export interface GetConfigurationStoreResult {
    /**
     * The creation date of configuration store.
     */
    readonly creationDate: string;
    /**
     * Property specifying the configuration of data plane proxy for Azure Resource Manager (ARM).
     */
    readonly dataPlaneProxy?: outputs.appconfiguration.v20240501.DataPlaneProxyPropertiesResponse;
    /**
     * Disables all authentication methods other than AAD authentication.
     */
    readonly disableLocalAuth?: boolean;
    /**
     * Property specifying whether protection against purge is enabled for this configuration store.
     */
    readonly enablePurgeProtection?: boolean;
    /**
     * The encryption settings of the configuration store.
     */
    readonly encryption?: outputs.appconfiguration.v20240501.EncryptionPropertiesResponse;
    /**
     * The DNS endpoint where the configuration store API will be available.
     */
    readonly endpoint: string;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     */
    readonly id: string;
    /**
     * The managed identity information, if configured.
     */
    readonly identity?: outputs.appconfiguration.v20240501.ResourceIdentityResponse;
    /**
     * The geo-location where the resource lives
     */
    readonly location: string;
    /**
     * The name of the resource
     */
    readonly name: string;
    /**
     * The list of private endpoint connections that are set up for this resource.
     */
    readonly privateEndpointConnections: outputs.appconfiguration.v20240501.PrivateEndpointConnectionReferenceResponse[];
    /**
     * The provisioning state of the configuration store.
     */
    readonly provisioningState: string;
    /**
     * Control permission for data plane traffic coming from public networks while private endpoint is enabled.
     */
    readonly publicNetworkAccess?: string;
    /**
     * The sku of the configuration store.
     */
    readonly sku: outputs.appconfiguration.v20240501.SkuResponse;
    /**
     * The amount of time in days that the configuration store will be retained when it is soft deleted.
     */
    readonly softDeleteRetentionInDays?: number;
    /**
     * Resource system metadata.
     */
    readonly systemData: outputs.appconfiguration.v20240501.SystemDataResponse;
    /**
     * Resource tags.
     */
    readonly tags?: {[key: string]: string};
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
}
/**
 * Gets the properties of the specified configuration store.
 */
export function getConfigurationStoreOutput(args: GetConfigurationStoreOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConfigurationStoreResult> {
    return pulumi.output(args).apply((a: any) => getConfigurationStore(a, opts))
}

export interface GetConfigurationStoreOutputArgs {
    /**
     * The name of the configuration store.
     */
    configStoreName: pulumi.Input<string>;
    /**
     * The name of the resource group to which the container registry belongs.
     */
    resourceGroupName: pulumi.Input<string>;
}
