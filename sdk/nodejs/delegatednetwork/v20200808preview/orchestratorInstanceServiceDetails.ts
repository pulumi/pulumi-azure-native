// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Represents an instance of a orchestrator.
 */
export class OrchestratorInstanceServiceDetails extends pulumi.CustomResource {
    /**
     * Get an existing OrchestratorInstanceServiceDetails resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): OrchestratorInstanceServiceDetails {
        return new OrchestratorInstanceServiceDetails(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:delegatednetwork/v20200808preview:OrchestratorInstanceServiceDetails';

    /**
     * Returns true if the given object is an instance of OrchestratorInstanceServiceDetails.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrchestratorInstanceServiceDetails {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrchestratorInstanceServiceDetails.__pulumiType;
    }

    /**
     * K8s APIServer url
     */
    public readonly apiServerEndpoint!: pulumi.Output<string | undefined>;
    /**
     * RootCA certificate of kubernetes cluster base64 encoded
     */
    public readonly clusterRootCA!: pulumi.Output<string | undefined>;
    /**
     * controller details
     */
    public readonly controllerDetails!: pulumi.Output<outputs.delegatednetwork.v20200808preview.ControllerDetailsResponse>;
    /**
     * The identity of the orchestrator
     */
    public readonly identity!: pulumi.Output<outputs.delegatednetwork.v20200808preview.OrchestratorIdentityResponse | undefined>;
    /**
     * The kind of workbook. Choices are user and shared.
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * Location of the resource.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * AAD ID used with apiserver
     */
    public readonly orchestratorAppId!: pulumi.Output<string | undefined>;
    /**
     * TenantID of server App ID
     */
    public readonly orchestratorTenantId!: pulumi.Output<string | undefined>;
    /**
     * The current state of orchestratorInstance resource.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Resource guid.
     */
    public /*out*/ readonly resourceGuid!: pulumi.Output<string>;
    /**
     * The resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a OrchestratorInstanceServiceDetails resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrchestratorInstanceServiceDetailsArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.controllerDetails === undefined) {
                throw new Error("Missing required property 'controllerDetails'");
            }
            if (!args || args.kind === undefined) {
                throw new Error("Missing required property 'kind'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.resourceName === undefined) {
                throw new Error("Missing required property 'resourceName'");
            }
            inputs["apiServerEndpoint"] = args ? args.apiServerEndpoint : undefined;
            inputs["clusterRootCA"] = args ? args.clusterRootCA : undefined;
            inputs["controllerDetails"] = args ? args.controllerDetails : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["orchestratorAppId"] = args ? args.orchestratorAppId : undefined;
            inputs["orchestratorTenantId"] = args ? args.orchestratorTenantId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["resourceName"] = args ? args.resourceName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["resourceGuid"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["apiServerEndpoint"] = undefined /*out*/;
            inputs["clusterRootCA"] = undefined /*out*/;
            inputs["controllerDetails"] = undefined /*out*/;
            inputs["identity"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["orchestratorAppId"] = undefined /*out*/;
            inputs["orchestratorTenantId"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["resourceGuid"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(OrchestratorInstanceServiceDetails.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a OrchestratorInstanceServiceDetails resource.
 */
export interface OrchestratorInstanceServiceDetailsArgs {
    /**
     * K8s APIServer url
     */
    readonly apiServerEndpoint?: pulumi.Input<string>;
    /**
     * RootCA certificate of kubernetes cluster base64 encoded
     */
    readonly clusterRootCA?: pulumi.Input<string>;
    /**
     * controller details
     */
    readonly controllerDetails: pulumi.Input<inputs.delegatednetwork.v20200808preview.ControllerDetails>;
    /**
     * The identity of the orchestrator
     */
    readonly identity?: pulumi.Input<inputs.delegatednetwork.v20200808preview.OrchestratorIdentity>;
    /**
     * The kind of workbook. Choices are user and shared.
     */
    readonly kind: pulumi.Input<string>;
    /**
     * Location of the resource.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * AAD ID used with apiserver
     */
    readonly orchestratorAppId?: pulumi.Input<string>;
    /**
     * TenantID of server App ID
     */
    readonly orchestratorTenantId?: pulumi.Input<string>;
    /**
     * The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     */
    readonly resourceName: pulumi.Input<string>;
    /**
     * The resource tags.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
