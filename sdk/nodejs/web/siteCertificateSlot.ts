// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * SSL certificate for an app.
 *
 * Uses Azure REST API version 2024-11-01.
 */
export class SiteCertificateSlot extends pulumi.CustomResource {
    /**
     * Get an existing SiteCertificateSlot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SiteCertificateSlot {
        return new SiteCertificateSlot(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:web:SiteCertificateSlot';

    /**
     * Returns true if the given object is an instance of SiteCertificateSlot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteCertificateSlot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteCertificateSlot.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    public /*out*/ readonly azureApiVersion!: pulumi.Output<string>;
    /**
     * CNAME of the certificate to be issued via free certificate
     */
    public readonly canonicalName!: pulumi.Output<string | undefined>;
    /**
     * Raw bytes of .cer file
     */
    public /*out*/ readonly cerBlob!: pulumi.Output<string>;
    /**
     * Method of domain validation for free cert
     */
    public readonly domainValidationMethod!: pulumi.Output<string | undefined>;
    /**
     * Certificate expiration date.
     */
    public /*out*/ readonly expirationDate!: pulumi.Output<string>;
    /**
     * Friendly name of the certificate.
     */
    public /*out*/ readonly friendlyName!: pulumi.Output<string>;
    /**
     * Host names the certificate applies to.
     */
    public readonly hostNames!: pulumi.Output<string[] | undefined>;
    /**
     * Specification for the App Service Environment to use for the certificate.
     */
    public /*out*/ readonly hostingEnvironmentProfile!: pulumi.Output<outputs.web.HostingEnvironmentProfileResponse>;
    /**
     * Certificate issue Date.
     */
    public /*out*/ readonly issueDate!: pulumi.Output<string>;
    /**
     * Certificate issuer.
     */
    public /*out*/ readonly issuer!: pulumi.Output<string>;
    /**
     * Azure Key Vault Csm resource Id.
     */
    public readonly keyVaultId!: pulumi.Output<string | undefined>;
    /**
     * Azure Key Vault secret name.
     */
    public readonly keyVaultSecretName!: pulumi.Output<string | undefined>;
    /**
     * Status of the Key Vault secret.
     */
    public /*out*/ readonly keyVaultSecretStatus!: pulumi.Output<string>;
    /**
     * Kind of resource. If the resource is an app, you can refer to https://github.com/Azure/app-service-linux-docs/blob/master/Things_You_Should_Know/kind_property.md#app-service-resource-kind-reference for details supported values for kind.
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Resource Location.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Certificate password.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Pfx blob.
     */
    public readonly pfxBlob!: pulumi.Output<string | undefined>;
    /**
     * Public key hash.
     */
    public /*out*/ readonly publicKeyHash!: pulumi.Output<string>;
    /**
     * Self link.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Resource ID of the associated App Service plan.
     */
    public readonly serverFarmId!: pulumi.Output<string | undefined>;
    /**
     * App name.
     */
    public /*out*/ readonly siteName!: pulumi.Output<string>;
    /**
     * Subject name of the certificate.
     */
    public /*out*/ readonly subjectName!: pulumi.Output<string>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Certificate thumbprint.
     */
    public /*out*/ readonly thumbprint!: pulumi.Output<string>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Is the certificate valid?.
     */
    public /*out*/ readonly valid!: pulumi.Output<boolean>;

    /**
     * Create a SiteCertificateSlot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteCertificateSlotArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.slot === undefined && !opts.urn) {
                throw new Error("Missing required property 'slot'");
            }
            resourceInputs["canonicalName"] = args?.canonicalName;
            resourceInputs["certificateName"] = args?.certificateName;
            resourceInputs["domainValidationMethod"] = args?.domainValidationMethod;
            resourceInputs["hostNames"] = args?.hostNames;
            resourceInputs["keyVaultId"] = args?.keyVaultId;
            resourceInputs["keyVaultSecretName"] = args?.keyVaultSecretName;
            resourceInputs["kind"] = args?.kind;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["password"] = args?.password;
            resourceInputs["pfxBlob"] = args?.pfxBlob;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["serverFarmId"] = args?.serverFarmId;
            resourceInputs["slot"] = args?.slot;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["cerBlob"] = undefined /*out*/;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["friendlyName"] = undefined /*out*/;
            resourceInputs["hostingEnvironmentProfile"] = undefined /*out*/;
            resourceInputs["issueDate"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["keyVaultSecretStatus"] = undefined /*out*/;
            resourceInputs["publicKeyHash"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["siteName"] = undefined /*out*/;
            resourceInputs["subjectName"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["valid"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["canonicalName"] = undefined /*out*/;
            resourceInputs["cerBlob"] = undefined /*out*/;
            resourceInputs["domainValidationMethod"] = undefined /*out*/;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["friendlyName"] = undefined /*out*/;
            resourceInputs["hostNames"] = undefined /*out*/;
            resourceInputs["hostingEnvironmentProfile"] = undefined /*out*/;
            resourceInputs["issueDate"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["keyVaultId"] = undefined /*out*/;
            resourceInputs["keyVaultSecretName"] = undefined /*out*/;
            resourceInputs["keyVaultSecretStatus"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["pfxBlob"] = undefined /*out*/;
            resourceInputs["publicKeyHash"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["serverFarmId"] = undefined /*out*/;
            resourceInputs["siteName"] = undefined /*out*/;
            resourceInputs["subjectName"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["valid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:web/v20241101:SiteCertificateSlot" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(SiteCertificateSlot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SiteCertificateSlot resource.
 */
export interface SiteCertificateSlotArgs {
    /**
     * CNAME of the certificate to be issued via free certificate
     */
    canonicalName?: pulumi.Input<string>;
    /**
     * Name of the certificate.
     */
    certificateName?: pulumi.Input<string>;
    /**
     * Method of domain validation for free cert
     */
    domainValidationMethod?: pulumi.Input<string>;
    /**
     * Host names the certificate applies to.
     */
    hostNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Azure Key Vault Csm resource Id.
     */
    keyVaultId?: pulumi.Input<string>;
    /**
     * Azure Key Vault secret name.
     */
    keyVaultSecretName?: pulumi.Input<string>;
    /**
     * Kind of resource. If the resource is an app, you can refer to https://github.com/Azure/app-service-linux-docs/blob/master/Things_You_Should_Know/kind_property.md#app-service-resource-kind-reference for details supported values for kind.
     */
    kind?: pulumi.Input<string>;
    /**
     * Resource Location.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the site.
     */
    name: pulumi.Input<string>;
    /**
     * Certificate password.
     */
    password?: pulumi.Input<string>;
    /**
     * Pfx blob.
     */
    pfxBlob?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource ID of the associated App Service plan.
     */
    serverFarmId?: pulumi.Input<string>;
    /**
     * Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
     */
    slot: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
