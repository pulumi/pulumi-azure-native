// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Static Site ARM resource.
 * API Version: 2020-12-01.
 */
export class StaticSite extends pulumi.CustomResource {
    /**
     * Get an existing StaticSite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StaticSite {
        return new StaticSite(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:web:StaticSite';

    /**
     * Returns true if the given object is an instance of StaticSite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StaticSite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StaticSite.__pulumiType;
    }

    /**
     * <code>false</code> if config file is locked for this static web app; otherwise, <code>true</code>.
     */
    public readonly allowConfigFileUpdates!: pulumi.Output<boolean | undefined>;
    /**
     * The target branch in the repository.
     */
    public readonly branch!: pulumi.Output<string | undefined>;
    /**
     * Build properties to configure on the repository.
     */
    public readonly buildProperties!: pulumi.Output<outputs.web.StaticSiteBuildPropertiesResponse | undefined>;
    /**
     * The content distribution endpoint for the static site.
     */
    public /*out*/ readonly contentDistributionEndpoint!: pulumi.Output<string>;
    /**
     * The custom domains associated with this static site.
     */
    public /*out*/ readonly customDomains!: pulumi.Output<string[]>;
    /**
     * The default autogenerated hostname for the static site.
     */
    public /*out*/ readonly defaultHostname!: pulumi.Output<string>;
    /**
     * Managed service identity.
     */
    public readonly identity!: pulumi.Output<outputs.web.ManagedServiceIdentityResponse | undefined>;
    /**
     * Identity to use for Key Vault Reference authentication.
     */
    public /*out*/ readonly keyVaultReferenceIdentity!: pulumi.Output<string>;
    /**
     * Kind of resource.
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Resource Location.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Private endpoint connections
     */
    public /*out*/ readonly privateEndpointConnections!: pulumi.Output<outputs.web.ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse[]>;
    /**
     * The provider that submitted the last deployment to the primary environment of the static site.
     */
    public /*out*/ readonly provider!: pulumi.Output<string>;
    /**
     * A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
     */
    public readonly repositoryToken!: pulumi.Output<string | undefined>;
    /**
     * URL for the repository of the static site.
     */
    public readonly repositoryUrl!: pulumi.Output<string | undefined>;
    /**
     * Description of a SKU for a scalable resource.
     */
    public readonly sku!: pulumi.Output<outputs.web.SkuDescriptionResponse | undefined>;
    /**
     * State indicating whether staging environments are allowed or not allowed for a static web app.
     */
    public readonly stagingEnvironmentPolicy!: pulumi.Output<string | undefined>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Template options for generating a new repository.
     */
    public readonly templateProperties!: pulumi.Output<outputs.web.StaticSiteTemplateOptionsResponse | undefined>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * User provided function apps registered with the static site
     */
    public /*out*/ readonly userProvidedFunctionApps!: pulumi.Output<outputs.web.StaticSiteUserProvidedFunctionAppResponse[]>;

    /**
     * Create a StaticSite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StaticSiteArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["allowConfigFileUpdates"] = args ? args.allowConfigFileUpdates : undefined;
            inputs["branch"] = args ? args.branch : undefined;
            inputs["buildProperties"] = args ? args.buildProperties : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["repositoryToken"] = args ? args.repositoryToken : undefined;
            inputs["repositoryUrl"] = args ? args.repositoryUrl : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["stagingEnvironmentPolicy"] = args ? args.stagingEnvironmentPolicy : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["templateProperties"] = args ? args.templateProperties : undefined;
            inputs["contentDistributionEndpoint"] = undefined /*out*/;
            inputs["customDomains"] = undefined /*out*/;
            inputs["defaultHostname"] = undefined /*out*/;
            inputs["keyVaultReferenceIdentity"] = undefined /*out*/;
            inputs["privateEndpointConnections"] = undefined /*out*/;
            inputs["provider"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["userProvidedFunctionApps"] = undefined /*out*/;
        } else {
            inputs["allowConfigFileUpdates"] = undefined /*out*/;
            inputs["branch"] = undefined /*out*/;
            inputs["buildProperties"] = undefined /*out*/;
            inputs["contentDistributionEndpoint"] = undefined /*out*/;
            inputs["customDomains"] = undefined /*out*/;
            inputs["defaultHostname"] = undefined /*out*/;
            inputs["identity"] = undefined /*out*/;
            inputs["keyVaultReferenceIdentity"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["privateEndpointConnections"] = undefined /*out*/;
            inputs["provider"] = undefined /*out*/;
            inputs["repositoryToken"] = undefined /*out*/;
            inputs["repositoryUrl"] = undefined /*out*/;
            inputs["sku"] = undefined /*out*/;
            inputs["stagingEnvironmentPolicy"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["templateProperties"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["userProvidedFunctionApps"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:web:StaticSite" }, { type: "azure-native:web/v20190801:StaticSite" }, { type: "azure-nextgen:web/v20190801:StaticSite" }, { type: "azure-native:web/v20200601:StaticSite" }, { type: "azure-nextgen:web/v20200601:StaticSite" }, { type: "azure-native:web/v20200901:StaticSite" }, { type: "azure-nextgen:web/v20200901:StaticSite" }, { type: "azure-native:web/v20201001:StaticSite" }, { type: "azure-nextgen:web/v20201001:StaticSite" }, { type: "azure-native:web/v20201201:StaticSite" }, { type: "azure-nextgen:web/v20201201:StaticSite" }, { type: "azure-native:web/v20210101:StaticSite" }, { type: "azure-nextgen:web/v20210101:StaticSite" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(StaticSite.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a StaticSite resource.
 */
export interface StaticSiteArgs {
    /**
     * <code>false</code> if config file is locked for this static web app; otherwise, <code>true</code>.
     */
    allowConfigFileUpdates?: pulumi.Input<boolean>;
    /**
     * The target branch in the repository.
     */
    branch?: pulumi.Input<string>;
    /**
     * Build properties to configure on the repository.
     */
    buildProperties?: pulumi.Input<inputs.web.StaticSiteBuildPropertiesArgs>;
    /**
     * Managed service identity.
     */
    identity?: pulumi.Input<inputs.web.ManagedServiceIdentityArgs>;
    /**
     * Kind of resource.
     */
    kind?: pulumi.Input<string>;
    /**
     * Resource Location.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the static site to create or update.
     */
    name?: pulumi.Input<string>;
    /**
     * A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
     */
    repositoryToken?: pulumi.Input<string>;
    /**
     * URL for the repository of the static site.
     */
    repositoryUrl?: pulumi.Input<string>;
    /**
     * Name of the resource group to which the resource belongs.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Description of a SKU for a scalable resource.
     */
    sku?: pulumi.Input<inputs.web.SkuDescriptionArgs>;
    /**
     * State indicating whether staging environments are allowed or not allowed for a static web app.
     */
    stagingEnvironmentPolicy?: pulumi.Input<enums.web.StagingEnvironmentPolicy>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Template options for generating a new repository.
     */
    templateProperties?: pulumi.Input<inputs.web.StaticSiteTemplateOptionsArgs>;
}
