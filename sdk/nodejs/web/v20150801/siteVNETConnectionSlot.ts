// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * VNETInfo contract. This contract is public and is a stripped down version of VNETInfoInternal
 *
 * @deprecated Version 2015-08-01 will be removed in v2 of the provider.
 */
export class SiteVNETConnectionSlot extends pulumi.CustomResource {
    /**
     * Get an existing SiteVNETConnectionSlot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SiteVNETConnectionSlot {
        pulumi.log.warn("SiteVNETConnectionSlot is deprecated: Version 2015-08-01 will be removed in v2 of the provider.")
        return new SiteVNETConnectionSlot(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:web/v20150801:SiteVNETConnectionSlot';

    /**
     * Returns true if the given object is an instance of SiteVNETConnectionSlot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteVNETConnectionSlot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteVNETConnectionSlot.__pulumiType;
    }

    /**
     * A certificate file (.cer) blob containing the public key of the private key used to authenticate a 
     *             Point-To-Site VPN connection.
     */
    public readonly certBlob!: pulumi.Output<string | undefined>;
    /**
     * The client certificate thumbprint
     */
    public readonly certThumbprint!: pulumi.Output<string | undefined>;
    /**
     * Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
     */
    public readonly dnsServers!: pulumi.Output<string | undefined>;
    /**
     * Kind of resource
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Resource Location
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource Name
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * Flag to determine if a resync is required
     */
    public readonly resyncRequired!: pulumi.Output<boolean | undefined>;
    /**
     * The routes that this virtual network connection uses.
     */
    public readonly routes!: pulumi.Output<outputs.web.v20150801.VnetRouteResponse[] | undefined>;
    /**
     * Resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The vnet resource id
     */
    public readonly vnetResourceId!: pulumi.Output<string | undefined>;

    /**
     * Create a SiteVNETConnectionSlot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Version 2015-08-01 will be removed in v2 of the provider. */
    constructor(name: string, args: SiteVNETConnectionSlotArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("SiteVNETConnectionSlot is deprecated: Version 2015-08-01 will be removed in v2 of the provider.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.slot === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slot'");
            }
            resourceInputs["certBlob"] = args ? args.certBlob : undefined;
            resourceInputs["certThumbprint"] = args ? args.certThumbprint : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["id"] = args ? args.id : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["resyncRequired"] = args ? args.resyncRequired : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
            resourceInputs["slot"] = args ? args.slot : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vnetName"] = args ? args.vnetName : undefined;
            resourceInputs["vnetResourceId"] = args ? args.vnetResourceId : undefined;
        } else {
            resourceInputs["certBlob"] = undefined /*out*/;
            resourceInputs["certThumbprint"] = undefined /*out*/;
            resourceInputs["dnsServers"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resyncRequired"] = undefined /*out*/;
            resourceInputs["routes"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["vnetResourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:web:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20160801:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20180201:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20181101:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20190801:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20200601:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20200901:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20201001:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20201201:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20210101:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20210115:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20210201:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20210301:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20220301:SiteVNETConnectionSlot" }, { type: "azure-native:web/v20220901:SiteVNETConnectionSlot" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(SiteVNETConnectionSlot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SiteVNETConnectionSlot resource.
 */
export interface SiteVNETConnectionSlotArgs {
    /**
     * A certificate file (.cer) blob containing the public key of the private key used to authenticate a 
     *             Point-To-Site VPN connection.
     */
    certBlob?: pulumi.Input<string>;
    /**
     * The client certificate thumbprint
     */
    certThumbprint?: pulumi.Input<string>;
    /**
     * Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
     */
    dnsServers?: pulumi.Input<string>;
    /**
     * Resource Id
     */
    id?: pulumi.Input<string>;
    /**
     * Kind of resource
     */
    kind?: pulumi.Input<string>;
    /**
     * Resource Location
     */
    location?: pulumi.Input<string>;
    /**
     * Resource Name
     */
    name: pulumi.Input<string>;
    /**
     * The resource group name
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Flag to determine if a resync is required
     */
    resyncRequired?: pulumi.Input<boolean>;
    /**
     * The routes that this virtual network connection uses.
     */
    routes?: pulumi.Input<pulumi.Input<inputs.web.v20150801.VnetRouteArgs>[]>;
    /**
     * The name of the slot for this web app.
     */
    slot: pulumi.Input<string>;
    /**
     * Resource tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource type
     */
    type?: pulumi.Input<string>;
    /**
     * The name of the Virtual Network
     */
    vnetName?: pulumi.Input<string>;
    /**
     * The vnet resource id
     */
    vnetResourceId?: pulumi.Input<string>;
}
