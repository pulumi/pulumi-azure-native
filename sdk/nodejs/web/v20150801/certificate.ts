// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * App certificate
 *
 * @deprecated Version 2015-08-01 will be removed in v2 of the provider.
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Certificate {
        pulumi.log.warn("Certificate is deprecated: Version 2015-08-01 will be removed in v2 of the provider.")
        return new Certificate(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:web/v20150801:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Raw bytes of .cer file
     */
    public readonly cerBlob!: pulumi.Output<string | undefined>;
    /**
     * Certificate expiration date
     */
    public readonly expirationDate!: pulumi.Output<string | undefined>;
    /**
     * Friendly name of the certificate
     */
    public readonly friendlyName!: pulumi.Output<string | undefined>;
    /**
     * Host names the certificate applies to
     */
    public readonly hostNames!: pulumi.Output<string[] | undefined>;
    /**
     * Specification for the hosting environment (App Service Environment) to use for the certificate
     */
    public readonly hostingEnvironmentProfile!: pulumi.Output<outputs.web.v20150801.HostingEnvironmentProfileResponse | undefined>;
    /**
     * Certificate issue Date
     */
    public readonly issueDate!: pulumi.Output<string | undefined>;
    /**
     * Certificate issuer
     */
    public readonly issuer!: pulumi.Output<string | undefined>;
    /**
     * Kind of resource
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Resource Location
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource Name
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * Certificate password
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Pfx blob
     */
    public readonly pfxBlob!: pulumi.Output<string | undefined>;
    /**
     * Public key hash
     */
    public readonly publicKeyHash!: pulumi.Output<string | undefined>;
    /**
     * Self link
     */
    public readonly selfLink!: pulumi.Output<string | undefined>;
    /**
     * App name
     */
    public readonly siteName!: pulumi.Output<string | undefined>;
    /**
     * Subject name of the certificate
     */
    public readonly subjectName!: pulumi.Output<string | undefined>;
    /**
     * Resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Certificate thumbprint
     */
    public readonly thumbprint!: pulumi.Output<string | undefined>;
    /**
     * Resource type
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * Is the certificate valid?
     */
    public readonly valid!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Version 2015-08-01 will be removed in v2 of the provider. */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Certificate is deprecated: Version 2015-08-01 will be removed in v2 of the provider.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["cerBlob"] = args ? args.cerBlob : undefined;
            resourceInputs["expirationDate"] = args ? args.expirationDate : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["hostNames"] = args ? args.hostNames : undefined;
            resourceInputs["hostingEnvironmentProfile"] = args ? args.hostingEnvironmentProfile : undefined;
            resourceInputs["id"] = args ? args.id : undefined;
            resourceInputs["issueDate"] = args ? args.issueDate : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["pfxBlob"] = args ? args.pfxBlob : undefined;
            resourceInputs["publicKeyHash"] = args ? args.publicKeyHash : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["selfLink"] = args ? args.selfLink : undefined;
            resourceInputs["siteName"] = args ? args.siteName : undefined;
            resourceInputs["subjectName"] = args ? args.subjectName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["thumbprint"] = args ? args.thumbprint : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["valid"] = args ? args.valid : undefined;
        } else {
            resourceInputs["cerBlob"] = undefined /*out*/;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["friendlyName"] = undefined /*out*/;
            resourceInputs["hostNames"] = undefined /*out*/;
            resourceInputs["hostingEnvironmentProfile"] = undefined /*out*/;
            resourceInputs["issueDate"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["pfxBlob"] = undefined /*out*/;
            resourceInputs["publicKeyHash"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["siteName"] = undefined /*out*/;
            resourceInputs["subjectName"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["valid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:web:Certificate" }, { type: "azure-native:web/v20160301:Certificate" }, { type: "azure-native:web/v20180201:Certificate" }, { type: "azure-native:web/v20181101:Certificate" }, { type: "azure-native:web/v20190801:Certificate" }, { type: "azure-native:web/v20200601:Certificate" }, { type: "azure-native:web/v20200901:Certificate" }, { type: "azure-native:web/v20201001:Certificate" }, { type: "azure-native:web/v20201201:Certificate" }, { type: "azure-native:web/v20210101:Certificate" }, { type: "azure-native:web/v20210115:Certificate" }, { type: "azure-native:web/v20210201:Certificate" }, { type: "azure-native:web/v20210301:Certificate" }, { type: "azure-native:web/v20220301:Certificate" }, { type: "azure-native:web/v20220901:Certificate" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Raw bytes of .cer file
     */
    cerBlob?: pulumi.Input<string>;
    /**
     * Certificate expiration date
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * Friendly name of the certificate
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * Host names the certificate applies to
     */
    hostNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specification for the hosting environment (App Service Environment) to use for the certificate
     */
    hostingEnvironmentProfile?: pulumi.Input<inputs.web.v20150801.HostingEnvironmentProfileArgs>;
    /**
     * Resource Id
     */
    id?: pulumi.Input<string>;
    /**
     * Certificate issue Date
     */
    issueDate?: pulumi.Input<string>;
    /**
     * Certificate issuer
     */
    issuer?: pulumi.Input<string>;
    /**
     * Kind of resource
     */
    kind?: pulumi.Input<string>;
    /**
     * Resource Location
     */
    location?: pulumi.Input<string>;
    /**
     * Resource Name
     */
    name?: pulumi.Input<string>;
    /**
     * Certificate password
     */
    password?: pulumi.Input<string>;
    /**
     * Pfx blob
     */
    pfxBlob?: pulumi.Input<string>;
    /**
     * Public key hash
     */
    publicKeyHash?: pulumi.Input<string>;
    /**
     * Name of the resource group
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Self link
     */
    selfLink?: pulumi.Input<string>;
    /**
     * App name
     */
    siteName?: pulumi.Input<string>;
    /**
     * Subject name of the certificate
     */
    subjectName?: pulumi.Input<string>;
    /**
     * Resource tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Certificate thumbprint
     */
    thumbprint?: pulumi.Input<string>;
    /**
     * Resource type
     */
    type?: pulumi.Input<string>;
    /**
     * Is the certificate valid?
     */
    valid?: pulumi.Input<boolean>;
}
