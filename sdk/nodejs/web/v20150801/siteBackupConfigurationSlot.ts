// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Description of a backup which will be performed
 */
export class SiteBackupConfigurationSlot extends pulumi.CustomResource {
    /**
     * Get an existing SiteBackupConfigurationSlot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SiteBackupConfigurationSlot {
        return new SiteBackupConfigurationSlot(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:web/v20150801:SiteBackupConfigurationSlot';

    /**
     * Returns true if the given object is an instance of SiteBackupConfigurationSlot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteBackupConfigurationSlot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteBackupConfigurationSlot.__pulumiType;
    }

    /**
     * Schedule for the backup if it is executed periodically
     */
    public readonly backupSchedule!: pulumi.Output<outputs.web.v20150801.BackupScheduleResponse | undefined>;
    /**
     * Databases included in the backup
     */
    public readonly databases!: pulumi.Output<outputs.web.v20150801.DatabaseBackupSettingResponse[] | undefined>;
    /**
     * True if the backup schedule is enabled (must be included in that case), false if the backup schedule should be disabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Kind of resource
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Resource Location
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource Name
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * SAS URL to the container
     */
    public readonly storageAccountUrl!: pulumi.Output<string | undefined>;
    /**
     * Resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SiteBackupConfigurationSlot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteBackupConfigurationSlotArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if ((!args || args.name === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.resourceGroupName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.slot === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'slot'");
            }
            if ((!args || args.type === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'type'");
            }
            inputs["backupSchedule"] = args ? args.backupSchedule : undefined;
            inputs["databases"] = args ? args.databases : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["slot"] = args ? args.slot : undefined;
            inputs["storageAccountUrl"] = args ? args.storageAccountUrl : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
        } else {
            inputs["backupSchedule"] = undefined /*out*/;
            inputs["databases"] = undefined /*out*/;
            inputs["enabled"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["storageAccountUrl"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:web/latest:SiteBackupConfigurationSlot" }, { type: "azure-nextgen:web/v20160801:SiteBackupConfigurationSlot" }, { type: "azure-nextgen:web/v20180201:SiteBackupConfigurationSlot" }, { type: "azure-nextgen:web/v20181101:SiteBackupConfigurationSlot" }, { type: "azure-nextgen:web/v20190801:SiteBackupConfigurationSlot" }, { type: "azure-nextgen:web/v20200601:SiteBackupConfigurationSlot" }, { type: "azure-nextgen:web/v20200901:SiteBackupConfigurationSlot" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(SiteBackupConfigurationSlot.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a SiteBackupConfigurationSlot resource.
 */
export interface SiteBackupConfigurationSlotArgs {
    /**
     * Schedule for the backup if it is executed periodically
     */
    readonly backupSchedule?: pulumi.Input<inputs.web.v20150801.BackupSchedule>;
    /**
     * Databases included in the backup
     */
    readonly databases?: pulumi.Input<pulumi.Input<inputs.web.v20150801.DatabaseBackupSetting>[]>;
    /**
     * True if the backup schedule is enabled (must be included in that case), false if the backup schedule should be disabled
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * Resource Id
     */
    readonly id?: pulumi.Input<string>;
    /**
     * Kind of resource
     */
    readonly kind?: pulumi.Input<string>;
    /**
     * Resource Location
     */
    readonly location?: pulumi.Input<string>;
    /**
     * Resource Name
     */
    readonly name: pulumi.Input<string>;
    /**
     * Name of resource group
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * Name of web app slot. If not specified then will default to production slot.
     */
    readonly slot: pulumi.Input<string>;
    /**
     * SAS URL to the container
     */
    readonly storageAccountUrl?: pulumi.Input<string>;
    /**
     * Resource tags
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource type
     */
    readonly type: pulumi.Input<string>;
}
