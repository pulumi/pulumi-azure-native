// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { CertificateArgs } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CertificateCsrArgs } from "./certificateCsr";
export type CertificateCsr = import("./certificateCsr").CertificateCsr;
export const CertificateCsr: typeof import("./certificateCsr").CertificateCsr = null as any;
utilities.lazyLoad(exports, ["CertificateCsr"], () => require("./certificateCsr"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetCertificateCsrArgs, GetCertificateCsrResult, GetCertificateCsrOutputArgs } from "./getCertificateCsr";
export const getCertificateCsr: typeof import("./getCertificateCsr").getCertificateCsr = null as any;
export const getCertificateCsrOutput: typeof import("./getCertificateCsr").getCertificateCsrOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateCsr","getCertificateCsrOutput"], () => require("./getCertificateCsr"));

export { GetHostingEnvironmentArgs, GetHostingEnvironmentResult, GetHostingEnvironmentOutputArgs } from "./getHostingEnvironment";
export const getHostingEnvironment: typeof import("./getHostingEnvironment").getHostingEnvironment = null as any;
export const getHostingEnvironmentOutput: typeof import("./getHostingEnvironment").getHostingEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getHostingEnvironment","getHostingEnvironmentOutput"], () => require("./getHostingEnvironment"));

export { GetManagedHostingEnvironmentArgs, GetManagedHostingEnvironmentResult, GetManagedHostingEnvironmentOutputArgs } from "./getManagedHostingEnvironment";
export const getManagedHostingEnvironment: typeof import("./getManagedHostingEnvironment").getManagedHostingEnvironment = null as any;
export const getManagedHostingEnvironmentOutput: typeof import("./getManagedHostingEnvironment").getManagedHostingEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getManagedHostingEnvironment","getManagedHostingEnvironmentOutput"], () => require("./getManagedHostingEnvironment"));

export { GetServerFarmArgs, GetServerFarmResult, GetServerFarmOutputArgs } from "./getServerFarm";
export const getServerFarm: typeof import("./getServerFarm").getServerFarm = null as any;
export const getServerFarmOutput: typeof import("./getServerFarm").getServerFarmOutput = null as any;
utilities.lazyLoad(exports, ["getServerFarm","getServerFarmOutput"], () => require("./getServerFarm"));

export { GetSiteArgs, GetSiteResult, GetSiteOutputArgs } from "./getSite";
export const getSite: typeof import("./getSite").getSite = null as any;
export const getSiteOutput: typeof import("./getSite").getSiteOutput = null as any;
utilities.lazyLoad(exports, ["getSite","getSiteOutput"], () => require("./getSite"));

export { GetSiteDeploymentArgs, GetSiteDeploymentResult, GetSiteDeploymentOutputArgs } from "./getSiteDeployment";
export const getSiteDeployment: typeof import("./getSiteDeployment").getSiteDeployment = null as any;
export const getSiteDeploymentOutput: typeof import("./getSiteDeployment").getSiteDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getSiteDeployment","getSiteDeploymentOutput"], () => require("./getSiteDeployment"));

export { GetSiteDeploymentSlotArgs, GetSiteDeploymentSlotResult, GetSiteDeploymentSlotOutputArgs } from "./getSiteDeploymentSlot";
export const getSiteDeploymentSlot: typeof import("./getSiteDeploymentSlot").getSiteDeploymentSlot = null as any;
export const getSiteDeploymentSlotOutput: typeof import("./getSiteDeploymentSlot").getSiteDeploymentSlotOutput = null as any;
utilities.lazyLoad(exports, ["getSiteDeploymentSlot","getSiteDeploymentSlotOutput"], () => require("./getSiteDeploymentSlot"));

export { GetSiteHostNameBindingArgs, GetSiteHostNameBindingResult, GetSiteHostNameBindingOutputArgs } from "./getSiteHostNameBinding";
export const getSiteHostNameBinding: typeof import("./getSiteHostNameBinding").getSiteHostNameBinding = null as any;
export const getSiteHostNameBindingOutput: typeof import("./getSiteHostNameBinding").getSiteHostNameBindingOutput = null as any;
utilities.lazyLoad(exports, ["getSiteHostNameBinding","getSiteHostNameBindingOutput"], () => require("./getSiteHostNameBinding"));

export { GetSiteHostNameBindingSlotArgs, GetSiteHostNameBindingSlotResult, GetSiteHostNameBindingSlotOutputArgs } from "./getSiteHostNameBindingSlot";
export const getSiteHostNameBindingSlot: typeof import("./getSiteHostNameBindingSlot").getSiteHostNameBindingSlot = null as any;
export const getSiteHostNameBindingSlotOutput: typeof import("./getSiteHostNameBindingSlot").getSiteHostNameBindingSlotOutput = null as any;
utilities.lazyLoad(exports, ["getSiteHostNameBindingSlot","getSiteHostNameBindingSlotOutput"], () => require("./getSiteHostNameBindingSlot"));

export { GetSiteInstanceDeploymentArgs, GetSiteInstanceDeploymentResult, GetSiteInstanceDeploymentOutputArgs } from "./getSiteInstanceDeployment";
export const getSiteInstanceDeployment: typeof import("./getSiteInstanceDeployment").getSiteInstanceDeployment = null as any;
export const getSiteInstanceDeploymentOutput: typeof import("./getSiteInstanceDeployment").getSiteInstanceDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getSiteInstanceDeployment","getSiteInstanceDeploymentOutput"], () => require("./getSiteInstanceDeployment"));

export { GetSiteInstanceDeploymentSlotArgs, GetSiteInstanceDeploymentSlotResult, GetSiteInstanceDeploymentSlotOutputArgs } from "./getSiteInstanceDeploymentSlot";
export const getSiteInstanceDeploymentSlot: typeof import("./getSiteInstanceDeploymentSlot").getSiteInstanceDeploymentSlot = null as any;
export const getSiteInstanceDeploymentSlotOutput: typeof import("./getSiteInstanceDeploymentSlot").getSiteInstanceDeploymentSlotOutput = null as any;
utilities.lazyLoad(exports, ["getSiteInstanceDeploymentSlot","getSiteInstanceDeploymentSlotOutput"], () => require("./getSiteInstanceDeploymentSlot"));

export { GetSiteLogsConfigArgs, GetSiteLogsConfigResult, GetSiteLogsConfigOutputArgs } from "./getSiteLogsConfig";
export const getSiteLogsConfig: typeof import("./getSiteLogsConfig").getSiteLogsConfig = null as any;
export const getSiteLogsConfigOutput: typeof import("./getSiteLogsConfig").getSiteLogsConfigOutput = null as any;
utilities.lazyLoad(exports, ["getSiteLogsConfig","getSiteLogsConfigOutput"], () => require("./getSiteLogsConfig"));

export { GetSiteRelayServiceConnectionArgs, GetSiteRelayServiceConnectionResult, GetSiteRelayServiceConnectionOutputArgs } from "./getSiteRelayServiceConnection";
export const getSiteRelayServiceConnection: typeof import("./getSiteRelayServiceConnection").getSiteRelayServiceConnection = null as any;
export const getSiteRelayServiceConnectionOutput: typeof import("./getSiteRelayServiceConnection").getSiteRelayServiceConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getSiteRelayServiceConnection","getSiteRelayServiceConnectionOutput"], () => require("./getSiteRelayServiceConnection"));

export { GetSiteRelayServiceConnectionSlotArgs, GetSiteRelayServiceConnectionSlotResult, GetSiteRelayServiceConnectionSlotOutputArgs } from "./getSiteRelayServiceConnectionSlot";
export const getSiteRelayServiceConnectionSlot: typeof import("./getSiteRelayServiceConnectionSlot").getSiteRelayServiceConnectionSlot = null as any;
export const getSiteRelayServiceConnectionSlotOutput: typeof import("./getSiteRelayServiceConnectionSlot").getSiteRelayServiceConnectionSlotOutput = null as any;
utilities.lazyLoad(exports, ["getSiteRelayServiceConnectionSlot","getSiteRelayServiceConnectionSlotOutput"], () => require("./getSiteRelayServiceConnectionSlot"));

export { GetSiteSlotArgs, GetSiteSlotResult, GetSiteSlotOutputArgs } from "./getSiteSlot";
export const getSiteSlot: typeof import("./getSiteSlot").getSiteSlot = null as any;
export const getSiteSlotOutput: typeof import("./getSiteSlot").getSiteSlotOutput = null as any;
utilities.lazyLoad(exports, ["getSiteSlot","getSiteSlotOutput"], () => require("./getSiteSlot"));

export { GetSiteSlotConfigNamesArgs, GetSiteSlotConfigNamesResult, GetSiteSlotConfigNamesOutputArgs } from "./getSiteSlotConfigNames";
export const getSiteSlotConfigNames: typeof import("./getSiteSlotConfigNames").getSiteSlotConfigNames = null as any;
export const getSiteSlotConfigNamesOutput: typeof import("./getSiteSlotConfigNames").getSiteSlotConfigNamesOutput = null as any;
utilities.lazyLoad(exports, ["getSiteSlotConfigNames","getSiteSlotConfigNamesOutput"], () => require("./getSiteSlotConfigNames"));

export { GetSiteSourceControlArgs, GetSiteSourceControlResult, GetSiteSourceControlOutputArgs } from "./getSiteSourceControl";
export const getSiteSourceControl: typeof import("./getSiteSourceControl").getSiteSourceControl = null as any;
export const getSiteSourceControlOutput: typeof import("./getSiteSourceControl").getSiteSourceControlOutput = null as any;
utilities.lazyLoad(exports, ["getSiteSourceControl","getSiteSourceControlOutput"], () => require("./getSiteSourceControl"));

export { GetSiteSourceControlSlotArgs, GetSiteSourceControlSlotResult, GetSiteSourceControlSlotOutputArgs } from "./getSiteSourceControlSlot";
export const getSiteSourceControlSlot: typeof import("./getSiteSourceControlSlot").getSiteSourceControlSlot = null as any;
export const getSiteSourceControlSlotOutput: typeof import("./getSiteSourceControlSlot").getSiteSourceControlSlotOutput = null as any;
utilities.lazyLoad(exports, ["getSiteSourceControlSlot","getSiteSourceControlSlotOutput"], () => require("./getSiteSourceControlSlot"));

export { GetSiteVNETConnectionArgs, GetSiteVNETConnectionResult, GetSiteVNETConnectionOutputArgs } from "./getSiteVNETConnection";
export const getSiteVNETConnection: typeof import("./getSiteVNETConnection").getSiteVNETConnection = null as any;
export const getSiteVNETConnectionOutput: typeof import("./getSiteVNETConnection").getSiteVNETConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getSiteVNETConnection","getSiteVNETConnectionOutput"], () => require("./getSiteVNETConnection"));

export { GetSiteVNETConnectionSlotArgs, GetSiteVNETConnectionSlotResult, GetSiteVNETConnectionSlotOutputArgs } from "./getSiteVNETConnectionSlot";
export const getSiteVNETConnectionSlot: typeof import("./getSiteVNETConnectionSlot").getSiteVNETConnectionSlot = null as any;
export const getSiteVNETConnectionSlotOutput: typeof import("./getSiteVNETConnectionSlot").getSiteVNETConnectionSlotOutput = null as any;
utilities.lazyLoad(exports, ["getSiteVNETConnectionSlot","getSiteVNETConnectionSlotOutput"], () => require("./getSiteVNETConnectionSlot"));

export { HostingEnvironmentArgs } from "./hostingEnvironment";
export type HostingEnvironment = import("./hostingEnvironment").HostingEnvironment;
export const HostingEnvironment: typeof import("./hostingEnvironment").HostingEnvironment = null as any;
utilities.lazyLoad(exports, ["HostingEnvironment"], () => require("./hostingEnvironment"));

export { ListSiteAppSettingsArgs, ListSiteAppSettingsResult, ListSiteAppSettingsOutputArgs } from "./listSiteAppSettings";
export const listSiteAppSettings: typeof import("./listSiteAppSettings").listSiteAppSettings = null as any;
export const listSiteAppSettingsOutput: typeof import("./listSiteAppSettings").listSiteAppSettingsOutput = null as any;
utilities.lazyLoad(exports, ["listSiteAppSettings","listSiteAppSettingsOutput"], () => require("./listSiteAppSettings"));

export { ListSiteAppSettingsSlotArgs, ListSiteAppSettingsSlotResult, ListSiteAppSettingsSlotOutputArgs } from "./listSiteAppSettingsSlot";
export const listSiteAppSettingsSlot: typeof import("./listSiteAppSettingsSlot").listSiteAppSettingsSlot = null as any;
export const listSiteAppSettingsSlotOutput: typeof import("./listSiteAppSettingsSlot").listSiteAppSettingsSlotOutput = null as any;
utilities.lazyLoad(exports, ["listSiteAppSettingsSlot","listSiteAppSettingsSlotOutput"], () => require("./listSiteAppSettingsSlot"));

export { ListSiteAuthSettingsArgs, ListSiteAuthSettingsResult, ListSiteAuthSettingsOutputArgs } from "./listSiteAuthSettings";
export const listSiteAuthSettings: typeof import("./listSiteAuthSettings").listSiteAuthSettings = null as any;
export const listSiteAuthSettingsOutput: typeof import("./listSiteAuthSettings").listSiteAuthSettingsOutput = null as any;
utilities.lazyLoad(exports, ["listSiteAuthSettings","listSiteAuthSettingsOutput"], () => require("./listSiteAuthSettings"));

export { ListSiteAuthSettingsSlotArgs, ListSiteAuthSettingsSlotResult, ListSiteAuthSettingsSlotOutputArgs } from "./listSiteAuthSettingsSlot";
export const listSiteAuthSettingsSlot: typeof import("./listSiteAuthSettingsSlot").listSiteAuthSettingsSlot = null as any;
export const listSiteAuthSettingsSlotOutput: typeof import("./listSiteAuthSettingsSlot").listSiteAuthSettingsSlotOutput = null as any;
utilities.lazyLoad(exports, ["listSiteAuthSettingsSlot","listSiteAuthSettingsSlotOutput"], () => require("./listSiteAuthSettingsSlot"));

export { ListSiteBackupConfigurationArgs, ListSiteBackupConfigurationResult, ListSiteBackupConfigurationOutputArgs } from "./listSiteBackupConfiguration";
export const listSiteBackupConfiguration: typeof import("./listSiteBackupConfiguration").listSiteBackupConfiguration = null as any;
export const listSiteBackupConfigurationOutput: typeof import("./listSiteBackupConfiguration").listSiteBackupConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["listSiteBackupConfiguration","listSiteBackupConfigurationOutput"], () => require("./listSiteBackupConfiguration"));

export { ListSiteBackupConfigurationSlotArgs, ListSiteBackupConfigurationSlotResult, ListSiteBackupConfigurationSlotOutputArgs } from "./listSiteBackupConfigurationSlot";
export const listSiteBackupConfigurationSlot: typeof import("./listSiteBackupConfigurationSlot").listSiteBackupConfigurationSlot = null as any;
export const listSiteBackupConfigurationSlotOutput: typeof import("./listSiteBackupConfigurationSlot").listSiteBackupConfigurationSlotOutput = null as any;
utilities.lazyLoad(exports, ["listSiteBackupConfigurationSlot","listSiteBackupConfigurationSlotOutput"], () => require("./listSiteBackupConfigurationSlot"));

export { ListSiteBackupStatusSecretsArgs, ListSiteBackupStatusSecretsResult, ListSiteBackupStatusSecretsOutputArgs } from "./listSiteBackupStatusSecrets";
export const listSiteBackupStatusSecrets: typeof import("./listSiteBackupStatusSecrets").listSiteBackupStatusSecrets = null as any;
export const listSiteBackupStatusSecretsOutput: typeof import("./listSiteBackupStatusSecrets").listSiteBackupStatusSecretsOutput = null as any;
utilities.lazyLoad(exports, ["listSiteBackupStatusSecrets","listSiteBackupStatusSecretsOutput"], () => require("./listSiteBackupStatusSecrets"));

export { ListSiteBackupStatusSecretsSlotArgs, ListSiteBackupStatusSecretsSlotResult, ListSiteBackupStatusSecretsSlotOutputArgs } from "./listSiteBackupStatusSecretsSlot";
export const listSiteBackupStatusSecretsSlot: typeof import("./listSiteBackupStatusSecretsSlot").listSiteBackupStatusSecretsSlot = null as any;
export const listSiteBackupStatusSecretsSlotOutput: typeof import("./listSiteBackupStatusSecretsSlot").listSiteBackupStatusSecretsSlotOutput = null as any;
utilities.lazyLoad(exports, ["listSiteBackupStatusSecretsSlot","listSiteBackupStatusSecretsSlotOutput"], () => require("./listSiteBackupStatusSecretsSlot"));

export { ListSiteConnectionStringsArgs, ListSiteConnectionStringsResult, ListSiteConnectionStringsOutputArgs } from "./listSiteConnectionStrings";
export const listSiteConnectionStrings: typeof import("./listSiteConnectionStrings").listSiteConnectionStrings = null as any;
export const listSiteConnectionStringsOutput: typeof import("./listSiteConnectionStrings").listSiteConnectionStringsOutput = null as any;
utilities.lazyLoad(exports, ["listSiteConnectionStrings","listSiteConnectionStringsOutput"], () => require("./listSiteConnectionStrings"));

export { ListSiteConnectionStringsSlotArgs, ListSiteConnectionStringsSlotResult, ListSiteConnectionStringsSlotOutputArgs } from "./listSiteConnectionStringsSlot";
export const listSiteConnectionStringsSlot: typeof import("./listSiteConnectionStringsSlot").listSiteConnectionStringsSlot = null as any;
export const listSiteConnectionStringsSlotOutput: typeof import("./listSiteConnectionStringsSlot").listSiteConnectionStringsSlotOutput = null as any;
utilities.lazyLoad(exports, ["listSiteConnectionStringsSlot","listSiteConnectionStringsSlotOutput"], () => require("./listSiteConnectionStringsSlot"));

export { ListSiteMetadataArgs, ListSiteMetadataResult, ListSiteMetadataOutputArgs } from "./listSiteMetadata";
export const listSiteMetadata: typeof import("./listSiteMetadata").listSiteMetadata = null as any;
export const listSiteMetadataOutput: typeof import("./listSiteMetadata").listSiteMetadataOutput = null as any;
utilities.lazyLoad(exports, ["listSiteMetadata","listSiteMetadataOutput"], () => require("./listSiteMetadata"));

export { ListSiteMetadataSlotArgs, ListSiteMetadataSlotResult, ListSiteMetadataSlotOutputArgs } from "./listSiteMetadataSlot";
export const listSiteMetadataSlot: typeof import("./listSiteMetadataSlot").listSiteMetadataSlot = null as any;
export const listSiteMetadataSlotOutput: typeof import("./listSiteMetadataSlot").listSiteMetadataSlotOutput = null as any;
utilities.lazyLoad(exports, ["listSiteMetadataSlot","listSiteMetadataSlotOutput"], () => require("./listSiteMetadataSlot"));

export { ListSitePublishingCredentialsArgs, ListSitePublishingCredentialsResult, ListSitePublishingCredentialsOutputArgs } from "./listSitePublishingCredentials";
export const listSitePublishingCredentials: typeof import("./listSitePublishingCredentials").listSitePublishingCredentials = null as any;
export const listSitePublishingCredentialsOutput: typeof import("./listSitePublishingCredentials").listSitePublishingCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["listSitePublishingCredentials","listSitePublishingCredentialsOutput"], () => require("./listSitePublishingCredentials"));

export { ListSitePublishingCredentialsSlotArgs, ListSitePublishingCredentialsSlotResult, ListSitePublishingCredentialsSlotOutputArgs } from "./listSitePublishingCredentialsSlot";
export const listSitePublishingCredentialsSlot: typeof import("./listSitePublishingCredentialsSlot").listSitePublishingCredentialsSlot = null as any;
export const listSitePublishingCredentialsSlotOutput: typeof import("./listSitePublishingCredentialsSlot").listSitePublishingCredentialsSlotOutput = null as any;
utilities.lazyLoad(exports, ["listSitePublishingCredentialsSlot","listSitePublishingCredentialsSlotOutput"], () => require("./listSitePublishingCredentialsSlot"));

export { ManagedHostingEnvironmentArgs } from "./managedHostingEnvironment";
export type ManagedHostingEnvironment = import("./managedHostingEnvironment").ManagedHostingEnvironment;
export const ManagedHostingEnvironment: typeof import("./managedHostingEnvironment").ManagedHostingEnvironment = null as any;
utilities.lazyLoad(exports, ["ManagedHostingEnvironment"], () => require("./managedHostingEnvironment"));

export { ServerFarmArgs } from "./serverFarm";
export type ServerFarm = import("./serverFarm").ServerFarm;
export const ServerFarm: typeof import("./serverFarm").ServerFarm = null as any;
utilities.lazyLoad(exports, ["ServerFarm"], () => require("./serverFarm"));

export { ServerFarmRouteForVnetArgs } from "./serverFarmRouteForVnet";
export type ServerFarmRouteForVnet = import("./serverFarmRouteForVnet").ServerFarmRouteForVnet;
export const ServerFarmRouteForVnet: typeof import("./serverFarmRouteForVnet").ServerFarmRouteForVnet = null as any;
utilities.lazyLoad(exports, ["ServerFarmRouteForVnet"], () => require("./serverFarmRouteForVnet"));

export { SiteArgs } from "./site";
export type Site = import("./site").Site;
export const Site: typeof import("./site").Site = null as any;
utilities.lazyLoad(exports, ["Site"], () => require("./site"));

export { SiteAppSettingsArgs } from "./siteAppSettings";
export type SiteAppSettings = import("./siteAppSettings").SiteAppSettings;
export const SiteAppSettings: typeof import("./siteAppSettings").SiteAppSettings = null as any;
utilities.lazyLoad(exports, ["SiteAppSettings"], () => require("./siteAppSettings"));

export { SiteAppSettingsSlotArgs } from "./siteAppSettingsSlot";
export type SiteAppSettingsSlot = import("./siteAppSettingsSlot").SiteAppSettingsSlot;
export const SiteAppSettingsSlot: typeof import("./siteAppSettingsSlot").SiteAppSettingsSlot = null as any;
utilities.lazyLoad(exports, ["SiteAppSettingsSlot"], () => require("./siteAppSettingsSlot"));

export { SiteAuthSettingsArgs } from "./siteAuthSettings";
export type SiteAuthSettings = import("./siteAuthSettings").SiteAuthSettings;
export const SiteAuthSettings: typeof import("./siteAuthSettings").SiteAuthSettings = null as any;
utilities.lazyLoad(exports, ["SiteAuthSettings"], () => require("./siteAuthSettings"));

export { SiteAuthSettingsSlotArgs } from "./siteAuthSettingsSlot";
export type SiteAuthSettingsSlot = import("./siteAuthSettingsSlot").SiteAuthSettingsSlot;
export const SiteAuthSettingsSlot: typeof import("./siteAuthSettingsSlot").SiteAuthSettingsSlot = null as any;
utilities.lazyLoad(exports, ["SiteAuthSettingsSlot"], () => require("./siteAuthSettingsSlot"));

export { SiteBackupConfigurationArgs } from "./siteBackupConfiguration";
export type SiteBackupConfiguration = import("./siteBackupConfiguration").SiteBackupConfiguration;
export const SiteBackupConfiguration: typeof import("./siteBackupConfiguration").SiteBackupConfiguration = null as any;
utilities.lazyLoad(exports, ["SiteBackupConfiguration"], () => require("./siteBackupConfiguration"));

export { SiteBackupConfigurationSlotArgs } from "./siteBackupConfigurationSlot";
export type SiteBackupConfigurationSlot = import("./siteBackupConfigurationSlot").SiteBackupConfigurationSlot;
export const SiteBackupConfigurationSlot: typeof import("./siteBackupConfigurationSlot").SiteBackupConfigurationSlot = null as any;
utilities.lazyLoad(exports, ["SiteBackupConfigurationSlot"], () => require("./siteBackupConfigurationSlot"));

export { SiteConnectionStringsArgs } from "./siteConnectionStrings";
export type SiteConnectionStrings = import("./siteConnectionStrings").SiteConnectionStrings;
export const SiteConnectionStrings: typeof import("./siteConnectionStrings").SiteConnectionStrings = null as any;
utilities.lazyLoad(exports, ["SiteConnectionStrings"], () => require("./siteConnectionStrings"));

export { SiteConnectionStringsSlotArgs } from "./siteConnectionStringsSlot";
export type SiteConnectionStringsSlot = import("./siteConnectionStringsSlot").SiteConnectionStringsSlot;
export const SiteConnectionStringsSlot: typeof import("./siteConnectionStringsSlot").SiteConnectionStringsSlot = null as any;
utilities.lazyLoad(exports, ["SiteConnectionStringsSlot"], () => require("./siteConnectionStringsSlot"));

export { SiteDeploymentArgs } from "./siteDeployment";
export type SiteDeployment = import("./siteDeployment").SiteDeployment;
export const SiteDeployment: typeof import("./siteDeployment").SiteDeployment = null as any;
utilities.lazyLoad(exports, ["SiteDeployment"], () => require("./siteDeployment"));

export { SiteDeploymentSlotArgs } from "./siteDeploymentSlot";
export type SiteDeploymentSlot = import("./siteDeploymentSlot").SiteDeploymentSlot;
export const SiteDeploymentSlot: typeof import("./siteDeploymentSlot").SiteDeploymentSlot = null as any;
utilities.lazyLoad(exports, ["SiteDeploymentSlot"], () => require("./siteDeploymentSlot"));

export { SiteHostNameBindingArgs } from "./siteHostNameBinding";
export type SiteHostNameBinding = import("./siteHostNameBinding").SiteHostNameBinding;
export const SiteHostNameBinding: typeof import("./siteHostNameBinding").SiteHostNameBinding = null as any;
utilities.lazyLoad(exports, ["SiteHostNameBinding"], () => require("./siteHostNameBinding"));

export { SiteHostNameBindingSlotArgs } from "./siteHostNameBindingSlot";
export type SiteHostNameBindingSlot = import("./siteHostNameBindingSlot").SiteHostNameBindingSlot;
export const SiteHostNameBindingSlot: typeof import("./siteHostNameBindingSlot").SiteHostNameBindingSlot = null as any;
utilities.lazyLoad(exports, ["SiteHostNameBindingSlot"], () => require("./siteHostNameBindingSlot"));

export { SiteInstanceDeploymentArgs } from "./siteInstanceDeployment";
export type SiteInstanceDeployment = import("./siteInstanceDeployment").SiteInstanceDeployment;
export const SiteInstanceDeployment: typeof import("./siteInstanceDeployment").SiteInstanceDeployment = null as any;
utilities.lazyLoad(exports, ["SiteInstanceDeployment"], () => require("./siteInstanceDeployment"));

export { SiteInstanceDeploymentSlotArgs } from "./siteInstanceDeploymentSlot";
export type SiteInstanceDeploymentSlot = import("./siteInstanceDeploymentSlot").SiteInstanceDeploymentSlot;
export const SiteInstanceDeploymentSlot: typeof import("./siteInstanceDeploymentSlot").SiteInstanceDeploymentSlot = null as any;
utilities.lazyLoad(exports, ["SiteInstanceDeploymentSlot"], () => require("./siteInstanceDeploymentSlot"));

export { SiteLogsConfigArgs } from "./siteLogsConfig";
export type SiteLogsConfig = import("./siteLogsConfig").SiteLogsConfig;
export const SiteLogsConfig: typeof import("./siteLogsConfig").SiteLogsConfig = null as any;
utilities.lazyLoad(exports, ["SiteLogsConfig"], () => require("./siteLogsConfig"));

export { SiteMetadataArgs } from "./siteMetadata";
export type SiteMetadata = import("./siteMetadata").SiteMetadata;
export const SiteMetadata: typeof import("./siteMetadata").SiteMetadata = null as any;
utilities.lazyLoad(exports, ["SiteMetadata"], () => require("./siteMetadata"));

export { SiteMetadataSlotArgs } from "./siteMetadataSlot";
export type SiteMetadataSlot = import("./siteMetadataSlot").SiteMetadataSlot;
export const SiteMetadataSlot: typeof import("./siteMetadataSlot").SiteMetadataSlot = null as any;
utilities.lazyLoad(exports, ["SiteMetadataSlot"], () => require("./siteMetadataSlot"));

export { SiteRelayServiceConnectionArgs } from "./siteRelayServiceConnection";
export type SiteRelayServiceConnection = import("./siteRelayServiceConnection").SiteRelayServiceConnection;
export const SiteRelayServiceConnection: typeof import("./siteRelayServiceConnection").SiteRelayServiceConnection = null as any;
utilities.lazyLoad(exports, ["SiteRelayServiceConnection"], () => require("./siteRelayServiceConnection"));

export { SiteRelayServiceConnectionSlotArgs } from "./siteRelayServiceConnectionSlot";
export type SiteRelayServiceConnectionSlot = import("./siteRelayServiceConnectionSlot").SiteRelayServiceConnectionSlot;
export const SiteRelayServiceConnectionSlot: typeof import("./siteRelayServiceConnectionSlot").SiteRelayServiceConnectionSlot = null as any;
utilities.lazyLoad(exports, ["SiteRelayServiceConnectionSlot"], () => require("./siteRelayServiceConnectionSlot"));

export { SiteSlotArgs } from "./siteSlot";
export type SiteSlot = import("./siteSlot").SiteSlot;
export const SiteSlot: typeof import("./siteSlot").SiteSlot = null as any;
utilities.lazyLoad(exports, ["SiteSlot"], () => require("./siteSlot"));

export { SiteSlotConfigNamesArgs } from "./siteSlotConfigNames";
export type SiteSlotConfigNames = import("./siteSlotConfigNames").SiteSlotConfigNames;
export const SiteSlotConfigNames: typeof import("./siteSlotConfigNames").SiteSlotConfigNames = null as any;
utilities.lazyLoad(exports, ["SiteSlotConfigNames"], () => require("./siteSlotConfigNames"));

export { SiteSourceControlArgs } from "./siteSourceControl";
export type SiteSourceControl = import("./siteSourceControl").SiteSourceControl;
export const SiteSourceControl: typeof import("./siteSourceControl").SiteSourceControl = null as any;
utilities.lazyLoad(exports, ["SiteSourceControl"], () => require("./siteSourceControl"));

export { SiteSourceControlSlotArgs } from "./siteSourceControlSlot";
export type SiteSourceControlSlot = import("./siteSourceControlSlot").SiteSourceControlSlot;
export const SiteSourceControlSlot: typeof import("./siteSourceControlSlot").SiteSourceControlSlot = null as any;
utilities.lazyLoad(exports, ["SiteSourceControlSlot"], () => require("./siteSourceControlSlot"));

export { SiteVNETConnectionArgs } from "./siteVNETConnection";
export type SiteVNETConnection = import("./siteVNETConnection").SiteVNETConnection;
export const SiteVNETConnection: typeof import("./siteVNETConnection").SiteVNETConnection = null as any;
utilities.lazyLoad(exports, ["SiteVNETConnection"], () => require("./siteVNETConnection"));

export { SiteVNETConnectionSlotArgs } from "./siteVNETConnectionSlot";
export type SiteVNETConnectionSlot = import("./siteVNETConnectionSlot").SiteVNETConnectionSlot;
export const SiteVNETConnectionSlot: typeof import("./siteVNETConnectionSlot").SiteVNETConnectionSlot = null as any;
utilities.lazyLoad(exports, ["SiteVNETConnectionSlot"], () => require("./siteVNETConnectionSlot"));


// Export enums:
export * from "../../types/enums/web/v20150801";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:web/v20150801:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:CertificateCsr":
                return new CertificateCsr(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:HostingEnvironment":
                return new HostingEnvironment(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:ManagedHostingEnvironment":
                return new ManagedHostingEnvironment(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:ServerFarm":
                return new ServerFarm(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:ServerFarmRouteForVnet":
                return new ServerFarmRouteForVnet(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:Site":
                return new Site(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteAppSettings":
                return new SiteAppSettings(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteAppSettingsSlot":
                return new SiteAppSettingsSlot(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteAuthSettings":
                return new SiteAuthSettings(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteAuthSettingsSlot":
                return new SiteAuthSettingsSlot(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteBackupConfiguration":
                return new SiteBackupConfiguration(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteBackupConfigurationSlot":
                return new SiteBackupConfigurationSlot(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteConnectionStrings":
                return new SiteConnectionStrings(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteConnectionStringsSlot":
                return new SiteConnectionStringsSlot(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteDeployment":
                return new SiteDeployment(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteDeploymentSlot":
                return new SiteDeploymentSlot(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteHostNameBinding":
                return new SiteHostNameBinding(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteHostNameBindingSlot":
                return new SiteHostNameBindingSlot(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteInstanceDeployment":
                return new SiteInstanceDeployment(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteInstanceDeploymentSlot":
                return new SiteInstanceDeploymentSlot(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteLogsConfig":
                return new SiteLogsConfig(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteMetadata":
                return new SiteMetadata(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteMetadataSlot":
                return new SiteMetadataSlot(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteRelayServiceConnection":
                return new SiteRelayServiceConnection(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteRelayServiceConnectionSlot":
                return new SiteRelayServiceConnectionSlot(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteSlot":
                return new SiteSlot(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteSlotConfigNames":
                return new SiteSlotConfigNames(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteSourceControl":
                return new SiteSourceControl(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteSourceControlSlot":
                return new SiteSourceControlSlot(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteVNETConnection":
                return new SiteVNETConnection(name, <any>undefined, { urn })
            case "azure-native:web/v20150801:SiteVNETConnectionSlot":
                return new SiteVNETConnectionSlot(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "web/v20150801", _module)
