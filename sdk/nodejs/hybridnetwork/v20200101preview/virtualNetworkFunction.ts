// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Hybrid network virtual network function resource response.
 */
export class VirtualNetworkFunction extends pulumi.CustomResource {
    /**
     * Get an existing VirtualNetworkFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VirtualNetworkFunction {
        return new VirtualNetworkFunction(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:hybridnetwork/v20200101preview:VirtualNetworkFunction';

    /**
     * Returns true if the given object is an instance of VirtualNetworkFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualNetworkFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualNetworkFunction.__pulumiType;
    }

    /**
     * The reference to the hybrid network device.
     */
    public readonly device!: pulumi.Output<outputs.hybridnetwork.v20200101preview.SubResourceResponse | undefined>;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    public readonly etag!: pulumi.Output<string | undefined>;
    /**
     * Resource location.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The resource URI of the managed application.
     */
    public /*out*/ readonly managedApplication!: pulumi.Output<outputs.hybridnetwork.v20200101preview.SubResourceResponse>;
    /**
     * The parameters for the managed application.
     */
    public readonly managedApplicationParameters!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The provisioning state of the hybrid network virtual network function resource.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The service key for the virtual network function resource.
     */
    public /*out*/ readonly serviceKey!: pulumi.Output<string>;
    /**
     * The sku name for the hybrid network virtual network function.
     */
    public readonly skuName!: pulumi.Output<string | undefined>;
    /**
     * The sku type for the hybrid network virtual network function.
     */
    public /*out*/ readonly skuType!: pulumi.Output<string>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The vendor name for the hybrid network virtual network function.
     */
    public readonly vendorName!: pulumi.Output<string | undefined>;
    /**
     * The vendor provisioning state for the virtual network function resource.
     */
    public /*out*/ readonly vendorProvisioningState!: pulumi.Output<string>;
    /**
     * The virtual network function configurations from the user.
     */
    public readonly virtualNetworkFunctionUserConfigurations!: pulumi.Output<outputs.hybridnetwork.v20200101preview.VirtualNetworkFunctionUserConfigurationResponse[] | undefined>;

    /**
     * Create a VirtualNetworkFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualNetworkFunctionArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.virtualNetworkFunctionName === undefined) {
                throw new Error("Missing required property 'virtualNetworkFunctionName'");
            }
            inputs["device"] = args ? args.device : undefined;
            inputs["etag"] = args ? args.etag : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["managedApplicationParameters"] = args ? args.managedApplicationParameters : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["skuName"] = args ? args.skuName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vendorName"] = args ? args.vendorName : undefined;
            inputs["virtualNetworkFunctionName"] = args ? args.virtualNetworkFunctionName : undefined;
            inputs["virtualNetworkFunctionUserConfigurations"] = args ? args.virtualNetworkFunctionUserConfigurations : undefined;
            inputs["managedApplication"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["serviceKey"] = undefined /*out*/;
            inputs["skuType"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["vendorProvisioningState"] = undefined /*out*/;
        } else {
            inputs["device"] = undefined /*out*/;
            inputs["etag"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["managedApplication"] = undefined /*out*/;
            inputs["managedApplicationParameters"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["serviceKey"] = undefined /*out*/;
            inputs["skuName"] = undefined /*out*/;
            inputs["skuType"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["vendorName"] = undefined /*out*/;
            inputs["vendorProvisioningState"] = undefined /*out*/;
            inputs["virtualNetworkFunctionUserConfigurations"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(VirtualNetworkFunction.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a VirtualNetworkFunction resource.
 */
export interface VirtualNetworkFunctionArgs {
    /**
     * The reference to the hybrid network device.
     */
    readonly device?: pulumi.Input<inputs.hybridnetwork.v20200101preview.SubResource>;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    readonly etag?: pulumi.Input<string>;
    /**
     * Resource location.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The parameters for the managed application.
     */
    readonly managedApplicationParameters?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the resource group.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The sku name for the hybrid network virtual network function.
     */
    readonly skuName?: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The vendor name for the hybrid network virtual network function.
     */
    readonly vendorName?: pulumi.Input<string>;
    /**
     * Resource name for the hybrid network virtual network function resource.
     */
    readonly virtualNetworkFunctionName: pulumi.Input<string>;
    /**
     * The virtual network function configurations from the user.
     */
    readonly virtualNetworkFunctionUserConfigurations?: pulumi.Input<pulumi.Input<inputs.hybridnetwork.v20200101preview.VirtualNetworkFunctionUserConfiguration>[]>;
}
