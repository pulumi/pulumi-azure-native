// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { GetSapApplicationServerInstanceArgs, GetSapApplicationServerInstanceResult, GetSapApplicationServerInstanceOutputArgs } from "./getSapApplicationServerInstance";
export const getSapApplicationServerInstance: typeof import("./getSapApplicationServerInstance").getSapApplicationServerInstance = null as any;
export const getSapApplicationServerInstanceOutput: typeof import("./getSapApplicationServerInstance").getSapApplicationServerInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSapApplicationServerInstance","getSapApplicationServerInstanceOutput"], () => require("./getSapApplicationServerInstance"));

export { GetSapCentralServerInstanceArgs, GetSapCentralServerInstanceResult, GetSapCentralServerInstanceOutputArgs } from "./getSapCentralServerInstance";
export const getSapCentralServerInstance: typeof import("./getSapCentralServerInstance").getSapCentralServerInstance = null as any;
export const getSapCentralServerInstanceOutput: typeof import("./getSapCentralServerInstance").getSapCentralServerInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSapCentralServerInstance","getSapCentralServerInstanceOutput"], () => require("./getSapCentralServerInstance"));

export { GetSapDatabaseInstanceArgs, GetSapDatabaseInstanceResult, GetSapDatabaseInstanceOutputArgs } from "./getSapDatabaseInstance";
export const getSapDatabaseInstance: typeof import("./getSapDatabaseInstance").getSapDatabaseInstance = null as any;
export const getSapDatabaseInstanceOutput: typeof import("./getSapDatabaseInstance").getSapDatabaseInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSapDatabaseInstance","getSapDatabaseInstanceOutput"], () => require("./getSapDatabaseInstance"));

export { GetSapVirtualInstanceArgs, GetSapVirtualInstanceResult, GetSapVirtualInstanceOutputArgs } from "./getSapVirtualInstance";
export const getSapVirtualInstance: typeof import("./getSapVirtualInstance").getSapVirtualInstance = null as any;
export const getSapVirtualInstanceOutput: typeof import("./getSapVirtualInstance").getSapVirtualInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSapVirtualInstance","getSapVirtualInstanceOutput"], () => require("./getSapVirtualInstance"));

export { GetSapVirtualInstanceInvokeAvailabilityZoneDetailsArgs, GetSapVirtualInstanceInvokeAvailabilityZoneDetailsResult, GetSapVirtualInstanceInvokeAvailabilityZoneDetailsOutputArgs } from "./getSapVirtualInstanceInvokeAvailabilityZoneDetails";
export const getSapVirtualInstanceInvokeAvailabilityZoneDetails: typeof import("./getSapVirtualInstanceInvokeAvailabilityZoneDetails").getSapVirtualInstanceInvokeAvailabilityZoneDetails = null as any;
export const getSapVirtualInstanceInvokeAvailabilityZoneDetailsOutput: typeof import("./getSapVirtualInstanceInvokeAvailabilityZoneDetails").getSapVirtualInstanceInvokeAvailabilityZoneDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getSapVirtualInstanceInvokeAvailabilityZoneDetails","getSapVirtualInstanceInvokeAvailabilityZoneDetailsOutput"], () => require("./getSapVirtualInstanceInvokeAvailabilityZoneDetails"));

export { GetSapVirtualInstanceInvokeDiskConfigurationsArgs, GetSapVirtualInstanceInvokeDiskConfigurationsResult, GetSapVirtualInstanceInvokeDiskConfigurationsOutputArgs } from "./getSapVirtualInstanceInvokeDiskConfigurations";
export const getSapVirtualInstanceInvokeDiskConfigurations: typeof import("./getSapVirtualInstanceInvokeDiskConfigurations").getSapVirtualInstanceInvokeDiskConfigurations = null as any;
export const getSapVirtualInstanceInvokeDiskConfigurationsOutput: typeof import("./getSapVirtualInstanceInvokeDiskConfigurations").getSapVirtualInstanceInvokeDiskConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getSapVirtualInstanceInvokeDiskConfigurations","getSapVirtualInstanceInvokeDiskConfigurationsOutput"], () => require("./getSapVirtualInstanceInvokeDiskConfigurations"));

export { GetSapVirtualInstanceInvokeSapSupportedSkuArgs, GetSapVirtualInstanceInvokeSapSupportedSkuResult, GetSapVirtualInstanceInvokeSapSupportedSkuOutputArgs } from "./getSapVirtualInstanceInvokeSapSupportedSku";
export const getSapVirtualInstanceInvokeSapSupportedSku: typeof import("./getSapVirtualInstanceInvokeSapSupportedSku").getSapVirtualInstanceInvokeSapSupportedSku = null as any;
export const getSapVirtualInstanceInvokeSapSupportedSkuOutput: typeof import("./getSapVirtualInstanceInvokeSapSupportedSku").getSapVirtualInstanceInvokeSapSupportedSkuOutput = null as any;
utilities.lazyLoad(exports, ["getSapVirtualInstanceInvokeSapSupportedSku","getSapVirtualInstanceInvokeSapSupportedSkuOutput"], () => require("./getSapVirtualInstanceInvokeSapSupportedSku"));

export { GetSapVirtualInstanceInvokeSizingRecommendationsArgs, GetSapVirtualInstanceInvokeSizingRecommendationsResult, GetSapVirtualInstanceInvokeSizingRecommendationsOutputArgs } from "./getSapVirtualInstanceInvokeSizingRecommendations";
export const getSapVirtualInstanceInvokeSizingRecommendations: typeof import("./getSapVirtualInstanceInvokeSizingRecommendations").getSapVirtualInstanceInvokeSizingRecommendations = null as any;
export const getSapVirtualInstanceInvokeSizingRecommendationsOutput: typeof import("./getSapVirtualInstanceInvokeSizingRecommendations").getSapVirtualInstanceInvokeSizingRecommendationsOutput = null as any;
utilities.lazyLoad(exports, ["getSapVirtualInstanceInvokeSizingRecommendations","getSapVirtualInstanceInvokeSizingRecommendationsOutput"], () => require("./getSapVirtualInstanceInvokeSizingRecommendations"));

export { SapApplicationServerInstanceArgs } from "./sapApplicationServerInstance";
export type SapApplicationServerInstance = import("./sapApplicationServerInstance").SapApplicationServerInstance;
export const SapApplicationServerInstance: typeof import("./sapApplicationServerInstance").SapApplicationServerInstance = null as any;
utilities.lazyLoad(exports, ["SapApplicationServerInstance"], () => require("./sapApplicationServerInstance"));

export { SapCentralServerInstanceArgs } from "./sapCentralServerInstance";
export type SapCentralServerInstance = import("./sapCentralServerInstance").SapCentralServerInstance;
export const SapCentralServerInstance: typeof import("./sapCentralServerInstance").SapCentralServerInstance = null as any;
utilities.lazyLoad(exports, ["SapCentralServerInstance"], () => require("./sapCentralServerInstance"));

export { SapDatabaseInstanceArgs } from "./sapDatabaseInstance";
export type SapDatabaseInstance = import("./sapDatabaseInstance").SapDatabaseInstance;
export const SapDatabaseInstance: typeof import("./sapDatabaseInstance").SapDatabaseInstance = null as any;
utilities.lazyLoad(exports, ["SapDatabaseInstance"], () => require("./sapDatabaseInstance"));

export { SapVirtualInstanceArgs } from "./sapVirtualInstance";
export type SapVirtualInstance = import("./sapVirtualInstance").SapVirtualInstance;
export const SapVirtualInstance: typeof import("./sapVirtualInstance").SapVirtualInstance = null as any;
utilities.lazyLoad(exports, ["SapVirtualInstance"], () => require("./sapVirtualInstance"));


// Export enums:
export * from "../../types/enums/workloads/v20240901";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:workloads/v20240901:SapApplicationServerInstance":
                return new SapApplicationServerInstance(name, <any>undefined, { urn })
            case "azure-native:workloads/v20240901:SapCentralServerInstance":
                return new SapCentralServerInstance(name, <any>undefined, { urn })
            case "azure-native:workloads/v20240901:SapDatabaseInstance":
                return new SapDatabaseInstance(name, <any>undefined, { urn })
            case "azure-native:workloads/v20240901:SapVirtualInstance":
                return new SapVirtualInstance(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "workloads/v20240901", _module)
