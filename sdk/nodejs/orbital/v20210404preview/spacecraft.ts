// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Customer creates a spacecraft resource to schedule a contact.
 */
export class Spacecraft extends pulumi.CustomResource {
    /**
     * Get an existing Spacecraft resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Spacecraft {
        return new Spacecraft(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:orbital/v20210404preview:Spacecraft';

    /**
     * Returns true if the given object is an instance of Spacecraft.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Spacecraft {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Spacecraft.__pulumiType;
    }

    /**
     * Authorization status of spacecraft.
     */
    public /*out*/ readonly authorizationStatus!: pulumi.Output<string>;
    /**
     * Details of the authorization status.
     */
    public /*out*/ readonly authorizationStatusExtended!: pulumi.Output<string>;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Links of the Spacecraft
     */
    public readonly links!: pulumi.Output<outputs.orbital.v20210404preview.SpacecraftLinkResponse[] | undefined>;
    /**
     * The geo-location where the resource lives
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * NORAD ID of the spacecraft.
     */
    public readonly noradId!: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.orbital.v20210404preview.SystemDataResponse>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Title line of Two Line Element (TLE).
     */
    public readonly titleLine!: pulumi.Output<string | undefined>;
    /**
     * Line 1 of Two Line Element (TLE).
     */
    public readonly tleLine1!: pulumi.Output<string | undefined>;
    /**
     * Line 2 of Two Line Element (TLE).
     */
    public readonly tleLine2!: pulumi.Output<string | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Spacecraft resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpacecraftArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.noradId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'noradId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["links"] = args ? args.links : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["noradId"] = args ? args.noradId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["spacecraftName"] = args ? args.spacecraftName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["titleLine"] = args ? args.titleLine : undefined;
            inputs["tleLine1"] = args ? args.tleLine1 : undefined;
            inputs["tleLine2"] = args ? args.tleLine2 : undefined;
            inputs["authorizationStatus"] = undefined /*out*/;
            inputs["authorizationStatusExtended"] = undefined /*out*/;
            inputs["etag"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["authorizationStatus"] = undefined /*out*/;
            inputs["authorizationStatusExtended"] = undefined /*out*/;
            inputs["etag"] = undefined /*out*/;
            inputs["links"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["noradId"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["titleLine"] = undefined /*out*/;
            inputs["tleLine1"] = undefined /*out*/;
            inputs["tleLine2"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-native:orbital:Spacecraft" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Spacecraft.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Spacecraft resource.
 */
export interface SpacecraftArgs {
    /**
     * Links of the Spacecraft
     */
    links?: pulumi.Input<pulumi.Input<inputs.orbital.v20210404preview.SpacecraftLinkArgs>[]>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * NORAD ID of the spacecraft.
     */
    noradId: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Spacecraft ID
     */
    spacecraftName?: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Title line of Two Line Element (TLE).
     */
    titleLine?: pulumi.Input<string>;
    /**
     * Line 1 of Two Line Element (TLE).
     */
    tleLine1?: pulumi.Input<string>;
    /**
     * Line 2 of Two Line Element (TLE).
     */
    tleLine2?: pulumi.Input<string>;
}
