// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets the specified L2 connection in a specified resource group.
 */
export function getL2Connection(args: GetL2ConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetL2ConnectionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:orbital/v20240301:getL2Connection", {
        "l2ConnectionName": args.l2ConnectionName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface GetL2ConnectionArgs {
    /**
     * L2 Connection name.
     */
    l2ConnectionName: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
}

/**
 * Connects an edge site to an orbital gateway and describes what layer 2 traffic to forward between them.
 */
export interface GetL2ConnectionResult {
    /**
     * Globally-unique identifier for this connection that is to be used as a circuit ID.
     */
    readonly circuitId: string;
    /**
     * A reference to an Microsoft.Orbital/edgeSites resource to route traffic for.
     */
    readonly edgeSite: outputs.orbital.v20240301.L2ConnectionsPropertiesResponseEdgeSite;
    /**
     * A reference to an Microsoft.Orbital/groundStations resource to route traffic for.
     */
    readonly groundStation: outputs.orbital.v20240301.L2ConnectionsPropertiesResponseGroundStation;
    /**
     * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
     */
    readonly id: string;
    /**
     * The geo-location where the resource lives
     */
    readonly location: string;
    /**
     * The name of the resource
     */
    readonly name: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: outputs.orbital.v20240301.SystemDataResponse;
    /**
     * Resource tags.
     */
    readonly tags?: {[key: string]: string};
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
    /**
     * The VLAN ID for the L2 connection.
     */
    readonly vlanId: number;
}
/**
 * Gets the specified L2 connection in a specified resource group.
 */
export function getL2ConnectionOutput(args: GetL2ConnectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetL2ConnectionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure-native:orbital/v20240301:getL2Connection", {
        "l2ConnectionName": args.l2ConnectionName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface GetL2ConnectionOutputArgs {
    /**
     * L2 Connection name.
     */
    l2ConnectionName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
}
