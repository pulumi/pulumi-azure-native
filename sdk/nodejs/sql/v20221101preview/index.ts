// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { BackupShortTermRetentionPolicyArgs } from "./backupShortTermRetentionPolicy";
export type BackupShortTermRetentionPolicy = import("./backupShortTermRetentionPolicy").BackupShortTermRetentionPolicy;
export const BackupShortTermRetentionPolicy: typeof import("./backupShortTermRetentionPolicy").BackupShortTermRetentionPolicy = null as any;
utilities.lazyLoad(exports, ["BackupShortTermRetentionPolicy"], () => require("./backupShortTermRetentionPolicy"));

export { DataMaskingPolicyArgs } from "./dataMaskingPolicy";
export type DataMaskingPolicy = import("./dataMaskingPolicy").DataMaskingPolicy;
export const DataMaskingPolicy: typeof import("./dataMaskingPolicy").DataMaskingPolicy = null as any;
utilities.lazyLoad(exports, ["DataMaskingPolicy"], () => require("./dataMaskingPolicy"));

export { DatabaseArgs } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DatabaseAdvisorArgs } from "./databaseAdvisor";
export type DatabaseAdvisor = import("./databaseAdvisor").DatabaseAdvisor;
export const DatabaseAdvisor: typeof import("./databaseAdvisor").DatabaseAdvisor = null as any;
utilities.lazyLoad(exports, ["DatabaseAdvisor"], () => require("./databaseAdvisor"));

export { DatabaseBlobAuditingPolicyArgs } from "./databaseBlobAuditingPolicy";
export type DatabaseBlobAuditingPolicy = import("./databaseBlobAuditingPolicy").DatabaseBlobAuditingPolicy;
export const DatabaseBlobAuditingPolicy: typeof import("./databaseBlobAuditingPolicy").DatabaseBlobAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["DatabaseBlobAuditingPolicy"], () => require("./databaseBlobAuditingPolicy"));

export { DatabaseSecurityAlertPolicyArgs } from "./databaseSecurityAlertPolicy";
export type DatabaseSecurityAlertPolicy = import("./databaseSecurityAlertPolicy").DatabaseSecurityAlertPolicy;
export const DatabaseSecurityAlertPolicy: typeof import("./databaseSecurityAlertPolicy").DatabaseSecurityAlertPolicy = null as any;
utilities.lazyLoad(exports, ["DatabaseSecurityAlertPolicy"], () => require("./databaseSecurityAlertPolicy"));

export { DatabaseSqlVulnerabilityAssessmentRuleBaselineArgs } from "./databaseSqlVulnerabilityAssessmentRuleBaseline";
export type DatabaseSqlVulnerabilityAssessmentRuleBaseline = import("./databaseSqlVulnerabilityAssessmentRuleBaseline").DatabaseSqlVulnerabilityAssessmentRuleBaseline;
export const DatabaseSqlVulnerabilityAssessmentRuleBaseline: typeof import("./databaseSqlVulnerabilityAssessmentRuleBaseline").DatabaseSqlVulnerabilityAssessmentRuleBaseline = null as any;
utilities.lazyLoad(exports, ["DatabaseSqlVulnerabilityAssessmentRuleBaseline"], () => require("./databaseSqlVulnerabilityAssessmentRuleBaseline"));

export { DatabaseVulnerabilityAssessmentArgs } from "./databaseVulnerabilityAssessment";
export type DatabaseVulnerabilityAssessment = import("./databaseVulnerabilityAssessment").DatabaseVulnerabilityAssessment;
export const DatabaseVulnerabilityAssessment: typeof import("./databaseVulnerabilityAssessment").DatabaseVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["DatabaseVulnerabilityAssessment"], () => require("./databaseVulnerabilityAssessment"));

export { DatabaseVulnerabilityAssessmentRuleBaselineArgs } from "./databaseVulnerabilityAssessmentRuleBaseline";
export type DatabaseVulnerabilityAssessmentRuleBaseline = import("./databaseVulnerabilityAssessmentRuleBaseline").DatabaseVulnerabilityAssessmentRuleBaseline;
export const DatabaseVulnerabilityAssessmentRuleBaseline: typeof import("./databaseVulnerabilityAssessmentRuleBaseline").DatabaseVulnerabilityAssessmentRuleBaseline = null as any;
utilities.lazyLoad(exports, ["DatabaseVulnerabilityAssessmentRuleBaseline"], () => require("./databaseVulnerabilityAssessmentRuleBaseline"));

export { DistributedAvailabilityGroupArgs } from "./distributedAvailabilityGroup";
export type DistributedAvailabilityGroup = import("./distributedAvailabilityGroup").DistributedAvailabilityGroup;
export const DistributedAvailabilityGroup: typeof import("./distributedAvailabilityGroup").DistributedAvailabilityGroup = null as any;
utilities.lazyLoad(exports, ["DistributedAvailabilityGroup"], () => require("./distributedAvailabilityGroup"));

export { ElasticPoolArgs } from "./elasticPool";
export type ElasticPool = import("./elasticPool").ElasticPool;
export const ElasticPool: typeof import("./elasticPool").ElasticPool = null as any;
utilities.lazyLoad(exports, ["ElasticPool"], () => require("./elasticPool"));

export { EncryptionProtectorArgs } from "./encryptionProtector";
export type EncryptionProtector = import("./encryptionProtector").EncryptionProtector;
export const EncryptionProtector: typeof import("./encryptionProtector").EncryptionProtector = null as any;
utilities.lazyLoad(exports, ["EncryptionProtector"], () => require("./encryptionProtector"));

export { ExtendedDatabaseBlobAuditingPolicyArgs } from "./extendedDatabaseBlobAuditingPolicy";
export type ExtendedDatabaseBlobAuditingPolicy = import("./extendedDatabaseBlobAuditingPolicy").ExtendedDatabaseBlobAuditingPolicy;
export const ExtendedDatabaseBlobAuditingPolicy: typeof import("./extendedDatabaseBlobAuditingPolicy").ExtendedDatabaseBlobAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["ExtendedDatabaseBlobAuditingPolicy"], () => require("./extendedDatabaseBlobAuditingPolicy"));

export { ExtendedServerBlobAuditingPolicyArgs } from "./extendedServerBlobAuditingPolicy";
export type ExtendedServerBlobAuditingPolicy = import("./extendedServerBlobAuditingPolicy").ExtendedServerBlobAuditingPolicy;
export const ExtendedServerBlobAuditingPolicy: typeof import("./extendedServerBlobAuditingPolicy").ExtendedServerBlobAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["ExtendedServerBlobAuditingPolicy"], () => require("./extendedServerBlobAuditingPolicy"));

export { FailoverGroupArgs } from "./failoverGroup";
export type FailoverGroup = import("./failoverGroup").FailoverGroup;
export const FailoverGroup: typeof import("./failoverGroup").FailoverGroup = null as any;
utilities.lazyLoad(exports, ["FailoverGroup"], () => require("./failoverGroup"));

export { FirewallRuleArgs } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GeoBackupPolicyArgs } from "./geoBackupPolicy";
export type GeoBackupPolicy = import("./geoBackupPolicy").GeoBackupPolicy;
export const GeoBackupPolicy: typeof import("./geoBackupPolicy").GeoBackupPolicy = null as any;
utilities.lazyLoad(exports, ["GeoBackupPolicy"], () => require("./geoBackupPolicy"));

export { GetBackupShortTermRetentionPolicyArgs, GetBackupShortTermRetentionPolicyResult, GetBackupShortTermRetentionPolicyOutputArgs } from "./getBackupShortTermRetentionPolicy";
export const getBackupShortTermRetentionPolicy: typeof import("./getBackupShortTermRetentionPolicy").getBackupShortTermRetentionPolicy = null as any;
export const getBackupShortTermRetentionPolicyOutput: typeof import("./getBackupShortTermRetentionPolicy").getBackupShortTermRetentionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBackupShortTermRetentionPolicy","getBackupShortTermRetentionPolicyOutput"], () => require("./getBackupShortTermRetentionPolicy"));

export { GetDataMaskingPolicyArgs, GetDataMaskingPolicyResult, GetDataMaskingPolicyOutputArgs } from "./getDataMaskingPolicy";
export const getDataMaskingPolicy: typeof import("./getDataMaskingPolicy").getDataMaskingPolicy = null as any;
export const getDataMaskingPolicyOutput: typeof import("./getDataMaskingPolicy").getDataMaskingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataMaskingPolicy","getDataMaskingPolicyOutput"], () => require("./getDataMaskingPolicy"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDatabaseAdvisorArgs, GetDatabaseAdvisorResult, GetDatabaseAdvisorOutputArgs } from "./getDatabaseAdvisor";
export const getDatabaseAdvisor: typeof import("./getDatabaseAdvisor").getDatabaseAdvisor = null as any;
export const getDatabaseAdvisorOutput: typeof import("./getDatabaseAdvisor").getDatabaseAdvisorOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAdvisor","getDatabaseAdvisorOutput"], () => require("./getDatabaseAdvisor"));

export { GetDatabaseBlobAuditingPolicyArgs, GetDatabaseBlobAuditingPolicyResult, GetDatabaseBlobAuditingPolicyOutputArgs } from "./getDatabaseBlobAuditingPolicy";
export const getDatabaseBlobAuditingPolicy: typeof import("./getDatabaseBlobAuditingPolicy").getDatabaseBlobAuditingPolicy = null as any;
export const getDatabaseBlobAuditingPolicyOutput: typeof import("./getDatabaseBlobAuditingPolicy").getDatabaseBlobAuditingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseBlobAuditingPolicy","getDatabaseBlobAuditingPolicyOutput"], () => require("./getDatabaseBlobAuditingPolicy"));

export { GetDatabaseSecurityAlertPolicyArgs, GetDatabaseSecurityAlertPolicyResult, GetDatabaseSecurityAlertPolicyOutputArgs } from "./getDatabaseSecurityAlertPolicy";
export const getDatabaseSecurityAlertPolicy: typeof import("./getDatabaseSecurityAlertPolicy").getDatabaseSecurityAlertPolicy = null as any;
export const getDatabaseSecurityAlertPolicyOutput: typeof import("./getDatabaseSecurityAlertPolicy").getDatabaseSecurityAlertPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseSecurityAlertPolicy","getDatabaseSecurityAlertPolicyOutput"], () => require("./getDatabaseSecurityAlertPolicy"));

export { GetDatabaseSqlVulnerabilityAssessmentRuleBaselineArgs, GetDatabaseSqlVulnerabilityAssessmentRuleBaselineResult, GetDatabaseSqlVulnerabilityAssessmentRuleBaselineOutputArgs } from "./getDatabaseSqlVulnerabilityAssessmentRuleBaseline";
export const getDatabaseSqlVulnerabilityAssessmentRuleBaseline: typeof import("./getDatabaseSqlVulnerabilityAssessmentRuleBaseline").getDatabaseSqlVulnerabilityAssessmentRuleBaseline = null as any;
export const getDatabaseSqlVulnerabilityAssessmentRuleBaselineOutput: typeof import("./getDatabaseSqlVulnerabilityAssessmentRuleBaseline").getDatabaseSqlVulnerabilityAssessmentRuleBaselineOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseSqlVulnerabilityAssessmentRuleBaseline","getDatabaseSqlVulnerabilityAssessmentRuleBaselineOutput"], () => require("./getDatabaseSqlVulnerabilityAssessmentRuleBaseline"));

export { GetDatabaseVulnerabilityAssessmentArgs, GetDatabaseVulnerabilityAssessmentResult, GetDatabaseVulnerabilityAssessmentOutputArgs } from "./getDatabaseVulnerabilityAssessment";
export const getDatabaseVulnerabilityAssessment: typeof import("./getDatabaseVulnerabilityAssessment").getDatabaseVulnerabilityAssessment = null as any;
export const getDatabaseVulnerabilityAssessmentOutput: typeof import("./getDatabaseVulnerabilityAssessment").getDatabaseVulnerabilityAssessmentOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVulnerabilityAssessment","getDatabaseVulnerabilityAssessmentOutput"], () => require("./getDatabaseVulnerabilityAssessment"));

export { GetDatabaseVulnerabilityAssessmentRuleBaselineArgs, GetDatabaseVulnerabilityAssessmentRuleBaselineResult, GetDatabaseVulnerabilityAssessmentRuleBaselineOutputArgs } from "./getDatabaseVulnerabilityAssessmentRuleBaseline";
export const getDatabaseVulnerabilityAssessmentRuleBaseline: typeof import("./getDatabaseVulnerabilityAssessmentRuleBaseline").getDatabaseVulnerabilityAssessmentRuleBaseline = null as any;
export const getDatabaseVulnerabilityAssessmentRuleBaselineOutput: typeof import("./getDatabaseVulnerabilityAssessmentRuleBaseline").getDatabaseVulnerabilityAssessmentRuleBaselineOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVulnerabilityAssessmentRuleBaseline","getDatabaseVulnerabilityAssessmentRuleBaselineOutput"], () => require("./getDatabaseVulnerabilityAssessmentRuleBaseline"));

export { GetDistributedAvailabilityGroupArgs, GetDistributedAvailabilityGroupResult, GetDistributedAvailabilityGroupOutputArgs } from "./getDistributedAvailabilityGroup";
export const getDistributedAvailabilityGroup: typeof import("./getDistributedAvailabilityGroup").getDistributedAvailabilityGroup = null as any;
export const getDistributedAvailabilityGroupOutput: typeof import("./getDistributedAvailabilityGroup").getDistributedAvailabilityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDistributedAvailabilityGroup","getDistributedAvailabilityGroupOutput"], () => require("./getDistributedAvailabilityGroup"));

export { GetElasticPoolArgs, GetElasticPoolResult, GetElasticPoolOutputArgs } from "./getElasticPool";
export const getElasticPool: typeof import("./getElasticPool").getElasticPool = null as any;
export const getElasticPoolOutput: typeof import("./getElasticPool").getElasticPoolOutput = null as any;
utilities.lazyLoad(exports, ["getElasticPool","getElasticPoolOutput"], () => require("./getElasticPool"));

export { GetEncryptionProtectorArgs, GetEncryptionProtectorResult, GetEncryptionProtectorOutputArgs } from "./getEncryptionProtector";
export const getEncryptionProtector: typeof import("./getEncryptionProtector").getEncryptionProtector = null as any;
export const getEncryptionProtectorOutput: typeof import("./getEncryptionProtector").getEncryptionProtectorOutput = null as any;
utilities.lazyLoad(exports, ["getEncryptionProtector","getEncryptionProtectorOutput"], () => require("./getEncryptionProtector"));

export { GetExtendedDatabaseBlobAuditingPolicyArgs, GetExtendedDatabaseBlobAuditingPolicyResult, GetExtendedDatabaseBlobAuditingPolicyOutputArgs } from "./getExtendedDatabaseBlobAuditingPolicy";
export const getExtendedDatabaseBlobAuditingPolicy: typeof import("./getExtendedDatabaseBlobAuditingPolicy").getExtendedDatabaseBlobAuditingPolicy = null as any;
export const getExtendedDatabaseBlobAuditingPolicyOutput: typeof import("./getExtendedDatabaseBlobAuditingPolicy").getExtendedDatabaseBlobAuditingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getExtendedDatabaseBlobAuditingPolicy","getExtendedDatabaseBlobAuditingPolicyOutput"], () => require("./getExtendedDatabaseBlobAuditingPolicy"));

export { GetExtendedServerBlobAuditingPolicyArgs, GetExtendedServerBlobAuditingPolicyResult, GetExtendedServerBlobAuditingPolicyOutputArgs } from "./getExtendedServerBlobAuditingPolicy";
export const getExtendedServerBlobAuditingPolicy: typeof import("./getExtendedServerBlobAuditingPolicy").getExtendedServerBlobAuditingPolicy = null as any;
export const getExtendedServerBlobAuditingPolicyOutput: typeof import("./getExtendedServerBlobAuditingPolicy").getExtendedServerBlobAuditingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getExtendedServerBlobAuditingPolicy","getExtendedServerBlobAuditingPolicyOutput"], () => require("./getExtendedServerBlobAuditingPolicy"));

export { GetFailoverGroupArgs, GetFailoverGroupResult, GetFailoverGroupOutputArgs } from "./getFailoverGroup";
export const getFailoverGroup: typeof import("./getFailoverGroup").getFailoverGroup = null as any;
export const getFailoverGroupOutput: typeof import("./getFailoverGroup").getFailoverGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFailoverGroup","getFailoverGroupOutput"], () => require("./getFailoverGroup"));

export { GetFirewallRuleArgs, GetFirewallRuleResult, GetFirewallRuleOutputArgs } from "./getFirewallRule";
export const getFirewallRule: typeof import("./getFirewallRule").getFirewallRule = null as any;
export const getFirewallRuleOutput: typeof import("./getFirewallRule").getFirewallRuleOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallRule","getFirewallRuleOutput"], () => require("./getFirewallRule"));

export { GetGeoBackupPolicyArgs, GetGeoBackupPolicyResult, GetGeoBackupPolicyOutputArgs } from "./getGeoBackupPolicy";
export const getGeoBackupPolicy: typeof import("./getGeoBackupPolicy").getGeoBackupPolicy = null as any;
export const getGeoBackupPolicyOutput: typeof import("./getGeoBackupPolicy").getGeoBackupPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getGeoBackupPolicy","getGeoBackupPolicyOutput"], () => require("./getGeoBackupPolicy"));

export { GetIPv6FirewallRuleArgs, GetIPv6FirewallRuleResult, GetIPv6FirewallRuleOutputArgs } from "./getIPv6FirewallRule";
export const getIPv6FirewallRule: typeof import("./getIPv6FirewallRule").getIPv6FirewallRule = null as any;
export const getIPv6FirewallRuleOutput: typeof import("./getIPv6FirewallRule").getIPv6FirewallRuleOutput = null as any;
utilities.lazyLoad(exports, ["getIPv6FirewallRule","getIPv6FirewallRuleOutput"], () => require("./getIPv6FirewallRule"));

export { GetInstanceFailoverGroupArgs, GetInstanceFailoverGroupResult, GetInstanceFailoverGroupOutputArgs } from "./getInstanceFailoverGroup";
export const getInstanceFailoverGroup: typeof import("./getInstanceFailoverGroup").getInstanceFailoverGroup = null as any;
export const getInstanceFailoverGroupOutput: typeof import("./getInstanceFailoverGroup").getInstanceFailoverGroupOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceFailoverGroup","getInstanceFailoverGroupOutput"], () => require("./getInstanceFailoverGroup"));

export { GetInstancePoolArgs, GetInstancePoolResult, GetInstancePoolOutputArgs } from "./getInstancePool";
export const getInstancePool: typeof import("./getInstancePool").getInstancePool = null as any;
export const getInstancePoolOutput: typeof import("./getInstancePool").getInstancePoolOutput = null as any;
utilities.lazyLoad(exports, ["getInstancePool","getInstancePoolOutput"], () => require("./getInstancePool"));

export { GetJobArgs, GetJobResult, GetJobOutputArgs } from "./getJob";
export const getJob: typeof import("./getJob").getJob = null as any;
export const getJobOutput: typeof import("./getJob").getJobOutput = null as any;
utilities.lazyLoad(exports, ["getJob","getJobOutput"], () => require("./getJob"));

export { GetJobAgentArgs, GetJobAgentResult, GetJobAgentOutputArgs } from "./getJobAgent";
export const getJobAgent: typeof import("./getJobAgent").getJobAgent = null as any;
export const getJobAgentOutput: typeof import("./getJobAgent").getJobAgentOutput = null as any;
utilities.lazyLoad(exports, ["getJobAgent","getJobAgentOutput"], () => require("./getJobAgent"));

export { GetJobCredentialArgs, GetJobCredentialResult, GetJobCredentialOutputArgs } from "./getJobCredential";
export const getJobCredential: typeof import("./getJobCredential").getJobCredential = null as any;
export const getJobCredentialOutput: typeof import("./getJobCredential").getJobCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getJobCredential","getJobCredentialOutput"], () => require("./getJobCredential"));

export { GetJobStepArgs, GetJobStepResult, GetJobStepOutputArgs } from "./getJobStep";
export const getJobStep: typeof import("./getJobStep").getJobStep = null as any;
export const getJobStepOutput: typeof import("./getJobStep").getJobStepOutput = null as any;
utilities.lazyLoad(exports, ["getJobStep","getJobStepOutput"], () => require("./getJobStep"));

export { GetJobTargetGroupArgs, GetJobTargetGroupResult, GetJobTargetGroupOutputArgs } from "./getJobTargetGroup";
export const getJobTargetGroup: typeof import("./getJobTargetGroup").getJobTargetGroup = null as any;
export const getJobTargetGroupOutput: typeof import("./getJobTargetGroup").getJobTargetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getJobTargetGroup","getJobTargetGroupOutput"], () => require("./getJobTargetGroup"));

export { GetLongTermRetentionPolicyArgs, GetLongTermRetentionPolicyResult, GetLongTermRetentionPolicyOutputArgs } from "./getLongTermRetentionPolicy";
export const getLongTermRetentionPolicy: typeof import("./getLongTermRetentionPolicy").getLongTermRetentionPolicy = null as any;
export const getLongTermRetentionPolicyOutput: typeof import("./getLongTermRetentionPolicy").getLongTermRetentionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLongTermRetentionPolicy","getLongTermRetentionPolicyOutput"], () => require("./getLongTermRetentionPolicy"));

export { GetManagedDatabaseArgs, GetManagedDatabaseResult, GetManagedDatabaseOutputArgs } from "./getManagedDatabase";
export const getManagedDatabase: typeof import("./getManagedDatabase").getManagedDatabase = null as any;
export const getManagedDatabaseOutput: typeof import("./getManagedDatabase").getManagedDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getManagedDatabase","getManagedDatabaseOutput"], () => require("./getManagedDatabase"));

export { GetManagedDatabaseSensitivityLabelArgs, GetManagedDatabaseSensitivityLabelResult, GetManagedDatabaseSensitivityLabelOutputArgs } from "./getManagedDatabaseSensitivityLabel";
export const getManagedDatabaseSensitivityLabel: typeof import("./getManagedDatabaseSensitivityLabel").getManagedDatabaseSensitivityLabel = null as any;
export const getManagedDatabaseSensitivityLabelOutput: typeof import("./getManagedDatabaseSensitivityLabel").getManagedDatabaseSensitivityLabelOutput = null as any;
utilities.lazyLoad(exports, ["getManagedDatabaseSensitivityLabel","getManagedDatabaseSensitivityLabelOutput"], () => require("./getManagedDatabaseSensitivityLabel"));

export { GetManagedDatabaseVulnerabilityAssessmentArgs, GetManagedDatabaseVulnerabilityAssessmentResult, GetManagedDatabaseVulnerabilityAssessmentOutputArgs } from "./getManagedDatabaseVulnerabilityAssessment";
export const getManagedDatabaseVulnerabilityAssessment: typeof import("./getManagedDatabaseVulnerabilityAssessment").getManagedDatabaseVulnerabilityAssessment = null as any;
export const getManagedDatabaseVulnerabilityAssessmentOutput: typeof import("./getManagedDatabaseVulnerabilityAssessment").getManagedDatabaseVulnerabilityAssessmentOutput = null as any;
utilities.lazyLoad(exports, ["getManagedDatabaseVulnerabilityAssessment","getManagedDatabaseVulnerabilityAssessmentOutput"], () => require("./getManagedDatabaseVulnerabilityAssessment"));

export { GetManagedDatabaseVulnerabilityAssessmentRuleBaselineArgs, GetManagedDatabaseVulnerabilityAssessmentRuleBaselineResult, GetManagedDatabaseVulnerabilityAssessmentRuleBaselineOutputArgs } from "./getManagedDatabaseVulnerabilityAssessmentRuleBaseline";
export const getManagedDatabaseVulnerabilityAssessmentRuleBaseline: typeof import("./getManagedDatabaseVulnerabilityAssessmentRuleBaseline").getManagedDatabaseVulnerabilityAssessmentRuleBaseline = null as any;
export const getManagedDatabaseVulnerabilityAssessmentRuleBaselineOutput: typeof import("./getManagedDatabaseVulnerabilityAssessmentRuleBaseline").getManagedDatabaseVulnerabilityAssessmentRuleBaselineOutput = null as any;
utilities.lazyLoad(exports, ["getManagedDatabaseVulnerabilityAssessmentRuleBaseline","getManagedDatabaseVulnerabilityAssessmentRuleBaselineOutput"], () => require("./getManagedDatabaseVulnerabilityAssessmentRuleBaseline"));

export { GetManagedInstanceArgs, GetManagedInstanceResult, GetManagedInstanceOutputArgs } from "./getManagedInstance";
export const getManagedInstance: typeof import("./getManagedInstance").getManagedInstance = null as any;
export const getManagedInstanceOutput: typeof import("./getManagedInstance").getManagedInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstance","getManagedInstanceOutput"], () => require("./getManagedInstance"));

export { GetManagedInstanceAdministratorArgs, GetManagedInstanceAdministratorResult, GetManagedInstanceAdministratorOutputArgs } from "./getManagedInstanceAdministrator";
export const getManagedInstanceAdministrator: typeof import("./getManagedInstanceAdministrator").getManagedInstanceAdministrator = null as any;
export const getManagedInstanceAdministratorOutput: typeof import("./getManagedInstanceAdministrator").getManagedInstanceAdministratorOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceAdministrator","getManagedInstanceAdministratorOutput"], () => require("./getManagedInstanceAdministrator"));

export { GetManagedInstanceAzureADOnlyAuthenticationArgs, GetManagedInstanceAzureADOnlyAuthenticationResult, GetManagedInstanceAzureADOnlyAuthenticationOutputArgs } from "./getManagedInstanceAzureADOnlyAuthentication";
export const getManagedInstanceAzureADOnlyAuthentication: typeof import("./getManagedInstanceAzureADOnlyAuthentication").getManagedInstanceAzureADOnlyAuthentication = null as any;
export const getManagedInstanceAzureADOnlyAuthenticationOutput: typeof import("./getManagedInstanceAzureADOnlyAuthentication").getManagedInstanceAzureADOnlyAuthenticationOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceAzureADOnlyAuthentication","getManagedInstanceAzureADOnlyAuthenticationOutput"], () => require("./getManagedInstanceAzureADOnlyAuthentication"));

export { GetManagedInstanceKeyArgs, GetManagedInstanceKeyResult, GetManagedInstanceKeyOutputArgs } from "./getManagedInstanceKey";
export const getManagedInstanceKey: typeof import("./getManagedInstanceKey").getManagedInstanceKey = null as any;
export const getManagedInstanceKeyOutput: typeof import("./getManagedInstanceKey").getManagedInstanceKeyOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceKey","getManagedInstanceKeyOutput"], () => require("./getManagedInstanceKey"));

export { GetManagedInstanceLongTermRetentionPolicyArgs, GetManagedInstanceLongTermRetentionPolicyResult, GetManagedInstanceLongTermRetentionPolicyOutputArgs } from "./getManagedInstanceLongTermRetentionPolicy";
export const getManagedInstanceLongTermRetentionPolicy: typeof import("./getManagedInstanceLongTermRetentionPolicy").getManagedInstanceLongTermRetentionPolicy = null as any;
export const getManagedInstanceLongTermRetentionPolicyOutput: typeof import("./getManagedInstanceLongTermRetentionPolicy").getManagedInstanceLongTermRetentionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceLongTermRetentionPolicy","getManagedInstanceLongTermRetentionPolicyOutput"], () => require("./getManagedInstanceLongTermRetentionPolicy"));

export { GetManagedInstancePrivateEndpointConnectionArgs, GetManagedInstancePrivateEndpointConnectionResult, GetManagedInstancePrivateEndpointConnectionOutputArgs } from "./getManagedInstancePrivateEndpointConnection";
export const getManagedInstancePrivateEndpointConnection: typeof import("./getManagedInstancePrivateEndpointConnection").getManagedInstancePrivateEndpointConnection = null as any;
export const getManagedInstancePrivateEndpointConnectionOutput: typeof import("./getManagedInstancePrivateEndpointConnection").getManagedInstancePrivateEndpointConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstancePrivateEndpointConnection","getManagedInstancePrivateEndpointConnectionOutput"], () => require("./getManagedInstancePrivateEndpointConnection"));

export { GetManagedInstanceVulnerabilityAssessmentArgs, GetManagedInstanceVulnerabilityAssessmentResult, GetManagedInstanceVulnerabilityAssessmentOutputArgs } from "./getManagedInstanceVulnerabilityAssessment";
export const getManagedInstanceVulnerabilityAssessment: typeof import("./getManagedInstanceVulnerabilityAssessment").getManagedInstanceVulnerabilityAssessment = null as any;
export const getManagedInstanceVulnerabilityAssessmentOutput: typeof import("./getManagedInstanceVulnerabilityAssessment").getManagedInstanceVulnerabilityAssessmentOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceVulnerabilityAssessment","getManagedInstanceVulnerabilityAssessmentOutput"], () => require("./getManagedInstanceVulnerabilityAssessment"));

export { GetManagedServerDnsAliasArgs, GetManagedServerDnsAliasResult, GetManagedServerDnsAliasOutputArgs } from "./getManagedServerDnsAlias";
export const getManagedServerDnsAlias: typeof import("./getManagedServerDnsAlias").getManagedServerDnsAlias = null as any;
export const getManagedServerDnsAliasOutput: typeof import("./getManagedServerDnsAlias").getManagedServerDnsAliasOutput = null as any;
utilities.lazyLoad(exports, ["getManagedServerDnsAlias","getManagedServerDnsAliasOutput"], () => require("./getManagedServerDnsAlias"));

export { GetOutboundFirewallRuleArgs, GetOutboundFirewallRuleResult, GetOutboundFirewallRuleOutputArgs } from "./getOutboundFirewallRule";
export const getOutboundFirewallRule: typeof import("./getOutboundFirewallRule").getOutboundFirewallRule = null as any;
export const getOutboundFirewallRuleOutput: typeof import("./getOutboundFirewallRule").getOutboundFirewallRuleOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundFirewallRule","getOutboundFirewallRuleOutput"], () => require("./getOutboundFirewallRule"));

export { GetPrivateEndpointConnectionArgs, GetPrivateEndpointConnectionResult, GetPrivateEndpointConnectionOutputArgs } from "./getPrivateEndpointConnection";
export const getPrivateEndpointConnection: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnection = null as any;
export const getPrivateEndpointConnectionOutput: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateEndpointConnection","getPrivateEndpointConnectionOutput"], () => require("./getPrivateEndpointConnection"));

export { GetSensitivityLabelArgs, GetSensitivityLabelResult, GetSensitivityLabelOutputArgs } from "./getSensitivityLabel";
export const getSensitivityLabel: typeof import("./getSensitivityLabel").getSensitivityLabel = null as any;
export const getSensitivityLabelOutput: typeof import("./getSensitivityLabel").getSensitivityLabelOutput = null as any;
utilities.lazyLoad(exports, ["getSensitivityLabel","getSensitivityLabelOutput"], () => require("./getSensitivityLabel"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetServerAdvisorArgs, GetServerAdvisorResult, GetServerAdvisorOutputArgs } from "./getServerAdvisor";
export const getServerAdvisor: typeof import("./getServerAdvisor").getServerAdvisor = null as any;
export const getServerAdvisorOutput: typeof import("./getServerAdvisor").getServerAdvisorOutput = null as any;
utilities.lazyLoad(exports, ["getServerAdvisor","getServerAdvisorOutput"], () => require("./getServerAdvisor"));

export { GetServerAzureADAdministratorArgs, GetServerAzureADAdministratorResult, GetServerAzureADAdministratorOutputArgs } from "./getServerAzureADAdministrator";
export const getServerAzureADAdministrator: typeof import("./getServerAzureADAdministrator").getServerAzureADAdministrator = null as any;
export const getServerAzureADAdministratorOutput: typeof import("./getServerAzureADAdministrator").getServerAzureADAdministratorOutput = null as any;
utilities.lazyLoad(exports, ["getServerAzureADAdministrator","getServerAzureADAdministratorOutput"], () => require("./getServerAzureADAdministrator"));

export { GetServerAzureADOnlyAuthenticationArgs, GetServerAzureADOnlyAuthenticationResult, GetServerAzureADOnlyAuthenticationOutputArgs } from "./getServerAzureADOnlyAuthentication";
export const getServerAzureADOnlyAuthentication: typeof import("./getServerAzureADOnlyAuthentication").getServerAzureADOnlyAuthentication = null as any;
export const getServerAzureADOnlyAuthenticationOutput: typeof import("./getServerAzureADOnlyAuthentication").getServerAzureADOnlyAuthenticationOutput = null as any;
utilities.lazyLoad(exports, ["getServerAzureADOnlyAuthentication","getServerAzureADOnlyAuthenticationOutput"], () => require("./getServerAzureADOnlyAuthentication"));

export { GetServerBlobAuditingPolicyArgs, GetServerBlobAuditingPolicyResult, GetServerBlobAuditingPolicyOutputArgs } from "./getServerBlobAuditingPolicy";
export const getServerBlobAuditingPolicy: typeof import("./getServerBlobAuditingPolicy").getServerBlobAuditingPolicy = null as any;
export const getServerBlobAuditingPolicyOutput: typeof import("./getServerBlobAuditingPolicy").getServerBlobAuditingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServerBlobAuditingPolicy","getServerBlobAuditingPolicyOutput"], () => require("./getServerBlobAuditingPolicy"));

export { GetServerDnsAliasArgs, GetServerDnsAliasResult, GetServerDnsAliasOutputArgs } from "./getServerDnsAlias";
export const getServerDnsAlias: typeof import("./getServerDnsAlias").getServerDnsAlias = null as any;
export const getServerDnsAliasOutput: typeof import("./getServerDnsAlias").getServerDnsAliasOutput = null as any;
utilities.lazyLoad(exports, ["getServerDnsAlias","getServerDnsAliasOutput"], () => require("./getServerDnsAlias"));

export { GetServerKeyArgs, GetServerKeyResult, GetServerKeyOutputArgs } from "./getServerKey";
export const getServerKey: typeof import("./getServerKey").getServerKey = null as any;
export const getServerKeyOutput: typeof import("./getServerKey").getServerKeyOutput = null as any;
utilities.lazyLoad(exports, ["getServerKey","getServerKeyOutput"], () => require("./getServerKey"));

export { GetServerSecurityAlertPolicyArgs, GetServerSecurityAlertPolicyResult, GetServerSecurityAlertPolicyOutputArgs } from "./getServerSecurityAlertPolicy";
export const getServerSecurityAlertPolicy: typeof import("./getServerSecurityAlertPolicy").getServerSecurityAlertPolicy = null as any;
export const getServerSecurityAlertPolicyOutput: typeof import("./getServerSecurityAlertPolicy").getServerSecurityAlertPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServerSecurityAlertPolicy","getServerSecurityAlertPolicyOutput"], () => require("./getServerSecurityAlertPolicy"));

export { GetServerTrustCertificateArgs, GetServerTrustCertificateResult, GetServerTrustCertificateOutputArgs } from "./getServerTrustCertificate";
export const getServerTrustCertificate: typeof import("./getServerTrustCertificate").getServerTrustCertificate = null as any;
export const getServerTrustCertificateOutput: typeof import("./getServerTrustCertificate").getServerTrustCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getServerTrustCertificate","getServerTrustCertificateOutput"], () => require("./getServerTrustCertificate"));

export { GetServerTrustGroupArgs, GetServerTrustGroupResult, GetServerTrustGroupOutputArgs } from "./getServerTrustGroup";
export const getServerTrustGroup: typeof import("./getServerTrustGroup").getServerTrustGroup = null as any;
export const getServerTrustGroupOutput: typeof import("./getServerTrustGroup").getServerTrustGroupOutput = null as any;
utilities.lazyLoad(exports, ["getServerTrustGroup","getServerTrustGroupOutput"], () => require("./getServerTrustGroup"));

export { GetServerVulnerabilityAssessmentArgs, GetServerVulnerabilityAssessmentResult, GetServerVulnerabilityAssessmentOutputArgs } from "./getServerVulnerabilityAssessment";
export const getServerVulnerabilityAssessment: typeof import("./getServerVulnerabilityAssessment").getServerVulnerabilityAssessment = null as any;
export const getServerVulnerabilityAssessmentOutput: typeof import("./getServerVulnerabilityAssessment").getServerVulnerabilityAssessmentOutput = null as any;
utilities.lazyLoad(exports, ["getServerVulnerabilityAssessment","getServerVulnerabilityAssessmentOutput"], () => require("./getServerVulnerabilityAssessment"));

export { GetSqlVulnerabilityAssessmentRuleBaselineArgs, GetSqlVulnerabilityAssessmentRuleBaselineResult, GetSqlVulnerabilityAssessmentRuleBaselineOutputArgs } from "./getSqlVulnerabilityAssessmentRuleBaseline";
export const getSqlVulnerabilityAssessmentRuleBaseline: typeof import("./getSqlVulnerabilityAssessmentRuleBaseline").getSqlVulnerabilityAssessmentRuleBaseline = null as any;
export const getSqlVulnerabilityAssessmentRuleBaselineOutput: typeof import("./getSqlVulnerabilityAssessmentRuleBaseline").getSqlVulnerabilityAssessmentRuleBaselineOutput = null as any;
utilities.lazyLoad(exports, ["getSqlVulnerabilityAssessmentRuleBaseline","getSqlVulnerabilityAssessmentRuleBaselineOutput"], () => require("./getSqlVulnerabilityAssessmentRuleBaseline"));

export { GetSqlVulnerabilityAssessmentsSettingArgs, GetSqlVulnerabilityAssessmentsSettingResult, GetSqlVulnerabilityAssessmentsSettingOutputArgs } from "./getSqlVulnerabilityAssessmentsSetting";
export const getSqlVulnerabilityAssessmentsSetting: typeof import("./getSqlVulnerabilityAssessmentsSetting").getSqlVulnerabilityAssessmentsSetting = null as any;
export const getSqlVulnerabilityAssessmentsSettingOutput: typeof import("./getSqlVulnerabilityAssessmentsSetting").getSqlVulnerabilityAssessmentsSettingOutput = null as any;
utilities.lazyLoad(exports, ["getSqlVulnerabilityAssessmentsSetting","getSqlVulnerabilityAssessmentsSettingOutput"], () => require("./getSqlVulnerabilityAssessmentsSetting"));

export { GetStartStopManagedInstanceScheduleArgs, GetStartStopManagedInstanceScheduleResult, GetStartStopManagedInstanceScheduleOutputArgs } from "./getStartStopManagedInstanceSchedule";
export const getStartStopManagedInstanceSchedule: typeof import("./getStartStopManagedInstanceSchedule").getStartStopManagedInstanceSchedule = null as any;
export const getStartStopManagedInstanceScheduleOutput: typeof import("./getStartStopManagedInstanceSchedule").getStartStopManagedInstanceScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getStartStopManagedInstanceSchedule","getStartStopManagedInstanceScheduleOutput"], () => require("./getStartStopManagedInstanceSchedule"));

export { GetSyncAgentArgs, GetSyncAgentResult, GetSyncAgentOutputArgs } from "./getSyncAgent";
export const getSyncAgent: typeof import("./getSyncAgent").getSyncAgent = null as any;
export const getSyncAgentOutput: typeof import("./getSyncAgent").getSyncAgentOutput = null as any;
utilities.lazyLoad(exports, ["getSyncAgent","getSyncAgentOutput"], () => require("./getSyncAgent"));

export { GetSyncGroupArgs, GetSyncGroupResult, GetSyncGroupOutputArgs } from "./getSyncGroup";
export const getSyncGroup: typeof import("./getSyncGroup").getSyncGroup = null as any;
export const getSyncGroupOutput: typeof import("./getSyncGroup").getSyncGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSyncGroup","getSyncGroupOutput"], () => require("./getSyncGroup"));

export { GetSyncMemberArgs, GetSyncMemberResult, GetSyncMemberOutputArgs } from "./getSyncMember";
export const getSyncMember: typeof import("./getSyncMember").getSyncMember = null as any;
export const getSyncMemberOutput: typeof import("./getSyncMember").getSyncMemberOutput = null as any;
utilities.lazyLoad(exports, ["getSyncMember","getSyncMemberOutput"], () => require("./getSyncMember"));

export { GetTransparentDataEncryptionArgs, GetTransparentDataEncryptionResult, GetTransparentDataEncryptionOutputArgs } from "./getTransparentDataEncryption";
export const getTransparentDataEncryption: typeof import("./getTransparentDataEncryption").getTransparentDataEncryption = null as any;
export const getTransparentDataEncryptionOutput: typeof import("./getTransparentDataEncryption").getTransparentDataEncryptionOutput = null as any;
utilities.lazyLoad(exports, ["getTransparentDataEncryption","getTransparentDataEncryptionOutput"], () => require("./getTransparentDataEncryption"));

export { GetVirtualNetworkRuleArgs, GetVirtualNetworkRuleResult, GetVirtualNetworkRuleOutputArgs } from "./getVirtualNetworkRule";
export const getVirtualNetworkRule: typeof import("./getVirtualNetworkRule").getVirtualNetworkRule = null as any;
export const getVirtualNetworkRuleOutput: typeof import("./getVirtualNetworkRule").getVirtualNetworkRuleOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNetworkRule","getVirtualNetworkRuleOutput"], () => require("./getVirtualNetworkRule"));

export { GetWorkloadClassifierArgs, GetWorkloadClassifierResult, GetWorkloadClassifierOutputArgs } from "./getWorkloadClassifier";
export const getWorkloadClassifier: typeof import("./getWorkloadClassifier").getWorkloadClassifier = null as any;
export const getWorkloadClassifierOutput: typeof import("./getWorkloadClassifier").getWorkloadClassifierOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadClassifier","getWorkloadClassifierOutput"], () => require("./getWorkloadClassifier"));

export { GetWorkloadGroupArgs, GetWorkloadGroupResult, GetWorkloadGroupOutputArgs } from "./getWorkloadGroup";
export const getWorkloadGroup: typeof import("./getWorkloadGroup").getWorkloadGroup = null as any;
export const getWorkloadGroupOutput: typeof import("./getWorkloadGroup").getWorkloadGroupOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadGroup","getWorkloadGroupOutput"], () => require("./getWorkloadGroup"));

export { InstanceFailoverGroupArgs } from "./instanceFailoverGroup";
export type InstanceFailoverGroup = import("./instanceFailoverGroup").InstanceFailoverGroup;
export const InstanceFailoverGroup: typeof import("./instanceFailoverGroup").InstanceFailoverGroup = null as any;
utilities.lazyLoad(exports, ["InstanceFailoverGroup"], () => require("./instanceFailoverGroup"));

export { InstancePoolArgs } from "./instancePool";
export type InstancePool = import("./instancePool").InstancePool;
export const InstancePool: typeof import("./instancePool").InstancePool = null as any;
utilities.lazyLoad(exports, ["InstancePool"], () => require("./instancePool"));

export { IPv6FirewallRuleArgs } from "./ipv6FirewallRule";
export type IPv6FirewallRule = import("./ipv6FirewallRule").IPv6FirewallRule;
export const IPv6FirewallRule: typeof import("./ipv6FirewallRule").IPv6FirewallRule = null as any;
utilities.lazyLoad(exports, ["IPv6FirewallRule"], () => require("./ipv6FirewallRule"));

export { JobArgs } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { JobAgentArgs } from "./jobAgent";
export type JobAgent = import("./jobAgent").JobAgent;
export const JobAgent: typeof import("./jobAgent").JobAgent = null as any;
utilities.lazyLoad(exports, ["JobAgent"], () => require("./jobAgent"));

export { JobCredentialArgs } from "./jobCredential";
export type JobCredential = import("./jobCredential").JobCredential;
export const JobCredential: typeof import("./jobCredential").JobCredential = null as any;
utilities.lazyLoad(exports, ["JobCredential"], () => require("./jobCredential"));

export { JobStepArgs } from "./jobStep";
export type JobStep = import("./jobStep").JobStep;
export const JobStep: typeof import("./jobStep").JobStep = null as any;
utilities.lazyLoad(exports, ["JobStep"], () => require("./jobStep"));

export { JobTargetGroupArgs } from "./jobTargetGroup";
export type JobTargetGroup = import("./jobTargetGroup").JobTargetGroup;
export const JobTargetGroup: typeof import("./jobTargetGroup").JobTargetGroup = null as any;
utilities.lazyLoad(exports, ["JobTargetGroup"], () => require("./jobTargetGroup"));

export { LongTermRetentionPolicyArgs } from "./longTermRetentionPolicy";
export type LongTermRetentionPolicy = import("./longTermRetentionPolicy").LongTermRetentionPolicy;
export const LongTermRetentionPolicy: typeof import("./longTermRetentionPolicy").LongTermRetentionPolicy = null as any;
utilities.lazyLoad(exports, ["LongTermRetentionPolicy"], () => require("./longTermRetentionPolicy"));

export { ManagedDatabaseArgs } from "./managedDatabase";
export type ManagedDatabase = import("./managedDatabase").ManagedDatabase;
export const ManagedDatabase: typeof import("./managedDatabase").ManagedDatabase = null as any;
utilities.lazyLoad(exports, ["ManagedDatabase"], () => require("./managedDatabase"));

export { ManagedDatabaseSensitivityLabelArgs } from "./managedDatabaseSensitivityLabel";
export type ManagedDatabaseSensitivityLabel = import("./managedDatabaseSensitivityLabel").ManagedDatabaseSensitivityLabel;
export const ManagedDatabaseSensitivityLabel: typeof import("./managedDatabaseSensitivityLabel").ManagedDatabaseSensitivityLabel = null as any;
utilities.lazyLoad(exports, ["ManagedDatabaseSensitivityLabel"], () => require("./managedDatabaseSensitivityLabel"));

export { ManagedDatabaseVulnerabilityAssessmentArgs } from "./managedDatabaseVulnerabilityAssessment";
export type ManagedDatabaseVulnerabilityAssessment = import("./managedDatabaseVulnerabilityAssessment").ManagedDatabaseVulnerabilityAssessment;
export const ManagedDatabaseVulnerabilityAssessment: typeof import("./managedDatabaseVulnerabilityAssessment").ManagedDatabaseVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["ManagedDatabaseVulnerabilityAssessment"], () => require("./managedDatabaseVulnerabilityAssessment"));

export { ManagedDatabaseVulnerabilityAssessmentRuleBaselineArgs } from "./managedDatabaseVulnerabilityAssessmentRuleBaseline";
export type ManagedDatabaseVulnerabilityAssessmentRuleBaseline = import("./managedDatabaseVulnerabilityAssessmentRuleBaseline").ManagedDatabaseVulnerabilityAssessmentRuleBaseline;
export const ManagedDatabaseVulnerabilityAssessmentRuleBaseline: typeof import("./managedDatabaseVulnerabilityAssessmentRuleBaseline").ManagedDatabaseVulnerabilityAssessmentRuleBaseline = null as any;
utilities.lazyLoad(exports, ["ManagedDatabaseVulnerabilityAssessmentRuleBaseline"], () => require("./managedDatabaseVulnerabilityAssessmentRuleBaseline"));

export { ManagedInstanceArgs } from "./managedInstance";
export type ManagedInstance = import("./managedInstance").ManagedInstance;
export const ManagedInstance: typeof import("./managedInstance").ManagedInstance = null as any;
utilities.lazyLoad(exports, ["ManagedInstance"], () => require("./managedInstance"));

export { ManagedInstanceAdministratorArgs } from "./managedInstanceAdministrator";
export type ManagedInstanceAdministrator = import("./managedInstanceAdministrator").ManagedInstanceAdministrator;
export const ManagedInstanceAdministrator: typeof import("./managedInstanceAdministrator").ManagedInstanceAdministrator = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceAdministrator"], () => require("./managedInstanceAdministrator"));

export { ManagedInstanceAzureADOnlyAuthenticationArgs } from "./managedInstanceAzureADOnlyAuthentication";
export type ManagedInstanceAzureADOnlyAuthentication = import("./managedInstanceAzureADOnlyAuthentication").ManagedInstanceAzureADOnlyAuthentication;
export const ManagedInstanceAzureADOnlyAuthentication: typeof import("./managedInstanceAzureADOnlyAuthentication").ManagedInstanceAzureADOnlyAuthentication = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceAzureADOnlyAuthentication"], () => require("./managedInstanceAzureADOnlyAuthentication"));

export { ManagedInstanceKeyArgs } from "./managedInstanceKey";
export type ManagedInstanceKey = import("./managedInstanceKey").ManagedInstanceKey;
export const ManagedInstanceKey: typeof import("./managedInstanceKey").ManagedInstanceKey = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceKey"], () => require("./managedInstanceKey"));

export { ManagedInstanceLongTermRetentionPolicyArgs } from "./managedInstanceLongTermRetentionPolicy";
export type ManagedInstanceLongTermRetentionPolicy = import("./managedInstanceLongTermRetentionPolicy").ManagedInstanceLongTermRetentionPolicy;
export const ManagedInstanceLongTermRetentionPolicy: typeof import("./managedInstanceLongTermRetentionPolicy").ManagedInstanceLongTermRetentionPolicy = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceLongTermRetentionPolicy"], () => require("./managedInstanceLongTermRetentionPolicy"));

export { ManagedInstancePrivateEndpointConnectionArgs } from "./managedInstancePrivateEndpointConnection";
export type ManagedInstancePrivateEndpointConnection = import("./managedInstancePrivateEndpointConnection").ManagedInstancePrivateEndpointConnection;
export const ManagedInstancePrivateEndpointConnection: typeof import("./managedInstancePrivateEndpointConnection").ManagedInstancePrivateEndpointConnection = null as any;
utilities.lazyLoad(exports, ["ManagedInstancePrivateEndpointConnection"], () => require("./managedInstancePrivateEndpointConnection"));

export { ManagedInstanceVulnerabilityAssessmentArgs } from "./managedInstanceVulnerabilityAssessment";
export type ManagedInstanceVulnerabilityAssessment = import("./managedInstanceVulnerabilityAssessment").ManagedInstanceVulnerabilityAssessment;
export const ManagedInstanceVulnerabilityAssessment: typeof import("./managedInstanceVulnerabilityAssessment").ManagedInstanceVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceVulnerabilityAssessment"], () => require("./managedInstanceVulnerabilityAssessment"));

export { ManagedServerDnsAliasArgs } from "./managedServerDnsAlias";
export type ManagedServerDnsAlias = import("./managedServerDnsAlias").ManagedServerDnsAlias;
export const ManagedServerDnsAlias: typeof import("./managedServerDnsAlias").ManagedServerDnsAlias = null as any;
utilities.lazyLoad(exports, ["ManagedServerDnsAlias"], () => require("./managedServerDnsAlias"));

export { OutboundFirewallRuleArgs } from "./outboundFirewallRule";
export type OutboundFirewallRule = import("./outboundFirewallRule").OutboundFirewallRule;
export const OutboundFirewallRule: typeof import("./outboundFirewallRule").OutboundFirewallRule = null as any;
utilities.lazyLoad(exports, ["OutboundFirewallRule"], () => require("./outboundFirewallRule"));

export { PrivateEndpointConnectionArgs } from "./privateEndpointConnection";
export type PrivateEndpointConnection = import("./privateEndpointConnection").PrivateEndpointConnection;
export const PrivateEndpointConnection: typeof import("./privateEndpointConnection").PrivateEndpointConnection = null as any;
utilities.lazyLoad(exports, ["PrivateEndpointConnection"], () => require("./privateEndpointConnection"));

export { SensitivityLabelArgs } from "./sensitivityLabel";
export type SensitivityLabel = import("./sensitivityLabel").SensitivityLabel;
export const SensitivityLabel: typeof import("./sensitivityLabel").SensitivityLabel = null as any;
utilities.lazyLoad(exports, ["SensitivityLabel"], () => require("./sensitivityLabel"));

export { ServerArgs } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { ServerAdvisorArgs } from "./serverAdvisor";
export type ServerAdvisor = import("./serverAdvisor").ServerAdvisor;
export const ServerAdvisor: typeof import("./serverAdvisor").ServerAdvisor = null as any;
utilities.lazyLoad(exports, ["ServerAdvisor"], () => require("./serverAdvisor"));

export { ServerAzureADAdministratorArgs } from "./serverAzureADAdministrator";
export type ServerAzureADAdministrator = import("./serverAzureADAdministrator").ServerAzureADAdministrator;
export const ServerAzureADAdministrator: typeof import("./serverAzureADAdministrator").ServerAzureADAdministrator = null as any;
utilities.lazyLoad(exports, ["ServerAzureADAdministrator"], () => require("./serverAzureADAdministrator"));

export { ServerAzureADOnlyAuthenticationArgs } from "./serverAzureADOnlyAuthentication";
export type ServerAzureADOnlyAuthentication = import("./serverAzureADOnlyAuthentication").ServerAzureADOnlyAuthentication;
export const ServerAzureADOnlyAuthentication: typeof import("./serverAzureADOnlyAuthentication").ServerAzureADOnlyAuthentication = null as any;
utilities.lazyLoad(exports, ["ServerAzureADOnlyAuthentication"], () => require("./serverAzureADOnlyAuthentication"));

export { ServerBlobAuditingPolicyArgs } from "./serverBlobAuditingPolicy";
export type ServerBlobAuditingPolicy = import("./serverBlobAuditingPolicy").ServerBlobAuditingPolicy;
export const ServerBlobAuditingPolicy: typeof import("./serverBlobAuditingPolicy").ServerBlobAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["ServerBlobAuditingPolicy"], () => require("./serverBlobAuditingPolicy"));

export { ServerDnsAliasArgs } from "./serverDnsAlias";
export type ServerDnsAlias = import("./serverDnsAlias").ServerDnsAlias;
export const ServerDnsAlias: typeof import("./serverDnsAlias").ServerDnsAlias = null as any;
utilities.lazyLoad(exports, ["ServerDnsAlias"], () => require("./serverDnsAlias"));

export { ServerKeyArgs } from "./serverKey";
export type ServerKey = import("./serverKey").ServerKey;
export const ServerKey: typeof import("./serverKey").ServerKey = null as any;
utilities.lazyLoad(exports, ["ServerKey"], () => require("./serverKey"));

export { ServerSecurityAlertPolicyArgs } from "./serverSecurityAlertPolicy";
export type ServerSecurityAlertPolicy = import("./serverSecurityAlertPolicy").ServerSecurityAlertPolicy;
export const ServerSecurityAlertPolicy: typeof import("./serverSecurityAlertPolicy").ServerSecurityAlertPolicy = null as any;
utilities.lazyLoad(exports, ["ServerSecurityAlertPolicy"], () => require("./serverSecurityAlertPolicy"));

export { ServerTrustCertificateArgs } from "./serverTrustCertificate";
export type ServerTrustCertificate = import("./serverTrustCertificate").ServerTrustCertificate;
export const ServerTrustCertificate: typeof import("./serverTrustCertificate").ServerTrustCertificate = null as any;
utilities.lazyLoad(exports, ["ServerTrustCertificate"], () => require("./serverTrustCertificate"));

export { ServerTrustGroupArgs } from "./serverTrustGroup";
export type ServerTrustGroup = import("./serverTrustGroup").ServerTrustGroup;
export const ServerTrustGroup: typeof import("./serverTrustGroup").ServerTrustGroup = null as any;
utilities.lazyLoad(exports, ["ServerTrustGroup"], () => require("./serverTrustGroup"));

export { ServerVulnerabilityAssessmentArgs } from "./serverVulnerabilityAssessment";
export type ServerVulnerabilityAssessment = import("./serverVulnerabilityAssessment").ServerVulnerabilityAssessment;
export const ServerVulnerabilityAssessment: typeof import("./serverVulnerabilityAssessment").ServerVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["ServerVulnerabilityAssessment"], () => require("./serverVulnerabilityAssessment"));

export { SqlVulnerabilityAssessmentRuleBaselineArgs } from "./sqlVulnerabilityAssessmentRuleBaseline";
export type SqlVulnerabilityAssessmentRuleBaseline = import("./sqlVulnerabilityAssessmentRuleBaseline").SqlVulnerabilityAssessmentRuleBaseline;
export const SqlVulnerabilityAssessmentRuleBaseline: typeof import("./sqlVulnerabilityAssessmentRuleBaseline").SqlVulnerabilityAssessmentRuleBaseline = null as any;
utilities.lazyLoad(exports, ["SqlVulnerabilityAssessmentRuleBaseline"], () => require("./sqlVulnerabilityAssessmentRuleBaseline"));

export { SqlVulnerabilityAssessmentsSettingArgs } from "./sqlVulnerabilityAssessmentsSetting";
export type SqlVulnerabilityAssessmentsSetting = import("./sqlVulnerabilityAssessmentsSetting").SqlVulnerabilityAssessmentsSetting;
export const SqlVulnerabilityAssessmentsSetting: typeof import("./sqlVulnerabilityAssessmentsSetting").SqlVulnerabilityAssessmentsSetting = null as any;
utilities.lazyLoad(exports, ["SqlVulnerabilityAssessmentsSetting"], () => require("./sqlVulnerabilityAssessmentsSetting"));

export { StartStopManagedInstanceScheduleArgs } from "./startStopManagedInstanceSchedule";
export type StartStopManagedInstanceSchedule = import("./startStopManagedInstanceSchedule").StartStopManagedInstanceSchedule;
export const StartStopManagedInstanceSchedule: typeof import("./startStopManagedInstanceSchedule").StartStopManagedInstanceSchedule = null as any;
utilities.lazyLoad(exports, ["StartStopManagedInstanceSchedule"], () => require("./startStopManagedInstanceSchedule"));

export { SyncAgentArgs } from "./syncAgent";
export type SyncAgent = import("./syncAgent").SyncAgent;
export const SyncAgent: typeof import("./syncAgent").SyncAgent = null as any;
utilities.lazyLoad(exports, ["SyncAgent"], () => require("./syncAgent"));

export { SyncGroupArgs } from "./syncGroup";
export type SyncGroup = import("./syncGroup").SyncGroup;
export const SyncGroup: typeof import("./syncGroup").SyncGroup = null as any;
utilities.lazyLoad(exports, ["SyncGroup"], () => require("./syncGroup"));

export { SyncMemberArgs } from "./syncMember";
export type SyncMember = import("./syncMember").SyncMember;
export const SyncMember: typeof import("./syncMember").SyncMember = null as any;
utilities.lazyLoad(exports, ["SyncMember"], () => require("./syncMember"));

export { TransparentDataEncryptionArgs } from "./transparentDataEncryption";
export type TransparentDataEncryption = import("./transparentDataEncryption").TransparentDataEncryption;
export const TransparentDataEncryption: typeof import("./transparentDataEncryption").TransparentDataEncryption = null as any;
utilities.lazyLoad(exports, ["TransparentDataEncryption"], () => require("./transparentDataEncryption"));

export { VirtualNetworkRuleArgs } from "./virtualNetworkRule";
export type VirtualNetworkRule = import("./virtualNetworkRule").VirtualNetworkRule;
export const VirtualNetworkRule: typeof import("./virtualNetworkRule").VirtualNetworkRule = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkRule"], () => require("./virtualNetworkRule"));

export { WorkloadClassifierArgs } from "./workloadClassifier";
export type WorkloadClassifier = import("./workloadClassifier").WorkloadClassifier;
export const WorkloadClassifier: typeof import("./workloadClassifier").WorkloadClassifier = null as any;
utilities.lazyLoad(exports, ["WorkloadClassifier"], () => require("./workloadClassifier"));

export { WorkloadGroupArgs } from "./workloadGroup";
export type WorkloadGroup = import("./workloadGroup").WorkloadGroup;
export const WorkloadGroup: typeof import("./workloadGroup").WorkloadGroup = null as any;
utilities.lazyLoad(exports, ["WorkloadGroup"], () => require("./workloadGroup"));


// Export enums:
export * from "../../types/enums/sql/v20221101preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:sql/v20221101preview:BackupShortTermRetentionPolicy":
                return new BackupShortTermRetentionPolicy(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:DataMaskingPolicy":
                return new DataMaskingPolicy(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:Database":
                return new Database(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:DatabaseAdvisor":
                return new DatabaseAdvisor(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:DatabaseBlobAuditingPolicy":
                return new DatabaseBlobAuditingPolicy(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:DatabaseSecurityAlertPolicy":
                return new DatabaseSecurityAlertPolicy(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:DatabaseSqlVulnerabilityAssessmentRuleBaseline":
                return new DatabaseSqlVulnerabilityAssessmentRuleBaseline(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:DatabaseVulnerabilityAssessment":
                return new DatabaseVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:DatabaseVulnerabilityAssessmentRuleBaseline":
                return new DatabaseVulnerabilityAssessmentRuleBaseline(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:DistributedAvailabilityGroup":
                return new DistributedAvailabilityGroup(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ElasticPool":
                return new ElasticPool(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:EncryptionProtector":
                return new EncryptionProtector(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ExtendedDatabaseBlobAuditingPolicy":
                return new ExtendedDatabaseBlobAuditingPolicy(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ExtendedServerBlobAuditingPolicy":
                return new ExtendedServerBlobAuditingPolicy(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:FailoverGroup":
                return new FailoverGroup(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:GeoBackupPolicy":
                return new GeoBackupPolicy(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:IPv6FirewallRule":
                return new IPv6FirewallRule(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:InstanceFailoverGroup":
                return new InstanceFailoverGroup(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:InstancePool":
                return new InstancePool(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:Job":
                return new Job(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:JobAgent":
                return new JobAgent(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:JobCredential":
                return new JobCredential(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:JobStep":
                return new JobStep(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:JobTargetGroup":
                return new JobTargetGroup(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:LongTermRetentionPolicy":
                return new LongTermRetentionPolicy(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ManagedDatabase":
                return new ManagedDatabase(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ManagedDatabaseSensitivityLabel":
                return new ManagedDatabaseSensitivityLabel(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ManagedDatabaseVulnerabilityAssessment":
                return new ManagedDatabaseVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ManagedDatabaseVulnerabilityAssessmentRuleBaseline":
                return new ManagedDatabaseVulnerabilityAssessmentRuleBaseline(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ManagedInstance":
                return new ManagedInstance(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ManagedInstanceAdministrator":
                return new ManagedInstanceAdministrator(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ManagedInstanceAzureADOnlyAuthentication":
                return new ManagedInstanceAzureADOnlyAuthentication(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ManagedInstanceKey":
                return new ManagedInstanceKey(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ManagedInstanceLongTermRetentionPolicy":
                return new ManagedInstanceLongTermRetentionPolicy(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ManagedInstancePrivateEndpointConnection":
                return new ManagedInstancePrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ManagedInstanceVulnerabilityAssessment":
                return new ManagedInstanceVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ManagedServerDnsAlias":
                return new ManagedServerDnsAlias(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:OutboundFirewallRule":
                return new OutboundFirewallRule(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:PrivateEndpointConnection":
                return new PrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:SensitivityLabel":
                return new SensitivityLabel(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:Server":
                return new Server(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ServerAdvisor":
                return new ServerAdvisor(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ServerAzureADAdministrator":
                return new ServerAzureADAdministrator(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ServerAzureADOnlyAuthentication":
                return new ServerAzureADOnlyAuthentication(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ServerBlobAuditingPolicy":
                return new ServerBlobAuditingPolicy(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ServerDnsAlias":
                return new ServerDnsAlias(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ServerKey":
                return new ServerKey(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ServerSecurityAlertPolicy":
                return new ServerSecurityAlertPolicy(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ServerTrustCertificate":
                return new ServerTrustCertificate(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ServerTrustGroup":
                return new ServerTrustGroup(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:ServerVulnerabilityAssessment":
                return new ServerVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:SqlVulnerabilityAssessmentRuleBaseline":
                return new SqlVulnerabilityAssessmentRuleBaseline(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:SqlVulnerabilityAssessmentsSetting":
                return new SqlVulnerabilityAssessmentsSetting(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:StartStopManagedInstanceSchedule":
                return new StartStopManagedInstanceSchedule(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:SyncAgent":
                return new SyncAgent(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:SyncGroup":
                return new SyncGroup(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:SyncMember":
                return new SyncMember(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:TransparentDataEncryption":
                return new TransparentDataEncryption(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:VirtualNetworkRule":
                return new VirtualNetworkRule(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:WorkloadClassifier":
                return new WorkloadClassifier(name, <any>undefined, { urn })
            case "azure-native:sql/v20221101preview:WorkloadGroup":
                return new WorkloadGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "sql/v20221101preview", _module)
