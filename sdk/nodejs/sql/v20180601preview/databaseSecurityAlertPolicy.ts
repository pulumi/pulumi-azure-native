// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * A database security alert policy.
 */
export class DatabaseSecurityAlertPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseSecurityAlertPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DatabaseSecurityAlertPolicy {
        return new DatabaseSecurityAlertPolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:sql/v20180601preview:DatabaseSecurityAlertPolicy';

    /**
     * Returns true if the given object is an instance of DatabaseSecurityAlertPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseSecurityAlertPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseSecurityAlertPolicy.__pulumiType;
    }

    /**
     * Specifies the UTC creation time of the policy.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action
     */
    public readonly disabledAlerts!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies that the alert is sent to the account administrators.
     */
    public readonly emailAccountAdmins!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies an array of e-mail addresses to which the alert is sent.
     */
    public readonly emailAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * Resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Specifies the number of days to keep in the Threat Detection audit logs.
     */
    public readonly retentionDays!: pulumi.Output<number | undefined>;
    /**
     * Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Specifies the identifier key of the Threat Detection audit storage account.
     */
    public readonly storageAccountAccessKey!: pulumi.Output<string | undefined>;
    /**
     * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
     */
    public readonly storageEndpoint!: pulumi.Output<string | undefined>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DatabaseSecurityAlertPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseSecurityAlertPolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if ((!args || args.databaseName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.securityAlertPolicyName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'securityAlertPolicyName'");
            }
            if ((!args || args.serverName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'serverName'");
            }
            if ((!args || args.state === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'state'");
            }
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["disabledAlerts"] = args ? args.disabledAlerts : undefined;
            inputs["emailAccountAdmins"] = args ? args.emailAccountAdmins : undefined;
            inputs["emailAddresses"] = args ? args.emailAddresses : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["retentionDays"] = args ? args.retentionDays : undefined;
            inputs["securityAlertPolicyName"] = args ? args.securityAlertPolicyName : undefined;
            inputs["serverName"] = args ? args.serverName : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["storageAccountAccessKey"] = args ? args.storageAccountAccessKey : undefined;
            inputs["storageEndpoint"] = args ? args.storageEndpoint : undefined;
            inputs["creationTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["creationTime"] = undefined /*out*/;
            inputs["disabledAlerts"] = undefined /*out*/;
            inputs["emailAccountAdmins"] = undefined /*out*/;
            inputs["emailAddresses"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["retentionDays"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["storageAccountAccessKey"] = undefined /*out*/;
            inputs["storageEndpoint"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:sql/latest:DatabaseSecurityAlertPolicy" }, { type: "azure-nextgen:sql/v20140401:DatabaseSecurityAlertPolicy" }, { type: "azure-nextgen:sql/v20200202preview:DatabaseSecurityAlertPolicy" }, { type: "azure-nextgen:sql/v20200801preview:DatabaseSecurityAlertPolicy" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(DatabaseSecurityAlertPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a DatabaseSecurityAlertPolicy resource.
 */
export interface DatabaseSecurityAlertPolicyArgs {
    /**
     * The name of the  database for which the security alert policy is defined.
     */
    readonly databaseName: pulumi.Input<string>;
    /**
     * Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action
     */
    readonly disabledAlerts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies that the alert is sent to the account administrators.
     */
    readonly emailAccountAdmins?: pulumi.Input<boolean>;
    /**
     * Specifies an array of e-mail addresses to which the alert is sent.
     */
    readonly emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * Specifies the number of days to keep in the Threat Detection audit logs.
     */
    readonly retentionDays?: pulumi.Input<number>;
    /**
     * The name of the security alert policy.
     */
    readonly securityAlertPolicyName: pulumi.Input<string>;
    /**
     * The name of the  server.
     */
    readonly serverName: pulumi.Input<string>;
    /**
     * Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
     */
    readonly state: pulumi.Input<enums.sql.v20180601preview.SecurityAlertPolicyState>;
    /**
     * Specifies the identifier key of the Threat Detection audit storage account.
     */
    readonly storageAccountAccessKey?: pulumi.Input<string>;
    /**
     * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
     */
    readonly storageEndpoint?: pulumi.Input<string>;
}
