// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * An Azure SQL Database sync group.
 */
export class SyncGroup extends pulumi.CustomResource {
    /**
     * Get an existing SyncGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SyncGroup {
        return new SyncGroup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:sql/v20150501preview:SyncGroup';

    /**
     * Returns true if the given object is an instance of SyncGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyncGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyncGroup.__pulumiType;
    }

    /**
     * Conflict resolution policy of the sync group.
     */
    public readonly conflictResolutionPolicy!: pulumi.Output<string | undefined>;
    /**
     * Password for the sync group hub database credential.
     */
    public readonly hubDatabasePassword!: pulumi.Output<string | undefined>;
    /**
     * User name for the sync group hub database credential.
     */
    public readonly hubDatabaseUserName!: pulumi.Output<string | undefined>;
    /**
     * Sync interval of the sync group.
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * Last sync time of the sync group.
     */
    public /*out*/ readonly lastSyncTime!: pulumi.Output<string>;
    /**
     * Resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Sync schema of the sync group.
     */
    public readonly schema!: pulumi.Output<outputs.sql.v20150501preview.SyncGroupSchemaResponse | undefined>;
    /**
     * ARM resource id of the sync database in the sync group.
     */
    public readonly syncDatabaseId!: pulumi.Output<string | undefined>;
    /**
     * Sync state of the sync group.
     */
    public /*out*/ readonly syncState!: pulumi.Output<string>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a SyncGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyncGroupArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.databaseName === undefined) {
                throw new Error("Missing required property 'databaseName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.serverName === undefined) {
                throw new Error("Missing required property 'serverName'");
            }
            if (!args || args.syncGroupName === undefined) {
                throw new Error("Missing required property 'syncGroupName'");
            }
            inputs["conflictResolutionPolicy"] = args ? args.conflictResolutionPolicy : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["hubDatabasePassword"] = args ? args.hubDatabasePassword : undefined;
            inputs["hubDatabaseUserName"] = args ? args.hubDatabaseUserName : undefined;
            inputs["interval"] = args ? args.interval : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["schema"] = args ? args.schema : undefined;
            inputs["serverName"] = args ? args.serverName : undefined;
            inputs["syncDatabaseId"] = args ? args.syncDatabaseId : undefined;
            inputs["syncGroupName"] = args ? args.syncGroupName : undefined;
            inputs["lastSyncTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["syncState"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["conflictResolutionPolicy"] = undefined /*out*/;
            inputs["hubDatabasePassword"] = undefined /*out*/;
            inputs["hubDatabaseUserName"] = undefined /*out*/;
            inputs["interval"] = undefined /*out*/;
            inputs["lastSyncTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["schema"] = undefined /*out*/;
            inputs["syncDatabaseId"] = undefined /*out*/;
            inputs["syncState"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:sql/v20190601preview:SyncGroup" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(SyncGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a SyncGroup resource.
 */
export interface SyncGroupArgs {
    /**
     * Conflict resolution policy of the sync group.
     */
    readonly conflictResolutionPolicy?: pulumi.Input<string>;
    /**
     * The name of the database on which the sync group is hosted.
     */
    readonly databaseName: pulumi.Input<string>;
    /**
     * Password for the sync group hub database credential.
     */
    readonly hubDatabasePassword?: pulumi.Input<string>;
    /**
     * User name for the sync group hub database credential.
     */
    readonly hubDatabaseUserName?: pulumi.Input<string>;
    /**
     * Sync interval of the sync group.
     */
    readonly interval?: pulumi.Input<number>;
    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * Sync schema of the sync group.
     */
    readonly schema?: pulumi.Input<inputs.sql.v20150501preview.SyncGroupSchema>;
    /**
     * The name of the server.
     */
    readonly serverName: pulumi.Input<string>;
    /**
     * ARM resource id of the sync database in the sync group.
     */
    readonly syncDatabaseId?: pulumi.Input<string>;
    /**
     * The name of the sync group.
     */
    readonly syncGroupName: pulumi.Input<string>;
}
