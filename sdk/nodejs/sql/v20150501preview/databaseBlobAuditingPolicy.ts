// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * A database blob auditing policy.
 */
export class DatabaseBlobAuditingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseBlobAuditingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DatabaseBlobAuditingPolicy {
        return new DatabaseBlobAuditingPolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:sql/v20150501preview:DatabaseBlobAuditingPolicy';

    /**
     * Returns true if the given object is an instance of DatabaseBlobAuditingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseBlobAuditingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseBlobAuditingPolicy.__pulumiType;
    }

    /**
     * Specifies the Actions and Actions-Groups to audit.
     */
    public readonly auditActionsAndGroups!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies whether storageAccountAccessKey value is the storage’s secondary key.
     */
    public readonly isStorageSecondaryKeyInUse!: pulumi.Output<boolean | undefined>;
    /**
     * Resource kind.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * Resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Specifies the number of days to keep in the audit logs.
     */
    public readonly retentionDays!: pulumi.Output<number | undefined>;
    /**
     * Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Specifies the blob storage subscription Id.
     */
    public readonly storageAccountSubscriptionId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.
     */
    public readonly storageEndpoint!: pulumi.Output<string | undefined>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DatabaseBlobAuditingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseBlobAuditingPolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serverName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverName'");
            }
            if ((!args || args.state === undefined) && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            inputs["auditActionsAndGroups"] = args ? args.auditActionsAndGroups : undefined;
            inputs["blobAuditingPolicyName"] = args ? args.blobAuditingPolicyName : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["isStorageSecondaryKeyInUse"] = args ? args.isStorageSecondaryKeyInUse : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["retentionDays"] = args ? args.retentionDays : undefined;
            inputs["serverName"] = args ? args.serverName : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["storageAccountAccessKey"] = args ? args.storageAccountAccessKey : undefined;
            inputs["storageAccountSubscriptionId"] = args ? args.storageAccountSubscriptionId : undefined;
            inputs["storageEndpoint"] = args ? args.storageEndpoint : undefined;
            inputs["kind"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["auditActionsAndGroups"] = undefined /*out*/;
            inputs["isStorageSecondaryKeyInUse"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["retentionDays"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["storageAccountSubscriptionId"] = undefined /*out*/;
            inputs["storageEndpoint"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:sql/v20150501preview:DatabaseBlobAuditingPolicy" }, { type: "azure-native:sql:DatabaseBlobAuditingPolicy" }, { type: "azure-nextgen:sql:DatabaseBlobAuditingPolicy" }, { type: "azure-native:sql/v20170301preview:DatabaseBlobAuditingPolicy" }, { type: "azure-nextgen:sql/v20170301preview:DatabaseBlobAuditingPolicy" }, { type: "azure-native:sql/v20200202preview:DatabaseBlobAuditingPolicy" }, { type: "azure-nextgen:sql/v20200202preview:DatabaseBlobAuditingPolicy" }, { type: "azure-native:sql/v20200801preview:DatabaseBlobAuditingPolicy" }, { type: "azure-nextgen:sql/v20200801preview:DatabaseBlobAuditingPolicy" }, { type: "azure-native:sql/v20201101preview:DatabaseBlobAuditingPolicy" }, { type: "azure-nextgen:sql/v20201101preview:DatabaseBlobAuditingPolicy" }, { type: "azure-native:sql/v20210201preview:DatabaseBlobAuditingPolicy" }, { type: "azure-nextgen:sql/v20210201preview:DatabaseBlobAuditingPolicy" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(DatabaseBlobAuditingPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a DatabaseBlobAuditingPolicy resource.
 */
export interface DatabaseBlobAuditingPolicyArgs {
    /**
     * Specifies the Actions and Actions-Groups to audit.
     */
    auditActionsAndGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the blob auditing policy.
     */
    blobAuditingPolicyName?: pulumi.Input<string>;
    /**
     * The name of the database for which the blob auditing policy will be defined.
     */
    databaseName: pulumi.Input<string>;
    /**
     * Specifies whether storageAccountAccessKey value is the storage’s secondary key.
     */
    isStorageSecondaryKeyInUse?: pulumi.Input<boolean>;
    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Specifies the number of days to keep in the audit logs.
     */
    retentionDays?: pulumi.Input<number>;
    /**
     * The name of the server.
     */
    serverName: pulumi.Input<string>;
    /**
     * Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
     */
    state: pulumi.Input<enums.sql.v20150501preview.BlobAuditingPolicyState>;
    /**
     * Specifies the identifier key of the auditing storage account. If state is Enabled, storageAccountAccessKey is required.
     */
    storageAccountAccessKey?: pulumi.Input<string>;
    /**
     * Specifies the blob storage subscription Id.
     */
    storageAccountSubscriptionId?: pulumi.Input<string>;
    /**
     * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.
     */
    storageEndpoint?: pulumi.Input<string>;
}
