// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { DatabaseAdvisorArgs } from "./databaseAdvisor";
export type DatabaseAdvisor = import("./databaseAdvisor").DatabaseAdvisor;
export const DatabaseAdvisor: typeof import("./databaseAdvisor").DatabaseAdvisor = null as any;
utilities.lazyLoad(exports, ["DatabaseAdvisor"], () => require("./databaseAdvisor"));

export { DatabaseBlobAuditingPolicyArgs } from "./databaseBlobAuditingPolicy";
export type DatabaseBlobAuditingPolicy = import("./databaseBlobAuditingPolicy").DatabaseBlobAuditingPolicy;
export const DatabaseBlobAuditingPolicy: typeof import("./databaseBlobAuditingPolicy").DatabaseBlobAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["DatabaseBlobAuditingPolicy"], () => require("./databaseBlobAuditingPolicy"));

export { EncryptionProtectorArgs } from "./encryptionProtector";
export type EncryptionProtector = import("./encryptionProtector").EncryptionProtector;
export const EncryptionProtector: typeof import("./encryptionProtector").EncryptionProtector = null as any;
utilities.lazyLoad(exports, ["EncryptionProtector"], () => require("./encryptionProtector"));

export { FailoverGroupArgs } from "./failoverGroup";
export type FailoverGroup = import("./failoverGroup").FailoverGroup;
export const FailoverGroup: typeof import("./failoverGroup").FailoverGroup = null as any;
utilities.lazyLoad(exports, ["FailoverGroup"], () => require("./failoverGroup"));

export { FirewallRuleArgs } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GetDatabaseAdvisorArgs, GetDatabaseAdvisorResult, GetDatabaseAdvisorOutputArgs } from "./getDatabaseAdvisor";
export const getDatabaseAdvisor: typeof import("./getDatabaseAdvisor").getDatabaseAdvisor = null as any;
export const getDatabaseAdvisorOutput: typeof import("./getDatabaseAdvisor").getDatabaseAdvisorOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAdvisor","getDatabaseAdvisorOutput"], () => require("./getDatabaseAdvisor"));

export { GetDatabaseBlobAuditingPolicyArgs, GetDatabaseBlobAuditingPolicyResult, GetDatabaseBlobAuditingPolicyOutputArgs } from "./getDatabaseBlobAuditingPolicy";
export const getDatabaseBlobAuditingPolicy: typeof import("./getDatabaseBlobAuditingPolicy").getDatabaseBlobAuditingPolicy = null as any;
export const getDatabaseBlobAuditingPolicyOutput: typeof import("./getDatabaseBlobAuditingPolicy").getDatabaseBlobAuditingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseBlobAuditingPolicy","getDatabaseBlobAuditingPolicyOutput"], () => require("./getDatabaseBlobAuditingPolicy"));

export { GetEncryptionProtectorArgs, GetEncryptionProtectorResult, GetEncryptionProtectorOutputArgs } from "./getEncryptionProtector";
export const getEncryptionProtector: typeof import("./getEncryptionProtector").getEncryptionProtector = null as any;
export const getEncryptionProtectorOutput: typeof import("./getEncryptionProtector").getEncryptionProtectorOutput = null as any;
utilities.lazyLoad(exports, ["getEncryptionProtector","getEncryptionProtectorOutput"], () => require("./getEncryptionProtector"));

export { GetFailoverGroupArgs, GetFailoverGroupResult, GetFailoverGroupOutputArgs } from "./getFailoverGroup";
export const getFailoverGroup: typeof import("./getFailoverGroup").getFailoverGroup = null as any;
export const getFailoverGroupOutput: typeof import("./getFailoverGroup").getFailoverGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFailoverGroup","getFailoverGroupOutput"], () => require("./getFailoverGroup"));

export { GetFirewallRuleArgs, GetFirewallRuleResult, GetFirewallRuleOutputArgs } from "./getFirewallRule";
export const getFirewallRule: typeof import("./getFirewallRule").getFirewallRule = null as any;
export const getFirewallRuleOutput: typeof import("./getFirewallRule").getFirewallRuleOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallRule","getFirewallRuleOutput"], () => require("./getFirewallRule"));

export { GetManagedInstanceArgs, GetManagedInstanceResult, GetManagedInstanceOutputArgs } from "./getManagedInstance";
export const getManagedInstance: typeof import("./getManagedInstance").getManagedInstance = null as any;
export const getManagedInstanceOutput: typeof import("./getManagedInstance").getManagedInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstance","getManagedInstanceOutput"], () => require("./getManagedInstance"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetServerAdvisorArgs, GetServerAdvisorResult, GetServerAdvisorOutputArgs } from "./getServerAdvisor";
export const getServerAdvisor: typeof import("./getServerAdvisor").getServerAdvisor = null as any;
export const getServerAdvisorOutput: typeof import("./getServerAdvisor").getServerAdvisorOutput = null as any;
utilities.lazyLoad(exports, ["getServerAdvisor","getServerAdvisorOutput"], () => require("./getServerAdvisor"));

export { GetServerKeyArgs, GetServerKeyResult, GetServerKeyOutputArgs } from "./getServerKey";
export const getServerKey: typeof import("./getServerKey").getServerKey = null as any;
export const getServerKeyOutput: typeof import("./getServerKey").getServerKeyOutput = null as any;
utilities.lazyLoad(exports, ["getServerKey","getServerKeyOutput"], () => require("./getServerKey"));

export { GetSyncAgentArgs, GetSyncAgentResult, GetSyncAgentOutputArgs } from "./getSyncAgent";
export const getSyncAgent: typeof import("./getSyncAgent").getSyncAgent = null as any;
export const getSyncAgentOutput: typeof import("./getSyncAgent").getSyncAgentOutput = null as any;
utilities.lazyLoad(exports, ["getSyncAgent","getSyncAgentOutput"], () => require("./getSyncAgent"));

export { GetSyncGroupArgs, GetSyncGroupResult, GetSyncGroupOutputArgs } from "./getSyncGroup";
export const getSyncGroup: typeof import("./getSyncGroup").getSyncGroup = null as any;
export const getSyncGroupOutput: typeof import("./getSyncGroup").getSyncGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSyncGroup","getSyncGroupOutput"], () => require("./getSyncGroup"));

export { GetSyncMemberArgs, GetSyncMemberResult, GetSyncMemberOutputArgs } from "./getSyncMember";
export const getSyncMember: typeof import("./getSyncMember").getSyncMember = null as any;
export const getSyncMemberOutput: typeof import("./getSyncMember").getSyncMemberOutput = null as any;
utilities.lazyLoad(exports, ["getSyncMember","getSyncMemberOutput"], () => require("./getSyncMember"));

export { GetVirtualNetworkRuleArgs, GetVirtualNetworkRuleResult, GetVirtualNetworkRuleOutputArgs } from "./getVirtualNetworkRule";
export const getVirtualNetworkRule: typeof import("./getVirtualNetworkRule").getVirtualNetworkRule = null as any;
export const getVirtualNetworkRuleOutput: typeof import("./getVirtualNetworkRule").getVirtualNetworkRuleOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNetworkRule","getVirtualNetworkRuleOutput"], () => require("./getVirtualNetworkRule"));

export { ManagedInstanceArgs } from "./managedInstance";
export type ManagedInstance = import("./managedInstance").ManagedInstance;
export const ManagedInstance: typeof import("./managedInstance").ManagedInstance = null as any;
utilities.lazyLoad(exports, ["ManagedInstance"], () => require("./managedInstance"));

export { ServerArgs } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { ServerAdvisorArgs } from "./serverAdvisor";
export type ServerAdvisor = import("./serverAdvisor").ServerAdvisor;
export const ServerAdvisor: typeof import("./serverAdvisor").ServerAdvisor = null as any;
utilities.lazyLoad(exports, ["ServerAdvisor"], () => require("./serverAdvisor"));

export { ServerKeyArgs } from "./serverKey";
export type ServerKey = import("./serverKey").ServerKey;
export const ServerKey: typeof import("./serverKey").ServerKey = null as any;
utilities.lazyLoad(exports, ["ServerKey"], () => require("./serverKey"));

export { SyncAgentArgs } from "./syncAgent";
export type SyncAgent = import("./syncAgent").SyncAgent;
export const SyncAgent: typeof import("./syncAgent").SyncAgent = null as any;
utilities.lazyLoad(exports, ["SyncAgent"], () => require("./syncAgent"));

export { SyncGroupArgs } from "./syncGroup";
export type SyncGroup = import("./syncGroup").SyncGroup;
export const SyncGroup: typeof import("./syncGroup").SyncGroup = null as any;
utilities.lazyLoad(exports, ["SyncGroup"], () => require("./syncGroup"));

export { SyncMemberArgs } from "./syncMember";
export type SyncMember = import("./syncMember").SyncMember;
export const SyncMember: typeof import("./syncMember").SyncMember = null as any;
utilities.lazyLoad(exports, ["SyncMember"], () => require("./syncMember"));

export { VirtualNetworkRuleArgs } from "./virtualNetworkRule";
export type VirtualNetworkRule = import("./virtualNetworkRule").VirtualNetworkRule;
export const VirtualNetworkRule: typeof import("./virtualNetworkRule").VirtualNetworkRule = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkRule"], () => require("./virtualNetworkRule"));


// Export enums:
export * from "../../types/enums/sql/v20150501preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:sql/v20150501preview:DatabaseAdvisor":
                return new DatabaseAdvisor(name, <any>undefined, { urn })
            case "azure-native:sql/v20150501preview:DatabaseBlobAuditingPolicy":
                return new DatabaseBlobAuditingPolicy(name, <any>undefined, { urn })
            case "azure-native:sql/v20150501preview:EncryptionProtector":
                return new EncryptionProtector(name, <any>undefined, { urn })
            case "azure-native:sql/v20150501preview:FailoverGroup":
                return new FailoverGroup(name, <any>undefined, { urn })
            case "azure-native:sql/v20150501preview:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "azure-native:sql/v20150501preview:ManagedInstance":
                return new ManagedInstance(name, <any>undefined, { urn })
            case "azure-native:sql/v20150501preview:Server":
                return new Server(name, <any>undefined, { urn })
            case "azure-native:sql/v20150501preview:ServerAdvisor":
                return new ServerAdvisor(name, <any>undefined, { urn })
            case "azure-native:sql/v20150501preview:ServerKey":
                return new ServerKey(name, <any>undefined, { urn })
            case "azure-native:sql/v20150501preview:SyncAgent":
                return new SyncAgent(name, <any>undefined, { urn })
            case "azure-native:sql/v20150501preview:SyncGroup":
                return new SyncGroup(name, <any>undefined, { urn })
            case "azure-native:sql/v20150501preview:SyncMember":
                return new SyncMember(name, <any>undefined, { urn })
            case "azure-native:sql/v20150501preview:VirtualNetworkRule":
                return new VirtualNetworkRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "sql/v20150501preview", _module)
