// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./backupShortTermRetentionPolicy";
export * from "./dataMaskingPolicy";
export * from "./database";
export * from "./databaseAdvisor";
export * from "./databaseBlobAuditingPolicy";
export * from "./databaseSecurityAlertPolicy";
export * from "./databaseVulnerabilityAssessment";
export * from "./databaseVulnerabilityAssessmentRuleBaseline";
export * from "./disasterRecoveryConfiguration";
export * from "./distributedAvailabilityGroup";
export * from "./elasticPool";
export * from "./encryptionProtector";
export * from "./extendedDatabaseBlobAuditingPolicy";
export * from "./extendedServerBlobAuditingPolicy";
export * from "./failoverGroup";
export * from "./firewallRule";
export * from "./geoBackupPolicy";
export * from "./getBackupShortTermRetentionPolicy";
export * from "./getDataMaskingPolicy";
export * from "./getDatabase";
export * from "./getDatabaseAdvisor";
export * from "./getDatabaseBlobAuditingPolicy";
export * from "./getDatabaseSecurityAlertPolicy";
export * from "./getDatabaseVulnerabilityAssessment";
export * from "./getDatabaseVulnerabilityAssessmentRuleBaseline";
export * from "./getDisasterRecoveryConfiguration";
export * from "./getDistributedAvailabilityGroup";
export * from "./getElasticPool";
export * from "./getEncryptionProtector";
export * from "./getExtendedDatabaseBlobAuditingPolicy";
export * from "./getExtendedServerBlobAuditingPolicy";
export * from "./getFailoverGroup";
export * from "./getFirewallRule";
export * from "./getGeoBackupPolicy";
export * from "./getIPv6FirewallRule";
export * from "./getInstanceFailoverGroup";
export * from "./getInstancePool";
export * from "./getJob";
export * from "./getJobAgent";
export * from "./getJobCredential";
export * from "./getJobStep";
export * from "./getJobTargetGroup";
export * from "./getLongTermRetentionPolicy";
export * from "./getManagedDatabase";
export * from "./getManagedDatabaseSensitivityLabel";
export * from "./getManagedDatabaseVulnerabilityAssessment";
export * from "./getManagedDatabaseVulnerabilityAssessmentRuleBaseline";
export * from "./getManagedInstance";
export * from "./getManagedInstanceAdministrator";
export * from "./getManagedInstanceAzureADOnlyAuthentication";
export * from "./getManagedInstanceKey";
export * from "./getManagedInstancePrivateEndpointConnection";
export * from "./getManagedInstanceVulnerabilityAssessment";
export * from "./getManagedServerDnsAlias";
export * from "./getOutboundFirewallRule";
export * from "./getPrivateEndpointConnection";
export * from "./getSensitivityLabel";
export * from "./getServer";
export * from "./getServerAdvisor";
export * from "./getServerAzureADAdministrator";
export * from "./getServerAzureADOnlyAuthentication";
export * from "./getServerBlobAuditingPolicy";
export * from "./getServerCommunicationLink";
export * from "./getServerDnsAlias";
export * from "./getServerKey";
export * from "./getServerSecurityAlertPolicy";
export * from "./getServerTrustCertificate";
export * from "./getServerTrustGroup";
export * from "./getServerVulnerabilityAssessment";
export * from "./getSyncAgent";
export * from "./getSyncGroup";
export * from "./getSyncMember";
export * from "./getTransparentDataEncryption";
export * from "./getVirtualNetworkRule";
export * from "./getWorkloadClassifier";
export * from "./getWorkloadGroup";
export * from "./instanceFailoverGroup";
export * from "./instancePool";
export * from "./ipv6FirewallRule";
export * from "./job";
export * from "./jobAgent";
export * from "./jobCredential";
export * from "./jobStep";
export * from "./jobTargetGroup";
export * from "./longTermRetentionPolicy";
export * from "./managedDatabase";
export * from "./managedDatabaseSensitivityLabel";
export * from "./managedDatabaseVulnerabilityAssessment";
export * from "./managedDatabaseVulnerabilityAssessmentRuleBaseline";
export * from "./managedInstance";
export * from "./managedInstanceAdministrator";
export * from "./managedInstanceAzureADOnlyAuthentication";
export * from "./managedInstanceKey";
export * from "./managedInstancePrivateEndpointConnection";
export * from "./managedInstanceVulnerabilityAssessment";
export * from "./managedServerDnsAlias";
export * from "./outboundFirewallRule";
export * from "./privateEndpointConnection";
export * from "./sensitivityLabel";
export * from "./server";
export * from "./serverAdvisor";
export * from "./serverAzureADAdministrator";
export * from "./serverAzureADOnlyAuthentication";
export * from "./serverBlobAuditingPolicy";
export * from "./serverCommunicationLink";
export * from "./serverDnsAlias";
export * from "./serverKey";
export * from "./serverSecurityAlertPolicy";
export * from "./serverTrustCertificate";
export * from "./serverTrustGroup";
export * from "./serverVulnerabilityAssessment";
export * from "./syncAgent";
export * from "./syncGroup";
export * from "./syncMember";
export * from "./transparentDataEncryption";
export * from "./virtualNetworkRule";
export * from "./workloadClassifier";
export * from "./workloadGroup";

// Export enums:
export * from "../types/enums/sql";

// Export sub-modules:
import * as v20140401 from "./v20140401";
import * as v20150501preview from "./v20150501preview";
import * as v20170301preview from "./v20170301preview";
import * as v20171001preview from "./v20171001preview";
import * as v20180601preview from "./v20180601preview";
import * as v20190601preview from "./v20190601preview";
import * as v20200202preview from "./v20200202preview";
import * as v20200801preview from "./v20200801preview";
import * as v20201101preview from "./v20201101preview";
import * as v20210201preview from "./v20210201preview";
import * as v20210501preview from "./v20210501preview";
import * as v20210801preview from "./v20210801preview";
import * as v20211101preview from "./v20211101preview";
import * as v20220201preview from "./v20220201preview";

export {
    v20140401,
    v20150501preview,
    v20170301preview,
    v20171001preview,
    v20180601preview,
    v20190601preview,
    v20200202preview,
    v20200801preview,
    v20201101preview,
    v20210201preview,
    v20210501preview,
    v20210801preview,
    v20211101preview,
    v20220201preview,
};

// Import resources to register:
import { BackupShortTermRetentionPolicy } from "./backupShortTermRetentionPolicy";
import { DataMaskingPolicy } from "./dataMaskingPolicy";
import { Database } from "./database";
import { DatabaseAdvisor } from "./databaseAdvisor";
import { DatabaseBlobAuditingPolicy } from "./databaseBlobAuditingPolicy";
import { DatabaseSecurityAlertPolicy } from "./databaseSecurityAlertPolicy";
import { DatabaseVulnerabilityAssessment } from "./databaseVulnerabilityAssessment";
import { DatabaseVulnerabilityAssessmentRuleBaseline } from "./databaseVulnerabilityAssessmentRuleBaseline";
import { DisasterRecoveryConfiguration } from "./disasterRecoveryConfiguration";
import { DistributedAvailabilityGroup } from "./distributedAvailabilityGroup";
import { ElasticPool } from "./elasticPool";
import { EncryptionProtector } from "./encryptionProtector";
import { ExtendedDatabaseBlobAuditingPolicy } from "./extendedDatabaseBlobAuditingPolicy";
import { ExtendedServerBlobAuditingPolicy } from "./extendedServerBlobAuditingPolicy";
import { FailoverGroup } from "./failoverGroup";
import { FirewallRule } from "./firewallRule";
import { GeoBackupPolicy } from "./geoBackupPolicy";
import { IPv6FirewallRule } from "./ipv6FirewallRule";
import { InstanceFailoverGroup } from "./instanceFailoverGroup";
import { InstancePool } from "./instancePool";
import { Job } from "./job";
import { JobAgent } from "./jobAgent";
import { JobCredential } from "./jobCredential";
import { JobStep } from "./jobStep";
import { JobTargetGroup } from "./jobTargetGroup";
import { LongTermRetentionPolicy } from "./longTermRetentionPolicy";
import { ManagedDatabase } from "./managedDatabase";
import { ManagedDatabaseSensitivityLabel } from "./managedDatabaseSensitivityLabel";
import { ManagedDatabaseVulnerabilityAssessment } from "./managedDatabaseVulnerabilityAssessment";
import { ManagedDatabaseVulnerabilityAssessmentRuleBaseline } from "./managedDatabaseVulnerabilityAssessmentRuleBaseline";
import { ManagedInstance } from "./managedInstance";
import { ManagedInstanceAdministrator } from "./managedInstanceAdministrator";
import { ManagedInstanceAzureADOnlyAuthentication } from "./managedInstanceAzureADOnlyAuthentication";
import { ManagedInstanceKey } from "./managedInstanceKey";
import { ManagedInstancePrivateEndpointConnection } from "./managedInstancePrivateEndpointConnection";
import { ManagedInstanceVulnerabilityAssessment } from "./managedInstanceVulnerabilityAssessment";
import { ManagedServerDnsAlias } from "./managedServerDnsAlias";
import { OutboundFirewallRule } from "./outboundFirewallRule";
import { PrivateEndpointConnection } from "./privateEndpointConnection";
import { SensitivityLabel } from "./sensitivityLabel";
import { Server } from "./server";
import { ServerAdvisor } from "./serverAdvisor";
import { ServerAzureADAdministrator } from "./serverAzureADAdministrator";
import { ServerAzureADOnlyAuthentication } from "./serverAzureADOnlyAuthentication";
import { ServerBlobAuditingPolicy } from "./serverBlobAuditingPolicy";
import { ServerCommunicationLink } from "./serverCommunicationLink";
import { ServerDnsAlias } from "./serverDnsAlias";
import { ServerKey } from "./serverKey";
import { ServerSecurityAlertPolicy } from "./serverSecurityAlertPolicy";
import { ServerTrustCertificate } from "./serverTrustCertificate";
import { ServerTrustGroup } from "./serverTrustGroup";
import { ServerVulnerabilityAssessment } from "./serverVulnerabilityAssessment";
import { SyncAgent } from "./syncAgent";
import { SyncGroup } from "./syncGroup";
import { SyncMember } from "./syncMember";
import { TransparentDataEncryption } from "./transparentDataEncryption";
import { VirtualNetworkRule } from "./virtualNetworkRule";
import { WorkloadClassifier } from "./workloadClassifier";
import { WorkloadGroup } from "./workloadGroup";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:sql:BackupShortTermRetentionPolicy":
                return new BackupShortTermRetentionPolicy(name, <any>undefined, { urn })
            case "azure-native:sql:DataMaskingPolicy":
                return new DataMaskingPolicy(name, <any>undefined, { urn })
            case "azure-native:sql:Database":
                return new Database(name, <any>undefined, { urn })
            case "azure-native:sql:DatabaseAdvisor":
                return new DatabaseAdvisor(name, <any>undefined, { urn })
            case "azure-native:sql:DatabaseBlobAuditingPolicy":
                return new DatabaseBlobAuditingPolicy(name, <any>undefined, { urn })
            case "azure-native:sql:DatabaseSecurityAlertPolicy":
                return new DatabaseSecurityAlertPolicy(name, <any>undefined, { urn })
            case "azure-native:sql:DatabaseVulnerabilityAssessment":
                return new DatabaseVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azure-native:sql:DatabaseVulnerabilityAssessmentRuleBaseline":
                return new DatabaseVulnerabilityAssessmentRuleBaseline(name, <any>undefined, { urn })
            case "azure-native:sql:DisasterRecoveryConfiguration":
                return new DisasterRecoveryConfiguration(name, <any>undefined, { urn })
            case "azure-native:sql:DistributedAvailabilityGroup":
                return new DistributedAvailabilityGroup(name, <any>undefined, { urn })
            case "azure-native:sql:ElasticPool":
                return new ElasticPool(name, <any>undefined, { urn })
            case "azure-native:sql:EncryptionProtector":
                return new EncryptionProtector(name, <any>undefined, { urn })
            case "azure-native:sql:ExtendedDatabaseBlobAuditingPolicy":
                return new ExtendedDatabaseBlobAuditingPolicy(name, <any>undefined, { urn })
            case "azure-native:sql:ExtendedServerBlobAuditingPolicy":
                return new ExtendedServerBlobAuditingPolicy(name, <any>undefined, { urn })
            case "azure-native:sql:FailoverGroup":
                return new FailoverGroup(name, <any>undefined, { urn })
            case "azure-native:sql:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "azure-native:sql:GeoBackupPolicy":
                return new GeoBackupPolicy(name, <any>undefined, { urn })
            case "azure-native:sql:IPv6FirewallRule":
                return new IPv6FirewallRule(name, <any>undefined, { urn })
            case "azure-native:sql:InstanceFailoverGroup":
                return new InstanceFailoverGroup(name, <any>undefined, { urn })
            case "azure-native:sql:InstancePool":
                return new InstancePool(name, <any>undefined, { urn })
            case "azure-native:sql:Job":
                return new Job(name, <any>undefined, { urn })
            case "azure-native:sql:JobAgent":
                return new JobAgent(name, <any>undefined, { urn })
            case "azure-native:sql:JobCredential":
                return new JobCredential(name, <any>undefined, { urn })
            case "azure-native:sql:JobStep":
                return new JobStep(name, <any>undefined, { urn })
            case "azure-native:sql:JobTargetGroup":
                return new JobTargetGroup(name, <any>undefined, { urn })
            case "azure-native:sql:LongTermRetentionPolicy":
                return new LongTermRetentionPolicy(name, <any>undefined, { urn })
            case "azure-native:sql:ManagedDatabase":
                return new ManagedDatabase(name, <any>undefined, { urn })
            case "azure-native:sql:ManagedDatabaseSensitivityLabel":
                return new ManagedDatabaseSensitivityLabel(name, <any>undefined, { urn })
            case "azure-native:sql:ManagedDatabaseVulnerabilityAssessment":
                return new ManagedDatabaseVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azure-native:sql:ManagedDatabaseVulnerabilityAssessmentRuleBaseline":
                return new ManagedDatabaseVulnerabilityAssessmentRuleBaseline(name, <any>undefined, { urn })
            case "azure-native:sql:ManagedInstance":
                return new ManagedInstance(name, <any>undefined, { urn })
            case "azure-native:sql:ManagedInstanceAdministrator":
                return new ManagedInstanceAdministrator(name, <any>undefined, { urn })
            case "azure-native:sql:ManagedInstanceAzureADOnlyAuthentication":
                return new ManagedInstanceAzureADOnlyAuthentication(name, <any>undefined, { urn })
            case "azure-native:sql:ManagedInstanceKey":
                return new ManagedInstanceKey(name, <any>undefined, { urn })
            case "azure-native:sql:ManagedInstancePrivateEndpointConnection":
                return new ManagedInstancePrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:sql:ManagedInstanceVulnerabilityAssessment":
                return new ManagedInstanceVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azure-native:sql:ManagedServerDnsAlias":
                return new ManagedServerDnsAlias(name, <any>undefined, { urn })
            case "azure-native:sql:OutboundFirewallRule":
                return new OutboundFirewallRule(name, <any>undefined, { urn })
            case "azure-native:sql:PrivateEndpointConnection":
                return new PrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:sql:SensitivityLabel":
                return new SensitivityLabel(name, <any>undefined, { urn })
            case "azure-native:sql:Server":
                return new Server(name, <any>undefined, { urn })
            case "azure-native:sql:ServerAdvisor":
                return new ServerAdvisor(name, <any>undefined, { urn })
            case "azure-native:sql:ServerAzureADAdministrator":
                return new ServerAzureADAdministrator(name, <any>undefined, { urn })
            case "azure-native:sql:ServerAzureADOnlyAuthentication":
                return new ServerAzureADOnlyAuthentication(name, <any>undefined, { urn })
            case "azure-native:sql:ServerBlobAuditingPolicy":
                return new ServerBlobAuditingPolicy(name, <any>undefined, { urn })
            case "azure-native:sql:ServerCommunicationLink":
                return new ServerCommunicationLink(name, <any>undefined, { urn })
            case "azure-native:sql:ServerDnsAlias":
                return new ServerDnsAlias(name, <any>undefined, { urn })
            case "azure-native:sql:ServerKey":
                return new ServerKey(name, <any>undefined, { urn })
            case "azure-native:sql:ServerSecurityAlertPolicy":
                return new ServerSecurityAlertPolicy(name, <any>undefined, { urn })
            case "azure-native:sql:ServerTrustCertificate":
                return new ServerTrustCertificate(name, <any>undefined, { urn })
            case "azure-native:sql:ServerTrustGroup":
                return new ServerTrustGroup(name, <any>undefined, { urn })
            case "azure-native:sql:ServerVulnerabilityAssessment":
                return new ServerVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azure-native:sql:SyncAgent":
                return new SyncAgent(name, <any>undefined, { urn })
            case "azure-native:sql:SyncGroup":
                return new SyncGroup(name, <any>undefined, { urn })
            case "azure-native:sql:SyncMember":
                return new SyncMember(name, <any>undefined, { urn })
            case "azure-native:sql:TransparentDataEncryption":
                return new TransparentDataEncryption(name, <any>undefined, { urn })
            case "azure-native:sql:VirtualNetworkRule":
                return new VirtualNetworkRule(name, <any>undefined, { urn })
            case "azure-native:sql:WorkloadClassifier":
                return new WorkloadClassifier(name, <any>undefined, { urn })
            case "azure-native:sql:WorkloadGroup":
                return new WorkloadGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "sql", _module)
