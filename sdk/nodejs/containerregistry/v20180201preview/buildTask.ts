// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * The build task that has the resource properties and all build items. The build task will have all information to schedule a build against it.
 */
export class BuildTask extends pulumi.CustomResource {
    /**
     * Get an existing BuildTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): BuildTask {
        return new BuildTask(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:containerregistry/v20180201preview:BuildTask';

    /**
     * Returns true if the given object is an instance of BuildTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BuildTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BuildTask.__pulumiType;
    }

    /**
     * The alternative updatable name for a build task.
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * The creation date of build task.
     */
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    /**
     * The location of the resource. This cannot be changed after the resource is created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The platform properties against which the build has to happen.
     */
    public readonly platform!: pulumi.Output<outputs.containerregistry.v20180201preview.PlatformPropertiesResponse>;
    /**
     * The provisioning state of the build task.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The properties that describes the source(code) for the build task.
     */
    public readonly sourceRepository!: pulumi.Output<outputs.containerregistry.v20180201preview.SourceRepositoryPropertiesResponse>;
    /**
     * The current status of build task.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * The tags of the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Build timeout in seconds.
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * The type of the resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a BuildTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BuildTaskArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.alias === undefined) {
                throw new Error("Missing required property 'alias'");
            }
            if (!args || args.buildTaskName === undefined) {
                throw new Error("Missing required property 'buildTaskName'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.platform === undefined) {
                throw new Error("Missing required property 'platform'");
            }
            if (!args || args.registryName === undefined) {
                throw new Error("Missing required property 'registryName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.sourceRepository === undefined) {
                throw new Error("Missing required property 'sourceRepository'");
            }
            inputs["alias"] = args ? args.alias : undefined;
            inputs["buildTaskName"] = args ? args.buildTaskName : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["platform"] = args ? args.platform : undefined;
            inputs["registryName"] = args ? args.registryName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sourceRepository"] = args ? args.sourceRepository : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["creationDate"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["alias"] = undefined /*out*/;
            inputs["creationDate"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["platform"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["sourceRepository"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["timeout"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(BuildTask.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a BuildTask resource.
 */
export interface BuildTaskArgs {
    /**
     * The alternative updatable name for a build task.
     */
    readonly alias: pulumi.Input<string>;
    /**
     * The name of the container registry build task.
     */
    readonly buildTaskName: pulumi.Input<string>;
    /**
     * The location of the resource. This cannot be changed after the resource is created.
     */
    readonly location: pulumi.Input<string>;
    /**
     * The platform properties against which the build has to happen.
     */
    readonly platform: pulumi.Input<inputs.containerregistry.v20180201preview.PlatformProperties>;
    /**
     * The name of the container registry.
     */
    readonly registryName: pulumi.Input<string>;
    /**
     * The name of the resource group to which the container registry belongs.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The properties that describes the source(code) for the build task.
     */
    readonly sourceRepository: pulumi.Input<inputs.containerregistry.v20180201preview.SourceRepositoryProperties>;
    /**
     * The current status of build task.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * The tags of the resource.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Build timeout in seconds.
     */
    readonly timeout?: pulumi.Input<number>;
}
