// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { CacheRuleArgs } from "./cacheRule";
export type CacheRule = import("./cacheRule").CacheRule;
export const CacheRule: typeof import("./cacheRule").CacheRule = null as any;
utilities.lazyLoad(exports, ["CacheRule"], () => require("./cacheRule"));

export { ConnectedRegistryArgs } from "./connectedRegistry";
export type ConnectedRegistry = import("./connectedRegistry").ConnectedRegistry;
export const ConnectedRegistry: typeof import("./connectedRegistry").ConnectedRegistry = null as any;
utilities.lazyLoad(exports, ["ConnectedRegistry"], () => require("./connectedRegistry"));

export { CredentialSetArgs } from "./credentialSet";
export type CredentialSet = import("./credentialSet").CredentialSet;
export const CredentialSet: typeof import("./credentialSet").CredentialSet = null as any;
utilities.lazyLoad(exports, ["CredentialSet"], () => require("./credentialSet"));

export { ExportPipelineArgs } from "./exportPipeline";
export type ExportPipeline = import("./exportPipeline").ExportPipeline;
export const ExportPipeline: typeof import("./exportPipeline").ExportPipeline = null as any;
utilities.lazyLoad(exports, ["ExportPipeline"], () => require("./exportPipeline"));

export { GetCacheRuleArgs, GetCacheRuleResult, GetCacheRuleOutputArgs } from "./getCacheRule";
export const getCacheRule: typeof import("./getCacheRule").getCacheRule = null as any;
export const getCacheRuleOutput: typeof import("./getCacheRule").getCacheRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCacheRule","getCacheRuleOutput"], () => require("./getCacheRule"));

export { GetConnectedRegistryArgs, GetConnectedRegistryResult, GetConnectedRegistryOutputArgs } from "./getConnectedRegistry";
export const getConnectedRegistry: typeof import("./getConnectedRegistry").getConnectedRegistry = null as any;
export const getConnectedRegistryOutput: typeof import("./getConnectedRegistry").getConnectedRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getConnectedRegistry","getConnectedRegistryOutput"], () => require("./getConnectedRegistry"));

export { GetCredentialSetArgs, GetCredentialSetResult, GetCredentialSetOutputArgs } from "./getCredentialSet";
export const getCredentialSet: typeof import("./getCredentialSet").getCredentialSet = null as any;
export const getCredentialSetOutput: typeof import("./getCredentialSet").getCredentialSetOutput = null as any;
utilities.lazyLoad(exports, ["getCredentialSet","getCredentialSetOutput"], () => require("./getCredentialSet"));

export { GetExportPipelineArgs, GetExportPipelineResult, GetExportPipelineOutputArgs } from "./getExportPipeline";
export const getExportPipeline: typeof import("./getExportPipeline").getExportPipeline = null as any;
export const getExportPipelineOutput: typeof import("./getExportPipeline").getExportPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getExportPipeline","getExportPipelineOutput"], () => require("./getExportPipeline"));

export { GetImportPipelineArgs, GetImportPipelineResult, GetImportPipelineOutputArgs } from "./getImportPipeline";
export const getImportPipeline: typeof import("./getImportPipeline").getImportPipeline = null as any;
export const getImportPipelineOutput: typeof import("./getImportPipeline").getImportPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getImportPipeline","getImportPipelineOutput"], () => require("./getImportPipeline"));

export { GetPipelineRunArgs, GetPipelineRunResult, GetPipelineRunOutputArgs } from "./getPipelineRun";
export const getPipelineRun: typeof import("./getPipelineRun").getPipelineRun = null as any;
export const getPipelineRunOutput: typeof import("./getPipelineRun").getPipelineRunOutput = null as any;
utilities.lazyLoad(exports, ["getPipelineRun","getPipelineRunOutput"], () => require("./getPipelineRun"));

export { ImportPipelineArgs } from "./importPipeline";
export type ImportPipeline = import("./importPipeline").ImportPipeline;
export const ImportPipeline: typeof import("./importPipeline").ImportPipeline = null as any;
utilities.lazyLoad(exports, ["ImportPipeline"], () => require("./importPipeline"));

export { PipelineRunArgs } from "./pipelineRun";
export type PipelineRun = import("./pipelineRun").PipelineRun;
export const PipelineRun: typeof import("./pipelineRun").PipelineRun = null as any;
utilities.lazyLoad(exports, ["PipelineRun"], () => require("./pipelineRun"));


// Export enums:
export * from "../../types/enums/containerregistry/v20230101preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:containerregistry/v20230101preview:CacheRule":
                return new CacheRule(name, <any>undefined, { urn })
            case "azure-native:containerregistry/v20230101preview:ConnectedRegistry":
                return new ConnectedRegistry(name, <any>undefined, { urn })
            case "azure-native:containerregistry/v20230101preview:CredentialSet":
                return new CredentialSet(name, <any>undefined, { urn })
            case "azure-native:containerregistry/v20230101preview:ExportPipeline":
                return new ExportPipeline(name, <any>undefined, { urn })
            case "azure-native:containerregistry/v20230101preview:ImportPipeline":
                return new ImportPipeline(name, <any>undefined, { urn })
            case "azure-native:containerregistry/v20230101preview:PipelineRun":
                return new PipelineRun(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "containerregistry/v20230101preview", _module)
