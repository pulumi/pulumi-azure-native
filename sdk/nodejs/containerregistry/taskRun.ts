// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The task run that has the ARM resource and properties.
 * The task run will have the information of request and result of a run.
 * Azure REST API version: 2019-06-01-preview. Prior API version in Azure Native 1.x: 2019-06-01-preview.
 */
export class TaskRun extends pulumi.CustomResource {
    /**
     * Get an existing TaskRun resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TaskRun {
        return new TaskRun(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:containerregistry:TaskRun';

    /**
     * Returns true if the given object is an instance of TaskRun.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TaskRun {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TaskRun.__pulumiType;
    }

    /**
     * How the run should be forced to rerun even if the run request configuration has not changed
     */
    public readonly forceUpdateTag!: pulumi.Output<string | undefined>;
    /**
     * Identity for the resource.
     */
    public readonly identity!: pulumi.Output<outputs.containerregistry.IdentityPropertiesResponse | undefined>;
    /**
     * The location of the resource
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The provisioning state of this task run
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The request (parameters) for the run
     */
    public readonly runRequest!: pulumi.Output<outputs.containerregistry.DockerBuildRequestResponse | outputs.containerregistry.EncodedTaskRunRequestResponse | outputs.containerregistry.FileTaskRunRequestResponse | outputs.containerregistry.TaskRunRequestResponse | undefined>;
    /**
     * The result of this task run
     */
    public /*out*/ readonly runResult!: pulumi.Output<outputs.containerregistry.RunResponse>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.containerregistry.SystemDataResponse>;
    /**
     * The type of the resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a TaskRun resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TaskRunArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.registryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["forceUpdateTag"] = args ? args.forceUpdateTag : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["registryName"] = args ? args.registryName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["runRequest"] = args ? args.runRequest : undefined;
            resourceInputs["taskRunName"] = args ? args.taskRunName : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["runResult"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["forceUpdateTag"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["runRequest"] = undefined /*out*/;
            resourceInputs["runResult"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:containerregistry/v20190601preview:TaskRun" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(TaskRun.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a TaskRun resource.
 */
export interface TaskRunArgs {
    /**
     * How the run should be forced to rerun even if the run request configuration has not changed
     */
    forceUpdateTag?: pulumi.Input<string>;
    /**
     * Identity for the resource.
     */
    identity?: pulumi.Input<inputs.containerregistry.IdentityPropertiesArgs>;
    /**
     * The location of the resource
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the container registry.
     */
    registryName: pulumi.Input<string>;
    /**
     * The name of the resource group to which the container registry belongs.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The request (parameters) for the run
     */
    runRequest?: pulumi.Input<inputs.containerregistry.DockerBuildRequestArgs | inputs.containerregistry.EncodedTaskRunRequestArgs | inputs.containerregistry.FileTaskRunRequestArgs | inputs.containerregistry.TaskRunRequestArgs>;
    /**
     * The name of the task run.
     */
    taskRunName?: pulumi.Input<string>;
}
