// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * An object that represents an import pipeline for a container registry.
 * API Version: 2020-11-01-preview.
 */
export class ImportPipeline extends pulumi.CustomResource {
    /**
     * Get an existing ImportPipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ImportPipeline {
        return new ImportPipeline(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:containerregistry:ImportPipeline';

    /**
     * Returns true if the given object is an instance of ImportPipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImportPipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImportPipeline.__pulumiType;
    }

    /**
     * The identity of the import pipeline.
     */
    public readonly identity!: pulumi.Output<outputs.containerregistry.IdentityPropertiesResponse | undefined>;
    /**
     * The location of the import pipeline.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The list of all options configured for the pipeline.
     */
    public readonly options!: pulumi.Output<string[] | undefined>;
    /**
     * The provisioning state of the pipeline at the time the operation was called.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The source properties of the import pipeline.
     */
    public readonly source!: pulumi.Output<outputs.containerregistry.ImportPipelineSourcePropertiesResponse>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.containerregistry.SystemDataResponse>;
    /**
     * The properties that describe the trigger of the import pipeline.
     */
    public readonly trigger!: pulumi.Output<outputs.containerregistry.PipelineTriggerPropertiesResponse | undefined>;
    /**
     * The type of the resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a ImportPipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImportPipelineArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.registryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            inputs["identity"] = args ? args.identity : undefined;
            inputs["importPipelineName"] = args ? args.importPipelineName : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["options"] = args ? args.options : undefined;
            inputs["registryName"] = args ? args.registryName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["source"] = args ? args.source : undefined;
            inputs["trigger"] = args ? args.trigger : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["identity"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["options"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["source"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["trigger"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:containerregistry:ImportPipeline" }, { type: "azure-native:containerregistry/v20191201preview:ImportPipeline" }, { type: "azure-nextgen:containerregistry/v20191201preview:ImportPipeline" }, { type: "azure-native:containerregistry/v20201101preview:ImportPipeline" }, { type: "azure-nextgen:containerregistry/v20201101preview:ImportPipeline" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ImportPipeline.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a ImportPipeline resource.
 */
export interface ImportPipelineArgs {
    /**
     * The identity of the import pipeline.
     */
    identity?: pulumi.Input<inputs.containerregistry.IdentityPropertiesArgs>;
    /**
     * The name of the import pipeline.
     */
    importPipelineName?: pulumi.Input<string>;
    /**
     * The location of the import pipeline.
     */
    location?: pulumi.Input<string>;
    /**
     * The list of all options configured for the pipeline.
     */
    options?: pulumi.Input<pulumi.Input<string | enums.containerregistry.PipelineOptions>[]>;
    /**
     * The name of the container registry.
     */
    registryName: pulumi.Input<string>;
    /**
     * The name of the resource group to which the container registry belongs.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The source properties of the import pipeline.
     */
    source: pulumi.Input<inputs.containerregistry.ImportPipelineSourcePropertiesArgs>;
    /**
     * The properties that describe the trigger of the import pipeline.
     */
    trigger?: pulumi.Input<inputs.containerregistry.PipelineTriggerPropertiesArgs>;
}
