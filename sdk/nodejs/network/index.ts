// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./adminRule";
export * from "./adminRuleCollection";
export * from "./applicationGateway";
export * from "./applicationGatewayPrivateEndpointConnection";
export * from "./applicationSecurityGroup";
export * from "./azureFirewall";
export * from "./bastionHost";
export * from "./configurationPolicyGroup";
export * from "./connectionMonitor";
export * from "./connectivityConfiguration";
export * from "./customIPPrefix";
export * from "./ddosCustomPolicy";
export * from "./ddosProtectionPlan";
export * from "./defaultAdminRule";
export * from "./defaultUserRule";
export * from "./dnsForwardingRuleset";
export * from "./dnsResolver";
export * from "./dscpConfiguration";
export * from "./endpoint";
export * from "./experiment";
export * from "./expressRouteCircuit";
export * from "./expressRouteCircuitAuthorization";
export * from "./expressRouteCircuitConnection";
export * from "./expressRouteCircuitPeering";
export * from "./expressRouteConnection";
export * from "./expressRouteCrossConnectionPeering";
export * from "./expressRouteGateway";
export * from "./expressRoutePort";
export * from "./expressRoutePortAuthorization";
export * from "./firewallPolicy";
export * from "./firewallPolicyRuleCollectionGroup";
export * from "./firewallPolicyRuleGroup";
export * from "./flowLog";
export * from "./forwardingRule";
export * from "./frontDoor";
export * from "./getActiveSessions";
export * from "./getAdminRule";
export * from "./getAdminRuleCollection";
export * from "./getApplicationGateway";
export * from "./getApplicationGatewayBackendHealthOnDemand";
export * from "./getApplicationGatewayPrivateEndpointConnection";
export * from "./getApplicationSecurityGroup";
export * from "./getAzureFirewall";
export * from "./getBastionHost";
export * from "./getBastionShareableLink";
export * from "./getConfigurationPolicyGroup";
export * from "./getConnectionMonitor";
export * from "./getConnectivityConfiguration";
export * from "./getCustomIPPrefix";
export * from "./getDdosCustomPolicy";
export * from "./getDdosProtectionPlan";
export * from "./getDefaultAdminRule";
export * from "./getDefaultUserRule";
export * from "./getDnsForwardingRuleset";
export * from "./getDnsResolver";
export * from "./getDnsResourceReferenceByTarResources";
export * from "./getDscpConfiguration";
export * from "./getEndpoint";
export * from "./getExperiment";
export * from "./getExpressRouteCircuit";
export * from "./getExpressRouteCircuitAuthorization";
export * from "./getExpressRouteCircuitConnection";
export * from "./getExpressRouteCircuitPeering";
export * from "./getExpressRouteConnection";
export * from "./getExpressRouteCrossConnectionPeering";
export * from "./getExpressRouteGateway";
export * from "./getExpressRoutePort";
export * from "./getExpressRoutePortAuthorization";
export * from "./getFirewallPolicy";
export * from "./getFirewallPolicyRuleCollectionGroup";
export * from "./getFirewallPolicyRuleGroup";
export * from "./getFlowLog";
export * from "./getForwardingRule";
export * from "./getFrontDoor";
export * from "./getHubRouteTable";
export * from "./getHubVirtualNetworkConnection";
export * from "./getInboundEndpoint";
export * from "./getInboundNatRule";
export * from "./getIpAllocation";
export * from "./getIpGroup";
export * from "./getLoadBalancer";
export * from "./getLoadBalancerBackendAddressPool";
export * from "./getLocalNetworkGateway";
export * from "./getManagementGroupNetworkManagerConnection";
export * from "./getNatGateway";
export * from "./getNatRule";
export * from "./getNetworkExperimentProfile";
export * from "./getNetworkGroup";
export * from "./getNetworkInterface";
export * from "./getNetworkInterfaceTapConfiguration";
export * from "./getNetworkManager";
export * from "./getNetworkProfile";
export * from "./getNetworkSecurityGroup";
export * from "./getNetworkSecurityPerimeter";
export * from "./getNetworkVirtualAppliance";
export * from "./getNetworkWatcher";
export * from "./getNspAccessRule";
export * from "./getNspAssociation";
export * from "./getNspProfile";
export * from "./getOutboundEndpoint";
export * from "./getP2sVpnGateway";
export * from "./getP2sVpnGatewayP2sVpnConnectionHealth";
export * from "./getP2sVpnGatewayP2sVpnConnectionHealthDetailed";
export * from "./getP2sVpnServerConfiguration";
export * from "./getPacketCapture";
export * from "./getPolicy";
export * from "./getPrivateDnsZoneGroup";
export * from "./getPrivateEndpoint";
export * from "./getPrivateLinkService";
export * from "./getPrivateLinkServicePrivateEndpointConnection";
export * from "./getPrivateRecordSet";
export * from "./getPrivateZone";
export * from "./getProfile";
export * from "./getPublicIPAddress";
export * from "./getPublicIPPrefix";
export * from "./getRecordSet";
export * from "./getRoute";
export * from "./getRouteFilter";
export * from "./getRouteFilterRule";
export * from "./getRouteTable";
export * from "./getRoutingIntent";
export * from "./getRulesEngine";
export * from "./getScopeConnection";
export * from "./getSecurityAdminConfiguration";
export * from "./getSecurityPartnerProvider";
export * from "./getSecurityRule";
export * from "./getSecurityUserConfiguration";
export * from "./getServiceEndpointPolicy";
export * from "./getServiceEndpointPolicyDefinition";
export * from "./getStaticMember";
export * from "./getSubnet";
export * from "./getSubscriptionNetworkManagerConnection";
export * from "./getTrafficManagerUserMetricsKey";
export * from "./getUserRule";
export * from "./getUserRuleCollection";
export * from "./getVirtualApplianceSite";
export * from "./getVirtualHub";
export * from "./getVirtualHubBgpConnection";
export * from "./getVirtualHubIpConfiguration";
export * from "./getVirtualHubRouteTableV2";
export * from "./getVirtualNetwork";
export * from "./getVirtualNetworkGateway";
export * from "./getVirtualNetworkGatewayAdvertisedRoutes";
export * from "./getVirtualNetworkGatewayBgpPeerStatus";
export * from "./getVirtualNetworkGatewayConnection";
export * from "./getVirtualNetworkGatewayLearnedRoutes";
export * from "./getVirtualNetworkGatewayNatRule";
export * from "./getVirtualNetworkGatewayVpnclientConnectionHealth";
export * from "./getVirtualNetworkGatewayVpnclientIpsecParameters";
export * from "./getVirtualNetworkLink";
export * from "./getVirtualNetworkPeering";
export * from "./getVirtualNetworkTap";
export * from "./getVirtualRouter";
export * from "./getVirtualRouterPeering";
export * from "./getVirtualWan";
export * from "./getVpnConnection";
export * from "./getVpnGateway";
export * from "./getVpnServerConfiguration";
export * from "./getVpnSite";
export * from "./getWebApplicationFirewallPolicy";
export * from "./getZone";
export * from "./hubRouteTable";
export * from "./hubVirtualNetworkConnection";
export * from "./inboundEndpoint";
export * from "./inboundNatRule";
export * from "./ipAllocation";
export * from "./ipGroup";
export * from "./listActiveConnectivityConfiguration";
export * from "./listActiveSecurityAdminRule";
export * from "./listActiveSecurityUserRule";
export * from "./listDnsForwardingRulesetByVirtualNetwork";
export * from "./listDnsResolverByVirtualNetwork";
export * from "./listEffectiveConnectivityConfiguration";
export * from "./listEffectiveVirtualNetworkByNetworkGroup";
export * from "./listEffectiveVirtualNetworkByNetworkManager";
export * from "./listFirewallPolicyIdpsSignature";
export * from "./listFirewallPolicyIdpsSignaturesFilterValue";
export * from "./listNetworkManagerDeploymentStatus";
export * from "./listNetworkManagerEffectiveSecurityAdminRule";
export * from "./loadBalancer";
export * from "./loadBalancerBackendAddressPool";
export * from "./localNetworkGateway";
export * from "./managementGroupNetworkManagerConnection";
export * from "./natGateway";
export * from "./natRule";
export * from "./networkExperimentProfile";
export * from "./networkGroup";
export * from "./networkInterface";
export * from "./networkInterfaceTapConfiguration";
export * from "./networkManager";
export * from "./networkProfile";
export * from "./networkSecurityGroup";
export * from "./networkSecurityPerimeter";
export * from "./networkVirtualAppliance";
export * from "./networkWatcher";
export * from "./nspAccessRule";
export * from "./nspAssociation";
export * from "./nspProfile";
export * from "./outboundEndpoint";
export * from "./p2sVpnGateway";
export * from "./p2sVpnServerConfiguration";
export * from "./packetCapture";
export * from "./policy";
export * from "./privateDnsZoneGroup";
export * from "./privateEndpoint";
export * from "./privateLinkService";
export * from "./privateLinkServicePrivateEndpointConnection";
export * from "./privateRecordSet";
export * from "./privateZone";
export * from "./profile";
export * from "./publicIPAddress";
export * from "./publicIPPrefix";
export * from "./recordSet";
export * from "./route";
export * from "./routeFilter";
export * from "./routeFilterRule";
export * from "./routeTable";
export * from "./routingIntent";
export * from "./rulesEngine";
export * from "./scopeConnection";
export * from "./securityAdminConfiguration";
export * from "./securityPartnerProvider";
export * from "./securityRule";
export * from "./securityUserConfiguration";
export * from "./serviceEndpointPolicy";
export * from "./serviceEndpointPolicyDefinition";
export * from "./staticMember";
export * from "./subnet";
export * from "./subscriptionNetworkManagerConnection";
export * from "./trafficManagerUserMetricsKey";
export * from "./userRule";
export * from "./userRuleCollection";
export * from "./virtualApplianceSite";
export * from "./virtualHub";
export * from "./virtualHubBgpConnection";
export * from "./virtualHubIpConfiguration";
export * from "./virtualHubRouteTableV2";
export * from "./virtualNetwork";
export * from "./virtualNetworkGateway";
export * from "./virtualNetworkGatewayConnection";
export * from "./virtualNetworkGatewayNatRule";
export * from "./virtualNetworkLink";
export * from "./virtualNetworkPeering";
export * from "./virtualNetworkTap";
export * from "./virtualRouter";
export * from "./virtualRouterPeering";
export * from "./virtualWan";
export * from "./vpnConnection";
export * from "./vpnGateway";
export * from "./vpnServerConfiguration";
export * from "./vpnSite";
export * from "./webApplicationFirewallPolicy";
export * from "./zone";

// Export enums:
export * from "../types/enums/network";

// Export sub-modules:
import * as v20150501preview from "./v20150501preview";
import * as v20150504preview from "./v20150504preview";
import * as v20150615 from "./v20150615";
import * as v20151101 from "./v20151101";
import * as v20160330 from "./v20160330";
import * as v20160401 from "./v20160401";
import * as v20160601 from "./v20160601";
import * as v20160901 from "./v20160901";
import * as v20161201 from "./v20161201";
import * as v20170301 from "./v20170301";
import * as v20170501 from "./v20170501";
import * as v20170601 from "./v20170601";
import * as v20170801 from "./v20170801";
import * as v20170901 from "./v20170901";
import * as v20170901preview from "./v20170901preview";
import * as v20171001 from "./v20171001";
import * as v20171101 from "./v20171101";
import * as v20180101 from "./v20180101";
import * as v20180201 from "./v20180201";
import * as v20180301 from "./v20180301";
import * as v20180301preview from "./v20180301preview";
import * as v20180401 from "./v20180401";
import * as v20180501 from "./v20180501";
import * as v20180601 from "./v20180601";
import * as v20180701 from "./v20180701";
import * as v20180801 from "./v20180801";
import * as v20180901 from "./v20180901";
import * as v20181001 from "./v20181001";
import * as v20181101 from "./v20181101";
import * as v20181201 from "./v20181201";
import * as v20190201 from "./v20190201";
import * as v20190301 from "./v20190301";
import * as v20190401 from "./v20190401";
import * as v20190501 from "./v20190501";
import * as v20190601 from "./v20190601";
import * as v20190701 from "./v20190701";
import * as v20190801 from "./v20190801";
import * as v20190901 from "./v20190901";
import * as v20191001 from "./v20191001";
import * as v20191101 from "./v20191101";
import * as v20191201 from "./v20191201";
import * as v20200101 from "./v20200101";
import * as v20200301 from "./v20200301";
import * as v20200401 from "./v20200401";
import * as v20200401preview from "./v20200401preview";
import * as v20200501 from "./v20200501";
import * as v20200601 from "./v20200601";
import * as v20200701 from "./v20200701";
import * as v20200801 from "./v20200801";
import * as v20201101 from "./v20201101";
import * as v20210201 from "./v20210201";
import * as v20210201preview from "./v20210201preview";
import * as v20210301 from "./v20210301";
import * as v20210301preview from "./v20210301preview";
import * as v20210501 from "./v20210501";
import * as v20210501preview from "./v20210501preview";
import * as v20210801 from "./v20210801";
import * as v20220201preview from "./v20220201preview";
import * as v20220401preview from "./v20220401preview";

export {
    v20150501preview,
    v20150504preview,
    v20150615,
    v20151101,
    v20160330,
    v20160401,
    v20160601,
    v20160901,
    v20161201,
    v20170301,
    v20170501,
    v20170601,
    v20170801,
    v20170901,
    v20170901preview,
    v20171001,
    v20171101,
    v20180101,
    v20180201,
    v20180301,
    v20180301preview,
    v20180401,
    v20180501,
    v20180601,
    v20180701,
    v20180801,
    v20180901,
    v20181001,
    v20181101,
    v20181201,
    v20190201,
    v20190301,
    v20190401,
    v20190501,
    v20190601,
    v20190701,
    v20190801,
    v20190901,
    v20191001,
    v20191101,
    v20191201,
    v20200101,
    v20200301,
    v20200401,
    v20200401preview,
    v20200501,
    v20200601,
    v20200701,
    v20200801,
    v20201101,
    v20210201,
    v20210201preview,
    v20210301,
    v20210301preview,
    v20210501,
    v20210501preview,
    v20210801,
    v20220201preview,
    v20220401preview,
};

// Import resources to register:
import { AdminRule } from "./adminRule";
import { AdminRuleCollection } from "./adminRuleCollection";
import { ApplicationGateway } from "./applicationGateway";
import { ApplicationGatewayPrivateEndpointConnection } from "./applicationGatewayPrivateEndpointConnection";
import { ApplicationSecurityGroup } from "./applicationSecurityGroup";
import { AzureFirewall } from "./azureFirewall";
import { BastionHost } from "./bastionHost";
import { ConfigurationPolicyGroup } from "./configurationPolicyGroup";
import { ConnectionMonitor } from "./connectionMonitor";
import { ConnectivityConfiguration } from "./connectivityConfiguration";
import { CustomIPPrefix } from "./customIPPrefix";
import { DdosCustomPolicy } from "./ddosCustomPolicy";
import { DdosProtectionPlan } from "./ddosProtectionPlan";
import { DefaultAdminRule } from "./defaultAdminRule";
import { DefaultUserRule } from "./defaultUserRule";
import { DnsForwardingRuleset } from "./dnsForwardingRuleset";
import { DnsResolver } from "./dnsResolver";
import { DscpConfiguration } from "./dscpConfiguration";
import { Endpoint } from "./endpoint";
import { Experiment } from "./experiment";
import { ExpressRouteCircuit } from "./expressRouteCircuit";
import { ExpressRouteCircuitAuthorization } from "./expressRouteCircuitAuthorization";
import { ExpressRouteCircuitConnection } from "./expressRouteCircuitConnection";
import { ExpressRouteCircuitPeering } from "./expressRouteCircuitPeering";
import { ExpressRouteConnection } from "./expressRouteConnection";
import { ExpressRouteCrossConnectionPeering } from "./expressRouteCrossConnectionPeering";
import { ExpressRouteGateway } from "./expressRouteGateway";
import { ExpressRoutePort } from "./expressRoutePort";
import { ExpressRoutePortAuthorization } from "./expressRoutePortAuthorization";
import { FirewallPolicy } from "./firewallPolicy";
import { FirewallPolicyRuleCollectionGroup } from "./firewallPolicyRuleCollectionGroup";
import { FirewallPolicyRuleGroup } from "./firewallPolicyRuleGroup";
import { FlowLog } from "./flowLog";
import { ForwardingRule } from "./forwardingRule";
import { FrontDoor } from "./frontDoor";
import { HubRouteTable } from "./hubRouteTable";
import { HubVirtualNetworkConnection } from "./hubVirtualNetworkConnection";
import { InboundEndpoint } from "./inboundEndpoint";
import { InboundNatRule } from "./inboundNatRule";
import { IpAllocation } from "./ipAllocation";
import { IpGroup } from "./ipGroup";
import { LoadBalancer } from "./loadBalancer";
import { LoadBalancerBackendAddressPool } from "./loadBalancerBackendAddressPool";
import { LocalNetworkGateway } from "./localNetworkGateway";
import { ManagementGroupNetworkManagerConnection } from "./managementGroupNetworkManagerConnection";
import { NatGateway } from "./natGateway";
import { NatRule } from "./natRule";
import { NetworkExperimentProfile } from "./networkExperimentProfile";
import { NetworkGroup } from "./networkGroup";
import { NetworkInterface } from "./networkInterface";
import { NetworkInterfaceTapConfiguration } from "./networkInterfaceTapConfiguration";
import { NetworkManager } from "./networkManager";
import { NetworkProfile } from "./networkProfile";
import { NetworkSecurityGroup } from "./networkSecurityGroup";
import { NetworkSecurityPerimeter } from "./networkSecurityPerimeter";
import { NetworkVirtualAppliance } from "./networkVirtualAppliance";
import { NetworkWatcher } from "./networkWatcher";
import { NspAccessRule } from "./nspAccessRule";
import { NspAssociation } from "./nspAssociation";
import { NspProfile } from "./nspProfile";
import { OutboundEndpoint } from "./outboundEndpoint";
import { P2sVpnGateway } from "./p2sVpnGateway";
import { P2sVpnServerConfiguration } from "./p2sVpnServerConfiguration";
import { PacketCapture } from "./packetCapture";
import { Policy } from "./policy";
import { PrivateDnsZoneGroup } from "./privateDnsZoneGroup";
import { PrivateEndpoint } from "./privateEndpoint";
import { PrivateLinkService } from "./privateLinkService";
import { PrivateLinkServicePrivateEndpointConnection } from "./privateLinkServicePrivateEndpointConnection";
import { PrivateRecordSet } from "./privateRecordSet";
import { PrivateZone } from "./privateZone";
import { Profile } from "./profile";
import { PublicIPAddress } from "./publicIPAddress";
import { PublicIPPrefix } from "./publicIPPrefix";
import { RecordSet } from "./recordSet";
import { Route } from "./route";
import { RouteFilter } from "./routeFilter";
import { RouteFilterRule } from "./routeFilterRule";
import { RouteTable } from "./routeTable";
import { RoutingIntent } from "./routingIntent";
import { RulesEngine } from "./rulesEngine";
import { ScopeConnection } from "./scopeConnection";
import { SecurityAdminConfiguration } from "./securityAdminConfiguration";
import { SecurityPartnerProvider } from "./securityPartnerProvider";
import { SecurityRule } from "./securityRule";
import { SecurityUserConfiguration } from "./securityUserConfiguration";
import { ServiceEndpointPolicy } from "./serviceEndpointPolicy";
import { ServiceEndpointPolicyDefinition } from "./serviceEndpointPolicyDefinition";
import { StaticMember } from "./staticMember";
import { Subnet } from "./subnet";
import { SubscriptionNetworkManagerConnection } from "./subscriptionNetworkManagerConnection";
import { TrafficManagerUserMetricsKey } from "./trafficManagerUserMetricsKey";
import { UserRule } from "./userRule";
import { UserRuleCollection } from "./userRuleCollection";
import { VirtualApplianceSite } from "./virtualApplianceSite";
import { VirtualHub } from "./virtualHub";
import { VirtualHubBgpConnection } from "./virtualHubBgpConnection";
import { VirtualHubIpConfiguration } from "./virtualHubIpConfiguration";
import { VirtualHubRouteTableV2 } from "./virtualHubRouteTableV2";
import { VirtualNetwork } from "./virtualNetwork";
import { VirtualNetworkGateway } from "./virtualNetworkGateway";
import { VirtualNetworkGatewayConnection } from "./virtualNetworkGatewayConnection";
import { VirtualNetworkGatewayNatRule } from "./virtualNetworkGatewayNatRule";
import { VirtualNetworkLink } from "./virtualNetworkLink";
import { VirtualNetworkPeering } from "./virtualNetworkPeering";
import { VirtualNetworkTap } from "./virtualNetworkTap";
import { VirtualRouter } from "./virtualRouter";
import { VirtualRouterPeering } from "./virtualRouterPeering";
import { VirtualWan } from "./virtualWan";
import { VpnConnection } from "./vpnConnection";
import { VpnGateway } from "./vpnGateway";
import { VpnServerConfiguration } from "./vpnServerConfiguration";
import { VpnSite } from "./vpnSite";
import { WebApplicationFirewallPolicy } from "./webApplicationFirewallPolicy";
import { Zone } from "./zone";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:network:AdminRule":
                return new AdminRule(name, <any>undefined, { urn })
            case "azure-native:network:AdminRuleCollection":
                return new AdminRuleCollection(name, <any>undefined, { urn })
            case "azure-native:network:ApplicationGateway":
                return new ApplicationGateway(name, <any>undefined, { urn })
            case "azure-native:network:ApplicationGatewayPrivateEndpointConnection":
                return new ApplicationGatewayPrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:network:ApplicationSecurityGroup":
                return new ApplicationSecurityGroup(name, <any>undefined, { urn })
            case "azure-native:network:AzureFirewall":
                return new AzureFirewall(name, <any>undefined, { urn })
            case "azure-native:network:BastionHost":
                return new BastionHost(name, <any>undefined, { urn })
            case "azure-native:network:ConfigurationPolicyGroup":
                return new ConfigurationPolicyGroup(name, <any>undefined, { urn })
            case "azure-native:network:ConnectionMonitor":
                return new ConnectionMonitor(name, <any>undefined, { urn })
            case "azure-native:network:ConnectivityConfiguration":
                return new ConnectivityConfiguration(name, <any>undefined, { urn })
            case "azure-native:network:CustomIPPrefix":
                return new CustomIPPrefix(name, <any>undefined, { urn })
            case "azure-native:network:DdosCustomPolicy":
                return new DdosCustomPolicy(name, <any>undefined, { urn })
            case "azure-native:network:DdosProtectionPlan":
                return new DdosProtectionPlan(name, <any>undefined, { urn })
            case "azure-native:network:DefaultAdminRule":
                return new DefaultAdminRule(name, <any>undefined, { urn })
            case "azure-native:network:DefaultUserRule":
                return new DefaultUserRule(name, <any>undefined, { urn })
            case "azure-native:network:DnsForwardingRuleset":
                return new DnsForwardingRuleset(name, <any>undefined, { urn })
            case "azure-native:network:DnsResolver":
                return new DnsResolver(name, <any>undefined, { urn })
            case "azure-native:network:DscpConfiguration":
                return new DscpConfiguration(name, <any>undefined, { urn })
            case "azure-native:network:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "azure-native:network:Experiment":
                return new Experiment(name, <any>undefined, { urn })
            case "azure-native:network:ExpressRouteCircuit":
                return new ExpressRouteCircuit(name, <any>undefined, { urn })
            case "azure-native:network:ExpressRouteCircuitAuthorization":
                return new ExpressRouteCircuitAuthorization(name, <any>undefined, { urn })
            case "azure-native:network:ExpressRouteCircuitConnection":
                return new ExpressRouteCircuitConnection(name, <any>undefined, { urn })
            case "azure-native:network:ExpressRouteCircuitPeering":
                return new ExpressRouteCircuitPeering(name, <any>undefined, { urn })
            case "azure-native:network:ExpressRouteConnection":
                return new ExpressRouteConnection(name, <any>undefined, { urn })
            case "azure-native:network:ExpressRouteCrossConnectionPeering":
                return new ExpressRouteCrossConnectionPeering(name, <any>undefined, { urn })
            case "azure-native:network:ExpressRouteGateway":
                return new ExpressRouteGateway(name, <any>undefined, { urn })
            case "azure-native:network:ExpressRoutePort":
                return new ExpressRoutePort(name, <any>undefined, { urn })
            case "azure-native:network:ExpressRoutePortAuthorization":
                return new ExpressRoutePortAuthorization(name, <any>undefined, { urn })
            case "azure-native:network:FirewallPolicy":
                return new FirewallPolicy(name, <any>undefined, { urn })
            case "azure-native:network:FirewallPolicyRuleCollectionGroup":
                return new FirewallPolicyRuleCollectionGroup(name, <any>undefined, { urn })
            case "azure-native:network:FirewallPolicyRuleGroup":
                return new FirewallPolicyRuleGroup(name, <any>undefined, { urn })
            case "azure-native:network:FlowLog":
                return new FlowLog(name, <any>undefined, { urn })
            case "azure-native:network:ForwardingRule":
                return new ForwardingRule(name, <any>undefined, { urn })
            case "azure-native:network:FrontDoor":
                return new FrontDoor(name, <any>undefined, { urn })
            case "azure-native:network:HubRouteTable":
                return new HubRouteTable(name, <any>undefined, { urn })
            case "azure-native:network:HubVirtualNetworkConnection":
                return new HubVirtualNetworkConnection(name, <any>undefined, { urn })
            case "azure-native:network:InboundEndpoint":
                return new InboundEndpoint(name, <any>undefined, { urn })
            case "azure-native:network:InboundNatRule":
                return new InboundNatRule(name, <any>undefined, { urn })
            case "azure-native:network:IpAllocation":
                return new IpAllocation(name, <any>undefined, { urn })
            case "azure-native:network:IpGroup":
                return new IpGroup(name, <any>undefined, { urn })
            case "azure-native:network:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "azure-native:network:LoadBalancerBackendAddressPool":
                return new LoadBalancerBackendAddressPool(name, <any>undefined, { urn })
            case "azure-native:network:LocalNetworkGateway":
                return new LocalNetworkGateway(name, <any>undefined, { urn })
            case "azure-native:network:ManagementGroupNetworkManagerConnection":
                return new ManagementGroupNetworkManagerConnection(name, <any>undefined, { urn })
            case "azure-native:network:NatGateway":
                return new NatGateway(name, <any>undefined, { urn })
            case "azure-native:network:NatRule":
                return new NatRule(name, <any>undefined, { urn })
            case "azure-native:network:NetworkExperimentProfile":
                return new NetworkExperimentProfile(name, <any>undefined, { urn })
            case "azure-native:network:NetworkGroup":
                return new NetworkGroup(name, <any>undefined, { urn })
            case "azure-native:network:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "azure-native:network:NetworkInterfaceTapConfiguration":
                return new NetworkInterfaceTapConfiguration(name, <any>undefined, { urn })
            case "azure-native:network:NetworkManager":
                return new NetworkManager(name, <any>undefined, { urn })
            case "azure-native:network:NetworkProfile":
                return new NetworkProfile(name, <any>undefined, { urn })
            case "azure-native:network:NetworkSecurityGroup":
                return new NetworkSecurityGroup(name, <any>undefined, { urn })
            case "azure-native:network:NetworkSecurityPerimeter":
                return new NetworkSecurityPerimeter(name, <any>undefined, { urn })
            case "azure-native:network:NetworkVirtualAppliance":
                return new NetworkVirtualAppliance(name, <any>undefined, { urn })
            case "azure-native:network:NetworkWatcher":
                return new NetworkWatcher(name, <any>undefined, { urn })
            case "azure-native:network:NspAccessRule":
                return new NspAccessRule(name, <any>undefined, { urn })
            case "azure-native:network:NspAssociation":
                return new NspAssociation(name, <any>undefined, { urn })
            case "azure-native:network:NspProfile":
                return new NspProfile(name, <any>undefined, { urn })
            case "azure-native:network:OutboundEndpoint":
                return new OutboundEndpoint(name, <any>undefined, { urn })
            case "azure-native:network:P2sVpnGateway":
                return new P2sVpnGateway(name, <any>undefined, { urn })
            case "azure-native:network:P2sVpnServerConfiguration":
                return new P2sVpnServerConfiguration(name, <any>undefined, { urn })
            case "azure-native:network:PacketCapture":
                return new PacketCapture(name, <any>undefined, { urn })
            case "azure-native:network:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "azure-native:network:PrivateDnsZoneGroup":
                return new PrivateDnsZoneGroup(name, <any>undefined, { urn })
            case "azure-native:network:PrivateEndpoint":
                return new PrivateEndpoint(name, <any>undefined, { urn })
            case "azure-native:network:PrivateLinkService":
                return new PrivateLinkService(name, <any>undefined, { urn })
            case "azure-native:network:PrivateLinkServicePrivateEndpointConnection":
                return new PrivateLinkServicePrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:network:PrivateRecordSet":
                return new PrivateRecordSet(name, <any>undefined, { urn })
            case "azure-native:network:PrivateZone":
                return new PrivateZone(name, <any>undefined, { urn })
            case "azure-native:network:Profile":
                return new Profile(name, <any>undefined, { urn })
            case "azure-native:network:PublicIPAddress":
                return new PublicIPAddress(name, <any>undefined, { urn })
            case "azure-native:network:PublicIPPrefix":
                return new PublicIPPrefix(name, <any>undefined, { urn })
            case "azure-native:network:RecordSet":
                return new RecordSet(name, <any>undefined, { urn })
            case "azure-native:network:Route":
                return new Route(name, <any>undefined, { urn })
            case "azure-native:network:RouteFilter":
                return new RouteFilter(name, <any>undefined, { urn })
            case "azure-native:network:RouteFilterRule":
                return new RouteFilterRule(name, <any>undefined, { urn })
            case "azure-native:network:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "azure-native:network:RoutingIntent":
                return new RoutingIntent(name, <any>undefined, { urn })
            case "azure-native:network:RulesEngine":
                return new RulesEngine(name, <any>undefined, { urn })
            case "azure-native:network:ScopeConnection":
                return new ScopeConnection(name, <any>undefined, { urn })
            case "azure-native:network:SecurityAdminConfiguration":
                return new SecurityAdminConfiguration(name, <any>undefined, { urn })
            case "azure-native:network:SecurityPartnerProvider":
                return new SecurityPartnerProvider(name, <any>undefined, { urn })
            case "azure-native:network:SecurityRule":
                return new SecurityRule(name, <any>undefined, { urn })
            case "azure-native:network:SecurityUserConfiguration":
                return new SecurityUserConfiguration(name, <any>undefined, { urn })
            case "azure-native:network:ServiceEndpointPolicy":
                return new ServiceEndpointPolicy(name, <any>undefined, { urn })
            case "azure-native:network:ServiceEndpointPolicyDefinition":
                return new ServiceEndpointPolicyDefinition(name, <any>undefined, { urn })
            case "azure-native:network:StaticMember":
                return new StaticMember(name, <any>undefined, { urn })
            case "azure-native:network:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "azure-native:network:SubscriptionNetworkManagerConnection":
                return new SubscriptionNetworkManagerConnection(name, <any>undefined, { urn })
            case "azure-native:network:TrafficManagerUserMetricsKey":
                return new TrafficManagerUserMetricsKey(name, <any>undefined, { urn })
            case "azure-native:network:UserRule":
                return new UserRule(name, <any>undefined, { urn })
            case "azure-native:network:UserRuleCollection":
                return new UserRuleCollection(name, <any>undefined, { urn })
            case "azure-native:network:VirtualApplianceSite":
                return new VirtualApplianceSite(name, <any>undefined, { urn })
            case "azure-native:network:VirtualHub":
                return new VirtualHub(name, <any>undefined, { urn })
            case "azure-native:network:VirtualHubBgpConnection":
                return new VirtualHubBgpConnection(name, <any>undefined, { urn })
            case "azure-native:network:VirtualHubIpConfiguration":
                return new VirtualHubIpConfiguration(name, <any>undefined, { urn })
            case "azure-native:network:VirtualHubRouteTableV2":
                return new VirtualHubRouteTableV2(name, <any>undefined, { urn })
            case "azure-native:network:VirtualNetwork":
                return new VirtualNetwork(name, <any>undefined, { urn })
            case "azure-native:network:VirtualNetworkGateway":
                return new VirtualNetworkGateway(name, <any>undefined, { urn })
            case "azure-native:network:VirtualNetworkGatewayConnection":
                return new VirtualNetworkGatewayConnection(name, <any>undefined, { urn })
            case "azure-native:network:VirtualNetworkGatewayNatRule":
                return new VirtualNetworkGatewayNatRule(name, <any>undefined, { urn })
            case "azure-native:network:VirtualNetworkLink":
                return new VirtualNetworkLink(name, <any>undefined, { urn })
            case "azure-native:network:VirtualNetworkPeering":
                return new VirtualNetworkPeering(name, <any>undefined, { urn })
            case "azure-native:network:VirtualNetworkTap":
                return new VirtualNetworkTap(name, <any>undefined, { urn })
            case "azure-native:network:VirtualRouter":
                return new VirtualRouter(name, <any>undefined, { urn })
            case "azure-native:network:VirtualRouterPeering":
                return new VirtualRouterPeering(name, <any>undefined, { urn })
            case "azure-native:network:VirtualWan":
                return new VirtualWan(name, <any>undefined, { urn })
            case "azure-native:network:VpnConnection":
                return new VpnConnection(name, <any>undefined, { urn })
            case "azure-native:network:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            case "azure-native:network:VpnServerConfiguration":
                return new VpnServerConfiguration(name, <any>undefined, { urn })
            case "azure-native:network:VpnSite":
                return new VpnSite(name, <any>undefined, { urn })
            case "azure-native:network:WebApplicationFirewallPolicy":
                return new WebApplicationFirewallPolicy(name, <any>undefined, { urn })
            case "azure-native:network:Zone":
                return new Zone(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "network", _module)
