// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export * from "./applicationGateway";
export * from "./expressRouteCircuit";
export * from "./expressRouteCircuitAuthorization";
export * from "./expressRouteCircuitPeering";
export * from "./getApplicationGateway";
export * from "./getExpressRouteCircuit";
export * from "./getExpressRouteCircuitAuthorization";
export * from "./getExpressRouteCircuitPeering";
export * from "./getLoadBalancer";
export * from "./getNetworkInterface";
export * from "./getNetworkSecurityGroup";
export * from "./getPublicIpAddress";
export * from "./getRoute";
export * from "./getRouteTable";
export * from "./getSecurityRule";
export * from "./getSubnet";
export * from "./getVirtualNetwork";
export * from "./loadBalancer";
export * from "./networkInterface";
export * from "./networkSecurityGroup";
export * from "./publicIpAddress";
export * from "./route";
export * from "./routeTable";
export * from "./securityRule";
export * from "./subnet";
export * from "./virtualNetwork";

// Export enums:
export * from "../../types/enums/network/v20150501preview";

// Import resources to register:
import { ApplicationGateway } from "./applicationGateway";
import { ExpressRouteCircuit } from "./expressRouteCircuit";
import { ExpressRouteCircuitAuthorization } from "./expressRouteCircuitAuthorization";
import { ExpressRouteCircuitPeering } from "./expressRouteCircuitPeering";
import { LoadBalancer } from "./loadBalancer";
import { NetworkInterface } from "./networkInterface";
import { NetworkSecurityGroup } from "./networkSecurityGroup";
import { PublicIpAddress } from "./publicIpAddress";
import { Route } from "./route";
import { RouteTable } from "./routeTable";
import { SecurityRule } from "./securityRule";
import { Subnet } from "./subnet";
import { VirtualNetwork } from "./virtualNetwork";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-nextgen:network/v20150501preview:ApplicationGateway":
                return new ApplicationGateway(name, <any>undefined, { urn })
            case "azure-nextgen:network/v20150501preview:ExpressRouteCircuit":
                return new ExpressRouteCircuit(name, <any>undefined, { urn })
            case "azure-nextgen:network/v20150501preview:ExpressRouteCircuitAuthorization":
                return new ExpressRouteCircuitAuthorization(name, <any>undefined, { urn })
            case "azure-nextgen:network/v20150501preview:ExpressRouteCircuitPeering":
                return new ExpressRouteCircuitPeering(name, <any>undefined, { urn })
            case "azure-nextgen:network/v20150501preview:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "azure-nextgen:network/v20150501preview:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "azure-nextgen:network/v20150501preview:NetworkSecurityGroup":
                return new NetworkSecurityGroup(name, <any>undefined, { urn })
            case "azure-nextgen:network/v20150501preview:PublicIpAddress":
                return new PublicIpAddress(name, <any>undefined, { urn })
            case "azure-nextgen:network/v20150501preview:Route":
                return new Route(name, <any>undefined, { urn })
            case "azure-nextgen:network/v20150501preview:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "azure-nextgen:network/v20150501preview:SecurityRule":
                return new SecurityRule(name, <any>undefined, { urn })
            case "azure-nextgen:network/v20150501preview:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "azure-nextgen:network/v20150501preview:VirtualNetwork":
                return new VirtualNetwork(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-nextgen", "network/v20150501preview", _module)
