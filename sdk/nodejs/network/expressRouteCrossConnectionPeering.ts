// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Peering in an ExpressRoute Cross Connection resource.
 *
 * Uses Azure REST API version 2024-05-01. In version 2.x of the Azure Native provider, it used API version 2023-02-01.
 *
 * Other available API versions: 2018-06-01, 2018-07-01, 2018-08-01, 2018-10-01, 2018-11-01, 2018-12-01, 2019-02-01, 2019-04-01, 2019-06-01, 2019-07-01, 2019-08-01, 2019-09-01, 2019-11-01, 2019-12-01, 2020-03-01, 2020-04-01, 2020-05-01, 2020-06-01, 2020-07-01, 2020-08-01, 2020-11-01, 2021-02-01, 2021-03-01, 2021-05-01, 2021-08-01, 2022-01-01, 2022-05-01, 2022-07-01, 2022-09-01, 2022-11-01, 2023-02-01, 2023-04-01, 2023-05-01, 2023-06-01, 2023-09-01, 2023-11-01, 2024-01-01, 2024-03-01, 2024-07-01, 2024-10-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class ExpressRouteCrossConnectionPeering extends pulumi.CustomResource {
    /**
     * Get an existing ExpressRouteCrossConnectionPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ExpressRouteCrossConnectionPeering {
        return new ExpressRouteCrossConnectionPeering(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:network:ExpressRouteCrossConnectionPeering';

    /**
     * Returns true if the given object is an instance of ExpressRouteCrossConnectionPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExpressRouteCrossConnectionPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressRouteCrossConnectionPeering.__pulumiType;
    }

    /**
     * The Azure ASN.
     */
    declare public /*out*/ readonly azureASN: pulumi.Output<number>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    /**
     * The GatewayManager Etag.
     */
    declare public readonly gatewayManagerEtag: pulumi.Output<string | undefined>;
    /**
     * The IPv6 peering configuration.
     */
    declare public readonly ipv6PeeringConfig: pulumi.Output<outputs.network.Ipv6ExpressRouteCircuitPeeringConfigResponse | undefined>;
    /**
     * Who was the last to modify the peering.
     */
    declare public /*out*/ readonly lastModifiedBy: pulumi.Output<string>;
    /**
     * The Microsoft peering configuration.
     */
    declare public readonly microsoftPeeringConfig: pulumi.Output<outputs.network.ExpressRouteCircuitPeeringConfigResponse | undefined>;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    declare public readonly name: pulumi.Output<string | undefined>;
    /**
     * The peer ASN.
     */
    declare public readonly peerASN: pulumi.Output<number | undefined>;
    /**
     * The peering type.
     */
    declare public readonly peeringType: pulumi.Output<string | undefined>;
    /**
     * The primary port.
     */
    declare public /*out*/ readonly primaryAzurePort: pulumi.Output<string>;
    /**
     * The primary address prefix.
     */
    declare public readonly primaryPeerAddressPrefix: pulumi.Output<string | undefined>;
    /**
     * The provisioning state of the express route cross connection peering resource.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * The secondary port.
     */
    declare public /*out*/ readonly secondaryAzurePort: pulumi.Output<string>;
    /**
     * The secondary address prefix.
     */
    declare public readonly secondaryPeerAddressPrefix: pulumi.Output<string | undefined>;
    /**
     * The shared key.
     */
    declare public readonly sharedKey: pulumi.Output<string | undefined>;
    /**
     * The peering state.
     */
    declare public readonly state: pulumi.Output<string | undefined>;
    /**
     * The VLAN ID.
     */
    declare public readonly vlanId: pulumi.Output<number | undefined>;

    /**
     * Create a ExpressRouteCrossConnectionPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressRouteCrossConnectionPeeringArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.crossConnectionName === undefined && !opts.urn) {
                throw new Error("Missing required property 'crossConnectionName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["crossConnectionName"] = args?.crossConnectionName;
            resourceInputs["gatewayManagerEtag"] = args?.gatewayManagerEtag;
            resourceInputs["id"] = args?.id;
            resourceInputs["ipv6PeeringConfig"] = args?.ipv6PeeringConfig;
            resourceInputs["microsoftPeeringConfig"] = args?.microsoftPeeringConfig;
            resourceInputs["name"] = args?.name;
            resourceInputs["peerASN"] = args?.peerASN;
            resourceInputs["peeringName"] = args?.peeringName;
            resourceInputs["peeringType"] = args?.peeringType;
            resourceInputs["primaryPeerAddressPrefix"] = args?.primaryPeerAddressPrefix;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["secondaryPeerAddressPrefix"] = args?.secondaryPeerAddressPrefix;
            resourceInputs["sharedKey"] = args?.sharedKey;
            resourceInputs["state"] = args?.state;
            resourceInputs["vlanId"] = args?.vlanId;
            resourceInputs["azureASN"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["lastModifiedBy"] = undefined /*out*/;
            resourceInputs["primaryAzurePort"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["secondaryAzurePort"] = undefined /*out*/;
        } else {
            resourceInputs["azureASN"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["gatewayManagerEtag"] = undefined /*out*/;
            resourceInputs["ipv6PeeringConfig"] = undefined /*out*/;
            resourceInputs["lastModifiedBy"] = undefined /*out*/;
            resourceInputs["microsoftPeeringConfig"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["peerASN"] = undefined /*out*/;
            resourceInputs["peeringType"] = undefined /*out*/;
            resourceInputs["primaryAzurePort"] = undefined /*out*/;
            resourceInputs["primaryPeerAddressPrefix"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["secondaryAzurePort"] = undefined /*out*/;
            resourceInputs["secondaryPeerAddressPrefix"] = undefined /*out*/;
            resourceInputs["sharedKey"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["vlanId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:network/v20180201:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20180401:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20180601:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20180701:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20180801:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20181001:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20181101:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20181201:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20190201:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20190401:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20190601:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20190701:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20190801:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20190901:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20191101:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20191201:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20200301:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20200401:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20200501:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20200601:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20200701:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20200801:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20201101:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20210201:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20210301:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20210501:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20210801:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20220101:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20220501:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20220701:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20220901:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20221101:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20230201:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20230401:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20230501:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20230601:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20230901:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20231101:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20240101:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20240301:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20240501:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20240701:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20241001:ExpressRouteCrossConnectionPeering" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ExpressRouteCrossConnectionPeering.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ExpressRouteCrossConnectionPeering resource.
 */
export interface ExpressRouteCrossConnectionPeeringArgs {
    /**
     * The name of the ExpressRouteCrossConnection.
     */
    crossConnectionName: pulumi.Input<string>;
    /**
     * The GatewayManager Etag.
     */
    gatewayManagerEtag?: pulumi.Input<string>;
    /**
     * Resource ID.
     */
    id?: pulumi.Input<string>;
    /**
     * The IPv6 peering configuration.
     */
    ipv6PeeringConfig?: pulumi.Input<inputs.network.Ipv6ExpressRouteCircuitPeeringConfigArgs>;
    /**
     * The Microsoft peering configuration.
     */
    microsoftPeeringConfig?: pulumi.Input<inputs.network.ExpressRouteCircuitPeeringConfigArgs>;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The peer ASN.
     */
    peerASN?: pulumi.Input<number>;
    /**
     * The name of the peering.
     */
    peeringName?: pulumi.Input<string>;
    /**
     * The peering type.
     */
    peeringType?: pulumi.Input<string | enums.network.ExpressRoutePeeringType>;
    /**
     * The primary address prefix.
     */
    primaryPeerAddressPrefix?: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The secondary address prefix.
     */
    secondaryPeerAddressPrefix?: pulumi.Input<string>;
    /**
     * The shared key.
     */
    sharedKey?: pulumi.Input<string>;
    /**
     * The peering state.
     */
    state?: pulumi.Input<string | enums.network.ExpressRoutePeeringState>;
    /**
     * The VLAN ID.
     */
    vlanId?: pulumi.Input<number>;
}
