// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The network manager connectivity configuration resource
 *
 * Uses Azure REST API version 2024-05-01. In version 2.x of the Azure Native provider, it used API version 2023-02-01.
 *
 * Other available API versions: 2021-02-01-preview, 2022-01-01, 2022-02-01-preview, 2022-04-01-preview, 2022-05-01, 2022-07-01, 2022-09-01, 2022-11-01, 2023-02-01, 2023-04-01, 2023-05-01, 2023-06-01, 2023-09-01, 2023-11-01, 2024-01-01, 2024-03-01, 2024-07-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class ConnectivityConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing ConnectivityConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ConnectivityConfiguration {
        return new ConnectivityConfiguration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:network:ConnectivityConfiguration';

    /**
     * Returns true if the given object is an instance of ConnectivityConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectivityConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectivityConfiguration.__pulumiType;
    }

    /**
     * Groups for configuration
     */
    declare public readonly appliesToGroups: pulumi.Output<outputs.network.ConnectivityGroupItemResponse[]>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * Connectivity topology type.
     */
    declare public readonly connectivityTopology: pulumi.Output<string>;
    /**
     * Flag if need to remove current existing peerings.
     */
    declare public readonly deleteExistingPeering: pulumi.Output<string | undefined>;
    /**
     * A description of the connectivity configuration.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    /**
     * List of hubItems
     */
    declare public readonly hubs: pulumi.Output<outputs.network.HubResponse[] | undefined>;
    /**
     * Flag if global mesh is supported.
     */
    declare public readonly isGlobal: pulumi.Output<string | undefined>;
    /**
     * Resource name.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The provisioning state of the connectivity configuration resource.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * Unique identifier for this resource.
     */
    declare public /*out*/ readonly resourceGuid: pulumi.Output<string>;
    /**
     * The system metadata related to this resource.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.network.SystemDataResponse>;
    /**
     * Resource type.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a ConnectivityConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectivityConfigurationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.appliesToGroups === undefined && !opts.urn) {
                throw new Error("Missing required property 'appliesToGroups'");
            }
            if (args?.connectivityTopology === undefined && !opts.urn) {
                throw new Error("Missing required property 'connectivityTopology'");
            }
            if (args?.networkManagerName === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkManagerName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["appliesToGroups"] = args?.appliesToGroups;
            resourceInputs["configurationName"] = args?.configurationName;
            resourceInputs["connectivityTopology"] = args?.connectivityTopology;
            resourceInputs["deleteExistingPeering"] = args?.deleteExistingPeering;
            resourceInputs["description"] = args?.description;
            resourceInputs["hubs"] = args?.hubs;
            resourceInputs["isGlobal"] = args?.isGlobal;
            resourceInputs["networkManagerName"] = args?.networkManagerName;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceGuid"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["appliesToGroups"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["connectivityTopology"] = undefined /*out*/;
            resourceInputs["deleteExistingPeering"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["hubs"] = undefined /*out*/;
            resourceInputs["isGlobal"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceGuid"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:network/v20210201preview:ConnectivityConfiguration" }, { type: "azure-native:network/v20210501preview:ConnectivityConfiguration" }, { type: "azure-native:network/v20220101:ConnectivityConfiguration" }, { type: "azure-native:network/v20220201preview:ConnectivityConfiguration" }, { type: "azure-native:network/v20220401preview:ConnectivityConfiguration" }, { type: "azure-native:network/v20220501:ConnectivityConfiguration" }, { type: "azure-native:network/v20220701:ConnectivityConfiguration" }, { type: "azure-native:network/v20220901:ConnectivityConfiguration" }, { type: "azure-native:network/v20221101:ConnectivityConfiguration" }, { type: "azure-native:network/v20230201:ConnectivityConfiguration" }, { type: "azure-native:network/v20230401:ConnectivityConfiguration" }, { type: "azure-native:network/v20230501:ConnectivityConfiguration" }, { type: "azure-native:network/v20230601:ConnectivityConfiguration" }, { type: "azure-native:network/v20230901:ConnectivityConfiguration" }, { type: "azure-native:network/v20231101:ConnectivityConfiguration" }, { type: "azure-native:network/v20240101:ConnectivityConfiguration" }, { type: "azure-native:network/v20240301:ConnectivityConfiguration" }, { type: "azure-native:network/v20240501:ConnectivityConfiguration" }, { type: "azure-native:network/v20240701:ConnectivityConfiguration" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ConnectivityConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ConnectivityConfiguration resource.
 */
export interface ConnectivityConfigurationArgs {
    /**
     * Groups for configuration
     */
    appliesToGroups: pulumi.Input<pulumi.Input<inputs.network.ConnectivityGroupItemArgs>[]>;
    /**
     * The name of the network manager connectivity configuration.
     */
    configurationName?: pulumi.Input<string>;
    /**
     * Connectivity topology type.
     */
    connectivityTopology: pulumi.Input<string | enums.network.ConnectivityTopology>;
    /**
     * Flag if need to remove current existing peerings.
     */
    deleteExistingPeering?: pulumi.Input<string | enums.network.DeleteExistingPeering>;
    /**
     * A description of the connectivity configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * List of hubItems
     */
    hubs?: pulumi.Input<pulumi.Input<inputs.network.HubArgs>[]>;
    /**
     * Flag if global mesh is supported.
     */
    isGlobal?: pulumi.Input<string | enums.network.IsGlobal>;
    /**
     * The name of the network manager.
     */
    networkManagerName: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
}
