// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Differentiated Services Code Point configuration for any given network interface
 *
 * Uses Azure REST API version 2024-05-01. In version 2.x of the Azure Native provider, it used API version 2023-02-01.
 *
 * Other available API versions: 2020-06-01, 2020-07-01, 2020-08-01, 2020-11-01, 2021-02-01, 2021-03-01, 2021-05-01, 2021-08-01, 2022-01-01, 2022-05-01, 2022-07-01, 2022-09-01, 2022-11-01, 2023-02-01, 2023-04-01, 2023-05-01, 2023-06-01, 2023-09-01, 2023-11-01, 2024-01-01, 2024-03-01, 2024-07-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class DscpConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing DscpConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DscpConfiguration {
        return new DscpConfiguration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:network:DscpConfiguration';

    /**
     * Returns true if the given object is an instance of DscpConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DscpConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DscpConfiguration.__pulumiType;
    }

    /**
     * Associated Network Interfaces to the DSCP Configuration.
     */
    declare public /*out*/ readonly associatedNetworkInterfaces: pulumi.Output<outputs.network.NetworkInterfaceResponse[]>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * Destination IP ranges.
     */
    declare public readonly destinationIpRanges: pulumi.Output<outputs.network.QosIpRangeResponse[] | undefined>;
    /**
     * Destination port ranges.
     */
    declare public readonly destinationPortRanges: pulumi.Output<outputs.network.QosPortRangeResponse[] | undefined>;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    /**
     * Resource location.
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * List of markings to be used in the configuration.
     */
    declare public readonly markings: pulumi.Output<number[] | undefined>;
    /**
     * Resource name.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * RNM supported protocol types.
     */
    declare public readonly protocol: pulumi.Output<string | undefined>;
    /**
     * The provisioning state of the DSCP Configuration resource.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * Qos Collection ID generated by RNM.
     */
    declare public /*out*/ readonly qosCollectionId: pulumi.Output<string>;
    /**
     * QoS object definitions
     */
    declare public readonly qosDefinitionCollection: pulumi.Output<outputs.network.QosDefinitionResponse[] | undefined>;
    /**
     * The resource GUID property of the DSCP Configuration resource.
     */
    declare public /*out*/ readonly resourceGuid: pulumi.Output<string>;
    /**
     * Source IP ranges.
     */
    declare public readonly sourceIpRanges: pulumi.Output<outputs.network.QosIpRangeResponse[] | undefined>;
    /**
     * Sources port ranges.
     */
    declare public readonly sourcePortRanges: pulumi.Output<outputs.network.QosPortRangeResponse[] | undefined>;
    /**
     * Resource tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a DscpConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DscpConfigurationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["destinationIpRanges"] = args?.destinationIpRanges;
            resourceInputs["destinationPortRanges"] = args?.destinationPortRanges;
            resourceInputs["dscpConfigurationName"] = args?.dscpConfigurationName;
            resourceInputs["id"] = args?.id;
            resourceInputs["location"] = args?.location;
            resourceInputs["markings"] = args?.markings;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["qosDefinitionCollection"] = args?.qosDefinitionCollection;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["sourceIpRanges"] = args?.sourceIpRanges;
            resourceInputs["sourcePortRanges"] = args?.sourcePortRanges;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["associatedNetworkInterfaces"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["qosCollectionId"] = undefined /*out*/;
            resourceInputs["resourceGuid"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["associatedNetworkInterfaces"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["destinationIpRanges"] = undefined /*out*/;
            resourceInputs["destinationPortRanges"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["markings"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["protocol"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["qosCollectionId"] = undefined /*out*/;
            resourceInputs["qosDefinitionCollection"] = undefined /*out*/;
            resourceInputs["resourceGuid"] = undefined /*out*/;
            resourceInputs["sourceIpRanges"] = undefined /*out*/;
            resourceInputs["sourcePortRanges"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:network/v20200601:DscpConfiguration" }, { type: "azure-native:network/v20200701:DscpConfiguration" }, { type: "azure-native:network/v20200801:DscpConfiguration" }, { type: "azure-native:network/v20201101:DscpConfiguration" }, { type: "azure-native:network/v20210201:DscpConfiguration" }, { type: "azure-native:network/v20210301:DscpConfiguration" }, { type: "azure-native:network/v20210501:DscpConfiguration" }, { type: "azure-native:network/v20210801:DscpConfiguration" }, { type: "azure-native:network/v20220101:DscpConfiguration" }, { type: "azure-native:network/v20220501:DscpConfiguration" }, { type: "azure-native:network/v20220701:DscpConfiguration" }, { type: "azure-native:network/v20220901:DscpConfiguration" }, { type: "azure-native:network/v20221101:DscpConfiguration" }, { type: "azure-native:network/v20230201:DscpConfiguration" }, { type: "azure-native:network/v20230401:DscpConfiguration" }, { type: "azure-native:network/v20230501:DscpConfiguration" }, { type: "azure-native:network/v20230601:DscpConfiguration" }, { type: "azure-native:network/v20230901:DscpConfiguration" }, { type: "azure-native:network/v20231101:DscpConfiguration" }, { type: "azure-native:network/v20240101:DscpConfiguration" }, { type: "azure-native:network/v20240301:DscpConfiguration" }, { type: "azure-native:network/v20240501:DscpConfiguration" }, { type: "azure-native:network/v20240701:DscpConfiguration" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(DscpConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DscpConfiguration resource.
 */
export interface DscpConfigurationArgs {
    /**
     * Destination IP ranges.
     */
    destinationIpRanges?: pulumi.Input<pulumi.Input<inputs.network.QosIpRangeArgs>[]>;
    /**
     * Destination port ranges.
     */
    destinationPortRanges?: pulumi.Input<pulumi.Input<inputs.network.QosPortRangeArgs>[]>;
    /**
     * The name of the resource.
     */
    dscpConfigurationName?: pulumi.Input<string>;
    /**
     * Resource ID.
     */
    id?: pulumi.Input<string>;
    /**
     * Resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * List of markings to be used in the configuration.
     */
    markings?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * RNM supported protocol types.
     */
    protocol?: pulumi.Input<string | enums.network.ProtocolType>;
    /**
     * QoS object definitions
     */
    qosDefinitionCollection?: pulumi.Input<pulumi.Input<inputs.network.QosDefinitionArgs>[]>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Source IP ranges.
     */
    sourceIpRanges?: pulumi.Input<pulumi.Input<inputs.network.QosIpRangeArgs>[]>;
    /**
     * Sources port ranges.
     */
    sourcePortRanges?: pulumi.Input<pulumi.Input<inputs.network.QosPortRangeArgs>[]>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
