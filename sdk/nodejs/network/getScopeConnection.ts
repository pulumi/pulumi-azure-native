// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * The Scope Connections resource
 * API Version: 2022-04-01-preview.
 */
export function getScopeConnection(args: GetScopeConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetScopeConnectionResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("azure-native:network:getScopeConnection", {
        "networkManagerName": args.networkManagerName,
        "resourceGroupName": args.resourceGroupName,
        "scopeConnectionName": args.scopeConnectionName,
    }, opts);
}

export interface GetScopeConnectionArgs {
    /**
     * The name of the network manager.
     */
    networkManagerName: string;
    /**
     * The name of the resource group.
     */
    resourceGroupName: string;
    /**
     * Name for the cross-tenant connection.
     */
    scopeConnectionName: string;
}

/**
 * The Scope Connections resource
 */
export interface GetScopeConnectionResult {
    /**
     * A description of the scope connection.
     */
    readonly description?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    readonly etag: string;
    /**
     * Resource ID.
     */
    readonly id: string;
    /**
     * Resource name.
     */
    readonly name: string;
    /**
     * Resource ID.
     */
    readonly resourceId?: string;
    /**
     * The system metadata related to this resource.
     */
    readonly systemData: outputs.network.SystemDataResponse;
    /**
     * Tenant ID.
     */
    readonly tenantId?: string;
    /**
     * Resource type.
     */
    readonly type: string;
}

export function getScopeConnectionOutput(args: GetScopeConnectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetScopeConnectionResult> {
    return pulumi.output(args).apply(a => getScopeConnection(a, opts))
}

export interface GetScopeConnectionOutputArgs {
    /**
     * The name of the network manager.
     */
    networkManagerName: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Name for the cross-tenant connection.
     */
    scopeConnectionName: pulumi.Input<string>;
}
