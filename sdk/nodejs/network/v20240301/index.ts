// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { GetNetworkManagerArgs, GetNetworkManagerResult, GetNetworkManagerOutputArgs } from "./getNetworkManager";
export const getNetworkManager: typeof import("./getNetworkManager").getNetworkManager = null as any;
export const getNetworkManagerOutput: typeof import("./getNetworkManager").getNetworkManagerOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkManager","getNetworkManagerOutput"], () => require("./getNetworkManager"));

export { GetNetworkManagerRoutingConfigurationArgs, GetNetworkManagerRoutingConfigurationResult, GetNetworkManagerRoutingConfigurationOutputArgs } from "./getNetworkManagerRoutingConfiguration";
export const getNetworkManagerRoutingConfiguration: typeof import("./getNetworkManagerRoutingConfiguration").getNetworkManagerRoutingConfiguration = null as any;
export const getNetworkManagerRoutingConfigurationOutput: typeof import("./getNetworkManagerRoutingConfiguration").getNetworkManagerRoutingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkManagerRoutingConfiguration","getNetworkManagerRoutingConfigurationOutput"], () => require("./getNetworkManagerRoutingConfiguration"));

export { GetRoutingRuleArgs, GetRoutingRuleResult, GetRoutingRuleOutputArgs } from "./getRoutingRule";
export const getRoutingRule: typeof import("./getRoutingRule").getRoutingRule = null as any;
export const getRoutingRuleOutput: typeof import("./getRoutingRule").getRoutingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingRule","getRoutingRuleOutput"], () => require("./getRoutingRule"));

export { GetRoutingRuleCollectionArgs, GetRoutingRuleCollectionResult, GetRoutingRuleCollectionOutputArgs } from "./getRoutingRuleCollection";
export const getRoutingRuleCollection: typeof import("./getRoutingRuleCollection").getRoutingRuleCollection = null as any;
export const getRoutingRuleCollectionOutput: typeof import("./getRoutingRuleCollection").getRoutingRuleCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingRuleCollection","getRoutingRuleCollectionOutput"], () => require("./getRoutingRuleCollection"));

export { GetSecurityUserRuleArgs, GetSecurityUserRuleResult, GetSecurityUserRuleOutputArgs } from "./getSecurityUserRule";
export const getSecurityUserRule: typeof import("./getSecurityUserRule").getSecurityUserRule = null as any;
export const getSecurityUserRuleOutput: typeof import("./getSecurityUserRule").getSecurityUserRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityUserRule","getSecurityUserRuleOutput"], () => require("./getSecurityUserRule"));

export { GetSecurityUserRuleCollectionArgs, GetSecurityUserRuleCollectionResult, GetSecurityUserRuleCollectionOutputArgs } from "./getSecurityUserRuleCollection";
export const getSecurityUserRuleCollection: typeof import("./getSecurityUserRuleCollection").getSecurityUserRuleCollection = null as any;
export const getSecurityUserRuleCollectionOutput: typeof import("./getSecurityUserRuleCollection").getSecurityUserRuleCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityUserRuleCollection","getSecurityUserRuleCollectionOutput"], () => require("./getSecurityUserRuleCollection"));

export { ListActiveConnectivityConfigurationsArgs, ListActiveConnectivityConfigurationsResult, ListActiveConnectivityConfigurationsOutputArgs } from "./listActiveConnectivityConfigurations";
export const listActiveConnectivityConfigurations: typeof import("./listActiveConnectivityConfigurations").listActiveConnectivityConfigurations = null as any;
export const listActiveConnectivityConfigurationsOutput: typeof import("./listActiveConnectivityConfigurations").listActiveConnectivityConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["listActiveConnectivityConfigurations","listActiveConnectivityConfigurationsOutput"], () => require("./listActiveConnectivityConfigurations"));

export { ListActiveSecurityAdminRulesArgs, ListActiveSecurityAdminRulesResult, ListActiveSecurityAdminRulesOutputArgs } from "./listActiveSecurityAdminRules";
export const listActiveSecurityAdminRules: typeof import("./listActiveSecurityAdminRules").listActiveSecurityAdminRules = null as any;
export const listActiveSecurityAdminRulesOutput: typeof import("./listActiveSecurityAdminRules").listActiveSecurityAdminRulesOutput = null as any;
utilities.lazyLoad(exports, ["listActiveSecurityAdminRules","listActiveSecurityAdminRulesOutput"], () => require("./listActiveSecurityAdminRules"));

export { ListNetworkManagerDeploymentStatusArgs, ListNetworkManagerDeploymentStatusResult, ListNetworkManagerDeploymentStatusOutputArgs } from "./listNetworkManagerDeploymentStatus";
export const listNetworkManagerDeploymentStatus: typeof import("./listNetworkManagerDeploymentStatus").listNetworkManagerDeploymentStatus = null as any;
export const listNetworkManagerDeploymentStatusOutput: typeof import("./listNetworkManagerDeploymentStatus").listNetworkManagerDeploymentStatusOutput = null as any;
utilities.lazyLoad(exports, ["listNetworkManagerDeploymentStatus","listNetworkManagerDeploymentStatusOutput"], () => require("./listNetworkManagerDeploymentStatus"));

export { ListVpnLinkConnectionDefaultSharedKeyArgs, ListVpnLinkConnectionDefaultSharedKeyResult, ListVpnLinkConnectionDefaultSharedKeyOutputArgs } from "./listVpnLinkConnectionDefaultSharedKey";
export const listVpnLinkConnectionDefaultSharedKey: typeof import("./listVpnLinkConnectionDefaultSharedKey").listVpnLinkConnectionDefaultSharedKey = null as any;
export const listVpnLinkConnectionDefaultSharedKeyOutput: typeof import("./listVpnLinkConnectionDefaultSharedKey").listVpnLinkConnectionDefaultSharedKeyOutput = null as any;
utilities.lazyLoad(exports, ["listVpnLinkConnectionDefaultSharedKey","listVpnLinkConnectionDefaultSharedKeyOutput"], () => require("./listVpnLinkConnectionDefaultSharedKey"));

export { NetworkManagerArgs } from "./networkManager";
export type NetworkManager = import("./networkManager").NetworkManager;
export const NetworkManager: typeof import("./networkManager").NetworkManager = null as any;
utilities.lazyLoad(exports, ["NetworkManager"], () => require("./networkManager"));

export { NetworkManagerRoutingConfigurationArgs } from "./networkManagerRoutingConfiguration";
export type NetworkManagerRoutingConfiguration = import("./networkManagerRoutingConfiguration").NetworkManagerRoutingConfiguration;
export const NetworkManagerRoutingConfiguration: typeof import("./networkManagerRoutingConfiguration").NetworkManagerRoutingConfiguration = null as any;
utilities.lazyLoad(exports, ["NetworkManagerRoutingConfiguration"], () => require("./networkManagerRoutingConfiguration"));

export { RoutingRuleArgs } from "./routingRule";
export type RoutingRule = import("./routingRule").RoutingRule;
export const RoutingRule: typeof import("./routingRule").RoutingRule = null as any;
utilities.lazyLoad(exports, ["RoutingRule"], () => require("./routingRule"));

export { RoutingRuleCollectionArgs } from "./routingRuleCollection";
export type RoutingRuleCollection = import("./routingRuleCollection").RoutingRuleCollection;
export const RoutingRuleCollection: typeof import("./routingRuleCollection").RoutingRuleCollection = null as any;
utilities.lazyLoad(exports, ["RoutingRuleCollection"], () => require("./routingRuleCollection"));

export { SecurityUserRuleArgs } from "./securityUserRule";
export type SecurityUserRule = import("./securityUserRule").SecurityUserRule;
export const SecurityUserRule: typeof import("./securityUserRule").SecurityUserRule = null as any;
utilities.lazyLoad(exports, ["SecurityUserRule"], () => require("./securityUserRule"));

export { SecurityUserRuleCollectionArgs } from "./securityUserRuleCollection";
export type SecurityUserRuleCollection = import("./securityUserRuleCollection").SecurityUserRuleCollection;
export const SecurityUserRuleCollection: typeof import("./securityUserRuleCollection").SecurityUserRuleCollection = null as any;
utilities.lazyLoad(exports, ["SecurityUserRuleCollection"], () => require("./securityUserRuleCollection"));


// Export enums:
export * from "../../types/enums/network/v20240301";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:network/v20240301:NetworkManager":
                return new NetworkManager(name, <any>undefined, { urn })
            case "azure-native:network/v20240301:NetworkManagerRoutingConfiguration":
                return new NetworkManagerRoutingConfiguration(name, <any>undefined, { urn })
            case "azure-native:network/v20240301:RoutingRule":
                return new RoutingRule(name, <any>undefined, { urn })
            case "azure-native:network/v20240301:RoutingRuleCollection":
                return new RoutingRuleCollection(name, <any>undefined, { urn })
            case "azure-native:network/v20240301:SecurityUserRule":
                return new SecurityUserRule(name, <any>undefined, { urn })
            case "azure-native:network/v20240301:SecurityUserRuleCollection":
                return new SecurityUserRuleCollection(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "network/v20240301", _module)
