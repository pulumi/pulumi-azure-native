// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * VirtualHub Resource.
 *
 * Uses Azure REST API version 2024-05-01. In version 2.x of the Azure Native provider, it used API version 2023-02-01.
 *
 * Other available API versions: 2018-06-01, 2018-07-01, 2018-08-01, 2018-10-01, 2018-11-01, 2018-12-01, 2019-02-01, 2019-04-01, 2019-06-01, 2019-07-01, 2019-08-01, 2019-09-01, 2019-11-01, 2019-12-01, 2020-03-01, 2020-04-01, 2020-05-01, 2020-06-01, 2020-07-01, 2020-08-01, 2020-11-01, 2021-02-01, 2021-03-01, 2021-05-01, 2021-08-01, 2022-01-01, 2022-05-01, 2022-07-01, 2022-09-01, 2022-11-01, 2023-02-01, 2023-04-01, 2023-05-01, 2023-06-01, 2023-09-01, 2023-11-01, 2024-01-01, 2024-03-01, 2024-07-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class VirtualHub extends pulumi.CustomResource {
    /**
     * Get an existing VirtualHub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VirtualHub {
        return new VirtualHub(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:network:VirtualHub';

    /**
     * Returns true if the given object is an instance of VirtualHub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualHub {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualHub.__pulumiType;
    }

    /**
     * Address-prefix for this VirtualHub.
     */
    declare public readonly addressPrefix: pulumi.Output<string | undefined>;
    /**
     * Flag to control transit for VirtualRouter hub.
     */
    declare public readonly allowBranchToBranchTraffic: pulumi.Output<boolean | undefined>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * The azureFirewall associated with this VirtualHub.
     */
    declare public readonly azureFirewall: pulumi.Output<outputs.network.SubResourceResponse | undefined>;
    /**
     * List of references to Bgp Connections.
     */
    declare public /*out*/ readonly bgpConnections: pulumi.Output<outputs.network.SubResourceResponse[]>;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    /**
     * The expressRouteGateway associated with this VirtualHub.
     */
    declare public readonly expressRouteGateway: pulumi.Output<outputs.network.SubResourceResponse | undefined>;
    /**
     * The hubRoutingPreference of this VirtualHub.
     */
    declare public readonly hubRoutingPreference: pulumi.Output<string | undefined>;
    /**
     * List of references to IpConfigurations.
     */
    declare public /*out*/ readonly ipConfigurations: pulumi.Output<outputs.network.SubResourceResponse[]>;
    /**
     * Kind of service virtual hub. This is metadata used for the Azure portal experience for Route Server.
     */
    declare public /*out*/ readonly kind: pulumi.Output<string>;
    /**
     * Resource location.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Resource name.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The P2SVpnGateway associated with this VirtualHub.
     */
    declare public readonly p2SVpnGateway: pulumi.Output<outputs.network.SubResourceResponse | undefined>;
    /**
     * The preferred gateway to route on-prem traffic
     */
    declare public readonly preferredRoutingGateway: pulumi.Output<string | undefined>;
    /**
     * The provisioning state of the virtual hub resource.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * List of references to RouteMaps.
     */
    declare public /*out*/ readonly routeMaps: pulumi.Output<outputs.network.SubResourceResponse[]>;
    /**
     * The routeTable associated with this virtual hub.
     */
    declare public readonly routeTable: pulumi.Output<outputs.network.VirtualHubRouteTableResponse | undefined>;
    /**
     * The routing state.
     */
    declare public /*out*/ readonly routingState: pulumi.Output<string>;
    /**
     * The securityPartnerProvider associated with this VirtualHub.
     */
    declare public readonly securityPartnerProvider: pulumi.Output<outputs.network.SubResourceResponse | undefined>;
    /**
     * The Security Provider name.
     */
    declare public readonly securityProviderName: pulumi.Output<string | undefined>;
    /**
     * The sku of this VirtualHub.
     */
    declare public readonly sku: pulumi.Output<string | undefined>;
    /**
     * Resource tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * List of all virtual hub route table v2s associated with this VirtualHub.
     */
    declare public readonly virtualHubRouteTableV2s: pulumi.Output<outputs.network.VirtualHubRouteTableV2Response[] | undefined>;
    /**
     * VirtualRouter ASN.
     */
    declare public readonly virtualRouterAsn: pulumi.Output<number | undefined>;
    /**
     * The VirtualHub Router autoscale configuration.
     */
    declare public readonly virtualRouterAutoScaleConfiguration: pulumi.Output<outputs.network.VirtualRouterAutoScaleConfigurationResponse | undefined>;
    /**
     * VirtualRouter IPs.
     */
    declare public readonly virtualRouterIps: pulumi.Output<string[] | undefined>;
    /**
     * The VirtualWAN to which the VirtualHub belongs.
     */
    declare public readonly virtualWan: pulumi.Output<outputs.network.SubResourceResponse | undefined>;
    /**
     * The VpnGateway associated with this VirtualHub.
     */
    declare public readonly vpnGateway: pulumi.Output<outputs.network.SubResourceResponse | undefined>;

    /**
     * Create a VirtualHub resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualHubArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["addressPrefix"] = args?.addressPrefix;
            resourceInputs["allowBranchToBranchTraffic"] = args?.allowBranchToBranchTraffic;
            resourceInputs["azureFirewall"] = args?.azureFirewall;
            resourceInputs["expressRouteGateway"] = args?.expressRouteGateway;
            resourceInputs["hubRoutingPreference"] = args?.hubRoutingPreference;
            resourceInputs["id"] = args?.id;
            resourceInputs["location"] = args?.location;
            resourceInputs["p2SVpnGateway"] = args?.p2SVpnGateway;
            resourceInputs["preferredRoutingGateway"] = args?.preferredRoutingGateway;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["routeTable"] = args?.routeTable;
            resourceInputs["securityPartnerProvider"] = args?.securityPartnerProvider;
            resourceInputs["securityProviderName"] = args?.securityProviderName;
            resourceInputs["sku"] = args?.sku;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["virtualHubName"] = args?.virtualHubName;
            resourceInputs["virtualHubRouteTableV2s"] = args?.virtualHubRouteTableV2s;
            resourceInputs["virtualRouterAsn"] = args?.virtualRouterAsn;
            resourceInputs["virtualRouterAutoScaleConfiguration"] = args?.virtualRouterAutoScaleConfiguration;
            resourceInputs["virtualRouterIps"] = args?.virtualRouterIps;
            resourceInputs["virtualWan"] = args?.virtualWan;
            resourceInputs["vpnGateway"] = args?.vpnGateway;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["bgpConnections"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["ipConfigurations"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["routeMaps"] = undefined /*out*/;
            resourceInputs["routingState"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["addressPrefix"] = undefined /*out*/;
            resourceInputs["allowBranchToBranchTraffic"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["azureFirewall"] = undefined /*out*/;
            resourceInputs["bgpConnections"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["expressRouteGateway"] = undefined /*out*/;
            resourceInputs["hubRoutingPreference"] = undefined /*out*/;
            resourceInputs["ipConfigurations"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["p2SVpnGateway"] = undefined /*out*/;
            resourceInputs["preferredRoutingGateway"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["routeMaps"] = undefined /*out*/;
            resourceInputs["routeTable"] = undefined /*out*/;
            resourceInputs["routingState"] = undefined /*out*/;
            resourceInputs["securityPartnerProvider"] = undefined /*out*/;
            resourceInputs["securityProviderName"] = undefined /*out*/;
            resourceInputs["sku"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["virtualHubRouteTableV2s"] = undefined /*out*/;
            resourceInputs["virtualRouterAsn"] = undefined /*out*/;
            resourceInputs["virtualRouterAutoScaleConfiguration"] = undefined /*out*/;
            resourceInputs["virtualRouterIps"] = undefined /*out*/;
            resourceInputs["virtualWan"] = undefined /*out*/;
            resourceInputs["vpnGateway"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:network/v20180401:VirtualHub" }, { type: "azure-native:network/v20180601:VirtualHub" }, { type: "azure-native:network/v20180701:VirtualHub" }, { type: "azure-native:network/v20180801:VirtualHub" }, { type: "azure-native:network/v20181001:VirtualHub" }, { type: "azure-native:network/v20181101:VirtualHub" }, { type: "azure-native:network/v20181201:VirtualHub" }, { type: "azure-native:network/v20190201:VirtualHub" }, { type: "azure-native:network/v20190401:VirtualHub" }, { type: "azure-native:network/v20190601:VirtualHub" }, { type: "azure-native:network/v20190701:VirtualHub" }, { type: "azure-native:network/v20190801:VirtualHub" }, { type: "azure-native:network/v20190901:VirtualHub" }, { type: "azure-native:network/v20191101:VirtualHub" }, { type: "azure-native:network/v20191201:VirtualHub" }, { type: "azure-native:network/v20200301:VirtualHub" }, { type: "azure-native:network/v20200401:VirtualHub" }, { type: "azure-native:network/v20200501:VirtualHub" }, { type: "azure-native:network/v20200601:VirtualHub" }, { type: "azure-native:network/v20200701:VirtualHub" }, { type: "azure-native:network/v20200801:VirtualHub" }, { type: "azure-native:network/v20201101:VirtualHub" }, { type: "azure-native:network/v20210201:VirtualHub" }, { type: "azure-native:network/v20210301:VirtualHub" }, { type: "azure-native:network/v20210501:VirtualHub" }, { type: "azure-native:network/v20210801:VirtualHub" }, { type: "azure-native:network/v20220101:VirtualHub" }, { type: "azure-native:network/v20220501:VirtualHub" }, { type: "azure-native:network/v20220701:VirtualHub" }, { type: "azure-native:network/v20220901:VirtualHub" }, { type: "azure-native:network/v20221101:VirtualHub" }, { type: "azure-native:network/v20230201:VirtualHub" }, { type: "azure-native:network/v20230401:VirtualHub" }, { type: "azure-native:network/v20230501:VirtualHub" }, { type: "azure-native:network/v20230601:VirtualHub" }, { type: "azure-native:network/v20230901:VirtualHub" }, { type: "azure-native:network/v20231101:VirtualHub" }, { type: "azure-native:network/v20240101:VirtualHub" }, { type: "azure-native:network/v20240301:VirtualHub" }, { type: "azure-native:network/v20240501:VirtualHub" }, { type: "azure-native:network/v20240701:VirtualHub" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(VirtualHub.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a VirtualHub resource.
 */
export interface VirtualHubArgs {
    /**
     * Address-prefix for this VirtualHub.
     */
    addressPrefix?: pulumi.Input<string>;
    /**
     * Flag to control transit for VirtualRouter hub.
     */
    allowBranchToBranchTraffic?: pulumi.Input<boolean>;
    /**
     * The azureFirewall associated with this VirtualHub.
     */
    azureFirewall?: pulumi.Input<inputs.network.SubResourceArgs>;
    /**
     * The expressRouteGateway associated with this VirtualHub.
     */
    expressRouteGateway?: pulumi.Input<inputs.network.SubResourceArgs>;
    /**
     * The hubRoutingPreference of this VirtualHub.
     */
    hubRoutingPreference?: pulumi.Input<string | enums.network.HubRoutingPreference>;
    /**
     * Resource ID.
     */
    id?: pulumi.Input<string>;
    /**
     * Resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * The P2SVpnGateway associated with this VirtualHub.
     */
    p2SVpnGateway?: pulumi.Input<inputs.network.SubResourceArgs>;
    /**
     * The preferred gateway to route on-prem traffic
     */
    preferredRoutingGateway?: pulumi.Input<string | enums.network.PreferredRoutingGateway>;
    /**
     * The resource group name of the VirtualHub.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The routeTable associated with this virtual hub.
     */
    routeTable?: pulumi.Input<inputs.network.VirtualHubRouteTableArgs>;
    /**
     * The securityPartnerProvider associated with this VirtualHub.
     */
    securityPartnerProvider?: pulumi.Input<inputs.network.SubResourceArgs>;
    /**
     * The Security Provider name.
     */
    securityProviderName?: pulumi.Input<string>;
    /**
     * The sku of this VirtualHub.
     */
    sku?: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the VirtualHub.
     */
    virtualHubName?: pulumi.Input<string>;
    /**
     * List of all virtual hub route table v2s associated with this VirtualHub.
     * These are also available as standalone resources. Do not mix inline and standalone resource as they will conflict with each other, leading to resources deletion.
     */
    virtualHubRouteTableV2s?: pulumi.Input<pulumi.Input<inputs.network.VirtualHubRouteTableV2Args>[]>;
    /**
     * VirtualRouter ASN.
     */
    virtualRouterAsn?: pulumi.Input<number>;
    /**
     * The VirtualHub Router autoscale configuration.
     */
    virtualRouterAutoScaleConfiguration?: pulumi.Input<inputs.network.VirtualRouterAutoScaleConfigurationArgs>;
    /**
     * VirtualRouter IPs.
     */
    virtualRouterIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The VirtualWAN to which the VirtualHub belongs.
     */
    virtualWan?: pulumi.Input<inputs.network.SubResourceArgs>;
    /**
     * The VpnGateway associated with this VirtualHub.
     */
    vpnGateway?: pulumi.Input<inputs.network.SubResourceArgs>;
}
