// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * IpAllocation resource.
 */
export class IpAllocation extends pulumi.CustomResource {
    /**
     * Get an existing IpAllocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): IpAllocation {
        return new IpAllocation(name, undefined, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:network/v20200401:IpAllocation';

    /**
     * Returns true if the given object is an instance of IpAllocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpAllocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpAllocation.__pulumiType;
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Resource location.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * Resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Properties of the IpAllocation.
     */
    public /*out*/ readonly properties!: pulumi.Output<outputs.network.v20200401.IpAllocationPropertiesFormatResponse>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a IpAllocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpAllocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, state: undefined, opts: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpAllocationArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState as IpAllocationArgs | undefined;
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["allocationTags"] = args ? args.allocationTags : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["ipamAllocationId"] = args ? args.ipamAllocationId : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["prefix"] = args ? args.prefix : undefined;
            inputs["prefixLength"] = args ? args.prefixLength : undefined;
            inputs["prefixType"] = args ? args.prefixType : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["etag"] = undefined /*out*/;
            inputs["properties"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(IpAllocation.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a IpAllocation resource.
 */
export interface IpAllocationArgs {
    /**
     * IpAllocation tags.
     */
    readonly allocationTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID.
     */
    readonly id?: pulumi.Input<string>;
    /**
     * The IPAM allocation ID.
     */
    readonly ipamAllocationId?: pulumi.Input<string>;
    /**
     * Resource location.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The name of the IpAllocation.
     */
    readonly name: pulumi.Input<string>;
    /**
     * The address prefix for the IpAllocation.
     */
    readonly prefix?: pulumi.Input<string>;
    /**
     * The address prefix length for the IpAllocation.
     */
    readonly prefixLength?: pulumi.Input<number>;
    /**
     * The address prefix Type for the IpAllocation.
     */
    readonly prefixType?: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type for the IpAllocation.
     */
    readonly type?: pulumi.Input<string>;
}
