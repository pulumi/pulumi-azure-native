// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * DSCP Configuration in a resource group.
 */
export class DscpConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing DscpConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DscpConfiguration {
        return new DscpConfiguration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:network/latest:DscpConfiguration';

    /**
     * Returns true if the given object is an instance of DscpConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DscpConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DscpConfiguration.__pulumiType;
    }

    /**
     * Associated Network Interfaces to the DSCP Configuration.
     */
    public /*out*/ readonly associatedNetworkInterfaces!: pulumi.Output<outputs.network.latest.NetworkInterfaceResponse[]>;
    /**
     * Destination IP ranges.
     */
    public readonly destinationIpRanges!: pulumi.Output<outputs.network.latest.QosIpRangeResponse[] | undefined>;
    /**
     * Destination port ranges.
     */
    public readonly destinationPortRanges!: pulumi.Output<outputs.network.latest.QosPortRangeResponse[] | undefined>;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Resource location.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * List of markings to be used in the configuration.
     */
    public readonly markings!: pulumi.Output<number[] | undefined>;
    /**
     * Resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * RNM supported protocol types.
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * The provisioning state of the DSCP Configuration resource.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Qos Collection ID generated by RNM.
     */
    public /*out*/ readonly qosCollectionId!: pulumi.Output<string>;
    /**
     * The resource GUID property of the DSCP Configuration resource.
     */
    public /*out*/ readonly resourceGuid!: pulumi.Output<string>;
    /**
     * Source IP ranges.
     */
    public readonly sourceIpRanges!: pulumi.Output<outputs.network.latest.QosIpRangeResponse[] | undefined>;
    /**
     * Sources port ranges.
     */
    public readonly sourcePortRanges!: pulumi.Output<outputs.network.latest.QosPortRangeResponse[] | undefined>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DscpConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DscpConfigurationArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.dscpConfigurationName === undefined) {
                throw new Error("Missing required property 'dscpConfigurationName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["destinationIpRanges"] = args ? args.destinationIpRanges : undefined;
            inputs["destinationPortRanges"] = args ? args.destinationPortRanges : undefined;
            inputs["dscpConfigurationName"] = args ? args.dscpConfigurationName : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["markings"] = args ? args.markings : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sourceIpRanges"] = args ? args.sourceIpRanges : undefined;
            inputs["sourcePortRanges"] = args ? args.sourcePortRanges : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["associatedNetworkInterfaces"] = undefined /*out*/;
            inputs["etag"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["qosCollectionId"] = undefined /*out*/;
            inputs["resourceGuid"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["associatedNetworkInterfaces"] = undefined /*out*/;
            inputs["destinationIpRanges"] = undefined /*out*/;
            inputs["destinationPortRanges"] = undefined /*out*/;
            inputs["etag"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["markings"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["protocol"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["qosCollectionId"] = undefined /*out*/;
            inputs["resourceGuid"] = undefined /*out*/;
            inputs["sourceIpRanges"] = undefined /*out*/;
            inputs["sourcePortRanges"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:network/v20200601:DscpConfiguration" }, { type: "azure-nextgen:network/v20200701:DscpConfiguration" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(DscpConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a DscpConfiguration resource.
 */
export interface DscpConfigurationArgs {
    /**
     * Destination IP ranges.
     */
    readonly destinationIpRanges?: pulumi.Input<pulumi.Input<inputs.network.latest.QosIpRange>[]>;
    /**
     * Destination port ranges.
     */
    readonly destinationPortRanges?: pulumi.Input<pulumi.Input<inputs.network.latest.QosPortRange>[]>;
    /**
     * The name of the resource.
     */
    readonly dscpConfigurationName: pulumi.Input<string>;
    /**
     * Resource ID.
     */
    readonly id?: pulumi.Input<string>;
    /**
     * Resource location.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * List of markings to be used in the configuration.
     */
    readonly markings?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * RNM supported protocol types.
     */
    readonly protocol?: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * Source IP ranges.
     */
    readonly sourceIpRanges?: pulumi.Input<pulumi.Input<inputs.network.latest.QosIpRange>[]>;
    /**
     * Sources port ranges.
     */
    readonly sourcePortRanges?: pulumi.Input<pulumi.Input<inputs.network.latest.QosPortRange>[]>;
    /**
     * Resource tags.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
