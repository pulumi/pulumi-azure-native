// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ConfigurationPolicyGroupArgs } from "./configurationPolicyGroup";
export type ConfigurationPolicyGroup = import("./configurationPolicyGroup").ConfigurationPolicyGroup;
export const ConfigurationPolicyGroup: typeof import("./configurationPolicyGroup").ConfigurationPolicyGroup = null as any;
utilities.lazyLoad(exports, ["ConfigurationPolicyGroup"], () => require("./configurationPolicyGroup"));

export { DdosCustomPolicyArgs } from "./ddosCustomPolicy";
export type DdosCustomPolicy = import("./ddosCustomPolicy").DdosCustomPolicy;
export const DdosCustomPolicy: typeof import("./ddosCustomPolicy").DdosCustomPolicy = null as any;
utilities.lazyLoad(exports, ["DdosCustomPolicy"], () => require("./ddosCustomPolicy"));

export { ExpressRoutePortAuthorizationArgs } from "./expressRoutePortAuthorization";
export type ExpressRoutePortAuthorization = import("./expressRoutePortAuthorization").ExpressRoutePortAuthorization;
export const ExpressRoutePortAuthorization: typeof import("./expressRoutePortAuthorization").ExpressRoutePortAuthorization = null as any;
utilities.lazyLoad(exports, ["ExpressRoutePortAuthorization"], () => require("./expressRoutePortAuthorization"));

export { GetConfigurationPolicyGroupArgs, GetConfigurationPolicyGroupResult, GetConfigurationPolicyGroupOutputArgs } from "./getConfigurationPolicyGroup";
export const getConfigurationPolicyGroup: typeof import("./getConfigurationPolicyGroup").getConfigurationPolicyGroup = null as any;
export const getConfigurationPolicyGroupOutput: typeof import("./getConfigurationPolicyGroup").getConfigurationPolicyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationPolicyGroup","getConfigurationPolicyGroupOutput"], () => require("./getConfigurationPolicyGroup"));

export { GetDdosCustomPolicyArgs, GetDdosCustomPolicyResult, GetDdosCustomPolicyOutputArgs } from "./getDdosCustomPolicy";
export const getDdosCustomPolicy: typeof import("./getDdosCustomPolicy").getDdosCustomPolicy = null as any;
export const getDdosCustomPolicyOutput: typeof import("./getDdosCustomPolicy").getDdosCustomPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDdosCustomPolicy","getDdosCustomPolicyOutput"], () => require("./getDdosCustomPolicy"));

export { GetExpressRoutePortAuthorizationArgs, GetExpressRoutePortAuthorizationResult, GetExpressRoutePortAuthorizationOutputArgs } from "./getExpressRoutePortAuthorization";
export const getExpressRoutePortAuthorization: typeof import("./getExpressRoutePortAuthorization").getExpressRoutePortAuthorization = null as any;
export const getExpressRoutePortAuthorizationOutput: typeof import("./getExpressRoutePortAuthorization").getExpressRoutePortAuthorizationOutput = null as any;
utilities.lazyLoad(exports, ["getExpressRoutePortAuthorization","getExpressRoutePortAuthorizationOutput"], () => require("./getExpressRoutePortAuthorization"));

export { GetRoutingIntentArgs, GetRoutingIntentResult, GetRoutingIntentOutputArgs } from "./getRoutingIntent";
export const getRoutingIntent: typeof import("./getRoutingIntent").getRoutingIntent = null as any;
export const getRoutingIntentOutput: typeof import("./getRoutingIntent").getRoutingIntentOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingIntent","getRoutingIntentOutput"], () => require("./getRoutingIntent"));

export { GetVirtualRouterArgs, GetVirtualRouterResult, GetVirtualRouterOutputArgs } from "./getVirtualRouter";
export const getVirtualRouter: typeof import("./getVirtualRouter").getVirtualRouter = null as any;
export const getVirtualRouterOutput: typeof import("./getVirtualRouter").getVirtualRouterOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualRouter","getVirtualRouterOutput"], () => require("./getVirtualRouter"));

export { GetVirtualRouterPeeringArgs, GetVirtualRouterPeeringResult, GetVirtualRouterPeeringOutputArgs } from "./getVirtualRouterPeering";
export const getVirtualRouterPeering: typeof import("./getVirtualRouterPeering").getVirtualRouterPeering = null as any;
export const getVirtualRouterPeeringOutput: typeof import("./getVirtualRouterPeering").getVirtualRouterPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualRouterPeering","getVirtualRouterPeeringOutput"], () => require("./getVirtualRouterPeering"));

export { RoutingIntentArgs } from "./routingIntent";
export type RoutingIntent = import("./routingIntent").RoutingIntent;
export const RoutingIntent: typeof import("./routingIntent").RoutingIntent = null as any;
utilities.lazyLoad(exports, ["RoutingIntent"], () => require("./routingIntent"));

export { VirtualRouterArgs } from "./virtualRouter";
export type VirtualRouter = import("./virtualRouter").VirtualRouter;
export const VirtualRouter: typeof import("./virtualRouter").VirtualRouter = null as any;
utilities.lazyLoad(exports, ["VirtualRouter"], () => require("./virtualRouter"));

export { VirtualRouterPeeringArgs } from "./virtualRouterPeering";
export type VirtualRouterPeering = import("./virtualRouterPeering").VirtualRouterPeering;
export const VirtualRouterPeering: typeof import("./virtualRouterPeering").VirtualRouterPeering = null as any;
utilities.lazyLoad(exports, ["VirtualRouterPeering"], () => require("./virtualRouterPeering"));


// Export enums:
export * from "../../types/enums/network/v20220101";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:network/v20220101:ConfigurationPolicyGroup":
                return new ConfigurationPolicyGroup(name, <any>undefined, { urn })
            case "azure-native:network/v20220101:DdosCustomPolicy":
                return new DdosCustomPolicy(name, <any>undefined, { urn })
            case "azure-native:network/v20220101:ExpressRoutePortAuthorization":
                return new ExpressRoutePortAuthorization(name, <any>undefined, { urn })
            case "azure-native:network/v20220101:RoutingIntent":
                return new RoutingIntent(name, <any>undefined, { urn })
            case "azure-native:network/v20220101:VirtualRouter":
                return new VirtualRouter(name, <any>undefined, { urn })
            case "azure-native:network/v20220101:VirtualRouterPeering":
                return new VirtualRouterPeering(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "network/v20220101", _module)
