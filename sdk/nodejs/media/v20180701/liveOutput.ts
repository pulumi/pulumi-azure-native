// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * The Live Output.
 */
export class LiveOutput extends pulumi.CustomResource {
    /**
     * Get an existing LiveOutput resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LiveOutput {
        return new LiveOutput(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:media/v20180701:LiveOutput';

    /**
     * Returns true if the given object is an instance of LiveOutput.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LiveOutput {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LiveOutput.__pulumiType;
    }

    /**
     * ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
     */
    public readonly archiveWindowLength!: pulumi.Output<string>;
    /**
     * The asset name.
     */
    public readonly assetName!: pulumi.Output<string>;
    /**
     * The exact time the Live Output was created.
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * The description of the Live Output.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The HLS configuration.
     */
    public readonly hls!: pulumi.Output<outputs.media.v20180701.HlsResponse | undefined>;
    /**
     * The exact time the Live Output was last modified.
     */
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    /**
     * The manifest file name.  If not provided, the service will generate one automatically.
     */
    public readonly manifestName!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The output snapshot time.
     */
    public readonly outputSnapTime!: pulumi.Output<number | undefined>;
    /**
     * The provisioning state of the Live Output.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The resource state of the Live Output.
     */
    public /*out*/ readonly resourceState!: pulumi.Output<string>;
    /**
     * The type of the resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a LiveOutput resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LiveOutputArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.archiveWindowLength === undefined) && !opts.urn) {
                throw new Error("Missing required property 'archiveWindowLength'");
            }
            if ((!args || args.assetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assetName'");
            }
            if ((!args || args.liveEventName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'liveEventName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["archiveWindowLength"] = args ? args.archiveWindowLength : undefined;
            resourceInputs["assetName"] = args ? args.assetName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hls"] = args ? args.hls : undefined;
            resourceInputs["liveEventName"] = args ? args.liveEventName : undefined;
            resourceInputs["liveOutputName"] = args ? args.liveOutputName : undefined;
            resourceInputs["manifestName"] = args ? args.manifestName : undefined;
            resourceInputs["outputSnapTime"] = args ? args.outputSnapTime : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceState"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["archiveWindowLength"] = undefined /*out*/;
            resourceInputs["assetName"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["hls"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["manifestName"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["outputSnapTime"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceState"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:media:LiveOutput" }, { type: "azure-native:media/v20180330preview:LiveOutput" }, { type: "azure-native:media/v20180601preview:LiveOutput" }, { type: "azure-native:media/v20190501preview:LiveOutput" }, { type: "azure-native:media/v20200501:LiveOutput" }, { type: "azure-native:media/v20210601:LiveOutput" }, { type: "azure-native:media/v20211101:LiveOutput" }, { type: "azure-native:media/v20220801:LiveOutput" }, { type: "azure-native:media/v20221101:LiveOutput" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(LiveOutput.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LiveOutput resource.
 */
export interface LiveOutputArgs {
    /**
     * The Media Services account name.
     */
    accountName: pulumi.Input<string>;
    /**
     * ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
     */
    archiveWindowLength: pulumi.Input<string>;
    /**
     * The asset name.
     */
    assetName: pulumi.Input<string>;
    /**
     * The description of the Live Output.
     */
    description?: pulumi.Input<string>;
    /**
     * The HLS configuration.
     */
    hls?: pulumi.Input<inputs.media.v20180701.HlsArgs>;
    /**
     * The name of the Live Event.
     */
    liveEventName: pulumi.Input<string>;
    /**
     * The name of the Live Output.
     */
    liveOutputName?: pulumi.Input<string>;
    /**
     * The manifest file name.  If not provided, the service will generate one automatically.
     */
    manifestName?: pulumi.Input<string>;
    /**
     * The output snapshot time.
     */
    outputSnapTime?: pulumi.Input<number>;
    /**
     * The name of the resource group within the Azure subscription.
     */
    resourceGroupName: pulumi.Input<string>;
}
