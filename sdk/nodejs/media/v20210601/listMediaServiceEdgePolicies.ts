// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

export function listMediaServiceEdgePolicies(args: ListMediaServiceEdgePoliciesArgs, opts?: pulumi.InvokeOptions): Promise<ListMediaServiceEdgePoliciesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("azure-native:media/v20210601:listMediaServiceEdgePolicies", {
        "accountName": args.accountName,
        "deviceId": args.deviceId,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface ListMediaServiceEdgePoliciesArgs {
    /**
     * The Media Services account name.
     */
    accountName: string;
    /**
     * Unique identifier of the edge device.
     */
    deviceId?: string;
    /**
     * The name of the resource group within the Azure subscription.
     */
    resourceGroupName: string;
}

export interface ListMediaServiceEdgePoliciesResult {
    readonly usageDataCollectionPolicy?: outputs.media.v20210601.EdgeUsageDataCollectionPolicyResponse;
}

export function listMediaServiceEdgePoliciesOutput(args: ListMediaServiceEdgePoliciesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ListMediaServiceEdgePoliciesResult> {
    return pulumi.output(args).apply(a => listMediaServiceEdgePolicies(a, opts))
}

export interface ListMediaServiceEdgePoliciesOutputArgs {
    /**
     * The Media Services account name.
     */
    accountName: pulumi.Input<string>;
    /**
     * Unique identifier of the edge device.
     */
    deviceId?: pulumi.Input<string>;
    /**
     * The name of the resource group within the Azure subscription.
     */
    resourceGroupName: pulumi.Input<string>;
}
