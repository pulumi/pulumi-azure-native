// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export * from "./accountFilter";
export * from "./asset";
export * from "./assetFilter";
export * from "./contentKeyPolicy";
export * from "./getAccountFilter";
export * from "./getAsset";
export * from "./getAssetEncryptionKey";
export * from "./getAssetFilter";
export * from "./getContentKeyPolicy";
export * from "./getContentKeyPolicyPropertiesWithSecrets";
export * from "./getJob";
export * from "./getLiveEvent";
export * from "./getLiveOutput";
export * from "./getMediaService";
export * from "./getPrivateEndpointConnection";
export * from "./getStreamingEndpoint";
export * from "./getStreamingLocator";
export * from "./getStreamingPolicy";
export * from "./getTransform";
export * from "./job";
export * from "./listAssetContainerSas";
export * from "./listAssetStreamingLocators";
export * from "./listMediaServiceEdgePolicies";
export * from "./listStreamingLocatorContentKeys";
export * from "./listStreamingLocatorPaths";
export * from "./liveEvent";
export * from "./liveOutput";
export * from "./mediaService";
export * from "./privateEndpointConnection";
export * from "./streamingEndpoint";
export * from "./streamingLocator";
export * from "./streamingPolicy";
export * from "./transform";

// Export enums:
export * from "../../types/enums/media/v20200501";

// Import resources to register:
import { AccountFilter } from "./accountFilter";
import { Asset } from "./asset";
import { AssetFilter } from "./assetFilter";
import { ContentKeyPolicy } from "./contentKeyPolicy";
import { Job } from "./job";
import { LiveEvent } from "./liveEvent";
import { LiveOutput } from "./liveOutput";
import { MediaService } from "./mediaService";
import { PrivateEndpointConnection } from "./privateEndpointConnection";
import { StreamingEndpoint } from "./streamingEndpoint";
import { StreamingLocator } from "./streamingLocator";
import { StreamingPolicy } from "./streamingPolicy";
import { Transform } from "./transform";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-nextgen:media/v20200501:AccountFilter":
                return new AccountFilter(name, <any>undefined, { urn })
            case "azure-nextgen:media/v20200501:Asset":
                return new Asset(name, <any>undefined, { urn })
            case "azure-nextgen:media/v20200501:AssetFilter":
                return new AssetFilter(name, <any>undefined, { urn })
            case "azure-nextgen:media/v20200501:ContentKeyPolicy":
                return new ContentKeyPolicy(name, <any>undefined, { urn })
            case "azure-nextgen:media/v20200501:Job":
                return new Job(name, <any>undefined, { urn })
            case "azure-nextgen:media/v20200501:LiveEvent":
                return new LiveEvent(name, <any>undefined, { urn })
            case "azure-nextgen:media/v20200501:LiveOutput":
                return new LiveOutput(name, <any>undefined, { urn })
            case "azure-nextgen:media/v20200501:MediaService":
                return new MediaService(name, <any>undefined, { urn })
            case "azure-nextgen:media/v20200501:PrivateEndpointConnection":
                return new PrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-nextgen:media/v20200501:StreamingEndpoint":
                return new StreamingEndpoint(name, <any>undefined, { urn })
            case "azure-nextgen:media/v20200501:StreamingLocator":
                return new StreamingLocator(name, <any>undefined, { urn })
            case "azure-nextgen:media/v20200501:StreamingPolicy":
                return new StreamingPolicy(name, <any>undefined, { urn })
            case "azure-nextgen:media/v20200501:Transform":
                return new Transform(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-nextgen", "media/v20200501", _module)
