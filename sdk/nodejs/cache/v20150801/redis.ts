// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * A Redis item in CreateOrUpdate Operation response.
 */
export class Redis extends pulumi.CustomResource {
    /**
     * Get an existing Redis resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Redis {
        return new Redis(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:cache/v20150801:Redis';

    /**
     * Returns true if the given object is an instance of Redis.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Redis {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Redis.__pulumiType;
    }

    /**
     * Redis cache access keys.
     */
    public /*out*/ readonly accessKeys!: pulumi.Output<outputs.cache.v20150801.RedisAccessKeysResponse | undefined>;
    /**
     * If the value is true, then the non-SLL Redis server port (6379) will be enabled.
     */
    public readonly enableNonSslPort!: pulumi.Output<boolean | undefined>;
    /**
     * Redis host name.
     */
    public /*out*/ readonly hostName!: pulumi.Output<string | undefined>;
    /**
     * Resource location.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Redis non-SSL port.
     */
    public /*out*/ readonly port!: pulumi.Output<number | undefined>;
    /**
     * Redis instance provisioning status.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string | undefined>;
    /**
     * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
     */
    public readonly redisConfiguration!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.
     */
    public readonly redisVersion!: pulumi.Output<string | undefined>;
    /**
     * The number of shards to be created on a Premium Cluster Cache.
     */
    public readonly shardCount!: pulumi.Output<number | undefined>;
    /**
     * What SKU of Redis cache to deploy.
     */
    public readonly sku!: pulumi.Output<outputs.cache.v20150801.SkuResponse>;
    /**
     * Redis SSL port.
     */
    public /*out*/ readonly sslPort!: pulumi.Output<number | undefined>;
    /**
     * Required when deploying a Redis cache inside an existing Azure Virtual Network.
     */
    public readonly staticIP!: pulumi.Output<string | undefined>;
    /**
     * Required when deploying a Redis cache inside an existing Azure Virtual Network.
     */
    public readonly subnet!: pulumi.Output<string | undefined>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * tenantSettings
     */
    public readonly tenantSettings!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
     */
    public readonly virtualNetwork!: pulumi.Output<string | undefined>;

    /**
     * Create a Redis resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.sku === undefined) {
                throw new Error("Missing required property 'sku'");
            }
            inputs["enableNonSslPort"] = args ? args.enableNonSslPort : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["redisConfiguration"] = args ? args.redisConfiguration : undefined;
            inputs["redisVersion"] = args ? args.redisVersion : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["shardCount"] = args ? args.shardCount : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["staticIP"] = args ? args.staticIP : undefined;
            inputs["subnet"] = args ? args.subnet : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tenantSettings"] = args ? args.tenantSettings : undefined;
            inputs["virtualNetwork"] = args ? args.virtualNetwork : undefined;
            inputs["accessKeys"] = undefined /*out*/;
            inputs["hostName"] = undefined /*out*/;
            inputs["port"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["sslPort"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["accessKeys"] = undefined /*out*/;
            inputs["enableNonSslPort"] = undefined /*out*/;
            inputs["hostName"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["port"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["redisConfiguration"] = undefined /*out*/;
            inputs["redisVersion"] = undefined /*out*/;
            inputs["shardCount"] = undefined /*out*/;
            inputs["sku"] = undefined /*out*/;
            inputs["sslPort"] = undefined /*out*/;
            inputs["staticIP"] = undefined /*out*/;
            inputs["subnet"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["tenantSettings"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["virtualNetwork"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:cache/latest:Redis" }, { type: "azure-nextgen:cache/v20160401:Redis" }, { type: "azure-nextgen:cache/v20170201:Redis" }, { type: "azure-nextgen:cache/v20171001:Redis" }, { type: "azure-nextgen:cache/v20180301:Redis" }, { type: "azure-nextgen:cache/v20190701:Redis" }, { type: "azure-nextgen:cache/v20200601:Redis" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(Redis.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Redis resource.
 */
export interface RedisArgs {
    /**
     * If the value is true, then the non-SLL Redis server port (6379) will be enabled.
     */
    readonly enableNonSslPort?: pulumi.Input<boolean>;
    /**
     * Resource location.
     */
    readonly location: pulumi.Input<string>;
    /**
     * The name of the Redis cache.
     */
    readonly name: pulumi.Input<string>;
    /**
     * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
     */
    readonly redisConfiguration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.
     */
    readonly redisVersion?: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The number of shards to be created on a Premium Cluster Cache.
     */
    readonly shardCount?: pulumi.Input<number>;
    /**
     * What SKU of Redis cache to deploy.
     */
    readonly sku: pulumi.Input<inputs.cache.v20150801.Sku>;
    /**
     * Required when deploying a Redis cache inside an existing Azure Virtual Network.
     */
    readonly staticIP?: pulumi.Input<string>;
    /**
     * Required when deploying a Redis cache inside an existing Azure Virtual Network.
     */
    readonly subnet?: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * tenantSettings
     */
    readonly tenantSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
     */
    readonly virtualNetwork?: pulumi.Input<string>;
}
