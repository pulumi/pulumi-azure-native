// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessPolicyArgs } from "./accessPolicy";
export type AccessPolicy = import("./accessPolicy").AccessPolicy;
export const AccessPolicy: typeof import("./accessPolicy").AccessPolicy = null as any;
utilities.lazyLoad(exports, ["AccessPolicy"], () => require("./accessPolicy"));

export { AccessPolicyAssignmentArgs } from "./accessPolicyAssignment";
export type AccessPolicyAssignment = import("./accessPolicyAssignment").AccessPolicyAssignment;
export const AccessPolicyAssignment: typeof import("./accessPolicyAssignment").AccessPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["AccessPolicyAssignment"], () => require("./accessPolicyAssignment"));

export { EnterpriseAccessPolicyAssignmentArgs } from "./enterpriseAccessPolicyAssignment";
export type EnterpriseAccessPolicyAssignment = import("./enterpriseAccessPolicyAssignment").EnterpriseAccessPolicyAssignment;
export const EnterpriseAccessPolicyAssignment: typeof import("./enterpriseAccessPolicyAssignment").EnterpriseAccessPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["EnterpriseAccessPolicyAssignment"], () => require("./enterpriseAccessPolicyAssignment"));

export { EnterpriseDatabaseArgs } from "./enterpriseDatabase";
export type EnterpriseDatabase = import("./enterpriseDatabase").EnterpriseDatabase;
export const EnterpriseDatabase: typeof import("./enterpriseDatabase").EnterpriseDatabase = null as any;
utilities.lazyLoad(exports, ["EnterpriseDatabase"], () => require("./enterpriseDatabase"));

export { EnterprisePrivateEndpointConnectionArgs } from "./enterprisePrivateEndpointConnection";
export type EnterprisePrivateEndpointConnection = import("./enterprisePrivateEndpointConnection").EnterprisePrivateEndpointConnection;
export const EnterprisePrivateEndpointConnection: typeof import("./enterprisePrivateEndpointConnection").EnterprisePrivateEndpointConnection = null as any;
utilities.lazyLoad(exports, ["EnterprisePrivateEndpointConnection"], () => require("./enterprisePrivateEndpointConnection"));

export { FirewallRuleArgs } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GetAccessPolicyArgs, GetAccessPolicyResult, GetAccessPolicyOutputArgs } from "./getAccessPolicy";
export const getAccessPolicy: typeof import("./getAccessPolicy").getAccessPolicy = null as any;
export const getAccessPolicyOutput: typeof import("./getAccessPolicy").getAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicy","getAccessPolicyOutput"], () => require("./getAccessPolicy"));

export { GetAccessPolicyAssignmentArgs, GetAccessPolicyAssignmentResult, GetAccessPolicyAssignmentOutputArgs } from "./getAccessPolicyAssignment";
export const getAccessPolicyAssignment: typeof import("./getAccessPolicyAssignment").getAccessPolicyAssignment = null as any;
export const getAccessPolicyAssignmentOutput: typeof import("./getAccessPolicyAssignment").getAccessPolicyAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicyAssignment","getAccessPolicyAssignmentOutput"], () => require("./getAccessPolicyAssignment"));

export { GetEnterpriseAccessPolicyAssignmentArgs, GetEnterpriseAccessPolicyAssignmentResult, GetEnterpriseAccessPolicyAssignmentOutputArgs } from "./getEnterpriseAccessPolicyAssignment";
export const getEnterpriseAccessPolicyAssignment: typeof import("./getEnterpriseAccessPolicyAssignment").getEnterpriseAccessPolicyAssignment = null as any;
export const getEnterpriseAccessPolicyAssignmentOutput: typeof import("./getEnterpriseAccessPolicyAssignment").getEnterpriseAccessPolicyAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnterpriseAccessPolicyAssignment","getEnterpriseAccessPolicyAssignmentOutput"], () => require("./getEnterpriseAccessPolicyAssignment"));

export { GetEnterpriseDatabaseArgs, GetEnterpriseDatabaseResult, GetEnterpriseDatabaseOutputArgs } from "./getEnterpriseDatabase";
export const getEnterpriseDatabase: typeof import("./getEnterpriseDatabase").getEnterpriseDatabase = null as any;
export const getEnterpriseDatabaseOutput: typeof import("./getEnterpriseDatabase").getEnterpriseDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getEnterpriseDatabase","getEnterpriseDatabaseOutput"], () => require("./getEnterpriseDatabase"));

export { GetEnterprisePrivateEndpointConnectionArgs, GetEnterprisePrivateEndpointConnectionResult, GetEnterprisePrivateEndpointConnectionOutputArgs } from "./getEnterprisePrivateEndpointConnection";
export const getEnterprisePrivateEndpointConnection: typeof import("./getEnterprisePrivateEndpointConnection").getEnterprisePrivateEndpointConnection = null as any;
export const getEnterprisePrivateEndpointConnectionOutput: typeof import("./getEnterprisePrivateEndpointConnection").getEnterprisePrivateEndpointConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getEnterprisePrivateEndpointConnection","getEnterprisePrivateEndpointConnectionOutput"], () => require("./getEnterprisePrivateEndpointConnection"));

export { GetFirewallRuleArgs, GetFirewallRuleResult, GetFirewallRuleOutputArgs } from "./getFirewallRule";
export const getFirewallRule: typeof import("./getFirewallRule").getFirewallRule = null as any;
export const getFirewallRuleOutput: typeof import("./getFirewallRule").getFirewallRuleOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallRule","getFirewallRuleOutput"], () => require("./getFirewallRule"));

export { GetLinkedServerArgs, GetLinkedServerResult, GetLinkedServerOutputArgs } from "./getLinkedServer";
export const getLinkedServer: typeof import("./getLinkedServer").getLinkedServer = null as any;
export const getLinkedServerOutput: typeof import("./getLinkedServer").getLinkedServerOutput = null as any;
utilities.lazyLoad(exports, ["getLinkedServer","getLinkedServerOutput"], () => require("./getLinkedServer"));

export { GetPatchScheduleArgs, GetPatchScheduleResult, GetPatchScheduleOutputArgs } from "./getPatchSchedule";
export const getPatchSchedule: typeof import("./getPatchSchedule").getPatchSchedule = null as any;
export const getPatchScheduleOutput: typeof import("./getPatchSchedule").getPatchScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getPatchSchedule","getPatchScheduleOutput"], () => require("./getPatchSchedule"));

export { GetPrivateEndpointConnectionArgs, GetPrivateEndpointConnectionResult, GetPrivateEndpointConnectionOutputArgs } from "./getPrivateEndpointConnection";
export const getPrivateEndpointConnection: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnection = null as any;
export const getPrivateEndpointConnectionOutput: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateEndpointConnection","getPrivateEndpointConnectionOutput"], () => require("./getPrivateEndpointConnection"));

export { GetRedisArgs, GetRedisResult, GetRedisOutputArgs } from "./getRedis";
export const getRedis: typeof import("./getRedis").getRedis = null as any;
export const getRedisOutput: typeof import("./getRedis").getRedisOutput = null as any;
utilities.lazyLoad(exports, ["getRedis","getRedisOutput"], () => require("./getRedis"));

export { GetRedisEnterpriseArgs, GetRedisEnterpriseResult, GetRedisEnterpriseOutputArgs } from "./getRedisEnterprise";
export const getRedisEnterprise: typeof import("./getRedisEnterprise").getRedisEnterprise = null as any;
export const getRedisEnterpriseOutput: typeof import("./getRedisEnterprise").getRedisEnterpriseOutput = null as any;
utilities.lazyLoad(exports, ["getRedisEnterprise","getRedisEnterpriseOutput"], () => require("./getRedisEnterprise"));

export { LinkedServerArgs } from "./linkedServer";
export type LinkedServer = import("./linkedServer").LinkedServer;
export const LinkedServer: typeof import("./linkedServer").LinkedServer = null as any;
utilities.lazyLoad(exports, ["LinkedServer"], () => require("./linkedServer"));

export { ListEnterpriseDatabaseKeysArgs, ListEnterpriseDatabaseKeysResult, ListEnterpriseDatabaseKeysOutputArgs } from "./listEnterpriseDatabaseKeys";
export const listEnterpriseDatabaseKeys: typeof import("./listEnterpriseDatabaseKeys").listEnterpriseDatabaseKeys = null as any;
export const listEnterpriseDatabaseKeysOutput: typeof import("./listEnterpriseDatabaseKeys").listEnterpriseDatabaseKeysOutput = null as any;
utilities.lazyLoad(exports, ["listEnterpriseDatabaseKeys","listEnterpriseDatabaseKeysOutput"], () => require("./listEnterpriseDatabaseKeys"));

export { ListRedisKeysArgs, ListRedisKeysResult, ListRedisKeysOutputArgs } from "./listRedisKeys";
export const listRedisKeys: typeof import("./listRedisKeys").listRedisKeys = null as any;
export const listRedisKeysOutput: typeof import("./listRedisKeys").listRedisKeysOutput = null as any;
utilities.lazyLoad(exports, ["listRedisKeys","listRedisKeysOutput"], () => require("./listRedisKeys"));

export { PatchScheduleArgs } from "./patchSchedule";
export type PatchSchedule = import("./patchSchedule").PatchSchedule;
export const PatchSchedule: typeof import("./patchSchedule").PatchSchedule = null as any;
utilities.lazyLoad(exports, ["PatchSchedule"], () => require("./patchSchedule"));

export { PrivateEndpointConnectionArgs } from "./privateEndpointConnection";
export type PrivateEndpointConnection = import("./privateEndpointConnection").PrivateEndpointConnection;
export const PrivateEndpointConnection: typeof import("./privateEndpointConnection").PrivateEndpointConnection = null as any;
utilities.lazyLoad(exports, ["PrivateEndpointConnection"], () => require("./privateEndpointConnection"));

export { RedisArgs } from "./redis";
export type Redis = import("./redis").Redis;
export const Redis: typeof import("./redis").Redis = null as any;
utilities.lazyLoad(exports, ["Redis"], () => require("./redis"));

export { RedisEnterpriseArgs } from "./redisEnterprise";
export type RedisEnterprise = import("./redisEnterprise").RedisEnterprise;
export const RedisEnterprise: typeof import("./redisEnterprise").RedisEnterprise = null as any;
utilities.lazyLoad(exports, ["RedisEnterprise"], () => require("./redisEnterprise"));


// Export enums:
export * from "../types/enums/cache";

// Export sub-modules:
import * as v20200601 from "./v20200601";
import * as v20201001preview from "./v20201001preview";
import * as v20201201 from "./v20201201";
import * as v20210201preview from "./v20210201preview";
import * as v20210301 from "./v20210301";
import * as v20210601 from "./v20210601";
import * as v20210801 from "./v20210801";
import * as v20220101 from "./v20220101";
import * as v20220501 from "./v20220501";
import * as v20220601 from "./v20220601";
import * as v20221101preview from "./v20221101preview";
import * as v20230301preview from "./v20230301preview";
import * as v20230401 from "./v20230401";
import * as v20230501preview from "./v20230501preview";
import * as v20230701 from "./v20230701";
import * as v20230801 from "./v20230801";
import * as v20230801preview from "./v20230801preview";
import * as v20231001preview from "./v20231001preview";
import * as v20231101 from "./v20231101";
import * as v20240201 from "./v20240201";
import * as v20240301 from "./v20240301";
import * as v20240301preview from "./v20240301preview";
import * as v20240401preview from "./v20240401preview";
import * as v20240601preview from "./v20240601preview";
import * as v20240901preview from "./v20240901preview";
import * as v20241001 from "./v20241001";
import * as v20241101 from "./v20241101";

export {
    v20200601,
    v20201001preview,
    v20201201,
    v20210201preview,
    v20210301,
    v20210601,
    v20210801,
    v20220101,
    v20220501,
    v20220601,
    v20221101preview,
    v20230301preview,
    v20230401,
    v20230501preview,
    v20230701,
    v20230801,
    v20230801preview,
    v20231001preview,
    v20231101,
    v20240201,
    v20240301,
    v20240301preview,
    v20240401preview,
    v20240601preview,
    v20240901preview,
    v20241001,
    v20241101,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:cache:AccessPolicy":
                return new AccessPolicy(name, <any>undefined, { urn })
            case "azure-native:cache:AccessPolicyAssignment":
                return new AccessPolicyAssignment(name, <any>undefined, { urn })
            case "azure-native:cache:EnterpriseAccessPolicyAssignment":
                return new EnterpriseAccessPolicyAssignment(name, <any>undefined, { urn })
            case "azure-native:cache:EnterpriseDatabase":
                return new EnterpriseDatabase(name, <any>undefined, { urn })
            case "azure-native:cache:EnterprisePrivateEndpointConnection":
                return new EnterprisePrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:cache:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "azure-native:cache:LinkedServer":
                return new LinkedServer(name, <any>undefined, { urn })
            case "azure-native:cache:PatchSchedule":
                return new PatchSchedule(name, <any>undefined, { urn })
            case "azure-native:cache:PrivateEndpointConnection":
                return new PrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:cache:Redis":
                return new Redis(name, <any>undefined, { urn })
            case "azure-native:cache:RedisEnterprise":
                return new RedisEnterprise(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "cache", _module)
