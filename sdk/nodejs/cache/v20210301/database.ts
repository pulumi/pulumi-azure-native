// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Describes a database on the RedisEnterprise cluster
 */
export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:cache/v20210301:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
     */
    public readonly clientProtocol!: pulumi.Output<string | undefined>;
    /**
     * Clustering policy - default is OSSCluster. Specified at create time.
     */
    public readonly clusteringPolicy!: pulumi.Output<string | undefined>;
    /**
     * Redis eviction policy - default is VolatileLRU
     */
    public readonly evictionPolicy!: pulumi.Output<string | undefined>;
    /**
     * Optional set of redis modules to enable in this database - modules can only be added at creation time.
     */
    public readonly modules!: pulumi.Output<outputs.cache.v20210301.ModuleResponse[] | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Persistence settings
     */
    public readonly persistence!: pulumi.Output<outputs.cache.v20210301.PersistenceResponse | undefined>;
    /**
     * TCP port of the database endpoint. Specified at create time. Defaults to an available port.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Current provisioning status of the database
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Current resource status of the database
     */
    public /*out*/ readonly resourceState!: pulumi.Output<string>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if ((!args || args.clusterName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.databaseName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["clientProtocol"] = args ? args.clientProtocol : undefined;
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["clusteringPolicy"] = args ? args.clusteringPolicy : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            inputs["modules"] = args ? args.modules : undefined;
            inputs["persistence"] = args ? args.persistence : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["resourceState"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["clientProtocol"] = undefined /*out*/;
            inputs["clusteringPolicy"] = undefined /*out*/;
            inputs["evictionPolicy"] = undefined /*out*/;
            inputs["modules"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["persistence"] = undefined /*out*/;
            inputs["port"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["resourceState"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:cache/v20201001preview:Database" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(Database.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
     */
    readonly clientProtocol?: pulumi.Input<string | enums.cache.v20210301.Protocol>;
    /**
     * The name of the RedisEnterprise cluster.
     */
    readonly clusterName: pulumi.Input<string>;
    /**
     * Clustering policy - default is OSSCluster. Specified at create time.
     */
    readonly clusteringPolicy?: pulumi.Input<string | enums.cache.v20210301.ClusteringPolicy>;
    /**
     * The name of the database.
     */
    readonly databaseName: pulumi.Input<string>;
    /**
     * Redis eviction policy - default is VolatileLRU
     */
    readonly evictionPolicy?: pulumi.Input<string | enums.cache.v20210301.EvictionPolicy>;
    /**
     * Optional set of redis modules to enable in this database - modules can only be added at creation time.
     */
    readonly modules?: pulumi.Input<pulumi.Input<inputs.cache.v20210301.Module>[]>;
    /**
     * Persistence settings
     */
    readonly persistence?: pulumi.Input<inputs.cache.v20210301.Persistence>;
    /**
     * TCP port of the database endpoint. Specified at create time. Defaults to an available port.
     */
    readonly port?: pulumi.Input<number>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    readonly resourceGroupName: pulumi.Input<string>;
}
