// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Defines the vCenter.
 */
export class VCenter extends pulumi.CustomResource {
    /**
     * Get an existing VCenter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VCenter {
        return new VCenter(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:connectedvmwarevsphere/v20201001preview:VCenter';

    /**
     * Returns true if the given object is an instance of VCenter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VCenter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VCenter.__pulumiType;
    }

    /**
     * Gets or sets the connection status to the vCenter.
     */
    public /*out*/ readonly connectionStatus!: pulumi.Output<string>;
    /**
     * Username / Password Credentials to connect to vcenter.
     */
    public readonly credentials!: pulumi.Output<outputs.connectedvmwarevsphere.v20201001preview.VICredentialResponse | undefined>;
    /**
     * Gets the name of the corresponding resource in Kubernetes.
     */
    public /*out*/ readonly customResourceName!: pulumi.Output<string>;
    /**
     * Gets or sets the extended location.
     */
    public readonly extendedLocation!: pulumi.Output<outputs.connectedvmwarevsphere.v20201001preview.ExtendedLocationResponse | undefined>;
    /**
     * Gets or sets the FQDN/IPAddress of the vCenter.
     */
    public readonly fqdn!: pulumi.Output<string>;
    /**
     * Gets or sets the instance UUID of the vCenter.
     */
    public /*out*/ readonly instanceUuid!: pulumi.Output<string>;
    /**
     * Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Gets or sets the location.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Gets or sets the name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Gets or sets the port of the vCenter.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Gets or sets the provisioning state.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The resource status information.
     */
    public /*out*/ readonly statuses!: pulumi.Output<outputs.connectedvmwarevsphere.v20201001preview.ResourceStatusResponse[]>;
    /**
     * The system data.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.connectedvmwarevsphere.v20201001preview.SystemDataResponse>;
    /**
     * Gets or sets the Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Gets or sets the type of the resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Gets or sets a unique identifier for this resource.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    /**
     * Gets or sets the version of the vCenter.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a VCenter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VCenterArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.fqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdn'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["credentials"] = args ? args.credentials : undefined;
            inputs["extendedLocation"] = args ? args.extendedLocation : undefined;
            inputs["fqdn"] = args ? args.fqdn : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vcenterName"] = args ? args.vcenterName : undefined;
            inputs["connectionStatus"] = undefined /*out*/;
            inputs["customResourceName"] = undefined /*out*/;
            inputs["instanceUuid"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["statuses"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["uuid"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        } else {
            inputs["connectionStatus"] = undefined /*out*/;
            inputs["credentials"] = undefined /*out*/;
            inputs["customResourceName"] = undefined /*out*/;
            inputs["extendedLocation"] = undefined /*out*/;
            inputs["fqdn"] = undefined /*out*/;
            inputs["instanceUuid"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["port"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["statuses"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["uuid"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:connectedvmwarevsphere/v20201001preview:VCenter" }, { type: "azure-native:connectedvmwarevsphere:VCenter" }, { type: "azure-nextgen:connectedvmwarevsphere:VCenter" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(VCenter.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a VCenter resource.
 */
export interface VCenterArgs {
    /**
     * Username / Password Credentials to connect to vcenter.
     */
    credentials?: pulumi.Input<inputs.connectedvmwarevsphere.v20201001preview.VICredentialArgs>;
    /**
     * Gets or sets the extended location.
     */
    extendedLocation?: pulumi.Input<inputs.connectedvmwarevsphere.v20201001preview.ExtendedLocationArgs>;
    /**
     * Gets or sets the FQDN/IPAddress of the vCenter.
     */
    fqdn: pulumi.Input<string>;
    /**
     * Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
     */
    kind?: pulumi.Input<string>;
    /**
     * Gets or sets the location.
     */
    location?: pulumi.Input<string>;
    /**
     * Gets or sets the port of the vCenter.
     */
    port?: pulumi.Input<number>;
    /**
     * The Resource Group Name.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Gets or sets the Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the vCenter.
     */
    vcenterName?: pulumi.Input<string>;
}
