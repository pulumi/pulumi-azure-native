// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Pool resource
 * API Version: 2023-03-01-preview.
 */
export class Pool extends pulumi.CustomResource {
    /**
     * Get an existing Pool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Pool {
        return new Pool(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:containerstorage:Pool';

    /**
     * Returns true if the given object is an instance of Pool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pool.__pulumiType;
    }

    /**
     * List of resources that should have access to the pool. Typically ARM references to AKS clusters or ACI Container Groups. For local and standard this must be a single reference. For portable there can be many.
     */
    public readonly assignments!: pulumi.Output<string[]>;
    /**
     * Disk Pool Properties
     */
    public readonly diskPoolProperties!: pulumi.Output<outputs.containerstorage.DiskPoolPropertiesResponse | undefined>;
    /**
     * Elastic San Pool Properties
     */
    public readonly elasticSanPoolProperties!: pulumi.Output<outputs.containerstorage.ElasticSanPoolPropertiesResponse>;
    /**
     * Ephemeral Pool Properties
     */
    public readonly ephemeralPoolProperties!: pulumi.Output<outputs.containerstorage.EphemeralPoolPropertiesResponse | undefined>;
    /**
     * The geo-location where the resource lives
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Initial capacity of the pool in GiB.
     */
    public readonly poolCapacityGiB!: pulumi.Output<number>;
    /**
     * Type of the Pool: ephemeral, disk, managed, or elasticsan.
     */
    public readonly poolType!: pulumi.Output<number>;
    /**
     * The status of the last operation.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.containerstorage.SystemDataResponse>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * List of availability zones that resources can be created in.
     */
    public readonly zones!: pulumi.Output<string[]>;

    /**
     * Create a Pool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PoolArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.assignments === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assignments'");
            }
            if ((!args || args.elasticSanPoolProperties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'elasticSanPoolProperties'");
            }
            if ((!args || args.poolCapacityGiB === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolCapacityGiB'");
            }
            if ((!args || args.poolType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.zones === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zones'");
            }
            resourceInputs["assignments"] = args ? args.assignments : undefined;
            resourceInputs["diskPoolProperties"] = args ? (args.diskPoolProperties ? pulumi.output(args.diskPoolProperties).apply(inputs.containerstorage.diskPoolPropertiesArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["elasticSanPoolProperties"] = args ? args.elasticSanPoolProperties : undefined;
            resourceInputs["ephemeralPoolProperties"] = args ? (args.ephemeralPoolProperties ? pulumi.output(args.ephemeralPoolProperties).apply(inputs.containerstorage.ephemeralPoolPropertiesArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["poolCapacityGiB"] = args ? args.poolCapacityGiB : undefined;
            resourceInputs["poolName"] = args ? args.poolName : undefined;
            resourceInputs["poolType"] = args ? args.poolType : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["assignments"] = undefined /*out*/;
            resourceInputs["diskPoolProperties"] = undefined /*out*/;
            resourceInputs["elasticSanPoolProperties"] = undefined /*out*/;
            resourceInputs["ephemeralPoolProperties"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["poolCapacityGiB"] = undefined /*out*/;
            resourceInputs["poolType"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["zones"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:containerstorage/v20230301preview:Pool" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Pool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Pool resource.
 */
export interface PoolArgs {
    /**
     * List of resources that should have access to the pool. Typically ARM references to AKS clusters or ACI Container Groups. For local and standard this must be a single reference. For portable there can be many.
     */
    assignments: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disk Pool Properties
     */
    diskPoolProperties?: pulumi.Input<inputs.containerstorage.DiskPoolPropertiesArgs>;
    /**
     * Elastic San Pool Properties
     */
    elasticSanPoolProperties: pulumi.Input<inputs.containerstorage.ElasticSanPoolPropertiesArgs>;
    /**
     * Ephemeral Pool Properties
     */
    ephemeralPoolProperties?: pulumi.Input<inputs.containerstorage.EphemeralPoolPropertiesArgs>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * Initial capacity of the pool in GiB.
     */
    poolCapacityGiB: pulumi.Input<number>;
    /**
     * Pool Object
     */
    poolName?: pulumi.Input<string>;
    /**
     * Type of the Pool: ephemeral, disk, managed, or elasticsan.
     */
    poolType: pulumi.Input<number>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of availability zones that resources can be created in.
     */
    zones: pulumi.Input<pulumi.Input<string>[]>;
}
