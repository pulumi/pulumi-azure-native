// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ACIServiceArgs } from "./aciservice";
export type ACIService = import("./aciservice").ACIService;
export const ACIService: typeof import("./aciservice").ACIService = null as any;
utilities.lazyLoad(exports, ["ACIService"], () => require("./aciservice"));

export { AKSServiceArgs } from "./aksservice";
export type AKSService = import("./aksservice").AKSService;
export const AKSService: typeof import("./aksservice").AKSService = null as any;
utilities.lazyLoad(exports, ["AKSService"], () => require("./aksservice"));

export { EndpointVariantArgs } from "./endpointVariant";
export type EndpointVariant = import("./endpointVariant").EndpointVariant;
export const EndpointVariant: typeof import("./endpointVariant").EndpointVariant = null as any;
utilities.lazyLoad(exports, ["EndpointVariant"], () => require("./endpointVariant"));

export { GetACIServiceArgs, GetACIServiceResult, GetACIServiceOutputArgs } from "./getACIService";
export const getACIService: typeof import("./getACIService").getACIService = null as any;
export const getACIServiceOutput: typeof import("./getACIService").getACIServiceOutput = null as any;
utilities.lazyLoad(exports, ["getACIService","getACIServiceOutput"], () => require("./getACIService"));

export { GetAKSServiceArgs, GetAKSServiceResult, GetAKSServiceOutputArgs } from "./getAKSService";
export const getAKSService: typeof import("./getAKSService").getAKSService = null as any;
export const getAKSServiceOutput: typeof import("./getAKSService").getAKSServiceOutput = null as any;
utilities.lazyLoad(exports, ["getAKSService","getAKSServiceOutput"], () => require("./getAKSService"));

export { GetEndpointVariantArgs, GetEndpointVariantResult, GetEndpointVariantOutputArgs } from "./getEndpointVariant";
export const getEndpointVariant: typeof import("./getEndpointVariant").getEndpointVariant = null as any;
export const getEndpointVariantOutput: typeof import("./getEndpointVariant").getEndpointVariantOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointVariant","getEndpointVariantOutput"], () => require("./getEndpointVariant"));

export { GetLabelingJobArgs, GetLabelingJobResult, GetLabelingJobOutputArgs } from "./getLabelingJob";
export const getLabelingJob: typeof import("./getLabelingJob").getLabelingJob = null as any;
export const getLabelingJobOutput: typeof import("./getLabelingJob").getLabelingJobOutput = null as any;
utilities.lazyLoad(exports, ["getLabelingJob","getLabelingJobOutput"], () => require("./getLabelingJob"));

export { GetLinkedServiceArgs, GetLinkedServiceResult, GetLinkedServiceOutputArgs } from "./getLinkedService";
export const getLinkedService: typeof import("./getLinkedService").getLinkedService = null as any;
export const getLinkedServiceOutput: typeof import("./getLinkedService").getLinkedServiceOutput = null as any;
utilities.lazyLoad(exports, ["getLinkedService","getLinkedServiceOutput"], () => require("./getLinkedService"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { LabelingJobArgs } from "./labelingJob";
export type LabelingJob = import("./labelingJob").LabelingJob;
export const LabelingJob: typeof import("./labelingJob").LabelingJob = null as any;
utilities.lazyLoad(exports, ["LabelingJob"], () => require("./labelingJob"));

export { LinkedServiceArgs } from "./linkedService";
export type LinkedService = import("./linkedService").LinkedService;
export const LinkedService: typeof import("./linkedService").LinkedService = null as any;
utilities.lazyLoad(exports, ["LinkedService"], () => require("./linkedService"));

export { ListNotebookKeysArgs, ListNotebookKeysResult, ListNotebookKeysOutputArgs } from "./listNotebookKeys";
export const listNotebookKeys: typeof import("./listNotebookKeys").listNotebookKeys = null as any;
export const listNotebookKeysOutput: typeof import("./listNotebookKeys").listNotebookKeysOutput = null as any;
utilities.lazyLoad(exports, ["listNotebookKeys","listNotebookKeysOutput"], () => require("./listNotebookKeys"));

export { ListWorkspaceKeysArgs, ListWorkspaceKeysResult, ListWorkspaceKeysOutputArgs } from "./listWorkspaceKeys";
export const listWorkspaceKeys: typeof import("./listWorkspaceKeys").listWorkspaceKeys = null as any;
export const listWorkspaceKeysOutput: typeof import("./listWorkspaceKeys").listWorkspaceKeysOutput = null as any;
utilities.lazyLoad(exports, ["listWorkspaceKeys","listWorkspaceKeysOutput"], () => require("./listWorkspaceKeys"));

export { WorkspaceArgs } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


// Export enums:
export * from "../../types/enums/machinelearningservices/v20200901preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:machinelearningservices/v20200901preview:ACIService":
                return new ACIService(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices/v20200901preview:AKSService":
                return new AKSService(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices/v20200901preview:EndpointVariant":
                return new EndpointVariant(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices/v20200901preview:LabelingJob":
                return new LabelingJob(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices/v20200901preview:LinkedService":
                return new LinkedService(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices/v20200901preview:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "machinelearningservices/v20200901preview", _module)
