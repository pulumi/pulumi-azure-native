// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ACIServiceArgs } from "./aciservice";
export type ACIService = import("./aciservice").ACIService;
export const ACIService: typeof import("./aciservice").ACIService = null as any;
utilities.lazyLoad(exports, ["ACIService"], () => require("./aciservice"));

export { AKSServiceArgs } from "./aksservice";
export type AKSService = import("./aksservice").AKSService;
export const AKSService: typeof import("./aksservice").AKSService = null as any;
utilities.lazyLoad(exports, ["AKSService"], () => require("./aksservice"));

export { BatchDeploymentArgs } from "./batchDeployment";
export type BatchDeployment = import("./batchDeployment").BatchDeployment;
export const BatchDeployment: typeof import("./batchDeployment").BatchDeployment = null as any;
utilities.lazyLoad(exports, ["BatchDeployment"], () => require("./batchDeployment"));

export { BatchEndpointArgs } from "./batchEndpoint";
export type BatchEndpoint = import("./batchEndpoint").BatchEndpoint;
export const BatchEndpoint: typeof import("./batchEndpoint").BatchEndpoint = null as any;
utilities.lazyLoad(exports, ["BatchEndpoint"], () => require("./batchEndpoint"));

export { CodeContainerArgs } from "./codeContainer";
export type CodeContainer = import("./codeContainer").CodeContainer;
export const CodeContainer: typeof import("./codeContainer").CodeContainer = null as any;
utilities.lazyLoad(exports, ["CodeContainer"], () => require("./codeContainer"));

export { CodeVersionArgs } from "./codeVersion";
export type CodeVersion = import("./codeVersion").CodeVersion;
export const CodeVersion: typeof import("./codeVersion").CodeVersion = null as any;
utilities.lazyLoad(exports, ["CodeVersion"], () => require("./codeVersion"));

export { ComponentContainerArgs } from "./componentContainer";
export type ComponentContainer = import("./componentContainer").ComponentContainer;
export const ComponentContainer: typeof import("./componentContainer").ComponentContainer = null as any;
utilities.lazyLoad(exports, ["ComponentContainer"], () => require("./componentContainer"));

export { ComponentVersionArgs } from "./componentVersion";
export type ComponentVersion = import("./componentVersion").ComponentVersion;
export const ComponentVersion: typeof import("./componentVersion").ComponentVersion = null as any;
utilities.lazyLoad(exports, ["ComponentVersion"], () => require("./componentVersion"));

export { DataContainerArgs } from "./dataContainer";
export type DataContainer = import("./dataContainer").DataContainer;
export const DataContainer: typeof import("./dataContainer").DataContainer = null as any;
utilities.lazyLoad(exports, ["DataContainer"], () => require("./dataContainer"));

export { DataVersionArgs } from "./dataVersion";
export type DataVersion = import("./dataVersion").DataVersion;
export const DataVersion: typeof import("./dataVersion").DataVersion = null as any;
utilities.lazyLoad(exports, ["DataVersion"], () => require("./dataVersion"));

export { EndpointVariantArgs } from "./endpointVariant";
export type EndpointVariant = import("./endpointVariant").EndpointVariant;
export const EndpointVariant: typeof import("./endpointVariant").EndpointVariant = null as any;
utilities.lazyLoad(exports, ["EndpointVariant"], () => require("./endpointVariant"));

export { EnvironmentContainerArgs } from "./environmentContainer";
export type EnvironmentContainer = import("./environmentContainer").EnvironmentContainer;
export const EnvironmentContainer: typeof import("./environmentContainer").EnvironmentContainer = null as any;
utilities.lazyLoad(exports, ["EnvironmentContainer"], () => require("./environmentContainer"));

export { EnvironmentSpecificationVersionArgs } from "./environmentSpecificationVersion";
export type EnvironmentSpecificationVersion = import("./environmentSpecificationVersion").EnvironmentSpecificationVersion;
export const EnvironmentSpecificationVersion: typeof import("./environmentSpecificationVersion").EnvironmentSpecificationVersion = null as any;
utilities.lazyLoad(exports, ["EnvironmentSpecificationVersion"], () => require("./environmentSpecificationVersion"));

export { GetACIServiceArgs, GetACIServiceResult, GetACIServiceOutputArgs } from "./getACIService";
export const getACIService: typeof import("./getACIService").getACIService = null as any;
export const getACIServiceOutput: typeof import("./getACIService").getACIServiceOutput = null as any;
utilities.lazyLoad(exports, ["getACIService","getACIServiceOutput"], () => require("./getACIService"));

export { GetAKSServiceArgs, GetAKSServiceResult, GetAKSServiceOutputArgs } from "./getAKSService";
export const getAKSService: typeof import("./getAKSService").getAKSService = null as any;
export const getAKSServiceOutput: typeof import("./getAKSService").getAKSServiceOutput = null as any;
utilities.lazyLoad(exports, ["getAKSService","getAKSServiceOutput"], () => require("./getAKSService"));

export { GetBatchDeploymentArgs, GetBatchDeploymentResult, GetBatchDeploymentOutputArgs } from "./getBatchDeployment";
export const getBatchDeployment: typeof import("./getBatchDeployment").getBatchDeployment = null as any;
export const getBatchDeploymentOutput: typeof import("./getBatchDeployment").getBatchDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getBatchDeployment","getBatchDeploymentOutput"], () => require("./getBatchDeployment"));

export { GetBatchEndpointArgs, GetBatchEndpointResult, GetBatchEndpointOutputArgs } from "./getBatchEndpoint";
export const getBatchEndpoint: typeof import("./getBatchEndpoint").getBatchEndpoint = null as any;
export const getBatchEndpointOutput: typeof import("./getBatchEndpoint").getBatchEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getBatchEndpoint","getBatchEndpointOutput"], () => require("./getBatchEndpoint"));

export { GetCodeContainerArgs, GetCodeContainerResult, GetCodeContainerOutputArgs } from "./getCodeContainer";
export const getCodeContainer: typeof import("./getCodeContainer").getCodeContainer = null as any;
export const getCodeContainerOutput: typeof import("./getCodeContainer").getCodeContainerOutput = null as any;
utilities.lazyLoad(exports, ["getCodeContainer","getCodeContainerOutput"], () => require("./getCodeContainer"));

export { GetCodeVersionArgs, GetCodeVersionResult, GetCodeVersionOutputArgs } from "./getCodeVersion";
export const getCodeVersion: typeof import("./getCodeVersion").getCodeVersion = null as any;
export const getCodeVersionOutput: typeof import("./getCodeVersion").getCodeVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCodeVersion","getCodeVersionOutput"], () => require("./getCodeVersion"));

export { GetComponentContainerArgs, GetComponentContainerResult, GetComponentContainerOutputArgs } from "./getComponentContainer";
export const getComponentContainer: typeof import("./getComponentContainer").getComponentContainer = null as any;
export const getComponentContainerOutput: typeof import("./getComponentContainer").getComponentContainerOutput = null as any;
utilities.lazyLoad(exports, ["getComponentContainer","getComponentContainerOutput"], () => require("./getComponentContainer"));

export { GetComponentVersionArgs, GetComponentVersionResult, GetComponentVersionOutputArgs } from "./getComponentVersion";
export const getComponentVersion: typeof import("./getComponentVersion").getComponentVersion = null as any;
export const getComponentVersionOutput: typeof import("./getComponentVersion").getComponentVersionOutput = null as any;
utilities.lazyLoad(exports, ["getComponentVersion","getComponentVersionOutput"], () => require("./getComponentVersion"));

export { GetDataContainerArgs, GetDataContainerResult, GetDataContainerOutputArgs } from "./getDataContainer";
export const getDataContainer: typeof import("./getDataContainer").getDataContainer = null as any;
export const getDataContainerOutput: typeof import("./getDataContainer").getDataContainerOutput = null as any;
utilities.lazyLoad(exports, ["getDataContainer","getDataContainerOutput"], () => require("./getDataContainer"));

export { GetDataVersionArgs, GetDataVersionResult, GetDataVersionOutputArgs } from "./getDataVersion";
export const getDataVersion: typeof import("./getDataVersion").getDataVersion = null as any;
export const getDataVersionOutput: typeof import("./getDataVersion").getDataVersionOutput = null as any;
utilities.lazyLoad(exports, ["getDataVersion","getDataVersionOutput"], () => require("./getDataVersion"));

export { GetEndpointVariantArgs, GetEndpointVariantResult, GetEndpointVariantOutputArgs } from "./getEndpointVariant";
export const getEndpointVariant: typeof import("./getEndpointVariant").getEndpointVariant = null as any;
export const getEndpointVariantOutput: typeof import("./getEndpointVariant").getEndpointVariantOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointVariant","getEndpointVariantOutput"], () => require("./getEndpointVariant"));

export { GetEnvironmentContainerArgs, GetEnvironmentContainerResult, GetEnvironmentContainerOutputArgs } from "./getEnvironmentContainer";
export const getEnvironmentContainer: typeof import("./getEnvironmentContainer").getEnvironmentContainer = null as any;
export const getEnvironmentContainerOutput: typeof import("./getEnvironmentContainer").getEnvironmentContainerOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentContainer","getEnvironmentContainerOutput"], () => require("./getEnvironmentContainer"));

export { GetEnvironmentSpecificationVersionArgs, GetEnvironmentSpecificationVersionResult, GetEnvironmentSpecificationVersionOutputArgs } from "./getEnvironmentSpecificationVersion";
export const getEnvironmentSpecificationVersion: typeof import("./getEnvironmentSpecificationVersion").getEnvironmentSpecificationVersion = null as any;
export const getEnvironmentSpecificationVersionOutput: typeof import("./getEnvironmentSpecificationVersion").getEnvironmentSpecificationVersionOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentSpecificationVersion","getEnvironmentSpecificationVersionOutput"], () => require("./getEnvironmentSpecificationVersion"));

export { GetJobArgs, GetJobResult, GetJobOutputArgs } from "./getJob";
export const getJob: typeof import("./getJob").getJob = null as any;
export const getJobOutput: typeof import("./getJob").getJobOutput = null as any;
utilities.lazyLoad(exports, ["getJob","getJobOutput"], () => require("./getJob"));

export { GetLabelingJobArgs, GetLabelingJobResult, GetLabelingJobOutputArgs } from "./getLabelingJob";
export const getLabelingJob: typeof import("./getLabelingJob").getLabelingJob = null as any;
export const getLabelingJobOutput: typeof import("./getLabelingJob").getLabelingJobOutput = null as any;
utilities.lazyLoad(exports, ["getLabelingJob","getLabelingJobOutput"], () => require("./getLabelingJob"));

export { GetLinkedServiceArgs, GetLinkedServiceResult, GetLinkedServiceOutputArgs } from "./getLinkedService";
export const getLinkedService: typeof import("./getLinkedService").getLinkedService = null as any;
export const getLinkedServiceOutput: typeof import("./getLinkedService").getLinkedServiceOutput = null as any;
utilities.lazyLoad(exports, ["getLinkedService","getLinkedServiceOutput"], () => require("./getLinkedService"));

export { GetLinkedWorkspaceArgs, GetLinkedWorkspaceResult, GetLinkedWorkspaceOutputArgs } from "./getLinkedWorkspace";
export const getLinkedWorkspace: typeof import("./getLinkedWorkspace").getLinkedWorkspace = null as any;
export const getLinkedWorkspaceOutput: typeof import("./getLinkedWorkspace").getLinkedWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getLinkedWorkspace","getLinkedWorkspaceOutput"], () => require("./getLinkedWorkspace"));

export { GetMachineLearningComputeArgs, GetMachineLearningComputeResult, GetMachineLearningComputeOutputArgs } from "./getMachineLearningCompute";
export const getMachineLearningCompute: typeof import("./getMachineLearningCompute").getMachineLearningCompute = null as any;
export const getMachineLearningComputeOutput: typeof import("./getMachineLearningCompute").getMachineLearningComputeOutput = null as any;
utilities.lazyLoad(exports, ["getMachineLearningCompute","getMachineLearningComputeOutput"], () => require("./getMachineLearningCompute"));

export { GetMachineLearningDatasetArgs, GetMachineLearningDatasetResult, GetMachineLearningDatasetOutputArgs } from "./getMachineLearningDataset";
export const getMachineLearningDataset: typeof import("./getMachineLearningDataset").getMachineLearningDataset = null as any;
export const getMachineLearningDatasetOutput: typeof import("./getMachineLearningDataset").getMachineLearningDatasetOutput = null as any;
utilities.lazyLoad(exports, ["getMachineLearningDataset","getMachineLearningDatasetOutput"], () => require("./getMachineLearningDataset"));

export { GetMachineLearningDatastoreArgs, GetMachineLearningDatastoreResult, GetMachineLearningDatastoreOutputArgs } from "./getMachineLearningDatastore";
export const getMachineLearningDatastore: typeof import("./getMachineLearningDatastore").getMachineLearningDatastore = null as any;
export const getMachineLearningDatastoreOutput: typeof import("./getMachineLearningDatastore").getMachineLearningDatastoreOutput = null as any;
utilities.lazyLoad(exports, ["getMachineLearningDatastore","getMachineLearningDatastoreOutput"], () => require("./getMachineLearningDatastore"));

export { GetModelContainerArgs, GetModelContainerResult, GetModelContainerOutputArgs } from "./getModelContainer";
export const getModelContainer: typeof import("./getModelContainer").getModelContainer = null as any;
export const getModelContainerOutput: typeof import("./getModelContainer").getModelContainerOutput = null as any;
utilities.lazyLoad(exports, ["getModelContainer","getModelContainerOutput"], () => require("./getModelContainer"));

export { GetModelVersionArgs, GetModelVersionResult, GetModelVersionOutputArgs } from "./getModelVersion";
export const getModelVersion: typeof import("./getModelVersion").getModelVersion = null as any;
export const getModelVersionOutput: typeof import("./getModelVersion").getModelVersionOutput = null as any;
utilities.lazyLoad(exports, ["getModelVersion","getModelVersionOutput"], () => require("./getModelVersion"));

export { GetOnlineDeploymentArgs, GetOnlineDeploymentResult, GetOnlineDeploymentOutputArgs } from "./getOnlineDeployment";
export const getOnlineDeployment: typeof import("./getOnlineDeployment").getOnlineDeployment = null as any;
export const getOnlineDeploymentOutput: typeof import("./getOnlineDeployment").getOnlineDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getOnlineDeployment","getOnlineDeploymentOutput"], () => require("./getOnlineDeployment"));

export { GetOnlineDeploymentLogsArgs, GetOnlineDeploymentLogsResult, GetOnlineDeploymentLogsOutputArgs } from "./getOnlineDeploymentLogs";
export const getOnlineDeploymentLogs: typeof import("./getOnlineDeploymentLogs").getOnlineDeploymentLogs = null as any;
export const getOnlineDeploymentLogsOutput: typeof import("./getOnlineDeploymentLogs").getOnlineDeploymentLogsOutput = null as any;
utilities.lazyLoad(exports, ["getOnlineDeploymentLogs","getOnlineDeploymentLogsOutput"], () => require("./getOnlineDeploymentLogs"));

export { GetOnlineEndpointArgs, GetOnlineEndpointResult, GetOnlineEndpointOutputArgs } from "./getOnlineEndpoint";
export const getOnlineEndpoint: typeof import("./getOnlineEndpoint").getOnlineEndpoint = null as any;
export const getOnlineEndpointOutput: typeof import("./getOnlineEndpoint").getOnlineEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getOnlineEndpoint","getOnlineEndpointOutput"], () => require("./getOnlineEndpoint"));

export { GetOnlineEndpointTokenArgs, GetOnlineEndpointTokenResult, GetOnlineEndpointTokenOutputArgs } from "./getOnlineEndpointToken";
export const getOnlineEndpointToken: typeof import("./getOnlineEndpointToken").getOnlineEndpointToken = null as any;
export const getOnlineEndpointTokenOutput: typeof import("./getOnlineEndpointToken").getOnlineEndpointTokenOutput = null as any;
utilities.lazyLoad(exports, ["getOnlineEndpointToken","getOnlineEndpointTokenOutput"], () => require("./getOnlineEndpointToken"));

export { GetPrivateEndpointConnectionArgs, GetPrivateEndpointConnectionResult, GetPrivateEndpointConnectionOutputArgs } from "./getPrivateEndpointConnection";
export const getPrivateEndpointConnection: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnection = null as any;
export const getPrivateEndpointConnectionOutput: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateEndpointConnection","getPrivateEndpointConnectionOutput"], () => require("./getPrivateEndpointConnection"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { GetWorkspaceConnectionArgs, GetWorkspaceConnectionResult, GetWorkspaceConnectionOutputArgs } from "./getWorkspaceConnection";
export const getWorkspaceConnection: typeof import("./getWorkspaceConnection").getWorkspaceConnection = null as any;
export const getWorkspaceConnectionOutput: typeof import("./getWorkspaceConnection").getWorkspaceConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceConnection","getWorkspaceConnectionOutput"], () => require("./getWorkspaceConnection"));

export { JobArgs } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { LabelingJobArgs } from "./labelingJob";
export type LabelingJob = import("./labelingJob").LabelingJob;
export const LabelingJob: typeof import("./labelingJob").LabelingJob = null as any;
utilities.lazyLoad(exports, ["LabelingJob"], () => require("./labelingJob"));

export { LinkedServiceArgs } from "./linkedService";
export type LinkedService = import("./linkedService").LinkedService;
export const LinkedService: typeof import("./linkedService").LinkedService = null as any;
utilities.lazyLoad(exports, ["LinkedService"], () => require("./linkedService"));

export { LinkedWorkspaceArgs } from "./linkedWorkspace";
export type LinkedWorkspace = import("./linkedWorkspace").LinkedWorkspace;
export const LinkedWorkspace: typeof import("./linkedWorkspace").LinkedWorkspace = null as any;
utilities.lazyLoad(exports, ["LinkedWorkspace"], () => require("./linkedWorkspace"));

export { ListBatchEndpointKeysArgs, ListBatchEndpointKeysResult, ListBatchEndpointKeysOutputArgs } from "./listBatchEndpointKeys";
export const listBatchEndpointKeys: typeof import("./listBatchEndpointKeys").listBatchEndpointKeys = null as any;
export const listBatchEndpointKeysOutput: typeof import("./listBatchEndpointKeys").listBatchEndpointKeysOutput = null as any;
utilities.lazyLoad(exports, ["listBatchEndpointKeys","listBatchEndpointKeysOutput"], () => require("./listBatchEndpointKeys"));

export { ListDatastoreSecretsArgs, ListDatastoreSecretsResult, ListDatastoreSecretsOutputArgs } from "./listDatastoreSecrets";
export const listDatastoreSecrets: typeof import("./listDatastoreSecrets").listDatastoreSecrets = null as any;
export const listDatastoreSecretsOutput: typeof import("./listDatastoreSecrets").listDatastoreSecretsOutput = null as any;
utilities.lazyLoad(exports, ["listDatastoreSecrets","listDatastoreSecretsOutput"], () => require("./listDatastoreSecrets"));

export { ListMachineLearningComputeKeysArgs, ListMachineLearningComputeKeysResult, ListMachineLearningComputeKeysOutputArgs } from "./listMachineLearningComputeKeys";
export const listMachineLearningComputeKeys: typeof import("./listMachineLearningComputeKeys").listMachineLearningComputeKeys = null as any;
export const listMachineLearningComputeKeysOutput: typeof import("./listMachineLearningComputeKeys").listMachineLearningComputeKeysOutput = null as any;
utilities.lazyLoad(exports, ["listMachineLearningComputeKeys","listMachineLearningComputeKeysOutput"], () => require("./listMachineLearningComputeKeys"));

export { ListMachineLearningComputeNodesArgs, ListMachineLearningComputeNodesResult, ListMachineLearningComputeNodesOutputArgs } from "./listMachineLearningComputeNodes";
export const listMachineLearningComputeNodes: typeof import("./listMachineLearningComputeNodes").listMachineLearningComputeNodes = null as any;
export const listMachineLearningComputeNodesOutput: typeof import("./listMachineLearningComputeNodes").listMachineLearningComputeNodesOutput = null as any;
utilities.lazyLoad(exports, ["listMachineLearningComputeNodes","listMachineLearningComputeNodesOutput"], () => require("./listMachineLearningComputeNodes"));

export { ListNotebookKeysArgs, ListNotebookKeysResult, ListNotebookKeysOutputArgs } from "./listNotebookKeys";
export const listNotebookKeys: typeof import("./listNotebookKeys").listNotebookKeys = null as any;
export const listNotebookKeysOutput: typeof import("./listNotebookKeys").listNotebookKeysOutput = null as any;
utilities.lazyLoad(exports, ["listNotebookKeys","listNotebookKeysOutput"], () => require("./listNotebookKeys"));

export { ListOnlineEndpointKeysArgs, ListOnlineEndpointKeysResult, ListOnlineEndpointKeysOutputArgs } from "./listOnlineEndpointKeys";
export const listOnlineEndpointKeys: typeof import("./listOnlineEndpointKeys").listOnlineEndpointKeys = null as any;
export const listOnlineEndpointKeysOutput: typeof import("./listOnlineEndpointKeys").listOnlineEndpointKeysOutput = null as any;
utilities.lazyLoad(exports, ["listOnlineEndpointKeys","listOnlineEndpointKeysOutput"], () => require("./listOnlineEndpointKeys"));

export { ListStorageAccountKeysArgs, ListStorageAccountKeysResult, ListStorageAccountKeysOutputArgs } from "./listStorageAccountKeys";
export const listStorageAccountKeys: typeof import("./listStorageAccountKeys").listStorageAccountKeys = null as any;
export const listStorageAccountKeysOutput: typeof import("./listStorageAccountKeys").listStorageAccountKeysOutput = null as any;
utilities.lazyLoad(exports, ["listStorageAccountKeys","listStorageAccountKeysOutput"], () => require("./listStorageAccountKeys"));

export { ListWorkspaceKeysArgs, ListWorkspaceKeysResult, ListWorkspaceKeysOutputArgs } from "./listWorkspaceKeys";
export const listWorkspaceKeys: typeof import("./listWorkspaceKeys").listWorkspaceKeys = null as any;
export const listWorkspaceKeysOutput: typeof import("./listWorkspaceKeys").listWorkspaceKeysOutput = null as any;
utilities.lazyLoad(exports, ["listWorkspaceKeys","listWorkspaceKeysOutput"], () => require("./listWorkspaceKeys"));

export { ListWorkspaceNotebookAccessTokenArgs, ListWorkspaceNotebookAccessTokenResult, ListWorkspaceNotebookAccessTokenOutputArgs } from "./listWorkspaceNotebookAccessToken";
export const listWorkspaceNotebookAccessToken: typeof import("./listWorkspaceNotebookAccessToken").listWorkspaceNotebookAccessToken = null as any;
export const listWorkspaceNotebookAccessTokenOutput: typeof import("./listWorkspaceNotebookAccessToken").listWorkspaceNotebookAccessTokenOutput = null as any;
utilities.lazyLoad(exports, ["listWorkspaceNotebookAccessToken","listWorkspaceNotebookAccessTokenOutput"], () => require("./listWorkspaceNotebookAccessToken"));

export { MachineLearningComputeArgs } from "./machineLearningCompute";
export type MachineLearningCompute = import("./machineLearningCompute").MachineLearningCompute;
export const MachineLearningCompute: typeof import("./machineLearningCompute").MachineLearningCompute = null as any;
utilities.lazyLoad(exports, ["MachineLearningCompute"], () => require("./machineLearningCompute"));

export { MachineLearningDatasetArgs } from "./machineLearningDataset";
export type MachineLearningDataset = import("./machineLearningDataset").MachineLearningDataset;
export const MachineLearningDataset: typeof import("./machineLearningDataset").MachineLearningDataset = null as any;
utilities.lazyLoad(exports, ["MachineLearningDataset"], () => require("./machineLearningDataset"));

export { MachineLearningDatastoreArgs } from "./machineLearningDatastore";
export type MachineLearningDatastore = import("./machineLearningDatastore").MachineLearningDatastore;
export const MachineLearningDatastore: typeof import("./machineLearningDatastore").MachineLearningDatastore = null as any;
utilities.lazyLoad(exports, ["MachineLearningDatastore"], () => require("./machineLearningDatastore"));

export { ModelContainerArgs } from "./modelContainer";
export type ModelContainer = import("./modelContainer").ModelContainer;
export const ModelContainer: typeof import("./modelContainer").ModelContainer = null as any;
utilities.lazyLoad(exports, ["ModelContainer"], () => require("./modelContainer"));

export { ModelVersionArgs } from "./modelVersion";
export type ModelVersion = import("./modelVersion").ModelVersion;
export const ModelVersion: typeof import("./modelVersion").ModelVersion = null as any;
utilities.lazyLoad(exports, ["ModelVersion"], () => require("./modelVersion"));

export { OnlineDeploymentArgs } from "./onlineDeployment";
export type OnlineDeployment = import("./onlineDeployment").OnlineDeployment;
export const OnlineDeployment: typeof import("./onlineDeployment").OnlineDeployment = null as any;
utilities.lazyLoad(exports, ["OnlineDeployment"], () => require("./onlineDeployment"));

export { OnlineEndpointArgs } from "./onlineEndpoint";
export type OnlineEndpoint = import("./onlineEndpoint").OnlineEndpoint;
export const OnlineEndpoint: typeof import("./onlineEndpoint").OnlineEndpoint = null as any;
utilities.lazyLoad(exports, ["OnlineEndpoint"], () => require("./onlineEndpoint"));

export { PrivateEndpointConnectionArgs } from "./privateEndpointConnection";
export type PrivateEndpointConnection = import("./privateEndpointConnection").PrivateEndpointConnection;
export const PrivateEndpointConnection: typeof import("./privateEndpointConnection").PrivateEndpointConnection = null as any;
utilities.lazyLoad(exports, ["PrivateEndpointConnection"], () => require("./privateEndpointConnection"));

export { WorkspaceArgs } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));

export { WorkspaceConnectionArgs } from "./workspaceConnection";
export type WorkspaceConnection = import("./workspaceConnection").WorkspaceConnection;
export const WorkspaceConnection: typeof import("./workspaceConnection").WorkspaceConnection = null as any;
utilities.lazyLoad(exports, ["WorkspaceConnection"], () => require("./workspaceConnection"));


// Export enums:
export * from "../types/enums/machinelearningservices";

// Export sub-modules:
import * as v20180301preview from "./v20180301preview";
import * as v20181119 from "./v20181119";
import * as v20190501 from "./v20190501";
import * as v20190601 from "./v20190601";
import * as v20191101 from "./v20191101";
import * as v20200101 from "./v20200101";
import * as v20200218preview from "./v20200218preview";
import * as v20200301 from "./v20200301";
import * as v20200401 from "./v20200401";
import * as v20200501preview from "./v20200501preview";
import * as v20200515preview from "./v20200515preview";
import * as v20200601 from "./v20200601";
import * as v20200801 from "./v20200801";
import * as v20200901preview from "./v20200901preview";
import * as v20210101 from "./v20210101";
import * as v20210301preview from "./v20210301preview";
import * as v20210401 from "./v20210401";
import * as v20210701 from "./v20210701";
import * as v20220101preview from "./v20220101preview";
import * as v20220201preview from "./v20220201preview";
import * as v20220501 from "./v20220501";
import * as v20220601preview from "./v20220601preview";
import * as v20221001 from "./v20221001";
import * as v20221001preview from "./v20221001preview";
import * as v20221201preview from "./v20221201preview";
import * as v20230401preview from "./v20230401preview";

export {
    v20180301preview,
    v20181119,
    v20190501,
    v20190601,
    v20191101,
    v20200101,
    v20200218preview,
    v20200301,
    v20200401,
    v20200501preview,
    v20200515preview,
    v20200601,
    v20200801,
    v20200901preview,
    v20210101,
    v20210301preview,
    v20210401,
    v20210701,
    v20220101preview,
    v20220201preview,
    v20220501,
    v20220601preview,
    v20221001,
    v20221001preview,
    v20221201preview,
    v20230401preview,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:machinelearningservices:ACIService":
                return new ACIService(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:AKSService":
                return new AKSService(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:BatchDeployment":
                return new BatchDeployment(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:BatchEndpoint":
                return new BatchEndpoint(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:CodeContainer":
                return new CodeContainer(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:CodeVersion":
                return new CodeVersion(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:ComponentContainer":
                return new ComponentContainer(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:ComponentVersion":
                return new ComponentVersion(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:DataContainer":
                return new DataContainer(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:DataVersion":
                return new DataVersion(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:EndpointVariant":
                return new EndpointVariant(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:EnvironmentContainer":
                return new EnvironmentContainer(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:EnvironmentSpecificationVersion":
                return new EnvironmentSpecificationVersion(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:Job":
                return new Job(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:LabelingJob":
                return new LabelingJob(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:LinkedService":
                return new LinkedService(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:LinkedWorkspace":
                return new LinkedWorkspace(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:MachineLearningCompute":
                return new MachineLearningCompute(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:MachineLearningDataset":
                return new MachineLearningDataset(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:MachineLearningDatastore":
                return new MachineLearningDatastore(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:ModelContainer":
                return new ModelContainer(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:ModelVersion":
                return new ModelVersion(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:OnlineDeployment":
                return new OnlineDeployment(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:OnlineEndpoint":
                return new OnlineEndpoint(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:PrivateEndpointConnection":
                return new PrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            case "azure-native:machinelearningservices:WorkspaceConnection":
                return new WorkspaceConnection(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "machinelearningservices", _module)
