// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

export function getDedicatedCloudService(args: GetDedicatedCloudServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetDedicatedCloudServiceResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("azure-nextgen:vmwarecloudsimple:getDedicatedCloudService", {
        "dedicatedCloudServiceName": args.dedicatedCloudServiceName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface GetDedicatedCloudServiceArgs {
    /**
     * dedicated cloud Service name
     */
    readonly dedicatedCloudServiceName: string;
    /**
     * The name of the resource group
     */
    readonly resourceGroupName: string;
}

/**
 * Dedicated cloud service model
 */
export interface GetDedicatedCloudServiceResult {
    /**
     * gateway Subnet for the account. It will collect the subnet address and always treat it as /28
     */
    readonly gatewaySubnet: string;
    /**
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/dedicatedCloudServices/{dedicatedCloudServiceName}
     */
    readonly id: string;
    /**
     * indicates whether account onboarded or not in a given region
     */
    readonly isAccountOnboarded: string;
    /**
     * Azure region
     */
    readonly location: string;
    /**
     * {dedicatedCloudServiceName}
     */
    readonly name: string;
    /**
     * total nodes purchased
     */
    readonly nodes: number;
    /**
     * link to a service management web portal
     */
    readonly serviceURL: string;
    /**
     * The list of tags
     */
    readonly tags?: {[key: string]: string};
    /**
     * {resourceProviderNamespace}/{resourceType}
     */
    readonly type: string;
}
