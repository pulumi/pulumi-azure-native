// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Describes a Virtual Machine run command.
 *
 * Uses Azure REST API version 2024-11-01. In version 2.x of the Azure Native provider, it used API version 2023-03-01.
 *
 * Other available API versions: 2022-08-01, 2022-11-01, 2023-03-01, 2023-07-01, 2023-09-01, 2024-03-01, 2024-07-01, 2025-04-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native compute [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class VirtualMachineRunCommandByVirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachineRunCommandByVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VirtualMachineRunCommandByVirtualMachine {
        return new VirtualMachineRunCommandByVirtualMachine(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:compute:VirtualMachineRunCommandByVirtualMachine';

    /**
     * Returns true if the given object is an instance of VirtualMachineRunCommandByVirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachineRunCommandByVirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachineRunCommandByVirtualMachine.__pulumiType;
    }

    /**
     * Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete.
     */
    declare public readonly asyncExecution: pulumi.Output<boolean | undefined>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * User-assigned managed identity that has access to errorBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged
     */
    declare public readonly errorBlobManagedIdentity: pulumi.Output<outputs.compute.RunCommandManagedIdentityResponse | undefined>;
    /**
     * Specifies the Azure storage blob where script error stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer errorBlobManagedIdentity parameter.
     */
    declare public readonly errorBlobUri: pulumi.Output<string | undefined>;
    /**
     * The virtual machine run command instance view.
     */
    declare public /*out*/ readonly instanceView: pulumi.Output<outputs.compute.VirtualMachineRunCommandInstanceViewResponse>;
    /**
     * The geo-location where the resource lives
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * User-assigned managed identity that has access to outputBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged
     */
    declare public readonly outputBlobManagedIdentity: pulumi.Output<outputs.compute.RunCommandManagedIdentityResponse | undefined>;
    /**
     * Specifies the Azure storage blob where script output stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer outputBlobManagedIdentity parameter.
     */
    declare public readonly outputBlobUri: pulumi.Output<string | undefined>;
    /**
     * The parameters used by the script.
     */
    declare public readonly parameters: pulumi.Output<outputs.compute.RunCommandInputParameterResponse[] | undefined>;
    /**
     * The parameters used by the script.
     */
    declare public readonly protectedParameters: pulumi.Output<outputs.compute.RunCommandInputParameterResponse[] | undefined>;
    /**
     * The provisioning state, which only appears in the response. If treatFailureAsDeploymentFailure set to true, any failure in the script will fail the deployment and ProvisioningState will be marked as Failed. If treatFailureAsDeploymentFailure set to false, ProvisioningState would only reflect whether the run command was run or not by the extensions platform, it would not indicate whether script failed in case of script failures. See instance view of run command in case of script failures to see executionMessage, output, error: https://aka.ms/runcommandmanaged#get-execution-status-and-results
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * Specifies the user account password on the VM when executing the run command.
     */
    declare public readonly runAsPassword: pulumi.Output<string | undefined>;
    /**
     * Specifies the user account on the VM when executing the run command.
     */
    declare public readonly runAsUser: pulumi.Output<string | undefined>;
    /**
     * The source of the run command script.
     */
    declare public readonly source: pulumi.Output<outputs.compute.VirtualMachineRunCommandScriptSourceResponse | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.compute.SystemDataResponse>;
    /**
     * Resource tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The timeout in seconds to execute the run command.
     */
    declare public readonly timeoutInSeconds: pulumi.Output<number | undefined>;
    /**
     * Optional. If set to true, any failure in the script will fail the deployment and ProvisioningState will be marked as Failed. If set to false, ProvisioningState would only reflect whether the run command was run or not by the extensions platform, it would not indicate whether script failed in case of script failures. See instance view of run command in case of script failures to see executionMessage, output, error: https://aka.ms/runcommandmanaged#get-execution-status-and-results
     */
    declare public readonly treatFailureAsDeploymentFailure: pulumi.Output<boolean | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a VirtualMachineRunCommandByVirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineRunCommandByVirtualMachineArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.vmName === undefined && !opts.urn) {
                throw new Error("Missing required property 'vmName'");
            }
            resourceInputs["asyncExecution"] = args?.asyncExecution;
            resourceInputs["errorBlobManagedIdentity"] = args?.errorBlobManagedIdentity;
            resourceInputs["errorBlobUri"] = args?.errorBlobUri;
            resourceInputs["location"] = args?.location;
            resourceInputs["outputBlobManagedIdentity"] = args?.outputBlobManagedIdentity;
            resourceInputs["outputBlobUri"] = args?.outputBlobUri;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["protectedParameters"] = args?.protectedParameters;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["runAsPassword"] = args?.runAsPassword;
            resourceInputs["runAsUser"] = args?.runAsUser;
            resourceInputs["runCommandName"] = args?.runCommandName;
            resourceInputs["source"] = args?.source;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeoutInSeconds"] = args?.timeoutInSeconds;
            resourceInputs["treatFailureAsDeploymentFailure"] = args?.treatFailureAsDeploymentFailure;
            resourceInputs["vmName"] = args?.vmName;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["instanceView"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["asyncExecution"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["errorBlobManagedIdentity"] = undefined /*out*/;
            resourceInputs["errorBlobUri"] = undefined /*out*/;
            resourceInputs["instanceView"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["outputBlobManagedIdentity"] = undefined /*out*/;
            resourceInputs["outputBlobUri"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["protectedParameters"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["runAsPassword"] = undefined /*out*/;
            resourceInputs["runAsUser"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["timeoutInSeconds"] = undefined /*out*/;
            resourceInputs["treatFailureAsDeploymentFailure"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:compute/v20200601:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20201201:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20210301:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20210401:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20210701:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20211101:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20220301:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20220801:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20221101:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20230301:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20230701:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20230901:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20240301:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20240701:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20241101:VirtualMachineRunCommandByVirtualMachine" }, { type: "azure-native:compute/v20250401:VirtualMachineRunCommandByVirtualMachine" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(VirtualMachineRunCommandByVirtualMachine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a VirtualMachineRunCommandByVirtualMachine resource.
 */
export interface VirtualMachineRunCommandByVirtualMachineArgs {
    /**
     * Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete.
     */
    asyncExecution?: pulumi.Input<boolean>;
    /**
     * User-assigned managed identity that has access to errorBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged
     */
    errorBlobManagedIdentity?: pulumi.Input<inputs.compute.RunCommandManagedIdentityArgs>;
    /**
     * Specifies the Azure storage blob where script error stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer errorBlobManagedIdentity parameter.
     */
    errorBlobUri?: pulumi.Input<string>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * User-assigned managed identity that has access to outputBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged
     */
    outputBlobManagedIdentity?: pulumi.Input<inputs.compute.RunCommandManagedIdentityArgs>;
    /**
     * Specifies the Azure storage blob where script output stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer outputBlobManagedIdentity parameter.
     */
    outputBlobUri?: pulumi.Input<string>;
    /**
     * The parameters used by the script.
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.compute.RunCommandInputParameterArgs>[]>;
    /**
     * The parameters used by the script.
     */
    protectedParameters?: pulumi.Input<pulumi.Input<inputs.compute.RunCommandInputParameterArgs>[]>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Specifies the user account password on the VM when executing the run command.
     */
    runAsPassword?: pulumi.Input<string>;
    /**
     * Specifies the user account on the VM when executing the run command.
     */
    runAsUser?: pulumi.Input<string>;
    /**
     * The name of the VirtualMachineRunCommand
     */
    runCommandName?: pulumi.Input<string>;
    /**
     * The source of the run command script.
     */
    source?: pulumi.Input<inputs.compute.VirtualMachineRunCommandScriptSourceArgs>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The timeout in seconds to execute the run command.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * Optional. If set to true, any failure in the script will fail the deployment and ProvisioningState will be marked as Failed. If set to false, ProvisioningState would only reflect whether the run command was run or not by the extensions platform, it would not indicate whether script failed in case of script failures. See instance view of run command in case of script failures to see executionMessage, output, error: https://aka.ms/runcommandmanaged#get-execution-status-and-results
     */
    treatFailureAsDeploymentFailure?: pulumi.Input<boolean>;
    /**
     * The name of the VirtualMachine
     */
    vmName: pulumi.Input<string>;
}
