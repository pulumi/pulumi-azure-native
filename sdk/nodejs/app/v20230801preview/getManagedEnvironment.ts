// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Get the properties of a Managed Environment used to host container apps.
 */
export function getManagedEnvironment(args: GetManagedEnvironmentArgs, opts?: pulumi.InvokeOptions): Promise<GetManagedEnvironmentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:app/v20230801preview:getManagedEnvironment", {
        "environmentName": args.environmentName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface GetManagedEnvironmentArgs {
    /**
     * Name of the Environment.
     */
    environmentName: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
}

/**
 * An environment for hosting container apps
 */
export interface GetManagedEnvironmentResult {
    /**
     * Environment level Application Insights configuration
     */
    readonly appInsightsConfiguration?: outputs.app.v20230801preview.AppInsightsConfigurationResponse;
    /**
     * Cluster configuration which enables the log daemon to export
     * app logs to a destination. Currently only "log-analytics" is
     * supported
     */
    readonly appLogsConfiguration?: outputs.app.v20230801preview.AppLogsConfigurationResponse;
    /**
     * Custom domain configuration for the environment
     */
    readonly customDomainConfiguration?: outputs.app.v20230801preview.CustomDomainConfigurationResponse;
    /**
     * Application Insights connection string used by Dapr to export Service to Service communication telemetry
     */
    readonly daprAIConnectionString?: string;
    /**
     * Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry
     */
    readonly daprAIInstrumentationKey?: string;
    /**
     * The configuration of Dapr component.
     */
    readonly daprConfiguration?: outputs.app.v20230801preview.DaprConfigurationResponse;
    /**
     * Default Domain Name for the cluster
     */
    readonly defaultDomain: string;
    /**
     * Any errors that occurred during deployment or deployment validation
     */
    readonly deploymentErrors: string;
    /**
     * The endpoint of the eventstream of the Environment.
     */
    readonly eventStreamEndpoint: string;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     */
    readonly id: string;
    /**
     * Name of the platform-managed resource group created for the Managed Environment to host infrastructure resources. If a subnet ID is provided, this resource group will be created in the same subscription as the subnet.
     */
    readonly infrastructureResourceGroup?: string;
    /**
     * The configuration of Keda component.
     */
    readonly kedaConfiguration?: outputs.app.v20230801preview.KedaConfigurationResponse;
    /**
     * Kind of the Environment.
     */
    readonly kind?: string;
    /**
     * The geo-location where the resource lives
     */
    readonly location: string;
    /**
     * The name of the resource
     */
    readonly name: string;
    /**
     * Environment Open Telemetry configuration
     */
    readonly openTelemetryConfiguration?: outputs.app.v20230801preview.OpenTelemetryConfigurationResponse;
    /**
     * Peer authentication settings for the Managed Environment
     */
    readonly peerAuthentication?: outputs.app.v20230801preview.ManagedEnvironmentResponsePeerAuthentication;
    /**
     * Provisioning state of the Environment.
     */
    readonly provisioningState: string;
    /**
     * Static IP of the Environment
     */
    readonly staticIp: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: outputs.app.v20230801preview.SystemDataResponse;
    /**
     * Resource tags.
     */
    readonly tags?: {[key: string]: string};
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
    /**
     * Vnet configuration for the environment
     */
    readonly vnetConfiguration?: outputs.app.v20230801preview.VnetConfigurationResponse;
    /**
     * Workload profiles configured for the Managed Environment.
     */
    readonly workloadProfiles?: outputs.app.v20230801preview.WorkloadProfileResponse[];
    /**
     * Whether or not this Managed Environment is zone-redundant.
     */
    readonly zoneRedundant?: boolean;
}
/**
 * Get the properties of a Managed Environment used to host container apps.
 */
export function getManagedEnvironmentOutput(args: GetManagedEnvironmentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetManagedEnvironmentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure-native:app/v20230801preview:getManagedEnvironment", {
        "environmentName": args.environmentName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface GetManagedEnvironmentOutputArgs {
    /**
     * Name of the Environment.
     */
    environmentName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
}
