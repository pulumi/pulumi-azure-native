// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ExtensionArgs } from "./extension";
export type Extension = import("./extension").Extension;
export const Extension: typeof import("./extension").Extension = null as any;
utilities.lazyLoad(exports, ["Extension"], () => require("./extension"));

export { FluxConfigurationArgs } from "./fluxConfiguration";
export type FluxConfiguration = import("./fluxConfiguration").FluxConfiguration;
export const FluxConfiguration: typeof import("./fluxConfiguration").FluxConfiguration = null as any;
utilities.lazyLoad(exports, ["FluxConfiguration"], () => require("./fluxConfiguration"));

export { GetExtensionArgs, GetExtensionResult, GetExtensionOutputArgs } from "./getExtension";
export const getExtension: typeof import("./getExtension").getExtension = null as any;
export const getExtensionOutput: typeof import("./getExtension").getExtensionOutput = null as any;
utilities.lazyLoad(exports, ["getExtension","getExtensionOutput"], () => require("./getExtension"));

export { GetFluxConfigurationArgs, GetFluxConfigurationResult, GetFluxConfigurationOutputArgs } from "./getFluxConfiguration";
export const getFluxConfiguration: typeof import("./getFluxConfiguration").getFluxConfiguration = null as any;
export const getFluxConfigurationOutput: typeof import("./getFluxConfiguration").getFluxConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getFluxConfiguration","getFluxConfigurationOutput"], () => require("./getFluxConfiguration"));

export { GetSourceControlConfigurationArgs, GetSourceControlConfigurationResult, GetSourceControlConfigurationOutputArgs } from "./getSourceControlConfiguration";
export const getSourceControlConfiguration: typeof import("./getSourceControlConfiguration").getSourceControlConfiguration = null as any;
export const getSourceControlConfigurationOutput: typeof import("./getSourceControlConfiguration").getSourceControlConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getSourceControlConfiguration","getSourceControlConfigurationOutput"], () => require("./getSourceControlConfiguration"));

export { SourceControlConfigurationArgs } from "./sourceControlConfiguration";
export type SourceControlConfiguration = import("./sourceControlConfiguration").SourceControlConfiguration;
export const SourceControlConfiguration: typeof import("./sourceControlConfiguration").SourceControlConfiguration = null as any;
utilities.lazyLoad(exports, ["SourceControlConfiguration"], () => require("./sourceControlConfiguration"));


// Export enums:
export * from "../types/enums/kubernetesconfiguration";

// Export sub-modules:
import * as v20191101preview from "./v20191101preview";
import * as v20200701preview from "./v20200701preview";
import * as v20210301 from "./v20210301";
import * as v20211101preview from "./v20211101preview";
import * as v20220101preview from "./v20220101preview";
import * as v20220402preview from "./v20220402preview";
import * as v20220701 from "./v20220701";
import * as v20221101 from "./v20221101";
import * as v20230501 from "./v20230501";

export {
    v20191101preview,
    v20200701preview,
    v20210301,
    v20211101preview,
    v20220101preview,
    v20220402preview,
    v20220701,
    v20221101,
    v20230501,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:kubernetesconfiguration:Extension":
                return new Extension(name, <any>undefined, { urn })
            case "azure-native:kubernetesconfiguration:FluxConfiguration":
                return new FluxConfiguration(name, <any>undefined, { urn })
            case "azure-native:kubernetesconfiguration:SourceControlConfiguration":
                return new SourceControlConfiguration(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "kubernetesconfiguration", _module)
