// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * A Monitoring Account definition
 */
export function getMonitoringAccount(args: GetMonitoringAccountArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitoringAccountResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("azure-native:monitor/v20210603preview:getMonitoringAccount", {
        "monitoringAccountName": args.monitoringAccountName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface GetMonitoringAccountArgs {
    /**
     * The name of the monitoring account.  The name is case insensitive
     */
    monitoringAccountName: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
}

/**
 * A Monitoring Account definition
 */
export interface GetMonitoringAccountResult {
    /**
     * The immutable ID of the monitoring account. This property is read-only.
     */
    readonly accountId: string;
    /**
     * The Data Collection Rule and Endpoint used for ingestion by default.
     */
    readonly defaultIngestionSettings: outputs.monitor.v20210603preview.MonitoringAccountResponseDefaultIngestionSettings;
    /**
     * Resource entity tag (ETag)
     */
    readonly etag: string;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     */
    readonly id: string;
    /**
     * The geo-location where the resource lives
     */
    readonly location: string;
    /**
     * Information about metrics for the monitoring account
     */
    readonly metrics: outputs.monitor.v20210603preview.MonitoringAccountResponseMetrics;
    /**
     * The name of the resource
     */
    readonly name: string;
    /**
     * The provisioning state of the monitoring account. Set to Succeeded if everything is healthy.
     */
    readonly provisioningState: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: outputs.monitor.v20210603preview.SystemDataResponse;
    /**
     * Resource tags.
     */
    readonly tags?: {[key: string]: string};
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
}

export function getMonitoringAccountOutput(args: GetMonitoringAccountOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitoringAccountResult> {
    return pulumi.output(args).apply(a => getMonitoringAccount(a, opts))
}

export interface GetMonitoringAccountOutputArgs {
    /**
     * The name of the monitoring account.  The name is case insensitive
     */
    monitoringAccountName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
}
