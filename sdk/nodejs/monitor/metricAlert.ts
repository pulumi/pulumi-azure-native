// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The metric alert resource.
 *
 * Uses Azure REST API version 2018-03-01.
 *
 * Other available API versions: 2024-03-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native monitor [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class MetricAlert extends pulumi.CustomResource {
    /**
     * Get an existing MetricAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MetricAlert {
        return new MetricAlert(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:monitor:MetricAlert';

    /**
     * Returns true if the given object is an instance of MetricAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricAlert.__pulumiType;
    }

    /**
     * the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
     */
    declare public readonly actions: pulumi.Output<outputs.monitor.MetricAlertActionResponse[] | undefined>;
    /**
     * the flag that indicates whether the alert should be auto resolved or not. The default is true.
     */
    declare public readonly autoMitigate: pulumi.Output<boolean | undefined>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * defines the specific alert criteria information.
     */
    declare public readonly criteria: pulumi.Output<outputs.monitor.MetricAlertMultipleResourceMultipleMetricCriteriaResponse | outputs.monitor.MetricAlertSingleResourceMultipleMetricCriteriaResponse | outputs.monitor.WebtestLocationAvailabilityCriteriaResponse>;
    /**
     * the description of the metric alert that will be included in the alert email.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * the flag that indicates whether the metric alert is enabled.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * how often the metric alert is evaluated represented in ISO 8601 duration format.
     */
    declare public readonly evaluationFrequency: pulumi.Output<string>;
    /**
     * the value indicating whether this alert rule is migrated.
     */
    declare public /*out*/ readonly isMigrated: pulumi.Output<boolean>;
    /**
     * Last time the rule was updated in ISO8601 format.
     */
    declare public /*out*/ readonly lastUpdatedTime: pulumi.Output<string>;
    /**
     * Resource location
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Azure resource name
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * the list of resource id's that this metric alert is scoped to. You cannot change the scope of a metric rule based on logs.
     */
    declare public readonly scopes: pulumi.Output<string[]>;
    /**
     * Alert severity {0, 1, 2, 3, 4}
     */
    declare public readonly severity: pulumi.Output<number>;
    /**
     * Resource tags
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * the region of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
     */
    declare public readonly targetResourceRegion: pulumi.Output<string | undefined>;
    /**
     * the resource type of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
     */
    declare public readonly targetResourceType: pulumi.Output<string | undefined>;
    /**
     * Azure resource type
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
     */
    declare public readonly windowSize: pulumi.Output<string>;

    /**
     * Create a MetricAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricAlertArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.criteria === undefined && !opts.urn) {
                throw new Error("Missing required property 'criteria'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.evaluationFrequency === undefined && !opts.urn) {
                throw new Error("Missing required property 'evaluationFrequency'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.scopes === undefined && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            if (args?.severity === undefined && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            if (args?.windowSize === undefined && !opts.urn) {
                throw new Error("Missing required property 'windowSize'");
            }
            resourceInputs["actions"] = args?.actions;
            resourceInputs["autoMitigate"] = args?.autoMitigate;
            resourceInputs["criteria"] = args?.criteria;
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["evaluationFrequency"] = args?.evaluationFrequency;
            resourceInputs["location"] = args?.location;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["ruleName"] = args?.ruleName;
            resourceInputs["scopes"] = args?.scopes;
            resourceInputs["severity"] = args?.severity;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["targetResourceRegion"] = args?.targetResourceRegion;
            resourceInputs["targetResourceType"] = args?.targetResourceType;
            resourceInputs["windowSize"] = args?.windowSize;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["isMigrated"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["actions"] = undefined /*out*/;
            resourceInputs["autoMitigate"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["criteria"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["evaluationFrequency"] = undefined /*out*/;
            resourceInputs["isMigrated"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["scopes"] = undefined /*out*/;
            resourceInputs["severity"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["targetResourceRegion"] = undefined /*out*/;
            resourceInputs["targetResourceType"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["windowSize"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:insights/v20180301:MetricAlert" }, { type: "azure-native:insights:MetricAlert" }, { type: "azure-native:monitor/v20180301:MetricAlert" }, { type: "azure-native:monitor/v20240301preview:MetricAlert" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(MetricAlert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a MetricAlert resource.
 */
export interface MetricAlertArgs {
    /**
     * the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.monitor.MetricAlertActionArgs>[]>;
    /**
     * the flag that indicates whether the alert should be auto resolved or not. The default is true.
     */
    autoMitigate?: pulumi.Input<boolean>;
    /**
     * defines the specific alert criteria information.
     */
    criteria: pulumi.Input<inputs.monitor.MetricAlertMultipleResourceMultipleMetricCriteriaArgs | inputs.monitor.MetricAlertSingleResourceMultipleMetricCriteriaArgs | inputs.monitor.WebtestLocationAvailabilityCriteriaArgs>;
    /**
     * the description of the metric alert that will be included in the alert email.
     */
    description?: pulumi.Input<string>;
    /**
     * the flag that indicates whether the metric alert is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * how often the metric alert is evaluated represented in ISO 8601 duration format.
     */
    evaluationFrequency: pulumi.Input<string>;
    /**
     * Resource location
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the rule.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * the list of resource id's that this metric alert is scoped to. You cannot change the scope of a metric rule based on logs.
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alert severity {0, 1, 2, 3, 4}
     */
    severity: pulumi.Input<number>;
    /**
     * Resource tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * the region of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
     */
    targetResourceRegion?: pulumi.Input<string>;
    /**
     * the resource type of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
     */
    targetResourceType?: pulumi.Input<string>;
    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
     */
    windowSize: pulumi.Input<string>;
}
