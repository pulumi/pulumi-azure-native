// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AccessControlListArgs } from "./accessControlList";
export type AccessControlList = import("./accessControlList").AccessControlList;
export const AccessControlList: typeof import("./accessControlList").AccessControlList = null as any;
utilities.lazyLoad(exports, ["AccessControlList"], () => require("./accessControlList"));

export { ExternalNetworkArgs } from "./externalNetwork";
export type ExternalNetwork = import("./externalNetwork").ExternalNetwork;
export const ExternalNetwork: typeof import("./externalNetwork").ExternalNetwork = null as any;
utilities.lazyLoad(exports, ["ExternalNetwork"], () => require("./externalNetwork"));

export { GetAccessControlListArgs, GetAccessControlListResult, GetAccessControlListOutputArgs } from "./getAccessControlList";
export const getAccessControlList: typeof import("./getAccessControlList").getAccessControlList = null as any;
export const getAccessControlListOutput: typeof import("./getAccessControlList").getAccessControlListOutput = null as any;
utilities.lazyLoad(exports, ["getAccessControlList","getAccessControlListOutput"], () => require("./getAccessControlList"));

export { GetExternalNetworkArgs, GetExternalNetworkResult, GetExternalNetworkOutputArgs } from "./getExternalNetwork";
export const getExternalNetwork: typeof import("./getExternalNetwork").getExternalNetwork = null as any;
export const getExternalNetworkOutput: typeof import("./getExternalNetwork").getExternalNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getExternalNetwork","getExternalNetworkOutput"], () => require("./getExternalNetwork"));

export { GetInternalNetworkArgs, GetInternalNetworkResult, GetInternalNetworkOutputArgs } from "./getInternalNetwork";
export const getInternalNetwork: typeof import("./getInternalNetwork").getInternalNetwork = null as any;
export const getInternalNetworkOutput: typeof import("./getInternalNetwork").getInternalNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getInternalNetwork","getInternalNetworkOutput"], () => require("./getInternalNetwork"));

export { GetIpCommunityListArgs, GetIpCommunityListResult, GetIpCommunityListOutputArgs } from "./getIpCommunityList";
export const getIpCommunityList: typeof import("./getIpCommunityList").getIpCommunityList = null as any;
export const getIpCommunityListOutput: typeof import("./getIpCommunityList").getIpCommunityListOutput = null as any;
utilities.lazyLoad(exports, ["getIpCommunityList","getIpCommunityListOutput"], () => require("./getIpCommunityList"));

export { GetIpPrefixListArgs, GetIpPrefixListResult, GetIpPrefixListOutputArgs } from "./getIpPrefixList";
export const getIpPrefixList: typeof import("./getIpPrefixList").getIpPrefixList = null as any;
export const getIpPrefixListOutput: typeof import("./getIpPrefixList").getIpPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getIpPrefixList","getIpPrefixListOutput"], () => require("./getIpPrefixList"));

export { GetL2IsolationDomainArgs, GetL2IsolationDomainResult, GetL2IsolationDomainOutputArgs } from "./getL2IsolationDomain";
export const getL2IsolationDomain: typeof import("./getL2IsolationDomain").getL2IsolationDomain = null as any;
export const getL2IsolationDomainOutput: typeof import("./getL2IsolationDomain").getL2IsolationDomainOutput = null as any;
utilities.lazyLoad(exports, ["getL2IsolationDomain","getL2IsolationDomainOutput"], () => require("./getL2IsolationDomain"));

export { GetL3IsolationDomainArgs, GetL3IsolationDomainResult, GetL3IsolationDomainOutputArgs } from "./getL3IsolationDomain";
export const getL3IsolationDomain: typeof import("./getL3IsolationDomain").getL3IsolationDomain = null as any;
export const getL3IsolationDomainOutput: typeof import("./getL3IsolationDomain").getL3IsolationDomainOutput = null as any;
utilities.lazyLoad(exports, ["getL3IsolationDomain","getL3IsolationDomainOutput"], () => require("./getL3IsolationDomain"));

export { GetNetworkDeviceArgs, GetNetworkDeviceResult, GetNetworkDeviceOutputArgs } from "./getNetworkDevice";
export const getNetworkDevice: typeof import("./getNetworkDevice").getNetworkDevice = null as any;
export const getNetworkDeviceOutput: typeof import("./getNetworkDevice").getNetworkDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDevice","getNetworkDeviceOutput"], () => require("./getNetworkDevice"));

export { GetNetworkDeviceStatusArgs, GetNetworkDeviceStatusResult, GetNetworkDeviceStatusOutputArgs } from "./getNetworkDeviceStatus";
export const getNetworkDeviceStatus: typeof import("./getNetworkDeviceStatus").getNetworkDeviceStatus = null as any;
export const getNetworkDeviceStatusOutput: typeof import("./getNetworkDeviceStatus").getNetworkDeviceStatusOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDeviceStatus","getNetworkDeviceStatusOutput"], () => require("./getNetworkDeviceStatus"));

export { GetNetworkFabricArgs, GetNetworkFabricResult, GetNetworkFabricOutputArgs } from "./getNetworkFabric";
export const getNetworkFabric: typeof import("./getNetworkFabric").getNetworkFabric = null as any;
export const getNetworkFabricOutput: typeof import("./getNetworkFabric").getNetworkFabricOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFabric","getNetworkFabricOutput"], () => require("./getNetworkFabric"));

export { GetNetworkFabricControllerArgs, GetNetworkFabricControllerResult, GetNetworkFabricControllerOutputArgs } from "./getNetworkFabricController";
export const getNetworkFabricController: typeof import("./getNetworkFabricController").getNetworkFabricController = null as any;
export const getNetworkFabricControllerOutput: typeof import("./getNetworkFabricController").getNetworkFabricControllerOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFabricController","getNetworkFabricControllerOutput"], () => require("./getNetworkFabricController"));

export { GetNetworkInterfaceArgs, GetNetworkInterfaceResult, GetNetworkInterfaceOutputArgs } from "./getNetworkInterface";
export const getNetworkInterface: typeof import("./getNetworkInterface").getNetworkInterface = null as any;
export const getNetworkInterfaceOutput: typeof import("./getNetworkInterface").getNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterface","getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));

export { GetNetworkInterfaceStatusArgs, GetNetworkInterfaceStatusResult, GetNetworkInterfaceStatusOutputArgs } from "./getNetworkInterfaceStatus";
export const getNetworkInterfaceStatus: typeof import("./getNetworkInterfaceStatus").getNetworkInterfaceStatus = null as any;
export const getNetworkInterfaceStatusOutput: typeof import("./getNetworkInterfaceStatus").getNetworkInterfaceStatusOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterfaceStatus","getNetworkInterfaceStatusOutput"], () => require("./getNetworkInterfaceStatus"));

export { GetNetworkRackArgs, GetNetworkRackResult, GetNetworkRackOutputArgs } from "./getNetworkRack";
export const getNetworkRack: typeof import("./getNetworkRack").getNetworkRack = null as any;
export const getNetworkRackOutput: typeof import("./getNetworkRack").getNetworkRackOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkRack","getNetworkRackOutput"], () => require("./getNetworkRack"));

export { GetNetworkToNetworkInterconnectArgs, GetNetworkToNetworkInterconnectResult, GetNetworkToNetworkInterconnectOutputArgs } from "./getNetworkToNetworkInterconnect";
export const getNetworkToNetworkInterconnect: typeof import("./getNetworkToNetworkInterconnect").getNetworkToNetworkInterconnect = null as any;
export const getNetworkToNetworkInterconnectOutput: typeof import("./getNetworkToNetworkInterconnect").getNetworkToNetworkInterconnectOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkToNetworkInterconnect","getNetworkToNetworkInterconnectOutput"], () => require("./getNetworkToNetworkInterconnect"));

export { GetRoutePolicyArgs, GetRoutePolicyResult, GetRoutePolicyOutputArgs } from "./getRoutePolicy";
export const getRoutePolicy: typeof import("./getRoutePolicy").getRoutePolicy = null as any;
export const getRoutePolicyOutput: typeof import("./getRoutePolicy").getRoutePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRoutePolicy","getRoutePolicyOutput"], () => require("./getRoutePolicy"));

export { InternalNetworkArgs } from "./internalNetwork";
export type InternalNetwork = import("./internalNetwork").InternalNetwork;
export const InternalNetwork: typeof import("./internalNetwork").InternalNetwork = null as any;
utilities.lazyLoad(exports, ["InternalNetwork"], () => require("./internalNetwork"));

export { IpCommunityListArgs } from "./ipCommunityList";
export type IpCommunityList = import("./ipCommunityList").IpCommunityList;
export const IpCommunityList: typeof import("./ipCommunityList").IpCommunityList = null as any;
utilities.lazyLoad(exports, ["IpCommunityList"], () => require("./ipCommunityList"));

export { IpPrefixListArgs } from "./ipPrefixList";
export type IpPrefixList = import("./ipPrefixList").IpPrefixList;
export const IpPrefixList: typeof import("./ipPrefixList").IpPrefixList = null as any;
utilities.lazyLoad(exports, ["IpPrefixList"], () => require("./ipPrefixList"));

export { L2IsolationDomainArgs } from "./l2isolationDomain";
export type L2IsolationDomain = import("./l2isolationDomain").L2IsolationDomain;
export const L2IsolationDomain: typeof import("./l2isolationDomain").L2IsolationDomain = null as any;
utilities.lazyLoad(exports, ["L2IsolationDomain"], () => require("./l2isolationDomain"));

export { L3IsolationDomainArgs } from "./l3isolationDomain";
export type L3IsolationDomain = import("./l3isolationDomain").L3IsolationDomain;
export const L3IsolationDomain: typeof import("./l3isolationDomain").L3IsolationDomain = null as any;
utilities.lazyLoad(exports, ["L3IsolationDomain"], () => require("./l3isolationDomain"));

export { NetworkDeviceArgs } from "./networkDevice";
export type NetworkDevice = import("./networkDevice").NetworkDevice;
export const NetworkDevice: typeof import("./networkDevice").NetworkDevice = null as any;
utilities.lazyLoad(exports, ["NetworkDevice"], () => require("./networkDevice"));

export { NetworkFabricArgs } from "./networkFabric";
export type NetworkFabric = import("./networkFabric").NetworkFabric;
export const NetworkFabric: typeof import("./networkFabric").NetworkFabric = null as any;
utilities.lazyLoad(exports, ["NetworkFabric"], () => require("./networkFabric"));

export { NetworkFabricControllerArgs } from "./networkFabricController";
export type NetworkFabricController = import("./networkFabricController").NetworkFabricController;
export const NetworkFabricController: typeof import("./networkFabricController").NetworkFabricController = null as any;
utilities.lazyLoad(exports, ["NetworkFabricController"], () => require("./networkFabricController"));

export { NetworkInterfaceArgs } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { NetworkRackArgs } from "./networkRack";
export type NetworkRack = import("./networkRack").NetworkRack;
export const NetworkRack: typeof import("./networkRack").NetworkRack = null as any;
utilities.lazyLoad(exports, ["NetworkRack"], () => require("./networkRack"));

export { NetworkToNetworkInterconnectArgs } from "./networkToNetworkInterconnect";
export type NetworkToNetworkInterconnect = import("./networkToNetworkInterconnect").NetworkToNetworkInterconnect;
export const NetworkToNetworkInterconnect: typeof import("./networkToNetworkInterconnect").NetworkToNetworkInterconnect = null as any;
utilities.lazyLoad(exports, ["NetworkToNetworkInterconnect"], () => require("./networkToNetworkInterconnect"));

export { RoutePolicyArgs } from "./routePolicy";
export type RoutePolicy = import("./routePolicy").RoutePolicy;
export const RoutePolicy: typeof import("./routePolicy").RoutePolicy = null as any;
utilities.lazyLoad(exports, ["RoutePolicy"], () => require("./routePolicy"));


// Export enums:
export * from "../../types/enums/managednetworkfabric/v20230201preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:managednetworkfabric/v20230201preview:AccessControlList":
                return new AccessControlList(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:ExternalNetwork":
                return new ExternalNetwork(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:InternalNetwork":
                return new InternalNetwork(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:IpCommunityList":
                return new IpCommunityList(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:IpPrefixList":
                return new IpPrefixList(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:L2IsolationDomain":
                return new L2IsolationDomain(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:L3IsolationDomain":
                return new L3IsolationDomain(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:NetworkDevice":
                return new NetworkDevice(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:NetworkFabric":
                return new NetworkFabric(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:NetworkFabricController":
                return new NetworkFabricController(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:NetworkRack":
                return new NetworkRack(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:NetworkToNetworkInterconnect":
                return new NetworkToNetworkInterconnect(name, <any>undefined, { urn })
            case "azure-native:managednetworkfabric/v20230201preview:RoutePolicy":
                return new RoutePolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "managednetworkfabric/v20230201preview", _module)
