// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Retrieves details of this Network Tap.
 */
export function getNetworkTap(args: GetNetworkTapArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkTapResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:managednetworkfabric/v20230615:getNetworkTap", {
        "networkTapName": args.networkTapName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface GetNetworkTapArgs {
    /**
     * Name of the Network Tap.
     */
    networkTapName: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
}

/**
 * The Network Tap resource definition.
 */
export interface GetNetworkTapResult {
    /**
     * Administrative state of the resource. Example -Enabled/Disabled
     */
    readonly administrativeState: string;
    /**
     * Switch configuration description.
     */
    readonly annotation?: string;
    /**
     * Gets the configurations state of the resource.
     */
    readonly configurationState: string;
    /**
     * List of destinations to send the filter traffic.
     */
    readonly destinations: outputs.managednetworkfabric.v20230615.NetworkTapPropertiesResponseDestinations[];
    /**
     * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
     */
    readonly id: string;
    /**
     * The geo-location where the resource lives
     */
    readonly location: string;
    /**
     * The name of the resource
     */
    readonly name: string;
    /**
     * ARM resource ID of the Network Packet Broker.
     */
    readonly networkPacketBrokerId: string;
    /**
     * Polling type.
     */
    readonly pollingType?: string;
    /**
     * Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning.
     */
    readonly provisioningState: string;
    /**
     * Source Tap Rule Id. ARM Resource ID of the Network Tap Rule.
     */
    readonly sourceTapRuleId: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: outputs.managednetworkfabric.v20230615.SystemDataResponse;
    /**
     * Resource tags.
     */
    readonly tags?: {[key: string]: string};
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
}
/**
 * Retrieves details of this Network Tap.
 */
export function getNetworkTapOutput(args: GetNetworkTapOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkTapResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure-native:managednetworkfabric/v20230615:getNetworkTap", {
        "networkTapName": args.networkTapName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface GetNetworkTapOutputArgs {
    /**
     * Name of the Network Tap.
     */
    networkTapName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
}
