// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessAnalyzerAnalyzerArgs } from "./accessAnalyzerAnalyzer";
export type AccessAnalyzerAnalyzer = import("./accessAnalyzerAnalyzer").AccessAnalyzerAnalyzer;
export const AccessAnalyzerAnalyzer: typeof import("./accessAnalyzerAnalyzer").AccessAnalyzerAnalyzer = null as any;
utilities.lazyLoad(exports, ["AccessAnalyzerAnalyzer"], () => require("./accessAnalyzerAnalyzer"));

export { AcmCertificateSummaryArgs } from "./acmCertificateSummary";
export type AcmCertificateSummary = import("./acmCertificateSummary").AcmCertificateSummary;
export const AcmCertificateSummary: typeof import("./acmCertificateSummary").AcmCertificateSummary = null as any;
utilities.lazyLoad(exports, ["AcmCertificateSummary"], () => require("./acmCertificateSummary"));

export { ApiGatewayRestApiArgs } from "./apiGatewayRestApi";
export type ApiGatewayRestApi = import("./apiGatewayRestApi").ApiGatewayRestApi;
export const ApiGatewayRestApi: typeof import("./apiGatewayRestApi").ApiGatewayRestApi = null as any;
utilities.lazyLoad(exports, ["ApiGatewayRestApi"], () => require("./apiGatewayRestApi"));

export { ApiGatewayStageArgs } from "./apiGatewayStage";
export type ApiGatewayStage = import("./apiGatewayStage").ApiGatewayStage;
export const ApiGatewayStage: typeof import("./apiGatewayStage").ApiGatewayStage = null as any;
utilities.lazyLoad(exports, ["ApiGatewayStage"], () => require("./apiGatewayStage"));

export { AppSyncGraphqlApiArgs } from "./appSyncGraphqlApi";
export type AppSyncGraphqlApi = import("./appSyncGraphqlApi").AppSyncGraphqlApi;
export const AppSyncGraphqlApi: typeof import("./appSyncGraphqlApi").AppSyncGraphqlApi = null as any;
utilities.lazyLoad(exports, ["AppSyncGraphqlApi"], () => require("./appSyncGraphqlApi"));

export { AutoScalingAutoScalingGroupArgs } from "./autoScalingAutoScalingGroup";
export type AutoScalingAutoScalingGroup = import("./autoScalingAutoScalingGroup").AutoScalingAutoScalingGroup;
export const AutoScalingAutoScalingGroup: typeof import("./autoScalingAutoScalingGroup").AutoScalingAutoScalingGroup = null as any;
utilities.lazyLoad(exports, ["AutoScalingAutoScalingGroup"], () => require("./autoScalingAutoScalingGroup"));

export { CloudFormationStackArgs } from "./cloudFormationStack";
export type CloudFormationStack = import("./cloudFormationStack").CloudFormationStack;
export const CloudFormationStack: typeof import("./cloudFormationStack").CloudFormationStack = null as any;
utilities.lazyLoad(exports, ["CloudFormationStack"], () => require("./cloudFormationStack"));

export { CloudFormationStackSetArgs } from "./cloudFormationStackSet";
export type CloudFormationStackSet = import("./cloudFormationStackSet").CloudFormationStackSet;
export const CloudFormationStackSet: typeof import("./cloudFormationStackSet").CloudFormationStackSet = null as any;
utilities.lazyLoad(exports, ["CloudFormationStackSet"], () => require("./cloudFormationStackSet"));

export { CloudFrontDistributionArgs } from "./cloudFrontDistribution";
export type CloudFrontDistribution = import("./cloudFrontDistribution").CloudFrontDistribution;
export const CloudFrontDistribution: typeof import("./cloudFrontDistribution").CloudFrontDistribution = null as any;
utilities.lazyLoad(exports, ["CloudFrontDistribution"], () => require("./cloudFrontDistribution"));

export { CloudTrailTrailArgs } from "./cloudTrailTrail";
export type CloudTrailTrail = import("./cloudTrailTrail").CloudTrailTrail;
export const CloudTrailTrail: typeof import("./cloudTrailTrail").CloudTrailTrail = null as any;
utilities.lazyLoad(exports, ["CloudTrailTrail"], () => require("./cloudTrailTrail"));

export { CloudWatchAlarmArgs } from "./cloudWatchAlarm";
export type CloudWatchAlarm = import("./cloudWatchAlarm").CloudWatchAlarm;
export const CloudWatchAlarm: typeof import("./cloudWatchAlarm").CloudWatchAlarm = null as any;
utilities.lazyLoad(exports, ["CloudWatchAlarm"], () => require("./cloudWatchAlarm"));

export { CodeBuildProjectArgs } from "./codeBuildProject";
export type CodeBuildProject = import("./codeBuildProject").CodeBuildProject;
export const CodeBuildProject: typeof import("./codeBuildProject").CodeBuildProject = null as any;
utilities.lazyLoad(exports, ["CodeBuildProject"], () => require("./codeBuildProject"));

export { CodeBuildSourceCredentialsInfoArgs } from "./codeBuildSourceCredentialsInfo";
export type CodeBuildSourceCredentialsInfo = import("./codeBuildSourceCredentialsInfo").CodeBuildSourceCredentialsInfo;
export const CodeBuildSourceCredentialsInfo: typeof import("./codeBuildSourceCredentialsInfo").CodeBuildSourceCredentialsInfo = null as any;
utilities.lazyLoad(exports, ["CodeBuildSourceCredentialsInfo"], () => require("./codeBuildSourceCredentialsInfo"));

export { ConfigServiceConfigurationRecorderArgs } from "./configServiceConfigurationRecorder";
export type ConfigServiceConfigurationRecorder = import("./configServiceConfigurationRecorder").ConfigServiceConfigurationRecorder;
export const ConfigServiceConfigurationRecorder: typeof import("./configServiceConfigurationRecorder").ConfigServiceConfigurationRecorder = null as any;
utilities.lazyLoad(exports, ["ConfigServiceConfigurationRecorder"], () => require("./configServiceConfigurationRecorder"));

export { ConfigServiceConfigurationRecorderStatusArgs } from "./configServiceConfigurationRecorderStatus";
export type ConfigServiceConfigurationRecorderStatus = import("./configServiceConfigurationRecorderStatus").ConfigServiceConfigurationRecorderStatus;
export const ConfigServiceConfigurationRecorderStatus: typeof import("./configServiceConfigurationRecorderStatus").ConfigServiceConfigurationRecorderStatus = null as any;
utilities.lazyLoad(exports, ["ConfigServiceConfigurationRecorderStatus"], () => require("./configServiceConfigurationRecorderStatus"));

export { ConfigServiceDeliveryChannelArgs } from "./configServiceDeliveryChannel";
export type ConfigServiceDeliveryChannel = import("./configServiceDeliveryChannel").ConfigServiceDeliveryChannel;
export const ConfigServiceDeliveryChannel: typeof import("./configServiceDeliveryChannel").ConfigServiceDeliveryChannel = null as any;
utilities.lazyLoad(exports, ["ConfigServiceDeliveryChannel"], () => require("./configServiceDeliveryChannel"));

export { DatabaseMigrationServiceReplicationInstanceArgs } from "./databaseMigrationServiceReplicationInstance";
export type DatabaseMigrationServiceReplicationInstance = import("./databaseMigrationServiceReplicationInstance").DatabaseMigrationServiceReplicationInstance;
export const DatabaseMigrationServiceReplicationInstance: typeof import("./databaseMigrationServiceReplicationInstance").DatabaseMigrationServiceReplicationInstance = null as any;
utilities.lazyLoad(exports, ["DatabaseMigrationServiceReplicationInstance"], () => require("./databaseMigrationServiceReplicationInstance"));

export { DaxClusterArgs } from "./daxCluster";
export type DaxCluster = import("./daxCluster").DaxCluster;
export const DaxCluster: typeof import("./daxCluster").DaxCluster = null as any;
utilities.lazyLoad(exports, ["DaxCluster"], () => require("./daxCluster"));

export { DynamoDbContinuousBackupsDescriptionArgs } from "./dynamoDbContinuousBackupsDescription";
export type DynamoDbContinuousBackupsDescription = import("./dynamoDbContinuousBackupsDescription").DynamoDbContinuousBackupsDescription;
export const DynamoDbContinuousBackupsDescription: typeof import("./dynamoDbContinuousBackupsDescription").DynamoDbContinuousBackupsDescription = null as any;
utilities.lazyLoad(exports, ["DynamoDbContinuousBackupsDescription"], () => require("./dynamoDbContinuousBackupsDescription"));

export { DynamoDbTableArgs } from "./dynamoDbTable";
export type DynamoDbTable = import("./dynamoDbTable").DynamoDbTable;
export const DynamoDbTable: typeof import("./dynamoDbTable").DynamoDbTable = null as any;
utilities.lazyLoad(exports, ["DynamoDbTable"], () => require("./dynamoDbTable"));

export { Ec2AccountAttributeArgs } from "./ec2AccountAttribute";
export type Ec2AccountAttribute = import("./ec2AccountAttribute").Ec2AccountAttribute;
export const Ec2AccountAttribute: typeof import("./ec2AccountAttribute").Ec2AccountAttribute = null as any;
utilities.lazyLoad(exports, ["Ec2AccountAttribute"], () => require("./ec2AccountAttribute"));

export { Ec2AddressArgs } from "./ec2Address";
export type Ec2Address = import("./ec2Address").Ec2Address;
export const Ec2Address: typeof import("./ec2Address").Ec2Address = null as any;
utilities.lazyLoad(exports, ["Ec2Address"], () => require("./ec2Address"));

export { Ec2FlowLogArgs } from "./ec2FlowLog";
export type Ec2FlowLog = import("./ec2FlowLog").Ec2FlowLog;
export const Ec2FlowLog: typeof import("./ec2FlowLog").Ec2FlowLog = null as any;
utilities.lazyLoad(exports, ["Ec2FlowLog"], () => require("./ec2FlowLog"));

export { Ec2ImageArgs } from "./ec2Image";
export type Ec2Image = import("./ec2Image").Ec2Image;
export const Ec2Image: typeof import("./ec2Image").Ec2Image = null as any;
utilities.lazyLoad(exports, ["Ec2Image"], () => require("./ec2Image"));

export { Ec2InstanceArgs } from "./ec2Instance";
export type Ec2Instance = import("./ec2Instance").Ec2Instance;
export const Ec2Instance: typeof import("./ec2Instance").Ec2Instance = null as any;
utilities.lazyLoad(exports, ["Ec2Instance"], () => require("./ec2Instance"));

export { Ec2InstanceStatusArgs } from "./ec2InstanceStatus";
export type Ec2InstanceStatus = import("./ec2InstanceStatus").Ec2InstanceStatus;
export const Ec2InstanceStatus: typeof import("./ec2InstanceStatus").Ec2InstanceStatus = null as any;
utilities.lazyLoad(exports, ["Ec2InstanceStatus"], () => require("./ec2InstanceStatus"));

export { Ec2IpamArgs } from "./ec2Ipam";
export type Ec2Ipam = import("./ec2Ipam").Ec2Ipam;
export const Ec2Ipam: typeof import("./ec2Ipam").Ec2Ipam = null as any;
utilities.lazyLoad(exports, ["Ec2Ipam"], () => require("./ec2Ipam"));

export { Ec2KeyPairArgs } from "./ec2KeyPair";
export type Ec2KeyPair = import("./ec2KeyPair").Ec2KeyPair;
export const Ec2KeyPair: typeof import("./ec2KeyPair").Ec2KeyPair = null as any;
utilities.lazyLoad(exports, ["Ec2KeyPair"], () => require("./ec2KeyPair"));

export { Ec2NetworkAclArgs } from "./ec2NetworkAcl";
export type Ec2NetworkAcl = import("./ec2NetworkAcl").Ec2NetworkAcl;
export const Ec2NetworkAcl: typeof import("./ec2NetworkAcl").Ec2NetworkAcl = null as any;
utilities.lazyLoad(exports, ["Ec2NetworkAcl"], () => require("./ec2NetworkAcl"));

export { Ec2NetworkInterfaceArgs } from "./ec2NetworkInterface";
export type Ec2NetworkInterface = import("./ec2NetworkInterface").Ec2NetworkInterface;
export const Ec2NetworkInterface: typeof import("./ec2NetworkInterface").Ec2NetworkInterface = null as any;
utilities.lazyLoad(exports, ["Ec2NetworkInterface"], () => require("./ec2NetworkInterface"));

export { Ec2RouteTableArgs } from "./ec2RouteTable";
export type Ec2RouteTable = import("./ec2RouteTable").Ec2RouteTable;
export const Ec2RouteTable: typeof import("./ec2RouteTable").Ec2RouteTable = null as any;
utilities.lazyLoad(exports, ["Ec2RouteTable"], () => require("./ec2RouteTable"));

export { Ec2SecurityGroupArgs } from "./ec2SecurityGroup";
export type Ec2SecurityGroup = import("./ec2SecurityGroup").Ec2SecurityGroup;
export const Ec2SecurityGroup: typeof import("./ec2SecurityGroup").Ec2SecurityGroup = null as any;
utilities.lazyLoad(exports, ["Ec2SecurityGroup"], () => require("./ec2SecurityGroup"));

export { Ec2SnapshotArgs } from "./ec2Snapshot";
export type Ec2Snapshot = import("./ec2Snapshot").Ec2Snapshot;
export const Ec2Snapshot: typeof import("./ec2Snapshot").Ec2Snapshot = null as any;
utilities.lazyLoad(exports, ["Ec2Snapshot"], () => require("./ec2Snapshot"));

export { Ec2SubnetArgs } from "./ec2Subnet";
export type Ec2Subnet = import("./ec2Subnet").Ec2Subnet;
export const Ec2Subnet: typeof import("./ec2Subnet").Ec2Subnet = null as any;
utilities.lazyLoad(exports, ["Ec2Subnet"], () => require("./ec2Subnet"));

export { Ec2VolumeArgs } from "./ec2Volume";
export type Ec2Volume = import("./ec2Volume").Ec2Volume;
export const Ec2Volume: typeof import("./ec2Volume").Ec2Volume = null as any;
utilities.lazyLoad(exports, ["Ec2Volume"], () => require("./ec2Volume"));

export { Ec2VpcArgs } from "./ec2Vpc";
export type Ec2Vpc = import("./ec2Vpc").Ec2Vpc;
export const Ec2Vpc: typeof import("./ec2Vpc").Ec2Vpc = null as any;
utilities.lazyLoad(exports, ["Ec2Vpc"], () => require("./ec2Vpc"));

export { Ec2VpcEndpointArgs } from "./ec2VpcEndpoint";
export type Ec2VpcEndpoint = import("./ec2VpcEndpoint").Ec2VpcEndpoint;
export const Ec2VpcEndpoint: typeof import("./ec2VpcEndpoint").Ec2VpcEndpoint = null as any;
utilities.lazyLoad(exports, ["Ec2VpcEndpoint"], () => require("./ec2VpcEndpoint"));

export { Ec2VpcPeeringConnectionArgs } from "./ec2VpcPeeringConnection";
export type Ec2VpcPeeringConnection = import("./ec2VpcPeeringConnection").Ec2VpcPeeringConnection;
export const Ec2VpcPeeringConnection: typeof import("./ec2VpcPeeringConnection").Ec2VpcPeeringConnection = null as any;
utilities.lazyLoad(exports, ["Ec2VpcPeeringConnection"], () => require("./ec2VpcPeeringConnection"));

export { EcrImageDetailArgs } from "./ecrImageDetail";
export type EcrImageDetail = import("./ecrImageDetail").EcrImageDetail;
export const EcrImageDetail: typeof import("./ecrImageDetail").EcrImageDetail = null as any;
utilities.lazyLoad(exports, ["EcrImageDetail"], () => require("./ecrImageDetail"));

export { EcrRepositoryArgs } from "./ecrRepository";
export type EcrRepository = import("./ecrRepository").EcrRepository;
export const EcrRepository: typeof import("./ecrRepository").EcrRepository = null as any;
utilities.lazyLoad(exports, ["EcrRepository"], () => require("./ecrRepository"));

export { EcsClusterArgs } from "./ecsCluster";
export type EcsCluster = import("./ecsCluster").EcsCluster;
export const EcsCluster: typeof import("./ecsCluster").EcsCluster = null as any;
utilities.lazyLoad(exports, ["EcsCluster"], () => require("./ecsCluster"));

export { EcsServiceArgs } from "./ecsService";
export type EcsService = import("./ecsService").EcsService;
export const EcsService: typeof import("./ecsService").EcsService = null as any;
utilities.lazyLoad(exports, ["EcsService"], () => require("./ecsService"));

export { EcsTaskDefinitionArgs } from "./ecsTaskDefinition";
export type EcsTaskDefinition = import("./ecsTaskDefinition").EcsTaskDefinition;
export const EcsTaskDefinition: typeof import("./ecsTaskDefinition").EcsTaskDefinition = null as any;
utilities.lazyLoad(exports, ["EcsTaskDefinition"], () => require("./ecsTaskDefinition"));

export { EfsFileSystemArgs } from "./efsFileSystem";
export type EfsFileSystem = import("./efsFileSystem").EfsFileSystem;
export const EfsFileSystem: typeof import("./efsFileSystem").EfsFileSystem = null as any;
utilities.lazyLoad(exports, ["EfsFileSystem"], () => require("./efsFileSystem"));

export { EfsMountTargetArgs } from "./efsMountTarget";
export type EfsMountTarget = import("./efsMountTarget").EfsMountTarget;
export const EfsMountTarget: typeof import("./efsMountTarget").EfsMountTarget = null as any;
utilities.lazyLoad(exports, ["EfsMountTarget"], () => require("./efsMountTarget"));

export { EksClusterArgs } from "./eksCluster";
export type EksCluster = import("./eksCluster").EksCluster;
export const EksCluster: typeof import("./eksCluster").EksCluster = null as any;
utilities.lazyLoad(exports, ["EksCluster"], () => require("./eksCluster"));

export { EksNodegroupArgs } from "./eksNodegroup";
export type EksNodegroup = import("./eksNodegroup").EksNodegroup;
export const EksNodegroup: typeof import("./eksNodegroup").EksNodegroup = null as any;
utilities.lazyLoad(exports, ["EksNodegroup"], () => require("./eksNodegroup"));

export { ElasticBeanstalkApplicationArgs } from "./elasticBeanstalkApplication";
export type ElasticBeanstalkApplication = import("./elasticBeanstalkApplication").ElasticBeanstalkApplication;
export const ElasticBeanstalkApplication: typeof import("./elasticBeanstalkApplication").ElasticBeanstalkApplication = null as any;
utilities.lazyLoad(exports, ["ElasticBeanstalkApplication"], () => require("./elasticBeanstalkApplication"));

export { ElasticBeanstalkConfigurationTemplateArgs } from "./elasticBeanstalkConfigurationTemplate";
export type ElasticBeanstalkConfigurationTemplate = import("./elasticBeanstalkConfigurationTemplate").ElasticBeanstalkConfigurationTemplate;
export const ElasticBeanstalkConfigurationTemplate: typeof import("./elasticBeanstalkConfigurationTemplate").ElasticBeanstalkConfigurationTemplate = null as any;
utilities.lazyLoad(exports, ["ElasticBeanstalkConfigurationTemplate"], () => require("./elasticBeanstalkConfigurationTemplate"));

export { ElasticBeanstalkEnvironmentArgs } from "./elasticBeanstalkEnvironment";
export type ElasticBeanstalkEnvironment = import("./elasticBeanstalkEnvironment").ElasticBeanstalkEnvironment;
export const ElasticBeanstalkEnvironment: typeof import("./elasticBeanstalkEnvironment").ElasticBeanstalkEnvironment = null as any;
utilities.lazyLoad(exports, ["ElasticBeanstalkEnvironment"], () => require("./elasticBeanstalkEnvironment"));

export { ElasticLoadBalancingV2ListenerArgs } from "./elasticLoadBalancingV2Listener";
export type ElasticLoadBalancingV2Listener = import("./elasticLoadBalancingV2Listener").ElasticLoadBalancingV2Listener;
export const ElasticLoadBalancingV2Listener: typeof import("./elasticLoadBalancingV2Listener").ElasticLoadBalancingV2Listener = null as any;
utilities.lazyLoad(exports, ["ElasticLoadBalancingV2Listener"], () => require("./elasticLoadBalancingV2Listener"));

export { ElasticLoadBalancingV2LoadBalancerArgs } from "./elasticLoadBalancingV2LoadBalancer";
export type ElasticLoadBalancingV2LoadBalancer = import("./elasticLoadBalancingV2LoadBalancer").ElasticLoadBalancingV2LoadBalancer;
export const ElasticLoadBalancingV2LoadBalancer: typeof import("./elasticLoadBalancingV2LoadBalancer").ElasticLoadBalancingV2LoadBalancer = null as any;
utilities.lazyLoad(exports, ["ElasticLoadBalancingV2LoadBalancer"], () => require("./elasticLoadBalancingV2LoadBalancer"));

export { ElasticLoadBalancingV2TargetGroupArgs } from "./elasticLoadBalancingV2TargetGroup";
export type ElasticLoadBalancingV2TargetGroup = import("./elasticLoadBalancingV2TargetGroup").ElasticLoadBalancingV2TargetGroup;
export const ElasticLoadBalancingV2TargetGroup: typeof import("./elasticLoadBalancingV2TargetGroup").ElasticLoadBalancingV2TargetGroup = null as any;
utilities.lazyLoad(exports, ["ElasticLoadBalancingV2TargetGroup"], () => require("./elasticLoadBalancingV2TargetGroup"));

export { ElasticLoadBalancingv2TargetHealthDescriptionArgs } from "./elasticLoadBalancingv2TargetHealthDescription";
export type ElasticLoadBalancingv2TargetHealthDescription = import("./elasticLoadBalancingv2TargetHealthDescription").ElasticLoadBalancingv2TargetHealthDescription;
export const ElasticLoadBalancingv2TargetHealthDescription: typeof import("./elasticLoadBalancingv2TargetHealthDescription").ElasticLoadBalancingv2TargetHealthDescription = null as any;
utilities.lazyLoad(exports, ["ElasticLoadBalancingv2TargetHealthDescription"], () => require("./elasticLoadBalancingv2TargetHealthDescription"));

export { EmrClusterArgs } from "./emrCluster";
export type EmrCluster = import("./emrCluster").EmrCluster;
export const EmrCluster: typeof import("./emrCluster").EmrCluster = null as any;
utilities.lazyLoad(exports, ["EmrCluster"], () => require("./emrCluster"));

export { GetAccessAnalyzerAnalyzerArgs, GetAccessAnalyzerAnalyzerResult, GetAccessAnalyzerAnalyzerOutputArgs } from "./getAccessAnalyzerAnalyzer";
export const getAccessAnalyzerAnalyzer: typeof import("./getAccessAnalyzerAnalyzer").getAccessAnalyzerAnalyzer = null as any;
export const getAccessAnalyzerAnalyzerOutput: typeof import("./getAccessAnalyzerAnalyzer").getAccessAnalyzerAnalyzerOutput = null as any;
utilities.lazyLoad(exports, ["getAccessAnalyzerAnalyzer","getAccessAnalyzerAnalyzerOutput"], () => require("./getAccessAnalyzerAnalyzer"));

export { GetAcmCertificateSummaryArgs, GetAcmCertificateSummaryResult, GetAcmCertificateSummaryOutputArgs } from "./getAcmCertificateSummary";
export const getAcmCertificateSummary: typeof import("./getAcmCertificateSummary").getAcmCertificateSummary = null as any;
export const getAcmCertificateSummaryOutput: typeof import("./getAcmCertificateSummary").getAcmCertificateSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getAcmCertificateSummary","getAcmCertificateSummaryOutput"], () => require("./getAcmCertificateSummary"));

export { GetApiGatewayRestApiArgs, GetApiGatewayRestApiResult, GetApiGatewayRestApiOutputArgs } from "./getApiGatewayRestApi";
export const getApiGatewayRestApi: typeof import("./getApiGatewayRestApi").getApiGatewayRestApi = null as any;
export const getApiGatewayRestApiOutput: typeof import("./getApiGatewayRestApi").getApiGatewayRestApiOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayRestApi","getApiGatewayRestApiOutput"], () => require("./getApiGatewayRestApi"));

export { GetApiGatewayStageArgs, GetApiGatewayStageResult, GetApiGatewayStageOutputArgs } from "./getApiGatewayStage";
export const getApiGatewayStage: typeof import("./getApiGatewayStage").getApiGatewayStage = null as any;
export const getApiGatewayStageOutput: typeof import("./getApiGatewayStage").getApiGatewayStageOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayStage","getApiGatewayStageOutput"], () => require("./getApiGatewayStage"));

export { GetAppSyncGraphqlApiArgs, GetAppSyncGraphqlApiResult, GetAppSyncGraphqlApiOutputArgs } from "./getAppSyncGraphqlApi";
export const getAppSyncGraphqlApi: typeof import("./getAppSyncGraphqlApi").getAppSyncGraphqlApi = null as any;
export const getAppSyncGraphqlApiOutput: typeof import("./getAppSyncGraphqlApi").getAppSyncGraphqlApiOutput = null as any;
utilities.lazyLoad(exports, ["getAppSyncGraphqlApi","getAppSyncGraphqlApiOutput"], () => require("./getAppSyncGraphqlApi"));

export { GetAutoScalingAutoScalingGroupArgs, GetAutoScalingAutoScalingGroupResult, GetAutoScalingAutoScalingGroupOutputArgs } from "./getAutoScalingAutoScalingGroup";
export const getAutoScalingAutoScalingGroup: typeof import("./getAutoScalingAutoScalingGroup").getAutoScalingAutoScalingGroup = null as any;
export const getAutoScalingAutoScalingGroupOutput: typeof import("./getAutoScalingAutoScalingGroup").getAutoScalingAutoScalingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAutoScalingAutoScalingGroup","getAutoScalingAutoScalingGroupOutput"], () => require("./getAutoScalingAutoScalingGroup"));

export { GetCloudFormationStackArgs, GetCloudFormationStackResult, GetCloudFormationStackOutputArgs } from "./getCloudFormationStack";
export const getCloudFormationStack: typeof import("./getCloudFormationStack").getCloudFormationStack = null as any;
export const getCloudFormationStackOutput: typeof import("./getCloudFormationStack").getCloudFormationStackOutput = null as any;
utilities.lazyLoad(exports, ["getCloudFormationStack","getCloudFormationStackOutput"], () => require("./getCloudFormationStack"));

export { GetCloudFormationStackSetArgs, GetCloudFormationStackSetResult, GetCloudFormationStackSetOutputArgs } from "./getCloudFormationStackSet";
export const getCloudFormationStackSet: typeof import("./getCloudFormationStackSet").getCloudFormationStackSet = null as any;
export const getCloudFormationStackSetOutput: typeof import("./getCloudFormationStackSet").getCloudFormationStackSetOutput = null as any;
utilities.lazyLoad(exports, ["getCloudFormationStackSet","getCloudFormationStackSetOutput"], () => require("./getCloudFormationStackSet"));

export { GetCloudFrontDistributionArgs, GetCloudFrontDistributionResult, GetCloudFrontDistributionOutputArgs } from "./getCloudFrontDistribution";
export const getCloudFrontDistribution: typeof import("./getCloudFrontDistribution").getCloudFrontDistribution = null as any;
export const getCloudFrontDistributionOutput: typeof import("./getCloudFrontDistribution").getCloudFrontDistributionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudFrontDistribution","getCloudFrontDistributionOutput"], () => require("./getCloudFrontDistribution"));

export { GetCloudTrailTrailArgs, GetCloudTrailTrailResult, GetCloudTrailTrailOutputArgs } from "./getCloudTrailTrail";
export const getCloudTrailTrail: typeof import("./getCloudTrailTrail").getCloudTrailTrail = null as any;
export const getCloudTrailTrailOutput: typeof import("./getCloudTrailTrail").getCloudTrailTrailOutput = null as any;
utilities.lazyLoad(exports, ["getCloudTrailTrail","getCloudTrailTrailOutput"], () => require("./getCloudTrailTrail"));

export { GetCloudWatchAlarmArgs, GetCloudWatchAlarmResult, GetCloudWatchAlarmOutputArgs } from "./getCloudWatchAlarm";
export const getCloudWatchAlarm: typeof import("./getCloudWatchAlarm").getCloudWatchAlarm = null as any;
export const getCloudWatchAlarmOutput: typeof import("./getCloudWatchAlarm").getCloudWatchAlarmOutput = null as any;
utilities.lazyLoad(exports, ["getCloudWatchAlarm","getCloudWatchAlarmOutput"], () => require("./getCloudWatchAlarm"));

export { GetCodeBuildProjectArgs, GetCodeBuildProjectResult, GetCodeBuildProjectOutputArgs } from "./getCodeBuildProject";
export const getCodeBuildProject: typeof import("./getCodeBuildProject").getCodeBuildProject = null as any;
export const getCodeBuildProjectOutput: typeof import("./getCodeBuildProject").getCodeBuildProjectOutput = null as any;
utilities.lazyLoad(exports, ["getCodeBuildProject","getCodeBuildProjectOutput"], () => require("./getCodeBuildProject"));

export { GetCodeBuildSourceCredentialsInfoArgs, GetCodeBuildSourceCredentialsInfoResult, GetCodeBuildSourceCredentialsInfoOutputArgs } from "./getCodeBuildSourceCredentialsInfo";
export const getCodeBuildSourceCredentialsInfo: typeof import("./getCodeBuildSourceCredentialsInfo").getCodeBuildSourceCredentialsInfo = null as any;
export const getCodeBuildSourceCredentialsInfoOutput: typeof import("./getCodeBuildSourceCredentialsInfo").getCodeBuildSourceCredentialsInfoOutput = null as any;
utilities.lazyLoad(exports, ["getCodeBuildSourceCredentialsInfo","getCodeBuildSourceCredentialsInfoOutput"], () => require("./getCodeBuildSourceCredentialsInfo"));

export { GetConfigServiceConfigurationRecorderArgs, GetConfigServiceConfigurationRecorderResult, GetConfigServiceConfigurationRecorderOutputArgs } from "./getConfigServiceConfigurationRecorder";
export const getConfigServiceConfigurationRecorder: typeof import("./getConfigServiceConfigurationRecorder").getConfigServiceConfigurationRecorder = null as any;
export const getConfigServiceConfigurationRecorderOutput: typeof import("./getConfigServiceConfigurationRecorder").getConfigServiceConfigurationRecorderOutput = null as any;
utilities.lazyLoad(exports, ["getConfigServiceConfigurationRecorder","getConfigServiceConfigurationRecorderOutput"], () => require("./getConfigServiceConfigurationRecorder"));

export { GetConfigServiceConfigurationRecorderStatusArgs, GetConfigServiceConfigurationRecorderStatusResult, GetConfigServiceConfigurationRecorderStatusOutputArgs } from "./getConfigServiceConfigurationRecorderStatus";
export const getConfigServiceConfigurationRecorderStatus: typeof import("./getConfigServiceConfigurationRecorderStatus").getConfigServiceConfigurationRecorderStatus = null as any;
export const getConfigServiceConfigurationRecorderStatusOutput: typeof import("./getConfigServiceConfigurationRecorderStatus").getConfigServiceConfigurationRecorderStatusOutput = null as any;
utilities.lazyLoad(exports, ["getConfigServiceConfigurationRecorderStatus","getConfigServiceConfigurationRecorderStatusOutput"], () => require("./getConfigServiceConfigurationRecorderStatus"));

export { GetConfigServiceDeliveryChannelArgs, GetConfigServiceDeliveryChannelResult, GetConfigServiceDeliveryChannelOutputArgs } from "./getConfigServiceDeliveryChannel";
export const getConfigServiceDeliveryChannel: typeof import("./getConfigServiceDeliveryChannel").getConfigServiceDeliveryChannel = null as any;
export const getConfigServiceDeliveryChannelOutput: typeof import("./getConfigServiceDeliveryChannel").getConfigServiceDeliveryChannelOutput = null as any;
utilities.lazyLoad(exports, ["getConfigServiceDeliveryChannel","getConfigServiceDeliveryChannelOutput"], () => require("./getConfigServiceDeliveryChannel"));

export { GetDatabaseMigrationServiceReplicationInstanceArgs, GetDatabaseMigrationServiceReplicationInstanceResult, GetDatabaseMigrationServiceReplicationInstanceOutputArgs } from "./getDatabaseMigrationServiceReplicationInstance";
export const getDatabaseMigrationServiceReplicationInstance: typeof import("./getDatabaseMigrationServiceReplicationInstance").getDatabaseMigrationServiceReplicationInstance = null as any;
export const getDatabaseMigrationServiceReplicationInstanceOutput: typeof import("./getDatabaseMigrationServiceReplicationInstance").getDatabaseMigrationServiceReplicationInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMigrationServiceReplicationInstance","getDatabaseMigrationServiceReplicationInstanceOutput"], () => require("./getDatabaseMigrationServiceReplicationInstance"));

export { GetDaxClusterArgs, GetDaxClusterResult, GetDaxClusterOutputArgs } from "./getDaxCluster";
export const getDaxCluster: typeof import("./getDaxCluster").getDaxCluster = null as any;
export const getDaxClusterOutput: typeof import("./getDaxCluster").getDaxClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDaxCluster","getDaxClusterOutput"], () => require("./getDaxCluster"));

export { GetDynamoDbContinuousBackupsDescriptionArgs, GetDynamoDbContinuousBackupsDescriptionResult, GetDynamoDbContinuousBackupsDescriptionOutputArgs } from "./getDynamoDbContinuousBackupsDescription";
export const getDynamoDbContinuousBackupsDescription: typeof import("./getDynamoDbContinuousBackupsDescription").getDynamoDbContinuousBackupsDescription = null as any;
export const getDynamoDbContinuousBackupsDescriptionOutput: typeof import("./getDynamoDbContinuousBackupsDescription").getDynamoDbContinuousBackupsDescriptionOutput = null as any;
utilities.lazyLoad(exports, ["getDynamoDbContinuousBackupsDescription","getDynamoDbContinuousBackupsDescriptionOutput"], () => require("./getDynamoDbContinuousBackupsDescription"));

export { GetDynamoDbTableArgs, GetDynamoDbTableResult, GetDynamoDbTableOutputArgs } from "./getDynamoDbTable";
export const getDynamoDbTable: typeof import("./getDynamoDbTable").getDynamoDbTable = null as any;
export const getDynamoDbTableOutput: typeof import("./getDynamoDbTable").getDynamoDbTableOutput = null as any;
utilities.lazyLoad(exports, ["getDynamoDbTable","getDynamoDbTableOutput"], () => require("./getDynamoDbTable"));

export { GetEc2AccountAttributeArgs, GetEc2AccountAttributeResult, GetEc2AccountAttributeOutputArgs } from "./getEc2AccountAttribute";
export const getEc2AccountAttribute: typeof import("./getEc2AccountAttribute").getEc2AccountAttribute = null as any;
export const getEc2AccountAttributeOutput: typeof import("./getEc2AccountAttribute").getEc2AccountAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getEc2AccountAttribute","getEc2AccountAttributeOutput"], () => require("./getEc2AccountAttribute"));

export { GetEc2AddressArgs, GetEc2AddressResult, GetEc2AddressOutputArgs } from "./getEc2Address";
export const getEc2Address: typeof import("./getEc2Address").getEc2Address = null as any;
export const getEc2AddressOutput: typeof import("./getEc2Address").getEc2AddressOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Address","getEc2AddressOutput"], () => require("./getEc2Address"));

export { GetEc2FlowLogArgs, GetEc2FlowLogResult, GetEc2FlowLogOutputArgs } from "./getEc2FlowLog";
export const getEc2FlowLog: typeof import("./getEc2FlowLog").getEc2FlowLog = null as any;
export const getEc2FlowLogOutput: typeof import("./getEc2FlowLog").getEc2FlowLogOutput = null as any;
utilities.lazyLoad(exports, ["getEc2FlowLog","getEc2FlowLogOutput"], () => require("./getEc2FlowLog"));

export { GetEc2ImageArgs, GetEc2ImageResult, GetEc2ImageOutputArgs } from "./getEc2Image";
export const getEc2Image: typeof import("./getEc2Image").getEc2Image = null as any;
export const getEc2ImageOutput: typeof import("./getEc2Image").getEc2ImageOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Image","getEc2ImageOutput"], () => require("./getEc2Image"));

export { GetEc2InstanceArgs, GetEc2InstanceResult, GetEc2InstanceOutputArgs } from "./getEc2Instance";
export const getEc2Instance: typeof import("./getEc2Instance").getEc2Instance = null as any;
export const getEc2InstanceOutput: typeof import("./getEc2Instance").getEc2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Instance","getEc2InstanceOutput"], () => require("./getEc2Instance"));

export { GetEc2InstanceStatusArgs, GetEc2InstanceStatusResult, GetEc2InstanceStatusOutputArgs } from "./getEc2InstanceStatus";
export const getEc2InstanceStatus: typeof import("./getEc2InstanceStatus").getEc2InstanceStatus = null as any;
export const getEc2InstanceStatusOutput: typeof import("./getEc2InstanceStatus").getEc2InstanceStatusOutput = null as any;
utilities.lazyLoad(exports, ["getEc2InstanceStatus","getEc2InstanceStatusOutput"], () => require("./getEc2InstanceStatus"));

export { GetEc2IpamArgs, GetEc2IpamResult, GetEc2IpamOutputArgs } from "./getEc2Ipam";
export const getEc2Ipam: typeof import("./getEc2Ipam").getEc2Ipam = null as any;
export const getEc2IpamOutput: typeof import("./getEc2Ipam").getEc2IpamOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Ipam","getEc2IpamOutput"], () => require("./getEc2Ipam"));

export { GetEc2KeyPairArgs, GetEc2KeyPairResult, GetEc2KeyPairOutputArgs } from "./getEc2KeyPair";
export const getEc2KeyPair: typeof import("./getEc2KeyPair").getEc2KeyPair = null as any;
export const getEc2KeyPairOutput: typeof import("./getEc2KeyPair").getEc2KeyPairOutput = null as any;
utilities.lazyLoad(exports, ["getEc2KeyPair","getEc2KeyPairOutput"], () => require("./getEc2KeyPair"));

export { GetEc2NetworkAclArgs, GetEc2NetworkAclResult, GetEc2NetworkAclOutputArgs } from "./getEc2NetworkAcl";
export const getEc2NetworkAcl: typeof import("./getEc2NetworkAcl").getEc2NetworkAcl = null as any;
export const getEc2NetworkAclOutput: typeof import("./getEc2NetworkAcl").getEc2NetworkAclOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkAcl","getEc2NetworkAclOutput"], () => require("./getEc2NetworkAcl"));

export { GetEc2NetworkInterfaceArgs, GetEc2NetworkInterfaceResult, GetEc2NetworkInterfaceOutputArgs } from "./getEc2NetworkInterface";
export const getEc2NetworkInterface: typeof import("./getEc2NetworkInterface").getEc2NetworkInterface = null as any;
export const getEc2NetworkInterfaceOutput: typeof import("./getEc2NetworkInterface").getEc2NetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInterface","getEc2NetworkInterfaceOutput"], () => require("./getEc2NetworkInterface"));

export { GetEc2RouteTableArgs, GetEc2RouteTableResult, GetEc2RouteTableOutputArgs } from "./getEc2RouteTable";
export const getEc2RouteTable: typeof import("./getEc2RouteTable").getEc2RouteTable = null as any;
export const getEc2RouteTableOutput: typeof import("./getEc2RouteTable").getEc2RouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getEc2RouteTable","getEc2RouteTableOutput"], () => require("./getEc2RouteTable"));

export { GetEc2SecurityGroupArgs, GetEc2SecurityGroupResult, GetEc2SecurityGroupOutputArgs } from "./getEc2SecurityGroup";
export const getEc2SecurityGroup: typeof import("./getEc2SecurityGroup").getEc2SecurityGroup = null as any;
export const getEc2SecurityGroupOutput: typeof import("./getEc2SecurityGroup").getEc2SecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SecurityGroup","getEc2SecurityGroupOutput"], () => require("./getEc2SecurityGroup"));

export { GetEc2SnapshotArgs, GetEc2SnapshotResult, GetEc2SnapshotOutputArgs } from "./getEc2Snapshot";
export const getEc2Snapshot: typeof import("./getEc2Snapshot").getEc2Snapshot = null as any;
export const getEc2SnapshotOutput: typeof import("./getEc2Snapshot").getEc2SnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Snapshot","getEc2SnapshotOutput"], () => require("./getEc2Snapshot"));

export { GetEc2SubnetArgs, GetEc2SubnetResult, GetEc2SubnetOutputArgs } from "./getEc2Subnet";
export const getEc2Subnet: typeof import("./getEc2Subnet").getEc2Subnet = null as any;
export const getEc2SubnetOutput: typeof import("./getEc2Subnet").getEc2SubnetOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Subnet","getEc2SubnetOutput"], () => require("./getEc2Subnet"));

export { GetEc2VolumeArgs, GetEc2VolumeResult, GetEc2VolumeOutputArgs } from "./getEc2Volume";
export const getEc2Volume: typeof import("./getEc2Volume").getEc2Volume = null as any;
export const getEc2VolumeOutput: typeof import("./getEc2Volume").getEc2VolumeOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Volume","getEc2VolumeOutput"], () => require("./getEc2Volume"));

export { GetEc2VpcArgs, GetEc2VpcResult, GetEc2VpcOutputArgs } from "./getEc2Vpc";
export const getEc2Vpc: typeof import("./getEc2Vpc").getEc2Vpc = null as any;
export const getEc2VpcOutput: typeof import("./getEc2Vpc").getEc2VpcOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Vpc","getEc2VpcOutput"], () => require("./getEc2Vpc"));

export { GetEc2VpcEndpointArgs, GetEc2VpcEndpointResult, GetEc2VpcEndpointOutputArgs } from "./getEc2VpcEndpoint";
export const getEc2VpcEndpoint: typeof import("./getEc2VpcEndpoint").getEc2VpcEndpoint = null as any;
export const getEc2VpcEndpointOutput: typeof import("./getEc2VpcEndpoint").getEc2VpcEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcEndpoint","getEc2VpcEndpointOutput"], () => require("./getEc2VpcEndpoint"));

export { GetEc2VpcPeeringConnectionArgs, GetEc2VpcPeeringConnectionResult, GetEc2VpcPeeringConnectionOutputArgs } from "./getEc2VpcPeeringConnection";
export const getEc2VpcPeeringConnection: typeof import("./getEc2VpcPeeringConnection").getEc2VpcPeeringConnection = null as any;
export const getEc2VpcPeeringConnectionOutput: typeof import("./getEc2VpcPeeringConnection").getEc2VpcPeeringConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcPeeringConnection","getEc2VpcPeeringConnectionOutput"], () => require("./getEc2VpcPeeringConnection"));

export { GetEcrImageDetailArgs, GetEcrImageDetailResult, GetEcrImageDetailOutputArgs } from "./getEcrImageDetail";
export const getEcrImageDetail: typeof import("./getEcrImageDetail").getEcrImageDetail = null as any;
export const getEcrImageDetailOutput: typeof import("./getEcrImageDetail").getEcrImageDetailOutput = null as any;
utilities.lazyLoad(exports, ["getEcrImageDetail","getEcrImageDetailOutput"], () => require("./getEcrImageDetail"));

export { GetEcrRepositoryArgs, GetEcrRepositoryResult, GetEcrRepositoryOutputArgs } from "./getEcrRepository";
export const getEcrRepository: typeof import("./getEcrRepository").getEcrRepository = null as any;
export const getEcrRepositoryOutput: typeof import("./getEcrRepository").getEcrRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getEcrRepository","getEcrRepositoryOutput"], () => require("./getEcrRepository"));

export { GetEcsClusterArgs, GetEcsClusterResult, GetEcsClusterOutputArgs } from "./getEcsCluster";
export const getEcsCluster: typeof import("./getEcsCluster").getEcsCluster = null as any;
export const getEcsClusterOutput: typeof import("./getEcsCluster").getEcsClusterOutput = null as any;
utilities.lazyLoad(exports, ["getEcsCluster","getEcsClusterOutput"], () => require("./getEcsCluster"));

export { GetEcsServiceArgs, GetEcsServiceResult, GetEcsServiceOutputArgs } from "./getEcsService";
export const getEcsService: typeof import("./getEcsService").getEcsService = null as any;
export const getEcsServiceOutput: typeof import("./getEcsService").getEcsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getEcsService","getEcsServiceOutput"], () => require("./getEcsService"));

export { GetEcsTaskDefinitionArgs, GetEcsTaskDefinitionResult, GetEcsTaskDefinitionOutputArgs } from "./getEcsTaskDefinition";
export const getEcsTaskDefinition: typeof import("./getEcsTaskDefinition").getEcsTaskDefinition = null as any;
export const getEcsTaskDefinitionOutput: typeof import("./getEcsTaskDefinition").getEcsTaskDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getEcsTaskDefinition","getEcsTaskDefinitionOutput"], () => require("./getEcsTaskDefinition"));

export { GetEfsFileSystemArgs, GetEfsFileSystemResult, GetEfsFileSystemOutputArgs } from "./getEfsFileSystem";
export const getEfsFileSystem: typeof import("./getEfsFileSystem").getEfsFileSystem = null as any;
export const getEfsFileSystemOutput: typeof import("./getEfsFileSystem").getEfsFileSystemOutput = null as any;
utilities.lazyLoad(exports, ["getEfsFileSystem","getEfsFileSystemOutput"], () => require("./getEfsFileSystem"));

export { GetEfsMountTargetArgs, GetEfsMountTargetResult, GetEfsMountTargetOutputArgs } from "./getEfsMountTarget";
export const getEfsMountTarget: typeof import("./getEfsMountTarget").getEfsMountTarget = null as any;
export const getEfsMountTargetOutput: typeof import("./getEfsMountTarget").getEfsMountTargetOutput = null as any;
utilities.lazyLoad(exports, ["getEfsMountTarget","getEfsMountTargetOutput"], () => require("./getEfsMountTarget"));

export { GetEksClusterArgs, GetEksClusterResult, GetEksClusterOutputArgs } from "./getEksCluster";
export const getEksCluster: typeof import("./getEksCluster").getEksCluster = null as any;
export const getEksClusterOutput: typeof import("./getEksCluster").getEksClusterOutput = null as any;
utilities.lazyLoad(exports, ["getEksCluster","getEksClusterOutput"], () => require("./getEksCluster"));

export { GetEksNodegroupArgs, GetEksNodegroupResult, GetEksNodegroupOutputArgs } from "./getEksNodegroup";
export const getEksNodegroup: typeof import("./getEksNodegroup").getEksNodegroup = null as any;
export const getEksNodegroupOutput: typeof import("./getEksNodegroup").getEksNodegroupOutput = null as any;
utilities.lazyLoad(exports, ["getEksNodegroup","getEksNodegroupOutput"], () => require("./getEksNodegroup"));

export { GetElasticBeanstalkApplicationArgs, GetElasticBeanstalkApplicationResult, GetElasticBeanstalkApplicationOutputArgs } from "./getElasticBeanstalkApplication";
export const getElasticBeanstalkApplication: typeof import("./getElasticBeanstalkApplication").getElasticBeanstalkApplication = null as any;
export const getElasticBeanstalkApplicationOutput: typeof import("./getElasticBeanstalkApplication").getElasticBeanstalkApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getElasticBeanstalkApplication","getElasticBeanstalkApplicationOutput"], () => require("./getElasticBeanstalkApplication"));

export { GetElasticBeanstalkConfigurationTemplateArgs, GetElasticBeanstalkConfigurationTemplateResult, GetElasticBeanstalkConfigurationTemplateOutputArgs } from "./getElasticBeanstalkConfigurationTemplate";
export const getElasticBeanstalkConfigurationTemplate: typeof import("./getElasticBeanstalkConfigurationTemplate").getElasticBeanstalkConfigurationTemplate = null as any;
export const getElasticBeanstalkConfigurationTemplateOutput: typeof import("./getElasticBeanstalkConfigurationTemplate").getElasticBeanstalkConfigurationTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getElasticBeanstalkConfigurationTemplate","getElasticBeanstalkConfigurationTemplateOutput"], () => require("./getElasticBeanstalkConfigurationTemplate"));

export { GetElasticBeanstalkEnvironmentArgs, GetElasticBeanstalkEnvironmentResult, GetElasticBeanstalkEnvironmentOutputArgs } from "./getElasticBeanstalkEnvironment";
export const getElasticBeanstalkEnvironment: typeof import("./getElasticBeanstalkEnvironment").getElasticBeanstalkEnvironment = null as any;
export const getElasticBeanstalkEnvironmentOutput: typeof import("./getElasticBeanstalkEnvironment").getElasticBeanstalkEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getElasticBeanstalkEnvironment","getElasticBeanstalkEnvironmentOutput"], () => require("./getElasticBeanstalkEnvironment"));

export { GetElasticLoadBalancingV2ListenerArgs, GetElasticLoadBalancingV2ListenerResult, GetElasticLoadBalancingV2ListenerOutputArgs } from "./getElasticLoadBalancingV2Listener";
export const getElasticLoadBalancingV2Listener: typeof import("./getElasticLoadBalancingV2Listener").getElasticLoadBalancingV2Listener = null as any;
export const getElasticLoadBalancingV2ListenerOutput: typeof import("./getElasticLoadBalancingV2Listener").getElasticLoadBalancingV2ListenerOutput = null as any;
utilities.lazyLoad(exports, ["getElasticLoadBalancingV2Listener","getElasticLoadBalancingV2ListenerOutput"], () => require("./getElasticLoadBalancingV2Listener"));

export { GetElasticLoadBalancingV2LoadBalancerArgs, GetElasticLoadBalancingV2LoadBalancerResult, GetElasticLoadBalancingV2LoadBalancerOutputArgs } from "./getElasticLoadBalancingV2LoadBalancer";
export const getElasticLoadBalancingV2LoadBalancer: typeof import("./getElasticLoadBalancingV2LoadBalancer").getElasticLoadBalancingV2LoadBalancer = null as any;
export const getElasticLoadBalancingV2LoadBalancerOutput: typeof import("./getElasticLoadBalancingV2LoadBalancer").getElasticLoadBalancingV2LoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getElasticLoadBalancingV2LoadBalancer","getElasticLoadBalancingV2LoadBalancerOutput"], () => require("./getElasticLoadBalancingV2LoadBalancer"));

export { GetElasticLoadBalancingV2TargetGroupArgs, GetElasticLoadBalancingV2TargetGroupResult, GetElasticLoadBalancingV2TargetGroupOutputArgs } from "./getElasticLoadBalancingV2TargetGroup";
export const getElasticLoadBalancingV2TargetGroup: typeof import("./getElasticLoadBalancingV2TargetGroup").getElasticLoadBalancingV2TargetGroup = null as any;
export const getElasticLoadBalancingV2TargetGroupOutput: typeof import("./getElasticLoadBalancingV2TargetGroup").getElasticLoadBalancingV2TargetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getElasticLoadBalancingV2TargetGroup","getElasticLoadBalancingV2TargetGroupOutput"], () => require("./getElasticLoadBalancingV2TargetGroup"));

export { GetElasticLoadBalancingv2TargetHealthDescriptionArgs, GetElasticLoadBalancingv2TargetHealthDescriptionResult, GetElasticLoadBalancingv2TargetHealthDescriptionOutputArgs } from "./getElasticLoadBalancingv2TargetHealthDescription";
export const getElasticLoadBalancingv2TargetHealthDescription: typeof import("./getElasticLoadBalancingv2TargetHealthDescription").getElasticLoadBalancingv2TargetHealthDescription = null as any;
export const getElasticLoadBalancingv2TargetHealthDescriptionOutput: typeof import("./getElasticLoadBalancingv2TargetHealthDescription").getElasticLoadBalancingv2TargetHealthDescriptionOutput = null as any;
utilities.lazyLoad(exports, ["getElasticLoadBalancingv2TargetHealthDescription","getElasticLoadBalancingv2TargetHealthDescriptionOutput"], () => require("./getElasticLoadBalancingv2TargetHealthDescription"));

export { GetEmrClusterArgs, GetEmrClusterResult, GetEmrClusterOutputArgs } from "./getEmrCluster";
export const getEmrCluster: typeof import("./getEmrCluster").getEmrCluster = null as any;
export const getEmrClusterOutput: typeof import("./getEmrCluster").getEmrClusterOutput = null as any;
utilities.lazyLoad(exports, ["getEmrCluster","getEmrClusterOutput"], () => require("./getEmrCluster"));

export { GetGuardDutyDetectorArgs, GetGuardDutyDetectorResult, GetGuardDutyDetectorOutputArgs } from "./getGuardDutyDetector";
export const getGuardDutyDetector: typeof import("./getGuardDutyDetector").getGuardDutyDetector = null as any;
export const getGuardDutyDetectorOutput: typeof import("./getGuardDutyDetector").getGuardDutyDetectorOutput = null as any;
utilities.lazyLoad(exports, ["getGuardDutyDetector","getGuardDutyDetectorOutput"], () => require("./getGuardDutyDetector"));

export { GetIamAccessKeyLastUsedArgs, GetIamAccessKeyLastUsedResult, GetIamAccessKeyLastUsedOutputArgs } from "./getIamAccessKeyLastUsed";
export const getIamAccessKeyLastUsed: typeof import("./getIamAccessKeyLastUsed").getIamAccessKeyLastUsed = null as any;
export const getIamAccessKeyLastUsedOutput: typeof import("./getIamAccessKeyLastUsed").getIamAccessKeyLastUsedOutput = null as any;
utilities.lazyLoad(exports, ["getIamAccessKeyLastUsed","getIamAccessKeyLastUsedOutput"], () => require("./getIamAccessKeyLastUsed"));

export { GetIamAccessKeyMetadataInfoArgs, GetIamAccessKeyMetadataInfoResult, GetIamAccessKeyMetadataInfoOutputArgs } from "./getIamAccessKeyMetadataInfo";
export const getIamAccessKeyMetadataInfo: typeof import("./getIamAccessKeyMetadataInfo").getIamAccessKeyMetadataInfo = null as any;
export const getIamAccessKeyMetadataInfoOutput: typeof import("./getIamAccessKeyMetadataInfo").getIamAccessKeyMetadataInfoOutput = null as any;
utilities.lazyLoad(exports, ["getIamAccessKeyMetadataInfo","getIamAccessKeyMetadataInfoOutput"], () => require("./getIamAccessKeyMetadataInfo"));

export { GetIamGroupArgs, GetIamGroupResult, GetIamGroupOutputArgs } from "./getIamGroup";
export const getIamGroup: typeof import("./getIamGroup").getIamGroup = null as any;
export const getIamGroupOutput: typeof import("./getIamGroup").getIamGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroup","getIamGroupOutput"], () => require("./getIamGroup"));

export { GetIamInstanceProfileArgs, GetIamInstanceProfileResult, GetIamInstanceProfileOutputArgs } from "./getIamInstanceProfile";
export const getIamInstanceProfile: typeof import("./getIamInstanceProfile").getIamInstanceProfile = null as any;
export const getIamInstanceProfileOutput: typeof import("./getIamInstanceProfile").getIamInstanceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getIamInstanceProfile","getIamInstanceProfileOutput"], () => require("./getIamInstanceProfile"));

export { GetIamMfaDeviceArgs, GetIamMfaDeviceResult, GetIamMfaDeviceOutputArgs } from "./getIamMfaDevice";
export const getIamMfaDevice: typeof import("./getIamMfaDevice").getIamMfaDevice = null as any;
export const getIamMfaDeviceOutput: typeof import("./getIamMfaDevice").getIamMfaDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getIamMfaDevice","getIamMfaDeviceOutput"], () => require("./getIamMfaDevice"));

export { GetIamPasswordPolicyArgs, GetIamPasswordPolicyResult, GetIamPasswordPolicyOutputArgs } from "./getIamPasswordPolicy";
export const getIamPasswordPolicy: typeof import("./getIamPasswordPolicy").getIamPasswordPolicy = null as any;
export const getIamPasswordPolicyOutput: typeof import("./getIamPasswordPolicy").getIamPasswordPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamPasswordPolicy","getIamPasswordPolicyOutput"], () => require("./getIamPasswordPolicy"));

export { GetIamPolicyVersionArgs, GetIamPolicyVersionResult, GetIamPolicyVersionOutputArgs } from "./getIamPolicyVersion";
export const getIamPolicyVersion: typeof import("./getIamPolicyVersion").getIamPolicyVersion = null as any;
export const getIamPolicyVersionOutput: typeof import("./getIamPolicyVersion").getIamPolicyVersionOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicyVersion","getIamPolicyVersionOutput"], () => require("./getIamPolicyVersion"));

export { GetIamRoleArgs, GetIamRoleResult, GetIamRoleOutputArgs } from "./getIamRole";
export const getIamRole: typeof import("./getIamRole").getIamRole = null as any;
export const getIamRoleOutput: typeof import("./getIamRole").getIamRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIamRole","getIamRoleOutput"], () => require("./getIamRole"));

export { GetIamServerCertificateArgs, GetIamServerCertificateResult, GetIamServerCertificateOutputArgs } from "./getIamServerCertificate";
export const getIamServerCertificate: typeof import("./getIamServerCertificate").getIamServerCertificate = null as any;
export const getIamServerCertificateOutput: typeof import("./getIamServerCertificate").getIamServerCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getIamServerCertificate","getIamServerCertificateOutput"], () => require("./getIamServerCertificate"));

export { GetIamVirtualMfaDeviceArgs, GetIamVirtualMfaDeviceResult, GetIamVirtualMfaDeviceOutputArgs } from "./getIamVirtualMfaDevice";
export const getIamVirtualMfaDevice: typeof import("./getIamVirtualMfaDevice").getIamVirtualMfaDevice = null as any;
export const getIamVirtualMfaDeviceOutput: typeof import("./getIamVirtualMfaDevice").getIamVirtualMfaDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getIamVirtualMfaDevice","getIamVirtualMfaDeviceOutput"], () => require("./getIamVirtualMfaDevice"));

export { GetKmsAliasArgs, GetKmsAliasResult, GetKmsAliasOutputArgs } from "./getKmsAlias";
export const getKmsAlias: typeof import("./getKmsAlias").getKmsAlias = null as any;
export const getKmsAliasOutput: typeof import("./getKmsAlias").getKmsAliasOutput = null as any;
utilities.lazyLoad(exports, ["getKmsAlias","getKmsAliasOutput"], () => require("./getKmsAlias"));

export { GetKmsKeyArgs, GetKmsKeyResult, GetKmsKeyOutputArgs } from "./getKmsKey";
export const getKmsKey: typeof import("./getKmsKey").getKmsKey = null as any;
export const getKmsKeyOutput: typeof import("./getKmsKey").getKmsKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKey","getKmsKeyOutput"], () => require("./getKmsKey"));

export { GetLambdaFunctionArgs, GetLambdaFunctionResult, GetLambdaFunctionOutputArgs } from "./getLambdaFunction";
export const getLambdaFunction: typeof import("./getLambdaFunction").getLambdaFunction = null as any;
export const getLambdaFunctionOutput: typeof import("./getLambdaFunction").getLambdaFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaFunction","getLambdaFunctionOutput"], () => require("./getLambdaFunction"));

export { GetLambdaFunctionCodeLocationArgs, GetLambdaFunctionCodeLocationResult, GetLambdaFunctionCodeLocationOutputArgs } from "./getLambdaFunctionCodeLocation";
export const getLambdaFunctionCodeLocation: typeof import("./getLambdaFunctionCodeLocation").getLambdaFunctionCodeLocation = null as any;
export const getLambdaFunctionCodeLocationOutput: typeof import("./getLambdaFunctionCodeLocation").getLambdaFunctionCodeLocationOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaFunctionCodeLocation","getLambdaFunctionCodeLocationOutput"], () => require("./getLambdaFunctionCodeLocation"));

export { GetLightsailBucketArgs, GetLightsailBucketResult, GetLightsailBucketOutputArgs } from "./getLightsailBucket";
export const getLightsailBucket: typeof import("./getLightsailBucket").getLightsailBucket = null as any;
export const getLightsailBucketOutput: typeof import("./getLightsailBucket").getLightsailBucketOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailBucket","getLightsailBucketOutput"], () => require("./getLightsailBucket"));

export { GetLightsailInstanceArgs, GetLightsailInstanceResult, GetLightsailInstanceOutputArgs } from "./getLightsailInstance";
export const getLightsailInstance: typeof import("./getLightsailInstance").getLightsailInstance = null as any;
export const getLightsailInstanceOutput: typeof import("./getLightsailInstance").getLightsailInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailInstance","getLightsailInstanceOutput"], () => require("./getLightsailInstance"));

export { GetLogsLogGroupArgs, GetLogsLogGroupResult, GetLogsLogGroupOutputArgs } from "./getLogsLogGroup";
export const getLogsLogGroup: typeof import("./getLogsLogGroup").getLogsLogGroup = null as any;
export const getLogsLogGroupOutput: typeof import("./getLogsLogGroup").getLogsLogGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLogsLogGroup","getLogsLogGroupOutput"], () => require("./getLogsLogGroup"));

export { GetLogsLogStreamArgs, GetLogsLogStreamResult, GetLogsLogStreamOutputArgs } from "./getLogsLogStream";
export const getLogsLogStream: typeof import("./getLogsLogStream").getLogsLogStream = null as any;
export const getLogsLogStreamOutput: typeof import("./getLogsLogStream").getLogsLogStreamOutput = null as any;
utilities.lazyLoad(exports, ["getLogsLogStream","getLogsLogStreamOutput"], () => require("./getLogsLogStream"));

export { GetLogsMetricFilterArgs, GetLogsMetricFilterResult, GetLogsMetricFilterOutputArgs } from "./getLogsMetricFilter";
export const getLogsMetricFilter: typeof import("./getLogsMetricFilter").getLogsMetricFilter = null as any;
export const getLogsMetricFilterOutput: typeof import("./getLogsMetricFilter").getLogsMetricFilterOutput = null as any;
utilities.lazyLoad(exports, ["getLogsMetricFilter","getLogsMetricFilterOutput"], () => require("./getLogsMetricFilter"));

export { GetLogsSubscriptionFilterArgs, GetLogsSubscriptionFilterResult, GetLogsSubscriptionFilterOutputArgs } from "./getLogsSubscriptionFilter";
export const getLogsSubscriptionFilter: typeof import("./getLogsSubscriptionFilter").getLogsSubscriptionFilter = null as any;
export const getLogsSubscriptionFilterOutput: typeof import("./getLogsSubscriptionFilter").getLogsSubscriptionFilterOutput = null as any;
utilities.lazyLoad(exports, ["getLogsSubscriptionFilter","getLogsSubscriptionFilterOutput"], () => require("./getLogsSubscriptionFilter"));

export { GetMacie2JobSummaryArgs, GetMacie2JobSummaryResult, GetMacie2JobSummaryOutputArgs } from "./getMacie2JobSummary";
export const getMacie2JobSummary: typeof import("./getMacie2JobSummary").getMacie2JobSummary = null as any;
export const getMacie2JobSummaryOutput: typeof import("./getMacie2JobSummary").getMacie2JobSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getMacie2JobSummary","getMacie2JobSummaryOutput"], () => require("./getMacie2JobSummary"));

export { GetMacieAllowListArgs, GetMacieAllowListResult, GetMacieAllowListOutputArgs } from "./getMacieAllowList";
export const getMacieAllowList: typeof import("./getMacieAllowList").getMacieAllowList = null as any;
export const getMacieAllowListOutput: typeof import("./getMacieAllowList").getMacieAllowListOutput = null as any;
utilities.lazyLoad(exports, ["getMacieAllowList","getMacieAllowListOutput"], () => require("./getMacieAllowList"));

export { GetNetworkFirewallFirewallArgs, GetNetworkFirewallFirewallResult, GetNetworkFirewallFirewallOutputArgs } from "./getNetworkFirewallFirewall";
export const getNetworkFirewallFirewall: typeof import("./getNetworkFirewallFirewall").getNetworkFirewallFirewall = null as any;
export const getNetworkFirewallFirewallOutput: typeof import("./getNetworkFirewallFirewall").getNetworkFirewallFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallFirewall","getNetworkFirewallFirewallOutput"], () => require("./getNetworkFirewallFirewall"));

export { GetNetworkFirewallFirewallPolicyArgs, GetNetworkFirewallFirewallPolicyResult, GetNetworkFirewallFirewallPolicyOutputArgs } from "./getNetworkFirewallFirewallPolicy";
export const getNetworkFirewallFirewallPolicy: typeof import("./getNetworkFirewallFirewallPolicy").getNetworkFirewallFirewallPolicy = null as any;
export const getNetworkFirewallFirewallPolicyOutput: typeof import("./getNetworkFirewallFirewallPolicy").getNetworkFirewallFirewallPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallFirewallPolicy","getNetworkFirewallFirewallPolicyOutput"], () => require("./getNetworkFirewallFirewallPolicy"));

export { GetNetworkFirewallRuleGroupArgs, GetNetworkFirewallRuleGroupResult, GetNetworkFirewallRuleGroupOutputArgs } from "./getNetworkFirewallRuleGroup";
export const getNetworkFirewallRuleGroup: typeof import("./getNetworkFirewallRuleGroup").getNetworkFirewallRuleGroup = null as any;
export const getNetworkFirewallRuleGroupOutput: typeof import("./getNetworkFirewallRuleGroup").getNetworkFirewallRuleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallRuleGroup","getNetworkFirewallRuleGroupOutput"], () => require("./getNetworkFirewallRuleGroup"));

export { GetOpenSearchDomainStatusArgs, GetOpenSearchDomainStatusResult, GetOpenSearchDomainStatusOutputArgs } from "./getOpenSearchDomainStatus";
export const getOpenSearchDomainStatus: typeof import("./getOpenSearchDomainStatus").getOpenSearchDomainStatus = null as any;
export const getOpenSearchDomainStatusOutput: typeof import("./getOpenSearchDomainStatus").getOpenSearchDomainStatusOutput = null as any;
utilities.lazyLoad(exports, ["getOpenSearchDomainStatus","getOpenSearchDomainStatusOutput"], () => require("./getOpenSearchDomainStatus"));

export { GetOrganizationsAccountArgs, GetOrganizationsAccountResult, GetOrganizationsAccountOutputArgs } from "./getOrganizationsAccount";
export const getOrganizationsAccount: typeof import("./getOrganizationsAccount").getOrganizationsAccount = null as any;
export const getOrganizationsAccountOutput: typeof import("./getOrganizationsAccount").getOrganizationsAccountOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsAccount","getOrganizationsAccountOutput"], () => require("./getOrganizationsAccount"));

export { GetOrganizationsOrganizationArgs, GetOrganizationsOrganizationResult, GetOrganizationsOrganizationOutputArgs } from "./getOrganizationsOrganization";
export const getOrganizationsOrganization: typeof import("./getOrganizationsOrganization").getOrganizationsOrganization = null as any;
export const getOrganizationsOrganizationOutput: typeof import("./getOrganizationsOrganization").getOrganizationsOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsOrganization","getOrganizationsOrganizationOutput"], () => require("./getOrganizationsOrganization"));

export { GetRdsDbClusterArgs, GetRdsDbClusterResult, GetRdsDbClusterOutputArgs } from "./getRdsDbCluster";
export const getRdsDbCluster: typeof import("./getRdsDbCluster").getRdsDbCluster = null as any;
export const getRdsDbClusterOutput: typeof import("./getRdsDbCluster").getRdsDbClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbCluster","getRdsDbClusterOutput"], () => require("./getRdsDbCluster"));

export { GetRdsDbInstanceArgs, GetRdsDbInstanceResult, GetRdsDbInstanceOutputArgs } from "./getRdsDbInstance";
export const getRdsDbInstance: typeof import("./getRdsDbInstance").getRdsDbInstance = null as any;
export const getRdsDbInstanceOutput: typeof import("./getRdsDbInstance").getRdsDbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbInstance","getRdsDbInstanceOutput"], () => require("./getRdsDbInstance"));

export { GetRdsDbSnapshotArgs, GetRdsDbSnapshotResult, GetRdsDbSnapshotOutputArgs } from "./getRdsDbSnapshot";
export const getRdsDbSnapshot: typeof import("./getRdsDbSnapshot").getRdsDbSnapshot = null as any;
export const getRdsDbSnapshotOutput: typeof import("./getRdsDbSnapshot").getRdsDbSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbSnapshot","getRdsDbSnapshotOutput"], () => require("./getRdsDbSnapshot"));

export { GetRdsDbSnapshotAttributesResultArgs, GetRdsDbSnapshotAttributesResultResult, GetRdsDbSnapshotAttributesResultOutputArgs } from "./getRdsDbSnapshotAttributesResult";
export const getRdsDbSnapshotAttributesResult: typeof import("./getRdsDbSnapshotAttributesResult").getRdsDbSnapshotAttributesResult = null as any;
export const getRdsDbSnapshotAttributesResultOutput: typeof import("./getRdsDbSnapshotAttributesResult").getRdsDbSnapshotAttributesResultOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbSnapshotAttributesResult","getRdsDbSnapshotAttributesResultOutput"], () => require("./getRdsDbSnapshotAttributesResult"));

export { GetRdsEventSubscriptionArgs, GetRdsEventSubscriptionResult, GetRdsEventSubscriptionOutputArgs } from "./getRdsEventSubscription";
export const getRdsEventSubscription: typeof import("./getRdsEventSubscription").getRdsEventSubscription = null as any;
export const getRdsEventSubscriptionOutput: typeof import("./getRdsEventSubscription").getRdsEventSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getRdsEventSubscription","getRdsEventSubscriptionOutput"], () => require("./getRdsEventSubscription"));

export { GetRdsExportTaskArgs, GetRdsExportTaskResult, GetRdsExportTaskOutputArgs } from "./getRdsExportTask";
export const getRdsExportTask: typeof import("./getRdsExportTask").getRdsExportTask = null as any;
export const getRdsExportTaskOutput: typeof import("./getRdsExportTask").getRdsExportTaskOutput = null as any;
utilities.lazyLoad(exports, ["getRdsExportTask","getRdsExportTaskOutput"], () => require("./getRdsExportTask"));

export { GetRedshiftClusterArgs, GetRedshiftClusterResult, GetRedshiftClusterOutputArgs } from "./getRedshiftCluster";
export const getRedshiftCluster: typeof import("./getRedshiftCluster").getRedshiftCluster = null as any;
export const getRedshiftClusterOutput: typeof import("./getRedshiftCluster").getRedshiftClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftCluster","getRedshiftClusterOutput"], () => require("./getRedshiftCluster"));

export { GetRedshiftClusterParameterGroupArgs, GetRedshiftClusterParameterGroupResult, GetRedshiftClusterParameterGroupOutputArgs } from "./getRedshiftClusterParameterGroup";
export const getRedshiftClusterParameterGroup: typeof import("./getRedshiftClusterParameterGroup").getRedshiftClusterParameterGroup = null as any;
export const getRedshiftClusterParameterGroupOutput: typeof import("./getRedshiftClusterParameterGroup").getRedshiftClusterParameterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftClusterParameterGroup","getRedshiftClusterParameterGroupOutput"], () => require("./getRedshiftClusterParameterGroup"));

export { GetRoute53DomainsDomainSummaryArgs, GetRoute53DomainsDomainSummaryResult, GetRoute53DomainsDomainSummaryOutputArgs } from "./getRoute53DomainsDomainSummary";
export const getRoute53DomainsDomainSummary: typeof import("./getRoute53DomainsDomainSummary").getRoute53DomainsDomainSummary = null as any;
export const getRoute53DomainsDomainSummaryOutput: typeof import("./getRoute53DomainsDomainSummary").getRoute53DomainsDomainSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53DomainsDomainSummary","getRoute53DomainsDomainSummaryOutput"], () => require("./getRoute53DomainsDomainSummary"));

export { GetRoute53HostedZoneArgs, GetRoute53HostedZoneResult, GetRoute53HostedZoneOutputArgs } from "./getRoute53HostedZone";
export const getRoute53HostedZone: typeof import("./getRoute53HostedZone").getRoute53HostedZone = null as any;
export const getRoute53HostedZoneOutput: typeof import("./getRoute53HostedZone").getRoute53HostedZoneOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53HostedZone","getRoute53HostedZoneOutput"], () => require("./getRoute53HostedZone"));

export { GetRoute53ResourceRecordSetArgs, GetRoute53ResourceRecordSetResult, GetRoute53ResourceRecordSetOutputArgs } from "./getRoute53ResourceRecordSet";
export const getRoute53ResourceRecordSet: typeof import("./getRoute53ResourceRecordSet").getRoute53ResourceRecordSet = null as any;
export const getRoute53ResourceRecordSetOutput: typeof import("./getRoute53ResourceRecordSet").getRoute53ResourceRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53ResourceRecordSet","getRoute53ResourceRecordSetOutput"], () => require("./getRoute53ResourceRecordSet"));

export { GetS3AccessControlPolicyArgs, GetS3AccessControlPolicyResult, GetS3AccessControlPolicyOutputArgs } from "./getS3AccessControlPolicy";
export const getS3AccessControlPolicy: typeof import("./getS3AccessControlPolicy").getS3AccessControlPolicy = null as any;
export const getS3AccessControlPolicyOutput: typeof import("./getS3AccessControlPolicy").getS3AccessControlPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getS3AccessControlPolicy","getS3AccessControlPolicyOutput"], () => require("./getS3AccessControlPolicy"));

export { GetS3AccessPointArgs, GetS3AccessPointResult, GetS3AccessPointOutputArgs } from "./getS3AccessPoint";
export const getS3AccessPoint: typeof import("./getS3AccessPoint").getS3AccessPoint = null as any;
export const getS3AccessPointOutput: typeof import("./getS3AccessPoint").getS3AccessPointOutput = null as any;
utilities.lazyLoad(exports, ["getS3AccessPoint","getS3AccessPointOutput"], () => require("./getS3AccessPoint"));

export { GetS3BucketArgs, GetS3BucketResult, GetS3BucketOutputArgs } from "./getS3Bucket";
export const getS3Bucket: typeof import("./getS3Bucket").getS3Bucket = null as any;
export const getS3BucketOutput: typeof import("./getS3Bucket").getS3BucketOutput = null as any;
utilities.lazyLoad(exports, ["getS3Bucket","getS3BucketOutput"], () => require("./getS3Bucket"));

export { GetS3BucketPolicyArgs, GetS3BucketPolicyResult, GetS3BucketPolicyOutputArgs } from "./getS3BucketPolicy";
export const getS3BucketPolicy: typeof import("./getS3BucketPolicy").getS3BucketPolicy = null as any;
export const getS3BucketPolicyOutput: typeof import("./getS3BucketPolicy").getS3BucketPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getS3BucketPolicy","getS3BucketPolicyOutput"], () => require("./getS3BucketPolicy"));

export { GetS3ControlMultiRegionAccessPointPolicyDocumentArgs, GetS3ControlMultiRegionAccessPointPolicyDocumentResult, GetS3ControlMultiRegionAccessPointPolicyDocumentOutputArgs } from "./getS3ControlMultiRegionAccessPointPolicyDocument";
export const getS3ControlMultiRegionAccessPointPolicyDocument: typeof import("./getS3ControlMultiRegionAccessPointPolicyDocument").getS3ControlMultiRegionAccessPointPolicyDocument = null as any;
export const getS3ControlMultiRegionAccessPointPolicyDocumentOutput: typeof import("./getS3ControlMultiRegionAccessPointPolicyDocument").getS3ControlMultiRegionAccessPointPolicyDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getS3ControlMultiRegionAccessPointPolicyDocument","getS3ControlMultiRegionAccessPointPolicyDocumentOutput"], () => require("./getS3ControlMultiRegionAccessPointPolicyDocument"));

export { GetSageMakerAppArgs, GetSageMakerAppResult, GetSageMakerAppOutputArgs } from "./getSageMakerApp";
export const getSageMakerApp: typeof import("./getSageMakerApp").getSageMakerApp = null as any;
export const getSageMakerAppOutput: typeof import("./getSageMakerApp").getSageMakerAppOutput = null as any;
utilities.lazyLoad(exports, ["getSageMakerApp","getSageMakerAppOutput"], () => require("./getSageMakerApp"));

export { GetSageMakerNotebookInstanceSummaryArgs, GetSageMakerNotebookInstanceSummaryResult, GetSageMakerNotebookInstanceSummaryOutputArgs } from "./getSageMakerNotebookInstanceSummary";
export const getSageMakerNotebookInstanceSummary: typeof import("./getSageMakerNotebookInstanceSummary").getSageMakerNotebookInstanceSummary = null as any;
export const getSageMakerNotebookInstanceSummaryOutput: typeof import("./getSageMakerNotebookInstanceSummary").getSageMakerNotebookInstanceSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getSageMakerNotebookInstanceSummary","getSageMakerNotebookInstanceSummaryOutput"], () => require("./getSageMakerNotebookInstanceSummary"));

export { GetSecretsManagerResourcePolicyArgs, GetSecretsManagerResourcePolicyResult, GetSecretsManagerResourcePolicyOutputArgs } from "./getSecretsManagerResourcePolicy";
export const getSecretsManagerResourcePolicy: typeof import("./getSecretsManagerResourcePolicy").getSecretsManagerResourcePolicy = null as any;
export const getSecretsManagerResourcePolicyOutput: typeof import("./getSecretsManagerResourcePolicy").getSecretsManagerResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsManagerResourcePolicy","getSecretsManagerResourcePolicyOutput"], () => require("./getSecretsManagerResourcePolicy"));

export { GetSecretsManagerSecretArgs, GetSecretsManagerSecretResult, GetSecretsManagerSecretOutputArgs } from "./getSecretsManagerSecret";
export const getSecretsManagerSecret: typeof import("./getSecretsManagerSecret").getSecretsManagerSecret = null as any;
export const getSecretsManagerSecretOutput: typeof import("./getSecretsManagerSecret").getSecretsManagerSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsManagerSecret","getSecretsManagerSecretOutput"], () => require("./getSecretsManagerSecret"));

export { GetSnsSubscriptionArgs, GetSnsSubscriptionResult, GetSnsSubscriptionOutputArgs } from "./getSnsSubscription";
export const getSnsSubscription: typeof import("./getSnsSubscription").getSnsSubscription = null as any;
export const getSnsSubscriptionOutput: typeof import("./getSnsSubscription").getSnsSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getSnsSubscription","getSnsSubscriptionOutput"], () => require("./getSnsSubscription"));

export { GetSnsTopicArgs, GetSnsTopicResult, GetSnsTopicOutputArgs } from "./getSnsTopic";
export const getSnsTopic: typeof import("./getSnsTopic").getSnsTopic = null as any;
export const getSnsTopicOutput: typeof import("./getSnsTopic").getSnsTopicOutput = null as any;
utilities.lazyLoad(exports, ["getSnsTopic","getSnsTopicOutput"], () => require("./getSnsTopic"));

export { GetSqsQueueArgs, GetSqsQueueResult, GetSqsQueueOutputArgs } from "./getSqsQueue";
export const getSqsQueue: typeof import("./getSqsQueue").getSqsQueue = null as any;
export const getSqsQueueOutput: typeof import("./getSqsQueue").getSqsQueueOutput = null as any;
utilities.lazyLoad(exports, ["getSqsQueue","getSqsQueueOutput"], () => require("./getSqsQueue"));

export { GetSsmInstanceInformationArgs, GetSsmInstanceInformationResult, GetSsmInstanceInformationOutputArgs } from "./getSsmInstanceInformation";
export const getSsmInstanceInformation: typeof import("./getSsmInstanceInformation").getSsmInstanceInformation = null as any;
export const getSsmInstanceInformationOutput: typeof import("./getSsmInstanceInformation").getSsmInstanceInformationOutput = null as any;
utilities.lazyLoad(exports, ["getSsmInstanceInformation","getSsmInstanceInformationOutput"], () => require("./getSsmInstanceInformation"));

export { GetSsmParameterArgs, GetSsmParameterResult, GetSsmParameterOutputArgs } from "./getSsmParameter";
export const getSsmParameter: typeof import("./getSsmParameter").getSsmParameter = null as any;
export const getSsmParameterOutput: typeof import("./getSsmParameter").getSsmParameterOutput = null as any;
utilities.lazyLoad(exports, ["getSsmParameter","getSsmParameterOutput"], () => require("./getSsmParameter"));

export { GetSsmResourceComplianceSummaryItemArgs, GetSsmResourceComplianceSummaryItemResult, GetSsmResourceComplianceSummaryItemOutputArgs } from "./getSsmResourceComplianceSummaryItem";
export const getSsmResourceComplianceSummaryItem: typeof import("./getSsmResourceComplianceSummaryItem").getSsmResourceComplianceSummaryItem = null as any;
export const getSsmResourceComplianceSummaryItemOutput: typeof import("./getSsmResourceComplianceSummaryItem").getSsmResourceComplianceSummaryItemOutput = null as any;
utilities.lazyLoad(exports, ["getSsmResourceComplianceSummaryItem","getSsmResourceComplianceSummaryItemOutput"], () => require("./getSsmResourceComplianceSummaryItem"));

export { GetWafWebAclSummaryArgs, GetWafWebAclSummaryResult, GetWafWebAclSummaryOutputArgs } from "./getWafWebAclSummary";
export const getWafWebAclSummary: typeof import("./getWafWebAclSummary").getWafWebAclSummary = null as any;
export const getWafWebAclSummaryOutput: typeof import("./getWafWebAclSummary").getWafWebAclSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getWafWebAclSummary","getWafWebAclSummaryOutput"], () => require("./getWafWebAclSummary"));

export { GetWafv2LoggingConfigurationArgs, GetWafv2LoggingConfigurationResult, GetWafv2LoggingConfigurationOutputArgs } from "./getWafv2LoggingConfiguration";
export const getWafv2LoggingConfiguration: typeof import("./getWafv2LoggingConfiguration").getWafv2LoggingConfiguration = null as any;
export const getWafv2LoggingConfigurationOutput: typeof import("./getWafv2LoggingConfiguration").getWafv2LoggingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getWafv2LoggingConfiguration","getWafv2LoggingConfigurationOutput"], () => require("./getWafv2LoggingConfiguration"));

export { GuardDutyDetectorArgs } from "./guardDutyDetector";
export type GuardDutyDetector = import("./guardDutyDetector").GuardDutyDetector;
export const GuardDutyDetector: typeof import("./guardDutyDetector").GuardDutyDetector = null as any;
utilities.lazyLoad(exports, ["GuardDutyDetector"], () => require("./guardDutyDetector"));

export { IamAccessKeyLastUsedArgs } from "./iamAccessKeyLastUsed";
export type IamAccessKeyLastUsed = import("./iamAccessKeyLastUsed").IamAccessKeyLastUsed;
export const IamAccessKeyLastUsed: typeof import("./iamAccessKeyLastUsed").IamAccessKeyLastUsed = null as any;
utilities.lazyLoad(exports, ["IamAccessKeyLastUsed"], () => require("./iamAccessKeyLastUsed"));

export { IamAccessKeyMetadataInfoArgs } from "./iamAccessKeyMetadataInfo";
export type IamAccessKeyMetadataInfo = import("./iamAccessKeyMetadataInfo").IamAccessKeyMetadataInfo;
export const IamAccessKeyMetadataInfo: typeof import("./iamAccessKeyMetadataInfo").IamAccessKeyMetadataInfo = null as any;
utilities.lazyLoad(exports, ["IamAccessKeyMetadataInfo"], () => require("./iamAccessKeyMetadataInfo"));

export { IamGroupArgs } from "./iamGroup";
export type IamGroup = import("./iamGroup").IamGroup;
export const IamGroup: typeof import("./iamGroup").IamGroup = null as any;
utilities.lazyLoad(exports, ["IamGroup"], () => require("./iamGroup"));

export { IamInstanceProfileArgs } from "./iamInstanceProfile";
export type IamInstanceProfile = import("./iamInstanceProfile").IamInstanceProfile;
export const IamInstanceProfile: typeof import("./iamInstanceProfile").IamInstanceProfile = null as any;
utilities.lazyLoad(exports, ["IamInstanceProfile"], () => require("./iamInstanceProfile"));

export { IamMfaDeviceArgs } from "./iamMfaDevice";
export type IamMfaDevice = import("./iamMfaDevice").IamMfaDevice;
export const IamMfaDevice: typeof import("./iamMfaDevice").IamMfaDevice = null as any;
utilities.lazyLoad(exports, ["IamMfaDevice"], () => require("./iamMfaDevice"));

export { IamPasswordPolicyArgs } from "./iamPasswordPolicy";
export type IamPasswordPolicy = import("./iamPasswordPolicy").IamPasswordPolicy;
export const IamPasswordPolicy: typeof import("./iamPasswordPolicy").IamPasswordPolicy = null as any;
utilities.lazyLoad(exports, ["IamPasswordPolicy"], () => require("./iamPasswordPolicy"));

export { IamPolicyVersionArgs } from "./iamPolicyVersion";
export type IamPolicyVersion = import("./iamPolicyVersion").IamPolicyVersion;
export const IamPolicyVersion: typeof import("./iamPolicyVersion").IamPolicyVersion = null as any;
utilities.lazyLoad(exports, ["IamPolicyVersion"], () => require("./iamPolicyVersion"));

export { IamRoleArgs } from "./iamRole";
export type IamRole = import("./iamRole").IamRole;
export const IamRole: typeof import("./iamRole").IamRole = null as any;
utilities.lazyLoad(exports, ["IamRole"], () => require("./iamRole"));

export { IamServerCertificateArgs } from "./iamServerCertificate";
export type IamServerCertificate = import("./iamServerCertificate").IamServerCertificate;
export const IamServerCertificate: typeof import("./iamServerCertificate").IamServerCertificate = null as any;
utilities.lazyLoad(exports, ["IamServerCertificate"], () => require("./iamServerCertificate"));

export { IamVirtualMfaDeviceArgs } from "./iamVirtualMfaDevice";
export type IamVirtualMfaDevice = import("./iamVirtualMfaDevice").IamVirtualMfaDevice;
export const IamVirtualMfaDevice: typeof import("./iamVirtualMfaDevice").IamVirtualMfaDevice = null as any;
utilities.lazyLoad(exports, ["IamVirtualMfaDevice"], () => require("./iamVirtualMfaDevice"));

export { KmsAliasArgs } from "./kmsAlias";
export type KmsAlias = import("./kmsAlias").KmsAlias;
export const KmsAlias: typeof import("./kmsAlias").KmsAlias = null as any;
utilities.lazyLoad(exports, ["KmsAlias"], () => require("./kmsAlias"));

export { KmsKeyArgs } from "./kmsKey";
export type KmsKey = import("./kmsKey").KmsKey;
export const KmsKey: typeof import("./kmsKey").KmsKey = null as any;
utilities.lazyLoad(exports, ["KmsKey"], () => require("./kmsKey"));

export { LambdaFunctionArgs } from "./lambdaFunction";
export type LambdaFunction = import("./lambdaFunction").LambdaFunction;
export const LambdaFunction: typeof import("./lambdaFunction").LambdaFunction = null as any;
utilities.lazyLoad(exports, ["LambdaFunction"], () => require("./lambdaFunction"));

export { LambdaFunctionCodeLocationArgs } from "./lambdaFunctionCodeLocation";
export type LambdaFunctionCodeLocation = import("./lambdaFunctionCodeLocation").LambdaFunctionCodeLocation;
export const LambdaFunctionCodeLocation: typeof import("./lambdaFunctionCodeLocation").LambdaFunctionCodeLocation = null as any;
utilities.lazyLoad(exports, ["LambdaFunctionCodeLocation"], () => require("./lambdaFunctionCodeLocation"));

export { LightsailBucketArgs } from "./lightsailBucket";
export type LightsailBucket = import("./lightsailBucket").LightsailBucket;
export const LightsailBucket: typeof import("./lightsailBucket").LightsailBucket = null as any;
utilities.lazyLoad(exports, ["LightsailBucket"], () => require("./lightsailBucket"));

export { LightsailInstanceArgs } from "./lightsailInstance";
export type LightsailInstance = import("./lightsailInstance").LightsailInstance;
export const LightsailInstance: typeof import("./lightsailInstance").LightsailInstance = null as any;
utilities.lazyLoad(exports, ["LightsailInstance"], () => require("./lightsailInstance"));

export { LogsLogGroupArgs } from "./logsLogGroup";
export type LogsLogGroup = import("./logsLogGroup").LogsLogGroup;
export const LogsLogGroup: typeof import("./logsLogGroup").LogsLogGroup = null as any;
utilities.lazyLoad(exports, ["LogsLogGroup"], () => require("./logsLogGroup"));

export { LogsLogStreamArgs } from "./logsLogStream";
export type LogsLogStream = import("./logsLogStream").LogsLogStream;
export const LogsLogStream: typeof import("./logsLogStream").LogsLogStream = null as any;
utilities.lazyLoad(exports, ["LogsLogStream"], () => require("./logsLogStream"));

export { LogsMetricFilterArgs } from "./logsMetricFilter";
export type LogsMetricFilter = import("./logsMetricFilter").LogsMetricFilter;
export const LogsMetricFilter: typeof import("./logsMetricFilter").LogsMetricFilter = null as any;
utilities.lazyLoad(exports, ["LogsMetricFilter"], () => require("./logsMetricFilter"));

export { LogsSubscriptionFilterArgs } from "./logsSubscriptionFilter";
export type LogsSubscriptionFilter = import("./logsSubscriptionFilter").LogsSubscriptionFilter;
export const LogsSubscriptionFilter: typeof import("./logsSubscriptionFilter").LogsSubscriptionFilter = null as any;
utilities.lazyLoad(exports, ["LogsSubscriptionFilter"], () => require("./logsSubscriptionFilter"));

export { Macie2JobSummaryArgs } from "./macie2JobSummary";
export type Macie2JobSummary = import("./macie2JobSummary").Macie2JobSummary;
export const Macie2JobSummary: typeof import("./macie2JobSummary").Macie2JobSummary = null as any;
utilities.lazyLoad(exports, ["Macie2JobSummary"], () => require("./macie2JobSummary"));

export { MacieAllowListArgs } from "./macieAllowList";
export type MacieAllowList = import("./macieAllowList").MacieAllowList;
export const MacieAllowList: typeof import("./macieAllowList").MacieAllowList = null as any;
utilities.lazyLoad(exports, ["MacieAllowList"], () => require("./macieAllowList"));

export { NetworkFirewallFirewallArgs } from "./networkFirewallFirewall";
export type NetworkFirewallFirewall = import("./networkFirewallFirewall").NetworkFirewallFirewall;
export const NetworkFirewallFirewall: typeof import("./networkFirewallFirewall").NetworkFirewallFirewall = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallFirewall"], () => require("./networkFirewallFirewall"));

export { NetworkFirewallFirewallPolicyArgs } from "./networkFirewallFirewallPolicy";
export type NetworkFirewallFirewallPolicy = import("./networkFirewallFirewallPolicy").NetworkFirewallFirewallPolicy;
export const NetworkFirewallFirewallPolicy: typeof import("./networkFirewallFirewallPolicy").NetworkFirewallFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallFirewallPolicy"], () => require("./networkFirewallFirewallPolicy"));

export { NetworkFirewallRuleGroupArgs } from "./networkFirewallRuleGroup";
export type NetworkFirewallRuleGroup = import("./networkFirewallRuleGroup").NetworkFirewallRuleGroup;
export const NetworkFirewallRuleGroup: typeof import("./networkFirewallRuleGroup").NetworkFirewallRuleGroup = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallRuleGroup"], () => require("./networkFirewallRuleGroup"));

export { OpenSearchDomainStatusArgs } from "./openSearchDomainStatus";
export type OpenSearchDomainStatus = import("./openSearchDomainStatus").OpenSearchDomainStatus;
export const OpenSearchDomainStatus: typeof import("./openSearchDomainStatus").OpenSearchDomainStatus = null as any;
utilities.lazyLoad(exports, ["OpenSearchDomainStatus"], () => require("./openSearchDomainStatus"));

export { OrganizationsAccountArgs } from "./organizationsAccount";
export type OrganizationsAccount = import("./organizationsAccount").OrganizationsAccount;
export const OrganizationsAccount: typeof import("./organizationsAccount").OrganizationsAccount = null as any;
utilities.lazyLoad(exports, ["OrganizationsAccount"], () => require("./organizationsAccount"));

export { OrganizationsOrganizationArgs } from "./organizationsOrganization";
export type OrganizationsOrganization = import("./organizationsOrganization").OrganizationsOrganization;
export const OrganizationsOrganization: typeof import("./organizationsOrganization").OrganizationsOrganization = null as any;
utilities.lazyLoad(exports, ["OrganizationsOrganization"], () => require("./organizationsOrganization"));

export { RdsDbClusterArgs } from "./rdsDbCluster";
export type RdsDbCluster = import("./rdsDbCluster").RdsDbCluster;
export const RdsDbCluster: typeof import("./rdsDbCluster").RdsDbCluster = null as any;
utilities.lazyLoad(exports, ["RdsDbCluster"], () => require("./rdsDbCluster"));

export { RdsDbInstanceArgs } from "./rdsDbInstance";
export type RdsDbInstance = import("./rdsDbInstance").RdsDbInstance;
export const RdsDbInstance: typeof import("./rdsDbInstance").RdsDbInstance = null as any;
utilities.lazyLoad(exports, ["RdsDbInstance"], () => require("./rdsDbInstance"));

export { RdsDbSnapshotArgs } from "./rdsDbSnapshot";
export type RdsDbSnapshot = import("./rdsDbSnapshot").RdsDbSnapshot;
export const RdsDbSnapshot: typeof import("./rdsDbSnapshot").RdsDbSnapshot = null as any;
utilities.lazyLoad(exports, ["RdsDbSnapshot"], () => require("./rdsDbSnapshot"));

export { RdsDbSnapshotAttributesResultArgs } from "./rdsDbSnapshotAttributesResult";
export type RdsDbSnapshotAttributesResult = import("./rdsDbSnapshotAttributesResult").RdsDbSnapshotAttributesResult;
export const RdsDbSnapshotAttributesResult: typeof import("./rdsDbSnapshotAttributesResult").RdsDbSnapshotAttributesResult = null as any;
utilities.lazyLoad(exports, ["RdsDbSnapshotAttributesResult"], () => require("./rdsDbSnapshotAttributesResult"));

export { RdsEventSubscriptionArgs } from "./rdsEventSubscription";
export type RdsEventSubscription = import("./rdsEventSubscription").RdsEventSubscription;
export const RdsEventSubscription: typeof import("./rdsEventSubscription").RdsEventSubscription = null as any;
utilities.lazyLoad(exports, ["RdsEventSubscription"], () => require("./rdsEventSubscription"));

export { RdsExportTaskArgs } from "./rdsExportTask";
export type RdsExportTask = import("./rdsExportTask").RdsExportTask;
export const RdsExportTask: typeof import("./rdsExportTask").RdsExportTask = null as any;
utilities.lazyLoad(exports, ["RdsExportTask"], () => require("./rdsExportTask"));

export { RedshiftClusterArgs } from "./redshiftCluster";
export type RedshiftCluster = import("./redshiftCluster").RedshiftCluster;
export const RedshiftCluster: typeof import("./redshiftCluster").RedshiftCluster = null as any;
utilities.lazyLoad(exports, ["RedshiftCluster"], () => require("./redshiftCluster"));

export { RedshiftClusterParameterGroupArgs } from "./redshiftClusterParameterGroup";
export type RedshiftClusterParameterGroup = import("./redshiftClusterParameterGroup").RedshiftClusterParameterGroup;
export const RedshiftClusterParameterGroup: typeof import("./redshiftClusterParameterGroup").RedshiftClusterParameterGroup = null as any;
utilities.lazyLoad(exports, ["RedshiftClusterParameterGroup"], () => require("./redshiftClusterParameterGroup"));

export { Route53DomainsDomainSummaryArgs } from "./route53DomainsDomainSummary";
export type Route53DomainsDomainSummary = import("./route53DomainsDomainSummary").Route53DomainsDomainSummary;
export const Route53DomainsDomainSummary: typeof import("./route53DomainsDomainSummary").Route53DomainsDomainSummary = null as any;
utilities.lazyLoad(exports, ["Route53DomainsDomainSummary"], () => require("./route53DomainsDomainSummary"));

export { Route53HostedZoneArgs } from "./route53HostedZone";
export type Route53HostedZone = import("./route53HostedZone").Route53HostedZone;
export const Route53HostedZone: typeof import("./route53HostedZone").Route53HostedZone = null as any;
utilities.lazyLoad(exports, ["Route53HostedZone"], () => require("./route53HostedZone"));

export { Route53ResourceRecordSetArgs } from "./route53ResourceRecordSet";
export type Route53ResourceRecordSet = import("./route53ResourceRecordSet").Route53ResourceRecordSet;
export const Route53ResourceRecordSet: typeof import("./route53ResourceRecordSet").Route53ResourceRecordSet = null as any;
utilities.lazyLoad(exports, ["Route53ResourceRecordSet"], () => require("./route53ResourceRecordSet"));

export { S3AccessControlPolicyArgs } from "./s3accessControlPolicy";
export type S3AccessControlPolicy = import("./s3accessControlPolicy").S3AccessControlPolicy;
export const S3AccessControlPolicy: typeof import("./s3accessControlPolicy").S3AccessControlPolicy = null as any;
utilities.lazyLoad(exports, ["S3AccessControlPolicy"], () => require("./s3accessControlPolicy"));

export { S3AccessPointArgs } from "./s3accessPoint";
export type S3AccessPoint = import("./s3accessPoint").S3AccessPoint;
export const S3AccessPoint: typeof import("./s3accessPoint").S3AccessPoint = null as any;
utilities.lazyLoad(exports, ["S3AccessPoint"], () => require("./s3accessPoint"));

export { S3BucketArgs } from "./s3bucket";
export type S3Bucket = import("./s3bucket").S3Bucket;
export const S3Bucket: typeof import("./s3bucket").S3Bucket = null as any;
utilities.lazyLoad(exports, ["S3Bucket"], () => require("./s3bucket"));

export { S3BucketPolicyArgs } from "./s3bucketPolicy";
export type S3BucketPolicy = import("./s3bucketPolicy").S3BucketPolicy;
export const S3BucketPolicy: typeof import("./s3bucketPolicy").S3BucketPolicy = null as any;
utilities.lazyLoad(exports, ["S3BucketPolicy"], () => require("./s3bucketPolicy"));

export { S3ControlMultiRegionAccessPointPolicyDocumentArgs } from "./s3controlMultiRegionAccessPointPolicyDocument";
export type S3ControlMultiRegionAccessPointPolicyDocument = import("./s3controlMultiRegionAccessPointPolicyDocument").S3ControlMultiRegionAccessPointPolicyDocument;
export const S3ControlMultiRegionAccessPointPolicyDocument: typeof import("./s3controlMultiRegionAccessPointPolicyDocument").S3ControlMultiRegionAccessPointPolicyDocument = null as any;
utilities.lazyLoad(exports, ["S3ControlMultiRegionAccessPointPolicyDocument"], () => require("./s3controlMultiRegionAccessPointPolicyDocument"));

export { SageMakerAppArgs } from "./sageMakerApp";
export type SageMakerApp = import("./sageMakerApp").SageMakerApp;
export const SageMakerApp: typeof import("./sageMakerApp").SageMakerApp = null as any;
utilities.lazyLoad(exports, ["SageMakerApp"], () => require("./sageMakerApp"));

export { SageMakerNotebookInstanceSummaryArgs } from "./sageMakerNotebookInstanceSummary";
export type SageMakerNotebookInstanceSummary = import("./sageMakerNotebookInstanceSummary").SageMakerNotebookInstanceSummary;
export const SageMakerNotebookInstanceSummary: typeof import("./sageMakerNotebookInstanceSummary").SageMakerNotebookInstanceSummary = null as any;
utilities.lazyLoad(exports, ["SageMakerNotebookInstanceSummary"], () => require("./sageMakerNotebookInstanceSummary"));

export { SecretsManagerResourcePolicyArgs } from "./secretsManagerResourcePolicy";
export type SecretsManagerResourcePolicy = import("./secretsManagerResourcePolicy").SecretsManagerResourcePolicy;
export const SecretsManagerResourcePolicy: typeof import("./secretsManagerResourcePolicy").SecretsManagerResourcePolicy = null as any;
utilities.lazyLoad(exports, ["SecretsManagerResourcePolicy"], () => require("./secretsManagerResourcePolicy"));

export { SecretsManagerSecretArgs } from "./secretsManagerSecret";
export type SecretsManagerSecret = import("./secretsManagerSecret").SecretsManagerSecret;
export const SecretsManagerSecret: typeof import("./secretsManagerSecret").SecretsManagerSecret = null as any;
utilities.lazyLoad(exports, ["SecretsManagerSecret"], () => require("./secretsManagerSecret"));

export { SnsSubscriptionArgs } from "./snsSubscription";
export type SnsSubscription = import("./snsSubscription").SnsSubscription;
export const SnsSubscription: typeof import("./snsSubscription").SnsSubscription = null as any;
utilities.lazyLoad(exports, ["SnsSubscription"], () => require("./snsSubscription"));

export { SnsTopicArgs } from "./snsTopic";
export type SnsTopic = import("./snsTopic").SnsTopic;
export const SnsTopic: typeof import("./snsTopic").SnsTopic = null as any;
utilities.lazyLoad(exports, ["SnsTopic"], () => require("./snsTopic"));

export { SqsQueueArgs } from "./sqsQueue";
export type SqsQueue = import("./sqsQueue").SqsQueue;
export const SqsQueue: typeof import("./sqsQueue").SqsQueue = null as any;
utilities.lazyLoad(exports, ["SqsQueue"], () => require("./sqsQueue"));

export { SsmInstanceInformationArgs } from "./ssmInstanceInformation";
export type SsmInstanceInformation = import("./ssmInstanceInformation").SsmInstanceInformation;
export const SsmInstanceInformation: typeof import("./ssmInstanceInformation").SsmInstanceInformation = null as any;
utilities.lazyLoad(exports, ["SsmInstanceInformation"], () => require("./ssmInstanceInformation"));

export { SsmParameterArgs } from "./ssmParameter";
export type SsmParameter = import("./ssmParameter").SsmParameter;
export const SsmParameter: typeof import("./ssmParameter").SsmParameter = null as any;
utilities.lazyLoad(exports, ["SsmParameter"], () => require("./ssmParameter"));

export { SsmResourceComplianceSummaryItemArgs } from "./ssmResourceComplianceSummaryItem";
export type SsmResourceComplianceSummaryItem = import("./ssmResourceComplianceSummaryItem").SsmResourceComplianceSummaryItem;
export const SsmResourceComplianceSummaryItem: typeof import("./ssmResourceComplianceSummaryItem").SsmResourceComplianceSummaryItem = null as any;
utilities.lazyLoad(exports, ["SsmResourceComplianceSummaryItem"], () => require("./ssmResourceComplianceSummaryItem"));

export { WafWebAclSummaryArgs } from "./wafWebAclSummary";
export type WafWebAclSummary = import("./wafWebAclSummary").WafWebAclSummary;
export const WafWebAclSummary: typeof import("./wafWebAclSummary").WafWebAclSummary = null as any;
utilities.lazyLoad(exports, ["WafWebAclSummary"], () => require("./wafWebAclSummary"));

export { Wafv2LoggingConfigurationArgs } from "./wafv2LoggingConfiguration";
export type Wafv2LoggingConfiguration = import("./wafv2LoggingConfiguration").Wafv2LoggingConfiguration;
export const Wafv2LoggingConfiguration: typeof import("./wafv2LoggingConfiguration").Wafv2LoggingConfiguration = null as any;
utilities.lazyLoad(exports, ["Wafv2LoggingConfiguration"], () => require("./wafv2LoggingConfiguration"));


// Export enums:
export * from "../types/enums/awsconnector";

// Export sub-modules:
import * as v20241201 from "./v20241201";

export {
    v20241201,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:awsconnector:AccessAnalyzerAnalyzer":
                return new AccessAnalyzerAnalyzer(name, <any>undefined, { urn })
            case "azure-native:awsconnector:AcmCertificateSummary":
                return new AcmCertificateSummary(name, <any>undefined, { urn })
            case "azure-native:awsconnector:ApiGatewayRestApi":
                return new ApiGatewayRestApi(name, <any>undefined, { urn })
            case "azure-native:awsconnector:ApiGatewayStage":
                return new ApiGatewayStage(name, <any>undefined, { urn })
            case "azure-native:awsconnector:AppSyncGraphqlApi":
                return new AppSyncGraphqlApi(name, <any>undefined, { urn })
            case "azure-native:awsconnector:AutoScalingAutoScalingGroup":
                return new AutoScalingAutoScalingGroup(name, <any>undefined, { urn })
            case "azure-native:awsconnector:CloudFormationStack":
                return new CloudFormationStack(name, <any>undefined, { urn })
            case "azure-native:awsconnector:CloudFormationStackSet":
                return new CloudFormationStackSet(name, <any>undefined, { urn })
            case "azure-native:awsconnector:CloudFrontDistribution":
                return new CloudFrontDistribution(name, <any>undefined, { urn })
            case "azure-native:awsconnector:CloudTrailTrail":
                return new CloudTrailTrail(name, <any>undefined, { urn })
            case "azure-native:awsconnector:CloudWatchAlarm":
                return new CloudWatchAlarm(name, <any>undefined, { urn })
            case "azure-native:awsconnector:CodeBuildProject":
                return new CodeBuildProject(name, <any>undefined, { urn })
            case "azure-native:awsconnector:CodeBuildSourceCredentialsInfo":
                return new CodeBuildSourceCredentialsInfo(name, <any>undefined, { urn })
            case "azure-native:awsconnector:ConfigServiceConfigurationRecorder":
                return new ConfigServiceConfigurationRecorder(name, <any>undefined, { urn })
            case "azure-native:awsconnector:ConfigServiceConfigurationRecorderStatus":
                return new ConfigServiceConfigurationRecorderStatus(name, <any>undefined, { urn })
            case "azure-native:awsconnector:ConfigServiceDeliveryChannel":
                return new ConfigServiceDeliveryChannel(name, <any>undefined, { urn })
            case "azure-native:awsconnector:DatabaseMigrationServiceReplicationInstance":
                return new DatabaseMigrationServiceReplicationInstance(name, <any>undefined, { urn })
            case "azure-native:awsconnector:DaxCluster":
                return new DaxCluster(name, <any>undefined, { urn })
            case "azure-native:awsconnector:DynamoDbContinuousBackupsDescription":
                return new DynamoDbContinuousBackupsDescription(name, <any>undefined, { urn })
            case "azure-native:awsconnector:DynamoDbTable":
                return new DynamoDbTable(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2AccountAttribute":
                return new Ec2AccountAttribute(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2Address":
                return new Ec2Address(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2FlowLog":
                return new Ec2FlowLog(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2Image":
                return new Ec2Image(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2Instance":
                return new Ec2Instance(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2InstanceStatus":
                return new Ec2InstanceStatus(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2Ipam":
                return new Ec2Ipam(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2KeyPair":
                return new Ec2KeyPair(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2NetworkAcl":
                return new Ec2NetworkAcl(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2NetworkInterface":
                return new Ec2NetworkInterface(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2RouteTable":
                return new Ec2RouteTable(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2SecurityGroup":
                return new Ec2SecurityGroup(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2Snapshot":
                return new Ec2Snapshot(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2Subnet":
                return new Ec2Subnet(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2Volume":
                return new Ec2Volume(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2Vpc":
                return new Ec2Vpc(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2VpcEndpoint":
                return new Ec2VpcEndpoint(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Ec2VpcPeeringConnection":
                return new Ec2VpcPeeringConnection(name, <any>undefined, { urn })
            case "azure-native:awsconnector:EcrImageDetail":
                return new EcrImageDetail(name, <any>undefined, { urn })
            case "azure-native:awsconnector:EcrRepository":
                return new EcrRepository(name, <any>undefined, { urn })
            case "azure-native:awsconnector:EcsCluster":
                return new EcsCluster(name, <any>undefined, { urn })
            case "azure-native:awsconnector:EcsService":
                return new EcsService(name, <any>undefined, { urn })
            case "azure-native:awsconnector:EcsTaskDefinition":
                return new EcsTaskDefinition(name, <any>undefined, { urn })
            case "azure-native:awsconnector:EfsFileSystem":
                return new EfsFileSystem(name, <any>undefined, { urn })
            case "azure-native:awsconnector:EfsMountTarget":
                return new EfsMountTarget(name, <any>undefined, { urn })
            case "azure-native:awsconnector:EksCluster":
                return new EksCluster(name, <any>undefined, { urn })
            case "azure-native:awsconnector:EksNodegroup":
                return new EksNodegroup(name, <any>undefined, { urn })
            case "azure-native:awsconnector:ElasticBeanstalkApplication":
                return new ElasticBeanstalkApplication(name, <any>undefined, { urn })
            case "azure-native:awsconnector:ElasticBeanstalkConfigurationTemplate":
                return new ElasticBeanstalkConfigurationTemplate(name, <any>undefined, { urn })
            case "azure-native:awsconnector:ElasticBeanstalkEnvironment":
                return new ElasticBeanstalkEnvironment(name, <any>undefined, { urn })
            case "azure-native:awsconnector:ElasticLoadBalancingV2Listener":
                return new ElasticLoadBalancingV2Listener(name, <any>undefined, { urn })
            case "azure-native:awsconnector:ElasticLoadBalancingV2LoadBalancer":
                return new ElasticLoadBalancingV2LoadBalancer(name, <any>undefined, { urn })
            case "azure-native:awsconnector:ElasticLoadBalancingV2TargetGroup":
                return new ElasticLoadBalancingV2TargetGroup(name, <any>undefined, { urn })
            case "azure-native:awsconnector:ElasticLoadBalancingv2TargetHealthDescription":
                return new ElasticLoadBalancingv2TargetHealthDescription(name, <any>undefined, { urn })
            case "azure-native:awsconnector:EmrCluster":
                return new EmrCluster(name, <any>undefined, { urn })
            case "azure-native:awsconnector:GuardDutyDetector":
                return new GuardDutyDetector(name, <any>undefined, { urn })
            case "azure-native:awsconnector:IamAccessKeyLastUsed":
                return new IamAccessKeyLastUsed(name, <any>undefined, { urn })
            case "azure-native:awsconnector:IamAccessKeyMetadataInfo":
                return new IamAccessKeyMetadataInfo(name, <any>undefined, { urn })
            case "azure-native:awsconnector:IamGroup":
                return new IamGroup(name, <any>undefined, { urn })
            case "azure-native:awsconnector:IamInstanceProfile":
                return new IamInstanceProfile(name, <any>undefined, { urn })
            case "azure-native:awsconnector:IamMfaDevice":
                return new IamMfaDevice(name, <any>undefined, { urn })
            case "azure-native:awsconnector:IamPasswordPolicy":
                return new IamPasswordPolicy(name, <any>undefined, { urn })
            case "azure-native:awsconnector:IamPolicyVersion":
                return new IamPolicyVersion(name, <any>undefined, { urn })
            case "azure-native:awsconnector:IamRole":
                return new IamRole(name, <any>undefined, { urn })
            case "azure-native:awsconnector:IamServerCertificate":
                return new IamServerCertificate(name, <any>undefined, { urn })
            case "azure-native:awsconnector:IamVirtualMfaDevice":
                return new IamVirtualMfaDevice(name, <any>undefined, { urn })
            case "azure-native:awsconnector:KmsAlias":
                return new KmsAlias(name, <any>undefined, { urn })
            case "azure-native:awsconnector:KmsKey":
                return new KmsKey(name, <any>undefined, { urn })
            case "azure-native:awsconnector:LambdaFunction":
                return new LambdaFunction(name, <any>undefined, { urn })
            case "azure-native:awsconnector:LambdaFunctionCodeLocation":
                return new LambdaFunctionCodeLocation(name, <any>undefined, { urn })
            case "azure-native:awsconnector:LightsailBucket":
                return new LightsailBucket(name, <any>undefined, { urn })
            case "azure-native:awsconnector:LightsailInstance":
                return new LightsailInstance(name, <any>undefined, { urn })
            case "azure-native:awsconnector:LogsLogGroup":
                return new LogsLogGroup(name, <any>undefined, { urn })
            case "azure-native:awsconnector:LogsLogStream":
                return new LogsLogStream(name, <any>undefined, { urn })
            case "azure-native:awsconnector:LogsMetricFilter":
                return new LogsMetricFilter(name, <any>undefined, { urn })
            case "azure-native:awsconnector:LogsSubscriptionFilter":
                return new LogsSubscriptionFilter(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Macie2JobSummary":
                return new Macie2JobSummary(name, <any>undefined, { urn })
            case "azure-native:awsconnector:MacieAllowList":
                return new MacieAllowList(name, <any>undefined, { urn })
            case "azure-native:awsconnector:NetworkFirewallFirewall":
                return new NetworkFirewallFirewall(name, <any>undefined, { urn })
            case "azure-native:awsconnector:NetworkFirewallFirewallPolicy":
                return new NetworkFirewallFirewallPolicy(name, <any>undefined, { urn })
            case "azure-native:awsconnector:NetworkFirewallRuleGroup":
                return new NetworkFirewallRuleGroup(name, <any>undefined, { urn })
            case "azure-native:awsconnector:OpenSearchDomainStatus":
                return new OpenSearchDomainStatus(name, <any>undefined, { urn })
            case "azure-native:awsconnector:OrganizationsAccount":
                return new OrganizationsAccount(name, <any>undefined, { urn })
            case "azure-native:awsconnector:OrganizationsOrganization":
                return new OrganizationsOrganization(name, <any>undefined, { urn })
            case "azure-native:awsconnector:RdsDbCluster":
                return new RdsDbCluster(name, <any>undefined, { urn })
            case "azure-native:awsconnector:RdsDbInstance":
                return new RdsDbInstance(name, <any>undefined, { urn })
            case "azure-native:awsconnector:RdsDbSnapshot":
                return new RdsDbSnapshot(name, <any>undefined, { urn })
            case "azure-native:awsconnector:RdsDbSnapshotAttributesResult":
                return new RdsDbSnapshotAttributesResult(name, <any>undefined, { urn })
            case "azure-native:awsconnector:RdsEventSubscription":
                return new RdsEventSubscription(name, <any>undefined, { urn })
            case "azure-native:awsconnector:RdsExportTask":
                return new RdsExportTask(name, <any>undefined, { urn })
            case "azure-native:awsconnector:RedshiftCluster":
                return new RedshiftCluster(name, <any>undefined, { urn })
            case "azure-native:awsconnector:RedshiftClusterParameterGroup":
                return new RedshiftClusterParameterGroup(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Route53DomainsDomainSummary":
                return new Route53DomainsDomainSummary(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Route53HostedZone":
                return new Route53HostedZone(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Route53ResourceRecordSet":
                return new Route53ResourceRecordSet(name, <any>undefined, { urn })
            case "azure-native:awsconnector:S3AccessControlPolicy":
                return new S3AccessControlPolicy(name, <any>undefined, { urn })
            case "azure-native:awsconnector:S3AccessPoint":
                return new S3AccessPoint(name, <any>undefined, { urn })
            case "azure-native:awsconnector:S3Bucket":
                return new S3Bucket(name, <any>undefined, { urn })
            case "azure-native:awsconnector:S3BucketPolicy":
                return new S3BucketPolicy(name, <any>undefined, { urn })
            case "azure-native:awsconnector:S3ControlMultiRegionAccessPointPolicyDocument":
                return new S3ControlMultiRegionAccessPointPolicyDocument(name, <any>undefined, { urn })
            case "azure-native:awsconnector:SageMakerApp":
                return new SageMakerApp(name, <any>undefined, { urn })
            case "azure-native:awsconnector:SageMakerNotebookInstanceSummary":
                return new SageMakerNotebookInstanceSummary(name, <any>undefined, { urn })
            case "azure-native:awsconnector:SecretsManagerResourcePolicy":
                return new SecretsManagerResourcePolicy(name, <any>undefined, { urn })
            case "azure-native:awsconnector:SecretsManagerSecret":
                return new SecretsManagerSecret(name, <any>undefined, { urn })
            case "azure-native:awsconnector:SnsSubscription":
                return new SnsSubscription(name, <any>undefined, { urn })
            case "azure-native:awsconnector:SnsTopic":
                return new SnsTopic(name, <any>undefined, { urn })
            case "azure-native:awsconnector:SqsQueue":
                return new SqsQueue(name, <any>undefined, { urn })
            case "azure-native:awsconnector:SsmInstanceInformation":
                return new SsmInstanceInformation(name, <any>undefined, { urn })
            case "azure-native:awsconnector:SsmParameter":
                return new SsmParameter(name, <any>undefined, { urn })
            case "azure-native:awsconnector:SsmResourceComplianceSummaryItem":
                return new SsmResourceComplianceSummaryItem(name, <any>undefined, { urn })
            case "azure-native:awsconnector:WafWebAclSummary":
                return new WafWebAclSummary(name, <any>undefined, { urn })
            case "azure-native:awsconnector:Wafv2LoggingConfiguration":
                return new Wafv2LoggingConfiguration(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "awsconnector", _module)
