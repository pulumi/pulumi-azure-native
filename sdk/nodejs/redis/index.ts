// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessPolicyArgs } from "./accessPolicy";
export type AccessPolicy = import("./accessPolicy").AccessPolicy;
export const AccessPolicy: typeof import("./accessPolicy").AccessPolicy = null as any;
utilities.lazyLoad(exports, ["AccessPolicy"], () => require("./accessPolicy"));

export { AccessPolicyAssignmentArgs } from "./accessPolicyAssignment";
export type AccessPolicyAssignment = import("./accessPolicyAssignment").AccessPolicyAssignment;
export const AccessPolicyAssignment: typeof import("./accessPolicyAssignment").AccessPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["AccessPolicyAssignment"], () => require("./accessPolicyAssignment"));

export { FirewallRuleArgs } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GetAccessPolicyArgs, GetAccessPolicyResult, GetAccessPolicyOutputArgs } from "./getAccessPolicy";
export const getAccessPolicy: typeof import("./getAccessPolicy").getAccessPolicy = null as any;
export const getAccessPolicyOutput: typeof import("./getAccessPolicy").getAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicy","getAccessPolicyOutput"], () => require("./getAccessPolicy"));

export { GetAccessPolicyAssignmentArgs, GetAccessPolicyAssignmentResult, GetAccessPolicyAssignmentOutputArgs } from "./getAccessPolicyAssignment";
export const getAccessPolicyAssignment: typeof import("./getAccessPolicyAssignment").getAccessPolicyAssignment = null as any;
export const getAccessPolicyAssignmentOutput: typeof import("./getAccessPolicyAssignment").getAccessPolicyAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicyAssignment","getAccessPolicyAssignmentOutput"], () => require("./getAccessPolicyAssignment"));

export { GetFirewallRuleArgs, GetFirewallRuleResult, GetFirewallRuleOutputArgs } from "./getFirewallRule";
export const getFirewallRule: typeof import("./getFirewallRule").getFirewallRule = null as any;
export const getFirewallRuleOutput: typeof import("./getFirewallRule").getFirewallRuleOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallRule","getFirewallRuleOutput"], () => require("./getFirewallRule"));

export { GetLinkedServerArgs, GetLinkedServerResult, GetLinkedServerOutputArgs } from "./getLinkedServer";
export const getLinkedServer: typeof import("./getLinkedServer").getLinkedServer = null as any;
export const getLinkedServerOutput: typeof import("./getLinkedServer").getLinkedServerOutput = null as any;
utilities.lazyLoad(exports, ["getLinkedServer","getLinkedServerOutput"], () => require("./getLinkedServer"));

export { GetPatchScheduleArgs, GetPatchScheduleResult, GetPatchScheduleOutputArgs } from "./getPatchSchedule";
export const getPatchSchedule: typeof import("./getPatchSchedule").getPatchSchedule = null as any;
export const getPatchScheduleOutput: typeof import("./getPatchSchedule").getPatchScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getPatchSchedule","getPatchScheduleOutput"], () => require("./getPatchSchedule"));

export { GetPrivateEndpointConnectionArgs, GetPrivateEndpointConnectionResult, GetPrivateEndpointConnectionOutputArgs } from "./getPrivateEndpointConnection";
export const getPrivateEndpointConnection: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnection = null as any;
export const getPrivateEndpointConnectionOutput: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateEndpointConnection","getPrivateEndpointConnectionOutput"], () => require("./getPrivateEndpointConnection"));

export { GetRedisArgs, GetRedisResult, GetRedisOutputArgs } from "./getRedis";
export const getRedis: typeof import("./getRedis").getRedis = null as any;
export const getRedisOutput: typeof import("./getRedis").getRedisOutput = null as any;
utilities.lazyLoad(exports, ["getRedis","getRedisOutput"], () => require("./getRedis"));

export { GetRedisFirewallRuleArgs, GetRedisFirewallRuleResult, GetRedisFirewallRuleOutputArgs } from "./getRedisFirewallRule";
export const getRedisFirewallRule: typeof import("./getRedisFirewallRule").getRedisFirewallRule = null as any;
export const getRedisFirewallRuleOutput: typeof import("./getRedisFirewallRule").getRedisFirewallRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRedisFirewallRule","getRedisFirewallRuleOutput"], () => require("./getRedisFirewallRule"));

export { GetRedisLinkedServerArgs, GetRedisLinkedServerResult, GetRedisLinkedServerOutputArgs } from "./getRedisLinkedServer";
export const getRedisLinkedServer: typeof import("./getRedisLinkedServer").getRedisLinkedServer = null as any;
export const getRedisLinkedServerOutput: typeof import("./getRedisLinkedServer").getRedisLinkedServerOutput = null as any;
utilities.lazyLoad(exports, ["getRedisLinkedServer","getRedisLinkedServerOutput"], () => require("./getRedisLinkedServer"));

export { LinkedServerArgs } from "./linkedServer";
export type LinkedServer = import("./linkedServer").LinkedServer;
export const LinkedServer: typeof import("./linkedServer").LinkedServer = null as any;
utilities.lazyLoad(exports, ["LinkedServer"], () => require("./linkedServer"));

export { ListRedisKeysArgs, ListRedisKeysResult, ListRedisKeysOutputArgs } from "./listRedisKeys";
export const listRedisKeys: typeof import("./listRedisKeys").listRedisKeys = null as any;
export const listRedisKeysOutput: typeof import("./listRedisKeys").listRedisKeysOutput = null as any;
utilities.lazyLoad(exports, ["listRedisKeys","listRedisKeysOutput"], () => require("./listRedisKeys"));

export { PatchScheduleArgs } from "./patchSchedule";
export type PatchSchedule = import("./patchSchedule").PatchSchedule;
export const PatchSchedule: typeof import("./patchSchedule").PatchSchedule = null as any;
utilities.lazyLoad(exports, ["PatchSchedule"], () => require("./patchSchedule"));

export { PrivateEndpointConnectionArgs } from "./privateEndpointConnection";
export type PrivateEndpointConnection = import("./privateEndpointConnection").PrivateEndpointConnection;
export const PrivateEndpointConnection: typeof import("./privateEndpointConnection").PrivateEndpointConnection = null as any;
utilities.lazyLoad(exports, ["PrivateEndpointConnection"], () => require("./privateEndpointConnection"));

export { RedisArgs } from "./redis";
export type Redis = import("./redis").Redis;
export const Redis: typeof import("./redis").Redis = null as any;
utilities.lazyLoad(exports, ["Redis"], () => require("./redis"));

export { RedisFirewallRuleArgs } from "./redisFirewallRule";
export type RedisFirewallRule = import("./redisFirewallRule").RedisFirewallRule;
export const RedisFirewallRule: typeof import("./redisFirewallRule").RedisFirewallRule = null as any;
utilities.lazyLoad(exports, ["RedisFirewallRule"], () => require("./redisFirewallRule"));

export { RedisLinkedServerArgs } from "./redisLinkedServer";
export type RedisLinkedServer = import("./redisLinkedServer").RedisLinkedServer;
export const RedisLinkedServer: typeof import("./redisLinkedServer").RedisLinkedServer = null as any;
utilities.lazyLoad(exports, ["RedisLinkedServer"], () => require("./redisLinkedServer"));


// Export enums:
export * from "../types/enums/redis";

// Export sub-modules:
import * as v20150801 from "./v20150801";
import * as v20160401 from "./v20160401";
import * as v20170201 from "./v20170201";
import * as v20190701 from "./v20190701";
import * as v20200601 from "./v20200601";
import * as v20241101 from "./v20241101";

export {
    v20150801,
    v20160401,
    v20170201,
    v20190701,
    v20200601,
    v20241101,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:redis:AccessPolicy":
                return new AccessPolicy(name, <any>undefined, { urn })
            case "azure-native:redis:AccessPolicyAssignment":
                return new AccessPolicyAssignment(name, <any>undefined, { urn })
            case "azure-native:redis:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "azure-native:redis:LinkedServer":
                return new LinkedServer(name, <any>undefined, { urn })
            case "azure-native:redis:PatchSchedule":
                return new PatchSchedule(name, <any>undefined, { urn })
            case "azure-native:redis:PrivateEndpointConnection":
                return new PrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:redis:Redis":
                return new Redis(name, <any>undefined, { urn })
            case "azure-native:redis:RedisFirewallRule":
                return new RedisFirewallRule(name, <any>undefined, { urn })
            case "azure-native:redis:RedisLinkedServer":
                return new RedisLinkedServer(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "redis", _module)
