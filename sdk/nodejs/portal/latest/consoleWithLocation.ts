// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Cloud shell console
 * Latest API Version: 2018-10-01.
 *
 * @deprecated The 'latest' version is deprecated. Please migrate to the resource in the top-level module: 'azure-native:portal:ConsoleWithLocation'.
 */
export class ConsoleWithLocation extends pulumi.CustomResource {
    /**
     * Get an existing ConsoleWithLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ConsoleWithLocation {
        pulumi.log.warn("ConsoleWithLocation is deprecated: The 'latest' version is deprecated. Please migrate to the resource in the top-level module: 'azure-native:portal:ConsoleWithLocation'.")
        return new ConsoleWithLocation(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:portal/latest:ConsoleWithLocation';

    /**
     * Returns true if the given object is an instance of ConsoleWithLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsoleWithLocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsoleWithLocation.__pulumiType;
    }

    /**
     * Cloud shell console properties.
     */
    public /*out*/ readonly properties!: pulumi.Output<outputs.portal.latest.ConsolePropertiesResponse>;

    /**
     * Create a ConsoleWithLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated The 'latest' version is deprecated. Please migrate to the resource in the top-level module: 'azure-native:portal:ConsoleWithLocation'. */
    constructor(name: string, args: ConsoleWithLocationArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("ConsoleWithLocation is deprecated: The 'latest' version is deprecated. Please migrate to the resource in the top-level module: 'azure-native:portal:ConsoleWithLocation'.")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            inputs["consoleName"] = args ? args.consoleName : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["properties"] = undefined /*out*/;
        } else {
            inputs["properties"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:portal/latest:ConsoleWithLocation" }, { type: "azure-native:portal:ConsoleWithLocation" }, { type: "azure-nextgen:portal:ConsoleWithLocation" }, { type: "azure-native:portal/v20181001:ConsoleWithLocation" }, { type: "azure-nextgen:portal/v20181001:ConsoleWithLocation" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ConsoleWithLocation.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a ConsoleWithLocation resource.
 */
export interface ConsoleWithLocationArgs {
    /**
     * The name of the console
     */
    readonly consoleName?: pulumi.Input<string>;
    /**
     * The provider location
     */
    readonly location: pulumi.Input<string>;
}
