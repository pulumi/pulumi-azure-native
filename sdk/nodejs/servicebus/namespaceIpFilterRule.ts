// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Single item in a List or Get IpFilterRules operation
 * API Version: 2018-01-01-preview.
 */
export class NamespaceIpFilterRule extends pulumi.CustomResource {
    /**
     * Get an existing NamespaceIpFilterRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): NamespaceIpFilterRule {
        return new NamespaceIpFilterRule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:servicebus:NamespaceIpFilterRule';

    /**
     * Returns true if the given object is an instance of NamespaceIpFilterRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NamespaceIpFilterRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NamespaceIpFilterRule.__pulumiType;
    }

    /**
     * The IP Filter Action
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * IP Filter name
     */
    public readonly filterName!: pulumi.Output<string | undefined>;
    /**
     * IP Mask
     */
    public readonly ipMask!: pulumi.Output<string | undefined>;
    /**
     * Resource name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Resource type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a NamespaceIpFilterRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceIpFilterRuleArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if ((!args || args.namespaceName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["action"] = args ? args.action : undefined;
            inputs["filterName"] = args ? args.filterName : undefined;
            inputs["ipFilterRuleName"] = args ? args.ipFilterRuleName : undefined;
            inputs["ipMask"] = args ? args.ipMask : undefined;
            inputs["namespaceName"] = args ? args.namespaceName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["action"] = undefined /*out*/;
            inputs["filterName"] = undefined /*out*/;
            inputs["ipMask"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:servicebus/v20180101preview:NamespaceIpFilterRule" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(NamespaceIpFilterRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a NamespaceIpFilterRule resource.
 */
export interface NamespaceIpFilterRuleArgs {
    /**
     * The IP Filter Action
     */
    readonly action?: pulumi.Input<string | enums.servicebus.IPAction>;
    /**
     * IP Filter name
     */
    readonly filterName?: pulumi.Input<string>;
    /**
     * The IP Filter Rule name.
     */
    readonly ipFilterRuleName?: pulumi.Input<string>;
    /**
     * IP Mask
     */
    readonly ipMask?: pulumi.Input<string>;
    /**
     * The namespace name
     */
    readonly namespaceName: pulumi.Input<string>;
    /**
     * Name of the Resource group within the Azure subscription.
     */
    readonly resourceGroupName: pulumi.Input<string>;
}
