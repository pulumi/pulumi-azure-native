// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Single item in List or Get Migration Config operation
 */
export class MigrationConfig extends pulumi.CustomResource {
    /**
     * Get an existing MigrationConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MigrationConfig {
        return new MigrationConfig(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:servicebus/v20170401:MigrationConfig';

    /**
     * Returns true if the given object is an instance of MigrationConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MigrationConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MigrationConfig.__pulumiType;
    }

    /**
     * State in which Standard to Premium Migration is, possible values : Unknown, Reverting, Completing, Initiating, Syncing, Active
     */
    public /*out*/ readonly migrationState!: pulumi.Output<string>;
    /**
     * Resource name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Number of entities pending to be replicated.
     */
    public /*out*/ readonly pendingReplicationOperationsCount!: pulumi.Output<number>;
    /**
     * Name to access Standard Namespace after migration
     */
    public readonly postMigrationName!: pulumi.Output<string>;
    /**
     * Provisioning state of Migration Configuration 
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Existing premium Namespace ARM Id name which has no entities, will be used for migration
     */
    public readonly targetNamespace!: pulumi.Output<string>;
    /**
     * Resource type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a MigrationConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MigrationConfigArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.configName === undefined) {
                throw new Error("Missing required property 'configName'");
            }
            if (!args || args.namespaceName === undefined) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if (!args || args.postMigrationName === undefined) {
                throw new Error("Missing required property 'postMigrationName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.targetNamespace === undefined) {
                throw new Error("Missing required property 'targetNamespace'");
            }
            inputs["configName"] = args ? args.configName : undefined;
            inputs["namespaceName"] = args ? args.namespaceName : undefined;
            inputs["postMigrationName"] = args ? args.postMigrationName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["targetNamespace"] = args ? args.targetNamespace : undefined;
            inputs["migrationState"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["pendingReplicationOperationsCount"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["migrationState"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["pendingReplicationOperationsCount"] = undefined /*out*/;
            inputs["postMigrationName"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["targetNamespace"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:servicebus/latest:MigrationConfig" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(MigrationConfig.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a MigrationConfig resource.
 */
export interface MigrationConfigArgs {
    /**
     * The configuration name. Should always be "$default".
     */
    readonly configName: pulumi.Input<string>;
    /**
     * The namespace name
     */
    readonly namespaceName: pulumi.Input<string>;
    /**
     * Name to access Standard Namespace after migration
     */
    readonly postMigrationName: pulumi.Input<string>;
    /**
     * Name of the Resource group within the Azure subscription.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * Existing premium Namespace ARM Id name which has no entities, will be used for migration
     */
    readonly targetNamespace: pulumi.Input<string>;
}
