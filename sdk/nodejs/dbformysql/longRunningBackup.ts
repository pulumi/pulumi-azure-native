// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Server backup properties
 *
 * Uses Azure REST API version 2025-06-01-preview.
 */
export class LongRunningBackup extends pulumi.CustomResource {
    /**
     * Get an existing LongRunningBackup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LongRunningBackup {
        return new LongRunningBackup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:dbformysql:LongRunningBackup';

    /**
     * Returns true if the given object is an instance of LongRunningBackup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LongRunningBackup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LongRunningBackup.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    public /*out*/ readonly azureApiVersion!: pulumi.Output<string>;
    /**
     * Backup name
     */
    public readonly backupNameV2!: pulumi.Output<string | undefined>;
    public readonly backupType!: pulumi.Output<string | undefined>;
    /**
     * Backup completed time (ISO8601 format).
     */
    public readonly completedTime!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The provisioning state of backup resource.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Backup source
     */
    public readonly source!: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.dbformysql.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a LongRunningBackup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LongRunningBackupArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serverName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverName'");
            }
            resourceInputs["backupName"] = args ? args.backupName : undefined;
            resourceInputs["backupNameV2"] = args ? args.backupNameV2 : undefined;
            resourceInputs["backupType"] = args ? args.backupType : undefined;
            resourceInputs["completedTime"] = args ? args.completedTime : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["backupNameV2"] = undefined /*out*/;
            resourceInputs["backupType"] = undefined /*out*/;
            resourceInputs["completedTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:dbformysql/v20250601preview:LongRunningBackup" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(LongRunningBackup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LongRunningBackup resource.
 */
export interface LongRunningBackupArgs {
    /**
     * The name of the backup.
     */
    backupName?: pulumi.Input<string>;
    /**
     * Backup name
     */
    backupNameV2?: pulumi.Input<string>;
    backupType?: pulumi.Input<string | enums.dbformysql.BackupType>;
    /**
     * Backup completed time (ISO8601 format).
     */
    completedTime?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the server.
     */
    serverName: pulumi.Input<string>;
    /**
     * Backup source
     */
    source?: pulumi.Input<string>;
}
