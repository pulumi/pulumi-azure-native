// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The configuration settings of the Allowed Audiences validation flow.
 */
export interface AllowedAudiencesValidationResponse {
    /**
     * The configuration settings of the allowed list of audiences from which to validate the JWT token.
     */
    allowedAudiences?: string[];
}

/**
 * Information about the formal API definition for the app.
 */
export interface ApiDefinitionInfoResponse {
    /**
     * The URL of the API definition.
     */
    url?: string;
}

/**
 * Azure API management (APIM) configuration linked to the app.
 */
export interface ApiManagementConfigResponse {
    /**
     * APIM-Api Identifier.
     */
    id?: string;
}

/**
 * The configuration settings of the app registration for providers that have app ids and app secrets
 */
export interface AppRegistrationResponse {
    /**
     * The App ID of the app used for login.
     */
    appId?: string;
    /**
     * The app setting name that contains the app secret.
     */
    appSecretSettingName?: string;
}

/**
 * The configuration settings of the registration for the Apple provider
 */
export interface AppleRegistrationResponse {
    /**
     * The Client ID of the app used for login.
     */
    clientId?: string;
    /**
     * The app setting name that contains the client secret.
     */
    clientSecretSettingName?: string;
}

/**
 * The configuration settings of the Apple provider.
 */
export interface AppleResponse {
    /**
     * <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
     */
    enabled?: boolean;
    /**
     * The configuration settings of the login flow.
     */
    login?: outputs.web.v20201201.LoginScopesResponse;
    /**
     * The configuration settings of the Apple registration.
     */
    registration?: outputs.web.v20201201.AppleRegistrationResponse;
}

/**
 * Application logs configuration.
 */
export interface ApplicationLogsConfigResponse {
    /**
     * Application logs to blob storage configuration.
     */
    azureBlobStorage?: outputs.web.v20201201.AzureBlobStorageApplicationLogsConfigResponse;
    /**
     * Application logs to azure table storage configuration.
     */
    azureTableStorage?: outputs.web.v20201201.AzureTableStorageApplicationLogsConfigResponse;
    /**
     * Application logs to file system configuration.
     */
    fileSystem?: outputs.web.v20201201.FileSystemApplicationLogsConfigResponse;
}
/**
 * applicationLogsConfigResponseProvideDefaults sets the appropriate defaults for ApplicationLogsConfigResponse
 */
export function applicationLogsConfigResponseProvideDefaults(val: ApplicationLogsConfigResponse): ApplicationLogsConfigResponse {
    return {
        ...val,
        fileSystem: (val.fileSystem ? outputs.web.v20201201.fileSystemApplicationLogsConfigResponseProvideDefaults(val.fileSystem) : undefined),
    };
}

/**
 * A wrapper for an ARM resource id
 */
export interface ArmIdWrapperResponse {
    id: string;
}

/**
 * The plan object in Azure Resource Manager, represents a marketplace plan.
 */
export interface ArmPlanResponse {
    /**
     * The name.
     */
    name?: string;
    /**
     * The product.
     */
    product?: string;
    /**
     * The promotion code.
     */
    promotionCode?: string;
    /**
     * The publisher.
     */
    publisher?: string;
    /**
     * Version of product.
     */
    version?: string;
}

/**
 * The configuration settings of the platform of App Service Authentication/Authorization.
 */
export interface AuthPlatformResponse {
    /**
     * The path of the config file containing auth settings if they come from a file.
     * If the path is relative, base will the site's root directory.
     */
    configFilePath?: string;
    /**
     * <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
     */
    enabled?: boolean;
    /**
     * The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
     * The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
     */
    runtimeVersion?: string;
}

/**
 * Actions which to take by the auto-heal module when a rule is triggered.
 */
export interface AutoHealActionsResponse {
    /**
     * Predefined action to be taken.
     */
    actionType?: string;
    /**
     * Custom action to be taken.
     */
    customAction?: outputs.web.v20201201.AutoHealCustomActionResponse;
    /**
     * Minimum time the process must execute
     * before taking the action
     */
    minProcessExecutionTime?: string;
}

/**
 * Custom action to be executed
 * when an auto heal rule is triggered.
 */
export interface AutoHealCustomActionResponse {
    /**
     * Executable to be run.
     */
    exe?: string;
    /**
     * Parameters for the executable.
     */
    parameters?: string;
}

/**
 * Rules that can be defined for auto-heal.
 */
export interface AutoHealRulesResponse {
    /**
     * Actions to be executed when a rule is triggered.
     */
    actions?: outputs.web.v20201201.AutoHealActionsResponse;
    /**
     * Conditions that describe when to execute the auto-heal actions.
     */
    triggers?: outputs.web.v20201201.AutoHealTriggersResponse;
}

/**
 * Triggers for auto-heal.
 */
export interface AutoHealTriggersResponse {
    /**
     * A rule based on private bytes.
     */
    privateBytesInKB?: number;
    /**
     * A rule based on total requests.
     */
    requests?: outputs.web.v20201201.RequestsBasedTriggerResponse;
    /**
     * A rule based on request execution time.
     */
    slowRequests?: outputs.web.v20201201.SlowRequestsBasedTriggerResponse;
    /**
     * A rule based on multiple Slow Requests Rule with path
     */
    slowRequestsWithPath?: outputs.web.v20201201.SlowRequestsBasedTriggerResponse[];
    /**
     * A rule based on status codes.
     */
    statusCodes?: outputs.web.v20201201.StatusCodesBasedTriggerResponse[];
    /**
     * A rule based on status codes ranges.
     */
    statusCodesRange?: outputs.web.v20201201.StatusCodesRangeBasedTriggerResponse[];
}

/**
 * The configuration settings of the Azure Active Directory login flow.
 */
export interface AzureActiveDirectoryLoginResponse {
    /**
     * <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
     */
    disableWWWAuthenticate?: boolean;
    /**
     * Login parameters to send to the OpenID Connect authorization endpoint when
     * a user logs in. Each parameter must be in the form "key=value".
     */
    loginParameters?: string[];
}

/**
 * The configuration settings of the Azure Active Directory app registration.
 */
export interface AzureActiveDirectoryRegistrationResponse {
    /**
     * The Client ID of this relying party application, known as the client_id.
     * This setting is required for enabling OpenID Connection authentication with Azure Active Directory or 
     * other 3rd party OpenID Connect providers.
     * More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
     */
    clientId?: string;
    /**
     * An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
     * a replacement for the Client Secret Certificate Thumbprint. It is also optional.
     */
    clientSecretCertificateIssuer?: string;
    /**
     * An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
     * a replacement for the Client Secret Certificate Thumbprint. It is also optional.
     */
    clientSecretCertificateSubjectAlternativeName?: string;
    /**
     * An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
     * a replacement for the Client Secret. It is also optional.
     */
    clientSecretCertificateThumbprint?: string;
    /**
     * The app setting name that contains the client secret of the relying party application.
     */
    clientSecretSettingName?: string;
    /**
     * The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
     * When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
     * This URI is a case-sensitive identifier for the token issuer.
     * More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
     */
    openIdIssuer?: string;
}

/**
 * The configuration settings of the Azure Active directory provider.
 */
export interface AzureActiveDirectoryResponse {
    /**
     * <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
     */
    enabled?: boolean;
    /**
     * Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
     * This is an internal flag primarily intended to support the Azure Management Portal. Users should not
     * read or write to this property.
     */
    isAutoProvisioned?: boolean;
    /**
     * The configuration settings of the Azure Active Directory login flow.
     */
    login?: outputs.web.v20201201.AzureActiveDirectoryLoginResponse;
    /**
     * The configuration settings of the Azure Active Directory app registration.
     */
    registration?: outputs.web.v20201201.AzureActiveDirectoryRegistrationResponse;
    /**
     * The configuration settings of the Azure Active Directory token validation flow.
     */
    validation?: outputs.web.v20201201.AzureActiveDirectoryValidationResponse;
}

/**
 * The configuration settings of the Azure Active Directory token validation flow.
 */
export interface AzureActiveDirectoryValidationResponse {
    /**
     * The list of audiences that can make successful authentication/authorization requests.
     */
    allowedAudiences?: string[];
    /**
     * The configuration settings of the checks that should be made while validating the JWT Claims.
     */
    jwtClaimChecks?: outputs.web.v20201201.JwtClaimChecksResponse;
}

/**
 * Application logs azure blob storage configuration.
 */
export interface AzureBlobStorageApplicationLogsConfigResponse {
    /**
     * Log level.
     */
    level?: string;
    /**
     * Retention in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     */
    retentionInDays?: number;
    /**
     * SAS url to a azure blob container with read/write/list/delete permissions.
     */
    sasUrl?: string;
}

/**
 * Http logs to azure blob storage configuration.
 */
export interface AzureBlobStorageHttpLogsConfigResponse {
    /**
     * True if configuration is enabled, false if it is disabled and null if configuration is not set.
     */
    enabled?: boolean;
    /**
     * Retention in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     */
    retentionInDays?: number;
    /**
     * SAS url to a azure blob container with read/write/list/delete permissions.
     */
    sasUrl?: string;
}

/**
 * The configuration settings of the registration for the Azure Static Web Apps provider
 */
export interface AzureStaticWebAppsRegistrationResponse {
    /**
     * The Client ID of the app used for login.
     */
    clientId?: string;
}

/**
 * The configuration settings of the Azure Static Web Apps provider.
 */
export interface AzureStaticWebAppsResponse {
    /**
     * <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
     */
    enabled?: boolean;
    /**
     * The configuration settings of the Azure Static Web Apps registration.
     */
    registration?: outputs.web.v20201201.AzureStaticWebAppsRegistrationResponse;
}

/**
 * Azure Files or Blob Storage access information value for dictionary storage.
 */
export interface AzureStorageInfoValueResponse {
    /**
     * Access key for the storage account.
     */
    accessKey?: string;
    /**
     * Name of the storage account.
     */
    accountName?: string;
    /**
     * Path to mount the storage within the site's runtime environment.
     */
    mountPath?: string;
    /**
     * Name of the file share (container name, for Blob storage).
     */
    shareName?: string;
    /**
     * State of the storage account.
     */
    state: string;
    /**
     * Type of storage.
     */
    type?: string;
}

/**
 * Application logs to Azure table storage configuration.
 */
export interface AzureTableStorageApplicationLogsConfigResponse {
    /**
     * Log level.
     */
    level?: string;
    /**
     * SAS URL to an Azure table with add/query/delete permissions.
     */
    sasUrl: string;
}

/**
 * Backup description.
 */
export interface BackupItemResponse {
    /**
     * Id of the backup.
     */
    backupId: number;
    /**
     * Name of the blob which contains data for this backup.
     */
    blobName: string;
    /**
     * Unique correlation identifier. Please use this along with the timestamp while communicating with Azure support.
     */
    correlationId: string;
    /**
     * Timestamp of the backup creation.
     */
    created: string;
    /**
     * List of databases included in the backup.
     */
    databases: outputs.web.v20201201.DatabaseBackupSettingResponse[];
    /**
     * Timestamp when this backup finished.
     */
    finishedTimeStamp: string;
    /**
     * Resource Id.
     */
    id: string;
    /**
     * Kind of resource.
     */
    kind?: string;
    /**
     * Timestamp of a last restore operation which used this backup.
     */
    lastRestoreTimeStamp: string;
    /**
     * Details regarding this backup. Might contain an error message.
     */
    log: string;
    /**
     * Resource Name.
     */
    name: string;
    /**
     * True if this backup has been created due to a schedule being triggered.
     */
    scheduled: boolean;
    /**
     * Size of the backup in bytes.
     */
    sizeInBytes: number;
    /**
     * Backup status.
     */
    status: string;
    /**
     * SAS URL for the storage account container which contains this backup.
     */
    storageAccountUrl: string;
    /**
     * Resource type.
     */
    type: string;
    /**
     * Size of the original web app which has been backed up.
     */
    websiteSizeInBytes: number;
}

/**
 * Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
 */
export interface BackupScheduleResponse {
    /**
     * How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
     */
    frequencyInterval: number;
    /**
     * The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
     */
    frequencyUnit: string;
    /**
     * True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
     */
    keepAtLeastOneBackup: boolean;
    /**
     * Last time when this schedule was triggered.
     */
    lastExecutionTime: string;
    /**
     * After how many days backups should be deleted.
     */
    retentionPeriodInDays: number;
    /**
     * When the schedule should start working.
     */
    startTime?: string;
}
/**
 * backupScheduleResponseProvideDefaults sets the appropriate defaults for BackupScheduleResponse
 */
export function backupScheduleResponseProvideDefaults(val: BackupScheduleResponse): BackupScheduleResponse {
    return {
        ...val,
        frequencyInterval: (val.frequencyInterval) ?? 7,
        frequencyUnit: (val.frequencyUnit) ?? "Day",
        keepAtLeastOneBackup: (val.keepAtLeastOneBackup) ?? true,
        retentionPeriodInDays: (val.retentionPeriodInDays) ?? 30,
    };
}

/**
 * The configuration settings of the storage of the tokens if blob storage is used.
 */
export interface BlobStorageTokenStoreResponse {
    /**
     * The name of the app setting containing the SAS URL of the blob storage containing the tokens.
     */
    sasUrlSettingName?: string;
}

/**
 * Describes the capabilities/features allowed for a specific SKU.
 */
export interface CapabilityResponse {
    /**
     * Name of the SKU capability.
     */
    name?: string;
    /**
     * Reason of the SKU capability.
     */
    reason?: string;
    /**
     * Value of the SKU capability.
     */
    value?: string;
}

/**
 * The configuration settings of the app registration for providers that have client ids and client secrets
 */
export interface ClientRegistrationResponse {
    /**
     * The Client ID of the app used for login.
     */
    clientId?: string;
    /**
     * The app setting name that contains the client secret.
     */
    clientSecretSettingName?: string;
}

/**
 * Database connection string information.
 */
export interface ConnStringInfoResponse {
    /**
     * Connection string value.
     */
    connectionString?: string;
    /**
     * Name of connection string.
     */
    name?: string;
    /**
     * Type of database.
     */
    type?: string;
}

/**
 * Database connection string value to type pair.
 */
export interface ConnStringValueTypePairResponse {
    /**
     * Type of database.
     */
    type: string;
    /**
     * Value of pair.
     */
    value: string;
}

/**
 * The configuration settings of the session cookie's expiration.
 */
export interface CookieExpirationResponse {
    /**
     * The convention used when determining the session cookie's expiration.
     */
    convention?: string;
    /**
     * The time after the request is made when the session cookie should expire.
     */
    timeToExpiration?: string;
}

/**
 * Cross-Origin Resource Sharing (CORS) settings for the app.
 */
export interface CorsSettingsResponse {
    /**
     * Gets or sets the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     */
    allowedOrigins?: string[];
    /**
     * Gets or sets whether CORS requests with credentials are allowed. See 
     * https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials
     * for more details.
     */
    supportCredentials?: boolean;
}

/**
 * The configuration settings of the custom Open ID Connect provider.
 */
export interface CustomOpenIdConnectProviderResponse {
    /**
     * <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>.
     */
    enabled?: boolean;
    /**
     * The configuration settings of the login flow of the custom Open ID Connect provider.
     */
    login?: outputs.web.v20201201.OpenIdConnectLoginResponse;
    /**
     * The configuration settings of the app registration for the custom Open ID Connect provider.
     */
    registration?: outputs.web.v20201201.OpenIdConnectRegistrationResponse;
}

/**
 * Database backup settings.
 */
export interface DatabaseBackupSettingResponse {
    /**
     * Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.
     */
    connectionString?: string;
    /**
     * Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.
     * This is used during restore with overwrite connection strings options.
     */
    connectionStringName?: string;
    /**
     * Database type (e.g. SqlAzure / MySql).
     */
    databaseType: string;
    name?: string;
}

/**
 * Enabled configuration.
 */
export interface EnabledConfigResponse {
    /**
     * True if configuration is enabled, false if it is disabled and null if configuration is not set.
     */
    enabled?: boolean;
}

/**
 * Body of the error response returned from the API.
 */
export interface ErrorEntityResponse {
    /**
     * Basic error code.
     */
    code?: string;
    /**
     * Type of error.
     */
    extendedCode?: string;
    /**
     * Inner errors.
     */
    innerErrors?: outputs.web.v20201201.ErrorEntityResponse[];
    /**
     * Any details of the error.
     */
    message?: string;
    /**
     * Message template.
     */
    messageTemplate?: string;
    /**
     * Parameters for the template.
     */
    parameters?: string[];
}

/**
 * Routing rules in production experiments.
 */
export interface ExperimentsResponse {
    /**
     * List of ramp-up rules.
     */
    rampUpRules?: outputs.web.v20201201.RampUpRuleResponse[];
}

/**
 * The configuration settings of the Facebook provider.
 */
export interface FacebookResponse {
    /**
     * <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
     */
    enabled?: boolean;
    /**
     * The version of the Facebook api to be used while logging in.
     */
    graphApiVersion?: string;
    /**
     * The configuration settings of the login flow.
     */
    login?: outputs.web.v20201201.LoginScopesResponse;
    /**
     * The configuration settings of the app registration for the Facebook provider.
     */
    registration?: outputs.web.v20201201.AppRegistrationResponse;
}

/**
 * Application logs to file system configuration.
 */
export interface FileSystemApplicationLogsConfigResponse {
    /**
     * Log level.
     */
    level?: string;
}
/**
 * fileSystemApplicationLogsConfigResponseProvideDefaults sets the appropriate defaults for FileSystemApplicationLogsConfigResponse
 */
export function fileSystemApplicationLogsConfigResponseProvideDefaults(val: FileSystemApplicationLogsConfigResponse): FileSystemApplicationLogsConfigResponse {
    return {
        ...val,
        level: (val.level) ?? "Off",
    };
}

/**
 * Http logs to file system configuration.
 */
export interface FileSystemHttpLogsConfigResponse {
    /**
     * True if configuration is enabled, false if it is disabled and null if configuration is not set.
     */
    enabled?: boolean;
    /**
     * Retention in days.
     * Remove files older than X days.
     * 0 or lower means no retention.
     */
    retentionInDays?: number;
    /**
     * Maximum size in megabytes that http log files can use.
     * When reached old log files will be removed to make space for new ones.
     * Value can range between 25 and 100.
     */
    retentionInMb?: number;
}

/**
 * The configuration settings of the storage of the tokens if a file system is used.
 */
export interface FileSystemTokenStoreResponse {
    /**
     * The directory in which the tokens will be stored.
     */
    directory?: string;
}

/**
 * The configuration settings of a forward proxy used to make the requests.
 */
export interface ForwardProxyResponse {
    /**
     * The convention used to determine the url of the request made.
     */
    convention?: string;
    /**
     * The name of the header containing the host of the request.
     */
    customHostHeaderName?: string;
    /**
     * The name of the header containing the scheme of the request.
     */
    customProtoHeaderName?: string;
}

/**
 * The GitHub action code configuration.
 */
export interface GitHubActionCodeConfigurationResponse {
    /**
     * Runtime stack is used to determine the workflow file content for code base apps.
     */
    runtimeStack?: string;
    /**
     * Runtime version is used to determine what build version to set in the workflow file.
     */
    runtimeVersion?: string;
}

/**
 * The GitHub action configuration.
 */
export interface GitHubActionConfigurationResponse {
    /**
     * GitHub Action code configuration.
     */
    codeConfiguration?: outputs.web.v20201201.GitHubActionCodeConfigurationResponse;
    /**
     * GitHub Action container configuration.
     */
    containerConfiguration?: outputs.web.v20201201.GitHubActionContainerConfigurationResponse;
    /**
     * Workflow option to determine whether the workflow file should be generated and written to the repository.
     */
    generateWorkflowFile?: boolean;
    /**
     * This will help determine the workflow configuration to select.
     */
    isLinux?: boolean;
}

/**
 * The GitHub action container configuration.
 */
export interface GitHubActionContainerConfigurationResponse {
    /**
     * The image name for the build.
     */
    imageName?: string;
    /**
     * The password used to upload the image to the container registry.
     */
    password?: string;
    /**
     * The server URL for the container registry where the build will be hosted.
     */
    serverUrl?: string;
    /**
     * The username used to upload the image to the container registry.
     */
    username?: string;
}

/**
 * The configuration settings of the GitHub provider.
 */
export interface GitHubResponse {
    /**
     * <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
     */
    enabled?: boolean;
    /**
     * The configuration settings of the login flow.
     */
    login?: outputs.web.v20201201.LoginScopesResponse;
    /**
     * The configuration settings of the app registration for the GitHub provider.
     */
    registration?: outputs.web.v20201201.ClientRegistrationResponse;
}

/**
 * The configuration settings that determines the validation flow of users using App Service Authentication/Authorization.
 */
export interface GlobalValidationResponse {
    /**
     * The paths for which unauthenticated flow would not be redirected to the login page.
     */
    excludedPaths?: string[];
    /**
     * The default authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are configured and the unauthenticated client
     * action is set to "RedirectToLoginPage".
     */
    redirectToProvider?: string;
    /**
     * <code>true</code> if the authentication flow is required any request is made; otherwise, <code>false</code>.
     */
    requireAuthentication?: boolean;
    /**
     * The action to take when an unauthenticated client attempts to access the app.
     */
    unauthenticatedClientAction?: string;
}

/**
 * The configuration settings of the Google provider.
 */
export interface GoogleResponse {
    /**
     * <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
     */
    enabled?: boolean;
    /**
     * The configuration settings of the login flow.
     */
    login?: outputs.web.v20201201.LoginScopesResponse;
    /**
     * The configuration settings of the app registration for the Google provider.
     */
    registration?: outputs.web.v20201201.ClientRegistrationResponse;
    /**
     * The configuration settings of the Azure Active Directory token validation flow.
     */
    validation?: outputs.web.v20201201.AllowedAudiencesValidationResponse;
}

/**
 * The IIS handler mappings used to define which handler processes HTTP requests with certain extension. 
 * For example, it is used to configure php-cgi.exe process to handle all HTTP requests with *.php extension.
 */
export interface HandlerMappingResponse {
    /**
     * Command-line arguments to be passed to the script processor.
     */
    arguments?: string;
    /**
     * Requests with this extension will be handled using the specified FastCGI application.
     */
    extension?: string;
    /**
     * The absolute path to the FastCGI application.
     */
    scriptProcessor?: string;
}

/**
 * SSL-enabled hostname.
 */
export interface HostNameSslStateResponse {
    /**
     * Indicates whether the hostname is a standard or repository hostname.
     */
    hostType?: string;
    /**
     * Hostname.
     */
    name?: string;
    /**
     * SSL type.
     */
    sslState?: string;
    /**
     * SSL certificate thumbprint.
     */
    thumbprint?: string;
    /**
     * Set to <code>true</code> to update existing hostname.
     */
    toUpdate?: boolean;
    /**
     * Virtual IP address assigned to the hostname if IP based SSL is enabled.
     */
    virtualIP?: string;
}

/**
 * Specification for an App Service Environment to use for this resource.
 */
export interface HostingEnvironmentProfileResponse {
    /**
     * Resource ID of the App Service Environment.
     */
    id?: string;
    /**
     * Name of the App Service Environment.
     */
    name: string;
    /**
     * Resource type of the App Service Environment.
     */
    type: string;
}

/**
 * Http logs configuration.
 */
export interface HttpLogsConfigResponse {
    /**
     * Http logs to azure blob storage configuration.
     */
    azureBlobStorage?: outputs.web.v20201201.AzureBlobStorageHttpLogsConfigResponse;
    /**
     * Http logs to file system configuration.
     */
    fileSystem?: outputs.web.v20201201.FileSystemHttpLogsConfigResponse;
}

/**
 * The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization.
 */
export interface HttpSettingsResponse {
    /**
     * The configuration settings of a forward proxy used to make the requests.
     */
    forwardProxy?: outputs.web.v20201201.ForwardProxyResponse;
    /**
     * <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
     */
    requireHttps?: boolean;
    /**
     * The configuration settings of the paths HTTP requests.
     */
    routes?: outputs.web.v20201201.HttpSettingsRoutesResponse;
}

/**
 * The configuration settings of the paths HTTP requests.
 */
export interface HttpSettingsRoutesResponse {
    /**
     * The prefix that should precede all the authentication/authorization paths.
     */
    apiPrefix?: string;
}

/**
 * A domain specific resource identifier.
 */
export interface IdentifierResponse {
    /**
     * Resource Id.
     */
    id: string;
    /**
     * Kind of resource.
     */
    kind?: string;
    /**
     * Resource Name.
     */
    name: string;
    /**
     * Resource type.
     */
    type: string;
    /**
     * String representation of the identity.
     */
    value?: string;
}

/**
 * The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization.
 */
export interface IdentityProvidersResponse {
    /**
     * The configuration settings of the Apple provider.
     */
    apple?: outputs.web.v20201201.AppleResponse;
    /**
     * The configuration settings of the Azure Active directory provider.
     */
    azureActiveDirectory?: outputs.web.v20201201.AzureActiveDirectoryResponse;
    /**
     * The configuration settings of the Azure Static Web Apps provider.
     */
    azureStaticWebApps?: outputs.web.v20201201.AzureStaticWebAppsResponse;
    /**
     * The map of the name of the alias of each custom Open ID Connect provider to the
     * configuration settings of the custom Open ID Connect provider.
     */
    customOpenIdConnectProviders?: {[key: string]: outputs.web.v20201201.CustomOpenIdConnectProviderResponse};
    /**
     * The configuration settings of the Facebook provider.
     */
    facebook?: outputs.web.v20201201.FacebookResponse;
    /**
     * The configuration settings of the GitHub provider.
     */
    gitHub?: outputs.web.v20201201.GitHubResponse;
    /**
     * The configuration settings of the Google provider.
     */
    google?: outputs.web.v20201201.GoogleResponse;
    /**
     * The configuration settings of the legacy Microsoft Account provider.
     */
    legacyMicrosoftAccount?: outputs.web.v20201201.LegacyMicrosoftAccountResponse;
    /**
     * The configuration settings of the Twitter provider.
     */
    twitter?: outputs.web.v20201201.TwitterResponse;
}

/**
 * IP security restriction on an app.
 */
export interface IpSecurityRestrictionResponse {
    /**
     * Allow or Deny access for this IP range.
     */
    action?: string;
    /**
     * IP restriction rule description.
     */
    description?: string;
    /**
     * IP restriction rule headers.
     * X-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples). 
     * The matching logic is ..
     * - If the property is null or empty (default), all hosts(or lack of) are allowed.
     * - A value is compared using ordinal-ignore-case (excluding port number).
     * - Subdomain wildcards are permitted but don't match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com
     *  but not the root domain contoso.com or multi-level foo.bar.contoso.com
     * - Unicode host names are allowed but are converted to Punycode for matching.
     *
     * X-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).
     * The matching logic is ..
     * - If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.
     * - If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.
     *
     * X-Azure-FDID and X-FD-HealthProbe.
     * The matching logic is exact match.
     */
    headers?: {[key: string]: string[]};
    /**
     * IP address the security restriction is valid for.
     * It can be in form of pure ipv4 address (required SubnetMask property) or
     * CIDR notation such as ipv4/mask (leading bit match). For CIDR,
     * SubnetMask property must not be specified.
     */
    ipAddress?: string;
    /**
     * IP restriction rule name.
     */
    name?: string;
    /**
     * Priority of IP restriction rule.
     */
    priority?: number;
    /**
     * Subnet mask for the range of IP addresses the restriction is valid for.
     */
    subnetMask?: string;
    /**
     * (internal) Subnet traffic tag
     */
    subnetTrafficTag?: number;
    /**
     * Defines what this IP filter will be used for. This is to support IP filtering on proxies.
     */
    tag?: string;
    /**
     * Virtual network resource id
     */
    vnetSubnetResourceId?: string;
    /**
     * (internal) Vnet traffic tag
     */
    vnetTrafficTag?: number;
}

/**
 * The configuration settings of the checks that should be made while validating the JWT Claims.
 */
export interface JwtClaimChecksResponse {
    /**
     * The list of the allowed client applications.
     */
    allowedClientApplications?: string[];
    /**
     * The list of the allowed groups.
     */
    allowedGroups?: string[];
}

/**
 * Specification for a Kubernetes Environment to use for this resource.
 */
export interface KubeEnvironmentProfileResponse {
    /**
     * Resource ID of the Kubernetes Environment.
     */
    id?: string;
    /**
     * Name of the Kubernetes Environment.
     */
    name: string;
    /**
     * Resource type of the Kubernetes Environment.
     */
    type: string;
}

/**
 * The configuration settings of the legacy Microsoft Account provider.
 */
export interface LegacyMicrosoftAccountResponse {
    /**
     * <code>false</code> if the legacy Microsoft Account provider should not be enabled despite the set registration; otherwise, <code>true</code>.
     */
    enabled?: boolean;
    /**
     * The configuration settings of the login flow.
     */
    login?: outputs.web.v20201201.LoginScopesResponse;
    /**
     * The configuration settings of the app registration for the legacy Microsoft Account provider.
     */
    registration?: outputs.web.v20201201.ClientRegistrationResponse;
    /**
     * The configuration settings of the legacy Microsoft Account provider token validation flow.
     */
    validation?: outputs.web.v20201201.AllowedAudiencesValidationResponse;
}

/**
 * The configuration settings of the login flow of users using App Service Authentication/Authorization.
 */
export interface LoginResponse {
    /**
     * External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
     * This is an advanced setting typically only needed by Windows Store application backends.
     * Note that URLs within the current domain are always implicitly allowed.
     */
    allowedExternalRedirectUrls?: string[];
    /**
     * The configuration settings of the session cookie's expiration.
     */
    cookieExpiration?: outputs.web.v20201201.CookieExpirationResponse;
    /**
     * The configuration settings of the nonce used in the login flow.
     */
    nonce?: outputs.web.v20201201.NonceResponse;
    /**
     * <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
     */
    preserveUrlFragmentsForLogins?: boolean;
    /**
     * The routes that specify the endpoints used for login and logout requests.
     */
    routes?: outputs.web.v20201201.LoginRoutesResponse;
    /**
     * The configuration settings of the token store.
     */
    tokenStore?: outputs.web.v20201201.TokenStoreResponse;
}

/**
 * The routes that specify the endpoints used for login and logout requests.
 */
export interface LoginRoutesResponse {
    /**
     * The endpoint at which a logout request should be made.
     */
    logoutEndpoint?: string;
}

/**
 * The configuration settings of the login flow, including the scopes that should be requested.
 */
export interface LoginScopesResponse {
    /**
     * A list of the scopes that should be requested while authenticating.
     */
    scopes?: string[];
}

/**
 * Managed service identity.
 */
export interface ManagedServiceIdentityResponse {
    /**
     * Principal Id of managed service identity.
     */
    principalId: string;
    /**
     * Tenant of managed service identity.
     */
    tenantId: string;
    /**
     * Type of managed service identity.
     */
    type?: string;
    /**
     * The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
     */
    userAssignedIdentities?: {[key: string]: outputs.web.v20201201.ManagedServiceIdentityResponseUserAssignedIdentities};
}

export interface ManagedServiceIdentityResponseUserAssignedIdentities {
    /**
     * Client Id of user assigned identity
     */
    clientId: string;
    /**
     * Principal Id of user assigned identity
     */
    principalId: string;
}

/**
 * Name value pair.
 */
export interface NameValuePairResponse {
    /**
     * Pair name.
     */
    name?: string;
    /**
     * Pair value.
     */
    value?: string;
}

/**
 * The configuration settings of the nonce used in the login flow.
 */
export interface NonceResponse {
    /**
     * The time after the request is made when the nonce should expire.
     */
    nonceExpirationInterval?: string;
    /**
     * <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
     */
    validateNonce?: boolean;
}

/**
 * The authentication client credentials of the custom Open ID Connect provider.
 */
export interface OpenIdConnectClientCredentialResponse {
    /**
     * The app setting that contains the client secret for the custom Open ID Connect provider.
     */
    clientSecretSettingName?: string;
    /**
     * The method that should be used to authenticate the user.
     */
    method?: string;
}

/**
 * The configuration settings of the endpoints used for the custom Open ID Connect provider.
 */
export interface OpenIdConnectConfigResponse {
    /**
     * The endpoint to be used to make an authorization request.
     */
    authorizationEndpoint?: string;
    /**
     * The endpoint that provides the keys necessary to validate the token.
     */
    certificationUri?: string;
    /**
     * The endpoint that issues the token.
     */
    issuer?: string;
    /**
     * The endpoint to be used to request a token.
     */
    tokenEndpoint?: string;
    /**
     * The endpoint that contains all the configuration endpoints for the provider.
     */
    wellKnownOpenIdConfiguration?: string;
}

/**
 * The configuration settings of the login flow of the custom Open ID Connect provider.
 */
export interface OpenIdConnectLoginResponse {
    /**
     * The name of the claim that contains the users name.
     */
    nameClaimType?: string;
    /**
     * A list of the scopes that should be requested while authenticating.
     */
    scopes?: string[];
}

/**
 * The configuration settings of the app registration for the custom Open ID Connect provider.
 */
export interface OpenIdConnectRegistrationResponse {
    /**
     * The authentication credentials of the custom Open ID Connect provider.
     */
    clientCredential?: outputs.web.v20201201.OpenIdConnectClientCredentialResponse;
    /**
     * The client id of the custom Open ID Connect provider.
     */
    clientId?: string;
    /**
     * The configuration settings of the endpoints used for the custom Open ID Connect provider.
     */
    openIdConnectConfiguration?: outputs.web.v20201201.OpenIdConnectConfigResponse;
}

/**
 * The state of a private link connection
 */
export interface PrivateLinkConnectionStateResponse {
    /**
     * ActionsRequired for a private link connection
     */
    actionsRequired?: string;
    /**
     * Description of a private link connection
     */
    description?: string;
    /**
     * Status of a private link connection
     */
    status?: string;
}

/**
 * Push settings for the App.
 */
export interface PushSettingsResponse {
    /**
     * Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.
     */
    dynamicTagsJson?: string;
    /**
     * Resource Id.
     */
    id: string;
    /**
     * Gets or sets a flag indicating whether the Push endpoint is enabled.
     */
    isPushEnabled: boolean;
    /**
     * Kind of resource.
     */
    kind?: string;
    /**
     * Resource Name.
     */
    name: string;
    /**
     * Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.
     */
    tagWhitelistJson?: string;
    /**
     * Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'. 
     * Validation should be performed at the PushRequestHandler.
     */
    tagsRequiringAuth?: string;
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to gradually change routing % based on performance.
 */
export interface RampUpRuleResponse {
    /**
     * Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.
     */
    actionHostName?: string;
    /**
     * Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.
     * https://www.siteextensions.net/packages/TiPCallback/
     */
    changeDecisionCallbackUrl?: string;
    /**
     * Specifies interval in minutes to reevaluate ReroutePercentage.
     */
    changeIntervalInMinutes?: number;
    /**
     * In auto ramp up scenario this is the step to add/remove from <code>ReroutePercentage</code> until it reaches \n<code>MinReroutePercentage</code> or 
     * <code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specified in <code>ChangeIntervalInMinutes</code>.\nCustom decision algorithm 
     * can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.
     */
    changeStep?: number;
    /**
     * Specifies upper boundary below which ReroutePercentage will stay.
     */
    maxReroutePercentage?: number;
    /**
     * Specifies lower boundary above which ReroutePercentage will stay.
     */
    minReroutePercentage?: number;
    /**
     * Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment.
     */
    name?: string;
    /**
     * Percentage of the traffic which will be redirected to <code>ActionHostName</code>.
     */
    reroutePercentage?: number;
}

/**
 * A remote private endpoint connection
 */
export interface RemotePrivateEndpointConnectionResponse {
    /**
     * Resource Id.
     */
    id: string;
    /**
     * Private IPAddresses mapped to the remote private endpoint
     */
    ipAddresses?: string[];
    /**
     * Kind of resource.
     */
    kind?: string;
    /**
     * Resource Name.
     */
    name: string;
    /**
     * PrivateEndpoint of a remote private endpoint connection
     */
    privateEndpoint?: outputs.web.v20201201.ArmIdWrapperResponse;
    /**
     * The state of a private link connection
     */
    privateLinkServiceConnectionState?: outputs.web.v20201201.PrivateLinkConnectionStateResponse;
    provisioningState: string;
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Trigger based on total requests.
 */
export interface RequestsBasedTriggerResponse {
    /**
     * Request Count.
     */
    count?: number;
    /**
     * Time interval.
     */
    timeInterval?: string;
}

/**
 * Message envelope that contains the common Azure resource manager properties and the resource provider specific content.
 */
export interface ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse {
    /**
     * Azure-AsyncOperation Error info.
     */
    error?: outputs.web.v20201201.ErrorEntityResponse;
    /**
     * Resource Id. Typically ID is populated only for responses to GET requests. Caller is responsible for passing in this
     * value for GET requests only.
     * For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}
     */
    id?: string;
    /**
     * MSI resource
     */
    identity?: outputs.web.v20201201.ManagedServiceIdentityResponse;
    /**
     * Geographical region resource belongs to e.g. SouthCentralUS, SouthEastAsia.
     */
    location?: string;
    /**
     * Name of resource.
     */
    name?: string;
    /**
     * Azure resource manager plan.
     */
    plan?: outputs.web.v20201201.ArmPlanResponse;
    /**
     * Resource specific properties.
     */
    properties?: outputs.web.v20201201.RemotePrivateEndpointConnectionResponse;
    /**
     * SKU description of the resource.
     */
    sku?: outputs.web.v20201201.SkuDescriptionResponse;
    /**
     * Azure-AsyncOperation Status info.
     */
    status?: string;
    /**
     * Tags associated with resource.
     */
    tags?: {[key: string]: string};
    /**
     * Type of resource e.g "Microsoft.Web/sites".
     */
    type?: string;
    /**
     * Logical Availability Zones the service is hosted in
     */
    zones?: string[];
}

/**
 * Configuration of an App Service app.
 */
export interface SiteConfigResponse {
    /**
     * Flag to use Managed Identity Creds for ACR pull
     */
    acrUseManagedIdentityCreds?: boolean;
    /**
     * If using user managed identity, the user managed identity ClientId
     */
    acrUserManagedIdentityID?: string;
    /**
     * <code>true</code> if Always On is enabled; otherwise, <code>false</code>.
     */
    alwaysOn?: boolean;
    /**
     * Information about the formal API definition for the app.
     */
    apiDefinition?: outputs.web.v20201201.ApiDefinitionInfoResponse;
    /**
     * Azure API management settings linked to the app.
     */
    apiManagementConfig?: outputs.web.v20201201.ApiManagementConfigResponse;
    /**
     * App command line to launch.
     */
    appCommandLine?: string;
    /**
     * Application settings.
     */
    appSettings?: outputs.web.v20201201.NameValuePairResponse[];
    /**
     * <code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.
     */
    autoHealEnabled?: boolean;
    /**
     * Auto Heal rules.
     */
    autoHealRules?: outputs.web.v20201201.AutoHealRulesResponse;
    /**
     * Auto-swap slot name.
     */
    autoSwapSlotName?: string;
    /**
     * List of Azure Storage Accounts.
     */
    azureStorageAccounts?: {[key: string]: outputs.web.v20201201.AzureStorageInfoValueResponse};
    /**
     * Connection strings.
     */
    connectionStrings?: outputs.web.v20201201.ConnStringInfoResponse[];
    /**
     * Cross-Origin Resource Sharing (CORS) settings.
     */
    cors?: outputs.web.v20201201.CorsSettingsResponse;
    /**
     * Default documents.
     */
    defaultDocuments?: string[];
    /**
     * <code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.
     */
    detailedErrorLoggingEnabled?: boolean;
    /**
     * Document root.
     */
    documentRoot?: string;
    /**
     * This is work around for polymorphic types.
     */
    experiments?: outputs.web.v20201201.ExperimentsResponse;
    /**
     * State of FTP / FTPS service
     */
    ftpsState?: string;
    /**
     * Maximum number of workers that a site can scale out to.
     * This setting only applies to the Consumption and Elastic Premium Plans
     */
    functionAppScaleLimit?: number;
    /**
     * Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled,
     * the ScaleController will not monitor event sources directly, but will instead call to the
     * runtime to get scale status.
     */
    functionsRuntimeScaleMonitoringEnabled?: boolean;
    /**
     * Handler mappings.
     */
    handlerMappings?: outputs.web.v20201201.HandlerMappingResponse[];
    /**
     * Health check path
     */
    healthCheckPath?: string;
    /**
     * Http20Enabled: configures a web site to allow clients to connect over http2.0
     */
    http20Enabled?: boolean;
    /**
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     */
    httpLoggingEnabled?: boolean;
    /**
     * IP security restrictions for main.
     */
    ipSecurityRestrictions?: outputs.web.v20201201.IpSecurityRestrictionResponse[];
    /**
     * Java container.
     */
    javaContainer?: string;
    /**
     * Java container version.
     */
    javaContainerVersion?: string;
    /**
     * Java version.
     */
    javaVersion?: string;
    /**
     * Identity to use for Key Vault Reference authentication.
     */
    keyVaultReferenceIdentity?: string;
    /**
     * Site limits.
     */
    limits?: outputs.web.v20201201.SiteLimitsResponse;
    /**
     * Linux App Framework and version
     */
    linuxFxVersion?: string;
    /**
     * Site load balancing.
     */
    loadBalancing?: string;
    /**
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     */
    localMySqlEnabled?: boolean;
    /**
     * HTTP logs directory size limit.
     */
    logsDirectorySizeLimit?: number;
    /**
     * Site MachineKey.
     */
    machineKey: outputs.web.v20201201.SiteMachineKeyResponse;
    /**
     * Managed pipeline mode.
     */
    managedPipelineMode?: string;
    /**
     * Managed Service Identity Id
     */
    managedServiceIdentityId?: number;
    /**
     * MinTlsVersion: configures the minimum version of TLS required for SSL requests
     */
    minTlsVersion?: string;
    /**
     * Number of minimum instance count for a site
     * This setting only applies to the Elastic Plans
     */
    minimumElasticInstanceCount?: number;
    /**
     * .NET Framework version.
     */
    netFrameworkVersion?: string;
    /**
     * Version of Node.js.
     */
    nodeVersion?: string;
    /**
     * Number of workers.
     */
    numberOfWorkers?: number;
    /**
     * Version of PHP.
     */
    phpVersion?: string;
    /**
     * Version of PowerShell.
     */
    powerShellVersion?: string;
    /**
     * Number of preWarmed instances.
     * This setting only applies to the Consumption and Elastic Plans
     */
    preWarmedInstanceCount?: number;
    /**
     * Property to allow or block all public traffic.
     */
    publicNetworkAccess?: string;
    /**
     * Publishing user name.
     */
    publishingUsername?: string;
    /**
     * Push endpoint settings.
     */
    push?: outputs.web.v20201201.PushSettingsResponse;
    /**
     * Version of Python.
     */
    pythonVersion?: string;
    /**
     * <code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.
     */
    remoteDebuggingEnabled?: boolean;
    /**
     * Remote debugging version.
     */
    remoteDebuggingVersion?: string;
    /**
     * <code>true</code> if request tracing is enabled; otherwise, <code>false</code>.
     */
    requestTracingEnabled?: boolean;
    /**
     * Request tracing expiration time.
     */
    requestTracingExpirationTime?: string;
    /**
     * IP security restrictions for scm.
     */
    scmIpSecurityRestrictions?: outputs.web.v20201201.IpSecurityRestrictionResponse[];
    /**
     * IP security restrictions for scm to use main.
     */
    scmIpSecurityRestrictionsUseMain?: boolean;
    /**
     * ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
     */
    scmMinTlsVersion?: string;
    /**
     * SCM type.
     */
    scmType?: string;
    /**
     * Tracing options.
     */
    tracingOptions?: string;
    /**
     * <code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.
     */
    use32BitWorkerProcess?: boolean;
    /**
     * Virtual applications.
     */
    virtualApplications?: outputs.web.v20201201.VirtualApplicationResponse[];
    /**
     * Virtual Network name.
     */
    vnetName?: string;
    /**
     * The number of private ports assigned to this app. These will be assigned dynamically on runtime.
     */
    vnetPrivatePortsCount?: number;
    /**
     * Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
     */
    vnetRouteAllEnabled?: boolean;
    /**
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     */
    webSocketsEnabled?: boolean;
    /**
     * Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones
     */
    websiteTimeZone?: string;
    /**
     * Xenon App Framework and version
     */
    windowsFxVersion?: string;
    /**
     * Explicit Managed Service Identity Id
     */
    xManagedServiceIdentityId?: number;
}
/**
 * siteConfigResponseProvideDefaults sets the appropriate defaults for SiteConfigResponse
 */
export function siteConfigResponseProvideDefaults(val: SiteConfigResponse): SiteConfigResponse {
    return {
        ...val,
        http20Enabled: (val.http20Enabled) ?? true,
        localMySqlEnabled: (val.localMySqlEnabled) ?? false,
        netFrameworkVersion: (val.netFrameworkVersion) ?? "v4.6",
    };
}

/**
 * Metric limits set on an app.
 */
export interface SiteLimitsResponse {
    /**
     * Maximum allowed disk size usage in MB.
     */
    maxDiskSizeInMb?: number;
    /**
     * Maximum allowed memory usage in MB.
     */
    maxMemoryInMb?: number;
    /**
     * Maximum allowed CPU usage percentage.
     */
    maxPercentageCpu?: number;
}

/**
 * MachineKey of an app.
 */
export interface SiteMachineKeyResponse {
    /**
     * Algorithm used for decryption.
     */
    decryption?: string;
    /**
     * Decryption key.
     */
    decryptionKey?: string;
    /**
     * MachineKey validation.
     */
    validation?: string;
    /**
     * Validation key.
     */
    validationKey?: string;
}

/**
 * Description of the App Service plan scale options.
 */
export interface SkuCapacityResponse {
    /**
     * Default number of workers for this App Service plan SKU.
     */
    default?: number;
    /**
     * Maximum number of Elastic workers for this App Service plan SKU.
     */
    elasticMaximum?: number;
    /**
     * Maximum number of workers for this App Service plan SKU.
     */
    maximum?: number;
    /**
     * Minimum number of workers for this App Service plan SKU.
     */
    minimum?: number;
    /**
     * Available scale configurations for an App Service plan.
     */
    scaleType?: string;
}

/**
 * Description of a SKU for a scalable resource.
 */
export interface SkuDescriptionResponse {
    /**
     * Capabilities of the SKU, e.g., is traffic manager enabled?
     */
    capabilities?: outputs.web.v20201201.CapabilityResponse[];
    /**
     * Current number of instances assigned to the resource.
     */
    capacity?: number;
    /**
     * Family code of the resource SKU.
     */
    family?: string;
    /**
     * Locations of the SKU.
     */
    locations?: string[];
    /**
     * Name of the resource SKU.
     */
    name?: string;
    /**
     * Size specifier of the resource SKU.
     */
    size?: string;
    /**
     * Min, max, and default scale values of the SKU.
     */
    skuCapacity?: outputs.web.v20201201.SkuCapacityResponse;
    /**
     * Service tier of the resource SKU.
     */
    tier?: string;
}

/**
 * The status of the last successful slot swap operation.
 */
export interface SlotSwapStatusResponse {
    /**
     * The destination slot of the last swap operation.
     */
    destinationSlotName: string;
    /**
     * The source slot of the last swap operation.
     */
    sourceSlotName: string;
    /**
     * The time the last successful slot swap completed.
     */
    timestampUtc: string;
}

/**
 * Trigger based on request execution time.
 */
export interface SlowRequestsBasedTriggerResponse {
    /**
     * Request Count.
     */
    count?: number;
    /**
     * Request Path.
     */
    path?: string;
    /**
     * Time interval.
     */
    timeInterval?: string;
    /**
     * Time taken.
     */
    timeTaken?: string;
}

/**
 * Build properties for the static site.
 */
export interface StaticSiteBuildPropertiesResponse {
    /**
     * A custom command to run during deployment of the Azure Functions API application.
     */
    apiBuildCommand?: string;
    /**
     * The path to the api code within the repository.
     */
    apiLocation?: string;
    /**
     * Deprecated: The path of the app artifacts after building (deprecated in favor of OutputLocation)
     */
    appArtifactLocation?: string;
    /**
     * A custom command to run during deployment of the static content application.
     */
    appBuildCommand?: string;
    /**
     * The path to the app code within the repository.
     */
    appLocation?: string;
    /**
     * Github Action secret name override.
     */
    githubActionSecretNameOverride?: string;
    /**
     * The output path of the app after building.
     */
    outputLocation?: string;
    /**
     * Skip Github Action workflow generation.
     */
    skipGithubActionWorkflowGeneration?: boolean;
}

/**
 * Template Options for the static site.
 */
export interface StaticSiteTemplateOptionsResponse {
    /**
     * Description of the newly generated repository.
     */
    description?: string;
    /**
     * Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
     */
    isPrivate?: boolean;
    /**
     * Owner of the newly generated repository.
     */
    owner?: string;
    /**
     * Name of the newly generated repository.
     */
    repositoryName?: string;
    /**
     * URL of the template repository. The newly generated repository will be based on this one.
     */
    templateRepositoryUrl?: string;
}

/**
 * Static Site User ARM resource.
 */
export interface StaticSiteUserARMResourceResponse {
    /**
     * The display name for the static site user.
     */
    displayName: string;
    /**
     * Resource Id.
     */
    id: string;
    /**
     * Kind of resource.
     */
    kind?: string;
    /**
     * Resource Name.
     */
    name: string;
    /**
     * The identity provider for the static site user.
     */
    provider: string;
    /**
     * The roles for the static site user, in free-form string format
     */
    roles?: string;
    /**
     * Resource type.
     */
    type: string;
    /**
     * The user id for the static site user.
     */
    userId: string;
}

/**
 * A static site user provided function.
 */
export interface StaticSiteUserProvidedFunctionAppResponse {
    /**
     * The date and time on which the function app was registered with the static site.
     */
    createdOn: string;
    /**
     * The region of the function app registered with the static site
     */
    functionAppRegion?: string;
    /**
     * The resource id of the function app registered with the static site
     */
    functionAppResourceId?: string;
    /**
     * Resource Id.
     */
    id: string;
    /**
     * Kind of resource.
     */
    kind?: string;
    /**
     * Resource Name.
     */
    name: string;
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Trigger based on status code.
 */
export interface StatusCodesBasedTriggerResponse {
    /**
     * Request Count.
     */
    count?: number;
    /**
     * Request Path
     */
    path?: string;
    /**
     * HTTP status code.
     */
    status?: number;
    /**
     * Request Sub Status.
     */
    subStatus?: number;
    /**
     * Time interval.
     */
    timeInterval?: string;
    /**
     * Win32 error code.
     */
    win32Status?: number;
}

/**
 * Trigger based on range of status codes.
 */
export interface StatusCodesRangeBasedTriggerResponse {
    /**
     * Request Count.
     */
    count?: number;
    path?: string;
    /**
     * HTTP status code.
     */
    statusCodes?: string;
    /**
     * Time interval.
     */
    timeInterval?: string;
}

/**
 * The configuration settings of the token store.
 */
export interface TokenStoreResponse {
    /**
     * The configuration settings of the storage of the tokens if blob storage is used.
     */
    azureBlobStorage?: outputs.web.v20201201.BlobStorageTokenStoreResponse;
    /**
     * <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
     *  The default is <code>false</code>.
     */
    enabled?: boolean;
    /**
     * The configuration settings of the storage of the tokens if a file system is used.
     */
    fileSystem?: outputs.web.v20201201.FileSystemTokenStoreResponse;
    /**
     * The number of hours after session token expiration that a session token can be used to
     * call the token refresh API. The default is 72 hours.
     */
    tokenRefreshExtensionHours?: number;
}

/**
 * The configuration settings of the app registration for the Twitter provider.
 */
export interface TwitterRegistrationResponse {
    /**
     * The OAuth 1.0a consumer key of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     */
    consumerKey?: string;
    /**
     * The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
     * application used for sign-in.
     */
    consumerSecretSettingName?: string;
}

/**
 * The configuration settings of the Twitter provider.
 */
export interface TwitterResponse {
    /**
     * <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
     */
    enabled?: boolean;
    /**
     * The configuration settings of the app registration for the Twitter provider.
     */
    registration?: outputs.web.v20201201.TwitterRegistrationResponse;
}

/**
 * Virtual application in an app.
 */
export interface VirtualApplicationResponse {
    /**
     * Physical path.
     */
    physicalPath?: string;
    /**
     * <code>true</code> if preloading is enabled; otherwise, <code>false</code>.
     */
    preloadEnabled?: boolean;
    /**
     * Virtual directories for virtual application.
     */
    virtualDirectories?: outputs.web.v20201201.VirtualDirectoryResponse[];
    /**
     * Virtual path.
     */
    virtualPath?: string;
}

/**
 * Directory for virtual application.
 */
export interface VirtualDirectoryResponse {
    /**
     * Physical path.
     */
    physicalPath?: string;
    /**
     * Path to virtual application.
     */
    virtualPath?: string;
}

/**
 * Specification for using a Virtual Network.
 */
export interface VirtualNetworkProfileResponse {
    /**
     * Resource id of the Virtual Network.
     */
    id: string;
    /**
     * Name of the Virtual Network (read-only).
     */
    name: string;
    /**
     * Subnet within the Virtual Network.
     */
    subnet?: string;
    /**
     * Resource type of the Virtual Network (read-only).
     */
    type: string;
}

/**
 * Virtual Network route contract used to pass routing information for a Virtual Network.
 */
export interface VnetRouteResponse {
    /**
     * The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.
     */
    endAddress?: string;
    /**
     * Resource Id.
     */
    id: string;
    /**
     * Kind of resource.
     */
    kind?: string;
    /**
     * Resource Name.
     */
    name: string;
    /**
     * The type of route this is:
     * DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918
     * INHERITED - Routes inherited from the real Virtual Network routes
     * STATIC - Static route set on the app only
     *
     * These values will be used for syncing an app's routes with those from a Virtual Network.
     */
    routeType?: string;
    /**
     * The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.
     */
    startAddress?: string;
    /**
     * Resource type.
     */
    type: string;
}

