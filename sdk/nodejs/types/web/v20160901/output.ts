// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Describes the capabilities/features allowed for a specific SKU.
 */
export interface CapabilityResponse {
    /**
     * Name of the SKU capability.
     */
    name?: string;
    /**
     * Reason of the SKU capability.
     */
    reason?: string;
    /**
     * Value of the SKU capability.
     */
    value?: string;
}

/**
 * Specification for an App Service Environment to use for this resource.
 */
export interface HostingEnvironmentProfileResponse {
    /**
     * Resource ID of the App Service Environment.
     */
    id?: string;
    /**
     * Name of the App Service Environment.
     */
    name: string;
    /**
     * Resource type of the App Service Environment.
     */
    type: string;
}

/**
 * Name value pair.
 */
export interface NameValuePairResponse {
    /**
     * Pair name.
     */
    name?: string;
    /**
     * Pair value.
     */
    value?: string;
}

/**
 * Network access control entry.
 */
export interface NetworkAccessControlEntryResponse {
    /**
     * Action object.
     */
    action?: string;
    /**
     * Description of network access control entry.
     */
    description?: string;
    /**
     * Order of precedence.
     */
    order?: number;
    /**
     * Remote subnet.
     */
    remoteSubnet?: string;
}

/**
 * Description of the App Service plan scale options.
 */
export interface SkuCapacityResponse {
    /**
     * Default number of workers for this App Service plan SKU.
     */
    default?: number;
    /**
     * Maximum number of workers for this App Service plan SKU.
     */
    maximum?: number;
    /**
     * Minimum number of workers for this App Service plan SKU.
     */
    minimum?: number;
    /**
     * Available scale configurations for an App Service plan.
     */
    scaleType?: string;
}

/**
 * Description of a SKU for a scalable resource.
 */
export interface SkuDescriptionResponse {
    /**
     * Capabilities of the SKU, e.g., is traffic manager enabled?
     */
    capabilities?: outputs.web.v20160901.CapabilityResponse[];
    /**
     * Current number of instances assigned to the resource.
     */
    capacity?: number;
    /**
     * Family code of the resource SKU.
     */
    family?: string;
    /**
     * Locations of the SKU.
     */
    locations?: string[];
    /**
     * Name of the resource SKU.
     */
    name?: string;
    /**
     * Size specifier of the resource SKU.
     */
    size?: string;
    /**
     * Min, max, and default scale values of the SKU.
     */
    skuCapacity?: outputs.web.v20160901.SkuCapacityResponse;
    /**
     * Service tier of the resource SKU.
     */
    tier?: string;
}

/**
 * Stamp capacity information.
 */
export interface StampCapacityResponse {
    /**
     * Available capacity (# of machines, bytes of storage etc...).
     */
    availableCapacity?: number;
    /**
     * Shared/dedicated workers.
     */
    computeMode?: string;
    /**
     * If <code>true</code>, it includes basic apps.
     * Basic apps are not used for capacity allocation.
     */
    excludeFromCapacityAllocation?: boolean;
    /**
     * <code>true</code> if capacity is applicable for all apps; otherwise, <code>false</code>.
     */
    isApplicableForAllComputeModes?: boolean;
    /**
     * Name of the stamp.
     */
    name?: string;
    /**
     * Shared or Dedicated.
     */
    siteMode?: string;
    /**
     * Total capacity (# of machines, bytes of storage etc...).
     */
    totalCapacity?: number;
    /**
     * Name of the unit.
     */
    unit?: string;
    /**
     * Size of the machines.
     */
    workerSize?: string;
    /**
     * Size ID of machines: 
     * 0 - Small
     * 1 - Medium
     * 2 - Large
     */
    workerSizeId?: number;
}

/**
 * Virtual IP mapping.
 */
export interface VirtualIPMappingResponse {
    /**
     * Is virtual IP mapping in use.
     */
    inUse?: boolean;
    /**
     * Internal HTTP port.
     */
    internalHttpPort?: number;
    /**
     * Internal HTTPS port.
     */
    internalHttpsPort?: number;
    /**
     * Virtual IP address.
     */
    virtualIP?: string;
}

/**
 * Specification for using a Virtual Network.
 */
export interface VirtualNetworkProfileResponse {
    /**
     * Resource id of the Virtual Network.
     */
    id?: string;
    /**
     * Name of the Virtual Network (read-only).
     */
    name: string;
    /**
     * Subnet within the Virtual Network.
     */
    subnet?: string;
    /**
     * Resource type of the Virtual Network (read-only).
     */
    type: string;
}

/**
 * Worker pool of an App Service Environment.
 */
export interface WorkerPoolResponse {
    /**
     * Shared or dedicated app hosting.
     */
    computeMode?: string;
    /**
     * Names of all instances in the worker pool (read only).
     */
    instanceNames: string[];
    /**
     * Number of instances in the worker pool.
     */
    workerCount?: number;
    /**
     * VM size of the worker pool instances.
     */
    workerSize?: string;
    /**
     * Worker size ID for referencing this worker pool.
     */
    workerSizeId?: number;
}

