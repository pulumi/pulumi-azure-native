// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Activity dependency information.
 */
export interface ActivityDependencyResponse {
    /**
     * Activity name.
     */
    activity: string;
    /**
     * Match-Condition for the dependency.
     */
    dependencyConditions: string[];
}

/**
 * Execution policy for an activity.
 */
export interface ActivityPolicyResponse {
    /**
     * Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    retry?: any;
    /**
     * Interval between each retry attempt (in seconds). The default is 30 sec.
     */
    retryIntervalInSeconds?: number;
    /**
     * When set to true, Output from activity is considered as secure and will not be logged to monitoring.
     */
    secureOutput?: boolean;
    /**
     * Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    timeout?: any;
}

/**
 * Amazon Marketplace Web Service linked service.
 */
export interface AmazonMWSLinkedServiceResponse {
    /**
     * The access key id used to access data.
     */
    accessKeyId: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
     */
    endpoint: any;
    /**
     * The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
     */
    marketplaceID: any;
    /**
     * The Amazon MWS authentication token.
     */
    mwsAuthToken?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The secret key used to access data.
     */
    secretKey?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The Amazon seller ID.
     */
    sellerID: any;
    /**
     * Type of linked service.
     * Expected value is 'AmazonMWS'.
     */
    type: "AmazonMWS";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
}

/**
 * Amazon Marketplace Web Service dataset.
 */
export interface AmazonMWSObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'AmazonMWSObject'.
     */
    type: "AmazonMWSObject";
}

/**
 * A copy activity Amazon Marketplace Web Service source.
 */
export interface AmazonMWSSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'AmazonMWSSource'.
     */
    type: "AmazonMWSSource";
}

/**
 * Linked service for Amazon Redshift.
 */
export interface AmazonRedshiftLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
     */
    database: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password of the Amazon Redshift source.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
     */
    port?: any;
    /**
     * The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
     */
    server: any;
    /**
     * Type of linked service.
     * Expected value is 'AmazonRedshift'.
     */
    type: "AmazonRedshift";
    /**
     * The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
     */
    username?: any;
}

/**
 * A copy activity source for Amazon Redshift Source.
 */
export interface AmazonRedshiftSourceResponse {
    /**
     * Database query. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
     */
    redshiftUnloadSettings?: outputs.datafactory.v20170901preview.RedshiftUnloadSettingsResponse;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'AmazonRedshiftSource'.
     */
    type: "AmazonRedshiftSource";
}

/**
 * A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
 */
export interface AmazonS3DatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
     */
    bucketName: any;
    /**
     * The data compression method used for the Amazon S3 object.
     */
    compression?: outputs.datafactory.v20170901preview.DatasetBZip2CompressionResponse | outputs.datafactory.v20170901preview.DatasetDeflateCompressionResponse | outputs.datafactory.v20170901preview.DatasetGZipCompressionResponse | outputs.datafactory.v20170901preview.DatasetZipDeflateCompressionResponse;
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * The format of files.
     */
    format?: outputs.datafactory.v20170901preview.AvroFormatResponse | outputs.datafactory.v20170901preview.JsonFormatResponse | outputs.datafactory.v20170901preview.OrcFormatResponse | outputs.datafactory.v20170901preview.ParquetFormatResponse | outputs.datafactory.v20170901preview.TextFormatResponse;
    /**
     * The key of the Amazon S3 object. Type: string (or Expression with resultType string).
     */
    key?: any;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
     */
    prefix?: any;
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'AmazonS3Object'.
     */
    type: "AmazonS3Object";
    /**
     * The version for the S3 object. Type: string (or Expression with resultType string).
     */
    version?: any;
}

/**
 * Linked service for Amazon S3.
 */
export interface AmazonS3LinkedServiceResponse {
    /**
     * The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
     */
    accessKeyId?: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
     */
    secretAccessKey?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'AmazonS3'.
     */
    type: "AmazonS3";
}

/**
 * The data stored in Avro format.
 */
export interface AvroFormatResponse {
    /**
     * Deserializer. Type: string (or Expression with resultType string).
     */
    deserializer?: any;
    /**
     * Serializer. Type: string (or Expression with resultType string).
     */
    serializer?: any;
    /**
     * Type of dataset storage format.
     * Expected value is 'AvroFormat'.
     */
    type: "AvroFormat";
}

/**
 * Azure Batch linked service.
 */
export interface AzureBatchLinkedServiceResponse {
    /**
     * The Azure Batch account access key.
     */
    accessKey?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The Azure Batch account name. Type: string (or Expression with resultType string).
     */
    accountName: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The Azure Batch URI. Type: string (or Expression with resultType string).
     */
    batchUri: any;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The Azure Storage linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The Azure Batch pool name. Type: string (or Expression with resultType string).
     */
    poolName: any;
    /**
     * Type of linked service.
     * Expected value is 'AzureBatch'.
     */
    type: "AzureBatch";
}

/**
 * The Azure Blob storage.
 */
export interface AzureBlobDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The data compression method used for the blob storage.
     */
    compression?: outputs.datafactory.v20170901preview.DatasetBZip2CompressionResponse | outputs.datafactory.v20170901preview.DatasetDeflateCompressionResponse | outputs.datafactory.v20170901preview.DatasetGZipCompressionResponse | outputs.datafactory.v20170901preview.DatasetZipDeflateCompressionResponse;
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * The name of the Azure Blob. Type: string (or Expression with resultType string).
     */
    fileName?: any;
    /**
     * The path of the Azure Blob storage. Type: string (or Expression with resultType string).
     */
    folderPath?: any;
    /**
     * The format of the Azure Blob storage.
     */
    format?: outputs.datafactory.v20170901preview.AvroFormatResponse | outputs.datafactory.v20170901preview.JsonFormatResponse | outputs.datafactory.v20170901preview.OrcFormatResponse | outputs.datafactory.v20170901preview.ParquetFormatResponse | outputs.datafactory.v20170901preview.TextFormatResponse;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * The root of blob path. Type: string (or Expression with resultType string).
     */
    tableRootLocation?: any;
    /**
     * Type of dataset.
     * Expected value is 'AzureBlob'.
     */
    type: "AzureBlob";
}

/**
 * Azure Data Lake Analytics linked service.
 */
export interface AzureDataLakeAnalyticsLinkedServiceResponse {
    /**
     * The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
     */
    accountName: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
     */
    dataLakeAnalyticsUri?: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
     */
    resourceGroupName?: any;
    /**
     * The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
     */
    servicePrincipalId?: any;
    /**
     * The Key of the application used to authenticate against the Azure Data Lake Analytics account.
     */
    servicePrincipalKey?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
     */
    subscriptionId?: any;
    /**
     * The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
     */
    tenant: any;
    /**
     * Type of linked service.
     * Expected value is 'AzureDataLakeAnalytics'.
     */
    type: "AzureDataLakeAnalytics";
}

/**
 * Azure Data Lake Store dataset.
 */
export interface AzureDataLakeStoreDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The data compression method used for the item(s) in the Azure Data Lake Store.
     */
    compression?: outputs.datafactory.v20170901preview.DatasetBZip2CompressionResponse | outputs.datafactory.v20170901preview.DatasetDeflateCompressionResponse | outputs.datafactory.v20170901preview.DatasetGZipCompressionResponse | outputs.datafactory.v20170901preview.DatasetZipDeflateCompressionResponse;
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
     */
    fileName?: any;
    /**
     * Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
     */
    folderPath: any;
    /**
     * The format of the Data Lake Store.
     */
    format?: outputs.datafactory.v20170901preview.AvroFormatResponse | outputs.datafactory.v20170901preview.JsonFormatResponse | outputs.datafactory.v20170901preview.OrcFormatResponse | outputs.datafactory.v20170901preview.ParquetFormatResponse | outputs.datafactory.v20170901preview.TextFormatResponse;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'AzureDataLakeStoreFile'.
     */
    type: "AzureDataLakeStoreFile";
}

/**
 * Azure Data Lake Store linked service.
 */
export interface AzureDataLakeStoreLinkedServiceResponse {
    /**
     * Data Lake Store account name. Type: string (or Expression with resultType string).
     */
    accountName?: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Data Lake Store service URI. Type: string (or Expression with resultType string).
     */
    dataLakeStoreUri: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
     */
    resourceGroupName?: any;
    /**
     * The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
     */
    servicePrincipalId?: any;
    /**
     * The Key of the application used to authenticate against the Azure Data Lake Store account.
     */
    servicePrincipalKey?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
     */
    subscriptionId?: any;
    /**
     * The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
     */
    tenant?: any;
    /**
     * Type of linked service.
     * Expected value is 'AzureDataLakeStore'.
     */
    type: "AzureDataLakeStore";
}

/**
 * A copy activity Azure Data Lake Store sink.
 */
export interface AzureDataLakeStoreSinkResponse {
    /**
     * The type of copy behavior for copy sink.
     */
    copyBehavior?: any;
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'AzureDataLakeStoreSink'.
     */
    type: "AzureDataLakeStoreSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
}

/**
 * A copy activity Azure Data Lake source.
 */
export interface AzureDataLakeStoreSourceResponse {
    /**
     * If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
     */
    recursive?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'AzureDataLakeStoreSource'.
     */
    type: "AzureDataLakeStoreSource";
}

/**
 * Azure Databricks linked service.
 */
export interface AzureDatabricksLinkedServiceResponse {
    /**
     * Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
     */
    accessToken: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
     */
    domain: any;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The id of an existing cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
     */
    existingClusterId?: any;
    /**
     * The node types of new cluster. Type: string (or Expression with resultType string).
     */
    newClusterNodeType?: any;
    /**
     * Number of worker nodes that new cluster should have. A string formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 as min and 10 as max. Type: string (or Expression with resultType string).
     */
    newClusterNumOfWorker?: any;
    /**
     * a set of optional, user-specified Spark configuration key-value pairs.
     */
    newClusterSparkConf?: {[key: string]: any};
    /**
     * The Spark version of new cluster. Type: string (or Expression with resultType string).
     */
    newClusterVersion?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'AzureDatabricks'.
     */
    type: "AzureDatabricks";
}

/**
 * Azure Key Vault linked service.
 */
export interface AzureKeyVaultLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
     */
    baseUrl: any;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'AzureKeyVault'.
     */
    type: "AzureKeyVault";
}

/**
 * Azure Key Vault secret reference.
 */
export interface AzureKeyVaultSecretReferenceResponse {
    /**
     * The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
     */
    secretName: any;
    /**
     * The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
     */
    secretVersion?: any;
    /**
     * The Azure Key Vault linked service reference.
     */
    store: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Type of the secret.
     * Expected value is 'AzureKeyVaultSecret'.
     */
    type: "AzureKeyVaultSecret";
}

/**
 * Azure ML Batch Execution activity.
 */
export interface AzureMLBatchExecutionActivityResponse {
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request.
     */
    globalParameters?: {[key: string]: any};
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Type of activity.
     * Expected value is 'AzureMLBatchExecution'.
     */
    type: "AzureMLBatchExecution";
    /**
     * Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request.
     */
    webServiceInputs?: {[key: string]: outputs.datafactory.v20170901preview.AzureMLWebServiceFileResponse};
    /**
     * Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request.
     */
    webServiceOutputs?: {[key: string]: outputs.datafactory.v20170901preview.AzureMLWebServiceFileResponse};
}

/**
 * Azure ML Web Service linked service.
 */
export interface AzureMLLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The API key for accessing the Azure ML model endpoint.
     */
    apiKey: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The Batch Execution REST URL for an Azure ML Web Service endpoint. Type: string (or Expression with resultType string).
     */
    mlEndpoint: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML web service. Type: string (or Expression with resultType string).
     */
    servicePrincipalId?: any;
    /**
     * The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML web service.
     */
    servicePrincipalKey?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
     */
    tenant?: any;
    /**
     * Type of linked service.
     * Expected value is 'AzureML'.
     */
    type: "AzureML";
    /**
     * The Update Resource REST URL for an Azure ML Web Service endpoint. Type: string (or Expression with resultType string).
     */
    updateResourceEndpoint?: any;
}

/**
 * Azure ML Update Resource management activity.
 */
export interface AzureMLUpdateResourceActivityResponse {
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string).
     */
    trainedModelFilePath: any;
    /**
     * Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation.
     */
    trainedModelLinkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string).
     */
    trainedModelName: any;
    /**
     * Type of activity.
     * Expected value is 'AzureMLUpdateResource'.
     */
    type: "AzureMLUpdateResource";
}

/**
 * Azure ML WebService Input/Output file
 */
export interface AzureMLWebServiceFileResponse {
    /**
     * The relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string).
     */
    filePath: any;
    /**
     * Reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
}

/**
 * Azure MySQL database linked service.
 */
export interface AzureMySqlLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'AzureMySql'.
     */
    type: "AzureMySql";
}

/**
 * A copy activity Azure MySQL source.
 */
export interface AzureMySqlSourceResponse {
    /**
     * Database query. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'AzureMySqlSource'.
     */
    type: "AzureMySqlSource";
}

/**
 * The Azure MySQL database dataset.
 */
export interface AzureMySqlTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * The Azure MySQL database table name. Type: string (or Expression with resultType string).
     */
    tableName?: any;
    /**
     * Type of dataset.
     * Expected value is 'AzureMySqlTable'.
     */
    type: "AzureMySqlTable";
}

/**
 * Azure PostgreSQL linked service.
 */
export interface AzurePostgreSqlLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString?: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'AzurePostgreSql'.
     */
    type: "AzurePostgreSql";
}

/**
 * A copy activity Azure PostgreSQL source.
 */
export interface AzurePostgreSqlSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'AzurePostgreSqlSource'.
     */
    type: "AzurePostgreSqlSource";
}

/**
 * Azure PostgreSQL dataset.
 */
export interface AzurePostgreSqlTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'AzurePostgreSqlTable'.
     */
    type: "AzurePostgreSqlTable";
}

/**
 * A copy activity Azure Queue sink.
 */
export interface AzureQueueSinkResponse {
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'AzureQueueSink'.
     */
    type: "AzureQueueSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
}

/**
 * The Azure Search Index.
 */
export interface AzureSearchIndexDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * The name of the Azure Search Index. Type: string (or Expression with resultType string).
     */
    indexName: any;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'AzureSearchIndex'.
     */
    type: "AzureSearchIndex";
}

/**
 * A copy activity Azure Search Index sink.
 */
export interface AzureSearchIndexSinkResponse {
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'AzureSearchIndexSink'.
     */
    type: "AzureSearchIndexSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
    /**
     * Specify the write behavior when upserting documents into Azure Search Index.
     */
    writeBehavior?: string;
}

/**
 * Linked service for Windows Azure Search Service.
 */
export interface AzureSearchLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Admin Key for Azure Search service
     */
    key?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'AzureSearch'.
     */
    type: "AzureSearch";
    /**
     * URL for Azure Search service. Type: string (or Expression with resultType string).
     */
    url: any;
}

/**
 * Azure SQL Data Warehouse linked service.
 */
export interface AzureSqlDWLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
     */
    servicePrincipalId?: any;
    /**
     * The key of the service principal used to authenticate against Azure SQL Data Warehouse.
     */
    servicePrincipalKey?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
     */
    tenant?: any;
    /**
     * Type of linked service.
     * Expected value is 'AzureSqlDW'.
     */
    type: "AzureSqlDW";
}

/**
 * The Azure SQL Data Warehouse dataset.
 */
export interface AzureSqlDWTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
     */
    tableName: any;
    /**
     * Type of dataset.
     * Expected value is 'AzureSqlDWTable'.
     */
    type: "AzureSqlDWTable";
}

/**
 * Microsoft Azure SQL Database linked service.
 */
export interface AzureSqlDatabaseLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
     */
    servicePrincipalId?: any;
    /**
     * The key of the service principal used to authenticate against Azure SQL Database.
     */
    servicePrincipalKey?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
     */
    tenant?: any;
    /**
     * Type of linked service.
     * Expected value is 'AzureSqlDatabase'.
     */
    type: "AzureSqlDatabase";
}

/**
 * The Azure SQL Server database dataset.
 */
export interface AzureSqlTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * The table name of the Azure SQL database. Type: string (or Expression with resultType string).
     */
    tableName: any;
    /**
     * Type of dataset.
     * Expected value is 'AzureSqlTable'.
     */
    type: "AzureSqlTable";
}

/**
 * The storage account linked service.
 */
export interface AzureStorageLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString?: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property.
     */
    sasUri?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'AzureStorage'.
     */
    type: "AzureStorage";
}

/**
 * The Azure Table storage dataset.
 */
export interface AzureTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * The table name of the Azure Table storage. Type: string (or Expression with resultType string).
     */
    tableName: any;
    /**
     * Type of dataset.
     * Expected value is 'AzureTable'.
     */
    type: "AzureTable";
}

/**
 * A copy activity Azure Table sink.
 */
export interface AzureTableSinkResponse {
    /**
     * Azure Table default partition key value. Type: string (or Expression with resultType string).
     */
    azureTableDefaultPartitionKeyValue?: any;
    /**
     * Azure Table insert type. Type: string (or Expression with resultType string).
     */
    azureTableInsertType?: any;
    /**
     * Azure Table partition key name. Type: string (or Expression with resultType string).
     */
    azureTablePartitionKeyName?: any;
    /**
     * Azure Table row key name. Type: string (or Expression with resultType string).
     */
    azureTableRowKeyName?: any;
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'AzureTableSink'.
     */
    type: "AzureTableSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
}

/**
 * A copy activity Azure Table source.
 */
export interface AzureTableSourceResponse {
    /**
     * Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean).
     */
    azureTableSourceIgnoreTableNotFound?: any;
    /**
     * Azure Table source query. Type: string (or Expression with resultType string).
     */
    azureTableSourceQuery?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'AzureTableSource'.
     */
    type: "AzureTableSource";
}

/**
 * Trigger that runs every time a Blob event occurs.
 */
export interface BlobEventsTriggerResponse {
    /**
     * The blob path must begin with the pattern provided for trigger to fire. For example, '/records/blobs/december/' will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
     */
    blobPathBeginsWith?: string;
    /**
     * The blob path must end with the pattern provided for trigger to fire. For example, 'december/boxes.csv' will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
     */
    blobPathEndsWith?: string;
    /**
     * Trigger description.
     */
    description?: string;
    /**
     * The type of events that cause this trigger to fire.
     */
    events: string[];
    /**
     * If set to true, blobs with zero bytes will be ignored.
     */
    ignoreEmptyBlobs?: boolean;
    /**
     * Pipelines that need to be started.
     */
    pipelines?: outputs.datafactory.v20170901preview.TriggerPipelineReferenceResponse[];
    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     */
    runtimeState: string;
    /**
     * The ARM resource ID of the Storage Account.
     */
    scope: string;
    /**
     * Trigger type.
     * Expected value is 'BlobEventsTrigger'.
     */
    type: "BlobEventsTrigger";
}

/**
 * A copy activity Azure Blob sink.
 */
export interface BlobSinkResponse {
    /**
     * Blob writer add header. Type: boolean (or Expression with resultType boolean).
     */
    blobWriterAddHeader?: any;
    /**
     * Blob writer date time format. Type: string (or Expression with resultType string).
     */
    blobWriterDateTimeFormat?: any;
    /**
     * Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
     */
    blobWriterOverwriteFiles?: any;
    /**
     * The type of copy behavior for copy sink.
     */
    copyBehavior?: any;
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'BlobSink'.
     */
    type: "BlobSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
}

/**
 * A copy activity Azure Blob source.
 */
export interface BlobSourceResponse {
    /**
     * If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
     */
    recursive?: any;
    /**
     * Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
     */
    skipHeaderLineCount?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Treat empty as null. Type: boolean (or Expression with resultType boolean).
     */
    treatEmptyAsNull?: any;
    /**
     * Copy source type.
     * Expected value is 'BlobSource'.
     */
    type: "BlobSource";
}

/**
 * Trigger that runs every time the selected Blob container changes.
 */
export interface BlobTriggerResponse {
    /**
     * Trigger description.
     */
    description?: string;
    /**
     * The path of the container/folder that will trigger the pipeline.
     */
    folderPath: string;
    /**
     * The Azure Storage linked service reference.
     */
    linkedService: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * The max number of parallel files to handle when it is triggered.
     */
    maxConcurrency: number;
    /**
     * Pipelines that need to be started.
     */
    pipelines?: outputs.datafactory.v20170901preview.TriggerPipelineReferenceResponse[];
    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     */
    runtimeState: string;
    /**
     * Trigger type.
     * Expected value is 'BlobTrigger'.
     */
    type: "BlobTrigger";
}

/**
 * Linked service for Cassandra data source.
 */
export interface CassandraLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
     */
    authenticationType?: any;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Host name for connection. Type: string (or Expression with resultType string).
     */
    host: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password for authentication.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The port for the connection. Type: integer (or Expression with resultType integer).
     */
    port?: any;
    /**
     * Type of linked service.
     * Expected value is 'Cassandra'.
     */
    type: "Cassandra";
    /**
     * Username for authentication. Type: string (or Expression with resultType string).
     */
    username?: any;
}

/**
 * A copy activity source for a Cassandra database.
 */
export interface CassandraSourceResponse {
    /**
     * The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
     */
    consistencyLevel?: string;
    /**
     * Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'CassandraSource'.
     */
    type: "CassandraSource";
}

/**
 * The Cassandra database dataset.
 */
export interface CassandraTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
     */
    keyspace?: any;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * The table name of the Cassandra database. Type: string (or Expression with resultType string).
     */
    tableName?: any;
    /**
     * Type of dataset.
     * Expected value is 'CassandraTable'.
     */
    type: "CassandraTable";
}

/**
 * Concur Service linked service.
 */
export interface ConcurLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Application client_id supplied by Concur App Management.
     */
    clientId: any;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password corresponding to the user name that you provided in the username field.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'Concur'.
     */
    type: "Concur";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
    /**
     * The user name that you use to access Concur Service.
     */
    username: any;
}

/**
 * Concur Service dataset.
 */
export interface ConcurObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'ConcurObject'.
     */
    type: "ConcurObject";
}

/**
 * A copy activity Concur Service source.
 */
export interface ConcurSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'ConcurSource'.
     */
    type: "ConcurSource";
}

/**
 * Base class for all control activities like IfCondition, ForEach , Until.
 */
export interface ControlActivityResponse {
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Type of activity.
     * Expected value is 'Container'.
     */
    type: "Container";
}

/**
 * Copy activity.
 */
export interface CopyActivityResponse {
    /**
     * Maximum number of cloud data movement units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    cloudDataMovementUnits?: any;
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
     */
    enableSkipIncompatibleRow?: any;
    /**
     * Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
     */
    enableStaging?: any;
    /**
     * List of inputs for the activity.
     */
    inputs?: outputs.datafactory.v20170901preview.DatasetReferenceResponse[];
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * List of outputs for the activity.
     */
    outputs?: outputs.datafactory.v20170901preview.DatasetReferenceResponse[];
    /**
     * Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    parallelCopies?: any;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
     */
    redirectIncompatibleRowSettings?: outputs.datafactory.v20170901preview.RedirectIncompatibleRowSettingsResponse;
    /**
     * Copy activity sink.
     */
    sink: outputs.datafactory.v20170901preview.AzureDataLakeStoreSinkResponse | outputs.datafactory.v20170901preview.AzureQueueSinkResponse | outputs.datafactory.v20170901preview.AzureSearchIndexSinkResponse | outputs.datafactory.v20170901preview.AzureTableSinkResponse | outputs.datafactory.v20170901preview.BlobSinkResponse | outputs.datafactory.v20170901preview.DocumentDbCollectionSinkResponse | outputs.datafactory.v20170901preview.DynamicsSinkResponse | outputs.datafactory.v20170901preview.FileSystemSinkResponse | outputs.datafactory.v20170901preview.OdbcSinkResponse | outputs.datafactory.v20170901preview.OracleSinkResponse | outputs.datafactory.v20170901preview.SalesforceSinkResponse | outputs.datafactory.v20170901preview.SapCloudForCustomerSinkResponse | outputs.datafactory.v20170901preview.SqlDWSinkResponse | outputs.datafactory.v20170901preview.SqlSinkResponse;
    /**
     * Copy activity source.
     */
    source: outputs.datafactory.v20170901preview.AmazonMWSSourceResponse | outputs.datafactory.v20170901preview.AmazonRedshiftSourceResponse | outputs.datafactory.v20170901preview.AzureDataLakeStoreSourceResponse | outputs.datafactory.v20170901preview.AzureMySqlSourceResponse | outputs.datafactory.v20170901preview.AzurePostgreSqlSourceResponse | outputs.datafactory.v20170901preview.AzureTableSourceResponse | outputs.datafactory.v20170901preview.BlobSourceResponse | outputs.datafactory.v20170901preview.CassandraSourceResponse | outputs.datafactory.v20170901preview.ConcurSourceResponse | outputs.datafactory.v20170901preview.CouchbaseSourceResponse | outputs.datafactory.v20170901preview.DocumentDbCollectionSourceResponse | outputs.datafactory.v20170901preview.DrillSourceResponse | outputs.datafactory.v20170901preview.DynamicsSourceResponse | outputs.datafactory.v20170901preview.EloquaSourceResponse | outputs.datafactory.v20170901preview.FileSystemSourceResponse | outputs.datafactory.v20170901preview.GoogleBigQuerySourceResponse | outputs.datafactory.v20170901preview.GreenplumSourceResponse | outputs.datafactory.v20170901preview.HBaseSourceResponse | outputs.datafactory.v20170901preview.HdfsSourceResponse | outputs.datafactory.v20170901preview.HiveSourceResponse | outputs.datafactory.v20170901preview.HttpSourceResponse | outputs.datafactory.v20170901preview.HubspotSourceResponse | outputs.datafactory.v20170901preview.ImpalaSourceResponse | outputs.datafactory.v20170901preview.JiraSourceResponse | outputs.datafactory.v20170901preview.MagentoSourceResponse | outputs.datafactory.v20170901preview.MariaDBSourceResponse | outputs.datafactory.v20170901preview.MarketoSourceResponse | outputs.datafactory.v20170901preview.MongoDbSourceResponse | outputs.datafactory.v20170901preview.NetezzaSourceResponse | outputs.datafactory.v20170901preview.OracleSourceResponse | outputs.datafactory.v20170901preview.PaypalSourceResponse | outputs.datafactory.v20170901preview.PhoenixSourceResponse | outputs.datafactory.v20170901preview.PrestoSourceResponse | outputs.datafactory.v20170901preview.QuickBooksSourceResponse | outputs.datafactory.v20170901preview.RelationalSourceResponse | outputs.datafactory.v20170901preview.ResponsysSourceResponse | outputs.datafactory.v20170901preview.SalesforceMarketingCloudSourceResponse | outputs.datafactory.v20170901preview.SalesforceSourceResponse | outputs.datafactory.v20170901preview.SapCloudForCustomerSourceResponse | outputs.datafactory.v20170901preview.SapEccSourceResponse | outputs.datafactory.v20170901preview.ServiceNowSourceResponse | outputs.datafactory.v20170901preview.ShopifySourceResponse | outputs.datafactory.v20170901preview.SparkSourceResponse | outputs.datafactory.v20170901preview.SqlDWSourceResponse | outputs.datafactory.v20170901preview.SqlSourceResponse | outputs.datafactory.v20170901preview.SquareSourceResponse | outputs.datafactory.v20170901preview.VerticaSourceResponse | outputs.datafactory.v20170901preview.WebSourceResponse | outputs.datafactory.v20170901preview.XeroSourceResponse | outputs.datafactory.v20170901preview.ZohoSourceResponse;
    /**
     * Specifies interim staging settings when EnableStaging is true.
     */
    stagingSettings?: outputs.datafactory.v20170901preview.StagingSettingsResponse;
    /**
     * Copy activity translator. If not specified, tabular translator is used.
     */
    translator?: any;
    /**
     * Type of activity.
     * Expected value is 'Copy'.
     */
    type: "Copy";
}

/**
 * Microsoft Azure Cosmos Database (CosmosDB) linked service.
 */
export interface CosmosDbLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'CosmosDb'.
     */
    type: "CosmosDb";
}

/**
 * Couchbase server linked service.
 */
export interface CouchbaseLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString?: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Couchbase'.
     */
    type: "Couchbase";
}

/**
 * A copy activity Couchbase server source.
 */
export interface CouchbaseSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'CouchbaseSource'.
     */
    type: "CouchbaseSource";
}

/**
 * Couchbase server dataset.
 */
export interface CouchbaseTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'CouchbaseTable'.
     */
    type: "CouchbaseTable";
}

/**
 * Reference objects for custom activity
 */
export interface CustomActivityReferenceObjectResponse {
    /**
     * Dataset references.
     */
    datasets?: outputs.datafactory.v20170901preview.DatasetReferenceResponse[];
    /**
     * Linked service references.
     */
    linkedServices?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse[];
}

/**
 * Custom activity type.
 */
export interface CustomActivityResponse {
    /**
     * Command for custom activity Type: string (or Expression with resultType string).
     */
    command: any;
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
     */
    extendedProperties?: {[key: string]: any};
    /**
     * Folder path for resource files Type: string (or Expression with resultType string).
     */
    folderPath?: any;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Reference objects
     */
    referenceObjects?: outputs.datafactory.v20170901preview.CustomActivityReferenceObjectResponse;
    /**
     * Resource linked service reference.
     */
    resourceLinkedService?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Type of activity.
     * Expected value is 'Custom'.
     */
    type: "Custom";
}

/**
 * Custom linked service.
 */
export interface CustomDataSourceLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'CustomDataSource'.
     */
    type: "CustomDataSource";
}

/**
 * The custom dataset.
 */
export interface CustomDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'CustomDataset'.
     */
    type: "CustomDataset";
}

/**
 * Data Lake Analytics U-SQL activity.
 */
export interface DataLakeAnalyticsUSQLActivityResponse {
    /**
     * Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
     */
    compilationMode?: any;
    /**
     * The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
     */
    degreeOfParallelism?: any;
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Parameters for U-SQL job request.
     */
    parameters?: {[key: string]: any};
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
     */
    priority?: any;
    /**
     * Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
     */
    runtimeVersion?: any;
    /**
     * Script linked service reference.
     */
    scriptLinkedService: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
     */
    scriptPath: any;
    /**
     * Type of activity.
     * Expected value is 'DataLakeAnalyticsU-SQL'.
     */
    type: "DataLakeAnalyticsU-SQL";
}

/**
 * DatabricksNotebook activity.
 */
export interface DatabricksNotebookActivityResponse {
    /**
     * Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used.
     */
    baseParameters?: {[key: string]: any};
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string).
     */
    notebookPath: any;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Type of activity.
     * Expected value is 'DatabricksNotebook'.
     */
    type: "DatabricksNotebook";
}

/**
 * The BZip2 compression method used on a dataset.
 */
export interface DatasetBZip2CompressionResponse {
    /**
     * Type of dataset compression.
     * Expected value is 'BZip2'.
     */
    type: "BZip2";
}

/**
 * The Deflate compression method used on a dataset.
 */
export interface DatasetDeflateCompressionResponse {
    /**
     * The Deflate compression level.
     */
    level?: string;
    /**
     * Type of dataset compression.
     * Expected value is 'Deflate'.
     */
    type: "Deflate";
}

/**
 * The GZip compression method used on a dataset.
 */
export interface DatasetGZipCompressionResponse {
    /**
     * The GZip compression level.
     */
    level?: string;
    /**
     * Type of dataset compression.
     * Expected value is 'GZip'.
     */
    type: "GZip";
}

/**
 * Dataset reference type.
 */
export interface DatasetReferenceResponse {
    /**
     * Arguments for dataset.
     */
    parameters?: {[key: string]: any};
    /**
     * Reference dataset name.
     */
    referenceName: string;
    /**
     * Dataset reference type.
     */
    type: string;
}

/**
 * The ZipDeflate compression method used on a dataset.
 */
export interface DatasetZipDeflateCompressionResponse {
    /**
     * The ZipDeflate compression level.
     */
    level?: string;
    /**
     * Type of dataset compression.
     * Expected value is 'ZipDeflate'.
     */
    type: "ZipDeflate";
}

/**
 * Linked service for DB2 data source.
 */
export interface Db2LinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * AuthenticationType to be used for connection.
     */
    authenticationType?: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Database name for connection. Type: string (or Expression with resultType string).
     */
    database: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password for authentication.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Server name for connection. Type: string (or Expression with resultType string).
     */
    server: any;
    /**
     * Type of linked service.
     * Expected value is 'Db2'.
     */
    type: "Db2";
    /**
     * Username for authentication. Type: string (or Expression with resultType string).
     */
    username?: any;
}

/**
 * Distcp settings.
 */
export interface DistcpSettingsResponse {
    /**
     * Specifies the Distcp options. Type: string (or Expression with resultType string).
     */
    distcpOptions?: any;
    /**
     * Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
     */
    resourceManagerEndpoint: any;
    /**
     * Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string).
     */
    tempScriptPath: any;
}

/**
 * Microsoft Azure Document Database Collection dataset.
 */
export interface DocumentDbCollectionDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Document Database collection name. Type: string (or Expression with resultType string).
     */
    collectionName: any;
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'DocumentDbCollection'.
     */
    type: "DocumentDbCollection";
}

/**
 * A copy activity Document Database Collection sink.
 */
export interface DocumentDbCollectionSinkResponse {
    /**
     * Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string).
     */
    nestingSeparator?: any;
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'DocumentDbCollectionSink'.
     */
    type: "DocumentDbCollectionSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
}

/**
 * A copy activity Document Database Collection source.
 */
export interface DocumentDbCollectionSourceResponse {
    /**
     * Nested properties separator. Type: string (or Expression with resultType string).
     */
    nestingSeparator?: any;
    /**
     * Documents query. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'DocumentDbCollectionSource'.
     */
    type: "DocumentDbCollectionSource";
}

/**
 * Drill server linked service.
 */
export interface DrillLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString?: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Drill'.
     */
    type: "Drill";
}

/**
 * A copy activity Drill server source.
 */
export interface DrillSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'DrillSource'.
     */
    type: "DrillSource";
}

/**
 * Drill server dataset.
 */
export interface DrillTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'DrillTable'.
     */
    type: "DrillTable";
}

/**
 * The Dynamics entity dataset.
 */
export interface DynamicsEntityDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * The logical name of the entity. Type: string (or Expression with resultType string).
     */
    entityName?: any;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'DynamicsEntity'.
     */
    type: "DynamicsEntity";
}

/**
 * Dynamics linked service.
 */
export interface DynamicsLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. Type: string (or Expression with resultType string).
     */
    authenticationType: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
     */
    deploymentType: string;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
     */
    hostName?: any;
    /**
     * The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
     */
    organizationName?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password to access the Dynamics instance.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    port?: any;
    /**
     * The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
     */
    serviceUri?: any;
    /**
     * Type of linked service.
     * Expected value is 'Dynamics'.
     */
    type: "Dynamics";
    /**
     * User name to access the Dynamics instance. Type: string (or Expression with resultType string).
     */
    username: any;
}

/**
 * A copy activity Dynamics sink.
 */
export interface DynamicsSinkResponse {
    /**
     * The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
     */
    ignoreNullValues?: any;
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'DynamicsSink'.
     */
    type: "DynamicsSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
    /**
     * The write behavior for the operation.
     */
    writeBehavior: string;
}

/**
 * A copy activity Dynamics source.
 */
export interface DynamicsSourceResponse {
    /**
     * FetchXML is a proprietary query language that is used in Microsoft Dynamics (online & on-premises). Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'DynamicsSource'.
     */
    type: "DynamicsSource";
}

/**
 * Eloqua server linked service.
 */
export interface EloquaLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The endpoint of the Eloqua server. (i.e. eloqua.example.com)
     */
    endpoint: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password corresponding to the user name.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'Eloqua'.
     */
    type: "Eloqua";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
    /**
     * The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
     */
    username: any;
}

/**
 * Eloqua server dataset.
 */
export interface EloquaObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'EloquaObject'.
     */
    type: "EloquaObject";
}

/**
 * A copy activity Eloqua server source.
 */
export interface EloquaSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'EloquaSource'.
     */
    type: "EloquaSource";
}

/**
 * The entity reference.
 */
export interface EntityReferenceResponse {
    /**
     * The name of this referenced entity.
     */
    referenceName?: string;
    /**
     * The type of this referenced entity.
     */
    type?: string;
}

/**
 * Execute pipeline activity.
 */
export interface ExecutePipelineActivityResponse {
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Pipeline parameters.
     */
    parameters?: {[key: string]: any};
    /**
     * Pipeline reference.
     */
    pipeline: outputs.datafactory.v20170901preview.PipelineReferenceResponse;
    /**
     * Type of activity.
     * Expected value is 'ExecutePipeline'.
     */
    type: "ExecutePipeline";
    /**
     * Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
     */
    waitOnCompletion?: boolean;
}

/**
 * Execute SSIS package activity.
 */
export interface ExecuteSSISPackageActivityResponse {
    /**
     * The integration runtime reference.
     */
    connectVia: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
     */
    environmentPath?: any;
    /**
     * The package execution credential.
     */
    executionCredential?: outputs.datafactory.v20170901preview.SSISExecutionCredentialResponse;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * SSIS package execution log location.
     */
    logLocation?: outputs.datafactory.v20170901preview.SSISLogLocationResponse;
    /**
     * The logging level of SSIS package execution. Type: string (or Expression with resultType string).
     */
    loggingLevel?: any;
    /**
     * Activity name.
     */
    name: string;
    /**
     * The package level connection managers to execute the SSIS package.
     */
    packageConnectionManagers?: {[key: string]: {[key: string]: outputs.datafactory.v20170901preview.SSISExecutionParameterResponse}};
    /**
     * SSIS package location.
     */
    packageLocation: outputs.datafactory.v20170901preview.SSISPackageLocationResponse;
    /**
     * The package level parameters to execute the SSIS package.
     */
    packageParameters?: {[key: string]: outputs.datafactory.v20170901preview.SSISExecutionParameterResponse};
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * The project level connection managers to execute the SSIS package.
     */
    projectConnectionManagers?: {[key: string]: {[key: string]: outputs.datafactory.v20170901preview.SSISExecutionParameterResponse}};
    /**
     * The project level parameters to execute the SSIS package.
     */
    projectParameters?: {[key: string]: outputs.datafactory.v20170901preview.SSISExecutionParameterResponse};
    /**
     * The property overrides to execute the SSIS package.
     */
    propertyOverrides?: {[key: string]: outputs.datafactory.v20170901preview.SSISPropertyOverrideResponse};
    /**
     * Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType string).
     */
    runtime?: any;
    /**
     * Type of activity.
     * Expected value is 'ExecuteSSISPackage'.
     */
    type: "ExecuteSSISPackage";
}

/**
 * Base class for all execution activities.
 */
export interface ExecutionActivityResponse {
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Type of activity.
     * Expected value is 'Execution'.
     */
    type: "Execution";
}

/**
 * Azure Data Factory expression definition.
 */
export interface ExpressionResponse {
    /**
     * Expression type.
     */
    type: string;
    /**
     * Expression value.
     */
    value: string;
}

/**
 * Identity properties of the factory resource.
 */
export interface FactoryIdentityResponse {
    /**
     * The principal id of the identity.
     */
    principalId: string;
    /**
     * The client tenant id of the identity.
     */
    tenantId: string;
    /**
     * The identity type. Currently the only supported type is 'SystemAssigned'.
     */
    type: string;
}

/**
 * Factory's VSTS repo information.
 */
export interface FactoryVSTSConfigurationResponse {
    /**
     * VSTS account name.
     */
    accountName?: string;
    /**
     * VSTS collaboration branch.
     */
    collaborationBranch?: string;
    /**
     * VSTS last commit id.
     */
    lastCommitId?: string;
    /**
     * VSTS project name.
     */
    projectName?: string;
    /**
     * VSTS repository name.
     */
    repositoryName?: string;
    /**
     * VSTS root folder.
     */
    rootFolder?: string;
    /**
     * VSTS tenant id.
     */
    tenantId?: string;
}

/**
 * File system linked service.
 */
export interface FileServerLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Host name of the server. Type: string (or Expression with resultType string).
     */
    host: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password to logon the server.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'FileServer'.
     */
    type: "FileServer";
    /**
     * User ID to logon the server. Type: string (or Expression with resultType string).
     */
    userId?: any;
}

/**
 * An on-premises file system dataset.
 */
export interface FileShareDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The data compression method used for the file system.
     */
    compression?: outputs.datafactory.v20170901preview.DatasetBZip2CompressionResponse | outputs.datafactory.v20170901preview.DatasetDeflateCompressionResponse | outputs.datafactory.v20170901preview.DatasetGZipCompressionResponse | outputs.datafactory.v20170901preview.DatasetZipDeflateCompressionResponse;
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
     */
    fileFilter?: any;
    /**
     * The name of the on-premises file system. Type: string (or Expression with resultType string).
     */
    fileName?: any;
    /**
     * The path of the on-premises file system. Type: string (or Expression with resultType string).
     */
    folderPath?: any;
    /**
     * The format of the files.
     */
    format?: outputs.datafactory.v20170901preview.AvroFormatResponse | outputs.datafactory.v20170901preview.JsonFormatResponse | outputs.datafactory.v20170901preview.OrcFormatResponse | outputs.datafactory.v20170901preview.ParquetFormatResponse | outputs.datafactory.v20170901preview.TextFormatResponse;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'FileShare'.
     */
    type: "FileShare";
}

/**
 * A copy activity file system sink.
 */
export interface FileSystemSinkResponse {
    /**
     * The type of copy behavior for copy sink.
     */
    copyBehavior?: any;
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'FileSystemSink'.
     */
    type: "FileSystemSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
}

/**
 * A copy activity file system source.
 */
export interface FileSystemSourceResponse {
    /**
     * If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
     */
    recursive?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'FileSystemSource'.
     */
    type: "FileSystemSource";
}

/**
 * Filter and return results from input array based on the conditions.
 */
export interface FilterActivityResponse {
    /**
     * Condition to be used for filtering the input.
     */
    condition: outputs.datafactory.v20170901preview.ExpressionResponse;
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Input array on which filter should be applied.
     */
    items: outputs.datafactory.v20170901preview.ExpressionResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Type of activity.
     * Expected value is 'Filter'.
     */
    type: "Filter";
}

/**
 * This activity is used for iterating over a collection and execute given activities.
 */
export interface ForEachActivityResponse {
    /**
     * List of activities to execute .
     */
    activities: (outputs.datafactory.v20170901preview.AzureMLBatchExecutionActivityResponse | outputs.datafactory.v20170901preview.AzureMLUpdateResourceActivityResponse | outputs.datafactory.v20170901preview.ControlActivityResponse | outputs.datafactory.v20170901preview.CopyActivityResponse | outputs.datafactory.v20170901preview.CustomActivityResponse | outputs.datafactory.v20170901preview.DataLakeAnalyticsUSQLActivityResponse | outputs.datafactory.v20170901preview.DatabricksNotebookActivityResponse | outputs.datafactory.v20170901preview.ExecutePipelineActivityResponse | outputs.datafactory.v20170901preview.ExecuteSSISPackageActivityResponse | outputs.datafactory.v20170901preview.ExecutionActivityResponse | outputs.datafactory.v20170901preview.FilterActivityResponse | outputs.datafactory.v20170901preview.ForEachActivityResponse | outputs.datafactory.v20170901preview.GetMetadataActivityResponse | outputs.datafactory.v20170901preview.HDInsightHiveActivityResponse | outputs.datafactory.v20170901preview.HDInsightMapReduceActivityResponse | outputs.datafactory.v20170901preview.HDInsightPigActivityResponse | outputs.datafactory.v20170901preview.HDInsightSparkActivityResponse | outputs.datafactory.v20170901preview.HDInsightStreamingActivityResponse | outputs.datafactory.v20170901preview.IfConditionActivityResponse | outputs.datafactory.v20170901preview.LookupActivityResponse | outputs.datafactory.v20170901preview.SqlServerStoredProcedureActivityResponse | outputs.datafactory.v20170901preview.UntilActivityResponse | outputs.datafactory.v20170901preview.WaitActivityResponse | outputs.datafactory.v20170901preview.WebActivityResponse)[];
    /**
     * Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
     */
    batchCount?: number;
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Should the loop be executed in sequence or in parallel (max 50)
     */
    isSequential?: boolean;
    /**
     * Collection to iterate.
     */
    items: outputs.datafactory.v20170901preview.ExpressionResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Type of activity.
     * Expected value is 'ForEach'.
     */
    type: "ForEach";
}

/**
 * A FTP server Linked Service.
 */
export interface FtpServerLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The authentication type to be used to connect to the FTP server.
     */
    authenticationType?: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
     */
    enableServerCertificateValidation?: any;
    /**
     * If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
     */
    enableSsl?: any;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Host name of the FTP server. Type: string (or Expression with resultType string).
     */
    host: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password to logon the FTP server.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    port?: any;
    /**
     * Type of linked service.
     * Expected value is 'FtpServer'.
     */
    type: "FtpServer";
    /**
     * Username to logon the FTP server. Type: string (or Expression with resultType string).
     */
    userName?: any;
}

/**
 * Activity to get metadata of dataset
 */
export interface GetMetadataActivityResponse {
    /**
     * GetMetadata activity dataset reference.
     */
    dataset: outputs.datafactory.v20170901preview.DatasetReferenceResponse;
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Fields of metadata to get from dataset.
     */
    fieldList?: any[];
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Type of activity.
     * Expected value is 'GetMetadata'.
     */
    type: "GetMetadata";
}

/**
 * Google BigQuery service linked service.
 */
export interface GoogleBigQueryLinkedServiceResponse {
    /**
     * A comma-separated list of public BigQuery projects to access.
     */
    additionalProjects?: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
     */
    authenticationType: string;
    /**
     * The client id of the google application used to acquire the refresh token.
     */
    clientId?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The client secret of the google application used to acquire the refresh token.
     */
    clientSecret?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
     */
    email?: any;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
     */
    keyFilePath?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The default BigQuery project to query against.
     */
    project: any;
    /**
     * The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
     */
    refreshToken?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
     */
    requestGoogleDriveScope?: any;
    /**
     * The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
     */
    trustedCertPath?: any;
    /**
     * Type of linked service.
     * Expected value is 'GoogleBigQuery'.
     */
    type: "GoogleBigQuery";
    /**
     * Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
     */
    useSystemTrustStore?: any;
}

/**
 * Google BigQuery service dataset.
 */
export interface GoogleBigQueryObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'GoogleBigQueryObject'.
     */
    type: "GoogleBigQueryObject";
}

/**
 * A copy activity Google BigQuery service source.
 */
export interface GoogleBigQuerySourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'GoogleBigQuerySource'.
     */
    type: "GoogleBigQuerySource";
}

/**
 * Greenplum Database linked service.
 */
export interface GreenplumLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString?: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Greenplum'.
     */
    type: "Greenplum";
}

/**
 * A copy activity Greenplum Database source.
 */
export interface GreenplumSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'GreenplumSource'.
     */
    type: "GreenplumSource";
}

/**
 * Greenplum Database dataset.
 */
export interface GreenplumTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'GreenplumTable'.
     */
    type: "GreenplumTable";
}

/**
 * HBase server linked service.
 */
export interface HBaseLinkedServiceResponse {
    /**
     * Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
     */
    allowHostNameCNMismatch?: any;
    /**
     * Specifies whether to allow self-signed certificates from the server. The default value is false.
     */
    allowSelfSignedServerCert?: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The authentication mechanism to use to connect to the HBase server.
     */
    authenticationType: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * Specifies whether the connections to the server are encrypted using SSL. The default value is false.
     */
    enableSsl?: any;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The IP address or host name of the HBase server. (i.e. 192.168.222.160)
     */
    host: any;
    /**
     * The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
     */
    httpPath?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password corresponding to the user name.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
     */
    port?: any;
    /**
     * The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
     */
    trustedCertPath?: any;
    /**
     * Type of linked service.
     * Expected value is 'HBase'.
     */
    type: "HBase";
    /**
     * The user name used to connect to the HBase instance.
     */
    username?: any;
}

/**
 * HBase server dataset.
 */
export interface HBaseObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'HBaseObject'.
     */
    type: "HBaseObject";
}

/**
 * A copy activity HBase server source.
 */
export interface HBaseSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'HBaseSource'.
     */
    type: "HBaseSource";
}

/**
 * HDInsight Hive activity type.
 */
export interface HDInsightHiveActivityResponse {
    /**
     * User specified arguments to HDInsightActivity.
     */
    arguments?: any[];
    /**
     * Allows user to specify defines for Hive job request.
     */
    defines?: {[key: string]: any};
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Debug info option.
     */
    getDebugInfo?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Script linked service reference.
     */
    scriptLinkedService?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Script path. Type: string (or Expression with resultType string).
     */
    scriptPath?: any;
    /**
     * Storage linked service references.
     */
    storageLinkedServices?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse[];
    /**
     * Type of activity.
     * Expected value is 'HDInsightHive'.
     */
    type: "HDInsightHive";
}

/**
 * HDInsight linked service.
 */
export interface HDInsightLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * HDInsight cluster URI. Type: string (or Expression with resultType string).
     */
    clusterUri: any;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * A reference to the Azure SQL linked service that points to the HCatalog database.
     */
    hcatalogLinkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * The Azure Storage linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * HDInsight cluster password.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'HDInsight'.
     */
    type: "HDInsight";
    /**
     * HDInsight cluster user name. Type: string (or Expression with resultType string).
     */
    userName?: any;
}

/**
 * HDInsight MapReduce activity type.
 */
export interface HDInsightMapReduceActivityResponse {
    /**
     * User specified arguments to HDInsightActivity.
     */
    arguments?: any[];
    /**
     * Class name. Type: string (or Expression with resultType string).
     */
    className: any;
    /**
     * Allows user to specify defines for the MapReduce job request.
     */
    defines?: {[key: string]: any};
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Debug info option.
     */
    getDebugInfo?: string;
    /**
     * Jar path. Type: string (or Expression with resultType string).
     */
    jarFilePath: any;
    /**
     * Jar libs.
     */
    jarLibs?: any[];
    /**
     * Jar linked service reference.
     */
    jarLinkedService?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Storage linked service references.
     */
    storageLinkedServices?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse[];
    /**
     * Type of activity.
     * Expected value is 'HDInsightMapReduce'.
     */
    type: "HDInsightMapReduce";
}

/**
 * HDInsight ondemand linked service.
 */
export interface HDInsightOnDemandLinkedServiceResponse {
    /**
     * Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
     */
    additionalLinkedServiceNames?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse[];
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
     */
    clusterNamePrefix?: any;
    /**
     * The password to access the cluster.
     */
    clusterPassword?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The resource group where the cluster belongs. Type: string (or Expression with resultType string).
     */
    clusterResourceGroup: any;
    /**
     * Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
     */
    clusterSize: any;
    /**
     * The password to SSH remotely connect cluster’s node (for Linux).
     */
    clusterSshPassword?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
     */
    clusterSshUserName?: any;
    /**
     * The cluster type. Type: string (or Expression with resultType string).
     */
    clusterType?: any;
    /**
     * The username to access the cluster. Type: string (or Expression with resultType string).
     */
    clusterUserName?: any;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
     */
    coreConfiguration?: any;
    /**
     * Specifies the size of the data node for the HDInsight cluster.
     */
    dataNodeSize?: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
     */
    hBaseConfiguration?: any;
    /**
     * The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
     */
    hcatalogLinkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
     */
    hdfsConfiguration?: any;
    /**
     * Specifies the size of the head node for the HDInsight cluster.
     */
    headNodeSize?: any;
    /**
     * Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
     */
    hiveConfiguration?: any;
    /**
     * The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
     */
    hostSubscriptionId: any;
    /**
     * Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
     */
    mapReduceConfiguration?: any;
    /**
     * Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
     */
    oozieConfiguration?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
     */
    servicePrincipalId?: any;
    /**
     * The key for the service principal id.
     */
    servicePrincipalKey?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
     */
    sparkVersion?: any;
    /**
     * Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
     */
    stormConfiguration?: any;
    /**
     * The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
     */
    tenant: any;
    /**
     * The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
     */
    timeToLive: any;
    /**
     * Type of linked service.
     * Expected value is 'HDInsightOnDemand'.
     */
    type: "HDInsightOnDemand";
    /**
     * Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
     */
    version: any;
    /**
     * Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
     */
    yarnConfiguration?: any;
    /**
     * Specifies the size of the Zoo Keeper node for the HDInsight cluster.
     */
    zookeeperNodeSize?: any;
}

/**
 * HDInsight Pig activity type.
 */
export interface HDInsightPigActivityResponse {
    /**
     * User specified arguments to HDInsightActivity.
     */
    arguments?: any[];
    /**
     * Allows user to specify defines for Pig job request.
     */
    defines?: {[key: string]: any};
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Debug info option.
     */
    getDebugInfo?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Script linked service reference.
     */
    scriptLinkedService?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Script path. Type: string (or Expression with resultType string).
     */
    scriptPath?: any;
    /**
     * Storage linked service references.
     */
    storageLinkedServices?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse[];
    /**
     * Type of activity.
     * Expected value is 'HDInsightPig'.
     */
    type: "HDInsightPig";
}

/**
 * HDInsight Spark activity.
 */
export interface HDInsightSparkActivityResponse {
    /**
     * The user-specified arguments to HDInsightSparkActivity.
     */
    arguments?: any[];
    /**
     * The application's Java/Spark main class.
     */
    className?: string;
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
     */
    entryFilePath: any;
    /**
     * Debug info option.
     */
    getDebugInfo?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
     */
    proxyUser?: any;
    /**
     * The root path in 'sparkJobLinkedService' for all the job’s files. Type: string (or Expression with resultType string).
     */
    rootPath: any;
    /**
     * Spark configuration property.
     */
    sparkConfig?: {[key: string]: any};
    /**
     * The storage linked service for uploading the entry file and dependencies, and for receiving logs.
     */
    sparkJobLinkedService?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Type of activity.
     * Expected value is 'HDInsightSpark'.
     */
    type: "HDInsightSpark";
}

/**
 * HDInsight streaming activity type.
 */
export interface HDInsightStreamingActivityResponse {
    /**
     * User specified arguments to HDInsightActivity.
     */
    arguments?: any[];
    /**
     * Combiner executable name. Type: string (or Expression with resultType string).
     */
    combiner?: any;
    /**
     * Command line environment values.
     */
    commandEnvironment?: any[];
    /**
     * Allows user to specify defines for streaming job request.
     */
    defines?: {[key: string]: any};
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Linked service reference where the files are located.
     */
    fileLinkedService?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Paths to streaming job files. Can be directories.
     */
    filePaths: any[];
    /**
     * Debug info option.
     */
    getDebugInfo?: string;
    /**
     * Input blob path. Type: string (or Expression with resultType string).
     */
    input: any;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Mapper executable name. Type: string (or Expression with resultType string).
     */
    mapper: any;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Output blob path. Type: string (or Expression with resultType string).
     */
    output: any;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Reducer executable name. Type: string (or Expression with resultType string).
     */
    reducer: any;
    /**
     * Storage linked service references.
     */
    storageLinkedServices?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse[];
    /**
     * Type of activity.
     * Expected value is 'HDInsightStreaming'.
     */
    type: "HDInsightStreaming";
}

/**
 * Hadoop Distributed File System (HDFS) linked service.
 */
export interface HdfsLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
     */
    authenticationType?: any;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password for Windows authentication.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'Hdfs'.
     */
    type: "Hdfs";
    /**
     * The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
     */
    url: any;
    /**
     * User name for Windows authentication. Type: string (or Expression with resultType string).
     */
    userName?: any;
}

/**
 * A copy activity HDFS source.
 */
export interface HdfsSourceResponse {
    /**
     * Specifies Distcp-related settings.
     */
    distcpSettings?: outputs.datafactory.v20170901preview.DistcpSettingsResponse;
    /**
     * If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
     */
    recursive?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'HdfsSource'.
     */
    type: "HdfsSource";
}

/**
 * Hive Server linked service.
 */
export interface HiveLinkedServiceResponse {
    /**
     * Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
     */
    allowHostNameCNMismatch?: any;
    /**
     * Specifies whether to allow self-signed certificates from the server. The default value is false.
     */
    allowSelfSignedServerCert?: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The authentication method used to access the Hive server.
     */
    authenticationType: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * Specifies whether the connections to the server are encrypted using SSL. The default value is false.
     */
    enableSsl?: any;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
     */
    host: any;
    /**
     * The partial URL corresponding to the Hive server.
     */
    httpPath?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password corresponding to the user name that you provided in the Username field
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The TCP port that the Hive server uses to listen for client connections.
     */
    port?: any;
    /**
     * The type of Hive server.
     */
    serverType?: string;
    /**
     * true to indicate using the ZooKeeper service, false not.
     */
    serviceDiscoveryMode?: any;
    /**
     * The transport protocol to use in the Thrift layer.
     */
    thriftTransportProtocol?: string;
    /**
     * The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
     */
    trustedCertPath?: any;
    /**
     * Type of linked service.
     * Expected value is 'Hive'.
     */
    type: "Hive";
    /**
     * Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
     */
    useNativeQuery?: any;
    /**
     * Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
     */
    useSystemTrustStore?: any;
    /**
     * The user name that you use to access Hive Server.
     */
    username?: any;
    /**
     * The namespace on ZooKeeper under which Hive Server 2 nodes are added.
     */
    zooKeeperNameSpace?: any;
}

/**
 * Hive Server dataset.
 */
export interface HiveObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'HiveObject'.
     */
    type: "HiveObject";
}

/**
 * A copy activity Hive Server source.
 */
export interface HiveSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'HiveSource'.
     */
    type: "HiveSource";
}

/**
 * A file in an HTTP web server.
 */
export interface HttpDatasetResponse {
    /**
     * The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
     * ...
     * request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
     */
    additionalHeaders?: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The data compression method used on files.
     */
    compression?: outputs.datafactory.v20170901preview.DatasetBZip2CompressionResponse | outputs.datafactory.v20170901preview.DatasetDeflateCompressionResponse | outputs.datafactory.v20170901preview.DatasetGZipCompressionResponse | outputs.datafactory.v20170901preview.DatasetZipDeflateCompressionResponse;
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * The format of files.
     */
    format?: outputs.datafactory.v20170901preview.AvroFormatResponse | outputs.datafactory.v20170901preview.JsonFormatResponse | outputs.datafactory.v20170901preview.OrcFormatResponse | outputs.datafactory.v20170901preview.ParquetFormatResponse | outputs.datafactory.v20170901preview.TextFormatResponse;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
     */
    relativeUrl?: any;
    /**
     * The body for the HTTP request. Type: string (or Expression with resultType string).
     */
    requestBody?: any;
    /**
     * The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
     */
    requestMethod?: any;
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'HttpFile'.
     */
    type: "HttpFile";
}

/**
 * Linked service for an HTTP source.
 */
export interface HttpLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The authentication type to be used to connect to the HTTP server.
     */
    authenticationType?: string;
    /**
     * Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
     */
    certThumbprint?: any;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
     */
    embeddedCertData?: any;
    /**
     * If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
     */
    enableServerCertificateValidation?: any;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'HttpServer'.
     */
    type: "HttpServer";
    /**
     * The base URL of the HTTP endpoint, e.g. https://www.microsoft.com. Type: string (or Expression with resultType string).
     */
    url: any;
    /**
     * User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
     */
    userName?: any;
}

/**
 * A copy activity source for an HTTP file.
 */
export interface HttpSourceResponse {
    /**
     * Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    httpRequestTimeout?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'HttpSource'.
     */
    type: "HttpSource";
}

/**
 * Hubspot Service linked service.
 */
export interface HubspotLinkedServiceResponse {
    /**
     * The access token obtained when initially authenticating your OAuth integration.
     */
    accessToken?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The client ID associated with your Hubspot application.
     */
    clientId: any;
    /**
     * The client secret associated with your Hubspot application.
     */
    clientSecret?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The refresh token obtained when initially authenticating your OAuth integration.
     */
    refreshToken?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'Hubspot'.
     */
    type: "Hubspot";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
}

/**
 * Hubspot Service dataset.
 */
export interface HubspotObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'HubspotObject'.
     */
    type: "HubspotObject";
}

/**
 * A copy activity Hubspot Service source.
 */
export interface HubspotSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'HubspotSource'.
     */
    type: "HubspotSource";
}

/**
 * This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
 */
export interface IfConditionActivityResponse {
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
     */
    expression: outputs.datafactory.v20170901preview.ExpressionResponse;
    /**
     * List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
     */
    ifFalseActivities?: (outputs.datafactory.v20170901preview.AzureMLBatchExecutionActivityResponse | outputs.datafactory.v20170901preview.AzureMLUpdateResourceActivityResponse | outputs.datafactory.v20170901preview.ControlActivityResponse | outputs.datafactory.v20170901preview.CopyActivityResponse | outputs.datafactory.v20170901preview.CustomActivityResponse | outputs.datafactory.v20170901preview.DataLakeAnalyticsUSQLActivityResponse | outputs.datafactory.v20170901preview.DatabricksNotebookActivityResponse | outputs.datafactory.v20170901preview.ExecutePipelineActivityResponse | outputs.datafactory.v20170901preview.ExecuteSSISPackageActivityResponse | outputs.datafactory.v20170901preview.ExecutionActivityResponse | outputs.datafactory.v20170901preview.FilterActivityResponse | outputs.datafactory.v20170901preview.ForEachActivityResponse | outputs.datafactory.v20170901preview.GetMetadataActivityResponse | outputs.datafactory.v20170901preview.HDInsightHiveActivityResponse | outputs.datafactory.v20170901preview.HDInsightMapReduceActivityResponse | outputs.datafactory.v20170901preview.HDInsightPigActivityResponse | outputs.datafactory.v20170901preview.HDInsightSparkActivityResponse | outputs.datafactory.v20170901preview.HDInsightStreamingActivityResponse | outputs.datafactory.v20170901preview.IfConditionActivityResponse | outputs.datafactory.v20170901preview.LookupActivityResponse | outputs.datafactory.v20170901preview.SqlServerStoredProcedureActivityResponse | outputs.datafactory.v20170901preview.UntilActivityResponse | outputs.datafactory.v20170901preview.WaitActivityResponse | outputs.datafactory.v20170901preview.WebActivityResponse)[];
    /**
     * List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
     */
    ifTrueActivities?: (outputs.datafactory.v20170901preview.AzureMLBatchExecutionActivityResponse | outputs.datafactory.v20170901preview.AzureMLUpdateResourceActivityResponse | outputs.datafactory.v20170901preview.ControlActivityResponse | outputs.datafactory.v20170901preview.CopyActivityResponse | outputs.datafactory.v20170901preview.CustomActivityResponse | outputs.datafactory.v20170901preview.DataLakeAnalyticsUSQLActivityResponse | outputs.datafactory.v20170901preview.DatabricksNotebookActivityResponse | outputs.datafactory.v20170901preview.ExecutePipelineActivityResponse | outputs.datafactory.v20170901preview.ExecuteSSISPackageActivityResponse | outputs.datafactory.v20170901preview.ExecutionActivityResponse | outputs.datafactory.v20170901preview.FilterActivityResponse | outputs.datafactory.v20170901preview.ForEachActivityResponse | outputs.datafactory.v20170901preview.GetMetadataActivityResponse | outputs.datafactory.v20170901preview.HDInsightHiveActivityResponse | outputs.datafactory.v20170901preview.HDInsightMapReduceActivityResponse | outputs.datafactory.v20170901preview.HDInsightPigActivityResponse | outputs.datafactory.v20170901preview.HDInsightSparkActivityResponse | outputs.datafactory.v20170901preview.HDInsightStreamingActivityResponse | outputs.datafactory.v20170901preview.IfConditionActivityResponse | outputs.datafactory.v20170901preview.LookupActivityResponse | outputs.datafactory.v20170901preview.SqlServerStoredProcedureActivityResponse | outputs.datafactory.v20170901preview.UntilActivityResponse | outputs.datafactory.v20170901preview.WaitActivityResponse | outputs.datafactory.v20170901preview.WebActivityResponse)[];
    /**
     * Activity name.
     */
    name: string;
    /**
     * Type of activity.
     * Expected value is 'IfCondition'.
     */
    type: "IfCondition";
}

/**
 * Impala server linked service.
 */
export interface ImpalaLinkedServiceResponse {
    /**
     * Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
     */
    allowHostNameCNMismatch?: any;
    /**
     * Specifies whether to allow self-signed certificates from the server. The default value is false.
     */
    allowSelfSignedServerCert?: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The authentication type to use.
     */
    authenticationType: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * Specifies whether the connections to the server are encrypted using SSL. The default value is false.
     */
    enableSsl?: any;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The IP address or host name of the Impala server. (i.e. 192.168.222.160)
     */
    host: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password corresponding to the user name when using UsernameAndPassword.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
     */
    port?: any;
    /**
     * The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
     */
    trustedCertPath?: any;
    /**
     * Type of linked service.
     * Expected value is 'Impala'.
     */
    type: "Impala";
    /**
     * Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
     */
    useSystemTrustStore?: any;
    /**
     * The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
     */
    username?: any;
}

/**
 * Impala server dataset.
 */
export interface ImpalaObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'ImpalaObject'.
     */
    type: "ImpalaObject";
}

/**
 * A copy activity Impala server source.
 */
export interface ImpalaSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'ImpalaSource'.
     */
    type: "ImpalaSource";
}

/**
 * The compute resource properties for managed integration runtime.
 */
export interface IntegrationRuntimeComputePropertiesResponse {
    /**
     * The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
     */
    location?: string;
    /**
     * Maximum parallel executions count per node for managed integration runtime.
     */
    maxParallelExecutionsPerNode?: number;
    /**
     * The node size requirement to managed integration runtime.
     */
    nodeSize?: string;
    /**
     * The required number of nodes for managed integration runtime.
     */
    numberOfNodes?: number;
    /**
     * VNet properties for managed integration runtime.
     */
    vNetProperties?: outputs.datafactory.v20170901preview.IntegrationRuntimeVNetPropertiesResponse;
}

/**
 * Custom setup script properties for a managed dedicated integration runtime.
 */
export interface IntegrationRuntimeCustomSetupScriptPropertiesResponse {
    /**
     * The URI of the Azure blob container that contains the custom setup script.
     */
    blobContainerUri?: string;
    /**
     * The SAS token of the Azure blob container.
     */
    sasToken?: outputs.datafactory.v20170901preview.SecureStringResponse;
}

/**
 * Data proxy properties for a managed dedicated integration runtime.
 */
export interface IntegrationRuntimeDataProxyPropertiesResponse {
    /**
     * The self-hosted integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.EntityReferenceResponse;
    /**
     * The path to contain the staged data in the Blob storage.
     */
    path?: string;
    /**
     * The staging linked service reference.
     */
    stagingLinkedService?: outputs.datafactory.v20170901preview.EntityReferenceResponse;
}

/**
 * Integration runtime reference type.
 */
export interface IntegrationRuntimeReferenceResponse {
    /**
     * Arguments for integration runtime.
     */
    parameters?: {[key: string]: any};
    /**
     * Reference integration runtime name.
     */
    referenceName: string;
    /**
     * Type of integration runtime.
     */
    type: string;
}

/**
 * Catalog information for managed dedicated integration runtime.
 */
export interface IntegrationRuntimeSsisCatalogInfoResponse {
    /**
     * The password of the administrator user account of the catalog database.
     */
    catalogAdminPassword?: outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The administrator user name of catalog database.
     */
    catalogAdminUserName?: string;
    /**
     * The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
     */
    catalogPricingTier?: string;
    /**
     * The catalog database server URL.
     */
    catalogServerEndpoint?: string;
}

/**
 * SSIS properties for managed integration runtime.
 */
export interface IntegrationRuntimeSsisPropertiesResponse {
    /**
     * Catalog information for managed dedicated integration runtime.
     */
    catalogInfo?: outputs.datafactory.v20170901preview.IntegrationRuntimeSsisCatalogInfoResponse;
    /**
     * Custom setup script properties for a managed dedicated integration runtime.
     */
    customSetupScriptProperties?: outputs.datafactory.v20170901preview.IntegrationRuntimeCustomSetupScriptPropertiesResponse;
    /**
     * Data proxy properties for a managed dedicated integration runtime.
     */
    dataProxyProperties?: outputs.datafactory.v20170901preview.IntegrationRuntimeDataProxyPropertiesResponse;
    /**
     * The edition for the SSIS Integration Runtime
     */
    edition?: string;
    /**
     * License type for bringing your own license scenario.
     */
    licenseType?: string;
}

/**
 * VNet properties for managed integration runtime.
 */
export interface IntegrationRuntimeVNetPropertiesResponse {
    /**
     * The name of the subnet this integration runtime will join.
     */
    subnet?: string;
    /**
     * The ID of the VNet that this integration runtime will join.
     */
    vNetId?: string;
}

/**
 * Jira Service linked service.
 */
export interface JiraLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The IP address or host name of the Jira service. (e.g. jira.example.com)
     */
    host: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password corresponding to the user name that you provided in the username field.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
     */
    port?: any;
    /**
     * Type of linked service.
     * Expected value is 'Jira'.
     */
    type: "Jira";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
    /**
     * The user name that you use to access Jira Service.
     */
    username: any;
}

/**
 * Jira Service dataset.
 */
export interface JiraObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'JiraObject'.
     */
    type: "JiraObject";
}

/**
 * A copy activity Jira Service source.
 */
export interface JiraSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'JiraSource'.
     */
    type: "JiraSource";
}

/**
 * The data stored in JSON format.
 */
export interface JsonFormatResponse {
    /**
     * Deserializer. Type: string (or Expression with resultType string).
     */
    deserializer?: any;
    /**
     * The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
     */
    encodingName?: any;
    /**
     * File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
     */
    filePattern?: string;
    /**
     * The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
     */
    jsonNodeReference?: any;
    /**
     * The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
     */
    jsonPathDefinition?: any;
    /**
     * The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
     */
    nestingSeparator?: any;
    /**
     * Serializer. Type: string (or Expression with resultType string).
     */
    serializer?: any;
    /**
     * Type of dataset storage format.
     * Expected value is 'JsonFormat'.
     */
    type: "JsonFormat";
}

/**
 * The base definition of a secret type.
 */
export interface LinkedIntegrationRuntimeKeyResponse {
    /**
     * Type of the secret.
     * Expected value is 'Key'.
     */
    authorizationType: "Key";
    /**
     * Type of the secret.
     */
    key: outputs.datafactory.v20170901preview.SecureStringResponse;
}

/**
 * The base definition of a secret type.
 */
export interface LinkedIntegrationRuntimeRbacResponse {
    /**
     * Type of the secret.
     * Expected value is 'RBAC'.
     */
    authorizationType: "RBAC";
    /**
     * The resource ID of the integration runtime to be shared.
     */
    resourceId: string;
}

/**
 * The linked integration runtime information.
 */
export interface LinkedIntegrationRuntimeResponse {
    /**
     * The creating time of the linked integration runtime.
     */
    createTime: string;
    /**
     * The location of the data factory for which the linked integration runtime belong to.
     */
    dataFactoryLocation: string;
    /**
     * The name of the data factory for which the linked integration runtime belong to.
     */
    dataFactoryName: string;
    /**
     * The name of the linked integration runtime.
     */
    name: string;
    /**
     * The subscription ID for which the linked integration runtime belong to.
     */
    subscriptionId: string;
}

/**
 * Linked service reference type.
 */
export interface LinkedServiceReferenceResponse {
    /**
     * Arguments for LinkedService.
     */
    parameters?: {[key: string]: any};
    /**
     * Reference LinkedService name.
     */
    referenceName: string;
    /**
     * Linked service reference type.
     */
    type: string;
}

/**
 * Lookup activity.
 */
export interface LookupActivityResponse {
    /**
     * Lookup activity dataset reference.
     */
    dataset: outputs.datafactory.v20170901preview.DatasetReferenceResponse;
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean).
     */
    firstRowOnly?: any;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Dataset-specific source properties, same as copy activity source.
     */
    source: outputs.datafactory.v20170901preview.AmazonMWSSourceResponse | outputs.datafactory.v20170901preview.AmazonRedshiftSourceResponse | outputs.datafactory.v20170901preview.AzureDataLakeStoreSourceResponse | outputs.datafactory.v20170901preview.AzureMySqlSourceResponse | outputs.datafactory.v20170901preview.AzurePostgreSqlSourceResponse | outputs.datafactory.v20170901preview.AzureTableSourceResponse | outputs.datafactory.v20170901preview.BlobSourceResponse | outputs.datafactory.v20170901preview.CassandraSourceResponse | outputs.datafactory.v20170901preview.ConcurSourceResponse | outputs.datafactory.v20170901preview.CouchbaseSourceResponse | outputs.datafactory.v20170901preview.DocumentDbCollectionSourceResponse | outputs.datafactory.v20170901preview.DrillSourceResponse | outputs.datafactory.v20170901preview.DynamicsSourceResponse | outputs.datafactory.v20170901preview.EloquaSourceResponse | outputs.datafactory.v20170901preview.FileSystemSourceResponse | outputs.datafactory.v20170901preview.GoogleBigQuerySourceResponse | outputs.datafactory.v20170901preview.GreenplumSourceResponse | outputs.datafactory.v20170901preview.HBaseSourceResponse | outputs.datafactory.v20170901preview.HdfsSourceResponse | outputs.datafactory.v20170901preview.HiveSourceResponse | outputs.datafactory.v20170901preview.HttpSourceResponse | outputs.datafactory.v20170901preview.HubspotSourceResponse | outputs.datafactory.v20170901preview.ImpalaSourceResponse | outputs.datafactory.v20170901preview.JiraSourceResponse | outputs.datafactory.v20170901preview.MagentoSourceResponse | outputs.datafactory.v20170901preview.MariaDBSourceResponse | outputs.datafactory.v20170901preview.MarketoSourceResponse | outputs.datafactory.v20170901preview.MongoDbSourceResponse | outputs.datafactory.v20170901preview.NetezzaSourceResponse | outputs.datafactory.v20170901preview.OracleSourceResponse | outputs.datafactory.v20170901preview.PaypalSourceResponse | outputs.datafactory.v20170901preview.PhoenixSourceResponse | outputs.datafactory.v20170901preview.PrestoSourceResponse | outputs.datafactory.v20170901preview.QuickBooksSourceResponse | outputs.datafactory.v20170901preview.RelationalSourceResponse | outputs.datafactory.v20170901preview.ResponsysSourceResponse | outputs.datafactory.v20170901preview.SalesforceMarketingCloudSourceResponse | outputs.datafactory.v20170901preview.SalesforceSourceResponse | outputs.datafactory.v20170901preview.SapCloudForCustomerSourceResponse | outputs.datafactory.v20170901preview.SapEccSourceResponse | outputs.datafactory.v20170901preview.ServiceNowSourceResponse | outputs.datafactory.v20170901preview.ShopifySourceResponse | outputs.datafactory.v20170901preview.SparkSourceResponse | outputs.datafactory.v20170901preview.SqlDWSourceResponse | outputs.datafactory.v20170901preview.SqlSourceResponse | outputs.datafactory.v20170901preview.SquareSourceResponse | outputs.datafactory.v20170901preview.VerticaSourceResponse | outputs.datafactory.v20170901preview.WebSourceResponse | outputs.datafactory.v20170901preview.XeroSourceResponse | outputs.datafactory.v20170901preview.ZohoSourceResponse;
    /**
     * Type of activity.
     * Expected value is 'Lookup'.
     */
    type: "Lookup";
}

/**
 * Magento server linked service.
 */
export interface MagentoLinkedServiceResponse {
    /**
     * The access token from Magento.
     */
    accessToken?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
     */
    host: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Magento'.
     */
    type: "Magento";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
}

/**
 * Magento server dataset.
 */
export interface MagentoObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'MagentoObject'.
     */
    type: "MagentoObject";
}

/**
 * A copy activity Magento server source.
 */
export interface MagentoSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'MagentoSource'.
     */
    type: "MagentoSource";
}

/**
 * Error definition for managed integration runtime.
 */
export interface ManagedIntegrationRuntimeErrorResponse {
    /**
     * Error code.
     */
    code: string;
    /**
     * Error message.
     */
    message: string;
    /**
     * Managed integration runtime error parameters.
     */
    parameters: string[];
    /**
     * The time when the error occurred.
     */
    time: string;
}

/**
 * Properties of integration runtime node.
 */
export interface ManagedIntegrationRuntimeNodeResponse {
    /**
     * The errors that occurred on this integration runtime node.
     */
    errors?: outputs.datafactory.v20170901preview.ManagedIntegrationRuntimeErrorResponse[];
    /**
     * The managed integration runtime node id.
     */
    nodeId: string;
    /**
     * The managed integration runtime node status.
     */
    status: string;
}

/**
 * Properties of managed integration runtime operation result.
 */
export interface ManagedIntegrationRuntimeOperationResultResponse {
    /**
     * The activity id for the operation request.
     */
    activityId: string;
    /**
     * The error code.
     */
    errorCode: string;
    /**
     * Managed integration runtime error parameters.
     */
    parameters: string[];
    /**
     * The operation result.
     */
    result: string;
    /**
     * The start time of the operation.
     */
    startTime: string;
    /**
     * The operation type. Could be start or stop.
     */
    type: string;
}

/**
 * Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
 */
export interface ManagedIntegrationRuntimeResponse {
    /**
     * The compute resource for managed integration runtime.
     */
    computeProperties?: outputs.datafactory.v20170901preview.IntegrationRuntimeComputePropertiesResponse;
    /**
     * Integration runtime description.
     */
    description?: string;
    /**
     * SSIS properties for managed integration runtime.
     */
    ssisProperties?: outputs.datafactory.v20170901preview.IntegrationRuntimeSsisPropertiesResponse;
    /**
     * Integration runtime state, only valid for managed dedicated integration runtime.
     */
    state: string;
    /**
     * The type of integration runtime.
     * Expected value is 'Managed'.
     */
    type: "Managed";
}

/**
 * Managed integration runtime status.
 */
export interface ManagedIntegrationRuntimeStatusResponse {
    /**
     * The time at which the integration runtime was created, in ISO8601 format.
     */
    createTime: string;
    /**
     * The data factory name which the integration runtime belong to.
     */
    dataFactoryName: string;
    /**
     * The last operation result that occurred on this integration runtime.
     */
    lastOperation: outputs.datafactory.v20170901preview.ManagedIntegrationRuntimeOperationResultResponse;
    /**
     * The list of nodes for managed integration runtime.
     */
    nodes: outputs.datafactory.v20170901preview.ManagedIntegrationRuntimeNodeResponse[];
    /**
     * The errors that occurred on this integration runtime.
     */
    otherErrors: outputs.datafactory.v20170901preview.ManagedIntegrationRuntimeErrorResponse[];
    /**
     * The state of integration runtime.
     */
    state: string;
    /**
     * The type of integration runtime.
     * Expected value is 'Managed'.
     */
    type?: "Managed";
}

/**
 * MariaDB server linked service.
 */
export interface MariaDBLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString?: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'MariaDB'.
     */
    type: "MariaDB";
}

/**
 * A copy activity MariaDB server source.
 */
export interface MariaDBSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'MariaDBSource'.
     */
    type: "MariaDBSource";
}

/**
 * MariaDB server dataset.
 */
export interface MariaDBTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'MariaDBTable'.
     */
    type: "MariaDBTable";
}

/**
 * Marketo server linked service.
 */
export interface MarketoLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The client Id of your Marketo service.
     */
    clientId: any;
    /**
     * The client secret of your Marketo service.
     */
    clientSecret?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
     */
    endpoint: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Marketo'.
     */
    type: "Marketo";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
}

/**
 * Marketo server dataset.
 */
export interface MarketoObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'MarketoObject'.
     */
    type: "MarketoObject";
}

/**
 * A copy activity Marketo server source.
 */
export interface MarketoSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'MarketoSource'.
     */
    type: "MarketoSource";
}

/**
 * The MongoDB database dataset.
 */
export interface MongoDbCollectionDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The table name of the MongoDB database. Type: string (or Expression with resultType string).
     */
    collectionName: any;
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'MongoDbCollection'.
     */
    type: "MongoDbCollection";
}

/**
 * Linked service for MongoDb data source.
 */
export interface MongoDbLinkedServiceResponse {
    /**
     * Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
     */
    allowSelfSignedServerCert?: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Database to verify the username and password. Type: string (or Expression with resultType string).
     */
    authSource?: any;
    /**
     * The authentication type to be used to connect to the MongoDB database.
     */
    authenticationType?: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
     */
    databaseName: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
     */
    enableSsl?: any;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password for authentication.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    port?: any;
    /**
     * The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
     */
    server: any;
    /**
     * Type of linked service.
     * Expected value is 'MongoDb'.
     */
    type: "MongoDb";
    /**
     * Username for authentication. Type: string (or Expression with resultType string).
     */
    username?: any;
}

/**
 * A copy activity source for a MongoDB database.
 */
export interface MongoDbSourceResponse {
    /**
     * Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'MongoDbSource'.
     */
    type: "MongoDbSource";
}

/**
 * Base class for all triggers that support one to many model for trigger to pipeline.
 */
export interface MultiplePipelineTriggerResponse {
    /**
     * Trigger description.
     */
    description?: string;
    /**
     * Pipelines that need to be started.
     */
    pipelines?: outputs.datafactory.v20170901preview.TriggerPipelineReferenceResponse[];
    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     */
    runtimeState: string;
    /**
     * Trigger type.
     * Expected value is 'MultiplePipelineTrigger'.
     */
    type: "MultiplePipelineTrigger";
}

/**
 * Linked service for MySQL data source.
 */
export interface MySqlLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The connection string.
     */
    connectionString: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'MySql'.
     */
    type: "MySql";
}

/**
 * Netezza linked service.
 */
export interface NetezzaLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString?: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Netezza'.
     */
    type: "Netezza";
}

/**
 * A copy activity Netezza source.
 */
export interface NetezzaSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'NetezzaSource'.
     */
    type: "NetezzaSource";
}

/**
 * Netezza dataset.
 */
export interface NetezzaTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'NetezzaTable'.
     */
    type: "NetezzaTable";
}

/**
 * Open Data Protocol (OData) linked service.
 */
export interface ODataLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Type of authentication used to connect to the OData service.
     */
    authenticationType?: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password of the OData service.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'OData'.
     */
    type: "OData";
    /**
     * The URL of the OData service endpoint. Type: string (or Expression with resultType string).
     */
    url: any;
    /**
     * User name of the OData service. Type: string (or Expression with resultType string).
     */
    userName?: any;
}

/**
 * The Open Data Protocol (OData) resource dataset.
 */
export interface ODataResourceDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The OData resource path. Type: string (or Expression with resultType string).
     */
    path?: any;
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'ODataResource'.
     */
    type: "ODataResource";
}

/**
 * Open Database Connectivity (ODBC) linked service.
 */
export interface OdbcLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
     */
    authenticationType?: any;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString: any;
    /**
     * The access credential portion of the connection string specified in driver-specific property-value format.
     */
    credential?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password for Basic authentication.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'Odbc'.
     */
    type: "Odbc";
    /**
     * User name for Basic authentication. Type: string (or Expression with resultType string).
     */
    userName?: any;
}

/**
 * A copy activity ODBC sink.
 */
export interface OdbcSinkResponse {
    /**
     * A query to execute before starting the copy. Type: string (or Expression with resultType string).
     */
    preCopyScript?: any;
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'OdbcSink'.
     */
    type: "OdbcSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
}

/**
 * Oracle database.
 */
export interface OracleLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Oracle'.
     */
    type: "Oracle";
}

/**
 * A copy activity Oracle sink.
 */
export interface OracleSinkResponse {
    /**
     * SQL pre-copy script. Type: string (or Expression with resultType string).
     */
    preCopyScript?: any;
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'OracleSink'.
     */
    type: "OracleSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
}

/**
 * A copy activity Oracle source.
 */
export interface OracleSourceResponse {
    /**
     * Oracle reader query. Type: string (or Expression with resultType string).
     */
    oracleReaderQuery?: any;
    /**
     * Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    queryTimeout?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'OracleSource'.
     */
    type: "OracleSource";
}

/**
 * The on-premises Oracle database dataset.
 */
export interface OracleTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
     */
    tableName: any;
    /**
     * Type of dataset.
     * Expected value is 'OracleTable'.
     */
    type: "OracleTable";
}

/**
 * The data stored in Optimized Row Columnar (ORC) format.
 */
export interface OrcFormatResponse {
    /**
     * Deserializer. Type: string (or Expression with resultType string).
     */
    deserializer?: any;
    /**
     * Serializer. Type: string (or Expression with resultType string).
     */
    serializer?: any;
    /**
     * Type of dataset storage format.
     * Expected value is 'OrcFormat'.
     */
    type: "OrcFormat";
}

/**
 * Definition of a single parameter for an entity.
 */
export interface ParameterSpecificationResponse {
    /**
     * Default value of parameter.
     */
    defaultValue?: any;
    /**
     * Parameter type.
     */
    type: string;
}

/**
 * The data stored in Parquet format.
 */
export interface ParquetFormatResponse {
    /**
     * Deserializer. Type: string (or Expression with resultType string).
     */
    deserializer?: any;
    /**
     * Serializer. Type: string (or Expression with resultType string).
     */
    serializer?: any;
    /**
     * Type of dataset storage format.
     * Expected value is 'ParquetFormat'.
     */
    type: "ParquetFormat";
}

/**
 * Paypal Service linked service.
 */
export interface PaypalLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The client ID associated with your PayPal application.
     */
    clientId: any;
    /**
     * The client secret associated with your PayPal application.
     */
    clientSecret?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
     */
    host: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Paypal'.
     */
    type: "Paypal";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
}

/**
 * Paypal Service dataset.
 */
export interface PaypalObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'PaypalObject'.
     */
    type: "PaypalObject";
}

/**
 * A copy activity Paypal Service source.
 */
export interface PaypalSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'PaypalSource'.
     */
    type: "PaypalSource";
}

/**
 * Phoenix server linked service.
 */
export interface PhoenixLinkedServiceResponse {
    /**
     * Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
     */
    allowHostNameCNMismatch?: any;
    /**
     * Specifies whether to allow self-signed certificates from the server. The default value is false.
     */
    allowSelfSignedServerCert?: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The authentication mechanism used to connect to the Phoenix server.
     */
    authenticationType: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * Specifies whether the connections to the server are encrypted using SSL. The default value is false.
     */
    enableSsl?: any;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
     */
    host: any;
    /**
     * The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
     */
    httpPath?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password corresponding to the user name.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
     */
    port?: any;
    /**
     * The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
     */
    trustedCertPath?: any;
    /**
     * Type of linked service.
     * Expected value is 'Phoenix'.
     */
    type: "Phoenix";
    /**
     * Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
     */
    useSystemTrustStore?: any;
    /**
     * The user name used to connect to the Phoenix server.
     */
    username?: any;
}

/**
 * Phoenix server dataset.
 */
export interface PhoenixObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'PhoenixObject'.
     */
    type: "PhoenixObject";
}

/**
 * A copy activity Phoenix server source.
 */
export interface PhoenixSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'PhoenixSource'.
     */
    type: "PhoenixSource";
}

/**
 * Pipeline reference type.
 */
export interface PipelineReferenceResponse {
    /**
     * Reference name.
     */
    name?: string;
    /**
     * Reference pipeline name.
     */
    referenceName: string;
    /**
     * Pipeline reference type.
     */
    type: string;
}

/**
 * PolyBase settings.
 */
export interface PolybaseSettingsResponse {
    /**
     * Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    rejectSampleValue?: any;
    /**
     * Reject type.
     */
    rejectType?: string;
    /**
     * Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0.
     */
    rejectValue?: any;
    /**
     * Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean).
     */
    useTypeDefault?: any;
}

/**
 * Linked service for PostgreSQL data source.
 */
export interface PostgreSqlLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The connection string.
     */
    connectionString: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'PostgreSql'.
     */
    type: "PostgreSql";
}

/**
 * Presto server linked service.
 */
export interface PrestoLinkedServiceResponse {
    /**
     * Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
     */
    allowHostNameCNMismatch?: any;
    /**
     * Specifies whether to allow self-signed certificates from the server. The default value is false.
     */
    allowSelfSignedServerCert?: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The authentication mechanism used to connect to the Presto server.
     */
    authenticationType: string;
    /**
     * The catalog context for all request against the server.
     */
    catalog: any;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * Specifies whether the connections to the server are encrypted using SSL. The default value is false.
     */
    enableSsl?: any;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The IP address or host name of the Presto server. (i.e. 192.168.222.160)
     */
    host: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password corresponding to the user name.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
     */
    port?: any;
    /**
     * The version of the Presto server. (i.e. 0.148-t)
     */
    serverVersion: any;
    /**
     * The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
     */
    timeZoneID?: any;
    /**
     * The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
     */
    trustedCertPath?: any;
    /**
     * Type of linked service.
     * Expected value is 'Presto'.
     */
    type: "Presto";
    /**
     * Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
     */
    useSystemTrustStore?: any;
    /**
     * The user name used to connect to the Presto server.
     */
    username?: any;
}

/**
 * Presto server dataset.
 */
export interface PrestoObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'PrestoObject'.
     */
    type: "PrestoObject";
}

/**
 * A copy activity Presto server source.
 */
export interface PrestoSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'PrestoSource'.
     */
    type: "PrestoSource";
}

/**
 * QuickBooks server linked service.
 */
export interface QuickBooksLinkedServiceResponse {
    /**
     * The access token for OAuth 1.0 authentication.
     */
    accessToken: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The access token secret for OAuth 1.0 authentication.
     */
    accessTokenSecret: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The company ID of the QuickBooks company to authorize.
     */
    companyId: any;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The consumer key for OAuth 1.0 authentication.
     */
    consumerKey: any;
    /**
     * The consumer secret for OAuth 1.0 authentication.
     */
    consumerSecret: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
     */
    endpoint: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'QuickBooks'.
     */
    type: "QuickBooks";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
}

/**
 * QuickBooks server dataset.
 */
export interface QuickBooksObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'QuickBooksObject'.
     */
    type: "QuickBooksObject";
}

/**
 * A copy activity QuickBooks server source.
 */
export interface QuickBooksSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'QuickBooksSource'.
     */
    type: "QuickBooksSource";
}

/**
 * The recurrence schedule occurrence.
 */
export interface RecurrenceScheduleOccurrenceResponse {
    /**
     * The day of the week.
     */
    day?: string;
    /**
     * The occurrence.
     */
    occurrence?: number;
}

/**
 * The recurrence schedule.
 */
export interface RecurrenceScheduleResponse {
    /**
     * The hours.
     */
    hours?: number[];
    /**
     * The minutes.
     */
    minutes?: number[];
    /**
     * The month days.
     */
    monthDays?: number[];
    /**
     * The monthly occurrences.
     */
    monthlyOccurrences?: outputs.datafactory.v20170901preview.RecurrenceScheduleOccurrenceResponse[];
    /**
     * The days of the week.
     */
    weekDays?: string[];
}

/**
 * Redirect incompatible row settings
 */
export interface RedirectIncompatibleRowSettingsResponse {
    /**
     * Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
     */
    linkedServiceName: any;
    /**
     * The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
     */
    path?: any;
}

/**
 * The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
 */
export interface RedshiftUnloadSettingsResponse {
    /**
     * The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string).
     */
    bucketName: any;
    /**
     * The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source.
     */
    s3LinkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
}

/**
 * A copy activity source for various relational databases.
 */
export interface RelationalSourceResponse {
    /**
     * Database query. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'RelationalSource'.
     */
    type: "RelationalSource";
}

/**
 * The relational table dataset.
 */
export interface RelationalTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * The relational table name. Type: string (or Expression with resultType string).
     */
    tableName?: any;
    /**
     * Type of dataset.
     * Expected value is 'RelationalTable'.
     */
    type: "RelationalTable";
}

/**
 * Responsys linked service.
 */
export interface ResponsysLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
     */
    clientId: any;
    /**
     * The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
     */
    clientSecret?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The endpoint of the Responsys server.
     */
    endpoint: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Responsys'.
     */
    type: "Responsys";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
     */
    usePeerVerification?: any;
}

/**
 * Responsys dataset.
 */
export interface ResponsysObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'ResponsysObject'.
     */
    type: "ResponsysObject";
}

/**
 * A copy activity Responsys source.
 */
export interface ResponsysSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'ResponsysSource'.
     */
    type: "ResponsysSource";
}

/**
 * Execution policy for an activity.
 */
export interface RetryPolicyResponse {
    /**
     * Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    count?: any;
    /**
     * Interval between retries in seconds. Default is 30.
     */
    intervalInSeconds?: number;
}

/**
 * SSIS access credential.
 */
export interface SSISAccessCredentialResponse {
    /**
     * Domain for windows authentication.
     */
    domain: any;
    /**
     * Password for windows authentication.
     */
    password: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * UseName for windows authentication.
     */
    userName: any;
}

/**
 * SSIS package execution credential.
 */
export interface SSISExecutionCredentialResponse {
    /**
     * Domain for windows authentication.
     */
    domain: any;
    /**
     * Password for windows authentication.
     */
    password: outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * UseName for windows authentication.
     */
    userName: any;
}

/**
 * SSIS execution parameter.
 */
export interface SSISExecutionParameterResponse {
    /**
     * SSIS package execution parameter value. Type: string (or Expression with resultType string).
     */
    value: any;
}

/**
 * SSIS package execution log location
 */
export interface SSISLogLocationResponse {
    /**
     * The package execution log access credential.
     */
    accessCredential?: outputs.datafactory.v20170901preview.SSISAccessCredentialResponse;
    /**
     * The SSIS package execution log path. Type: string (or Expression with resultType string).
     */
    logPath: any;
    /**
     * Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    logRefreshInterval?: any;
    /**
     * The type of SSIS log location.
     */
    type: string;
}

/**
 * SSIS package location.
 */
export interface SSISPackageLocationResponse {
    /**
     * The package access credential.
     */
    accessCredential?: outputs.datafactory.v20170901preview.SSISAccessCredentialResponse;
    /**
     * The configuration file of the package execution. Type: string (or Expression with resultType string).
     */
    configurationPath?: any;
    /**
     * Password of the package.
     */
    packagePassword?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The SSIS package path. Type: string (or Expression with resultType string).
     */
    packagePath: any;
    /**
     * The type of SSIS package location.
     */
    type?: string;
}

/**
 * SSIS property override.
 */
export interface SSISPropertyOverrideResponse {
    /**
     * Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true
     */
    isSensitive?: boolean;
    /**
     * SSIS package property override value. Type: string (or Expression with resultType string).
     */
    value: any;
}

/**
 * Linked service for Salesforce.
 */
export interface SalesforceLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
     */
    environmentUrl?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password for Basic authentication of the Salesforce instance.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The security token is required to remotely access Salesforce instance.
     */
    securityToken?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'Salesforce'.
     */
    type: "Salesforce";
    /**
     * The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
     */
    username?: any;
}

/**
 * Salesforce Marketing Cloud linked service.
 */
export interface SalesforceMarketingCloudLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
     */
    clientId: any;
    /**
     * The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
     */
    clientSecret?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'SalesforceMarketingCloud'.
     */
    type: "SalesforceMarketingCloud";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
     */
    usePeerVerification?: any;
}

/**
 * Salesforce Marketing Cloud dataset.
 */
export interface SalesforceMarketingCloudObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'SalesforceMarketingCloudObject'.
     */
    type: "SalesforceMarketingCloudObject";
}

/**
 * A copy activity Salesforce Marketing Cloud source.
 */
export interface SalesforceMarketingCloudSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'SalesforceMarketingCloudSource'.
     */
    type: "SalesforceMarketingCloudSource";
}

/**
 * The Salesforce object dataset.
 */
export interface SalesforceObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * The Salesforce object API name. Type: string (or Expression with resultType string).
     */
    objectApiName?: any;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'SalesforceObject'.
     */
    type: "SalesforceObject";
}

/**
 * A copy activity Salesforce sink.
 */
export interface SalesforceSinkResponse {
    /**
     * The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
     */
    externalIdFieldName?: any;
    /**
     * The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
     */
    ignoreNullValues?: any;
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'SalesforceSink'.
     */
    type: "SalesforceSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
    /**
     * The write behavior for the operation. Default is Insert.
     */
    writeBehavior?: string;
}

/**
 * A copy activity Salesforce source.
 */
export interface SalesforceSourceResponse {
    /**
     * Database query. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * The read behavior for the operation. Default is Query.
     */
    readBehavior?: string;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'SalesforceSource'.
     */
    type: "SalesforceSource";
}

/**
 * SAP Business Warehouse Linked Service.
 */
export interface SapBWLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
     */
    clientId: any;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password to access the SAP BW server.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Host name of the SAP BW instance. Type: string (or Expression with resultType string).
     */
    server: any;
    /**
     * System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
     */
    systemNumber: any;
    /**
     * Type of linked service.
     * Expected value is 'SapBW'.
     */
    type: "SapBW";
    /**
     * Username to access the SAP BW server. Type: string (or Expression with resultType string).
     */
    userName?: any;
}

/**
 * Linked service for SAP Cloud for Customer.
 */
export interface SapCloudForCustomerLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password for Basic authentication.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'SapCloudForCustomer'.
     */
    type: "SapCloudForCustomer";
    /**
     * The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
     */
    url: any;
    /**
     * The username for Basic authentication. Type: string (or Expression with resultType string).
     */
    username?: any;
}

/**
 * The path of the SAP Cloud for Customer OData entity.
 */
export interface SapCloudForCustomerResourceDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
     */
    path: any;
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'SapCloudForCustomerResource'.
     */
    type: "SapCloudForCustomerResource";
}

/**
 * A copy activity SAP Cloud for Customer sink.
 */
export interface SapCloudForCustomerSinkResponse {
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'SapCloudForCustomerSink'.
     */
    type: "SapCloudForCustomerSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
    /**
     * The write behavior for the operation. Default is 'Insert'.
     */
    writeBehavior?: string;
}

/**
 * A copy activity source for SAP Cloud for Customer source.
 */
export interface SapCloudForCustomerSourceResponse {
    /**
     * SAP Cloud for Customer OData query. For example, "$top=1". Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'SapCloudForCustomerSource'.
     */
    type: "SapCloudForCustomerSource";
}

/**
 * Linked service for SAP ERP Central Component(SAP ECC).
 */
export interface SapEccLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: string;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password for Basic authentication.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'SapEcc'.
     */
    type: "SapEcc";
    /**
     * The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
     */
    url: string;
    /**
     * The username for Basic authentication. Type: string (or Expression with resultType string).
     */
    username?: string;
}

/**
 * The path of the SAP ECC OData entity.
 */
export interface SapEccResourceDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
     */
    path: any;
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'SapEccResource'.
     */
    type: "SapEccResource";
}

/**
 * A copy activity source for SAP ECC source.
 */
export interface SapEccSourceResponse {
    /**
     * SAP ECC OData query. For example, "$top=1". Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'SapEccSource'.
     */
    type: "SapEccSource";
}

/**
 * SAP HANA Linked Service.
 */
export interface SapHanaLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The authentication type to be used to connect to the SAP HANA server.
     */
    authenticationType?: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password to access the SAP HANA server.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Host name of the SAP HANA server. Type: string (or Expression with resultType string).
     */
    server: any;
    /**
     * Type of linked service.
     * Expected value is 'SapHana'.
     */
    type: "SapHana";
    /**
     * Username to access the SAP HANA server. Type: string (or Expression with resultType string).
     */
    userName?: any;
}

/**
 * The workflow trigger recurrence.
 */
export interface ScheduleTriggerRecurrenceResponse {
    /**
     * The end time.
     */
    endTime?: string;
    /**
     * The frequency.
     */
    frequency?: string;
    /**
     * The interval.
     */
    interval?: number;
    /**
     * The recurrence schedule.
     */
    schedule?: outputs.datafactory.v20170901preview.RecurrenceScheduleResponse;
    /**
     * The start time.
     */
    startTime?: string;
    /**
     * The time zone.
     */
    timeZone?: string;
}

/**
 * Trigger that creates pipeline runs periodically, on schedule.
 */
export interface ScheduleTriggerResponse {
    /**
     * Trigger description.
     */
    description?: string;
    /**
     * Pipelines that need to be started.
     */
    pipelines?: outputs.datafactory.v20170901preview.TriggerPipelineReferenceResponse[];
    /**
     * Recurrence schedule configuration.
     */
    recurrence: outputs.datafactory.v20170901preview.ScheduleTriggerRecurrenceResponse;
    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     */
    runtimeState: string;
    /**
     * Trigger type.
     * Expected value is 'ScheduleTrigger'.
     */
    type: "ScheduleTrigger";
}

/**
 * Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
 */
export interface SecureStringResponse {
    /**
     * Type of the secret.
     * Expected value is 'SecureString'.
     */
    type: "SecureString";
    /**
     * Value of secure string.
     */
    value: string;
}

/**
 * Properties of Self-hosted integration runtime node.
 */
export interface SelfHostedIntegrationRuntimeNodeResponse {
    /**
     * The integration runtime capabilities dictionary
     */
    capabilities: {[key: string]: string};
    /**
     * Maximum concurrent jobs on the integration runtime node.
     */
    concurrentJobsLimit: number;
    /**
     * The time at which the integration runtime will expire in ISO8601 format.
     */
    expiryTime: string;
    /**
     * URI for the host machine of the integration runtime.
     */
    hostServiceUri: string;
    /**
     * Indicates whether this node is the active dispatcher for integration runtime requests.
     */
    isActiveDispatcher: boolean;
    /**
     * The most recent time at which the integration runtime was connected in ISO8601 format.
     */
    lastConnectTime: string;
    /**
     * The last time for the integration runtime node update end.
     */
    lastEndUpdateTime: string;
    /**
     * The time the node last started up.
     */
    lastStartTime: string;
    /**
     * The last time for the integration runtime node update start.
     */
    lastStartUpdateTime: string;
    /**
     * The integration runtime node last stop time.
     */
    lastStopTime: string;
    /**
     * The result of the last integration runtime node update.
     */
    lastUpdateResult: string;
    /**
     * Machine name of the integration runtime node.
     */
    machineName: string;
    /**
     * The maximum concurrent jobs in this integration runtime.
     */
    maxConcurrentJobs: number;
    /**
     * Name of the integration runtime node.
     */
    nodeName: string;
    /**
     * The time at which the integration runtime node was registered in ISO8601 format.
     */
    registerTime: string;
    /**
     * Status of the integration runtime node.
     */
    status: string;
    /**
     * Version of the integration runtime node.
     */
    version: string;
    /**
     * Status of the integration runtime node version.
     */
    versionStatus: string;
}

/**
 * Self-hosted integration runtime.
 */
export interface SelfHostedIntegrationRuntimeResponse {
    /**
     * Integration runtime description.
     */
    description?: string;
    /**
     * The base definition of a secret type.
     */
    linkedInfo?: outputs.datafactory.v20170901preview.LinkedIntegrationRuntimeKeyResponse | outputs.datafactory.v20170901preview.LinkedIntegrationRuntimeRbacResponse;
    /**
     * The type of integration runtime.
     * Expected value is 'SelfHosted'.
     */
    type: "SelfHosted";
}

/**
 * Self-hosted integration runtime status.
 */
export interface SelfHostedIntegrationRuntimeStatusResponse {
    /**
     * Whether Self-hosted integration runtime auto update has been turned on.
     */
    autoUpdate: string;
    /**
     * Object with additional information about integration runtime capabilities.
     */
    capabilities: {[key: string]: string};
    /**
     * The time at which the integration runtime was created, in ISO8601 format.
     */
    createTime: string;
    /**
     * The data factory name which the integration runtime belong to.
     */
    dataFactoryName: string;
    /**
     * It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist).
     */
    internalChannelEncryption: string;
    /**
     * The list of linked integration runtimes that are created to share with this integration runtime.
     */
    links?: outputs.datafactory.v20170901preview.LinkedIntegrationRuntimeResponse[];
    /**
     * The local time zone offset in hours.
     */
    localTimeZoneOffset: string;
    /**
     * The list of nodes for this integration runtime.
     */
    nodes?: outputs.datafactory.v20170901preview.SelfHostedIntegrationRuntimeNodeResponse[];
    /**
     * The date at which the integration runtime will be scheduled to update, in ISO8601 format.
     */
    scheduledUpdateDate: string;
    /**
     * The URLs for the services used in integration runtime backend service.
     */
    serviceUrls: string[];
    /**
     * The state of integration runtime.
     */
    state: string;
    /**
     * The task queue id of the integration runtime.
     */
    taskQueueId: string;
    /**
     * The type of integration runtime.
     * Expected value is 'SelfHosted'.
     */
    type?: "SelfHosted";
    /**
     * The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours
     */
    updateDelayOffset: string;
    /**
     * Version of the integration runtime.
     */
    version: string;
    /**
     * Status of the integration runtime version.
     */
    versionStatus: string;
}

/**
 * ServiceNow server linked service.
 */
export interface ServiceNowLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The authentication type to use.
     */
    authenticationType: string;
    /**
     * The client id for OAuth2 authentication.
     */
    clientId?: any;
    /**
     * The client secret for OAuth2 authentication.
     */
    clientSecret?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
     */
    endpoint: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password corresponding to the user name for Basic and OAuth2 authentication.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'ServiceNow'.
     */
    type: "ServiceNow";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
    /**
     * The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
     */
    username?: any;
}

/**
 * ServiceNow server dataset.
 */
export interface ServiceNowObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'ServiceNowObject'.
     */
    type: "ServiceNowObject";
}

/**
 * A copy activity ServiceNow server source.
 */
export interface ServiceNowSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'ServiceNowSource'.
     */
    type: "ServiceNowSource";
}

/**
 * A linked service for an SSH File Transfer Protocol (SFTP) server. 
 */
export interface SftpServerLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The authentication type to be used to connect to the FTP server.
     */
    authenticationType?: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The SFTP server host name. Type: string (or Expression with resultType string).
     */
    host: any;
    /**
     * The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
     */
    hostKeyFingerprint?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password to decrypt the SSH private key if the SSH private key is encrypted.
     */
    passPhrase?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Password to logon the SFTP server for Basic authentication.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    port?: any;
    /**
     * Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
     */
    privateKeyContent?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
     */
    privateKeyPath?: any;
    /**
     * If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
     */
    skipHostKeyValidation?: any;
    /**
     * Type of linked service.
     * Expected value is 'Sftp'.
     */
    type: "Sftp";
    /**
     * The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
     */
    userName?: any;
}

/**
 * Shopify Service linked service.
 */
export interface ShopifyLinkedServiceResponse {
    /**
     * The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
     */
    accessToken?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
     */
    host: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Shopify'.
     */
    type: "Shopify";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
}

/**
 * Shopify Service dataset.
 */
export interface ShopifyObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'ShopifyObject'.
     */
    type: "ShopifyObject";
}

/**
 * A copy activity Shopify Service source.
 */
export interface ShopifySourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'ShopifySource'.
     */
    type: "ShopifySource";
}

/**
 * Spark Server linked service.
 */
export interface SparkLinkedServiceResponse {
    /**
     * Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
     */
    allowHostNameCNMismatch?: any;
    /**
     * Specifies whether to allow self-signed certificates from the server. The default value is false.
     */
    allowSelfSignedServerCert?: any;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The authentication method used to access the Spark server.
     */
    authenticationType: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * Specifies whether the connections to the server are encrypted using SSL. The default value is false.
     */
    enableSsl?: any;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * IP address or host name of the Spark server
     */
    host: any;
    /**
     * The partial URL corresponding to the Spark server.
     */
    httpPath?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The password corresponding to the user name that you provided in the Username field
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The TCP port that the Spark server uses to listen for client connections.
     */
    port: any;
    /**
     * The type of Spark server.
     */
    serverType?: string;
    /**
     * The transport protocol to use in the Thrift layer.
     */
    thriftTransportProtocol?: string;
    /**
     * The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
     */
    trustedCertPath?: any;
    /**
     * Type of linked service.
     * Expected value is 'Spark'.
     */
    type: "Spark";
    /**
     * Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
     */
    useSystemTrustStore?: any;
    /**
     * The user name that you use to access Spark Server.
     */
    username?: any;
}

/**
 * Spark Server dataset.
 */
export interface SparkObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'SparkObject'.
     */
    type: "SparkObject";
}

/**
 * A copy activity Spark Server source.
 */
export interface SparkSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'SparkSource'.
     */
    type: "SparkSource";
}

/**
 * A copy activity SQL Data Warehouse sink.
 */
export interface SqlDWSinkResponse {
    /**
     * Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean).
     */
    allowPolyBase?: any;
    /**
     * Specifies PolyBase-related settings when allowPolyBase is true.
     */
    polyBaseSettings?: outputs.datafactory.v20170901preview.PolybaseSettingsResponse;
    /**
     * SQL pre-copy script. Type: string (or Expression with resultType string).
     */
    preCopyScript?: any;
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * Copy sink type.
     * Expected value is 'SqlDWSink'.
     */
    type: "SqlDWSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
}

/**
 * A copy activity SQL Data Warehouse source.
 */
export interface SqlDWSourceResponse {
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * SQL Data Warehouse reader query. Type: string (or Expression with resultType string).
     */
    sqlReaderQuery?: any;
    /**
     * Name of the stored procedure for a SQL Data Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
     */
    sqlReaderStoredProcedureName?: any;
    /**
     * Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
     */
    storedProcedureParameters?: any;
    /**
     * Copy source type.
     * Expected value is 'SqlDWSource'.
     */
    type: "SqlDWSource";
}

/**
 * SQL Server linked service.
 */
export interface SqlServerLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The on-premises Windows authentication password.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'SqlServer'.
     */
    type: "SqlServer";
    /**
     * The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
     */
    userName?: any;
}

/**
 * SQL stored procedure activity type.
 */
export interface SqlServerStoredProcedureActivityResponse {
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Stored procedure name. Type: string (or Expression with resultType string).
     */
    storedProcedureName: any;
    /**
     * Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
     */
    storedProcedureParameters?: {[key: string]: outputs.datafactory.v20170901preview.StoredProcedureParameterResponse};
    /**
     * Type of activity.
     * Expected value is 'SqlServerStoredProcedure'.
     */
    type: "SqlServerStoredProcedure";
}

/**
 * The on-premises SQL Server dataset.
 */
export interface SqlServerTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
     */
    tableName: any;
    /**
     * Type of dataset.
     * Expected value is 'SqlServerTable'.
     */
    type: "SqlServerTable";
}

/**
 * A copy activity SQL sink.
 */
export interface SqlSinkResponse {
    /**
     * SQL pre-copy script. Type: string (or Expression with resultType string).
     */
    preCopyScript?: any;
    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     */
    sinkRetryCount?: any;
    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sinkRetryWait?: any;
    /**
     * SQL writer stored procedure name. Type: string (or Expression with resultType string).
     */
    sqlWriterStoredProcedureName?: any;
    /**
     * SQL writer table type. Type: string (or Expression with resultType string).
     */
    sqlWriterTableType?: any;
    /**
     * SQL stored procedure parameters.
     */
    storedProcedureParameters?: {[key: string]: outputs.datafactory.v20170901preview.StoredProcedureParameterResponse};
    /**
     * Copy sink type.
     * Expected value is 'SqlSink'.
     */
    type: "SqlSink";
    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    writeBatchSize?: any;
    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    writeBatchTimeout?: any;
}

/**
 * A copy activity SQL source.
 */
export interface SqlSourceResponse {
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * SQL reader query. Type: string (or Expression with resultType string).
     */
    sqlReaderQuery?: any;
    /**
     * Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
     */
    sqlReaderStoredProcedureName?: any;
    /**
     * Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
     */
    storedProcedureParameters?: {[key: string]: outputs.datafactory.v20170901preview.StoredProcedureParameterResponse};
    /**
     * Copy source type.
     * Expected value is 'SqlSource'.
     */
    type: "SqlSource";
}

/**
 * Square Service linked service.
 */
export interface SquareLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The client ID associated with your Square application.
     */
    clientId: any;
    /**
     * The client secret associated with your Square application.
     */
    clientSecret?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The URL of the Square instance. (i.e. mystore.mysquare.com)
     */
    host: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
     */
    redirectUri: any;
    /**
     * Type of linked service.
     * Expected value is 'Square'.
     */
    type: "Square";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
}

/**
 * Square Service dataset.
 */
export interface SquareObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'SquareObject'.
     */
    type: "SquareObject";
}

/**
 * A copy activity Square Service source.
 */
export interface SquareSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'SquareSource'.
     */
    type: "SquareSource";
}

/**
 * Staging settings.
 */
export interface StagingSettingsResponse {
    /**
     * Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
     */
    enableCompression?: any;
    /**
     * Staging linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * The path to storage for storing the interim data. Type: string (or Expression with resultType string).
     */
    path?: any;
}

/**
 * SQL stored procedure parameter.
 */
export interface StoredProcedureParameterResponse {
    /**
     * Stored procedure parameter type.
     */
    type?: string;
    /**
     * Stored procedure parameter value. Type: string (or Expression with resultType string).
     */
    value: any;
}

/**
 * Linked service for Sybase data source.
 */
export interface SybaseLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * AuthenticationType to be used for connection.
     */
    authenticationType?: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Database name for connection. Type: string (or Expression with resultType string).
     */
    database: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password for authentication.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Schema name for connection. Type: string (or Expression with resultType string).
     */
    schema?: any;
    /**
     * Server name for connection. Type: string (or Expression with resultType string).
     */
    server: any;
    /**
     * Type of linked service.
     * Expected value is 'Sybase'.
     */
    type: "Sybase";
    /**
     * Username for authentication. Type: string (or Expression with resultType string).
     */
    username?: any;
}

/**
 * Linked service for Teradata data source.
 */
export interface TeradataLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * AuthenticationType to be used for connection.
     */
    authenticationType?: string;
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Password for authentication.
     */
    password?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Server name for connection. Type: string (or Expression with resultType string).
     */
    server: any;
    /**
     * Type of linked service.
     * Expected value is 'Teradata'.
     */
    type: "Teradata";
    /**
     * Username for authentication. Type: string (or Expression with resultType string).
     */
    username?: any;
}

/**
 * The data stored in text format.
 */
export interface TextFormatResponse {
    /**
     * The column delimiter. Type: string (or Expression with resultType string).
     */
    columnDelimiter?: any;
    /**
     * Deserializer. Type: string (or Expression with resultType string).
     */
    deserializer?: any;
    /**
     * The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
     */
    encodingName?: any;
    /**
     * The escape character. Type: string (or Expression with resultType string).
     */
    escapeChar?: any;
    /**
     * When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     */
    firstRowAsHeader?: any;
    /**
     * The null value string. Type: string (or Expression with resultType string).
     */
    nullValue?: any;
    /**
     * The quote character. Type: string (or Expression with resultType string).
     */
    quoteChar?: any;
    /**
     * The row delimiter. Type: string (or Expression with resultType string).
     */
    rowDelimiter?: any;
    /**
     * Serializer. Type: string (or Expression with resultType string).
     */
    serializer?: any;
    /**
     * The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
     */
    skipLineCount?: any;
    /**
     * Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
     */
    treatEmptyAsNull?: any;
    /**
     * Type of dataset storage format.
     * Expected value is 'TextFormat'.
     */
    type: "TextFormat";
}

/**
 * Pipeline that needs to be triggered with the given parameters.
 */
export interface TriggerPipelineReferenceResponse {
    /**
     * Pipeline parameters.
     */
    parameters?: {[key: string]: any};
    /**
     * Pipeline reference.
     */
    pipelineReference?: outputs.datafactory.v20170901preview.PipelineReferenceResponse;
}

/**
 * Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
 */
export interface TumblingWindowTriggerResponse {
    /**
     * Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    delay?: any;
    /**
     * Trigger description.
     */
    description?: string;
    /**
     * The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
     */
    endTime?: string;
    /**
     * The frequency of the time windows.
     */
    frequency: string;
    /**
     * The interval of the time windows. The minimum interval allowed is 15 Minutes.
     */
    interval: number;
    /**
     * The max number of parallel time windows (ready for execution) for which a new run is triggered.
     */
    maxConcurrency: number;
    /**
     * Pipeline for which runs are created when an event is fired for trigger window that is ready.
     */
    pipeline: outputs.datafactory.v20170901preview.TriggerPipelineReferenceResponse;
    /**
     * Retry policy that will be applied for failed pipeline runs.
     */
    retryPolicy?: outputs.datafactory.v20170901preview.RetryPolicyResponse;
    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     */
    runtimeState: string;
    /**
     * The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
     */
    startTime: string;
    /**
     * Trigger type.
     * Expected value is 'TumblingWindowTrigger'.
     */
    type: "TumblingWindowTrigger";
}

/**
 * This activity executes inner activities until the specified boolean expression results to true or timeout is reached, whichever is earlier.
 */
export interface UntilActivityResponse {
    /**
     * List of activities to execute.
     */
    activities: (outputs.datafactory.v20170901preview.AzureMLBatchExecutionActivityResponse | outputs.datafactory.v20170901preview.AzureMLUpdateResourceActivityResponse | outputs.datafactory.v20170901preview.ControlActivityResponse | outputs.datafactory.v20170901preview.CopyActivityResponse | outputs.datafactory.v20170901preview.CustomActivityResponse | outputs.datafactory.v20170901preview.DataLakeAnalyticsUSQLActivityResponse | outputs.datafactory.v20170901preview.DatabricksNotebookActivityResponse | outputs.datafactory.v20170901preview.ExecutePipelineActivityResponse | outputs.datafactory.v20170901preview.ExecuteSSISPackageActivityResponse | outputs.datafactory.v20170901preview.ExecutionActivityResponse | outputs.datafactory.v20170901preview.FilterActivityResponse | outputs.datafactory.v20170901preview.ForEachActivityResponse | outputs.datafactory.v20170901preview.GetMetadataActivityResponse | outputs.datafactory.v20170901preview.HDInsightHiveActivityResponse | outputs.datafactory.v20170901preview.HDInsightMapReduceActivityResponse | outputs.datafactory.v20170901preview.HDInsightPigActivityResponse | outputs.datafactory.v20170901preview.HDInsightSparkActivityResponse | outputs.datafactory.v20170901preview.HDInsightStreamingActivityResponse | outputs.datafactory.v20170901preview.IfConditionActivityResponse | outputs.datafactory.v20170901preview.LookupActivityResponse | outputs.datafactory.v20170901preview.SqlServerStoredProcedureActivityResponse | outputs.datafactory.v20170901preview.UntilActivityResponse | outputs.datafactory.v20170901preview.WaitActivityResponse | outputs.datafactory.v20170901preview.WebActivityResponse)[];
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * An expression that would evaluate to Boolean. The loop will continue until this expression evaluates to true
     */
    expression: outputs.datafactory.v20170901preview.ExpressionResponse;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    timeout?: any;
    /**
     * Type of activity.
     * Expected value is 'Until'.
     */
    type: "Until";
}

/**
 * Vertica linked service.
 */
export interface VerticaLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    connectionString?: any;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Vertica'.
     */
    type: "Vertica";
}

/**
 * A copy activity Vertica source.
 */
export interface VerticaSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'VerticaSource'.
     */
    type: "VerticaSource";
}

/**
 * Vertica dataset.
 */
export interface VerticaTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'VerticaTable'.
     */
    type: "VerticaTable";
}

/**
 * This activity suspends pipeline execution for the specified interval.
 */
export interface WaitActivityResponse {
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Type of activity.
     * Expected value is 'Wait'.
     */
    type: "Wait";
    /**
     * Duration in seconds.
     */
    waitTimeInSeconds: number;
}

/**
 * Web activity authentication properties.
 */
export interface WebActivityAuthenticationResponse {
    /**
     * Password for the PFX file or basic authentication.
     */
    password?: outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Base64-encoded contents of a PFX file.
     */
    pfx?: outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Resource for which Azure Auth token will be requested when using MSI Authentication.
     */
    resource?: string;
    /**
     * Web activity authentication (Basic/ClientCertificate/MSI)
     */
    type: string;
    /**
     * Web activity authentication user name for basic authentication.
     */
    username?: string;
}

/**
 * Web activity.
 */
export interface WebActivityResponse {
    /**
     * Authentication method used for calling the endpoint.
     */
    authentication?: outputs.datafactory.v20170901preview.WebActivityAuthenticationResponse;
    /**
     * Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
     */
    body?: any;
    /**
     * List of datasets passed to web endpoint.
     */
    datasets?: outputs.datafactory.v20170901preview.DatasetReferenceResponse[];
    /**
     * Activity depends on condition.
     */
    dependsOn?: outputs.datafactory.v20170901preview.ActivityDependencyResponse[];
    /**
     * Activity description.
     */
    description?: string;
    /**
     * When set to true, Certificate validation will be disabled.
     */
    disableCertValidation?: boolean;
    /**
     * Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
     */
    headers?: any;
    /**
     * Linked service reference.
     */
    linkedServiceName?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * List of linked services passed to web endpoint.
     */
    linkedServices?: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse[];
    /**
     * Rest API method for target endpoint.
     */
    method: string;
    /**
     * Activity name.
     */
    name: string;
    /**
     * Activity policy.
     */
    policy?: outputs.datafactory.v20170901preview.ActivityPolicyResponse;
    /**
     * Type of activity.
     * Expected value is 'WebActivity'.
     */
    type: "WebActivity";
    /**
     * Web activity target endpoint and path. Type: string (or Expression with resultType string).
     */
    url: any;
}

/**
 * A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
 */
export interface WebAnonymousAuthenticationResponse {
    /**
     * Type of authentication used to connect to the web table source.
     * Expected value is 'Anonymous'.
     */
    authenticationType: "Anonymous";
    /**
     * The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
     */
    url: any;
}

/**
 * A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
 */
export interface WebBasicAuthenticationResponse {
    /**
     * Type of authentication used to connect to the web table source.
     * Expected value is 'Basic'.
     */
    authenticationType: "Basic";
    /**
     * The password for Basic authentication.
     */
    password: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
     */
    url: any;
    /**
     * User name for Basic authentication. Type: string (or Expression with resultType string).
     */
    username: any;
}

/**
 * A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
 */
export interface WebClientCertificateAuthenticationResponse {
    /**
     * Type of authentication used to connect to the web table source.
     * Expected value is 'ClientCertificate'.
     */
    authenticationType: "ClientCertificate";
    /**
     * Password for the PFX file.
     */
    password: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Base64-encoded contents of a PFX file.
     */
    pfx: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
     */
    url: any;
}

/**
 * Web linked service.
 */
export interface WebLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Web'.
     */
    type: "Web";
    /**
     * Web linked service properties.
     */
    typeProperties: outputs.datafactory.v20170901preview.WebAnonymousAuthenticationResponse | outputs.datafactory.v20170901preview.WebBasicAuthenticationResponse | outputs.datafactory.v20170901preview.WebClientCertificateAuthenticationResponse;
}

/**
 * A copy activity source for web page table.
 */
export interface WebSourceResponse {
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'WebSource'.
     */
    type: "WebSource";
}

/**
 * The dataset points to a HTML table in the web page.
 */
export interface WebTableDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
     */
    index: any;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
     */
    path?: any;
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'WebTable'.
     */
    type: "WebTable";
}

/**
 * Xero Service linked service.
 */
export interface XeroLinkedServiceResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * The consumer key associated with the Xero application.
     */
    consumerKey?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The endpoint of the Xero server. (i.e. api.xero.com)
     */
    host: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
     * ).
     */
    privateKey?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * Type of linked service.
     * Expected value is 'Xero'.
     */
    type: "Xero";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
}

/**
 * Xero Service dataset.
 */
export interface XeroObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'XeroObject'.
     */
    type: "XeroObject";
}

/**
 * A copy activity Xero Service source.
 */
export interface XeroSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'XeroSource'.
     */
    type: "XeroSource";
}

/**
 * Zoho server linked service.
 */
export interface ZohoLinkedServiceResponse {
    /**
     * The access token for Zoho authentication.
     */
    accessToken?: outputs.datafactory.v20170901preview.AzureKeyVaultSecretReferenceResponse | outputs.datafactory.v20170901preview.SecureStringResponse;
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * The integration runtime reference.
     */
    connectVia?: outputs.datafactory.v20170901preview.IntegrationRuntimeReferenceResponse;
    /**
     * Linked service description.
     */
    description?: string;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    encryptedCredential?: any;
    /**
     * The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
     */
    endpoint: any;
    /**
     * Parameters for linked service.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Type of linked service.
     * Expected value is 'Zoho'.
     */
    type: "Zoho";
    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     */
    useEncryptedEndpoints?: any;
    /**
     * Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
     */
    useHostVerification?: any;
    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     */
    usePeerVerification?: any;
}

/**
 * Zoho server dataset.
 */
export interface ZohoObjectDatasetResponse {
    /**
     * List of tags that can be used for describing the Dataset.
     */
    annotations?: any[];
    /**
     * Dataset description.
     */
    description?: string;
    /**
     * Linked service reference.
     */
    linkedServiceName: outputs.datafactory.v20170901preview.LinkedServiceReferenceResponse;
    /**
     * Parameters for dataset.
     */
    parameters?: {[key: string]: outputs.datafactory.v20170901preview.ParameterSpecificationResponse};
    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     */
    structure?: any;
    /**
     * Type of dataset.
     * Expected value is 'ZohoObject'.
     */
    type: "ZohoObject";
}

/**
 * A copy activity Zoho server source.
 */
export interface ZohoSourceResponse {
    /**
     * A query to retrieve data from source. Type: string (or Expression with resultType string).
     */
    query?: any;
    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     */
    sourceRetryCount?: any;
    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    sourceRetryWait?: any;
    /**
     * Copy source type.
     * Expected value is 'ZohoSource'.
     */
    type: "ZohoSource";
}

