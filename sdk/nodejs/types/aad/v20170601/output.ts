// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Container Account Description
 */
export interface ContainerAccountResponse {
    /**
     * The account name
     */
    accountName?: string;
    /**
     * The account password
     */
    password?: string;
    /**
     * The account spn
     */
    spn?: string;
}

/**
 * Domain Security Settings
 */
export interface DomainSecuritySettingsResponse {
    /**
     * A flag to determine whether or not NtlmV1 is enabled or disabled.
     */
    ntlmV1?: string;
    /**
     * A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
     */
    syncKerberosPasswords?: string;
    /**
     * A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
     */
    syncNtlmPasswords?: string;
    /**
     * A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
     */
    syncOnPremPasswords?: string;
    /**
     * A flag to determine whether or not TlsV1 is enabled or disabled.
     */
    tlsV1?: string;
}
/**
 * domainSecuritySettingsResponseProvideDefaults sets the appropriate defaults for DomainSecuritySettingsResponse
 */
export function domainSecuritySettingsResponseProvideDefaults(val: DomainSecuritySettingsResponse): DomainSecuritySettingsResponse {
    return {
        ...val,
        ntlmV1: (val.ntlmV1) ?? "Enabled",
        syncKerberosPasswords: (val.syncKerberosPasswords) ?? "Enabled",
        syncNtlmPasswords: (val.syncNtlmPasswords) ?? "Enabled",
        syncOnPremPasswords: (val.syncOnPremPasswords) ?? "Enabled",
        tlsV1: (val.tlsV1) ?? "Enabled",
    };
}

/**
 * Forest Trust Setting
 */
export interface ForestTrustResponse {
    /**
     * Friendly Name
     */
    friendlyName?: string;
    /**
     * Remote Dns ips
     */
    remoteDnsIps?: string;
    /**
     * Trust Direction
     */
    trustDirection?: string;
    /**
     * Trust Password
     */
    trustPassword?: string;
    /**
     * Trusted Domain FQDN
     */
    trustedDomainFqdn?: string;
}

/**
 * Health Alert Description
 */
export interface HealthAlertResponse {
    /**
     * Health Alert Id
     */
    id: string;
    /**
     * Health Alert Issue
     */
    issue: string;
    /**
     * Health Alert Last Detected DateTime
     */
    lastDetected: string;
    /**
     * Health Alert Name
     */
    name: string;
    /**
     * Health Alert Raised DateTime
     */
    raised: string;
    /**
     * Health Alert TSG Link
     */
    resolutionUri: string;
    /**
     * Health Alert Severity
     */
    severity: string;
}

/**
 * Health Monitor Description
 */
export interface HealthMonitorResponse {
    /**
     * Health Monitor Details
     */
    details: string;
    /**
     * Health Monitor Id
     */
    id: string;
    /**
     * Health Monitor Name
     */
    name: string;
}

/**
 * Secure LDAP Settings
 */
export interface LdapsSettingsResponse {
    /**
     * NotAfter DateTime of configure ldaps certificate.
     */
    certificateNotAfter: string;
    /**
     * Thumbprint of configure ldaps certificate.
     */
    certificateThumbprint: string;
    /**
     * A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
     */
    externalAccess?: string;
    /**
     * External access ip address.
     */
    externalAccessIpAddress: string;
    /**
     * A flag to determine whether or not Secure LDAP is enabled or disabled.
     */
    ldaps?: string;
    /**
     * The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
     */
    pfxCertificate?: string;
    /**
     * The password to decrypt the provided Secure LDAP certificate pfx file.
     */
    pfxCertificatePassword?: string;
    /**
     * Public certificate used to configure secure ldap.
     */
    publicCertificate: string;
}
/**
 * ldapsSettingsResponseProvideDefaults sets the appropriate defaults for LdapsSettingsResponse
 */
export function ldapsSettingsResponseProvideDefaults(val: LdapsSettingsResponse): LdapsSettingsResponse {
    return {
        ...val,
        externalAccess: (val.externalAccess) ?? "Disabled",
        ldaps: (val.ldaps) ?? "Disabled",
    };
}

/**
 * Migration Progress
 */
export interface MigrationProgressResponse {
    /**
     * Completion Percentage
     */
    completionPercentage?: number;
    /**
     * Progress Message
     */
    progressMessage?: string;
}

/**
 * Migration Properties
 */
export interface MigrationPropertiesResponse {
    /**
     * Migration Progress
     */
    migrationProgress: outputs.aad.v20170601.MigrationProgressResponse;
    /**
     * Old Subnet Id
     */
    oldSubnetId: string;
    /**
     * Old Vnet Site Id
     */
    oldVnetSiteId: string;
}

/**
 * Settings for notification
 */
export interface NotificationSettingsResponse {
    /**
     * The list of additional recipients
     */
    additionalRecipients?: string[];
    /**
     * Should domain controller admins be notified
     */
    notifyDcAdmins?: string;
    /**
     * Should global admins be notified
     */
    notifyGlobalAdmins?: string;
}

/**
 * Settings for Resource Forest
 */
export interface ResourceForestSettingsResponse {
    /**
     * Resource Forest
     */
    resourceForest?: string;
    /**
     * List of settings for Resource Forest
     */
    settings?: outputs.aad.v20170601.ForestTrustResponse[];
}

