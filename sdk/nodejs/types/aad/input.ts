// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20170101 from "./v20170101/input";
export * as v20170601 from "./v20170601/input";
export * as v20200101 from "./v20200101/input";
export * as v20210301 from "./v20210301/input";
export * as v20210501 from "./v20210501/input";
export * as v20220901 from "./v20220901/input";
/**
 * Domain Security Settings
 */
export interface DomainSecuritySettingsArgs {
    /**
     * A flag to determine whether or not KerberosArmoring is enabled or disabled.
     */
    kerberosArmoring?: pulumi.Input<string | enums.aad.KerberosArmoring>;
    /**
     * A flag to determine whether or not KerberosRc4Encryption is enabled or disabled.
     */
    kerberosRc4Encryption?: pulumi.Input<string | enums.aad.KerberosRc4Encryption>;
    /**
     * A flag to determine whether or not NtlmV1 is enabled or disabled.
     */
    ntlmV1?: pulumi.Input<string | enums.aad.NtlmV1>;
    /**
     * A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
     */
    syncKerberosPasswords?: pulumi.Input<string | enums.aad.SyncKerberosPasswords>;
    /**
     * A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
     */
    syncNtlmPasswords?: pulumi.Input<string | enums.aad.SyncNtlmPasswords>;
    /**
     * A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
     */
    syncOnPremPasswords?: pulumi.Input<string | enums.aad.SyncOnPremPasswords>;
    /**
     * A flag to determine whether or not TlsV1 is enabled or disabled.
     */
    tlsV1?: pulumi.Input<string | enums.aad.TlsV1>;
}
/**
 * domainSecuritySettingsArgsProvideDefaults sets the appropriate defaults for DomainSecuritySettingsArgs
 */
export function domainSecuritySettingsArgsProvideDefaults(val: DomainSecuritySettingsArgs): DomainSecuritySettingsArgs {
    return {
        ...val,
        kerberosArmoring: (val.kerberosArmoring) ?? "Disabled",
        kerberosRc4Encryption: (val.kerberosRc4Encryption) ?? "Enabled",
        ntlmV1: (val.ntlmV1) ?? "Enabled",
        syncKerberosPasswords: (val.syncKerberosPasswords) ?? "Enabled",
        syncNtlmPasswords: (val.syncNtlmPasswords) ?? "Enabled",
        syncOnPremPasswords: (val.syncOnPremPasswords) ?? "Enabled",
        tlsV1: (val.tlsV1) ?? "Enabled",
    };
}

/**
 * Forest Trust Setting
 */
export interface ForestTrustArgs {
    /**
     * Friendly Name
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * Remote Dns ips
     */
    remoteDnsIps?: pulumi.Input<string>;
    /**
     * Trust Direction
     */
    trustDirection?: pulumi.Input<string>;
    /**
     * Trust Password
     */
    trustPassword?: pulumi.Input<string>;
    /**
     * Trusted Domain FQDN
     */
    trustedDomainFqdn?: pulumi.Input<string>;
}

/**
 * Secure LDAP Settings
 */
export interface LdapsSettingsArgs {
    /**
     * A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
     */
    externalAccess?: pulumi.Input<string | enums.aad.ExternalAccess>;
    /**
     * A flag to determine whether or not Secure LDAP is enabled or disabled.
     */
    ldaps?: pulumi.Input<string | enums.aad.Ldaps>;
    /**
     * The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
     */
    pfxCertificate?: pulumi.Input<string>;
    /**
     * The password to decrypt the provided Secure LDAP certificate pfx file.
     */
    pfxCertificatePassword?: pulumi.Input<string>;
}
/**
 * ldapsSettingsArgsProvideDefaults sets the appropriate defaults for LdapsSettingsArgs
 */
export function ldapsSettingsArgsProvideDefaults(val: LdapsSettingsArgs): LdapsSettingsArgs {
    return {
        ...val,
        externalAccess: (val.externalAccess) ?? "Disabled",
        ldaps: (val.ldaps) ?? "Disabled",
    };
}

/**
 * Settings for notification
 */
export interface NotificationSettingsArgs {
    /**
     * The list of additional recipients
     */
    additionalRecipients?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Should domain controller admins be notified
     */
    notifyDcAdmins?: pulumi.Input<string | enums.aad.NotifyDcAdmins>;
    /**
     * Should global admins be notified
     */
    notifyGlobalAdmins?: pulumi.Input<string | enums.aad.NotifyGlobalAdmins>;
}

/**
 * Replica Set Definition
 */
export interface ReplicaSetArgs {
    /**
     * Virtual network location
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
     */
    subnetId?: pulumi.Input<string>;
}

/**
 * Settings for Resource Forest
 */
export interface ResourceForestSettingsArgs {
    /**
     * Resource Forest
     */
    resourceForest?: pulumi.Input<string>;
    /**
     * List of settings for Resource Forest
     */
    settings?: pulumi.Input<pulumi.Input<inputs.aad.ForestTrustArgs>[]>;
}

