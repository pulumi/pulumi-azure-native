// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20170301preview from "./v20170301preview/output";
export * as v20211101preview from "./v20211101preview/output";
export * as v20220201 from "./v20220201/output";
export * as v20220201preview from "./v20220201preview/output";
export * as v20220701preview from "./v20220701preview/output";
/**
 * Additional SQL Server feature settings.
 */
export interface AdditionalFeaturesServerConfigurationsResponse {
    /**
     * Enable or disable R services (SQL 2016 onwards).
     */
    isRServicesEnabled?: boolean;
}

/**
 * Configure backups for databases in your SQL virtual machine.
 */
export interface AutoBackupSettingsResponse {
    /**
     * Backup schedule type.
     */
    backupScheduleType?: string;
    /**
     * Include or exclude system databases from auto backup.
     */
    backupSystemDbs?: boolean;
    /**
     * Enable or disable autobackup on SQL virtual machine.
     */
    enable?: boolean;
    /**
     * Enable or disable encryption for backup on SQL virtual machine.
     */
    enableEncryption?: boolean;
    /**
     * Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
     */
    fullBackupFrequency?: string;
    /**
     * Start time of a given day during which full backups can take place. 0-23 hours.
     */
    fullBackupStartTime?: number;
    /**
     * Duration of the time window of a given day during which full backups can take place. 1-23 hours.
     */
    fullBackupWindowHours?: number;
    /**
     * Frequency of log backups. 5-60 minutes.
     */
    logBackupFrequency?: number;
    /**
     * Retention period of backup: 1-30 days.
     */
    retentionPeriod?: number;
    /**
     * Storage account url where backup will be taken to.
     */
    storageAccountUrl?: string;
}

/**
 * Set a patching window during which Windows and SQL patches will be applied.
 */
export interface AutoPatchingSettingsResponse {
    /**
     * Day of week to apply the patch on.
     */
    dayOfWeek?: string;
    /**
     * Enable or disable autopatching on SQL virtual machine.
     */
    enable?: boolean;
    /**
     * Duration of patching.
     */
    maintenanceWindowDuration?: number;
    /**
     * Hour of the day when patching is initiated. Local VM time.
     */
    maintenanceWindowStartingHour?: number;
}

/**
 * Configure your SQL virtual machine to be able to connect to the Azure Key Vault service.
 */
export interface KeyVaultCredentialSettingsResponse {
    /**
     * Azure Key Vault url.
     */
    azureKeyVaultUrl?: string;
    /**
     * Credential name.
     */
    credentialName?: string;
    /**
     * Enable or disable key vault credential setting.
     */
    enable?: boolean;
    /**
     * Service principal name to access key vault.
     */
    servicePrincipalName?: string;
}

/**
 * A load balancer configuration for an availability group listener.
 */
export interface LoadBalancerConfigurationResponse {
    /**
     * Resource id of the load balancer.
     */
    loadBalancerResourceId?: string;
    /**
     * Private IP address.
     */
    privateIpAddress?: outputs.sqlvirtualmachine.PrivateIPAddressResponse;
    /**
     * Probe port.
     */
    probePort?: number;
    /**
     * Resource id of the public IP.
     */
    publicIpAddressResourceId?: string;
    /**
     * List of the SQL virtual machine instance resource id's that are enrolled into the availability group listener.
     */
    sqlVirtualMachineInstances?: string[];
}

/**
 * A private IP address bound to the availability group listener.
 */
export interface PrivateIPAddressResponse {
    /**
     * Private IP address bound to the availability group listener.
     */
    ipAddress?: string;
    /**
     * Subnet used to include private IP.
     */
    subnetResourceId?: string;
}

/**
 * Azure Active Directory identity configuration for a resource.
 */
export interface ResourceIdentityResponse {
    /**
     * The Azure Active Directory principal id.
     */
    principalId: string;
    /**
     * The Azure Active Directory tenant id.
     */
    tenantId: string;
    /**
     * The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
     */
    type?: string;
}

/**
 * Set disk storage settings for SQL Server.
 */
export interface SQLStorageSettingsResponse {
    /**
     * SQL Server default file path
     */
    defaultFilePath?: string;
    /**
     * Logical Unit Numbers for the disks.
     */
    luns?: number[];
}

/**
 * Set the connectivity, storage and workload settings.
 */
export interface ServerConfigurationsManagementSettingsResponse {
    /**
     * Additional SQL feature settings.
     */
    additionalFeaturesServerConfigurations?: outputs.sqlvirtualmachine.AdditionalFeaturesServerConfigurationsResponse;
    /**
     * SQL connectivity type settings.
     */
    sqlConnectivityUpdateSettings?: outputs.sqlvirtualmachine.SqlConnectivityUpdateSettingsResponse;
    /**
     * SQL storage update settings.
     */
    sqlStorageUpdateSettings?: outputs.sqlvirtualmachine.SqlStorageUpdateSettingsResponse;
    /**
     * SQL workload type settings.
     */
    sqlWorkloadTypeUpdateSettings?: outputs.sqlvirtualmachine.SqlWorkloadTypeUpdateSettingsResponse;
}

/**
 * Set the access level and network port settings for SQL Server.
 */
export interface SqlConnectivityUpdateSettingsResponse {
    /**
     * SQL Server connectivity option.
     */
    connectivityType?: string;
    /**
     * SQL Server port.
     */
    port?: number;
}

/**
 * Set disk storage settings for SQL Server.
 */
export interface SqlStorageUpdateSettingsResponse {
    /**
     * Disk configuration to apply to SQL Server.
     */
    diskConfigurationType?: string;
    /**
     * Virtual machine disk count.
     */
    diskCount?: number;
    /**
     * Device id of the first disk to be updated.
     */
    startingDeviceId?: number;
}

/**
 * Set workload type to optimize storage for SQL Server.
 */
export interface SqlWorkloadTypeUpdateSettingsResponse {
    /**
     * SQL Server workload type.
     */
    sqlWorkloadType?: string;
}

/**
 * Storage Configurations for SQL Data, Log and TempDb.
 */
export interface StorageConfigurationSettingsResponse {
    /**
     * Disk configuration to apply to SQL Server.
     */
    diskConfigurationType?: string;
    /**
     * SQL Server Data Storage Settings.
     */
    sqlDataSettings?: outputs.sqlvirtualmachine.SQLStorageSettingsResponse;
    /**
     * SQL Server Log Storage Settings.
     */
    sqlLogSettings?: outputs.sqlvirtualmachine.SQLStorageSettingsResponse;
    /**
     * SQL Server TempDb Storage Settings.
     */
    sqlTempDbSettings?: outputs.sqlvirtualmachine.SQLStorageSettingsResponse;
    /**
     * Storage workload type.
     */
    storageWorkloadType?: string;
}

/**
 * Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
 */
export interface WsfcDomainCredentialsResponse {
    /**
     * Cluster bootstrap account password.
     */
    clusterBootstrapAccountPassword?: string;
    /**
     * Cluster operator account password.
     */
    clusterOperatorAccountPassword?: string;
    /**
     * SQL service account password.
     */
    sqlServiceAccountPassword?: string;
}

/**
 * Active Directory account details to operate Windows Server Failover Cluster.
 */
export interface WsfcDomainProfileResponse {
    /**
     * Account name used for creating cluster (at minimum needs permissions to 'Create Computer Objects' in domain).
     */
    clusterBootstrapAccount?: string;
    /**
     * Account name used for operating cluster i.e. will be part of administrators group on all the participating virtual machines in the cluster.
     */
    clusterOperatorAccount?: string;
    /**
     * Fully qualified name of the domain.
     */
    domainFqdn?: string;
    /**
     * Optional path for fileshare witness.
     */
    fileShareWitnessPath?: string;
    /**
     * Organizational Unit path in which the nodes and cluster will be present.
     */
    ouPath?: string;
    /**
     * Account name under which SQL service will run on all participating SQL virtual machines in the cluster.
     */
    sqlServiceAccount?: string;
    /**
     * Fully qualified ARM resource id of the witness storage account.
     */
    storageAccountUrl?: string;
}

