// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20180301preview from "./v20180301preview/output";
export * as v20181001 from "./v20181001/output";
export * as v20200501 from "./v20200501/output";
export * as v20200701preview from "./v20200701preview/output";
export * as v20210401preview from "./v20210401preview/output";
export * as v20210601preview from "./v20210601preview/output";
export * as v20210901preview from "./v20210901preview/output";
export * as v20211001 from "./v20211001/output";
export * as v20220201 from "./v20220201/output";
export * as v20220801preview from "./v20220801preview/output";
/**
 * Network ACL
 */
export interface NetworkACLResponse {
    /**
     * Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
     */
    allow?: string[];
    /**
     * Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
     */
    deny?: string[];
}

/**
 * ACL for a private endpoint
 */
export interface PrivateEndpointACLResponse {
    /**
     * Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
     */
    allow?: string[];
    /**
     * Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
     */
    deny?: string[];
    /**
     * Name of the private endpoint connection
     */
    name: string;
}

/**
 * A private endpoint connection to SignalR resource
 */
export interface PrivateEndpointConnectionResponse {
    /**
     * Fully qualified resource Id for the resource.
     */
    id: string;
    /**
     * The name of the resource.
     */
    name: string;
    /**
     * Private endpoint associated with the private endpoint connection
     */
    privateEndpoint?: outputs.signalrservice.PrivateEndpointResponse;
    /**
     * Connection state
     */
    privateLinkServiceConnectionState?: outputs.signalrservice.PrivateLinkServiceConnectionStateResponse;
    /**
     * Provisioning state of the private endpoint connection
     */
    provisioningState: string;
    /**
     * The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
     */
    type: string;
}

/**
 * Private endpoint
 */
export interface PrivateEndpointResponse {
    /**
     * Full qualified Id of the private endpoint
     */
    id?: string;
}

/**
 * Connection state of the private endpoint connection
 */
export interface PrivateLinkServiceConnectionStateResponse {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: string;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: string;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: string;
}

/**
 * Reference to a resource.
 */
export interface ResourceReferenceResponse {
    /**
     * Resource ID.
     */
    id?: string;
}

/**
 * The billing information of the SignalR resource.
 */
export interface ResourceSkuResponse {
    /**
     * Optional, integer. The unit count of SignalR resource. 1 by default.
     * 
     * If present, following values are allowed:
     *     Free: 1
     *     Standard: 1,2,5,10,20,50,100
     */
    capacity?: number;
    /**
     * Not used. Retained for future use.
     */
    family: string;
    /**
     * The name of the SKU. Required.
     * 
     * Allowed values: Standard_S1, Free_F1
     */
    name: string;
    /**
     * Not used. Retained for future use.
     */
    size: string;
    /**
     * Optional tier of this particular SKU. 'Standard' or 'Free'. 
     * 
     * `Basic` is deprecated, use `Standard` instead.
     */
    tier?: string;
}

/**
 * The settings for the Upstream when the Azure SignalR is in server-less mode.
 */
export interface ServerlessUpstreamSettingsResponse {
    /**
     * Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
     */
    templates?: outputs.signalrservice.UpstreamTemplateResponse[];
}

/**
 * Cross-Origin Resource Sharing (CORS) settings.
 */
export interface SignalRCorsSettingsResponse {
    /**
     * Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
     */
    allowedOrigins?: string[];
}

/**
 * Feature of a SignalR resource, which controls the SignalR runtime behavior.
 */
export interface SignalRFeatureResponse {
    /**
     * FeatureFlags is the supported features of Azure SignalR service.
     * - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
     * - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
     */
    flag: string;
    /**
     * Optional properties related to this feature.
     */
    properties?: {[key: string]: string};
    /**
     * Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
     */
    value: string;
}

/**
 * Network ACLs for SignalR
 */
export interface SignalRNetworkACLsResponse {
    /**
     * Default action when no other rule matches
     */
    defaultAction?: string;
    /**
     * ACLs for requests from private endpoints
     */
    privateEndpoints?: outputs.signalrservice.PrivateEndpointACLResponse[];
    /**
     * ACL for requests from public network
     */
    publicNetwork?: outputs.signalrservice.NetworkACLResponse;
}
/**
 * signalRNetworkACLsResponseProvideDefaults sets the appropriate defaults for SignalRNetworkACLsResponse
 */
export function signalRNetworkACLsResponseProvideDefaults(val: SignalRNetworkACLsResponse): SignalRNetworkACLsResponse {
    return {
        ...val,
        defaultAction: (val.defaultAction) ?? "Deny",
    };
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Upstream template item settings. It defines the Upstream URL of the incoming requests.
 * The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
 */
export interface UpstreamTemplateResponse {
    /**
     * Gets or sets the matching pattern for category names. If not set, it matches any category.
     * There are 3 kind of patterns supported:
     *     1. "*", it to matches any category name
     *     2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages"
     *     3. The single category name, for example, "connections", it matches the category "connections"
     */
    categoryPattern?: string;
    /**
     * Gets or sets the matching pattern for event names. If not set, it matches any event.
     * There are 3 kind of patterns supported:
     *     1. "*", it to matches any event name
     *     2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect"
     *     3. The single event name, for example, "connect", it matches "connect"
     */
    eventPattern?: string;
    /**
     * Gets or sets the matching pattern for hub names. If not set, it matches any hub.
     * There are 3 kind of patterns supported:
     *     1. "*", it to matches any hub name
     *     2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2"
     *     3. The single hub name, for example, "hub1", it matches "hub1"
     */
    hubPattern?: string;
    /**
     * Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
     * For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
     */
    urlTemplate: string;
}

