// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Network ACL
 */
export interface NetworkACLArgs {
    /**
     * Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
     */
    allow?: pulumi.Input<pulumi.Input<string | enums.signalrservice.v20200501.SignalRRequestType>[]>;
    /**
     * Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
     */
    deny?: pulumi.Input<pulumi.Input<string | enums.signalrservice.v20200501.SignalRRequestType>[]>;
}

/**
 * Private endpoint
 */
export interface PrivateEndpointArgs {
    /**
     * Full qualified Id of the private endpoint
     */
    id?: pulumi.Input<string>;
}

/**
 * ACL for a private endpoint
 */
export interface PrivateEndpointACLArgs {
    /**
     * Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
     */
    allow?: pulumi.Input<pulumi.Input<string | enums.signalrservice.v20200501.SignalRRequestType>[]>;
    /**
     * Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
     */
    deny?: pulumi.Input<pulumi.Input<string | enums.signalrservice.v20200501.SignalRRequestType>[]>;
    /**
     * Name of the private endpoint connection
     */
    name: pulumi.Input<string>;
}

/**
 * Connection state of the private endpoint connection
 */
export interface PrivateLinkServiceConnectionStateArgs {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: pulumi.Input<string>;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: pulumi.Input<string | enums.signalrservice.v20200501.PrivateLinkServiceConnectionStatus>;
}

/**
 * The billing information of the SignalR resource.
 */
export interface ResourceSkuArgs {
    /**
     * Optional, integer. The unit count of SignalR resource. 1 by default.
     * 
     * If present, following values are allowed:
     *     Free: 1
     *     Standard: 1,2,5,10,20,50,100
     */
    capacity?: pulumi.Input<number>;
    /**
     * The name of the SKU. Required.
     * 
     * Allowed values: Standard_S1, Free_F1
     */
    name: pulumi.Input<string>;
    /**
     * Optional tier of this particular SKU. 'Standard' or 'Free'. 
     * 
     * `Basic` is deprecated, use `Standard` instead.
     */
    tier?: pulumi.Input<string | enums.signalrservice.v20200501.SignalRSkuTier>;
}

/**
 * The settings for the Upstream when the Azure SignalR is in server-less mode.
 */
export interface ServerlessUpstreamSettingsArgs {
    /**
     * Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
     */
    templates?: pulumi.Input<pulumi.Input<inputs.signalrservice.v20200501.UpstreamTemplateArgs>[]>;
}

/**
 * Cross-Origin Resource Sharing (CORS) settings.
 */
export interface SignalRCorsSettingsArgs {
    /**
     * Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
     */
    allowedOrigins?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Feature of a SignalR resource, which controls the SignalR runtime behavior.
 */
export interface SignalRFeatureArgs {
    /**
     * FeatureFlags is the supported features of Azure SignalR service.
     * - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
     * - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
     */
    flag: pulumi.Input<string | enums.signalrservice.v20200501.FeatureFlags>;
    /**
     * Optional properties related to this feature.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
     */
    value: pulumi.Input<string>;
}

/**
 * Network ACLs for SignalR
 */
export interface SignalRNetworkACLsArgs {
    /**
     * Default action when no other rule matches
     */
    defaultAction?: pulumi.Input<string | enums.signalrservice.v20200501.ACLAction>;
    /**
     * ACLs for requests from private endpoints
     */
    privateEndpoints?: pulumi.Input<pulumi.Input<inputs.signalrservice.v20200501.PrivateEndpointACLArgs>[]>;
    /**
     * ACL for requests from public network
     */
    publicNetwork?: pulumi.Input<inputs.signalrservice.v20200501.NetworkACLArgs>;
}
/**
 * signalRNetworkACLsArgsProvideDefaults sets the appropriate defaults for SignalRNetworkACLsArgs
 */
export function signalRNetworkACLsArgsProvideDefaults(val: SignalRNetworkACLsArgs): SignalRNetworkACLsArgs {
    return {
        ...val,
        defaultAction: (val.defaultAction) ?? "Deny",
    };
}

/**
 * Upstream template item settings. It defines the Upstream URL of the incoming requests.
 * The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
 */
export interface UpstreamTemplateArgs {
    /**
     * Gets or sets the matching pattern for category names. If not set, it matches any category.
     * There are 3 kind of patterns supported:
     *     1. "*", it to matches any category name
     *     2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages"
     *     3. The single category name, for example, "connections", it matches the category "connections"
     */
    categoryPattern?: pulumi.Input<string>;
    /**
     * Gets or sets the matching pattern for event names. If not set, it matches any event.
     * There are 3 kind of patterns supported:
     *     1. "*", it to matches any event name
     *     2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect"
     *     3. The single event name, for example, "connect", it matches "connect"
     */
    eventPattern?: pulumi.Input<string>;
    /**
     * Gets or sets the matching pattern for hub names. If not set, it matches any hub.
     * There are 3 kind of patterns supported:
     *     1. "*", it to matches any hub name
     *     2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2"
     *     3. The single hub name, for example, "hub1", it matches "hub1"
     */
    hubPattern?: pulumi.Input<string>;
    /**
     * Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
     * For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
     */
    urlTemplate: pulumi.Input<string>;
}

