// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * A2A specific policy details.
 */
export interface A2APolicyDetailsResponse {
    /**
     * The app consistent snapshot frequency in minutes.
     */
    appConsistentFrequencyInMinutes?: number;
    /**
     * The crash consistent snapshot frequency in minutes.
     */
    crashConsistentFrequencyInMinutes?: number;
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'A2A'.
     */
    instanceType: "A2A";
    /**
     * A value indicating whether multi-VM sync has to be enabled.
     */
    multiVmSyncStatus?: string;
    /**
     * The duration in minutes until which the recovery points need to be stored.
     */
    recoveryPointHistory?: number;
    /**
     * The recovery point threshold in minutes.
     */
    recoveryPointThresholdInMinutes?: number;
}

/**
 * A2A protected disk details.
 */
export interface A2AProtectedDiskDetailsResponse {
    /**
     * The data pending at source virtual machine in MB.
     */
    dataPendingAtSourceAgentInMB?: number;
    /**
     * The data pending for replication in MB at staging account.
     */
    dataPendingInStagingStorageAccountInMB?: number;
    /**
     * The KeyVault resource id for secret (BEK).
     */
    dekKeyVaultArmId?: string;
    /**
     * The disk capacity in bytes.
     */
    diskCapacityInBytes?: number;
    /**
     * The disk name.
     */
    diskName?: string;
    /**
     * The type of disk.
     */
    diskType?: string;
    /**
     * The disk uri.
     */
    diskUri?: string;
    /**
     * A value indicating whether vm has encrypted os disk or not.
     */
    isDiskEncrypted?: boolean;
    /**
     * A value indicating whether disk key got encrypted or not.
     */
    isDiskKeyEncrypted?: boolean;
    /**
     * The KeyVault resource id for key (KEK).
     */
    kekKeyVaultArmId?: string;
    /**
     * The key URL / identifier (KEK).
     */
    keyIdentifier?: string;
    /**
     * The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
     */
    monitoringJobType?: string;
    /**
     * The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
     */
    monitoringPercentageCompletion?: number;
    /**
     * The primary disk storage account.
     */
    primaryDiskAzureStorageAccountId?: string;
    /**
     * The primary staging storage account.
     */
    primaryStagingAzureStorageAccountId?: string;
    /**
     * The recovery disk storage account.
     */
    recoveryAzureStorageAccountId?: string;
    /**
     * Recovery disk uri.
     */
    recoveryDiskUri?: string;
    /**
     * A value indicating whether resync is required for this disk.
     */
    resyncRequired?: boolean;
    /**
     * The secret URL / identifier (BEK).
     */
    secretIdentifier?: string;
}

/**
 * A2A protected managed disk details.
 */
export interface A2AProtectedManagedDiskDetailsResponse {
    /**
     * The data pending at source virtual machine in MB.
     */
    dataPendingAtSourceAgentInMB?: number;
    /**
     * The data pending for replication in MB at staging account.
     */
    dataPendingInStagingStorageAccountInMB?: number;
    /**
     * The KeyVault resource id for secret (BEK).
     */
    dekKeyVaultArmId?: string;
    /**
     * The disk capacity in bytes.
     */
    diskCapacityInBytes?: number;
    /**
     * The managed disk Arm id.
     */
    diskId?: string;
    /**
     * The disk name.
     */
    diskName?: string;
    /**
     * The type of disk.
     */
    diskType?: string;
    /**
     * A value indicating whether vm has encrypted os disk or not.
     */
    isDiskEncrypted?: boolean;
    /**
     * A value indicating whether disk key got encrypted or not.
     */
    isDiskKeyEncrypted?: boolean;
    /**
     * The KeyVault resource id for key (KEK).
     */
    kekKeyVaultArmId?: string;
    /**
     * The key URL / identifier (KEK).
     */
    keyIdentifier?: string;
    /**
     * The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
     */
    monitoringJobType?: string;
    /**
     * The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
     */
    monitoringPercentageCompletion?: number;
    /**
     * The primary staging storage account.
     */
    primaryStagingAzureStorageAccountId?: string;
    /**
     * The replica disk type. Its an optional value and will be same as source disk type if not user provided.
     */
    recoveryReplicaDiskAccountType?: string;
    /**
     * Recovery replica disk Arm Id.
     */
    recoveryReplicaDiskId?: string;
    /**
     * The recovery disk resource group Arm Id.
     */
    recoveryResourceGroupId?: string;
    /**
     * The target disk type after failover. Its an optional value and will be same as source disk type if not user provided.
     */
    recoveryTargetDiskAccountType?: string;
    /**
     * Recovery target disk Arm Id.
     */
    recoveryTargetDiskId?: string;
    /**
     * A value indicating whether resync is required for this disk.
     */
    resyncRequired?: boolean;
    /**
     * The secret URL / identifier (BEK).
     */
    secretIdentifier?: string;
}

/**
 * A2A provider specific settings.
 */
export interface A2AProtectionContainerMappingDetailsResponse {
    /**
     * A value indicating whether the auto update is enabled.
     */
    agentAutoUpdateStatus?: string;
    /**
     * The automation account arm id.
     */
    automationAccountArmId?: string;
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'A2A'.
     */
    instanceType: "A2A";
    /**
     * The job schedule arm name.
     */
    jobScheduleName?: string;
    /**
     * The schedule arm name.
     */
    scheduleName?: string;
}

/**
 * A2A provider specific settings.
 */
export interface A2AReplicationDetailsResponse {
    /**
     * The agent version.
     */
    agentVersion?: string;
    /**
     * The fabric specific object Id of the virtual machine.
     */
    fabricObjectId?: string;
    /**
     * Gets the Instance type.
     * Expected value is 'A2A'.
     */
    instanceType: "A2A";
    /**
     * A value indicating whether replication agent update is required.
     */
    isReplicationAgentUpdateRequired?: boolean;
    /**
     * The last heartbeat received from the source server.
     */
    lastHeartbeat?: string;
    /**
     * The time (in UTC) when the last RPO value was calculated by Protection Service.
     */
    lastRpoCalculatedTime?: string;
    /**
     * An id associated with the PE that survives actions like switch protection which change the backing PE/CPE objects internally.The lifecycle id gets carried forward to have a link/continuity in being able to have an Id that denotes the "same" protected item even though other internal Ids/ARM Id might be changing.
     */
    lifecycleId?: string;
    /**
     * The management Id.
     */
    managementId?: string;
    /**
     * The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
     */
    monitoringJobType?: string;
    /**
     * The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
     */
    monitoringPercentageCompletion?: number;
    /**
     * Whether Multi VM group is auto created or specified by user.
     */
    multiVmGroupCreateOption?: string;
    /**
     * The multi vm group Id.
     */
    multiVmGroupId?: string;
    /**
     * The multi vm group name.
     */
    multiVmGroupName?: string;
    /**
     * The type of operating system.
     */
    osType?: string;
    /**
     * Primary fabric location.
     */
    primaryFabricLocation?: string;
    /**
     * The list of protected disks.
     */
    protectedDisks?: outputs.recoveryservices.v20180110.A2AProtectedDiskDetailsResponse[];
    /**
     * The list of protected managed disks.
     */
    protectedManagedDisks?: outputs.recoveryservices.v20180110.A2AProtectedManagedDiskDetailsResponse[];
    /**
     * The recovery availability set.
     */
    recoveryAvailabilitySet?: string;
    /**
     * The recovery resource group.
     */
    recoveryAzureResourceGroupId?: string;
    /**
     * The name of recovery virtual machine.
     */
    recoveryAzureVMName?: string;
    /**
     * The size of recovery virtual machine.
     */
    recoveryAzureVMSize?: string;
    /**
     * The recovery boot diagnostic storage account Arm Id.
     */
    recoveryBootDiagStorageAccountId?: string;
    /**
     * The recovery cloud service.
     */
    recoveryCloudService?: string;
    /**
     * The recovery fabric location.
     */
    recoveryFabricLocation?: string;
    /**
     * The recovery fabric object Id.
     */
    recoveryFabricObjectId?: string;
    /**
     * The last RPO value in seconds.
     */
    rpoInSeconds?: number;
    /**
     * The recovery virtual network.
     */
    selectedRecoveryAzureNetworkId?: string;
    /**
     * The test failover fabric object Id.
     */
    testFailoverRecoveryFabricObjectId?: string;
    /**
     * The virtual machine nic details.
     */
    vmNics?: outputs.recoveryservices.v20180110.VMNicDetailsResponse[];
    /**
     * The protection state for the vm.
     */
    vmProtectionState?: string;
    /**
     * The protection state description for the vm.
     */
    vmProtectionStateDescription?: string;
    /**
     * The synced configuration details.
     */
    vmSyncedConfigDetails?: outputs.recoveryservices.v20180110.AzureToAzureVmSyncedConfigDetailsResponse;
}

/**
 * Azure Fabric Specific Details.
 */
export interface AzureFabricSpecificDetailsResponse {
    /**
     * The container Ids for the Azure fabric.
     */
    containerIds?: string[];
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'Azure'.
     */
    instanceType: "Azure";
    /**
     * The Location for the Azure fabric.
     */
    location?: string;
}

/**
 * A2A Network Mapping fabric specific settings.
 */
export interface AzureToAzureNetworkMappingSettingsResponse {
    /**
     * Gets the Instance type.
     * Expected value is 'AzureToAzure'.
     */
    instanceType: "AzureToAzure";
    /**
     * The primary fabric location.
     */
    primaryFabricLocation?: string;
    /**
     * The recovery fabric location.
     */
    recoveryFabricLocation?: string;
}

/**
 * Azure to Azure VM synced configuration details.
 */
export interface AzureToAzureVmSyncedConfigDetailsResponse {
    /**
     * The Azure VM input endpoints.
     */
    inputEndpoints?: outputs.recoveryservices.v20180110.InputEndpointResponse[];
    /**
     * The Azure role assignments.
     */
    roleAssignments?: outputs.recoveryservices.v20180110.RoleAssignmentResponse[];
    /**
     * The Azure VM tags.
     */
    tags?: {[key: string]: string};
}

/**
 * Disk details for E2A provider.
 */
export interface AzureVmDiskDetailsResponse {
    /**
     * Ordinal\LunId of the disk for the Azure VM.
     */
    lunId?: string;
    /**
     * Max side in MB.
     */
    maxSizeMB?: string;
    /**
     * Blob uri of the Azure disk.
     */
    targetDiskLocation?: string;
    /**
     * The target Azure disk name.
     */
    targetDiskName?: string;
    /**
     * The VHD id.
     */
    vhdId?: string;
    /**
     * VHD name.
     */
    vhdName?: string;
    /**
     * VHD type.
     */
    vhdType?: string;
}

/**
 * Current job details of the migration item.
 */
export interface CurrentJobDetailsResponse {
    /**
     * The ARM Id of the job being executed.
     */
    jobId?: string;
    /**
     * The job name.
     */
    jobName?: string;
    /**
     * The start time of the job.
     */
    startTime?: string;
}

/**
 * Current scenario details of the protected entity.
 */
export interface CurrentScenarioDetailsResponse {
    /**
     * ARM Id of the job being executed.
     */
    jobId?: string;
    /**
     * Scenario name.
     */
    scenarioName?: string;
    /**
     * Start time of the workflow.
     */
    startTime?: string;
}

/**
 * The data store details of the MT.
 */
export interface DataStoreResponse {
    /**
     * The capacity of data store in GBs.
     */
    capacity?: string;
    /**
     * The free space of data store in GBs.
     */
    freeSpace?: string;
    /**
     * The symbolic name of data store.
     */
    symbolicName?: string;
    /**
     * The type of data store.
     */
    type?: string;
    /**
     * The uuid of data store.
     */
    uuid?: string;
}

/**
 * On-prem disk details data.
 */
export interface DiskDetailsResponse {
    /**
     * The hard disk max size in MB.
     */
    maxSizeMB?: number;
    /**
     * The VHD Id.
     */
    vhdId?: string;
    /**
     * The VHD name.
     */
    vhdName?: string;
    /**
     * The type of the volume.
     */
    vhdType?: string;
}

/**
 * Encryption details for the fabric.
 */
export interface EncryptionDetailsResponse {
    /**
     * The key encryption key certificate expiry date.
     */
    kekCertExpiryDate?: string;
    /**
     * The key encryption key certificate thumbprint.
     */
    kekCertThumbprint?: string;
    /**
     * The key encryption key state for the Vmm.
     */
    kekState?: string;
}

/**
 * Fabric properties.
 */
export interface FabricPropertiesResponse {
    /**
     * BCDR state of the fabric.
     */
    bcdrState?: string;
    /**
     * Fabric specific settings.
     */
    customDetails?: outputs.recoveryservices.v20180110.AzureFabricSpecificDetailsResponse | outputs.recoveryservices.v20180110.HyperVSiteDetailsResponse | outputs.recoveryservices.v20180110.VMwareDetailsResponse | outputs.recoveryservices.v20180110.VMwareV2FabricSpecificDetailsResponse | outputs.recoveryservices.v20180110.VmmDetailsResponse;
    /**
     * Encryption details for the fabric.
     */
    encryptionDetails?: outputs.recoveryservices.v20180110.EncryptionDetailsResponse;
    /**
     * Friendly name of the fabric.
     */
    friendlyName?: string;
    /**
     * Health of fabric.
     */
    health?: string;
    /**
     * Fabric health error details.
     */
    healthErrorDetails?: outputs.recoveryservices.v20180110.HealthErrorResponse[];
    /**
     * Dra Registration Id.
     */
    internalIdentifier?: string;
    /**
     * Rollover encryption details for the fabric.
     */
    rolloverEncryptionDetails?: outputs.recoveryservices.v20180110.EncryptionDetailsResponse;
}

/**
 * Health Error
 */
export interface HealthErrorResponse {
    /**
     * Error creation time (UTC)
     */
    creationTimeUtc?: string;
    /**
     * ID of the entity.
     */
    entityId?: string;
    /**
     * Category of error.
     */
    errorCategory?: string;
    /**
     * Error code.
     */
    errorCode?: string;
    /**
     * Level of error.
     */
    errorLevel?: string;
    /**
     * Error message.
     */
    errorMessage?: string;
    /**
     * Source of error.
     */
    errorSource?: string;
    /**
     * Type of error.
     */
    errorType?: string;
    /**
     * The inner health errors. HealthError having a list of HealthError as child errors is problematic. InnerHealthError is used because this will prevent an infinite loop of structures when Hydra tries to auto-generate the contract. We are exposing the related health errors as inner health errors and all API consumers can utilize this in the same fashion as Exception -&gt; InnerException.
     */
    innerHealthErrors?: outputs.recoveryservices.v20180110.InnerHealthErrorResponse[];
    /**
     * Possible causes of error.
     */
    possibleCauses?: string;
    /**
     * Recommended action to resolve error.
     */
    recommendedAction?: string;
    /**
     * DRA error message.
     */
    recoveryProviderErrorMessage?: string;
    /**
     * Summary message of the entity.
     */
    summaryMessage?: string;
}

/**
 * Hyper-V Replica Azure specific protection profile details.
 */
export interface HyperVReplicaAzurePolicyDetailsResponse {
    /**
     * The active storage account Id.
     */
    activeStorageAccountId?: string;
    /**
     * The interval (in hours) at which Hyper-V Replica should create an application consistent snapshot within the VM.
     */
    applicationConsistentSnapshotFrequencyInHours?: number;
    /**
     * A value indicating whether encryption is enabled for virtual machines in this cloud.
     */
    encryption?: string;
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'HyperVReplicaAzure'.
     */
    instanceType: "HyperVReplicaAzure";
    /**
     * The scheduled start time for the initial replication. If this parameter is Null, the initial replication starts immediately.
     */
    onlineReplicationStartTime?: string;
    /**
     * The duration (in hours) to which point the recovery history needs to be maintained.
     */
    recoveryPointHistoryDurationInHours?: number;
    /**
     * The replication interval.
     */
    replicationInterval?: number;
}

/**
 * Hyper V Replica Azure provider specific settings.
 */
export interface HyperVReplicaAzureReplicationDetailsResponse {
    /**
     * Azure VM Disk details.
     */
    azureVmDiskDetails?: outputs.recoveryservices.v20180110.AzureVmDiskDetailsResponse[];
    /**
     * The selected option to enable RDP\SSH on target vm after failover. String value of {SrsDataContract.EnableRDPOnTargetOption} enum.
     */
    enableRdpOnTargetOption?: string;
    /**
     * The encryption info.
     */
    encryption?: string;
    /**
     * Initial replication details.
     */
    initialReplicationDetails?: outputs.recoveryservices.v20180110.InitialReplicationDetailsResponse;
    /**
     * Gets the Instance type.
     * Expected value is 'HyperVReplicaAzure'.
     */
    instanceType: "HyperVReplicaAzure";
    /**
     * The Last replication time.
     */
    lastReplicatedTime?: string;
    /**
     * The last RPO calculated time.
     */
    lastRpoCalculatedTime?: string;
    /**
     * License Type of the VM to be used.
     */
    licenseType?: string;
    /**
     * The operating system info.
     */
    oSDetails?: outputs.recoveryservices.v20180110.OSDetailsResponse;
    /**
     * The recovery availability set Id.
     */
    recoveryAvailabilitySetId?: string;
    /**
     * The ARM id of the log storage account used for replication. This will be set to null if no log storage account was provided during enable protection.
     */
    recoveryAzureLogStorageAccountId?: string;
    /**
     * The target resource group Id.
     */
    recoveryAzureResourceGroupId?: string;
    /**
     * The recovery Azure storage account.
     */
    recoveryAzureStorageAccount?: string;
    /**
     * The Recovery Azure VM size.
     */
    recoveryAzureVMSize?: string;
    /**
     * Recovery Azure given name.
     */
    recoveryAzureVmName?: string;
    /**
     * Last RPO value.
     */
    rpoInSeconds?: number;
    /**
     * The selected recovery azure network Id.
     */
    selectedRecoveryAzureNetworkId?: string;
    /**
     * The selected source nic Id which will be used as the primary nic during failover.
     */
    selectedSourceNicId?: string;
    /**
     * The CPU count of the VM on the primary side.
     */
    sourceVmCpuCount?: number;
    /**
     * The RAM size of the VM on the primary side.
     */
    sourceVmRamSizeInMB?: number;
    /**
     * A value indicating whether managed disks should be used during failover.
     */
    useManagedDisks?: string;
    /**
     * The virtual machine Id.
     */
    vmId?: string;
    /**
     * The PE Network details.
     */
    vmNics?: outputs.recoveryservices.v20180110.VMNicDetailsResponse[];
    /**
     * The protection state for the vm.
     */
    vmProtectionState?: string;
    /**
     * The protection state description for the vm.
     */
    vmProtectionStateDescription?: string;
}

/**
 * Base class for HyperVReplica policy details.
 */
export interface HyperVReplicaBasePolicyDetailsResponse {
    /**
     * A value indicating the authentication type.
     */
    allowedAuthenticationType?: number;
    /**
     * A value indicating the application consistent frequency.
     */
    applicationConsistentSnapshotFrequencyInHours?: number;
    /**
     * A value indicating whether compression has to be enabled.
     */
    compression?: string;
    /**
     * A value indicating whether IR is online.
     */
    initialReplicationMethod?: string;
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'HyperVReplicaBasePolicyDetails'.
     */
    instanceType: "HyperVReplicaBasePolicyDetails";
    /**
     * A value indicating the offline IR export path.
     */
    offlineReplicationExportPath?: string;
    /**
     * A value indicating the offline IR import path.
     */
    offlineReplicationImportPath?: string;
    /**
     * A value indicating the online IR start time.
     */
    onlineReplicationStartTime?: string;
    /**
     * A value indicating the number of recovery points.
     */
    recoveryPoints?: number;
    /**
     * A value indicating whether the VM has to be auto deleted. Supported Values: String.Empty, None, OnRecoveryCloud
     */
    replicaDeletionOption?: string;
    /**
     * A value indicating the recovery HTTPS port.
     */
    replicationPort?: number;
}

/**
 * Hyper V replica provider specific settings base class.
 */
export interface HyperVReplicaBaseReplicationDetailsResponse {
    /**
     * Initial replication details.
     */
    initialReplicationDetails?: outputs.recoveryservices.v20180110.InitialReplicationDetailsResponse;
    /**
     * Gets the Instance type.
     * Expected value is 'HyperVReplicaBaseReplicationDetails'.
     */
    instanceType: "HyperVReplicaBaseReplicationDetails";
    /**
     * The Last replication time.
     */
    lastReplicatedTime?: string;
    /**
     * VM disk details.
     */
    vMDiskDetails?: outputs.recoveryservices.v20180110.DiskDetailsResponse[];
    /**
     * The virtual machine Id.
     */
    vmId?: string;
    /**
     * The PE Network details.
     */
    vmNics?: outputs.recoveryservices.v20180110.VMNicDetailsResponse[];
    /**
     * The protection state for the vm.
     */
    vmProtectionState?: string;
    /**
     * The protection state description for the vm.
     */
    vmProtectionStateDescription?: string;
}

/**
 * Hyper-V Replica Blue specific protection profile details.
 */
export interface HyperVReplicaBluePolicyDetailsResponse {
    /**
     * A value indicating the authentication type.
     */
    allowedAuthenticationType?: number;
    /**
     * A value indicating the application consistent frequency.
     */
    applicationConsistentSnapshotFrequencyInHours?: number;
    /**
     * A value indicating whether compression has to be enabled.
     */
    compression?: string;
    /**
     * A value indicating whether IR is online.
     */
    initialReplicationMethod?: string;
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'HyperVReplica2012R2'.
     */
    instanceType: "HyperVReplica2012R2";
    /**
     * A value indicating the offline IR export path.
     */
    offlineReplicationExportPath?: string;
    /**
     * A value indicating the offline IR import path.
     */
    offlineReplicationImportPath?: string;
    /**
     * A value indicating the online IR start time.
     */
    onlineReplicationStartTime?: string;
    /**
     * A value indicating the number of recovery points.
     */
    recoveryPoints?: number;
    /**
     * A value indicating whether the VM has to be auto deleted. Supported Values: String.Empty, None, OnRecoveryCloud
     */
    replicaDeletionOption?: string;
    /**
     * A value indicating the replication interval.
     */
    replicationFrequencyInSeconds?: number;
    /**
     * A value indicating the recovery HTTPS port.
     */
    replicationPort?: number;
}

/**
 * HyperV replica 2012 R2 (Blue) replication details.
 */
export interface HyperVReplicaBlueReplicationDetailsResponse {
    /**
     * Initial replication details.
     */
    initialReplicationDetails?: outputs.recoveryservices.v20180110.InitialReplicationDetailsResponse;
    /**
     * Gets the Instance type.
     * Expected value is 'HyperVReplica2012R2'.
     */
    instanceType: "HyperVReplica2012R2";
    /**
     * The Last replication time.
     */
    lastReplicatedTime?: string;
    /**
     * VM disk details.
     */
    vMDiskDetails?: outputs.recoveryservices.v20180110.DiskDetailsResponse[];
    /**
     * The virtual machine Id.
     */
    vmId?: string;
    /**
     * The PE Network details.
     */
    vmNics?: outputs.recoveryservices.v20180110.VMNicDetailsResponse[];
    /**
     * The protection state for the vm.
     */
    vmProtectionState?: string;
    /**
     * The protection state description for the vm.
     */
    vmProtectionStateDescription?: string;
}

/**
 * Hyper-V Replica Blue specific protection profile details.
 */
export interface HyperVReplicaPolicyDetailsResponse {
    /**
     * A value indicating the authentication type.
     */
    allowedAuthenticationType?: number;
    /**
     * A value indicating the application consistent frequency.
     */
    applicationConsistentSnapshotFrequencyInHours?: number;
    /**
     * A value indicating whether compression has to be enabled.
     */
    compression?: string;
    /**
     * A value indicating whether IR is online.
     */
    initialReplicationMethod?: string;
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'HyperVReplica2012'.
     */
    instanceType: "HyperVReplica2012";
    /**
     * A value indicating the offline IR export path.
     */
    offlineReplicationExportPath?: string;
    /**
     * A value indicating the offline IR import path.
     */
    offlineReplicationImportPath?: string;
    /**
     * A value indicating the online IR start time.
     */
    onlineReplicationStartTime?: string;
    /**
     * A value indicating the number of recovery points.
     */
    recoveryPoints?: number;
    /**
     * A value indicating whether the VM has to be auto deleted. Supported Values: String.Empty, None, OnRecoveryCloud
     */
    replicaDeletionOption?: string;
    /**
     * A value indicating the recovery HTTPS port.
     */
    replicationPort?: number;
}

/**
 * HyperV replica 2012 replication details.
 */
export interface HyperVReplicaReplicationDetailsResponse {
    /**
     * Initial replication details.
     */
    initialReplicationDetails?: outputs.recoveryservices.v20180110.InitialReplicationDetailsResponse;
    /**
     * Gets the Instance type.
     * Expected value is 'HyperVReplica2012'.
     */
    instanceType: "HyperVReplica2012";
    /**
     * The Last replication time.
     */
    lastReplicatedTime?: string;
    /**
     * VM disk details.
     */
    vMDiskDetails?: outputs.recoveryservices.v20180110.DiskDetailsResponse[];
    /**
     * The virtual machine Id.
     */
    vmId?: string;
    /**
     * The PE Network details.
     */
    vmNics?: outputs.recoveryservices.v20180110.VMNicDetailsResponse[];
    /**
     * The protection state for the vm.
     */
    vmProtectionState?: string;
    /**
     * The protection state description for the vm.
     */
    vmProtectionStateDescription?: string;
}

/**
 * HyperVSite fabric specific details.
 */
export interface HyperVSiteDetailsResponse {
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'HyperVSite'.
     */
    instanceType: "HyperVSite";
}

/**
 * Identity provider details.
 */
export interface IdentityProviderDetailsResponse {
    /**
     * The base authority for Azure Active Directory authentication.
     */
    aadAuthority?: string;
    /**
     * The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     */
    applicationId?: string;
    /**
     * The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     */
    audience?: string;
    /**
     * The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     */
    objectId?: string;
    /**
     * The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     */
    tenantId?: string;
}

/**
 * The details of the InMage agent.
 */
export interface InMageAgentDetailsResponse {
    /**
     * Agent expiry date.
     */
    agentExpiryDate?: string;
    /**
     * A value indicating whether installed agent needs to be updated.
     */
    agentUpdateStatus?: string;
    /**
     * The agent version.
     */
    agentVersion?: string;
    /**
     * A value indicating whether reboot is required after update is applied.
     */
    postUpdateRebootStatus?: string;
}

/**
 * InMage Azure v2 specific protection profile details.
 */
export interface InMageAzureV2PolicyDetailsResponse {
    /**
     * The app consistent snapshot frequency in minutes.
     */
    appConsistentFrequencyInMinutes?: number;
    /**
     * The crash consistent snapshot frequency in minutes.
     */
    crashConsistentFrequencyInMinutes?: number;
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'InMageAzureV2'.
     */
    instanceType: "InMageAzureV2";
    /**
     * A value indicating whether multi-VM sync has to be enabled.
     */
    multiVmSyncStatus?: string;
    /**
     * The duration in minutes until which the recovery points need to be stored.
     */
    recoveryPointHistory?: number;
    /**
     * The recovery point threshold in minutes.
     */
    recoveryPointThresholdInMinutes?: number;
}

/**
 * InMageAzureV2 protected disk details.
 */
export interface InMageAzureV2ProtectedDiskDetailsResponse {
    /**
     * The disk capacity in bytes.
     */
    diskCapacityInBytes?: number;
    /**
     * The disk id.
     */
    diskId?: string;
    /**
     * The disk name.
     */
    diskName?: string;
    /**
     * A value indicating whether disk is resized.
     */
    diskResized?: string;
    /**
     * The disk file system capacity in bytes.
     */
    fileSystemCapacityInBytes?: number;
    /**
     * The health error code for the disk.
     */
    healthErrorCode?: string;
    /**
     * The last RPO calculated time.
     */
    lastRpoCalculatedTime?: string;
    /**
     * The protection stage.
     */
    protectionStage?: string;
    /**
     * The PS data transit in MB.
     */
    psDataInMegaBytes?: number;
    /**
     * The resync duration in seconds.
     */
    resyncDurationInSeconds?: number;
    /**
     * The resync progress percentage.
     */
    resyncProgressPercentage?: number;
    /**
     * A value indicating whether resync is required for this disk.
     */
    resyncRequired?: string;
    /**
     * The RPO in seconds.
     */
    rpoInSeconds?: number;
    /**
     * The source data transit in MB.
     */
    sourceDataInMegaBytes?: number;
    /**
     * The target data transit in MB.
     */
    targetDataInMegaBytes?: number;
}

/**
 * InMageAzureV2 provider specific settings
 */
export interface InMageAzureV2ReplicationDetailsResponse {
    /**
     * Agent expiry date.
     */
    agentExpiryDate?: string;
    /**
     * The agent version.
     */
    agentVersion?: string;
    /**
     * Azure VM Disk details.
     */
    azureVMDiskDetails?: outputs.recoveryservices.v20180110.AzureVmDiskDetailsResponse[];
    /**
     * The compressed data change rate in MB.
     */
    compressedDataRateInMB?: number;
    /**
     * The data stores of the on-premise machine. Value can be list of strings that contain data store names.
     */
    datastores?: string[];
    /**
     * A value indicating the discovery type of the machine. Value can be vCenter or physical.
     */
    discoveryType?: string;
    /**
     * A value indicating whether any disk is resized for this VM.
     */
    diskResized?: string;
    /**
     * The selected option to enable RDP\SSH on target vm after failover. String value of {SrsDataContract.EnableRDPOnTargetOption} enum.
     */
    enableRdpOnTargetOption?: string;
    /**
     * The infrastructure VM Id.
     */
    infrastructureVmId?: string;
    /**
     * Gets the Instance type.
     * Expected value is 'InMageAzureV2'.
     */
    instanceType: "InMageAzureV2";
    /**
     * The source IP address.
     */
    ipAddress?: string;
    /**
     * A value indicating whether installed agent needs to be updated.
     */
    isAgentUpdateRequired?: string;
    /**
     * A value indicating whether the source server requires a restart after update.
     */
    isRebootAfterUpdateRequired?: string;
    /**
     * The last heartbeat received from the source server.
     */
    lastHeartbeat?: string;
    /**
     * The last RPO calculated time.
     */
    lastRpoCalculatedTime?: string;
    /**
     * The last update time received from on-prem components.
     */
    lastUpdateReceivedTime?: string;
    /**
     * License Type of the VM to be used.
     */
    licenseType?: string;
    /**
     * The master target Id.
     */
    masterTargetId?: string;
    /**
     * The multi vm group Id.
     */
    multiVmGroupId?: string;
    /**
     * The multi vm group name.
     */
    multiVmGroupName?: string;
    /**
     * A value indicating whether multi vm sync is enabled or disabled.
     */
    multiVmSyncStatus?: string;
    /**
     * The id of the disk containing the OS.
     */
    osDiskId?: string;
    /**
     * The type of the OS on the VM.
     */
    osType?: string;
    /**
     * The OS Version of the protected item.
     */
    osVersion?: string;
    /**
     * The process server Id.
     */
    processServerId?: string;
    /**
     * The list of protected disks.
     */
    protectedDisks?: outputs.recoveryservices.v20180110.InMageAzureV2ProtectedDiskDetailsResponse[];
    /**
     * The protection stage.
     */
    protectionStage?: string;
    /**
     * The recovery availability set Id.
     */
    recoveryAvailabilitySetId?: string;
    /**
     * The ARM id of the log storage account used for replication. This will be set to null if no log storage account was provided during enable protection.
     */
    recoveryAzureLogStorageAccountId?: string;
    /**
     * The target resource group Id.
     */
    recoveryAzureResourceGroupId?: string;
    /**
     * The recovery Azure storage account.
     */
    recoveryAzureStorageAccount?: string;
    /**
     * Recovery Azure given name.
     */
    recoveryAzureVMName?: string;
    /**
     * The Recovery Azure VM size.
     */
    recoveryAzureVMSize?: string;
    /**
     * The replica id of the protected item.
     */
    replicaId?: string;
    /**
     * The resync progress percentage.
     */
    resyncProgressPercentage?: number;
    /**
     * The RPO in seconds.
     */
    rpoInSeconds?: number;
    /**
     * The selected recovery azure network Id.
     */
    selectedRecoveryAzureNetworkId?: string;
    /**
     * The selected source nic Id which will be used as the primary nic during failover.
     */
    selectedSourceNicId?: string;
    /**
     * The CPU count of the VM on the primary side.
     */
    sourceVmCpuCount?: number;
    /**
     * The RAM size of the VM on the primary side.
     */
    sourceVmRamSizeInMB?: number;
    /**
     * The ARM Id of the target Azure VM. This value will be null until the VM is failed over. Only after failure it will be populated with the ARM Id of the Azure VM.
     */
    targetVmId?: string;
    /**
     * The uncompressed data change rate in MB.
     */
    uncompressedDataRateInMB?: number;
    /**
     * A value indicating whether managed disks should be used during failover.
     */
    useManagedDisks?: string;
    /**
     * The vCenter infrastructure Id.
     */
    vCenterInfrastructureId?: string;
    /**
     * The validation errors of the on-premise machine Value can be list of validation errors.
     */
    validationErrors?: outputs.recoveryservices.v20180110.HealthErrorResponse[];
    /**
     * The OS disk VHD name.
     */
    vhdName?: string;
    /**
     * The virtual machine Id.
     */
    vmId?: string;
    /**
     * The PE Network details.
     */
    vmNics?: outputs.recoveryservices.v20180110.VMNicDetailsResponse[];
    /**
     * The protection state for the vm.
     */
    vmProtectionState?: string;
    /**
     * The protection state description for the vm.
     */
    vmProtectionStateDescription?: string;
}

/**
 * Base class for the policies of providers using InMage replication.
 */
export interface InMageBasePolicyDetailsResponse {
    /**
     * The app consistent snapshot frequency in minutes.
     */
    appConsistentFrequencyInMinutes?: number;
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'InMageBasePolicyDetails'.
     */
    instanceType: "InMageBasePolicyDetails";
    /**
     * A value indicating whether multi-VM sync has to be enabled.
     */
    multiVmSyncStatus?: string;
    /**
     * The duration in minutes until which the recovery points need to be stored.
     */
    recoveryPointHistory?: number;
    /**
     * The recovery point threshold in minutes.
     */
    recoveryPointThresholdInMinutes?: number;
}

/**
 * InMage specific protection profile details.
 */
export interface InMagePolicyDetailsResponse {
    /**
     * The app consistent snapshot frequency in minutes.
     */
    appConsistentFrequencyInMinutes?: number;
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'InMage'.
     */
    instanceType: "InMage";
    /**
     * A value indicating whether multi-VM sync has to be enabled.
     */
    multiVmSyncStatus?: string;
    /**
     * The duration in minutes until which the recovery points need to be stored.
     */
    recoveryPointHistory?: number;
    /**
     * The recovery point threshold in minutes.
     */
    recoveryPointThresholdInMinutes?: number;
}

/**
 * InMage protected disk details.
 */
export interface InMageProtectedDiskDetailsResponse {
    /**
     * The disk capacity in bytes.
     */
    diskCapacityInBytes?: number;
    /**
     * The disk id.
     */
    diskId?: string;
    /**
     * The disk name.
     */
    diskName?: string;
    /**
     * A value indicating whether disk is resized.
     */
    diskResized?: string;
    /**
     * The file system capacity in bytes.
     */
    fileSystemCapacityInBytes?: number;
    /**
     * The health error code for the disk.
     */
    healthErrorCode?: string;
    /**
     * The last RPO calculated time.
     */
    lastRpoCalculatedTime?: string;
    /**
     * The protection stage.
     */
    protectionStage?: string;
    /**
     * The PS data transit in MB.
     */
    psDataInMB?: number;
    /**
     * The resync duration in seconds.
     */
    resyncDurationInSeconds?: number;
    /**
     * The resync progress percentage.
     */
    resyncProgressPercentage?: number;
    /**
     * A value indicating whether resync is required for this disk.
     */
    resyncRequired?: string;
    /**
     * The RPO in seconds.
     */
    rpoInSeconds?: number;
    /**
     * The source data transit in MB.
     */
    sourceDataInMB?: number;
    /**
     * The target data transit in MB.
     */
    targetDataInMB?: number;
}

/**
 * InMage provider specific settings
 */
export interface InMageReplicationDetailsResponse {
    /**
     * The active location of the VM. If the VM is being protected from Azure, this field will take values from { Azure, OnPrem }. If the VM is being protected between two data-centers, this field will be OnPrem always.
     */
    activeSiteType?: string;
    /**
     * The agent details.
     */
    agentDetails?: outputs.recoveryservices.v20180110.InMageAgentDetailsResponse;
    /**
     * A value indicating the underlying Azure storage account. If the VM is not running in Azure, this value shall be set to null.
     */
    azureStorageAccountId?: string;
    /**
     * The compressed data change rate in MB.
     */
    compressedDataRateInMB?: number;
    /**
     * The collection of Consistency points.
     */
    consistencyPoints?: {[key: string]: string};
    /**
     * The data stores of the on-premise machine Value can be list of strings that contain data store names
     */
    datastores?: string[];
    /**
     * A value indicating the discovery type of the machine.
     */
    discoveryType?: string;
    /**
     * A value indicating whether any disk is resized for this VM.
     */
    diskResized?: string;
    /**
     * The infrastructure VM Id.
     */
    infrastructureVmId?: string;
    /**
     * Gets the Instance type.
     * Expected value is 'InMage'.
     */
    instanceType: "InMage";
    /**
     * The source IP address.
     */
    ipAddress?: string;
    /**
     * The last heartbeat received from the source server.
     */
    lastHeartbeat?: string;
    /**
     * The last RPO calculated time.
     */
    lastRpoCalculatedTime?: string;
    /**
     * The last update time received from on-prem components.
     */
    lastUpdateReceivedTime?: string;
    /**
     * The master target Id.
     */
    masterTargetId?: string;
    /**
     * The multi vm group Id, if any.
     */
    multiVmGroupId?: string;
    /**
     * The multi vm group name, if any.
     */
    multiVmGroupName?: string;
    /**
     * A value indicating whether the multi vm sync is enabled or disabled.
     */
    multiVmSyncStatus?: string;
    /**
     * The OS details.
     */
    osDetails?: outputs.recoveryservices.v20180110.OSDiskDetailsResponse;
    /**
     * The OS Version of the protected item.
     */
    osVersion?: string;
    /**
     * The process server Id.
     */
    processServerId?: string;
    /**
     * The list of protected disks.
     */
    protectedDisks?: outputs.recoveryservices.v20180110.InMageProtectedDiskDetailsResponse[];
    /**
     * The protection stage.
     */
    protectionStage?: string;
    /**
     * A value indicating whether the source server requires a restart after update.
     */
    rebootAfterUpdateStatus?: string;
    /**
     * The replica id of the protected item.
     */
    replicaId?: string;
    /**
     * The resync details of the machine
     */
    resyncDetails?: outputs.recoveryservices.v20180110.InitialReplicationDetailsResponse;
    /**
     * The retention window end time.
     */
    retentionWindowEnd?: string;
    /**
     * The retention window start time.
     */
    retentionWindowStart?: string;
    /**
     * The RPO in seconds.
     */
    rpoInSeconds?: number;
    /**
     * The CPU count of the VM on the primary side.
     */
    sourceVmCpuCount?: number;
    /**
     * The RAM size of the VM on the primary side.
     */
    sourceVmRamSizeInMB?: number;
    /**
     * The uncompressed data change rate in MB.
     */
    uncompressedDataRateInMB?: number;
    /**
     * The vCenter infrastructure Id.
     */
    vCenterInfrastructureId?: string;
    /**
     * The validation errors of the on-premise machine Value can be list of validation errors
     */
    validationErrors?: outputs.recoveryservices.v20180110.HealthErrorResponse[];
    /**
     * The virtual machine Id.
     */
    vmId?: string;
    /**
     * The PE Network details.
     */
    vmNics?: outputs.recoveryservices.v20180110.VMNicDetailsResponse[];
    /**
     * The protection state for the vm.
     */
    vmProtectionState?: string;
    /**
     * The protection state description for the vm.
     */
    vmProtectionStateDescription?: string;
}

/**
 * Initial replication details.
 */
export interface InitialReplicationDetailsResponse {
    /**
     * The initial replication progress percentage.
     */
    initialReplicationProgressPercentage?: string;
    /**
     * Initial replication type.
     */
    initialReplicationType?: string;
}

/**
 * Implements InnerHealthError class. HealthError object has a list of InnerHealthErrors as child errors. InnerHealthError is used because this will prevent an infinite loop of structures when Hydra tries to auto-generate the contract. We are exposing the related health errors as inner health errors and all API consumers can utilize this in the same fashion as Exception -&gt; InnerException.
 */
export interface InnerHealthErrorResponse {
    /**
     * Error creation time (UTC)
     */
    creationTimeUtc?: string;
    /**
     * ID of the entity.
     */
    entityId?: string;
    /**
     * Category of error.
     */
    errorCategory?: string;
    /**
     * Error code.
     */
    errorCode?: string;
    /**
     * Level of error.
     */
    errorLevel?: string;
    /**
     * Error message.
     */
    errorMessage?: string;
    /**
     * Source of error.
     */
    errorSource?: string;
    /**
     * Type of error.
     */
    errorType?: string;
    /**
     * Possible causes of error.
     */
    possibleCauses?: string;
    /**
     * Recommended action to resolve error.
     */
    recommendedAction?: string;
    /**
     * DRA error message.
     */
    recoveryProviderErrorMessage?: string;
    /**
     * Summary message of the entity.
     */
    summaryMessage?: string;
}

/**
 * Azure VM input endpoint details.
 */
export interface InputEndpointResponse {
    /**
     * The input endpoint name.
     */
    endpointName?: string;
    /**
     * The input endpoint private port.
     */
    privatePort?: number;
    /**
     * The input endpoint protocol.
     */
    protocol?: string;
    /**
     * The input endpoint public port.
     */
    publicPort?: number;
}

/**
 * Details of a Master Target Server.
 */
export interface MasterTargetServerResponse {
    /**
     * Agent expiry date.
     */
    agentExpiryDate?: string;
    /**
     * The version of the scout component on the server.
     */
    agentVersion?: string;
    /**
     * Agent version details.
     */
    agentVersionDetails?: outputs.recoveryservices.v20180110.VersionDetailsResponse;
    /**
     * The list of data stores in the fabric.
     */
    dataStores?: outputs.recoveryservices.v20180110.DataStoreResponse[];
    /**
     * Disk count of the master target.
     */
    diskCount?: number;
    /**
     * Health errors.
     */
    healthErrors?: outputs.recoveryservices.v20180110.HealthErrorResponse[];
    /**
     * The server Id.
     */
    id?: string;
    /**
     * The IP address of the server.
     */
    ipAddress?: string;
    /**
     * The last heartbeat received from the server.
     */
    lastHeartbeat?: string;
    /**
     * MARS agent expiry date.
     */
    marsAgentExpiryDate?: string;
    /**
     * MARS agent version.
     */
    marsAgentVersion?: string;
    /**
     * Mars agent version details.
     */
    marsAgentVersionDetails?: outputs.recoveryservices.v20180110.VersionDetailsResponse;
    /**
     * The server name.
     */
    name?: string;
    /**
     * The OS type of the server.
     */
    osType?: string;
    /**
     * OS Version of the master target.
     */
    osVersion?: string;
    /**
     * The retention volumes of Master target Server.
     */
    retentionVolumes?: outputs.recoveryservices.v20180110.RetentionVolumeResponse[];
    /**
     * Validation errors.
     */
    validationErrors?: outputs.recoveryservices.v20180110.HealthErrorResponse[];
    /**
     * Version status
     */
    versionStatus?: string;
}

/**
 * Migration item properties.
 */
export interface MigrationItemPropertiesResponse {
    /**
     * The allowed operations on the migration item, based on the current migration state of the item.
     */
    allowedOperations: string[];
    /**
     * The current job details.
     */
    currentJob: outputs.recoveryservices.v20180110.CurrentJobDetailsResponse;
    /**
     * The correlation Id for events associated with this migration item.
     */
    eventCorrelationId: string;
    /**
     * The consolidated health.
     */
    health: string;
    /**
     * The list of health errors.
     */
    healthErrors: outputs.recoveryservices.v20180110.HealthErrorResponse[];
    /**
     * The status of the last test migration.
     */
    lastTestMigrationStatus: string;
    /**
     * The last test migration time.
     */
    lastTestMigrationTime: string;
    /**
     * The on-premise virtual machine name.
     */
    machineName: string;
    /**
     * The migration status.
     */
    migrationState: string;
    /**
     * The migration state description.
     */
    migrationStateDescription: string;
    /**
     * The name of policy governing this item.
     */
    policyFriendlyName: string;
    /**
     * The ARM Id of policy governing this item.
     */
    policyId: string;
    /**
     * The migration provider custom settings.
     */
    providerSpecificDetails?: outputs.recoveryservices.v20180110.VMwareCbtMigrationDetailsResponse;
    /**
     * The test migrate state.
     */
    testMigrateState: string;
    /**
     * The test migrate state description.
     */
    testMigrateStateDescription: string;
}

/**
 * The Mobility Service update details.
 */
export interface MobilityServiceUpdateResponse {
    /**
     * The OS type.
     */
    osType?: string;
    /**
     * The reboot status of the update - whether it is required or not.
     */
    rebootStatus?: string;
    /**
     * The version of the latest update.
     */
    version?: string;
}

/**
 * Network Mapping Properties.
 */
export interface NetworkMappingPropertiesResponse {
    /**
     * The fabric specific settings.
     */
    fabricSpecificSettings?: outputs.recoveryservices.v20180110.AzureToAzureNetworkMappingSettingsResponse | outputs.recoveryservices.v20180110.VmmToAzureNetworkMappingSettingsResponse | outputs.recoveryservices.v20180110.VmmToVmmNetworkMappingSettingsResponse;
    /**
     * The primary fabric friendly name.
     */
    primaryFabricFriendlyName?: string;
    /**
     * The primary network friendly name.
     */
    primaryNetworkFriendlyName?: string;
    /**
     * The primary network id for network mapping.
     */
    primaryNetworkId?: string;
    /**
     * The recovery fabric ARM id.
     */
    recoveryFabricArmId?: string;
    /**
     * The recovery fabric friendly name.
     */
    recoveryFabricFriendlyName?: string;
    /**
     * The recovery network friendly name.
     */
    recoveryNetworkFriendlyName?: string;
    /**
     * The recovery network id for network mapping.
     */
    recoveryNetworkId?: string;
    /**
     * The pairing state for network mapping.
     */
    state?: string;
}

/**
 * Disk Details.
 */
export interface OSDetailsResponse {
    /**
     * The OS Major Version.
     */
    oSMajorVersion?: string;
    /**
     * The OS Minor Version.
     */
    oSMinorVersion?: string;
    /**
     * The OS Version.
     */
    oSVersion?: string;
    /**
     * The OSEdition.
     */
    osEdition?: string;
    /**
     * VM Disk details.
     */
    osType?: string;
    /**
     * Product type.
     */
    productType?: string;
}

/**
 * Details of the OS Disk.
 */
export interface OSDiskDetailsResponse {
    /**
     * The type of the OS on the VM.
     */
    osType?: string;
    /**
     * The id of the disk containing the OS.
     */
    osVhdId?: string;
    /**
     * The OS disk VHD name.
     */
    vhdName?: string;
}

/**
 * Protection profile custom data details.
 */
export interface PolicyPropertiesResponse {
    /**
     * The FriendlyName.
     */
    friendlyName?: string;
    /**
     * The ReplicationChannelSetting.
     */
    providerSpecificDetails?: outputs.recoveryservices.v20180110.A2APolicyDetailsResponse | outputs.recoveryservices.v20180110.HyperVReplicaAzurePolicyDetailsResponse | outputs.recoveryservices.v20180110.HyperVReplicaBasePolicyDetailsResponse | outputs.recoveryservices.v20180110.HyperVReplicaBluePolicyDetailsResponse | outputs.recoveryservices.v20180110.HyperVReplicaPolicyDetailsResponse | outputs.recoveryservices.v20180110.InMageAzureV2PolicyDetailsResponse | outputs.recoveryservices.v20180110.InMageBasePolicyDetailsResponse | outputs.recoveryservices.v20180110.InMagePolicyDetailsResponse | outputs.recoveryservices.v20180110.RcmAzureMigrationPolicyDetailsResponse | outputs.recoveryservices.v20180110.VmwareCbtPolicyDetailsResponse;
}

/**
 * Details of the Process Server.
 */
export interface ProcessServerResponse {
    /**
     * Agent expiry date.
     */
    agentExpiryDate?: string;
    /**
     * The version of the scout component on the server.
     */
    agentVersion?: string;
    /**
     * The agent version details.
     */
    agentVersionDetails?: outputs.recoveryservices.v20180110.VersionDetailsResponse;
    /**
     * The available memory.
     */
    availableMemoryInBytes?: number;
    /**
     * The available space.
     */
    availableSpaceInBytes?: number;
    /**
     * The percentage of the CPU load.
     */
    cpuLoad?: string;
    /**
     * The CPU load status.
     */
    cpuLoadStatus?: string;
    /**
     * The Process Server's friendly name.
     */
    friendlyName?: string;
    /**
     * Health errors.
     */
    healthErrors?: outputs.recoveryservices.v20180110.HealthErrorResponse[];
    /**
     * The agent generated Id.
     */
    hostId?: string;
    /**
     * The Process Server Id.
     */
    id?: string;
    /**
     * The IP address of the server.
     */
    ipAddress?: string;
    /**
     * The last heartbeat received from the server.
     */
    lastHeartbeat?: string;
    /**
     * The servers configured with this PS.
     */
    machineCount?: string;
    /**
     * The memory usage status.
     */
    memoryUsageStatus?: string;
    /**
     * The list of the mobility service updates available on the Process Server.
     */
    mobilityServiceUpdates?: outputs.recoveryservices.v20180110.MobilityServiceUpdateResponse[];
    /**
     * The OS type of the server.
     */
    osType?: string;
    /**
     * OS Version of the process server. Note: This will get populated if user has CS version greater than 9.12.0.0.
     */
    osVersion?: string;
    /**
     * The PS service status.
     */
    psServiceStatus?: string;
    /**
     * The number of replication pairs configured in this PS.
     */
    replicationPairCount?: string;
    /**
     * The space usage status.
     */
    spaceUsageStatus?: string;
    /**
     * The PS SSL cert expiry date.
     */
    sslCertExpiryDate?: string;
    /**
     * CS SSL cert expiry date.
     */
    sslCertExpiryRemainingDays?: number;
    /**
     * The percentage of the system load.
     */
    systemLoad?: string;
    /**
     * The system load status.
     */
    systemLoadStatus?: string;
    /**
     * The total memory.
     */
    totalMemoryInBytes?: number;
    /**
     * The total space.
     */
    totalSpaceInBytes?: number;
    /**
     * Version status
     */
    versionStatus?: string;
}

/**
 * Protection container mapping properties.
 */
export interface ProtectionContainerMappingPropertiesResponse {
    /**
     * Health of pairing.
     */
    health?: string;
    /**
     * Health error.
     */
    healthErrorDetails?: outputs.recoveryservices.v20180110.HealthErrorResponse[];
    /**
     * Friendly name of replication policy.
     */
    policyFriendlyName?: string;
    /**
     * Policy ARM Id.
     */
    policyId?: string;
    /**
     * Provider specific provider details.
     */
    providerSpecificDetails?: outputs.recoveryservices.v20180110.A2AProtectionContainerMappingDetailsResponse | outputs.recoveryservices.v20180110.VMwareCbtProtectionContainerMappingDetailsResponse;
    /**
     * Friendly name of source fabric.
     */
    sourceFabricFriendlyName?: string;
    /**
     * Friendly name of source protection container.
     */
    sourceProtectionContainerFriendlyName?: string;
    /**
     * Association Status
     */
    state?: string;
    /**
     * Friendly name of target fabric.
     */
    targetFabricFriendlyName?: string;
    /**
     * Friendly name of paired container.
     */
    targetProtectionContainerFriendlyName?: string;
    /**
     * Paired protection container ARM ID.
     */
    targetProtectionContainerId?: string;
}

/**
 * RCM based Azure migration specific policy details.
 */
export interface RcmAzureMigrationPolicyDetailsResponse {
    /**
     * The app consistent snapshot frequency in minutes.
     */
    appConsistentFrequencyInMinutes?: number;
    /**
     * The crash consistent snapshot frequency in minutes.
     */
    crashConsistentFrequencyInMinutes?: number;
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'RcmAzureMigration'.
     */
    instanceType: "RcmAzureMigration";
    /**
     * A value indicating whether multi-VM sync has to be enabled.
     */
    multiVmSyncStatus?: string;
    /**
     * The duration in minutes until which the recovery points need to be stored.
     */
    recoveryPointHistory?: number;
    /**
     * The recovery point threshold in minutes.
     */
    recoveryPointThresholdInMinutes?: number;
}

/**
 * Recovery plan action details.
 */
export interface RecoveryPlanActionResponse {
    /**
     * The action name.
     */
    actionName: string;
    /**
     * The custom details.
     */
    customDetails: outputs.recoveryservices.v20180110.RecoveryPlanAutomationRunbookActionDetailsResponse | outputs.recoveryservices.v20180110.RecoveryPlanManualActionDetailsResponse | outputs.recoveryservices.v20180110.RecoveryPlanScriptActionDetailsResponse;
    /**
     * The list of failover directions.
     */
    failoverDirections: string[];
    /**
     * The list of failover types.
     */
    failoverTypes: string[];
}

/**
 * Recovery plan Automation runbook action details.
 */
export interface RecoveryPlanAutomationRunbookActionDetailsResponse {
    /**
     * The fabric location.
     */
    fabricLocation: string;
    /**
     * Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
     * Expected value is 'AutomationRunbookActionDetails'.
     */
    instanceType: "AutomationRunbookActionDetails";
    /**
     * The runbook ARM Id.
     */
    runbookId?: string;
    /**
     * The runbook timeout.
     */
    timeout?: string;
}

/**
 * Recovery plan group details.
 */
export interface RecoveryPlanGroupResponse {
    /**
     * The end group actions.
     */
    endGroupActions?: outputs.recoveryservices.v20180110.RecoveryPlanActionResponse[];
    /**
     * The group type.
     */
    groupType: string;
    /**
     * The list of protected items.
     */
    replicationProtectedItems?: outputs.recoveryservices.v20180110.RecoveryPlanProtectedItemResponse[];
    /**
     * The start group actions.
     */
    startGroupActions?: outputs.recoveryservices.v20180110.RecoveryPlanActionResponse[];
}

/**
 * Recovery plan manual action details.
 */
export interface RecoveryPlanManualActionDetailsResponse {
    /**
     * The manual action description.
     */
    description?: string;
    /**
     * Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
     * Expected value is 'ManualActionDetails'.
     */
    instanceType: "ManualActionDetails";
}

/**
 * Recovery plan custom details.
 */
export interface RecoveryPlanPropertiesResponse {
    /**
     * The list of allowed operations.
     */
    allowedOperations?: string[];
    /**
     * The current scenario details.
     */
    currentScenario?: outputs.recoveryservices.v20180110.CurrentScenarioDetailsResponse;
    /**
     * The recovery plan status.
     */
    currentScenarioStatus?: string;
    /**
     * The recovery plan status description.
     */
    currentScenarioStatusDescription?: string;
    /**
     * The failover deployment model.
     */
    failoverDeploymentModel?: string;
    /**
     * The friendly name.
     */
    friendlyName?: string;
    /**
     * The recovery plan groups.
     */
    groups?: outputs.recoveryservices.v20180110.RecoveryPlanGroupResponse[];
    /**
     * The start time of the last planned failover.
     */
    lastPlannedFailoverTime?: string;
    /**
     * The start time of the last test failover.
     */
    lastTestFailoverTime?: string;
    /**
     * The start time of the last unplanned failover.
     */
    lastUnplannedFailoverTime?: string;
    /**
     * The primary fabric friendly name.
     */
    primaryFabricFriendlyName?: string;
    /**
     * The primary fabric Id.
     */
    primaryFabricId?: string;
    /**
     * The recovery fabric friendly name.
     */
    recoveryFabricFriendlyName?: string;
    /**
     * The recovery fabric Id.
     */
    recoveryFabricId?: string;
    /**
     * The list of replication providers.
     */
    replicationProviders?: string[];
}

/**
 * Recovery plan protected item.
 */
export interface RecoveryPlanProtectedItemResponse {
    /**
     * The ARM Id of the recovery plan protected item.
     */
    id?: string;
    /**
     * The virtual machine Id.
     */
    virtualMachineId?: string;
}

/**
 * Recovery plan script action details.
 */
export interface RecoveryPlanScriptActionDetailsResponse {
    /**
     * The fabric location.
     */
    fabricLocation: string;
    /**
     * Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
     * Expected value is 'ScriptActionDetails'.
     */
    instanceType: "ScriptActionDetails";
    /**
     * The script path.
     */
    path: string;
    /**
     * The script timeout.
     */
    timeout?: string;
}

/**
 * Recovery services provider properties.
 */
export interface RecoveryServicesProviderPropertiesResponse {
    /**
     * The scenarios allowed on this provider.
     */
    allowedScenarios?: string[];
    /**
     * The authentication identity details.
     */
    authenticationIdentityDetails?: outputs.recoveryservices.v20180110.IdentityProviderDetailsResponse;
    /**
     * A value indicating whether DRA is responsive.
     */
    connectionStatus?: string;
    /**
     * The DRA Id.
     */
    draIdentifier?: string;
    /**
     * The fabric friendly name.
     */
    fabricFriendlyName?: string;
    /**
     * Type of the site.
     */
    fabricType?: string;
    /**
     * Friendly name of the DRA.
     */
    friendlyName?: string;
    /**
     * The recovery services provider health error details.
     */
    healthErrorDetails?: outputs.recoveryservices.v20180110.HealthErrorResponse[];
    /**
     * Time when last heartbeat was sent by the DRA.
     */
    lastHeartBeat?: string;
    /**
     * Number of protected VMs currently managed by the DRA.
     */
    protectedItemCount?: number;
    /**
     * The provider version.
     */
    providerVersion?: string;
    /**
     * The provider version details.
     */
    providerVersionDetails?: outputs.recoveryservices.v20180110.VersionDetailsResponse;
    /**
     * Expiry date of the version.
     */
    providerVersionExpiryDate?: string;
    /**
     * DRA version status.
     */
    providerVersionState?: string;
    /**
     * The resource access identity details.
     */
    resourceAccessIdentityDetails?: outputs.recoveryservices.v20180110.IdentityProviderDetailsResponse;
    /**
     * The fabric provider.
     */
    serverVersion?: string;
}

/**
 * Replication protected item custom data details.
 */
export interface ReplicationProtectedItemPropertiesResponse {
    /**
     * The Current active location of the PE.
     */
    activeLocation?: string;
    /**
     * The allowed operations on the Replication protected item.
     */
    allowedOperations?: string[];
    /**
     * The current scenario.
     */
    currentScenario?: outputs.recoveryservices.v20180110.CurrentScenarioDetailsResponse;
    /**
     * The consolidated failover health for the VM.
     */
    failoverHealth?: string;
    /**
     * The recovery point ARM Id to which the Vm was failed over.
     */
    failoverRecoveryPointId?: string;
    /**
     * The name.
     */
    friendlyName?: string;
    /**
     * List of health errors.
     */
    healthErrors?: outputs.recoveryservices.v20180110.HealthErrorResponse[];
    /**
     * The Last successful failover time.
     */
    lastSuccessfulFailoverTime?: string;
    /**
     * The Last successful test failover time.
     */
    lastSuccessfulTestFailoverTime?: string;
    /**
     * The name of Policy governing this PE.
     */
    policyFriendlyName?: string;
    /**
     * The ID of Policy governing this PE.
     */
    policyId?: string;
    /**
     * The friendly name of the primary fabric.
     */
    primaryFabricFriendlyName?: string;
    /**
     * The fabric provider of the primary fabric.
     */
    primaryFabricProvider?: string;
    /**
     * The name of primary protection container friendly name.
     */
    primaryProtectionContainerFriendlyName?: string;
    /**
     * The protected item ARM Id.
     */
    protectableItemId?: string;
    /**
     * The type of protected item type.
     */
    protectedItemType?: string;
    /**
     * The protection status.
     */
    protectionState?: string;
    /**
     * The protection state description.
     */
    protectionStateDescription?: string;
    /**
     * The Replication provider custom settings.
     */
    providerSpecificDetails?: outputs.recoveryservices.v20180110.A2AReplicationDetailsResponse | outputs.recoveryservices.v20180110.HyperVReplicaAzureReplicationDetailsResponse | outputs.recoveryservices.v20180110.HyperVReplicaBaseReplicationDetailsResponse | outputs.recoveryservices.v20180110.HyperVReplicaBlueReplicationDetailsResponse | outputs.recoveryservices.v20180110.HyperVReplicaReplicationDetailsResponse | outputs.recoveryservices.v20180110.InMageAzureV2ReplicationDetailsResponse | outputs.recoveryservices.v20180110.InMageReplicationDetailsResponse;
    /**
     * The recovery container Id.
     */
    recoveryContainerId?: string;
    /**
     * The friendly name of recovery fabric.
     */
    recoveryFabricFriendlyName?: string;
    /**
     * The Arm Id of recovery fabric.
     */
    recoveryFabricId?: string;
    /**
     * The name of recovery container friendly name.
     */
    recoveryProtectionContainerFriendlyName?: string;
    /**
     * The recovery provider ARM Id.
     */
    recoveryServicesProviderId?: string;
    /**
     * The consolidated protection health for the VM taking any issues with SRS as well as all the replication units associated with the VM's replication group into account. This is a string representation of the ProtectionHealth enumeration.
     */
    replicationHealth?: string;
    /**
     * The Test failover state.
     */
    testFailoverState?: string;
    /**
     * The Test failover state description.
     */
    testFailoverStateDescription?: string;
}

/**
 * The retention details of the MT.
 */
export interface RetentionVolumeResponse {
    /**
     * The volume capacity.
     */
    capacityInBytes?: number;
    /**
     * The free space available in this volume.
     */
    freeSpaceInBytes?: number;
    /**
     * The threshold percentage.
     */
    thresholdPercentage?: number;
    /**
     * The volume name.
     */
    volumeName?: string;
}

/**
 * Azure role assignment details.
 */
export interface RoleAssignmentResponse {
    /**
     * The ARM Id of the role assignment.
     */
    id?: string;
    /**
     * The name of the role assignment.
     */
    name?: string;
    /**
     * Principal Id.
     */
    principalId?: string;
    /**
     * Role definition id.
     */
    roleDefinitionId?: string;
    /**
     * Role assignment scope.
     */
    scope?: string;
}

/**
 * CS Accounts Details.
 */
export interface RunAsAccountResponse {
    /**
     * The CS RunAs account Id.
     */
    accountId?: string;
    /**
     * The CS RunAs account name.
     */
    accountName?: string;
}

/**
 * Storage mapping properties.
 */
export interface StorageClassificationMappingPropertiesResponse {
    /**
     * Target storage object Id.
     */
    targetStorageClassificationId?: string;
}

/**
 * vCenter properties.
 */
export interface VCenterPropertiesResponse {
    /**
     * The VCenter discovery status.
     */
    discoveryStatus?: string;
    /**
     * The ARM resource name of the fabric containing this VCenter.
     */
    fabricArmResourceName?: string;
    /**
     * Friendly name of the vCenter.
     */
    friendlyName?: string;
    /**
     * The health errors for this VCenter.
     */
    healthErrors?: outputs.recoveryservices.v20180110.HealthErrorResponse[];
    /**
     * The infrastructure Id of vCenter.
     */
    infrastructureId?: string;
    /**
     * VCenter internal ID.
     */
    internalId?: string;
    /**
     * The IP address of the vCenter.
     */
    ipAddress?: string;
    /**
     * The time when the last heartbeat was received by vCenter.
     */
    lastHeartbeat?: string;
    /**
     * The port number for discovery.
     */
    port?: string;
    /**
     * The process server Id.
     */
    processServerId?: string;
    /**
     * The account Id which has privileges to discover the vCenter.
     */
    runAsAccountId?: string;
}

/**
 * Hyper V VM network details.
 */
export interface VMNicDetailsResponse {
    /**
     * A value indicating whether the NIC has accelerated networking enabled.
     */
    enableAcceleratedNetworkingOnRecovery?: boolean;
    /**
     * Ip address type.
     */
    ipAddressType?: string;
    /**
     * The nic Id.
     */
    nicId?: string;
    /**
     * Primary nic static IP address.
     */
    primaryNicStaticIPAddress?: string;
    /**
     * IP allocation type for recovery VM.
     */
    recoveryNicIpAddressType?: string;
    /**
     * Recovery VM network Id.
     */
    recoveryVMNetworkId?: string;
    /**
     * Recovery VM subnet name.
     */
    recoveryVMSubnetName?: string;
    /**
     * The replica nic Id.
     */
    replicaNicId?: string;
    /**
     * Replica nic static IP address.
     */
    replicaNicStaticIPAddress?: string;
    /**
     * Selection type for failover.
     */
    selectionType?: string;
    /**
     * The source nic ARM Id.
     */
    sourceNicArmId?: string;
    /**
     * VM network name.
     */
    vMNetworkName?: string;
    /**
     * VM subnet name.
     */
    vMSubnetName?: string;
}

/**
 * VMwareCbt provider specific settings.
 */
export interface VMwareCbtMigrationDetailsResponse {
    /**
     * The data mover RunAs account Id.
     */
    dataMoverRunAsAccountId: string;
    /**
     * The firmware type.
     */
    firmwareType: string;
    /**
     * The initial seeding progress percentage.
     */
    initialSeedingProgressPercentage: number;
    /**
     * Gets the instance type.
     * Expected value is 'VMwareCbt'.
     */
    instanceType: "VMwareCbt";
    /**
     * The last recovery point Id.
     */
    lastRecoveryPointId: string;
    /**
     * The last recovery point received time.
     */
    lastRecoveryPointReceived: string;
    /**
     * License Type of the VM to be used.
     */
    licenseType?: string;
    /**
     * The migration progress percentage.
     */
    migrationProgressPercentage: number;
    /**
     * The recovery point Id to which the VM was migrated.
     */
    migrationRecoveryPointId: string;
    /**
     * The type of the OS on the VM.
     */
    osType: string;
    /**
     * A value indicating whether auto resync is to be done.
     */
    performAutoResync?: string;
    /**
     * The list of protected disks.
     */
    protectedDisks?: outputs.recoveryservices.v20180110.VMwareCbtProtectedDiskDetailsResponse[];
    /**
     * The resync progress percentage.
     */
    resyncProgressPercentage: number;
    /**
     * A value indicating whether resync is required.
     */
    resyncRequired: string;
    /**
     * The resync state.
     */
    resyncState: string;
    /**
     * The snapshot RunAs account Id.
     */
    snapshotRunAsAccountId: string;
    /**
     * The target availability set Id.
     */
    targetAvailabilitySetId?: string;
    /**
     * The target availability zone.
     */
    targetAvailabilityZone?: string;
    /**
     * The target boot diagnostics storage account ARM Id.
     */
    targetBootDiagnosticsStorageAccountId?: string;
    /**
     * The target generation.
     */
    targetGeneration: string;
    /**
     * The target location.
     */
    targetLocation: string;
    /**
     * The target network Id.
     */
    targetNetworkId?: string;
    /**
     * The target resource group Id.
     */
    targetResourceGroupId?: string;
    /**
     * Target VM name.
     */
    targetVmName?: string;
    /**
     * The target VM size.
     */
    targetVmSize?: string;
    /**
     * The network details.
     */
    vmNics?: outputs.recoveryservices.v20180110.VMwareCbtNicDetailsResponse[];
    /**
     * The ARM Id of the VM discovered in VMware.
     */
    vmwareMachineId: string;
}

/**
 * VMwareCbt NIC details.
 */
export interface VMwareCbtNicDetailsResponse {
    /**
     * A value indicating whether this is the primary NIC.
     */
    isPrimaryNic?: string;
    /**
     * A value indicating whether this NIC is selected for migration.
     */
    isSelectedForMigration?: string;
    /**
     * The NIC Id.
     */
    nicId: string;
    /**
     * The source IP address.
     */
    sourceIPAddress: string;
    /**
     * The source IP address type.
     */
    sourceIPAddressType: string;
    /**
     * Source network Id.
     */
    sourceNetworkId: string;
    /**
     * The target IP address.
     */
    targetIPAddress?: string;
    /**
     * The target IP address type.
     */
    targetIPAddressType?: string;
    /**
     * Target subnet name.
     */
    targetSubnetName?: string;
}

/**
 * VMwareCbt protected disk details.
 */
export interface VMwareCbtProtectedDiskDetailsResponse {
    /**
     * The disk capacity in bytes.
     */
    capacityInBytes: number;
    /**
     * The DiskEncryptionSet ARM Id.
     */
    diskEncryptionSetId: string;
    /**
     * The disk id.
     */
    diskId: string;
    /**
     * The disk name.
     */
    diskName: string;
    /**
     * The disk path.
     */
    diskPath: string;
    /**
     * The disk type.
     */
    diskType?: string;
    /**
     * A value indicating whether the disk is the OS disk.
     */
    isOSDisk: string;
    /**
     * The log storage account ARM Id.
     */
    logStorageAccountId: string;
    /**
     * The key vault secret name of the log storage account.
     */
    logStorageAccountSasSecretName: string;
    /**
     * The ARM Id of the seed managed disk.
     */
    seedManagedDiskId: string;
    /**
     * The ARM Id of the target managed disk.
     */
    targetManagedDiskId: string;
}

/**
 * VMwareCbt provider specific container mapping details.
 */
export interface VMwareCbtProtectionContainerMappingDetailsResponse {
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'VMwareCbt'.
     */
    instanceType: "VMwareCbt";
    /**
     * The target key vault ARM Id.
     */
    keyVaultId: string;
    /**
     * The target key vault URI.
     */
    keyVaultUri: string;
    /**
     * The secret name of the service bus connection string.
     */
    serviceBusConnectionStringSecretName: string;
    /**
     * The storage account ARM Id.
     */
    storageAccountId: string;
    /**
     * The secret name of the storage account.
     */
    storageAccountSasSecretName: string;
    /**
     * The target location.
     */
    targetLocation: string;
}

/**
 * Store the fabric details specific to the VMware fabric.
 */
export interface VMwareDetailsResponse {
    /**
     * The number of source and target servers configured to talk to this CS.
     */
    agentCount?: string;
    /**
     * Agent expiry date.
     */
    agentExpiryDate?: string;
    /**
     * The agent Version.
     */
    agentVersion?: string;
    /**
     * The agent version details.
     */
    agentVersionDetails?: outputs.recoveryservices.v20180110.VersionDetailsResponse;
    /**
     * The available memory.
     */
    availableMemoryInBytes?: number;
    /**
     * The available space.
     */
    availableSpaceInBytes?: number;
    /**
     * The percentage of the CPU load.
     */
    cpuLoad?: string;
    /**
     * The CPU load status.
     */
    cpuLoadStatus?: string;
    /**
     * The CS service status.
     */
    csServiceStatus?: string;
    /**
     * The database server load.
     */
    databaseServerLoad?: string;
    /**
     * The database server load status.
     */
    databaseServerLoadStatus?: string;
    /**
     * The host name.
     */
    hostName?: string;
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'VMware'.
     */
    instanceType: "VMware";
    /**
     * The IP address.
     */
    ipAddress?: string;
    /**
     * The last heartbeat received from CS server.
     */
    lastHeartbeat?: string;
    /**
     * The list of Master Target servers associated with the fabric.
     */
    masterTargetServers?: outputs.recoveryservices.v20180110.MasterTargetServerResponse[];
    /**
     * The memory usage status.
     */
    memoryUsageStatus?: string;
    /**
     * The number of process servers.
     */
    processServerCount?: string;
    /**
     * The list of Process Servers associated with the fabric.
     */
    processServers?: outputs.recoveryservices.v20180110.ProcessServerResponse[];
    /**
     * The number of protected servers.
     */
    protectedServers?: string;
    /**
     * PS template version.
     */
    psTemplateVersion?: string;
    /**
     * The number of replication pairs configured in this CS.
     */
    replicationPairCount?: string;
    /**
     * The list of run as accounts created on the server.
     */
    runAsAccounts?: outputs.recoveryservices.v20180110.RunAsAccountResponse[];
    /**
     * The space usage status.
     */
    spaceUsageStatus?: string;
    /**
     * CS SSL cert expiry date.
     */
    sslCertExpiryDate?: string;
    /**
     * CS SSL cert expiry date.
     */
    sslCertExpiryRemainingDays?: number;
    /**
     * The percentage of the system load.
     */
    systemLoad?: string;
    /**
     * The system load status.
     */
    systemLoadStatus?: string;
    /**
     * The total memory.
     */
    totalMemoryInBytes?: number;
    /**
     * The total space.
     */
    totalSpaceInBytes?: number;
    /**
     * Version status
     */
    versionStatus?: string;
    /**
     * The web load.
     */
    webLoad?: string;
    /**
     * The web load status.
     */
    webLoadStatus?: string;
}

/**
 * VMwareV2 fabric specific details.
 */
export interface VMwareV2FabricSpecificDetailsResponse {
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'VMwareV2'.
     */
    instanceType: "VMwareV2";
    /**
     * The Migration solution ARM Id.
     */
    migrationSolutionId: string;
    /**
     * The ARM Id of the physical site.
     */
    physicalSiteId: string;
    /**
     * The service endpoint.
     */
    serviceEndpoint: string;
    /**
     * The service resource Id.
     */
    serviceResourceId: string;
    /**
     * The ARM Id of the VMware site.
     */
    vmwareSiteId: string;
}

/**
 * Version related details.
 */
export interface VersionDetailsResponse {
    /**
     * Version expiry date.
     */
    expiryDate?: string;
    /**
     * A value indicating whether security update required.
     */
    status?: string;
    /**
     * The agent version.
     */
    version?: string;
}

/**
 * VMM fabric specific details.
 */
export interface VmmDetailsResponse {
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'VMM'.
     */
    instanceType: "VMM";
}

/**
 * E2A Network Mapping fabric specific settings.
 */
export interface VmmToAzureNetworkMappingSettingsResponse {
    /**
     * Gets the Instance type.
     * Expected value is 'VmmToAzure'.
     */
    instanceType: "VmmToAzure";
}

/**
 * E2E Network Mapping fabric specific settings.
 */
export interface VmmToVmmNetworkMappingSettingsResponse {
    /**
     * Gets the Instance type.
     * Expected value is 'VmmToVmm'.
     */
    instanceType: "VmmToVmm";
}

/**
 * VMware Cbt specific policy details.
 */
export interface VmwareCbtPolicyDetailsResponse {
    /**
     * The app consistent snapshot frequency in minutes.
     */
    appConsistentFrequencyInMinutes?: number;
    /**
     * The crash consistent snapshot frequency in minutes.
     */
    crashConsistentFrequencyInMinutes?: number;
    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is 'VMwareCbt'.
     */
    instanceType: "VMwareCbt";
    /**
     * The duration in minutes until which the recovery points need to be stored.
     */
    recoveryPointHistoryInMinutes?: number;
}

