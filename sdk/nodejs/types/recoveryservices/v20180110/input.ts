// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * A2A container mapping input.
 */
export interface A2AContainerMappingInputArgs {
    /**
     * A value indicating whether the auto update is enabled.
     */
    agentAutoUpdateStatus?: pulumi.Input<string | enums.recoveryservices.v20180110.AgentAutoUpdateStatus>;
    /**
     * The automation account arm id.
     */
    automationAccountArmId?: pulumi.Input<string>;
    /**
     * The class type.
     * Expected value is 'A2A'.
     */
    instanceType?: pulumi.Input<"A2A">;
}

/**
 * A2A enable protection input.
 */
export interface A2AEnableProtectionInputArgs {
    /**
     * The recovery disk encryption information.
     */
    diskEncryptionInfo?: pulumi.Input<inputs.recoveryservices.v20180110.DiskEncryptionInfoArgs>;
    /**
     * The fabric specific object Id of the virtual machine.
     */
    fabricObjectId?: pulumi.Input<string>;
    /**
     * The class type.
     * Expected value is 'A2A'.
     */
    instanceType?: pulumi.Input<"A2A">;
    /**
     * The multi vm group name.
     */
    multiVmGroupName?: pulumi.Input<string>;
    /**
     * The recovery availability set Id.
     */
    recoveryAvailabilitySetId?: pulumi.Input<string>;
    /**
     * The boot diagnostic storage account.
     */
    recoveryBootDiagStorageAccountId?: pulumi.Input<string>;
    /**
     * The recovery cloud service Id. Valid for V1 scenarios.
     */
    recoveryCloudServiceId?: pulumi.Input<string>;
    /**
     * The recovery container Id.
     */
    recoveryContainerId?: pulumi.Input<string>;
    /**
     * The recovery resource group Id. Valid for V2 scenarios.
     */
    recoveryResourceGroupId?: pulumi.Input<string>;
    /**
     * The list of vm disk details.
     */
    vmDisks?: pulumi.Input<pulumi.Input<inputs.recoveryservices.v20180110.A2AVmDiskInputDetailsArgs>[]>;
    /**
     * The list of vm managed disk details.
     */
    vmManagedDisks?: pulumi.Input<pulumi.Input<inputs.recoveryservices.v20180110.A2AVmManagedDiskInputDetailsArgs>[]>;
}

/**
 * A2A Policy creation input.
 */
export interface A2APolicyCreationInputArgs {
    /**
     * The app consistent snapshot frequency (in minutes).
     */
    appConsistentFrequencyInMinutes?: pulumi.Input<number>;
    /**
     * The crash consistent snapshot frequency (in minutes).
     */
    crashConsistentFrequencyInMinutes?: pulumi.Input<number>;
    /**
     * The class type.
     * Expected value is 'A2A'.
     */
    instanceType?: pulumi.Input<"A2A">;
    /**
     * A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
     */
    multiVmSyncStatus: pulumi.Input<string | enums.recoveryservices.v20180110.SetMultiVmSyncStatus>;
    /**
     * The duration in minutes until which the recovery points need to be stored.
     */
    recoveryPointHistory?: pulumi.Input<number>;
}

/**
 * Azure VM disk input details.
 */
export interface A2AVmDiskInputDetailsArgs {
    /**
     * The disk Uri.
     */
    diskUri?: pulumi.Input<string>;
    /**
     * The primary staging storage account Id.
     */
    primaryStagingAzureStorageAccountId?: pulumi.Input<string>;
    /**
     * The recovery VHD storage account Id.
     */
    recoveryAzureStorageAccountId?: pulumi.Input<string>;
}

/**
 * Azure VM managed disk input details.
 */
export interface A2AVmManagedDiskInputDetailsArgs {
    /**
     * The disk Id.
     */
    diskId?: pulumi.Input<string>;
    /**
     * The primary staging storage account Arm Id.
     */
    primaryStagingAzureStorageAccountId?: pulumi.Input<string>;
    /**
     * The replica disk type. Its an optional value and will be same as source disk type if not user provided.
     */
    recoveryReplicaDiskAccountType?: pulumi.Input<string>;
    /**
     * The target resource group Arm Id.
     */
    recoveryResourceGroupId?: pulumi.Input<string>;
    /**
     * The target disk type after failover. Its an optional value and will be same as source disk type if not user provided.
     */
    recoveryTargetDiskAccountType?: pulumi.Input<string>;
}

/**
 * The properties of an add provider request.
 */
export interface AddRecoveryServicesProviderInputPropertiesArgs {
    /**
     * The identity provider input for DRA authentication.
     */
    authenticationIdentityInput: pulumi.Input<inputs.recoveryservices.v20180110.IdentityProviderInputArgs>;
    /**
     * The name of the machine where the provider is getting added.
     */
    machineName: pulumi.Input<string>;
    /**
     * The identity provider input for resource access.
     */
    resourceAccessIdentityInput: pulumi.Input<inputs.recoveryservices.v20180110.IdentityProviderInputArgs>;
}

/**
 * The properties of an add vCenter request.
 */
export interface AddVCenterRequestPropertiesArgs {
    /**
     * The friendly name of the vCenter.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * The IP address of the vCenter to be discovered.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The port number for discovery.
     */
    port?: pulumi.Input<string>;
    /**
     * The process server Id from where the discovery is orchestrated.
     */
    processServerId?: pulumi.Input<string>;
    /**
     * The account Id which has privileges to discover the vCenter.
     */
    runAsAccountId?: pulumi.Input<string>;
}

/**
 * Fabric provider specific settings.
 */
export interface AzureFabricCreationInputArgs {
    /**
     * Gets the class type.
     * Expected value is 'Azure'.
     */
    instanceType?: pulumi.Input<"Azure">;
    /**
     * The Location.
     */
    location?: pulumi.Input<string>;
}

/**
 * Create network mappings input properties/behavior specific to Azure to Azure Network mapping.
 */
export interface AzureToAzureCreateNetworkMappingInputArgs {
    /**
     * The instance type.
     * Expected value is 'AzureToAzure'.
     */
    instanceType?: pulumi.Input<"AzureToAzure">;
    /**
     * The primary azure vnet Id.
     */
    primaryNetworkId?: pulumi.Input<string>;
}

/**
 * Common input details for network mapping operation.
 */
export interface CreateNetworkMappingInputPropertiesArgs {
    /**
     * Fabric specific input properties.
     */
    fabricSpecificDetails?: pulumi.Input<inputs.recoveryservices.v20180110.AzureToAzureCreateNetworkMappingInputArgs | inputs.recoveryservices.v20180110.VmmToAzureCreateNetworkMappingInputArgs | inputs.recoveryservices.v20180110.VmmToVmmCreateNetworkMappingInputArgs>;
    /**
     * Recovery fabric Name.
     */
    recoveryFabricName?: pulumi.Input<string>;
    /**
     * Recovery network Id.
     */
    recoveryNetworkId?: pulumi.Input<string>;
}

/**
 * Policy creation properties.
 */
export interface CreatePolicyInputPropertiesArgs {
    /**
     * The ReplicationProviderSettings.
     */
    providerSpecificInput?: pulumi.Input<inputs.recoveryservices.v20180110.A2APolicyCreationInputArgs | inputs.recoveryservices.v20180110.HyperVReplicaAzurePolicyInputArgs | inputs.recoveryservices.v20180110.HyperVReplicaBluePolicyInputArgs | inputs.recoveryservices.v20180110.HyperVReplicaPolicyInputArgs | inputs.recoveryservices.v20180110.InMageAzureV2PolicyInputArgs | inputs.recoveryservices.v20180110.InMagePolicyInputArgs | inputs.recoveryservices.v20180110.VMwareCbtPolicyCreationInputArgs>;
}

/**
 * Configure pairing input properties.
 */
export interface CreateProtectionContainerMappingInputPropertiesArgs {
    /**
     * Applicable policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Provider specific input for pairing.
     */
    providerSpecificInput?: pulumi.Input<inputs.recoveryservices.v20180110.A2AContainerMappingInputArgs | inputs.recoveryservices.v20180110.VMwareCbtContainerMappingInputArgs>;
    /**
     * The target unique protection container name.
     */
    targetProtectionContainerId?: pulumi.Input<string>;
}

/**
 * Recovery plan creation properties.
 */
export interface CreateRecoveryPlanInputPropertiesArgs {
    /**
     * The failover deployment model.
     */
    failoverDeploymentModel?: pulumi.Input<string | enums.recoveryservices.v20180110.FailoverDeploymentModel>;
    /**
     * The recovery plan groups.
     */
    groups: pulumi.Input<pulumi.Input<inputs.recoveryservices.v20180110.RecoveryPlanGroupArgs>[]>;
    /**
     * The primary fabric Id.
     */
    primaryFabricId: pulumi.Input<string>;
    /**
     * The recovery fabric Id.
     */
    recoveryFabricId: pulumi.Input<string>;
}

/**
 * Recovery disk encryption info (BEK and KEK).
 */
export interface DiskEncryptionInfoArgs {
    /**
     * The recovery KeyVault reference for secret.
     */
    diskEncryptionKeyInfo?: pulumi.Input<inputs.recoveryservices.v20180110.DiskEncryptionKeyInfoArgs>;
    /**
     * The recovery KeyVault reference for key.
     */
    keyEncryptionKeyInfo?: pulumi.Input<inputs.recoveryservices.v20180110.KeyEncryptionKeyInfoArgs>;
}

/**
 * Disk Encryption Key Information (BitLocker Encryption Key (BEK) on Windows).
 */
export interface DiskEncryptionKeyInfoArgs {
    /**
     * The KeyVault resource ARM id for secret.
     */
    keyVaultResourceArmId?: pulumi.Input<string>;
    /**
     * The secret url / identifier.
     */
    secretIdentifier?: pulumi.Input<string>;
}

/**
 * Enable migration input properties.
 */
export interface EnableMigrationInputPropertiesArgs {
    /**
     * The policy Id.
     */
    policyId: pulumi.Input<string>;
    /**
     * The provider specific details.
     */
    providerSpecificDetails: pulumi.Input<inputs.recoveryservices.v20180110.VMwareCbtEnableMigrationInputArgs>;
}

/**
 * Enable protection input properties.
 */
export interface EnableProtectionInputPropertiesArgs {
    /**
     * The Policy Id.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The protectable item Id.
     */
    protectableItemId?: pulumi.Input<string>;
    /**
     * The ReplicationProviderInput. For HyperVReplicaAzure provider, it will be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For HyperVReplicaAzure provider, it can be null.
     */
    providerSpecificDetails?: pulumi.Input<inputs.recoveryservices.v20180110.A2AEnableProtectionInputArgs | inputs.recoveryservices.v20180110.HyperVReplicaAzureEnableProtectionInputArgs | inputs.recoveryservices.v20180110.InMageAzureV2EnableProtectionInputArgs | inputs.recoveryservices.v20180110.InMageEnableProtectionInputArgs | inputs.recoveryservices.v20180110.SanEnableProtectionInputArgs>;
}

/**
 * Properties of site details provided during the time of site creation
 */
export interface FabricCreationInputPropertiesArgs {
    /**
     * Fabric provider specific creation input.
     */
    customDetails?: pulumi.Input<inputs.recoveryservices.v20180110.AzureFabricCreationInputArgs | inputs.recoveryservices.v20180110.VMwareV2FabricCreationInputArgs>;
}

/**
 * Azure specific enable protection input.
 */
export interface HyperVReplicaAzureEnableProtectionInputArgs {
    /**
     * The list of VHD IDs of disks to be protected.
     */
    disksToInclude?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The selected option to enable RDP\SSH on target vm after failover. String value of {SrsDataContract.EnableRDPOnTargetOption} enum.
     */
    enableRdpOnTargetOption?: pulumi.Input<string>;
    /**
     * The Hyper-V host Vm Id.
     */
    hvHostVmId?: pulumi.Input<string>;
    /**
     * The class type.
     * Expected value is 'HyperVReplicaAzure'.
     */
    instanceType?: pulumi.Input<"HyperVReplicaAzure">;
    /**
     * The storage account to be used for logging during replication.
     */
    logStorageAccountId?: pulumi.Input<string>;
    /**
     * The OS type associated with vm.
     */
    osType?: pulumi.Input<string>;
    /**
     * The selected target Azure network Id.
     */
    targetAzureNetworkId?: pulumi.Input<string>;
    /**
     * The selected target Azure subnet Id.
     */
    targetAzureSubnetId?: pulumi.Input<string>;
    /**
     * The Id of the target resource group (for classic deployment) in which the failover VM is to be created.
     */
    targetAzureV1ResourceGroupId?: pulumi.Input<string>;
    /**
     * The Id of the target resource group (for resource manager deployment) in which the failover VM is to be created.
     */
    targetAzureV2ResourceGroupId?: pulumi.Input<string>;
    /**
     * The target azure Vm Name.
     */
    targetAzureVmName?: pulumi.Input<string>;
    /**
     * The storage account name.
     */
    targetStorageAccountId?: pulumi.Input<string>;
    /**
     * A value indicating whether managed disks should be used during failover.
     */
    useManagedDisks?: pulumi.Input<string>;
    /**
     * The OS disk VHD id associated with vm.
     */
    vhdId?: pulumi.Input<string>;
    /**
     * The Vm Name.
     */
    vmName?: pulumi.Input<string>;
}

/**
 * Hyper-V Replica Azure specific input for creating a protection profile.
 */
export interface HyperVReplicaAzurePolicyInputArgs {
    /**
     * The interval (in hours) at which Hyper-V Replica should create an application consistent snapshot within the VM.
     */
    applicationConsistentSnapshotFrequencyInHours?: pulumi.Input<number>;
    /**
     * The class type.
     * Expected value is 'HyperVReplicaAzure'.
     */
    instanceType?: pulumi.Input<"HyperVReplicaAzure">;
    /**
     * The scheduled start time for the initial replication. If this parameter is Null, the initial replication starts immediately.
     */
    onlineReplicationStartTime?: pulumi.Input<string>;
    /**
     * The duration (in hours) to which point the recovery history needs to be maintained.
     */
    recoveryPointHistoryDuration?: pulumi.Input<number>;
    /**
     * The replication interval.
     */
    replicationInterval?: pulumi.Input<number>;
    /**
     * The list of storage accounts to which the VMs in the primary cloud can replicate to.
     */
    storageAccounts?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * HyperV Replica Blue policy input.
 */
export interface HyperVReplicaBluePolicyInputArgs {
    /**
     * A value indicating the authentication type.
     */
    allowedAuthenticationType?: pulumi.Input<number>;
    /**
     * A value indicating the application consistent frequency.
     */
    applicationConsistentSnapshotFrequencyInHours?: pulumi.Input<number>;
    /**
     * A value indicating whether compression has to be enabled.
     */
    compression?: pulumi.Input<string>;
    /**
     * A value indicating whether IR is online.
     */
    initialReplicationMethod?: pulumi.Input<string>;
    /**
     * The class type.
     * Expected value is 'HyperVReplica2012R2'.
     */
    instanceType?: pulumi.Input<"HyperVReplica2012R2">;
    /**
     * A value indicating the offline IR export path.
     */
    offlineReplicationExportPath?: pulumi.Input<string>;
    /**
     * A value indicating the offline IR import path.
     */
    offlineReplicationImportPath?: pulumi.Input<string>;
    /**
     * A value indicating the online IR start time.
     */
    onlineReplicationStartTime?: pulumi.Input<string>;
    /**
     * A value indicating the number of recovery points.
     */
    recoveryPoints?: pulumi.Input<number>;
    /**
     * A value indicating whether the VM has to be auto deleted.
     */
    replicaDeletion?: pulumi.Input<string>;
    /**
     * A value indicating the replication interval.
     */
    replicationFrequencyInSeconds?: pulumi.Input<number>;
    /**
     * A value indicating the recovery HTTPS port.
     */
    replicationPort?: pulumi.Input<number>;
}

/**
 * Hyper-V Replica specific policy Input.
 */
export interface HyperVReplicaPolicyInputArgs {
    /**
     * A value indicating the authentication type.
     */
    allowedAuthenticationType?: pulumi.Input<number>;
    /**
     * A value indicating the application consistent frequency.
     */
    applicationConsistentSnapshotFrequencyInHours?: pulumi.Input<number>;
    /**
     * A value indicating whether compression has to be enabled.
     */
    compression?: pulumi.Input<string>;
    /**
     * A value indicating whether IR is online.
     */
    initialReplicationMethod?: pulumi.Input<string>;
    /**
     * The class type.
     * Expected value is 'HyperVReplica2012'.
     */
    instanceType?: pulumi.Input<"HyperVReplica2012">;
    /**
     * A value indicating the offline IR export path.
     */
    offlineReplicationExportPath?: pulumi.Input<string>;
    /**
     * A value indicating the offline IR import path.
     */
    offlineReplicationImportPath?: pulumi.Input<string>;
    /**
     * A value indicating the online IR start time.
     */
    onlineReplicationStartTime?: pulumi.Input<string>;
    /**
     * A value indicating the number of recovery points.
     */
    recoveryPoints?: pulumi.Input<number>;
    /**
     * A value indicating whether the VM has to be auto deleted.
     */
    replicaDeletion?: pulumi.Input<string>;
    /**
     * A value indicating the recovery HTTPS port.
     */
    replicationPort?: pulumi.Input<number>;
}

/**
 * Identity provider input.
 */
export interface IdentityProviderInputArgs {
    /**
     * The base authority for Azure Active Directory authentication.
     */
    aadAuthority: pulumi.Input<string>;
    /**
     * The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     */
    applicationId: pulumi.Input<string>;
    /**
     * The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     */
    audience: pulumi.Input<string>;
    /**
     * The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     */
    objectId: pulumi.Input<string>;
    /**
     * The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     */
    tenantId: pulumi.Input<string>;
}

/**
 * VMware Azure specific enable protection input.
 */
export interface InMageAzureV2EnableProtectionInputArgs {
    /**
     * The disks to include list.
     */
    disksToInclude?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The selected option to enable RDP\SSH on target vm after failover. String value of {SrsDataContract.EnableRDPOnTargetOption} enum.
     */
    enableRdpOnTargetOption?: pulumi.Input<string>;
    /**
     * The class type.
     * Expected value is 'InMageAzureV2'.
     */
    instanceType?: pulumi.Input<"InMageAzureV2">;
    /**
     * The storage account to be used for logging during replication.
     */
    logStorageAccountId?: pulumi.Input<string>;
    /**
     * The Master target Id.
     */
    masterTargetId?: pulumi.Input<string>;
    /**
     * The multi vm group Id.
     */
    multiVmGroupId?: pulumi.Input<string>;
    /**
     * The multi vm group name.
     */
    multiVmGroupName?: pulumi.Input<string>;
    /**
     * The Process Server Id.
     */
    processServerId?: pulumi.Input<string>;
    /**
     * The CS account Id.
     */
    runAsAccountId?: pulumi.Input<string>;
    /**
     * The storage account name.
     */
    storageAccountId: pulumi.Input<string>;
    /**
     * The selected target Azure network Id.
     */
    targetAzureNetworkId?: pulumi.Input<string>;
    /**
     * The selected target Azure subnet Id.
     */
    targetAzureSubnetId?: pulumi.Input<string>;
    /**
     * The Id of the target resource group (for classic deployment) in which the failover VM is to be created.
     */
    targetAzureV1ResourceGroupId?: pulumi.Input<string>;
    /**
     * The Id of the target resource group (for resource manager deployment) in which the failover VM is to be created.
     */
    targetAzureV2ResourceGroupId?: pulumi.Input<string>;
    /**
     * The target azure Vm Name.
     */
    targetAzureVmName?: pulumi.Input<string>;
    /**
     * A value indicating whether managed disks should be used during failover.
     */
    useManagedDisks?: pulumi.Input<string>;
}

/**
 * VMWare Azure specific policy Input.
 */
export interface InMageAzureV2PolicyInputArgs {
    /**
     * The app consistent snapshot frequency (in minutes).
     */
    appConsistentFrequencyInMinutes?: pulumi.Input<number>;
    /**
     * The crash consistent snapshot frequency (in minutes).
     */
    crashConsistentFrequencyInMinutes?: pulumi.Input<number>;
    /**
     * The class type.
     * Expected value is 'InMageAzureV2'.
     */
    instanceType?: pulumi.Input<"InMageAzureV2">;
    /**
     * A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
     */
    multiVmSyncStatus: pulumi.Input<string | enums.recoveryservices.v20180110.SetMultiVmSyncStatus>;
    /**
     * The duration in minutes until which the recovery points need to be stored.
     */
    recoveryPointHistory?: pulumi.Input<number>;
    /**
     * The recovery point threshold in minutes.
     */
    recoveryPointThresholdInMinutes?: pulumi.Input<number>;
}

/**
 * DiskExclusionInput when doing enable protection of virtual machine in InMage provider.
 */
export interface InMageDiskExclusionInputArgs {
    /**
     * The guest disk signature based option for disk exclusion.
     */
    diskSignatureOptions?: pulumi.Input<pulumi.Input<inputs.recoveryservices.v20180110.InMageDiskSignatureExclusionOptionsArgs>[]>;
    /**
     * The volume label based option for disk exclusion.
     */
    volumeOptions?: pulumi.Input<pulumi.Input<inputs.recoveryservices.v20180110.InMageVolumeExclusionOptionsArgs>[]>;
}

/**
 * Guest disk signature based disk exclusion option when doing enable protection of virtual machine in InMage provider.
 */
export interface InMageDiskSignatureExclusionOptionsArgs {
    /**
     * The guest signature of disk to be excluded from replication.
     */
    diskSignature?: pulumi.Input<string>;
}

/**
 * VMware Azure specific enable protection input.
 */
export interface InMageEnableProtectionInputArgs {
    /**
     * The target data store name.
     */
    datastoreName?: pulumi.Input<string>;
    /**
     * The enable disk exclusion input.
     */
    diskExclusionInput?: pulumi.Input<inputs.recoveryservices.v20180110.InMageDiskExclusionInputArgs>;
    /**
     * The disks to include list.
     */
    disksToInclude?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The class type.
     * Expected value is 'InMage'.
     */
    instanceType?: pulumi.Input<"InMage">;
    /**
     * The Master Target Id.
     */
    masterTargetId: pulumi.Input<string>;
    /**
     * The multi vm group Id.
     */
    multiVmGroupId: pulumi.Input<string>;
    /**
     * The multi vm group name.
     */
    multiVmGroupName: pulumi.Input<string>;
    /**
     * The Process Server Id.
     */
    processServerId: pulumi.Input<string>;
    /**
     * The retention drive to use on the MT.
     */
    retentionDrive: pulumi.Input<string>;
    /**
     * The CS account Id.
     */
    runAsAccountId?: pulumi.Input<string>;
    /**
     * The Vm Name.
     */
    vmFriendlyName?: pulumi.Input<string>;
}

/**
 * VMWare Azure specific protection profile Input.
 */
export interface InMagePolicyInputArgs {
    /**
     * The app consistent snapshot frequency (in minutes).
     */
    appConsistentFrequencyInMinutes?: pulumi.Input<number>;
    /**
     * The class type.
     * Expected value is 'InMage'.
     */
    instanceType?: pulumi.Input<"InMage">;
    /**
     * A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
     */
    multiVmSyncStatus: pulumi.Input<string | enums.recoveryservices.v20180110.SetMultiVmSyncStatus>;
    /**
     * The duration in minutes until which the recovery points need to be stored.
     */
    recoveryPointHistory?: pulumi.Input<number>;
    /**
     * The recovery point threshold in minutes.
     */
    recoveryPointThresholdInMinutes?: pulumi.Input<number>;
}

/**
 * Guest disk signature based disk exclusion option when doing enable protection of virtual machine in InMage provider.
 */
export interface InMageVolumeExclusionOptionsArgs {
    /**
     * The value indicating whether to exclude multi volume disk or not. If a disk has multiple volumes and one of the volume has label matching with VolumeLabel this disk will be excluded from replication if OnlyExcludeIfSingleVolume is false.
     */
    onlyExcludeIfSingleVolume?: pulumi.Input<string>;
    /**
     * The volume label. The disk having any volume with this label will be excluded from replication.
     */
    volumeLabel?: pulumi.Input<string>;
}

/**
 * Key Encryption Key (KEK) information.
 */
export interface KeyEncryptionKeyInfoArgs {
    /**
     * The key url / identifier.
     */
    keyIdentifier?: pulumi.Input<string>;
    /**
     * The KeyVault resource ARM id for key.
     */
    keyVaultResourceArmId?: pulumi.Input<string>;
}

/**
 * Recovery plan action details.
 */
export interface RecoveryPlanActionArgs {
    /**
     * The action name.
     */
    actionName: pulumi.Input<string>;
    /**
     * The list of failover directions.
     */
    failoverDirections: pulumi.Input<pulumi.Input<string | enums.recoveryservices.v20180110.PossibleOperationsDirections>[]>;
    /**
     * The list of failover types.
     */
    failoverTypes: pulumi.Input<pulumi.Input<string | enums.recoveryservices.v20180110.ReplicationProtectedItemOperation>[]>;
}

/**
 * Recovery plan group details.
 */
export interface RecoveryPlanGroupArgs {
    /**
     * The end group actions.
     */
    endGroupActions?: pulumi.Input<pulumi.Input<inputs.recoveryservices.v20180110.RecoveryPlanActionArgs>[]>;
    /**
     * The group type.
     */
    groupType: pulumi.Input<string | enums.recoveryservices.v20180110.RecoveryPlanGroupType>;
    /**
     * The list of protected items.
     */
    replicationProtectedItems?: pulumi.Input<pulumi.Input<inputs.recoveryservices.v20180110.RecoveryPlanProtectedItemArgs>[]>;
    /**
     * The start group actions.
     */
    startGroupActions?: pulumi.Input<pulumi.Input<inputs.recoveryservices.v20180110.RecoveryPlanActionArgs>[]>;
}

/**
 * Recovery plan protected item.
 */
export interface RecoveryPlanProtectedItemArgs {
    /**
     * The ARM Id of the recovery plan protected item.
     */
    id?: pulumi.Input<string>;
    /**
     * The virtual machine Id.
     */
    virtualMachineId?: pulumi.Input<string>;
}

/**
 * San enable protection provider specific input.
 */
export interface SanEnableProtectionInputArgs {
    /**
     * The class type.
     * Expected value is 'San'.
     */
    instanceType?: pulumi.Input<"San">;
}

/**
 * Storage mapping input properties.
 */
export interface StorageMappingInputPropertiesArgs {
    /**
     * The ID of the storage object.
     */
    targetStorageClassificationId?: pulumi.Input<string>;
}

/**
 * VMwareCbt container mapping input.
 */
export interface VMwareCbtContainerMappingInputArgs {
    /**
     * The class type.
     * Expected value is 'VMwareCbt'.
     */
    instanceType?: pulumi.Input<"VMwareCbt">;
    /**
     * The target key vault ARM Id.
     */
    keyVaultId: pulumi.Input<string>;
    /**
     * The target key vault URL.
     */
    keyVaultUri: pulumi.Input<string>;
    /**
     * The secret name of the service bus connection string.
     */
    serviceBusConnectionStringSecretName: pulumi.Input<string>;
    /**
     * The storage account ARM Id.
     */
    storageAccountId: pulumi.Input<string>;
    /**
     * The secret name of the storage account.
     */
    storageAccountSasSecretName: pulumi.Input<string>;
    /**
     * The target location.
     */
    targetLocation: pulumi.Input<string>;
}

/**
 * VMwareCbt disk input.
 */
export interface VMwareCbtDiskInputArgs {
    /**
     * The DiskEncryptionSet ARM Id.
     */
    diskEncryptionSetId?: pulumi.Input<string>;
    /**
     * The disk Id.
     */
    diskId: pulumi.Input<string>;
    /**
     * The disk type.
     */
    diskType?: pulumi.Input<string | enums.recoveryservices.v20180110.DiskAccountType>;
    /**
     * A value indicating whether the disk is the OS disk.
     */
    isOSDisk: pulumi.Input<string>;
    /**
     * The log storage account ARM Id.
     */
    logStorageAccountId: pulumi.Input<string>;
    /**
     * The key vault secret name of the log storage account.
     */
    logStorageAccountSasSecretName: pulumi.Input<string>;
}

/**
 * VMwareCbt specific enable migration input.
 */
export interface VMwareCbtEnableMigrationInputArgs {
    /**
     * The data mover RunAs account Id.
     */
    dataMoverRunAsAccountId: pulumi.Input<string>;
    /**
     * The disks to include list.
     */
    disksToInclude: pulumi.Input<pulumi.Input<inputs.recoveryservices.v20180110.VMwareCbtDiskInputArgs>[]>;
    /**
     * The class type.
     * Expected value is 'VMwareCbt'.
     */
    instanceType: pulumi.Input<"VMwareCbt">;
    /**
     * License type.
     */
    licenseType?: pulumi.Input<string | enums.recoveryservices.v20180110.LicenseType>;
    /**
     * A value indicating whether auto resync is to be done.
     */
    performAutoResync?: pulumi.Input<string>;
    /**
     * The snapshot RunAs account Id.
     */
    snapshotRunAsAccountId: pulumi.Input<string>;
    /**
     * The target availability set ARM Id.
     */
    targetAvailabilitySetId?: pulumi.Input<string>;
    /**
     * The target availability zone.
     */
    targetAvailabilityZone?: pulumi.Input<string>;
    /**
     * The target boot diagnostics storage account ARM Id.
     */
    targetBootDiagnosticsStorageAccountId?: pulumi.Input<string>;
    /**
     * The target network ARM Id.
     */
    targetNetworkId: pulumi.Input<string>;
    /**
     * The target resource group ARM Id.
     */
    targetResourceGroupId: pulumi.Input<string>;
    /**
     * The target subnet name.
     */
    targetSubnetName?: pulumi.Input<string>;
    /**
     * The target VM name.
     */
    targetVmName?: pulumi.Input<string>;
    /**
     * The target VM size.
     */
    targetVmSize?: pulumi.Input<string>;
    /**
     * The ARM Id of the VM discovered in VMware.
     */
    vmwareMachineId: pulumi.Input<string>;
}

/**
 * VMware Cbt policy creation input.
 */
export interface VMwareCbtPolicyCreationInputArgs {
    /**
     * The app consistent snapshot frequency (in minutes).
     */
    appConsistentFrequencyInMinutes?: pulumi.Input<number>;
    /**
     * The crash consistent snapshot frequency (in minutes).
     */
    crashConsistentFrequencyInMinutes?: pulumi.Input<number>;
    /**
     * The class type.
     * Expected value is 'VMwareCbt'.
     */
    instanceType?: pulumi.Input<"VMwareCbt">;
    /**
     * The duration in minutes until which the recovery points need to be stored.
     */
    recoveryPointHistoryInMinutes?: pulumi.Input<number>;
}

/**
 * VMwareV2 fabric provider specific settings.
 */
export interface VMwareV2FabricCreationInputArgs {
    /**
     * Gets the class type.
     * Expected value is 'VMwareV2'.
     */
    instanceType?: pulumi.Input<"VMwareV2">;
    /**
     * The ARM Id of the migration solution.
     */
    migrationSolutionId: pulumi.Input<string>;
    /**
     * The ARM Id of the physical site.
     */
    physicalSiteId?: pulumi.Input<string>;
    /**
     * The ARM Id of the VMware site.
     */
    vmwareSiteId?: pulumi.Input<string>;
}

/**
 * Create network mappings input properties/behavior specific to Vmm to Azure Network mapping.
 */
export interface VmmToAzureCreateNetworkMappingInputArgs {
    /**
     * The instance type.
     * Expected value is 'VmmToAzure'.
     */
    instanceType?: pulumi.Input<"VmmToAzure">;
}

/**
 * Create network mappings input properties/behavior specific to vmm to vmm Network mapping.
 */
export interface VmmToVmmCreateNetworkMappingInputArgs {
    /**
     * The instance type.
     * Expected value is 'VmmToVmm'.
     */
    instanceType?: pulumi.Input<"VmmToVmm">;
}

