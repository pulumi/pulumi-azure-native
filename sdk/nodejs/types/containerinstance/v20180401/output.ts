// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The properties of the Azure File volume. Azure File shares are mounted as volumes.
 */
export interface AzureFileVolumeResponse {
    /**
     * The flag indicating whether the Azure File shared mounted as a volume is read-only.
     */
    readOnly?: boolean;
    /**
     * The name of the Azure File share to be mounted as a volume.
     */
    shareName: string;
    /**
     * The storage account access key used to access the Azure File share.
     */
    storageAccountKey?: string;
    /**
     * The name of the storage account that contains the Azure File share.
     */
    storageAccountName: string;
}

/**
 * The instance view of the container group. Only valid in response.
 */
export interface ContainerGroupResponseInstanceView {
    /**
     * The events of this container group.
     */
    events: outputs.containerinstance.v20180401.EventResponse[];
    /**
     * The state of the container group. Only valid in response.
     */
    state: string;
}

/**
 * The port exposed on the container instance.
 */
export interface ContainerPortResponse {
    /**
     * The port number exposed within the container group.
     */
    port: number;
    /**
     * The protocol associated with the port.
     */
    protocol?: string;
}

/**
 * The instance view of the container instance. Only valid in response.
 */
export interface ContainerPropertiesResponseInstanceView {
    /**
     * Current container instance state.
     */
    currentState: outputs.containerinstance.v20180401.ContainerStateResponse;
    /**
     * The events of the container instance.
     */
    events: outputs.containerinstance.v20180401.EventResponse[];
    /**
     * Previous container instance state.
     */
    previousState: outputs.containerinstance.v20180401.ContainerStateResponse;
    /**
     * The number of times that the container instance has been restarted.
     */
    restartCount: number;
}

/**
 * A container instance.
 */
export interface ContainerResponse {
    /**
     * The commands to execute within the container instance in exec form.
     */
    command?: string[];
    /**
     * The environment variables to set in the container instance.
     */
    environmentVariables?: outputs.containerinstance.v20180401.EnvironmentVariableResponse[];
    /**
     * The name of the image used to create the container instance.
     */
    image: string;
    /**
     * The instance view of the container instance. Only valid in response.
     */
    instanceView: outputs.containerinstance.v20180401.ContainerPropertiesResponseInstanceView;
    /**
     * The user-provided name of the container instance.
     */
    name: string;
    /**
     * The exposed ports on the container instance.
     */
    ports?: outputs.containerinstance.v20180401.ContainerPortResponse[];
    /**
     * The resource requirements of the container instance.
     */
    resources: outputs.containerinstance.v20180401.ResourceRequirementsResponse;
    /**
     * The volume mounts available to the container instance.
     */
    volumeMounts?: outputs.containerinstance.v20180401.VolumeMountResponse[];
}

/**
 * The container instance state.
 */
export interface ContainerStateResponse {
    /**
     * The human-readable status of the container instance state.
     */
    detailStatus: string;
    /**
     * The container instance exit codes correspond to those from the `docker run` command.
     */
    exitCode: number;
    /**
     * The date-time when the container instance state finished.
     */
    finishTime: string;
    /**
     * The date-time when the container instance state started.
     */
    startTime: string;
    /**
     * The state of the container instance.
     */
    state: string;
}

/**
 * The environment variable to set within the container instance.
 */
export interface EnvironmentVariableResponse {
    /**
     * The name of the environment variable.
     */
    name: string;
    /**
     * The value of the environment variable.
     */
    value: string;
}

/**
 * A container group or container instance event.
 */
export interface EventResponse {
    /**
     * The count of the event.
     */
    count: number;
    /**
     * The date-time of the earliest logged event.
     */
    firstTimestamp: string;
    /**
     * The date-time of the latest logged event.
     */
    lastTimestamp: string;
    /**
     * The event message.
     */
    message: string;
    /**
     * The event name.
     */
    name: string;
    /**
     * The event type.
     */
    type: string;
}

/**
 * Represents a volume that is populated with the contents of a git repository
 */
export interface GitRepoVolumeResponse {
    /**
     * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

/**
 * Image registry credential.
 */
export interface ImageRegistryCredentialResponse {
    /**
     * The password for the private registry.
     */
    password?: string;
    /**
     * The Docker image registry server without a protocol such as "http" and "https".
     */
    server: string;
    /**
     * The username for the private registry.
     */
    username: string;
}

/**
 * IP address for the container group.
 */
export interface IpAddressResponse {
    /**
     * The Dns name label for the IP.
     */
    dnsNameLabel?: string;
    /**
     * The FQDN for the IP.
     */
    fqdn: string;
    /**
     * The IP exposed to the public internet.
     */
    ip?: string;
    /**
     * The list of ports exposed on the container group.
     */
    ports: outputs.containerinstance.v20180401.PortResponse[];
    /**
     * Specifies if the IP is exposed to the public internet.
     */
    type: string;
}

/**
 * The port exposed on the container group.
 */
export interface PortResponse {
    /**
     * The port number.
     */
    port: number;
    /**
     * The protocol associated with the port.
     */
    protocol?: string;
}

/**
 * The resource limits.
 */
export interface ResourceLimitsResponse {
    /**
     * The CPU limit of this container instance.
     */
    cpu?: number;
    /**
     * The memory limit in GB of this container instance.
     */
    memoryInGB?: number;
}

/**
 * The resource requests.
 */
export interface ResourceRequestsResponse {
    /**
     * The CPU request of this container instance.
     */
    cpu: number;
    /**
     * The memory request in GB of this container instance.
     */
    memoryInGB: number;
}

/**
 * The resource requirements.
 */
export interface ResourceRequirementsResponse {
    /**
     * The resource limits of this container instance.
     */
    limits?: outputs.containerinstance.v20180401.ResourceLimitsResponse;
    /**
     * The resource requests of this container instance.
     */
    requests: outputs.containerinstance.v20180401.ResourceRequestsResponse;
}

/**
 * The properties of the volume mount.
 */
export interface VolumeMountResponse {
    /**
     * The path within the container where the volume should be mounted. Must not contain colon (:).
     */
    mountPath: string;
    /**
     * The name of the volume mount.
     */
    name: string;
    /**
     * The flag indicating whether the volume mount is read-only.
     */
    readOnly?: boolean;
}

/**
 * The properties of the volume.
 */
export interface VolumeResponse {
    /**
     * The Azure File volume.
     */
    azureFile?: outputs.containerinstance.v20180401.AzureFileVolumeResponse;
    /**
     * The empty directory volume.
     */
    emptyDir?: any;
    /**
     * The git repo volume.
     */
    gitRepo?: outputs.containerinstance.v20180401.GitRepoVolumeResponse;
    /**
     * The name of the volume.
     */
    name: string;
    /**
     * The secret volume.
     */
    secret?: {[key: string]: string};
}

