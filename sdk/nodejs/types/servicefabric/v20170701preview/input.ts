// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Describes capacity information for a custom resource balancing metric. This can be used to limit the total consumption of this metric by the services of this application.
 */
export interface ApplicationMetricDescriptionArgs {
    /**
     * The maximum node capacity for Service Fabric application.
     * This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.
     * If set to zero, capacity for this metric is unlimited on each node.
     * When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
     * When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
     */
    maximumCapacity?: pulumi.Input<number>;
    /**
     * The name of the metric.
     */
    name?: pulumi.Input<string>;
    /**
     * The node reservation capacity for Service Fabric application.
     * This is the amount of load which is reserved on nodes which have instances of this application.
     * If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.
     * If set to zero, no capacity is reserved for this metric.
     * When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.
     */
    reservationCapacity?: pulumi.Input<number>;
    /**
     * The total metric capacity for Service Fabric application.
     * This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.
     * When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.
     */
    totalApplicationCapacity?: pulumi.Input<number>;
}

/**
 * Describes the policy for a monitored application upgrade.
 */
export interface ApplicationUpgradePolicyArgs {
    /**
     * Defines a health policy used to evaluate the health of an application or one of its children entities.
     */
    applicationHealthPolicy?: pulumi.Input<inputs.servicefabric.v20170701preview.ArmApplicationHealthPolicyArgs>;
    /**
     * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     */
    forceRestart?: pulumi.Input<boolean>;
    /**
     * The policy used for monitoring the application upgrade
     */
    rollingUpgradeMonitoringPolicy?: pulumi.Input<inputs.servicefabric.v20170701preview.ArmRollingUpgradeMonitoringPolicyArgs>;
    /**
     * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
     */
    upgradeReplicaSetCheckTimeout?: pulumi.Input<string>;
}
/**
 * applicationUpgradePolicyArgsProvideDefaults sets the appropriate defaults for ApplicationUpgradePolicyArgs
 */
export function applicationUpgradePolicyArgsProvideDefaults(val: ApplicationUpgradePolicyArgs): ApplicationUpgradePolicyArgs {
    return {
        ...val,
        applicationHealthPolicy: (val.applicationHealthPolicy ? pulumi.output(val.applicationHealthPolicy).apply(inputs.servicefabric.v20170701preview.armApplicationHealthPolicyArgsProvideDefaults) : undefined),
    };
}

/**
 * Defines a health policy used to evaluate the health of an application or one of its children entities.
 */
export interface ArmApplicationHealthPolicyArgs {
    /**
     * Indicates whether warnings are treated with the same severity as errors.
     */
    considerWarningAsError?: pulumi.Input<boolean>;
    /**
     * The health policy used by default to evaluate the health of a service type.
     */
    defaultServiceTypeHealthPolicy?: pulumi.Input<inputs.servicefabric.v20170701preview.ArmServiceTypeHealthPolicyArgs>;
    /**
     * The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
     * This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
     */
    maxPercentUnhealthyDeployedApplications?: pulumi.Input<number>;
    /**
     * The map with service type health policy per service type name. The map is empty by default.
     */
    serviceTypeHealthPolicyMap?: pulumi.Input<{[key: string]: pulumi.Input<inputs.servicefabric.v20170701preview.ArmServiceTypeHealthPolicyArgs>}>;
}
/**
 * armApplicationHealthPolicyArgsProvideDefaults sets the appropriate defaults for ArmApplicationHealthPolicyArgs
 */
export function armApplicationHealthPolicyArgsProvideDefaults(val: ArmApplicationHealthPolicyArgs): ArmApplicationHealthPolicyArgs {
    return {
        ...val,
        considerWarningAsError: (val.considerWarningAsError) ?? false,
        defaultServiceTypeHealthPolicy: (val.defaultServiceTypeHealthPolicy ? pulumi.output(val.defaultServiceTypeHealthPolicy).apply(inputs.servicefabric.v20170701preview.armServiceTypeHealthPolicyArgsProvideDefaults) : undefined),
        maxPercentUnhealthyDeployedApplications: (val.maxPercentUnhealthyDeployedApplications) ?? 0,
    };
}

/**
 * The policy used for monitoring the application upgrade
 */
export interface ArmRollingUpgradeMonitoringPolicyArgs {
    /**
     * The activation Mode of the service package
     */
    failureAction?: pulumi.Input<string | enums.servicefabric.v20170701preview.ArmUpgradeFailureAction>;
    /**
     * The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     */
    healthCheckRetryTimeout?: pulumi.Input<string>;
    /**
     * The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     */
    healthCheckStableDuration?: pulumi.Input<string>;
    /**
     * The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     */
    healthCheckWaitDuration?: pulumi.Input<string>;
    /**
     * The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     */
    upgradeDomainTimeout?: pulumi.Input<string>;
    /**
     * The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     */
    upgradeTimeout?: pulumi.Input<string>;
}

/**
 * Represents the health policy used to evaluate the health of services belonging to a service type.
 */
export interface ArmServiceTypeHealthPolicyArgs {
    /**
     * The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
     */
    maxPercentUnhealthyPartitionsPerService?: pulumi.Input<number>;
    /**
     * The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
     */
    maxPercentUnhealthyReplicasPerPartition?: pulumi.Input<number>;
    /**
     * The maximum percentage of services allowed to be unhealthy before your application is considered in error.
     */
    maxPercentUnhealthyServices?: pulumi.Input<number>;
}
/**
 * armServiceTypeHealthPolicyArgsProvideDefaults sets the appropriate defaults for ArmServiceTypeHealthPolicyArgs
 */
export function armServiceTypeHealthPolicyArgsProvideDefaults(val: ArmServiceTypeHealthPolicyArgs): ArmServiceTypeHealthPolicyArgs {
    return {
        ...val,
        maxPercentUnhealthyPartitionsPerService: (val.maxPercentUnhealthyPartitionsPerService) ?? 0,
        maxPercentUnhealthyReplicasPerPartition: (val.maxPercentUnhealthyReplicasPerPartition) ?? 0,
        maxPercentUnhealthyServices: (val.maxPercentUnhealthyServices) ?? 0,
    };
}

/**
 * The settings to enable AAD authentication on the cluster.
 */
export interface AzureActiveDirectoryArgs {
    /**
     * Azure active directory client application id.
     */
    clientApplication?: pulumi.Input<string>;
    /**
     * Azure active directory cluster application id.
     */
    clusterApplication?: pulumi.Input<string>;
    /**
     * Azure active directory tenant id.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * Describes the certificate details.
 */
export interface CertificateDescriptionArgs {
    /**
     * Thumbprint of the primary certificate.
     */
    thumbprint: pulumi.Input<string>;
    /**
     * Thumbprint of the secondary certificate.
     */
    thumbprintSecondary?: pulumi.Input<string>;
    /**
     * The local certificate store location.
     */
    x509StoreName?: pulumi.Input<string>;
}

/**
 * Describes the client certificate details using common name.
 */
export interface ClientCertificateCommonNameArgs {
    /**
     * The common name of the client certificate.
     */
    certificateCommonName: pulumi.Input<string>;
    /**
     * The issuer thumbprint of the client certificate.
     */
    certificateIssuerThumbprint: pulumi.Input<string>;
    /**
     * Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
     */
    isAdmin: pulumi.Input<boolean>;
}

/**
 * Describes the client certificate details using thumbprint.
 */
export interface ClientCertificateThumbprintArgs {
    /**
     * The thumbprint of the client certificate.
     */
    certificateThumbprint: pulumi.Input<string>;
    /**
     * Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
     */
    isAdmin: pulumi.Input<boolean>;
}

/**
 * Defines a health policy used to evaluate the health of the cluster or of a cluster node.
 */
export interface ClusterHealthPolicyArgs {
    /**
     * The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10. 
     */
    maxPercentUnhealthyApplications?: pulumi.Input<number>;
    /**
     * The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10. 
     */
    maxPercentUnhealthyNodes?: pulumi.Input<number>;
}

/**
 * Describes the delta health policies for the cluster upgrade.
 */
export interface ClusterUpgradeDeltaHealthPolicyArgs {
    /**
     * The maximum allowed percentage of applications health degradation allowed during cluster upgrades. The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
     */
    maxPercentDeltaUnhealthyApplications: pulumi.Input<number>;
    /**
     * The maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
     */
    maxPercentDeltaUnhealthyNodes: pulumi.Input<number>;
    /**
     * The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits. 
     */
    maxPercentUpgradeDomainDeltaUnhealthyNodes: pulumi.Input<number>;
}

/**
 * Describes the policy used when upgrading the cluster.
 */
export interface ClusterUpgradePolicyArgs {
    /**
     * The delta health policy used when upgrading the cluster.
     */
    deltaHealthPolicy?: pulumi.Input<inputs.servicefabric.v20170701preview.ClusterUpgradeDeltaHealthPolicyArgs>;
    /**
     * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     */
    forceRestart?: pulumi.Input<boolean>;
    /**
     * The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     */
    healthCheckRetryTimeout: pulumi.Input<string>;
    /**
     * The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     */
    healthCheckStableDuration: pulumi.Input<string>;
    /**
     * The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     */
    healthCheckWaitDuration: pulumi.Input<string>;
    /**
     * The cluster health policy used when upgrading the cluster.
     */
    healthPolicy: pulumi.Input<inputs.servicefabric.v20170701preview.ClusterHealthPolicyArgs>;
    /**
     * The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     */
    upgradeDomainTimeout: pulumi.Input<string>;
    /**
     * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     */
    upgradeReplicaSetCheckTimeout: pulumi.Input<string>;
    /**
     * The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     */
    upgradeTimeout: pulumi.Input<string>;
}

/**
 * The detail of the Service Fabric runtime version result
 */
export interface ClusterVersionDetailsArgs {
    /**
     * The Service Fabric runtime version of the cluster.
     */
    codeVersion?: pulumi.Input<string>;
    /**
     * Indicates if this version is for Windows or Linux operating system.
     */
    environment?: pulumi.Input<string>;
    /**
     * The date of expiry of support of the version.
     */
    supportExpiryUtc?: pulumi.Input<string>;
}

/**
 * The storage account information for storing Service Fabric diagnostic logs.
 */
export interface DiagnosticsStorageAccountConfigArgs {
    /**
     * The blob endpoint of the azure storage account.
     */
    blobEndpoint: pulumi.Input<string>;
    /**
     * The protected diagnostics storage key name.
     */
    protectedAccountKeyName: pulumi.Input<string>;
    /**
     * The queue endpoint of the azure storage account.
     */
    queueEndpoint: pulumi.Input<string>;
    /**
     * The Azure storage account name.
     */
    storageAccountName: pulumi.Input<string>;
    /**
     * The table endpoint of the azure storage account.
     */
    tableEndpoint: pulumi.Input<string>;
}

/**
 * Port range details
 */
export interface EndpointRangeDescriptionArgs {
    /**
     * End port of a range of ports
     */
    endPort: pulumi.Input<number>;
    /**
     * Starting port of a range of ports
     */
    startPort: pulumi.Input<number>;
}

/**
 * Describes the named partition scheme of the service.
 */
export interface NamedPartitionSchemeDescriptionArgs {
    /**
     * The number of partitions.
     */
    count: pulumi.Input<number>;
    /**
     * Array of size specified by the ‘Count’ parameter, for the names of the partitions.
     */
    names: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is 'Named'.
     */
    partitionScheme: pulumi.Input<"Named">;
}

/**
 * Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
 */
export interface NodeTypeDescriptionArgs {
    /**
     * The range of ports from which cluster assigned port to Service Fabric applications.
     */
    applicationPorts?: pulumi.Input<inputs.servicefabric.v20170701preview.EndpointRangeDescriptionArgs>;
    /**
     * The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     */
    capacities?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The TCP cluster management endpoint port.
     */
    clientConnectionEndpointPort: pulumi.Input<number>;
    /**
     * The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     *
     *   - Bronze - No privileges. This is the default.
     *   - Silver - The infrastructure jobs can be paused for a duration of 30 minutes per UD.
     *   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
     */
    durabilityLevel?: pulumi.Input<string>;
    /**
     * The range of ephemeral ports that nodes in this node type should be configured with.
     */
    ephemeralPorts?: pulumi.Input<inputs.servicefabric.v20170701preview.EndpointRangeDescriptionArgs>;
    /**
     * The HTTP cluster management endpoint port.
     */
    httpGatewayEndpointPort: pulumi.Input<number>;
    /**
     * The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
     */
    isPrimary: pulumi.Input<boolean>;
    /**
     * The name of the node type.
     */
    name: pulumi.Input<string>;
    /**
     * The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     */
    placementProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The endpoint used by reverse proxy.
     */
    reverseProxyEndpointPort?: pulumi.Input<number>;
    /**
     * The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
     */
    vmInstanceCount: pulumi.Input<number>;
}

/**
 * Creates a particular correlation between services.
 */
export interface ServiceCorrelationDescriptionArgs {
    /**
     * The ServiceCorrelationScheme which describes the relationship between this service and the service specified via ServiceName.
     */
    scheme: pulumi.Input<string | enums.servicefabric.v20170701preview.ServiceCorrelationScheme>;
    /**
     * The name of the service that the correlation relationship is established with.
     */
    serviceName: pulumi.Input<string>;
}

/**
 * Specifies a metric to load balance a service during runtime.
 */
export interface ServiceLoadMetricDescriptionArgs {
    /**
     * Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric.
     */
    defaultLoad?: pulumi.Input<number>;
    /**
     * The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive.
     */
    name: pulumi.Input<string>;
    /**
     * Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica.
     */
    primaryDefaultLoad?: pulumi.Input<number>;
    /**
     * Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica.
     */
    secondaryDefaultLoad?: pulumi.Input<number>;
    /**
     * The service load metric relative weight, compared to other metrics configured for this service, as a number.
     */
    weight?: pulumi.Input<string | enums.servicefabric.v20170701preview.ServiceLoadMetricWeight>;
}

/**
 * Describes the policy to be used for placement of a Service Fabric service.
 */
export interface ServicePlacementPolicyDescriptionArgs {
    /**
     * The type of placement policy for a service fabric service. Following are the possible values.
     */
    type: pulumi.Input<string | enums.servicefabric.v20170701preview.ServicePlacementPolicyType>;
}

/**
 * Describes a parameter in fabric settings of the cluster.
 */
export interface SettingsParameterDescriptionArgs {
    /**
     * The parameter name of fabric setting.
     */
    name: pulumi.Input<string>;
    /**
     * The parameter value of fabric setting.
     */
    value: pulumi.Input<string>;
}

/**
 * Describes a section in the fabric settings of the cluster.
 */
export interface SettingsSectionDescriptionArgs {
    /**
     * The section name of the fabric settings.
     */
    name: pulumi.Input<string>;
    /**
     * The collection of parameters in the section.
     */
    parameters: pulumi.Input<pulumi.Input<inputs.servicefabric.v20170701preview.SettingsParameterDescriptionArgs>[]>;
}

/**
 * Describes the partition scheme of a singleton-partitioned, or non-partitioned service.
 */
export interface SingletonPartitionSchemeDescriptionArgs {
    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is 'Singleton'.
     */
    partitionScheme: pulumi.Input<"Singleton">;
}

/**
 * Describes a partitioning scheme where an integer range is allocated evenly across a number of partitions.
 */
export interface UniformInt64RangePartitionSchemeDescriptionArgs {
    /**
     * The number of partitions.
     */
    count: pulumi.Input<number>;
    /**
     * String indicating the upper bound of the partition key range that
     * should be split between the partition ‘Count’
     */
    highKey: pulumi.Input<string>;
    /**
     * String indicating the lower bound of the partition key range that
     * should be split between the partition ‘Count’
     */
    lowKey: pulumi.Input<string>;
    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is 'UniformInt64Range'.
     */
    partitionScheme: pulumi.Input<"UniformInt64Range">;
}

