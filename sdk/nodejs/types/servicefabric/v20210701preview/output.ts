// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Represents a scaling mechanism for adding or removing named partitions of a stateless service. Partition names are in the format '0','1'...'N-1'.
 */
export interface AddRemoveIncrementalNamedPartitionScalingMechanismResponse {
    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is 'AddRemoveIncrementalNamedPartition'.
     */
    kind: "AddRemoveIncrementalNamedPartition";
    /**
     * Maximum number of named partitions of the service.
     */
    maxPartitionCount: number;
    /**
     * Minimum number of named partitions of the service.
     */
    minPartitionCount: number;
    /**
     * The number of instances to add or remove during a scaling operation.
     */
    scaleIncrement: number;
}

/**
 * Defines a health policy used to evaluate the health of an application or one of its children entities.
 */
export interface ApplicationHealthPolicyResponse {
    /**
     * Indicates whether warnings are treated with the same severity as errors.
     */
    considerWarningAsError: boolean;
    /**
     * The health policy used by default to evaluate the health of a service type.
     */
    defaultServiceTypeHealthPolicy?: outputs.servicefabric.v20210701preview.ServiceTypeHealthPolicyResponse;
    /**
     * The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
     * This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
     */
    maxPercentUnhealthyDeployedApplications: number;
    /**
     * The map with service type health policy per service type name. The map is empty by default.
     */
    serviceTypeHealthPolicyMap?: {[key: string]: outputs.servicefabric.v20210701preview.ServiceTypeHealthPolicyResponse};
}

/**
 * The policy used to clean up unused versions. When the policy is not specified explicitly, the default unused application versions to keep will be 3.
 */
export interface ApplicationTypeVersionsCleanupPolicyResponse {
    /**
     * Number of unused versions per application type to keep.
     */
    maxUnusedVersionsToKeep: number;
}

/**
 * Describes the policy for a monitored application upgrade.
 */
export interface ApplicationUpgradePolicyResponse {
    /**
     * Defines a health policy used to evaluate the health of an application or one of its children entities.
     */
    applicationHealthPolicy?: outputs.servicefabric.v20210701preview.ApplicationHealthPolicyResponse;
    /**
     * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     */
    forceRestart?: boolean;
    /**
     * Duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing during the application/cluster upgrade, only for those instances which have a non-zero delay duration configured in the service description.
     */
    instanceCloseDelayDuration?: number;
    /**
     * Determines whether the application should be recreated on update. If value=true, the rest of the upgrade policy parameters are not allowed.
     */
    recreateApplication?: boolean;
    /**
     * The policy used for monitoring the application upgrade
     */
    rollingUpgradeMonitoringPolicy?: outputs.servicefabric.v20210701preview.RollingUpgradeMonitoringPolicyResponse;
    /**
     * The mode used to monitor health during a rolling upgrade. The values are Monitored, and UnmonitoredAuto.
     */
    upgradeMode?: string;
    /**
     * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
     */
    upgradeReplicaSetCheckTimeout?: number;
}

export interface ApplicationUserAssignedIdentityResponse {
    /**
     * The friendly name of user assigned identity.
     */
    name: string;
    /**
     * The principal id of user assigned identity.
     */
    principalId: string;
}

/**
 * Represents a scaling trigger related to an average load of a metric/resource of a partition.
 */
export interface AveragePartitionLoadScalingTriggerResponse {
    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is 'AveragePartitionLoadTrigger'.
     */
    kind: "AveragePartitionLoadTrigger";
    /**
     * The lower limit of the load below which a scale in operation should be performed.
     */
    lowerLoadThreshold: number;
    /**
     * The name of the metric for which usage should be tracked.
     */
    metricName: string;
    /**
     * The period in seconds on which a decision is made whether to scale or not. This property should come in ISO 8601 format "hh:mm:ss".
     */
    scaleInterval: string;
    /**
     * The upper limit of the load beyond which a scale out operation should be performed.
     */
    upperLoadThreshold: number;
}

/**
 * Represents a scaling policy related to an average load of a metric/resource of a service.
 */
export interface AverageServiceLoadScalingTriggerResponse {
    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is 'AverageServiceLoadTrigger'.
     */
    kind: "AverageServiceLoadTrigger";
    /**
     * The lower limit of the load below which a scale in operation should be performed.
     */
    lowerLoadThreshold: number;
    /**
     * The name of the metric for which usage should be tracked.
     */
    metricName: string;
    /**
     * The period in seconds on which a decision is made whether to scale or not. This property should come in ISO 8601 format "hh:mm:ss".
     */
    scaleInterval: string;
    /**
     * The upper limit of the load beyond which a scale out operation should be performed.
     */
    upperLoadThreshold: number;
    /**
     * Flag determines whether only the load of primary replica should be considered for scaling. If set to true, then trigger will only consider the load of primary replicas of stateful service. If set to false, trigger will consider load of all replicas. This parameter cannot be set to true for stateless service.
     */
    useOnlyPrimaryLoad: boolean;
}

/**
 * The settings to enable AAD authentication on the cluster.
 */
export interface AzureActiveDirectoryResponse {
    /**
     * Azure active directory client application id.
     */
    clientApplication?: string;
    /**
     * Azure active directory cluster application id.
     */
    clusterApplication?: string;
    /**
     * Azure active directory tenant id.
     */
    tenantId?: string;
}

/**
 * Client certificate definition.
 */
export interface ClientCertificateResponse {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
     */
    isAdmin: boolean;
    /**
     * Issuer thumbprint for the certificate. Only used together with CommonName.
     */
    issuerThumbprint?: string;
    /**
     * Certificate thumbprint.
     */
    thumbprint?: string;
}

/**
 * Port range details
 */
export interface EndpointRangeDescriptionResponse {
    /**
     * End port of a range of ports
     */
    endPort: number;
    /**
     * Starting port of a range of ports
     */
    startPort: number;
}

/**
 * Describes the frontend configurations for the node type.
 */
export interface FrontendConfigurationResponse {
    /**
     * The IP address type of this frontend configuration. If omitted the default value is IPv4.
     */
    ipAddressType?: string;
    /**
     * The resource Id of the Load Balancer backend address pool that the VM instances of the node type are associated with. The format of the resource Id is '/subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/loadBalancers/<loadBalancerName>/backendAddressPools/<backendAddressPoolName>'.
     */
    loadBalancerBackendAddressPoolId?: string;
    /**
     * The resource Id of the Load Balancer inbound NAT pool that the VM instances of the node type are associated with. The format of the resource Id is '/subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/loadBalancers/<loadBalancerName>/inboundNatPools/<inboundNatPoolName>'.
     */
    loadBalancerInboundNatPoolId?: string;
}

/**
 * IPTag associated with the object.
 */
export interface IPTagResponse {
    /**
     * The IP tag type.
     */
    ipTagType: string;
    /**
     * The value of the IP tag.
     */
    tag: string;
}

/**
 * Describes a load balancing rule.
 */
export interface LoadBalancingRuleResponse {
    /**
     * The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
     */
    backendPort: number;
    /**
     * The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 1 and 65534.
     */
    frontendPort: number;
    /**
     * The prob port used by the load balancing rule. Acceptable values are between 1 and 65535.
     */
    probePort?: number;
    /**
     * the reference to the load balancer probe used by the load balancing rule.
     */
    probeProtocol: string;
    /**
     * The probe request path. Only supported for HTTP/HTTPS probes.
     */
    probeRequestPath?: string;
    /**
     * The reference to the transport protocol used by the load balancing rule.
     */
    protocol: string;
}

/**
 * Describes the managed identities for an Azure resource.
 */
export interface ManagedIdentityResponse {
    /**
     * The principal id of the managed identity. This property will only be provided for a system assigned identity.
     */
    principalId: string;
    /**
     * The tenant id of the managed identity. This property will only be provided for a system assigned identity.
     */
    tenantId: string;
    /**
     * The type of managed identity for the resource.
     */
    type?: string;
    /**
     * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     */
    userAssignedIdentities?: {[key: string]: outputs.servicefabric.v20210701preview.UserAssignedIdentityResponse};
}

/**
 * Describes the named partition scheme of the service.
 */
export interface NamedPartitionSchemeResponse {
    /**
     * Array for the names of the partitions.
     */
    names: string[];
    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is 'Named'.
     */
    partitionScheme: "Named";
}

/**
 * Describes a network security rule.
 */
export interface NetworkSecurityRuleResponse {
    /**
     * The network traffic is allowed or denied.
     */
    access: string;
    /**
     * Network security rule description.
     */
    description?: string;
    /**
     * The destination address prefixes. CIDR or destination IP ranges.
     */
    destinationAddressPrefixes?: string[];
    /**
     * The destination port ranges.
     */
    destinationPortRanges?: string[];
    /**
     * Network security rule direction.
     */
    direction: string;
    /**
     * Network security rule name.
     */
    name: string;
    /**
     * The priority of the rule. The value can be in the range 1000 to 3000. Values outside this range are reserved for Service Fabric ManagerCluster Resource Provider. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
     */
    priority: number;
    /**
     * Network protocol this rule applies to.
     */
    protocol: string;
    /**
     * The CIDR or source IP ranges.
     */
    sourceAddressPrefixes?: string[];
    /**
     * The source port ranges.
     */
    sourcePortRanges?: string[];
}

/**
 * Describes a node type sku.
 */
export interface NodeTypeSkuResponse {
    /**
     * The number of nodes in the node type.<br /><br />If present in request it will override properties.vmInstanceCount.
     */
    capacity: number;
    /**
     * The sku name. <br /><br />Name is internally generated and is used in auto-scale scenarios.<br /> Property does not allow to be changed to other values than generated.<br /> To avoid deployment errors please omit the property.
     */
    name?: string;
    /**
     * Specifies the tier of the node type. <br /><br /> Possible Values:<br /> **Standard**
     */
    tier?: string;
}

/**
 * Represents a scaling mechanism for adding or removing instances of stateless service partition.
 */
export interface PartitionInstanceCountScaleMechanismResponse {
    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is 'ScalePartitionInstanceCount'.
     */
    kind: "ScalePartitionInstanceCount";
    /**
     * Maximum number of instances of the partition.
     */
    maxInstanceCount: number;
    /**
     * Minimum number of instances of the partition.
     */
    minInstanceCount: number;
    /**
     * The number of instances to add or remove during a scaling operation.
     */
    scaleIncrement: number;
}

/**
 * The policy used for monitoring the application upgrade
 */
export interface RollingUpgradeMonitoringPolicyResponse {
    /**
     * The compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations. Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back automatically. Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode.
     */
    failureAction: string;
    /**
     * The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff".
     */
    healthCheckRetryTimeout: string;
    /**
     * The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff".
     */
    healthCheckStableDuration: string;
    /**
     * The amount of time to wait after completing an upgrade domain before applying health policies. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff".
     */
    healthCheckWaitDuration: string;
    /**
     * The amount of time each upgrade domain has to complete before FailureAction is executed. Cannot be larger than 12 hours. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff".
     */
    upgradeDomainTimeout: string;
    /**
     * The amount of time the overall upgrade has to complete before FailureAction is executed. Cannot be larger than 12 hours. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff".
     */
    upgradeTimeout: string;
}

/**
 * Specifies a metric to load balance a service during runtime.
 */
export interface ScalingPolicyResponse {
    /**
     * Specifies the mechanism associated with this scaling policy
     */
    scalingMechanism: outputs.servicefabric.v20210701preview.AddRemoveIncrementalNamedPartitionScalingMechanismResponse | outputs.servicefabric.v20210701preview.PartitionInstanceCountScaleMechanismResponse;
    /**
     * Specifies the trigger associated with this scaling policy.
     */
    scalingTrigger: outputs.servicefabric.v20210701preview.AveragePartitionLoadScalingTriggerResponse | outputs.servicefabric.v20210701preview.AverageServiceLoadScalingTriggerResponse;
}

/**
 * Creates a particular correlation between services.
 */
export interface ServiceCorrelationResponse {
    /**
     * The ServiceCorrelationScheme which describes the relationship between this service and the service specified via ServiceName.
     */
    scheme: string;
    /**
     * The Arm Resource ID of the service that the correlation relationship is established with.
     */
    serviceName: string;
}

/**
 * Specifies a metric to load balance a service during runtime.
 */
export interface ServiceLoadMetricResponse {
    /**
     * Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric.
     */
    defaultLoad?: number;
    /**
     * The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive.
     */
    name: string;
    /**
     * Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica.
     */
    primaryDefaultLoad?: number;
    /**
     * Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica.
     */
    secondaryDefaultLoad?: number;
    /**
     * The service load metric relative weight, compared to other metrics configured for this service, as a number.
     */
    weight?: string;
}

/**
 * Describes the policy to be used for placement of a Service Fabric service where a particular fault or upgrade domain should not be used for placement of the instances or replicas of that service.
 */
export interface ServicePlacementInvalidDomainPolicyResponse {
    /**
     * The name of the domain that should not be used for placement.
     */
    domainName: string;
    /**
     * The type of placement policy for a service fabric service. Following are the possible values.
     * Expected value is 'InvalidDomain'.
     */
    type: "InvalidDomain";
}

/**
 * The name of the domain that should used for placement as per this policy.
 */
export interface ServicePlacementNonPartiallyPlaceServicePolicyResponse {
    /**
     * The type of placement policy for a service fabric service. Following are the possible values.
     * Expected value is 'NonPartiallyPlaceService'.
     */
    type: "NonPartiallyPlaceService";
}

/**
 * Describes the policy to be used for placement of a Service Fabric service where the service's 
 * Primary replicas should optimally be placed in a particular domain.
 *
 * This placement policy is usually used with fault domains in scenarios where the Service Fabric
 * cluster is geographically distributed in order to indicate that a service's primary replica should
 * be located in a particular fault domain, which in geo-distributed scenarios usually aligns with regional
 * or datacenter boundaries. Note that since this is an optimization it is possible that the Primary replica
 * may not end up located in this domain due to failures, capacity limits, or other constraints.
 */
export interface ServicePlacementPreferPrimaryDomainPolicyResponse {
    /**
     * The name of the domain that should used for placement as per this policy.
     */
    domainName: string;
    /**
     * The type of placement policy for a service fabric service. Following are the possible values.
     * Expected value is 'PreferredPrimaryDomain'.
     */
    type: "PreferredPrimaryDomain";
}

/**
 * Describes the policy to be used for placement of a Service Fabric service where two replicas
 * from the same partition should never be placed in the same fault or upgrade domain.
 *
 * While this is not common it can expose the service to an increased risk of concurrent failures
 * due to unplanned outages or other cases of subsequent/concurrent failures. As an example, consider
 * a case where replicas are deployed across different data center, with one replica per location.
 * In the event that one of the datacenters goes offline, normally the replica that was placed in that
 * datacenter will be packed into one of the remaining datacenters. If this is not desirable then this
 * policy should be set.
 */
export interface ServicePlacementRequireDomainDistributionPolicyResponse {
    /**
     * The name of the domain that should used for placement as per this policy.
     */
    domainName: string;
    /**
     * The type of placement policy for a service fabric service. Following are the possible values.
     * Expected value is 'RequiredDomainDistribution'.
     */
    type: "RequiredDomainDistribution";
}

/**
 * Describes the policy to be used for placement of a Service Fabric service where the instances or replicas of that service must be placed in a particular domain.
 */
export interface ServicePlacementRequiredDomainPolicyResponse {
    /**
     * The name of the domain that should used for placement as per this policy.
     */
    domainName: string;
    /**
     * The type of placement policy for a service fabric service. Following are the possible values.
     * Expected value is 'RequiredDomain'.
     */
    type: "RequiredDomain";
}

/**
 * Represents the health policy used to evaluate the health of services belonging to a service type.
 */
export interface ServiceTypeHealthPolicyResponse {
    /**
     * The maximum allowed percentage of unhealthy partitions per service.
     *
     * The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service is considered in error.
     * If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions in the service.
     * The computation rounds up to tolerate one failure on small numbers of partitions.
     */
    maxPercentUnhealthyPartitionsPerService: number;
    /**
     * The maximum allowed percentage of unhealthy replicas per partition.
     *
     * The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition is considered in error.
     * If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in the partition.
     * The computation rounds up to tolerate one failure on small numbers of replicas.
     */
    maxPercentUnhealthyReplicasPerPartition: number;
    /**
     * The maximum allowed percentage of unhealthy services.
     *
     * The percentage represents the maximum tolerated percentage of services that can be unhealthy before the application is considered in error.
     * If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy services of the specific service type over the total number of services of the specific service type.
     * The computation rounds up to tolerate one failure on small numbers of services.
     */
    maxPercentUnhealthyServices: number;
}

/**
 * Describes a parameter in fabric settings of the cluster.
 */
export interface SettingsParameterDescriptionResponse {
    /**
     * The parameter name of fabric setting.
     */
    name: string;
    /**
     * The parameter value of fabric setting.
     */
    value: string;
}

/**
 * Describes a section in the fabric settings of the cluster.
 */
export interface SettingsSectionDescriptionResponse {
    /**
     * The section name of the fabric settings.
     */
    name: string;
    /**
     * The collection of parameters in the section.
     */
    parameters: outputs.servicefabric.v20210701preview.SettingsParameterDescriptionResponse[];
}

/**
 * Describes the partition scheme of a singleton-partitioned, or non-partitioned service.
 */
export interface SingletonPartitionSchemeResponse {
    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is 'Singleton'.
     */
    partitionScheme: "Singleton";
}

/**
 * Service Fabric managed cluster Sku definition
 */
export interface SkuResponse {
    /**
     * Sku Name.
     */
    name: string;
}

/**
 * The properties of a stateful service resource.
 */
export interface StatefulServicePropertiesResponse {
    /**
     * A list that describes the correlation of the service with other services.
     */
    correlationScheme?: outputs.servicefabric.v20210701preview.ServiceCorrelationResponse[];
    /**
     * Specifies the move cost for the service.
     */
    defaultMoveCost?: string;
    /**
     * A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false.
     */
    hasPersistedState?: boolean;
    /**
     * The minimum replica set size as a number.
     */
    minReplicaSetSize?: number;
    /**
     * Describes how the service is partitioned.
     */
    partitionDescription: outputs.servicefabric.v20210701preview.NamedPartitionSchemeResponse | outputs.servicefabric.v20210701preview.SingletonPartitionSchemeResponse | outputs.servicefabric.v20210701preview.UniformInt64RangePartitionSchemeResponse;
    /**
     * The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
     */
    placementConstraints?: string;
    /**
     * The current deployment or provisioning state, which only appears in the response
     */
    provisioningState: string;
    /**
     * The maximum duration for which a partition is allowed to be in a state of quorum loss, represented in ISO 8601 format "hh:mm:ss".
     */
    quorumLossWaitDuration?: string;
    /**
     * The duration between when a replica goes down and when a new replica is created, represented in ISO 8601 format "hh:mm:ss".
     */
    replicaRestartWaitDuration?: string;
    /**
     * Scaling policies for this service.
     */
    scalingPolicies?: outputs.servicefabric.v20210701preview.ScalingPolicyResponse[];
    /**
     * The kind of service (Stateless or Stateful).
     * Expected value is 'Stateful'.
     */
    serviceKind: "Stateful";
    /**
     * The service load metrics is given as an array of ServiceLoadMetric objects.
     */
    serviceLoadMetrics?: outputs.servicefabric.v20210701preview.ServiceLoadMetricResponse[];
    /**
     * The activation Mode of the service package
     */
    servicePackageActivationMode?: string;
    /**
     * A list that describes the correlation of the service with other services.
     */
    servicePlacementPolicies?: (outputs.servicefabric.v20210701preview.ServicePlacementInvalidDomainPolicyResponse | outputs.servicefabric.v20210701preview.ServicePlacementNonPartiallyPlaceServicePolicyResponse | outputs.servicefabric.v20210701preview.ServicePlacementPreferPrimaryDomainPolicyResponse | outputs.servicefabric.v20210701preview.ServicePlacementRequireDomainDistributionPolicyResponse | outputs.servicefabric.v20210701preview.ServicePlacementRequiredDomainPolicyResponse)[];
    /**
     * The duration for which replicas can stay InBuild before reporting that build is stuck, represented in ISO 8601 format "hh:mm:ss".
     */
    servicePlacementTimeLimit?: string;
    /**
     * The name of the service type
     */
    serviceTypeName: string;
    /**
     * The definition on how long StandBy replicas should be maintained before being removed, represented in ISO 8601 format "hh:mm:ss".
     */
    standByReplicaKeepDuration?: string;
    /**
     * The target replica set size as a number.
     */
    targetReplicaSetSize?: number;
}

/**
 * The properties of a stateless service resource.
 */
export interface StatelessServicePropertiesResponse {
    /**
     * A list that describes the correlation of the service with other services.
     */
    correlationScheme?: outputs.servicefabric.v20210701preview.ServiceCorrelationResponse[];
    /**
     * Specifies the move cost for the service.
     */
    defaultMoveCost?: string;
    /**
     * The instance count.
     */
    instanceCount: number;
    /**
     * MinInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
     */
    minInstanceCount?: number;
    /**
     * MinInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
     */
    minInstancePercentage?: number;
    /**
     * Describes how the service is partitioned.
     */
    partitionDescription: outputs.servicefabric.v20210701preview.NamedPartitionSchemeResponse | outputs.servicefabric.v20210701preview.SingletonPartitionSchemeResponse | outputs.servicefabric.v20210701preview.UniformInt64RangePartitionSchemeResponse;
    /**
     * The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
     */
    placementConstraints?: string;
    /**
     * The current deployment or provisioning state, which only appears in the response
     */
    provisioningState: string;
    /**
     * Scaling policies for this service.
     */
    scalingPolicies?: outputs.servicefabric.v20210701preview.ScalingPolicyResponse[];
    /**
     * The kind of service (Stateless or Stateful).
     * Expected value is 'Stateless'.
     */
    serviceKind: "Stateless";
    /**
     * The service load metrics is given as an array of ServiceLoadMetric objects.
     */
    serviceLoadMetrics?: outputs.servicefabric.v20210701preview.ServiceLoadMetricResponse[];
    /**
     * The activation Mode of the service package
     */
    servicePackageActivationMode?: string;
    /**
     * A list that describes the correlation of the service with other services.
     */
    servicePlacementPolicies?: (outputs.servicefabric.v20210701preview.ServicePlacementInvalidDomainPolicyResponse | outputs.servicefabric.v20210701preview.ServicePlacementNonPartiallyPlaceServicePolicyResponse | outputs.servicefabric.v20210701preview.ServicePlacementPreferPrimaryDomainPolicyResponse | outputs.servicefabric.v20210701preview.ServicePlacementRequireDomainDistributionPolicyResponse | outputs.servicefabric.v20210701preview.ServicePlacementRequiredDomainPolicyResponse)[];
    /**
     * The name of the service type
     */
    serviceTypeName: string;
}

/**
 * Azure resource identifier.
 */
export interface SubResourceResponse {
    /**
     * Azure resource identifier.
     */
    id?: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC).
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Describes a partitioning scheme where an integer range is allocated evenly across a number of partitions.
 */
export interface UniformInt64RangePartitionSchemeResponse {
    /**
     * The number of partitions.
     */
    count: number;
    /**
     * The upper bound of the partition key range that
     * should be split between the partition ‘Count’
     */
    highKey: number;
    /**
     * The lower bound of the partition key range that
     * should be split between the partition ‘Count’
     */
    lowKey: number;
    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is 'UniformInt64Range'.
     */
    partitionScheme: "UniformInt64Range";
}

export interface UserAssignedIdentityResponse {
    /**
     * The client id of user assigned identity.
     */
    clientId: string;
    /**
     * The principal id of user assigned identity.
     */
    principalId: string;
}

/**
 * Specifies set of extensions that should be installed onto the virtual machines.
 */
export interface VMSSExtensionResponse {
    /**
     * Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
     */
    autoUpgradeMinorVersion?: boolean;
    /**
     * If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
     */
    forceUpdateTag?: string;
    /**
     * The name of the extension.
     */
    name: string;
    /**
     * The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
     */
    protectedSettings?: any;
    /**
     * Collection of extension names after which this extension needs to be provisioned.
     */
    provisionAfterExtensions?: string[];
    /**
     * The provisioning state, which only appears in the response.
     */
    provisioningState: string;
    /**
     * The name of the extension handler publisher.
     */
    publisher: string;
    /**
     * Json formatted public settings for the extension.
     */
    settings?: any;
    /**
     * Specifies the type of the extension; an example is "CustomScriptExtension".
     */
    type: string;
    /**
     * Specifies the version of the script handler.
     */
    typeHandlerVersion: string;
}

/**
 * Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
 */
export interface VaultCertificateResponse {
    /**
     * For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. <br><br>For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name <UppercaseThumbprint>.crt for the X509 certificate file and <UppercaseThumbprint>.prv for private key. Both of these files are .pem formatted.
     */
    certificateStore: string;
    /**
     * This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>}
     */
    certificateUrl: string;
}

/**
 * Specifies set of certificates that should be installed onto the virtual machines.
 */
export interface VaultSecretGroupResponse {
    /**
     * The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
     */
    sourceVault: outputs.servicefabric.v20210701preview.SubResourceResponse;
    /**
     * The list of key vault references in SourceVault which contain certificates.
     */
    vaultCertificates: outputs.servicefabric.v20210701preview.VaultCertificateResponse[];
}

/**
 * Identities for the virtual machine scale set under the node type.
 */
export interface VmManagedIdentityResponse {
    /**
     * The list of user identities associated with the virtual machine scale set under the node type. Each entry will be an ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     */
    userAssignedIdentities?: string[];
}

