// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Properties of a time series database connection to Azure Data Explorer with data being sent via an EventHub.
 */
export interface AzureDataExplorerConnectionPropertiesResponse {
    /**
     * The name of the Azure Data Explorer database.
     */
    adxDatabaseName: string;
    /**
     * The URI of the Azure Data Explorer endpoint.
     */
    adxEndpointUri: string;
    /**
     * The resource ID of the Azure Data Explorer cluster.
     */
    adxResourceId: string;
    /**
     * The name of the Azure Data Explorer table. Defaults to AdtPropertyEvents.
     */
    adxTableName?: string;
    /**
     * The type of time series connection resource.
     * Expected value is 'AzureDataExplorer'.
     */
    connectionType: "AzureDataExplorer";
    /**
     * The EventHub consumer group to use when ADX reads from EventHub. Defaults to $Default.
     */
    eventHubConsumerGroup?: string;
    /**
     * The URL of the EventHub namespace for identity-based authentication. It must include the protocol sb://
     */
    eventHubEndpointUri: string;
    /**
     * The EventHub name in the EventHub namespace for identity-based authentication.
     */
    eventHubEntityPath: string;
    /**
     * The resource ID of the EventHub namespace.
     */
    eventHubNamespaceResourceId: string;
    /**
     * The provisioning state.
     */
    provisioningState: string;
}
/**
 * azureDataExplorerConnectionPropertiesResponseProvideDefaults sets the appropriate defaults for AzureDataExplorerConnectionPropertiesResponse
 */
export function azureDataExplorerConnectionPropertiesResponseProvideDefaults(val: AzureDataExplorerConnectionPropertiesResponse): AzureDataExplorerConnectionPropertiesResponse {
    return {
        ...val,
        adxTableName: (val.adxTableName) ?? "AdtPropertyEvents",
        eventHubConsumerGroup: (val.eventHubConsumerGroup) ?? "$Default",
    };
}

/**
 * The properties of a private endpoint connection.
 */
export interface ConnectionPropertiesResponse {
    /**
     * The list of group ids for the private endpoint connection.
     */
    groupIds?: string[];
    /**
     * The private endpoint.
     */
    privateEndpoint?: outputs.digitaltwins.v20220531.PrivateEndpointResponse;
    /**
     * The connection state.
     */
    privateLinkServiceConnectionState?: outputs.digitaltwins.v20220531.ConnectionPropertiesResponsePrivateLinkServiceConnectionState;
    /**
     * The provisioning state.
     */
    provisioningState: string;
}

/**
 * The connection state.
 */
export interface ConnectionPropertiesResponsePrivateLinkServiceConnectionState {
    /**
     * Actions required for a private endpoint connection.
     */
    actionsRequired?: string;
    /**
     * The description for the current state of a private endpoint connection.
     */
    description: string;
    /**
     * The status of a private endpoint connection.
     */
    status: string;
}

/**
 * The managed identity for the DigitalTwinsInstance.
 */
export interface DigitalTwinsIdentityResponse {
    /**
     * The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
     */
    principalId: string;
    /**
     * The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
     */
    tenantId: string;
    /**
     * The type of Managed Identity used by the DigitalTwinsInstance. Only SystemAssigned is supported.
     */
    type?: string;
}

/**
 * Properties related to EventGrid.
 */
export interface EventGridResponse {
    /**
     * EventGrid secondary accesskey. Will be obfuscated during read.
     */
    accessKey1: string;
    /**
     * EventGrid secondary accesskey. Will be obfuscated during read.
     */
    accessKey2?: string;
    /**
     * Specifies the authentication type being used for connecting to the endpoint. Defaults to 'KeyBased'. If 'KeyBased' is selected, a connection string must be specified (at least the primary connection string). If 'IdentityBased' is select, the endpointUri and entityPath properties must be specified.
     */
    authenticationType?: string;
    /**
     * Time when the Endpoint was added to DigitalTwinsInstance.
     */
    createdTime: string;
    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     */
    deadLetterSecret?: string;
    /**
     * Dead letter storage URL for identity-based authentication.
     */
    deadLetterUri?: string;
    /**
     * The type of Digital Twins endpoint
     * Expected value is 'EventGrid'.
     */
    endpointType: "EventGrid";
    /**
     * The provisioning state.
     */
    provisioningState: string;
    /**
     * EventGrid Topic Endpoint.
     */
    topicEndpoint: string;
}

/**
 * Properties related to EventHub.
 */
export interface EventHubResponse {
    /**
     * Specifies the authentication type being used for connecting to the endpoint. Defaults to 'KeyBased'. If 'KeyBased' is selected, a connection string must be specified (at least the primary connection string). If 'IdentityBased' is select, the endpointUri and entityPath properties must be specified.
     */
    authenticationType?: string;
    /**
     * PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     */
    connectionStringPrimaryKey?: string;
    /**
     * SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     */
    connectionStringSecondaryKey?: string;
    /**
     * Time when the Endpoint was added to DigitalTwinsInstance.
     */
    createdTime: string;
    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     */
    deadLetterSecret?: string;
    /**
     * Dead letter storage URL for identity-based authentication.
     */
    deadLetterUri?: string;
    /**
     * The type of Digital Twins endpoint
     * Expected value is 'EventHub'.
     */
    endpointType: "EventHub";
    /**
     * The URL of the EventHub namespace for identity-based authentication. It must include the protocol 'sb://'.
     */
    endpointUri?: string;
    /**
     * The EventHub name in the EventHub namespace for identity-based authentication.
     */
    entityPath?: string;
    /**
     * The provisioning state.
     */
    provisioningState: string;
}

/**
 * The private endpoint connection of a Digital Twin.
 */
export interface PrivateEndpointConnectionResponse {
    /**
     * The resource identifier.
     */
    id: string;
    /**
     * The resource name.
     */
    name: string;
    /**
     * The connection properties.
     */
    properties: outputs.digitaltwins.v20220531.ConnectionPropertiesResponse;
    /**
     * Metadata pertaining to creation and last modification of the private endpoint connection.
     */
    systemData: outputs.digitaltwins.v20220531.SystemDataResponse;
    /**
     * The resource type.
     */
    type: string;
}

/**
 * The private endpoint property of a private endpoint connection.
 */
export interface PrivateEndpointResponse {
    /**
     * The resource identifier.
     */
    id: string;
}

/**
 * Properties related to ServiceBus.
 */
export interface ServiceBusResponse {
    /**
     * Specifies the authentication type being used for connecting to the endpoint. Defaults to 'KeyBased'. If 'KeyBased' is selected, a connection string must be specified (at least the primary connection string). If 'IdentityBased' is select, the endpointUri and entityPath properties must be specified.
     */
    authenticationType?: string;
    /**
     * Time when the Endpoint was added to DigitalTwinsInstance.
     */
    createdTime: string;
    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     */
    deadLetterSecret?: string;
    /**
     * Dead letter storage URL for identity-based authentication.
     */
    deadLetterUri?: string;
    /**
     * The type of Digital Twins endpoint
     * Expected value is 'ServiceBus'.
     */
    endpointType: "ServiceBus";
    /**
     * The URL of the ServiceBus namespace for identity-based authentication. It must include the protocol 'sb://'.
     */
    endpointUri?: string;
    /**
     * The ServiceBus Topic name for identity-based authentication.
     */
    entityPath?: string;
    /**
     * PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     */
    primaryConnectionString?: string;
    /**
     * The provisioning state.
     */
    provisioningState: string;
    /**
     * SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     */
    secondaryConnectionString?: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

