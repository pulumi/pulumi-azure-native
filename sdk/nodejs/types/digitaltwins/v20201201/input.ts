// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

export interface ConnectionPropertiesPrivateLinkServiceConnectionStateArgs {
    /**
     * Actions required for a private endpoint connection.
     */
    actionsRequired?: pulumi.Input<string>;
    /**
     * The description for the current state of a private endpoint connection.
     */
    description: pulumi.Input<string>;
    /**
     * The status of a private endpoint connection.
     */
    status: pulumi.Input<string | enums.digitaltwins.v20201201.PrivateLinkServiceConnectionStatus>;
}

/**
 * The managed identity for the DigitalTwinsInstance.
 */
export interface DigitalTwinsIdentityArgs {
    /**
     * The type of Managed Identity used by the DigitalTwinsInstance. Only SystemAssigned is supported.
     */
    type?: pulumi.Input<string | enums.digitaltwins.v20201201.DigitalTwinsIdentityType>;
}

/**
 * Properties related to EventGrid.
 */
export interface EventGridArgs {
    /**
     * EventGrid secondary accesskey. Will be obfuscated during read.
     */
    accessKey1: pulumi.Input<string>;
    /**
     * EventGrid secondary accesskey. Will be obfuscated during read.
     */
    accessKey2?: pulumi.Input<string>;
    /**
     * Specifies the authentication type being used for connecting to the endpoint.
     */
    authenticationType?: pulumi.Input<string | enums.digitaltwins.v20201201.AuthenticationType>;
    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     */
    deadLetterSecret?: pulumi.Input<string>;
    /**
     * Dead letter storage URL for identity-based authentication.
     */
    deadLetterUri?: pulumi.Input<string>;
    /**
     * The type of Digital Twins endpoint
     * Expected value is 'EventGrid'.
     */
    endpointType: pulumi.Input<"EventGrid">;
    /**
     * EventGrid Topic Endpoint
     */
    topicEndpoint: pulumi.Input<string>;
}

/**
 * Properties related to EventHub.
 */
export interface EventHubArgs {
    /**
     * Specifies the authentication type being used for connecting to the endpoint.
     */
    authenticationType?: pulumi.Input<string | enums.digitaltwins.v20201201.AuthenticationType>;
    /**
     * PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     */
    connectionStringPrimaryKey?: pulumi.Input<string>;
    /**
     * SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     */
    connectionStringSecondaryKey?: pulumi.Input<string>;
    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     */
    deadLetterSecret?: pulumi.Input<string>;
    /**
     * Dead letter storage URL for identity-based authentication.
     */
    deadLetterUri?: pulumi.Input<string>;
    /**
     * The type of Digital Twins endpoint
     * Expected value is 'EventHub'.
     */
    endpointType: pulumi.Input<"EventHub">;
    /**
     * The URL of the EventHub namespace for identity-based authentication. It must include the protocol sb://
     */
    endpointUri?: pulumi.Input<string>;
    /**
     * The EventHub name in the EventHub namespace for identity-based authentication.
     */
    entityPath?: pulumi.Input<string>;
}

/**
 * The private endpoint connection of a Digital Twin.
 */
export interface PrivateEndpointConnectionArgs {
    properties: pulumi.Input<inputs.digitaltwins.v20201201.PrivateEndpointConnectionPropertiesArgs>;
}

export interface PrivateEndpointConnectionPropertiesArgs {
    /**
     * The list of group ids for the private endpoint connection.
     */
    groupIds?: pulumi.Input<pulumi.Input<string>[]>;
    privateLinkServiceConnectionState?: pulumi.Input<inputs.digitaltwins.v20201201.ConnectionPropertiesPrivateLinkServiceConnectionStateArgs>;
}

/**
 * Properties related to ServiceBus.
 */
export interface ServiceBusArgs {
    /**
     * Specifies the authentication type being used for connecting to the endpoint.
     */
    authenticationType?: pulumi.Input<string | enums.digitaltwins.v20201201.AuthenticationType>;
    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     */
    deadLetterSecret?: pulumi.Input<string>;
    /**
     * Dead letter storage URL for identity-based authentication.
     */
    deadLetterUri?: pulumi.Input<string>;
    /**
     * The type of Digital Twins endpoint
     * Expected value is 'ServiceBus'.
     */
    endpointType: pulumi.Input<"ServiceBus">;
    /**
     * The URL of the ServiceBus namespace for identity-based authentication. It must include the protocol sb://
     */
    endpointUri?: pulumi.Input<string>;
    /**
     * The ServiceBus Topic name for identity-based authentication
     */
    entityPath?: pulumi.Input<string>;
    /**
     * PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     */
    primaryConnectionString?: pulumi.Input<string>;
    /**
     * SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     */
    secondaryConnectionString?: pulumi.Input<string>;
}

