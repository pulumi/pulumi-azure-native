// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

export interface ConnectionPropertiesResponsePrivateEndpoint {
    /**
     * The resource identifier.
     */
    id: string;
}

export interface ConnectionPropertiesResponsePrivateLinkServiceConnectionState {
    /**
     * Actions required for a private endpoint connection.
     */
    actionsRequired?: string;
    /**
     * The description for the current state of a private endpoint connection.
     */
    description: string;
    /**
     * The status of a private endpoint connection.
     */
    status: string;
}

/**
 * The managed identity for the DigitalTwinsInstance.
 */
export interface DigitalTwinsIdentityResponse {
    /**
     * The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
     */
    principalId: string;
    /**
     * The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
     */
    tenantId: string;
    /**
     * The type of Managed Identity used by the DigitalTwinsInstance. Only SystemAssigned is supported.
     */
    type?: string;
}

/**
 * Properties related to EventGrid.
 */
export interface EventGridResponse {
    /**
     * EventGrid secondary accesskey. Will be obfuscated during read.
     */
    accessKey1: string;
    /**
     * EventGrid secondary accesskey. Will be obfuscated during read.
     */
    accessKey2?: string;
    /**
     * Specifies the authentication type being used for connecting to the endpoint.
     */
    authenticationType?: string;
    /**
     * Time when the Endpoint was added to DigitalTwinsInstance.
     */
    createdTime: string;
    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     */
    deadLetterSecret?: string;
    /**
     * Dead letter storage URL for identity-based authentication.
     */
    deadLetterUri?: string;
    /**
     * The type of Digital Twins endpoint
     * Expected value is 'EventGrid'.
     */
    endpointType: "EventGrid";
    /**
     * The provisioning state.
     */
    provisioningState: string;
    /**
     * EventGrid Topic Endpoint
     */
    topicEndpoint: string;
}

/**
 * Properties related to EventHub.
 */
export interface EventHubResponse {
    /**
     * Specifies the authentication type being used for connecting to the endpoint.
     */
    authenticationType?: string;
    /**
     * PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     */
    connectionStringPrimaryKey?: string;
    /**
     * SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     */
    connectionStringSecondaryKey?: string;
    /**
     * Time when the Endpoint was added to DigitalTwinsInstance.
     */
    createdTime: string;
    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     */
    deadLetterSecret?: string;
    /**
     * Dead letter storage URL for identity-based authentication.
     */
    deadLetterUri?: string;
    /**
     * The type of Digital Twins endpoint
     * Expected value is 'EventHub'.
     */
    endpointType: "EventHub";
    /**
     * The URL of the EventHub namespace for identity-based authentication. It must include the protocol sb://
     */
    endpointUri?: string;
    /**
     * The EventHub name in the EventHub namespace for identity-based authentication.
     */
    entityPath?: string;
    /**
     * The provisioning state.
     */
    provisioningState: string;
}

/**
 * The private endpoint connection of a Digital Twin.
 */
export interface PrivateEndpointConnectionResponse {
    /**
     * The resource identifier.
     */
    id: string;
    /**
     * The resource name.
     */
    name: string;
    properties: outputs.digitaltwins.v20201201.PrivateEndpointConnectionResponseProperties;
    /**
     * The resource type.
     */
    type: string;
}

export interface PrivateEndpointConnectionResponseProperties {
    /**
     * The list of group ids for the private endpoint connection.
     */
    groupIds?: string[];
    privateEndpoint?: outputs.digitaltwins.v20201201.ConnectionPropertiesResponsePrivateEndpoint;
    privateLinkServiceConnectionState?: outputs.digitaltwins.v20201201.ConnectionPropertiesResponsePrivateLinkServiceConnectionState;
    /**
     * The provisioning state.
     */
    provisioningState: string;
}

/**
 * Properties related to ServiceBus.
 */
export interface ServiceBusResponse {
    /**
     * Specifies the authentication type being used for connecting to the endpoint.
     */
    authenticationType?: string;
    /**
     * Time when the Endpoint was added to DigitalTwinsInstance.
     */
    createdTime: string;
    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     */
    deadLetterSecret?: string;
    /**
     * Dead letter storage URL for identity-based authentication.
     */
    deadLetterUri?: string;
    /**
     * The type of Digital Twins endpoint
     * Expected value is 'ServiceBus'.
     */
    endpointType: "ServiceBus";
    /**
     * The URL of the ServiceBus namespace for identity-based authentication. It must include the protocol sb://
     */
    endpointUri?: string;
    /**
     * The ServiceBus Topic name for identity-based authentication
     */
    entityPath?: string;
    /**
     * PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     */
    primaryConnectionString?: string;
    /**
     * The provisioning state.
     */
    provisioningState: string;
    /**
     * SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     */
    secondaryConnectionString?: string;
}

