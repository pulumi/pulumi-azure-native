// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The definition of a query.
 */
export interface ExportDefinitionResponse {
    /**
     * Has definition for data in this query.
     */
    dataSet?: outputs.costmanagement.v20191101.QueryDatasetResponse;
    /**
     * Has time period for pulling data for the query.
     */
    timePeriod?: outputs.costmanagement.v20191101.QueryTimePeriodResponse;
    /**
     * The time frame for pulling data for the query. If custom, then a specific time period must be provided.
     */
    timeframe: string;
    /**
     * The type of the query.
     */
    type: string;
}

/**
 * The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
 */
export interface ExportDeliveryDestinationResponse {
    /**
     * The name of the container where exports will be uploaded.
     */
    container: string;
    /**
     * The resource id of the storage account where exports will be delivered.
     */
    resourceId: string;
    /**
     * The name of the directory where exports will be uploaded.
     */
    rootFolderPath?: string;
}

/**
 * The delivery information associated with a export.
 */
export interface ExportDeliveryInfoResponse {
    /**
     * Has destination for the export being delivered.
     */
    destination: outputs.costmanagement.v20191101.ExportDeliveryDestinationResponse;
}

/**
 * The start and end date for recurrence schedule.
 */
export interface ExportRecurrencePeriodResponse {
    /**
     * The start date of recurrence.
     */
    from: string;
    /**
     * The end date of recurrence.
     */
    to?: string;
}

/**
 * The schedule associated with a export.
 */
export interface ExportScheduleResponse {
    /**
     * The schedule recurrence.
     */
    recurrence: string;
    /**
     * Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
     */
    recurrencePeriod?: outputs.costmanagement.v20191101.ExportRecurrencePeriodResponse;
    /**
     * The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
     */
    status?: string;
}

/**
 * Each KPI must contain a 'type' and 'enabled' key.
 */
export interface KpiPropertiesResponse {
    /**
     * show the KPI in the UI?
     */
    enabled?: boolean;
    /**
     * ID of resource related to metric (budget).
     */
    id?: string;
    /**
     * KPI type (Forecast, Budget).
     */
    type?: string;
}

/**
 * Each pivot must contain a 'type' and 'name'.
 */
export interface PivotPropertiesResponse {
    /**
     * Data field to show in view.
     */
    name?: string;
    /**
     * Data type to show in view.
     */
    type?: string;
}

/**
 * The aggregation expression to be used in the query.
 */
export interface QueryAggregationResponse {
    /**
     * The name of the aggregation function to use.
     */
    function: string;
    /**
     * The name of the column to aggregate.
     */
    name: string;
}

/**
 * The comparison expression to be used in the query.
 */
export interface QueryComparisonExpressionResponse {
    /**
     * The name of the column to use in comparison.
     */
    name: string;
    /**
     * The operator to use for comparison.
     */
    operator: string;
    /**
     * Array of values to use for comparison
     */
    values: string[];
}

/**
 * The configuration of dataset in the query.
 */
export interface QueryDatasetConfigurationResponse {
    /**
     * Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
     */
    columns?: string[];
}

/**
 * The definition of data present in the query.
 */
export interface QueryDatasetResponse {
    /**
     * Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
     */
    aggregation?: {[key: string]: outputs.costmanagement.v20191101.QueryAggregationResponse};
    /**
     * Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
     */
    configuration?: outputs.costmanagement.v20191101.QueryDatasetConfigurationResponse;
    /**
     * The filter expression to use in the query. Please reference our Query API REST documentation for how to properly format the filter.
     */
    filter?: outputs.costmanagement.v20191101.QueryFilterResponse;
    /**
     * The granularity of rows in the query.
     */
    granularity?: string;
    /**
     * Array of group by expression to use in the query. Query can have up to 2 group by clauses.
     */
    grouping?: outputs.costmanagement.v20191101.QueryGroupingResponse[];
}

/**
 * The filter expression to be used in the export.
 */
export interface QueryFilterResponse {
    /**
     * The logical "AND" expression. Must have at least 2 items.
     */
    and?: outputs.costmanagement.v20191101.QueryFilterResponse[];
    /**
     * Has comparison expression for a dimension
     */
    dimensions?: outputs.costmanagement.v20191101.QueryComparisonExpressionResponse;
    /**
     * The logical "OR" expression. Must have at least 2 items.
     */
    or?: outputs.costmanagement.v20191101.QueryFilterResponse[];
    /**
     * Has comparison expression for a tag
     */
    tags?: outputs.costmanagement.v20191101.QueryComparisonExpressionResponse;
}

/**
 * The group by expression to be used in the query.
 */
export interface QueryGroupingResponse {
    /**
     * The name of the column to group.
     */
    name: string;
    /**
     * Has type of the column to group.
     */
    type: string;
}

/**
 * The start and end date for pulling data for the query.
 */
export interface QueryTimePeriodResponse {
    /**
     * The start date to pull data from.
     */
    from: string;
    /**
     * The end date to pull data to.
     */
    to: string;
}

/**
 * The aggregation expression to be used in the report.
 */
export interface ReportConfigAggregationResponse {
    /**
     * The name of the aggregation function to use.
     */
    function: string;
    /**
     * The name of the column to aggregate.
     */
    name: string;
}

/**
 * The comparison expression to be used in the report.
 */
export interface ReportConfigComparisonExpressionResponse {
    /**
     * The name of the column to use in comparison.
     */
    name: string;
    /**
     * The operator to use for comparison.
     */
    operator: string;
    /**
     * Array of values to use for comparison
     */
    values: string[];
}

/**
 * The configuration of dataset in the report.
 */
export interface ReportConfigDatasetConfigurationResponse {
    /**
     * Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
     */
    columns?: string[];
}

/**
 * The definition of data present in the report.
 */
export interface ReportConfigDatasetResponse {
    /**
     * Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
     */
    aggregation?: {[key: string]: outputs.costmanagement.v20191101.ReportConfigAggregationResponse};
    /**
     * Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
     */
    configuration?: outputs.costmanagement.v20191101.ReportConfigDatasetConfigurationResponse;
    /**
     * Has filter expression to use in the report.
     */
    filter?: outputs.costmanagement.v20191101.ReportConfigFilterResponse;
    /**
     * The granularity of rows in the report.
     */
    granularity?: string;
    /**
     * Array of group by expression to use in the report. Report can have up to 2 group by clauses.
     */
    grouping?: outputs.costmanagement.v20191101.ReportConfigGroupingResponse[];
    /**
     * Array of order by expression to use in the report.
     */
    sorting?: outputs.costmanagement.v20191101.ReportConfigSortingResponse[];
}

/**
 * The filter expression to be used in the report.
 */
export interface ReportConfigFilterResponse {
    /**
     * The logical "AND" expression. Must have at least 2 items.
     */
    and?: outputs.costmanagement.v20191101.ReportConfigFilterResponse[];
    /**
     * Has comparison expression for a dimension
     */
    dimensions?: outputs.costmanagement.v20191101.ReportConfigComparisonExpressionResponse;
    /**
     * The logical "OR" expression. Must have at least 2 items.
     */
    or?: outputs.costmanagement.v20191101.ReportConfigFilterResponse[];
    /**
     * Has comparison expression for a tag key
     */
    tagKey?: outputs.costmanagement.v20191101.ReportConfigComparisonExpressionResponse;
    /**
     * Has comparison expression for a tag value
     */
    tagValue?: outputs.costmanagement.v20191101.ReportConfigComparisonExpressionResponse;
    /**
     * Has comparison expression for a tag
     */
    tags?: outputs.costmanagement.v20191101.ReportConfigComparisonExpressionResponse;
}

/**
 * The group by expression to be used in the report.
 */
export interface ReportConfigGroupingResponse {
    /**
     * The name of the column to group. This version supports subscription lowest possible grain.
     */
    name: string;
    /**
     * Has type of the column to group.
     */
    type: string;
}

/**
 * The order by expression to be used in the report.
 */
export interface ReportConfigSortingResponse {
    /**
     * Direction of sort.
     */
    direction?: string;
    /**
     * The name of the column to sort.
     */
    name: string;
}

/**
 * The start and end date for pulling data for the report.
 */
export interface ReportConfigTimePeriodResponse {
    /**
     * The start date to pull data from.
     */
    from: string;
    /**
     * The end date to pull data to.
     */
    to: string;
}

export interface SettingsPropertiesResponseCache {
    /**
     * Indicates the account type. Allowed values include: EA, PAYG, Modern, Internal, Unknown.
     */
    channel: string;
    /**
     * Resource ID used by Resource Manager to uniquely identify the scope.
     */
    id: string;
    /**
     * Display name for the scope.
     */
    name: string;
    /**
     * Resource ID of the parent scope. For instance, subscription's resource ID for a resource group or a management group resource ID for a subscription.
     */
    parent?: string;
    /**
     * Indicates the status of the scope. Status only applies to subscriptions and billing accounts.
     */
    status?: string;
    /**
     * Indicates the type of modern account. Allowed values include: Individual, Enterprise, Partner, Indirect, NotApplicable
     */
    subchannel: string;
}

