// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The aggregation expression to be used in the report.
 */
export interface ReportConfigAggregationResponse {
    /**
     * The name of the aggregation function to use.
     */
    function: string;
    /**
     * The name of the column to aggregate.
     */
    name: string;
}

/**
 * The comparison expression to be used in the report.
 */
export interface ReportConfigComparisonExpressionResponse {
    /**
     * The name of the column to use in comparison.
     */
    name: string;
    /**
     * The operator to use for comparison.
     */
    operator: string;
    /**
     * Array of values to use for comparison
     */
    values: string[];
}

/**
 * The configuration of dataset in the report.
 */
export interface ReportConfigDatasetConfigurationResponse {
    /**
     * Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
     */
    columns?: string[];
}

/**
 * The definition of data present in the report.
 */
export interface ReportConfigDatasetResponse {
    /**
     * Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
     */
    aggregation?: {[key: string]: outputs.costmanagement.v20180531.ReportConfigAggregationResponse};
    /**
     * Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
     */
    configuration?: outputs.costmanagement.v20180531.ReportConfigDatasetConfigurationResponse;
    /**
     * Has filter expression to use in the report.
     */
    filter?: outputs.costmanagement.v20180531.ReportConfigFilterResponse;
    /**
     * The granularity of rows in the report.
     */
    granularity?: string;
    /**
     * Array of group by expression to use in the report. Report can have up to 2 group by clauses.
     */
    grouping?: outputs.costmanagement.v20180531.ReportConfigGroupingResponse[];
}

/**
 * The definition of a report config.
 */
export interface ReportConfigDefinitionResponse {
    /**
     * Has definition for data in this report config.
     */
    dataset?: outputs.costmanagement.v20180531.ReportConfigDatasetResponse;
    /**
     * Has time period for pulling data for the report.
     */
    timePeriod?: outputs.costmanagement.v20180531.ReportConfigTimePeriodResponse;
    /**
     * The time frame for pulling data for the report. If custom, then a specific time period must be provided.
     */
    timeframe: string;
    /**
     * The type of the report.
     */
    type: string;
}

/**
 * The destination information for the delivery of the report.
 */
export interface ReportConfigDeliveryDestinationResponse {
    /**
     * The name of the container where reports will be uploaded.
     */
    container: string;
    /**
     * The resource id of the storage account where reports will be delivered.
     */
    resourceId: string;
    /**
     * The name of the directory where reports will be uploaded.
     */
    rootFolderPath?: string;
}

/**
 * The delivery information associated with a report config.
 */
export interface ReportConfigDeliveryInfoResponse {
    /**
     * Has destination for the report being delivered.
     */
    destination: outputs.costmanagement.v20180531.ReportConfigDeliveryDestinationResponse;
}

/**
 * The filter expression to be used in the report.
 */
export interface ReportConfigFilterResponse {
    /**
     * The logical "AND" expression. Must have at least 2 items.
     */
    and?: outputs.costmanagement.v20180531.ReportConfigFilterResponse[];
    /**
     * Has comparison expression for a dimension
     */
    dimension?: outputs.costmanagement.v20180531.ReportConfigComparisonExpressionResponse;
    /**
     * The logical "NOT" expression.
     */
    not?: outputs.costmanagement.v20180531.ReportConfigFilterResponse;
    /**
     * The logical "OR" expression. Must have at least 2 items.
     */
    or?: outputs.costmanagement.v20180531.ReportConfigFilterResponse[];
    /**
     * Has comparison expression for a tag
     */
    tag?: outputs.costmanagement.v20180531.ReportConfigComparisonExpressionResponse;
}

/**
 * The group by expression to be used in the report.
 */
export interface ReportConfigGroupingResponse {
    /**
     * Has type of the column to group.
     */
    columnType: string;
    /**
     * The name of the column to group.
     */
    name: string;
}

/**
 * The start and end date for recurrence schedule.
 */
export interface ReportConfigRecurrencePeriodResponse {
    /**
     * The start date of recurrence.
     */
    from: string;
    /**
     * The end date of recurrence. If not provided, we default this to 10 years from the start date.
     */
    to?: string;
}

/**
 * The schedule associated with a report config.
 */
export interface ReportConfigScheduleResponse {
    /**
     * The schedule recurrence.
     */
    recurrence: string;
    /**
     * Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
     */
    recurrencePeriod: outputs.costmanagement.v20180531.ReportConfigRecurrencePeriodResponse;
    /**
     * The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
     */
    status?: string;
}

/**
 * The start and end date for pulling data for the report.
 */
export interface ReportConfigTimePeriodResponse {
    /**
     * The start date to pull data from.
     */
    from: string;
    /**
     * The end date to pull data to.
     */
    to: string;
}

