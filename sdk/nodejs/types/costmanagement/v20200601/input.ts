// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The definition for data in the export.
 */
export interface ExportDatasetArgs {
    /**
     * The export dataset configuration.
     */
    configuration?: pulumi.Input<inputs.costmanagement.v20200601.ExportDatasetConfigurationArgs>;
    /**
     * The granularity of rows in the export. Currently only 'Daily' is supported.
     */
    granularity?: pulumi.Input<string | enums.costmanagement.v20200601.GranularityType>;
}

/**
 * The export dataset configuration. Allows columns to be selected for the export. If not provided then the export will include all available columns.
 */
export interface ExportDatasetConfigurationArgs {
    /**
     * Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
     */
    columns?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The definition of an export.
 */
export interface ExportDefinitionArgs {
    /**
     * The definition for data in the export.
     */
    dataSet?: pulumi.Input<inputs.costmanagement.v20200601.ExportDatasetArgs>;
    /**
     * Has time period for pulling data for the export.
     */
    timePeriod?: pulumi.Input<inputs.costmanagement.v20200601.ExportTimePeriodArgs>;
    /**
     * The time frame for pulling data for the export. If custom, then a specific time period must be provided.
     */
    timeframe: pulumi.Input<string | enums.costmanagement.v20200601.TimeframeType>;
    /**
     * The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
     */
    type: pulumi.Input<string | enums.costmanagement.v20200601.ExportType>;
}

/**
 * The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
 */
export interface ExportDeliveryDestinationArgs {
    /**
     * The name of the container where exports will be uploaded.
     */
    container: pulumi.Input<string>;
    /**
     * The resource id of the storage account where exports will be delivered.
     */
    resourceId: pulumi.Input<string>;
    /**
     * The name of the directory where exports will be uploaded.
     */
    rootFolderPath?: pulumi.Input<string>;
}

/**
 * The delivery information associated with a export.
 */
export interface ExportDeliveryInfoArgs {
    /**
     * Has destination for the export being delivered.
     */
    destination: pulumi.Input<inputs.costmanagement.v20200601.ExportDeliveryDestinationArgs>;
}

/**
 * The start and end date for recurrence schedule.
 */
export interface ExportRecurrencePeriodArgs {
    /**
     * The start date of recurrence.
     */
    from: pulumi.Input<string>;
    /**
     * The end date of recurrence.
     */
    to?: pulumi.Input<string>;
}

/**
 * The schedule associated with the export.
 */
export interface ExportScheduleArgs {
    /**
     * The schedule recurrence.
     */
    recurrence?: pulumi.Input<string | enums.costmanagement.v20200601.RecurrenceType>;
    /**
     * Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
     */
    recurrencePeriod?: pulumi.Input<inputs.costmanagement.v20200601.ExportRecurrencePeriodArgs>;
    /**
     * The status of the export's schedule. If 'Inactive', the export's schedule is paused.
     */
    status?: pulumi.Input<string | enums.costmanagement.v20200601.StatusType>;
}

/**
 * The date range for data in the export. This should only be specified with timeFrame set to 'Custom'. The maximum date range is 3 months.
 */
export interface ExportTimePeriodArgs {
    /**
     * The start date for export data.
     */
    from: pulumi.Input<string>;
    /**
     * The end date for export data.
     */
    to: pulumi.Input<string>;
}

/**
 * Each KPI must contain a 'type' and 'enabled' key.
 */
export interface KpiPropertiesArgs {
    /**
     * show the KPI in the UI?
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * ID of resource related to metric (budget).
     */
    id?: pulumi.Input<string>;
    /**
     * KPI type (Forecast, Budget).
     */
    type?: pulumi.Input<string | enums.costmanagement.v20200601.KpiTypeType>;
}

/**
 * Each pivot must contain a 'type' and 'name'.
 */
export interface PivotPropertiesArgs {
    /**
     * Data field to show in view.
     */
    name?: pulumi.Input<string>;
    /**
     * Data type to show in view.
     */
    type?: pulumi.Input<string | enums.costmanagement.v20200601.PivotTypeType>;
}

/**
 * The aggregation expression to be used in the report.
 */
export interface ReportConfigAggregationArgs {
    /**
     * The name of the aggregation function to use.
     */
    function: pulumi.Input<string | enums.costmanagement.v20200601.FunctionType>;
    /**
     * The name of the column to aggregate.
     */
    name: pulumi.Input<string>;
}

/**
 * The comparison expression to be used in the report.
 */
export interface ReportConfigComparisonExpressionArgs {
    /**
     * The name of the column to use in comparison.
     */
    name: pulumi.Input<string>;
    /**
     * The operator to use for comparison.
     */
    operator: pulumi.Input<string | enums.costmanagement.v20200601.OperatorType>;
    /**
     * Array of values to use for comparison
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The definition of data present in the report.
 */
export interface ReportConfigDatasetArgs {
    /**
     * Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
     */
    aggregation?: pulumi.Input<{[key: string]: pulumi.Input<inputs.costmanagement.v20200601.ReportConfigAggregationArgs>}>;
    /**
     * Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
     */
    configuration?: pulumi.Input<inputs.costmanagement.v20200601.ReportConfigDatasetConfigurationArgs>;
    /**
     * Has filter expression to use in the report.
     */
    filter?: pulumi.Input<inputs.costmanagement.v20200601.ReportConfigFilterArgs>;
    /**
     * The granularity of rows in the report.
     */
    granularity?: pulumi.Input<string | enums.costmanagement.v20200601.ReportGranularityType>;
    /**
     * Array of group by expression to use in the report. Report can have up to 2 group by clauses.
     */
    grouping?: pulumi.Input<pulumi.Input<inputs.costmanagement.v20200601.ReportConfigGroupingArgs>[]>;
    /**
     * Array of order by expression to use in the report.
     */
    sorting?: pulumi.Input<pulumi.Input<inputs.costmanagement.v20200601.ReportConfigSortingArgs>[]>;
}

/**
 * The configuration of dataset in the report.
 */
export interface ReportConfigDatasetConfigurationArgs {
    /**
     * Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
     */
    columns?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The filter expression to be used in the report.
 */
export interface ReportConfigFilterArgs {
    /**
     * The logical "AND" expression. Must have at least 2 items.
     */
    and?: pulumi.Input<pulumi.Input<inputs.costmanagement.v20200601.ReportConfigFilterArgs>[]>;
    /**
     * Has comparison expression for a dimension
     */
    dimension?: pulumi.Input<inputs.costmanagement.v20200601.ReportConfigComparisonExpressionArgs>;
    /**
     * The logical "NOT" expression.
     */
    not?: pulumi.Input<inputs.costmanagement.v20200601.ReportConfigFilterArgs>;
    /**
     * The logical "OR" expression. Must have at least 2 items.
     */
    or?: pulumi.Input<pulumi.Input<inputs.costmanagement.v20200601.ReportConfigFilterArgs>[]>;
    /**
     * Has comparison expression for a tag
     */
    tag?: pulumi.Input<inputs.costmanagement.v20200601.ReportConfigComparisonExpressionArgs>;
}

/**
 * The group by expression to be used in the report.
 */
export interface ReportConfigGroupingArgs {
    /**
     * The name of the column to group. This version supports subscription lowest possible grain.
     */
    name: pulumi.Input<string>;
    /**
     * Has type of the column to group.
     */
    type: pulumi.Input<string | enums.costmanagement.v20200601.ReportConfigColumnType>;
}

/**
 * The order by expression to be used in the report.
 */
export interface ReportConfigSortingArgs {
    /**
     * Direction of sort.
     */
    direction?: pulumi.Input<string>;
    /**
     * The name of the column to sort.
     */
    name: pulumi.Input<string>;
}

/**
 * The start and end date for pulling data for the report.
 */
export interface ReportConfigTimePeriodArgs {
    /**
     * The start date to pull data from.
     */
    from: pulumi.Input<string>;
    /**
     * The end date to pull data to.
     */
    to: pulumi.Input<string>;
}

