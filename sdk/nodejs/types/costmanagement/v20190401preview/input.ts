// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The start and end date for a budget.
 */
export interface BudgetTimePeriodArgs {
    /**
     * The end date for the budget. If not provided, we default this to 10 years from the start date.
     */
    endDate?: pulumi.Input<string>;
    /**
     * The start date for the budget.
     */
    startDate: pulumi.Input<string>;
}

/**
 * Each KPI must contain a 'type' and 'enabled' key.
 */
export interface KpiPropertiesArgs {
    /**
     * show the KPI in the UI?
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * ID of resource related to metric (budget).
     */
    id?: pulumi.Input<string>;
    /**
     * KPI type (Forecast, Budget).
     */
    type?: pulumi.Input<string | enums.costmanagement.v20190401preview.KpiTypeType>;
}

/**
 * The notification associated with a budget.
 */
export interface NotificationArgs {
    /**
     * Email addresses to send the budget notification to when the threshold is exceeded.
     */
    contactEmails: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Action groups to send the budget notification to when the threshold is exceeded.
     */
    contactGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contact roles to send the budget notification to when the threshold is exceeded.
     */
    contactRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The notification is enabled or not.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The comparison operator.
     */
    operator: pulumi.Input<string | enums.costmanagement.v20190401preview.NotificationOperatorType>;
    /**
     * Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
     */
    threshold: pulumi.Input<number>;
}

/**
 * Each pivot must contain a 'type' and 'name'.
 */
export interface PivotPropertiesArgs {
    /**
     * Data field to show in view.
     */
    name?: pulumi.Input<string>;
    /**
     * Data type to show in view.
     */
    type?: pulumi.Input<string | enums.costmanagement.v20190401preview.PivotTypeType>;
}

/**
 * The aggregation expression to be used in the report.
 */
export interface ReportConfigAggregationArgs {
    /**
     * The name of the aggregation function to use.
     */
    function: pulumi.Input<string | enums.costmanagement.v20190401preview.FunctionType>;
    /**
     * The name of the column to aggregate.
     */
    name: pulumi.Input<string>;
}

/**
 * The comparison expression to be used in the report.
 */
export interface ReportConfigComparisonExpressionArgs {
    /**
     * The name of the column to use in comparison.
     */
    name: pulumi.Input<string>;
    /**
     * The operator to use for comparison.
     */
    operator: pulumi.Input<string | enums.costmanagement.v20190401preview.OperatorType>;
    /**
     * Array of values to use for comparison
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The definition of data present in the report.
 */
export interface ReportConfigDatasetArgs {
    /**
     * Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
     */
    aggregation?: pulumi.Input<{[key: string]: pulumi.Input<inputs.costmanagement.v20190401preview.ReportConfigAggregationArgs>}>;
    /**
     * Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
     */
    configuration?: pulumi.Input<inputs.costmanagement.v20190401preview.ReportConfigDatasetConfigurationArgs>;
    /**
     * Has filter expression to use in the report.
     */
    filter?: pulumi.Input<inputs.costmanagement.v20190401preview.ReportConfigFilterArgs>;
    /**
     * The granularity of rows in the report.
     */
    granularity?: pulumi.Input<string | enums.costmanagement.v20190401preview.GranularityType>;
    /**
     * Array of group by expression to use in the report. Report can have up to 2 group by clauses.
     */
    grouping?: pulumi.Input<pulumi.Input<inputs.costmanagement.v20190401preview.ReportConfigGroupingArgs>[]>;
    /**
     * Array of order by expression to use in the report.
     */
    sorting?: pulumi.Input<pulumi.Input<inputs.costmanagement.v20190401preview.ReportConfigSortingArgs>[]>;
}

/**
 * The configuration of dataset in the report.
 */
export interface ReportConfigDatasetConfigurationArgs {
    /**
     * Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
     */
    columns?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The filter expression to be used in the report.
 */
export interface ReportConfigFilterArgs {
    /**
     * The logical "AND" expression. Must have at least 2 items.
     */
    and?: pulumi.Input<pulumi.Input<inputs.costmanagement.v20190401preview.ReportConfigFilterArgs>[]>;
    /**
     * Has comparison expression for a dimension
     */
    dimension?: pulumi.Input<inputs.costmanagement.v20190401preview.ReportConfigComparisonExpressionArgs>;
    /**
     * The logical "NOT" expression.
     */
    not?: pulumi.Input<inputs.costmanagement.v20190401preview.ReportConfigFilterArgs>;
    /**
     * The logical "OR" expression. Must have at least 2 items.
     */
    or?: pulumi.Input<pulumi.Input<inputs.costmanagement.v20190401preview.ReportConfigFilterArgs>[]>;
    /**
     * Has comparison expression for a tag
     */
    tag?: pulumi.Input<inputs.costmanagement.v20190401preview.ReportConfigComparisonExpressionArgs>;
}

/**
 * The group by expression to be used in the report.
 */
export interface ReportConfigGroupingArgs {
    /**
     * The name of the column to group. This version supports subscription lowest possible grain.
     */
    name: pulumi.Input<string>;
    /**
     * Has type of the column to group.
     */
    type: pulumi.Input<string | enums.costmanagement.v20190401preview.ReportConfigColumnType>;
}

/**
 * The order by expression to be used in the report.
 */
export interface ReportConfigSortingArgs {
    /**
     * Direction of sort.
     */
    direction?: pulumi.Input<string>;
    /**
     * The name of the column to sort.
     */
    name: pulumi.Input<string>;
}

/**
 * The start and end date for pulling data for the report.
 */
export interface ReportConfigTimePeriodArgs {
    /**
     * The start date to pull data from.
     */
    from: pulumi.Input<string>;
    /**
     * The end date to pull data to.
     */
    to: pulumi.Input<string>;
}

