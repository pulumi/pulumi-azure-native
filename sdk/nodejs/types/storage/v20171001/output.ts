// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The custom domain assigned to this storage account. This can be set via Update.
 */
export interface CustomDomainResponse {
    /**
     * Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
     */
    name: string;
    /**
     * Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
     */
    useSubDomainName?: boolean;
}

/**
 * The encryption settings on the storage account.
 */
export interface EncryptionResponse {
    /**
     * The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
     */
    keySource: string;
    /**
     * Properties provided by key vault.
     */
    keyVaultProperties?: outputs.storage.v20171001.KeyVaultPropertiesResponse;
    /**
     * List of services which support encryption.
     */
    services?: outputs.storage.v20171001.EncryptionServicesResponse;
}
/**
 * encryptionResponseProvideDefaults sets the appropriate defaults for EncryptionResponse
 */
export function encryptionResponseProvideDefaults(val: EncryptionResponse): EncryptionResponse {
    return {
        ...val,
        keySource: (val.keySource) ?? "Microsoft.Storage",
    };
}

/**
 * A service that allows server-side encryption to be used.
 */
export interface EncryptionServiceResponse {
    /**
     * A boolean indicating whether or not the service encrypts the data as it is stored.
     */
    enabled?: boolean;
    /**
     * Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.
     */
    lastEnabledTime: string;
}

/**
 * A list of services that support encryption.
 */
export interface EncryptionServicesResponse {
    /**
     * The encryption function of the blob storage service.
     */
    blob?: outputs.storage.v20171001.EncryptionServiceResponse;
    /**
     * The encryption function of the file storage service.
     */
    file?: outputs.storage.v20171001.EncryptionServiceResponse;
    /**
     * The encryption function of the queue storage service.
     */
    queue: outputs.storage.v20171001.EncryptionServiceResponse;
    /**
     * The encryption function of the table storage service.
     */
    table: outputs.storage.v20171001.EncryptionServiceResponse;
}

/**
 * The URIs that are used to perform a retrieval of a public blob, queue, or table object.
 */
export interface EndpointsResponse {
    /**
     * Gets the blob endpoint.
     */
    blob: string;
    /**
     * Gets the file endpoint.
     */
    file: string;
    /**
     * Gets the queue endpoint.
     */
    queue: string;
    /**
     * Gets the table endpoint.
     */
    table: string;
}

/**
 * IP rule with specific IP or IP range in CIDR format.
 */
export interface IPRuleResponse {
    /**
     * The action of IP ACL rule.
     */
    action?: string;
    /**
     * Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
     */
    iPAddressOrRange: string;
}
/**
 * ipruleResponseProvideDefaults sets the appropriate defaults for IPRuleResponse
 */
export function ipruleResponseProvideDefaults(val: IPRuleResponse): IPRuleResponse {
    return {
        ...val,
        action: (val.action) ?? "Allow",
    };
}

/**
 * Identity for the resource.
 */
export interface IdentityResponse {
    /**
     * The principal ID of resource identity.
     */
    principalId: string;
    /**
     * The tenant ID of resource.
     */
    tenantId: string;
    /**
     * The identity type.
     */
    type: string;
}

/**
 * Properties of key vault.
 */
export interface KeyVaultPropertiesResponse {
    /**
     * The name of KeyVault key.
     */
    keyName?: string;
    /**
     * The Uri of KeyVault.
     */
    keyVaultUri?: string;
    /**
     * The version of KeyVault key.
     */
    keyVersion?: string;
}

/**
 * Network rule set
 */
export interface NetworkRuleSetResponse {
    /**
     * Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
     */
    bypass?: string;
    /**
     * Specifies the default action of allow or deny when no other rules match.
     */
    defaultAction: string;
    /**
     * Sets the IP ACL rules
     */
    ipRules?: outputs.storage.v20171001.IPRuleResponse[];
    /**
     * Sets the virtual network rules
     */
    virtualNetworkRules?: outputs.storage.v20171001.VirtualNetworkRuleResponse[];
}
/**
 * networkRuleSetResponseProvideDefaults sets the appropriate defaults for NetworkRuleSetResponse
 */
export function networkRuleSetResponseProvideDefaults(val: NetworkRuleSetResponse): NetworkRuleSetResponse {
    return {
        ...val,
        bypass: (val.bypass) ?? "AzureServices",
        defaultAction: (val.defaultAction) ?? "Allow",
    };
}

/**
 * The restriction because of which SKU cannot be used.
 */
export interface RestrictionResponse {
    /**
     * The reason for the restriction. As of now this can be "QuotaId" or "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The "NotAvailableForSubscription" is related to capacity at DC.
     */
    reasonCode?: string;
    /**
     * The type of restrictions. As of now only possible value for this is location.
     */
    type: string;
    /**
     * The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
     */
    values: string[];
}

/**
 * The capability information in the specified sku, including file encryption, network acls, change notification, etc.
 */
export interface SKUCapabilityResponse {
    /**
     * The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.
     */
    name: string;
    /**
     * A string value to indicate states of given capability. Possibly 'true' or 'false'.
     */
    value: string;
}

/**
 * The SKU of the storage account.
 */
export interface SkuResponse {
    /**
     * The capability information in the specified sku, including file encryption, network acls, change notification, etc.
     */
    capabilities: outputs.storage.v20171001.SKUCapabilityResponse[];
    /**
     * Indicates the type of storage account.
     */
    kind: string;
    /**
     * The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
     */
    locations: string[];
    /**
     * Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.
     */
    name: string;
    /**
     * The type of the resource, usually it is 'storageAccounts'.
     */
    resourceType: string;
    /**
     * The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
     */
    restrictions?: outputs.storage.v20171001.RestrictionResponse[];
    /**
     * Gets the sku tier. This is based on the SKU name.
     */
    tier: string;
}

/**
 * An access key for the storage account.
 */
export interface StorageAccountKeyResponse {
    /**
     * Name of the key.
     */
    keyName: string;
    /**
     * Permissions for the key -- read-only or full permissions.
     */
    permissions: string;
    /**
     * Base 64-encoded value of the key.
     */
    value: string;
}

/**
 * Virtual Network rule.
 */
export interface VirtualNetworkRuleResponse {
    /**
     * The action of virtual network rule.
     */
    action?: string;
    /**
     * Gets the state of virtual network rule.
     */
    state?: string;
    /**
     * Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
     */
    virtualNetworkResourceId: string;
}
/**
 * virtualNetworkRuleResponseProvideDefaults sets the appropriate defaults for VirtualNetworkRuleResponse
 */
export function virtualNetworkRuleResponseProvideDefaults(val: VirtualNetworkRuleResponse): VirtualNetworkRuleResponse {
    return {
        ...val,
        action: (val.action) ?? "Allow",
    };
}

