// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Specifies a CORS rule for the Blob service.
 */
export interface CorsRuleResponse {
    /**
     * Required if CorsRule element is present. A list of headers allowed to be part of the cross-origin request.
     */
    allowedHeaders: string[];
    /**
     * Required if CorsRule element is present. A list of HTTP methods that are allowed to be executed by the origin.
     */
    allowedMethods: string[];
    /**
     * Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*" to allow all domains
     */
    allowedOrigins: string[];
    /**
     * Required if CorsRule element is present. A list of response headers to expose to CORS clients.
     */
    exposedHeaders: string[];
    /**
     * Required if CorsRule element is present. The number of seconds that the client/browser should cache a preflight response.
     */
    maxAgeInSeconds: number;
}

/**
 * Sets the CORS rules. You can include up to five CorsRule elements in the request. 
 */
export interface CorsRulesResponse {
    /**
     * The List of CORS rules. You can include up to five CorsRule elements in the request. 
     */
    corsRules?: outputs.storage.v20181101.CorsRuleResponse[];
}

/**
 * The custom domain assigned to this storage account. This can be set via Update.
 */
export interface CustomDomainResponse {
    /**
     * Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
     */
    name: string;
    /**
     * Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
     */
    useSubDomainName?: boolean;
}

/**
 * Object to define the number of days after creation.
 */
export interface DateAfterCreationResponse {
    /**
     * Integer value indicating the age in days after creation
     */
    daysAfterCreationGreaterThan: number;
}

/**
 * Object to define the number of days after last modification.
 */
export interface DateAfterModificationResponse {
    /**
     * Integer value indicating the age in days after last modification
     */
    daysAfterModificationGreaterThan: number;
}

/**
 * The blob service properties for soft delete.
 */
export interface DeleteRetentionPolicyResponse {
    /**
     * Indicates the number of days that the deleted blob should be retained. The minimum specified value can be 1 and the maximum value can be 365.
     */
    days?: number;
    /**
     * Indicates whether DeleteRetentionPolicy is enabled for the Blob service.
     */
    enabled?: boolean;
}

/**
 * The encryption settings on the storage account.
 */
export interface EncryptionResponse {
    /**
     * The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
     */
    keySource: string;
    /**
     * Properties provided by key vault.
     */
    keyVaultProperties?: outputs.storage.v20181101.KeyVaultPropertiesResponse;
    /**
     * List of services which support encryption.
     */
    services?: outputs.storage.v20181101.EncryptionServicesResponse;
}
/**
 * encryptionResponseProvideDefaults sets the appropriate defaults for EncryptionResponse
 */
export function encryptionResponseProvideDefaults(val: EncryptionResponse): EncryptionResponse {
    return {
        ...val,
        keySource: (val.keySource) ?? "Microsoft.Storage",
    };
}

/**
 * A service that allows server-side encryption to be used.
 */
export interface EncryptionServiceResponse {
    /**
     * A boolean indicating whether or not the service encrypts the data as it is stored.
     */
    enabled?: boolean;
    /**
     * Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.
     */
    lastEnabledTime: string;
}

/**
 * A list of services that support encryption.
 */
export interface EncryptionServicesResponse {
    /**
     * The encryption function of the blob storage service.
     */
    blob?: outputs.storage.v20181101.EncryptionServiceResponse;
    /**
     * The encryption function of the file storage service.
     */
    file?: outputs.storage.v20181101.EncryptionServiceResponse;
    /**
     * The encryption function of the queue storage service.
     */
    queue: outputs.storage.v20181101.EncryptionServiceResponse;
    /**
     * The encryption function of the table storage service.
     */
    table: outputs.storage.v20181101.EncryptionServiceResponse;
}

/**
 * The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.
 */
export interface EndpointsResponse {
    /**
     * Gets the blob endpoint.
     */
    blob: string;
    /**
     * Gets the dfs endpoint.
     */
    dfs: string;
    /**
     * Gets the file endpoint.
     */
    file: string;
    /**
     * Gets the queue endpoint.
     */
    queue: string;
    /**
     * Gets the table endpoint.
     */
    table: string;
    /**
     * Gets the web endpoint.
     */
    web: string;
}

/**
 * Statistics related to replication for storage account's Blob, Table, Queue and File services. It is only available when geo-redundant replication is enabled for the storage account.
 */
export interface GeoReplicationStatsResponse {
    /**
     * A boolean flag which indicates whether or not account failover is supported for the account.
     */
    canFailover: boolean;
    /**
     * All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime is not available, this can happen if secondary is offline or we are in bootstrap.
     */
    lastSyncTime: string;
    /**
     * The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location is temporarily unavailable.
     */
    status: string;
}

/**
 * IP rule with specific IP or IP range in CIDR format.
 */
export interface IPRuleResponse {
    /**
     * The action of IP ACL rule.
     */
    action?: string;
    /**
     * Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
     */
    iPAddressOrRange: string;
}
/**
 * ipruleResponseProvideDefaults sets the appropriate defaults for IPRuleResponse
 */
export function ipruleResponseProvideDefaults(val: IPRuleResponse): IPRuleResponse {
    return {
        ...val,
        action: (val.action) ?? "Allow",
    };
}

/**
 * Identity for the resource.
 */
export interface IdentityResponse {
    /**
     * The principal ID of resource identity.
     */
    principalId: string;
    /**
     * The tenant ID of resource.
     */
    tenantId: string;
    /**
     * The identity type.
     */
    type: string;
}

/**
 * The properties of an ImmutabilityPolicy of a blob container.
 */
export interface ImmutabilityPolicyPropertiesResponse {
    /**
     * ImmutabilityPolicy Etag.
     */
    etag: string;
    /**
     * The immutability period for the blobs in the container since the policy creation, in days.
     */
    immutabilityPeriodSinceCreationInDays: number;
    /**
     * The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
     */
    state: string;
    /**
     * The ImmutabilityPolicy update history of the blob container.
     */
    updateHistory: outputs.storage.v20181101.UpdateHistoryPropertyResponse[];
}

/**
 * Properties of key vault.
 */
export interface KeyVaultPropertiesResponse {
    /**
     * The name of KeyVault key.
     */
    keyName?: string;
    /**
     * The Uri of KeyVault.
     */
    keyVaultUri?: string;
    /**
     * The version of KeyVault key.
     */
    keyVersion?: string;
}

/**
 * The LegalHold property of a blob container.
 */
export interface LegalHoldPropertiesResponse {
    /**
     * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
     */
    hasLegalHold: boolean;
    /**
     * The list of LegalHold tags of a blob container.
     */
    tags?: outputs.storage.v20181101.TagPropertyResponse[];
}

/**
 * Actions are applied to the filtered blobs when the execution condition is met.
 */
export interface ManagementPolicyActionResponse {
    /**
     * The management policy action for base blob
     */
    baseBlob?: outputs.storage.v20181101.ManagementPolicyBaseBlobResponse;
    /**
     * The management policy action for snapshot
     */
    snapshot?: outputs.storage.v20181101.ManagementPolicySnapShotResponse;
}

/**
 * Management policy action for base blob.
 */
export interface ManagementPolicyBaseBlobResponse {
    /**
     * The function to delete the blob
     */
    delete?: outputs.storage.v20181101.DateAfterModificationResponse;
    /**
     * The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier
     */
    tierToArchive?: outputs.storage.v20181101.DateAfterModificationResponse;
    /**
     * The function to tier blobs to cool storage. Support blobs currently at Hot tier
     */
    tierToCool?: outputs.storage.v20181101.DateAfterModificationResponse;
}

/**
 * An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set.
 */
export interface ManagementPolicyDefinitionResponse {
    /**
     * An object that defines the action set.
     */
    actions: outputs.storage.v20181101.ManagementPolicyActionResponse;
    /**
     * An object that defines the filter set.
     */
    filters?: outputs.storage.v20181101.ManagementPolicyFilterResponse;
}

/**
 * Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters. 
 */
export interface ManagementPolicyFilterResponse {
    /**
     * An array of predefined enum values. Only blockBlob is supported.
     */
    blobTypes: string[];
    /**
     * An array of strings for prefixes to be match.
     */
    prefixMatch?: string[];
}

/**
 * An object that wraps the Lifecycle rule. Each rule is uniquely defined by name.
 */
export interface ManagementPolicyRuleResponse {
    /**
     * An object that defines the Lifecycle rule.
     */
    definition: outputs.storage.v20181101.ManagementPolicyDefinitionResponse;
    /**
     * Rule is enabled if set to true.
     */
    enabled?: boolean;
    /**
     * A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
     */
    name: string;
    /**
     * The valid value is Lifecycle
     */
    type: string;
}

/**
 * The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
 */
export interface ManagementPolicySchemaResponse {
    /**
     * The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
     */
    rules: outputs.storage.v20181101.ManagementPolicyRuleResponse[];
}

/**
 * Management policy action for snapshot.
 */
export interface ManagementPolicySnapShotResponse {
    /**
     * The function to delete the blob snapshot
     */
    delete?: outputs.storage.v20181101.DateAfterCreationResponse;
}

/**
 * Network rule set
 */
export interface NetworkRuleSetResponse {
    /**
     * Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
     */
    bypass?: string;
    /**
     * Specifies the default action of allow or deny when no other rules match.
     */
    defaultAction: string;
    /**
     * Sets the IP ACL rules
     */
    ipRules?: outputs.storage.v20181101.IPRuleResponse[];
    /**
     * Sets the virtual network rules
     */
    virtualNetworkRules?: outputs.storage.v20181101.VirtualNetworkRuleResponse[];
}
/**
 * networkRuleSetResponseProvideDefaults sets the appropriate defaults for NetworkRuleSetResponse
 */
export function networkRuleSetResponseProvideDefaults(val: NetworkRuleSetResponse): NetworkRuleSetResponse {
    return {
        ...val,
        bypass: (val.bypass) ?? "AzureServices",
        defaultAction: (val.defaultAction) ?? "Allow",
    };
}

/**
 * The restriction because of which SKU cannot be used.
 */
export interface RestrictionResponse {
    /**
     * The reason for the restriction. As of now this can be "QuotaId" or "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The "NotAvailableForSubscription" is related to capacity at DC.
     */
    reasonCode?: string;
    /**
     * The type of restrictions. As of now only possible value for this is location.
     */
    type: string;
    /**
     * The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
     */
    values: string[];
}

/**
 * The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
 */
export interface SKUCapabilityResponse {
    /**
     * The name of capability, The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
     */
    name: string;
    /**
     * A string value to indicate states of given capability. Possibly 'true' or 'false'.
     */
    value: string;
}

/**
 * The SKU of the storage account.
 */
export interface SkuResponse {
    /**
     * The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
     */
    capabilities: outputs.storage.v20181101.SKUCapabilityResponse[];
    /**
     * Indicates the type of storage account.
     */
    kind: string;
    /**
     * The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
     */
    locations: string[];
    /**
     * Gets or sets the SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
     */
    name: string;
    /**
     * The type of the resource, usually it is 'storageAccounts'.
     */
    resourceType: string;
    /**
     * The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
     */
    restrictions?: outputs.storage.v20181101.RestrictionResponse[];
    /**
     * Gets the SKU tier. This is based on the SKU name.
     */
    tier: string;
}

/**
 * An access key for the storage account.
 */
export interface StorageAccountKeyResponse {
    /**
     * Name of the key.
     */
    keyName: string;
    /**
     * Permissions for the key -- read-only or full permissions.
     */
    permissions: string;
    /**
     * Base 64-encoded value of the key.
     */
    value: string;
}

/**
 * A tag of the LegalHold of a blob container.
 */
export interface TagPropertyResponse {
    /**
     * Returns the Object ID of the user who added the tag.
     */
    objectIdentifier: string;
    /**
     * The tag value.
     */
    tag: string;
    /**
     * Returns the Tenant ID that issued the token for the user who added the tag.
     */
    tenantId: string;
    /**
     * Returns the date and time the tag was added.
     */
    timestamp: string;
    /**
     * Returns the User Principal Name of the user who added the tag.
     */
    upn: string;
}

/**
 * An update history of the ImmutabilityPolicy of a blob container.
 */
export interface UpdateHistoryPropertyResponse {
    /**
     * The immutability period for the blobs in the container since the policy creation, in days.
     */
    immutabilityPeriodSinceCreationInDays: number;
    /**
     * Returns the Object ID of the user who updated the ImmutabilityPolicy.
     */
    objectIdentifier: string;
    /**
     * Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.
     */
    tenantId: string;
    /**
     * Returns the date and time the ImmutabilityPolicy was updated.
     */
    timestamp: string;
    /**
     * The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.
     */
    update: string;
    /**
     * Returns the User Principal Name of the user who updated the ImmutabilityPolicy.
     */
    upn: string;
}

/**
 * Virtual Network rule.
 */
export interface VirtualNetworkRuleResponse {
    /**
     * The action of virtual network rule.
     */
    action?: string;
    /**
     * Gets the state of virtual network rule.
     */
    state?: string;
    /**
     * Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
     */
    virtualNetworkResourceId: string;
}
/**
 * virtualNetworkRuleResponseProvideDefaults sets the appropriate defaults for VirtualNetworkRuleResponse
 */
export function virtualNetworkRuleResponseProvideDefaults(val: VirtualNetworkRuleResponse): VirtualNetworkRuleResponse {
    return {
        ...val,
        action: (val.action) ?? "Allow",
    };
}

