// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20150501preview from "./v20150501preview/input";
export * as v20150615 from "./v20150615/input";
export * as v20160101 from "./v20160101/input";
export * as v20160501 from "./v20160501/input";
export * as v20161201 from "./v20161201/input";
export * as v20170601 from "./v20170601/input";
export * as v20171001 from "./v20171001/input";
export * as v20180201 from "./v20180201/input";
export * as v20180301preview from "./v20180301preview/input";
export * as v20180701 from "./v20180701/input";
export * as v20181101 from "./v20181101/input";
export * as v20190401 from "./v20190401/input";
export * as v20190601 from "./v20190601/input";
export * as v20200801preview from "./v20200801preview/input";
export * as v20210101 from "./v20210101/input";
export * as v20210201 from "./v20210201/input";
export * as v20210401 from "./v20210401/input";
export * as v20210601 from "./v20210601/input";
export * as v20210801 from "./v20210801/input";
export * as v20210901 from "./v20210901/input";
export * as v20220501 from "./v20220501/input";
export * as v20220901 from "./v20220901/input";
/**
 * Settings properties for Active Directory (AD).
 */
export interface ActiveDirectoryPropertiesArgs {
    /**
     * Specifies the security identifier (SID) for Azure Storage.
     */
    azureStorageSid: pulumi.Input<string>;
    /**
     * Specifies the domain GUID.
     */
    domainGuid: pulumi.Input<string>;
    /**
     * Specifies the primary domain that the AD DNS server is authoritative for.
     */
    domainName: pulumi.Input<string>;
    /**
     * Specifies the security identifier (SID).
     */
    domainSid: pulumi.Input<string>;
    /**
     * Specifies the Active Directory forest to get.
     */
    forestName: pulumi.Input<string>;
    /**
     * Specifies the NetBIOS domain name.
     */
    netBiosDomainName: pulumi.Input<string>;
}

/**
 * Settings for Azure Files identity based authentication.
 */
export interface AzureFilesIdentityBasedAuthenticationArgs {
    /**
     * Required if choose AD.
     */
    activeDirectoryProperties?: pulumi.Input<inputs.storage.ActiveDirectoryPropertiesArgs>;
    /**
     * Indicates the directory service used.
     */
    directoryServiceOptions: pulumi.Input<string | enums.storage.DirectoryServiceOptions>;
}

/**
 * An object that defines the blob inventory rule. Each definition consists of a set of filters.
 */
export interface BlobInventoryPolicyDefinitionArgs {
    /**
     * An object that defines the filter set.
     */
    filters: pulumi.Input<inputs.storage.BlobInventoryPolicyFilterArgs>;
}

/**
 * An object that defines the blob inventory rule filter conditions.
 */
export interface BlobInventoryPolicyFilterArgs {
    /**
     * An array of predefined enum values. Valid values include blockBlob, appendBlob, pageBlob. Hns accounts does not support pageBlobs.
     */
    blobTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Includes blob versions in blob inventory when value set to true.
     */
    includeBlobVersions?: pulumi.Input<boolean>;
    /**
     * Includes blob snapshots in blob inventory when value set to true.
     */
    includeSnapshots?: pulumi.Input<boolean>;
    /**
     * An array of strings for blob prefixes to be matched.
     */
    prefixMatch?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * An object that wraps the blob inventory rule. Each rule is uniquely defined by name.
 */
export interface BlobInventoryPolicyRuleArgs {
    /**
     * An object that defines the blob inventory policy rule.
     */
    definition: pulumi.Input<inputs.storage.BlobInventoryPolicyDefinitionArgs>;
    /**
     * Rule is enabled when set to true.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
     */
    name: pulumi.Input<string>;
}

/**
 * The storage account blob inventory policy rules.
 */
export interface BlobInventoryPolicySchemaArgs {
    /**
     * Container name where blob inventory files are stored. Must be pre-created.
     */
    destination: pulumi.Input<string>;
    /**
     * Policy is enabled if set to true.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The storage account blob inventory policy rules. The rule is applied when it is enabled.
     */
    rules: pulumi.Input<pulumi.Input<inputs.storage.BlobInventoryPolicyRuleArgs>[]>;
    /**
     * The valid value is Inventory
     */
    type: pulumi.Input<string | enums.storage.InventoryRuleType>;
}

/**
 * The blob service properties for change feed events.
 */
export interface ChangeFeedArgs {
    /**
     * Indicates whether change feed event logging is enabled for the Blob service.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Indicates the duration of changeFeed retention in days. Minimum value is 1 day and maximum value is 146000 days (400 years). A null value indicates an infinite retention of the change feed.
     */
    retentionInDays?: pulumi.Input<number>;
}

/**
 * Specifies a CORS rule for the Blob service.
 */
export interface CorsRuleArgs {
    /**
     * Required if CorsRule element is present. A list of headers allowed to be part of the cross-origin request.
     */
    allowedHeaders: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required if CorsRule element is present. A list of HTTP methods that are allowed to be executed by the origin.
     */
    allowedMethods: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*" to allow all domains
     */
    allowedOrigins: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required if CorsRule element is present. A list of response headers to expose to CORS clients.
     */
    exposedHeaders: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required if CorsRule element is present. The number of seconds that the client/browser should cache a preflight response.
     */
    maxAgeInSeconds: pulumi.Input<number>;
}

/**
 * Sets the CORS rules. You can include up to five CorsRule elements in the request. 
 */
export interface CorsRulesArgs {
    /**
     * The List of CORS rules. You can include up to five CorsRule elements in the request. 
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.storage.CorsRuleArgs>[]>;
}

/**
 * The custom domain assigned to this storage account. This can be set via Update.
 */
export interface CustomDomainArgs {
    /**
     * Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
     */
    name: pulumi.Input<string>;
    /**
     * Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
     */
    useSubDomainName?: pulumi.Input<boolean>;
}

/**
 * Object to define the number of days after creation.
 */
export interface DateAfterCreationArgs {
    /**
     * Value indicating the age in days after creation
     */
    daysAfterCreationGreaterThan: pulumi.Input<number>;
}

/**
 * Object to define the number of days after object last modification Or last access. Properties daysAfterModificationGreaterThan and daysAfterLastAccessTimeGreaterThan are mutually exclusive.
 */
export interface DateAfterModificationArgs {
    /**
     * Value indicating the age in days after last blob access. This property can only be used in conjunction with last access time tracking policy
     */
    daysAfterLastAccessTimeGreaterThan?: pulumi.Input<number>;
    /**
     * Value indicating the age in days after last modification
     */
    daysAfterModificationGreaterThan?: pulumi.Input<number>;
}

/**
 * The service properties for soft delete.
 */
export interface DeleteRetentionPolicyArgs {
    /**
     * Indicates the number of days that the deleted item should be retained. The minimum specified value can be 1 and the maximum value can be 365.
     */
    days?: pulumi.Input<number>;
    /**
     * Indicates whether DeleteRetentionPolicy is enabled.
     */
    enabled?: pulumi.Input<boolean>;
}

/**
 * The encryption settings on the storage account.
 */
export interface EncryptionArgs {
    /**
     * The identity to be used with service-side encryption at rest.
     */
    encryptionIdentity?: pulumi.Input<inputs.storage.EncryptionIdentityArgs>;
    /**
     * The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
     */
    keySource: pulumi.Input<string | enums.storage.KeySource>;
    /**
     * Properties provided by key vault.
     */
    keyVaultProperties?: pulumi.Input<inputs.storage.KeyVaultPropertiesArgs>;
    /**
     * A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
     */
    requireInfrastructureEncryption?: pulumi.Input<boolean>;
    /**
     * List of services which support encryption.
     */
    services?: pulumi.Input<inputs.storage.EncryptionServicesArgs>;
}
/**
 * encryptionArgsProvideDefaults sets the appropriate defaults for EncryptionArgs
 */
export function encryptionArgsProvideDefaults(val: EncryptionArgs): EncryptionArgs {
    return {
        ...val,
        keySource: (val.keySource) ?? "Microsoft.Storage",
    };
}

/**
 * Encryption identity for the storage account.
 */
export interface EncryptionIdentityArgs {
    /**
     * Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.
     */
    encryptionUserAssignedIdentity?: pulumi.Input<string>;
}

/**
 * The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.
 */
export interface EncryptionScopeKeyVaultPropertiesArgs {
    /**
     * The object identifier for a key vault key object. When applied, the encryption scope will use the key referenced by the identifier to enable customer-managed key support on this encryption scope.
     */
    keyUri?: pulumi.Input<string>;
}

/**
 * A service that allows server-side encryption to be used.
 */
export interface EncryptionServiceArgs {
    /**
     * A boolean indicating whether or not the service encrypts the data as it is stored.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.
     */
    keyType?: pulumi.Input<string | enums.storage.KeyType>;
}

/**
 * A list of services that support encryption.
 */
export interface EncryptionServicesArgs {
    /**
     * The encryption function of the blob storage service.
     */
    blob?: pulumi.Input<inputs.storage.EncryptionServiceArgs>;
    /**
     * The encryption function of the file storage service.
     */
    file?: pulumi.Input<inputs.storage.EncryptionServiceArgs>;
    /**
     * The encryption function of the queue storage service.
     */
    queue?: pulumi.Input<inputs.storage.EncryptionServiceArgs>;
    /**
     * The encryption function of the table storage service.
     */
    table?: pulumi.Input<inputs.storage.EncryptionServiceArgs>;
}

/**
 * The complex type of the extended location.
 */
export interface ExtendedLocationArgs {
    /**
     * The name of the extended location.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of the extended location.
     */
    type?: pulumi.Input<string | enums.storage.ExtendedLocationTypes>;
}

/**
 * IP rule with specific IP or IP range in CIDR format.
 */
export interface IPRuleArgs {
    /**
     * The action of IP ACL rule.
     */
    action?: pulumi.Input<enums.storage.Action>;
    /**
     * Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
     */
    iPAddressOrRange: pulumi.Input<string>;
}
/**
 * ipruleArgsProvideDefaults sets the appropriate defaults for IPRuleArgs
 */
export function ipruleArgsProvideDefaults(val: IPRuleArgs): IPRuleArgs {
    return {
        ...val,
        action: (val.action) ?? "Allow",
    };
}

/**
 * Identity for the resource.
 */
export interface IdentityArgs {
    /**
     * The identity type.
     */
    type: pulumi.Input<string | enums.storage.IdentityType>;
    /**
     * Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
     */
    userAssignedIdentities?: pulumi.Input<{[key: string]: any}>;
}

/**
 * KeyPolicy assigned to the storage account.
 */
export interface KeyPolicyArgs {
    /**
     * The key expiration period in days.
     */
    keyExpirationPeriodInDays: pulumi.Input<number>;
}

/**
 * Properties of key vault.
 */
export interface KeyVaultPropertiesArgs {
    /**
     * The name of KeyVault key.
     */
    keyName?: pulumi.Input<string>;
    /**
     * The Uri of KeyVault.
     */
    keyVaultUri?: pulumi.Input<string>;
    /**
     * The version of KeyVault key.
     */
    keyVersion?: pulumi.Input<string>;
}

/**
 * The blob service properties for Last access time based tracking policy.
 */
export interface LastAccessTimeTrackingPolicyArgs {
    /**
     * An array of predefined supported blob types. Only blockBlob is the supported value. This field is currently read only
     */
    blobType?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When set to true last access time based tracking is enabled.
     */
    enable: pulumi.Input<boolean>;
    /**
     * Name of the policy. The valid value is AccessTimeTracking. This field is currently read only
     */
    name?: pulumi.Input<string | enums.storage.Name>;
    /**
     * The field specifies blob object tracking granularity in days, typically how often the blob object should be tracked.This field is currently read only with value as 1
     */
    trackingGranularityInDays?: pulumi.Input<number>;
}

/**
 * Actions are applied to the filtered blobs when the execution condition is met.
 */
export interface ManagementPolicyActionArgs {
    /**
     * The management policy action for base blob
     */
    baseBlob?: pulumi.Input<inputs.storage.ManagementPolicyBaseBlobArgs>;
    /**
     * The management policy action for snapshot
     */
    snapshot?: pulumi.Input<inputs.storage.ManagementPolicySnapShotArgs>;
    /**
     * The management policy action for version
     */
    version?: pulumi.Input<inputs.storage.ManagementPolicyVersionArgs>;
}

/**
 * Management policy action for base blob.
 */
export interface ManagementPolicyBaseBlobArgs {
    /**
     * The function to delete the blob
     */
    delete?: pulumi.Input<inputs.storage.DateAfterModificationArgs>;
    /**
     * This property enables auto tiering of a blob from cool to hot on a blob access. This property requires tierToCool.daysAfterLastAccessTimeGreaterThan.
     */
    enableAutoTierToHotFromCool?: pulumi.Input<boolean>;
    /**
     * The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier
     */
    tierToArchive?: pulumi.Input<inputs.storage.DateAfterModificationArgs>;
    /**
     * The function to tier blobs to cool storage. Support blobs currently at Hot tier
     */
    tierToCool?: pulumi.Input<inputs.storage.DateAfterModificationArgs>;
}

/**
 * An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set.
 */
export interface ManagementPolicyDefinitionArgs {
    /**
     * An object that defines the action set.
     */
    actions: pulumi.Input<inputs.storage.ManagementPolicyActionArgs>;
    /**
     * An object that defines the filter set.
     */
    filters?: pulumi.Input<inputs.storage.ManagementPolicyFilterArgs>;
}

/**
 * Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters. 
 */
export interface ManagementPolicyFilterArgs {
    /**
     * An array of blob index tag based filters, there can be at most 10 tag filters
     */
    blobIndexMatch?: pulumi.Input<pulumi.Input<inputs.storage.TagFilterArgs>[]>;
    /**
     * An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob.
     */
    blobTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of strings for prefixes to be match.
     */
    prefixMatch?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * An object that wraps the Lifecycle rule. Each rule is uniquely defined by name.
 */
export interface ManagementPolicyRuleArgs {
    /**
     * An object that defines the Lifecycle rule.
     */
    definition: pulumi.Input<inputs.storage.ManagementPolicyDefinitionArgs>;
    /**
     * Rule is enabled if set to true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
     */
    name: pulumi.Input<string>;
    /**
     * The valid value is Lifecycle
     */
    type: pulumi.Input<string | enums.storage.RuleType>;
}

/**
 * The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
 */
export interface ManagementPolicySchemaArgs {
    /**
     * The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
     */
    rules: pulumi.Input<pulumi.Input<inputs.storage.ManagementPolicyRuleArgs>[]>;
}

/**
 * Management policy action for snapshot.
 */
export interface ManagementPolicySnapShotArgs {
    /**
     * The function to delete the blob snapshot
     */
    delete?: pulumi.Input<inputs.storage.DateAfterCreationArgs>;
    /**
     * The function to tier blob snapshot to archive storage. Support blob snapshot currently at Hot or Cool tier
     */
    tierToArchive?: pulumi.Input<inputs.storage.DateAfterCreationArgs>;
    /**
     * The function to tier blob snapshot to cool storage. Support blob snapshot currently at Hot tier
     */
    tierToCool?: pulumi.Input<inputs.storage.DateAfterCreationArgs>;
}

/**
 * Management policy action for blob version.
 */
export interface ManagementPolicyVersionArgs {
    /**
     * The function to delete the blob version
     */
    delete?: pulumi.Input<inputs.storage.DateAfterCreationArgs>;
    /**
     * The function to tier blob version to archive storage. Support blob version currently at Hot or Cool tier
     */
    tierToArchive?: pulumi.Input<inputs.storage.DateAfterCreationArgs>;
    /**
     * The function to tier blob version to cool storage. Support blob version currently at Hot tier
     */
    tierToCool?: pulumi.Input<inputs.storage.DateAfterCreationArgs>;
}

/**
 * Multichannel setting. Applies to Premium FileStorage only.
 */
export interface MultichannelArgs {
    /**
     * Indicates whether multichannel is enabled
     */
    enabled?: pulumi.Input<boolean>;
}

/**
 * Network rule set
 */
export interface NetworkRuleSetArgs {
    /**
     * Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
     */
    bypass?: pulumi.Input<string | enums.storage.Bypass>;
    /**
     * Specifies the default action of allow or deny when no other rules match.
     */
    defaultAction: pulumi.Input<enums.storage.DefaultAction>;
    /**
     * Sets the IP ACL rules
     */
    ipRules?: pulumi.Input<pulumi.Input<inputs.storage.IPRuleArgs>[]>;
    /**
     * Sets the resource access rules
     */
    resourceAccessRules?: pulumi.Input<pulumi.Input<inputs.storage.ResourceAccessRuleArgs>[]>;
    /**
     * Sets the virtual network rules
     */
    virtualNetworkRules?: pulumi.Input<pulumi.Input<inputs.storage.VirtualNetworkRuleArgs>[]>;
}
/**
 * networkRuleSetArgsProvideDefaults sets the appropriate defaults for NetworkRuleSetArgs
 */
export function networkRuleSetArgsProvideDefaults(val: NetworkRuleSetArgs): NetworkRuleSetArgs {
    return {
        ...val,
        bypass: (val.bypass) ?? "AzureServices",
        defaultAction: (val.defaultAction) ?? "Allow",
    };
}

/**
 * Filters limit replication to a subset of blobs within the storage account. A logical OR is performed on values in the filter. If multiple filters are defined, a logical AND is performed on all filters.
 */
export interface ObjectReplicationPolicyFilterArgs {
    /**
     * Blobs created after the time will be replicated to the destination. It must be in datetime format 'yyyy-MM-ddTHH:mm:ssZ'. Example: 2020-02-19T16:05:00Z
     */
    minCreationTime?: pulumi.Input<string>;
    /**
     * Optional. Filters the results to replicate only blobs whose names begin with the specified prefix.
     */
    prefixMatch?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The replication policy rule between two containers.
 */
export interface ObjectReplicationPolicyRuleArgs {
    /**
     * Required. Destination container name.
     */
    destinationContainer: pulumi.Input<string>;
    /**
     * Optional. An object that defines the filter set.
     */
    filters?: pulumi.Input<inputs.storage.ObjectReplicationPolicyFilterArgs>;
    /**
     * Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * Required. Source container name.
     */
    sourceContainer: pulumi.Input<string>;
}

export interface PermissionScopeArgs {
    /**
     * The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c).
     */
    permissions: pulumi.Input<string>;
    /**
     * The name of resource, normally the container name or the file share name, used by the local user.
     */
    resourceName: pulumi.Input<string>;
    /**
     * The service used by the local user, e.g. blob, file.
     */
    service: pulumi.Input<string>;
}

/**
 * A collection of information about the state of the connection between service consumer and provider.
 */
export interface PrivateLinkServiceConnectionStateArgs {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionRequired?: pulumi.Input<string>;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: pulumi.Input<string | enums.storage.PrivateEndpointServiceConnectionStatus>;
}

/**
 * Protocol settings for file service
 */
export interface ProtocolSettingsArgs {
    /**
     * Setting for SMB protocol
     */
    smb?: pulumi.Input<inputs.storage.SmbSettingArgs>;
}

/**
 * Resource Access Rule.
 */
export interface ResourceAccessRuleArgs {
    /**
     * Resource Id
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Tenant Id
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The blob service properties for blob restore policy
 */
export interface RestorePolicyPropertiesArgs {
    /**
     * how long this blob can be restored. It should be great than zero and less than DeleteRetentionPolicy.days.
     */
    days?: pulumi.Input<number>;
    /**
     * Blob restore is enabled if set to true.
     */
    enabled: pulumi.Input<boolean>;
}

/**
 * Routing preference defines the type of network, either microsoft or internet routing to be used to deliver the user data, the default option is microsoft routing
 */
export interface RoutingPreferenceArgs {
    /**
     * A boolean flag which indicates whether internet routing storage endpoints are to be published
     */
    publishInternetEndpoints?: pulumi.Input<boolean>;
    /**
     * A boolean flag which indicates whether microsoft routing storage endpoints are to be published
     */
    publishMicrosoftEndpoints?: pulumi.Input<boolean>;
    /**
     * Routing Choice defines the kind of network routing opted by the user.
     */
    routingChoice?: pulumi.Input<string | enums.storage.RoutingChoice>;
}

/**
 * SasPolicy assigned to the storage account.
 */
export interface SasPolicyArgs {
    /**
     * The SAS expiration action. Can only be Log.
     */
    expirationAction: pulumi.Input<string | enums.storage.ExpirationAction>;
    /**
     * The SAS expiration period, DD.HH:MM:SS.
     */
    sasExpirationPeriod: pulumi.Input<string>;
}
/**
 * sasPolicyArgsProvideDefaults sets the appropriate defaults for SasPolicyArgs
 */
export function sasPolicyArgsProvideDefaults(val: SasPolicyArgs): SasPolicyArgs {
    return {
        ...val,
        expirationAction: (val.expirationAction) ?? "Log",
    };
}

/**
 * The SKU of the storage account.
 */
export interface SkuArgs {
    /**
     * The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
     */
    name: pulumi.Input<string | enums.storage.SkuName>;
}

/**
 * Setting for SMB protocol
 */
export interface SmbSettingArgs {
    /**
     * SMB authentication methods supported by server. Valid values are NTLMv2, Kerberos. Should be passed as a string with delimiter ';'.
     */
    authenticationMethods?: pulumi.Input<string>;
    /**
     * SMB channel encryption supported by server. Valid values are AES-128-CCM, AES-128-GCM, AES-256-GCM. Should be passed as a string with delimiter ';'.
     */
    channelEncryption?: pulumi.Input<string>;
    /**
     * Kerberos ticket encryption supported by server. Valid values are RC4-HMAC, AES-256. Should be passed as a string with delimiter ';'
     */
    kerberosTicketEncryption?: pulumi.Input<string>;
    /**
     * Multichannel setting. Applies to Premium FileStorage only.
     */
    multichannel?: pulumi.Input<inputs.storage.MultichannelArgs>;
    /**
     * SMB protocol versions supported by server. Valid values are SMB2.1, SMB3.0, SMB3.1.1. Should be passed as a string with delimiter ';'.
     */
    versions?: pulumi.Input<string>;
}

export interface SshPublicKeyArgs {
    /**
     * Optional. It is used to store the function/usage of the key
     */
    description?: pulumi.Input<string>;
    /**
     * Ssh public key base64 encoded. The format should be: '<keyType> <keyData>', e.g. ssh-rsa AAAABBBB
     */
    key?: pulumi.Input<string>;
}

/**
 * Blob index tag based filtering for blob objects
 */
export interface TagFilterArgs {
    /**
     * This is the filter tag name, it can have 1 - 128 characters
     */
    name: pulumi.Input<string>;
    /**
     * This is the comparison operator which is used for object comparison and filtering. Only == (equality operator) is currently supported
     */
    op: pulumi.Input<string>;
    /**
     * This is the filter tag value field used for tag based filtering, it can have 0 - 256 characters
     */
    value: pulumi.Input<string>;
}

/**
 * Virtual Network rule.
 */
export interface VirtualNetworkRuleArgs {
    /**
     * The action of virtual network rule.
     */
    action?: pulumi.Input<enums.storage.Action>;
    /**
     * Gets the state of virtual network rule.
     */
    state?: pulumi.Input<string | enums.storage.State>;
    /**
     * Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
     */
    virtualNetworkResourceId: pulumi.Input<string>;
}
/**
 * virtualNetworkRuleArgsProvideDefaults sets the appropriate defaults for VirtualNetworkRuleArgs
 */
export function virtualNetworkRuleArgsProvideDefaults(val: VirtualNetworkRuleArgs): VirtualNetworkRuleArgs {
    return {
        ...val,
        action: (val.action) ?? "Allow",
    };
}

