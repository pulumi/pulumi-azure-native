// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Read-only endpoint of the failover group instance.
 */
export interface FailoverGroupReadOnlyEndpointResponse {
    /**
     * Failover policy of the read-only endpoint for the failover group.
     */
    failoverPolicy?: string;
}

/**
 * Read-write endpoint of the failover group instance.
 */
export interface FailoverGroupReadWriteEndpointResponse {
    /**
     * Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
     */
    failoverPolicy: string;
    /**
     * Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
     */
    failoverWithDataLossGracePeriodMinutes?: number;
}

/**
 * Partner server information for the failover group.
 */
export interface PartnerInfoResponse {
    /**
     * Resource identifier of the partner server.
     */
    id: string;
    /**
     * Geo location of the partner server.
     */
    location: string;
    /**
     * Replication role of the partner server.
     */
    replicationRole: string;
}

/**
 * Contains error information for an Azure SQL Database, Server or Elastic Pool Recommended Action.
 */
export interface RecommendedActionErrorInfoResponse {
    /**
     * Gets the reason why the recommended action was put to error state. e.g., DatabaseHasQdsOff, IndexAlreadyExists
     */
    errorCode: string;
    /**
     * Gets whether the error could be ignored and recommended action could be retried. Possible values are: Yes/No
     */
    isRetryable: string;
}

/**
 * Contains information of estimated or observed impact on various metrics for an Azure SQL Database, Server or Elastic Pool Recommended Action.
 */
export interface RecommendedActionImpactRecordResponse {
    /**
     * Gets the absolute value of this dimension if applicable. e.g., Number of Queries affected
     */
    absoluteValue: number;
    /**
     * Gets the absolute change in the value of this dimension. e.g., Absolute Disk space change in Megabytes
     */
    changeValueAbsolute: number;
    /**
     * Gets the relative change in the value of this dimension. e.g., Relative Disk space change in Percentage
     */
    changeValueRelative: number;
    /**
     * Gets the name of the impact dimension. e.g., CPUChange, DiskSpaceChange, NumberOfQueriesAffected.
     */
    dimensionName: string;
    /**
     * Gets the name of the impact dimension. e.g., CPUChange, DiskSpaceChange, NumberOfQueriesAffected.
     */
    unit: string;
}

/**
 * Contains information for manual implementation for an Azure SQL Database, Server or Elastic Pool Recommended Action.
 */
export interface RecommendedActionImplementationInfoResponse {
    /**
     * Gets the method in which this recommended action can be manually implemented. e.g., TSql, AzurePowerShell.
     */
    method: string;
    /**
     * Gets the manual implementation script. e.g., T-SQL script that could be executed on the database.
     */
    script: string;
}

/**
 * Contains time series of various impacted metrics for an Azure SQL Database, Server or Elastic Pool Recommended Action.
 */
export interface RecommendedActionMetricInfoResponse {
    /**
     * Gets the name of the metric. e.g., CPU, Number of Queries.
     */
    metricName: string;
    /**
     * Gets the start time of time interval given by this MetricInfo.
     */
    startTime: string;
    /**
     * Gets the duration of time interval for the value given by this MetricInfo. e.g., PT1H (1 hour)
     */
    timeGrain: string;
    /**
     * Gets the unit in which metric is measured. e.g., DTU, Frequency
     */
    unit: string;
    /**
     * Gets the value of the metric in the time interval given by this MetricInfo.
     */
    value: number;
}

/**
 * Database, Server or Elastic Pool Recommended Action.
 */
export interface RecommendedActionResponse {
    /**
     * Gets additional details specific to this recommended action.
     */
    details: {[key: string]: any};
    /**
     * Gets the error details if and why this recommended action is put to error state.
     */
    errorDetails: outputs.sql.v20150501preview.RecommendedActionErrorInfoResponse;
    /**
     * Gets the estimated impact info for this recommended action e.g., Estimated CPU gain, Estimated Disk Space change
     */
    estimatedImpact: outputs.sql.v20150501preview.RecommendedActionImpactRecordResponse[];
    /**
     * Gets the time taken for applying this recommended action on user resource. e.g., time taken for index creation
     */
    executeActionDuration: string;
    /**
     * Gets if approval for applying this recommended action was given by user/system.
     */
    executeActionInitiatedBy: string;
    /**
     * Gets the time when this recommended action was approved for execution.
     */
    executeActionInitiatedTime: string;
    /**
     * Gets the time when system started applying this recommended action on the user resource. e.g., index creation start time
     */
    executeActionStartTime: string;
    /**
     * Resource ID.
     */
    id: string;
    /**
     * Gets the implementation details of this recommended action for user to apply it manually.
     */
    implementationDetails: outputs.sql.v20150501preview.RecommendedActionImplementationInfoResponse;
    /**
     * Gets if this recommended action was suggested some time ago but user chose to ignore this and system added a new recommended action again.
     */
    isArchivedAction: boolean;
    /**
     * Gets if this recommended action is actionable by user
     */
    isExecutableAction: boolean;
    /**
     * Gets if changes applied by this recommended action can be reverted by user
     */
    isRevertableAction: boolean;
    /**
     * Resource kind.
     */
    kind: string;
    /**
     * Gets time when this recommended action was last refreshed.
     */
    lastRefresh: string;
    /**
     * Gets the linked objects, if any.
     */
    linkedObjects: string[];
    /**
     * Resource location.
     */
    location: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * Gets the observed/actual impact info for this recommended action e.g., Actual CPU gain, Actual Disk Space change
     */
    observedImpact: outputs.sql.v20150501preview.RecommendedActionImpactRecordResponse[];
    /**
     * Gets the reason for recommending this action. e.g., DuplicateIndex
     */
    recommendationReason: string;
    /**
     * Gets the time taken for reverting changes of this recommended action on user resource. e.g., time taken for dropping the created index.
     */
    revertActionDuration: string;
    /**
     * Gets if approval for reverting this recommended action was given by user/system.
     */
    revertActionInitiatedBy: string;
    /**
     * Gets the time when this recommended action was approved for revert.
     */
    revertActionInitiatedTime: string;
    /**
     * Gets the time when system started reverting changes of this recommended action on user resource. e.g., time when index drop is executed.
     */
    revertActionStartTime: string;
    /**
     * Gets the impact of this recommended action. Possible values are 1 - Low impact, 2 - Medium Impact and 3 - High Impact
     */
    score: number;
    /**
     * Gets the info of the current state the recommended action is in.
     */
    state: outputs.sql.v20150501preview.RecommendedActionStateInfoResponse;
    /**
     * Gets the time series info of metrics for this recommended action e.g., CPU consumption time series
     */
    timeSeries: outputs.sql.v20150501preview.RecommendedActionMetricInfoResponse[];
    /**
     * Resource type.
     */
    type: string;
    /**
     * Gets the time since when this recommended action is valid.
     */
    validSince: string;
}

/**
 * Contains information of current state for an Azure SQL Database, Server or Elastic Pool Recommended Action.
 */
export interface RecommendedActionStateInfoResponse {
    /**
     * Gets who initiated the execution of this recommended action. Possible Value are: User    -> When user explicitly notified system to apply the recommended action. System  -> When auto-execute status of this advisor was set to 'Enabled', in which case the system applied it.
     */
    actionInitiatedBy: string;
    /**
     * Current state the recommended action is in. Some commonly used states are: Active      -> recommended action is active and no action has been taken yet. Pending     -> recommended action is approved for and is awaiting execution. Executing   -> recommended action is being applied on the user database. Verifying   -> recommended action was applied and is being verified of its usefulness by the system. Success     -> recommended action was applied and improvement found during verification. Pending Revert  -> verification found little or no improvement so recommended action is queued for revert or user has manually reverted. Reverting   -> changes made while applying recommended action are being reverted on the user database. Reverted    -> successfully reverted the changes made by recommended action on user database. Ignored     -> user explicitly ignored/discarded the recommended action. 
     */
    currentValue: string;
    /**
     * Gets the time when the state was last modified
     */
    lastModified: string;
}

/**
 * Azure Active Directory identity configuration for a resource.
 */
export interface ResourceIdentityResponse {
    /**
     * The Azure Active Directory principal id.
     */
    principalId: string;
    /**
     * The Azure Active Directory tenant id.
     */
    tenantId: string;
    /**
     * The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
     */
    type?: string;
}

/**
 * An ARM Resource SKU.
 */
export interface SkuResponse {
    /**
     * Capacity of the particular SKU.
     */
    capacity?: number;
    /**
     * If the service has different generations of hardware, for the same SKU, then that can be captured here.
     */
    family?: string;
    /**
     * The name of the SKU, typically, a letter + Number code, e.g. P3.
     */
    name: string;
    /**
     * Size of the particular SKU
     */
    size?: string;
    /**
     * The tier or edition of the particular SKU, e.g. Basic, Premium.
     */
    tier?: string;
}

/**
 * Properties of sync group schema.
 */
export interface SyncGroupSchemaResponse {
    /**
     * Name of master sync member where the schema is from.
     */
    masterSyncMemberName?: string;
    /**
     * List of tables in sync group schema.
     */
    tables?: outputs.sql.v20150501preview.SyncGroupSchemaTableResponse[];
}

/**
 * Properties of column in sync group table.
 */
export interface SyncGroupSchemaTableColumnResponse {
    /**
     * Data size of the column.
     */
    dataSize?: string;
    /**
     * Data type of the column.
     */
    dataType?: string;
    /**
     * Quoted name of sync group table column.
     */
    quotedName?: string;
}

/**
 * Properties of table in sync group schema.
 */
export interface SyncGroupSchemaTableResponse {
    /**
     * List of columns in sync group schema.
     */
    columns?: outputs.sql.v20150501preview.SyncGroupSchemaTableColumnResponse[];
    /**
     * Quoted name of sync group schema table.
     */
    quotedName?: string;
}

