// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * App resource properties payload
 */
export interface AppResourcePropertiesResponse {
    /**
     * Collection of addons
     */
    addonConfigs?: {[key: string]: {[key: string]: any}};
    /**
     * Indicate if end to end TLS is enabled.
     */
    enableEndToEndTLS?: boolean;
    /**
     * Fully qualified dns Name.
     */
    fqdn?: string;
    /**
     * Indicate if only https is allowed.
     */
    httpsOnly?: boolean;
    /**
     * Collection of loaded certificates
     */
    loadedCertificates?: outputs.appplatform.v20220401.LoadedCertificateResponse[];
    /**
     * Persistent disk settings
     */
    persistentDisk?: outputs.appplatform.v20220401.PersistentDiskResponse;
    /**
     * Provisioning state of the App
     */
    provisioningState: string;
    /**
     * Indicates whether the App exposes public endpoint
     */
    public?: boolean;
    /**
     * Temporary disk settings
     */
    temporaryDisk?: outputs.appplatform.v20220401.TemporaryDiskResponse;
    /**
     * URL of the App
     */
    url: string;
}
/**
 * appResourcePropertiesResponseProvideDefaults sets the appropriate defaults for AppResourcePropertiesResponse
 */
export function appResourcePropertiesResponseProvideDefaults(val: AppResourcePropertiesResponse): AppResourcePropertiesResponse {
    return {
        ...val,
        enableEndToEndTLS: (val.enableEndToEndTLS) ?? false,
        httpsOnly: (val.httpsOnly) ?? false,
        temporaryDisk: (val.temporaryDisk ? outputs.appplatform.v20220401.temporaryDiskResponseProvideDefaults(val.temporaryDisk) : undefined),
    };
}

/**
 * Application Insights agent versions properties payload
 */
export interface ApplicationInsightsAgentVersionsResponse {
    /**
     * Indicates the version of application insight java agent
     */
    java: string;
}

/**
 * Binding resource properties payload
 */
export interface BindingResourcePropertiesResponse {
    /**
     * Binding parameters of the Binding resource
     */
    bindingParameters?: {[key: string]: any};
    /**
     * Creation time of the Binding resource
     */
    createdAt: string;
    /**
     * The generated Spring Boot property file for this binding. The secret will be deducted.
     */
    generatedProperties: string;
    /**
     * The key of the bound resource
     */
    key?: string;
    /**
     * The Azure resource id of the bound resource
     */
    resourceId?: string;
    /**
     * The name of the bound resource
     */
    resourceName: string;
    /**
     * The standard Azure resource type of the bound resource
     */
    resourceType: string;
    /**
     * Update time of the Binding resource
     */
    updatedAt: string;
}

/**
 * Reference to a build result
 */
export interface BuildResultUserSourceInfoResponse {
    /**
     * Resource id of an existing succeeded build result under the same Spring instance.
     */
    buildResultId?: string;
    /**
     * Type of the source uploaded
     * Expected value is 'BuildResult'.
     */
    type: "BuildResult";
    /**
     * Version of the source
     */
    version?: string;
}

/**
 * Build service agent pool properties
 */
export interface BuildServiceAgentPoolPropertiesResponse {
    /**
     * build service agent pool size properties
     */
    poolSize?: outputs.appplatform.v20220401.BuildServiceAgentPoolSizePropertiesResponse;
    /**
     * Provisioning state of the build service agent pool
     */
    provisioningState: string;
}

/**
 * Build service agent pool size properties
 */
export interface BuildServiceAgentPoolSizePropertiesResponse {
    /**
     * The cpu property of build service agent pool size
     */
    cpu: string;
    /**
     * The memory property of build service agent pool size
     */
    memory: string;
    /**
     * The name of build service agent pool size
     */
    name?: string;
}

/**
 * KPack Builder properties payload
 */
export interface BuilderPropertiesResponse {
    /**
     * Builder buildpack groups.
     */
    buildpackGroups?: outputs.appplatform.v20220401.BuildpacksGroupPropertiesResponse[];
    /**
     * Builder provision status.
     */
    provisioningState: string;
    /**
     * Builder cluster stack property.
     */
    stack?: outputs.appplatform.v20220401.StackPropertiesResponse;
}

/**
 * Buildpack Binding Launch Properties
 */
export interface BuildpackBindingLaunchPropertiesResponse {
    /**
     * Non-sensitive properties for launchProperties
     */
    properties?: {[key: string]: string};
    /**
     * Sensitive properties for launchProperties
     */
    secrets?: {[key: string]: string};
}

/**
 * Properties of a buildpack binding
 */
export interface BuildpackBindingPropertiesResponse {
    /**
     * Buildpack Binding Type
     */
    bindingType?: string;
    /**
     * The object describes the buildpack binding launch properties
     */
    launchProperties?: outputs.appplatform.v20220401.BuildpackBindingLaunchPropertiesResponse;
    /**
     * State of the Buildpack Binding.
     */
    provisioningState: string;
}

/**
 * Buildpack properties payload
 */
export interface BuildpackPropertiesResponse {
    /**
     * Id of the buildpack
     */
    id?: string;
}

/**
 * Buildpack group properties of the Builder
 */
export interface BuildpacksGroupPropertiesResponse {
    /**
     * Buildpacks in the buildpack group
     */
    buildpacks?: outputs.appplatform.v20220401.BuildpackPropertiesResponse[];
    /**
     * Buildpack group name
     */
    name?: string;
}

/**
 * Service properties payload
 */
export interface ClusterResourcePropertiesResponse {
    /**
     * Fully qualified dns name of the service instance
     */
    fqdn: string;
    /**
     * Network profile of the Service
     */
    networkProfile?: outputs.appplatform.v20220401.NetworkProfileResponse;
    /**
     * Provisioning state of the Service
     */
    provisioningState: string;
    /**
     * ServiceInstanceEntity GUID which uniquely identifies a created resource
     */
    serviceId: string;
    /**
     * Version of the Service
     */
    version: number;
    zoneRedundant?: boolean;
}
/**
 * clusterResourcePropertiesResponseProvideDefaults sets the appropriate defaults for ClusterResourcePropertiesResponse
 */
export function clusterResourcePropertiesResponseProvideDefaults(val: ClusterResourcePropertiesResponse): ClusterResourcePropertiesResponse {
    return {
        ...val,
        zoneRedundant: (val.zoneRedundant) ?? false,
    };
}

/**
 * Property of git.
 */
export interface ConfigServerGitPropertyResponse {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: string;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: string;
    /**
     * Label of the repository
     */
    label?: string;
    /**
     * Password of git repository basic auth.
     */
    password?: string;
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: string;
    /**
     * Repositories of git.
     */
    repositories?: outputs.appplatform.v20220401.GitPatternRepositoryResponse[];
    /**
     * Searching path of the repository
     */
    searchPaths?: string[];
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: boolean;
    /**
     * URI of the repository
     */
    uri: string;
    /**
     * Username of git repository basic auth.
     */
    username?: string;
}

/**
 * Config server git properties payload
 */
export interface ConfigServerPropertiesResponse {
    /**
     * Settings of config server.
     */
    configServer?: outputs.appplatform.v20220401.ConfigServerSettingsResponse;
    /**
     * Error when apply config server settings.
     */
    error?: outputs.appplatform.v20220401.ErrorResponse;
    /**
     * State of the config server.
     */
    provisioningState: string;
}

/**
 * The settings of config server.
 */
export interface ConfigServerSettingsResponse {
    /**
     * Property of git environment.
     */
    gitProperty?: outputs.appplatform.v20220401.ConfigServerGitPropertyResponse;
}

/**
 * Property of git environment.
 */
export interface ConfigurationServiceGitPropertyResponse {
    /**
     * Repositories of Application Configuration Service git property.
     */
    repositories?: outputs.appplatform.v20220401.ConfigurationServiceGitRepositoryResponse[];
}

/**
 * Git repository property payload for Application Configuration Service
 */
export interface ConfigurationServiceGitRepositoryResponse {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: string;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: string;
    /**
     * Label of the repository
     */
    label: string;
    /**
     * Name of the repository
     */
    name: string;
    /**
     * Password of git repository basic auth.
     */
    password?: string;
    /**
     * Collection of patterns of the repository
     */
    patterns: string[];
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: string;
    /**
     * Searching path of the repository
     */
    searchPaths?: string[];
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: boolean;
    /**
     * URI of the repository
     */
    uri: string;
    /**
     * Username of git repository basic auth.
     */
    username?: string;
}

/**
 * Collection of instances belong to the Application Configuration Service
 */
export interface ConfigurationServiceInstanceResponse {
    /**
     * Name of the Application Configuration Service instance
     */
    name: string;
    /**
     * Status of the Application Configuration Service instance
     */
    status: string;
}

/**
 * Application Configuration Service properties payload
 */
export interface ConfigurationServicePropertiesResponse {
    /**
     * Collection of instances belong to Application Configuration Service.
     */
    instances: outputs.appplatform.v20220401.ConfigurationServiceInstanceResponse[];
    /**
     * State of the Application Configuration Service.
     */
    provisioningState: string;
    /**
     * The requested resource quantity for required CPU and Memory.
     */
    resourceRequests: outputs.appplatform.v20220401.ConfigurationServiceResourceRequestsResponse;
    /**
     * The settings of Application Configuration Service.
     */
    settings?: outputs.appplatform.v20220401.ConfigurationServiceSettingsResponse;
}

/**
 * Resource request payload of Application Configuration Service
 */
export interface ConfigurationServiceResourceRequestsResponse {
    /**
     * Cpu allocated to each Application Configuration Service instance
     */
    cpu: string;
    /**
     * Instance count of the Application Configuration Service
     */
    instanceCount: number;
    /**
     * Memory allocated to each Application Configuration Service instance
     */
    memory: string;
}

/**
 * The settings of Application Configuration Service.
 */
export interface ConfigurationServiceSettingsResponse {
    /**
     * Property of git environment.
     */
    gitProperty?: outputs.appplatform.v20220401.ConfigurationServiceGitPropertyResponse;
}

/**
 * Properties of certificate imported from key vault.
 */
export interface ContentCertificatePropertiesResponse {
    /**
     * The activate date of certificate.
     */
    activateDate: string;
    /**
     * The domain list of certificate.
     */
    dnsNames: string[];
    /**
     * The expiration date of certificate.
     */
    expirationDate: string;
    /**
     * The issue date of certificate.
     */
    issuedDate: string;
    /**
     * The issuer of certificate.
     */
    issuer: string;
    /**
     * The subject name of certificate.
     */
    subjectName: string;
    /**
     * The thumbprint of certificate.
     */
    thumbprint: string;
    /**
     * The type of the certificate source.
     * Expected value is 'ContentCertificate'.
     */
    type: "ContentCertificate";
}

/**
 * Custom domain of app resource payload.
 */
export interface CustomDomainPropertiesResponse {
    /**
     * The app name of domain.
     */
    appName: string;
    /**
     * The bound certificate name of domain.
     */
    certName?: string;
    /**
     * The thumbprint of bound certificate.
     */
    thumbprint?: string;
}

/**
 * Deployment instance payload
 */
export interface DeploymentInstanceResponse {
    /**
     * Discovery status of the deployment instance
     */
    discoveryStatus: string;
    /**
     * Name of the deployment instance
     */
    name: string;
    /**
     * Failed reason of the deployment instance
     */
    reason: string;
    /**
     * Start time of the deployment instance
     */
    startTime: string;
    /**
     * Status of the deployment instance
     */
    status: string;
    /**
     * Availability zone information of the deployment instance
     */
    zone: string;
}

/**
 * Deployment resource properties payload
 */
export interface DeploymentResourcePropertiesResponse {
    /**
     * Indicates whether the Deployment is active
     */
    active?: boolean;
    /**
     * Deployment settings of the Deployment
     */
    deploymentSettings?: outputs.appplatform.v20220401.DeploymentSettingsResponse;
    /**
     * Collection of instances belong to the Deployment
     */
    instances: outputs.appplatform.v20220401.DeploymentInstanceResponse[];
    /**
     * Provisioning state of the Deployment
     */
    provisioningState: string;
    /**
     * Uploaded source information of the deployment.
     */
    source?: outputs.appplatform.v20220401.BuildResultUserSourceInfoResponse | outputs.appplatform.v20220401.JarUploadedUserSourceInfoResponse | outputs.appplatform.v20220401.NetCoreZipUploadedUserSourceInfoResponse | outputs.appplatform.v20220401.SourceUploadedUserSourceInfoResponse | outputs.appplatform.v20220401.UploadedUserSourceInfoResponse;
    /**
     * Status of the Deployment
     */
    status: string;
}

/**
 * Deployment settings payload
 */
export interface DeploymentSettingsResponse {
    /**
     * Collection of addons
     */
    addonConfigs?: {[key: string]: {[key: string]: any}};
    /**
     * Collection of environment variables
     */
    environmentVariables?: {[key: string]: string};
    /**
     * The requested resource quantity for required CPU and Memory. It is recommended that using this field to represent the required CPU and Memory, the old field cpu and memoryInGB will be deprecated later.
     */
    resourceRequests?: outputs.appplatform.v20220401.ResourceRequestsResponse;
}

/**
 * The error code compose of code and message.
 */
export interface ErrorResponse {
    /**
     * The code of error.
     */
    code?: string;
    /**
     * The message of error.
     */
    message?: string;
}

/**
 * Git repository property payload for config server
 */
export interface GitPatternRepositoryResponse {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: string;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: string;
    /**
     * Label of the repository
     */
    label?: string;
    /**
     * Name of the repository
     */
    name: string;
    /**
     * Password of git repository basic auth.
     */
    password?: string;
    /**
     * Collection of pattern of the repository
     */
    pattern?: string[];
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: string;
    /**
     * Searching path of the repository
     */
    searchPaths?: string[];
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: boolean;
    /**
     * URI of the repository
     */
    uri: string;
    /**
     * Username of git repository basic auth.
     */
    username?: string;
}

/**
 * Uploaded Jar binary for a deployment
 */
export interface JarUploadedUserSourceInfoResponse {
    /**
     * JVM parameter
     */
    jvmOptions?: string;
    /**
     * Relative path of the storage which stores the source
     */
    relativePath?: string;
    /**
     * Runtime version of the Jar file
     */
    runtimeVersion?: string;
    /**
     * Type of the source uploaded
     * Expected value is 'Jar'.
     */
    type: "Jar";
    /**
     * Version of the source
     */
    version?: string;
}

/**
 * Properties of certificate imported from key vault.
 */
export interface KeyVaultCertificatePropertiesResponse {
    /**
     * The activate date of certificate.
     */
    activateDate: string;
    /**
     * The certificate version of key vault.
     */
    certVersion?: string;
    /**
     * The domain list of certificate.
     */
    dnsNames: string[];
    /**
     * Optional. If set to true, it will not import private key from key vault.
     */
    excludePrivateKey?: boolean;
    /**
     * The expiration date of certificate.
     */
    expirationDate: string;
    /**
     * The issue date of certificate.
     */
    issuedDate: string;
    /**
     * The issuer of certificate.
     */
    issuer: string;
    /**
     * The certificate name of key vault.
     */
    keyVaultCertName: string;
    /**
     * The subject name of certificate.
     */
    subjectName: string;
    /**
     * The thumbprint of certificate.
     */
    thumbprint: string;
    /**
     * The type of the certificate source.
     * Expected value is 'KeyVaultCertificate'.
     */
    type: "KeyVaultCertificate";
    /**
     * The vault uri of user key vault.
     */
    vaultUri: string;
}
/**
 * keyVaultCertificatePropertiesResponseProvideDefaults sets the appropriate defaults for KeyVaultCertificatePropertiesResponse
 */
export function keyVaultCertificatePropertiesResponseProvideDefaults(val: KeyVaultCertificatePropertiesResponse): KeyVaultCertificatePropertiesResponse {
    return {
        ...val,
        excludePrivateKey: (val.excludePrivateKey) ?? false,
    };
}

/**
 * Loaded certificate payload
 */
export interface LoadedCertificateResponse {
    /**
     * Indicate whether the certificate will be loaded into default trust store, only work for Java runtime.
     */
    loadTrustStore?: boolean;
    /**
     * Resource Id of loaded certificate
     */
    resourceId: string;
}
/**
 * loadedCertificateResponseProvideDefaults sets the appropriate defaults for LoadedCertificateResponse
 */
export function loadedCertificateResponseProvideDefaults(val: LoadedCertificateResponse): LoadedCertificateResponse {
    return {
        ...val,
        loadTrustStore: (val.loadTrustStore) ?? false,
    };
}

/**
 * Managed identity properties retrieved from ARM request headers.
 */
export interface ManagedIdentityPropertiesResponse {
    /**
     * Principal Id of system-assigned managed identity.
     */
    principalId?: string;
    /**
     * Tenant Id of system-assigned managed identity.
     */
    tenantId?: string;
    /**
     * Type of the managed identity
     */
    type?: string;
}

/**
 * Monitoring Setting properties payload
 */
export interface MonitoringSettingPropertiesResponse {
    /**
     * Indicates the versions of application insight agent
     */
    appInsightsAgentVersions?: outputs.appplatform.v20220401.ApplicationInsightsAgentVersionsResponse;
    /**
     * Target application insight instrumentation key, null or whitespace include empty will disable monitoringSettings
     */
    appInsightsInstrumentationKey?: string;
    /**
     * Indicates the sampling rate of application insight agent, should be in range [0.0, 100.0]
     */
    appInsightsSamplingRate?: number;
    /**
     * Error when apply Monitoring Setting changes.
     */
    error?: outputs.appplatform.v20220401.ErrorResponse;
    /**
     * State of the Monitoring Setting.
     */
    provisioningState: string;
    /**
     * Indicates whether enable the trace functionality, which will be deprecated since api version 2020-11-01-preview. Please leverage appInsightsInstrumentationKey to indicate if monitoringSettings enabled or not
     */
    traceEnabled?: boolean;
}

/**
 * Uploaded Jar binary for a deployment
 */
export interface NetCoreZipUploadedUserSourceInfoResponse {
    /**
     * The path to the .NET executable relative to zip root
     */
    netCoreMainEntryPath?: string;
    /**
     * Relative path of the storage which stores the source
     */
    relativePath?: string;
    /**
     * Runtime version of the .Net file
     */
    runtimeVersion?: string;
    /**
     * Type of the source uploaded
     * Expected value is 'NetCoreZip'.
     */
    type: "NetCoreZip";
    /**
     * Version of the source
     */
    version?: string;
}

/**
 * Service network profile payload
 */
export interface NetworkProfileResponse {
    /**
     * Name of the resource group containing network resources for customer apps in Azure Spring Apps
     */
    appNetworkResourceGroup?: string;
    /**
     * Fully qualified resource Id of the subnet to host customer apps in Azure Spring Apps
     */
    appSubnetId?: string;
    /**
     * Desired outbound IP resources for Azure Spring Apps resource.
     */
    outboundIPs: outputs.appplatform.v20220401.NetworkProfileResponseOutboundIPs;
    /**
     * Required inbound or outbound traffics for Azure Spring Apps resource.
     */
    requiredTraffics: outputs.appplatform.v20220401.RequiredTrafficResponse[];
    /**
     * Azure Spring Apps service reserved CIDR
     */
    serviceCidr?: string;
    /**
     * Name of the resource group containing network resources of Azure Spring Apps Service Runtime
     */
    serviceRuntimeNetworkResourceGroup?: string;
    /**
     * Fully qualified resource Id of the subnet to host Azure Spring Apps Service Runtime
     */
    serviceRuntimeSubnetId?: string;
}

/**
 * Desired outbound IP resources for Azure Spring Apps resource.
 */
export interface NetworkProfileResponseOutboundIPs {
    /**
     * A list of public IP addresses.
     */
    publicIPs: string[];
}

/**
 * Persistent disk payload
 */
export interface PersistentDiskResponse {
    /**
     * Mount path of the persistent disk
     */
    mountPath?: string;
    /**
     * Size of the persistent disk in GB
     */
    sizeInGB?: number;
    /**
     * Size of the used persistent disk in GB
     */
    usedInGB: number;
}

/**
 * Required inbound or outbound traffic for Azure Spring Apps resource.
 */
export interface RequiredTrafficResponse {
    /**
     * The direction of required traffic
     */
    direction: string;
    /**
     * The FQDN list of required traffic
     */
    fqdns: string[];
    /**
     * The ip list of required traffic
     */
    ips: string[];
    /**
     * The port of required traffic
     */
    port: number;
    /**
     * The protocol of required traffic
     */
    protocol: string;
}

/**
 * Deployment resource request payload
 */
export interface ResourceRequestsResponse {
    /**
     * Required CPU. 1 core can be represented by 1 or 1000m. This should be 500m or 1 for Basic tier, and {500m, 1, 2, 3, 4} for Standard tier.
     */
    cpu?: string;
    /**
     * Required memory. 1 GB can be represented by 1Gi or 1024Mi. This should be {512Mi, 1Gi, 2Gi} for Basic tier, and {512Mi, 1Gi, 2Gi, ..., 8Gi} for Standard tier.
     */
    memory?: string;
}

/**
 * Collection of instances belong to the Service Registry
 */
export interface ServiceRegistryInstanceResponse {
    /**
     * Name of the Service Registry instance
     */
    name: string;
    /**
     * Status of the Service Registry instance
     */
    status: string;
}

/**
 * Service Registry properties payload
 */
export interface ServiceRegistryPropertiesResponse {
    /**
     * Collection of instances belong to Service Registry.
     */
    instances: outputs.appplatform.v20220401.ServiceRegistryInstanceResponse[];
    /**
     * State of the Service Registry.
     */
    provisioningState: string;
    /**
     * The requested resource quantity for required CPU and Memory.
     */
    resourceRequests: outputs.appplatform.v20220401.ServiceRegistryResourceRequestsResponse;
}

/**
 * Resource request payload of Service Registry
 */
export interface ServiceRegistryResourceRequestsResponse {
    /**
     * Cpu allocated to each Service Registry instance
     */
    cpu: string;
    /**
     * Instance count of the Service Registry
     */
    instanceCount: number;
    /**
     * Memory allocated to each Service Registry instance
     */
    memory: string;
}

/**
 * Sku of Azure Spring Apps
 */
export interface SkuResponse {
    /**
     * Current capacity of the target resource
     */
    capacity?: number;
    /**
     * Name of the Sku
     */
    name?: string;
    /**
     * Tier of the Sku
     */
    tier?: string;
}
/**
 * skuResponseProvideDefaults sets the appropriate defaults for SkuResponse
 */
export function skuResponseProvideDefaults(val: SkuResponse): SkuResponse {
    return {
        ...val,
        name: (val.name) ?? "S0",
        tier: (val.tier) ?? "Standard",
    };
}

/**
 * Uploaded Java source code binary for a deployment
 */
export interface SourceUploadedUserSourceInfoResponse {
    /**
     * Selector for the artifact to be used for the deployment for multi-module projects. This should be
     * the relative path to the target module/project.
     */
    artifactSelector?: string;
    /**
     * Relative path of the storage which stores the source
     */
    relativePath?: string;
    /**
     * Runtime version of the source file
     */
    runtimeVersion?: string;
    /**
     * Type of the source uploaded
     * Expected value is 'Source'.
     */
    type: "Source";
    /**
     * Version of the source
     */
    version?: string;
}

/**
 * KPack ClusterStack properties payload
 */
export interface StackPropertiesResponse {
    /**
     * Id of the ClusterStack.
     */
    id?: string;
    /**
     * Version of the ClusterStack
     */
    version?: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource modification (UTC).
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Temporary disk payload
 */
export interface TemporaryDiskResponse {
    /**
     * Mount path of the temporary disk
     */
    mountPath?: string;
    /**
     * Size of the temporary disk in GB
     */
    sizeInGB?: number;
}
/**
 * temporaryDiskResponseProvideDefaults sets the appropriate defaults for TemporaryDiskResponse
 */
export function temporaryDiskResponseProvideDefaults(val: TemporaryDiskResponse): TemporaryDiskResponse {
    return {
        ...val,
        mountPath: (val.mountPath) ?? "/tmp",
    };
}

/**
 * Source with uploaded location
 */
export interface UploadedUserSourceInfoResponse {
    /**
     * Relative path of the storage which stores the source
     */
    relativePath?: string;
    /**
     * Type of the source uploaded
     * Expected value is 'UploadedUserSourceInfo'.
     */
    type: "UploadedUserSourceInfo";
    /**
     * Version of the source
     */
    version?: string;
}

