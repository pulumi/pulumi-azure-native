// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * App resource properties payload
 */
export interface AppResourcePropertiesArgs {
    /**
     * Collection of addons
     */
    addonConfigs?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
    /**
     * Indicate if end to end TLS is enabled.
     */
    enableEndToEndTLS?: pulumi.Input<boolean>;
    /**
     * Fully qualified dns Name.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * Indicate if only https is allowed.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * Collection of loaded certificates
     */
    loadedCertificates?: pulumi.Input<pulumi.Input<inputs.appplatform.v20220401.LoadedCertificateArgs>[]>;
    /**
     * Persistent disk settings
     */
    persistentDisk?: pulumi.Input<inputs.appplatform.v20220401.PersistentDiskArgs>;
    /**
     * Indicates whether the App exposes public endpoint
     */
    public?: pulumi.Input<boolean>;
    /**
     * Temporary disk settings
     */
    temporaryDisk?: pulumi.Input<inputs.appplatform.v20220401.TemporaryDiskArgs>;
}
/**
 * appResourcePropertiesArgsProvideDefaults sets the appropriate defaults for AppResourcePropertiesArgs
 */
export function appResourcePropertiesArgsProvideDefaults(val: AppResourcePropertiesArgs): AppResourcePropertiesArgs {
    return {
        ...val,
        enableEndToEndTLS: (val.enableEndToEndTLS) ?? false,
        httpsOnly: (val.httpsOnly) ?? false,
        temporaryDisk: (val.temporaryDisk ? pulumi.output(val.temporaryDisk).apply(inputs.appplatform.v20220401.temporaryDiskArgsProvideDefaults) : undefined),
    };
}

/**
 * Binding resource properties payload
 */
export interface BindingResourcePropertiesArgs {
    /**
     * Binding parameters of the Binding resource
     */
    bindingParameters?: pulumi.Input<{[key: string]: any}>;
    /**
     * The key of the bound resource
     */
    key?: pulumi.Input<string>;
    /**
     * The Azure resource id of the bound resource
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * Reference to a build result
 */
export interface BuildResultUserSourceInfoArgs {
    /**
     * Resource id of an existing succeeded build result under the same Spring instance.
     */
    buildResultId?: pulumi.Input<string>;
    /**
     * Type of the source uploaded
     * Expected value is 'BuildResult'.
     */
    type: pulumi.Input<"BuildResult">;
    /**
     * Version of the source
     */
    version?: pulumi.Input<string>;
}

/**
 * Build service agent pool properties
 */
export interface BuildServiceAgentPoolPropertiesArgs {
    /**
     * build service agent pool size properties
     */
    poolSize?: pulumi.Input<inputs.appplatform.v20220401.BuildServiceAgentPoolSizePropertiesArgs>;
}

/**
 * Build service agent pool size properties
 */
export interface BuildServiceAgentPoolSizePropertiesArgs {
    /**
     * The name of build service agent pool size
     */
    name?: pulumi.Input<string>;
}

/**
 * KPack Builder properties payload
 */
export interface BuilderPropertiesArgs {
    /**
     * Builder buildpack groups.
     */
    buildpackGroups?: pulumi.Input<pulumi.Input<inputs.appplatform.v20220401.BuildpacksGroupPropertiesArgs>[]>;
    /**
     * Builder cluster stack property.
     */
    stack?: pulumi.Input<inputs.appplatform.v20220401.StackPropertiesArgs>;
}

/**
 * Buildpack Binding Launch Properties
 */
export interface BuildpackBindingLaunchPropertiesArgs {
    /**
     * Non-sensitive properties for launchProperties
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Sensitive properties for launchProperties
     */
    secrets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Properties of a buildpack binding
 */
export interface BuildpackBindingPropertiesArgs {
    /**
     * Buildpack Binding Type
     */
    bindingType?: pulumi.Input<string | enums.appplatform.v20220401.BindingType>;
    /**
     * The object describes the buildpack binding launch properties
     */
    launchProperties?: pulumi.Input<inputs.appplatform.v20220401.BuildpackBindingLaunchPropertiesArgs>;
}

/**
 * Buildpack properties payload
 */
export interface BuildpackPropertiesArgs {
    /**
     * Id of the buildpack
     */
    id?: pulumi.Input<string>;
}

/**
 * Buildpack group properties of the Builder
 */
export interface BuildpacksGroupPropertiesArgs {
    /**
     * Buildpacks in the buildpack group
     */
    buildpacks?: pulumi.Input<pulumi.Input<inputs.appplatform.v20220401.BuildpackPropertiesArgs>[]>;
    /**
     * Buildpack group name
     */
    name?: pulumi.Input<string>;
}

/**
 * Service properties payload
 */
export interface ClusterResourcePropertiesArgs {
    /**
     * Network profile of the Service
     */
    networkProfile?: pulumi.Input<inputs.appplatform.v20220401.NetworkProfileArgs>;
    zoneRedundant?: pulumi.Input<boolean>;
}
/**
 * clusterResourcePropertiesArgsProvideDefaults sets the appropriate defaults for ClusterResourcePropertiesArgs
 */
export function clusterResourcePropertiesArgsProvideDefaults(val: ClusterResourcePropertiesArgs): ClusterResourcePropertiesArgs {
    return {
        ...val,
        zoneRedundant: (val.zoneRedundant) ?? false,
    };
}

/**
 * Property of git.
 */
export interface ConfigServerGitPropertyArgs {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: pulumi.Input<string>;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: pulumi.Input<string>;
    /**
     * Label of the repository
     */
    label?: pulumi.Input<string>;
    /**
     * Password of git repository basic auth.
     */
    password?: pulumi.Input<string>;
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Repositories of git.
     */
    repositories?: pulumi.Input<pulumi.Input<inputs.appplatform.v20220401.GitPatternRepositoryArgs>[]>;
    /**
     * Searching path of the repository
     */
    searchPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: pulumi.Input<boolean>;
    /**
     * URI of the repository
     */
    uri: pulumi.Input<string>;
    /**
     * Username of git repository basic auth.
     */
    username?: pulumi.Input<string>;
}

/**
 * Config server git properties payload
 */
export interface ConfigServerPropertiesArgs {
    /**
     * Settings of config server.
     */
    configServer?: pulumi.Input<inputs.appplatform.v20220401.ConfigServerSettingsArgs>;
    /**
     * Error when apply config server settings.
     */
    error?: pulumi.Input<inputs.appplatform.v20220401.ErrorArgs>;
}

/**
 * The settings of config server.
 */
export interface ConfigServerSettingsArgs {
    /**
     * Property of git environment.
     */
    gitProperty?: pulumi.Input<inputs.appplatform.v20220401.ConfigServerGitPropertyArgs>;
}

/**
 * Property of git environment.
 */
export interface ConfigurationServiceGitPropertyArgs {
    /**
     * Repositories of Application Configuration Service git property.
     */
    repositories?: pulumi.Input<pulumi.Input<inputs.appplatform.v20220401.ConfigurationServiceGitRepositoryArgs>[]>;
}

/**
 * Git repository property payload for Application Configuration Service
 */
export interface ConfigurationServiceGitRepositoryArgs {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: pulumi.Input<string>;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: pulumi.Input<string>;
    /**
     * Label of the repository
     */
    label: pulumi.Input<string>;
    /**
     * Name of the repository
     */
    name: pulumi.Input<string>;
    /**
     * Password of git repository basic auth.
     */
    password?: pulumi.Input<string>;
    /**
     * Collection of patterns of the repository
     */
    patterns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Searching path of the repository
     */
    searchPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: pulumi.Input<boolean>;
    /**
     * URI of the repository
     */
    uri: pulumi.Input<string>;
    /**
     * Username of git repository basic auth.
     */
    username?: pulumi.Input<string>;
}

/**
 * Application Configuration Service properties payload
 */
export interface ConfigurationServicePropertiesArgs {
    /**
     * The settings of Application Configuration Service.
     */
    settings?: pulumi.Input<inputs.appplatform.v20220401.ConfigurationServiceSettingsArgs>;
}

/**
 * The settings of Application Configuration Service.
 */
export interface ConfigurationServiceSettingsArgs {
    /**
     * Property of git environment.
     */
    gitProperty?: pulumi.Input<inputs.appplatform.v20220401.ConfigurationServiceGitPropertyArgs>;
}

/**
 * Properties of certificate imported from key vault.
 */
export interface ContentCertificatePropertiesArgs {
    /**
     * The content of uploaded certificate.
     */
    content?: pulumi.Input<string>;
    /**
     * The type of the certificate source.
     * Expected value is 'ContentCertificate'.
     */
    type: pulumi.Input<"ContentCertificate">;
}

/**
 * Custom domain of app resource payload.
 */
export interface CustomDomainPropertiesArgs {
    /**
     * The bound certificate name of domain.
     */
    certName?: pulumi.Input<string>;
    /**
     * The thumbprint of bound certificate.
     */
    thumbprint?: pulumi.Input<string>;
}

/**
 * Deployment resource properties payload
 */
export interface DeploymentResourcePropertiesArgs {
    /**
     * Indicates whether the Deployment is active
     */
    active?: pulumi.Input<boolean>;
    /**
     * Deployment settings of the Deployment
     */
    deploymentSettings?: pulumi.Input<inputs.appplatform.v20220401.DeploymentSettingsArgs>;
    /**
     * Uploaded source information of the deployment.
     */
    source?: pulumi.Input<inputs.appplatform.v20220401.BuildResultUserSourceInfoArgs | inputs.appplatform.v20220401.JarUploadedUserSourceInfoArgs | inputs.appplatform.v20220401.NetCoreZipUploadedUserSourceInfoArgs | inputs.appplatform.v20220401.SourceUploadedUserSourceInfoArgs | inputs.appplatform.v20220401.UploadedUserSourceInfoArgs>;
}

/**
 * Deployment settings payload
 */
export interface DeploymentSettingsArgs {
    /**
     * Collection of addons
     */
    addonConfigs?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
    /**
     * Collection of environment variables
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The requested resource quantity for required CPU and Memory. It is recommended that using this field to represent the required CPU and Memory, the old field cpu and memoryInGB will be deprecated later.
     */
    resourceRequests?: pulumi.Input<inputs.appplatform.v20220401.ResourceRequestsArgs>;
}

/**
 * The error code compose of code and message.
 */
export interface ErrorArgs {
    /**
     * The code of error.
     */
    code?: pulumi.Input<string>;
    /**
     * The message of error.
     */
    message?: pulumi.Input<string>;
}

/**
 * Git repository property payload for config server
 */
export interface GitPatternRepositoryArgs {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: pulumi.Input<string>;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: pulumi.Input<string>;
    /**
     * Label of the repository
     */
    label?: pulumi.Input<string>;
    /**
     * Name of the repository
     */
    name: pulumi.Input<string>;
    /**
     * Password of git repository basic auth.
     */
    password?: pulumi.Input<string>;
    /**
     * Collection of pattern of the repository
     */
    pattern?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Searching path of the repository
     */
    searchPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: pulumi.Input<boolean>;
    /**
     * URI of the repository
     */
    uri: pulumi.Input<string>;
    /**
     * Username of git repository basic auth.
     */
    username?: pulumi.Input<string>;
}

/**
 * Uploaded Jar binary for a deployment
 */
export interface JarUploadedUserSourceInfoArgs {
    /**
     * JVM parameter
     */
    jvmOptions?: pulumi.Input<string>;
    /**
     * Relative path of the storage which stores the source
     */
    relativePath?: pulumi.Input<string>;
    /**
     * Runtime version of the Jar file
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * Type of the source uploaded
     * Expected value is 'Jar'.
     */
    type: pulumi.Input<"Jar">;
    /**
     * Version of the source
     */
    version?: pulumi.Input<string>;
}

/**
 * Properties of certificate imported from key vault.
 */
export interface KeyVaultCertificatePropertiesArgs {
    /**
     * The certificate version of key vault.
     */
    certVersion?: pulumi.Input<string>;
    /**
     * Optional. If set to true, it will not import private key from key vault.
     */
    excludePrivateKey?: pulumi.Input<boolean>;
    /**
     * The certificate name of key vault.
     */
    keyVaultCertName: pulumi.Input<string>;
    /**
     * The type of the certificate source.
     * Expected value is 'KeyVaultCertificate'.
     */
    type: pulumi.Input<"KeyVaultCertificate">;
    /**
     * The vault uri of user key vault.
     */
    vaultUri: pulumi.Input<string>;
}
/**
 * keyVaultCertificatePropertiesArgsProvideDefaults sets the appropriate defaults for KeyVaultCertificatePropertiesArgs
 */
export function keyVaultCertificatePropertiesArgsProvideDefaults(val: KeyVaultCertificatePropertiesArgs): KeyVaultCertificatePropertiesArgs {
    return {
        ...val,
        excludePrivateKey: (val.excludePrivateKey) ?? false,
    };
}

/**
 * Loaded certificate payload
 */
export interface LoadedCertificateArgs {
    /**
     * Indicate whether the certificate will be loaded into default trust store, only work for Java runtime.
     */
    loadTrustStore?: pulumi.Input<boolean>;
    /**
     * Resource Id of loaded certificate
     */
    resourceId: pulumi.Input<string>;
}
/**
 * loadedCertificateArgsProvideDefaults sets the appropriate defaults for LoadedCertificateArgs
 */
export function loadedCertificateArgsProvideDefaults(val: LoadedCertificateArgs): LoadedCertificateArgs {
    return {
        ...val,
        loadTrustStore: (val.loadTrustStore) ?? false,
    };
}

/**
 * Managed identity properties retrieved from ARM request headers.
 */
export interface ManagedIdentityPropertiesArgs {
    /**
     * Principal Id of system-assigned managed identity.
     */
    principalId?: pulumi.Input<string>;
    /**
     * Tenant Id of system-assigned managed identity.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Type of the managed identity
     */
    type?: pulumi.Input<string | enums.appplatform.v20220401.ManagedIdentityType>;
}

/**
 * Monitoring Setting properties payload
 */
export interface MonitoringSettingPropertiesArgs {
    /**
     * Target application insight instrumentation key, null or whitespace include empty will disable monitoringSettings
     */
    appInsightsInstrumentationKey?: pulumi.Input<string>;
    /**
     * Indicates the sampling rate of application insight agent, should be in range [0.0, 100.0]
     */
    appInsightsSamplingRate?: pulumi.Input<number>;
    /**
     * Error when apply Monitoring Setting changes.
     */
    error?: pulumi.Input<inputs.appplatform.v20220401.ErrorArgs>;
    /**
     * Indicates whether enable the trace functionality, which will be deprecated since api version 2020-11-01-preview. Please leverage appInsightsInstrumentationKey to indicate if monitoringSettings enabled or not
     */
    traceEnabled?: pulumi.Input<boolean>;
}

/**
 * Uploaded Jar binary for a deployment
 */
export interface NetCoreZipUploadedUserSourceInfoArgs {
    /**
     * The path to the .NET executable relative to zip root
     */
    netCoreMainEntryPath?: pulumi.Input<string>;
    /**
     * Relative path of the storage which stores the source
     */
    relativePath?: pulumi.Input<string>;
    /**
     * Runtime version of the .Net file
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * Type of the source uploaded
     * Expected value is 'NetCoreZip'.
     */
    type: pulumi.Input<"NetCoreZip">;
    /**
     * Version of the source
     */
    version?: pulumi.Input<string>;
}

/**
 * Service network profile payload
 */
export interface NetworkProfileArgs {
    /**
     * Name of the resource group containing network resources for customer apps in Azure Spring Apps
     */
    appNetworkResourceGroup?: pulumi.Input<string>;
    /**
     * Fully qualified resource Id of the subnet to host customer apps in Azure Spring Apps
     */
    appSubnetId?: pulumi.Input<string>;
    /**
     * Azure Spring Apps service reserved CIDR
     */
    serviceCidr?: pulumi.Input<string>;
    /**
     * Name of the resource group containing network resources of Azure Spring Apps Service Runtime
     */
    serviceRuntimeNetworkResourceGroup?: pulumi.Input<string>;
    /**
     * Fully qualified resource Id of the subnet to host Azure Spring Apps Service Runtime
     */
    serviceRuntimeSubnetId?: pulumi.Input<string>;
}

/**
 * Persistent disk payload
 */
export interface PersistentDiskArgs {
    /**
     * Mount path of the persistent disk
     */
    mountPath?: pulumi.Input<string>;
    /**
     * Size of the persistent disk in GB
     */
    sizeInGB?: pulumi.Input<number>;
}

/**
 * Deployment resource request payload
 */
export interface ResourceRequestsArgs {
    /**
     * Required CPU. 1 core can be represented by 1 or 1000m. This should be 500m or 1 for Basic tier, and {500m, 1, 2, 3, 4} for Standard tier.
     */
    cpu?: pulumi.Input<string>;
    /**
     * Required memory. 1 GB can be represented by 1Gi or 1024Mi. This should be {512Mi, 1Gi, 2Gi} for Basic tier, and {512Mi, 1Gi, 2Gi, ..., 8Gi} for Standard tier.
     */
    memory?: pulumi.Input<string>;
}

/**
 * Sku of Azure Spring Apps
 */
export interface SkuArgs {
    /**
     * Current capacity of the target resource
     */
    capacity?: pulumi.Input<number>;
    /**
     * Name of the Sku
     */
    name?: pulumi.Input<string>;
    /**
     * Tier of the Sku
     */
    tier?: pulumi.Input<string>;
}
/**
 * skuArgsProvideDefaults sets the appropriate defaults for SkuArgs
 */
export function skuArgsProvideDefaults(val: SkuArgs): SkuArgs {
    return {
        ...val,
        name: (val.name) ?? "S0",
        tier: (val.tier) ?? "Standard",
    };
}

/**
 * Uploaded Java source code binary for a deployment
 */
export interface SourceUploadedUserSourceInfoArgs {
    /**
     * Selector for the artifact to be used for the deployment for multi-module projects. This should be
     * the relative path to the target module/project.
     */
    artifactSelector?: pulumi.Input<string>;
    /**
     * Relative path of the storage which stores the source
     */
    relativePath?: pulumi.Input<string>;
    /**
     * Runtime version of the source file
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * Type of the source uploaded
     * Expected value is 'Source'.
     */
    type: pulumi.Input<"Source">;
    /**
     * Version of the source
     */
    version?: pulumi.Input<string>;
}

/**
 * KPack ClusterStack properties payload
 */
export interface StackPropertiesArgs {
    /**
     * Id of the ClusterStack.
     */
    id?: pulumi.Input<string>;
    /**
     * Version of the ClusterStack
     */
    version?: pulumi.Input<string>;
}

/**
 * Temporary disk payload
 */
export interface TemporaryDiskArgs {
    /**
     * Mount path of the temporary disk
     */
    mountPath?: pulumi.Input<string>;
    /**
     * Size of the temporary disk in GB
     */
    sizeInGB?: pulumi.Input<number>;
}
/**
 * temporaryDiskArgsProvideDefaults sets the appropriate defaults for TemporaryDiskArgs
 */
export function temporaryDiskArgsProvideDefaults(val: TemporaryDiskArgs): TemporaryDiskArgs {
    return {
        ...val,
        mountPath: (val.mountPath) ?? "/tmp",
    };
}

/**
 * Source with uploaded location
 */
export interface UploadedUserSourceInfoArgs {
    /**
     * Relative path of the storage which stores the source
     */
    relativePath?: pulumi.Input<string>;
    /**
     * Type of the source uploaded
     * Expected value is 'UploadedUserSourceInfo'.
     */
    type: pulumi.Input<"UploadedUserSourceInfo">;
    /**
     * Version of the source
     */
    version?: pulumi.Input<string>;
}

