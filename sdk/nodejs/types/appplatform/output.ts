// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20200701 from "./v20200701/output";
export * as v20201101preview from "./v20201101preview/output";
export * as v20210601preview from "./v20210601preview/output";
export * as v20210901preview from "./v20210901preview/output";
export * as v20220101preview from "./v20220101preview/output";
export * as v20220301preview from "./v20220301preview/output";
export * as v20220401 from "./v20220401/output";
export * as v20220501preview from "./v20220501preview/output";
export * as v20220901preview from "./v20220901preview/output";
export * as v20221101preview from "./v20221101preview/output";
export * as v20221201 from "./v20221201/output";
/**
 * The properties of custom domain for API portal
 */
export interface ApiPortalCustomDomainPropertiesResponse {
    /**
     * The thumbprint of bound certificate.
     */
    thumbprint?: string;
}

/**
 * Collection of instances belong to the API portal
 */
export interface ApiPortalInstanceResponse {
    /**
     * Name of the API portal instance
     */
    name: string;
    /**
     * Status of the API portal instance
     */
    status: string;
}

/**
 * API portal properties payload
 */
export interface ApiPortalPropertiesResponse {
    /**
     * The array of resource Ids of gateway to integrate with API portal.
     */
    gatewayIds?: string[];
    /**
     * Indicate if only https is allowed.
     */
    httpsOnly?: boolean;
    /**
     * Collection of instances belong to API portal.
     */
    instances: outputs.appplatform.ApiPortalInstanceResponse[];
    /**
     * State of the API portal.
     */
    provisioningState: string;
    /**
     * Indicates whether the API portal exposes endpoint.
     */
    public?: boolean;
    /**
     * The requested resource quantity for required CPU and Memory.
     */
    resourceRequests: outputs.appplatform.ApiPortalResourceRequestsResponse;
    /**
     * Collection of OpenAPI source URL locations.
     */
    sourceUrls?: string[];
    /**
     * Single sign-on related configuration
     */
    ssoProperties?: outputs.appplatform.SsoPropertiesResponse;
    /**
     * URL of the API portal, exposed when 'public' is true.
     */
    url: string;
}
/**
 * apiPortalPropertiesResponseProvideDefaults sets the appropriate defaults for ApiPortalPropertiesResponse
 */
export function apiPortalPropertiesResponseProvideDefaults(val: ApiPortalPropertiesResponse): ApiPortalPropertiesResponse {
    return {
        ...val,
        httpsOnly: (val.httpsOnly) ?? false,
        public: (val.public) ?? false,
    };
}

/**
 * Resource requests of the API portal
 */
export interface ApiPortalResourceRequestsResponse {
    /**
     * Cpu allocated to each API portal instance
     */
    cpu: string;
    /**
     * Memory allocated to each API portal instance
     */
    memory: string;
}

/**
 * App resource properties payload
 */
export interface AppResourcePropertiesResponse {
    /**
     * Name of the active deployment of the App
     */
    activeDeploymentName?: string;
    /**
     * Date time when the resource is created
     */
    createdTime: string;
    /**
     * Fully qualified dns Name.
     */
    fqdn?: string;
    /**
     * Indicate if only https is allowed.
     */
    httpsOnly?: boolean;
    /**
     * Persistent disk settings
     */
    persistentDisk?: outputs.appplatform.PersistentDiskResponse;
    /**
     * Provisioning state of the App
     */
    provisioningState: string;
    /**
     * Indicates whether the App exposes public endpoint
     */
    public?: boolean;
    /**
     * Temporary disk settings
     */
    temporaryDisk?: outputs.appplatform.TemporaryDiskResponse;
    /**
     * URL of the App
     */
    url: string;
}
/**
 * appResourcePropertiesResponseProvideDefaults sets the appropriate defaults for AppResourcePropertiesResponse
 */
export function appResourcePropertiesResponseProvideDefaults(val: AppResourcePropertiesResponse): AppResourcePropertiesResponse {
    return {
        ...val,
        httpsOnly: (val.httpsOnly) ?? false,
        temporaryDisk: (val.temporaryDisk ? outputs.appplatform.temporaryDiskResponseProvideDefaults(val.temporaryDisk) : undefined),
    };
}

/**
 * Binding resource properties payload
 */
export interface BindingResourcePropertiesResponse {
    /**
     * Binding parameters of the Binding resource
     */
    bindingParameters?: {[key: string]: any};
    /**
     * Creation time of the Binding resource
     */
    createdAt: string;
    /**
     * The generated Spring Boot property file for this binding. The secret will be deducted.
     */
    generatedProperties: string;
    /**
     * The key of the bound resource
     */
    key?: string;
    /**
     * The Azure resource id of the bound resource
     */
    resourceId?: string;
    /**
     * The name of the bound resource
     */
    resourceName: string;
    /**
     * The standard Azure resource type of the bound resource
     */
    resourceType: string;
    /**
     * Update time of the Binding resource
     */
    updatedAt: string;
}

/**
 * Build service agent pool properties
 */
export interface BuildServiceAgentPoolPropertiesResponse {
    /**
     * build service agent pool size properties
     */
    poolSize?: outputs.appplatform.BuildServiceAgentPoolSizePropertiesResponse;
    /**
     * Provisioning state of the build service agent pool
     */
    provisioningState: string;
}

/**
 * Build service agent pool size properties
 */
export interface BuildServiceAgentPoolSizePropertiesResponse {
    /**
     * The cpu property of build service agent pool size
     */
    cpu: string;
    /**
     * The memory property of build service agent pool size
     */
    memory: string;
    /**
     * The name of build service agent pool size
     */
    name?: string;
}

/**
 * KPack Builder properties payload
 */
export interface BuilderPropertiesResponse {
    /**
     * Builder buildpack groups.
     */
    buildpackGroups?: outputs.appplatform.BuildpacksGroupPropertiesResponse[];
    /**
     * Builder provision status.
     */
    provisioningState: string;
    /**
     * Builder cluster stack property.
     */
    stack?: outputs.appplatform.StackPropertiesResponse;
}

/**
 * Buildpack Binding Launch Properties
 */
export interface BuildpackBindingLaunchPropertiesResponse {
    /**
     * Non-sensitive properties for launchProperties
     */
    properties?: {[key: string]: string};
    /**
     * Sensitive properties for launchProperties
     */
    secrets?: {[key: string]: string};
}

/**
 * Properties of a buildpack binding
 */
export interface BuildpackBindingPropertiesResponse {
    /**
     * Buildpack Binding Type
     */
    bindingType?: string;
    /**
     * The object describes the buildpack binding launch properties
     */
    launchProperties?: outputs.appplatform.BuildpackBindingLaunchPropertiesResponse;
    /**
     * State of the Buildpack Binding.
     */
    provisioningState: string;
}

/**
 * Buildpack properties payload
 */
export interface BuildpackPropertiesResponse {
    /**
     * Id of the buildpack
     */
    id?: string;
}

/**
 * Buildpack group properties of the Builder
 */
export interface BuildpacksGroupPropertiesResponse {
    /**
     * Buildpacks in the buildpack group
     */
    buildpacks?: outputs.appplatform.BuildpackPropertiesResponse[];
    /**
     * Buildpack group name
     */
    name?: string;
}

/**
 * Certificate resource payload.
 */
export interface CertificatePropertiesResponse {
    /**
     * The activate date of certificate.
     */
    activateDate: string;
    /**
     * The certificate version of key vault.
     */
    certVersion?: string;
    /**
     * The domain list of certificate.
     */
    dnsNames: string[];
    /**
     * The expiration date of certificate.
     */
    expirationDate: string;
    /**
     * The issue date of certificate.
     */
    issuedDate: string;
    /**
     * The issuer of certificate.
     */
    issuer: string;
    /**
     * The certificate name of key vault.
     */
    keyVaultCertName: string;
    /**
     * The subject name of certificate.
     */
    subjectName: string;
    /**
     * The thumbprint of certificate.
     */
    thumbprint: string;
    /**
     * The vault uri of user key vault.
     */
    vaultUri: string;
}

/**
 * Service properties payload
 */
export interface ClusterResourcePropertiesResponse {
    /**
     * Network profile of the Service
     */
    networkProfile?: outputs.appplatform.NetworkProfileResponse;
    /**
     * Provisioning state of the Service
     */
    provisioningState: string;
    /**
     * ServiceInstanceEntity GUID which uniquely identifies a created resource
     */
    serviceId: string;
    /**
     * Version of the Service
     */
    version: number;
}

/**
 * Property of git.
 */
export interface ConfigServerGitPropertyResponse {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: string;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: string;
    /**
     * Label of the repository
     */
    label?: string;
    /**
     * Password of git repository basic auth.
     */
    password?: string;
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: string;
    /**
     * Repositories of git.
     */
    repositories?: outputs.appplatform.GitPatternRepositoryResponse[];
    /**
     * Searching path of the repository
     */
    searchPaths?: string[];
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: boolean;
    /**
     * URI of the repository
     */
    uri: string;
    /**
     * Username of git repository basic auth.
     */
    username?: string;
}

/**
 * Config server git properties payload
 */
export interface ConfigServerPropertiesResponse {
    /**
     * Settings of config server.
     */
    configServer?: outputs.appplatform.ConfigServerSettingsResponse;
    /**
     * Error when apply config server settings.
     */
    error?: outputs.appplatform.ErrorResponse;
    /**
     * State of the config server.
     */
    provisioningState: string;
}

/**
 * The settings of config server.
 */
export interface ConfigServerSettingsResponse {
    /**
     * Property of git environment.
     */
    gitProperty?: outputs.appplatform.ConfigServerGitPropertyResponse;
}

/**
 * Property of git environment.
 */
export interface ConfigurationServiceGitPropertyResponse {
    /**
     * Repositories of Application Configuration Service git property.
     */
    repositories?: outputs.appplatform.ConfigurationServiceGitRepositoryResponse[];
}

/**
 * Git repository property payload for Application Configuration Service
 */
export interface ConfigurationServiceGitRepositoryResponse {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: string;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: string;
    /**
     * Label of the repository
     */
    label: string;
    /**
     * Name of the repository
     */
    name: string;
    /**
     * Password of git repository basic auth.
     */
    password?: string;
    /**
     * Collection of patterns of the repository
     */
    patterns: string[];
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: string;
    /**
     * Searching path of the repository
     */
    searchPaths?: string[];
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: boolean;
    /**
     * URI of the repository
     */
    uri: string;
    /**
     * Username of git repository basic auth.
     */
    username?: string;
}

/**
 * Collection of instances belong to the Application Configuration Service
 */
export interface ConfigurationServiceInstanceResponse {
    /**
     * Name of the Application Configuration Service instance
     */
    name: string;
    /**
     * Status of the Application Configuration Service instance
     */
    status: string;
}

/**
 * Application Configuration Service properties payload
 */
export interface ConfigurationServicePropertiesResponse {
    /**
     * Collection of instances belong to Application Configuration Service.
     */
    instances: outputs.appplatform.ConfigurationServiceInstanceResponse[];
    /**
     * State of the Application Configuration Service.
     */
    provisioningState: string;
    /**
     * The requested resource quantity for required CPU and Memory.
     */
    resourceRequests: outputs.appplatform.ConfigurationServiceResourceRequestsResponse;
    /**
     * The settings of Application Configuration Service.
     */
    settings?: outputs.appplatform.ConfigurationServiceSettingsResponse;
}

/**
 * Resource request payload of Application Configuration Service
 */
export interface ConfigurationServiceResourceRequestsResponse {
    /**
     * Cpu allocated to each Application Configuration Service instance
     */
    cpu: string;
    /**
     * Instance count of the Application Configuration Service
     */
    instanceCount: number;
    /**
     * Memory allocated to each Application Configuration Service instance
     */
    memory: string;
}

/**
 * The settings of Application Configuration Service.
 */
export interface ConfigurationServiceSettingsResponse {
    /**
     * Property of git environment.
     */
    gitProperty?: outputs.appplatform.ConfigurationServiceGitPropertyResponse;
}

/**
 * Custom domain of app resource payload.
 */
export interface CustomDomainPropertiesResponse {
    /**
     * The app name of domain.
     */
    appName: string;
    /**
     * The bound certificate name of domain.
     */
    certName?: string;
    /**
     * The thumbprint of bound certificate.
     */
    thumbprint?: string;
}

/**
 * Deployment instance payload
 */
export interface DeploymentInstanceResponse {
    /**
     * Discovery status of the deployment instance
     */
    discoveryStatus: string;
    /**
     * Name of the deployment instance
     */
    name: string;
    /**
     * Failed reason of the deployment instance
     */
    reason: string;
    /**
     * Start time of the deployment instance
     */
    startTime: string;
    /**
     * Status of the deployment instance
     */
    status: string;
}

/**
 * Deployment resource properties payload
 */
export interface DeploymentResourcePropertiesResponse {
    /**
     * Indicates whether the Deployment is active
     */
    active: boolean;
    /**
     * App name of the deployment
     */
    appName: string;
    /**
     * Date time when the resource is created
     */
    createdTime: string;
    /**
     * Deployment settings of the Deployment
     */
    deploymentSettings?: outputs.appplatform.DeploymentSettingsResponse;
    /**
     * Collection of instances belong to the Deployment
     */
    instances: outputs.appplatform.DeploymentInstanceResponse[];
    /**
     * Provisioning state of the Deployment
     */
    provisioningState: string;
    /**
     * Uploaded source information of the deployment.
     */
    source?: outputs.appplatform.UserSourceInfoResponse;
    /**
     * Status of the Deployment
     */
    status: string;
}
/**
 * deploymentResourcePropertiesResponseProvideDefaults sets the appropriate defaults for DeploymentResourcePropertiesResponse
 */
export function deploymentResourcePropertiesResponseProvideDefaults(val: DeploymentResourcePropertiesResponse): DeploymentResourcePropertiesResponse {
    return {
        ...val,
        deploymentSettings: (val.deploymentSettings ? outputs.appplatform.deploymentSettingsResponseProvideDefaults(val.deploymentSettings) : undefined),
    };
}

/**
 * Deployment settings payload
 */
export interface DeploymentSettingsResponse {
    /**
     * Required CPU, basic tier should be 1, standard tier should be in range (1, 4)
     */
    cpu?: number;
    /**
     * Collection of environment variables
     */
    environmentVariables?: {[key: string]: string};
    /**
     * JVM parameter
     */
    jvmOptions?: string;
    /**
     * Required Memory size in GB, basic tier should be in range (1, 2), standard tier should be in range (1, 8)
     */
    memoryInGB?: number;
    /**
     * The path to the .NET executable relative to zip root
     */
    netCoreMainEntryPath?: string;
    /**
     * Runtime version
     */
    runtimeVersion?: string;
}
/**
 * deploymentSettingsResponseProvideDefaults sets the appropriate defaults for DeploymentSettingsResponse
 */
export function deploymentSettingsResponseProvideDefaults(val: DeploymentSettingsResponse): DeploymentSettingsResponse {
    return {
        ...val,
        cpu: (val.cpu) ?? 1,
        memoryInGB: (val.memoryInGB) ?? 1,
        runtimeVersion: (val.runtimeVersion) ?? "Java_8",
    };
}

/**
 * The error code compose of code and message.
 */
export interface ErrorResponse {
    /**
     * The code of error.
     */
    code?: string;
    /**
     * The message of error.
     */
    message?: string;
}

/**
 * API metadata property for Spring Cloud Gateway
 */
export interface GatewayApiMetadataPropertiesResponse {
    /**
     * Detailed description of the APIs available on the Gateway instance (default: `Generated OpenAPI 3 document that describes the API routes configured.`)
     */
    description?: string;
    /**
     * Location of additional documentation for the APIs available on the Gateway instance
     */
    documentation?: string;
    /**
     * Base URL that API consumers will use to access APIs on the Gateway instance.
     */
    serverUrl?: string;
    /**
     * Title describing the context of the APIs available on the Gateway instance (default: `Spring Cloud Gateway for K8S`)
     */
    title?: string;
    /**
     * Version of APIs available on this Gateway instance (default: `unspecified`).
     */
    version?: string;
}

/**
 * API route config of the Spring Cloud Gateway
 */
export interface GatewayApiRouteResponse {
    /**
     * A description, will be applied to methods in the generated OpenAPI documentation.
     */
    description?: string;
    /**
     * To modify the request before sending it to the target endpoint, or the received response.
     */
    filters?: string[];
    /**
     * Route processing order.
     */
    order?: number;
    /**
     * A number of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
     */
    predicates?: string[];
    /**
     * Enable sso validation.
     */
    ssoEnabled?: boolean;
    /**
     * Classification tags, will be applied to methods in the generated OpenAPI documentation.
     */
    tags?: string[];
    /**
     * A title, will be applied to methods in the generated OpenAPI documentation.
     */
    title?: string;
    /**
     * Pass currently-authenticated user's identity token to application service, default is 'false'
     */
    tokenRelay?: boolean;
    /**
     * Full uri, will override `appName`.
     */
    uri?: string;
}

/**
 * Cross-Origin Resource Sharing property
 */
export interface GatewayCorsPropertiesResponse {
    /**
     * Whether user credentials are supported on cross-site requests. Valid values: `true`, `false`.
     */
    allowCredentials?: boolean;
    /**
     * Allowed headers in cross-site requests. The special value `*` allows actual requests to send any header.
     */
    allowedHeaders?: string[];
    /**
     * Allowed HTTP methods on cross-site requests. The special value `*` allows all methods. If not set, `GET` and `HEAD` are allowed by default.
     */
    allowedMethods?: string[];
    /**
     * Allowed origins to make cross-site requests. The special value `*` allows all domains.
     */
    allowedOrigins?: string[];
    /**
     * HTTP response headers to expose for cross-site requests.
     */
    exposedHeaders?: string[];
    /**
     * How long, in seconds, the response from a pre-flight request can be cached by clients.
     */
    maxAge?: number;
}

/**
 * The properties of custom domain for Spring Cloud Gateway
 */
export interface GatewayCustomDomainPropertiesResponse {
    /**
     * The thumbprint of bound certificate.
     */
    thumbprint?: string;
}

/**
 * Collection of instances belong to the Spring Cloud Gateway
 */
export interface GatewayInstanceResponse {
    /**
     * Name of the Spring Cloud Gateway instance
     */
    name: string;
    /**
     * Status of the Spring Cloud Gateway instance
     */
    status: string;
}

/**
 * Properties of the Spring Cloud Gateway Operator.
 */
export interface GatewayOperatorPropertiesResponse {
    /**
     * Collection of instances belong to Spring Cloud Gateway operator.
     */
    instances: outputs.appplatform.GatewayInstanceResponse[];
    /**
     * The requested resource quantity for required CPU and Memory.
     */
    resourceRequests: outputs.appplatform.GatewayOperatorResourceRequestsResponse;
}

/**
 * Properties of the Spring Cloud Gateway Operator.
 */
export interface GatewayOperatorResourceRequestsResponse {
    /**
     * Cpu allocated to each Spring Cloud Gateway Operator instance.
     */
    cpu: string;
    /**
     * Instance count of the Spring Cloud Gateway Operator.
     */
    instanceCount: number;
    /**
     * Memory allocated to each Spring Cloud Gateway Operator instance.
     */
    memory: string;
}

/**
 * Spring Cloud Gateway properties payload
 */
export interface GatewayPropertiesResponse {
    /**
     * API metadata property for Spring Cloud Gateway
     */
    apiMetadataProperties?: outputs.appplatform.GatewayApiMetadataPropertiesResponse;
    /**
     * Cross-Origin Resource Sharing property
     */
    corsProperties?: outputs.appplatform.GatewayCorsPropertiesResponse;
    /**
     * Indicate if only https is allowed.
     */
    httpsOnly?: boolean;
    /**
     * Collection of instances belong to Spring Cloud Gateway.
     */
    instances: outputs.appplatform.GatewayInstanceResponse[];
    /**
     * Properties of the Spring Cloud Gateway Operator.
     */
    operatorProperties: outputs.appplatform.GatewayOperatorPropertiesResponse;
    /**
     * State of the Spring Cloud Gateway.
     */
    provisioningState: string;
    /**
     * Indicates whether the Spring Cloud Gateway exposes endpoint.
     */
    public?: boolean;
    /**
     * The requested resource quantity for required CPU and Memory.
     */
    resourceRequests?: outputs.appplatform.GatewayResourceRequestsResponse;
    /**
     * Single sign-on related configuration
     */
    ssoProperties?: outputs.appplatform.SsoPropertiesResponse;
    /**
     * URL of the Spring Cloud Gateway, exposed when 'public' is true.
     */
    url: string;
}
/**
 * gatewayPropertiesResponseProvideDefaults sets the appropriate defaults for GatewayPropertiesResponse
 */
export function gatewayPropertiesResponseProvideDefaults(val: GatewayPropertiesResponse): GatewayPropertiesResponse {
    return {
        ...val,
        httpsOnly: (val.httpsOnly) ?? false,
        public: (val.public) ?? false,
        resourceRequests: (val.resourceRequests ? outputs.appplatform.gatewayResourceRequestsResponseProvideDefaults(val.resourceRequests) : undefined),
    };
}

/**
 * Resource request payload of Spring Cloud Gateway.
 */
export interface GatewayResourceRequestsResponse {
    /**
     * Cpu allocated to each Spring Cloud Gateway instance.
     */
    cpu?: string;
    /**
     * Memory allocated to each Spring Cloud Gateway instance.
     */
    memory?: string;
}
/**
 * gatewayResourceRequestsResponseProvideDefaults sets the appropriate defaults for GatewayResourceRequestsResponse
 */
export function gatewayResourceRequestsResponseProvideDefaults(val: GatewayResourceRequestsResponse): GatewayResourceRequestsResponse {
    return {
        ...val,
        cpu: (val.cpu) ?? "1",
        memory: (val.memory) ?? "2Gi",
    };
}

/**
 * API route config of the Spring Cloud Gateway
 */
export interface GatewayRouteConfigPropertiesResponse {
    /**
     * The resource Id of the Azure Spring Cloud app, required unless route defines `uri`.
     */
    appResourceId?: string;
    /**
     * State of the Spring Cloud Gateway route config.
     */
    provisioningState: string;
    /**
     * Array of API routes, each route contains properties such as `title`, `uri`, `ssoEnabled`, `predicates`, `filters`.
     */
    routes?: outputs.appplatform.GatewayApiRouteResponse[];
}

/**
 * Git repository property payload
 */
export interface GitPatternRepositoryResponse {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: string;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: string;
    /**
     * Label of the repository
     */
    label?: string;
    /**
     * Name of the repository
     */
    name: string;
    /**
     * Password of git repository basic auth.
     */
    password?: string;
    /**
     * Collection of pattern of the repository
     */
    pattern?: string[];
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: string;
    /**
     * Searching path of the repository
     */
    searchPaths?: string[];
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: boolean;
    /**
     * URI of the repository
     */
    uri: string;
    /**
     * Username of git repository basic auth.
     */
    username?: string;
}

/**
 * Managed identity properties retrieved from ARM request headers.
 */
export interface ManagedIdentityPropertiesResponse {
    /**
     * Principal Id
     */
    principalId?: string;
    /**
     * Tenant Id
     */
    tenantId?: string;
    /**
     * Type of the managed identity
     */
    type?: string;
}

/**
 * Monitoring Setting properties payload
 */
export interface MonitoringSettingPropertiesResponse {
    /**
     * Target application insight instrumentation key
     */
    appInsightsInstrumentationKey?: string;
    /**
     * Error when apply Monitoring Setting changes.
     */
    error?: outputs.appplatform.ErrorResponse;
    /**
     * State of the Monitoring Setting.
     */
    provisioningState: string;
    /**
     * Indicates whether enable the trace functionality
     */
    traceEnabled?: boolean;
}

/**
 * Service network profile payload
 */
export interface NetworkProfileResponse {
    /**
     * Name of the resource group containing network resources of Azure Spring Cloud Apps
     */
    appNetworkResourceGroup?: string;
    /**
     * Fully qualified resource Id of the subnet to host Azure Spring Cloud Apps
     */
    appSubnetId?: string;
    /**
     * Desired outbound IP resources for Azure Spring Cloud instance.
     */
    outboundIPs: outputs.appplatform.NetworkProfileResponseOutboundIPs;
    /**
     * Required inbound or outbound traffics for Azure Spring Cloud instance.
     */
    requiredTraffics: outputs.appplatform.RequiredTrafficResponse[];
    /**
     * Azure Spring Cloud service reserved CIDR
     */
    serviceCidr?: string;
    /**
     * Name of the resource group containing network resources of Azure Spring Cloud Service Runtime
     */
    serviceRuntimeNetworkResourceGroup?: string;
    /**
     * Fully qualified resource Id of the subnet to host Azure Spring Cloud Service Runtime
     */
    serviceRuntimeSubnetId?: string;
}

/**
 * Desired outbound IP resources for Azure Spring Cloud instance.
 */
export interface NetworkProfileResponseOutboundIPs {
    /**
     * A list of public IP addresses.
     */
    publicIPs: string[];
}

/**
 * Persistent disk payload
 */
export interface PersistentDiskResponse {
    /**
     * Mount path of the persistent disk
     */
    mountPath?: string;
    /**
     * Size of the persistent disk in GB
     */
    sizeInGB?: number;
    /**
     * Size of the used persistent disk in GB
     */
    usedInGB: number;
}

/**
 * Required inbound or outbound traffic for Azure Spring Cloud instance.
 */
export interface RequiredTrafficResponse {
    /**
     * The direction of required traffic
     */
    direction: string;
    /**
     * The FQDN list of required traffic
     */
    fqdns: string[];
    /**
     * The ip list of required traffic
     */
    ips: string[];
    /**
     * The port of required traffic
     */
    port: number;
    /**
     * The protocol of required traffic
     */
    protocol: string;
}

/**
 * Collection of instances belong to the Service Registry
 */
export interface ServiceRegistryInstanceResponse {
    /**
     * Name of the Service Registry instance
     */
    name: string;
    /**
     * Status of the Service Registry instance
     */
    status: string;
}

/**
 * Service Registry properties payload
 */
export interface ServiceRegistryPropertiesResponse {
    /**
     * Collection of instances belong to Service Registry.
     */
    instances: outputs.appplatform.ServiceRegistryInstanceResponse[];
    /**
     * State of the Service Registry.
     */
    provisioningState: string;
    /**
     * The requested resource quantity for required CPU and Memory.
     */
    resourceRequests: outputs.appplatform.ServiceRegistryResourceRequestsResponse;
}

/**
 * Resource request payload of Service Registry
 */
export interface ServiceRegistryResourceRequestsResponse {
    /**
     * Cpu allocated to each Service Registry instance
     */
    cpu: string;
    /**
     * Instance count of the Service Registry
     */
    instanceCount: number;
    /**
     * Memory allocated to each Service Registry instance
     */
    memory: string;
}

/**
 * Sku of Azure Spring Cloud
 */
export interface SkuResponse {
    /**
     * Current capacity of the target resource
     */
    capacity?: number;
    /**
     * Name of the Sku
     */
    name?: string;
    /**
     * Tier of the Sku
     */
    tier?: string;
}

/**
 * Single sign-on related configuration
 */
export interface SsoPropertiesResponse {
    /**
     * The public identifier for the application
     */
    clientId?: string;
    /**
     * The secret known only to the application and the authorization server
     */
    clientSecret?: string;
    /**
     * The URI of Issuer Identifier
     */
    issuerUri?: string;
    /**
     * It defines the specific actions applications can be allowed to do on a user's behalf
     */
    scope?: string[];
}

/**
 * KPack ClusterStack properties payload
 */
export interface StackPropertiesResponse {
    /**
     * Id of the ClusterStack.
     */
    id?: string;
    /**
     * Version of the ClusterStack
     */
    version?: string;
}

/**
 * storage resource of type Azure Storage Account.
 */
export interface StorageAccountResponse {
    /**
     * The account name of the Azure Storage Account.
     */
    accountName: string;
    /**
     * The type of the storage.
     * Expected value is 'StorageAccount'.
     */
    storageType: "StorageAccount";
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Temporary disk payload
 */
export interface TemporaryDiskResponse {
    /**
     * Mount path of the temporary disk
     */
    mountPath?: string;
    /**
     * Size of the temporary disk in GB
     */
    sizeInGB?: number;
}
/**
 * temporaryDiskResponseProvideDefaults sets the appropriate defaults for TemporaryDiskResponse
 */
export function temporaryDiskResponseProvideDefaults(val: TemporaryDiskResponse): TemporaryDiskResponse {
    return {
        ...val,
        mountPath: (val.mountPath) ?? "/tmp",
    };
}

/**
 * Source information for a deployment
 */
export interface UserSourceInfoResponse {
    /**
     * Selector for the artifact to be used for the deployment for multi-module projects. This should be
     * the relative path to the target module/project.
     */
    artifactSelector?: string;
    /**
     * Relative path of the storage which stores the source
     */
    relativePath?: string;
    /**
     * Type of the source uploaded
     */
    type?: string;
    /**
     * Version of the source
     */
    version?: string;
}

