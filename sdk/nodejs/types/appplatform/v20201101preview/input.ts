// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * App resource properties payload
 */
export interface AppResourcePropertiesArgs {
    /**
     * Name of the active deployment of the App
     */
    activeDeploymentName?: pulumi.Input<string>;
    /**
     * Indicate if end to end TLS is enabled.
     */
    enableEndToEndTLS?: pulumi.Input<boolean>;
    /**
     * Fully qualified dns Name.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * Indicate if only https is allowed.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * Persistent disk settings
     */
    persistentDisk?: pulumi.Input<inputs.appplatform.v20201101preview.PersistentDiskArgs>;
    /**
     * Indicates whether the App exposes public endpoint
     */
    public?: pulumi.Input<boolean>;
    /**
     * Temporary disk settings
     */
    temporaryDisk?: pulumi.Input<inputs.appplatform.v20201101preview.TemporaryDiskArgs>;
}
/**
 * appResourcePropertiesArgsProvideDefaults sets the appropriate defaults for AppResourcePropertiesArgs
 */
export function appResourcePropertiesArgsProvideDefaults(val: AppResourcePropertiesArgs): AppResourcePropertiesArgs {
    return {
        ...val,
        enableEndToEndTLS: (val.enableEndToEndTLS) ?? false,
        httpsOnly: (val.httpsOnly) ?? false,
        temporaryDisk: (val.temporaryDisk ? pulumi.output(val.temporaryDisk).apply(inputs.appplatform.v20201101preview.temporaryDiskArgsProvideDefaults) : undefined),
    };
}

/**
 * Binding resource properties payload
 */
export interface BindingResourcePropertiesArgs {
    /**
     * Binding parameters of the Binding resource
     */
    bindingParameters?: pulumi.Input<{[key: string]: any}>;
    /**
     * The key of the bound resource
     */
    key?: pulumi.Input<string>;
    /**
     * The Azure resource id of the bound resource
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * Certificate resource payload.
 */
export interface CertificatePropertiesArgs {
    /**
     * The certificate version of key vault.
     */
    certVersion?: pulumi.Input<string>;
    /**
     * The certificate name of key vault.
     */
    keyVaultCertName: pulumi.Input<string>;
    /**
     * The vault uri of user key vault.
     */
    vaultUri: pulumi.Input<string>;
}

/**
 * Service properties payload
 */
export interface ClusterResourcePropertiesArgs {
    /**
     * Network profile of the Service
     */
    networkProfile?: pulumi.Input<inputs.appplatform.v20201101preview.NetworkProfileArgs>;
}

/**
 * Property of git.
 */
export interface ConfigServerGitPropertyArgs {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: pulumi.Input<string>;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: pulumi.Input<string>;
    /**
     * Label of the repository
     */
    label?: pulumi.Input<string>;
    /**
     * Password of git repository basic auth.
     */
    password?: pulumi.Input<string>;
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Repositories of git.
     */
    repositories?: pulumi.Input<pulumi.Input<inputs.appplatform.v20201101preview.GitPatternRepositoryArgs>[]>;
    /**
     * Searching path of the repository
     */
    searchPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: pulumi.Input<boolean>;
    /**
     * URI of the repository
     */
    uri: pulumi.Input<string>;
    /**
     * Username of git repository basic auth.
     */
    username?: pulumi.Input<string>;
}

/**
 * Config server git properties payload
 */
export interface ConfigServerPropertiesArgs {
    /**
     * Settings of config server.
     */
    configServer?: pulumi.Input<inputs.appplatform.v20201101preview.ConfigServerSettingsArgs>;
    /**
     * Error when apply config server settings.
     */
    error?: pulumi.Input<inputs.appplatform.v20201101preview.ErrorArgs>;
}

/**
 * The settings of config server.
 */
export interface ConfigServerSettingsArgs {
    /**
     * Property of git environment.
     */
    gitProperty?: pulumi.Input<inputs.appplatform.v20201101preview.ConfigServerGitPropertyArgs>;
}

/**
 * Custom domain of app resource payload.
 */
export interface CustomDomainPropertiesArgs {
    /**
     * The bound certificate name of domain.
     */
    certName?: pulumi.Input<string>;
    /**
     * The thumbprint of bound certificate.
     */
    thumbprint?: pulumi.Input<string>;
}

/**
 * Deployment resource properties payload
 */
export interface DeploymentResourcePropertiesArgs {
    /**
     * Deployment settings of the Deployment
     */
    deploymentSettings?: pulumi.Input<inputs.appplatform.v20201101preview.DeploymentSettingsArgs>;
    /**
     * Uploaded source information of the deployment.
     */
    source?: pulumi.Input<inputs.appplatform.v20201101preview.UserSourceInfoArgs>;
}
/**
 * deploymentResourcePropertiesArgsProvideDefaults sets the appropriate defaults for DeploymentResourcePropertiesArgs
 */
export function deploymentResourcePropertiesArgsProvideDefaults(val: DeploymentResourcePropertiesArgs): DeploymentResourcePropertiesArgs {
    return {
        ...val,
        deploymentSettings: (val.deploymentSettings ? pulumi.output(val.deploymentSettings).apply(inputs.appplatform.v20201101preview.deploymentSettingsArgsProvideDefaults) : undefined),
    };
}

/**
 * Deployment settings payload
 */
export interface DeploymentSettingsArgs {
    /**
     * Required CPU, basic tier should be 1, standard tier should be in range (1, 4)
     */
    cpu?: pulumi.Input<number>;
    /**
     * Collection of environment variables
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * JVM parameter
     */
    jvmOptions?: pulumi.Input<string>;
    /**
     * Required Memory size in GB, basic tier should be in range (1, 2), standard tier should be in range (1, 8)
     */
    memoryInGB?: pulumi.Input<number>;
    /**
     * The path to the .NET executable relative to zip root
     */
    netCoreMainEntryPath?: pulumi.Input<string>;
    /**
     * Runtime version
     */
    runtimeVersion?: pulumi.Input<string | enums.appplatform.v20201101preview.RuntimeVersion>;
}
/**
 * deploymentSettingsArgsProvideDefaults sets the appropriate defaults for DeploymentSettingsArgs
 */
export function deploymentSettingsArgsProvideDefaults(val: DeploymentSettingsArgs): DeploymentSettingsArgs {
    return {
        ...val,
        cpu: (val.cpu) ?? 1,
        memoryInGB: (val.memoryInGB) ?? 1,
        runtimeVersion: (val.runtimeVersion) ?? "Java_8",
    };
}

/**
 * The error code compose of code and message.
 */
export interface ErrorArgs {
    /**
     * The code of error.
     */
    code?: pulumi.Input<string>;
    /**
     * The message of error.
     */
    message?: pulumi.Input<string>;
}

/**
 * Git repository property payload
 */
export interface GitPatternRepositoryArgs {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: pulumi.Input<string>;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: pulumi.Input<string>;
    /**
     * Label of the repository
     */
    label?: pulumi.Input<string>;
    /**
     * Name of the repository
     */
    name: pulumi.Input<string>;
    /**
     * Password of git repository basic auth.
     */
    password?: pulumi.Input<string>;
    /**
     * Collection of pattern of the repository
     */
    pattern?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Searching path of the repository
     */
    searchPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: pulumi.Input<boolean>;
    /**
     * URI of the repository
     */
    uri: pulumi.Input<string>;
    /**
     * Username of git repository basic auth.
     */
    username?: pulumi.Input<string>;
}

/**
 * Managed identity properties retrieved from ARM request headers.
 */
export interface ManagedIdentityPropertiesArgs {
    /**
     * Principal Id
     */
    principalId?: pulumi.Input<string>;
    /**
     * Tenant Id
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Type of the managed identity
     */
    type?: pulumi.Input<string | enums.appplatform.v20201101preview.ManagedIdentityType>;
}

/**
 * Monitoring Setting properties payload
 */
export interface MonitoringSettingPropertiesArgs {
    /**
     * Target application insight instrumentation key, null or whitespace include empty will disable monitoringSettings
     */
    appInsightsInstrumentationKey?: pulumi.Input<string>;
    /**
     * Indicates the sampling rate of application insight agent, should be in range [0.0, 100.0]
     */
    appInsightsSamplingRate?: pulumi.Input<number>;
    /**
     * Error when apply Monitoring Setting changes.
     */
    error?: pulumi.Input<inputs.appplatform.v20201101preview.ErrorArgs>;
    /**
     * Indicates whether enable the trace functionality, which will be deprecated since api version 2020-11-01-preview. Please leverage appInsightsInstrumentationKey to indicate if monitoringSettings enabled or not
     */
    traceEnabled?: pulumi.Input<boolean>;
}

/**
 * Service network profile payload
 */
export interface NetworkProfileArgs {
    /**
     * Name of the resource group containing network resources of Azure Spring Cloud Apps
     */
    appNetworkResourceGroup?: pulumi.Input<string>;
    /**
     * Fully qualified resource Id of the subnet to host Azure Spring Cloud Apps
     */
    appSubnetId?: pulumi.Input<string>;
    /**
     * Azure Spring Cloud service reserved CIDR
     */
    serviceCidr?: pulumi.Input<string>;
    /**
     * Name of the resource group containing network resources of Azure Spring Cloud Service Runtime
     */
    serviceRuntimeNetworkResourceGroup?: pulumi.Input<string>;
    /**
     * Fully qualified resource Id of the subnet to host Azure Spring Cloud Service Runtime
     */
    serviceRuntimeSubnetId?: pulumi.Input<string>;
}

/**
 * Persistent disk payload
 */
export interface PersistentDiskArgs {
    /**
     * Mount path of the persistent disk
     */
    mountPath?: pulumi.Input<string>;
    /**
     * Size of the persistent disk in GB
     */
    sizeInGB?: pulumi.Input<number>;
}

/**
 * Sku of Azure Spring Cloud
 */
export interface SkuArgs {
    /**
     * Current capacity of the target resource
     */
    capacity?: pulumi.Input<number>;
    /**
     * Name of the Sku
     */
    name?: pulumi.Input<string>;
    /**
     * Tier of the Sku
     */
    tier?: pulumi.Input<string>;
}
/**
 * skuArgsProvideDefaults sets the appropriate defaults for SkuArgs
 */
export function skuArgsProvideDefaults(val: SkuArgs): SkuArgs {
    return {
        ...val,
        name: (val.name) ?? "S0",
        tier: (val.tier) ?? "Standard",
    };
}

/**
 * Temporary disk payload
 */
export interface TemporaryDiskArgs {
    /**
     * Mount path of the temporary disk
     */
    mountPath?: pulumi.Input<string>;
    /**
     * Size of the temporary disk in GB
     */
    sizeInGB?: pulumi.Input<number>;
}
/**
 * temporaryDiskArgsProvideDefaults sets the appropriate defaults for TemporaryDiskArgs
 */
export function temporaryDiskArgsProvideDefaults(val: TemporaryDiskArgs): TemporaryDiskArgs {
    return {
        ...val,
        mountPath: (val.mountPath) ?? "/tmp",
    };
}

/**
 * Source information for a deployment
 */
export interface UserSourceInfoArgs {
    /**
     * Selector for the artifact to be used for the deployment for multi-module projects. This should be
     * the relative path to the target module/project.
     */
    artifactSelector?: pulumi.Input<string>;
    /**
     * Relative path of the storage which stores the source
     */
    relativePath?: pulumi.Input<string>;
    /**
     * Type of the source uploaded
     */
    type?: pulumi.Input<string | enums.appplatform.v20201101preview.UserSourceType>;
    /**
     * Version of the source
     */
    version?: pulumi.Input<string>;
}

