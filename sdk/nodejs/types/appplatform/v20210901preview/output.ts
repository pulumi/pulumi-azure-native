// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * App resource properties payload
 */
export interface AppResourcePropertiesResponse {
    /**
     * Name of the active deployment of the App
     */
    activeDeploymentName?: string;
    /**
     * Date time when the resource is created
     */
    createdTime: string;
    /**
     * List of custom persistent disks
     */
    customPersistentDisks?: outputs.appplatform.v20210901preview.CustomPersistentDiskResourceResponse[];
    /**
     * Indicate if end to end TLS is enabled.
     */
    enableEndToEndTLS?: boolean;
    /**
     * Fully qualified dns Name.
     */
    fqdn?: string;
    /**
     * Indicate if only https is allowed.
     */
    httpsOnly?: boolean;
    /**
     * Collection of loaded certificates
     */
    loadedCertificates?: outputs.appplatform.v20210901preview.LoadedCertificateResponse[];
    /**
     * Persistent disk settings
     */
    persistentDisk?: outputs.appplatform.v20210901preview.PersistentDiskResponse;
    /**
     * Provisioning state of the App
     */
    provisioningState: string;
    /**
     * Indicates whether the App exposes public endpoint
     */
    public?: boolean;
    /**
     * Temporary disk settings
     */
    temporaryDisk?: outputs.appplatform.v20210901preview.TemporaryDiskResponse;
    /**
     * URL of the App
     */
    url: string;
}
/**
 * appResourcePropertiesResponseProvideDefaults sets the appropriate defaults for AppResourcePropertiesResponse
 */
export function appResourcePropertiesResponseProvideDefaults(val: AppResourcePropertiesResponse): AppResourcePropertiesResponse {
    return {
        ...val,
        enableEndToEndTLS: (val.enableEndToEndTLS) ?? false,
        httpsOnly: (val.httpsOnly) ?? false,
        temporaryDisk: (val.temporaryDisk ? outputs.appplatform.v20210901preview.temporaryDiskResponseProvideDefaults(val.temporaryDisk) : undefined),
    };
}

/**
 * Application Insights agent versions properties payload
 */
export interface ApplicationInsightsAgentVersionsResponse {
    /**
     * Indicates the version of application insight java agent
     */
    java: string;
}

/**
 * The properties of the Azure File volume. Azure File shares are mounted as volumes.
 */
export interface AzureFileVolumeResponse {
    /**
     * These are the mount options for a persistent disk.
     */
    mountOptions?: string[];
    /**
     * The mount path of the persistent disk.
     */
    mountPath: string;
    /**
     * Indicates whether the persistent disk is a readOnly one.
     */
    readOnly?: boolean;
    /**
     * The share name of the Azure File share.
     */
    shareName: string;
    /**
     * The type of the underlying resource to mount as a persistent disk.
     * Expected value is 'AzureFileVolume'.
     */
    type: "AzureFileVolume";
}

/**
 * Binding resource properties payload
 */
export interface BindingResourcePropertiesResponse {
    /**
     * Binding parameters of the Binding resource
     */
    bindingParameters?: {[key: string]: any};
    /**
     * Creation time of the Binding resource
     */
    createdAt: string;
    /**
     * The generated Spring Boot property file for this binding. The secret will be deducted.
     */
    generatedProperties: string;
    /**
     * The key of the bound resource
     */
    key?: string;
    /**
     * The Azure resource id of the bound resource
     */
    resourceId?: string;
    /**
     * The name of the bound resource
     */
    resourceName: string;
    /**
     * The standard Azure resource type of the bound resource
     */
    resourceType: string;
    /**
     * Update time of the Binding resource
     */
    updatedAt: string;
}

/**
 * Service properties payload
 */
export interface ClusterResourcePropertiesResponse {
    /**
     * Network profile of the Service
     */
    networkProfile?: outputs.appplatform.v20210901preview.NetworkProfileResponse;
    /**
     * Power state of the Service
     */
    powerState: string;
    /**
     * Provisioning state of the Service
     */
    provisioningState: string;
    /**
     * ServiceInstanceEntity GUID which uniquely identifies a created resource
     */
    serviceId: string;
    /**
     * Version of the Service
     */
    version: number;
}

/**
 * Property of git.
 */
export interface ConfigServerGitPropertyResponse {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: string;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: string;
    /**
     * Label of the repository
     */
    label?: string;
    /**
     * Password of git repository basic auth.
     */
    password?: string;
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: string;
    /**
     * Repositories of git.
     */
    repositories?: outputs.appplatform.v20210901preview.GitPatternRepositoryResponse[];
    /**
     * Searching path of the repository
     */
    searchPaths?: string[];
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: boolean;
    /**
     * URI of the repository
     */
    uri: string;
    /**
     * Username of git repository basic auth.
     */
    username?: string;
}

/**
 * Config server git properties payload
 */
export interface ConfigServerPropertiesResponse {
    /**
     * Settings of config server.
     */
    configServer?: outputs.appplatform.v20210901preview.ConfigServerSettingsResponse;
    /**
     * Error when apply config server settings.
     */
    error?: outputs.appplatform.v20210901preview.ErrorResponse;
    /**
     * State of the config server.
     */
    provisioningState: string;
}

/**
 * The settings of config server.
 */
export interface ConfigServerSettingsResponse {
    /**
     * Property of git environment.
     */
    gitProperty?: outputs.appplatform.v20210901preview.ConfigServerGitPropertyResponse;
}

/**
 * Properties of certificate imported from key vault.
 */
export interface ContentCertificatePropertiesResponse {
    /**
     * The activate date of certificate.
     */
    activateDate: string;
    /**
     * The domain list of certificate.
     */
    dnsNames: string[];
    /**
     * The expiration date of certificate.
     */
    expirationDate: string;
    /**
     * The issue date of certificate.
     */
    issuedDate: string;
    /**
     * The issuer of certificate.
     */
    issuer: string;
    /**
     * The subject name of certificate.
     */
    subjectName: string;
    /**
     * The thumbprint of certificate.
     */
    thumbprint: string;
    /**
     * The type of the certificate source.
     * Expected value is 'ContentCertificate'.
     */
    type: "ContentCertificate";
}

/**
 * Custom container payload
 */
export interface CustomContainerResponse {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided.
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.
     */
    command?: string[];
    /**
     * Container image of the custom container. This should be in the form of <repository>:<tag> without the server name of the registry
     */
    containerImage?: string;
    /**
     * Credential of the image registry
     */
    imageRegistryCredential?: outputs.appplatform.v20210901preview.ImageRegistryCredentialResponse;
    /**
     * The name of the registry that contains the container image
     */
    server?: string;
}

/**
 * Custom domain of app resource payload.
 */
export interface CustomDomainPropertiesResponse {
    /**
     * The app name of domain.
     */
    appName: string;
    /**
     * The bound certificate name of domain.
     */
    certName?: string;
    /**
     * The thumbprint of bound certificate.
     */
    thumbprint?: string;
}

/**
 * Custom persistent disk resource payload.
 */
export interface CustomPersistentDiskResourceResponse {
    /**
     * Properties of the custom persistent disk resource payload.
     */
    customPersistentDiskProperties?: outputs.appplatform.v20210901preview.AzureFileVolumeResponse;
    /**
     * The resource id of Azure Spring Cloud Storage resource.
     */
    storageId: string;
}

/**
 * Deployment instance payload
 */
export interface DeploymentInstanceResponse {
    /**
     * Discovery status of the deployment instance
     */
    discoveryStatus: string;
    /**
     * Name of the deployment instance
     */
    name: string;
    /**
     * Failed reason of the deployment instance
     */
    reason: string;
    /**
     * Start time of the deployment instance
     */
    startTime: string;
    /**
     * Status of the deployment instance
     */
    status: string;
}

/**
 * Deployment resource properties payload
 */
export interface DeploymentResourcePropertiesResponse {
    /**
     * Indicates whether the Deployment is active
     */
    active: boolean;
    /**
     * App name of the deployment
     */
    appName: string;
    /**
     * Date time when the resource is created
     */
    createdTime: string;
    /**
     * Deployment settings of the Deployment
     */
    deploymentSettings?: outputs.appplatform.v20210901preview.DeploymentSettingsResponse;
    /**
     * Collection of instances belong to the Deployment
     */
    instances: outputs.appplatform.v20210901preview.DeploymentInstanceResponse[];
    /**
     * Provisioning state of the Deployment
     */
    provisioningState: string;
    /**
     * Uploaded source information of the deployment.
     */
    source?: outputs.appplatform.v20210901preview.UserSourceInfoResponse;
    /**
     * Status of the Deployment
     */
    status: string;
}
/**
 * deploymentResourcePropertiesResponseProvideDefaults sets the appropriate defaults for DeploymentResourcePropertiesResponse
 */
export function deploymentResourcePropertiesResponseProvideDefaults(val: DeploymentResourcePropertiesResponse): DeploymentResourcePropertiesResponse {
    return {
        ...val,
        deploymentSettings: (val.deploymentSettings ? outputs.appplatform.v20210901preview.deploymentSettingsResponseProvideDefaults(val.deploymentSettings) : undefined),
    };
}

/**
 * Deployment settings payload
 */
export interface DeploymentSettingsResponse {
    /**
     * Container liveness and readiness probe settings
     */
    containerProbeSettings?: outputs.appplatform.v20210901preview.DeploymentSettingsResponseContainerProbeSettings;
    /**
     * Required CPU. This should be 1 for Basic tier, and in range [1, 4] for Standard tier. This is deprecated starting from API version 2021-09-01-preview. Please use the resourceRequests field to set the CPU size.
     */
    cpu?: number;
    /**
     * Collection of environment variables
     */
    environmentVariables?: {[key: string]: string};
    /**
     * JVM parameter
     */
    jvmOptions?: string;
    /**
     * Required Memory size in GB. This should be in range [1, 2] for Basic tier, and in range [1, 8] for Standard tier. This is deprecated starting from API version 2021-09-01-preview. Please use the resourceRequests field to set the the memory size.
     */
    memoryInGB?: number;
    /**
     * The path to the .NET executable relative to zip root
     */
    netCoreMainEntryPath?: string;
    /**
     * The requested resource quantity for required CPU and Memory. It is recommended that using this field to represent the required CPU and Memory, the old field cpu and memoryInGB will be deprecated later.
     */
    resourceRequests?: outputs.appplatform.v20210901preview.ResourceRequestsResponse;
    /**
     * Runtime version
     */
    runtimeVersion?: string;
}
/**
 * deploymentSettingsResponseProvideDefaults sets the appropriate defaults for DeploymentSettingsResponse
 */
export function deploymentSettingsResponseProvideDefaults(val: DeploymentSettingsResponse): DeploymentSettingsResponse {
    return {
        ...val,
        cpu: (val.cpu) ?? 1,
        memoryInGB: (val.memoryInGB) ?? 1,
        runtimeVersion: (val.runtimeVersion) ?? "Java_8",
    };
}

/**
 * Container liveness and readiness probe settings
 */
export interface DeploymentSettingsResponseContainerProbeSettings {
    /**
     * Indicates whether disable the liveness and readiness probe
     */
    disableProbe?: boolean;
}

/**
 * The error code compose of code and message.
 */
export interface ErrorResponse {
    /**
     * The code of error.
     */
    code?: string;
    /**
     * The message of error.
     */
    message?: string;
}

/**
 * Git repository property payload
 */
export interface GitPatternRepositoryResponse {
    /**
     * Public sshKey of git repository.
     */
    hostKey?: string;
    /**
     * SshKey algorithm of git repository.
     */
    hostKeyAlgorithm?: string;
    /**
     * Label of the repository
     */
    label?: string;
    /**
     * Name of the repository
     */
    name: string;
    /**
     * Password of git repository basic auth.
     */
    password?: string;
    /**
     * Collection of pattern of the repository
     */
    pattern?: string[];
    /**
     * Private sshKey algorithm of git repository.
     */
    privateKey?: string;
    /**
     * Searching path of the repository
     */
    searchPaths?: string[];
    /**
     * Strict host key checking or not.
     */
    strictHostKeyChecking?: boolean;
    /**
     * URI of the repository
     */
    uri: string;
    /**
     * Username of git repository basic auth.
     */
    username?: string;
}

/**
 * Credential of the image registry
 */
export interface ImageRegistryCredentialResponse {
    /**
     * The password of the image registry credential
     */
    password?: string;
    /**
     * The username of the image registry credential
     */
    username?: string;
}

/**
 * Properties of certificate imported from key vault.
 */
export interface KeyVaultCertificatePropertiesResponse {
    /**
     * The activate date of certificate.
     */
    activateDate: string;
    /**
     * The certificate version of key vault.
     */
    certVersion?: string;
    /**
     * The domain list of certificate.
     */
    dnsNames: string[];
    /**
     * Optional. If set to true, it will not import private key from key vault.
     */
    excludePrivateKey?: boolean;
    /**
     * The expiration date of certificate.
     */
    expirationDate: string;
    /**
     * The issue date of certificate.
     */
    issuedDate: string;
    /**
     * The issuer of certificate.
     */
    issuer: string;
    /**
     * The certificate name of key vault.
     */
    keyVaultCertName: string;
    /**
     * The subject name of certificate.
     */
    subjectName: string;
    /**
     * The thumbprint of certificate.
     */
    thumbprint: string;
    /**
     * The type of the certificate source.
     * Expected value is 'KeyVaultCertificate'.
     */
    type: "KeyVaultCertificate";
    /**
     * The vault uri of user key vault.
     */
    vaultUri: string;
}
/**
 * keyVaultCertificatePropertiesResponseProvideDefaults sets the appropriate defaults for KeyVaultCertificatePropertiesResponse
 */
export function keyVaultCertificatePropertiesResponseProvideDefaults(val: KeyVaultCertificatePropertiesResponse): KeyVaultCertificatePropertiesResponse {
    return {
        ...val,
        excludePrivateKey: (val.excludePrivateKey) ?? false,
    };
}

/**
 * Loaded certificate payload
 */
export interface LoadedCertificateResponse {
    /**
     * Indicate whether the certificate will be loaded into default trust store, only work for Java runtime.
     */
    loadTrustStore?: boolean;
    /**
     * Resource Id of loaded certificate
     */
    resourceId: string;
}
/**
 * loadedCertificateResponseProvideDefaults sets the appropriate defaults for LoadedCertificateResponse
 */
export function loadedCertificateResponseProvideDefaults(val: LoadedCertificateResponse): LoadedCertificateResponse {
    return {
        ...val,
        loadTrustStore: (val.loadTrustStore) ?? false,
    };
}

/**
 * Managed identity properties retrieved from ARM request headers.
 */
export interface ManagedIdentityPropertiesResponse {
    /**
     * Principal Id
     */
    principalId?: string;
    /**
     * Tenant Id
     */
    tenantId?: string;
    /**
     * Type of the managed identity
     */
    type?: string;
}

/**
 * Monitoring Setting properties payload
 */
export interface MonitoringSettingPropertiesResponse {
    /**
     * Indicates the versions of application insight agent
     */
    appInsightsAgentVersions?: outputs.appplatform.v20210901preview.ApplicationInsightsAgentVersionsResponse;
    /**
     * Target application insight instrumentation key, null or whitespace include empty will disable monitoringSettings
     */
    appInsightsInstrumentationKey?: string;
    /**
     * Indicates the sampling rate of application insight agent, should be in range [0.0, 100.0]
     */
    appInsightsSamplingRate?: number;
    /**
     * Error when apply Monitoring Setting changes.
     */
    error?: outputs.appplatform.v20210901preview.ErrorResponse;
    /**
     * State of the Monitoring Setting.
     */
    provisioningState: string;
    /**
     * Indicates whether enable the trace functionality, which will be deprecated since api version 2020-11-01-preview. Please leverage appInsightsInstrumentationKey to indicate if monitoringSettings enabled or not
     */
    traceEnabled?: boolean;
}

/**
 * Service network profile payload
 */
export interface NetworkProfileResponse {
    /**
     * Name of the resource group containing network resources of Azure Spring Cloud Apps
     */
    appNetworkResourceGroup?: string;
    /**
     * Fully qualified resource Id of the subnet to host Azure Spring Cloud Apps
     */
    appSubnetId?: string;
    /**
     * Desired outbound IP resources for Azure Spring Cloud instance.
     */
    outboundIPs: outputs.appplatform.v20210901preview.NetworkProfileResponseOutboundIPs;
    /**
     * Required inbound or outbound traffics for Azure Spring Cloud instance.
     */
    requiredTraffics: outputs.appplatform.v20210901preview.RequiredTrafficResponse[];
    /**
     * Azure Spring Cloud service reserved CIDR
     */
    serviceCidr?: string;
    /**
     * Name of the resource group containing network resources of Azure Spring Cloud Service Runtime
     */
    serviceRuntimeNetworkResourceGroup?: string;
    /**
     * Fully qualified resource Id of the subnet to host Azure Spring Cloud Service Runtime
     */
    serviceRuntimeSubnetId?: string;
}

/**
 * Desired outbound IP resources for Azure Spring Cloud instance.
 */
export interface NetworkProfileResponseOutboundIPs {
    /**
     * A list of public IP addresses.
     */
    publicIPs: string[];
}

/**
 * Persistent disk payload
 */
export interface PersistentDiskResponse {
    /**
     * Mount path of the persistent disk
     */
    mountPath?: string;
    /**
     * Size of the persistent disk in GB
     */
    sizeInGB?: number;
    /**
     * Size of the used persistent disk in GB
     */
    usedInGB: number;
}

/**
 * Required inbound or outbound traffic for Azure Spring Cloud instance.
 */
export interface RequiredTrafficResponse {
    /**
     * The direction of required traffic
     */
    direction: string;
    /**
     * The FQDN list of required traffic
     */
    fqdns: string[];
    /**
     * The ip list of required traffic
     */
    ips: string[];
    /**
     * The port of required traffic
     */
    port: number;
    /**
     * The protocol of required traffic
     */
    protocol: string;
}

/**
 * Deployment resource request payload
 */
export interface ResourceRequestsResponse {
    /**
     * Required CPU. 1 core can be represented by 1 or 1000m. This should be 500m or 1 for Basic tier, and {500m, 1, 2, 3, 4} for Standard tier.
     */
    cpu?: string;
    /**
     * Required memory. 1 GB can be represented by 1Gi or 1024Mi. This should be {512Mi, 1Gi, 2Gi} for Basic tier, and {512Mi, 1Gi, 2Gi, ..., 8Gi} for Standard tier.
     */
    memory?: string;
}

/**
 * Sku of Azure Spring Cloud
 */
export interface SkuResponse {
    /**
     * Current capacity of the target resource
     */
    capacity?: number;
    /**
     * Name of the Sku
     */
    name?: string;
    /**
     * Tier of the Sku
     */
    tier?: string;
}
/**
 * skuResponseProvideDefaults sets the appropriate defaults for SkuResponse
 */
export function skuResponseProvideDefaults(val: SkuResponse): SkuResponse {
    return {
        ...val,
        name: (val.name) ?? "S0",
        tier: (val.tier) ?? "Standard",
    };
}

/**
 * storage resource of type Azure Storage Account.
 */
export interface StorageAccountResponse {
    /**
     * The account name of the Azure Storage Account.
     */
    accountName: string;
    /**
     * The type of the storage.
     * Expected value is 'StorageAccount'.
     */
    storageType: "StorageAccount";
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Temporary disk payload
 */
export interface TemporaryDiskResponse {
    /**
     * Mount path of the temporary disk
     */
    mountPath?: string;
    /**
     * Size of the temporary disk in GB
     */
    sizeInGB?: number;
}
/**
 * temporaryDiskResponseProvideDefaults sets the appropriate defaults for TemporaryDiskResponse
 */
export function temporaryDiskResponseProvideDefaults(val: TemporaryDiskResponse): TemporaryDiskResponse {
    return {
        ...val,
        mountPath: (val.mountPath) ?? "/tmp",
    };
}

/**
 * Source information for a deployment
 */
export interface UserSourceInfoResponse {
    /**
     * Selector for the artifact to be used for the deployment for multi-module projects. This should be
     * the relative path to the target module/project.
     */
    artifactSelector?: string;
    /**
     * Custom container payload
     */
    customContainer?: outputs.appplatform.v20210901preview.CustomContainerResponse;
    /**
     * Relative path of the storage which stores the source
     */
    relativePath?: string;
    /**
     * Type of the source uploaded
     */
    type?: string;
    /**
     * Version of the source
     */
    version?: string;
}

