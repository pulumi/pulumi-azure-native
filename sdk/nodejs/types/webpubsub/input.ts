// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20210401preview from "./v20210401preview/input";
export * as v20210601preview from "./v20210601preview/input";
export * as v20210901preview from "./v20210901preview/input";
export * as v20211001 from "./v20211001/input";
export * as v20220801preview from "./v20220801preview/input";
/**
 * Properties of event handler.
 */
export interface EventHandlerArgs {
    /**
     * Upstream auth settings. If not set, no auth is used for upstream messages.
     */
    auth?: pulumi.Input<inputs.webpubsub.UpstreamAuthSettingsArgs>;
    /**
     * Gets ot sets the list of system events.
     */
    systemEvents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
     * For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can't contains parameters.
     */
    urlTemplate: pulumi.Input<string>;
    /**
     * Gets or sets the matching pattern for event names.
     * There are 3 kind of patterns supported:
     *     1. "*", it to matches any event name
     *     2. Combine multiple events with ",", for example "event1,event2", it matches event "event1" and "event2"
     *     3. The single event name, for example, "event1", it matches "event1"
     */
    userEventPattern?: pulumi.Input<string>;
}

/**
 * The settings for event handler in webpubsub service
 */
export interface EventHandlerSettingsArgs {
    /**
     * Get or set the EventHandler items. The key is the hub name and the value is the corresponding EventHandlerTemplate.
     */
    items?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<inputs.webpubsub.EventHandlerTemplateArgs>[]>}>;
}

/**
 * EventHandler template item settings.
 */
export interface EventHandlerTemplateArgs {
    /**
     * Gets or sets the auth settings for an event handler. If not set, no auth is used.
     */
    auth?: pulumi.Input<inputs.webpubsub.UpstreamAuthSettingsArgs>;
    /**
     * Gets ot sets the system event pattern.
     * There are 2 kind of patterns supported:
     *     1. The single event name, for example, "connect", it matches "connect"
     *     2. Combine multiple events with ",", for example "connect,disconnected", it matches event "connect" and "disconnected"
     */
    systemEventPattern?: pulumi.Input<string>;
    /**
     * Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
     * For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can't contains parameters.
     */
    urlTemplate: pulumi.Input<string>;
    /**
     * Gets or sets the matching pattern for event names.
     * There are 3 kind of patterns supported:
     *     1. "*", it to matches any event name
     *     2. Combine multiple events with ",", for example "event1,event2", it matches event "event1" and "event2"
     *     3. The single event name, for example, "event1", it matches "event1"
     */
    userEventPattern?: pulumi.Input<string>;
}

/**
 * A class represent managed identities used for request and response
 */
export interface ManagedIdentityArgs {
    /**
     * Represent the identity type: systemAssigned, userAssigned, None
     */
    type?: pulumi.Input<string | enums.webpubsub.ManagedIdentityType>;
    /**
     * Get or set the user assigned identities
     */
    userAssignedIdentities?: pulumi.Input<{[key: string]: any}>;
}

/**
 * Managed identity settings for upstream.
 */
export interface ManagedIdentitySettingsArgs {
    /**
     * The Resource indicating the App ID URI of the target resource.
     * It also appears in the aud (audience) claim of the issued token.
     */
    resource?: pulumi.Input<string>;
}

/**
 * Network ACL
 */
export interface NetworkACLArgs {
    /**
     * Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
     */
    allow?: pulumi.Input<pulumi.Input<string | enums.webpubsub.WebPubSubRequestType>[]>;
    /**
     * Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
     */
    deny?: pulumi.Input<pulumi.Input<string | enums.webpubsub.WebPubSubRequestType>[]>;
}

/**
 * Private endpoint
 */
export interface PrivateEndpointArgs {
    /**
     * Full qualified Id of the private endpoint
     */
    id?: pulumi.Input<string>;
}

/**
 * ACL for a private endpoint
 */
export interface PrivateEndpointACLArgs {
    /**
     * Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
     */
    allow?: pulumi.Input<pulumi.Input<string | enums.webpubsub.WebPubSubRequestType>[]>;
    /**
     * Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
     */
    deny?: pulumi.Input<pulumi.Input<string | enums.webpubsub.WebPubSubRequestType>[]>;
    /**
     * Name of the private endpoint connection
     */
    name: pulumi.Input<string>;
}

/**
 * Connection state of the private endpoint connection
 */
export interface PrivateLinkServiceConnectionStateArgs {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: pulumi.Input<string>;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: pulumi.Input<string | enums.webpubsub.PrivateLinkServiceConnectionStatus>;
}

/**
 * The billing information of the resource.
 */
export interface ResourceSkuArgs {
    /**
     * Optional, integer. The unit count of the resource. 1 by default.
     * 
     * If present, following values are allowed:
     *     Free: 1
     *     Standard: 1,2,5,10,20,50,100
     */
    capacity?: pulumi.Input<number>;
    /**
     * The name of the SKU. Required.
     * 
     * Allowed values: Standard_S1, Free_F1
     */
    name: pulumi.Input<string>;
    /**
     * Optional tier of this particular SKU. 'Standard' or 'Free'. 
     * 
     * `Basic` is deprecated, use `Standard` instead.
     */
    tier?: pulumi.Input<string | enums.webpubsub.WebPubSubSkuTier>;
}

/**
 * Upstream auth settings. If not set, no auth is used for upstream messages.
 */
export interface UpstreamAuthSettingsArgs {
    /**
     * Managed identity settings for upstream.
     */
    managedIdentity?: pulumi.Input<inputs.webpubsub.ManagedIdentitySettingsArgs>;
    /**
     * Upstream auth type enum.
     */
    type?: pulumi.Input<string | enums.webpubsub.UpstreamAuthType>;
}

/**
 * Feature of a resource, which controls the runtime behavior.
 */
export interface WebPubSubFeatureArgs {
    /**
     * FeatureFlags is the supported features of Azure SignalR service.
     *  - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
     *  - EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log category respectively.
     *  - EnableLiveTrace: Live Trace allows you to know what's happening inside Azure SignalR service, it will give you live traces in real time, it will be helpful when you developing your own Azure SignalR based web application or self-troubleshooting some issues. Please note that live traces are counted as outbound messages that will be charged. Values allowed: "true"/"false", to enable/disable live trace feature.
     *  
     */
    flag: pulumi.Input<string | enums.webpubsub.FeatureFlags>;
    /**
     * Optional properties related to this feature.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
     */
    value: pulumi.Input<string>;
}

/**
 * Properties of a hub.
 */
export interface WebPubSubHubPropertiesArgs {
    /**
     * The settings for configuring if anonymous connections are allowed for this hub: "allow" or "deny". Default to "deny".
     */
    anonymousConnectPolicy?: pulumi.Input<string>;
    /**
     * Event handler of a hub.
     */
    eventHandlers?: pulumi.Input<pulumi.Input<inputs.webpubsub.EventHandlerArgs>[]>;
}
/**
 * webPubSubHubPropertiesArgsProvideDefaults sets the appropriate defaults for WebPubSubHubPropertiesArgs
 */
export function webPubSubHubPropertiesArgsProvideDefaults(val: WebPubSubHubPropertiesArgs): WebPubSubHubPropertiesArgs {
    return {
        ...val,
        anonymousConnectPolicy: (val.anonymousConnectPolicy) ?? "deny",
    };
}

/**
 * Network ACLs for the resource
 */
export interface WebPubSubNetworkACLsArgs {
    /**
     * Default action when no other rule matches
     */
    defaultAction?: pulumi.Input<string | enums.webpubsub.ACLAction>;
    /**
     * ACLs for requests from private endpoints
     */
    privateEndpoints?: pulumi.Input<pulumi.Input<inputs.webpubsub.PrivateEndpointACLArgs>[]>;
    /**
     * ACL for requests from public network
     */
    publicNetwork?: pulumi.Input<inputs.webpubsub.NetworkACLArgs>;
}
/**
 * webPubSubNetworkACLsArgsProvideDefaults sets the appropriate defaults for WebPubSubNetworkACLsArgs
 */
export function webPubSubNetworkACLsArgsProvideDefaults(val: WebPubSubNetworkACLsArgs): WebPubSubNetworkACLsArgs {
    return {
        ...val,
        defaultAction: (val.defaultAction) ?? "Deny",
    };
}

/**
 * TLS settings for the resource
 */
export interface WebPubSubTlsSettingsArgs {
    /**
     * Request client certificate during TLS handshake if enabled
     */
    clientCertEnabled?: pulumi.Input<boolean>;
}
/**
 * webPubSubTlsSettingsArgsProvideDefaults sets the appropriate defaults for WebPubSubTlsSettingsArgs
 */
export function webPubSubTlsSettingsArgsProvideDefaults(val: WebPubSubTlsSettingsArgs): WebPubSubTlsSettingsArgs {
    return {
        ...val,
        clientCertEnabled: (val.clientCertEnabled) ?? true,
    };
}

