// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20180301preview from "./v20180301preview/input";
export * as v20181119 from "./v20181119/input";
export * as v20190501 from "./v20190501/input";
export * as v20190601 from "./v20190601/input";
export * as v20191101 from "./v20191101/input";
export * as v20200101 from "./v20200101/input";
export * as v20200218preview from "./v20200218preview/input";
export * as v20200301 from "./v20200301/input";
export * as v20200401 from "./v20200401/input";
export * as v20200501preview from "./v20200501preview/input";
export * as v20200515preview from "./v20200515preview/input";
export * as v20200601 from "./v20200601/input";
export * as v20200801 from "./v20200801/input";
export * as v20200901preview from "./v20200901preview/input";
export * as v20210101 from "./v20210101/input";
export * as v20210301preview from "./v20210301preview/input";
export * as v20210401 from "./v20210401/input";
export * as v20210701 from "./v20210701/input";
export * as v20220101preview from "./v20220101preview/input";
export * as v20220201preview from "./v20220201preview/input";
export * as v20220501 from "./v20220501/input";
export * as v20220601preview from "./v20220601preview/input";
export * as v20221001 from "./v20221001/input";
export * as v20221001preview from "./v20221001preview/input";
/**
 * Details of the data collection options specified.
 */
export interface ACIServiceCreateRequestDataCollectionArgs {
    /**
     * Option for enabling/disabling Event Hub.
     */
    eventHubEnabled?: pulumi.Input<boolean>;
    /**
     * Option for enabling/disabling storage.
     */
    storageEnabled?: pulumi.Input<boolean>;
}

/**
 * The encryption properties.
 */
export interface ACIServiceCreateRequestEncryptionPropertiesArgs {
    /**
     * Encryption Key name
     */
    keyName: pulumi.Input<string>;
    /**
     * Encryption Key Version
     */
    keyVersion: pulumi.Input<string>;
    /**
     * vault base Url
     */
    vaultBaseUrl: pulumi.Input<string>;
}

/**
 * The virtual network configuration.
 */
export interface ACIServiceCreateRequestVnetConfigurationArgs {
    /**
     * The name of the virtual network subnet.
     */
    subnetName?: pulumi.Input<string>;
    /**
     * The name of the virtual network.
     */
    vnetName?: pulumi.Input<string>;
}

/**
 * A Machine Learning compute based on AKS.
 */
export interface AKSArgs {
    /**
     * Location for the underlying compute
     */
    computeLocation?: pulumi.Input<string>;
    /**
     * The type of compute
     * Expected value is 'AKS'.
     */
    computeType: pulumi.Input<"AKS">;
    /**
     * The description of the Machine Learning compute.
     */
    description?: pulumi.Input<string>;
    /**
     * AKS properties
     */
    properties?: pulumi.Input<inputs.machinelearningservices.AKSPropertiesArgs>;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: pulumi.Input<string>;
}
/**
 * aksargsProvideDefaults sets the appropriate defaults for AKSArgs
 */
export function aksargsProvideDefaults(val: AKSArgs): AKSArgs {
    return {
        ...val,
        properties: (val.properties ? pulumi.output(val.properties).apply(inputs.machinelearningservices.akspropertiesArgsProvideDefaults) : undefined),
    };
}

/**
 * AKS properties
 */
export interface AKSPropertiesArgs {
    /**
     * Number of agents
     */
    agentCount?: pulumi.Input<number>;
    /**
     * Agent virtual machine size
     */
    agentVmSize?: pulumi.Input<string>;
    /**
     * AKS networking configuration for vnet
     */
    aksNetworkingConfiguration?: pulumi.Input<inputs.machinelearningservices.AksNetworkingConfigurationArgs>;
    /**
     * Cluster full qualified domain name
     */
    clusterFqdn?: pulumi.Input<string>;
    /**
     * Intended usage of the cluster
     */
    clusterPurpose?: pulumi.Input<string | enums.machinelearningservices.ClusterPurpose>;
    /**
     * SSL configuration
     */
    sslConfiguration?: pulumi.Input<inputs.machinelearningservices.SslConfigurationArgs>;
}
/**
 * akspropertiesArgsProvideDefaults sets the appropriate defaults for AKSPropertiesArgs
 */
export function akspropertiesArgsProvideDefaults(val: AKSPropertiesArgs): AKSPropertiesArgs {
    return {
        ...val,
        clusterPurpose: (val.clusterPurpose) ?? "FastProd",
    };
}

/**
 * The auto scaler properties.
 */
export interface AKSServiceCreateRequestAutoScalerArgs {
    /**
     * Option to enable/disable auto scaling.
     */
    autoscaleEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum number of replicas in the cluster.
     */
    maxReplicas?: pulumi.Input<number>;
    /**
     * The minimum number of replicas to scale down to.
     */
    minReplicas?: pulumi.Input<number>;
    /**
     * The amount of seconds to wait between auto scale updates.
     */
    refreshPeriodInSeconds?: pulumi.Input<number>;
    /**
     * The target utilization percentage to use for determining whether to scale the cluster.
     */
    targetUtilization?: pulumi.Input<number>;
}

/**
 * Details of the data collection options specified.
 */
export interface AKSServiceCreateRequestDataCollectionArgs {
    /**
     * Option for enabling/disabling Event Hub.
     */
    eventHubEnabled?: pulumi.Input<boolean>;
    /**
     * Option for enabling/disabling storage.
     */
    storageEnabled?: pulumi.Input<boolean>;
}

/**
 * The liveness probe requirements.
 */
export interface AKSServiceCreateRequestLivenessProbeRequirementsArgs {
    /**
     * The number of failures to allow before returning an unhealthy status.
     */
    failureThreshold?: pulumi.Input<number>;
    /**
     * The delay before the first probe in seconds.
     */
    initialDelaySeconds?: pulumi.Input<number>;
    /**
     * The length of time between probes in seconds.
     */
    periodSeconds?: pulumi.Input<number>;
    /**
     * The number of successful probes before returning a healthy status.
     */
    successThreshold?: pulumi.Input<number>;
    /**
     * The probe timeout in seconds.
     */
    timeoutSeconds?: pulumi.Input<number>;
}

/**
 * Advance configuration for AKS networking
 */
export interface AksNetworkingConfigurationArgs {
    /**
     * An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
     */
    dnsServiceIP?: pulumi.Input<string>;
    /**
     * A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
     */
    dockerBridgeCidr?: pulumi.Input<string>;
    /**
     * A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
     */
    serviceCidr?: pulumi.Input<string>;
    /**
     * Virtual network subnet resource ID the compute nodes belong to
     */
    subnetId?: pulumi.Input<string>;
}

/**
 * An Azure Machine Learning compute.
 */
export interface AmlComputeArgs {
    /**
     * Location for the underlying compute
     */
    computeLocation?: pulumi.Input<string>;
    /**
     * The type of compute
     * Expected value is 'AmlCompute'.
     */
    computeType: pulumi.Input<"AmlCompute">;
    /**
     * The description of the Machine Learning compute.
     */
    description?: pulumi.Input<string>;
    /**
     * AML Compute properties
     */
    properties?: pulumi.Input<inputs.machinelearningservices.AmlComputePropertiesArgs>;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: pulumi.Input<string>;
}
/**
 * amlComputeArgsProvideDefaults sets the appropriate defaults for AmlComputeArgs
 */
export function amlComputeArgsProvideDefaults(val: AmlComputeArgs): AmlComputeArgs {
    return {
        ...val,
        properties: (val.properties ? pulumi.output(val.properties).apply(inputs.machinelearningservices.amlComputePropertiesArgsProvideDefaults) : undefined),
    };
}

/**
 * AML Compute properties
 */
export interface AmlComputePropertiesArgs {
    /**
     * Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
     */
    enableNodePublicIp?: pulumi.Input<boolean>;
    /**
     * Network is isolated or not
     */
    isolatedNetwork?: pulumi.Input<boolean>;
    /**
     * Compute OS Type
     */
    osType?: pulumi.Input<string | enums.machinelearningservices.OsType>;
    /**
     * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
     */
    remoteLoginPortPublicAccess?: pulumi.Input<string | enums.machinelearningservices.RemoteLoginPortPublicAccess>;
    /**
     * Scale settings for AML Compute
     */
    scaleSettings?: pulumi.Input<inputs.machinelearningservices.ScaleSettingsArgs>;
    /**
     * Virtual network subnet resource ID the compute nodes belong to.
     */
    subnet?: pulumi.Input<inputs.machinelearningservices.ResourceIdArgs>;
    /**
     * Credentials for an administrator user account that will be created on each compute node.
     */
    userAccountCredentials?: pulumi.Input<inputs.machinelearningservices.UserAccountCredentialsArgs>;
    /**
     * Virtual Machine image for AML Compute - windows only
     */
    virtualMachineImage?: pulumi.Input<inputs.machinelearningservices.VirtualMachineImageArgs>;
    /**
     * Virtual Machine priority
     */
    vmPriority?: pulumi.Input<string | enums.machinelearningservices.VmPriority>;
    /**
     * Virtual Machine Size
     */
    vmSize?: pulumi.Input<string>;
}
/**
 * amlComputePropertiesArgsProvideDefaults sets the appropriate defaults for AmlComputePropertiesArgs
 */
export function amlComputePropertiesArgsProvideDefaults(val: AmlComputePropertiesArgs): AmlComputePropertiesArgs {
    return {
        ...val,
        enableNodePublicIp: (val.enableNodePublicIp) ?? true,
        osType: (val.osType) ?? "Linux",
        remoteLoginPortPublicAccess: (val.remoteLoginPortPublicAccess) ?? "NotSpecified",
        scaleSettings: (val.scaleSettings ? pulumi.output(val.scaleSettings).apply(inputs.machinelearningservices.scaleSettingsArgsProvideDefaults) : undefined),
    };
}

/**
 * AML Token identity configuration.
 */
export interface AmlTokenArgs {
    /**
     * Enum to determine identity framework.
     * Expected value is 'AMLToken'.
     */
    identityType: pulumi.Input<"AMLToken">;
}

/**
 * A user that can be assigned to a compute instance.
 */
export interface AssignedUserArgs {
    /**
     * User’s AAD Object Id.
     */
    objectId: pulumi.Input<string>;
    /**
     * User’s AAD Tenant Id.
     */
    tenantId: pulumi.Input<string>;
}

export interface AutoScaleSettingsArgs {
    /**
     * Maximum number of instances for this deployment.
     */
    maxInstances?: pulumi.Input<number>;
    /**
     * Minimum number of instances for this deployment.
     */
    minInstances?: pulumi.Input<number>;
    /**
     * The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
     */
    pollingInterval?: pulumi.Input<string>;
    /**
     *
     * Expected value is 'Auto'.
     */
    scaleType: pulumi.Input<"Auto">;
    /**
     * Target CPU usage for the autoscaler.
     */
    targetUtilizationPercentage?: pulumi.Input<number>;
}

/**
 * Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation.
 */
export interface BanditPolicyArgs {
    /**
     * Number of intervals by which to delay the first evaluation.
     */
    delayEvaluation?: pulumi.Input<number>;
    /**
     * Interval (number of runs) between policy evaluations.
     */
    evaluationInterval?: pulumi.Input<number>;
    /**
     *
     * Expected value is 'Bandit'.
     */
    policyType: pulumi.Input<"Bandit">;
    /**
     * Absolute distance allowed from the best performing run.
     */
    slackAmount?: pulumi.Input<number>;
    /**
     * Ratio of the allowed distance from the best performing run.
     */
    slackFactor?: pulumi.Input<number>;
}

/**
 * Batch inference settings per deployment.
 */
export interface BatchDeploymentArgs {
    /**
     * Code configuration for the endpoint deployment.
     */
    codeConfiguration?: pulumi.Input<inputs.machinelearningservices.CodeConfigurationArgs>;
    /**
     * Configuration for compute binding.
     */
    compute?: pulumi.Input<inputs.machinelearningservices.ComputeConfigurationArgs>;
    /**
     * Description of the endpoint deployment.
     */
    description?: pulumi.Input<string>;
    /**
     * ARM resource ID of the environment specification for the endpoint deployment.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Environment variables configuration for the deployment.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue].
     * For FileDataset, this value is the count of file failures.
     * For TabularDataset, this value is the count of record failures.
     * If set to -1 (the lower bound), all failures during batch inference will be ignored.
     */
    errorThreshold?: pulumi.Input<number>;
    /**
     * Logging level for batch inference operation.
     */
    loggingLevel?: pulumi.Input<string | enums.machinelearningservices.BatchLoggingLevel>;
    /**
     * Size of the mini-batch passed to each batch invocation.
     * For FileDataset, this is the number of files per mini-batch.
     * For TabularDataset, this is the size of the records in bytes, per mini-batch.
     */
    miniBatchSize?: pulumi.Input<number>;
    /**
     * Reference to the model asset for the endpoint deployment.
     */
    model?: pulumi.Input<inputs.machinelearningservices.DataPathAssetReferenceArgs | inputs.machinelearningservices.IdAssetReferenceArgs | inputs.machinelearningservices.OutputPathAssetReferenceArgs>;
    /**
     * Output configuration for the batch inference operation.
     */
    outputConfiguration?: pulumi.Input<inputs.machinelearningservices.BatchOutputConfigurationArgs>;
    /**
     * Partition keys list used for Named partitioning.
     */
    partitionKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Retry Settings for the batch inference operation.
     */
    retrySettings?: pulumi.Input<inputs.machinelearningservices.BatchRetrySettingsArgs>;
}

/**
 * Batch endpoint configuration.
 */
export interface BatchEndpointArgs {
    /**
     * [Required] Inference endpoint authentication mode type
     */
    authMode?: pulumi.Input<string | enums.machinelearningservices.EndpointAuthMode>;
    /**
     * Description of the inference endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * EndpointAuthKeys to set initially on an Endpoint.
     * This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
     */
    keys?: pulumi.Input<inputs.machinelearningservices.EndpointAuthKeysArgs>;
    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Traffic rules on how the traffic will be routed across deployments.
     */
    traffic?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
}

/**
 * Batch inference output configuration.
 */
export interface BatchOutputConfigurationArgs {
    /**
     * Customized output file name for append_row output action.
     */
    appendRowFileName?: pulumi.Input<string>;
    /**
     * Indicates how the output will be organized.
     */
    outputAction?: pulumi.Input<string | enums.machinelearningservices.BatchOutputAction>;
}

/**
 * Retry settings for a batch inference operation.
 */
export interface BatchRetrySettingsArgs {
    /**
     * Maximum retry count for a mini-batch
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Invocation timeout for a mini-batch, in ISO 8601 format.
     */
    timeout?: pulumi.Input<string>;
}

/**
 * Configuration for a scoring code asset.
 */
export interface CodeConfigurationArgs {
    /**
     * ARM resource ID of the code asset.
     */
    codeId?: pulumi.Input<string>;
    /**
     * [Required] The script to execute on startup. eg. "score.py"
     */
    scoringScript: pulumi.Input<string>;
}

/**
 * Container for code asset versions.
 */
export interface CodeContainerArgs {
    /**
     * The asset description text.
     */
    description?: pulumi.Input<string>;
    /**
     * The asset property dictionary.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Code asset version details.
 */
export interface CodeVersionArgs {
    /**
     * ARM resource ID of the datastore where the asset is located.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * The asset description text.
     */
    description?: pulumi.Input<string>;
    /**
     * If the name version are system generated (anonymous registration).
     */
    isAnonymous?: pulumi.Input<boolean>;
    /**
     * [Required] The path of the file/directory in the datastore.
     */
    path: pulumi.Input<string>;
    /**
     * The asset property dictionary.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Command job definition.
 */
export interface CommandJobArgs {
    /**
     * ARM resource ID of the code asset.
     */
    codeId?: pulumi.Input<string>;
    /**
     * [Required] The command to execute on startup of the job. eg. "python train.py"
     */
    command: pulumi.Input<string>;
    /**
     * [Required] Compute binding for the job.
     */
    compute: pulumi.Input<inputs.machinelearningservices.ComputeConfigurationArgs>;
    /**
     * The asset description text.
     */
    description?: pulumi.Input<string>;
    /**
     * Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
     */
    distribution?: pulumi.Input<inputs.machinelearningservices.MpiArgs | inputs.machinelearningservices.PyTorchArgs | inputs.machinelearningservices.TensorFlowArgs>;
    /**
     * The ARM resource ID of the Environment specification for the job.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Environment variables included in the job.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
     */
    experimentName?: pulumi.Input<string>;
    /**
     * Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, or null.
     * Defaults to AmlToken if null.
     */
    identity?: pulumi.Input<inputs.machinelearningservices.AmlTokenArgs | inputs.machinelearningservices.ManagedIdentityArgs>;
    /**
     * Mapping of input data bindings used in the job.
     */
    inputDataBindings?: pulumi.Input<{[key: string]: pulumi.Input<inputs.machinelearningservices.InputDataBindingArgs>}>;
    /**
     * Enum to determine the type of job.
     * Expected value is 'Command'.
     */
    jobType: pulumi.Input<"Command">;
    /**
     * Mapping of output data bindings used in the job.
     */
    outputDataBindings?: pulumi.Input<{[key: string]: pulumi.Input<inputs.machinelearningservices.OutputDataBindingArgs>}>;
    /**
     * Job priority for scheduling policy. Only applies to AMLCompute.
     * Private preview feature and only available to users on the allow list.
     */
    priority?: pulumi.Input<number>;
    /**
     * The asset property dictionary.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
     */
    timeout?: pulumi.Input<string>;
}

/**
 * Component container definition.
 * <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
 */
export interface ComponentContainerArgs {
    /**
     * The asset description text.
     */
    description?: pulumi.Input<string>;
    /**
     * Is the asset archived?
     */
    isArchived?: pulumi.Input<boolean>;
    /**
     * The asset property dictionary.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
/**
 * componentContainerArgsProvideDefaults sets the appropriate defaults for ComponentContainerArgs
 */
export function componentContainerArgsProvideDefaults(val: ComponentContainerArgs): ComponentContainerArgs {
    return {
        ...val,
        isArchived: (val.isArchived) ?? false,
    };
}

/**
 * Definition of a component version: defines resources that span component types.
 */
export interface ComponentVersionArgs {
    /**
     * Defines Component definition details.
     * <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
     */
    componentSpec?: any;
    /**
     * The asset description text.
     */
    description?: pulumi.Input<string>;
    /**
     * If the name version are system generated (anonymous registration).
     */
    isAnonymous?: pulumi.Input<boolean>;
    /**
     * Is the asset archived?
     */
    isArchived?: pulumi.Input<boolean>;
    /**
     * The asset property dictionary.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
/**
 * componentVersionArgsProvideDefaults sets the appropriate defaults for ComponentVersionArgs
 */
export function componentVersionArgsProvideDefaults(val: ComponentVersionArgs): ComponentVersionArgs {
    return {
        ...val,
        isAnonymous: (val.isAnonymous) ?? false,
        isArchived: (val.isArchived) ?? false,
    };
}

/**
 * Compute binding definition.
 */
export interface ComputeBindingArgs {
    /**
     * ID of the compute resource.
     */
    computeId?: pulumi.Input<string>;
    /**
     * Number of nodes.
     */
    nodeCount?: pulumi.Input<number>;
}

/**
 * Configuration for compute binding.
 */
export interface ComputeConfigurationArgs {
    /**
     * Number of instances or nodes.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * SKU type to run on.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * Set to true for jobs running on local compute.
     */
    isLocal?: pulumi.Input<boolean>;
    /**
     * Location for virtual cluster run.
     */
    location?: pulumi.Input<string>;
    /**
     * Additional properties.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ARM resource ID of the Compute you are targeting. If not provided the resource will be deployed as Managed.
     */
    target?: pulumi.Input<string>;
}

/**
 * An Azure Machine Learning compute instance.
 */
export interface ComputeInstanceArgs {
    /**
     * Location for the underlying compute
     */
    computeLocation?: pulumi.Input<string>;
    /**
     * The type of compute
     * Expected value is 'ComputeInstance'.
     */
    computeType: pulumi.Input<"ComputeInstance">;
    /**
     * The description of the Machine Learning compute.
     */
    description?: pulumi.Input<string>;
    /**
     * Compute Instance properties
     */
    properties?: pulumi.Input<inputs.machinelearningservices.ComputeInstancePropertiesArgs>;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: pulumi.Input<string>;
}
/**
 * computeInstanceArgsProvideDefaults sets the appropriate defaults for ComputeInstanceArgs
 */
export function computeInstanceArgsProvideDefaults(val: ComputeInstanceArgs): ComputeInstanceArgs {
    return {
        ...val,
        properties: (val.properties ? pulumi.output(val.properties).apply(inputs.machinelearningservices.computeInstancePropertiesArgsProvideDefaults) : undefined),
    };
}

/**
 * Compute Instance properties
 */
export interface ComputeInstancePropertiesArgs {
    /**
     * Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
     */
    applicationSharingPolicy?: pulumi.Input<string | enums.machinelearningservices.ApplicationSharingPolicy>;
    /**
     * The Compute Instance Authorization type. Available values are personal (default).
     */
    computeInstanceAuthorizationType?: pulumi.Input<string | enums.machinelearningservices.ComputeInstanceAuthorizationType>;
    /**
     * Settings for a personal compute instance.
     */
    personalComputeInstanceSettings?: pulumi.Input<inputs.machinelearningservices.PersonalComputeInstanceSettingsArgs>;
    /**
     * Details of customized scripts to execute for setting up the cluster.
     */
    setupScripts?: pulumi.Input<inputs.machinelearningservices.SetupScriptsArgs>;
    /**
     * Specifies policy and settings for SSH access.
     */
    sshSettings?: pulumi.Input<inputs.machinelearningservices.ComputeInstanceSshSettingsArgs>;
    /**
     * Virtual network subnet resource ID the compute nodes belong to.
     */
    subnet?: pulumi.Input<inputs.machinelearningservices.ResourceIdArgs>;
    /**
     * Virtual Machine Size
     */
    vmSize?: pulumi.Input<string>;
}
/**
 * computeInstancePropertiesArgsProvideDefaults sets the appropriate defaults for ComputeInstancePropertiesArgs
 */
export function computeInstancePropertiesArgsProvideDefaults(val: ComputeInstancePropertiesArgs): ComputeInstancePropertiesArgs {
    return {
        ...val,
        applicationSharingPolicy: (val.applicationSharingPolicy) ?? "Shared",
        computeInstanceAuthorizationType: (val.computeInstanceAuthorizationType) ?? "personal",
        sshSettings: (val.sshSettings ? pulumi.output(val.sshSettings).apply(inputs.machinelearningservices.computeInstanceSshSettingsArgsProvideDefaults) : undefined),
    };
}

/**
 * Specifies policy and settings for SSH access.
 */
export interface ComputeInstanceSshSettingsArgs {
    /**
     * Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
     */
    adminPublicKey?: pulumi.Input<string>;
    /**
     * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
     */
    sshPublicAccess?: pulumi.Input<string | enums.machinelearningservices.SshPublicAccess>;
}
/**
 * computeInstanceSshSettingsArgsProvideDefaults sets the appropriate defaults for ComputeInstanceSshSettingsArgs
 */
export function computeInstanceSshSettingsArgsProvideDefaults(val: ComputeInstanceSshSettingsArgs): ComputeInstanceSshSettingsArgs {
    return {
        ...val,
        sshPublicAccess: (val.sshPublicAccess) ?? "Disabled",
    };
}

/**
 * The resource requirements for the container (cpu and memory).
 */
export interface ContainerResourceRequirementsArgs {
    /**
     * The minimum amount of CPU cores to be used by the container. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    cpu?: pulumi.Input<number>;
    /**
     * The maximum amount of CPU cores allowed to be used by the container. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * The number of FPGA PCIE devices exposed to the container. Must be multiple of 2.
     */
    fpga?: pulumi.Input<number>;
    /**
     * The number of GPU cores in the container.
     */
    gpu?: pulumi.Input<number>;
    /**
     * The minimum amount of memory (in GB) to be used by the container. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    memoryInGB?: pulumi.Input<number>;
    /**
     * The maximum amount of memory (in GB) allowed to be used by the container. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    memoryInGBLimit?: pulumi.Input<number>;
}

export interface CosmosDbSettingsArgs {
    /**
     * The throughput of the collections in cosmosdb database
     */
    collectionsThroughput?: pulumi.Input<number>;
}

/**
 * The Environment, models and assets needed for inferencing.
 */
export interface CreateServiceRequestEnvironmentImageRequestArgs {
    /**
     * The list of assets.
     */
    assets?: pulumi.Input<pulumi.Input<inputs.machinelearningservices.ImageAssetArgs>[]>;
    /**
     * The name of the driver file.
     */
    driverProgram?: pulumi.Input<string>;
    /**
     * The details of the AZURE ML environment.
     */
    environment?: pulumi.Input<inputs.machinelearningservices.EnvironmentImageRequestEnvironmentArgs>;
    /**
     * The unique identifying details of the AZURE ML environment.
     */
    environmentReference?: pulumi.Input<inputs.machinelearningservices.EnvironmentImageRequestEnvironmentReferenceArgs>;
    /**
     * The list of model Ids.
     */
    modelIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of models.
     */
    models?: pulumi.Input<pulumi.Input<inputs.machinelearningservices.ModelArgs>[]>;
}

/**
 * The authentication keys.
 */
export interface CreateServiceRequestKeysArgs {
    /**
     * The primary key.
     */
    primaryKey?: pulumi.Input<string>;
    /**
     * The secondary key.
     */
    secondaryKey?: pulumi.Input<string>;
}

/**
 * Container for data asset versions.
 */
export interface DataContainerArgs {
    /**
     * The asset description text.
     */
    description?: pulumi.Input<string>;
    /**
     * The asset property dictionary.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * A DataFactory compute.
 */
export interface DataFactoryArgs {
    /**
     * Location for the underlying compute
     */
    computeLocation?: pulumi.Input<string>;
    /**
     * The type of compute
     * Expected value is 'DataFactory'.
     */
    computeType: pulumi.Input<"DataFactory">;
    /**
     * The description of the Machine Learning compute.
     */
    description?: pulumi.Input<string>;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * A DataLakeAnalytics compute.
 */
export interface DataLakeAnalyticsArgs {
    /**
     * Location for the underlying compute
     */
    computeLocation?: pulumi.Input<string>;
    /**
     * The type of compute
     * Expected value is 'DataLakeAnalytics'.
     */
    computeType: pulumi.Input<"DataLakeAnalytics">;
    /**
     * The description of the Machine Learning compute.
     */
    description?: pulumi.Input<string>;
    properties?: pulumi.Input<inputs.machinelearningservices.DataLakeAnalyticsPropertiesArgs>;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: pulumi.Input<string>;
}

export interface DataLakeAnalyticsPropertiesArgs {
    /**
     * DataLake Store Account Name
     */
    dataLakeStoreAccountName?: pulumi.Input<string>;
}

/**
 * Reference to an asset via its path in a datastore.
 */
export interface DataPathAssetReferenceArgs {
    /**
     * ARM resource ID of the datastore where the asset is located.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * The path of the file/directory in the datastore.
     */
    path?: pulumi.Input<string>;
    /**
     * Enum to determine which reference method to use for an asset.
     * Expected value is 'DataPath'.
     */
    referenceType: pulumi.Input<"DataPath">;
}

/**
 * Data asset version details.
 */
export interface DataVersionArgs {
    /**
     * The Format of dataset.
     */
    datasetType?: pulumi.Input<string | enums.machinelearningservices.DatasetType>;
    /**
     * ARM resource ID of the datastore where the asset is located.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * The asset description text.
     */
    description?: pulumi.Input<string>;
    /**
     * If the name version are system generated (anonymous registration).
     */
    isAnonymous?: pulumi.Input<boolean>;
    /**
     * [Required] The path of the file/directory in the datastore.
     */
    path: pulumi.Input<string>;
    /**
     * The asset property dictionary.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * A DataFactory compute.
 */
export interface DatabricksArgs {
    /**
     * Location for the underlying compute
     */
    computeLocation?: pulumi.Input<string>;
    /**
     * The type of compute
     * Expected value is 'Databricks'.
     */
    computeType: pulumi.Input<"Databricks">;
    /**
     * The description of the Machine Learning compute.
     */
    description?: pulumi.Input<string>;
    properties?: pulumi.Input<inputs.machinelearningservices.DatabricksPropertiesArgs>;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: pulumi.Input<string>;
}

export interface DatabricksPropertiesArgs {
    /**
     * Databricks access token
     */
    databricksAccessToken?: pulumi.Input<string>;
    /**
     * Workspace Url
     */
    workspaceUrl?: pulumi.Input<string>;
}

export interface DatasetCreateRequestDataPathArgs {
    /**
     * The datastore name.
     */
    datastoreName?: pulumi.Input<string>;
    /**
     * Path within the datastore.
     */
    relativePath?: pulumi.Input<string>;
}

export interface DatasetCreateRequestParametersArgs {
    /**
     * Header type.
     */
    header?: pulumi.Input<string | enums.machinelearningservices.Header>;
    /**
     * Boolean to keep path information as column in the dataset. Defaults to False. This is useful when reading multiple files, and want to know which file a particular record originated from, or to keep useful information in file path.
     */
    includePath?: pulumi.Input<boolean>;
    /**
     * The partition information of each path will be extracted into columns based on the specified format. Format part '{column_name}' creates string column, and '{column_name:yyyy/MM/dd/HH/mm/ss}' creates datetime column, where 'yyyy', 'MM', 'dd', 'HH', 'mm' and 'ss' are used to extract year, month, day, hour, minute and second for the datetime type. The format should start from the position of first partition key until the end of file path. For example, given the path '../USA/2019/01/01/data.parquet' where the partition is by country/region and time, partition_format='/{CountryOrRegion}/{PartitionDate:yyyy/MM/dd}/data.csv' creates a string column 'CountryOrRegion' with the value 'USA' and a datetime column 'PartitionDate' with the value '2019-01-01
     */
    partitionFormat?: pulumi.Input<string>;
    path?: pulumi.Input<inputs.machinelearningservices.DatasetCreateRequestPathArgs>;
    query?: pulumi.Input<inputs.machinelearningservices.DatasetCreateRequestQueryArgs>;
    /**
     * The separator used to split columns for 'delimited_files' sourceType.
     */
    separator?: pulumi.Input<string>;
    /**
     * Data source type.
     */
    sourceType?: pulumi.Input<string | enums.machinelearningservices.SourceType>;
}
/**
 * datasetCreateRequestParametersArgsProvideDefaults sets the appropriate defaults for DatasetCreateRequestParametersArgs
 */
export function datasetCreateRequestParametersArgsProvideDefaults(val: DatasetCreateRequestParametersArgs): DatasetCreateRequestParametersArgs {
    return {
        ...val,
        includePath: (val.includePath) ?? false,
    };
}

export interface DatasetCreateRequestPathArgs {
    dataPath?: pulumi.Input<inputs.machinelearningservices.DatasetCreateRequestDataPathArgs>;
    /**
     * The Http URL.
     */
    httpUrl?: pulumi.Input<string>;
}

export interface DatasetCreateRequestQueryArgs {
    /**
     * The SQL/PostgreSQL/MySQL datastore name.
     */
    datastoreName?: pulumi.Input<string>;
    /**
     * SQL Quey.
     */
    query?: pulumi.Input<string>;
}

export interface DatasetCreateRequestRegistrationArgs {
    /**
     * The description for the dataset.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the dataset.
     */
    name?: pulumi.Input<string>;
    /**
     * Tags associated with the dataset.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DatasetCreateRequestTimeSeriesArgs {
    /**
     * Column name to be used as CoarseGrainTimestamp. Can only be used if 'fineGrainTimestamp' is specified and cannot be same as 'fineGrainTimestamp'.
     */
    coarseGrainTimestamp?: pulumi.Input<string>;
    /**
     *  Column name to be used as FineGrainTimestamp
     */
    fineGrainTimestamp?: pulumi.Input<string>;
}

/**
 * The dataset reference object.
 */
export interface DatasetReferenceArgs {
    /**
     * The id of the dataset reference.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the dataset reference.
     */
    name?: pulumi.Input<string>;
}

/**
 * Class to represent configuration settings for Docker Build
 */
export interface DockerBuildArgs {
    /**
     * Path to a snapshot of the Docker Context. This property is only valid if Dockerfile is specified.
     * The path is relative to the asset path which must contain a single Blob URI value.
     * <seealso href="https://docs.docker.com/engine/context/working-with-contexts/" />
     */
    context?: pulumi.Input<string>;
    /**
     * Enum to determine docker specification type. Must be either Build or Image.
     * Expected value is 'Build'.
     */
    dockerSpecificationType: pulumi.Input<"Build">;
    /**
     * [Required] Docker command line instructions to assemble an image.
     * <seealso href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments" />
     */
    dockerfile: pulumi.Input<string>;
    /**
     * The platform information of the docker image.
     */
    platform?: pulumi.Input<inputs.machinelearningservices.DockerImagePlatformArgs>;
}

/**
 * Class to represent configuration settings for Docker Build
 */
export interface DockerImageArgs {
    /**
     * [Required] Image name of a custom base image.
     * <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
     */
    dockerImageUri: pulumi.Input<string>;
    /**
     * Enum to determine docker specification type. Must be either Build or Image.
     * Expected value is 'Image'.
     */
    dockerSpecificationType: pulumi.Input<"Image">;
    /**
     * The platform information of the docker image.
     */
    platform?: pulumi.Input<inputs.machinelearningservices.DockerImagePlatformArgs>;
}

export interface DockerImagePlatformArgs {
    /**
     * The OS type the Environment.
     */
    operatingSystemType?: pulumi.Input<string | enums.machinelearningservices.OperatingSystemType>;
}

export interface EncryptionPropertyArgs {
    /**
     * The identity that will be used to access the key vault for encryption at rest.
     */
    identity?: pulumi.Input<inputs.machinelearningservices.IdentityForCmkArgs>;
    /**
     * Customer Key vault properties.
     */
    keyVaultProperties: pulumi.Input<inputs.machinelearningservices.KeyVaultPropertiesArgs>;
    /**
     * Indicates whether or not the encryption is enabled for the workspace.
     */
    status: pulumi.Input<string | enums.machinelearningservices.EncryptionStatus>;
}

/**
 * Keys for endpoint authentication.
 */
export interface EndpointAuthKeysArgs {
    /**
     * The primary key.
     */
    primaryKey?: pulumi.Input<string>;
    /**
     * The secondary key.
     */
    secondaryKey?: pulumi.Input<string>;
}

/**
 * Container for environment specification versions.
 */
export interface EnvironmentContainerArgs {
    /**
     * The asset description text.
     */
    description?: pulumi.Input<string>;
    /**
     * The asset property dictionary.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The details of the AZURE ML environment.
 */
export interface EnvironmentImageRequestEnvironmentArgs {
    /**
     * The definition of a Docker container.
     */
    docker?: pulumi.Input<inputs.machinelearningservices.ModelEnvironmentDefinitionDockerArgs>;
    /**
     * Definition of environment variables to be defined in the environment.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The inferencing stack version added to the image. To avoid adding an inferencing stack, do not set this value. Valid values: "latest".
     */
    inferencingStackVersion?: pulumi.Input<string>;
    /**
     * The name of the environment.
     */
    name?: pulumi.Input<string>;
    /**
     * Settings for a Python environment.
     */
    python?: pulumi.Input<inputs.machinelearningservices.ModelEnvironmentDefinitionPythonArgs>;
    /**
     * Settings for a R environment.
     */
    r?: pulumi.Input<inputs.machinelearningservices.ModelEnvironmentDefinitionRArgs>;
    /**
     * The configuration for a Spark environment.
     */
    spark?: pulumi.Input<inputs.machinelearningservices.ModelEnvironmentDefinitionSparkArgs>;
    /**
     * The environment version.
     */
    version?: pulumi.Input<string>;
}

/**
 * The unique identifying details of the AZURE ML environment.
 */
export interface EnvironmentImageRequestEnvironmentReferenceArgs {
    /**
     * Name of the environment.
     */
    name?: pulumi.Input<string>;
    /**
     * Version of the environment.
     */
    version?: pulumi.Input<string>;
}

/**
 * Environment specification version details.
 * <see href="https://repo2docker.readthedocs.io/en/latest/specification.html" />
 */
export interface EnvironmentSpecificationVersionArgs {
    /**
     * Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
     * <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
     */
    condaFile?: pulumi.Input<string>;
    /**
     * The asset description text.
     */
    description?: pulumi.Input<string>;
    /**
     * Configuration settings for Docker.
     */
    docker?: pulumi.Input<inputs.machinelearningservices.DockerBuildArgs | inputs.machinelearningservices.DockerImageArgs>;
    /**
     * Defines configuration specific to inference.
     */
    inferenceContainerProperties?: pulumi.Input<inputs.machinelearningservices.InferenceContainerPropertiesArgs>;
    /**
     * If the name version are system generated (anonymous registration).
     */
    isAnonymous?: pulumi.Input<boolean>;
    /**
     * The asset property dictionary.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface FlavorDataArgs {
    /**
     * Model flavor-specific data.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * A HDInsight compute.
 */
export interface HDInsightArgs {
    /**
     * Location for the underlying compute
     */
    computeLocation?: pulumi.Input<string>;
    /**
     * The type of compute
     * Expected value is 'HDInsight'.
     */
    computeType: pulumi.Input<"HDInsight">;
    /**
     * The description of the Machine Learning compute.
     */
    description?: pulumi.Input<string>;
    properties?: pulumi.Input<inputs.machinelearningservices.HDInsightPropertiesArgs>;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: pulumi.Input<string>;
}

export interface HDInsightPropertiesArgs {
    /**
     * Public IP address of the master node of the cluster.
     */
    address?: pulumi.Input<string>;
    /**
     * Admin credentials for master node of the cluster
     */
    administratorAccount?: pulumi.Input<inputs.machinelearningservices.VirtualMachineSshCredentialsArgs>;
    /**
     * Port open for ssh connections on the master node of the cluster.
     */
    sshPort?: pulumi.Input<number>;
}

/**
 * Reference to an asset via its ARM resource ID.
 */
export interface IdAssetReferenceArgs {
    /**
     * [Required] ARM resource ID of the asset.
     */
    assetId: pulumi.Input<string>;
    /**
     * Enum to determine which reference method to use for an asset.
     * Expected value is 'Id'.
     */
    referenceType: pulumi.Input<"Id">;
}

/**
 * Identity for the resource.
 */
export interface IdentityArgs {
    /**
     * The identity type.
     */
    type?: pulumi.Input<enums.machinelearningservices.ResourceIdentityType>;
    /**
     * The user assigned identities associated with the resource.
     */
    userAssignedIdentities?: pulumi.Input<{[key: string]: any}>;
}

/**
 * Identity that will be used to access key vault for encryption at rest
 */
export interface IdentityForCmkArgs {
    /**
     * The ArmId of the user assigned identity that will be used to access the customer managed key vault
     */
    userAssignedIdentity: pulumi.Input<string>;
}

/**
 * An Image asset.
 */
export interface ImageAssetArgs {
    /**
     * The Asset Id.
     */
    id?: pulumi.Input<string>;
    /**
     * The mime type.
     */
    mimeType?: pulumi.Input<string>;
    /**
     * Whether the Asset is unpacked.
     */
    unpack?: pulumi.Input<boolean>;
    /**
     * The Url of the Asset.
     */
    url?: pulumi.Input<string>;
}

export interface InferenceContainerPropertiesArgs {
    /**
     * The route to check the liveness of the inference server container.
     */
    livenessRoute?: pulumi.Input<inputs.machinelearningservices.RouteArgs>;
    /**
     * The route to check the readiness of the inference server container.
     */
    readinessRoute?: pulumi.Input<inputs.machinelearningservices.RouteArgs>;
    /**
     * The port to send the scoring requests to, within the inference server container.
     */
    scoringRoute?: pulumi.Input<inputs.machinelearningservices.RouteArgs>;
}

export interface InputDataBindingArgs {
    /**
     * ARM resource ID of the registered dataVersion.
     */
    dataId?: pulumi.Input<string>;
    /**
     * Mechanism for accessing the data artifact.
     */
    mode?: pulumi.Input<string | enums.machinelearningservices.DataBindingMode>;
    /**
     * Location of data inside the container process.
     */
    pathOnCompute?: pulumi.Input<string>;
}

export interface K8sOnlineDeploymentArgs {
    /**
     * If true, enables Application Insights logging.
     */
    appInsightsEnabled?: pulumi.Input<boolean>;
    /**
     * Code configuration for the endpoint deployment.
     */
    codeConfiguration?: pulumi.Input<inputs.machinelearningservices.CodeConfigurationArgs>;
    /**
     * Resource requirements for each container instance within an online deployment.
     */
    containerResourceRequirements?: pulumi.Input<inputs.machinelearningservices.ContainerResourceRequirementsArgs>;
    /**
     * Description of the endpoint deployment.
     */
    description?: pulumi.Input<string>;
    /**
     * Enum to determine endpoint compute type.
     * Expected value is 'K8S'.
     */
    endpointComputeType: pulumi.Input<"K8S">;
    /**
     * ARM resource ID of the environment specification for the endpoint deployment.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Environment variables configuration for the deployment.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Deployment container liveness/readiness probe configuration.
     */
    livenessProbe?: pulumi.Input<inputs.machinelearningservices.ProbeSettingsArgs>;
    /**
     * Reference to the model asset for the endpoint deployment.
     */
    model?: pulumi.Input<inputs.machinelearningservices.DataPathAssetReferenceArgs | inputs.machinelearningservices.IdAssetReferenceArgs | inputs.machinelearningservices.OutputPathAssetReferenceArgs>;
    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Online deployment scoring requests configuration.
     */
    requestSettings?: pulumi.Input<inputs.machinelearningservices.OnlineRequestSettingsArgs>;
    /**
     * Online deployment scaling configuration.
     */
    scaleSettings?: pulumi.Input<inputs.machinelearningservices.AutoScaleSettingsArgs | inputs.machinelearningservices.ManualScaleSettingsArgs>;
}

export interface KeyVaultPropertiesArgs {
    /**
     * For future use - The client id of the identity which will be used to access key vault.
     */
    identityClientId?: pulumi.Input<string>;
    /**
     * Key vault uri to access the encryption key.
     */
    keyIdentifier: pulumi.Input<string>;
    /**
     * The ArmId of the keyVault where the customer owned encryption key is present.
     */
    keyVaultArmId: pulumi.Input<string>;
}

/**
 * Represents a category of labels in a labeling job.
 */
export interface LabelCategoryArgs {
    /**
     * Indicates whether it is allowed to select multiple classes in this category.
     */
    allowMultiSelect?: pulumi.Input<boolean>;
    /**
     * Dictionary of label classes in this category.
     */
    classes: pulumi.Input<{[key: string]: pulumi.Input<inputs.machinelearningservices.LabelClassArgs>}>;
    /**
     * Display name of the label category.
     */
    displayName?: pulumi.Input<string>;
}

/**
 * Represents a label or a category of labels in a labeling job.
 */
export interface LabelClassArgs {
    /**
     * Display name of the label class.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Dictionary of subclasses of the label class.
     */
    subclasses?: pulumi.Input<{[key: string]: pulumi.Input<inputs.machinelearningservices.LabelClassArgs>}>;
}

/**
 * Represents configuration of dataset used in a labeling job.
 */
export interface LabelingDatasetConfigurationArgs {
    /**
     * Name of the data asset to perform labeling.
     */
    assetName: pulumi.Input<string>;
    /**
     * AML dataset version.
     */
    datasetVersion: pulumi.Input<string>;
    /**
     * Indicates whether to enable incremental dataset refresh.
     */
    enableIncrementalDatasetRefresh?: pulumi.Input<boolean>;
}

export interface LabelingJobImagePropertiesArgs {
    /**
     * Annotation type of image labeling tasks.
     */
    annotationType?: pulumi.Input<string | enums.machinelearningservices.ImageAnnotationType>;
    /**
     * Media type of data asset.
     */
    mediaType: pulumi.Input<string | enums.machinelearningservices.MediaType>;
}

/**
 * Instructions for a labeling job.
 */
export interface LabelingJobInstructionsArgs {
    /**
     * The link to a page with detailed labeling instructions for labelers.
     */
    uri?: pulumi.Input<string>;
}

/**
 * Definition of a labeling job.
 */
export interface LabelingJobPropertiesArgs {
    /**
     * Dataset configuration for the job.
     */
    datasetConfiguration: pulumi.Input<inputs.machinelearningservices.LabelingDatasetConfigurationArgs>;
    /**
     * Instructions for the job.
     */
    jobInstructions: pulumi.Input<inputs.machinelearningservices.LabelingJobInstructionsArgs>;
    /**
     * Label categories of the job.
     */
    labelCategories: pulumi.Input<{[key: string]: pulumi.Input<inputs.machinelearningservices.LabelCategoryArgs>}>;
    /**
     * Media specific properties in a labeling job.
     */
    labelingJobMediaProperties: pulumi.Input<inputs.machinelearningservices.LabelingJobImagePropertiesArgs>;
    /**
     * Machine learning assisted configuration for the job.
     */
    mlAssistConfiguration?: pulumi.Input<inputs.machinelearningservices.MLAssistConfigurationArgs>;
    /**
     * The job property dictionary. Properties can be added, but not removed or altered.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The job tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * LinkedService specific properties.
 */
export interface LinkedServicePropsArgs {
    /**
     * The creation time of the linked service.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * Type of the link target.
     */
    linkType?: pulumi.Input<enums.machinelearningservices.LinkedServiceLinkType>;
    /**
     * ResourceId of the link target of the linked service.
     */
    linkedServiceResourceId: pulumi.Input<string>;
    /**
     * The last modified time of the linked service.
     */
    modifiedTime?: pulumi.Input<string>;
}

/**
 * LinkedWorkspace specific properties.
 */
export interface LinkedWorkspacePropsArgs {
    /**
     * ResourceId of the link target of the linked workspace.
     */
    linkedWorkspaceResourceId?: pulumi.Input<string>;
    /**
     * ResourceId of the user assigned identity for the linked workspace.
     */
    userAssignedIdentityResourceId?: pulumi.Input<string>;
}

/**
 * Represents configuration for machine learning assisted features in a labeling job.
 */
export interface MLAssistConfigurationArgs {
    /**
     * The compute designated for inferencing.
     */
    inferencingComputeBinding: pulumi.Input<inputs.machinelearningservices.ComputeBindingArgs>;
    /**
     * Indicates whether MLAssist feature is enabled.
     */
    mlAssistEnabled?: pulumi.Input<boolean>;
    /**
     * Name prefix to use for machine learning model. For each iteration modelName will be appended with iteration e.g.{modelName}_{i}.
     */
    modelNamePrefix: pulumi.Input<string>;
    /**
     * Prelabel accuracy threshold used in MLAssist feature.
     */
    prelabelAccuracyThreshold?: pulumi.Input<number>;
    /**
     * The compute designated for training.
     */
    trainingComputeBinding: pulumi.Input<inputs.machinelearningservices.ComputeBindingArgs>;
}

/**
 * Managed identity configuration.
 */
export interface ManagedIdentityArgs {
    /**
     * Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Enum to determine identity framework.
     * Expected value is 'Managed'.
     */
    identityType: pulumi.Input<"Managed">;
    /**
     * Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
     */
    objectId?: pulumi.Input<string>;
    /**
     * Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
     */
    resourceId?: pulumi.Input<string>;
}

export interface ManagedOnlineDeploymentArgs {
    /**
     * If true, enables Application Insights logging.
     */
    appInsightsEnabled?: pulumi.Input<boolean>;
    /**
     * Code configuration for the endpoint deployment.
     */
    codeConfiguration?: pulumi.Input<inputs.machinelearningservices.CodeConfigurationArgs>;
    /**
     * Description of the endpoint deployment.
     */
    description?: pulumi.Input<string>;
    /**
     * Enum to determine endpoint compute type.
     * Expected value is 'Managed'.
     */
    endpointComputeType: pulumi.Input<"Managed">;
    /**
     * ARM resource ID of the environment specification for the endpoint deployment.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Environment variables configuration for the deployment.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Compute instance type.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * Deployment container liveness/readiness probe configuration.
     */
    livenessProbe?: pulumi.Input<inputs.machinelearningservices.ProbeSettingsArgs>;
    /**
     * Reference to the model asset for the endpoint deployment.
     */
    model?: pulumi.Input<inputs.machinelearningservices.DataPathAssetReferenceArgs | inputs.machinelearningservices.IdAssetReferenceArgs | inputs.machinelearningservices.OutputPathAssetReferenceArgs>;
    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Deployment container liveness/readiness probe configuration.
     */
    readinessProbe?: pulumi.Input<inputs.machinelearningservices.ProbeSettingsArgs>;
    /**
     * Online deployment scoring requests configuration.
     */
    requestSettings?: pulumi.Input<inputs.machinelearningservices.OnlineRequestSettingsArgs>;
    /**
     * Online deployment scaling configuration.
     */
    scaleSettings?: pulumi.Input<inputs.machinelearningservices.AutoScaleSettingsArgs | inputs.machinelearningservices.ManualScaleSettingsArgs>;
}

export interface ManualScaleSettingsArgs {
    /**
     * Fixed number of instances for this deployment.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * Maximum number of instances for this deployment.
     */
    maxInstances?: pulumi.Input<number>;
    /**
     * Minimum number of instances for this deployment.
     */
    minInstances?: pulumi.Input<number>;
    /**
     *
     * Expected value is 'Manual'.
     */
    scaleType: pulumi.Input<"Manual">;
}

/**
 * Defines an early termination policy based on running averages of the primary metric of all runs.
 */
export interface MedianStoppingPolicyArgs {
    /**
     * Number of intervals by which to delay the first evaluation.
     */
    delayEvaluation?: pulumi.Input<number>;
    /**
     * Interval (number of runs) between policy evaluations.
     */
    evaluationInterval?: pulumi.Input<number>;
    /**
     *
     * Expected value is 'MedianStopping'.
     */
    policyType: pulumi.Input<"MedianStopping">;
}

/**
 * An Azure Machine Learning Model.
 */
export interface ModelArgs {
    /**
     * The Model creation time (UTC).
     */
    createdTime?: pulumi.Input<string>;
    /**
     * The list of datasets associated with the model.
     */
    datasets?: pulumi.Input<pulumi.Input<inputs.machinelearningservices.DatasetReferenceArgs>[]>;
    /**
     * Models derived from this model
     */
    derivedModelIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Model description text.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the experiment where this model was created.
     */
    experimentName?: pulumi.Input<string>;
    /**
     * The Model framework.
     */
    framework?: pulumi.Input<string>;
    /**
     * The Model framework version.
     */
    frameworkVersion?: pulumi.Input<string>;
    /**
     * The Model Id.
     */
    id?: pulumi.Input<string>;
    /**
     * The Model tag dictionary. Items are mutable.
     */
    kvTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml
     */
    mimeType: pulumi.Input<string>;
    /**
     * The Model last modified time (UTC).
     */
    modifiedTime?: pulumi.Input<string>;
    /**
     * The Model name.
     */
    name: pulumi.Input<string>;
    /**
     * The Parent Model Id.
     */
    parentModelId?: pulumi.Input<string>;
    /**
     * The Model property dictionary. Properties are immutable.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource requirements for the model
     */
    resourceRequirements?: pulumi.Input<inputs.machinelearningservices.ContainerResourceRequirementsArgs>;
    /**
     * The RunId that created this model.
     */
    runId?: pulumi.Input<string>;
    /**
     * Sample Input Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}
     */
    sampleInputData?: pulumi.Input<string>;
    /**
     * Sample Output Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}
     */
    sampleOutputData?: pulumi.Input<string>;
    /**
     * Indicates whether we need to unpack the Model during docker Image creation.
     */
    unpack?: pulumi.Input<boolean>;
    /**
     * The URL of the Model. Usually a SAS URL.
     */
    url: pulumi.Input<string>;
    /**
     * The Model version assigned by Model Management Service.
     */
    version?: pulumi.Input<number>;
}

export interface ModelContainerArgs {
    /**
     * The asset description text.
     */
    description?: pulumi.Input<string>;
    /**
     * The asset property dictionary.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Image registry that contains the base image.
 */
export interface ModelDockerSectionBaseImageRegistryArgs {
    address?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The definition of a Docker container.
 */
export interface ModelEnvironmentDefinitionDockerArgs {
    /**
     * Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.
     */
    baseDockerfile?: pulumi.Input<string>;
    /**
     * Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.
     */
    baseImage?: pulumi.Input<string>;
    /**
     * Image registry that contains the base image.
     */
    baseImageRegistry?: pulumi.Input<inputs.machinelearningservices.ModelDockerSectionBaseImageRegistryArgs>;
}

/**
 * Settings for a Python environment.
 */
export interface ModelEnvironmentDefinitionPythonArgs {
    baseCondaEnvironment?: pulumi.Input<string>;
    /**
     * A JObject containing Conda dependencies.
     */
    condaDependencies?: any;
    /**
     * The python interpreter path to use if an environment build is not required. The path specified gets used to call the user script.
     */
    interpreterPath?: pulumi.Input<string>;
    /**
     * True means that AzureML reuses an existing python environment; False means that AzureML will create a python environment based on the Conda dependencies specification.
     */
    userManagedDependencies?: pulumi.Input<boolean>;
}

/**
 * Settings for a R environment.
 */
export interface ModelEnvironmentDefinitionRArgs {
    /**
     * The packages from Bioconductor.
     */
    bioConductorPackages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The CRAN packages to use.
     */
    cranPackages?: pulumi.Input<pulumi.Input<inputs.machinelearningservices.RCranPackageArgs>[]>;
    /**
     * The packages from custom urls.
     */
    customUrlPackages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The packages directly from GitHub.
     */
    gitHubPackages?: pulumi.Input<pulumi.Input<inputs.machinelearningservices.RGitHubPackageArgs>[]>;
    /**
     * The version of R to be installed
     */
    rVersion?: pulumi.Input<string>;
    /**
     * The Rscript path to use if an environment build is not required.
     * The path specified gets used to call the user script.
     */
    rscriptPath?: pulumi.Input<string>;
    /**
     * Date of MRAN snapshot to use in YYYY-MM-DD format, e.g. "2019-04-17"
     */
    snapshotDate?: pulumi.Input<string>;
    /**
     * Indicates whether the environment is managed by user or by AzureML.
     */
    userManaged?: pulumi.Input<boolean>;
}

/**
 * The configuration for a Spark environment.
 */
export interface ModelEnvironmentDefinitionSparkArgs {
    /**
     * The Spark packages to use.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.machinelearningservices.SparkMavenPackageArgs>[]>;
    /**
     * Whether to precache the packages.
     */
    precachePackages?: pulumi.Input<boolean>;
    /**
     * The list of spark repositories.
     */
    repositories?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Model asset version details.
 */
export interface ModelVersionArgs {
    /**
     * ARM resource ID of the datastore where the asset is located.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * The asset description text.
     */
    description?: pulumi.Input<string>;
    /**
     * Mapping of model flavors to their properties.
     */
    flavors?: pulumi.Input<{[key: string]: pulumi.Input<inputs.machinelearningservices.FlavorDataArgs>}>;
    /**
     * If the name version are system generated (anonymous registration).
     */
    isAnonymous?: pulumi.Input<boolean>;
    /**
     * [Required] The path of the file/directory in the datastore.
     */
    path: pulumi.Input<string>;
    /**
     * The asset property dictionary.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * MPI distribution configuration.
 */
export interface MpiArgs {
    /**
     * Enum to determine the job distribution type.
     * Expected value is 'Mpi'.
     */
    distributionType: pulumi.Input<"Mpi">;
    /**
     * Number of processes per MPI node.
     */
    processCountPerInstance?: pulumi.Input<number>;
}

/**
 * Optimization objective.
 */
export interface ObjectiveArgs {
    /**
     * [Required] Defines supported metric goals for hyperparameter tuning
     */
    goal: pulumi.Input<string | enums.machinelearningservices.Goal>;
    /**
     * [Required] Name of the metric to optimize.
     */
    primaryMetric: pulumi.Input<string>;
}

/**
 * Online endpoint configuration
 */
export interface OnlineEndpointArgs {
    /**
     * [Required] Inference endpoint authentication mode type
     */
    authMode: pulumi.Input<string | enums.machinelearningservices.EndpointAuthMode>;
    /**
     * Description of the inference endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * EndpointAuthKeys to set initially on an Endpoint.
     * This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
     */
    keys?: pulumi.Input<inputs.machinelearningservices.EndpointAuthKeysArgs>;
    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ARM resource ID of the compute if it exists.
     * optional
     */
    target?: pulumi.Input<string>;
    /**
     * Traffic rules on how the traffic will be routed across deployments.
     */
    traffic?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
}

/**
 * Online deployment scoring requests configuration.
 */
export interface OnlineRequestSettingsArgs {
    /**
     * The number of requests allowed to queue at once for this deployment.
     */
    maxConcurrentRequestsPerInstance?: pulumi.Input<number>;
    /**
     * The maximum queue wait time in ISO 8601 format. Supports millisecond precision.
     */
    maxQueueWait?: pulumi.Input<string>;
    /**
     * The request timeout in ISO 8601 format. Supports millisecond precision.
     */
    requestTimeout?: pulumi.Input<string>;
}

export interface OutputDataBindingArgs {
    /**
     * ARM resource ID of the datastore where the data output will be stored.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * Mechanism for data movement to datastore.
     */
    mode?: pulumi.Input<string | enums.machinelearningservices.DataBindingMode>;
    /**
     * Location of data inside the container process.
     */
    pathOnCompute?: pulumi.Input<string>;
    /**
     * Path within the datastore to the data.
     */
    pathOnDatastore?: pulumi.Input<string>;
}

/**
 * Reference to an asset via its path in a job output.
 */
export interface OutputPathAssetReferenceArgs {
    /**
     * ARM resource ID of the job.
     */
    jobId?: pulumi.Input<string>;
    /**
     * The path of the file/directory in the job output.
     */
    path?: pulumi.Input<string>;
    /**
     * Enum to determine which reference method to use for an asset.
     * Expected value is 'OutputPath'.
     */
    referenceType: pulumi.Input<"OutputPath">;
}

/**
 * Settings for a personal compute instance.
 */
export interface PersonalComputeInstanceSettingsArgs {
    /**
     * A user explicitly assigned to a personal compute instance.
     */
    assignedUser?: pulumi.Input<inputs.machinelearningservices.AssignedUserArgs>;
}

/**
 * A collection of information about the state of the connection between service consumer and provider.
 */
export interface PrivateLinkServiceConnectionStateArgs {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: pulumi.Input<string>;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: pulumi.Input<string | enums.machinelearningservices.PrivateEndpointServiceConnectionStatus>;
}

/**
 * Deployment container liveness/readiness probe configuration.
 */
export interface ProbeSettingsArgs {
    /**
     * The number of failures to allow before returning an unhealthy status.
     */
    failureThreshold?: pulumi.Input<number>;
    /**
     * The delay before the first probe in ISO 8601 format.
     */
    initialDelay?: pulumi.Input<string>;
    /**
     * The length of time between probes in ISO 8601 format.
     */
    period?: pulumi.Input<string>;
    /**
     * The number of successful probes before returning a healthy status.
     */
    successThreshold?: pulumi.Input<number>;
    /**
     * The probe timeout in ISO 8601 format.
     */
    timeout?: pulumi.Input<string>;
}

/**
 * PyTorch distribution configuration.
 */
export interface PyTorchArgs {
    /**
     * Enum to determine the job distribution type.
     * Expected value is 'PyTorch'.
     */
    distributionType: pulumi.Input<"PyTorch">;
    /**
     * Total process count for the distributed job.
     */
    processCount?: pulumi.Input<number>;
}

export interface RCranPackageArgs {
    /**
     * The package name.
     */
    name?: pulumi.Input<string>;
    /**
     * The repository name.
     */
    repository?: pulumi.Input<string>;
}

export interface RGitHubPackageArgs {
    /**
     * Personal access token to install from a private repo
     */
    authToken?: pulumi.Input<string>;
    /**
     * Repository address in the format username/repo[/subdir][@ref|#pull].
     */
    repository?: pulumi.Input<string>;
}

/**
 * Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
 */
export interface ResourceIdArgs {
    /**
     * The ID of the resource
     */
    id: pulumi.Input<string>;
}

/**
 * Service identity associated with a resource.
 */
export interface ResourceIdentityArgs {
    /**
     * Defines values for a ResourceIdentity's type.
     */
    type?: pulumi.Input<string | enums.machinelearningservices.ResourceIdentityAssignment>;
    /**
     * Dictionary of the user assigned identities, key is ARM resource ID of the UAI.
     */
    userAssignedIdentities?: pulumi.Input<{[key: string]: pulumi.Input<inputs.machinelearningservices.UserAssignedIdentityMetaArgs>}>;
}

export interface RouteArgs {
    /**
     * [Required] The path for the route.
     */
    path: pulumi.Input<string>;
    /**
     * [Required] The port for the route.
     */
    port: pulumi.Input<number>;
}

/**
 * scale settings for AML Compute
 */
export interface ScaleSettingsArgs {
    /**
     * Max number of nodes to use
     */
    maxNodeCount: pulumi.Input<number>;
    /**
     * Min number of nodes to use
     */
    minNodeCount?: pulumi.Input<number>;
    /**
     * Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
     */
    nodeIdleTimeBeforeScaleDown?: pulumi.Input<string>;
}
/**
 * scaleSettingsArgsProvideDefaults sets the appropriate defaults for ScaleSettingsArgs
 */
export function scaleSettingsArgsProvideDefaults(val: ScaleSettingsArgs): ScaleSettingsArgs {
    return {
        ...val,
        minNodeCount: (val.minNodeCount) ?? 0,
    };
}

/**
 * Script reference
 */
export interface ScriptReferenceArgs {
    /**
     * Optional command line arguments passed to the script to run.
     */
    scriptArguments?: pulumi.Input<string>;
    /**
     * The location of scripts in the mounted volume.
     */
    scriptData?: pulumi.Input<string>;
    /**
     * The storage source of the script: inline, workspace.
     */
    scriptSource?: pulumi.Input<string>;
    /**
     * Optional time period passed to timeout command.
     */
    timeout?: pulumi.Input<string>;
}

/**
 * Customized setup scripts
 */
export interface ScriptsToExecuteArgs {
    /**
     * Script that's run only once during provision of the compute.
     */
    creationScript?: pulumi.Input<inputs.machinelearningservices.ScriptReferenceArgs>;
    /**
     * Script that's run every time the machine starts.
     */
    startupScript?: pulumi.Input<inputs.machinelearningservices.ScriptReferenceArgs>;
}

export interface ServiceManagedResourcesSettingsArgs {
    /**
     * The settings for the service managed cosmosdb account.
     */
    cosmosDb?: pulumi.Input<inputs.machinelearningservices.CosmosDbSettingsArgs>;
}

/**
 * Details of customized scripts to execute for setting up the cluster.
 */
export interface SetupScriptsArgs {
    /**
     * Customized setup scripts
     */
    scripts?: pulumi.Input<inputs.machinelearningservices.ScriptsToExecuteArgs>;
}

export interface SharedPrivateLinkResourceArgs {
    /**
     * The private link resource group id.
     */
    groupId?: pulumi.Input<string>;
    /**
     * Unique name of the private link.
     */
    name?: pulumi.Input<string>;
    /**
     * The resource id that private link links to.
     */
    privateLinkResourceId?: pulumi.Input<string>;
    /**
     * Request message.
     */
    requestMessage?: pulumi.Input<string>;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: pulumi.Input<string | enums.machinelearningservices.PrivateEndpointServiceConnectionStatus>;
}

/**
 * Sku of the resource
 */
export interface SkuArgs {
    /**
     * Name of the sku
     */
    name?: pulumi.Input<string>;
    /**
     * Tier of the sku like Basic or Enterprise
     */
    tier?: pulumi.Input<string>;
}

export interface SparkMavenPackageArgs {
    artifact?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The ssl configuration for scoring
 */
export interface SslConfigurationArgs {
    /**
     * Cert data
     */
    cert?: pulumi.Input<string>;
    /**
     * CNAME of the cert
     */
    cname?: pulumi.Input<string>;
    /**
     * Key data
     */
    key?: pulumi.Input<string>;
    /**
     * Enable or disable ssl for scoring
     */
    status?: pulumi.Input<string>;
}

/**
 * Sweep job definition.
 */
export interface SweepJobArgs {
    /**
     * [Required] Type of the hyperparameter sampling algorithms
     */
    algorithm: pulumi.Input<string | enums.machinelearningservices.SamplingAlgorithm>;
    /**
     * [Required] Compute binding for the job.
     */
    compute: pulumi.Input<inputs.machinelearningservices.ComputeConfigurationArgs>;
    /**
     * The asset description text.
     */
    description?: pulumi.Input<string>;
    /**
     * Early termination policies enable canceling poor-performing runs before they complete.
     */
    earlyTermination?: pulumi.Input<inputs.machinelearningservices.BanditPolicyArgs | inputs.machinelearningservices.MedianStoppingPolicyArgs | inputs.machinelearningservices.TruncationSelectionPolicyArgs>;
    /**
     * The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
     */
    experimentName?: pulumi.Input<string>;
    /**
     * Identity configuration. If set, this should be one of AmlToken, ManagedIdentity or null.
     * Defaults to AmlToken if null.
     */
    identity?: pulumi.Input<inputs.machinelearningservices.AmlTokenArgs | inputs.machinelearningservices.ManagedIdentityArgs>;
    /**
     * Enum to determine the type of job.
     * Expected value is 'Sweep'.
     */
    jobType: pulumi.Input<"Sweep">;
    /**
     * An upper bound on the number of trials performed in parallel.
     */
    maxConcurrentTrials?: pulumi.Input<number>;
    /**
     * An upper bound on the number of trials to perform.
     */
    maxTotalTrials?: pulumi.Input<number>;
    /**
     * [Required] Optimization objective.
     */
    objective: pulumi.Input<inputs.machinelearningservices.ObjectiveArgs>;
    /**
     * Job priority for scheduling policy. Only applies to AMLCompute.
     * Private preview feature and only available to users on the allow list.
     */
    priority?: pulumi.Input<number>;
    /**
     * The asset property dictionary.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
     */
    searchSpace: pulumi.Input<{[key: string]: any}>;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The total timeout in ISO 8601 format. Only supports duration with precision as low as Minutes.
     */
    timeout?: pulumi.Input<string>;
    /**
     * Trial component definition.
     */
    trial?: pulumi.Input<inputs.machinelearningservices.TrialComponentArgs>;
}

/**
 * TensorFlow distribution configuration.
 */
export interface TensorFlowArgs {
    /**
     * Enum to determine the job distribution type.
     * Expected value is 'TensorFlow'.
     */
    distributionType: pulumi.Input<"TensorFlow">;
    /**
     * Number of parameter server tasks.
     */
    parameterServerCount?: pulumi.Input<number>;
    /**
     * Number of workers. Overwrites the node count in compute binding.
     */
    workerCount?: pulumi.Input<number>;
}

/**
 * Trial component definition.
 */
export interface TrialComponentArgs {
    /**
     * ARM resource ID of the code asset.
     */
    codeId?: pulumi.Input<string>;
    /**
     * [Required] The command to execute on startup of the job. eg. "python train.py"
     */
    command: pulumi.Input<string>;
    /**
     * Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
     */
    distribution?: pulumi.Input<inputs.machinelearningservices.MpiArgs | inputs.machinelearningservices.PyTorchArgs | inputs.machinelearningservices.TensorFlowArgs>;
    /**
     * The ARM resource ID of the Environment specification for the job.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Environment variables included in the job.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Mapping of input data bindings used in the job.
     */
    inputDataBindings?: pulumi.Input<{[key: string]: pulumi.Input<inputs.machinelearningservices.InputDataBindingArgs>}>;
    /**
     * Mapping of output data bindings used in the job.
     */
    outputDataBindings?: pulumi.Input<{[key: string]: pulumi.Input<inputs.machinelearningservices.OutputDataBindingArgs>}>;
    /**
     * The max run duration in ISO 8601 format, after which the trial component will be cancelled.
     * Only supports duration with precision as low as Seconds.
     */
    timeout?: pulumi.Input<string>;
}

/**
 * Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
 */
export interface TruncationSelectionPolicyArgs {
    /**
     * Number of intervals by which to delay the first evaluation.
     */
    delayEvaluation?: pulumi.Input<number>;
    /**
     * Interval (number of runs) between policy evaluations.
     */
    evaluationInterval?: pulumi.Input<number>;
    /**
     *
     * Expected value is 'TruncationSelection'.
     */
    policyType: pulumi.Input<"TruncationSelection">;
    /**
     * The percentage of runs to cancel at each evaluation interval.
     */
    truncationPercentage?: pulumi.Input<number>;
}

/**
 * Settings for user account that gets created on each on the nodes of a compute.
 */
export interface UserAccountCredentialsArgs {
    /**
     * Name of the administrator user account which can be used to SSH to nodes.
     */
    adminUserName: pulumi.Input<string>;
    /**
     * Password of the administrator user account.
     */
    adminUserPassword?: pulumi.Input<string>;
    /**
     * SSH public key of the administrator user account.
     */
    adminUserSshPublicKey?: pulumi.Input<string>;
}

/**
 * User assigned identities associated with a resource.
 */
export interface UserAssignedIdentityMetaArgs {
    /**
     * Aka application ID, a unique identifier generated by Azure AD that is tied to an application and service principal during its initial provisioning.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The object ID of the service principal object for your managed identity that is used to grant role-based access to an Azure resource.
     */
    principalId?: pulumi.Input<string>;
}

/**
 * A Machine Learning compute based on Azure Virtual Machines.
 */
export interface VirtualMachineArgs {
    /**
     * Location for the underlying compute
     */
    computeLocation?: pulumi.Input<string>;
    /**
     * The type of compute
     * Expected value is 'VirtualMachine'.
     */
    computeType: pulumi.Input<"VirtualMachine">;
    /**
     * The description of the Machine Learning compute.
     */
    description?: pulumi.Input<string>;
    properties?: pulumi.Input<inputs.machinelearningservices.VirtualMachinePropertiesArgs>;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * Virtual Machine image for Windows AML Compute
 */
export interface VirtualMachineImageArgs {
    /**
     * Virtual Machine image path
     */
    id: pulumi.Input<string>;
}

export interface VirtualMachinePropertiesArgs {
    /**
     * Public IP address of the virtual machine.
     */
    address?: pulumi.Input<string>;
    /**
     * Admin credentials for virtual machine
     */
    administratorAccount?: pulumi.Input<inputs.machinelearningservices.VirtualMachineSshCredentialsArgs>;
    /**
     * Port open for ssh connections.
     */
    sshPort?: pulumi.Input<number>;
    /**
     * Virtual Machine size
     */
    virtualMachineSize?: pulumi.Input<string>;
}

/**
 * Admin credentials for virtual machine
 */
export interface VirtualMachineSshCredentialsArgs {
    /**
     * Password of admin account
     */
    password?: pulumi.Input<string>;
    /**
     * Private key data
     */
    privateKeyData?: pulumi.Input<string>;
    /**
     * Public key data
     */
    publicKeyData?: pulumi.Input<string>;
    /**
     * Username of admin account
     */
    username?: pulumi.Input<string>;
}

