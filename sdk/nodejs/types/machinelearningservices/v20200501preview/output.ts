// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The response for an ACI service.
 */
export interface ACIServiceResponseResponse {
    /**
     * Whether or not Application Insights is enabled.
     */
    appInsightsEnabled?: boolean;
    /**
     * Whether or not authentication is enabled on the service.
     */
    authEnabled?: boolean;
    /**
     * The CName for the service.
     */
    cname?: string;
    /**
     * The compute environment type for the service.
     * Expected value is 'ACI'.
     */
    computeType: "ACI";
    /**
     * The container resource requirements.
     */
    containerResourceRequirements?: outputs.machinelearningservices.v20200501preview.ContainerResourceRequirementsResponse;
    /**
     * Details of the data collection options specified.
     */
    dataCollection?: outputs.machinelearningservices.v20200501preview.ACIServiceResponseResponseDataCollection;
    /**
     * The deployment type for the service.
     */
    deploymentType?: string;
    /**
     * The service description.
     */
    description?: string;
    /**
     * The encryption properties.
     */
    encryptionProperties?: outputs.machinelearningservices.v20200501preview.ACIServiceResponseResponseEncryptionProperties;
    /**
     * The Environment, models and assets used for inferencing.
     */
    environmentImageRequest?: outputs.machinelearningservices.v20200501preview.ACIServiceResponseResponseEnvironmentImageRequest;
    /**
     * The error details.
     */
    error: outputs.machinelearningservices.v20200501preview.ServiceResponseBaseResponseError;
    /**
     * The service tag dictionary. Tags are mutable.
     */
    kvTags?: {[key: string]: string};
    /**
     * The name of the Azure location/region.
     */
    location?: string;
    /**
     * Details on the models and configurations.
     */
    modelConfigMap: {[key: string]: any};
    /**
     * The list of models.
     */
    models?: outputs.machinelearningservices.v20200501preview.ModelResponse[];
    /**
     * The service property dictionary. Properties are immutable.
     */
    properties?: {[key: string]: string};
    /**
     * The public Fqdn for the service.
     */
    publicFqdn?: string;
    /**
     * The public IP address for the service.
     */
    publicIp?: string;
    /**
     * The Uri for sending scoring requests.
     */
    scoringUri: string;
    /**
     * The public SSL certificate in PEM format to use if SSL is enabled.
     */
    sslCertificate?: string;
    /**
     * Whether or not SSL is enabled.
     */
    sslEnabled?: boolean;
    /**
     * The public SSL key in PEM format for the certificate.
     */
    sslKey?: string;
    /**
     * The current state of the service.
     */
    state: string;
    /**
     * The Uri for sending swagger requests.
     */
    swaggerUri: string;
    /**
     * The virtual network configuration.
     */
    vnetConfiguration?: outputs.machinelearningservices.v20200501preview.ACIServiceResponseResponseVnetConfiguration;
}

/**
 * Details of the data collection options specified.
 */
export interface ACIServiceResponseResponseDataCollection {
    /**
     * Option for enabling/disabling Event Hub.
     */
    eventHubEnabled?: boolean;
    /**
     * Option for enabling/disabling storage.
     */
    storageEnabled?: boolean;
}

/**
 * The encryption properties.
 */
export interface ACIServiceResponseResponseEncryptionProperties {
    /**
     * Encryption Key name
     */
    keyName: string;
    /**
     * Encryption Key Version
     */
    keyVersion: string;
    /**
     * vault base Url
     */
    vaultBaseUrl: string;
}

/**
 * The Environment, models and assets used for inferencing.
 */
export interface ACIServiceResponseResponseEnvironmentImageRequest {
    /**
     * The list of assets.
     */
    assets?: outputs.machinelearningservices.v20200501preview.ImageAssetResponse[];
    /**
     * The name of the driver file.
     */
    driverProgram?: string;
    /**
     * The details of the AZURE ML environment.
     */
    environment?: outputs.machinelearningservices.v20200501preview.EnvironmentImageResponseResponseEnvironment;
    /**
     * The unique identifying details of the AZURE ML environment.
     */
    environmentReference?: outputs.machinelearningservices.v20200501preview.EnvironmentImageResponseResponseEnvironmentReference;
    /**
     * The list of model Ids.
     */
    modelIds?: string[];
    /**
     * The list of models.
     */
    models?: outputs.machinelearningservices.v20200501preview.ModelResponse[];
}

/**
 * The virtual network configuration.
 */
export interface ACIServiceResponseResponseVnetConfiguration {
    /**
     * The name of the virtual network subnet.
     */
    subnetName?: string;
    /**
     * The name of the virtual network.
     */
    vnetName?: string;
}

/**
 * The error details.
 */
export interface AKSReplicaStatusResponseError {
    /**
     * Error code.
     */
    code: string;
    /**
     * An array of error detail objects.
     */
    details: outputs.machinelearningservices.v20200501preview.ErrorDetailResponse[];
    /**
     * Error message.
     */
    message: string;
}

/**
 * A Machine Learning compute based on AKS.
 */
export interface AKSResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'AKS'.
     */
    computeType: "AKS";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    /**
     * AKS properties
     */
    properties?: outputs.machinelearningservices.v20200501preview.AKSResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200501preview.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

/**
 * AKS properties
 */
export interface AKSResponseProperties {
    /**
     * Number of agents
     */
    agentCount?: number;
    /**
     * Agent virtual machine size
     */
    agentVMSize?: string;
    /**
     * AKS networking configuration for vnet
     */
    aksNetworkingConfiguration?: outputs.machinelearningservices.v20200501preview.AksNetworkingConfigurationResponse;
    /**
     * Cluster full qualified domain name
     */
    clusterFqdn?: string;
    /**
     * SSL configuration
     */
    sslConfiguration?: outputs.machinelearningservices.v20200501preview.SslConfigurationResponse;
    /**
     * System services
     */
    systemServices: outputs.machinelearningservices.v20200501preview.SystemServiceResponse[];
}

/**
 * The response for an AKS service.
 */
export interface AKSServiceResponseResponse {
    /**
     * Whether or not AAD authentication is enabled.
     */
    aadAuthEnabled?: boolean;
    /**
     * Whether or not Application Insights is enabled.
     */
    appInsightsEnabled?: boolean;
    /**
     * Whether or not authentication is enabled.
     */
    authEnabled?: boolean;
    /**
     * The auto scaler properties.
     */
    autoScaler?: outputs.machinelearningservices.v20200501preview.AKSServiceResponseResponseAutoScaler;
    /**
     * The name of the compute resource.
     */
    computeName?: string;
    /**
     * The compute environment type for the service.
     * Expected value is 'AKS'.
     */
    computeType: "AKS";
    /**
     * The container resource requirements.
     */
    containerResourceRequirements?: outputs.machinelearningservices.v20200501preview.ContainerResourceRequirementsResponse;
    /**
     * Details of the data collection options specified.
     */
    dataCollection?: outputs.machinelearningservices.v20200501preview.AKSServiceResponseResponseDataCollection;
    /**
     * The deployment status.
     */
    deploymentStatus: outputs.machinelearningservices.v20200501preview.AKSServiceResponseResponseDeploymentStatus;
    /**
     * The deployment type for the service.
     */
    deploymentType?: string;
    /**
     * The service description.
     */
    description?: string;
    /**
     * The Environment, models and assets used for inferencing.
     */
    environmentImageRequest?: outputs.machinelearningservices.v20200501preview.AKSServiceResponseResponseEnvironmentImageRequest;
    /**
     * The error details.
     */
    error: outputs.machinelearningservices.v20200501preview.ServiceResponseBaseResponseError;
    /**
     * Is this the default variant.
     */
    isDefault?: boolean;
    /**
     * The service tag dictionary. Tags are mutable.
     */
    kvTags?: {[key: string]: string};
    /**
     * The liveness probe requirements.
     */
    livenessProbeRequirements?: outputs.machinelearningservices.v20200501preview.AKSServiceResponseResponseLivenessProbeRequirements;
    /**
     * The maximum number of concurrent requests per container.
     */
    maxConcurrentRequestsPerContainer?: number;
    /**
     * Maximum time a request will wait in the queue (in milliseconds). After this time, the service will return 503 (Service Unavailable)
     */
    maxQueueWaitMs?: number;
    /**
     * Details on the models and configurations.
     */
    modelConfigMap: {[key: string]: any};
    /**
     * The list of models.
     */
    models?: outputs.machinelearningservices.v20200501preview.ModelResponse[];
    /**
     * The Kubernetes namespace of the deployment.
     */
    namespace?: string;
    /**
     * The number of replicas on the cluster.
     */
    numReplicas?: number;
    /**
     * The service property dictionary. Properties are immutable.
     */
    properties?: {[key: string]: string};
    /**
     * The scoring timeout in milliseconds.
     */
    scoringTimeoutMs?: number;
    /**
     * The Uri for sending scoring requests.
     */
    scoringUri: string;
    /**
     * The current state of the service.
     */
    state: string;
    /**
     * The Uri for sending swagger requests.
     */
    swaggerUri: string;
    /**
     * The amount of traffic variant receives.
     */
    trafficPercentile?: number;
    /**
     * The type of the variant.
     */
    type?: string;
}

/**
 * The auto scaler properties.
 */
export interface AKSServiceResponseResponseAutoScaler {
    /**
     * Option to enable/disable auto scaling.
     */
    autoscaleEnabled?: boolean;
    /**
     * The maximum number of replicas in the cluster.
     */
    maxReplicas?: number;
    /**
     * The minimum number of replicas to scale down to.
     */
    minReplicas?: number;
    /**
     * The amount of seconds to wait between auto scale updates.
     */
    refreshPeriodInSeconds?: number;
    /**
     * The target utilization percentage to use for determining whether to scale the cluster.
     */
    targetUtilization?: number;
}

/**
 * Details of the data collection options specified.
 */
export interface AKSServiceResponseResponseDataCollection {
    /**
     * Option for enabling/disabling Event Hub.
     */
    eventHubEnabled?: boolean;
    /**
     * Option for enabling/disabling storage.
     */
    storageEnabled?: boolean;
}

/**
 * The deployment status.
 */
export interface AKSServiceResponseResponseDeploymentStatus {
    /**
     * The number of available replicas.
     */
    availableReplicas?: number;
    /**
     * The desired number of replicas.
     */
    desiredReplicas?: number;
    /**
     * The error details.
     */
    error?: outputs.machinelearningservices.v20200501preview.AKSReplicaStatusResponseError;
    /**
     * The number of updated replicas.
     */
    updatedReplicas?: number;
}

/**
 * The Environment, models and assets used for inferencing.
 */
export interface AKSServiceResponseResponseEnvironmentImageRequest {
    /**
     * The list of assets.
     */
    assets?: outputs.machinelearningservices.v20200501preview.ImageAssetResponse[];
    /**
     * The name of the driver file.
     */
    driverProgram?: string;
    /**
     * The details of the AZURE ML environment.
     */
    environment?: outputs.machinelearningservices.v20200501preview.EnvironmentImageResponseResponseEnvironment;
    /**
     * The unique identifying details of the AZURE ML environment.
     */
    environmentReference?: outputs.machinelearningservices.v20200501preview.EnvironmentImageResponseResponseEnvironmentReference;
    /**
     * The list of model Ids.
     */
    modelIds?: string[];
    /**
     * The list of models.
     */
    models?: outputs.machinelearningservices.v20200501preview.ModelResponse[];
}

/**
 * The liveness probe requirements.
 */
export interface AKSServiceResponseResponseLivenessProbeRequirements {
    /**
     * The number of failures to allow before returning an unhealthy status.
     */
    failureThreshold?: number;
    /**
     * The delay before the first probe in seconds.
     */
    initialDelaySeconds?: number;
    /**
     * The length of time between probes in seconds.
     */
    periodSeconds?: number;
    /**
     * The number of successful probes before returning a healthy status.
     */
    successThreshold?: number;
    /**
     * The probe timeout in seconds.
     */
    timeoutSeconds?: number;
}

/**
 * The response for an AKS variant.
 */
export interface AKSVariantResponseResponse {
    /**
     * The compute environment type for the service.
     * Expected value is 'Custom'.
     */
    computeType: "Custom";
    /**
     * The deployment type for the service.
     */
    deploymentType?: string;
    /**
     * The service description.
     */
    description?: string;
    /**
     * The error details.
     */
    error: outputs.machinelearningservices.v20200501preview.ServiceResponseBaseResponseError;
    /**
     * Is this the default variant.
     */
    isDefault?: boolean;
    /**
     * The service tag dictionary. Tags are mutable.
     */
    kvTags?: {[key: string]: string};
    /**
     * The service property dictionary. Properties are immutable.
     */
    properties?: {[key: string]: string};
    /**
     * The current state of the service.
     */
    state: string;
    /**
     * The amount of traffic variant receives.
     */
    trafficPercentile?: number;
    /**
     * The type of the variant.
     */
    type?: string;
}

/**
 * Advance configuration for AKS networking
 */
export interface AksNetworkingConfigurationResponse {
    /**
     * An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
     */
    dnsServiceIP?: string;
    /**
     * A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
     */
    dockerBridgeCidr?: string;
    /**
     * A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
     */
    serviceCidr?: string;
    /**
     * Virtual network subnet resource ID the compute nodes belong to
     */
    subnetId?: string;
}

/**
 * Compute node information related to a AmlCompute.
 */
export interface AmlComputeNodeInformationResponse {
    /**
     * ID of the compute node.
     */
    nodeId: string;
    /**
     * State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
     */
    nodeState: string;
    /**
     * SSH port number of the node.
     */
    port: number;
    /**
     * Private IP address of the compute node.
     */
    privateIpAddress: string;
    /**
     * Public IP address of the compute node.
     */
    publicIpAddress: string;
    /**
     * ID of the Experiment running on the node, if any else null.
     */
    runId: string;
}

/**
 * An Azure Machine Learning compute.
 */
export interface AmlComputeResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'AmlCompute'.
     */
    computeType: "AmlCompute";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    /**
     * AML Compute properties
     */
    properties?: outputs.machinelearningservices.v20200501preview.AmlComputeResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200501preview.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}
/**
 * amlComputeResponseProvideDefaults sets the appropriate defaults for AmlComputeResponse
 */
export function amlComputeResponseProvideDefaults(val: AmlComputeResponse): AmlComputeResponse {
    return {
        ...val,
        properties: (val.properties ? outputs.machinelearningservices.v20200501preview.amlComputeResponsePropertiesProvideDefaults(val.properties) : undefined),
    };
}

/**
 * AML Compute properties
 */
export interface AmlComputeResponseProperties {
    /**
     * Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
     */
    allocationState: string;
    /**
     * The time at which the compute entered its current allocation state.
     */
    allocationStateTransitionTime: string;
    /**
     * The number of compute nodes currently assigned to the compute.
     */
    currentNodeCount: number;
    /**
     * Collection of errors encountered by various compute nodes during node setup.
     */
    errors: outputs.machinelearningservices.v20200501preview.MachineLearningServiceErrorResponse[];
    /**
     * Counts of various node states on the compute.
     */
    nodeStateCounts: outputs.machinelearningservices.v20200501preview.NodeStateCountsResponse;
    /**
     * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
     */
    remoteLoginPortPublicAccess?: string;
    /**
     * Scale settings for AML Compute
     */
    scaleSettings?: outputs.machinelearningservices.v20200501preview.ScaleSettingsResponse;
    /**
     * Virtual network subnet resource ID the compute nodes belong to.
     */
    subnet?: outputs.machinelearningservices.v20200501preview.ResourceIdResponse;
    /**
     * The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
     */
    targetNodeCount: number;
    /**
     * Credentials for an administrator user account that will be created on each compute node.
     */
    userAccountCredentials?: outputs.machinelearningservices.v20200501preview.UserAccountCredentialsResponse;
    /**
     * Virtual Machine priority
     */
    vmPriority?: string;
    /**
     * Virtual Machine Size
     */
    vmSize?: string;
}
/**
 * amlComputeResponsePropertiesProvideDefaults sets the appropriate defaults for AmlComputeResponseProperties
 */
export function amlComputeResponsePropertiesProvideDefaults(val: AmlComputeResponseProperties): AmlComputeResponseProperties {
    return {
        ...val,
        remoteLoginPortPublicAccess: (val.remoteLoginPortPublicAccess) ?? "NotSpecified",
        scaleSettings: (val.scaleSettings ? outputs.machinelearningservices.v20200501preview.scaleSettingsResponseProvideDefaults(val.scaleSettings) : undefined),
    };
}

export interface AzureDataLakeSectionResponse {
    /**
     * The authority URL used for authentication.
     */
    authorityUrl?: string;
    /**
     * The content of the certificate used for authentication.
     */
    certificate?: string;
    /**
     * The Client ID/Application ID
     */
    clientId?: string;
    /**
     * The client secret.
     */
    clientSecret?: string;
    /**
     * The Azure Data Lake credential type.
     */
    credentialType?: string;
    /**
     *  Is it using certificate to authenticate. If false then use client secret.
     */
    isCertAuth?: boolean;
    /**
     * Resource Group.
     */
    resourceGroup?: string;
    /**
     * The resource the service principal/app has access to.
     */
    resourceUri?: string;
    /**
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    serviceDataAccessAuthIdentity?: string;
    /**
     * The Azure Data Lake store name.
     */
    storeName?: string;
    /**
     * Subscription ID.
     */
    subscriptionId?: string;
    /**
     * The ID of the tenant the service principal/app belongs to.
     */
    tenantId?: string;
    /**
     * The thumbprint of the certificate above.
     */
    thumbprint?: string;
}

export interface AzureMySqlSectionResponse {
    /**
     * The authority URL used for authentication.
     */
    authorityUrl?: string;
    /**
     * The content of the certificate used for authentication.
     */
    certificate?: string;
    /**
     * The Client ID/Application ID
     */
    clientId?: string;
    /**
     * The client secret.
     */
    clientSecret?: string;
    /**
     * Sql Authentication type.
     */
    credentialType?: string;
    /**
     * The Azure SQL database name.
     */
    databaseName?: string;
    /**
     * The server host endpoint.
     */
    endpoint?: string;
    /**
     *  Is it using certificate to authenticate. If false then use client secret.
     */
    isCertAuth?: boolean;
    /**
     * / The Azure SQL port number.
     */
    portNumber?: string;
    /**
     * Resource Group.
     */
    resourceGroup?: string;
    /**
     * The resource the service principal/app has access to.
     */
    resourceUri?: string;
    /**
     * The Azure SQL server name.
     */
    serverName?: string;
    /**
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    serviceDataAccessAuthIdentity?: string;
    /**
     * Subscription ID.
     */
    subscriptionId?: string;
    /**
     * The ID of the tenant the service principal/app belongs to.
     */
    tenantId?: string;
    /**
     * The thumbprint of the certificate above.
     */
    thumbprint?: string;
    /**
     * The Azure SQL user id.
     */
    userId?: string;
    /**
     * The Azure SQL user password.
     */
    userPassword?: string;
}

export interface AzurePostgreSqlSectionResponse {
    /**
     * The authority URL used for authentication.
     */
    authorityUrl?: string;
    /**
     * The content of the certificate used for authentication.
     */
    certificate?: string;
    /**
     * The Client ID/Application ID
     */
    clientId?: string;
    /**
     * The client secret.
     */
    clientSecret?: string;
    /**
     * Sql Authentication type.
     */
    credentialType?: string;
    /**
     * The Azure SQL database name.
     */
    databaseName?: string;
    /**
     * Indicates SSL requirement of Azure Postgresql server.
     */
    enableSsl?: boolean;
    /**
     * The server host endpoint.
     */
    endpoint?: string;
    /**
     *  Is it using certificate to authenticate. If false then use client secret.
     */
    isCertAuth?: boolean;
    /**
     * / The Azure SQL port number.
     */
    portNumber?: string;
    /**
     * Resource Group.
     */
    resourceGroup?: string;
    /**
     * The resource the service principal/app has access to.
     */
    resourceUri?: string;
    /**
     * The Azure SQL server name.
     */
    serverName?: string;
    /**
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    serviceDataAccessAuthIdentity?: string;
    /**
     * Subscription ID.
     */
    subscriptionId?: string;
    /**
     * The ID of the tenant the service principal/app belongs to.
     */
    tenantId?: string;
    /**
     * The thumbprint of the certificate above.
     */
    thumbprint?: string;
    /**
     * The Azure SQL user id.
     */
    userId?: string;
    /**
     * The Azure SQL user password.
     */
    userPassword?: string;
}

export interface AzureSqlDatabaseSectionResponse {
    /**
     * The authority URL used for authentication.
     */
    authorityUrl?: string;
    /**
     * The content of the certificate used for authentication.
     */
    certificate?: string;
    /**
     * The Client ID/Application ID
     */
    clientId?: string;
    /**
     * The client secret.
     */
    clientSecret?: string;
    /**
     * Sql Authentication type.
     */
    credentialType?: string;
    /**
     * The Azure SQL database name.
     */
    databaseName?: string;
    /**
     * The server host endpoint.
     */
    endpoint?: string;
    /**
     *  Is it using certificate to authenticate. If false then use client secret.
     */
    isCertAuth?: boolean;
    /**
     * / The Azure SQL port number.
     */
    portNumber?: string;
    /**
     * Resource Group.
     */
    resourceGroup?: string;
    /**
     * The resource the service principal/app has access to.
     */
    resourceUri?: string;
    /**
     * The Azure SQL server name.
     */
    serverName?: string;
    /**
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    serviceDataAccessAuthIdentity?: string;
    /**
     * Subscription ID.
     */
    subscriptionId?: string;
    /**
     * The ID of the tenant the service principal/app belongs to.
     */
    tenantId?: string;
    /**
     * The thumbprint of the certificate above.
     */
    thumbprint?: string;
    /**
     * The Azure SQL user id.
     */
    userId?: string;
    /**
     * The Azure SQL user password.
     */
    userPassword?: string;
}

export interface AzureStorageSectionResponse {
    /**
     *  Storage Account Key (Deprecated).
     */
    accountKey?: string;
    /**
     * Storage Account Name.
     */
    accountName?: string;
    /**
     * Indicate if we are using Workspace ManagedIdentities/MSI token (Deprecated).
     */
    areWorkspaceManagedIdentitiesAllowed?: boolean;
    /**
     *  If this is an "DataStoreType.AzureBlob", the length of time (in seconds) to cache files locally after they are accessed (downloaded).
     */
    blobCacheTimeout?: number;
    clientCredentials?: outputs.machinelearningservices.v20200501preview.ClientCredentialsResponse;
    /**
     * The storage container name.
     */
    containerName?: string;
    /**
     * The credential.
     */
    credential?: string;
    /**
     *  The credential type.
     */
    credentialType?: string;
    /**
     * The host of the container.
     */
    endpoint?: string;
    /**
     * Indicate if we are using SAS token or Account Key (Deprecated).
     */
    isSas?: boolean;
    /**
     * The protocol to use. Defaults to https.
     */
    protocol?: string;
    /**
     * Resource Group.
     */
    resourceGroup?: string;
    /**
     *  SAS Token for the container (Deprecated).
     */
    sasToken?: string;
    /**
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    serviceDataAccessAuthIdentity?: string;
    /**
     * Subscription ID.
     */
    subscriptionId?: string;
}

export interface ClientCredentialsResponse {
    /**
     * The authority URL used for authentication.
     */
    authorityUrl?: string;
    /**
     * The content of the certificate used for authentication.
     */
    certificate?: string;
    /**
     * The Client ID/Application ID
     */
    clientId?: string;
    /**
     * The client secret.
     */
    clientSecret?: string;
    /**
     *  Is it using certificate to authenticate. If false then use client secret.
     */
    isCertAuth?: boolean;
    /**
     * Resource Group.
     */
    resourceGroup?: string;
    /**
     * The resource the service principal/app has access to.
     */
    resourceUri?: string;
    /**
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    serviceDataAccessAuthIdentity?: string;
    /**
     * Subscription ID.
     */
    subscriptionId?: string;
    /**
     * The ID of the tenant the service principal/app belongs to.
     */
    tenantId?: string;
    /**
     * The thumbprint of the certificate above.
     */
    thumbprint?: string;
}

/**
 * The resource requirements for the container (cpu and memory).
 */
export interface ContainerResourceRequirementsResponse {
    /**
     * The number of CPU cores on the container.
     */
    cpu?: number;
    /**
     * The number of FPGA PCIE devices exposed to the container. Must be multiple of 2.
     */
    fpga?: number;
    /**
     * The number of GPU cores in the container.
     */
    gpu?: number;
    /**
     * The amount of memory on the container in GB.
     */
    memoryInGB?: number;
}

/**
 * A DataFactory compute.
 */
export interface DataFactoryResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'DataFactory'.
     */
    computeType: "DataFactory";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200501preview.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

/**
 * A DataLakeAnalytics compute.
 */
export interface DataLakeAnalyticsResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'DataLakeAnalytics'.
     */
    computeType: "DataLakeAnalytics";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    properties?: outputs.machinelearningservices.v20200501preview.DataLakeAnalyticsResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200501preview.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

export interface DataLakeAnalyticsResponseProperties {
    /**
     * DataLake Store Account Name
     */
    dataLakeStoreAccountName?: string;
}

/**
 * A DataFactory compute.
 */
export interface DatabricksResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'Databricks'.
     */
    computeType: "Databricks";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    properties?: outputs.machinelearningservices.v20200501preview.DatabricksResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200501preview.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

export interface DatabricksResponseProperties {
    /**
     * Databricks access token
     */
    databricksAccessToken?: string;
}

/**
 * The dataset reference object.
 */
export interface DatasetReferenceResponse {
    /**
     * The id of the dataset reference.
     */
    id?: string;
    /**
     * The name of the dataset reference.
     */
    name?: string;
}

/**
 * Machine Learning dataset object.
 */
export interface DatasetResponse {
    /**
     * The dataset creation time (UTC).
     */
    createdTime: string;
    /**
     * Unique Dataset identifier.
     */
    datasetId: string;
    /**
     * Dataset state
     */
    datasetState?: outputs.machinelearningservices.v20200501preview.DatasetStateResponse;
    /**
     * Dataset Type.
     */
    datasetType: string;
    /**
     * Name of the default compute to be used for any Dataset actions (such as Profile, Write).
     */
    defaultCompute: string;
    /**
     * Description about this dataset version.
     */
    description: string;
    /**
     * eTag description
     */
    etag: string;
    /**
     * Flag to hide Dataset in UI
     */
    isVisible: boolean;
    /**
     * Last created Dataset definition.
     */
    latest?: outputs.machinelearningservices.v20200501preview.DatasetResponseLatest;
    /**
     * The dataset last modified time (UTC).
     */
    modifiedTime: string;
    /**
     * Unique dataset name
     */
    name: string;
    /**
     * Tags for this dataset version.
     */
    tags: {[key: string]: string};
}

/**
 *  Datastore and reference to location of data such as relativePath, Sql Query and etc.
 */
export interface DatasetResponseDataPath {
    /**
     * Additional Properties.
     */
    additionalProperties?: {[key: string]: any};
    /**
     * Azure path for Azure Blob or File
     */
    azureFilePath: string;
    /**
     * Data store Name
     */
    datastoreName: string;
    /**
     * HTTP URL.
     */
    httpUrl: string;
    /**
     * Specify the partition format of path. Defaults to None.
     */
    partitionFormat: string;
    /**
     * Whether or not to ignore unmatched path.
     */
    partitionFormatIgnoreError: boolean;
    /**
     * List of files expanded from a file GLOB specified
     */
    paths: string[];
    /**
     * Relative path in the data store
     */
    relativePath: string;
    /**
     * Sql Query/Table/Stored Procedure details.
     */
    sqlDataPath?: outputs.machinelearningservices.v20200501preview.DatasetResponseSqlDataPath;
}

/**
 * Last created Dataset definition.
 */
export interface DatasetResponseLatest {
    /**
     * User who created.
     */
    createdBy?: outputs.machinelearningservices.v20200501preview.UserInfoResponse;
    /**
     * The dataset creation time (UTC).
     */
    createdTime: string;
    /**
     *  Datastore and reference to location of data such as relativePath, Sql Query and etc.
     */
    dataPath?: outputs.machinelearningservices.v20200501preview.DatasetResponseDataPath;
    /**
     * Dataflow Json
     */
    dataflow: string;
    /**
     * Dataset state
     */
    datasetDefinitionState?: outputs.machinelearningservices.v20200501preview.DatasetStateResponse;
    /**
     * Unique Dataset identifier.
     */
    datasetId: string;
    /**
     * Description about the dataset.
     */
    description: string;
    /**
     * eTag description
     */
    etag: string;
    /**
     * Dataset FileType, specified by user.
     */
    fileType: string;
    /**
     * The dataset last modified time (UTC).
     */
    modifiedTime: string;
    /**
     * Summary of Definition changes.
     */
    notes: string;
    /**
     * Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
     */
    partitionFormatInPath: boolean;
    /**
     * Properties stores information like name of time series column for time series dataset.
     */
    properties?: {[key: string]: any};
    /**
     * Indicates the saved dataset this definition is mapping to, populated on Get.
     */
    savedDatasetId: string;
    /**
     * Tags associated with the dataset.
     */
    tags: {[key: string]: string};
    /**
     *  Telemetry information about the dataset including information like which service the dataset was created from.
     */
    telemetryInfo: {[key: string]: string};
    /**
     *  Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
     */
    useDescriptionTagsFromDefinition: boolean;
    /**
     * An identifier uniquely identifies a definition change.
     */
    versionId: string;
}

/**
 * Sql Query/Table/Stored Procedure details.
 */
export interface DatasetResponseSqlDataPath {
    /**
     * SQL query timeout. Unit in seconds.
     */
    queryTimeout: number;
    /**
     * SQL query
     */
    sqlQuery: string;
    /**
     * SQL storedProcedure name
     */
    sqlStoredProcedureName: string;
    /**
     * SQL table name
     */
    sqlTableName: string;
}

/**
 * Dataset state
 */
export interface DatasetStateResponse {
    /**
     * Reference to better Dataset or a Definition
     */
    deprecatedBy?: outputs.machinelearningservices.v20200501preview.DatasetStateResponseDeprecatedBy;
    /**
     * eTag description
     */
    etag: string;
    /**
     * Dataset state
     */
    state?: string;
}

/**
 * Reference to better Dataset or a Definition
 */
export interface DatasetStateResponseDeprecatedBy {
    /**
     * Unique Dataset identifier.
     */
    datasetId: string;
    /**
     * Definition Version
     */
    definitionVersion?: string;
}

/**
 * Machine Learning datastore object.
 */
export interface DatastoreResponse {
    azureDataLakeSection?: outputs.machinelearningservices.v20200501preview.AzureDataLakeSectionResponse;
    azureMySqlSection?: outputs.machinelearningservices.v20200501preview.AzureMySqlSectionResponse;
    azurePostgreSqlSection?: outputs.machinelearningservices.v20200501preview.AzurePostgreSqlSectionResponse;
    azureSqlDatabaseSection?: outputs.machinelearningservices.v20200501preview.AzureSqlDatabaseSectionResponse;
    azureStorageSection?: outputs.machinelearningservices.v20200501preview.AzureStorageSectionResponse;
    /**
     * The User who created the datastore.
     */
    createdBy: outputs.machinelearningservices.v20200501preview.UserInfoResponse;
    /**
     * The date and time when the datastore was created.
     */
    createdTime: string;
    /**
     * The datastore type.
     */
    dataStoreType?: string;
    /**
     * Description of the datastore.
     */
    description?: string;
    /**
     * Data specific to GlusterFS.
     */
    glusterFsSection?: outputs.machinelearningservices.v20200501preview.GlusterFsSectionResponse;
    /**
     * A read only property that denotes whether the service datastore has been validated with credentials.
     */
    hasBeenValidated?: boolean;
    /**
     * Info about origin if it is linked.
     */
    linkedInfo?: outputs.machinelearningservices.v20200501preview.LinkedInfoResponse;
    /**
     * The User who modified the datastore.
     */
    modifiedBy: outputs.machinelearningservices.v20200501preview.UserInfoResponse;
    /**
     * The date and time when the datastore was last modified.
     */
    modifiedTime: string;
    /**
     * Name of the datastore.
     */
    name?: string;
    /**
     * Tags for this datastore.
     */
    tags: {[key: string]: string};
}
/**
 * datastoreResponseProvideDefaults sets the appropriate defaults for DatastoreResponse
 */
export function datastoreResponseProvideDefaults(val: DatastoreResponse): DatastoreResponse {
    return {
        ...val,
        hasBeenValidated: (val.hasBeenValidated) ?? false,
    };
}

export interface EncryptionPropertyResponse {
    /**
     * Customer Key vault properties.
     */
    keyVaultProperties: outputs.machinelearningservices.v20200501preview.KeyVaultPropertiesResponse;
    /**
     * Indicates whether or not the encryption is enabled for the workspace.
     */
    status: string;
}

/**
 * The details of the AZURE ML environment.
 */
export interface EnvironmentImageResponseResponseEnvironment {
    /**
     * The definition of a Docker container.
     */
    docker?: outputs.machinelearningservices.v20200501preview.ModelEnvironmentDefinitionResponseResponseDocker;
    /**
     * Definition of environment variables to be defined in the environment.
     */
    environmentVariables?: {[key: string]: string};
    /**
     * The inferencing stack version added to the image. To avoid adding an inferencing stack, do not set this value. Valid values: "latest".
     */
    inferencingStackVersion?: string;
    /**
     * The name of the environment.
     */
    name?: string;
    /**
     * Settings for a Python environment.
     */
    python?: outputs.machinelearningservices.v20200501preview.ModelEnvironmentDefinitionResponseResponsePython;
    /**
     * Settings for a R environment.
     */
    r?: outputs.machinelearningservices.v20200501preview.ModelEnvironmentDefinitionResponseResponseR;
    /**
     * The configuration for a Spark environment.
     */
    spark?: outputs.machinelearningservices.v20200501preview.ModelEnvironmentDefinitionResponseResponseSpark;
    /**
     * The environment version.
     */
    version?: string;
}

/**
 * The unique identifying details of the AZURE ML environment.
 */
export interface EnvironmentImageResponseResponseEnvironmentReference {
    /**
     * Name of the environment.
     */
    name?: string;
    /**
     * Version of the environment.
     */
    version?: string;
}

/**
 * Error detail information.
 */
export interface ErrorDetailResponse {
    /**
     * Error code.
     */
    code: string;
    /**
     * Error message.
     */
    message: string;
}

/**
 * Error response information.
 */
export interface ErrorResponseResponse {
    /**
     * Error code.
     */
    code: string;
    /**
     * An array of error detail objects.
     */
    details: outputs.machinelearningservices.v20200501preview.ErrorDetailResponse[];
    /**
     * Error message.
     */
    message: string;
}

/**
 * Data specific to GlusterFS.
 */
export interface GlusterFsSectionResponse {
    /**
     * The server address of one of the servers that hosts the GlusterFS. Can be either the IP address or server name.
     */
    serverAddress: string;
    /**
     * The name of the created GlusterFS volume.
     */
    volumeName: string;
}

/**
 * A HDInsight compute.
 */
export interface HDInsightResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'HDInsight'.
     */
    computeType: "HDInsight";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    properties?: outputs.machinelearningservices.v20200501preview.HDInsightResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200501preview.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

export interface HDInsightResponseProperties {
    /**
     * Public IP address of the master node of the cluster.
     */
    address?: string;
    /**
     * Admin credentials for master node of the cluster
     */
    administratorAccount?: outputs.machinelearningservices.v20200501preview.VirtualMachineSshCredentialsResponse;
    /**
     * Port open for ssh connections on the master node of the cluster.
     */
    sshPort?: number;
}

/**
 * Identity for the resource.
 */
export interface IdentityResponse {
    /**
     * The principal ID of resource identity.
     */
    principalId: string;
    /**
     * The tenant ID of resource.
     */
    tenantId: string;
    /**
     * The identity type.
     */
    type?: string;
    /**
     * The user assigned identities associated with the resource.
     */
    userAssignedIdentities?: {[key: string]: outputs.machinelearningservices.v20200501preview.UserAssignedIdentityResponse};
}

/**
 * An Image asset.
 */
export interface ImageAssetResponse {
    /**
     * The Asset Id.
     */
    id?: string;
    /**
     * The mime type.
     */
    mimeType?: string;
    /**
     * Whether the Asset is unpacked.
     */
    unpack?: boolean;
    /**
     * The Url of the Asset.
     */
    url?: string;
}

export interface KeyVaultPropertiesResponse {
    /**
     * For future use - The client id of the identity which will be used to access key vault.
     */
    identityClientId?: string;
    /**
     * Key vault uri to access the encryption key.
     */
    keyIdentifier: string;
    /**
     * The ArmId of the keyVault where the customer owned encryption key is present.
     */
    keyVaultArmId: string;
}

/**
 * Info about origin if it is linked.
 */
export interface LinkedInfoResponse {
    /**
     * LinkedId id.
     */
    linkedId?: string;
    /**
     * Linked resource name.
     */
    linkedResourceName?: string;
    /**
     * Datastore origin
     */
    origin?: string;
}

/**
 * LinkedWorkspace specific properties.
 */
export interface LinkedWorkspacePropsResponse {
    /**
     * ResourceId of the link target of the linked workspace.
     */
    linkedWorkspaceResourceId?: string;
    /**
     * ResourceId of the user assigned identity for the linked workspace.
     */
    userAssignedIdentityResourceId?: string;
}

/**
 * Wrapper for error response to follow ARM guidelines.
 */
export interface MachineLearningServiceErrorResponse {
    /**
     * The error response.
     */
    error: outputs.machinelearningservices.v20200501preview.ErrorResponseResponse;
}

/**
 * Image registry that contains the base image.
 */
export interface ModelDockerSectionResponseResponseBaseImageRegistry {
    address?: string;
}

/**
 * The definition of a Docker container.
 */
export interface ModelEnvironmentDefinitionResponseResponseDocker {
    /**
     * Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.
     */
    baseDockerfile?: string;
    /**
     * Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.
     */
    baseImage?: string;
    /**
     * Image registry that contains the base image.
     */
    baseImageRegistry?: outputs.machinelearningservices.v20200501preview.ModelDockerSectionResponseResponseBaseImageRegistry;
}

/**
 * Settings for a Python environment.
 */
export interface ModelEnvironmentDefinitionResponseResponsePython {
    baseCondaEnvironment?: string;
    /**
     * A JObject containing Conda dependencies.
     */
    condaDependencies?: any;
    /**
     * The python interpreter path to use if an environment build is not required. The path specified gets used to call the user script.
     */
    interpreterPath?: string;
    /**
     * True means that AzureML reuses an existing python environment; False means that AzureML will create a python environment based on the Conda dependencies specification.
     */
    userManagedDependencies?: boolean;
}

/**
 * Settings for a R environment.
 */
export interface ModelEnvironmentDefinitionResponseResponseR {
    /**
     * The packages from Bioconductor.
     */
    bioConductorPackages?: string[];
    /**
     * The CRAN packages to use.
     */
    cranPackages?: outputs.machinelearningservices.v20200501preview.RCranPackageResponse[];
    /**
     * The packages from custom urls.
     */
    customUrlPackages?: string[];
    /**
     * The packages directly from GitHub.
     */
    gitHubPackages?: outputs.machinelearningservices.v20200501preview.RGitHubPackageResponseResponse[];
    /**
     * The version of R to be installed
     */
    rVersion?: string;
    /**
     * The Rscript path to use if an environment build is not required.
     * The path specified gets used to call the user script.
     */
    rscriptPath?: string;
    /**
     * Date of MRAN snapshot to use in YYYY-MM-DD format, e.g. "2019-04-17"
     */
    snapshotDate?: string;
    /**
     * Indicates whether the environment is managed by user or by AzureML.
     */
    userManaged?: boolean;
}

/**
 * The configuration for a Spark environment.
 */
export interface ModelEnvironmentDefinitionResponseResponseSpark {
    /**
     * The Spark packages to use.
     */
    packages?: outputs.machinelearningservices.v20200501preview.SparkMavenPackageResponse[];
    /**
     * Whether to precache the packages.
     */
    precachePackages?: boolean;
    /**
     * The list of spark repositories.
     */
    repositories?: string[];
}

/**
 * An Azure Machine Learning Model.
 */
export interface ModelResponse {
    /**
     * The Model creation time (UTC).
     */
    createdTime?: string;
    /**
     * The list of datasets associated with the model.
     */
    datasets?: outputs.machinelearningservices.v20200501preview.DatasetReferenceResponse[];
    /**
     * Models derived from this model
     */
    derivedModelIds?: string[];
    /**
     * The Model description text.
     */
    description?: string;
    /**
     * The name of the experiment where this model was created.
     */
    experimentName?: string;
    /**
     * The Model framework.
     */
    framework?: string;
    /**
     * The Model framework version.
     */
    frameworkVersion?: string;
    /**
     * The Model Id.
     */
    id?: string;
    /**
     * The Model tag dictionary. Items are mutable.
     */
    kvTags?: {[key: string]: string};
    /**
     * The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml
     */
    mimeType: string;
    /**
     * The Model last modified time (UTC).
     */
    modifiedTime?: string;
    /**
     * The Model name.
     */
    name: string;
    /**
     * The Parent Model Id.
     */
    parentModelId?: string;
    /**
     * The Model property dictionary. Properties are immutable.
     */
    properties?: {[key: string]: string};
    /**
     * Resource requirements for the model
     */
    resourceRequirements?: outputs.machinelearningservices.v20200501preview.ContainerResourceRequirementsResponse;
    /**
     * The RunId that created this model.
     */
    runId?: string;
    /**
     * Sample Input Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}
     */
    sampleInputData?: string;
    /**
     * Sample Output Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}
     */
    sampleOutputData?: string;
    /**
     * Indicates whether we need to unpack the Model during docker Image creation.
     */
    unpack?: boolean;
    /**
     * The URL of the Model. Usually a SAS URL.
     */
    url: string;
    /**
     * The Model version assigned by Model Management Service.
     */
    version?: number;
}

/**
 * Counts of various compute node states on the amlCompute.
 */
export interface NodeStateCountsResponse {
    /**
     * Number of compute nodes in idle state.
     */
    idleNodeCount: number;
    /**
     * Number of compute nodes which are leaving the amlCompute.
     */
    leavingNodeCount: number;
    /**
     * Number of compute nodes which are in preempted state.
     */
    preemptedNodeCount: number;
    /**
     * Number of compute nodes which are being prepared.
     */
    preparingNodeCount: number;
    /**
     * Number of compute nodes which are running jobs.
     */
    runningNodeCount: number;
    /**
     * Number of compute nodes which are in unusable state.
     */
    unusableNodeCount: number;
}

export interface PasswordResponse {
    name: string;
    value: string;
}

/**
 * The Private Endpoint Connection resource.
 */
export interface PrivateEndpointConnectionResponse {
    /**
     * Specifies the resource ID.
     */
    id: string;
    /**
     * The identity of the resource.
     */
    identity?: outputs.machinelearningservices.v20200501preview.IdentityResponse;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * Specifies the name of the resource.
     */
    name: string;
    /**
     * The resource of private end point.
     */
    privateEndpoint?: outputs.machinelearningservices.v20200501preview.PrivateEndpointResponse;
    /**
     * A collection of information about the state of the connection between service consumer and provider.
     */
    privateLinkServiceConnectionState: outputs.machinelearningservices.v20200501preview.PrivateLinkServiceConnectionStateResponse;
    /**
     * The provisioning state of the private endpoint connection resource.
     */
    provisioningState: string;
    /**
     * The sku of the workspace.
     */
    sku?: outputs.machinelearningservices.v20200501preview.SkuResponse;
    /**
     * Contains resource tags defined as key/value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * Specifies the type of the resource.
     */
    type: string;
}

/**
 * The Private Endpoint resource.
 */
export interface PrivateEndpointResponse {
    /**
     * The ARM identifier for Private Endpoint
     */
    id: string;
}

/**
 * A collection of information about the state of the connection between service consumer and provider.
 */
export interface PrivateLinkServiceConnectionStateResponse {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: string;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: string;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: string;
}

export interface RCranPackageResponse {
    /**
     * The package name.
     */
    name?: string;
    /**
     * The repository name.
     */
    repository?: string;
}

export interface RGitHubPackageResponseResponse {
    /**
     * Repository address in the format username/repo[/subdir][@ref|#pull].
     */
    repository?: string;
}

export interface RegistryListCredentialsResultResponse {
    location: string;
    passwords?: outputs.machinelearningservices.v20200501preview.PasswordResponse[];
    username: string;
}

/**
 * Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
 */
export interface ResourceIdResponse {
    /**
     * The ID of the resource
     */
    id: string;
}

/**
 * scale settings for AML Compute
 */
export interface ScaleSettingsResponse {
    /**
     * Max number of nodes to use
     */
    maxNodeCount: number;
    /**
     * Min number of nodes to use
     */
    minNodeCount?: number;
    /**
     * Node Idle Time before scaling down amlCompute
     */
    nodeIdleTimeBeforeScaleDown?: string;
}
/**
 * scaleSettingsResponseProvideDefaults sets the appropriate defaults for ScaleSettingsResponse
 */
export function scaleSettingsResponseProvideDefaults(val: ScaleSettingsResponse): ScaleSettingsResponse {
    return {
        ...val,
        minNodeCount: (val.minNodeCount) ?? 0,
    };
}

/**
 * The error details.
 */
export interface ServiceResponseBaseResponseError {
    /**
     * Error code.
     */
    code: string;
    /**
     * An array of error detail objects.
     */
    details: outputs.machinelearningservices.v20200501preview.ErrorDetailResponse[];
    /**
     * Error message.
     */
    message: string;
}

export interface SharedPrivateLinkResourceResponse {
    /**
     * The private link resource group id.
     */
    groupId?: string;
    /**
     * Unique name of the private link.
     */
    name?: string;
    /**
     * The resource id that private link links to.
     */
    privateLinkResourceId?: string;
    /**
     * Request message.
     */
    requestMessage?: string;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: string;
}

/**
 * Sku of the resource
 */
export interface SkuResponse {
    /**
     * Name of the sku
     */
    name?: string;
    /**
     * Tier of the sku like Basic or Enterprise
     */
    tier?: string;
}

export interface SparkMavenPackageResponse {
    artifact?: string;
    group?: string;
    version?: string;
}

/**
 * The ssl configuration for scoring
 */
export interface SslConfigurationResponse {
    /**
     * Cert data
     */
    cert?: string;
    /**
     * CNAME of the cert
     */
    cname?: string;
    /**
     * Key data
     */
    key?: string;
    /**
     * Enable or disable ssl for scoring
     */
    status?: string;
}

/**
 * A system service running on a compute.
 */
export interface SystemServiceResponse {
    /**
     * Public IP address
     */
    publicIpAddress: string;
    /**
     * The type of this system service.
     */
    systemServiceType: string;
    /**
     * The version for this type.
     */
    version: string;
}

/**
 * Settings for user account that gets created on each on the nodes of a compute.
 */
export interface UserAccountCredentialsResponse {
    /**
     * Name of the administrator user account which can be used to SSH to nodes.
     */
    adminUserName: string;
    /**
     * Password of the administrator user account.
     */
    adminUserPassword?: string;
    /**
     * SSH public key of the administrator user account.
     */
    adminUserSshPublicKey?: string;
}

/**
 * User Assigned Identity
 */
export interface UserAssignedIdentityResponse {
    /**
     * The clientId(aka appId) of the user assigned identity.
     */
    clientId: string;
    /**
     * The principal ID of the user assigned identity.
     */
    principalId: string;
    /**
     * The tenant ID of the user assigned identity.
     */
    tenantId: string;
}

/**
 * User who created.
 */
export interface UserInfoResponse {
    /**
     * A user alternate sec id. This represents the user in a different identity provider system Eg.1:live.com:puid
     */
    userAltSecId?: string;
    /**
     * A user identity provider. Eg live.com
     */
    userIdp?: string;
    /**
     * The issuer which issued the token for this user.
     */
    userIss?: string;
    /**
     *  A user's full name or a service principal's app ID.
     */
    userName?: string;
    /**
     * A user or service principal's object ID..
     */
    userObjectId?: string;
    /**
     * A user or service principal's PuID.
     */
    userPuId?: string;
    /**
     * A user or service principal's tenant ID.
     */
    userTenantId?: string;
}

/**
 * A Machine Learning compute based on Azure Virtual Machines.
 */
export interface VirtualMachineResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'VirtualMachine'.
     */
    computeType: "VirtualMachine";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    properties?: outputs.machinelearningservices.v20200501preview.VirtualMachineResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200501preview.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

export interface VirtualMachineResponseProperties {
    /**
     * Public IP address of the virtual machine.
     */
    address?: string;
    /**
     * Admin credentials for virtual machine
     */
    administratorAccount?: outputs.machinelearningservices.v20200501preview.VirtualMachineSshCredentialsResponse;
    /**
     * Port open for ssh connections.
     */
    sshPort?: number;
    /**
     * Virtual Machine size
     */
    virtualMachineSize?: string;
}

/**
 * Admin credentials for virtual machine
 */
export interface VirtualMachineSshCredentialsResponse {
    /**
     * Password of admin account
     */
    password?: string;
    /**
     * Private key data
     */
    privateKeyData?: string;
    /**
     * Public key data
     */
    publicKeyData?: string;
    /**
     * Username of admin account
     */
    username?: string;
}

