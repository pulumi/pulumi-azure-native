// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * A Machine Learning compute based on AKS.
 */
export interface AKSResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'AKS'.
     */
    computeType: "AKS";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    /**
     * AKS properties
     */
    properties?: outputs.machinelearningservices.v20200601.AKSResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200601.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

/**
 * AKS properties
 */
export interface AKSResponseProperties {
    /**
     * Number of agents
     */
    agentCount?: number;
    /**
     * Agent virtual machine size
     */
    agentVMSize?: string;
    /**
     * AKS networking configuration for vnet
     */
    aksNetworkingConfiguration?: outputs.machinelearningservices.v20200601.AksNetworkingConfigurationResponse;
    /**
     * Cluster full qualified domain name
     */
    clusterFqdn?: string;
    /**
     * SSL configuration
     */
    sslConfiguration?: outputs.machinelearningservices.v20200601.SslConfigurationResponse;
    /**
     * System services
     */
    systemServices: outputs.machinelearningservices.v20200601.SystemServiceResponse[];
}

/**
 * Advance configuration for AKS networking
 */
export interface AksNetworkingConfigurationResponse {
    /**
     * An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
     */
    dnsServiceIP?: string;
    /**
     * A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
     */
    dockerBridgeCidr?: string;
    /**
     * A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
     */
    serviceCidr?: string;
    /**
     * Virtual network subnet resource ID the compute nodes belong to
     */
    subnetId?: string;
}

/**
 * Compute node information related to a AmlCompute.
 */
export interface AmlComputeNodeInformationResponse {
    /**
     * ID of the compute node.
     */
    nodeId: string;
    /**
     * State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
     */
    nodeState: string;
    /**
     * SSH port number of the node.
     */
    port: number;
    /**
     * Private IP address of the compute node.
     */
    privateIpAddress: string;
    /**
     * Public IP address of the compute node.
     */
    publicIpAddress: string;
    /**
     * ID of the Experiment running on the node, if any else null.
     */
    runId: string;
}

/**
 * An Azure Machine Learning compute.
 */
export interface AmlComputeResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'AmlCompute'.
     */
    computeType: "AmlCompute";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    /**
     * AML Compute properties
     */
    properties?: outputs.machinelearningservices.v20200601.AmlComputeResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200601.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}
/**
 * amlComputeResponseProvideDefaults sets the appropriate defaults for AmlComputeResponse
 */
export function amlComputeResponseProvideDefaults(val: AmlComputeResponse): AmlComputeResponse {
    return {
        ...val,
        properties: (val.properties ? outputs.machinelearningservices.v20200601.amlComputeResponsePropertiesProvideDefaults(val.properties) : undefined),
    };
}

/**
 * AML Compute properties
 */
export interface AmlComputeResponseProperties {
    /**
     * Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
     */
    allocationState: string;
    /**
     * The time at which the compute entered its current allocation state.
     */
    allocationStateTransitionTime: string;
    /**
     * The number of compute nodes currently assigned to the compute.
     */
    currentNodeCount: number;
    /**
     * Collection of errors encountered by various compute nodes during node setup.
     */
    errors: outputs.machinelearningservices.v20200601.MachineLearningServiceErrorResponse[];
    /**
     * Counts of various node states on the compute.
     */
    nodeStateCounts: outputs.machinelearningservices.v20200601.NodeStateCountsResponse;
    /**
     * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
     */
    remoteLoginPortPublicAccess?: string;
    /**
     * Scale settings for AML Compute
     */
    scaleSettings?: outputs.machinelearningservices.v20200601.ScaleSettingsResponse;
    /**
     * Virtual network subnet resource ID the compute nodes belong to.
     */
    subnet?: outputs.machinelearningservices.v20200601.ResourceIdResponse;
    /**
     * The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
     */
    targetNodeCount: number;
    /**
     * Credentials for an administrator user account that will be created on each compute node.
     */
    userAccountCredentials?: outputs.machinelearningservices.v20200601.UserAccountCredentialsResponse;
    /**
     * Virtual Machine priority
     */
    vmPriority?: string;
    /**
     * Virtual Machine Size
     */
    vmSize?: string;
}
/**
 * amlComputeResponsePropertiesProvideDefaults sets the appropriate defaults for AmlComputeResponseProperties
 */
export function amlComputeResponsePropertiesProvideDefaults(val: AmlComputeResponseProperties): AmlComputeResponseProperties {
    return {
        ...val,
        remoteLoginPortPublicAccess: (val.remoteLoginPortPublicAccess) ?? "NotSpecified",
        scaleSettings: (val.scaleSettings ? outputs.machinelearningservices.v20200601.scaleSettingsResponseProvideDefaults(val.scaleSettings) : undefined),
    };
}

/**
 * Defines an Aml Instance application and its connectivity endpoint URI.
 */
export interface ComputeInstanceApplicationResponse {
    /**
     * Name of the ComputeInstance application.
     */
    displayName?: string;
    /**
     * Application' endpoint URI.
     */
    endpointUri?: string;
}

/**
 * Defines all connectivity endpoints and properties for a ComputeInstance.
 */
export interface ComputeInstanceConnectivityEndpointsResponse {
    /**
     * Private IP Address of this ComputeInstance (local to the VNET in which the compute instance is deployed).
     */
    privateIpAddress: string;
    /**
     * Public IP Address of this ComputeInstance.
     */
    publicIpAddress: string;
}

/**
 * Describes information on user who created this ComputeInstance.
 */
export interface ComputeInstanceCreatedByResponse {
    /**
     * Uniquely identifies the user within his/her organization.
     */
    userId: string;
    /**
     * Name of the user.
     */
    userName: string;
    /**
     * Uniquely identifies user' Azure Active Directory organization.
     */
    userOrgId: string;
}

/**
 * An Azure Machine Learning compute instance.
 */
export interface ComputeInstanceResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'ComputeInstance'.
     */
    computeType: "ComputeInstance";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    /**
     * Compute Instance properties
     */
    properties?: outputs.machinelearningservices.v20200601.ComputeInstanceResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200601.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}
/**
 * computeInstanceResponseProvideDefaults sets the appropriate defaults for ComputeInstanceResponse
 */
export function computeInstanceResponseProvideDefaults(val: ComputeInstanceResponse): ComputeInstanceResponse {
    return {
        ...val,
        properties: (val.properties ? outputs.machinelearningservices.v20200601.computeInstanceResponsePropertiesProvideDefaults(val.properties) : undefined),
    };
}

/**
 * Compute Instance properties
 */
export interface ComputeInstanceResponseProperties {
    /**
     * Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
     */
    applicationSharingPolicy?: string;
    /**
     * Describes available applications and their endpoints on this ComputeInstance.
     */
    applications: outputs.machinelearningservices.v20200601.ComputeInstanceApplicationResponse[];
    /**
     * Describes all connectivity endpoints available for this ComputeInstance.
     */
    connectivityEndpoints: outputs.machinelearningservices.v20200601.ComputeInstanceConnectivityEndpointsResponse;
    /**
     * Describes information on user who created this ComputeInstance.
     */
    createdBy: outputs.machinelearningservices.v20200601.ComputeInstanceCreatedByResponse;
    /**
     * Collection of errors encountered on this ComputeInstance.
     */
    errors: outputs.machinelearningservices.v20200601.MachineLearningServiceErrorResponse[];
    /**
     * Specifies policy and settings for SSH access.
     */
    sshSettings?: outputs.machinelearningservices.v20200601.ComputeInstanceSshSettingsResponse;
    /**
     * The current state of this ComputeInstance.
     */
    state: string;
    /**
     * Virtual network subnet resource ID the compute nodes belong to.
     */
    subnet?: outputs.machinelearningservices.v20200601.ResourceIdResponse;
    /**
     * Virtual Machine Size
     */
    vmSize?: string;
}
/**
 * computeInstanceResponsePropertiesProvideDefaults sets the appropriate defaults for ComputeInstanceResponseProperties
 */
export function computeInstanceResponsePropertiesProvideDefaults(val: ComputeInstanceResponseProperties): ComputeInstanceResponseProperties {
    return {
        ...val,
        applicationSharingPolicy: (val.applicationSharingPolicy) ?? "Shared",
        sshSettings: (val.sshSettings ? outputs.machinelearningservices.v20200601.computeInstanceSshSettingsResponseProvideDefaults(val.sshSettings) : undefined),
    };
}

/**
 * Specifies policy and settings for SSH access.
 */
export interface ComputeInstanceSshSettingsResponse {
    /**
     * Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
     */
    adminPublicKey?: string;
    /**
     * Describes the admin user name.
     */
    adminUserName: string;
    /**
     * Describes the port for connecting through SSH.
     */
    sshPort: number;
    /**
     * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
     */
    sshPublicAccess?: string;
}
/**
 * computeInstanceSshSettingsResponseProvideDefaults sets the appropriate defaults for ComputeInstanceSshSettingsResponse
 */
export function computeInstanceSshSettingsResponseProvideDefaults(val: ComputeInstanceSshSettingsResponse): ComputeInstanceSshSettingsResponse {
    return {
        ...val,
        sshPublicAccess: (val.sshPublicAccess) ?? "Disabled",
    };
}

/**
 * A DataFactory compute.
 */
export interface DataFactoryResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'DataFactory'.
     */
    computeType: "DataFactory";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200601.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

/**
 * A DataLakeAnalytics compute.
 */
export interface DataLakeAnalyticsResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'DataLakeAnalytics'.
     */
    computeType: "DataLakeAnalytics";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    properties?: outputs.machinelearningservices.v20200601.DataLakeAnalyticsResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200601.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

export interface DataLakeAnalyticsResponseProperties {
    /**
     * DataLake Store Account Name
     */
    dataLakeStoreAccountName?: string;
}

/**
 * A DataFactory compute.
 */
export interface DatabricksResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'Databricks'.
     */
    computeType: "Databricks";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    properties?: outputs.machinelearningservices.v20200601.DatabricksResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200601.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

export interface DatabricksResponseProperties {
    /**
     * Databricks access token
     */
    databricksAccessToken?: string;
}

export interface EncryptionPropertyResponse {
    /**
     * Customer Key vault properties.
     */
    keyVaultProperties: outputs.machinelearningservices.v20200601.KeyVaultPropertiesResponse;
    /**
     * Indicates whether or not the encryption is enabled for the workspace.
     */
    status: string;
}

/**
 * Error detail information.
 */
export interface ErrorDetailResponse {
    /**
     * Error code.
     */
    code: string;
    /**
     * Error message.
     */
    message: string;
}

/**
 * Error response information.
 */
export interface ErrorResponseResponse {
    /**
     * Error code.
     */
    code: string;
    /**
     * An array of error detail objects.
     */
    details: outputs.machinelearningservices.v20200601.ErrorDetailResponse[];
    /**
     * Error message.
     */
    message: string;
}

/**
 * A HDInsight compute.
 */
export interface HDInsightResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'HDInsight'.
     */
    computeType: "HDInsight";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    properties?: outputs.machinelearningservices.v20200601.HDInsightResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200601.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

export interface HDInsightResponseProperties {
    /**
     * Public IP address of the master node of the cluster.
     */
    address?: string;
    /**
     * Admin credentials for master node of the cluster
     */
    administratorAccount?: outputs.machinelearningservices.v20200601.VirtualMachineSshCredentialsResponse;
    /**
     * Port open for ssh connections on the master node of the cluster.
     */
    sshPort?: number;
}

/**
 * Identity for the resource.
 */
export interface IdentityResponse {
    /**
     * The principal ID of resource identity.
     */
    principalId: string;
    /**
     * The tenant ID of resource.
     */
    tenantId: string;
    /**
     * The identity type.
     */
    type: string;
    /**
     * The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     */
    userAssignedIdentities?: {[key: string]: outputs.machinelearningservices.v20200601.IdentityResponseUserAssignedIdentities};
}

export interface IdentityResponseUserAssignedIdentities {
    /**
     * The client id of user assigned identity.
     */
    clientId: string;
    /**
     * The principal id of user assigned identity.
     */
    principalId: string;
}

export interface KeyVaultPropertiesResponse {
    /**
     * For future use - The client id of the identity which will be used to access key vault.
     */
    identityClientId?: string;
    /**
     * Key vault uri to access the encryption key.
     */
    keyIdentifier: string;
    /**
     * The ArmId of the keyVault where the customer owned encryption key is present.
     */
    keyVaultArmId: string;
}

/**
 * Wrapper for error response to follow ARM guidelines.
 */
export interface MachineLearningServiceErrorResponse {
    /**
     * The error response.
     */
    error: outputs.machinelearningservices.v20200601.ErrorResponseResponse;
}

/**
 * Counts of various compute node states on the amlCompute.
 */
export interface NodeStateCountsResponse {
    /**
     * Number of compute nodes in idle state.
     */
    idleNodeCount: number;
    /**
     * Number of compute nodes which are leaving the amlCompute.
     */
    leavingNodeCount: number;
    /**
     * Number of compute nodes which are in preempted state.
     */
    preemptedNodeCount: number;
    /**
     * Number of compute nodes which are being prepared.
     */
    preparingNodeCount: number;
    /**
     * Number of compute nodes which are running jobs.
     */
    runningNodeCount: number;
    /**
     * Number of compute nodes which are in unusable state.
     */
    unusableNodeCount: number;
}

export interface NotebookListCredentialsResultResponse {
    primaryAccessKey?: string;
    secondaryAccessKey?: string;
}

export interface NotebookPreparationErrorResponse {
    errorMessage?: string;
    statusCode?: number;
}

export interface NotebookResourceInfoResponse {
    fqdn?: string;
    /**
     * The error that occurs when preparing notebook.
     */
    notebookPreparationError?: outputs.machinelearningservices.v20200601.NotebookPreparationErrorResponse;
    /**
     * the data plane resourceId that used to initialize notebook component
     */
    resourceId?: string;
}

export interface PasswordResponse {
    name: string;
    value: string;
}

/**
 * The Private Endpoint Connection resource.
 */
export interface PrivateEndpointConnectionResponse {
    /**
     * ResourceId of the private endpoint connection.
     */
    id: string;
    /**
     * Friendly name of the private endpoint connection.
     */
    name: string;
    /**
     * The resource of private end point.
     */
    privateEndpoint?: outputs.machinelearningservices.v20200601.PrivateEndpointResponse;
    /**
     * A collection of information about the state of the connection between service consumer and provider.
     */
    privateLinkServiceConnectionState: outputs.machinelearningservices.v20200601.PrivateLinkServiceConnectionStateResponse;
    /**
     * The provisioning state of the private endpoint connection resource.
     */
    provisioningState: string;
    /**
     * Resource type of private endpoint connection.
     */
    type: string;
}

/**
 * The Private Endpoint resource.
 */
export interface PrivateEndpointResponse {
    /**
     * The ARM identifier for Private Endpoint
     */
    id: string;
}

/**
 * A collection of information about the state of the connection between service consumer and provider.
 */
export interface PrivateLinkServiceConnectionStateResponse {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: string;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: string;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: string;
}

export interface RegistryListCredentialsResultResponse {
    location: string;
    passwords?: outputs.machinelearningservices.v20200601.PasswordResponse[];
    username: string;
}

/**
 * Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
 */
export interface ResourceIdResponse {
    /**
     * The ID of the resource
     */
    id: string;
}

/**
 * scale settings for AML Compute
 */
export interface ScaleSettingsResponse {
    /**
     * Max number of nodes to use
     */
    maxNodeCount: number;
    /**
     * Min number of nodes to use
     */
    minNodeCount?: number;
    /**
     * Node Idle Time before scaling down amlCompute
     */
    nodeIdleTimeBeforeScaleDown?: string;
}
/**
 * scaleSettingsResponseProvideDefaults sets the appropriate defaults for ScaleSettingsResponse
 */
export function scaleSettingsResponseProvideDefaults(val: ScaleSettingsResponse): ScaleSettingsResponse {
    return {
        ...val,
        minNodeCount: (val.minNodeCount) ?? 0,
    };
}

export interface SharedPrivateLinkResourceResponse {
    /**
     * The private link resource group id.
     */
    groupId?: string;
    /**
     * Unique name of the private link.
     */
    name?: string;
    /**
     * The resource id that private link links to.
     */
    privateLinkResourceId?: string;
    /**
     * Request message.
     */
    requestMessage?: string;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: string;
}

/**
 * Sku of the resource
 */
export interface SkuResponse {
    /**
     * Name of the sku
     */
    name?: string;
    /**
     * Tier of the sku like Basic or Enterprise
     */
    tier?: string;
}

/**
 * The ssl configuration for scoring
 */
export interface SslConfigurationResponse {
    /**
     * Cert data
     */
    cert?: string;
    /**
     * CNAME of the cert
     */
    cname?: string;
    /**
     * Key data
     */
    key?: string;
    /**
     * Enable or disable ssl for scoring
     */
    status?: string;
}

/**
 * A system service running on a compute.
 */
export interface SystemServiceResponse {
    /**
     * Public IP address
     */
    publicIpAddress: string;
    /**
     * The type of this system service.
     */
    systemServiceType: string;
    /**
     * The version for this type.
     */
    version: string;
}

/**
 * Settings for user account that gets created on each on the nodes of a compute.
 */
export interface UserAccountCredentialsResponse {
    /**
     * Name of the administrator user account which can be used to SSH to nodes.
     */
    adminUserName: string;
    /**
     * Password of the administrator user account.
     */
    adminUserPassword?: string;
    /**
     * SSH public key of the administrator user account.
     */
    adminUserSshPublicKey?: string;
}

/**
 * A Machine Learning compute based on Azure Virtual Machines.
 */
export interface VirtualMachineResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'VirtualMachine'.
     */
    computeType: "VirtualMachine";
    /**
     * The date and time when the compute was created.
     */
    createdOn: string;
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * The date and time when the compute was last modified.
     */
    modifiedOn: string;
    properties?: outputs.machinelearningservices.v20200601.VirtualMachineResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.v20200601.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

export interface VirtualMachineResponseProperties {
    /**
     * Public IP address of the virtual machine.
     */
    address?: string;
    /**
     * Admin credentials for virtual machine
     */
    administratorAccount?: outputs.machinelearningservices.v20200601.VirtualMachineSshCredentialsResponse;
    /**
     * Port open for ssh connections.
     */
    sshPort?: number;
    /**
     * Virtual Machine size
     */
    virtualMachineSize?: string;
}

/**
 * Admin credentials for virtual machine
 */
export interface VirtualMachineSshCredentialsResponse {
    /**
     * Password of admin account
     */
    password?: string;
    /**
     * Private key data
     */
    privateKeyData?: string;
    /**
     * Public key data
     */
    publicKeyData?: string;
    /**
     * Username of admin account
     */
    username?: string;
}

