// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20180301preview from "./v20180301preview/output";
export * as v20181119 from "./v20181119/output";
export * as v20190501 from "./v20190501/output";
export * as v20190601 from "./v20190601/output";
export * as v20191101 from "./v20191101/output";
export * as v20200101 from "./v20200101/output";
export * as v20200218preview from "./v20200218preview/output";
export * as v20200301 from "./v20200301/output";
export * as v20200401 from "./v20200401/output";
export * as v20200501preview from "./v20200501preview/output";
export * as v20200515preview from "./v20200515preview/output";
export * as v20200601 from "./v20200601/output";
export * as v20200801 from "./v20200801/output";
export * as v20200901preview from "./v20200901preview/output";
export * as v20210101 from "./v20210101/output";
export * as v20210301preview from "./v20210301preview/output";
export * as v20210401 from "./v20210401/output";
export * as v20210701 from "./v20210701/output";
export * as v20220101preview from "./v20220101preview/output";
export * as v20220201preview from "./v20220201preview/output";
export * as v20220501 from "./v20220501/output";
export * as v20220601preview from "./v20220601preview/output";
export * as v20221001 from "./v20221001/output";
export * as v20221001preview from "./v20221001preview/output";
/**
 * The response for an ACI service.
 */
export interface ACIServiceResponseResponse {
    /**
     * Whether or not Application Insights is enabled.
     */
    appInsightsEnabled?: boolean;
    /**
     * Whether or not authentication is enabled on the service.
     */
    authEnabled?: boolean;
    /**
     * The CName for the service.
     */
    cname?: string;
    /**
     * The compute environment type for the service.
     * Expected value is 'ACI'.
     */
    computeType: "ACI";
    /**
     * The container resource requirements.
     */
    containerResourceRequirements?: outputs.machinelearningservices.ContainerResourceRequirementsResponse;
    /**
     * Details of the data collection options specified.
     */
    dataCollection?: outputs.machinelearningservices.ACIServiceResponseResponseDataCollection;
    /**
     * The deployment type for the service.
     */
    deploymentType?: string;
    /**
     * The service description.
     */
    description?: string;
    /**
     * The encryption properties.
     */
    encryptionProperties?: outputs.machinelearningservices.ACIServiceResponseResponseEncryptionProperties;
    /**
     * The Environment, models and assets used for inferencing.
     */
    environmentImageRequest?: outputs.machinelearningservices.ACIServiceResponseResponseEnvironmentImageRequest;
    /**
     * The error details.
     */
    error: outputs.machinelearningservices.ServiceResponseBaseResponseError;
    /**
     * The service tag dictionary. Tags are mutable.
     */
    kvTags?: {[key: string]: string};
    /**
     * The name of the Azure location/region.
     */
    location?: string;
    /**
     * Details on the models and configurations.
     */
    modelConfigMap: {[key: string]: any};
    /**
     * The list of models.
     */
    models?: outputs.machinelearningservices.ModelResponse[];
    /**
     * The service property dictionary. Properties are immutable.
     */
    properties?: {[key: string]: string};
    /**
     * The public Fqdn for the service.
     */
    publicFqdn?: string;
    /**
     * The public IP address for the service.
     */
    publicIp?: string;
    /**
     * The Uri for sending scoring requests.
     */
    scoringUri: string;
    /**
     * The public SSL certificate in PEM format to use if SSL is enabled.
     */
    sslCertificate?: string;
    /**
     * Whether or not SSL is enabled.
     */
    sslEnabled?: boolean;
    /**
     * The public SSL key in PEM format for the certificate.
     */
    sslKey?: string;
    /**
     * The current state of the service.
     */
    state: string;
    /**
     * The Uri for sending swagger requests.
     */
    swaggerUri: string;
    /**
     * The virtual network configuration.
     */
    vnetConfiguration?: outputs.machinelearningservices.ACIServiceResponseResponseVnetConfiguration;
}

/**
 * Details of the data collection options specified.
 */
export interface ACIServiceResponseResponseDataCollection {
    /**
     * Option for enabling/disabling Event Hub.
     */
    eventHubEnabled?: boolean;
    /**
     * Option for enabling/disabling storage.
     */
    storageEnabled?: boolean;
}

/**
 * The encryption properties.
 */
export interface ACIServiceResponseResponseEncryptionProperties {
    /**
     * Encryption Key name
     */
    keyName: string;
    /**
     * Encryption Key Version
     */
    keyVersion: string;
    /**
     * vault base Url
     */
    vaultBaseUrl: string;
}

/**
 * The Environment, models and assets used for inferencing.
 */
export interface ACIServiceResponseResponseEnvironmentImageRequest {
    /**
     * The list of assets.
     */
    assets?: outputs.machinelearningservices.ImageAssetResponse[];
    /**
     * The name of the driver file.
     */
    driverProgram?: string;
    /**
     * The details of the AZURE ML environment.
     */
    environment?: outputs.machinelearningservices.EnvironmentImageResponseResponseEnvironment;
    /**
     * The unique identifying details of the AZURE ML environment.
     */
    environmentReference?: outputs.machinelearningservices.EnvironmentImageResponseResponseEnvironmentReference;
    /**
     * The list of model Ids.
     */
    modelIds?: string[];
    /**
     * The list of models.
     */
    models?: outputs.machinelearningservices.ModelResponse[];
}

/**
 * The virtual network configuration.
 */
export interface ACIServiceResponseResponseVnetConfiguration {
    /**
     * The name of the virtual network subnet.
     */
    subnetName?: string;
    /**
     * The name of the virtual network.
     */
    vnetName?: string;
}

/**
 * The error details.
 */
export interface AKSReplicaStatusResponseError {
    /**
     * The error response.
     */
    error: outputs.machinelearningservices.ErrorResponseResponse;
}

/**
 * A Machine Learning compute based on AKS.
 */
export interface AKSResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'AKS'.
     */
    computeType: "AKS";
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * AKS properties
     */
    properties?: outputs.machinelearningservices.AKSResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}
/**
 * aksresponseProvideDefaults sets the appropriate defaults for AKSResponse
 */
export function aksresponseProvideDefaults(val: AKSResponse): AKSResponse {
    return {
        ...val,
        properties: (val.properties ? outputs.machinelearningservices.aksresponsePropertiesProvideDefaults(val.properties) : undefined),
    };
}

/**
 * AKS properties
 */
export interface AKSResponseProperties {
    /**
     * Number of agents
     */
    agentCount?: number;
    /**
     * Agent virtual machine size
     */
    agentVmSize?: string;
    /**
     * AKS networking configuration for vnet
     */
    aksNetworkingConfiguration?: outputs.machinelearningservices.AksNetworkingConfigurationResponse;
    /**
     * Cluster full qualified domain name
     */
    clusterFqdn?: string;
    /**
     * Intended usage of the cluster
     */
    clusterPurpose?: string;
    /**
     * SSL configuration
     */
    sslConfiguration?: outputs.machinelearningservices.SslConfigurationResponse;
    /**
     * System services
     */
    systemServices: outputs.machinelearningservices.SystemServiceResponse[];
}
/**
 * aksresponsePropertiesProvideDefaults sets the appropriate defaults for AKSResponseProperties
 */
export function aksresponsePropertiesProvideDefaults(val: AKSResponseProperties): AKSResponseProperties {
    return {
        ...val,
        clusterPurpose: (val.clusterPurpose) ?? "FastProd",
    };
}

/**
 * The response for an AKS service.
 */
export interface AKSServiceResponseResponse {
    /**
     * Whether or not AAD authentication is enabled.
     */
    aadAuthEnabled?: boolean;
    /**
     * Whether or not Application Insights is enabled.
     */
    appInsightsEnabled?: boolean;
    /**
     * Whether or not authentication is enabled.
     */
    authEnabled?: boolean;
    /**
     * The auto scaler properties.
     */
    autoScaler?: outputs.machinelearningservices.AKSServiceResponseResponseAutoScaler;
    /**
     * The name of the compute resource.
     */
    computeName?: string;
    /**
     * The compute environment type for the service.
     * Expected value is 'AKS'.
     */
    computeType: "AKS";
    /**
     * The container resource requirements.
     */
    containerResourceRequirements?: outputs.machinelearningservices.ContainerResourceRequirementsResponse;
    /**
     * Details of the data collection options specified.
     */
    dataCollection?: outputs.machinelearningservices.AKSServiceResponseResponseDataCollection;
    /**
     * The deployment status.
     */
    deploymentStatus: outputs.machinelearningservices.AKSServiceResponseResponseDeploymentStatus;
    /**
     * The deployment type for the service.
     */
    deploymentType?: string;
    /**
     * The service description.
     */
    description?: string;
    /**
     * The Environment, models and assets used for inferencing.
     */
    environmentImageRequest?: outputs.machinelearningservices.AKSServiceResponseResponseEnvironmentImageRequest;
    /**
     * The error details.
     */
    error: outputs.machinelearningservices.ServiceResponseBaseResponseError;
    /**
     * Is this the default variant.
     */
    isDefault?: boolean;
    /**
     * The service tag dictionary. Tags are mutable.
     */
    kvTags?: {[key: string]: string};
    /**
     * The liveness probe requirements.
     */
    livenessProbeRequirements?: outputs.machinelearningservices.AKSServiceResponseResponseLivenessProbeRequirements;
    /**
     * The maximum number of concurrent requests per container.
     */
    maxConcurrentRequestsPerContainer?: number;
    /**
     * Maximum time a request will wait in the queue (in milliseconds). After this time, the service will return 503 (Service Unavailable)
     */
    maxQueueWaitMs?: number;
    /**
     * Details on the models and configurations.
     */
    modelConfigMap: {[key: string]: any};
    /**
     * The list of models.
     */
    models?: outputs.machinelearningservices.ModelResponse[];
    /**
     * The Kubernetes namespace of the deployment.
     */
    namespace?: string;
    /**
     * The number of replicas on the cluster.
     */
    numReplicas?: number;
    /**
     * The service property dictionary. Properties are immutable.
     */
    properties?: {[key: string]: string};
    /**
     * The scoring timeout in milliseconds.
     */
    scoringTimeoutMs?: number;
    /**
     * The Uri for sending scoring requests.
     */
    scoringUri: string;
    /**
     * The current state of the service.
     */
    state: string;
    /**
     * The Uri for sending swagger requests.
     */
    swaggerUri: string;
    /**
     * The amount of traffic variant receives.
     */
    trafficPercentile?: number;
    /**
     * The type of the variant.
     */
    type?: string;
}

/**
 * The auto scaler properties.
 */
export interface AKSServiceResponseResponseAutoScaler {
    /**
     * Option to enable/disable auto scaling.
     */
    autoscaleEnabled?: boolean;
    /**
     * The maximum number of replicas in the cluster.
     */
    maxReplicas?: number;
    /**
     * The minimum number of replicas to scale down to.
     */
    minReplicas?: number;
    /**
     * The amount of seconds to wait between auto scale updates.
     */
    refreshPeriodInSeconds?: number;
    /**
     * The target utilization percentage to use for determining whether to scale the cluster.
     */
    targetUtilization?: number;
}

/**
 * Details of the data collection options specified.
 */
export interface AKSServiceResponseResponseDataCollection {
    /**
     * Option for enabling/disabling Event Hub.
     */
    eventHubEnabled?: boolean;
    /**
     * Option for enabling/disabling storage.
     */
    storageEnabled?: boolean;
}

/**
 * The deployment status.
 */
export interface AKSServiceResponseResponseDeploymentStatus {
    /**
     * The number of available replicas.
     */
    availableReplicas?: number;
    /**
     * The desired number of replicas.
     */
    desiredReplicas?: number;
    /**
     * The error details.
     */
    error?: outputs.machinelearningservices.AKSReplicaStatusResponseError;
    /**
     * The number of updated replicas.
     */
    updatedReplicas?: number;
}

/**
 * The Environment, models and assets used for inferencing.
 */
export interface AKSServiceResponseResponseEnvironmentImageRequest {
    /**
     * The list of assets.
     */
    assets?: outputs.machinelearningservices.ImageAssetResponse[];
    /**
     * The name of the driver file.
     */
    driverProgram?: string;
    /**
     * The details of the AZURE ML environment.
     */
    environment?: outputs.machinelearningservices.EnvironmentImageResponseResponseEnvironment;
    /**
     * The unique identifying details of the AZURE ML environment.
     */
    environmentReference?: outputs.machinelearningservices.EnvironmentImageResponseResponseEnvironmentReference;
    /**
     * The list of model Ids.
     */
    modelIds?: string[];
    /**
     * The list of models.
     */
    models?: outputs.machinelearningservices.ModelResponse[];
}

/**
 * The liveness probe requirements.
 */
export interface AKSServiceResponseResponseLivenessProbeRequirements {
    /**
     * The number of failures to allow before returning an unhealthy status.
     */
    failureThreshold?: number;
    /**
     * The delay before the first probe in seconds.
     */
    initialDelaySeconds?: number;
    /**
     * The length of time between probes in seconds.
     */
    periodSeconds?: number;
    /**
     * The number of successful probes before returning a healthy status.
     */
    successThreshold?: number;
    /**
     * The probe timeout in seconds.
     */
    timeoutSeconds?: number;
}

/**
 * The response for an AKS variant.
 */
export interface AKSVariantResponseResponse {
    /**
     * The compute environment type for the service.
     * Expected value is 'Custom'.
     */
    computeType: "Custom";
    /**
     * The deployment type for the service.
     */
    deploymentType?: string;
    /**
     * The service description.
     */
    description?: string;
    /**
     * The error details.
     */
    error: outputs.machinelearningservices.ServiceResponseBaseResponseError;
    /**
     * Is this the default variant.
     */
    isDefault?: boolean;
    /**
     * The service tag dictionary. Tags are mutable.
     */
    kvTags?: {[key: string]: string};
    /**
     * The service property dictionary. Properties are immutable.
     */
    properties?: {[key: string]: string};
    /**
     * The current state of the service.
     */
    state: string;
    /**
     * The amount of traffic variant receives.
     */
    trafficPercentile?: number;
    /**
     * The type of the variant.
     */
    type?: string;
}

/**
 * Advance configuration for AKS networking
 */
export interface AksNetworkingConfigurationResponse {
    /**
     * An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
     */
    dnsServiceIP?: string;
    /**
     * A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
     */
    dockerBridgeCidr?: string;
    /**
     * A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
     */
    serviceCidr?: string;
    /**
     * Virtual network subnet resource ID the compute nodes belong to
     */
    subnetId?: string;
}

/**
 * Compute node information related to a AmlCompute.
 */
export interface AmlComputeNodeInformationResponse {
    /**
     * ID of the compute node.
     */
    nodeId: string;
    /**
     * State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
     */
    nodeState: string;
    /**
     * SSH port number of the node.
     */
    port: number;
    /**
     * Private IP address of the compute node.
     */
    privateIpAddress: string;
    /**
     * Public IP address of the compute node.
     */
    publicIpAddress: string;
    /**
     * ID of the Experiment running on the node, if any else null.
     */
    runId: string;
}

/**
 * An Azure Machine Learning compute.
 */
export interface AmlComputeResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'AmlCompute'.
     */
    computeType: "AmlCompute";
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * AML Compute properties
     */
    properties?: outputs.machinelearningservices.AmlComputeResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}
/**
 * amlComputeResponseProvideDefaults sets the appropriate defaults for AmlComputeResponse
 */
export function amlComputeResponseProvideDefaults(val: AmlComputeResponse): AmlComputeResponse {
    return {
        ...val,
        properties: (val.properties ? outputs.machinelearningservices.amlComputeResponsePropertiesProvideDefaults(val.properties) : undefined),
    };
}

/**
 * AML Compute properties
 */
export interface AmlComputeResponseProperties {
    /**
     * Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
     */
    allocationState: string;
    /**
     * The time at which the compute entered its current allocation state.
     */
    allocationStateTransitionTime: string;
    /**
     * The number of compute nodes currently assigned to the compute.
     */
    currentNodeCount: number;
    /**
     * Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
     */
    enableNodePublicIp?: boolean;
    /**
     * Collection of errors encountered by various compute nodes during node setup.
     */
    errors: outputs.machinelearningservices.MachineLearningServiceErrorResponse[];
    /**
     * Network is isolated or not
     */
    isolatedNetwork?: boolean;
    /**
     * Counts of various node states on the compute.
     */
    nodeStateCounts: outputs.machinelearningservices.NodeStateCountsResponse;
    /**
     * Compute OS Type
     */
    osType?: string;
    /**
     * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
     */
    remoteLoginPortPublicAccess?: string;
    /**
     * Scale settings for AML Compute
     */
    scaleSettings?: outputs.machinelearningservices.ScaleSettingsResponse;
    /**
     * Virtual network subnet resource ID the compute nodes belong to.
     */
    subnet?: outputs.machinelearningservices.ResourceIdResponse;
    /**
     * The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
     */
    targetNodeCount: number;
    /**
     * Credentials for an administrator user account that will be created on each compute node.
     */
    userAccountCredentials?: outputs.machinelearningservices.UserAccountCredentialsResponse;
    /**
     * Virtual Machine image for AML Compute - windows only
     */
    virtualMachineImage?: outputs.machinelearningservices.VirtualMachineImageResponse;
    /**
     * Virtual Machine priority
     */
    vmPriority?: string;
    /**
     * Virtual Machine Size
     */
    vmSize?: string;
}
/**
 * amlComputeResponsePropertiesProvideDefaults sets the appropriate defaults for AmlComputeResponseProperties
 */
export function amlComputeResponsePropertiesProvideDefaults(val: AmlComputeResponseProperties): AmlComputeResponseProperties {
    return {
        ...val,
        enableNodePublicIp: (val.enableNodePublicIp) ?? true,
        osType: (val.osType) ?? "Linux",
        remoteLoginPortPublicAccess: (val.remoteLoginPortPublicAccess) ?? "NotSpecified",
        scaleSettings: (val.scaleSettings ? outputs.machinelearningservices.scaleSettingsResponseProvideDefaults(val.scaleSettings) : undefined),
    };
}

/**
 * AML Token identity configuration.
 */
export interface AmlTokenResponse {
    /**
     * Enum to determine identity framework.
     * Expected value is 'AMLToken'.
     */
    identityType: "AMLToken";
}

/**
 * A user that can be assigned to a compute instance.
 */
export interface AssignedUserResponse {
    /**
     * User’s AAD Object Id.
     */
    objectId: string;
    /**
     * User’s AAD Tenant Id.
     */
    tenantId: string;
}

export interface AutoScaleSettingsResponse {
    /**
     * Maximum number of instances for this deployment.
     */
    maxInstances?: number;
    /**
     * Minimum number of instances for this deployment.
     */
    minInstances?: number;
    /**
     * The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
     */
    pollingInterval?: string;
    /**
     *
     * Expected value is 'Auto'.
     */
    scaleType: "Auto";
    /**
     * Target CPU usage for the autoscaler.
     */
    targetUtilizationPercentage?: number;
}

export interface AzureDataLakeSectionResponse {
    /**
     * The authority URL used for authentication.
     */
    authorityUrl?: string;
    /**
     * The content of the certificate used for authentication.
     */
    certificate?: string;
    /**
     * The Client ID/Application ID
     */
    clientId?: string;
    /**
     * The client secret.
     */
    clientSecret?: string;
    /**
     * The Azure Data Lake credential type.
     */
    credentialType?: string;
    /**
     *  Is it using certificate to authenticate. If false then use client secret.
     */
    isCertAuth?: boolean;
    /**
     * Resource Group.
     */
    resourceGroup?: string;
    /**
     * The resource the service principal/app has access to.
     */
    resourceUri?: string;
    /**
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    serviceDataAccessAuthIdentity?: string;
    /**
     * The Azure Data Lake store name.
     */
    storeName?: string;
    /**
     * Subscription ID.
     */
    subscriptionId?: string;
    /**
     * The ID of the tenant the service principal/app belongs to.
     */
    tenantId?: string;
    /**
     * The thumbprint of the certificate above.
     */
    thumbprint?: string;
}

export interface AzureMySqlSectionResponse {
    /**
     * The authority URL used for authentication.
     */
    authorityUrl?: string;
    /**
     * The content of the certificate used for authentication.
     */
    certificate?: string;
    /**
     * The Client ID/Application ID
     */
    clientId?: string;
    /**
     * The client secret.
     */
    clientSecret?: string;
    /**
     * Sql Authentication type.
     */
    credentialType?: string;
    /**
     * The Azure SQL database name.
     */
    databaseName?: string;
    /**
     * The server host endpoint.
     */
    endpoint?: string;
    /**
     *  Is it using certificate to authenticate. If false then use client secret.
     */
    isCertAuth?: boolean;
    /**
     * / The Azure SQL port number.
     */
    portNumber?: string;
    /**
     * Resource Group.
     */
    resourceGroup?: string;
    /**
     * The resource the service principal/app has access to.
     */
    resourceUri?: string;
    /**
     * The Azure SQL server name.
     */
    serverName?: string;
    /**
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    serviceDataAccessAuthIdentity?: string;
    /**
     * Subscription ID.
     */
    subscriptionId?: string;
    /**
     * The ID of the tenant the service principal/app belongs to.
     */
    tenantId?: string;
    /**
     * The thumbprint of the certificate above.
     */
    thumbprint?: string;
    /**
     * The Azure SQL user id.
     */
    userId?: string;
    /**
     * The Azure SQL user password.
     */
    userPassword?: string;
}

export interface AzurePostgreSqlSectionResponse {
    /**
     * The authority URL used for authentication.
     */
    authorityUrl?: string;
    /**
     * The content of the certificate used for authentication.
     */
    certificate?: string;
    /**
     * The Client ID/Application ID
     */
    clientId?: string;
    /**
     * The client secret.
     */
    clientSecret?: string;
    /**
     * Sql Authentication type.
     */
    credentialType?: string;
    /**
     * The Azure SQL database name.
     */
    databaseName?: string;
    /**
     * Indicates SSL requirement of Azure Postgresql server.
     */
    enableSsl?: boolean;
    /**
     * The server host endpoint.
     */
    endpoint?: string;
    /**
     *  Is it using certificate to authenticate. If false then use client secret.
     */
    isCertAuth?: boolean;
    /**
     * / The Azure SQL port number.
     */
    portNumber?: string;
    /**
     * Resource Group.
     */
    resourceGroup?: string;
    /**
     * The resource the service principal/app has access to.
     */
    resourceUri?: string;
    /**
     * The Azure SQL server name.
     */
    serverName?: string;
    /**
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    serviceDataAccessAuthIdentity?: string;
    /**
     * Subscription ID.
     */
    subscriptionId?: string;
    /**
     * The ID of the tenant the service principal/app belongs to.
     */
    tenantId?: string;
    /**
     * The thumbprint of the certificate above.
     */
    thumbprint?: string;
    /**
     * The Azure SQL user id.
     */
    userId?: string;
    /**
     * The Azure SQL user password.
     */
    userPassword?: string;
}

export interface AzureSqlDatabaseSectionResponse {
    /**
     * The authority URL used for authentication.
     */
    authorityUrl?: string;
    /**
     * The content of the certificate used for authentication.
     */
    certificate?: string;
    /**
     * The Client ID/Application ID
     */
    clientId?: string;
    /**
     * The client secret.
     */
    clientSecret?: string;
    /**
     * Sql Authentication type.
     */
    credentialType?: string;
    /**
     * The Azure SQL database name.
     */
    databaseName?: string;
    /**
     * The server host endpoint.
     */
    endpoint?: string;
    /**
     *  Is it using certificate to authenticate. If false then use client secret.
     */
    isCertAuth?: boolean;
    /**
     * / The Azure SQL port number.
     */
    portNumber?: string;
    /**
     * Resource Group.
     */
    resourceGroup?: string;
    /**
     * The resource the service principal/app has access to.
     */
    resourceUri?: string;
    /**
     * The Azure SQL server name.
     */
    serverName?: string;
    /**
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    serviceDataAccessAuthIdentity?: string;
    /**
     * Subscription ID.
     */
    subscriptionId?: string;
    /**
     * The ID of the tenant the service principal/app belongs to.
     */
    tenantId?: string;
    /**
     * The thumbprint of the certificate above.
     */
    thumbprint?: string;
    /**
     * The Azure SQL user id.
     */
    userId?: string;
    /**
     * The Azure SQL user password.
     */
    userPassword?: string;
}

export interface AzureStorageSectionResponse {
    /**
     *  Storage Account Key (Deprecated).
     */
    accountKey?: string;
    /**
     * Storage Account Name.
     */
    accountName?: string;
    /**
     * Indicate if we are using Workspace ManagedIdentities/MSI token (Deprecated).
     */
    areWorkspaceManagedIdentitiesAllowed?: boolean;
    /**
     *  If this is an "DataStoreType.AzureBlob", the length of time (in seconds) to cache files locally after they are accessed (downloaded).
     */
    blobCacheTimeout?: number;
    clientCredentials?: outputs.machinelearningservices.ClientCredentialsResponse;
    /**
     * The storage container name.
     */
    containerName?: string;
    /**
     * The credential.
     */
    credential?: string;
    /**
     *  The credential type.
     */
    credentialType?: string;
    /**
     * The host of the container.
     */
    endpoint?: string;
    /**
     * Indicate if we are using SAS token or Account Key (Deprecated).
     */
    isSas?: boolean;
    /**
     * The protocol to use. Defaults to https.
     */
    protocol?: string;
    /**
     * Resource Group.
     */
    resourceGroup?: string;
    /**
     *  SAS Token for the container (Deprecated).
     */
    sasToken?: string;
    /**
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    serviceDataAccessAuthIdentity?: string;
    /**
     * Subscription ID.
     */
    subscriptionId?: string;
}

/**
 * Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation.
 */
export interface BanditPolicyResponse {
    /**
     * Number of intervals by which to delay the first evaluation.
     */
    delayEvaluation?: number;
    /**
     * Interval (number of runs) between policy evaluations.
     */
    evaluationInterval?: number;
    /**
     *
     * Expected value is 'Bandit'.
     */
    policyType: "Bandit";
    /**
     * Absolute distance allowed from the best performing run.
     */
    slackAmount?: number;
    /**
     * Ratio of the allowed distance from the best performing run.
     */
    slackFactor?: number;
}

/**
 * Batch inference settings per deployment.
 */
export interface BatchDeploymentResponse {
    /**
     * Code configuration for the endpoint deployment.
     */
    codeConfiguration?: outputs.machinelearningservices.CodeConfigurationResponse;
    /**
     * Configuration for compute binding.
     */
    compute?: outputs.machinelearningservices.ComputeConfigurationResponse;
    /**
     * Description of the endpoint deployment.
     */
    description?: string;
    /**
     * ARM resource ID of the environment specification for the endpoint deployment.
     */
    environmentId?: string;
    /**
     * Environment variables configuration for the deployment.
     */
    environmentVariables?: {[key: string]: string};
    /**
     * Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue].
     * For FileDataset, this value is the count of file failures.
     * For TabularDataset, this value is the count of record failures.
     * If set to -1 (the lower bound), all failures during batch inference will be ignored.
     */
    errorThreshold?: number;
    /**
     * Logging level for batch inference operation.
     */
    loggingLevel?: string;
    /**
     * Size of the mini-batch passed to each batch invocation.
     * For FileDataset, this is the number of files per mini-batch.
     * For TabularDataset, this is the size of the records in bytes, per mini-batch.
     */
    miniBatchSize?: number;
    /**
     * Reference to the model asset for the endpoint deployment.
     */
    model?: outputs.machinelearningservices.DataPathAssetReferenceResponse | outputs.machinelearningservices.IdAssetReferenceResponse | outputs.machinelearningservices.OutputPathAssetReferenceResponse;
    /**
     * Output configuration for the batch inference operation.
     */
    outputConfiguration?: outputs.machinelearningservices.BatchOutputConfigurationResponse;
    /**
     * Partition keys list used for Named partitioning.
     */
    partitionKeys?: string[];
    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     */
    properties?: {[key: string]: string};
    /**
     * Retry Settings for the batch inference operation.
     */
    retrySettings?: outputs.machinelearningservices.BatchRetrySettingsResponse;
}

/**
 * Batch endpoint configuration.
 */
export interface BatchEndpointResponse {
    /**
     * [Required] Inference endpoint authentication mode type
     */
    authMode?: string;
    /**
     * Description of the inference endpoint.
     */
    description?: string;
    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     */
    properties?: {[key: string]: string};
    /**
     * Endpoint URI.
     */
    scoringUri: string;
    /**
     * Endpoint Swagger URI.
     */
    swaggerUri: string;
    /**
     * Traffic rules on how the traffic will be routed across deployments.
     */
    traffic?: {[key: string]: number};
}

/**
 * Batch inference output configuration.
 */
export interface BatchOutputConfigurationResponse {
    /**
     * Customized output file name for append_row output action.
     */
    appendRowFileName?: string;
    /**
     * Indicates how the output will be organized.
     */
    outputAction?: string;
}

/**
 * Retry settings for a batch inference operation.
 */
export interface BatchRetrySettingsResponse {
    /**
     * Maximum retry count for a mini-batch
     */
    maxRetries?: number;
    /**
     * Invocation timeout for a mini-batch, in ISO 8601 format.
     */
    timeout?: string;
}

export interface ClientCredentialsResponse {
    /**
     * The authority URL used for authentication.
     */
    authorityUrl?: string;
    /**
     * The content of the certificate used for authentication.
     */
    certificate?: string;
    /**
     * The Client ID/Application ID
     */
    clientId?: string;
    /**
     * The client secret.
     */
    clientSecret?: string;
    /**
     *  Is it using certificate to authenticate. If false then use client secret.
     */
    isCertAuth?: boolean;
    /**
     * Resource Group.
     */
    resourceGroup?: string;
    /**
     * The resource the service principal/app has access to.
     */
    resourceUri?: string;
    /**
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    serviceDataAccessAuthIdentity?: string;
    /**
     * Subscription ID.
     */
    subscriptionId?: string;
    /**
     * The ID of the tenant the service principal/app belongs to.
     */
    tenantId?: string;
    /**
     * The thumbprint of the certificate above.
     */
    thumbprint?: string;
}

/**
 * Configuration for a scoring code asset.
 */
export interface CodeConfigurationResponse {
    /**
     * ARM resource ID of the code asset.
     */
    codeId?: string;
    /**
     * [Required] The script to execute on startup. eg. "score.py"
     */
    scoringScript: string;
}

/**
 * Container for code asset versions.
 */
export interface CodeContainerResponse {
    /**
     * The asset description text.
     */
    description?: string;
    /**
     * The asset property dictionary.
     */
    properties?: {[key: string]: string};
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
}

/**
 * Code asset version details.
 */
export interface CodeVersionResponse {
    /**
     * ARM resource ID of the datastore where the asset is located.
     */
    datastoreId?: string;
    /**
     * The asset description text.
     */
    description?: string;
    /**
     * If the name version are system generated (anonymous registration).
     */
    isAnonymous?: boolean;
    /**
     * [Required] The path of the file/directory in the datastore.
     */
    path: string;
    /**
     * The asset property dictionary.
     */
    properties?: {[key: string]: string};
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
}

/**
 * Command job definition.
 */
export interface CommandJobResponse {
    /**
     * ARM resource ID of the code asset.
     */
    codeId?: string;
    /**
     * [Required] The command to execute on startup of the job. eg. "python train.py"
     */
    command: string;
    /**
     * [Required] Compute binding for the job.
     */
    compute: outputs.machinelearningservices.ComputeConfigurationResponse;
    /**
     * The asset description text.
     */
    description?: string;
    /**
     * Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
     */
    distribution?: outputs.machinelearningservices.MpiResponse | outputs.machinelearningservices.PyTorchResponse | outputs.machinelearningservices.TensorFlowResponse;
    /**
     * The ARM resource ID of the Environment specification for the job.
     */
    environmentId?: string;
    /**
     * Environment variables included in the job.
     */
    environmentVariables?: {[key: string]: string};
    /**
     * The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
     */
    experimentName?: string;
    /**
     * Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, or null.
     * Defaults to AmlToken if null.
     */
    identity?: outputs.machinelearningservices.AmlTokenResponse | outputs.machinelearningservices.ManagedIdentityResponse;
    /**
     * Mapping of input data bindings used in the job.
     */
    inputDataBindings?: {[key: string]: outputs.machinelearningservices.InputDataBindingResponse};
    /**
     * List of JobEndpoints.
     * For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
     */
    interactionEndpoints: {[key: string]: outputs.machinelearningservices.JobEndpointResponse};
    /**
     * Enum to determine the type of job.
     * Expected value is 'Command'.
     */
    jobType: "Command";
    /**
     * Location of the job output logs and artifacts.
     */
    output: outputs.machinelearningservices.JobOutputResponse;
    /**
     * Mapping of output data bindings used in the job.
     */
    outputDataBindings?: {[key: string]: outputs.machinelearningservices.OutputDataBindingResponse};
    /**
     * Input parameters.
     */
    parameters: any;
    /**
     * Job priority for scheduling policy. Only applies to AMLCompute.
     * Private preview feature and only available to users on the allow list.
     */
    priority?: number;
    /**
     * The asset property dictionary.
     */
    properties?: {[key: string]: string};
    /**
     * Specifies the job provisioning state.
     */
    provisioningState: string;
    /**
     * Status of the job.
     */
    status: string;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
    /**
     * The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
     */
    timeout?: string;
}

/**
 * Component container definition.
 * <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
 */
export interface ComponentContainerResponse {
    /**
     * The asset description text.
     */
    description?: string;
    /**
     * Is the asset archived?
     */
    isArchived?: boolean;
    /**
     * The latest version inside this container.
     */
    latestVersion: string;
    /**
     * The next auto incremental version
     */
    nextVersion: string;
    /**
     * The asset property dictionary.
     */
    properties?: {[key: string]: string};
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
}
/**
 * componentContainerResponseProvideDefaults sets the appropriate defaults for ComponentContainerResponse
 */
export function componentContainerResponseProvideDefaults(val: ComponentContainerResponse): ComponentContainerResponse {
    return {
        ...val,
        isArchived: (val.isArchived) ?? false,
    };
}

/**
 * Definition of a component version: defines resources that span component types.
 */
export interface ComponentVersionResponse {
    /**
     * Defines Component definition details.
     * <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
     */
    componentSpec?: any;
    /**
     * The asset description text.
     */
    description?: string;
    /**
     * If the name version are system generated (anonymous registration).
     */
    isAnonymous?: boolean;
    /**
     * Is the asset archived?
     */
    isArchived?: boolean;
    /**
     * The asset property dictionary.
     */
    properties?: {[key: string]: string};
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
}
/**
 * componentVersionResponseProvideDefaults sets the appropriate defaults for ComponentVersionResponse
 */
export function componentVersionResponseProvideDefaults(val: ComponentVersionResponse): ComponentVersionResponse {
    return {
        ...val,
        isAnonymous: (val.isAnonymous) ?? false,
        isArchived: (val.isArchived) ?? false,
    };
}

/**
 * Compute binding definition.
 */
export interface ComputeBindingResponse {
    /**
     * ID of the compute resource.
     */
    computeId?: string;
    /**
     * Number of nodes.
     */
    nodeCount?: number;
}

/**
 * Configuration for compute binding.
 */
export interface ComputeConfigurationResponse {
    /**
     * Number of instances or nodes.
     */
    instanceCount?: number;
    /**
     * SKU type to run on.
     */
    instanceType?: string;
    /**
     * Set to true for jobs running on local compute.
     */
    isLocal?: boolean;
    /**
     * Location for virtual cluster run.
     */
    location?: string;
    /**
     * Additional properties.
     */
    properties?: {[key: string]: string};
    /**
     * ARM resource ID of the Compute you are targeting. If not provided the resource will be deployed as Managed.
     */
    target?: string;
}

/**
 * Defines an Aml Instance application and its connectivity endpoint URI.
 */
export interface ComputeInstanceApplicationResponse {
    /**
     * Name of the ComputeInstance application.
     */
    displayName?: string;
    /**
     * Application' endpoint URI.
     */
    endpointUri?: string;
}

/**
 * Defines all connectivity endpoints and properties for an ComputeInstance.
 */
export interface ComputeInstanceConnectivityEndpointsResponse {
    /**
     * Private IP Address of this ComputeInstance (local to the VNET in which the compute instance is deployed).
     */
    privateIpAddress: string;
    /**
     * Public IP Address of this ComputeInstance.
     */
    publicIpAddress: string;
}

/**
 * Describes information on user who created this ComputeInstance.
 */
export interface ComputeInstanceCreatedByResponse {
    /**
     * Uniquely identifies the user within his/her organization.
     */
    userId: string;
    /**
     * Name of the user.
     */
    userName: string;
    /**
     * Uniquely identifies user' Azure Active Directory organization.
     */
    userOrgId: string;
}

/**
 * The last operation on ComputeInstance.
 */
export interface ComputeInstanceLastOperationResponse {
    /**
     * Name of the last operation.
     */
    operationName?: string;
    /**
     * Operation status.
     */
    operationStatus?: string;
    /**
     * Time of the last operation.
     */
    operationTime?: string;
}

/**
 * An Azure Machine Learning compute instance.
 */
export interface ComputeInstanceResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'ComputeInstance'.
     */
    computeType: "ComputeInstance";
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * Compute Instance properties
     */
    properties?: outputs.machinelearningservices.ComputeInstanceResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}
/**
 * computeInstanceResponseProvideDefaults sets the appropriate defaults for ComputeInstanceResponse
 */
export function computeInstanceResponseProvideDefaults(val: ComputeInstanceResponse): ComputeInstanceResponse {
    return {
        ...val,
        properties: (val.properties ? outputs.machinelearningservices.computeInstanceResponsePropertiesProvideDefaults(val.properties) : undefined),
    };
}

/**
 * Compute Instance properties
 */
export interface ComputeInstanceResponseProperties {
    /**
     * Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
     */
    applicationSharingPolicy?: string;
    /**
     * Describes available applications and their endpoints on this ComputeInstance.
     */
    applications: outputs.machinelearningservices.ComputeInstanceApplicationResponse[];
    /**
     * The Compute Instance Authorization type. Available values are personal (default).
     */
    computeInstanceAuthorizationType?: string;
    /**
     * Describes all connectivity endpoints available for this ComputeInstance.
     */
    connectivityEndpoints: outputs.machinelearningservices.ComputeInstanceConnectivityEndpointsResponse;
    /**
     * Describes information on user who created this ComputeInstance.
     */
    createdBy: outputs.machinelearningservices.ComputeInstanceCreatedByResponse;
    /**
     * Collection of errors encountered on this ComputeInstance.
     */
    errors: outputs.machinelearningservices.MachineLearningServiceErrorResponse[];
    /**
     * The last operation on ComputeInstance.
     */
    lastOperation: outputs.machinelearningservices.ComputeInstanceLastOperationResponse;
    /**
     * Settings for a personal compute instance.
     */
    personalComputeInstanceSettings?: outputs.machinelearningservices.PersonalComputeInstanceSettingsResponse;
    /**
     * Details of customized scripts to execute for setting up the cluster.
     */
    setupScripts?: outputs.machinelearningservices.SetupScriptsResponse;
    /**
     * Specifies policy and settings for SSH access.
     */
    sshSettings?: outputs.machinelearningservices.ComputeInstanceSshSettingsResponse;
    /**
     * The current state of this ComputeInstance.
     */
    state: string;
    /**
     * Virtual network subnet resource ID the compute nodes belong to.
     */
    subnet?: outputs.machinelearningservices.ResourceIdResponse;
    /**
     * Virtual Machine Size
     */
    vmSize?: string;
}
/**
 * computeInstanceResponsePropertiesProvideDefaults sets the appropriate defaults for ComputeInstanceResponseProperties
 */
export function computeInstanceResponsePropertiesProvideDefaults(val: ComputeInstanceResponseProperties): ComputeInstanceResponseProperties {
    return {
        ...val,
        applicationSharingPolicy: (val.applicationSharingPolicy) ?? "Shared",
        computeInstanceAuthorizationType: (val.computeInstanceAuthorizationType) ?? "personal",
        sshSettings: (val.sshSettings ? outputs.machinelearningservices.computeInstanceSshSettingsResponseProvideDefaults(val.sshSettings) : undefined),
    };
}

/**
 * Specifies policy and settings for SSH access.
 */
export interface ComputeInstanceSshSettingsResponse {
    /**
     * Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
     */
    adminPublicKey?: string;
    /**
     * Describes the admin user name.
     */
    adminUserName: string;
    /**
     * Describes the port for connecting through SSH.
     */
    sshPort: number;
    /**
     * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
     */
    sshPublicAccess?: string;
}
/**
 * computeInstanceSshSettingsResponseProvideDefaults sets the appropriate defaults for ComputeInstanceSshSettingsResponse
 */
export function computeInstanceSshSettingsResponseProvideDefaults(val: ComputeInstanceSshSettingsResponse): ComputeInstanceSshSettingsResponse {
    return {
        ...val,
        sshPublicAccess: (val.sshPublicAccess) ?? "Disabled",
    };
}

/**
 * The resource requirements for the container (cpu and memory).
 */
export interface ContainerResourceRequirementsResponse {
    /**
     * The minimum amount of CPU cores to be used by the container. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    cpu?: number;
    /**
     * The maximum amount of CPU cores allowed to be used by the container. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    cpuLimit?: number;
    /**
     * The number of FPGA PCIE devices exposed to the container. Must be multiple of 2.
     */
    fpga?: number;
    /**
     * The number of GPU cores in the container.
     */
    gpu?: number;
    /**
     * The minimum amount of memory (in GB) to be used by the container. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    memoryInGB?: number;
    /**
     * The maximum amount of memory (in GB) allowed to be used by the container. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    memoryInGBLimit?: number;
}

export interface CosmosDbSettingsResponse {
    /**
     * The throughput of the collections in cosmosdb database
     */
    collectionsThroughput?: number;
}

/**
 * Container for data asset versions.
 */
export interface DataContainerResponse {
    /**
     * The asset description text.
     */
    description?: string;
    /**
     * The asset property dictionary.
     */
    properties?: {[key: string]: string};
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
}

/**
 * A DataFactory compute.
 */
export interface DataFactoryResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'DataFactory'.
     */
    computeType: "DataFactory";
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

/**
 * A DataLakeAnalytics compute.
 */
export interface DataLakeAnalyticsResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'DataLakeAnalytics'.
     */
    computeType: "DataLakeAnalytics";
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    properties?: outputs.machinelearningservices.DataLakeAnalyticsResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

export interface DataLakeAnalyticsResponseProperties {
    /**
     * DataLake Store Account Name
     */
    dataLakeStoreAccountName?: string;
}

/**
 * Reference to an asset via its path in a datastore.
 */
export interface DataPathAssetReferenceResponse {
    /**
     * ARM resource ID of the datastore where the asset is located.
     */
    datastoreId?: string;
    /**
     * The path of the file/directory in the datastore.
     */
    path?: string;
    /**
     * Enum to determine which reference method to use for an asset.
     * Expected value is 'DataPath'.
     */
    referenceType: "DataPath";
}

/**
 * Data asset version details.
 */
export interface DataVersionResponse {
    /**
     * The Format of dataset.
     */
    datasetType?: string;
    /**
     * ARM resource ID of the datastore where the asset is located.
     */
    datastoreId?: string;
    /**
     * The asset description text.
     */
    description?: string;
    /**
     * If the name version are system generated (anonymous registration).
     */
    isAnonymous?: boolean;
    /**
     * [Required] The path of the file/directory in the datastore.
     */
    path: string;
    /**
     * The asset property dictionary.
     */
    properties?: {[key: string]: string};
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
}

/**
 * A DataFactory compute.
 */
export interface DatabricksResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'Databricks'.
     */
    computeType: "Databricks";
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    properties?: outputs.machinelearningservices.DatabricksResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

export interface DatabricksResponseProperties {
    /**
     * Databricks access token
     */
    databricksAccessToken?: string;
    /**
     * Workspace Url
     */
    workspaceUrl?: string;
}

/**
 * The dataset reference object.
 */
export interface DatasetReferenceResponse {
    /**
     * The id of the dataset reference.
     */
    id?: string;
    /**
     * The name of the dataset reference.
     */
    name?: string;
}

/**
 * Machine Learning dataset object.
 */
export interface DatasetResponse {
    /**
     * The dataset creation time (UTC).
     */
    createdTime: string;
    /**
     * Unique Dataset identifier.
     */
    datasetId: string;
    /**
     * Dataset state
     */
    datasetState?: outputs.machinelearningservices.DatasetStateResponse;
    /**
     * Dataset Type.
     */
    datasetType: string;
    /**
     * Name of the default compute to be used for any Dataset actions (such as Profile, Write).
     */
    defaultCompute: string;
    /**
     * Description about this dataset version.
     */
    description: string;
    /**
     * eTag description
     */
    etag: string;
    /**
     * Flag to hide Dataset in UI
     */
    isVisible: boolean;
    /**
     * Last created Dataset definition.
     */
    latest?: outputs.machinelearningservices.DatasetResponseLatest;
    /**
     * The dataset last modified time (UTC).
     */
    modifiedTime: string;
    /**
     * Unique dataset name
     */
    name: string;
    /**
     * Tags for this dataset version.
     */
    tags: {[key: string]: string};
}

/**
 *  Datastore and reference to location of data such as relativePath, Sql Query and etc.
 */
export interface DatasetResponseDataPath {
    /**
     * Additional Properties.
     */
    additionalProperties?: {[key: string]: any};
    /**
     * Azure path for Azure Blob or File
     */
    azureFilePath: string;
    /**
     * Data store Name
     */
    datastoreName: string;
    /**
     * HTTP URL.
     */
    httpUrl: string;
    /**
     * Specify the partition format of path. Defaults to None.
     */
    partitionFormat: string;
    /**
     * Whether or not to ignore unmatched path.
     */
    partitionFormatIgnoreError: boolean;
    /**
     * List of files expanded from a file GLOB specified
     */
    paths: string[];
    /**
     * Relative path in the data store
     */
    relativePath: string;
    /**
     * Sql Query/Table/Stored Procedure details.
     */
    sqlDataPath?: outputs.machinelearningservices.DatasetResponseSqlDataPath;
}

/**
 * Last created Dataset definition.
 */
export interface DatasetResponseLatest {
    /**
     * User who created.
     */
    createdBy?: outputs.machinelearningservices.UserInfoResponse;
    /**
     * The dataset creation time (UTC).
     */
    createdTime: string;
    /**
     *  Datastore and reference to location of data such as relativePath, Sql Query and etc.
     */
    dataPath?: outputs.machinelearningservices.DatasetResponseDataPath;
    /**
     * Dataflow Json
     */
    dataflow: string;
    /**
     * Dataset state
     */
    datasetDefinitionState?: outputs.machinelearningservices.DatasetStateResponse;
    /**
     * Unique Dataset identifier.
     */
    datasetId: string;
    /**
     * Description about the dataset.
     */
    description: string;
    /**
     * eTag description
     */
    etag: string;
    /**
     * Dataset FileType, specified by user.
     */
    fileType: string;
    /**
     * The dataset last modified time (UTC).
     */
    modifiedTime: string;
    /**
     * Summary of Definition changes.
     */
    notes: string;
    /**
     * Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
     */
    partitionFormatInPath: boolean;
    /**
     * Properties stores information like name of time series column for time series dataset.
     */
    properties?: {[key: string]: any};
    /**
     * Indicates the saved dataset this definition is mapping to, populated on Get.
     */
    savedDatasetId: string;
    /**
     * Tags associated with the dataset.
     */
    tags: {[key: string]: string};
    /**
     *  Telemetry information about the dataset including information like which service the dataset was created from.
     */
    telemetryInfo: {[key: string]: string};
    /**
     *  Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
     */
    useDescriptionTagsFromDefinition: boolean;
    /**
     * An identifier uniquely identifies a definition change.
     */
    versionId: string;
}

/**
 * Sql Query/Table/Stored Procedure details.
 */
export interface DatasetResponseSqlDataPath {
    /**
     * SQL query timeout. Unit in seconds.
     */
    queryTimeout: number;
    /**
     * SQL query
     */
    sqlQuery: string;
    /**
     * SQL storedProcedure name
     */
    sqlStoredProcedureName: string;
    /**
     * SQL table name
     */
    sqlTableName: string;
}

/**
 * Dataset state
 */
export interface DatasetStateResponse {
    /**
     * Reference to better Dataset or a Definition
     */
    deprecatedBy?: outputs.machinelearningservices.DatasetStateResponseDeprecatedBy;
    /**
     * eTag description
     */
    etag: string;
    /**
     * Dataset state
     */
    state?: string;
}

/**
 * Reference to better Dataset or a Definition
 */
export interface DatasetStateResponseDeprecatedBy {
    /**
     * Unique Dataset identifier.
     */
    datasetId: string;
    /**
     * Definition Version
     */
    definitionVersion?: string;
}

/**
 * Machine Learning datastore object.
 */
export interface DatastoreResponse {
    azureDataLakeSection?: outputs.machinelearningservices.AzureDataLakeSectionResponse;
    azureMySqlSection?: outputs.machinelearningservices.AzureMySqlSectionResponse;
    azurePostgreSqlSection?: outputs.machinelearningservices.AzurePostgreSqlSectionResponse;
    azureSqlDatabaseSection?: outputs.machinelearningservices.AzureSqlDatabaseSectionResponse;
    azureStorageSection?: outputs.machinelearningservices.AzureStorageSectionResponse;
    /**
     * The User who created the datastore.
     */
    createdBy: outputs.machinelearningservices.UserInfoResponse;
    /**
     * The date and time when the datastore was created.
     */
    createdTime: string;
    /**
     * The datastore type.
     */
    dataStoreType?: string;
    /**
     * Description of the datastore.
     */
    description?: string;
    /**
     * Data specific to GlusterFS.
     */
    glusterFsSection?: outputs.machinelearningservices.GlusterFsSectionResponse;
    /**
     * A read only property that denotes whether the service datastore has been validated with credentials.
     */
    hasBeenValidated?: boolean;
    /**
     * Info about origin if it is linked.
     */
    linkedInfo?: outputs.machinelearningservices.LinkedInfoResponse;
    /**
     * The User who modified the datastore.
     */
    modifiedBy: outputs.machinelearningservices.UserInfoResponse;
    /**
     * The date and time when the datastore was last modified.
     */
    modifiedTime: string;
    /**
     * Name of the datastore.
     */
    name?: string;
    /**
     * Tags for this datastore.
     */
    tags: {[key: string]: string};
}
/**
 * datastoreResponseProvideDefaults sets the appropriate defaults for DatastoreResponse
 */
export function datastoreResponseProvideDefaults(val: DatastoreResponse): DatastoreResponse {
    return {
        ...val,
        hasBeenValidated: (val.hasBeenValidated) ?? false,
    };
}

/**
 * Class to represent configuration settings for Docker Build
 */
export interface DockerBuildResponse {
    /**
     * Path to a snapshot of the Docker Context. This property is only valid if Dockerfile is specified.
     * The path is relative to the asset path which must contain a single Blob URI value.
     * <seealso href="https://docs.docker.com/engine/context/working-with-contexts/" />
     */
    context?: string;
    /**
     * Enum to determine docker specification type. Must be either Build or Image.
     * Expected value is 'Build'.
     */
    dockerSpecificationType: "Build";
    /**
     * [Required] Docker command line instructions to assemble an image.
     * <seealso href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments" />
     */
    dockerfile: string;
    /**
     * The platform information of the docker image.
     */
    platform?: outputs.machinelearningservices.DockerImagePlatformResponse;
}

export interface DockerImagePlatformResponse {
    /**
     * The OS type the Environment.
     */
    operatingSystemType?: string;
}

/**
 * Class to represent configuration settings for Docker Build
 */
export interface DockerImageResponse {
    /**
     * [Required] Image name of a custom base image.
     * <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
     */
    dockerImageUri: string;
    /**
     * Enum to determine docker specification type. Must be either Build or Image.
     * Expected value is 'Image'.
     */
    dockerSpecificationType: "Image";
    /**
     * The platform information of the docker image.
     */
    platform?: outputs.machinelearningservices.DockerImagePlatformResponse;
}

export interface EncryptionPropertyResponse {
    /**
     * The identity that will be used to access the key vault for encryption at rest.
     */
    identity?: outputs.machinelearningservices.IdentityForCmkResponse;
    /**
     * Customer Key vault properties.
     */
    keyVaultProperties: outputs.machinelearningservices.KeyVaultPropertiesResponse;
    /**
     * Indicates whether or not the encryption is enabled for the workspace.
     */
    status: string;
}

/**
 * Container for environment specification versions.
 */
export interface EnvironmentContainerResponse {
    /**
     * The asset description text.
     */
    description?: string;
    /**
     * The asset property dictionary.
     */
    properties?: {[key: string]: string};
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
}

/**
 * The details of the AZURE ML environment.
 */
export interface EnvironmentImageResponseResponseEnvironment {
    /**
     * The definition of a Docker container.
     */
    docker?: outputs.machinelearningservices.ModelEnvironmentDefinitionResponseResponseDocker;
    /**
     * Definition of environment variables to be defined in the environment.
     */
    environmentVariables?: {[key: string]: string};
    /**
     * The inferencing stack version added to the image. To avoid adding an inferencing stack, do not set this value. Valid values: "latest".
     */
    inferencingStackVersion?: string;
    /**
     * The name of the environment.
     */
    name?: string;
    /**
     * Settings for a Python environment.
     */
    python?: outputs.machinelearningservices.ModelEnvironmentDefinitionResponseResponsePython;
    /**
     * Settings for a R environment.
     */
    r?: outputs.machinelearningservices.ModelEnvironmentDefinitionResponseResponseR;
    /**
     * The configuration for a Spark environment.
     */
    spark?: outputs.machinelearningservices.ModelEnvironmentDefinitionResponseResponseSpark;
    /**
     * The environment version.
     */
    version?: string;
}

/**
 * The unique identifying details of the AZURE ML environment.
 */
export interface EnvironmentImageResponseResponseEnvironmentReference {
    /**
     * Name of the environment.
     */
    name?: string;
    /**
     * Version of the environment.
     */
    version?: string;
}

/**
 * Environment specification version details.
 * <see href="https://repo2docker.readthedocs.io/en/latest/specification.html" />
 */
export interface EnvironmentSpecificationVersionResponse {
    /**
     * Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
     * <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
     */
    condaFile?: string;
    /**
     * The asset description text.
     */
    description?: string;
    /**
     * Configuration settings for Docker.
     */
    docker?: outputs.machinelearningservices.DockerBuildResponse | outputs.machinelearningservices.DockerImageResponse;
    /**
     * Environment specification is either user managed or curated by the Azure ML service
     * <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
     */
    environmentSpecificationType: string;
    /**
     * Defines configuration specific to inference.
     */
    inferenceContainerProperties?: outputs.machinelearningservices.InferenceContainerPropertiesResponse;
    /**
     * If the name version are system generated (anonymous registration).
     */
    isAnonymous?: boolean;
    /**
     * The asset property dictionary.
     */
    properties?: {[key: string]: string};
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
}

/**
 * Error detail information.
 */
export interface ErrorDetailResponse {
    /**
     * Error code.
     */
    code: string;
    /**
     * Error message.
     */
    message: string;
}

/**
 * Error response information.
 */
export interface ErrorResponseResponse {
    /**
     * Error code.
     */
    code: string;
    /**
     * An array of error detail objects.
     */
    details: outputs.machinelearningservices.ErrorDetailResponse[];
    /**
     * Error message.
     */
    message: string;
}

export interface FlavorDataResponse {
    /**
     * Model flavor-specific data.
     */
    data?: {[key: string]: string};
}

/**
 * Data specific to GlusterFS.
 */
export interface GlusterFsSectionResponse {
    /**
     * The server address of one of the servers that hosts the GlusterFS. Can be either the IP address or server name.
     */
    serverAddress: string;
    /**
     * The name of the created GlusterFS volume.
     */
    volumeName: string;
}

/**
 * A HDInsight compute.
 */
export interface HDInsightResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'HDInsight'.
     */
    computeType: "HDInsight";
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    properties?: outputs.machinelearningservices.HDInsightResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

export interface HDInsightResponseProperties {
    /**
     * Public IP address of the master node of the cluster.
     */
    address?: string;
    /**
     * Admin credentials for master node of the cluster
     */
    administratorAccount?: outputs.machinelearningservices.VirtualMachineSshCredentialsResponse;
    /**
     * Port open for ssh connections on the master node of the cluster.
     */
    sshPort?: number;
}

/**
 * Reference to an asset via its ARM resource ID.
 */
export interface IdAssetReferenceResponse {
    /**
     * [Required] ARM resource ID of the asset.
     */
    assetId: string;
    /**
     * Enum to determine which reference method to use for an asset.
     * Expected value is 'Id'.
     */
    referenceType: "Id";
}

/**
 * Identity that will be used to access key vault for encryption at rest
 */
export interface IdentityForCmkResponse {
    /**
     * The ArmId of the user assigned identity that will be used to access the customer managed key vault
     */
    userAssignedIdentity: string;
}

/**
 * Identity for the resource.
 */
export interface IdentityResponse {
    /**
     * The principal ID of resource identity.
     */
    principalId: string;
    /**
     * The tenant ID of resource.
     */
    tenantId: string;
    /**
     * The identity type.
     */
    type?: string;
    /**
     * The user assigned identities associated with the resource.
     */
    userAssignedIdentities?: {[key: string]: outputs.machinelearningservices.UserAssignedIdentityResponse};
}

/**
 * An Image asset.
 */
export interface ImageAssetResponse {
    /**
     * The Asset Id.
     */
    id?: string;
    /**
     * The mime type.
     */
    mimeType?: string;
    /**
     * Whether the Asset is unpacked.
     */
    unpack?: boolean;
    /**
     * The Url of the Asset.
     */
    url?: string;
}

export interface InferenceContainerPropertiesResponse {
    /**
     * The route to check the liveness of the inference server container.
     */
    livenessRoute?: outputs.machinelearningservices.RouteResponse;
    /**
     * The route to check the readiness of the inference server container.
     */
    readinessRoute?: outputs.machinelearningservices.RouteResponse;
    /**
     * The port to send the scoring requests to, within the inference server container.
     */
    scoringRoute?: outputs.machinelearningservices.RouteResponse;
}

export interface InputDataBindingResponse {
    /**
     * ARM resource ID of the registered dataVersion.
     */
    dataId?: string;
    /**
     * Mechanism for accessing the data artifact.
     */
    mode?: string;
    /**
     * Location of data inside the container process.
     */
    pathOnCompute?: string;
}

/**
 * Job endpoint definition
 */
export interface JobEndpointResponse {
    /**
     * Url for endpoint.
     */
    endpoint?: string;
    /**
     * Endpoint type.
     */
    jobEndpointType?: string;
    /**
     * Port for endpoint.
     */
    port?: number;
    /**
     * Additional properties to set on the endpoint.
     */
    properties?: {[key: string]: string};
}

/**
 * Job output definition container information on where to find job output/logs.
 */
export interface JobOutputResponse {
    /**
     * ARM ID of the datastore where the job logs and artifacts are stored, or null for the default container ("azureml") in the workspace's storage account.
     */
    datastoreId: string;
    /**
     * Path within the datastore to the job logs and artifacts.
     */
    path: string;
}

export interface K8sOnlineDeploymentResponse {
    /**
     * If true, enables Application Insights logging.
     */
    appInsightsEnabled?: boolean;
    /**
     * Code configuration for the endpoint deployment.
     */
    codeConfiguration?: outputs.machinelearningservices.CodeConfigurationResponse;
    /**
     * Resource requirements for each container instance within an online deployment.
     */
    containerResourceRequirements?: outputs.machinelearningservices.ContainerResourceRequirementsResponse;
    /**
     * Description of the endpoint deployment.
     */
    description?: string;
    /**
     * Enum to determine endpoint compute type.
     * Expected value is 'K8S'.
     */
    endpointComputeType: "K8S";
    /**
     * ARM resource ID of the environment specification for the endpoint deployment.
     */
    environmentId?: string;
    /**
     * Environment variables configuration for the deployment.
     */
    environmentVariables?: {[key: string]: string};
    /**
     * Deployment container liveness/readiness probe configuration.
     */
    livenessProbe?: outputs.machinelearningservices.ProbeSettingsResponse;
    /**
     * Reference to the model asset for the endpoint deployment.
     */
    model?: outputs.machinelearningservices.DataPathAssetReferenceResponse | outputs.machinelearningservices.IdAssetReferenceResponse | outputs.machinelearningservices.OutputPathAssetReferenceResponse;
    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     */
    properties?: {[key: string]: string};
    /**
     * Provisioning state for the endpoint deployment.
     */
    provisioningState: string;
    /**
     * Online deployment scoring requests configuration.
     */
    requestSettings?: outputs.machinelearningservices.OnlineRequestSettingsResponse;
    /**
     * Online deployment scaling configuration.
     */
    scaleSettings?: outputs.machinelearningservices.AutoScaleSettingsResponse | outputs.machinelearningservices.ManualScaleSettingsResponse;
}

export interface KeyVaultPropertiesResponse {
    /**
     * For future use - The client id of the identity which will be used to access key vault.
     */
    identityClientId?: string;
    /**
     * Key vault uri to access the encryption key.
     */
    keyIdentifier: string;
    /**
     * The ArmId of the keyVault where the customer owned encryption key is present.
     */
    keyVaultArmId: string;
}

/**
 * Represents a category of labels in a labeling job.
 */
export interface LabelCategoryResponse {
    /**
     * Indicates whether it is allowed to select multiple classes in this category.
     */
    allowMultiSelect?: boolean;
    /**
     * Dictionary of label classes in this category.
     */
    classes: {[key: string]: outputs.machinelearningservices.LabelClassResponse};
    /**
     * Display name of the label category.
     */
    displayName?: string;
}

/**
 * Represents a label or a category of labels in a labeling job.
 */
export interface LabelClassResponse {
    /**
     * Display name of the label class.
     */
    displayName?: string;
    /**
     * Dictionary of subclasses of the label class.
     */
    subclasses?: {[key: string]: outputs.machinelearningservices.LabelClassResponse};
}

/**
 * Represents configuration of dataset used in a labeling job.
 */
export interface LabelingDatasetConfigurationResponse {
    /**
     * Name of the data asset to perform labeling.
     */
    assetName: string;
    /**
     * AML dataset version.
     */
    datasetVersion: string;
    /**
     * Indicates whether to enable incremental dataset refresh.
     */
    enableIncrementalDatasetRefresh?: boolean;
}

export interface LabelingJobImagePropertiesResponse {
    /**
     * Annotation type of image labeling tasks.
     */
    annotationType?: string;
    /**
     * Media type of data asset.
     */
    mediaType: string;
}

/**
 * Instructions for a labeling job.
 */
export interface LabelingJobInstructionsResponse {
    /**
     * The link to a page with detailed labeling instructions for labelers.
     */
    uri?: string;
}

/**
 * Definition of a labeling job.
 */
export interface LabelingJobPropertiesResponse {
    /**
     * Created time of the job in UTC timezone.
     */
    createdTimeUtc: string;
    /**
     * Dataset configuration for the job.
     */
    datasetConfiguration: outputs.machinelearningservices.LabelingDatasetConfigurationResponse;
    /**
     * Instructions for the job.
     */
    jobInstructions: outputs.machinelearningservices.LabelingJobInstructionsResponse;
    /**
     * Label categories of the job.
     */
    labelCategories: {[key: string]: outputs.machinelearningservices.LabelCategoryResponse};
    /**
     * Media specific properties in a labeling job.
     */
    labelingJobMediaProperties: outputs.machinelearningservices.LabelingJobImagePropertiesResponse;
    /**
     * Machine learning assisted configuration for the job.
     */
    mlAssistConfiguration?: outputs.machinelearningservices.MLAssistConfigurationResponse;
    /**
     * Progress metrics of the job.
     */
    progressMetrics: outputs.machinelearningservices.ProgressMetricsResponse;
    /**
     * Internal id of the job(Previously called project).
     */
    projectId: string;
    /**
     * The job property dictionary. Properties can be added, but not removed or altered.
     */
    properties?: {[key: string]: string};
    /**
     * Status of the job.
     */
    status: string;
    /**
     * Status messages of the job.
     */
    statusMessages: outputs.machinelearningservices.StatusMessageResponse[];
    /**
     * The job tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
}

/**
 * Info about origin if it is linked.
 */
export interface LinkedInfoResponse {
    /**
     * LinkedId id.
     */
    linkedId?: string;
    /**
     * Linked resource name.
     */
    linkedResourceName?: string;
    /**
     * Datastore origin
     */
    origin?: string;
}

/**
 * LinkedService specific properties.
 */
export interface LinkedServicePropsResponse {
    /**
     * The creation time of the linked service.
     */
    createdTime?: string;
    /**
     * Type of the link target.
     */
    linkType?: string;
    /**
     * ResourceId of the link target of the linked service.
     */
    linkedServiceResourceId: string;
    /**
     * The last modified time of the linked service.
     */
    modifiedTime?: string;
}

/**
 * LinkedWorkspace specific properties.
 */
export interface LinkedWorkspacePropsResponse {
    /**
     * ResourceId of the link target of the linked workspace.
     */
    linkedWorkspaceResourceId?: string;
    /**
     * ResourceId of the user assigned identity for the linked workspace.
     */
    userAssignedIdentityResourceId?: string;
}

export interface ListNotebookKeysResultResponse {
    primaryAccessKey: string;
    secondaryAccessKey: string;
}

/**
 * Represents configuration for machine learning assisted features in a labeling job.
 */
export interface MLAssistConfigurationResponse {
    /**
     * The compute designated for inferencing.
     */
    inferencingComputeBinding: outputs.machinelearningservices.ComputeBindingResponse;
    /**
     * Indicates whether MLAssist feature is enabled.
     */
    mlAssistEnabled?: boolean;
    /**
     * Name prefix to use for machine learning model. For each iteration modelName will be appended with iteration e.g.{modelName}_{i}.
     */
    modelNamePrefix: string;
    /**
     * Prelabel accuracy threshold used in MLAssist feature.
     */
    prelabelAccuracyThreshold?: number;
    /**
     * The compute designated for training.
     */
    trainingComputeBinding: outputs.machinelearningservices.ComputeBindingResponse;
}

/**
 * Wrapper for error response to follow ARM guidelines.
 */
export interface MachineLearningServiceErrorResponse {
    /**
     * The error response.
     */
    error: outputs.machinelearningservices.ErrorResponseResponse;
}

/**
 * Managed identity configuration.
 */
export interface ManagedIdentityResponse {
    /**
     * Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
     */
    clientId?: string;
    /**
     * Enum to determine identity framework.
     * Expected value is 'Managed'.
     */
    identityType: "Managed";
    /**
     * Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
     */
    objectId?: string;
    /**
     * Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
     */
    resourceId?: string;
}

export interface ManagedOnlineDeploymentResponse {
    /**
     * If true, enables Application Insights logging.
     */
    appInsightsEnabled?: boolean;
    /**
     * Code configuration for the endpoint deployment.
     */
    codeConfiguration?: outputs.machinelearningservices.CodeConfigurationResponse;
    /**
     * Description of the endpoint deployment.
     */
    description?: string;
    /**
     * Enum to determine endpoint compute type.
     * Expected value is 'Managed'.
     */
    endpointComputeType: "Managed";
    /**
     * ARM resource ID of the environment specification for the endpoint deployment.
     */
    environmentId?: string;
    /**
     * Environment variables configuration for the deployment.
     */
    environmentVariables?: {[key: string]: string};
    /**
     * Compute instance type.
     */
    instanceType?: string;
    /**
     * Deployment container liveness/readiness probe configuration.
     */
    livenessProbe?: outputs.machinelearningservices.ProbeSettingsResponse;
    /**
     * Reference to the model asset for the endpoint deployment.
     */
    model?: outputs.machinelearningservices.DataPathAssetReferenceResponse | outputs.machinelearningservices.IdAssetReferenceResponse | outputs.machinelearningservices.OutputPathAssetReferenceResponse;
    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     */
    properties?: {[key: string]: string};
    /**
     * Provisioning state for the endpoint deployment.
     */
    provisioningState: string;
    /**
     * Deployment container liveness/readiness probe configuration.
     */
    readinessProbe?: outputs.machinelearningservices.ProbeSettingsResponse;
    /**
     * Online deployment scoring requests configuration.
     */
    requestSettings?: outputs.machinelearningservices.OnlineRequestSettingsResponse;
    /**
     * Online deployment scaling configuration.
     */
    scaleSettings?: outputs.machinelearningservices.AutoScaleSettingsResponse | outputs.machinelearningservices.ManualScaleSettingsResponse;
}

export interface ManualScaleSettingsResponse {
    /**
     * Fixed number of instances for this deployment.
     */
    instanceCount?: number;
    /**
     * Maximum number of instances for this deployment.
     */
    maxInstances?: number;
    /**
     * Minimum number of instances for this deployment.
     */
    minInstances?: number;
    /**
     *
     * Expected value is 'Manual'.
     */
    scaleType: "Manual";
}

/**
 * Defines an early termination policy based on running averages of the primary metric of all runs.
 */
export interface MedianStoppingPolicyResponse {
    /**
     * Number of intervals by which to delay the first evaluation.
     */
    delayEvaluation?: number;
    /**
     * Interval (number of runs) between policy evaluations.
     */
    evaluationInterval?: number;
    /**
     *
     * Expected value is 'MedianStopping'.
     */
    policyType: "MedianStopping";
}

export interface ModelContainerResponse {
    /**
     * The asset description text.
     */
    description?: string;
    /**
     * The asset property dictionary.
     */
    properties?: {[key: string]: string};
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
}

/**
 * Image registry that contains the base image.
 */
export interface ModelDockerSectionResponseResponseBaseImageRegistry {
    address?: string;
}

/**
 * The definition of a Docker container.
 */
export interface ModelEnvironmentDefinitionResponseResponseDocker {
    /**
     * Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.
     */
    baseDockerfile?: string;
    /**
     * Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.
     */
    baseImage?: string;
    /**
     * Image registry that contains the base image.
     */
    baseImageRegistry?: outputs.machinelearningservices.ModelDockerSectionResponseResponseBaseImageRegistry;
}

/**
 * Settings for a Python environment.
 */
export interface ModelEnvironmentDefinitionResponseResponsePython {
    baseCondaEnvironment?: string;
    /**
     * A JObject containing Conda dependencies.
     */
    condaDependencies?: any;
    /**
     * The python interpreter path to use if an environment build is not required. The path specified gets used to call the user script.
     */
    interpreterPath?: string;
    /**
     * True means that AzureML reuses an existing python environment; False means that AzureML will create a python environment based on the Conda dependencies specification.
     */
    userManagedDependencies?: boolean;
}

/**
 * Settings for a R environment.
 */
export interface ModelEnvironmentDefinitionResponseResponseR {
    /**
     * The packages from Bioconductor.
     */
    bioConductorPackages?: string[];
    /**
     * The CRAN packages to use.
     */
    cranPackages?: outputs.machinelearningservices.RCranPackageResponse[];
    /**
     * The packages from custom urls.
     */
    customUrlPackages?: string[];
    /**
     * The packages directly from GitHub.
     */
    gitHubPackages?: outputs.machinelearningservices.RGitHubPackageResponseResponse[];
    /**
     * The version of R to be installed
     */
    rVersion?: string;
    /**
     * The Rscript path to use if an environment build is not required.
     * The path specified gets used to call the user script.
     */
    rscriptPath?: string;
    /**
     * Date of MRAN snapshot to use in YYYY-MM-DD format, e.g. "2019-04-17"
     */
    snapshotDate?: string;
    /**
     * Indicates whether the environment is managed by user or by AzureML.
     */
    userManaged?: boolean;
}

/**
 * The configuration for a Spark environment.
 */
export interface ModelEnvironmentDefinitionResponseResponseSpark {
    /**
     * The Spark packages to use.
     */
    packages?: outputs.machinelearningservices.SparkMavenPackageResponse[];
    /**
     * Whether to precache the packages.
     */
    precachePackages?: boolean;
    /**
     * The list of spark repositories.
     */
    repositories?: string[];
}

/**
 * An Azure Machine Learning Model.
 */
export interface ModelResponse {
    /**
     * The Model creation time (UTC).
     */
    createdTime?: string;
    /**
     * The list of datasets associated with the model.
     */
    datasets?: outputs.machinelearningservices.DatasetReferenceResponse[];
    /**
     * Models derived from this model
     */
    derivedModelIds?: string[];
    /**
     * The Model description text.
     */
    description?: string;
    /**
     * The name of the experiment where this model was created.
     */
    experimentName?: string;
    /**
     * The Model framework.
     */
    framework?: string;
    /**
     * The Model framework version.
     */
    frameworkVersion?: string;
    /**
     * The Model Id.
     */
    id?: string;
    /**
     * The Model tag dictionary. Items are mutable.
     */
    kvTags?: {[key: string]: string};
    /**
     * The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml
     */
    mimeType: string;
    /**
     * The Model last modified time (UTC).
     */
    modifiedTime?: string;
    /**
     * The Model name.
     */
    name: string;
    /**
     * The Parent Model Id.
     */
    parentModelId?: string;
    /**
     * The Model property dictionary. Properties are immutable.
     */
    properties?: {[key: string]: string};
    /**
     * Resource requirements for the model
     */
    resourceRequirements?: outputs.machinelearningservices.ContainerResourceRequirementsResponse;
    /**
     * The RunId that created this model.
     */
    runId?: string;
    /**
     * Sample Input Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}
     */
    sampleInputData?: string;
    /**
     * Sample Output Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}
     */
    sampleOutputData?: string;
    /**
     * Indicates whether we need to unpack the Model during docker Image creation.
     */
    unpack?: boolean;
    /**
     * The URL of the Model. Usually a SAS URL.
     */
    url: string;
    /**
     * The Model version assigned by Model Management Service.
     */
    version?: number;
}

/**
 * Model asset version details.
 */
export interface ModelVersionResponse {
    /**
     * ARM resource ID of the datastore where the asset is located.
     */
    datastoreId?: string;
    /**
     * The asset description text.
     */
    description?: string;
    /**
     * Mapping of model flavors to their properties.
     */
    flavors?: {[key: string]: outputs.machinelearningservices.FlavorDataResponse};
    /**
     * If the name version are system generated (anonymous registration).
     */
    isAnonymous?: boolean;
    /**
     * [Required] The path of the file/directory in the datastore.
     */
    path: string;
    /**
     * The asset property dictionary.
     */
    properties?: {[key: string]: string};
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
}

/**
 * MPI distribution configuration.
 */
export interface MpiResponse {
    /**
     * Enum to determine the job distribution type.
     * Expected value is 'Mpi'.
     */
    distributionType: "Mpi";
    /**
     * Number of processes per MPI node.
     */
    processCountPerInstance?: number;
}

/**
 * Counts of various compute node states on the amlCompute.
 */
export interface NodeStateCountsResponse {
    /**
     * Number of compute nodes in idle state.
     */
    idleNodeCount: number;
    /**
     * Number of compute nodes which are leaving the amlCompute.
     */
    leavingNodeCount: number;
    /**
     * Number of compute nodes which are in preempted state.
     */
    preemptedNodeCount: number;
    /**
     * Number of compute nodes which are being prepared.
     */
    preparingNodeCount: number;
    /**
     * Number of compute nodes which are running jobs.
     */
    runningNodeCount: number;
    /**
     * Number of compute nodes which are in unusable state.
     */
    unusableNodeCount: number;
}

export interface NotebookPreparationErrorResponse {
    errorMessage?: string;
    statusCode?: number;
}

export interface NotebookResourceInfoResponse {
    fqdn?: string;
    /**
     * The error that occurs when preparing notebook.
     */
    notebookPreparationError?: outputs.machinelearningservices.NotebookPreparationErrorResponse;
    /**
     * the data plane resourceId that used to initialize notebook component
     */
    resourceId?: string;
}

/**
 * Optimization objective.
 */
export interface ObjectiveResponse {
    /**
     * [Required] Defines supported metric goals for hyperparameter tuning
     */
    goal: string;
    /**
     * [Required] Name of the metric to optimize.
     */
    primaryMetric: string;
}

/**
 * Online endpoint configuration
 */
export interface OnlineEndpointResponse {
    /**
     * [Required] Inference endpoint authentication mode type
     */
    authMode: string;
    /**
     * Description of the inference endpoint.
     */
    description?: string;
    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     */
    properties?: {[key: string]: string};
    /**
     * State of endpoint provisioning.
     */
    provisioningState: string;
    /**
     * Endpoint URI.
     */
    scoringUri: string;
    /**
     * Endpoint Swagger URI.
     */
    swaggerUri: string;
    /**
     * ARM resource ID of the compute if it exists.
     * optional
     */
    target?: string;
    /**
     * Traffic rules on how the traffic will be routed across deployments.
     */
    traffic?: {[key: string]: number};
}

/**
 * Online deployment scoring requests configuration.
 */
export interface OnlineRequestSettingsResponse {
    /**
     * The number of requests allowed to queue at once for this deployment.
     */
    maxConcurrentRequestsPerInstance?: number;
    /**
     * The maximum queue wait time in ISO 8601 format. Supports millisecond precision.
     */
    maxQueueWait?: string;
    /**
     * The request timeout in ISO 8601 format. Supports millisecond precision.
     */
    requestTimeout?: string;
}

export interface OutputDataBindingResponse {
    /**
     * ARM resource ID of the datastore where the data output will be stored.
     */
    datastoreId?: string;
    /**
     * Mechanism for data movement to datastore.
     */
    mode?: string;
    /**
     * Location of data inside the container process.
     */
    pathOnCompute?: string;
    /**
     * Path within the datastore to the data.
     */
    pathOnDatastore?: string;
}

/**
 * Reference to an asset via its path in a job output.
 */
export interface OutputPathAssetReferenceResponse {
    /**
     * ARM resource ID of the job.
     */
    jobId?: string;
    /**
     * The path of the file/directory in the job output.
     */
    path?: string;
    /**
     * Enum to determine which reference method to use for an asset.
     * Expected value is 'OutputPath'.
     */
    referenceType: "OutputPath";
}

export interface PasswordResponse {
    name: string;
    value: string;
}

/**
 * Settings for a personal compute instance.
 */
export interface PersonalComputeInstanceSettingsResponse {
    /**
     * A user explicitly assigned to a personal compute instance.
     */
    assignedUser?: outputs.machinelearningservices.AssignedUserResponse;
}

/**
 * The Private Endpoint Connection resource.
 */
export interface PrivateEndpointConnectionResponse {
    /**
     * Specifies the resource ID.
     */
    id: string;
    /**
     * The identity of the resource.
     */
    identity?: outputs.machinelearningservices.IdentityResponse;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * Specifies the name of the resource.
     */
    name: string;
    /**
     * The resource of private end point.
     */
    privateEndpoint?: outputs.machinelearningservices.PrivateEndpointResponse;
    /**
     * A collection of information about the state of the connection between service consumer and provider.
     */
    privateLinkServiceConnectionState: outputs.machinelearningservices.PrivateLinkServiceConnectionStateResponse;
    /**
     * The provisioning state of the private endpoint connection resource.
     */
    provisioningState: string;
    /**
     * The sku of the workspace.
     */
    sku?: outputs.machinelearningservices.SkuResponse;
    /**
     * Read only system data
     */
    systemData: outputs.machinelearningservices.SystemDataResponse;
    /**
     * Contains resource tags defined as key/value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * Specifies the type of the resource.
     */
    type: string;
}

/**
 * The Private Endpoint resource.
 */
export interface PrivateEndpointResponse {
    /**
     * The ARM identifier for Private Endpoint
     */
    id: string;
    /**
     * The ARM identifier for Subnet resource that private endpoint links to
     */
    subnetArmId: string;
}

/**
 * A collection of information about the state of the connection between service consumer and provider.
 */
export interface PrivateLinkServiceConnectionStateResponse {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: string;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: string;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: string;
}

/**
 * Deployment container liveness/readiness probe configuration.
 */
export interface ProbeSettingsResponse {
    /**
     * The number of failures to allow before returning an unhealthy status.
     */
    failureThreshold?: number;
    /**
     * The delay before the first probe in ISO 8601 format.
     */
    initialDelay?: string;
    /**
     * The length of time between probes in ISO 8601 format.
     */
    period?: string;
    /**
     * The number of successful probes before returning a healthy status.
     */
    successThreshold?: number;
    /**
     * The probe timeout in ISO 8601 format.
     */
    timeout?: string;
}

/**
 * Progress metrics for a labeling job.
 */
export interface ProgressMetricsResponse {
    /**
     * The completed datapoint count.
     */
    completedDatapointCount: number;
    /**
     * The time of last successful incremental dataset refresh in UTC.
     */
    incrementalDatasetLastRefreshTime: string;
    /**
     * The skipped datapoint count.
     */
    skippedDatapointCount: number;
    /**
     * The total datapoint count.
     */
    totalDatapointCount: number;
}

/**
 * PyTorch distribution configuration.
 */
export interface PyTorchResponse {
    /**
     * Enum to determine the job distribution type.
     * Expected value is 'PyTorch'.
     */
    distributionType: "PyTorch";
    /**
     * Total process count for the distributed job.
     */
    processCount?: number;
}

export interface RCranPackageResponse {
    /**
     * The package name.
     */
    name?: string;
    /**
     * The repository name.
     */
    repository?: string;
}

export interface RGitHubPackageResponseResponse {
    /**
     * Repository address in the format username/repo[/subdir][@ref|#pull].
     */
    repository?: string;
}

export interface RegistryListCredentialsResultResponse {
    location: string;
    passwords?: outputs.machinelearningservices.PasswordResponse[];
    username: string;
}

/**
 * Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
 */
export interface ResourceIdResponse {
    /**
     * The ID of the resource
     */
    id: string;
}

/**
 * Service identity associated with a resource.
 */
export interface ResourceIdentityResponse {
    /**
     * Client ID that is used when authenticating.
     */
    principalId: string;
    /**
     * AAD Tenant where this identity lives.
     */
    tenantId: string;
    /**
     * Defines values for a ResourceIdentity's type.
     */
    type?: string;
    /**
     * Dictionary of the user assigned identities, key is ARM resource ID of the UAI.
     */
    userAssignedIdentities?: {[key: string]: outputs.machinelearningservices.UserAssignedIdentityMetaResponse};
}

export interface RouteResponse {
    /**
     * [Required] The path for the route.
     */
    path: string;
    /**
     * [Required] The port for the route.
     */
    port: number;
}

/**
 * scale settings for AML Compute
 */
export interface ScaleSettingsResponse {
    /**
     * Max number of nodes to use
     */
    maxNodeCount: number;
    /**
     * Min number of nodes to use
     */
    minNodeCount?: number;
    /**
     * Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
     */
    nodeIdleTimeBeforeScaleDown?: string;
}
/**
 * scaleSettingsResponseProvideDefaults sets the appropriate defaults for ScaleSettingsResponse
 */
export function scaleSettingsResponseProvideDefaults(val: ScaleSettingsResponse): ScaleSettingsResponse {
    return {
        ...val,
        minNodeCount: (val.minNodeCount) ?? 0,
    };
}

/**
 * Script reference
 */
export interface ScriptReferenceResponse {
    /**
     * Optional command line arguments passed to the script to run.
     */
    scriptArguments?: string;
    /**
     * The location of scripts in the mounted volume.
     */
    scriptData?: string;
    /**
     * The storage source of the script: inline, workspace.
     */
    scriptSource?: string;
    /**
     * Optional time period passed to timeout command.
     */
    timeout?: string;
}

/**
 * Customized setup scripts
 */
export interface ScriptsToExecuteResponse {
    /**
     * Script that's run only once during provision of the compute.
     */
    creationScript?: outputs.machinelearningservices.ScriptReferenceResponse;
    /**
     * Script that's run every time the machine starts.
     */
    startupScript?: outputs.machinelearningservices.ScriptReferenceResponse;
}

export interface ServiceManagedResourcesSettingsResponse {
    /**
     * The settings for the service managed cosmosdb account.
     */
    cosmosDb?: outputs.machinelearningservices.CosmosDbSettingsResponse;
}

/**
 * The error details.
 */
export interface ServiceResponseBaseResponseError {
    /**
     * The error response.
     */
    error: outputs.machinelearningservices.ErrorResponseResponse;
}

/**
 * Details of customized scripts to execute for setting up the cluster.
 */
export interface SetupScriptsResponse {
    /**
     * Customized setup scripts
     */
    scripts?: outputs.machinelearningservices.ScriptsToExecuteResponse;
}

export interface SharedPrivateLinkResourceResponse {
    /**
     * The private link resource group id.
     */
    groupId?: string;
    /**
     * Unique name of the private link.
     */
    name?: string;
    /**
     * The resource id that private link links to.
     */
    privateLinkResourceId?: string;
    /**
     * Request message.
     */
    requestMessage?: string;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: string;
}

/**
 * Sku of the resource
 */
export interface SkuResponse {
    /**
     * Name of the sku
     */
    name?: string;
    /**
     * Tier of the sku like Basic or Enterprise
     */
    tier?: string;
}

export interface SparkMavenPackageResponse {
    artifact?: string;
    group?: string;
    version?: string;
}

/**
 * The ssl configuration for scoring
 */
export interface SslConfigurationResponse {
    /**
     * Cert data
     */
    cert?: string;
    /**
     * CNAME of the cert
     */
    cname?: string;
    /**
     * Key data
     */
    key?: string;
    /**
     * Enable or disable ssl for scoring
     */
    status?: string;
}

/**
 * Active message associated with project.
 */
export interface StatusMessageResponse {
    /**
     * Service-defined message code.
     */
    code: string;
    /**
     * Time in UTC at which the message was created.
     */
    createdTimeUtc: string;
    /**
     * Severity level of the status message.
     */
    level: string;
    /**
     * A human-readable representation of the message code.
     */
    message: string;
}

/**
 * Sweep job definition.
 */
export interface SweepJobResponse {
    /**
     * [Required] Type of the hyperparameter sampling algorithms
     */
    algorithm: string;
    /**
     * [Required] Compute binding for the job.
     */
    compute: outputs.machinelearningservices.ComputeConfigurationResponse;
    /**
     * The asset description text.
     */
    description?: string;
    /**
     * Early termination policies enable canceling poor-performing runs before they complete.
     */
    earlyTermination?: outputs.machinelearningservices.BanditPolicyResponse | outputs.machinelearningservices.MedianStoppingPolicyResponse | outputs.machinelearningservices.TruncationSelectionPolicyResponse;
    /**
     * The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
     */
    experimentName?: string;
    /**
     * Identity configuration. If set, this should be one of AmlToken, ManagedIdentity or null.
     * Defaults to AmlToken if null.
     */
    identity?: outputs.machinelearningservices.AmlTokenResponse | outputs.machinelearningservices.ManagedIdentityResponse;
    /**
     * List of JobEndpoints.
     * For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
     */
    interactionEndpoints: {[key: string]: outputs.machinelearningservices.JobEndpointResponse};
    /**
     * Enum to determine the type of job.
     * Expected value is 'Sweep'.
     */
    jobType: "Sweep";
    /**
     * An upper bound on the number of trials performed in parallel.
     */
    maxConcurrentTrials?: number;
    /**
     * An upper bound on the number of trials to perform.
     */
    maxTotalTrials?: number;
    /**
     * [Required] Optimization objective.
     */
    objective: outputs.machinelearningservices.ObjectiveResponse;
    /**
     * Location of the job output logs and artifacts.
     */
    output: outputs.machinelearningservices.JobOutputResponse;
    /**
     * Job priority for scheduling policy. Only applies to AMLCompute.
     * Private preview feature and only available to users on the allow list.
     */
    priority?: number;
    /**
     * The asset property dictionary.
     */
    properties?: {[key: string]: string};
    /**
     * Specifies the job provisioning state.
     */
    provisioningState: string;
    /**
     * [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
     */
    searchSpace: {[key: string]: any};
    /**
     * The status of a job.
     */
    status: string;
    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    tags?: {[key: string]: string};
    /**
     * The total timeout in ISO 8601 format. Only supports duration with precision as low as Minutes.
     */
    timeout?: string;
    /**
     * Trial component definition.
     */
    trial?: outputs.machinelearningservices.TrialComponentResponse;
}

/**
 * Read only system data
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC)
     */
    createdAt?: string;
    /**
     * An identifier for the identity that created the resource
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * An identifier for the identity that last modified the resource
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource
     */
    lastModifiedByType?: string;
}

/**
 * A system service running on a compute.
 */
export interface SystemServiceResponse {
    /**
     * Public IP address
     */
    publicIpAddress: string;
    /**
     * The type of this system service.
     */
    systemServiceType: string;
    /**
     * The version for this type.
     */
    version: string;
}

/**
 * TensorFlow distribution configuration.
 */
export interface TensorFlowResponse {
    /**
     * Enum to determine the job distribution type.
     * Expected value is 'TensorFlow'.
     */
    distributionType: "TensorFlow";
    /**
     * Number of parameter server tasks.
     */
    parameterServerCount?: number;
    /**
     * Number of workers. Overwrites the node count in compute binding.
     */
    workerCount?: number;
}

/**
 * Trial component definition.
 */
export interface TrialComponentResponse {
    /**
     * ARM resource ID of the code asset.
     */
    codeId?: string;
    /**
     * [Required] The command to execute on startup of the job. eg. "python train.py"
     */
    command: string;
    /**
     * Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
     */
    distribution?: outputs.machinelearningservices.MpiResponse | outputs.machinelearningservices.PyTorchResponse | outputs.machinelearningservices.TensorFlowResponse;
    /**
     * The ARM resource ID of the Environment specification for the job.
     */
    environmentId?: string;
    /**
     * Environment variables included in the job.
     */
    environmentVariables?: {[key: string]: string};
    /**
     * Mapping of input data bindings used in the job.
     */
    inputDataBindings?: {[key: string]: outputs.machinelearningservices.InputDataBindingResponse};
    /**
     * Mapping of output data bindings used in the job.
     */
    outputDataBindings?: {[key: string]: outputs.machinelearningservices.OutputDataBindingResponse};
    /**
     * The max run duration in ISO 8601 format, after which the trial component will be cancelled.
     * Only supports duration with precision as low as Seconds.
     */
    timeout?: string;
}

/**
 * Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
 */
export interface TruncationSelectionPolicyResponse {
    /**
     * Number of intervals by which to delay the first evaluation.
     */
    delayEvaluation?: number;
    /**
     * Interval (number of runs) between policy evaluations.
     */
    evaluationInterval?: number;
    /**
     *
     * Expected value is 'TruncationSelection'.
     */
    policyType: "TruncationSelection";
    /**
     * The percentage of runs to cancel at each evaluation interval.
     */
    truncationPercentage?: number;
}

/**
 * Settings for user account that gets created on each on the nodes of a compute.
 */
export interface UserAccountCredentialsResponse {
    /**
     * Name of the administrator user account which can be used to SSH to nodes.
     */
    adminUserName: string;
    /**
     * Password of the administrator user account.
     */
    adminUserPassword?: string;
    /**
     * SSH public key of the administrator user account.
     */
    adminUserSshPublicKey?: string;
}

/**
 * User assigned identities associated with a resource.
 */
export interface UserAssignedIdentityMetaResponse {
    /**
     * Aka application ID, a unique identifier generated by Azure AD that is tied to an application and service principal during its initial provisioning.
     */
    clientId?: string;
    /**
     * The object ID of the service principal object for your managed identity that is used to grant role-based access to an Azure resource.
     */
    principalId?: string;
}

/**
 * User Assigned Identity
 */
export interface UserAssignedIdentityResponse {
    /**
     * The clientId(aka appId) of the user assigned identity.
     */
    clientId: string;
    /**
     * The principal ID of the user assigned identity.
     */
    principalId: string;
    /**
     * The tenant ID of the user assigned identity.
     */
    tenantId: string;
}

/**
 * User who created.
 */
export interface UserInfoResponse {
    /**
     * A user alternate sec id. This represents the user in a different identity provider system Eg.1:live.com:puid
     */
    userAltSecId?: string;
    /**
     * A user identity provider. Eg live.com
     */
    userIdp?: string;
    /**
     * The issuer which issued the token for this user.
     */
    userIss?: string;
    /**
     *  A user's full name or a service principal's app ID.
     */
    userName?: string;
    /**
     * A user or service principal's object ID..
     */
    userObjectId?: string;
    /**
     * A user or service principal's PuID.
     */
    userPuId?: string;
    /**
     * A user or service principal's tenant ID.
     */
    userTenantId?: string;
}

/**
 * Virtual Machine image for Windows AML Compute
 */
export interface VirtualMachineImageResponse {
    /**
     * Virtual Machine image path
     */
    id: string;
}

/**
 * A Machine Learning compute based on Azure Virtual Machines.
 */
export interface VirtualMachineResponse {
    /**
     * Location for the underlying compute
     */
    computeLocation?: string;
    /**
     * The type of compute
     * Expected value is 'VirtualMachine'.
     */
    computeType: "VirtualMachine";
    /**
     * The description of the Machine Learning compute.
     */
    description?: string;
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     */
    isAttachedCompute: boolean;
    properties?: outputs.machinelearningservices.VirtualMachineResponseProperties;
    /**
     * Errors during provisioning
     */
    provisioningErrors: outputs.machinelearningservices.MachineLearningServiceErrorResponse[];
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     */
    provisioningState: string;
    /**
     * ARM resource id of the underlying compute
     */
    resourceId?: string;
}

export interface VirtualMachineResponseProperties {
    /**
     * Public IP address of the virtual machine.
     */
    address?: string;
    /**
     * Admin credentials for virtual machine
     */
    administratorAccount?: outputs.machinelearningservices.VirtualMachineSshCredentialsResponse;
    /**
     * Port open for ssh connections.
     */
    sshPort?: number;
    /**
     * Virtual Machine size
     */
    virtualMachineSize?: string;
}

/**
 * Admin credentials for virtual machine
 */
export interface VirtualMachineSshCredentialsResponse {
    /**
     * Password of admin account
     */
    password?: string;
    /**
     * Private key data
     */
    privateKeyData?: string;
    /**
     * Public key data
     */
    publicKeyData?: string;
    /**
     * Username of admin account
     */
    username?: string;
}

