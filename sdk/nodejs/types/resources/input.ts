// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20151101 from "./v20151101/input";
export * as v20160201 from "./v20160201/input";
export * as v20160701 from "./v20160701/input";
export * as v20160901 from "./v20160901/input";
export * as v20170510 from "./v20170510/input";
export * as v20180201 from "./v20180201/input";
export * as v20180501 from "./v20180501/input";
export * as v20190301 from "./v20190301/input";
export * as v20190501 from "./v20190501/input";
export * as v20190510 from "./v20190510/input";
export * as v20190601preview from "./v20190601preview/input";
export * as v20190701 from "./v20190701/input";
export * as v20190801 from "./v20190801/input";
export * as v20191001 from "./v20191001/input";
export * as v20191001preview from "./v20191001preview/input";
export * as v20200601 from "./v20200601/input";
export * as v20200801 from "./v20200801/input";
export * as v20201001 from "./v20201001/input";
export * as v20210101 from "./v20210101/input";
export * as v20210301preview from "./v20210301preview/input";
export * as v20210401 from "./v20210401/input";
export * as v20210501 from "./v20210501/input";
export * as v20220201 from "./v20220201/input";
export * as v20220901 from "./v20220901/input";
/**
 * Settings to customize ACI container instance.
 */
export interface ContainerConfigurationArgs {
    /**
     * Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed. To specify a 'containerGroupName', add the following object to properties: { "containerSettings": { "containerGroupName": "contoso-container" } }. If you do not want to specify a 'containerGroupName' then do not add 'containerSettings' property.
     */
    containerGroupName?: pulumi.Input<string>;
}

/**
 * The debug setting.
 */
export interface DebugSettingArgs {
    /**
     * Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
     */
    detailLevel?: pulumi.Input<string>;
}

/**
 * Deployment properties.
 */
export interface DeploymentPropertiesArgs {
    /**
     * The debug setting of the deployment.
     */
    debugSetting?: pulumi.Input<inputs.resources.DebugSettingArgs>;
    /**
     * Specifies whether template expressions are evaluated within the scope of the parent template or nested template. Only applicable to nested templates. If not specified, default value is outer.
     */
    expressionEvaluationOptions?: pulumi.Input<inputs.resources.ExpressionEvaluationOptionsArgs>;
    /**
     * The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.
     */
    mode: pulumi.Input<enums.resources.DeploymentMode>;
    /**
     * The deployment on error behavior.
     */
    onErrorDeployment?: pulumi.Input<inputs.resources.OnErrorDeploymentArgs>;
    /**
     * Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.
     */
    parameters?: any;
    /**
     * The URI of parameters file. You use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
     */
    parametersLink?: pulumi.Input<inputs.resources.ParametersLinkArgs>;
    /**
     * The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
     */
    template?: any;
    /**
     * The URI of the template. Use either the templateLink property or the template property, but not both.
     */
    templateLink?: pulumi.Input<inputs.resources.TemplateLinkArgs>;
}

/**
 * The environment variable to pass to the script in the container instance.
 */
export interface EnvironmentVariableArgs {
    /**
     * The name of the environment variable.
     */
    name: pulumi.Input<string>;
    /**
     * The value of the secure environment variable.
     */
    secureValue?: pulumi.Input<string>;
    /**
     * The value of the environment variable.
     */
    value?: pulumi.Input<string>;
}

/**
 * Specifies whether template expressions are evaluated within the scope of the parent template or nested template.
 */
export interface ExpressionEvaluationOptionsArgs {
    /**
     * The scope to be used for evaluation of parameters, variables and functions in a nested template.
     */
    scope?: pulumi.Input<string | enums.resources.ExpressionEvaluationOptionsScopeType>;
}

/**
 * Identity for the resource.
 */
export interface IdentityArgs {
    /**
     * The identity type.
     */
    type?: pulumi.Input<enums.resources.ResourceIdentityType>;
    /**
     * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     */
    userAssignedIdentities?: pulumi.Input<{[key: string]: any}>;
}

/**
 * Represents a Template Spec artifact containing an embedded Azure Resource Manager template for use as a linked template.
 */
export interface LinkedTemplateArtifactArgs {
    /**
     * A filesystem safe relative path of the artifact.
     */
    path: pulumi.Input<string>;
    /**
     * The Azure Resource Manager template.
     */
    template: any;
}

/**
 * Managed identity generic object.
 */
export interface ManagedServiceIdentityArgs {
    /**
     * Type of the managed identity.
     */
    type?: pulumi.Input<string | enums.resources.ManagedServiceIdentityType>;
    /**
     * The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
     */
    userAssignedIdentities?: pulumi.Input<{[key: string]: any}>;
}

/**
 * Deployment on error behavior.
 */
export interface OnErrorDeploymentArgs {
    /**
     * The deployment to be used on error case.
     */
    deploymentName?: pulumi.Input<string>;
    /**
     * The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
     */
    type?: pulumi.Input<enums.resources.OnErrorDeploymentType>;
}

/**
 * Entity representing the reference to the deployment parameters.
 */
export interface ParametersLinkArgs {
    /**
     * If included, must match the ContentVersion in the template.
     */
    contentVersion?: pulumi.Input<string>;
    /**
     * The URI of the parameters file.
     */
    uri: pulumi.Input<string>;
}

/**
 * Plan for the resource.
 */
export interface PlanArgs {
    /**
     * The plan ID.
     */
    name?: pulumi.Input<string>;
    /**
     * The offer ID.
     */
    product?: pulumi.Input<string>;
    /**
     * The promotion code.
     */
    promotionCode?: pulumi.Input<string>;
    /**
     * The publisher ID.
     */
    publisher?: pulumi.Input<string>;
    /**
     * The plan's version.
     */
    version?: pulumi.Input<string>;
}

/**
 * SKU for the resource.
 */
export interface SkuArgs {
    /**
     * The SKU capacity.
     */
    capacity?: pulumi.Input<number>;
    /**
     * The SKU family.
     */
    family?: pulumi.Input<string>;
    /**
     * The SKU model.
     */
    model?: pulumi.Input<string>;
    /**
     * The SKU name.
     */
    name?: pulumi.Input<string>;
    /**
     * The SKU size.
     */
    size?: pulumi.Input<string>;
    /**
     * The SKU tier.
     */
    tier?: pulumi.Input<string>;
}

/**
 * Settings to use an existing storage account. Valid storage account kinds are: Storage, StorageV2 and FileStorage
 */
export interface StorageAccountConfigurationArgs {
    /**
     * The storage account access key.
     */
    storageAccountKey?: pulumi.Input<string>;
    /**
     * The storage account name.
     */
    storageAccountName?: pulumi.Input<string>;
}

/**
 * A dictionary of name and value pairs.
 */
export interface TagsArgs {
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Entity representing the reference to the template.
 */
export interface TemplateLinkArgs {
    /**
     * If included, must match the ContentVersion in the template.
     */
    contentVersion?: pulumi.Input<string>;
    /**
     * The resource id of a Template Spec. Use either the id or uri property, but not both.
     */
    id?: pulumi.Input<string>;
    /**
     * The query string (for example, a SAS token) to be used with the templateLink URI.
     */
    queryString?: pulumi.Input<string>;
    /**
     * The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
     */
    relativePath?: pulumi.Input<string>;
    /**
     * The URI of the template to deploy. Use either the uri or id property, but not both.
     */
    uri?: pulumi.Input<string>;
}

