// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Customer retrieves list of Available Contacts for a spacecraft resource. Later, one of the available contact can be selected to create a contact.
 */
export interface AvailableContactsResponse {
    /**
     * Azimuth of the antenna at the end of the contact in decimal degrees.
     */
    endAzimuthDegrees: number;
    /**
     * Spacecraft elevation above the horizon at contact end.
     */
    endElevationDegrees: number;
    /**
     * Name of Azure Ground Station.
     */
    groundStationName: string;
    /**
     * Maximum elevation of the antenna during the contact in decimal degrees.
     */
    maximumElevationDegrees: number;
    /**
     * Time to lost receiving a signal.
     */
    rxEndTime: string;
    /**
     * Earliest time to receive a signal.
     */
    rxStartTime: string;
    /**
     * The reference to the spacecraft resource.
     */
    spacecraft?: outputs.orbital.v20210404preview.ResourceReferenceResponse;
    /**
     * Azimuth of the antenna at the start of the contact in decimal degrees.
     */
    startAzimuthDegrees: number;
    /**
     * Spacecraft elevation above the horizon at contact start.
     */
    startElevationDegrees: number;
    /**
     * Time at which antenna transmit will be disabled.
     */
    txEndTime: string;
    /**
     * Time at which antenna transmit will be enabled.
     */
    txStartTime: string;
}

/**
 * Contact Profile Link Channel
 */
export interface ContactProfileLinkChannelResponse {
    /**
     * Bandwidth in MHz
     */
    bandwidthMHz: number;
    /**
     * Center Frequency in MHz
     */
    centerFrequencyMHz: number;
    /**
     * Configuration for decoding
     */
    decodingConfiguration?: string;
    /**
     * Configuration for demodulation
     */
    demodulationConfiguration?: string;
    /**
     * Configuration for encoding
     */
    encodingConfiguration?: string;
    /**
     * Customer End point to store/retrieve data during a contact.
     */
    endPoint: outputs.orbital.v20210404preview.EndPointResponse;
    /**
     * Configuration for modulation
     */
    modulationConfiguration?: string;
}

/**
 * Contact Profile link
 */
export interface ContactProfileLinkResponse {
    /**
     * Contact Profile Link Channel
     */
    channels: outputs.orbital.v20210404preview.ContactProfileLinkChannelResponse[];
    /**
     * Direction (uplink or downlink)
     */
    direction: string;
    /**
     * Effective Isotropic Radiated Power (EIRP) in dBW.
     */
    eirpdBW?: number;
    /**
     * Gain To Noise Temperature in db/K.
     */
    gainOverTemperature?: number;
    /**
     * polarization. eg (RHCP, LHCP)
     */
    polarization: string;
}

/**
 * Customer End point to store/retrieve data during a contact.
 */
export interface EndPointResponse {
    /**
     * Name of an end point.
     */
    endPointName: string;
    /**
     * IP Address.
     */
    ipAddress: string;
    /**
     * TCP port to listen on to receive data.
     */
    port: string;
    /**
     * Protocol either UDP or TCP.
     */
    protocol: string;
}

/**
 * Resource Reference
 */
export interface ResourceReferenceResponse {
    /**
     * Resource ID.
     */
    id?: string;
}

/**
 * Spacecraft Link
 */
export interface SpacecraftLinkResponse {
    /**
     * Bandwidth in MHz
     */
    bandwidthMHz: number;
    /**
     * Center Frequency in MHz
     */
    centerFrequencyMHz: number;
    /**
     * Direction (uplink or downlink)
     */
    direction: string;
    /**
     * polarization. eg (RHCP, LHCP)
     */
    polarization: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

