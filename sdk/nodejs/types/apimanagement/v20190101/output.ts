// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Description of an additional API Management resource location.
 */
export interface AdditionalLocationResponse {
    /**
     * Gateway URL of the API Management service in the Region.
     */
    gatewayRegionalUrl: string;
    /**
     * The location name of the additional region among Azure Data center regions.
     */
    location: string;
    /**
     * Private Static Load Balanced IP addresses of the API Management service which is deployed in an Internal Virtual Network in a particular additional location. Available only for Basic, Standard and Premium SKU.
     */
    privateIPAddresses: string[];
    /**
     * Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
     */
    publicIPAddresses: string[];
    /**
     * SKU properties of the API Management service.
     */
    sku: outputs.apimanagement.v20190101.ApiManagementServiceSkuPropertiesResponse;
    /**
     * Virtual network configuration for the location.
     */
    virtualNetworkConfiguration?: outputs.apimanagement.v20190101.VirtualNetworkConfigurationResponse;
}

/**
 * Identity properties of the Api Management service resource.
 */
export interface ApiManagementServiceIdentityResponse {
    /**
     * The principal id of the identity.
     */
    principalId: string;
    /**
     * The client tenant id of the identity.
     */
    tenantId: string;
    /**
     * The identity type. Currently the only supported type is 'SystemAssigned'.
     */
    type: string;
}

/**
 * API Management service resource SKU properties.
 */
export interface ApiManagementServiceSkuPropertiesResponse {
    /**
     * Capacity of the SKU (number of deployed units of the SKU).
     */
    capacity?: number;
    /**
     * Name of the Sku.
     */
    name: string;
}

/**
 * An API Version Set contains the common configuration for a set of API Versions relating 
 */
export interface ApiVersionSetContractDetailsResponse {
    /**
     * Description of API Version Set.
     */
    description?: string;
    /**
     * Identifier for existing API Version Set. Omit this value to create a new Version Set.
     */
    id?: string;
    /**
     * The display Name of the API Version Set.
     */
    name?: string;
    /**
     * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
     */
    versionHeaderName?: string;
    /**
     * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
     */
    versionQueryName?: string;
    /**
     * An value that determines where the API Version identifier will be located in a HTTP request.
     */
    versioningScheme?: string;
}

/**
 * API Authentication Settings.
 */
export interface AuthenticationSettingsContractResponse {
    /**
     * OAuth2 Authentication settings
     */
    oAuth2?: outputs.apimanagement.v20190101.OAuth2AuthenticationSettingsContractResponse;
    /**
     * OpenID Connect Authentication Settings
     */
    openid?: outputs.apimanagement.v20190101.OpenIdAuthenticationSettingsContractResponse;
}

/**
 * Authorization header information.
 */
export interface BackendAuthorizationHeaderCredentialsResponse {
    /**
     * Authentication Parameter value.
     */
    parameter: string;
    /**
     * Authentication Scheme name.
     */
    scheme: string;
}

/**
 * Details of the Credentials used to connect to Backend.
 */
export interface BackendCredentialsContractResponse {
    /**
     * Authorization header authentication
     */
    authorization?: outputs.apimanagement.v20190101.BackendAuthorizationHeaderCredentialsResponse;
    /**
     * List of Client Certificate Thumbprint.
     */
    certificate?: string[];
    /**
     * Header Parameter description.
     */
    header?: {[key: string]: string[]};
    /**
     * Query Parameter description.
     */
    query?: {[key: string]: string[]};
}

/**
 * Properties specific to the Backend Type.
 */
export interface BackendPropertiesResponse {
    /**
     * Backend Service Fabric Cluster Properties
     */
    serviceFabricCluster?: outputs.apimanagement.v20190101.BackendServiceFabricClusterPropertiesResponse;
}

/**
 * Details of the Backend WebProxy Server to use in the Request to Backend.
 */
export interface BackendProxyContractResponse {
    /**
     * Password to connect to the WebProxy Server
     */
    password?: string;
    /**
     * WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
     */
    url: string;
    /**
     * Username to connect to the WebProxy server
     */
    username?: string;
}

/**
 * Properties of the Service Fabric Type Backend.
 */
export interface BackendServiceFabricClusterPropertiesResponse {
    /**
     * The client certificate thumbprint for the management endpoint.
     */
    clientCertificatethumbprint: string;
    /**
     * The cluster management endpoint.
     */
    managementEndpoints: string[];
    /**
     * Maximum number of retries while attempting resolve the partition.
     */
    maxPartitionResolutionRetries?: number;
    /**
     * Thumbprints of certificates cluster management service uses for tls communication
     */
    serverCertificateThumbprints?: string[];
    /**
     * Server X509 Certificate Names Collection
     */
    serverX509Names?: outputs.apimanagement.v20190101.X509CertificateNameResponse[];
}

/**
 * Properties controlling TLS Certificate Validation.
 */
export interface BackendTlsPropertiesResponse {
    /**
     * Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
     */
    validateCertificateChain?: boolean;
    /**
     * Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.
     */
    validateCertificateName?: boolean;
}
/**
 * backendTlsPropertiesResponseProvideDefaults sets the appropriate defaults for BackendTlsPropertiesResponse
 */
export function backendTlsPropertiesResponseProvideDefaults(val: BackendTlsPropertiesResponse): BackendTlsPropertiesResponse {
    return {
        ...val,
        validateCertificateChain: (val.validateCertificateChain) ?? true,
        validateCertificateName: (val.validateCertificateName) ?? true,
    };
}

/**
 * Body logging settings.
 */
export interface BodyDiagnosticSettingsResponse {
    /**
     * Number of request body bytes to log.
     */
    bytes?: number;
}

/**
 * Certificate configuration which consist of non-trusted intermediates and root certificates.
 */
export interface CertificateConfigurationResponse {
    /**
     * Certificate information.
     */
    certificate?: outputs.apimanagement.v20190101.CertificateInformationResponse;
    /**
     * Certificate Password.
     */
    certificatePassword?: string;
    /**
     * Base64 Encoded certificate.
     */
    encodedCertificate?: string;
    /**
     * The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations.
     */
    storeName: string;
}

/**
 * SSL certificate information.
 */
export interface CertificateInformationResponse {
    /**
     * Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     */
    expiry: string;
    /**
     * Subject of the certificate.
     */
    subject: string;
    /**
     * Thumbprint of the certificate.
     */
    thumbprint: string;
}

/**
 * Email Template Parameter contract.
 */
export interface EmailTemplateParametersContractPropertiesResponse {
    /**
     * Template parameter description.
     */
    description?: string;
    /**
     * Template parameter name.
     */
    name?: string;
    /**
     * Template parameter title.
     */
    title?: string;
}

/**
 * Group contract Properties.
 */
export interface GroupContractPropertiesResponse {
    /**
     * true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.
     */
    builtIn: boolean;
    /**
     * Group description. Can contain HTML formatting tags.
     */
    description?: string;
    /**
     * Group name.
     */
    displayName: string;
    /**
     * For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null.
     */
    externalId?: string;
    /**
     * Group type.
     */
    type?: string;
}

/**
 * Custom hostname configuration.
 */
export interface HostnameConfigurationResponse {
    /**
     * Certificate information.
     */
    certificate?: outputs.apimanagement.v20190101.CertificateInformationResponse;
    /**
     * Certificate Password.
     */
    certificatePassword?: string;
    /**
     * Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
     */
    defaultSslBinding?: boolean;
    /**
     * Base64 Encoded certificate.
     */
    encodedCertificate?: string;
    /**
     * Hostname to configure on the Api Management service.
     */
    hostName: string;
    /**
     * Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*
     */
    keyVaultId?: string;
    /**
     * Specify true to always negotiate client certificate on the hostname. Default Value is false.
     */
    negotiateClientCertificate?: boolean;
    /**
     * Hostname type.
     */
    type: string;
}
/**
 * hostnameConfigurationResponseProvideDefaults sets the appropriate defaults for HostnameConfigurationResponse
 */
export function hostnameConfigurationResponseProvideDefaults(val: HostnameConfigurationResponse): HostnameConfigurationResponse {
    return {
        ...val,
        defaultSslBinding: (val.defaultSslBinding) ?? false,
        negotiateClientCertificate: (val.negotiateClientCertificate) ?? false,
    };
}

/**
 * Http message diagnostic settings.
 */
export interface HttpMessageDiagnosticResponse {
    /**
     * Body logging settings.
     */
    body?: outputs.apimanagement.v20190101.BodyDiagnosticSettingsResponse;
    /**
     * Array of HTTP Headers to log.
     */
    headers?: string[];
}

/**
 * API OAuth2 Authentication settings details.
 */
export interface OAuth2AuthenticationSettingsContractResponse {
    /**
     * OAuth authorization server identifier.
     */
    authorizationServerId?: string;
    /**
     * operations scope.
     */
    scope?: string;
}

/**
 * API OAuth2 Authentication settings details.
 */
export interface OpenIdAuthenticationSettingsContractResponse {
    /**
     * How to send token to the server.
     */
    bearerTokenSendingMethods?: string[];
    /**
     * OAuth authorization server identifier.
     */
    openidProviderId?: string;
}

/**
 * Operation parameters details.
 */
export interface ParameterContractResponse {
    /**
     * Default parameter value.
     */
    defaultValue?: string;
    /**
     * Parameter description.
     */
    description?: string;
    /**
     * Parameter name.
     */
    name: string;
    /**
     * Specifies whether parameter is required or not.
     */
    required?: boolean;
    /**
     * Parameter type.
     */
    type: string;
    /**
     * Parameter values.
     */
    values?: string[];
}

/**
 * Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
 */
export interface PipelineDiagnosticSettingsResponse {
    /**
     * Diagnostic settings for request.
     */
    request?: outputs.apimanagement.v20190101.HttpMessageDiagnosticResponse;
    /**
     * Diagnostic settings for response.
     */
    response?: outputs.apimanagement.v20190101.HttpMessageDiagnosticResponse;
}

/**
 * Operation request/response representation details.
 */
export interface RepresentationContractResponse {
    /**
     * Specifies a registered or custom content type for this representation, e.g. application/xml.
     */
    contentType: string;
    /**
     * Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'..
     */
    formParameters?: outputs.apimanagement.v20190101.ParameterContractResponse[];
    /**
     * An example of the representation.
     */
    sample?: string;
    /**
     * Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
     */
    schemaId?: string;
    /**
     * Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
     */
    typeName?: string;
}

/**
 * Operation request details.
 */
export interface RequestContractResponse {
    /**
     * Operation request description.
     */
    description?: string;
    /**
     * Collection of operation request headers.
     */
    headers?: outputs.apimanagement.v20190101.ParameterContractResponse[];
    /**
     * Collection of operation request query parameters.
     */
    queryParameters?: outputs.apimanagement.v20190101.ParameterContractResponse[];
    /**
     * Collection of operation request representations.
     */
    representations?: outputs.apimanagement.v20190101.RepresentationContractResponse[];
}

/**
 * Operation response details.
 */
export interface ResponseContractResponse {
    /**
     * Operation response description.
     */
    description?: string;
    /**
     * Collection of operation response headers.
     */
    headers?: outputs.apimanagement.v20190101.ParameterContractResponse[];
    /**
     * Collection of operation response representations.
     */
    representations?: outputs.apimanagement.v20190101.RepresentationContractResponse[];
    /**
     * Operation response HTTP status code.
     */
    statusCode: number;
}

/**
 * Sampling settings for Diagnostic.
 */
export interface SamplingSettingsResponse {
    /**
     * Rate of sampling for fixed-rate sampling.
     */
    percentage?: number;
    /**
     * Sampling type.
     */
    samplingType?: string;
}

/**
 * Subscription key parameter names details.
 */
export interface SubscriptionKeyParameterNamesContractResponse {
    /**
     * Subscription key header name.
     */
    header?: string;
    /**
     * Subscription key query string parameter name.
     */
    query?: string;
}

/**
 * OAuth acquire token request body parameter (www-url-form-encoded).
 */
export interface TokenBodyParameterContractResponse {
    /**
     * body parameter name.
     */
    name: string;
    /**
     * body parameter value.
     */
    value: string;
}

/**
 * User identity details.
 */
export interface UserIdentityContractResponse {
    /**
     * Identifier value within provider.
     */
    id?: string;
    /**
     * Identity provider name.
     */
    provider?: string;
}

/**
 * Configuration of a virtual network to which API Management service is deployed.
 */
export interface VirtualNetworkConfigurationResponse {
    /**
     * The full resource ID of a subnet in a virtual network to deploy the API Management service in.
     */
    subnetResourceId?: string;
    /**
     * The name of the subnet.
     */
    subnetname: string;
    /**
     * The virtual network ID. This is typically a GUID. Expect a null GUID by default.
     */
    vnetid: string;
}

/**
 * Properties of server X509Names.
 */
export interface X509CertificateNameResponse {
    /**
     * Thumbprint for the Issuer of the Certificate.
     */
    issuerCertificateThumbprint?: string;
    /**
     * Common Name of the Certificate.
     */
    name?: string;
}

