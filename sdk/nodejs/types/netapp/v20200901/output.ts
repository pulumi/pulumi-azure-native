// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Active Directory
 */
export interface ActiveDirectoryResponse {
    /**
     * Id of the Active Directory
     */
    activeDirectoryId?: string;
    /**
     * Name of the active directory machine. This optional parameter is used only while creating kerberos volume
     */
    adName?: string;
    /**
     * If enabled, AES encryption will be enabled for SMB communication.
     */
    aesEncryption?: boolean;
    /**
     * Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
     */
    backupOperators?: string[];
    /**
     * Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
     */
    dns?: string;
    /**
     * Name of the Active Directory domain
     */
    domain?: string;
    /**
     * kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
     */
    kdcIP?: string;
    /**
     * Specifies whether or not the LDAP traffic needs to be signed.
     */
    ldapSigning?: boolean;
    /**
     * The Organizational Unit (OU) within the Windows Active Directory
     */
    organizationalUnit?: string;
    /**
     * Plain text password of Active Directory domain administrator, value is masked in the response
     */
    password?: string;
    /**
     * Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier
     */
    securityOperators?: string[];
    /**
     * When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
     */
    serverRootCACertificate?: string;
    /**
     * The Active Directory site the service will limit Domain Controller discovery to
     */
    site?: string;
    /**
     * NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
     */
    smbServerName?: string;
    /**
     * Status of the Active Directory
     */
    status: string;
    /**
     * Any details in regards to the Status of the Active Directory
     */
    statusDetails: string;
    /**
     * Username of Active Directory domain administrator
     */
    username?: string;
}
/**
 * activeDirectoryResponseProvideDefaults sets the appropriate defaults for ActiveDirectoryResponse
 */
export function activeDirectoryResponseProvideDefaults(val: ActiveDirectoryResponse): ActiveDirectoryResponse {
    return {
        ...val,
        activeDirectoryId: (val.activeDirectoryId) ?? "guid id",
        organizationalUnit: (val.organizationalUnit) ?? "CN=Computers",
    };
}

/**
 * Daily Schedule properties
 */
export interface DailyScheduleResponse {
    /**
     * Indicates which hour in UTC timezone a snapshot should be taken
     */
    hour?: number;
    /**
     * Indicates which minute snapshot should be taken
     */
    minute?: number;
    /**
     * Daily snapshot count to keep
     */
    snapshotsToKeep?: number;
    /**
     * Resource size in bytes, current storage usage for the volume in bytes
     */
    usedBytes?: number;
}

/**
 * Volume Export Policy Rule
 */
export interface ExportPolicyRuleResponse {
    /**
     * Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
     */
    allowedClients?: string;
    /**
     * Allows CIFS protocol
     */
    cifs?: boolean;
    /**
     * Has root access to volume
     */
    hasRootAccess?: boolean;
    /**
     * Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later
     */
    kerberos5ReadOnly?: boolean;
    /**
     * Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later
     */
    kerberos5ReadWrite?: boolean;
    /**
     * Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later
     */
    kerberos5iReadOnly?: boolean;
    /**
     * Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later
     */
    kerberos5iReadWrite?: boolean;
    /**
     * Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later
     */
    kerberos5pReadOnly?: boolean;
    /**
     * Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later
     */
    kerberos5pReadWrite?: boolean;
    /**
     * Allows NFSv3 protocol. Enable only for NFSv3 type volumes
     */
    nfsv3?: boolean;
    /**
     * Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
     */
    nfsv41?: boolean;
    /**
     * Order index
     */
    ruleIndex?: number;
    /**
     * Read only access
     */
    unixReadOnly?: boolean;
    /**
     * Read and write access
     */
    unixReadWrite?: boolean;
}
/**
 * exportPolicyRuleResponseProvideDefaults sets the appropriate defaults for ExportPolicyRuleResponse
 */
export function exportPolicyRuleResponseProvideDefaults(val: ExportPolicyRuleResponse): ExportPolicyRuleResponse {
    return {
        ...val,
        cifs: (val.cifs) ?? false,
        hasRootAccess: (val.hasRootAccess) ?? true,
        kerberos5ReadOnly: (val.kerberos5ReadOnly) ?? false,
        kerberos5ReadWrite: (val.kerberos5ReadWrite) ?? false,
        kerberos5iReadOnly: (val.kerberos5iReadOnly) ?? false,
        kerberos5iReadWrite: (val.kerberos5iReadWrite) ?? false,
        kerberos5pReadOnly: (val.kerberos5pReadOnly) ?? false,
        kerberos5pReadWrite: (val.kerberos5pReadWrite) ?? false,
    };
}

/**
 * Hourly Schedule properties
 */
export interface HourlyScheduleResponse {
    /**
     * Indicates which minute snapshot should be taken
     */
    minute?: number;
    /**
     * Hourly snapshot count to keep
     */
    snapshotsToKeep?: number;
    /**
     * Resource size in bytes, current storage usage for the volume in bytes
     */
    usedBytes?: number;
}

/**
 * Monthly Schedule properties
 */
export interface MonthlyScheduleResponse {
    /**
     * Indicates which days of the month snapshot should be taken. A comma delimited string.
     */
    daysOfMonth?: string;
    /**
     * Indicates which hour in UTC timezone a snapshot should be taken
     */
    hour?: number;
    /**
     * Indicates which minute snapshot should be taken
     */
    minute?: number;
    /**
     * Monthly snapshot count to keep
     */
    snapshotsToKeep?: number;
    /**
     * Resource size in bytes, current storage usage for the volume in bytes
     */
    usedBytes?: number;
}

/**
 * Mount target properties
 */
export interface MountTargetPropertiesResponse {
    /**
     * UUID v4 used to identify the MountTarget
     */
    fileSystemId: string;
    /**
     * The mount target's IPv4 address
     */
    ipAddress: string;
    /**
     * UUID v4 used to identify the MountTarget
     */
    mountTargetId: string;
    /**
     * The SMB server's Fully Qualified Domain Name, FQDN
     */
    smbServerFqdn?: string;
}

/**
 * Replication properties
 */
export interface ReplicationObjectResponse {
    /**
     * Indicates whether the local volume is the source or destination for the Volume Replication
     */
    endpointType?: string;
    /**
     * The remote region for the other end of the Volume Replication.
     */
    remoteVolumeRegion?: string;
    /**
     * The resource ID of the remote volume.
     */
    remoteVolumeResourceId: string;
    /**
     * Id
     */
    replicationId?: string;
    /**
     * Schedule
     */
    replicationSchedule: string;
}

/**
 * Volume Backup Properties
 */
export interface VolumeBackupPropertiesResponse {
    /**
     * Backup Enabled
     */
    backupEnabled?: boolean;
    /**
     * Backup Policy Resource ID
     */
    backupPolicyId?: string;
    /**
     * Policy Enforced
     */
    policyEnforced?: boolean;
    /**
     * Vault Resource ID
     */
    vaultId?: string;
}

/**
 * Volume details using the backup policy
 */
export interface VolumeBackupsResponse {
    /**
     * Total count of backups for volume
     */
    backupsCount?: number;
    /**
     * Policy enabled
     */
    policyEnabled?: boolean;
    /**
     * Volume name
     */
    volumeName?: string;
}

/**
 * DataProtection type volumes include an object containing details of the replication
 */
export interface VolumePropertiesResponseDataProtection {
    /**
     * Backup Properties
     */
    backup?: outputs.netapp.v20200901.VolumeBackupPropertiesResponse;
    /**
     * Replication properties
     */
    replication?: outputs.netapp.v20200901.ReplicationObjectResponse;
    /**
     * Snapshot properties.
     */
    snapshot?: outputs.netapp.v20200901.VolumeSnapshotPropertiesResponse;
}

/**
 * Set of export policy rules
 */
export interface VolumePropertiesResponseExportPolicy {
    /**
     * Export policy rule
     */
    rules?: outputs.netapp.v20200901.ExportPolicyRuleResponse[];
}

/**
 * Volume Snapshot Properties
 */
export interface VolumeSnapshotPropertiesResponse {
    /**
     * Snapshot Policy ResourceId
     */
    snapshotPolicyId?: string;
}

/**
 * Weekly Schedule properties, make a snapshot every week at a specific day or days
 */
export interface WeeklyScheduleResponse {
    /**
     * Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english
     */
    day?: string;
    /**
     * Indicates which hour in UTC timezone a snapshot should be taken
     */
    hour?: number;
    /**
     * Indicates which minute snapshot should be taken
     */
    minute?: number;
    /**
     * Weekly snapshot count to keep
     */
    snapshotsToKeep?: number;
    /**
     * Resource size in bytes, current storage usage for the volume in bytes
     */
    usedBytes?: number;
}

