// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Diagnostics settings for Geneva.
 */
export interface AzureInternalMonitoringPipelineSinkDescriptionResponse {
    /**
     * Azure Internal monitoring pipeline account.
     */
    accountName?: string;
    /**
     * Azure Internal monitoring pipeline autokey associated with the certificate.
     */
    autoKeyConfigUrl?: string;
    /**
     * A description of the sink.
     */
    description?: string;
    /**
     * Azure Internal monitoring agent fluentd configuration.
     */
    fluentdConfigUrl?: any;
    /**
     * The kind of DiagnosticsSink.
     * Expected value is 'AzureInternalMonitoringPipeline'.
     */
    kind: "AzureInternalMonitoringPipeline";
    /**
     * Azure Internal monitoring agent configuration.
     */
    maConfigUrl?: string;
    /**
     * Name of the sink. This value is referenced by DiagnosticsReferenceDescription
     */
    name?: string;
    /**
     * Azure Internal monitoring pipeline account namespace.
     */
    namespace?: string;
}

/**
 * Describes a container and its runtime properties.
 */
export interface ContainerCodePackagePropertiesResponse {
    /**
     * Command array to execute within the container in exec form.
     */
    commands?: string[];
    /**
     * Reference to sinks in DiagnosticsDescription.
     */
    diagnostics?: outputs.servicefabricmesh.v20180701preview.DiagnosticsRefResponse;
    /**
     * The endpoints exposed by this container.
     */
    endpoints?: outputs.servicefabricmesh.v20180701preview.EndpointPropertiesResponse[];
    /**
     * Override for the default entry point in the container.
     */
    entrypoint?: string;
    /**
     * The environment variables to set in this container
     */
    environmentVariables?: outputs.servicefabricmesh.v20180701preview.EnvironmentVariableResponse[];
    /**
     * The Container image to use.
     */
    image: string;
    /**
     * Image registry credential.
     */
    imageRegistryCredential?: outputs.servicefabricmesh.v20180701preview.ImageRegistryCredentialResponse;
    /**
     * Runtime information of a container instance.
     */
    instanceView: outputs.servicefabricmesh.v20180701preview.ContainerInstanceViewResponse;
    /**
     * The labels to set in this container.
     */
    labels?: outputs.servicefabricmesh.v20180701preview.ContainerLabelResponse[];
    /**
     * The name of the code package.
     */
    name: string;
    /**
     * This type describes the resource requirements for a container or a service.
     */
    resources: outputs.servicefabricmesh.v20180701preview.ResourceRequirementsResponse;
    /**
     * The settings to set in this container. The setting file path can be fetched from environment variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is "/var/secrets".
     */
    settings?: outputs.servicefabricmesh.v20180701preview.SettingResponse[];
    /**
     * The volumes to be attached to the container.
     */
    volumeRefs?: outputs.servicefabricmesh.v20180701preview.ContainerVolumeResponse[];
}

/**
 * A container event.
 */
export interface ContainerEventResponse {
    /**
     * The count of the event.
     */
    count?: number;
    /**
     * Date/time of the first event.
     */
    firstTimestamp?: string;
    /**
     * Date/time of the last event.
     */
    lastTimestamp?: string;
    /**
     * The event message
     */
    message?: string;
    /**
     * The name of the container event.
     */
    name?: string;
    /**
     * The event type.
     */
    type?: string;
}

/**
 * Runtime information of a container instance.
 */
export interface ContainerInstanceViewResponse {
    /**
     * Current container instance state.
     */
    currentState?: outputs.servicefabricmesh.v20180701preview.ContainerStateResponse;
    /**
     * The events of this container instance.
     */
    events?: outputs.servicefabricmesh.v20180701preview.ContainerEventResponse[];
    /**
     * Previous container instance state.
     */
    previousState?: outputs.servicefabricmesh.v20180701preview.ContainerStateResponse;
    /**
     * The number of times the container has been restarted.
     */
    restartCount?: number;
}

/**
 * Describes a container label.
 */
export interface ContainerLabelResponse {
    /**
     * The name of the container label.
     */
    name: string;
    /**
     * The value of the container label.
     */
    value: string;
}

/**
 * The container state.
 */
export interface ContainerStateResponse {
    /**
     * Human-readable status of this state.
     */
    detailStatus?: string;
    /**
     * The container exit code.
     */
    exitCode?: string;
    /**
     * Date/time when the container state finished.
     */
    finishTime?: string;
    /**
     * Date/time when the container state started.
     */
    startTime?: string;
    /**
     * The state of this container
     */
    state?: string;
}

/**
 * Describes how a volume is attached to a container.
 */
export interface ContainerVolumeResponse {
    /**
     * The path within the container at which the volume should be mounted. Only valid path characters are allowed.
     */
    destinationPath: string;
    /**
     * Name of the volume.
     */
    name: string;
    /**
     * The flag indicating whether the volume is read only. Default is 'false'.
     */
    readOnly?: boolean;
}

/**
 * Describes the diagnostics options available
 */
export interface DiagnosticsDescriptionResponse {
    /**
     * The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
     */
    defaultSinkRefs?: string[];
    /**
     * Status of whether or not sinks are enabled.
     */
    enabled?: boolean;
    /**
     * List of supported sinks that can be referenced.
     */
    sinks?: outputs.servicefabricmesh.v20180701preview.AzureInternalMonitoringPipelineSinkDescriptionResponse[];
}

/**
 * Reference to sinks in DiagnosticsDescription.
 */
export interface DiagnosticsRefResponse {
    /**
     * Status of whether or not sinks are enabled.
     */
    enabled?: boolean;
    /**
     * List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
     */
    sinkRefs?: string[];
}

/**
 * Describes a container endpoint.
 */
export interface EndpointPropertiesResponse {
    /**
     * The name of the endpoint.
     */
    name: string;
    /**
     * Port used by the container.
     */
    port?: number;
}

/**
 * Describes an environment variable for the container.
 */
export interface EnvironmentVariableResponse {
    /**
     * The name of the environment variable.
     */
    name?: string;
    /**
     * The value of the environment variable.
     */
    value?: string;
}

/**
 * Image registry credential.
 */
export interface ImageRegistryCredentialResponse {
    /**
     * The password for the private registry.
     */
    password?: string;
    /**
     * Docker image registry server, without protocol such as `http` and `https`.
     */
    server: string;
    /**
     * The username for the private registry.
     */
    username: string;
}

/**
 * Describes public connectivity configuration for the network.
 */
export interface IngressConfigResponse {
    /**
     * Configuration for layer4 public connectivity for this network.
     */
    layer4?: outputs.servicefabricmesh.v20180701preview.Layer4IngressConfigResponse[];
    /**
     * The public IP address for reaching this network.
     */
    publicIPAddress: string;
    /**
     * The QoS tier for ingress.
     */
    qosLevel?: string;
}

/**
 * Describes the layer4 configuration for public connectivity for this network.
 */
export interface Layer4IngressConfigResponse {
    /**
     * The application name which contains the service to be exposed.
     */
    applicationName?: string;
    /**
     * The service endpoint that needs to be exposed.
     */
    endpointName?: string;
    /**
     * Layer4 ingress config name.
     */
    name?: string;
    /**
     * Specifies the public port at which the service endpoint below needs to be exposed.
     */
    publicPort?: number;
    /**
     * The service whose endpoint needs to be exposed at the public port.
     */
    serviceName?: string;
}

/**
 * Describes a network reference in a service.
 */
export interface NetworkRefResponse {
    /**
     * Name of the network.
     */
    name?: string;
}

/**
 * This type describes the resource limits for a given container. It describes the most amount of resources a container is allowed to use before being restarted.
 */
export interface ResourceLimitsResponse {
    /**
     * CPU limits in cores. At present, only full cores are supported.
     */
    cpu?: number;
    /**
     * The memory limit in GB.
     */
    memoryInGB?: number;
}

/**
 * This type describes the requested resources for a given container. It describes the least amount of resources required for the container. A container can consume more than requested resources up to the specified limits before being restarted. Currently, the requested resources are treated as limits.
 */
export interface ResourceRequestsResponse {
    /**
     * Requested number of CPU cores. At present, only full cores are supported.
     */
    cpu: number;
    /**
     * The memory request in GB for this container.
     */
    memoryInGB: number;
}

/**
 * This type describes the resource requirements for a container or a service.
 */
export interface ResourceRequirementsResponse {
    /**
     * Describes the maximum limits on the resources for a given container.
     */
    limits?: outputs.servicefabricmesh.v20180701preview.ResourceLimitsResponse;
    /**
     * Describes the requested resources for a given container.
     */
    requests: outputs.servicefabricmesh.v20180701preview.ResourceRequestsResponse;
}

/**
 * This type describes a service resource.
 */
export interface ServiceResourceDescriptionResponse {
    /**
     * Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
     */
    codePackages: outputs.servicefabricmesh.v20180701preview.ContainerCodePackagePropertiesResponse[];
    /**
     * User readable description of the service.
     */
    description?: string;
    /**
     * Reference to sinks in DiagnosticsDescription.
     */
    diagnostics?: outputs.servicefabricmesh.v20180701preview.DiagnosticsRefResponse;
    /**
     * The health state of a resource such as Application, Service, or Network.
     */
    healthState?: string;
    /**
     * Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     */
    id: string;
    /**
     * The name of the resource
     */
    name?: string;
    /**
     * The names of the private networks that this service needs to be part of.
     */
    networkRefs?: outputs.servicefabricmesh.v20180701preview.NetworkRefResponse[];
    /**
     * The Operating system type required by the code in service.
     */
    osType: string;
    /**
     * The number of replicas of the service to create. Defaults to 1 if not specified.
     */
    replicaCount?: number;
    /**
     * Represents the status of the service.
     */
    status: string;
    /**
     * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     */
    type: string;
}

/**
 * Describes a setting for the container.
 */
export interface SettingResponse {
    /**
     * The name of the setting.
     */
    name?: string;
    /**
     * The value of the setting.
     */
    value?: string;
}

/**
 * This type describes a volume provided by an Azure Files file share.
 */
export interface VolumeProviderParametersAzureFileResponse {
    /**
     * Access key of the Azure storage account for the File Share.
     */
    accountKey?: string;
    /**
     * Name of the Azure storage account for the File Share.
     */
    accountName: string;
    /**
     * Name of the Azure Files file share that provides storage for the volume.
     */
    shareName: string;
}

