// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Diagnostics settings for Geneva.
 */
export interface AzureInternalMonitoringPipelineSinkDescriptionArgs {
    /**
     * Azure Internal monitoring pipeline account.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Azure Internal monitoring pipeline autokey associated with the certificate.
     */
    autoKeyConfigUrl?: pulumi.Input<string>;
    /**
     * A description of the sink.
     */
    description?: pulumi.Input<string>;
    /**
     * Azure Internal monitoring agent fluentd configuration.
     */
    fluentdConfigUrl?: any;
    /**
     * The kind of DiagnosticsSink.
     * Expected value is 'AzureInternalMonitoringPipeline'.
     */
    kind: pulumi.Input<"AzureInternalMonitoringPipeline">;
    /**
     * Azure Internal monitoring agent configuration.
     */
    maConfigUrl?: pulumi.Input<string>;
    /**
     * Name of the sink. This value is referenced by DiagnosticsReferenceDescription
     */
    name?: pulumi.Input<string>;
    /**
     * Azure Internal monitoring pipeline account namespace.
     */
    namespace?: pulumi.Input<string>;
}

/**
 * Describes a container and its runtime properties.
 */
export interface ContainerCodePackagePropertiesArgs {
    /**
     * Command array to execute within the container in exec form.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Reference to sinks in DiagnosticsDescription.
     */
    diagnostics?: pulumi.Input<inputs.servicefabricmesh.v20180701preview.DiagnosticsRefArgs>;
    /**
     * The endpoints exposed by this container.
     */
    endpoints?: pulumi.Input<pulumi.Input<inputs.servicefabricmesh.v20180701preview.EndpointPropertiesArgs>[]>;
    /**
     * Override for the default entry point in the container.
     */
    entrypoint?: pulumi.Input<string>;
    /**
     * The environment variables to set in this container
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.servicefabricmesh.v20180701preview.EnvironmentVariableArgs>[]>;
    /**
     * The Container image to use.
     */
    image: pulumi.Input<string>;
    /**
     * Image registry credential.
     */
    imageRegistryCredential?: pulumi.Input<inputs.servicefabricmesh.v20180701preview.ImageRegistryCredentialArgs>;
    /**
     * The labels to set in this container.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.servicefabricmesh.v20180701preview.ContainerLabelArgs>[]>;
    /**
     * The name of the code package.
     */
    name: pulumi.Input<string>;
    /**
     * This type describes the resource requirements for a container or a service.
     */
    resources: pulumi.Input<inputs.servicefabricmesh.v20180701preview.ResourceRequirementsArgs>;
    /**
     * The settings to set in this container. The setting file path can be fetched from environment variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is "/var/secrets".
     */
    settings?: pulumi.Input<pulumi.Input<inputs.servicefabricmesh.v20180701preview.SettingArgs>[]>;
    /**
     * The volumes to be attached to the container.
     */
    volumeRefs?: pulumi.Input<pulumi.Input<inputs.servicefabricmesh.v20180701preview.ContainerVolumeArgs>[]>;
}

/**
 * Describes a container label.
 */
export interface ContainerLabelArgs {
    /**
     * The name of the container label.
     */
    name: pulumi.Input<string>;
    /**
     * The value of the container label.
     */
    value: pulumi.Input<string>;
}

/**
 * Describes how a volume is attached to a container.
 */
export interface ContainerVolumeArgs {
    /**
     * The path within the container at which the volume should be mounted. Only valid path characters are allowed.
     */
    destinationPath: pulumi.Input<string>;
    /**
     * Name of the volume.
     */
    name: pulumi.Input<string>;
    /**
     * The flag indicating whether the volume is read only. Default is 'false'.
     */
    readOnly?: pulumi.Input<boolean>;
}

/**
 * Describes the diagnostics options available
 */
export interface DiagnosticsDescriptionArgs {
    /**
     * The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
     */
    defaultSinkRefs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of whether or not sinks are enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of supported sinks that can be referenced.
     */
    sinks?: pulumi.Input<pulumi.Input<inputs.servicefabricmesh.v20180701preview.AzureInternalMonitoringPipelineSinkDescriptionArgs>[]>;
}

/**
 * Reference to sinks in DiagnosticsDescription.
 */
export interface DiagnosticsRefArgs {
    /**
     * Status of whether or not sinks are enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
     */
    sinkRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Describes a container endpoint.
 */
export interface EndpointPropertiesArgs {
    /**
     * The name of the endpoint.
     */
    name: pulumi.Input<string>;
    /**
     * Port used by the container.
     */
    port?: pulumi.Input<number>;
}

/**
 * Describes an environment variable for the container.
 */
export interface EnvironmentVariableArgs {
    /**
     * The name of the environment variable.
     */
    name?: pulumi.Input<string>;
    /**
     * The value of the environment variable.
     */
    value?: pulumi.Input<string>;
}

/**
 * Image registry credential.
 */
export interface ImageRegistryCredentialArgs {
    /**
     * The password for the private registry.
     */
    password?: pulumi.Input<string>;
    /**
     * Docker image registry server, without protocol such as `http` and `https`.
     */
    server: pulumi.Input<string>;
    /**
     * The username for the private registry.
     */
    username: pulumi.Input<string>;
}

/**
 * Describes public connectivity configuration for the network.
 */
export interface IngressConfigArgs {
    /**
     * Configuration for layer4 public connectivity for this network.
     */
    layer4?: pulumi.Input<pulumi.Input<inputs.servicefabricmesh.v20180701preview.Layer4IngressConfigArgs>[]>;
    /**
     * The QoS tier for ingress.
     */
    qosLevel?: pulumi.Input<string | enums.servicefabricmesh.v20180701preview.IngressQoSLevel>;
}

/**
 * Describes the layer4 configuration for public connectivity for this network.
 */
export interface Layer4IngressConfigArgs {
    /**
     * The application name which contains the service to be exposed.
     */
    applicationName?: pulumi.Input<string>;
    /**
     * The service endpoint that needs to be exposed.
     */
    endpointName?: pulumi.Input<string>;
    /**
     * Layer4 ingress config name.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the public port at which the service endpoint below needs to be exposed.
     */
    publicPort?: pulumi.Input<number>;
    /**
     * The service whose endpoint needs to be exposed at the public port.
     */
    serviceName?: pulumi.Input<string>;
}

/**
 * Describes a network reference in a service.
 */
export interface NetworkRefArgs {
    /**
     * Name of the network.
     */
    name?: pulumi.Input<string>;
}

/**
 * This type describes the resource limits for a given container. It describes the most amount of resources a container is allowed to use before being restarted.
 */
export interface ResourceLimitsArgs {
    /**
     * CPU limits in cores. At present, only full cores are supported.
     */
    cpu?: pulumi.Input<number>;
    /**
     * The memory limit in GB.
     */
    memoryInGB?: pulumi.Input<number>;
}

/**
 * This type describes the requested resources for a given container. It describes the least amount of resources required for the container. A container can consume more than requested resources up to the specified limits before being restarted. Currently, the requested resources are treated as limits.
 */
export interface ResourceRequestsArgs {
    /**
     * Requested number of CPU cores. At present, only full cores are supported.
     */
    cpu: pulumi.Input<number>;
    /**
     * The memory request in GB for this container.
     */
    memoryInGB: pulumi.Input<number>;
}

/**
 * This type describes the resource requirements for a container or a service.
 */
export interface ResourceRequirementsArgs {
    /**
     * Describes the maximum limits on the resources for a given container.
     */
    limits?: pulumi.Input<inputs.servicefabricmesh.v20180701preview.ResourceLimitsArgs>;
    /**
     * Describes the requested resources for a given container.
     */
    requests: pulumi.Input<inputs.servicefabricmesh.v20180701preview.ResourceRequestsArgs>;
}

/**
 * This type describes a service resource.
 */
export interface ServiceResourceDescriptionArgs {
    /**
     * Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
     */
    codePackages: pulumi.Input<pulumi.Input<inputs.servicefabricmesh.v20180701preview.ContainerCodePackagePropertiesArgs>[]>;
    /**
     * User readable description of the service.
     */
    description?: pulumi.Input<string>;
    /**
     * Reference to sinks in DiagnosticsDescription.
     */
    diagnostics?: pulumi.Input<inputs.servicefabricmesh.v20180701preview.DiagnosticsRefArgs>;
    /**
     * The health state of a resource such as Application, Service, or Network.
     */
    healthState?: pulumi.Input<string | enums.servicefabricmesh.v20180701preview.HealthState>;
    /**
     * The name of the resource
     */
    name?: pulumi.Input<string>;
    /**
     * The names of the private networks that this service needs to be part of.
     */
    networkRefs?: pulumi.Input<pulumi.Input<inputs.servicefabricmesh.v20180701preview.NetworkRefArgs>[]>;
    /**
     * The Operating system type required by the code in service.
     */
    osType: pulumi.Input<string | enums.servicefabricmesh.v20180701preview.OperatingSystemTypes>;
    /**
     * The number of replicas of the service to create. Defaults to 1 if not specified.
     */
    replicaCount?: pulumi.Input<number>;
}

/**
 * Describes a setting for the container.
 */
export interface SettingArgs {
    /**
     * The name of the setting.
     */
    name?: pulumi.Input<string>;
    /**
     * The value of the setting.
     */
    value?: pulumi.Input<string>;
}

/**
 * This type describes a volume provided by an Azure Files file share.
 */
export interface VolumeProviderParametersAzureFileArgs {
    /**
     * Access key of the Azure storage account for the File Share.
     */
    accountKey?: pulumi.Input<string>;
    /**
     * Name of the Azure storage account for the File Share.
     */
    accountName: pulumi.Input<string>;
    /**
     * Name of the Azure Files file share that provides storage for the volume.
     */
    shareName: pulumi.Input<string>;
}

