// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20220501preview from "./v20220501preview/input";
/**
 * AAD Profile specifies attributes for Azure Active Directory integration.
 */
export interface AADProfileArgs {
    /**
     * The list of AAD group object IDs that will have admin role of the cluster.
     */
    adminGroupObjectIDs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The client AAD application ID.
     */
    clientAppID?: pulumi.Input<string>;
    /**
     * Whether to enable Azure RBAC for Kubernetes authorization.
     */
    enableAzureRbac?: pulumi.Input<boolean>;
    /**
     * Whether to enable managed AAD.
     */
    managed?: pulumi.Input<boolean>;
    /**
     * The server AAD application ID.
     */
    serverAppID?: pulumi.Input<string>;
    /**
     * The server AAD application secret.
     */
    serverAppSecret?: pulumi.Input<string>;
    /**
     * The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
     */
    tenantID?: pulumi.Input<string>;
}

/**
 * Addon configurations
 */
export interface AddonProfilesArgs {
    /**
     * Config - Key-value pairs for configuring an add-on.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Enabled - Whether the add-on is enabled or not.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface AgentPoolExtendedLocationArgs {
    /**
     * The extended location name.
     */
    name?: pulumi.Input<string>;
    /**
     * The extended location type.
     */
    type?: pulumi.Input<string>;
}

export interface AgentPoolProvisioningStatusErrorArgs {
    code?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
}

/**
 * Contains Provisioning errors
 */
export interface AgentPoolProvisioningStatusProvisioningStatusArgs {
    error?: pulumi.Input<inputs.hybridcontainerservice.AgentPoolProvisioningStatusErrorArgs>;
    operationId?: pulumi.Input<string>;
    /**
     * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
     */
    phase?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * HybridAKSNodePoolStatus defines the observed state of HybridAKSNodePool
 */
export interface AgentPoolProvisioningStatusStatusArgs {
    /**
     * ErrorMessage - Error messages during creation of cluster
     */
    errorMessage?: pulumi.Input<string>;
    /**
     * Contains Provisioning errors
     */
    provisioningStatus?: pulumi.Input<inputs.hybridcontainerservice.AgentPoolProvisioningStatusProvisioningStatusArgs>;
    /**
     * Total number of ready machines targeted by this deployment.
     */
    readyReplicas?: pulumi.Input<number>;
    /**
     * Total number of non-terminated machines targeted by this deployment
     */
    replicas?: pulumi.Input<number>;
}

/**
 * Defines the Arc Agent properties for the Provisioned clusters.
 */
export interface ArcAgentProfileArgs {
    /**
     * Indicates whether the Arc agents on the provisioned clusters be upgraded automatically to the latest version. Defaults to Enabled.
     */
    agentAutoUpgrade?: pulumi.Input<string | enums.hybridcontainerservice.AutoUpgradeOptions>;
    /**
     * Version of the Arc agents to be installed on the provisioned Provisioned cluster resource
     */
    agentVersion?: pulumi.Input<string>;
}
/**
 * arcAgentProfileArgsProvideDefaults sets the appropriate defaults for ArcAgentProfileArgs
 */
export function arcAgentProfileArgsProvideDefaults(val: ArcAgentProfileArgs): ArcAgentProfileArgs {
    return {
        ...val,
        agentAutoUpgrade: (val.agentAutoUpgrade) ?? "Enabled",
    };
}

/**
 * CloudProviderProfile - The underlying cloud infra provider properties.
 */
export interface CloudProviderProfileArgs {
    /**
     * InfraNetworkProfile - List of infra network profiles for the provisioned cluster
     */
    infraNetworkProfile?: pulumi.Input<inputs.hybridcontainerservice.CloudProviderProfileInfraNetworkProfileArgs>;
    /**
     * InfraStorageProfile - List of infra storage profiles for the provisioned cluster
     */
    infraStorageProfile?: pulumi.Input<inputs.hybridcontainerservice.CloudProviderProfileInfraStorageProfileArgs>;
}

/**
 * InfraNetworkProfile - List of infra network profiles for the provisioned cluster
 */
export interface CloudProviderProfileInfraNetworkProfileArgs {
    /**
     * Array of references to azure resource corresponding to the new HybridAKSNetwork object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/virtualNetworks/{virtualNetworkName}
     */
    vnetSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * InfraStorageProfile - List of infra storage profiles for the provisioned cluster
 */
export interface CloudProviderProfileInfraStorageProfileArgs {
    /**
     * Reference to azure resource corresponding to the new HybridAKSStorage object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/storageSpaces/{storageSpaceName}
     */
    storageSpaceIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * API server endpoint for the control plane
 */
export interface ControlPlaneEndpointProfileControlPlaneEndpointArgs {
    /**
     * Host IP address for API server
     */
    hostIP?: pulumi.Input<string>;
    /**
     * Port for the API server
     */
    port?: pulumi.Input<string>;
}

/**
 * ControlPlaneProfile - The control plane properties for the provisioned cluster.
 */
export interface ControlPlaneProfileArgs {
    /**
     * AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The underlying cloud infra provider properties.
     */
    cloudProviderProfile?: pulumi.Input<inputs.hybridcontainerservice.CloudProviderProfileArgs>;
    /**
     * API server endpoint for the control plane
     */
    controlPlaneEndpoint?: pulumi.Input<inputs.hybridcontainerservice.ControlPlaneEndpointProfileControlPlaneEndpointArgs>;
    /**
     * Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
     */
    count?: pulumi.Input<number>;
    /**
     * Profile for Linux VMs in the container service cluster.
     */
    linuxProfile?: pulumi.Input<inputs.hybridcontainerservice.LinuxProfilePropertiesArgs>;
    /**
     * The maximum number of nodes for auto-scaling
     */
    maxCount?: pulumi.Input<number>;
    /**
     * The maximum number of pods that can run on a node.
     */
    maxPods?: pulumi.Input<number>;
    /**
     * The minimum number of nodes for auto-scaling
     */
    minCount?: pulumi.Input<number>;
    /**
     * Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
     */
    mode?: pulumi.Input<string | enums.hybridcontainerservice.Mode>;
    /**
     * Unique name of the agent pool profile in the context of the subscription and resource group.
     */
    name?: pulumi.Input<string>;
    /**
     * The version of node image
     */
    nodeImageVersion?: pulumi.Input<string>;
    /**
     * NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
     */
    nodeTaints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
     */
    osType?: pulumi.Input<string | enums.hybridcontainerservice.OsType>;
    /**
     * VmSize - The size of the agent pool VMs.
     */
    vmSize?: pulumi.Input<string>;
}
/**
 * controlPlaneProfileArgsProvideDefaults sets the appropriate defaults for ControlPlaneProfileArgs
 */
export function controlPlaneProfileArgsProvideDefaults(val: ControlPlaneProfileArgs): ControlPlaneProfileArgs {
    return {
        ...val,
        count: (val.count) ?? 1,
        mode: (val.mode) ?? "User",
        osType: (val.osType) ?? "Linux",
    };
}

/**
 * Configurations for provisioning the cluster with HTTP proxy servers.
 */
export interface HttpProxyConfigArgs {
    /**
     * The HTTP proxy server endpoint to use.
     */
    httpProxy?: pulumi.Input<string>;
    /**
     * The HTTPS proxy server endpoint to use.
     */
    httpsProxy?: pulumi.Input<string>;
    /**
     * The endpoints that should not go through proxy.
     */
    noProxy?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Password to use for connecting to proxy server
     */
    password?: pulumi.Input<string>;
    /**
     * Alternative CA cert to use for connecting to proxy servers.
     */
    trustedCa?: pulumi.Input<string>;
    /**
     * Username to use for connecting to proxy server
     */
    username?: pulumi.Input<string>;
}

/**
 * LinuxProfile - Profile for Linux VMs in the container service cluster.
 */
export interface LinuxProfilePropertiesArgs {
    /**
     * AdminUsername - The administrator username to use for Linux VMs.
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * SSH - SSH configuration for Linux-based VMs running on Azure.
     */
    ssh?: pulumi.Input<inputs.hybridcontainerservice.LinuxProfilePropertiesSshArgs>;
}

export interface LinuxProfilePropertiesPublicKeysArgs {
    /**
     * KeyData - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
     */
    keyData?: pulumi.Input<string>;
}

/**
 * SSH - SSH configuration for Linux-based VMs running on Azure.
 */
export interface LinuxProfilePropertiesSshArgs {
    /**
     * PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
     */
    publicKeys?: pulumi.Input<pulumi.Input<inputs.hybridcontainerservice.LinuxProfilePropertiesPublicKeysArgs>[]>;
}

/**
 * LoadBalancerProfile - Profile of the cluster load balancer.
 */
export interface LoadBalancerProfileArgs {
    /**
     * AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The underlying cloud infra provider properties.
     */
    cloudProviderProfile?: pulumi.Input<inputs.hybridcontainerservice.CloudProviderProfileArgs>;
    /**
     * Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
     */
    count?: pulumi.Input<number>;
    /**
     * Profile for Linux VMs in the container service cluster.
     */
    linuxProfile?: pulumi.Input<inputs.hybridcontainerservice.LinuxProfilePropertiesArgs>;
    /**
     * The maximum number of nodes for auto-scaling
     */
    maxCount?: pulumi.Input<number>;
    /**
     * The maximum number of pods that can run on a node.
     */
    maxPods?: pulumi.Input<number>;
    /**
     * The minimum number of nodes for auto-scaling
     */
    minCount?: pulumi.Input<number>;
    /**
     * Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
     */
    mode?: pulumi.Input<string | enums.hybridcontainerservice.Mode>;
    /**
     * Unique name of the agent pool profile in the context of the subscription and resource group.
     */
    name?: pulumi.Input<string>;
    /**
     * The version of node image
     */
    nodeImageVersion?: pulumi.Input<string>;
    /**
     * NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
     */
    nodeTaints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
     */
    osType?: pulumi.Input<string | enums.hybridcontainerservice.OsType>;
    /**
     * VmSize - The size of the agent pool VMs.
     */
    vmSize?: pulumi.Input<string>;
}
/**
 * loadBalancerProfileArgsProvideDefaults sets the appropriate defaults for LoadBalancerProfileArgs
 */
export function loadBalancerProfileArgsProvideDefaults(val: LoadBalancerProfileArgs): LoadBalancerProfileArgs {
    return {
        ...val,
        count: (val.count) ?? 1,
        mode: (val.mode) ?? "User",
        osType: (val.osType) ?? "Linux",
    };
}

/**
 * Agent pool profile along with a name parameter
 */
export interface NamedAgentPoolProfileArgs {
    /**
     * AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The underlying cloud infra provider properties.
     */
    cloudProviderProfile?: pulumi.Input<inputs.hybridcontainerservice.CloudProviderProfileArgs>;
    /**
     * Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
     */
    count?: pulumi.Input<number>;
    /**
     * The maximum number of nodes for auto-scaling
     */
    maxCount?: pulumi.Input<number>;
    /**
     * The maximum number of pods that can run on a node.
     */
    maxPods?: pulumi.Input<number>;
    /**
     * The minimum number of nodes for auto-scaling
     */
    minCount?: pulumi.Input<number>;
    /**
     * Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
     */
    mode?: pulumi.Input<string | enums.hybridcontainerservice.Mode>;
    /**
     * Unique name of the agent pool profile in the context of the subscription and resource group.
     */
    name?: pulumi.Input<string>;
    /**
     * The version of node image
     */
    nodeImageVersion?: pulumi.Input<string>;
    /**
     * NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
     */
    nodeTaints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
     */
    osType?: pulumi.Input<string | enums.hybridcontainerservice.OsType>;
    /**
     * VmSize - The size of the agent pool VMs.
     */
    vmSize?: pulumi.Input<string>;
}
/**
 * namedAgentPoolProfileArgsProvideDefaults sets the appropriate defaults for NamedAgentPoolProfileArgs
 */
export function namedAgentPoolProfileArgsProvideDefaults(val: NamedAgentPoolProfileArgs): NamedAgentPoolProfileArgs {
    return {
        ...val,
        count: (val.count) ?? 1,
        mode: (val.mode) ?? "User",
        osType: (val.osType) ?? "Linux",
    };
}

/**
 * NetworkProfile - Profile of network configuration.
 */
export interface NetworkProfileArgs {
    /**
     * DNSServiceIP - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
     */
    dnsServiceIP?: pulumi.Input<string>;
    /**
     * LoadBalancerProfile - Profile of the cluster load balancer.
     */
    loadBalancerProfile?: pulumi.Input<inputs.hybridcontainerservice.LoadBalancerProfileArgs>;
    /**
     * LoadBalancerSku - The load balancer sku for the provisioned cluster. Possible values: 'unstacked-haproxy', 'stacked-kube-vip', 'stacked-metallb', 'unmanaged'. The default is 'unmanaged'.
     */
    loadBalancerSku?: pulumi.Input<string | enums.hybridcontainerservice.LoadBalancerSku>;
    /**
     * NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
     */
    networkPolicy?: pulumi.Input<string | enums.hybridcontainerservice.NetworkPolicy>;
    /**
     * PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
     */
    podCidr?: pulumi.Input<string>;
    /**
     * The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
     */
    podCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ServiceCidr - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
     */
    serviceCidr?: pulumi.Input<string>;
    /**
     * The CIDR notation IP ranges from which to assign service cluster IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
     */
    serviceCidrs?: pulumi.Input<pulumi.Input<string>[]>;
}
/**
 * networkProfileArgsProvideDefaults sets the appropriate defaults for NetworkProfileArgs
 */
export function networkProfileArgsProvideDefaults(val: NetworkProfileArgs): NetworkProfileArgs {
    return {
        ...val,
        loadBalancerProfile: (val.loadBalancerProfile ? pulumi.output(val.loadBalancerProfile).apply(inputs.hybridcontainerservice.loadBalancerProfileArgsProvideDefaults) : undefined),
        loadBalancerSku: (val.loadBalancerSku) ?? "unmanaged",
        networkPolicy: (val.networkPolicy) ?? "calico",
    };
}

/**
 * Identity for the Provisioned cluster.
 */
export interface ProvisionedClusterIdentityArgs {
    /**
     * The type of identity used for the provisioned cluster. The type SystemAssigned, includes a system created identity. The type None means no identity is assigned to the provisioned cluster.
     */
    type: pulumi.Input<enums.hybridcontainerservice.ResourceIdentityType>;
}

/**
 * All properties of the provisioned cluster
 */
export interface ProvisionedClustersAllPropertiesArgs {
    /**
     * AAD profile for the provisioned cluster.
     */
    aadProfile?: pulumi.Input<inputs.hybridcontainerservice.AADProfileArgs>;
    /**
     * AddonProfiles - Profile of managed cluster add-on.
     */
    addonProfiles?: pulumi.Input<{[key: string]: pulumi.Input<inputs.hybridcontainerservice.AddonProfilesArgs>}>;
    /**
     * The agent pools of the cluster.
     */
    agentPoolProfiles?: pulumi.Input<pulumi.Input<inputs.hybridcontainerservice.NamedAgentPoolProfileArgs>[]>;
    /**
     * The underlying cloud infra provider properties.
     */
    cloudProviderProfile?: pulumi.Input<inputs.hybridcontainerservice.CloudProviderProfileArgs>;
    /**
     * ControlPlane - ControlPlane Configuration
     */
    controlPlane?: pulumi.Input<inputs.hybridcontainerservice.ControlPlaneProfileArgs>;
    /**
     * EnableRBAC - Whether to enable Kubernetes Role-Based Access Control.
     */
    enableRbac?: pulumi.Input<boolean>;
    /**
     * Additional features specs like Arc Agent Onboarding.
     */
    features?: pulumi.Input<inputs.hybridcontainerservice.ProvisionedClustersCommonPropertiesFeaturesArgs>;
    /**
     * HttpProxyConfig - Configurations for provisioning the cluster with HTTP proxy servers.
     */
    httpProxyConfig?: pulumi.Input<inputs.hybridcontainerservice.HttpProxyConfigArgs>;
    /**
     * KubernetesVersion - Version of Kubernetes specified when creating the managed cluster.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
     */
    linuxProfile?: pulumi.Input<inputs.hybridcontainerservice.LinuxProfilePropertiesArgs>;
    /**
     * NetworkProfile - Profile of network configuration.
     */
    networkProfile?: pulumi.Input<inputs.hybridcontainerservice.NetworkProfileArgs>;
    /**
     * NodeResourceGroup - Name of the resource group containing agent pool nodes.
     */
    nodeResourceGroup?: pulumi.Input<string>;
    /**
     * WindowsProfile - Profile for Windows VMs in the Provisioned Cluster.
     */
    windowsProfile?: pulumi.Input<inputs.hybridcontainerservice.WindowsProfileArgs>;
}
/**
 * provisionedClustersAllPropertiesArgsProvideDefaults sets the appropriate defaults for ProvisionedClustersAllPropertiesArgs
 */
export function provisionedClustersAllPropertiesArgsProvideDefaults(val: ProvisionedClustersAllPropertiesArgs): ProvisionedClustersAllPropertiesArgs {
    return {
        ...val,
        controlPlane: (val.controlPlane ? pulumi.output(val.controlPlane).apply(inputs.hybridcontainerservice.controlPlaneProfileArgsProvideDefaults) : undefined),
        features: (val.features ? pulumi.output(val.features).apply(inputs.hybridcontainerservice.provisionedClustersCommonPropertiesFeaturesArgsProvideDefaults) : undefined),
        networkProfile: (val.networkProfile ? pulumi.output(val.networkProfile).apply(inputs.hybridcontainerservice.networkProfileArgsProvideDefaults) : undefined),
    };
}

/**
 * Additional features specs like Arc Agent Onboarding.
 */
export interface ProvisionedClustersCommonPropertiesFeaturesArgs {
    /**
     * Arc agentry configuration for the provisioned cluster.
     */
    arcAgentProfile?: pulumi.Input<inputs.hybridcontainerservice.ArcAgentProfileArgs>;
}
/**
 * provisionedClustersCommonPropertiesFeaturesArgsProvideDefaults sets the appropriate defaults for ProvisionedClustersCommonPropertiesFeaturesArgs
 */
export function provisionedClustersCommonPropertiesFeaturesArgsProvideDefaults(val: ProvisionedClustersCommonPropertiesFeaturesArgs): ProvisionedClustersCommonPropertiesFeaturesArgs {
    return {
        ...val,
        arcAgentProfile: (val.arcAgentProfile ? pulumi.output(val.arcAgentProfile).apply(inputs.hybridcontainerservice.arcAgentProfileArgsProvideDefaults) : undefined),
    };
}

export interface ProvisionedClustersExtendedLocationArgs {
    /**
     * The extended location name.
     */
    name?: pulumi.Input<string>;
    /**
     * The extended location type.
     */
    type?: pulumi.Input<string>;
}

export interface StorageSpacesExtendedLocationArgs {
    /**
     * The extended location name.
     */
    name?: pulumi.Input<string>;
    /**
     * The extended location type.
     */
    type?: pulumi.Input<string>;
}

/**
 * HybridAKSStorageSpec defines the desired state of HybridAKSStorage
 */
export interface StorageSpacesPropertiesArgs {
    hciStorageProfile?: pulumi.Input<inputs.hybridcontainerservice.StorageSpacesPropertiesHciStorageProfileArgs>;
    /**
     * HybridAKSStorageStatus defines the observed state of HybridAKSStorage
     */
    status?: pulumi.Input<inputs.hybridcontainerservice.StorageSpacesPropertiesStatusArgs>;
    vmwareStorageProfile?: pulumi.Input<inputs.hybridcontainerservice.StorageSpacesPropertiesVmwareStorageProfileArgs>;
}

export interface StorageSpacesPropertiesErrorArgs {
    code?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
}

export interface StorageSpacesPropertiesHciStorageProfileArgs {
    /**
     * Resource group in MOC(Microsoft On-premises Cloud)
     */
    mocGroup?: pulumi.Input<string>;
    /**
     * Location in MOC(Microsoft On-premises Cloud)
     */
    mocLocation?: pulumi.Input<string>;
    /**
     * Name of the storage container in MOC(Microsoft On-premises Cloud)
     */
    mocStorageContainer?: pulumi.Input<string>;
}

/**
 * Contains Provisioning errors
 */
export interface StorageSpacesPropertiesProvisioningStatusArgs {
    error?: pulumi.Input<inputs.hybridcontainerservice.StorageSpacesPropertiesErrorArgs>;
    operationId?: pulumi.Input<string>;
    /**
     * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
     */
    phase?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * HybridAKSStorageStatus defines the observed state of HybridAKSStorage
 */
export interface StorageSpacesPropertiesStatusArgs {
    /**
     * Contains Provisioning errors
     */
    provisioningStatus?: pulumi.Input<inputs.hybridcontainerservice.StorageSpacesPropertiesProvisioningStatusArgs>;
}

export interface StorageSpacesPropertiesVmwareStorageProfileArgs {
    /**
     * Name of the datacenter in VSphere
     */
    datacenter?: pulumi.Input<string>;
    /**
     * Name of the datastore in VSphere
     */
    datastore?: pulumi.Input<string>;
    /**
     * Name of the folder in VSphere
     */
    folder?: pulumi.Input<string>;
    /**
     * Name of the resource pool in VSphere
     */
    resourcePool?: pulumi.Input<string>;
}

export interface VirtualNetworksExtendedLocationArgs {
    /**
     * The extended location name.
     */
    name?: pulumi.Input<string>;
    /**
     * The extended location type.
     */
    type?: pulumi.Input<string>;
}

/**
 * HybridAKSNetworkSpec defines the desired state of HybridAKSNetwork
 */
export interface VirtualNetworksPropertiesArgs {
    infraVnetProfile?: pulumi.Input<inputs.hybridcontainerservice.VirtualNetworksPropertiesInfraVnetProfileArgs>;
    /**
     * Virtual IP Pool for Kubernetes
     */
    vipPool?: pulumi.Input<pulumi.Input<inputs.hybridcontainerservice.VirtualNetworksPropertiesVipPoolArgs>[]>;
    /**
     * IP Pool for Virtual Machines
     */
    vmipPool?: pulumi.Input<pulumi.Input<inputs.hybridcontainerservice.VirtualNetworksPropertiesVmipPoolArgs>[]>;
}

/**
 * Infra network profile for HCI platform
 */
export interface VirtualNetworksPropertiesHciArgs {
    /**
     * Resource group in MOC(Microsoft On-premises Cloud)
     */
    mocGroup?: pulumi.Input<string>;
    /**
     * Location in MOC(Microsoft On-premises Cloud)
     */
    mocLocation?: pulumi.Input<string>;
    /**
     * Virtual Network name in MOC(Microsoft On-premises Cloud)
     */
    mocVnetName?: pulumi.Input<string>;
}

export interface VirtualNetworksPropertiesInfraVnetProfileArgs {
    /**
     * Infra network profile for HCI platform
     */
    hci?: pulumi.Input<inputs.hybridcontainerservice.VirtualNetworksPropertiesHciArgs>;
    /**
     * Infra network profile for KubeVirt platform
     */
    kubevirt?: pulumi.Input<inputs.hybridcontainerservice.VirtualNetworksPropertiesKubevirtArgs>;
    /**
     * Infra network profile for VMware platform
     */
    vmware?: pulumi.Input<inputs.hybridcontainerservice.VirtualNetworksPropertiesVmwareArgs>;
}

/**
 * Infra network profile for KubeVirt platform
 */
export interface VirtualNetworksPropertiesKubevirtArgs {
    /**
     * Name of the network in KubeVirt
     */
    vnetName?: pulumi.Input<string>;
}

export interface VirtualNetworksPropertiesVipPoolArgs {
    /**
     * Ending IP address for the IP Pool
     */
    endIP?: pulumi.Input<string>;
    /**
     * Starting IP address for the IP Pool
     */
    startIP?: pulumi.Input<string>;
}

export interface VirtualNetworksPropertiesVmipPoolArgs {
    /**
     * Ending IP address for the IP Pool
     */
    endIP?: pulumi.Input<string>;
    /**
     * Starting IP address for the IP Pool
     */
    startIP?: pulumi.Input<string>;
}

/**
 * Infra network profile for VMware platform
 */
export interface VirtualNetworksPropertiesVmwareArgs {
    /**
     * Name of the network segment in VSphere
     */
    segmentName?: pulumi.Input<string>;
}

/**
 * WindowsProfile - Profile for Windows VMs in the container service cluster.
 */
export interface WindowsProfileArgs {
    /**
     * AdminPassword - Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * AdminUsername - Specifies the name of the administrator account. <br><br> **restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * EnableCSIProxy - Whether to enable CSI proxy.
     */
    enableCsiProxy?: pulumi.Input<boolean>;
    /**
     * LicenseType - The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs. Possible values include: 'None', 'Windows_Server'
     */
    licenseType?: pulumi.Input<string | enums.hybridcontainerservice.LicenseType>;
}

