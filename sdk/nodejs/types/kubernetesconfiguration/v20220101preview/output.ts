// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Parameters to reconcile to the GitRepository source kind type.
 */
export interface BucketDefinitionResponse {
    /**
     * Plaintext access key used to securely access the S3 bucket
     */
    accessKey?: string;
    /**
     * The bucket name to sync from the url endpoint for the flux configuration.
     */
    bucketName?: string;
    /**
     * Specify whether to use insecure communication when puling data from the S3 bucket.
     */
    insecure?: boolean;
    /**
     * Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
     */
    localAuthRef?: string;
    /**
     * The interval at which to re-reconcile the cluster git repository source with the remote.
     */
    syncIntervalInSeconds?: number;
    /**
     * The maximum time to attempt to reconcile the cluster git repository source with the remote.
     */
    timeoutInSeconds?: number;
    /**
     * The URL to sync for the flux configuration S3 bucket.
     */
    url?: string;
}
/**
 * bucketDefinitionResponseProvideDefaults sets the appropriate defaults for BucketDefinitionResponse
 */
export function bucketDefinitionResponseProvideDefaults(val: BucketDefinitionResponse): BucketDefinitionResponse {
    return {
        ...val,
        insecure: (val.insecure) ?? true,
        syncIntervalInSeconds: (val.syncIntervalInSeconds) ?? 600,
        timeoutInSeconds: (val.timeoutInSeconds) ?? 600,
    };
}

/**
 * Compliance Status details
 */
export interface ComplianceStatusResponse {
    /**
     * The compliance state of the configuration.
     */
    complianceState: string;
    /**
     * Datetime the configuration was last applied.
     */
    lastConfigApplied?: string;
    /**
     * Message from when the configuration was applied.
     */
    message?: string;
    /**
     * Level of the message.
     */
    messageLevel?: string;
}

/**
 * Specify which kustomizations must succeed reconciliation on the cluster prior to reconciling this kustomization
 */
export interface DependsOnDefinitionResponse {
    /**
     * Name of the kustomization to claim dependency on
     */
    kustomizationName?: string;
}

/**
 * The resource management error additional info.
 */
export interface ErrorAdditionalInfoResponse {
    /**
     * The additional info.
     */
    info: any;
    /**
     * The additional info type.
     */
    type: string;
}

/**
 * The error detail.
 */
export interface ErrorDetailResponse {
    /**
     * The error additional info.
     */
    additionalInfo: outputs.kubernetesconfiguration.v20220101preview.ErrorAdditionalInfoResponse[];
    /**
     * The error code.
     */
    code: string;
    /**
     * The error details.
     */
    details: outputs.kubernetesconfiguration.v20220101preview.ErrorDetailResponse[];
    /**
     * The error message.
     */
    message: string;
    /**
     * The error target.
     */
    target: string;
}

/**
 * Identity of the Extension resource in an AKS cluster
 */
export interface ExtensionResponseAksAssignedIdentity {
    /**
     * The principal ID of resource identity.
     */
    principalId: string;
    /**
     * The tenant ID of resource.
     */
    tenantId: string;
    /**
     * The identity type.
     */
    type?: string;
}

/**
 * Status from the extension.
 */
export interface ExtensionStatusResponse {
    /**
     * Status code provided by the Extension
     */
    code?: string;
    /**
     * Short description of status of the extension.
     */
    displayStatus?: string;
    /**
     * Level of the status.
     */
    level?: string;
    /**
     * Detailed message of the status from the Extension.
     */
    message?: string;
    /**
     * DateLiteral (per ISO8601) noting the time of installation status.
     */
    time?: string;
}
/**
 * extensionStatusResponseProvideDefaults sets the appropriate defaults for ExtensionStatusResponse
 */
export function extensionStatusResponseProvideDefaults(val: ExtensionStatusResponse): ExtensionStatusResponse {
    return {
        ...val,
        level: (val.level) ?? "Information",
    };
}

/**
 * Parameters to reconcile to the GitRepository source kind type.
 */
export interface GitRepositoryDefinitionResponse {
    /**
     * Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
     */
    httpsCACert?: string;
    /**
     * Plaintext HTTPS username used to access private git repositories over HTTPS
     */
    httpsUser?: string;
    /**
     * Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
     */
    localAuthRef?: string;
    /**
     * The source reference for the GitRepository object.
     */
    repositoryRef?: outputs.kubernetesconfiguration.v20220101preview.RepositoryRefDefinitionResponse;
    /**
     * Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
     */
    sshKnownHosts?: string;
    /**
     * The interval at which to re-reconcile the cluster git repository source with the remote.
     */
    syncIntervalInSeconds?: number;
    /**
     * The maximum time to attempt to reconcile the cluster git repository source with the remote.
     */
    timeoutInSeconds?: number;
    /**
     * The URL to sync for the flux configuration git repository.
     */
    url?: string;
}
/**
 * gitRepositoryDefinitionResponseProvideDefaults sets the appropriate defaults for GitRepositoryDefinitionResponse
 */
export function gitRepositoryDefinitionResponseProvideDefaults(val: GitRepositoryDefinitionResponse): GitRepositoryDefinitionResponse {
    return {
        ...val,
        syncIntervalInSeconds: (val.syncIntervalInSeconds) ?? 600,
        timeoutInSeconds: (val.timeoutInSeconds) ?? 600,
    };
}

/**
 * Properties for Helm operator.
 */
export interface HelmOperatorPropertiesResponse {
    /**
     * Values override for the operator Helm chart.
     */
    chartValues?: string;
    /**
     * Version of the operator Helm chart.
     */
    chartVersion?: string;
}

export interface HelmReleasePropertiesDefinitionResponse {
    /**
     * Total number of times that the HelmRelease failed to install or upgrade
     */
    failureCount?: number;
    /**
     * The reference to the HelmChart object used as the source to this HelmRelease
     */
    helmChartRef?: outputs.kubernetesconfiguration.v20220101preview.ObjectReferenceDefinitionResponse;
    /**
     * Number of times that the HelmRelease failed to install
     */
    installFailureCount?: number;
    /**
     * The revision number of the last released object change
     */
    lastRevisionApplied?: number;
    /**
     * Number of times that the HelmRelease failed to upgrade
     */
    upgradeFailureCount?: number;
}

/**
 * Identity for the resource.
 */
export interface IdentityResponse {
    /**
     * The principal ID of resource identity.
     */
    principalId: string;
    /**
     * The tenant ID of resource.
     */
    tenantId: string;
    /**
     * The identity type.
     */
    type?: string;
}

/**
 * The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster.
 */
export interface KustomizationDefinitionResponse {
    /**
     * Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation.
     */
    dependsOn?: outputs.kubernetesconfiguration.v20220101preview.DependsOnDefinitionResponse[];
    /**
     * Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change.
     */
    force?: boolean;
    /**
     * The path in the source reference to reconcile on the cluster.
     */
    path?: string;
    /**
     * Enable/disable garbage collections of Kubernetes objects created by this Kustomization.
     */
    prune?: boolean;
    /**
     * The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation.
     */
    retryIntervalInSeconds?: number;
    /**
     * The interval at which to re-reconcile the Kustomization on the cluster.
     */
    syncIntervalInSeconds?: number;
    /**
     * The maximum time to attempt to reconcile the Kustomization on the cluster.
     */
    timeoutInSeconds?: number;
}
/**
 * kustomizationDefinitionResponseProvideDefaults sets the appropriate defaults for KustomizationDefinitionResponse
 */
export function kustomizationDefinitionResponseProvideDefaults(val: KustomizationDefinitionResponse): KustomizationDefinitionResponse {
    return {
        ...val,
        force: (val.force) ?? false,
        path: (val.path) ?? "",
        prune: (val.prune) ?? false,
        syncIntervalInSeconds: (val.syncIntervalInSeconds) ?? 600,
        timeoutInSeconds: (val.timeoutInSeconds) ?? 600,
    };
}

/**
 * Object reference to a Kubernetes object on a cluster
 */
export interface ObjectReferenceDefinitionResponse {
    /**
     * Name of the object
     */
    name?: string;
    /**
     * Namespace of the object
     */
    namespace?: string;
}

/**
 * Status condition of Kubernetes object
 */
export interface ObjectStatusConditionDefinitionResponse {
    /**
     * Last time this status condition has changed
     */
    lastTransitionTime?: string;
    /**
     * A more verbose description of the object status condition
     */
    message?: string;
    /**
     * Reason for the specified status condition type status
     */
    reason?: string;
    /**
     * Status of the Kubernetes object condition type
     */
    status?: string;
    /**
     * Object status condition type for this object
     */
    type?: string;
}

/**
 * Statuses of objects deployed by the user-specified kustomizations from the git repository.
 */
export interface ObjectStatusDefinitionResponse {
    /**
     * Object reference to the Kustomization that applied this object
     */
    appliedBy?: outputs.kubernetesconfiguration.v20220101preview.ObjectReferenceDefinitionResponse;
    /**
     * Compliance state of the applied object showing whether the applied object has come into a ready state on the cluster.
     */
    complianceState?: string;
    /**
     * Additional properties that are provided from objects of the HelmRelease kind
     */
    helmReleaseProperties?: outputs.kubernetesconfiguration.v20220101preview.HelmReleasePropertiesDefinitionResponse;
    /**
     * Kind of the applied object
     */
    kind?: string;
    /**
     * Name of the applied object
     */
    name?: string;
    /**
     * Namespace of the applied object
     */
    namespace?: string;
    /**
     * List of Kubernetes object status conditions present on the cluster
     */
    statusConditions?: outputs.kubernetesconfiguration.v20220101preview.ObjectStatusConditionDefinitionResponse[];
}

/**
 * The source reference for the GitRepository object.
 */
export interface RepositoryRefDefinitionResponse {
    /**
     * The git repository branch name to checkout.
     */
    branch?: string;
    /**
     * The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
     */
    commit?: string;
    /**
     * The semver range used to match against git repository tags. This takes precedence over tag.
     */
    semver?: string;
    /**
     * The git repository tag name to checkout. This takes precedence over branch.
     */
    tag?: string;
}

/**
 * Specifies that the scope of the extension is Cluster
 */
export interface ScopeClusterResponse {
    /**
     * Namespace where the extension Release must be placed, for a Cluster scoped extension.  If this namespace does not exist, it will be created
     */
    releaseNamespace?: string;
}

/**
 * Specifies that the scope of the extension is Namespace
 */
export interface ScopeNamespaceResponse {
    /**
     * Namespace where the extension will be created for an Namespace scoped extension.  If this namespace does not exist, it will be created
     */
    targetNamespace?: string;
}

/**
 * Scope of the extension. It can be either Cluster or Namespace; but not both.
 */
export interface ScopeResponse {
    /**
     * Specifies that the scope of the extension is Cluster
     */
    cluster?: outputs.kubernetesconfiguration.v20220101preview.ScopeClusterResponse;
    /**
     * Specifies that the scope of the extension is Namespace
     */
    namespace?: outputs.kubernetesconfiguration.v20220101preview.ScopeNamespaceResponse;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

