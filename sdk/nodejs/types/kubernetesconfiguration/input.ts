// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20191101preview from "./v20191101preview/input";
export * as v20200701preview from "./v20200701preview/input";
export * as v20201001preview from "./v20201001preview/input";
export * as v20210301 from "./v20210301/input";
export * as v20210501preview from "./v20210501preview/input";
export * as v20210901 from "./v20210901/input";
export * as v20211101preview from "./v20211101preview/input";
export * as v20220101preview from "./v20220101preview/input";
export * as v20220301 from "./v20220301/input";
export * as v20220402preview from "./v20220402preview/input";
export * as v20220701 from "./v20220701/input";
export * as v20221101 from "./v20221101/input";
/**
 * Identity for the managed cluster.
 */
export interface ConfigurationIdentityArgs {
    /**
     * The type of identity used for the configuration. Type 'SystemAssigned' will use an implicitly created identity. Type 'None' will not use Managed Identity for the configuration.
     */
    type?: pulumi.Input<enums.kubernetesconfiguration.ResourceIdentityType>;
}

/**
 * Specify which kustomizations must succeed reconciliation on the cluster prior to reconciling this kustomization
 */
export interface DependsOnDefinitionArgs {
    /**
     * Name of the kustomization to claim dependency on
     */
    kustomizationName?: pulumi.Input<string>;
}

/**
 * Status from this instance of the extension.
 */
export interface ExtensionStatusArgs {
    /**
     * Status code provided by the Extension
     */
    code?: pulumi.Input<string>;
    /**
     * Short description of status of this instance of the extension.
     */
    displayStatus?: pulumi.Input<string>;
    /**
     * Level of the status.
     */
    level?: pulumi.Input<string | enums.kubernetesconfiguration.LevelType>;
    /**
     * Detailed message of the status from the Extension instance.
     */
    message?: pulumi.Input<string>;
    /**
     * DateLiteral (per ISO8601) noting the time of installation status.
     */
    time?: pulumi.Input<string>;
}
/**
 * extensionStatusArgsProvideDefaults sets the appropriate defaults for ExtensionStatusArgs
 */
export function extensionStatusArgsProvideDefaults(val: ExtensionStatusArgs): ExtensionStatusArgs {
    return {
        ...val,
        level: (val.level) ?? "Information",
    };
}

/**
 * Parameters to reconcile to the GitRepository source kind type.
 */
export interface GitRepositoryDefinitionArgs {
    /**
     * Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
     */
    httpsCAFile?: pulumi.Input<string>;
    /**
     * Base64-encoded HTTPS username used to access private git repositories over HTTPS
     */
    httpsUser?: pulumi.Input<string>;
    /**
     * Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
     */
    localAuthRef?: pulumi.Input<string>;
    /**
     * The source reference for the GitRepository object.
     */
    repositoryRef?: pulumi.Input<inputs.kubernetesconfiguration.RepositoryRefDefinitionArgs>;
    /**
     * Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
     */
    sshKnownHosts?: pulumi.Input<string>;
    /**
     * The interval at which to re-reconcile the cluster git repository source with the remote.
     */
    syncIntervalInSeconds?: pulumi.Input<number>;
    /**
     * The maximum time to attempt to reconcile the cluster git repository source with the remote.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * The URL to sync for the flux configuration git repository.
     */
    url?: pulumi.Input<string>;
}
/**
 * gitRepositoryDefinitionArgsProvideDefaults sets the appropriate defaults for GitRepositoryDefinitionArgs
 */
export function gitRepositoryDefinitionArgsProvideDefaults(val: GitRepositoryDefinitionArgs): GitRepositoryDefinitionArgs {
    return {
        ...val,
        syncIntervalInSeconds: (val.syncIntervalInSeconds) ?? 600,
        timeoutInSeconds: (val.timeoutInSeconds) ?? 600,
    };
}

/**
 * Properties for Helm operator.
 */
export interface HelmOperatorPropertiesArgs {
    /**
     * Values override for the operator Helm chart.
     */
    chartValues?: pulumi.Input<string>;
    /**
     * Version of the operator Helm chart.
     */
    chartVersion?: pulumi.Input<string>;
}

/**
 * Properties that define a Azure Arc PrivateLinkScope resource.
 */
export interface KubernetesConfigurationPrivateLinkScopePropertiesArgs {
    /**
     * Managed Cluster ARM ID for the private link scope  (Required)
     */
    clusterResourceId: pulumi.Input<string>;
    /**
     * Indicates whether machines associated with the private link scope can also use public Azure Arc service endpoints.
     */
    publicNetworkAccess?: pulumi.Input<string | enums.kubernetesconfiguration.PublicNetworkAccessType>;
}

/**
 * The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster.
 */
export interface KustomizationDefinitionArgs {
    /**
     * Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation.
     */
    dependsOn?: pulumi.Input<pulumi.Input<inputs.kubernetesconfiguration.DependsOnDefinitionArgs>[]>;
    /**
     * Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change.
     */
    force?: pulumi.Input<boolean>;
    /**
     * The path in the source reference to reconcile on the cluster.
     */
    path?: pulumi.Input<string>;
    /**
     * Enable/disable garbage collections of Kubernetes objects created by this Kustomization.
     */
    prune?: pulumi.Input<boolean>;
    /**
     * The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation.
     */
    retryIntervalInSeconds?: pulumi.Input<number>;
    /**
     * The interval at which to re-reconcile the Kustomization on the cluster.
     */
    syncIntervalInSeconds?: pulumi.Input<number>;
    /**
     * The maximum time to attempt to reconcile the Kustomization on the cluster.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * Specify whether to validate the Kubernetes objects referenced in the Kustomization before applying them to the cluster.
     */
    validation?: pulumi.Input<string | enums.kubernetesconfiguration.KustomizationValidationType>;
}
/**
 * kustomizationDefinitionArgsProvideDefaults sets the appropriate defaults for KustomizationDefinitionArgs
 */
export function kustomizationDefinitionArgsProvideDefaults(val: KustomizationDefinitionArgs): KustomizationDefinitionArgs {
    return {
        ...val,
        force: (val.force) ?? false,
        path: (val.path) ?? "",
        prune: (val.prune) ?? false,
        syncIntervalInSeconds: (val.syncIntervalInSeconds) ?? 600,
        timeoutInSeconds: (val.timeoutInSeconds) ?? 600,
    };
}

/**
 * A collection of information about the state of the connection between service consumer and provider.
 */
export interface PrivateLinkServiceConnectionStateArgs {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: pulumi.Input<string>;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: pulumi.Input<string | enums.kubernetesconfiguration.PrivateEndpointServiceConnectionStatus>;
}

/**
 * The source reference for the GitRepository object.
 */
export interface RepositoryRefDefinitionArgs {
    /**
     * The git repository branch name to checkout.
     */
    branch?: pulumi.Input<string>;
    /**
     * The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
     */
    commit?: pulumi.Input<string>;
    /**
     * The semver range used to match against git repository tags. This takes precedence over tag.
     */
    semver?: pulumi.Input<string>;
    /**
     * The git repository tag name to checkout. This takes precedence over branch.
     */
    tag?: pulumi.Input<string>;
}

/**
 * Scope of the extensionInstance. It can be either Cluster or Namespace; but not both.
 */
export interface ScopeArgs {
    /**
     * Specifies that the scope of the extensionInstance is Cluster
     */
    cluster?: pulumi.Input<inputs.kubernetesconfiguration.ScopeClusterArgs>;
    /**
     * Specifies that the scope of the extensionInstance is Namespace
     */
    namespace?: pulumi.Input<inputs.kubernetesconfiguration.ScopeNamespaceArgs>;
}

/**
 * Specifies that the scope of the extensionInstance is Cluster
 */
export interface ScopeClusterArgs {
    /**
     * Namespace where the extension Release must be placed, for a Cluster scoped extensionInstance.  If this namespace does not exist, it will be created
     */
    releaseNamespace?: pulumi.Input<string>;
}

/**
 * Specifies that the scope of the extensionInstance is Namespace
 */
export interface ScopeNamespaceArgs {
    /**
     * Namespace where the extensionInstance will be created for an Namespace scoped extensionInstance.  If this namespace does not exist, it will be created
     */
    targetNamespace?: pulumi.Input<string>;
}

