// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Authorization Profile
 */
export interface AuthorizationProfileResponse {
    /**
     * The approved time
     */
    approvedTime: string;
    /**
     * The approver
     */
    approver: string;
    /**
     * The requested time
     */
    requestedTime: string;
    /**
     * The requester
     */
    requester: string;
    /**
     * The requester object id
     */
    requesterObjectId: string;
}

export interface SubscriptionFeatureRegistrationResponseProperties {
    /**
     * The feature approval type.
     */
    approvalType: string;
    /**
     * Authorization Profile
     */
    authorizationProfile?: outputs.features.v20210701.AuthorizationProfileResponse;
    /**
     * The feature description.
     */
    description?: string;
    /**
     * The featureDisplayName.
     */
    displayName: string;
    /**
     * The feature documentation link.
     */
    documentationLink: string;
    /**
     * The featureName.
     */
    featureName: string;
    /**
     * Key-value pairs for meta data.
     */
    metadata?: {[key: string]: string};
    /**
     * The providerNamespace.
     */
    providerNamespace: string;
    /**
     * The feature registration date.
     */
    registrationDate: string;
    /**
     * The feature release date.
     */
    releaseDate: string;
    /**
     * Indicates whether feature should be displayed in Portal.
     */
    shouldFeatureDisplayInPortal?: boolean;
    /**
     * The state.
     */
    state?: string;
    /**
     * The subscriptionId.
     */
    subscriptionId: string;
    /**
     * The tenantId.
     */
    tenantId: string;
}
/**
 * subscriptionFeatureRegistrationResponsePropertiesProvideDefaults sets the appropriate defaults for SubscriptionFeatureRegistrationResponseProperties
 */
export function subscriptionFeatureRegistrationResponsePropertiesProvideDefaults(val: SubscriptionFeatureRegistrationResponseProperties): SubscriptionFeatureRegistrationResponseProperties {
    return {
        ...val,
        shouldFeatureDisplayInPortal: (val.shouldFeatureDisplayInPortal) ?? false,
    };
}

