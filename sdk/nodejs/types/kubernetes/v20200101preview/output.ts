// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * AAD profile of the connected cluster
 */
export interface ConnectedClusterAADProfileResponse {
    /**
     * The client app id configured on target K8 cluster 
     */
    clientAppId: string;
    /**
     * The server app id to access AD server
     */
    serverAppId: string;
    /**
     * The aad tenant id which is configured on target K8s cluster
     */
    tenantId: string;
}

/**
 * Identity for the connected cluster.
 */
export interface ConnectedClusterIdentityResponse {
    /**
     * The principal id of connected cluster identity. This property will only be provided for a system assigned identity.
     */
    principalId: string;
    /**
     * The tenant id associated with the connected cluster. This property will only be provided for a system assigned identity.
     */
    tenantId: string;
    /**
     * The type of identity used for the connected cluster. The type 'SystemAssigned, includes a system created identity. The type 'None' means no identity is assigned to the connected cluster.
     */
    type: string;
}

/**
 * The credential result response.
 */
export interface CredentialResultResponse {
    /**
     * The name of the credential.
     */
    name: string;
    /**
     * Base64-encoded Kubernetes configuration file.
     */
    value: string;
}

/**
 * Contains the REP (rendezvous endpoint) and “Sender” access token.
 */
export interface HybridConnectionConfigResponse {
    /**
     * Timestamp when this token will be expired.
     */
    expirationTime: number;
    /**
     * Name of the connection
     */
    hybridConnectionName: string;
    /**
     * Name of the relay.
     */
    relay: string;
    /**
     * Sender access token
     */
    token: string;
}

