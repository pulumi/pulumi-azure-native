// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Input properties for patching a Linux machine.
 */
export interface InputLinuxParametersResponse {
    /**
     * Classification category of patches to be patched
     */
    classificationsToInclude?: string[];
    /**
     * Package names to be excluded for patching.
     */
    packageNameMasksToExclude?: string[];
    /**
     * Package names to be included for patching.
     */
    packageNameMasksToInclude?: string[];
}

/**
 * Input configuration for a patch run
 */
export interface InputPatchConfigurationResponse {
    /**
     * Input parameters specific to patching Linux machine. For Windows machines, do not pass this property.
     */
    linuxParameters?: outputs.maintenance.v20210401preview.InputLinuxParametersResponse;
    /**
     * List of post tasks. e.g. [{'source' :'runbook', 'taskScope': 'Resource', 'parameters': { 'arg1': 'value1'}}]
     */
    postTasks?: outputs.maintenance.v20210401preview.TaskPropertiesResponse[];
    /**
     * List of pre tasks. e.g. [{'source' :'runbook', 'taskScope': 'Global', 'parameters': { 'arg1': 'value1'}}]
     */
    preTasks?: outputs.maintenance.v20210401preview.TaskPropertiesResponse[];
    /**
     * Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.
     */
    rebootSetting?: string;
    /**
     * Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property.
     */
    windowsParameters?: outputs.maintenance.v20210401preview.InputWindowsParametersResponse;
}

/**
 * Input properties for patching a Windows machine.
 */
export interface InputWindowsParametersResponse {
    /**
     * Classification category of patches to be patched
     */
    classificationsToInclude?: string[];
    /**
     * Exclude patches which need reboot
     */
    excludeKbsRequiringReboot?: boolean;
    /**
     * Windows KBID to be excluded for patching.
     */
    kbNumbersToExclude?: string[];
    /**
     * Windows KBID to be included for patching.
     */
    kbNumbersToInclude?: string[];
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Task properties of the software update configuration.
 */
export interface TaskPropertiesResponse {
    /**
     * Gets or sets the parameters of the task.
     */
    parameters?: {[key: string]: string};
    /**
     * Gets or sets the name of the runbook.
     */
    source?: string;
    /**
     * Global Task execute once when schedule trigger. Resource task execute for each VM.
     */
    taskScope?: string;
}
/**
 * taskPropertiesResponseProvideDefaults sets the appropriate defaults for TaskPropertiesResponse
 */
export function taskPropertiesResponseProvideDefaults(val: TaskPropertiesResponse): TaskPropertiesResponse {
    return {
        ...val,
        taskScope: (val.taskScope) ?? "Global",
    };
}

