// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Input properties for patching a Linux machine. This property only applies to Guest (InGuestPatch) scope.
 */
export interface InputLinuxParametersArgs {
    /**
     * Classification category of patches to be patched
     */
    classificationsToInclude?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Package names to be excluded for patching.
     */
    packageNameMasksToExclude?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Package names to be included for patching.
     */
    packageNameMasksToInclude?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Input configuration for a patch run
 */
export interface InputPatchConfigurationArgs {
    /**
     * Input parameters specific to patching Linux machine. For Windows machines, do not pass this property. This property only applies to Guest (InGuestPatch) scope.
     */
    linuxParameters?: pulumi.Input<inputs.maintenance.v20220701preview.InputLinuxParametersArgs>;
    /**
     * [Not supported] List of post tasks. e.g. [{'source' :'runbook', 'taskScope': 'Resource', 'parameters': { 'arg1': 'value1'}}]
     */
    postTasks?: pulumi.Input<pulumi.Input<inputs.maintenance.v20220701preview.TaskPropertiesArgs>[]>;
    /**
     * [Not supported] List of pre tasks. e.g. [{'source' :'runbook', 'taskScope': 'Global', 'parameters': { 'arg1': 'value1'}}]
     */
    preTasks?: pulumi.Input<pulumi.Input<inputs.maintenance.v20220701preview.TaskPropertiesArgs>[]>;
    /**
     * Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. This property only applies to Guest (InGuestPatch) scope.
     */
    rebootSetting?: pulumi.Input<string | enums.maintenance.v20220701preview.RebootOptions>;
    /**
     * Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property. This property only applies to Guest (InGuestPatch) scope.
     */
    windowsParameters?: pulumi.Input<inputs.maintenance.v20220701preview.InputWindowsParametersArgs>;
}
/**
 * inputPatchConfigurationArgsProvideDefaults sets the appropriate defaults for InputPatchConfigurationArgs
 */
export function inputPatchConfigurationArgsProvideDefaults(val: InputPatchConfigurationArgs): InputPatchConfigurationArgs {
    return {
        ...val,
        rebootSetting: (val.rebootSetting) ?? "IfRequired",
    };
}

/**
 * Input properties for patching a Windows machine. This property only applies to Guest (InGuestPatch) scope.
 */
export interface InputWindowsParametersArgs {
    /**
     * Classification category of patches to be patched
     */
    classificationsToInclude?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Exclude patches which need reboot
     */
    excludeKbsRequiringReboot?: pulumi.Input<boolean>;
    /**
     * Windows KBID to be excluded for patching.
     */
    kbNumbersToExclude?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Windows KBID to be included for patching.
     */
    kbNumbersToInclude?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * [Not supported] Task properties of the software update configuration.
 */
export interface TaskPropertiesArgs {
    /**
     * [Not supported] Gets or sets the parameters of the task.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * [Not supported] Gets or sets the name of the runbook.
     */
    source?: pulumi.Input<string>;
    /**
     * [Not supported] Global Task execute once when schedule trigger. Resource task execute for each VM.
     */
    taskScope?: pulumi.Input<string | enums.maintenance.v20220701preview.TaskScope>;
}
/**
 * taskPropertiesArgsProvideDefaults sets the appropriate defaults for TaskPropertiesArgs
 */
export function taskPropertiesArgsProvideDefaults(val: TaskPropertiesArgs): TaskPropertiesArgs {
    return {
        ...val,
        taskScope: (val.taskScope) ?? "Global",
    };
}

