// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20140901 from "./v20140901/output";
export * as v20150801 from "./v20150801/output";
export * as v20170401 from "./v20170401/output";
export * as v20180101preview from "./v20180101preview/output";
export * as v20210101preview from "./v20210101preview/output";
export * as v20210601preview from "./v20210601preview/output";
export * as v20211101 from "./v20211101/output";
export * as v20220101preview from "./v20220101preview/output";
/**
 * Properties to configure capture description for eventhub
 */
export interface CaptureDescriptionResponse {
    /**
     * Properties of Destination where capture will be stored. (Storage Account, Blob Names)
     */
    destination?: outputs.eventhub.DestinationResponse;
    /**
     * A value that indicates whether capture description is enabled. 
     */
    enabled?: boolean;
    /**
     * Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated in New API Version
     */
    encoding?: string;
    /**
     * The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds
     */
    intervalInSeconds?: number;
    /**
     * The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes
     */
    sizeLimitInBytes?: number;
    /**
     * A value that indicates whether to Skip Empty Archives
     */
    skipEmptyArchives?: boolean;
}

/**
 * SKU parameters particular to a cluster instance.
 */
export interface ClusterSkuResponse {
    /**
     * The quantity of Event Hubs Cluster Capacity Units contained in this cluster.
     */
    capacity?: number;
    /**
     * Name of this SKU.
     */
    name: string;
}

/**
 * ConnectionState information.
 */
export interface ConnectionStateResponse {
    /**
     * Description of the connection state.
     */
    description?: string;
    /**
     * Status of the connection.
     */
    status?: string;
}

/**
 * Capture storage details for capture description
 */
export interface DestinationResponse {
    /**
     * Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
     */
    archiveNameFormat?: string;
    /**
     * Blob container Name
     */
    blobContainer?: string;
    /**
     * Name for capture destination
     */
    name?: string;
    /**
     * Resource id of the storage account to be used to create the blobs
     */
    storageAccountResourceId?: string;
}

/**
 * Description of NetWorkRuleSet - IpRules resource.
 */
export interface NWRuleSetIpRulesResponse {
    /**
     * The IP Filter Action
     */
    action?: string;
    /**
     * IP Mask
     */
    ipMask?: string;
}
/**
 * nwruleSetIpRulesResponseProvideDefaults sets the appropriate defaults for NWRuleSetIpRulesResponse
 */
export function nwruleSetIpRulesResponseProvideDefaults(val: NWRuleSetIpRulesResponse): NWRuleSetIpRulesResponse {
    return {
        ...val,
        action: (val.action) ?? "Allow",
    };
}

/**
 * Description of VirtualNetworkRules - NetworkRules resource.
 */
export interface NWRuleSetVirtualNetworkRulesResponse {
    /**
     * Value that indicates whether to ignore missing VNet Service Endpoint
     */
    ignoreMissingVnetServiceEndpoint?: boolean;
    /**
     * Subnet properties
     */
    subnet?: outputs.eventhub.SubnetResponse;
}

/**
 * PrivateEndpoint information.
 */
export interface PrivateEndpointResponse {
    /**
     * The ARM identifier for Private Endpoint.
     */
    id?: string;
}

/**
 * SKU parameters supplied to the create namespace operation
 */
export interface SkuResponse {
    /**
     * The Event Hubs throughput units, value should be 0 to 20 throughput units.
     */
    capacity?: number;
    /**
     * Name of this SKU.
     */
    name: string;
    /**
     * The billing tier of this particular SKU.
     */
    tier?: string;
}

/**
 * Properties supplied for Subnet
 */
export interface SubnetResponse {
    /**
     * Resource ID of Virtual Network Subnet
     */
    id: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Properties of the throttling policy
 */
export interface ThrottlingPolicyResponse {
    /**
     * Metric Id on which the throttle limit should be set, MetricId can be discovered by hovering over Metric in the Metrics section of Event Hub Namespace inside Azure Portal
     */
    metricId: string;
    /**
     * The Name of this policy
     */
    name: string;
    /**
     * The Threshold limit above which the application group will be throttled.Rate limit is always per second.
     */
    rateLimitThreshold: number;
    /**
     * Application Group Policy types
     * Expected value is 'ThrottlingPolicy'.
     */
    type: "ThrottlingPolicy";
}

