// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Properties to configure capture description for eventhub
 */
export interface CaptureDescriptionResponse {
    /**
     * Properties of Destination where capture will be stored. (Storage Account, Blob Names)
     */
    destination?: outputs.eventhub.v20170401.DestinationResponse;
    /**
     * A value that indicates whether capture description is enabled. 
     */
    enabled?: boolean;
    /**
     * Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated in New API Version
     */
    encoding?: string;
    /**
     * The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds
     */
    intervalInSeconds?: number;
    /**
     * The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes
     */
    sizeLimitInBytes?: number;
    /**
     * A value that indicates whether to Skip Empty Archives
     */
    skipEmptyArchives?: boolean;
}

/**
 * Capture storage details for capture description
 */
export interface DestinationResponse {
    /**
     * Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
     */
    archiveNameFormat?: string;
    /**
     * Blob container Name
     */
    blobContainer?: string;
    /**
     * Name for capture destination
     */
    name?: string;
    /**
     * Resource id of the storage account to be used to create the blobs
     */
    storageAccountResourceId?: string;
}

/**
 * Description of NetWorkRuleSet - IpRules resource.
 */
export interface NWRuleSetIpRulesResponse {
    /**
     * The IP Filter Action
     */
    action?: string;
    /**
     * IP Mask
     */
    ipMask?: string;
}
/**
 * nwruleSetIpRulesResponseProvideDefaults sets the appropriate defaults for NWRuleSetIpRulesResponse
 */
export function nwruleSetIpRulesResponseProvideDefaults(val: NWRuleSetIpRulesResponse): NWRuleSetIpRulesResponse {
    return {
        ...val,
        action: (val.action) ?? "Allow",
    };
}

/**
 * Description of VirtualNetworkRules - NetworkRules resource.
 */
export interface NWRuleSetVirtualNetworkRulesResponse {
    /**
     * Value that indicates whether to ignore missing VNet Service Endpoint
     */
    ignoreMissingVnetServiceEndpoint?: boolean;
    /**
     * Subnet properties
     */
    subnet?: outputs.eventhub.v20170401.SubnetResponse;
}

/**
 * SKU parameters supplied to the create namespace operation
 */
export interface SkuResponse {
    /**
     * The Event Hubs throughput units, value should be 0 to 20 throughput units.
     */
    capacity?: number;
    /**
     * Name of this SKU.
     */
    name: string;
    /**
     * The billing tier of this particular SKU.
     */
    tier?: string;
}

/**
 * Properties supplied for Subnet
 */
export interface SubnetResponse {
    /**
     * Resource ID of Virtual Network Subnet
     */
    id: string;
}

