// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20140901 from "./v20140901/input";
export * as v20150801 from "./v20150801/input";
export * as v20170401 from "./v20170401/input";
export * as v20180101preview from "./v20180101preview/input";
export * as v20210101preview from "./v20210101preview/input";
export * as v20210601preview from "./v20210601preview/input";
export * as v20211101 from "./v20211101/input";
export * as v20220101preview from "./v20220101preview/input";
/**
 * Properties to configure capture description for eventhub
 */
export interface CaptureDescriptionArgs {
    /**
     * Properties of Destination where capture will be stored. (Storage Account, Blob Names)
     */
    destination?: pulumi.Input<inputs.eventhub.DestinationArgs>;
    /**
     * A value that indicates whether capture description is enabled. 
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated in New API Version
     */
    encoding?: pulumi.Input<enums.eventhub.EncodingCaptureDescription>;
    /**
     * The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds
     */
    intervalInSeconds?: pulumi.Input<number>;
    /**
     * The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes
     */
    sizeLimitInBytes?: pulumi.Input<number>;
    /**
     * A value that indicates whether to Skip Empty Archives
     */
    skipEmptyArchives?: pulumi.Input<boolean>;
}

/**
 * SKU parameters particular to a cluster instance.
 */
export interface ClusterSkuArgs {
    /**
     * The quantity of Event Hubs Cluster Capacity Units contained in this cluster.
     */
    capacity?: pulumi.Input<number>;
    /**
     * Name of this SKU.
     */
    name: pulumi.Input<string | enums.eventhub.ClusterSkuName>;
}

/**
 * ConnectionState information.
 */
export interface ConnectionStateArgs {
    /**
     * Description of the connection state.
     */
    description?: pulumi.Input<string>;
    /**
     * Status of the connection.
     */
    status?: pulumi.Input<string | enums.eventhub.PrivateLinkConnectionStatus>;
}

/**
 * Capture storage details for capture description
 */
export interface DestinationArgs {
    /**
     * Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
     */
    archiveNameFormat?: pulumi.Input<string>;
    /**
     * Blob container Name
     */
    blobContainer?: pulumi.Input<string>;
    /**
     * Name for capture destination
     */
    name?: pulumi.Input<string>;
    /**
     * Resource id of the storage account to be used to create the blobs
     */
    storageAccountResourceId?: pulumi.Input<string>;
}

/**
 * Description of NetWorkRuleSet - IpRules resource.
 */
export interface NWRuleSetIpRulesArgs {
    /**
     * The IP Filter Action
     */
    action?: pulumi.Input<string | enums.eventhub.NetworkRuleIPAction>;
    /**
     * IP Mask
     */
    ipMask?: pulumi.Input<string>;
}
/**
 * nwruleSetIpRulesArgsProvideDefaults sets the appropriate defaults for NWRuleSetIpRulesArgs
 */
export function nwruleSetIpRulesArgsProvideDefaults(val: NWRuleSetIpRulesArgs): NWRuleSetIpRulesArgs {
    return {
        ...val,
        action: (val.action) ?? "Allow",
    };
}

/**
 * Description of VirtualNetworkRules - NetworkRules resource.
 */
export interface NWRuleSetVirtualNetworkRulesArgs {
    /**
     * Value that indicates whether to ignore missing VNet Service Endpoint
     */
    ignoreMissingVnetServiceEndpoint?: pulumi.Input<boolean>;
    /**
     * Subnet properties
     */
    subnet?: pulumi.Input<inputs.eventhub.SubnetArgs>;
}

/**
 * PrivateEndpoint information.
 */
export interface PrivateEndpointArgs {
    /**
     * The ARM identifier for Private Endpoint.
     */
    id?: pulumi.Input<string>;
}

/**
 * SKU parameters supplied to the create namespace operation
 */
export interface SkuArgs {
    /**
     * The Event Hubs throughput units, value should be 0 to 20 throughput units.
     */
    capacity?: pulumi.Input<number>;
    /**
     * Name of this SKU.
     */
    name: pulumi.Input<string | enums.eventhub.SkuName>;
    /**
     * The billing tier of this particular SKU.
     */
    tier?: pulumi.Input<string | enums.eventhub.SkuTier>;
}

/**
 * Properties supplied for Subnet
 */
export interface SubnetArgs {
    /**
     * Resource ID of Virtual Network Subnet
     */
    id: pulumi.Input<string>;
}

/**
 * Properties of the throttling policy
 */
export interface ThrottlingPolicyArgs {
    /**
     * Metric Id on which the throttle limit should be set, MetricId can be discovered by hovering over Metric in the Metrics section of Event Hub Namespace inside Azure Portal
     */
    metricId: pulumi.Input<string | enums.eventhub.MetricId>;
    /**
     * The Name of this policy
     */
    name: pulumi.Input<string>;
    /**
     * The Threshold limit above which the application group will be throttled.Rate limit is always per second.
     */
    rateLimitThreshold: pulumi.Input<number>;
    /**
     * Application Group Policy types
     * Expected value is 'ThrottlingPolicy'.
     */
    type: pulumi.Input<"ThrottlingPolicy">;
}

