// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Defines how the Video Analyzer account is (optionally) encrypted.
 */
export interface AccountEncryptionArgs {
    /**
     * The Key Vault identity.
     */
    identity?: pulumi.Input<inputs.videoanalyzer.v20210501preview.ResourceIdentityArgs>;
    /**
     * The properties of the key used to encrypt the account.
     */
    keyVaultProperties?: pulumi.Input<inputs.videoanalyzer.v20210501preview.KeyVaultPropertiesArgs>;
    /**
     * The type of key used to encrypt the Account Key.
     */
    type: pulumi.Input<string | enums.videoanalyzer.v20210501preview.AccountEncryptionKeyType>;
}

/**
 * Required validation properties for tokens generated with Elliptical Curve algorithm.
 */
export interface EccTokenKeyArgs {
    /**
     * Elliptical curve algorithm to be used: ES256, ES384 or ES512.
     */
    alg: pulumi.Input<string | enums.videoanalyzer.v20210501preview.AccessPolicyEccAlgo>;
    /**
     * JWT token key id. Validation keys are looked up based on the key id present on the JWT token header.
     */
    kid: pulumi.Input<string>;
    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.VideoAnalyzer.EccTokenKey'.
     */
    type: pulumi.Input<"#Microsoft.VideoAnalyzer.EccTokenKey">;
    /**
     * X coordinate.
     */
    x: pulumi.Input<string>;
    /**
     * Y coordinate.
     */
    y: pulumi.Input<string>;
}

/**
 * Properties for access validation based on JSON Web Tokens (JWT).
 */
export interface JwtAuthenticationArgs {
    /**
     * List of expected token audiences. Token audience is valid if it matches at least one of the given values.
     */
    audiences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of additional token claims to be validated. Token must contains all claims and respective values for it to be valid.
     */
    claims?: pulumi.Input<pulumi.Input<inputs.videoanalyzer.v20210501preview.TokenClaimArgs>[]>;
    /**
     * List of expected token issuers. Token issuer is valid if it matches at least one of the given values.
     */
    issuers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of keys which can be used to validate access tokens. Having multiple keys allow for seamless key rotation of the token signing key. Token signature must match exactly one key.
     */
    keys?: pulumi.Input<pulumi.Input<inputs.videoanalyzer.v20210501preview.EccTokenKeyArgs | inputs.videoanalyzer.v20210501preview.RsaTokenKeyArgs>[]>;
    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.VideoAnalyzer.JwtAuthentication'.
     */
    type: pulumi.Input<"#Microsoft.VideoAnalyzer.JwtAuthentication">;
}

/**
 * The details for accessing the encryption keys in Key Vault.
 */
export interface KeyVaultPropertiesArgs {
    /**
     * The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
     */
    keyIdentifier: pulumi.Input<string>;
}

/**
 * The user assigned managed identity to use when accessing a resource.
 */
export interface ResourceIdentityArgs {
    /**
     * The user assigned managed identity's resource identifier to use when accessing a resource.
     */
    userAssignedIdentity: pulumi.Input<string>;
}

/**
 * Required validation properties for tokens generated with RSA algorithm.
 */
export interface RsaTokenKeyArgs {
    /**
     * RSA algorithm to be used: RS256, RS384 or RS512.
     */
    alg: pulumi.Input<string | enums.videoanalyzer.v20210501preview.AccessPolicyRsaAlgo>;
    /**
     * RSA public key exponent.
     */
    e: pulumi.Input<string>;
    /**
     * JWT token key id. Validation keys are looked up based on the key id present on the JWT token header.
     */
    kid: pulumi.Input<string>;
    /**
     * RSA public key modulus.
     */
    n: pulumi.Input<string>;
    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.VideoAnalyzer.RsaTokenKey'.
     */
    type: pulumi.Input<"#Microsoft.VideoAnalyzer.RsaTokenKey">;
}

/**
 * The details about the associated storage account.
 */
export interface StorageAccountArgs {
    /**
     * The ID of the storage account resource. Video Analyzer relies on tables, queues, and blobs. The primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage).
     */
    id?: pulumi.Input<string>;
    /**
     * A managed identity that Video Analyzer will use to access the storage account.
     */
    identity?: pulumi.Input<inputs.videoanalyzer.v20210501preview.ResourceIdentityArgs>;
}

/**
 * Properties for expected token claims.
 */
export interface TokenClaimArgs {
    /**
     * Name of the claim which must be present on the token.
     */
    name: pulumi.Input<string>;
    /**
     * Expected value of the claim to be present on the token.
     */
    value: pulumi.Input<string>;
}

/**
 * The managed identity for the Video Analyzer resource.
 */
export interface VideoAnalyzerIdentityArgs {
    /**
     * The identity type.
     */
    type: pulumi.Input<string>;
    /**
     * The User Assigned Managed Identities.
     */
    userAssignedIdentities?: pulumi.Input<{[key: string]: any}>;
}

