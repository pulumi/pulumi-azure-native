// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Model that represents a branch in the step.
 */
export interface BranchArgs {
    /**
     * List of actions.
     */
    actions: pulumi.Input<pulumi.Input<inputs.chaos.v20221001preview.ContinuousActionArgs | inputs.chaos.v20221001preview.DelayActionArgs | inputs.chaos.v20221001preview.DiscreteActionArgs>[]>;
    /**
     * String of the branch name.
     */
    name: pulumi.Input<string>;
}

/**
 * Model that represents a continuous action.
 */
export interface ContinuousActionArgs {
    /**
     * ISO8601 formatted string that represents a duration.
     */
    duration: pulumi.Input<string>;
    /**
     * String that represents a Capability URN.
     */
    name: pulumi.Input<string>;
    /**
     * List of key value pairs.
     */
    parameters: pulumi.Input<pulumi.Input<inputs.chaos.v20221001preview.KeyValuePairArgs>[]>;
    /**
     * String that represents a selector.
     */
    selectorId: pulumi.Input<string>;
    /**
     * Enum that discriminates between action models.
     * Expected value is 'continuous'.
     */
    type: pulumi.Input<"continuous">;
}

/**
 * Model that represents a delay action.
 */
export interface DelayActionArgs {
    /**
     * ISO8601 formatted string that represents a duration.
     */
    duration: pulumi.Input<string>;
    /**
     * String that represents a Capability URN.
     */
    name: pulumi.Input<string>;
    /**
     * Enum that discriminates between action models.
     * Expected value is 'delay'.
     */
    type: pulumi.Input<"delay">;
}

/**
 * Model that represents a discrete action.
 */
export interface DiscreteActionArgs {
    /**
     * String that represents a Capability URN.
     */
    name: pulumi.Input<string>;
    /**
     * List of key value pairs.
     */
    parameters: pulumi.Input<pulumi.Input<inputs.chaos.v20221001preview.KeyValuePairArgs>[]>;
    /**
     * String that represents a selector.
     */
    selectorId: pulumi.Input<string>;
    /**
     * Enum that discriminates between action models.
     * Expected value is 'discrete'.
     */
    type: pulumi.Input<"discrete">;
}

/**
 * Model that represents the Experiment properties model.
 */
export interface ExperimentPropertiesArgs {
    /**
     * List of selectors.
     */
    selectors: pulumi.Input<pulumi.Input<inputs.chaos.v20221001preview.SelectorArgs>[]>;
    /**
     * A boolean value that indicates if experiment should be started on creation or not.
     */
    startOnCreation?: pulumi.Input<boolean>;
    /**
     * List of steps.
     */
    steps: pulumi.Input<pulumi.Input<inputs.chaos.v20221001preview.StepArgs>[]>;
}

/**
 * A map to describe the settings of an action.
 */
export interface KeyValuePairArgs {
    /**
     * The name of the setting for the action.
     */
    key: pulumi.Input<string>;
    /**
     * The value of the setting for the action.
     */
    value: pulumi.Input<string>;
}

/**
 * The managed identity of a resource.
 */
export interface ResourceIdentityArgs {
    /**
     * String of the resource identity type.
     */
    type: pulumi.Input<enums.chaos.v20221001preview.ResourceIdentityType>;
}

/**
 * Model that represents a selector in the Experiment resource.
 */
export interface SelectorArgs {
    /**
     * Model that represents available filter types that can be applied to a targets list.
     */
    filter?: pulumi.Input<inputs.chaos.v20221001preview.SimpleFilterArgs>;
    /**
     * String of the selector ID.
     */
    id: pulumi.Input<string>;
    /**
     * List of Target references.
     */
    targets: pulumi.Input<pulumi.Input<inputs.chaos.v20221001preview.TargetReferenceArgs>[]>;
    /**
     * Enum of the selector type.
     */
    type: pulumi.Input<enums.chaos.v20221001preview.SelectorType>;
}

/**
 * Model that represents a simple target filter.
 */
export interface SimpleFilterArgs {
    /**
     * Model that represents the Simple filter parameters.
     */
    parameters?: pulumi.Input<inputs.chaos.v20221001preview.SimpleFilterParametersArgs>;
    /**
     * Enum that discriminates between filter types. Currently only `Simple` type is supported.
     * Expected value is 'Simple'.
     */
    type: pulumi.Input<"Simple">;
}

/**
 * Model that represents the Simple filter parameters.
 */
export interface SimpleFilterParametersArgs {
    /**
     * List of Azure availability zones to filter targets by.
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Model that represents a step in the Experiment resource.
 */
export interface StepArgs {
    /**
     * List of branches.
     */
    branches: pulumi.Input<pulumi.Input<inputs.chaos.v20221001preview.BranchArgs>[]>;
    /**
     * String of the step name.
     */
    name: pulumi.Input<string>;
}

/**
 * Model that represents a reference to a Target in the selector.
 */
export interface TargetReferenceArgs {
    /**
     * String of the resource ID of a Target resource.
     */
    id: pulumi.Input<string>;
    /**
     * Enum of the Target reference type.
     */
    type: pulumi.Input<enums.chaos.v20221001preview.TargetReferenceType>;
}

