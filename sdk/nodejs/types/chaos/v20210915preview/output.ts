// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Model that represents a branch in the step.
 */
export interface BranchResponse {
    /**
     * List of actions.
     */
    actions: (outputs.chaos.v20210915preview.ContinuousActionResponse | outputs.chaos.v20210915preview.DelayActionResponse | outputs.chaos.v20210915preview.DiscreteActionResponse)[];
    /**
     * String of the branch name.
     */
    name: string;
}

/**
 * Model that represents the Capability properties model.
 */
export interface CapabilityPropertiesResponse {
    /**
     * Localized string of the description.
     */
    description: string;
    /**
     * URL to retrieve JSON schema of the Capability parameters.
     */
    parametersSchema: string;
    /**
     * String of the Publisher that this Capability extends.
     */
    publisher: string;
    /**
     * String of the Target Type that this Capability extends.
     */
    targetType: string;
    /**
     * String of the URN for this Capability Type.
     */
    urn: string;
}

/**
 * Model that represents a continuous action.
 */
export interface ContinuousActionResponse {
    /**
     * ISO8601 formatted string that represents a duration.
     */
    duration: string;
    /**
     * String that represents a Capability URN.
     */
    name: string;
    /**
     * List of key value pairs.
     */
    parameters: outputs.chaos.v20210915preview.KeyValuePairResponse[];
    /**
     * String that represents a selector.
     */
    selectorId: string;
    /**
     * Enum that discriminates between action models.
     * Expected value is 'continuous'.
     */
    type: "continuous";
}

/**
 * Model that represents a delay action.
 */
export interface DelayActionResponse {
    /**
     * ISO8601 formatted string that represents a duration.
     */
    duration: string;
    /**
     * String that represents a Capability URN.
     */
    name: string;
    /**
     * Enum that discriminates between action models.
     * Expected value is 'delay'.
     */
    type: "delay";
}

/**
 * Model that represents a discrete action.
 */
export interface DiscreteActionResponse {
    /**
     * String that represents a Capability URN.
     */
    name: string;
    /**
     * List of key value pairs.
     */
    parameters: outputs.chaos.v20210915preview.KeyValuePairResponse[];
    /**
     * String that represents a selector.
     */
    selectorId: string;
    /**
     * Enum that discriminates between action models.
     * Expected value is 'discrete'.
     */
    type: "discrete";
}

/**
 * Model that represents the Experiment properties model.
 */
export interface ExperimentPropertiesResponse {
    /**
     * List of selectors.
     */
    selectors: outputs.chaos.v20210915preview.SelectorResponse[];
    /**
     * A boolean value that indicates if experiment should be started on creation or not.
     */
    startOnCreation?: boolean;
    /**
     * List of steps.
     */
    steps: outputs.chaos.v20210915preview.StepResponse[];
}

/**
 * A map to describe the settings of an action.
 */
export interface KeyValuePairResponse {
    /**
     * The name of the setting for the action.
     */
    key: string;
    /**
     * The value of the setting for the action.
     */
    value: string;
}

/**
 * The managed identity of a resource.
 */
export interface ResourceIdentityResponse {
    /**
     * GUID that represents the principal ID of this resource identity.
     */
    principalId: string;
    /**
     * GUID that represents the tenant ID of this resource identity.
     */
    tenantId: string;
    /**
     * String of the resource identity type.
     */
    type: string;
}

/**
 * Model that represents a selector in the Experiment resource.
 */
export interface SelectorResponse {
    /**
     * String of the selector ID.
     */
    id: string;
    /**
     * List of Target references.
     */
    targets: outputs.chaos.v20210915preview.TargetReferenceResponse[];
    /**
     * Enum of the selector type.
     */
    type: string;
}

/**
 * Model that represents a step in the Experiment resource.
 */
export interface StepResponse {
    /**
     * List of branches.
     */
    branches: outputs.chaos.v20210915preview.BranchResponse[];
    /**
     * String of the step name.
     */
    name: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Model that represents a reference to a Target in the selector.
 */
export interface TargetReferenceResponse {
    /**
     * String of the resource ID of a Target resource.
     */
    id: string;
    /**
     * Enum of the Target reference type.
     */
    type: string;
}

