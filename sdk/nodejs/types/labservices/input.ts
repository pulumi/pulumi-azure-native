// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20181015 from "./v20181015/input";
export * as v20211001preview from "./v20211001preview/input";
export * as v20211115preview from "./v20211115preview/input";
export * as v20220801 from "./v20220801/input";
/**
 * Profile for how to handle shutting down virtual machines.
 */
export interface AutoShutdownProfileArgs {
    /**
     * The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
     */
    disconnectDelay?: pulumi.Input<string>;
    /**
     * The amount of time a VM will idle before it is shutdown if this behavior is enabled.
     */
    idleDelay?: pulumi.Input<string>;
    /**
     * The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
     */
    noConnectDelay?: pulumi.Input<string>;
    /**
     * Whether shutdown on disconnect is enabled
     */
    shutdownOnDisconnect?: pulumi.Input<enums.labservices.EnableState>;
    /**
     * Whether a VM will get shutdown when it has idled for a period of time.
     */
    shutdownOnIdle?: pulumi.Input<enums.labservices.ShutdownOnIdleMode>;
    /**
     * Whether a VM will get shutdown when it hasn't been connected to after a period of time.
     */
    shutdownWhenNotConnected?: pulumi.Input<enums.labservices.EnableState>;
}
/**
 * autoShutdownProfileArgsProvideDefaults sets the appropriate defaults for AutoShutdownProfileArgs
 */
export function autoShutdownProfileArgsProvideDefaults(val: AutoShutdownProfileArgs): AutoShutdownProfileArgs {
    return {
        ...val,
        shutdownOnDisconnect: (val.shutdownOnDisconnect) ?? "Disabled",
        shutdownOnIdle: (val.shutdownOnIdle) ?? "None",
        shutdownWhenNotConnected: (val.shutdownWhenNotConnected) ?? "Disabled",
    };
}

/**
 * Connection profile for how users connect to lab virtual machines.
 */
export interface ConnectionProfileArgs {
    /**
     * The enabled access level for Client Access over RDP.
     */
    clientRdpAccess?: pulumi.Input<enums.labservices.ConnectionType>;
    /**
     * The enabled access level for Client Access over SSH.
     */
    clientSshAccess?: pulumi.Input<enums.labservices.ConnectionType>;
    /**
     * The enabled access level for Web Access over RDP.
     */
    webRdpAccess?: pulumi.Input<enums.labservices.ConnectionType>;
    /**
     * The enabled access level for Web Access over SSH.
     */
    webSshAccess?: pulumi.Input<enums.labservices.ConnectionType>;
}
/**
 * connectionProfileArgsProvideDefaults sets the appropriate defaults for ConnectionProfileArgs
 */
export function connectionProfileArgsProvideDefaults(val: ConnectionProfileArgs): ConnectionProfileArgs {
    return {
        ...val,
        clientRdpAccess: (val.clientRdpAccess) ?? "None",
        clientSshAccess: (val.clientSshAccess) ?? "None",
        webRdpAccess: (val.webRdpAccess) ?? "None",
        webSshAccess: (val.webSshAccess) ?? "None",
    };
}

/**
 * Profile for how to handle networking for Lab Plans.
 */
export interface LabPlanNetworkProfileArgs {
    /**
     * The external subnet resource id
     */
    subnetId?: pulumi.Input<string>;
}

/**
 * Recurrence pattern of a lab schedule.
 */
export interface RecurrencePatternArgs {
    /**
     * When the recurrence will expire. This date is inclusive.
     */
    expirationDate: pulumi.Input<string>;
    /**
     * The frequency of the recurrence.
     */
    frequency: pulumi.Input<enums.labservices.RecurrenceFrequency>;
    /**
     * The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
     */
    interval?: pulumi.Input<number>;
    /**
     * The week days the schedule runs. Used for when the Frequency is set to Weekly.
     */
    weekDays?: pulumi.Input<pulumi.Input<enums.labservices.WeekDay>[]>;
}

/**
 * Details of a Reference Vm
 */
export interface ReferenceVmArgs {
    /**
     * The password of the virtual machine. This will be set to null in GET resource API
     */
    password?: pulumi.Input<string>;
    /**
     * The username of the virtual machine
     */
    userName: pulumi.Input<string>;
}

/**
 * Represents a VM and the setting Id it was created for.
 */
export interface ResourceSetArgs {
    /**
     * resourceSettingId for the environment
     */
    resourceSettingId?: pulumi.Input<string>;
    /**
     * VM resource Id for the environment
     */
    vmResourceId?: pulumi.Input<string>;
}

/**
 * Represents resource specific settings
 */
export interface ResourceSettingsArgs {
    /**
     * The resource id of the gallery image used for creating the virtual machine
     */
    galleryImageResourceId?: pulumi.Input<string>;
    /**
     * Details specific to Reference Vm
     */
    referenceVm: pulumi.Input<inputs.labservices.ReferenceVmArgs>;
    /**
     * The size of the virtual machine
     */
    size?: pulumi.Input<string | enums.labservices.ManagedLabVmSize>;
}

/**
 * Support contact information and instructions.
 */
export interface SupportInfoArgs {
    /**
     * Support contact email address.
     */
    email?: pulumi.Input<string>;
    /**
     * Support instructions.
     */
    instructions?: pulumi.Input<string>;
    /**
     * Support contact phone number.
     */
    phone?: pulumi.Input<string>;
    /**
     * Support web address.
     */
    url?: pulumi.Input<string>;
}

