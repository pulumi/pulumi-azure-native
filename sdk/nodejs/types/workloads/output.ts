// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20211201preview from "./v20211201preview/output";
/**
 * Gets or sets the application server configuration.
 */
export interface ApplicationServerConfigurationResponse {
    /**
     * The number of app server instances.
     */
    instanceCount: number;
    /**
     * The subnet id.
     */
    subnetId: string;
    /**
     * Gets or sets the virtual machine configuration.
     */
    virtualMachineConfiguration: outputs.workloads.VirtualMachineConfigurationResponse;
}

/**
 * Backup profile
 */
export interface BackupProfileResponse {
    /**
     * Whether to enable Azure backup for the workload
     */
    backupEnabled: string;
    /**
     * Backup vault resource Id
     */
    vaultResourceId: string;
}

/**
 * Cache profile
 */
export interface CacheProfileResponse {
    /**
     * Cache resource Id
     */
    cacheResourceId: string;
    /**
     * Cache capacity
     */
    capacity: number;
    /**
     * Cache family
     */
    family: string;
    /**
     * Cache name
     */
    name?: string;
    /**
     * Cache SKU name
     */
    skuName: string;
}

/**
 * Gets or sets the central server configuration.
 */
export interface CentralServerConfigurationResponse {
    /**
     * The number of central server VMs.
     */
    instanceCount: number;
    /**
     * The subnet id.
     */
    subnetId: string;
    /**
     * Gets or sets the virtual machine configuration.
     */
    virtualMachineConfiguration: outputs.workloads.VirtualMachineConfigurationResponse;
}

/**
 * The SAP Central Services Instance VM details.
 */
export interface CentralServerVmDetailsResponse {
    /**
     * Defines the type of central server VM.
     */
    type: string;
    virtualMachineId: string;
}

/**
 * Gets or sets the DB2 provider properties.
 */
export interface DB2ProviderInstancePropertiesResponse {
    /**
     * Gets or sets the db2 database name.
     */
    dbName?: string;
    /**
     * Gets or sets the db2 database password.
     */
    dbPassword?: string;
    /**
     * Gets or sets the key vault URI to secret with the database password.
     */
    dbPasswordUri?: string;
    /**
     * Gets or sets the db2 database sql port.
     */
    dbPort?: string;
    /**
     * Gets or sets the db2 database user name.
     */
    dbUsername?: string;
    /**
     * Gets or sets the target virtual machine name.
     */
    hostname?: string;
    /**
     * The provider type. For example, the value can be SapHana.
     * Expected value is 'Db2'.
     */
    providerType: "Db2";
    /**
     * Gets or sets the SAP System Identifier
     */
    sapSid?: string;
    /**
     * Gets or sets the blob URI to SSL certificate for the DB2 Database.
     */
    sslCertificateUri?: string;
    /**
     * Gets or sets certificate preference if secure communication is enabled.
     */
    sslPreference?: string;
}

/**
 * Gets or sets the database configuration.
 */
export interface DatabaseConfigurationResponse {
    /**
     * The database type.
     */
    databaseType?: string;
    /**
     * The number of database VMs.
     */
    instanceCount: number;
    /**
     * The subnet id.
     */
    subnetId: string;
    /**
     * Gets or sets the virtual machine configuration.
     */
    virtualMachineConfiguration: outputs.workloads.VirtualMachineConfigurationResponse;
}

/**
 * Workload database profile
 */
export interface DatabaseProfileResponse {
    /**
     * Backup retention days for the server
     */
    backupRetentionDays?: number;
    /**
     * Whether to enable HA for the server
     */
    haEnabled?: string;
    /**
     * Database server name
     */
    serverName?: string;
    /**
     * Azure Database Server resource Id
     */
    serverResourceId: string;
    /**
     * The name of the server SKU, e.g. Standard_D32s_v4
     */
    sku: string;
    /**
     * Whether to enable SSL enforcement on the database
     */
    sslEnforcementEnabled?: string;
    /**
     * Database storage size in GB
     */
    storageInGB?: number;
    /**
     * Storage IOPS for the server
     */
    storageIops?: number;
    /**
     * SKU name for database storage
     */
    storageSku?: string;
    /**
     * Tier of the server SKU
     */
    tier: string;
    /**
     * Database type
     */
    type: string;
    /**
     * Database version
     */
    version?: string;
}

/**
 * Database VM details.
 */
export interface DatabaseVmDetailsResponse {
    /**
     * Defines the SAP Instance status.
     */
    status: string;
    virtualMachineId: string;
}

/**
 * Defines the url and storage account ID where deployer VM packages are uploaded
 */
export interface DeployerVmPackagesResponse {
    /**
     * The deployer VM packages storage account id
     */
    storageAccountId?: string;
    /**
     * The URL to the deployer VM packages file.
     */
    url?: string;
}

/**
 * Deployment Configuration.
 */
export interface DeploymentConfigurationResponse {
    /**
     * The geo-location where the SAP system is to be created.
     */
    appLocation?: string;
    /**
     * The configuration Type.
     * Expected value is 'Deployment'.
     */
    configurationType: "Deployment";
    /**
     * The infrastructure configuration.
     */
    infrastructureConfiguration?: outputs.workloads.SingleServerConfigurationResponse | outputs.workloads.ThreeTierConfigurationResponse;
    /**
     * The software configuration.
     */
    softwareConfiguration?: outputs.workloads.ExternalInstallationSoftwareConfigurationResponse | outputs.workloads.SAPInstallWithoutOSConfigSoftwareConfigurationResponse | outputs.workloads.ServiceInitiatedSoftwareConfigurationResponse;
}

/**
 * Deployment along with OS Configuration.
 */
export interface DeploymentWithOSConfigurationResponse {
    /**
     * The geo-location where the SAP system is to be created.
     */
    appLocation?: string;
    /**
     * The configuration Type.
     * Expected value is 'DeploymentWithOSConfig'.
     */
    configurationType: "DeploymentWithOSConfig";
    /**
     * The infrastructure configuration.
     */
    infrastructureConfiguration?: outputs.workloads.SingleServerConfigurationResponse | outputs.workloads.ThreeTierConfigurationResponse;
    /**
     * The OS and SAP configuration.
     */
    osSapConfiguration?: outputs.workloads.OsSapConfigurationResponse;
    /**
     * The software configuration.
     */
    softwareConfiguration?: outputs.workloads.ExternalInstallationSoftwareConfigurationResponse | outputs.workloads.SAPInstallWithoutOSConfigSoftwareConfigurationResponse | outputs.workloads.ServiceInitiatedSoftwareConfigurationResponse;
}

/**
 * Discovery Details.
 */
export interface DiscoveryConfigurationResponse {
    /**
     * The geo-location where the SAP system exists.
     */
    appLocation: string;
    /**
     * The virtual machine ID of the Central Server.
     */
    centralServerVmId?: string;
    /**
     * The configuration Type.
     * Expected value is 'Discovery'.
     */
    configurationType: "Discovery";
}

/**
 * Disk resource creation details
 */
export interface DiskInfoResponse {
    /**
     * Disk size in GB
     */
    sizeInGB?: number;
    /**
     * Storage type
     */
    storageType: string;
}

/**
 * Defines the SAP Enqueue Replication Server (ERS) properties.
 */
export interface EnqueueReplicationServerPropertiesResponse {
    /**
     * Defines the type of Enqueue Replication Server.
     */
    ersVersion: string;
    /**
     * Defines the health of SAP Instances.
     */
    health: string;
    /**
     * ERS SAP Hostname.
     */
    hostname: string;
    /**
     * ERS Instance Number.
     */
    instanceNo: string;
    /**
     * ERS SAP IP Address.
     */
    ipAddress: string;
    /**
     * ERS SAP Kernel Patch level.
     */
    kernelPatch: string;
    /**
     * ERS SAP Kernel Version.
     */
    kernelVersion: string;
}

/**
 * Defines the SAP Enqueue Server properties.
 */
export interface EnqueueServerPropertiesResponse {
    /**
     * Defines the health of SAP Instances.
     */
    health: string;
    /**
     * Enqueue Server SAP Hostname.
     */
    hostname: string;
    /**
     * Enqueue Server SAP IP Address.
     */
    ipAddress: string;
    /**
     * Enqueue Server Port.
     */
    port: number;
}

/**
 * Error definition.
 */
export interface ErrorDefinitionResponse {
    /**
     * Service specific error code which serves as the substatus for the HTTP error code.
     */
    code: string;
    /**
     * Internal error details.
     */
    details: outputs.workloads.ErrorDefinitionResponse[];
    /**
     * Description of the error.
     */
    message: string;
}

/**
 * Standard error object.
 */
export interface ErrorResponse {
    /**
     * Server-defined set of error codes.
     */
    code: string;
    /**
     * Array of details about specific errors that led to this reported error.
     */
    details: outputs.workloads.ErrorResponse[];
    /**
     * Object containing more specific information than  the current object about the error.
     */
    innerError: outputs.workloads.ErrorResponseInnerError;
    /**
     * Human-readable representation of the error.
     */
    message: string;
    /**
     * Target of the error.
     */
    target: string;
}

/**
 * Object containing more specific information than  the current object about the error.
 */
export interface ErrorResponseInnerError {
    /**
     * Standard error object.
     */
    innerError?: outputs.workloads.ErrorResponse;
}

/**
 * The SAP Software configuration Input when the software is installed externally outside the service.
 */
export interface ExternalInstallationSoftwareConfigurationResponse {
    /**
     * The resource ID of the virtual machine containing the central server instance.
     */
    centralServerVmId?: string;
    /**
     * The SAP software installation Type.
     * Expected value is 'External'.
     */
    softwareInstallationType: "External";
}

/**
 * File share profile
 */
export interface FileshareProfileResponse {
    /**
     * File share name
     */
    shareName: string;
    /**
     * File share size in GB
     */
    shareSizeInGB?: number;
    /**
     * Share type
     */
    shareType: string;
    /**
     * File share storage resource id
     */
    storageResourceId: string;
    /**
     * File share backing storage type
     */
    storageType: string;
}

/**
 * Defines the SAP Gateway Server properties.
 */
export interface GatewayServerPropertiesResponse {
    /**
     * Defines the health of SAP Instances.
     */
    health: string;
    /**
     * Gateway Port.
     */
    port: number;
}

/**
 * Gets or sets the provider properties.
 */
export interface HanaDbProviderInstancePropertiesResponse {
    /**
     * Gets or sets the hana database name.
     */
    dbName?: string;
    /**
     * Gets or sets the database password.
     */
    dbPassword?: string;
    /**
     * Gets or sets the key vault URI to secret with the database password.
     */
    dbPasswordUri?: string;
    /**
     * Gets or sets the blob URI to SSL certificate for the DB.
     */
    dbSslCertificateUri?: string;
    /**
     * Gets or sets the database user name.
     */
    dbUsername?: string;
    /**
     * Gets or sets the target virtual machine size.
     */
    hostname?: string;
    /**
     * Gets or sets the database instance number.
     */
    instanceNumber?: string;
    /**
     * The provider type. For example, the value can be SapHana.
     * Expected value is 'SapHana'.
     */
    providerType: "SapHana";
    /**
     * Gets or sets the database sql port.
     */
    sqlPort?: string;
    /**
     * Gets or sets the blob URI to SSL certificate for the DB.
     */
    sslCertificateUri?: string;
    /**
     * Gets or sets the hostname(s) in the SSL certificate.
     */
    sslHostNameInCertificate?: string;
    /**
     * Gets or sets certificate preference if secure communication is enabled.
     */
    sslPreference?: string;
}

/**
 * Gets or sets the high availability configuration.
 */
export interface HighAvailabilityConfigurationResponse {
    /**
     * The high availability type.
     */
    highAvailabilityType: string;
}

/**
 * Gets or sets the HA software configuration.
 */
export interface HighAvailabilitySoftwareConfigurationResponse {
    /**
     * The fencing client id.
     */
    fencingClientId: string;
    /**
     * The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.
     */
    fencingClientPassword: string;
}

/**
 * Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
 */
export interface ImageReferenceResponse {
    /**
     * Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
     */
    exactVersion: string;
    /**
     * Specifies the offer of the platform image or marketplace image used to create the virtual machine.
     */
    offer?: string;
    /**
     * The image publisher.
     */
    publisher?: string;
    /**
     * Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call.
     */
    sharedGalleryImageId?: string;
    /**
     * The image SKU.
     */
    sku?: string;
    /**
     * Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
     */
    version?: string;
}

/**
 * Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
 */
export interface LinuxConfigurationResponse {
    /**
     * Specifies whether password authentication should be disabled.
     */
    disablePasswordAuthentication?: boolean;
    /**
     * The OS Type
     * Expected value is 'Linux'.
     */
    osType: "Linux";
    /**
     * Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)
     */
    ssh?: outputs.workloads.SshConfigurationResponse;
    /**
     * The SSH Key-pair used to authenticate with the VM's.
     */
    sshKeyPair?: outputs.workloads.SshKeyPairResponse;
}

/**
 * Managed resource group configuration
 */
export interface ManagedRGConfigurationResponse {
    /**
     * Managed resource group name
     */
    name?: string;
}

/**
 * Defines the SAP Message Server properties.
 */
export interface MessageServerPropertiesResponse {
    /**
     * Defines the health of SAP Instances.
     */
    health: string;
    /**
     * Message Server SAP Hostname.
     */
    hostname: string;
    /**
     * Message Server HTTP Port.
     */
    httpPort: number;
    /**
     * Message Server HTTPS Port.
     */
    httpsPort: number;
    /**
     * Message Server internal MS port.
     */
    internalMsPort: number;
    /**
     * Message server IP Address.
     */
    ipAddress: string;
    /**
     * Message Server port.
     */
    msPort: number;
}

/**
 * Defines the SAP monitor errors.
 */
export interface MonitorPropertiesResponseErrors {
    /**
     * Server-defined set of error codes.
     */
    code: string;
    /**
     * Array of details about specific errors that led to this reported error.
     */
    details: outputs.workloads.ErrorResponse[];
    /**
     * Object containing more specific information than  the current object about the error.
     */
    innerError: outputs.workloads.ErrorResponseInnerError;
    /**
     * Human-readable representation of the error.
     */
    message: string;
    /**
     * Target of the error.
     */
    target: string;
}

/**
 * Gets or sets the SQL server provider properties.
 */
export interface MsSqlServerProviderInstancePropertiesResponse {
    /**
     * Gets or sets the database password.
     */
    dbPassword?: string;
    /**
     * Gets or sets the key vault URI to secret with the database password.
     */
    dbPasswordUri?: string;
    /**
     * Gets or sets the database sql port.
     */
    dbPort?: string;
    /**
     * Gets or sets the database user name.
     */
    dbUsername?: string;
    /**
     * Gets or sets the SQL server host name.
     */
    hostname?: string;
    /**
     * The provider type. For example, the value can be SapHana.
     * Expected value is 'MsSqlServer'.
     */
    providerType: "MsSqlServer";
    /**
     * Gets or sets the SAP System Identifier
     */
    sapSid?: string;
    /**
     * Gets or sets the blob URI to SSL certificate for the SQL Database.
     */
    sslCertificateUri?: string;
    /**
     * Gets or sets certificate preference if secure communication is enabled.
     */
    sslPreference?: string;
}

/**
 * Defines the network configuration type for SAP system infrastructure that is being deployed 
 */
export interface NetworkConfigurationResponse {
    /**
     * Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed
     */
    isSecondaryIpEnabled?: boolean;
}
/**
 * networkConfigurationResponseProvideDefaults sets the appropriate defaults for NetworkConfigurationResponse
 */
export function networkConfigurationResponseProvideDefaults(val: NetworkConfigurationResponse): NetworkConfigurationResponse {
    return {
        ...val,
        isSecondaryIpEnabled: (val.isSecondaryIpEnabled) ?? false,
    };
}

/**
 * Network profile
 */
export interface NetworkProfileResponse {
    /**
     * Whether to enable Azure front door
     */
    azureFrontDoorEnabled?: string;
    /**
     * Azure front door resource id
     */
    azureFrontDoorResourceId: string;
    /**
     * Capacity, applicable only for Application Gateway
     */
    capacity?: number;
    /**
     * Loadbalancer front-end IP address resource Id
     */
    frontEndPublicIpResourceId: string;
    /**
     * Azure Loadbalancer or ApplicationGateway resource Id
     */
    loadBalancerResourceId: string;
    /**
     * Load balancer SKU
     */
    loadBalancerSku?: string;
    /**
     * Load balancer tier
     */
    loadBalancerTier?: string;
    /**
     * Load balancer type
     */
    loadBalancerType: string;
    /**
     * List of outbound public IP resource IDs
     */
    outboundPublicIpResourceIds: string[];
    /**
     * Virtual network resource Id
     */
    vNetResourceId: string;
}

/**
 * VM or VMSS node profile
 */
export interface NodeProfileResponse {
    /**
     * Data disks details. This property is not in use right now
     */
    dataDisks?: outputs.workloads.DiskInfoResponse[];
    /**
     * VM or VMSS name
     */
    name?: string;
    /**
     * VM/VMSS resource ARM Ids
     */
    nodeResourceIds: string[];
    /**
     * VM SKU for node(s)
     */
    nodeSku: string;
    /**
     * OS disk details
     */
    osDisk: outputs.workloads.DiskInfoResponse;
    /**
     * OS image used for creating the nodes
     */
    osImage: outputs.workloads.OsImageProfileResponse;
}

/**
 * Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
 */
export interface OSProfileResponse {
    /**
     * Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
     */
    adminPassword?: string;
    /**
     * Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
     */
    adminUsername?: string;
    /**
     * Specifies Windows operating system settings on the virtual machine.
     */
    osConfiguration?: outputs.workloads.LinuxConfigurationResponse | outputs.workloads.WindowsConfigurationResponse;
}

/**
 * OS image profile
 */
export interface OsImageProfileResponse {
    /**
     * OS image offer
     */
    offer?: string;
    /**
     * OS image publisher
     */
    publisher?: string;
    /**
     * OS image sku
     */
    sku?: string;
    /**
     * OS image version
     */
    version?: string;
}

/**
 * Defines the OS and SAP Configurations for Deployment
 */
export interface OsSapConfigurationResponse {
    /**
     * The url and storage account ID where deployer VM packages are uploaded
     */
    deployerVmPackages?: outputs.workloads.DeployerVmPackagesResponse;
    /**
     * The FQDN to set for the SAP system
     */
    sapFqdn?: string;
}

/**
 * PHP profile
 */
export interface PhpProfileResponse {
    /**
     * PHP version
     */
    version: string;
}

/**
 * Identity for the resource. Currently not supported
 */
export interface PhpWorkloadResourceResponseIdentity {
    /**
     * Type of manage identity
     */
    type: string;
    /**
     * User assigned identities dictionary
     */
    userAssignedIdentities?: {[key: string]: outputs.workloads.UserAssignedIdentityResponse};
}

/**
 * Gets or sets the PrometheusHaCluster provider properties.
 */
export interface PrometheusHaClusterProviderInstancePropertiesResponse {
    /**
     * Gets or sets the clusterName.
     */
    clusterName?: string;
    /**
     * Gets or sets the target machine name.
     */
    hostname?: string;
    /**
     * URL of the Node Exporter endpoint.
     */
    prometheusUrl?: string;
    /**
     * The provider type. For example, the value can be SapHana.
     * Expected value is 'PrometheusHaCluster'.
     */
    providerType: "PrometheusHaCluster";
    /**
     * Gets or sets the cluster sid.
     */
    sid?: string;
    /**
     * Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
     */
    sslCertificateUri?: string;
    /**
     * Gets or sets certificate preference if secure communication is enabled.
     */
    sslPreference?: string;
}

/**
 * Gets or sets the PrometheusOS provider properties.
 */
export interface PrometheusOSProviderInstancePropertiesResponse {
    /**
     * URL of the Node Exporter endpoint
     */
    prometheusUrl?: string;
    /**
     * The provider type. For example, the value can be SapHana.
     * Expected value is 'PrometheusOS'.
     */
    providerType: "PrometheusOS";
    /**
     * Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
     */
    sslCertificateUri?: string;
    /**
     * Gets or sets certificate preference if secure communication is enabled.
     */
    sslPreference?: string;
}

/**
 * Defines the provider instance errors.
 */
export interface ProviderInstancePropertiesResponseErrors {
    /**
     * Server-defined set of error codes.
     */
    code: string;
    /**
     * Array of details about specific errors that led to this reported error.
     */
    details: outputs.workloads.ErrorResponse[];
    /**
     * Object containing more specific information than  the current object about the error.
     */
    innerError: outputs.workloads.ErrorResponseInnerError;
    /**
     * Human-readable representation of the error.
     */
    message: string;
    /**
     * Target of the error.
     */
    target: string;
}

/**
 * The SAP Availability Zone Pair.
 */
export interface SAPAvailabilityZonePairResponse {
    /**
     * The zone A.
     */
    zoneA?: number;
    /**
     * The zone B.
     */
    zoneB?: number;
}

/**
 * The SAP Disk Configuration.
 */
export interface SAPDiskConfigurationResponse {
    /**
     * The disk count.
     */
    diskCount?: number;
    /**
     * The disk Iops.
     */
    diskIopsReadWrite?: number;
    /**
     * The disk provisioned throughput in MBps.
     */
    diskMBpsReadWrite?: number;
    /**
     * The disk size in GB.
     */
    diskSizeGB?: number;
    /**
     * The disk storage type
     */
    diskStorageType?: string;
    /**
     * The disk type.
     */
    diskType?: string;
    /**
     * The volume name.
     */
    volume?: string;
}

/**
 * The SAP Software configuration Input when the software is to be installed by service without OS Configurations
 */
export interface SAPInstallWithoutOSConfigSoftwareConfigurationResponse {
    /**
     * The URL to the SAP Build of Materials(BOM) file.
     */
    bomUrl: string;
    /**
     * Gets or sets the HA software configuration.
     */
    highAvailabilitySoftwareConfiguration?: outputs.workloads.HighAvailabilitySoftwareConfigurationResponse;
    /**
     * The SAP bits storage account id.
     */
    sapBitsStorageAccountId: string;
    /**
     * The SAP software installation Type.
     * Expected value is 'SAPInstallWithoutOSConfig'.
     */
    softwareInstallationType: "SAPInstallWithoutOSConfig";
    /**
     * The software version to install.
     */
    softwareVersion: string;
}

/**
 * The SAP supported SKU.
 */
export interface SAPSupportedSkuResponse {
    /**
     * True if the Sku is certified for App server in the SAP system.
     */
    isAppServerCertified?: boolean;
    /**
     * True if the Sku is certified for Database server in the SAP system.
     */
    isDatabaseCertified?: boolean;
    /**
     * The VM Sku.
     */
    vmSku?: string;
}

/**
 * An error response from the Virtual Instance for SAP Workload service.
 */
export interface SAPVirtualInstanceErrorResponse {
    /**
     * The Virtual Instance for SAP error body.
     */
    properties?: outputs.workloads.ErrorDefinitionResponse;
}

/**
 * Gets or sets the provider properties.
 */
export interface SapNetWeaverProviderInstancePropertiesResponse {
    /**
     * The provider type. For example, the value can be SapHana.
     * Expected value is 'SapNetWeaver'.
     */
    providerType: "SapNetWeaver";
    /**
     * Gets or sets the SAP Client ID.
     */
    sapClientId?: string;
    /**
     * Gets or sets the list of HostFile Entries
     */
    sapHostFileEntries?: string[];
    /**
     * Gets or sets the target virtual machine IP Address/FQDN.
     */
    sapHostname?: string;
    /**
     * Gets or sets the instance number of SAP NetWeaver.
     */
    sapInstanceNr?: string;
    /**
     * Sets the SAP password.
     */
    sapPassword?: string;
    /**
     * Gets or sets the key vault URI to secret with the SAP password.
     */
    sapPasswordUri?: string;
    /**
     * Gets or sets the SAP HTTP port number.
     */
    sapPortNumber?: string;
    /**
     * Gets or sets the SAP System Identifier
     */
    sapSid?: string;
    /**
     * Gets or sets the blob URI to SSL certificate for the SAP system.
     */
    sapSslCertificateUri?: string;
    /**
     * Gets or sets the SAP user name.
     */
    sapUsername?: string;
    /**
     * Gets or sets the blob URI to SSL certificate for the SAP system.
     */
    sslCertificateUri?: string;
    /**
     * Gets or sets certificate preference if secure communication is enabled.
     */
    sslPreference?: string;
}

/**
 * Search profile
 */
export interface SearchProfileResponse {
    /**
     * Data disks details. This property is not in use right now
     */
    dataDisks?: outputs.workloads.DiskInfoResponse[];
    /**
     * VM or VMSS name
     */
    name?: string;
    /**
     * VM/VMSS resource ARM Ids
     */
    nodeResourceIds: string[];
    /**
     * VM SKU for node(s)
     */
    nodeSku: string;
    /**
     * OS disk details
     */
    osDisk: outputs.workloads.DiskInfoResponse;
    /**
     * OS image used for creating the nodes
     */
    osImage: outputs.workloads.OsImageProfileResponse;
    /**
     * Search type
     */
    searchType: string;
}

/**
 * The SAP Software configuration Input when the software is to be installed by service.
 */
export interface ServiceInitiatedSoftwareConfigurationResponse {
    /**
     * The URL to the SAP Build of Materials(BOM) file.
     */
    bomUrl: string;
    /**
     * Gets or sets the HA software configuration.
     */
    highAvailabilitySoftwareConfiguration?: outputs.workloads.HighAvailabilitySoftwareConfigurationResponse;
    /**
     * The SAP bits storage account id.
     */
    sapBitsStorageAccountId: string;
    /**
     * The FQDN to set for the SAP system during install.
     */
    sapFqdn: string;
    /**
     * The SAP software installation Type.
     * Expected value is 'ServiceInitiated'.
     */
    softwareInstallationType: "ServiceInitiated";
    /**
     * The software version to install.
     */
    softwareVersion: string;
    /**
     * The SSH private key.
     */
    sshPrivateKey: string;
}

/**
 * Gets or sets the single server configuration.
 */
export interface SingleServerConfigurationResponse {
    /**
     * The application resource group where SAP system resources will be deployed.
     */
    appResourceGroup: string;
    /**
     * The database type.
     */
    databaseType?: string;
    /**
     * The type of SAP deployment, single server or Three tier.
     * Expected value is 'SingleServer'.
     */
    deploymentType: "SingleServer";
    /**
     * Network configuration for the server
     */
    networkConfiguration?: outputs.workloads.NetworkConfigurationResponse;
    /**
     * The subnet id.
     */
    subnetId: string;
    /**
     * Gets or sets the virtual machine configuration.
     */
    virtualMachineConfiguration: outputs.workloads.VirtualMachineConfigurationResponse;
}
/**
 * singleServerConfigurationResponseProvideDefaults sets the appropriate defaults for SingleServerConfigurationResponse
 */
export function singleServerConfigurationResponseProvideDefaults(val: SingleServerConfigurationResponse): SingleServerConfigurationResponse {
    return {
        ...val,
        networkConfiguration: (val.networkConfiguration ? outputs.workloads.networkConfigurationResponseProvideDefaults(val.networkConfiguration) : undefined),
    };
}

/**
 * Workload website profile
 */
export interface SiteProfileResponse {
    /**
     * Domain name for the application site URL
     */
    domainName?: string;
}

/**
 * The resource model definition representing SKU
 */
export interface SkuResponse {
    /**
     * If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
     */
    capacity?: number;
    /**
     * If the service has different generations of hardware, for the same SKU, then that can be captured here.
     */
    family?: string;
    /**
     * The name of the SKU. Ex - P3. It is typically a letter+number code
     */
    name: string;
    /**
     * The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
     */
    size?: string;
    /**
     * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
     */
    tier?: string;
}

/**
 * SSH configuration for Linux based VMs running on Azure
 */
export interface SshConfigurationResponse {
    /**
     * The list of SSH public keys used to authenticate with linux based VMs.
     */
    publicKeys?: outputs.workloads.SshPublicKeyResponse[];
}

/**
 * The SSH Key-pair used to authenticate with the VM. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
 */
export interface SshKeyPairResponse {
    /**
     * SSH private key.
     */
    privateKey?: string;
    /**
     * SSH public key
     */
    publicKey?: string;
}

/**
 * Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
 */
export interface SshPublicKeyResponse {
    /**
     * SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
     */
    keyData?: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Gets or sets the three tier SAP configuration.
 */
export interface ThreeTierConfigurationResponse {
    /**
     * The application resource group where SAP system resources will be deployed.
     */
    appResourceGroup: string;
    /**
     * The application server configuration.
     */
    applicationServer: outputs.workloads.ApplicationServerConfigurationResponse;
    /**
     * The central server configuration.
     */
    centralServer: outputs.workloads.CentralServerConfigurationResponse;
    /**
     * The database configuration.
     */
    databaseServer: outputs.workloads.DatabaseConfigurationResponse;
    /**
     * The type of SAP deployment, single server or Three tier.
     * Expected value is 'ThreeTier'.
     */
    deploymentType: "ThreeTier";
    /**
     * The high availability configuration.
     */
    highAvailabilityConfig?: outputs.workloads.HighAvailabilityConfigurationResponse;
    /**
     * Network configuration common to all servers
     */
    networkConfiguration?: outputs.workloads.NetworkConfigurationResponse;
}
/**
 * threeTierConfigurationResponseProvideDefaults sets the appropriate defaults for ThreeTierConfigurationResponse
 */
export function threeTierConfigurationResponseProvideDefaults(val: ThreeTierConfigurationResponse): ThreeTierConfigurationResponse {
    return {
        ...val,
        networkConfiguration: (val.networkConfiguration ? outputs.workloads.networkConfigurationResponseProvideDefaults(val.networkConfiguration) : undefined),
    };
}

/**
 * User assigned identity properties
 */
export interface UserAssignedIdentityResponse {
    /**
     * The client ID of the assigned identity.
     */
    clientId: string;
    /**
     * The principal ID of the assigned identity.
     */
    principalId: string;
}

/**
 * Managed service identity (user assigned identities)
 */
export interface UserAssignedServiceIdentityResponse {
    /**
     * Type of manage identity
     */
    type: string;
    /**
     * User assigned identities dictionary
     */
    userAssignedIdentities?: {[key: string]: outputs.workloads.UserAssignedIdentityResponse};
}

/**
 * User profile to configure on a compute resources such as VM, VMSS
 */
export interface UserProfileResponse {
    /**
     * SSH public key data
     */
    sshPublicKey: string;
    /**
     * User name
     */
    userName: string;
}

/**
 * Defines the virtual machine configuration.
 */
export interface VirtualMachineConfigurationResponse {
    /**
     * The image reference.
     */
    imageReference: outputs.workloads.ImageReferenceResponse;
    /**
     * The OS profile.
     */
    osProfile: outputs.workloads.OSProfileResponse;
    /**
     * The virtual machine size.
     */
    vmSize: string;
}

/**
 * VMSS profile
 */
export interface VmssNodesProfileResponse {
    /**
     * Maximum number of nodes for autoscale
     */
    autoScaleMaxCount?: number;
    /**
     * Minimum number of nodes for autoscale
     */
    autoScaleMinCount?: number;
    /**
     * Data disks details. This property is not in use right now
     */
    dataDisks?: outputs.workloads.DiskInfoResponse[];
    /**
     * VM or VMSS name
     */
    name?: string;
    /**
     * VM/VMSS resource ARM Ids
     */
    nodeResourceIds: string[];
    /**
     * VM SKU for node(s)
     */
    nodeSku: string;
    /**
     * OS disk details
     */
    osDisk: outputs.workloads.DiskInfoResponse;
    /**
     * OS image used for creating the nodes
     */
    osImage: outputs.workloads.OsImageProfileResponse;
}

/**
 * Specifies Windows operating system settings on the virtual machine.
 */
export interface WindowsConfigurationResponse {
    /**
     * The OS Type
     * Expected value is 'Windows'.
     */
    osType: "Windows";
}

