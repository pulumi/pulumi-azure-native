// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Blob container storage information.
 */
export interface BlobShareResponse {
    /**
     * SAS URI of Azure Storage Account Container.
     */
    sasUri: string;
}

/**
 * Input for the task that validates connection to SQL Server and also validates source server requirements
 */
export interface ConnectToSourceSqlServerTaskInputResponse {
    /**
     * Permission group for validations
     */
    checkPermissionsGroup?: string;
    /**
     * Connection information for Source SQL Server
     */
    sourceConnectionInfo: outputs.datamigration.v20180315preview.SqlConnectionInfoResponse;
}
/**
 * connectToSourceSqlServerTaskInputResponseProvideDefaults sets the appropriate defaults for ConnectToSourceSqlServerTaskInputResponse
 */
export function connectToSourceSqlServerTaskInputResponseProvideDefaults(val: ConnectToSourceSqlServerTaskInputResponse): ConnectToSourceSqlServerTaskInputResponse {
    return {
        ...val,
        sourceConnectionInfo: outputs.datamigration.v20180315preview.sqlConnectionInfoResponseProvideDefaults(val.sourceConnectionInfo),
    };
}

/**
 * Database level output for the task that validates connection to SQL Server and also validates source server requirements
 */
export interface ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse {
    /**
     * SQL Server compatibility level of database
     */
    compatibilityLevel: string;
    /**
     * The list of database files
     */
    databaseFiles: outputs.datamigration.v20180315preview.DatabaseFileInfoResponse[];
    /**
     * State of the database
     */
    databaseState: string;
    /**
     * Result identifier
     */
    id: string;
    /**
     * Database name
     */
    name: string;
    /**
     * Type of result - database level or task level
     * Expected value is 'DatabaseLevelOutput'.
     */
    resultType: "DatabaseLevelOutput";
    /**
     * Size of the file in megabytes
     */
    sizeMB: number;
}

/**
 * Task level output for the task that validates connection to SQL Server and also validates source server requirements
 */
export interface ConnectToSourceSqlServerTaskOutputTaskLevelResponse {
    /**
     * Source databases as a map from database name to database id
     */
    databases: {[key: string]: string};
    /**
     * Result identifier
     */
    id: string;
    /**
     * Type of result - database level or task level
     * Expected value is 'TaskLevelOutput'.
     */
    resultType: "TaskLevelOutput";
    /**
     * Source server brand version
     */
    sourceServerBrandVersion: string;
    /**
     * Source server version
     */
    sourceServerVersion: string;
    /**
     * Validation errors
     */
    validationErrors: outputs.datamigration.v20180315preview.ReportableExceptionResponse[];
}

/**
 * Properties for the task that validates connection to SQL Server and also validates source server requirements
 */
export interface ConnectToSourceSqlServerTaskPropertiesResponse {
    /**
     * Array of errors. This is ignored if submitted.
     */
    errors: outputs.datamigration.v20180315preview.ODataErrorResponse[];
    /**
     * Task input
     */
    input?: outputs.datamigration.v20180315preview.ConnectToSourceSqlServerTaskInputResponse;
    /**
     * Task output. This is ignored if submitted.
     */
    output: (outputs.datamigration.v20180315preview.ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse | outputs.datamigration.v20180315preview.ConnectToSourceSqlServerTaskOutputTaskLevelResponse)[];
    /**
     * The state of the task. This is ignored if submitted.
     */
    state: string;
    /**
     * Task type.
     * Expected value is 'ConnectToSource.SqlServer'.
     */
    taskType: "ConnectToSource.SqlServer";
}
/**
 * connectToSourceSqlServerTaskPropertiesResponseProvideDefaults sets the appropriate defaults for ConnectToSourceSqlServerTaskPropertiesResponse
 */
export function connectToSourceSqlServerTaskPropertiesResponseProvideDefaults(val: ConnectToSourceSqlServerTaskPropertiesResponse): ConnectToSourceSqlServerTaskPropertiesResponse {
    return {
        ...val,
        input: (val.input ? outputs.datamigration.v20180315preview.connectToSourceSqlServerTaskInputResponseProvideDefaults(val.input) : undefined),
    };
}

/**
 * Input for the task that validates connection to SQL DB and target server requirements
 */
export interface ConnectToTargetSqlDbTaskInputResponse {
    /**
     * Connection information for target SQL DB
     */
    targetConnectionInfo: outputs.datamigration.v20180315preview.SqlConnectionInfoResponse;
}
/**
 * connectToTargetSqlDbTaskInputResponseProvideDefaults sets the appropriate defaults for ConnectToTargetSqlDbTaskInputResponse
 */
export function connectToTargetSqlDbTaskInputResponseProvideDefaults(val: ConnectToTargetSqlDbTaskInputResponse): ConnectToTargetSqlDbTaskInputResponse {
    return {
        ...val,
        targetConnectionInfo: outputs.datamigration.v20180315preview.sqlConnectionInfoResponseProvideDefaults(val.targetConnectionInfo),
    };
}

/**
 * Output for the task that validates connection to SQL DB and target server requirements
 */
export interface ConnectToTargetSqlDbTaskOutputResponse {
    /**
     * Source databases as a map from database name to database id
     */
    databases: {[key: string]: string};
    /**
     * Result identifier
     */
    id: string;
    /**
     * Target server brand version
     */
    targetServerBrandVersion: string;
    /**
     * Version of the target server
     */
    targetServerVersion: string;
}

/**
 * Properties for the task that validates connection to SQL DB and target server requirements
 */
export interface ConnectToTargetSqlDbTaskPropertiesResponse {
    /**
     * Array of errors. This is ignored if submitted.
     */
    errors: outputs.datamigration.v20180315preview.ODataErrorResponse[];
    /**
     * Task input
     */
    input?: outputs.datamigration.v20180315preview.ConnectToTargetSqlDbTaskInputResponse;
    /**
     * Task output. This is ignored if submitted.
     */
    output: outputs.datamigration.v20180315preview.ConnectToTargetSqlDbTaskOutputResponse[];
    /**
     * The state of the task. This is ignored if submitted.
     */
    state: string;
    /**
     * Task type.
     * Expected value is 'ConnectToTarget.SqlDb'.
     */
    taskType: "ConnectToTarget.SqlDb";
}
/**
 * connectToTargetSqlDbTaskPropertiesResponseProvideDefaults sets the appropriate defaults for ConnectToTargetSqlDbTaskPropertiesResponse
 */
export function connectToTargetSqlDbTaskPropertiesResponseProvideDefaults(val: ConnectToTargetSqlDbTaskPropertiesResponse): ConnectToTargetSqlDbTaskPropertiesResponse {
    return {
        ...val,
        input: (val.input ? outputs.datamigration.v20180315preview.connectToTargetSqlDbTaskInputResponseProvideDefaults(val.input) : undefined),
    };
}

/**
 * Input for the task that validates connection to Azure SQL Database Managed Instance.
 */
export interface ConnectToTargetSqlMITaskInputResponse {
    /**
     * Connection information for target SQL Server
     */
    targetConnectionInfo: outputs.datamigration.v20180315preview.SqlConnectionInfoResponse;
}
/**
 * connectToTargetSqlMITaskInputResponseProvideDefaults sets the appropriate defaults for ConnectToTargetSqlMITaskInputResponse
 */
export function connectToTargetSqlMITaskInputResponseProvideDefaults(val: ConnectToTargetSqlMITaskInputResponse): ConnectToTargetSqlMITaskInputResponse {
    return {
        ...val,
        targetConnectionInfo: outputs.datamigration.v20180315preview.sqlConnectionInfoResponseProvideDefaults(val.targetConnectionInfo),
    };
}

/**
 * Output for the task that validates connection to Azure SQL Database Managed Instance.
 */
export interface ConnectToTargetSqlMITaskOutputResponse {
    /**
     * Result identifier
     */
    id: string;
    /**
     * Target server brand version
     */
    targetServerBrandVersion: string;
    /**
     * Target server version
     */
    targetServerVersion: string;
    /**
     * Validation errors
     */
    validationErrors: outputs.datamigration.v20180315preview.ReportableExceptionResponse[];
}

/**
 * Properties for the task that validates connection to Azure SQL Database Managed Instance
 */
export interface ConnectToTargetSqlMITaskPropertiesResponse {
    /**
     * Array of errors. This is ignored if submitted.
     */
    errors: outputs.datamigration.v20180315preview.ODataErrorResponse[];
    /**
     * Task input
     */
    input?: outputs.datamigration.v20180315preview.ConnectToTargetSqlMITaskInputResponse;
    /**
     * Task output. This is ignored if submitted.
     */
    output: outputs.datamigration.v20180315preview.ConnectToTargetSqlMITaskOutputResponse[];
    /**
     * The state of the task. This is ignored if submitted.
     */
    state: string;
    /**
     * Task type.
     * Expected value is 'ConnectToTarget.AzureSqlDbMI'.
     */
    taskType: "ConnectToTarget.AzureSqlDbMI";
}
/**
 * connectToTargetSqlMITaskPropertiesResponseProvideDefaults sets the appropriate defaults for ConnectToTargetSqlMITaskPropertiesResponse
 */
export function connectToTargetSqlMITaskPropertiesResponseProvideDefaults(val: ConnectToTargetSqlMITaskPropertiesResponse): ConnectToTargetSqlMITaskPropertiesResponse {
    return {
        ...val,
        input: (val.input ? outputs.datamigration.v20180315preview.connectToTargetSqlMITaskInputResponseProvideDefaults(val.input) : undefined),
    };
}

/**
 * Basic summary of a data item migration
 */
export interface DataItemMigrationSummaryResultResponse {
    /**
     * Migration end time
     */
    endedOn: string;
    /**
     * Wildcard string prefix to use for querying all errors of the item
     */
    errorPrefix: string;
    /**
     * Number of successfully completed items
     */
    itemsCompletedCount: number;
    /**
     * Number of items
     */
    itemsCount: number;
    /**
     * Name of the item
     */
    name: string;
    /**
     * Wildcard string prefix to use for querying all sub-tem results of the item
     */
    resultPrefix: string;
    /**
     * Migration start time
     */
    startedOn: string;
    /**
     * Current state of migration
     */
    state: string;
    /**
     * Status message
     */
    statusMessage: string;
}

/**
 * Database file specific information
 */
export interface DatabaseFileInfoResponse {
    /**
     * Name of the database
     */
    databaseName?: string;
    /**
     * Database file type
     */
    fileType?: string;
    /**
     * Unique identifier for database file
     */
    id?: string;
    /**
     * Logical name of the file
     */
    logicalName?: string;
    /**
     * Operating-system full path of the file
     */
    physicalFullName?: string;
    /**
     * Suggested full path of the file for restoring
     */
    restoreFullName?: string;
    /**
     * Size of the file in megabytes
     */
    sizeMB?: number;
}

/**
 * Project Database Details
 */
export interface DatabaseInfoResponse {
    /**
     * Name of the database
     */
    sourceDatabaseName: string;
}

/**
 * Summary of database results in the migration
 */
export interface DatabaseSummaryResultResponse {
    /**
     * Migration end time
     */
    endedOn: string;
    /**
     * Wildcard string prefix to use for querying all errors of the item
     */
    errorPrefix: string;
    /**
     * Number of successfully completed items
     */
    itemsCompletedCount: number;
    /**
     * Number of items
     */
    itemsCount: number;
    /**
     * Name of the item
     */
    name: string;
    /**
     * Wildcard string prefix to use for querying all sub-tem results of the item
     */
    resultPrefix: string;
    /**
     * Size of the database in megabytes
     */
    sizeMB: number;
    /**
     * Migration start time
     */
    startedOn: string;
    /**
     * Current state of migration
     */
    state: string;
    /**
     * Status message
     */
    statusMessage: string;
}

/**
 * Table properties
 */
export interface DatabaseTableResponse {
    /**
     * Indicates whether table is empty or not
     */
    hasRows: boolean;
    /**
     * Schema-qualified name of the table
     */
    name: string;
}

/**
 * File share information with Path, Username, and Password.
 */
export interface FileShareResponse {
    /**
     * Password credential used to connect to the share location.
     */
    password?: string;
    /**
     * The folder path for this share.
     */
    path: string;
    /**
     * User name credential to connect to the share location
     */
    userName?: string;
}

/**
 * Input for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlTaskInputResponse {
    /**
     * Connection information for SQL Server
     */
    connectionInfo: outputs.datamigration.v20180315preview.SqlConnectionInfoResponse;
    /**
     * List of database names to collect tables for
     */
    selectedDatabases: string[];
}
/**
 * getUserTablesSqlTaskInputResponseProvideDefaults sets the appropriate defaults for GetUserTablesSqlTaskInputResponse
 */
export function getUserTablesSqlTaskInputResponseProvideDefaults(val: GetUserTablesSqlTaskInputResponse): GetUserTablesSqlTaskInputResponse {
    return {
        ...val,
        connectionInfo: outputs.datamigration.v20180315preview.sqlConnectionInfoResponseProvideDefaults(val.connectionInfo),
    };
}

/**
 * Output of the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlTaskOutputResponse {
    /**
     * Mapping from database name to list of tables
     */
    databasesToTables: {[key: string]: outputs.datamigration.v20180315preview.DatabaseTableResponse[]};
    /**
     * Result identifier
     */
    id: string;
    /**
     * Validation errors
     */
    validationErrors: outputs.datamigration.v20180315preview.ReportableExceptionResponse[];
}

/**
 * Properties for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlTaskPropertiesResponse {
    /**
     * Array of errors. This is ignored if submitted.
     */
    errors: outputs.datamigration.v20180315preview.ODataErrorResponse[];
    /**
     * Task input
     */
    input?: outputs.datamigration.v20180315preview.GetUserTablesSqlTaskInputResponse;
    /**
     * Task output. This is ignored if submitted.
     */
    output: outputs.datamigration.v20180315preview.GetUserTablesSqlTaskOutputResponse[];
    /**
     * The state of the task. This is ignored if submitted.
     */
    state: string;
    /**
     * Task type.
     * Expected value is 'GetUserTables.Sql'.
     */
    taskType: "GetUserTables.Sql";
}
/**
 * getUserTablesSqlTaskPropertiesResponseProvideDefaults sets the appropriate defaults for GetUserTablesSqlTaskPropertiesResponse
 */
export function getUserTablesSqlTaskPropertiesResponseProvideDefaults(val: GetUserTablesSqlTaskPropertiesResponse): GetUserTablesSqlTaskPropertiesResponse {
    return {
        ...val,
        input: (val.input ? outputs.datamigration.v20180315preview.getUserTablesSqlTaskInputResponseProvideDefaults(val.input) : undefined),
    };
}

/**
 * Database specific information for SQL to Azure SQL DB migration task inputs
 */
export interface MigrateSqlServerSqlDbDatabaseInputResponse {
    /**
     * Whether to set database read only before migration
     */
    makeSourceDbReadOnly?: boolean;
    /**
     * Name of the database
     */
    name?: string;
    /**
     * Mapping of source to target tables
     */
    tableMap?: {[key: string]: string};
    /**
     * Name of target database. Note: Target database will be truncated before starting migration.
     */
    targetDatabaseName?: string;
}

/**
 * Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
 */
export interface MigrateSqlServerSqlDbTaskInputResponse {
    /**
     * Databases to migrate
     */
    selectedDatabases: outputs.datamigration.v20180315preview.MigrateSqlServerSqlDbDatabaseInputResponse[];
    /**
     * Information for connecting to source
     */
    sourceConnectionInfo: outputs.datamigration.v20180315preview.SqlConnectionInfoResponse;
    /**
     * Information for connecting to target
     */
    targetConnectionInfo: outputs.datamigration.v20180315preview.SqlConnectionInfoResponse;
    /**
     * Options for enabling various post migration validations. Available options, 
     *  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data. 
     *  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
     */
    validationOptions?: outputs.datamigration.v20180315preview.MigrationValidationOptionsResponse;
}
/**
 * migrateSqlServerSqlDbTaskInputResponseProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskInputResponse
 */
export function migrateSqlServerSqlDbTaskInputResponseProvideDefaults(val: MigrateSqlServerSqlDbTaskInputResponse): MigrateSqlServerSqlDbTaskInputResponse {
    return {
        ...val,
        sourceConnectionInfo: outputs.datamigration.v20180315preview.sqlConnectionInfoResponseProvideDefaults(val.sourceConnectionInfo),
        targetConnectionInfo: outputs.datamigration.v20180315preview.sqlConnectionInfoResponseProvideDefaults(val.targetConnectionInfo),
    };
}

/**
 * Database level result for Sql Server to Azure Sql DB migration.
 */
export interface MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse {
    /**
     * Name of the item
     */
    databaseName: string;
    /**
     * Migration end time
     */
    endedOn: string;
    /**
     * Number of database/object errors.
     */
    errorCount: number;
    /**
     * Wildcard string prefix to use for querying all errors of the item
     */
    errorPrefix: string;
    /**
     * Migration exceptions and warnings.
     */
    exceptionsAndWarnings: outputs.datamigration.v20180315preview.ReportableExceptionResponse[];
    /**
     * Result identifier
     */
    id: string;
    /**
     * Migration progress message
     */
    message: string;
    /**
     * Number of objects
     */
    numberOfObjects: number;
    /**
     * Number of successfully completed objects
     */
    numberOfObjectsCompleted: number;
    /**
     * Summary of object results in the migration
     */
    objectSummary: {[key: string]: outputs.datamigration.v20180315preview.DataItemMigrationSummaryResultResponse};
    /**
     * Wildcard string prefix to use for querying all sub-tem results of the item
     */
    resultPrefix: string;
    /**
     * Result type
     * Expected value is 'DatabaseLevelOutput'.
     */
    resultType: "DatabaseLevelOutput";
    /**
     * Migration stage that this database is in
     */
    stage: string;
    /**
     * Migration start time
     */
    startedOn: string;
    /**
     * Current state of migration
     */
    state: string;
    /**
     * Status message
     */
    statusMessage: string;
}

/**
 * Database validation result for Sql Server to Azure Sql DB migration.
 */
export interface MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse {
    /**
     * Result identifier
     */
    id: string;
    /**
     * Result type
     * Expected value is 'MigrationDatabaseLevelValidationOutput'.
     */
    resultType: "MigrationDatabaseLevelValidationOutput";
}

/**
 * Task errors for Sql Server to Azure Sql DB migration.
 */
export interface MigrateSqlServerSqlDbTaskOutputErrorResponse {
    /**
     * Migration error
     */
    error: outputs.datamigration.v20180315preview.ReportableExceptionResponse;
    /**
     * Result identifier
     */
    id: string;
    /**
     * Result type
     * Expected value is 'ErrorOutput'.
     */
    resultType: "ErrorOutput";
}

/**
 * Migration level result for Sql server to Azure Sql DB migration.
 */
export interface MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse {
    /**
     * Summary of database results in the migration
     */
    databaseSummary: {[key: string]: outputs.datamigration.v20180315preview.DatabaseSummaryResultResponse};
    /**
     * Selected databases as a map from database name to database id
     */
    databases: {[key: string]: string};
    /**
     * Duration of task execution in seconds.
     */
    durationInSeconds: number;
    /**
     * Migration end time
     */
    endedOn: string;
    /**
     * Migration exceptions and warnings.
     */
    exceptionsAndWarnings: outputs.datamigration.v20180315preview.ReportableExceptionResponse[];
    /**
     * Result identifier
     */
    id: string;
    /**
     * Migration progress message
     */
    message: string;
    /**
     * Migration Report Result, provides unique url for downloading your migration report.
     */
    migrationReportResult?: outputs.datamigration.v20180315preview.MigrationReportResultResponse;
    /**
     * Result type
     * Expected value is 'MigrationLevelOutput'.
     */
    resultType: "MigrationLevelOutput";
    /**
     * Source server brand version
     */
    sourceServerBrandVersion: string;
    /**
     * Source server version
     */
    sourceServerVersion: string;
    /**
     * Migration start time
     */
    startedOn: string;
    /**
     * Current status of migration
     */
    status: string;
    /**
     * Migration status message
     */
    statusMessage: string;
    /**
     * Target server brand version
     */
    targetServerBrandVersion: string;
    /**
     * Target server version
     */
    targetServerVersion: string;
}

/**
 * Table level result for Sql Server to Azure Sql DB migration.
 */
export interface MigrateSqlServerSqlDbTaskOutputTableLevelResponse {
    /**
     * Migration end time
     */
    endedOn: string;
    /**
     * Wildcard string prefix to use for querying all errors of the item
     */
    errorPrefix: string;
    /**
     * Result identifier
     */
    id: string;
    /**
     * Number of successfully completed items
     */
    itemsCompletedCount: number;
    /**
     * Number of items
     */
    itemsCount: number;
    /**
     * Name of the item
     */
    objectName: string;
    /**
     * Wildcard string prefix to use for querying all sub-tem results of the item
     */
    resultPrefix: string;
    /**
     * Result type
     * Expected value is 'TableLevelOutput'.
     */
    resultType: "TableLevelOutput";
    /**
     * Migration start time
     */
    startedOn: string;
    /**
     * Current state of migration
     */
    state: string;
    /**
     * Status message
     */
    statusMessage: string;
}

/**
 * Validation result for Sql Server to Azure Sql DB migration.
 */
export interface MigrateSqlServerSqlDbTaskOutputValidationResultResponse {
    /**
     * Result identifier
     */
    id: string;
    /**
     * Result type
     * Expected value is 'MigrationValidationOutput'.
     */
    resultType: "MigrationValidationOutput";
}

/**
 * Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
 */
export interface MigrateSqlServerSqlDbTaskPropertiesResponse {
    /**
     * Array of errors. This is ignored if submitted.
     */
    errors: outputs.datamigration.v20180315preview.ODataErrorResponse[];
    /**
     * Task input
     */
    input?: outputs.datamigration.v20180315preview.MigrateSqlServerSqlDbTaskInputResponse;
    /**
     * Task output. This is ignored if submitted.
     */
    output: (outputs.datamigration.v20180315preview.MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse | outputs.datamigration.v20180315preview.MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse | outputs.datamigration.v20180315preview.MigrateSqlServerSqlDbTaskOutputErrorResponse | outputs.datamigration.v20180315preview.MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse | outputs.datamigration.v20180315preview.MigrateSqlServerSqlDbTaskOutputTableLevelResponse | outputs.datamigration.v20180315preview.MigrateSqlServerSqlDbTaskOutputValidationResultResponse)[];
    /**
     * The state of the task. This is ignored if submitted.
     */
    state: string;
    /**
     * Task type.
     * Expected value is 'Migrate.SqlServer.SqlDb'.
     */
    taskType: "Migrate.SqlServer.SqlDb";
}
/**
 * migrateSqlServerSqlDbTaskPropertiesResponseProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskPropertiesResponse
 */
export function migrateSqlServerSqlDbTaskPropertiesResponseProvideDefaults(val: MigrateSqlServerSqlDbTaskPropertiesResponse): MigrateSqlServerSqlDbTaskPropertiesResponse {
    return {
        ...val,
        input: (val.input ? outputs.datamigration.v20180315preview.migrateSqlServerSqlDbTaskInputResponseProvideDefaults(val.input) : undefined),
    };
}

/**
 * Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
 */
export interface MigrateSqlServerSqlMIDatabaseInputResponse {
    /**
     * Backup file share information for backing up this database.
     */
    backupFileShare?: outputs.datamigration.v20180315preview.FileShareResponse;
    /**
     * Name of the database
     */
    name: string;
    /**
     * Name of the database at destination
     */
    restoreDatabaseName: string;
}

/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
 */
export interface MigrateSqlServerSqlMITaskInputResponse {
    /**
     * SAS URI of Azure Storage Account Container to be used for storing backup files.
     */
    backupBlobShare: outputs.datamigration.v20180315preview.BlobShareResponse;
    /**
     * Backup file share information for all selected databases.
     */
    backupFileShare?: outputs.datamigration.v20180315preview.FileShareResponse;
    /**
     * Databases to migrate
     */
    selectedDatabases: outputs.datamigration.v20180315preview.MigrateSqlServerSqlMIDatabaseInputResponse[];
    /**
     * Information for connecting to source
     */
    sourceConnectionInfo: outputs.datamigration.v20180315preview.SqlConnectionInfoResponse;
    /**
     * Information for connecting to target
     */
    targetConnectionInfo: outputs.datamigration.v20180315preview.SqlConnectionInfoResponse;
}
/**
 * migrateSqlServerSqlMITaskInputResponseProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlMITaskInputResponse
 */
export function migrateSqlServerSqlMITaskInputResponseProvideDefaults(val: MigrateSqlServerSqlMITaskInputResponse): MigrateSqlServerSqlMITaskInputResponse {
    return {
        ...val,
        sourceConnectionInfo: outputs.datamigration.v20180315preview.sqlConnectionInfoResponseProvideDefaults(val.sourceConnectionInfo),
        targetConnectionInfo: outputs.datamigration.v20180315preview.sqlConnectionInfoResponseProvideDefaults(val.targetConnectionInfo),
    };
}

/**
 * Database level result for Sql Server to Sql MI migration.
 */
export interface MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse {
    /**
     * Name of the database
     */
    databaseName: string;
    /**
     * Migration end time
     */
    endedOn: string;
    /**
     * Migration exceptions and warnings
     */
    exceptionsAndWarnings: outputs.datamigration.v20180315preview.ReportableExceptionResponse[];
    /**
     * Result identifier
     */
    id: string;
    /**
     * Migration progress message
     */
    message: string;
    /**
     * Result type
     * Expected value is 'DatabaseLevelOutput'.
     */
    resultType: "DatabaseLevelOutput";
    /**
     * Current stage of migration
     */
    stage: string;
    /**
     * Migration start time
     */
    startedOn: string;
    /**
     * Current state of migration
     */
    state: string;
}

/**
 * Task errors for Sql Server to Sql MI migration.
 */
export interface MigrateSqlServerSqlMITaskOutputErrorResponse {
    /**
     * Migration error
     */
    error: outputs.datamigration.v20180315preview.ReportableExceptionResponse;
    /**
     * Result identifier
     */
    id: string;
    /**
     * Result type
     * Expected value is 'ErrorOutput'.
     */
    resultType: "ErrorOutput";
}

/**
 * Migration level result for Sql server to Sql MI migration.
 */
export interface MigrateSqlServerSqlMITaskOutputMigrationLevelResponse {
    /**
     * Selected databases as a map from database name to database id
     */
    databases: {[key: string]: string};
    /**
     * Migration end time
     */
    endedOn: string;
    /**
     * Migration exceptions and warnings.
     */
    exceptionsAndWarnings: outputs.datamigration.v20180315preview.ReportableExceptionResponse[];
    /**
     * Result identifier
     */
    id: string;
    /**
     * Migration progress message
     */
    message: string;
    /**
     * Result type
     * Expected value is 'MigrationLevelOutput'.
     */
    resultType: "MigrationLevelOutput";
    /**
     * Source server brand version
     */
    sourceServerBrandVersion: string;
    /**
     * Source server version
     */
    sourceServerVersion: string;
    /**
     * Migration start time
     */
    startedOn: string;
    /**
     * Current state of migration
     */
    state: string;
    /**
     * Current status of migration
     */
    status: string;
    /**
     * Target server brand version
     */
    targetServerBrandVersion: string;
    /**
     * Target server version
     */
    targetServerVersion: string;
}

/**
 * Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
 */
export interface MigrateSqlServerSqlMITaskPropertiesResponse {
    /**
     * Array of errors. This is ignored if submitted.
     */
    errors: outputs.datamigration.v20180315preview.ODataErrorResponse[];
    /**
     * Task input
     */
    input?: outputs.datamigration.v20180315preview.MigrateSqlServerSqlMITaskInputResponse;
    /**
     * Task output. This is ignored if submitted.
     */
    output: (outputs.datamigration.v20180315preview.MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse | outputs.datamigration.v20180315preview.MigrateSqlServerSqlMITaskOutputErrorResponse | outputs.datamigration.v20180315preview.MigrateSqlServerSqlMITaskOutputMigrationLevelResponse)[];
    /**
     * The state of the task. This is ignored if submitted.
     */
    state: string;
    /**
     * Task type.
     * Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
     */
    taskType: "Migrate.SqlServer.AzureSqlDbMI";
}
/**
 * migrateSqlServerSqlMITaskPropertiesResponseProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlMITaskPropertiesResponse
 */
export function migrateSqlServerSqlMITaskPropertiesResponseProvideDefaults(val: MigrateSqlServerSqlMITaskPropertiesResponse): MigrateSqlServerSqlMITaskPropertiesResponse {
    return {
        ...val,
        input: (val.input ? outputs.datamigration.v20180315preview.migrateSqlServerSqlMITaskInputResponseProvideDefaults(val.input) : undefined),
    };
}

/**
 * Migration validation report result, contains the url for downloading the generated report.
 */
export interface MigrationReportResultResponse {
    /**
     * Migration validation result identifier
     */
    id?: string;
    /**
     * The url of the report.
     */
    reportUrl?: string;
}

/**
 * Types of validations to run after the migration
 */
export interface MigrationValidationOptionsResponse {
    /**
     * Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
     */
    enableDataIntegrityValidation?: boolean;
    /**
     * Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
     */
    enableQueryAnalysisValidation?: boolean;
    /**
     * Allows to compare the schema information between source and target.
     */
    enableSchemaValidation?: boolean;
}

/**
 * Error information in OData format.
 */
export interface ODataErrorResponse {
    /**
     * The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
     */
    code?: string;
    /**
     * Inner errors that caused this error
     */
    details?: outputs.datamigration.v20180315preview.ODataErrorResponse[];
    /**
     * The human-readable description of the error
     */
    message?: string;
}

/**
 * Exception object for all custom exceptions
 */
export interface ReportableExceptionResponse {
    /**
     * The path to the file where exception occurred
     */
    filePath?: string;
    /**
     * Coded numerical value that is assigned to a specific exception
     */
    hResult?: number;
    /**
     * The line number where exception occurred
     */
    lineNumber?: string;
    /**
     * Error message
     */
    message?: string;
    /**
     * Stack trace
     */
    stackTrace?: string;
}

/**
 * An Azure SKU instance
 */
export interface ServiceSkuResponse {
    /**
     * The capacity of the SKU, if it supports scaling
     */
    capacity?: number;
    /**
     * The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
     */
    family?: string;
    /**
     * The unique name of the SKU, such as 'P3'
     */
    name?: string;
    /**
     * The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
     */
    size?: string;
    /**
     * The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
     */
    tier?: string;
}

/**
 * Information for connecting to SQL database server
 */
export interface SqlConnectionInfoResponse {
    /**
     * Additional connection settings
     */
    additionalSettings?: string;
    /**
     * Authentication type to use for connection
     */
    authentication?: string;
    /**
     * Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
     */
    dataSource: string;
    /**
     * Whether to encrypt the connection
     */
    encryptConnection?: boolean;
    /**
     * Password credential.
     */
    password?: string;
    /**
     * Whether to trust the server certificate
     */
    trustServerCertificate?: boolean;
    /**
     * Type of connection info
     * Expected value is 'SqlConnectionInfo'.
     */
    type: "SqlConnectionInfo";
    /**
     * User name
     */
    userName?: string;
}
/**
 * sqlConnectionInfoResponseProvideDefaults sets the appropriate defaults for SqlConnectionInfoResponse
 */
export function sqlConnectionInfoResponseProvideDefaults(val: SqlConnectionInfoResponse): SqlConnectionInfoResponse {
    return {
        ...val,
        encryptConnection: (val.encryptConnection) ?? true,
        trustServerCertificate: (val.trustServerCertificate) ?? false,
    };
}

/**
 * Input for task that validates migration input for SQL to Azure SQL Managed Instance
 */
export interface ValidateMigrationInputSqlServerSqlMITaskInputResponse {
    /**
     * SAS URI of Azure Storage Account Container to be used for storing backup files.
     */
    backupBlobShare: outputs.datamigration.v20180315preview.BlobShareResponse;
    /**
     * Backup file share information for all selected databases.
     */
    backupFileShare?: outputs.datamigration.v20180315preview.FileShareResponse;
    /**
     * Databases to migrate
     */
    selectedDatabases: outputs.datamigration.v20180315preview.MigrateSqlServerSqlMIDatabaseInputResponse[];
    /**
     * Information for connecting to target
     */
    targetConnectionInfo: outputs.datamigration.v20180315preview.SqlConnectionInfoResponse;
}
/**
 * validateMigrationInputSqlServerSqlMITaskInputResponseProvideDefaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskInputResponse
 */
export function validateMigrationInputSqlServerSqlMITaskInputResponseProvideDefaults(val: ValidateMigrationInputSqlServerSqlMITaskInputResponse): ValidateMigrationInputSqlServerSqlMITaskInputResponse {
    return {
        ...val,
        targetConnectionInfo: outputs.datamigration.v20180315preview.sqlConnectionInfoResponseProvideDefaults(val.targetConnectionInfo),
    };
}

/**
 * Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
 */
export interface ValidateMigrationInputSqlServerSqlMITaskOutputResponse {
    /**
     * Errors associated with the BackupFolder path
     */
    backupFolderErrors: outputs.datamigration.v20180315preview.ReportableExceptionResponse[];
    /**
     * Errors associated with backup share user name and password credentials
     */
    backupShareCredentialsErrors: outputs.datamigration.v20180315preview.ReportableExceptionResponse[];
    /**
     * Errors associated with the storage account provided.
     */
    backupStorageAccountErrors: outputs.datamigration.v20180315preview.ReportableExceptionResponse[];
    /**
     * Result identifier
     */
    id: string;
    /**
     * Name of database
     */
    name: string;
    /**
     * Errors associated with the RestoreDatabaseName
     */
    restoreDatabaseNameErrors: outputs.datamigration.v20180315preview.ReportableExceptionResponse[];
}

/**
 * Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
 */
export interface ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse {
    /**
     * Array of errors. This is ignored if submitted.
     */
    errors: outputs.datamigration.v20180315preview.ODataErrorResponse[];
    /**
     * Task input
     */
    input?: outputs.datamigration.v20180315preview.ValidateMigrationInputSqlServerSqlMITaskInputResponse;
    /**
     * Task output. This is ignored if submitted.
     */
    output: outputs.datamigration.v20180315preview.ValidateMigrationInputSqlServerSqlMITaskOutputResponse[];
    /**
     * The state of the task. This is ignored if submitted.
     */
    state: string;
    /**
     * Task type.
     * Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
     */
    taskType: "ValidateMigrationInput.SqlServer.AzureSqlDbMI";
}
/**
 * validateMigrationInputSqlServerSqlMITaskPropertiesResponseProvideDefaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse
 */
export function validateMigrationInputSqlServerSqlMITaskPropertiesResponseProvideDefaults(val: ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse): ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse {
    return {
        ...val,
        input: (val.input ? outputs.datamigration.v20180315preview.validateMigrationInputSqlServerSqlMITaskInputResponseProvideDefaults(val.input) : undefined),
    };
}

