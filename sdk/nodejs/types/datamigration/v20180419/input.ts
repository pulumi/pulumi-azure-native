// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Azure Active Directory Application
 */
export interface AzureActiveDirectoryAppArgs {
    /**
     * Key used to authenticate to the Azure Active Directory Application
     */
    appKey: pulumi.Input<string>;
    /**
     * Application ID of the Azure Active Directory Application
     */
    applicationId: pulumi.Input<string>;
    /**
     * Tenant id of the customer
     */
    tenantId: pulumi.Input<string>;
}

/**
 * Blob container storage information.
 */
export interface BlobShareArgs {
    /**
     * SAS URI of Azure Storage Account Container.
     */
    sasUri: pulumi.Input<string>;
}

/**
 * Input for the task that validates connection to PostgreSQL and source server requirements
 */
export interface ConnectToSourcePostgreSqlSyncTaskInputArgs {
    /**
     * Connection information for source PostgreSQL server
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.PostgreSqlConnectionInfoArgs>;
}

/**
 * Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
 */
export interface ConnectToSourcePostgreSqlSyncTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.ConnectToSourcePostgreSqlSyncTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ConnectToSource.PostgreSql.Sync'.
     */
    taskType: pulumi.Input<"ConnectToSource.PostgreSql.Sync">;
}

/**
 * Properties for the task that validates connection to SQL Server and source server requirements for online migration
 */
export interface ConnectToSourceSqlServerSyncTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.ConnectToSourceSqlServerTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ConnectToSource.SqlServer.Sync'.
     */
    taskType: pulumi.Input<"ConnectToSource.SqlServer.Sync">;
}
/**
 * connectToSourceSqlServerSyncTaskPropertiesArgsProvideDefaults sets the appropriate defaults for ConnectToSourceSqlServerSyncTaskPropertiesArgs
 */
export function connectToSourceSqlServerSyncTaskPropertiesArgsProvideDefaults(val: ConnectToSourceSqlServerSyncTaskPropertiesArgs): ConnectToSourceSqlServerSyncTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.connectToSourceSqlServerTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Input for the task that validates connection to SQL Server and also validates source server requirements
 */
export interface ConnectToSourceSqlServerTaskInputArgs {
    /**
     * Permission group for validations
     */
    checkPermissionsGroup?: pulumi.Input<string | enums.datamigration.v20180419.ServerLevelPermissionsGroup>;
    /**
     * Flag for whether to collect agent jobs from source server.
     */
    collectAgentJobs?: pulumi.Input<boolean>;
    /**
     * Flag for whether to collect logins from source server.
     */
    collectLogins?: pulumi.Input<boolean>;
    /**
     * Connection information for Source SQL Server
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
}
/**
 * connectToSourceSqlServerTaskInputArgsProvideDefaults sets the appropriate defaults for ConnectToSourceSqlServerTaskInputArgs
 */
export function connectToSourceSqlServerTaskInputArgsProvideDefaults(val: ConnectToSourceSqlServerTaskInputArgs): ConnectToSourceSqlServerTaskInputArgs {
    return {
        ...val,
        collectAgentJobs: (val.collectAgentJobs) ?? false,
        collectLogins: (val.collectLogins) ?? false,
        sourceConnectionInfo: pulumi.output(val.sourceConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that validates connection to SQL Server and also validates source server requirements
 */
export interface ConnectToSourceSqlServerTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.ConnectToSourceSqlServerTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ConnectToSource.SqlServer'.
     */
    taskType: pulumi.Input<"ConnectToSource.SqlServer">;
}
/**
 * connectToSourceSqlServerTaskPropertiesArgsProvideDefaults sets the appropriate defaults for ConnectToSourceSqlServerTaskPropertiesArgs
 */
export function connectToSourceSqlServerTaskPropertiesArgsProvideDefaults(val: ConnectToSourceSqlServerTaskPropertiesArgs): ConnectToSourceSqlServerTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.connectToSourceSqlServerTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Input for the task that validates connection to Azure Database for MySQL and target server requirements
 */
export interface ConnectToTargetAzureDbForMySqlTaskInputArgs {
    /**
     * Connection information for source MySQL server
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.MySqlConnectionInfoArgs>;
    /**
     * Connection information for target Azure Database for MySQL server
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.MySqlConnectionInfoArgs>;
}

/**
 * Properties for the task that validates connection to Azure Database for MySQL and target server requirements
 */
export interface ConnectToTargetAzureDbForMySqlTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.ConnectToTargetAzureDbForMySqlTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ConnectToTarget.AzureDbForMySql'.
     */
    taskType: pulumi.Input<"ConnectToTarget.AzureDbForMySql">;
}

/**
 * Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
 */
export interface ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs {
    /**
     * Connection information for source PostgreSQL server
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.PostgreSqlConnectionInfoArgs>;
    /**
     * Connection information for target Azure Database for PostgreSQL server
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.PostgreSqlConnectionInfoArgs>;
}

/**
 * Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
 */
export interface ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ConnectToTarget.AzureDbForPostgreSql.Sync'.
     */
    taskType: pulumi.Input<"ConnectToTarget.AzureDbForPostgreSql.Sync">;
}

/**
 * Input for the task that validates connection to SQL DB and target server requirements
 */
export interface ConnectToTargetSqlDbTaskInputArgs {
    /**
     * Connection information for target SQL DB
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
}
/**
 * connectToTargetSqlDbTaskInputArgsProvideDefaults sets the appropriate defaults for ConnectToTargetSqlDbTaskInputArgs
 */
export function connectToTargetSqlDbTaskInputArgsProvideDefaults(val: ConnectToTargetSqlDbTaskInputArgs): ConnectToTargetSqlDbTaskInputArgs {
    return {
        ...val,
        targetConnectionInfo: pulumi.output(val.targetConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that validates connection to SQL DB and target server requirements
 */
export interface ConnectToTargetSqlDbTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.ConnectToTargetSqlDbTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ConnectToTarget.SqlDb'.
     */
    taskType: pulumi.Input<"ConnectToTarget.SqlDb">;
}
/**
 * connectToTargetSqlDbTaskPropertiesArgsProvideDefaults sets the appropriate defaults for ConnectToTargetSqlDbTaskPropertiesArgs
 */
export function connectToTargetSqlDbTaskPropertiesArgsProvideDefaults(val: ConnectToTargetSqlDbTaskPropertiesArgs): ConnectToTargetSqlDbTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.connectToTargetSqlDbTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
 */
export interface ConnectToTargetSqlMISyncTaskInputArgs {
    /**
     * Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
     */
    azureApp: pulumi.Input<inputs.datamigration.v20180419.AzureActiveDirectoryAppArgs>;
    /**
     * Connection information for Azure SQL Database Managed Instance
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.MiSqlConnectionInfoArgs>;
}

/**
 * Properties for the task that validates connection to Azure SQL Database Managed Instance
 */
export interface ConnectToTargetSqlMISyncTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.ConnectToTargetSqlMISyncTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ConnectToTarget.AzureSqlDbMI.Sync.LRS'.
     */
    taskType: pulumi.Input<"ConnectToTarget.AzureSqlDbMI.Sync.LRS">;
}

/**
 * Input for the task that validates connection to Azure SQL Database Managed Instance.
 */
export interface ConnectToTargetSqlMITaskInputArgs {
    /**
     * Connection information for target SQL Server
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
}
/**
 * connectToTargetSqlMITaskInputArgsProvideDefaults sets the appropriate defaults for ConnectToTargetSqlMITaskInputArgs
 */
export function connectToTargetSqlMITaskInputArgsProvideDefaults(val: ConnectToTargetSqlMITaskInputArgs): ConnectToTargetSqlMITaskInputArgs {
    return {
        ...val,
        targetConnectionInfo: pulumi.output(val.targetConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that validates connection to Azure SQL Database Managed Instance
 */
export interface ConnectToTargetSqlMITaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.ConnectToTargetSqlMITaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ConnectToTarget.AzureSqlDbMI'.
     */
    taskType: pulumi.Input<"ConnectToTarget.AzureSqlDbMI">;
}
/**
 * connectToTargetSqlMITaskPropertiesArgsProvideDefaults sets the appropriate defaults for ConnectToTargetSqlMITaskPropertiesArgs
 */
export function connectToTargetSqlMITaskPropertiesArgsProvideDefaults(val: ConnectToTargetSqlMITaskPropertiesArgs): ConnectToTargetSqlMITaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.connectToTargetSqlMITaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Input for the task that validates connection to Azure SQL DB and target server requirements
 */
export interface ConnectToTargetSqlSqlDbSyncTaskInputArgs {
    /**
     * Connection information for source SQL Server
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * Connection information for target SQL DB
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
}
/**
 * connectToTargetSqlSqlDbSyncTaskInputArgsProvideDefaults sets the appropriate defaults for ConnectToTargetSqlSqlDbSyncTaskInputArgs
 */
export function connectToTargetSqlSqlDbSyncTaskInputArgsProvideDefaults(val: ConnectToTargetSqlSqlDbSyncTaskInputArgs): ConnectToTargetSqlSqlDbSyncTaskInputArgs {
    return {
        ...val,
        sourceConnectionInfo: pulumi.output(val.sourceConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
        targetConnectionInfo: pulumi.output(val.targetConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that validates connection to SQL DB and target server requirements for online migration
 */
export interface ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.ConnectToTargetSqlSqlDbSyncTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ConnectToTarget.SqlDb.Sync'.
     */
    taskType: pulumi.Input<"ConnectToTarget.SqlDb.Sync">;
}
/**
 * connectToTargetSqlSqlDbSyncTaskPropertiesArgsProvideDefaults sets the appropriate defaults for ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs
 */
export function connectToTargetSqlSqlDbSyncTaskPropertiesArgsProvideDefaults(val: ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs): ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.connectToTargetSqlSqlDbSyncTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Project Database Details
 */
export interface DatabaseInfoArgs {
    /**
     * Name of the database
     */
    sourceDatabaseName: pulumi.Input<string>;
}

/**
 * File share information with Path, Username, and Password.
 */
export interface FileShareArgs {
    /**
     * Password credential used to connect to the share location.
     */
    password?: pulumi.Input<string>;
    /**
     * The folder path for this share.
     */
    path: pulumi.Input<string>;
    /**
     * User name credential to connect to the share location
     */
    userName?: pulumi.Input<string>;
}

/**
 * Input for the task that gets TDE certificates in Base64 encoded format.
 */
export interface GetTdeCertificatesSqlTaskInputArgs {
    /**
     * Backup file share information for file share to be used for temporarily storing files.
     */
    backupFileShare: pulumi.Input<inputs.datamigration.v20180419.FileShareArgs>;
    /**
     * Connection information for SQL Server
     */
    connectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * List containing certificate names and corresponding password to use for encrypting the exported certificate.
     */
    selectedCertificates: pulumi.Input<pulumi.Input<inputs.datamigration.v20180419.SelectedCertificateInputArgs>[]>;
}
/**
 * getTdeCertificatesSqlTaskInputArgsProvideDefaults sets the appropriate defaults for GetTdeCertificatesSqlTaskInputArgs
 */
export function getTdeCertificatesSqlTaskInputArgsProvideDefaults(val: GetTdeCertificatesSqlTaskInputArgs): GetTdeCertificatesSqlTaskInputArgs {
    return {
        ...val,
        connectionInfo: pulumi.output(val.connectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that gets TDE certificates in Base64 encoded format.
 */
export interface GetTdeCertificatesSqlTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.GetTdeCertificatesSqlTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'GetTDECertificates.Sql'.
     */
    taskType: pulumi.Input<"GetTDECertificates.Sql">;
}
/**
 * getTdeCertificatesSqlTaskPropertiesArgsProvideDefaults sets the appropriate defaults for GetTdeCertificatesSqlTaskPropertiesArgs
 */
export function getTdeCertificatesSqlTaskPropertiesArgsProvideDefaults(val: GetTdeCertificatesSqlTaskPropertiesArgs): GetTdeCertificatesSqlTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.getTdeCertificatesSqlTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Input for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlSyncTaskInputArgs {
    /**
     * List of source database names to collect tables for
     */
    selectedSourceDatabases: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of target database names to collect tables for
     */
    selectedTargetDatabases: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Connection information for SQL Server
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * Connection information for SQL DB
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
}
/**
 * getUserTablesSqlSyncTaskInputArgsProvideDefaults sets the appropriate defaults for GetUserTablesSqlSyncTaskInputArgs
 */
export function getUserTablesSqlSyncTaskInputArgsProvideDefaults(val: GetUserTablesSqlSyncTaskInputArgs): GetUserTablesSqlSyncTaskInputArgs {
    return {
        ...val,
        sourceConnectionInfo: pulumi.output(val.sourceConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
        targetConnectionInfo: pulumi.output(val.targetConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlSyncTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.GetUserTablesSqlSyncTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'GetUserTables.AzureSqlDb.Sync'.
     */
    taskType: pulumi.Input<"GetUserTables.AzureSqlDb.Sync">;
}
/**
 * getUserTablesSqlSyncTaskPropertiesArgsProvideDefaults sets the appropriate defaults for GetUserTablesSqlSyncTaskPropertiesArgs
 */
export function getUserTablesSqlSyncTaskPropertiesArgsProvideDefaults(val: GetUserTablesSqlSyncTaskPropertiesArgs): GetUserTablesSqlSyncTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.getUserTablesSqlSyncTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Input for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlTaskInputArgs {
    /**
     * Connection information for SQL Server
     */
    connectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * List of database names to collect tables for
     */
    selectedDatabases: pulumi.Input<pulumi.Input<string>[]>;
}
/**
 * getUserTablesSqlTaskInputArgsProvideDefaults sets the appropriate defaults for GetUserTablesSqlTaskInputArgs
 */
export function getUserTablesSqlTaskInputArgsProvideDefaults(val: GetUserTablesSqlTaskInputArgs): GetUserTablesSqlTaskInputArgs {
    return {
        ...val,
        connectionInfo: pulumi.output(val.connectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.GetUserTablesSqlTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'GetUserTables.Sql'.
     */
    taskType: pulumi.Input<"GetUserTables.Sql">;
}
/**
 * getUserTablesSqlTaskPropertiesArgsProvideDefaults sets the appropriate defaults for GetUserTablesSqlTaskPropertiesArgs
 */
export function getUserTablesSqlTaskPropertiesArgsProvideDefaults(val: GetUserTablesSqlTaskPropertiesArgs): GetUserTablesSqlTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.getUserTablesSqlTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Properties required to create a connection to Azure SQL database Managed instance
 */
export interface MiSqlConnectionInfoArgs {
    /**
     * Resource id for Azure SQL database Managed instance
     */
    managedInstanceResourceId: pulumi.Input<string>;
    /**
     * Password credential.
     */
    password?: pulumi.Input<string>;
    /**
     * Type of connection info
     * Expected value is 'MiSqlConnectionInfo'.
     */
    type: pulumi.Input<"MiSqlConnectionInfo">;
    /**
     * User name
     */
    userName?: pulumi.Input<string>;
}

/**
 * Database specific information for MySQL to Azure Database for MySQL migration task inputs
 */
export interface MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs {
    /**
     * Migration settings which tune the migration behavior
     */
    migrationSetting?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the database
     */
    name?: pulumi.Input<string>;
    /**
     * Source settings to tune source endpoint migration behavior
     */
    sourceSetting?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of target database. Note: Target database will be truncated before starting migration.
     */
    targetDatabaseName?: pulumi.Input<string>;
    /**
     * Target settings to tune target endpoint migration behavior
     */
    targetSetting?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskInputArgs {
    /**
     * Databases to migrate
     */
    selectedDatabases: pulumi.Input<pulumi.Input<inputs.datamigration.v20180419.MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs>[]>;
    /**
     * Connection information for source MySQL
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.MySqlConnectionInfoArgs>;
    /**
     * Connection information for target Azure Database for MySQL
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.MySqlConnectionInfoArgs>;
}

/**
 * Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.MigrateMySqlAzureDbForMySqlSyncTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'Migrate.MySql.AzureDbForMySql.Sync'.
     */
    taskType: pulumi.Input<"Migrate.MySql.AzureDbForMySql.Sync">;
}

/**
 * Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs {
    /**
     * Migration settings which tune the migration behavior
     */
    migrationSetting?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the database
     */
    name?: pulumi.Input<string>;
    /**
     * Source settings to tune source endpoint migration behavior
     */
    sourceSetting?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of target database. Note: Target database will be truncated before starting migration.
     */
    targetDatabaseName?: pulumi.Input<string>;
    /**
     * Target settings to tune target endpoint migration behavior
     */
    targetSetting?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs {
    /**
     * Databases to migrate
     */
    selectedDatabases: pulumi.Input<pulumi.Input<inputs.datamigration.v20180419.MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs>[]>;
    /**
     * Connection information for source PostgreSQL
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.PostgreSqlConnectionInfoArgs>;
    /**
     * Connection information for target Azure Database for PostgreSQL
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.PostgreSqlConnectionInfoArgs>;
}

/**
 * Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'Migrate.PostgreSql.AzureDbForPostgreSql.Sync'.
     */
    taskType: pulumi.Input<"Migrate.PostgreSql.AzureDbForPostgreSql.Sync">;
}

/**
 * Database specific information for SQL to Azure SQL DB migration task inputs
 */
export interface MigrateSqlServerSqlDbDatabaseInputArgs {
    /**
     * Whether to set database read only before migration
     */
    makeSourceDbReadOnly?: pulumi.Input<boolean>;
    /**
     * Name of the database
     */
    name?: pulumi.Input<string>;
    /**
     * Mapping of source to target tables
     */
    tableMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of target database. Note: Target database will be truncated before starting migration.
     */
    targetDatabaseName?: pulumi.Input<string>;
}

/**
 * Database specific information for SQL to Azure SQL DB sync migration task inputs
 */
export interface MigrateSqlServerSqlDbSyncDatabaseInputArgs {
    /**
     * Unique identifier for database
     */
    id?: pulumi.Input<string>;
    /**
     * Migration settings which tune the migration behavior
     */
    migrationSetting?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of database
     */
    name?: pulumi.Input<string>;
    /**
     * Schema name to be migrated
     */
    schemaName?: pulumi.Input<string>;
    /**
     * Source settings to tune source endpoint migration behavior
     */
    sourceSetting?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Mapping of source to target tables
     */
    tableMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Target database name
     */
    targetDatabaseName?: pulumi.Input<string>;
    /**
     * Target settings to tune target endpoint migration behavior
     */
    targetSetting?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
 */
export interface MigrateSqlServerSqlDbSyncTaskInputArgs {
    /**
     * Databases to migrate
     */
    selectedDatabases: pulumi.Input<pulumi.Input<inputs.datamigration.v20180419.MigrateSqlServerSqlDbSyncDatabaseInputArgs>[]>;
    /**
     * Information for connecting to source
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * Information for connecting to target
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * Validation options
     */
    validationOptions?: pulumi.Input<inputs.datamigration.v20180419.MigrationValidationOptionsArgs>;
}
/**
 * migrateSqlServerSqlDbSyncTaskInputArgsProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlDbSyncTaskInputArgs
 */
export function migrateSqlServerSqlDbSyncTaskInputArgsProvideDefaults(val: MigrateSqlServerSqlDbSyncTaskInputArgs): MigrateSqlServerSqlDbSyncTaskInputArgs {
    return {
        ...val,
        sourceConnectionInfo: pulumi.output(val.sourceConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
        targetConnectionInfo: pulumi.output(val.targetConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
 */
export interface MigrateSqlServerSqlDbSyncTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.MigrateSqlServerSqlDbSyncTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'Migrate.SqlServer.AzureSqlDb.Sync'.
     */
    taskType: pulumi.Input<"Migrate.SqlServer.AzureSqlDb.Sync">;
}
/**
 * migrateSqlServerSqlDbSyncTaskPropertiesArgsProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlDbSyncTaskPropertiesArgs
 */
export function migrateSqlServerSqlDbSyncTaskPropertiesArgsProvideDefaults(val: MigrateSqlServerSqlDbSyncTaskPropertiesArgs): MigrateSqlServerSqlDbSyncTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.migrateSqlServerSqlDbSyncTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
 */
export interface MigrateSqlServerSqlDbTaskInputArgs {
    /**
     * Databases to migrate
     */
    selectedDatabases: pulumi.Input<pulumi.Input<inputs.datamigration.v20180419.MigrateSqlServerSqlDbDatabaseInputArgs>[]>;
    /**
     * Information for connecting to source
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * Information for connecting to target
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * Options for enabling various post migration validations. Available options, 
     *  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data. 
     *  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
     */
    validationOptions?: pulumi.Input<inputs.datamigration.v20180419.MigrationValidationOptionsArgs>;
}
/**
 * migrateSqlServerSqlDbTaskInputArgsProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskInputArgs
 */
export function migrateSqlServerSqlDbTaskInputArgsProvideDefaults(val: MigrateSqlServerSqlDbTaskInputArgs): MigrateSqlServerSqlDbTaskInputArgs {
    return {
        ...val,
        sourceConnectionInfo: pulumi.output(val.sourceConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
        targetConnectionInfo: pulumi.output(val.targetConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
 */
export interface MigrateSqlServerSqlDbTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.MigrateSqlServerSqlDbTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'Migrate.SqlServer.SqlDb'.
     */
    taskType: pulumi.Input<"Migrate.SqlServer.SqlDb">;
}
/**
 * migrateSqlServerSqlDbTaskPropertiesArgsProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskPropertiesArgs
 */
export function migrateSqlServerSqlDbTaskPropertiesArgsProvideDefaults(val: MigrateSqlServerSqlDbTaskPropertiesArgs): MigrateSqlServerSqlDbTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.migrateSqlServerSqlDbTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
 */
export interface MigrateSqlServerSqlMIDatabaseInputArgs {
    /**
     * The list of backup files to be used in case of existing backups.
     */
    backupFilePaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Backup file share information for backing up this database.
     */
    backupFileShare?: pulumi.Input<inputs.datamigration.v20180419.FileShareArgs>;
    /**
     * Name of the database
     */
    name: pulumi.Input<string>;
    /**
     * Name of the database at destination
     */
    restoreDatabaseName: pulumi.Input<string>;
}

/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
 */
export interface MigrateSqlServerSqlMISyncTaskInputArgs {
    /**
     * Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
     */
    azureApp: pulumi.Input<inputs.datamigration.v20180419.AzureActiveDirectoryAppArgs>;
    /**
     * Backup file share information for all selected databases.
     */
    backupFileShare?: pulumi.Input<inputs.datamigration.v20180419.FileShareArgs>;
    /**
     * Databases to migrate
     */
    selectedDatabases: pulumi.Input<pulumi.Input<inputs.datamigration.v20180419.MigrateSqlServerSqlMIDatabaseInputArgs>[]>;
    /**
     * Connection information for source SQL Server
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * Fully qualified resourceId of storage
     */
    storageResourceId: pulumi.Input<string>;
    /**
     * Connection information for Azure SQL Database Managed Instance
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.MiSqlConnectionInfoArgs>;
}
/**
 * migrateSqlServerSqlMISyncTaskInputArgsProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlMISyncTaskInputArgs
 */
export function migrateSqlServerSqlMISyncTaskInputArgsProvideDefaults(val: MigrateSqlServerSqlMISyncTaskInputArgs): MigrateSqlServerSqlMISyncTaskInputArgs {
    return {
        ...val,
        sourceConnectionInfo: pulumi.output(val.sourceConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
 */
export interface MigrateSqlServerSqlMISyncTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.MigrateSqlServerSqlMISyncTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'.
     */
    taskType: pulumi.Input<"Migrate.SqlServer.AzureSqlDbMI.Sync.LRS">;
}
/**
 * migrateSqlServerSqlMISyncTaskPropertiesArgsProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlMISyncTaskPropertiesArgs
 */
export function migrateSqlServerSqlMISyncTaskPropertiesArgsProvideDefaults(val: MigrateSqlServerSqlMISyncTaskPropertiesArgs): MigrateSqlServerSqlMISyncTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.migrateSqlServerSqlMISyncTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
 */
export interface MigrateSqlServerSqlMITaskInputArgs {
    /**
     * SAS URI of Azure Storage Account Container to be used for storing backup files.
     */
    backupBlobShare: pulumi.Input<inputs.datamigration.v20180419.BlobShareArgs>;
    /**
     * Backup file share information for all selected databases.
     */
    backupFileShare?: pulumi.Input<inputs.datamigration.v20180419.FileShareArgs>;
    /**
     * Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
     */
    backupMode?: pulumi.Input<string | enums.datamigration.v20180419.BackupMode>;
    /**
     * Agent Jobs to migrate.
     */
    selectedAgentJobs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Databases to migrate
     */
    selectedDatabases: pulumi.Input<pulumi.Input<inputs.datamigration.v20180419.MigrateSqlServerSqlMIDatabaseInputArgs>[]>;
    /**
     * Logins to migrate.
     */
    selectedLogins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Information for connecting to source
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * Information for connecting to target
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
}
/**
 * migrateSqlServerSqlMITaskInputArgsProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlMITaskInputArgs
 */
export function migrateSqlServerSqlMITaskInputArgsProvideDefaults(val: MigrateSqlServerSqlMITaskInputArgs): MigrateSqlServerSqlMITaskInputArgs {
    return {
        ...val,
        sourceConnectionInfo: pulumi.output(val.sourceConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
        targetConnectionInfo: pulumi.output(val.targetConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
 */
export interface MigrateSqlServerSqlMITaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.MigrateSqlServerSqlMITaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
     */
    taskType: pulumi.Input<"Migrate.SqlServer.AzureSqlDbMI">;
}
/**
 * migrateSqlServerSqlMITaskPropertiesArgsProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlMITaskPropertiesArgs
 */
export function migrateSqlServerSqlMITaskPropertiesArgsProvideDefaults(val: MigrateSqlServerSqlMITaskPropertiesArgs): MigrateSqlServerSqlMITaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.migrateSqlServerSqlMITaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Types of validations to run after the migration
 */
export interface MigrationValidationOptionsArgs {
    /**
     * Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
     */
    enableDataIntegrityValidation?: pulumi.Input<boolean>;
    /**
     * Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
     */
    enableQueryAnalysisValidation?: pulumi.Input<boolean>;
    /**
     * Allows to compare the schema information between source and target.
     */
    enableSchemaValidation?: pulumi.Input<boolean>;
}

/**
 * Information for connecting to MySQL server
 */
export interface MySqlConnectionInfoArgs {
    /**
     * Password credential.
     */
    password?: pulumi.Input<string>;
    /**
     * Port for Server
     */
    port: pulumi.Input<number>;
    /**
     * Name of the server
     */
    serverName: pulumi.Input<string>;
    /**
     * Type of connection info
     * Expected value is 'MySqlConnectionInfo'.
     */
    type: pulumi.Input<"MySqlConnectionInfo">;
    /**
     * User name
     */
    userName?: pulumi.Input<string>;
}

/**
 * Information for connecting to PostgreSQL server
 */
export interface PostgreSqlConnectionInfoArgs {
    /**
     * Name of the database
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Password credential.
     */
    password?: pulumi.Input<string>;
    /**
     * Port for Server
     */
    port: pulumi.Input<number>;
    /**
     * Name of the server
     */
    serverName: pulumi.Input<string>;
    /**
     * Type of connection info
     * Expected value is 'PostgreSqlConnectionInfo'.
     */
    type: pulumi.Input<"PostgreSqlConnectionInfo">;
    /**
     * User name
     */
    userName?: pulumi.Input<string>;
}

/**
 * Info for certificate to be exported for TDE enabled databases.
 */
export interface SelectedCertificateInputArgs {
    /**
     * Name of certificate to be exported.
     */
    certificateName: pulumi.Input<string>;
    /**
     * Password to use for encrypting the exported certificate.
     */
    password: pulumi.Input<string>;
}

/**
 * An Azure SKU instance
 */
export interface ServiceSkuArgs {
    /**
     * The capacity of the SKU, if it supports scaling
     */
    capacity?: pulumi.Input<number>;
    /**
     * The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
     */
    family?: pulumi.Input<string>;
    /**
     * The unique name of the SKU, such as 'P3'
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
     */
    size?: pulumi.Input<string>;
    /**
     * The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
     */
    tier?: pulumi.Input<string>;
}

/**
 * Information for connecting to SQL database server
 */
export interface SqlConnectionInfoArgs {
    /**
     * Additional connection settings
     */
    additionalSettings?: pulumi.Input<string>;
    /**
     * Authentication type to use for connection
     */
    authentication?: pulumi.Input<string | enums.datamigration.v20180419.AuthenticationType>;
    /**
     * Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
     */
    dataSource: pulumi.Input<string>;
    /**
     * Whether to encrypt the connection
     */
    encryptConnection?: pulumi.Input<boolean>;
    /**
     * Password credential.
     */
    password?: pulumi.Input<string>;
    /**
     * Server platform type for connection
     */
    platform?: pulumi.Input<string | enums.datamigration.v20180419.SqlSourcePlatform>;
    /**
     * Whether to trust the server certificate
     */
    trustServerCertificate?: pulumi.Input<boolean>;
    /**
     * Type of connection info
     * Expected value is 'SqlConnectionInfo'.
     */
    type: pulumi.Input<"SqlConnectionInfo">;
    /**
     * User name
     */
    userName?: pulumi.Input<string>;
}
/**
 * sqlConnectionInfoArgsProvideDefaults sets the appropriate defaults for SqlConnectionInfoArgs
 */
export function sqlConnectionInfoArgsProvideDefaults(val: SqlConnectionInfoArgs): SqlConnectionInfoArgs {
    return {
        ...val,
        encryptConnection: (val.encryptConnection) ?? true,
        trustServerCertificate: (val.trustServerCertificate) ?? false,
    };
}

/**
 * Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
 */
export interface ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.ValidateSyncMigrationInputSqlServerTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ValidateMigrationInput.SqlServer.SqlDb.Sync'.
     */
    taskType: pulumi.Input<"ValidateMigrationInput.SqlServer.SqlDb.Sync">;
}
/**
 * validateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgsProvideDefaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs
 */
export function validateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgsProvideDefaults(val: ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs): ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.validateSyncMigrationInputSqlServerTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
 */
export interface ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs {
    /**
     * Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
     */
    azureApp: pulumi.Input<inputs.datamigration.v20180419.AzureActiveDirectoryAppArgs>;
    /**
     * Backup file share information for all selected databases.
     */
    backupFileShare?: pulumi.Input<inputs.datamigration.v20180419.FileShareArgs>;
    /**
     * Databases to migrate
     */
    selectedDatabases: pulumi.Input<pulumi.Input<inputs.datamigration.v20180419.MigrateSqlServerSqlMIDatabaseInputArgs>[]>;
    /**
     * Connection information for source SQL Server
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * Fully qualified resourceId of storage
     */
    storageResourceId: pulumi.Input<string>;
    /**
     * Connection information for Azure SQL Database Managed Instance
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.MiSqlConnectionInfoArgs>;
}
/**
 * validateMigrationInputSqlServerSqlMISyncTaskInputArgsProvideDefaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs
 */
export function validateMigrationInputSqlServerSqlMISyncTaskInputArgsProvideDefaults(val: ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs): ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs {
    return {
        ...val,
        sourceConnectionInfo: pulumi.output(val.sourceConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
 */
export interface ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'.
     */
    taskType: pulumi.Input<"ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS">;
}
/**
 * validateMigrationInputSqlServerSqlMISyncTaskPropertiesArgsProvideDefaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs
 */
export function validateMigrationInputSqlServerSqlMISyncTaskPropertiesArgsProvideDefaults(val: ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs): ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.validateMigrationInputSqlServerSqlMISyncTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Input for task that validates migration input for SQL to Azure SQL Managed Instance
 */
export interface ValidateMigrationInputSqlServerSqlMITaskInputArgs {
    /**
     * SAS URI of Azure Storage Account Container to be used for storing backup files.
     */
    backupBlobShare: pulumi.Input<inputs.datamigration.v20180419.BlobShareArgs>;
    /**
     * Backup file share information for all selected databases.
     */
    backupFileShare?: pulumi.Input<inputs.datamigration.v20180419.FileShareArgs>;
    /**
     * Backup Mode to specify whether to use existing backup or create new backup.
     */
    backupMode?: pulumi.Input<string | enums.datamigration.v20180419.BackupMode>;
    /**
     * Databases to migrate
     */
    selectedDatabases: pulumi.Input<pulumi.Input<inputs.datamigration.v20180419.MigrateSqlServerSqlMIDatabaseInputArgs>[]>;
    /**
     * Logins to migrate
     */
    selectedLogins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Information for connecting to source
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * Information for connecting to target
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
}
/**
 * validateMigrationInputSqlServerSqlMITaskInputArgsProvideDefaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskInputArgs
 */
export function validateMigrationInputSqlServerSqlMITaskInputArgsProvideDefaults(val: ValidateMigrationInputSqlServerSqlMITaskInputArgs): ValidateMigrationInputSqlServerSqlMITaskInputArgs {
    return {
        ...val,
        sourceConnectionInfo: pulumi.output(val.sourceConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
        targetConnectionInfo: pulumi.output(val.targetConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
 */
export interface ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20180419.ValidateMigrationInputSqlServerSqlMITaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
     */
    taskType: pulumi.Input<"ValidateMigrationInput.SqlServer.AzureSqlDbMI">;
}
/**
 * validateMigrationInputSqlServerSqlMITaskPropertiesArgsProvideDefaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs
 */
export function validateMigrationInputSqlServerSqlMITaskPropertiesArgsProvideDefaults(val: ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs): ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20180419.validateMigrationInputSqlServerSqlMITaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Input for task that validates migration input for SQL sync migrations
 */
export interface ValidateSyncMigrationInputSqlServerTaskInputArgs {
    /**
     * Databases to migrate
     */
    selectedDatabases: pulumi.Input<pulumi.Input<inputs.datamigration.v20180419.MigrateSqlServerSqlDbSyncDatabaseInputArgs>[]>;
    /**
     * Information for connecting to source SQL server
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
    /**
     * Information for connecting to target
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20180419.SqlConnectionInfoArgs>;
}
/**
 * validateSyncMigrationInputSqlServerTaskInputArgsProvideDefaults sets the appropriate defaults for ValidateSyncMigrationInputSqlServerTaskInputArgs
 */
export function validateSyncMigrationInputSqlServerTaskInputArgsProvideDefaults(val: ValidateSyncMigrationInputSqlServerTaskInputArgs): ValidateSyncMigrationInputSqlServerTaskInputArgs {
    return {
        ...val,
        sourceConnectionInfo: pulumi.output(val.sourceConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
        targetConnectionInfo: pulumi.output(val.targetConnectionInfo).apply(inputs.datamigration.v20180419.sqlConnectionInfoArgsProvideDefaults),
    };
}

