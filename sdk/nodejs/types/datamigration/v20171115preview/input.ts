// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Input for the task that validates connection to SQL Server and also validates source server requirements
 */
export interface ConnectToSourceSqlServerTaskInputArgs {
    /**
     * Permission group for validations
     */
    checkPermissionsGroup?: pulumi.Input<enums.datamigration.v20171115preview.ServerLevelPermissionsGroup>;
    /**
     * Connection information for Source SQL Server
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20171115preview.SqlConnectionInfoArgs>;
}
/**
 * connectToSourceSqlServerTaskInputArgsProvideDefaults sets the appropriate defaults for ConnectToSourceSqlServerTaskInputArgs
 */
export function connectToSourceSqlServerTaskInputArgsProvideDefaults(val: ConnectToSourceSqlServerTaskInputArgs): ConnectToSourceSqlServerTaskInputArgs {
    return {
        ...val,
        sourceConnectionInfo: pulumi.output(val.sourceConnectionInfo).apply(inputs.datamigration.v20171115preview.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that validates connection to SQL Server and also validates source server requirements
 */
export interface ConnectToSourceSqlServerTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20171115preview.ConnectToSourceSqlServerTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ConnectToSource.SqlServer'.
     */
    taskType: pulumi.Input<"ConnectToSource.SqlServer">;
}
/**
 * connectToSourceSqlServerTaskPropertiesArgsProvideDefaults sets the appropriate defaults for ConnectToSourceSqlServerTaskPropertiesArgs
 */
export function connectToSourceSqlServerTaskPropertiesArgsProvideDefaults(val: ConnectToSourceSqlServerTaskPropertiesArgs): ConnectToSourceSqlServerTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20171115preview.connectToSourceSqlServerTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Input for the task that validates connection to SQL DB and target server requirements
 */
export interface ConnectToTargetSqlDbTaskInputArgs {
    /**
     * Connection information for target SQL DB
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20171115preview.SqlConnectionInfoArgs>;
}
/**
 * connectToTargetSqlDbTaskInputArgsProvideDefaults sets the appropriate defaults for ConnectToTargetSqlDbTaskInputArgs
 */
export function connectToTargetSqlDbTaskInputArgsProvideDefaults(val: ConnectToTargetSqlDbTaskInputArgs): ConnectToTargetSqlDbTaskInputArgs {
    return {
        ...val,
        targetConnectionInfo: pulumi.output(val.targetConnectionInfo).apply(inputs.datamigration.v20171115preview.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that validates connection to SQL DB and target server requirements
 */
export interface ConnectToTargetSqlDbTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20171115preview.ConnectToTargetSqlDbTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'ConnectToTarget.SqlDb'.
     */
    taskType: pulumi.Input<"ConnectToTarget.SqlDb">;
}
/**
 * connectToTargetSqlDbTaskPropertiesArgsProvideDefaults sets the appropriate defaults for ConnectToTargetSqlDbTaskPropertiesArgs
 */
export function connectToTargetSqlDbTaskPropertiesArgsProvideDefaults(val: ConnectToTargetSqlDbTaskPropertiesArgs): ConnectToTargetSqlDbTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20171115preview.connectToTargetSqlDbTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Project Database Details
 */
export interface DatabaseInfoArgs {
    /**
     * Name of the database
     */
    sourceDatabaseName: pulumi.Input<string>;
}

/**
 * Input for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlTaskInputArgs {
    /**
     * Connection information for SQL Server
     */
    connectionInfo: pulumi.Input<inputs.datamigration.v20171115preview.SqlConnectionInfoArgs>;
    /**
     * List of database names to collect tables for
     */
    selectedDatabases: pulumi.Input<pulumi.Input<string>[]>;
}
/**
 * getUserTablesSqlTaskInputArgsProvideDefaults sets the appropriate defaults for GetUserTablesSqlTaskInputArgs
 */
export function getUserTablesSqlTaskInputArgsProvideDefaults(val: GetUserTablesSqlTaskInputArgs): GetUserTablesSqlTaskInputArgs {
    return {
        ...val,
        connectionInfo: pulumi.output(val.connectionInfo).apply(inputs.datamigration.v20171115preview.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20171115preview.GetUserTablesSqlTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'GetUserTables.Sql'.
     */
    taskType: pulumi.Input<"GetUserTables.Sql">;
}
/**
 * getUserTablesSqlTaskPropertiesArgsProvideDefaults sets the appropriate defaults for GetUserTablesSqlTaskPropertiesArgs
 */
export function getUserTablesSqlTaskPropertiesArgsProvideDefaults(val: GetUserTablesSqlTaskPropertiesArgs): GetUserTablesSqlTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20171115preview.getUserTablesSqlTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Database specific information for SQL to Azure SQL DB migration task inputs
 */
export interface MigrateSqlServerSqlDbDatabaseInputArgs {
    /**
     * Whether to set database read only before migration
     */
    makeSourceDbReadOnly?: pulumi.Input<boolean>;
    /**
     * Name of the database
     */
    name?: pulumi.Input<string>;
    /**
     * Mapping of source to target tables
     */
    tableMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of target database. Note: Target database will be truncated before starting migration.
     */
    targetDatabaseName?: pulumi.Input<string>;
}

/**
 * Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
 */
export interface MigrateSqlServerSqlDbTaskInputArgs {
    /**
     * Databases to migrate
     */
    selectedDatabases: pulumi.Input<pulumi.Input<inputs.datamigration.v20171115preview.MigrateSqlServerSqlDbDatabaseInputArgs>[]>;
    /**
     * Information for connecting to source
     */
    sourceConnectionInfo: pulumi.Input<inputs.datamigration.v20171115preview.SqlConnectionInfoArgs>;
    /**
     * Information for connecting to target
     */
    targetConnectionInfo: pulumi.Input<inputs.datamigration.v20171115preview.SqlConnectionInfoArgs>;
    /**
     * Options for enabling various post migration validations. Available options, 
     *  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data. 
     *  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
     */
    validationOptions?: pulumi.Input<inputs.datamigration.v20171115preview.MigrationValidationOptionsArgs>;
}
/**
 * migrateSqlServerSqlDbTaskInputArgsProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskInputArgs
 */
export function migrateSqlServerSqlDbTaskInputArgsProvideDefaults(val: MigrateSqlServerSqlDbTaskInputArgs): MigrateSqlServerSqlDbTaskInputArgs {
    return {
        ...val,
        sourceConnectionInfo: pulumi.output(val.sourceConnectionInfo).apply(inputs.datamigration.v20171115preview.sqlConnectionInfoArgsProvideDefaults),
        targetConnectionInfo: pulumi.output(val.targetConnectionInfo).apply(inputs.datamigration.v20171115preview.sqlConnectionInfoArgsProvideDefaults),
    };
}

/**
 * Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
 */
export interface MigrateSqlServerSqlDbTaskPropertiesArgs {
    /**
     * Task input
     */
    input?: pulumi.Input<inputs.datamigration.v20171115preview.MigrateSqlServerSqlDbTaskInputArgs>;
    /**
     * Task type.
     * Expected value is 'Migrate.SqlServer.SqlDb'.
     */
    taskType: pulumi.Input<"Migrate.SqlServer.SqlDb">;
}
/**
 * migrateSqlServerSqlDbTaskPropertiesArgsProvideDefaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskPropertiesArgs
 */
export function migrateSqlServerSqlDbTaskPropertiesArgsProvideDefaults(val: MigrateSqlServerSqlDbTaskPropertiesArgs): MigrateSqlServerSqlDbTaskPropertiesArgs {
    return {
        ...val,
        input: (val.input ? pulumi.output(val.input).apply(inputs.datamigration.v20171115preview.migrateSqlServerSqlDbTaskInputArgsProvideDefaults) : undefined),
    };
}

/**
 * Types of validations to run after the migration
 */
export interface MigrationValidationOptionsArgs {
    /**
     * Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
     */
    enableDataIntegrityValidation?: pulumi.Input<boolean>;
    /**
     * Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
     */
    enableQueryAnalysisValidation?: pulumi.Input<boolean>;
    /**
     * Allows to compare the schema information between source and target.
     */
    enableSchemaValidation?: pulumi.Input<boolean>;
}

/**
 * An Azure SKU instance
 */
export interface ServiceSkuArgs {
    /**
     * The capacity of the SKU, if it supports scaling
     */
    capacity?: pulumi.Input<number>;
    /**
     * The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
     */
    family?: pulumi.Input<string>;
    /**
     * The unique name of the SKU, such as 'P3'
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
     */
    size?: pulumi.Input<string>;
    /**
     * The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
     */
    tier?: pulumi.Input<string>;
}

/**
 * Information for connecting to SQL database server
 */
export interface SqlConnectionInfoArgs {
    /**
     * Additional connection settings
     */
    additionalSettings?: pulumi.Input<string>;
    /**
     * Authentication type to use for connection
     */
    authentication?: pulumi.Input<enums.datamigration.v20171115preview.AuthenticationType>;
    /**
     * Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
     */
    dataSource: pulumi.Input<string>;
    /**
     * Whether to encrypt the connection
     */
    encryptConnection?: pulumi.Input<boolean>;
    /**
     * Password credential.
     */
    password?: pulumi.Input<string>;
    /**
     * Whether to trust the server certificate
     */
    trustServerCertificate?: pulumi.Input<boolean>;
    /**
     * Type of connection info
     * Expected value is 'SqlConnectionInfo'.
     */
    type: pulumi.Input<"SqlConnectionInfo">;
    /**
     * User name
     */
    userName?: pulumi.Input<string>;
}
/**
 * sqlConnectionInfoArgsProvideDefaults sets the appropriate defaults for SqlConnectionInfoArgs
 */
export function sqlConnectionInfoArgsProvideDefaults(val: SqlConnectionInfoArgs): SqlConnectionInfoArgs {
    return {
        ...val,
        encryptConnection: (val.encryptConnection) ?? true,
        trustServerCertificate: (val.trustServerCertificate) ?? false,
    };
}

