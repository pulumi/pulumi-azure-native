// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Cosmos DB capability object
 */
export interface CapabilityResponse {
    /**
     * Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
     */
    name?: string;
}

/**
 * Cosmos DB Cassandra table partition key
 */
export interface CassandraPartitionKeyResponse {
    /**
     * Name of the Cosmos DB Cassandra table partition key
     */
    name?: string;
}

/**
 * Cosmos DB Cassandra table schema
 */
export interface CassandraSchemaResponse {
    /**
     * List of cluster key.
     */
    clusterKeys?: outputs.documentdb.v20151106.ClusterKeyResponse[];
    /**
     * List of Cassandra table columns.
     */
    columns?: outputs.documentdb.v20151106.ColumnResponse[];
    /**
     * List of partition key.
     */
    partitionKeys?: outputs.documentdb.v20151106.CassandraPartitionKeyResponse[];
}

/**
 * Cosmos DB Cassandra table cluster key
 */
export interface ClusterKeyResponse {
    /**
     * Name of the Cosmos DB Cassandra table cluster key
     */
    name?: string;
    /**
     * Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
     */
    orderBy?: string;
}

/**
 * Cosmos DB Cassandra table column
 */
export interface ColumnResponse {
    /**
     * Name of the Cosmos DB Cassandra table column
     */
    name?: string;
    /**
     * Type of the Cosmos DB Cassandra table column
     */
    type?: string;
}

/**
 * The conflict resolution policy for the container.
 */
export interface ConflictResolutionPolicyResponse {
    /**
     * The conflict resolution path in the case of LastWriterWins mode.
     */
    conflictResolutionPath?: string;
    /**
     * The procedure to resolve conflicts in the case of custom mode.
     */
    conflictResolutionProcedure?: string;
    /**
     * Indicates the conflict resolution mode.
     */
    mode?: string;
}
/**
 * conflictResolutionPolicyResponseProvideDefaults sets the appropriate defaults for ConflictResolutionPolicyResponse
 */
export function conflictResolutionPolicyResponseProvideDefaults(val: ConflictResolutionPolicyResponse): ConflictResolutionPolicyResponse {
    return {
        ...val,
        mode: (val.mode) ?? "LastWriterWins",
    };
}

/**
 * The consistency policy for the Cosmos DB database account.
 */
export interface ConsistencyPolicyResponse {
    /**
     * The default consistency level and configuration settings of the Cosmos DB account.
     */
    defaultConsistencyLevel: string;
    /**
     * When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
     */
    maxIntervalInSeconds?: number;
    /**
     * When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
     */
    maxStalenessPrefix?: number;
}

/**
 * The configuration of the partition key to be used for partitioning data into multiple partitions
 */
export interface ContainerPartitionKeyResponse {
    /**
     * Indicates the kind of algorithm used for partitioning
     */
    kind?: string;
    /**
     * List of paths using which data within the container can be partitioned
     */
    paths?: string[];
}
/**
 * containerPartitionKeyResponseProvideDefaults sets the appropriate defaults for ContainerPartitionKeyResponse
 */
export function containerPartitionKeyResponseProvideDefaults(val: ContainerPartitionKeyResponse): ContainerPartitionKeyResponse {
    return {
        ...val,
        kind: (val.kind) ?? "Hash",
    };
}

/**
 * Connection string for the Cosmos DB account
 */
export interface DatabaseAccountConnectionStringResponse {
    /**
     * Value of the connection string
     */
    connectionString: string;
    /**
     * Description of the connection string
     */
    description: string;
}

export interface ExcludedPathResponse {
    /**
     * The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
     */
    path?: string;
}

/**
 * The failover policy for a given region of a database account.
 */
export interface FailoverPolicyResponse {
    /**
     * The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     */
    failoverPriority?: number;
    /**
     * The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.
     */
    id: string;
    /**
     * The name of the region in which the database account exists.
     */
    locationName?: string;
}

/**
 * The paths that are included in indexing
 */
export interface IncludedPathResponse {
    /**
     * List of indexes for this path
     */
    indexes?: outputs.documentdb.v20151106.IndexesResponse[];
    /**
     * The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
     */
    path?: string;
}

/**
 * The indexes for the path.
 */
export interface IndexesResponse {
    /**
     * The datatype for which the indexing behavior is applied to.
     */
    dataType?: string;
    /**
     * Indicates the type of index.
     */
    kind?: string;
    /**
     * The precision of the index. -1 is maximum precision.
     */
    precision?: number;
}
/**
 * indexesResponseProvideDefaults sets the appropriate defaults for IndexesResponse
 */
export function indexesResponseProvideDefaults(val: IndexesResponse): IndexesResponse {
    return {
        ...val,
        dataType: (val.dataType) ?? "String",
        kind: (val.kind) ?? "Hash",
    };
}

/**
 * Cosmos DB indexing policy
 */
export interface IndexingPolicyResponse {
    /**
     * Indicates if the indexing policy is automatic
     */
    automatic?: boolean;
    /**
     * List of paths to exclude from indexing
     */
    excludedPaths?: outputs.documentdb.v20151106.ExcludedPathResponse[];
    /**
     * List of paths to include in the indexing
     */
    includedPaths?: outputs.documentdb.v20151106.IncludedPathResponse[];
    /**
     * Indicates the indexing mode.
     */
    indexingMode?: string;
}
/**
 * indexingPolicyResponseProvideDefaults sets the appropriate defaults for IndexingPolicyResponse
 */
export function indexingPolicyResponseProvideDefaults(val: IndexingPolicyResponse): IndexingPolicyResponse {
    return {
        ...val,
        indexingMode: (val.indexingMode) ?? "Consistent",
    };
}

/**
 * A region in which the Azure Cosmos DB database account is deployed.
 */
export interface LocationResponse {
    /**
     * The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
     */
    documentEndpoint: string;
    /**
     * The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     */
    failoverPriority?: number;
    /**
     * The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.
     */
    id: string;
    /**
     * Flag to indicate whether or not this region is an AvailabilityZone region
     */
    isZoneRedundant?: boolean;
    /**
     * The name of the region.
     */
    locationName?: string;
    /**
     * The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
     */
    provisioningState: string;
}

/**
 * Cosmos DB MongoDB collection resource object
 */
export interface MongoIndexKeysResponse {
    /**
     * List of keys for each MongoDB collection in the Azure Cosmos DB service
     */
    keys?: string[];
}

/**
 * Cosmos DB MongoDB collection index options
 */
export interface MongoIndexOptionsResponse {
    /**
     * Expire after seconds
     */
    expireAfterSeconds?: number;
    /**
     * Is unique or not
     */
    unique?: boolean;
}

/**
 * Cosmos DB MongoDB collection index key
 */
export interface MongoIndexResponse {
    /**
     * Cosmos DB MongoDB collection index keys
     */
    key?: outputs.documentdb.v20151106.MongoIndexKeysResponse;
    /**
     * Cosmos DB MongoDB collection index key options
     */
    options?: outputs.documentdb.v20151106.MongoIndexOptionsResponse;
}

/**
 * The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
 */
export interface UniqueKeyPolicyResponse {
    /**
     * List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
     */
    uniqueKeys?: outputs.documentdb.v20151106.UniqueKeyResponse[];
}

/**
 * The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
 */
export interface UniqueKeyResponse {
    /**
     * List of paths must be unique for each document in the Azure Cosmos DB service
     */
    paths?: string[];
}

/**
 * Virtual Network ACL Rule object
 */
export interface VirtualNetworkRuleResponse {
    /**
     * Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
     */
    id?: string;
    /**
     * Create firewall rule before the virtual network has vnet service endpoint enabled.
     */
    ignoreMissingVNetServiceEndpoint?: boolean;
}

