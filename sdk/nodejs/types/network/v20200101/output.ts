// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * An A record.
 */
export interface ARecordResponse {
    /**
     * The IPv4 address of this A record.
     */
    ipv4Address?: string;
}

/**
 * An AAAA record.
 */
export interface AaaaRecordResponse {
    /**
     * The IPv6 address of this AAAA record.
     */
    ipv6Address?: string;
}

/**
 * A backend pool is a collection of backends that can be routed to.
 */
export interface BackendPoolResponse {
    /**
     * The set of backends for this pool
     */
    backends?: outputs.network.v20200101.BackendResponse[];
    /**
     * L7 health probe settings for a backend pool
     */
    healthProbeSettings?: outputs.network.v20200101.SubResourceResponse;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Load balancing settings for a backend pool
     */
    loadBalancingSettings?: outputs.network.v20200101.SubResourceResponse;
    /**
     * Resource name.
     */
    name?: string;
    /**
     * Resource status.
     */
    resourceState: string;
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Settings that apply to all backend pools.
 */
export interface BackendPoolsSettingsResponse {
    /**
     * Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
     */
    enforceCertificateNameCheck?: string;
    /**
     * Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
     */
    sendRecvTimeoutSeconds?: number;
}
/**
 * backendPoolsSettingsResponseProvideDefaults sets the appropriate defaults for BackendPoolsSettingsResponse
 */
export function backendPoolsSettingsResponseProvideDefaults(val: BackendPoolsSettingsResponse): BackendPoolsSettingsResponse {
    return {
        ...val,
        enforceCertificateNameCheck: (val.enforceCertificateNameCheck) ?? "Enabled",
    };
}

/**
 * Backend address of a frontDoor load balancer.
 */
export interface BackendResponse {
    /**
     * Location of the backend (IP address or FQDN)
     */
    address?: string;
    /**
     * The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
     */
    backendHostHeader?: string;
    /**
     * Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
     */
    enabledState?: string;
    /**
     * The HTTP TCP port number. Must be between 1 and 65535.
     */
    httpPort?: number;
    /**
     * The HTTPS TCP port number. Must be between 1 and 65535.
     */
    httpsPort?: number;
    /**
     * Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
     */
    priority?: number;
    /**
     * The Approval status for the connection to the Private Link
     */
    privateEndpointStatus: string;
    /**
     * The Alias of the Private Link resource. Populating this optional field indicates that this backend is 'Private'
     */
    privateLinkAlias?: string;
    /**
     * A custom message to be included in the approval request to connect to the Private Link
     */
    privateLinkApprovalMessage?: string;
    /**
     * Weight of this endpoint for load balancing purposes.
     */
    weight?: number;
}

/**
 * Caching settings for a caching-type route. To disable caching, do not provide a cacheConfiguration object.
 */
export interface CacheConfigurationResponse {
    /**
     * The duration for which the content needs to be cached. Allowed format is in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year
     */
    cacheDuration?: string;
    /**
     * Whether to use dynamic compression for cached content
     */
    dynamicCompression?: string;
    /**
     * Treatment of URL query terms when forming the cache key.
     */
    queryParameterStripDirective?: string;
    /**
     * query parameters to include or exclude (comma separated).
     */
    queryParameters?: string;
}

/**
 * A CNAME record.
 */
export interface CnameRecordResponse {
    /**
     * The canonical name for this CNAME record.
     */
    cname?: string;
}

/**
 * Https settings for a domain
 */
export interface CustomHttpsConfigurationResponse {
    /**
     * Defines the source of the SSL certificate
     */
    certificateSource: string;
    /**
     * Defines the type of the certificate used for secure connections to a frontendEndpoint
     */
    certificateType?: string;
    /**
     * The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
     */
    minimumTlsVersion: string;
    /**
     * Defines the TLS extension protocol that is used for secure delivery
     */
    protocolType: string;
    /**
     * The name of the Key Vault secret representing the full certificate PFX
     */
    secretName?: string;
    /**
     * The version of the Key Vault secret representing the full certificate PFX
     */
    secretVersion?: string;
    /**
     * The Key Vault containing the SSL certificate
     */
    vault?: outputs.network.v20200101.KeyVaultCertificateSourceParametersResponseVault;
}

/**
 * Describes Forwarding Route.
 */
export interface ForwardingConfigurationResponse {
    /**
     * A reference to the BackendPool which this rule routes to.
     */
    backendPool?: outputs.network.v20200101.SubResourceResponse;
    /**
     * The caching configuration associated with this rule.
     */
    cacheConfiguration?: outputs.network.v20200101.CacheConfigurationResponse;
    /**
     * A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.
     */
    customForwardingPath?: string;
    /**
     * Protocol this rule will use when forwarding traffic to backends.
     */
    forwardingProtocol?: string;
    /**
     *
     * Expected value is '#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration'.
     */
    odataType: "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration";
}

/**
 * A frontend endpoint used for routing.
 */
export interface FrontendEndpointResponse {
    /**
     * The configuration specifying how to enable HTTPS
     */
    customHttpsConfiguration: outputs.network.v20200101.CustomHttpsConfigurationResponse;
    /**
     * Provisioning status of Custom Https of the frontendEndpoint.
     */
    customHttpsProvisioningState: string;
    /**
     * Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
     */
    customHttpsProvisioningSubstate: string;
    /**
     * The host name of the frontendEndpoint. Must be a domain name.
     */
    hostName?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource name.
     */
    name?: string;
    /**
     * Resource status.
     */
    resourceState: string;
    /**
     * Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
     */
    sessionAffinityEnabledState?: string;
    /**
     * UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
     */
    sessionAffinityTtlSeconds?: number;
    /**
     * Resource type.
     */
    type: string;
    /**
     * Defines the Web Application Firewall policy for each host (if applicable)
     */
    webApplicationFirewallPolicyLink?: outputs.network.v20200101.FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink;
}

/**
 * Defines the Web Application Firewall policy for each host (if applicable)
 */
export interface FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink {
    /**
     * Resource ID.
     */
    id?: string;
}

/**
 * An action that can manipulate an http header.
 */
export interface HeaderActionResponse {
    /**
     * Which type of manipulation to apply to the header.
     */
    headerActionType: string;
    /**
     * The name of the header this action will apply to.
     */
    headerName: string;
    /**
     * The value to update the given header name with. This value is not used if the actionType is Delete.
     */
    value?: string;
}

/**
 * Load balancing settings for a backend pool
 */
export interface HealthProbeSettingsModelResponse {
    /**
     * Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
     */
    enabledState?: string;
    /**
     * Configures which HTTP method to use to probe the backends defined under backendPools.
     */
    healthProbeMethod?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The number of seconds between health probes.
     */
    intervalInSeconds?: number;
    /**
     * Resource name.
     */
    name?: string;
    /**
     * The path to use for the health probe. Default is /
     */
    path?: string;
    /**
     * Protocol scheme to use for this probe
     */
    protocol?: string;
    /**
     * Resource status.
     */
    resourceState: string;
    /**
     * Resource type.
     */
    type: string;
}
/**
 * healthProbeSettingsModelResponseProvideDefaults sets the appropriate defaults for HealthProbeSettingsModelResponse
 */
export function healthProbeSettingsModelResponseProvideDefaults(val: HealthProbeSettingsModelResponse): HealthProbeSettingsModelResponse {
    return {
        ...val,
        healthProbeMethod: (val.healthProbeMethod) ?? "HEAD",
    };
}

/**
 * The Key Vault containing the SSL certificate
 */
export interface KeyVaultCertificateSourceParametersResponseVault {
    /**
     * Resource ID.
     */
    id?: string;
}

/**
 * Load balancing settings for a backend pool
 */
export interface LoadBalancingSettingsModelResponse {
    /**
     * The additional latency in milliseconds for probes to fall into the lowest latency bucket
     */
    additionalLatencyMilliseconds?: number;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource name.
     */
    name?: string;
    /**
     * Resource status.
     */
    resourceState: string;
    /**
     * The number of samples to consider for load balancing decisions
     */
    sampleSize?: number;
    /**
     * The number of samples within the sample period that must succeed
     */
    successfulSamplesRequired?: number;
    /**
     * Resource type.
     */
    type: string;
}

/**
 * An MX record.
 */
export interface MxRecordResponse {
    /**
     * The domain name of the mail host for this MX record.
     */
    exchange?: string;
    /**
     * The preference value for this MX record.
     */
    preference?: number;
}

/**
 * A PTR record.
 */
export interface PtrRecordResponse {
    /**
     * The PTR target domain name for this PTR record.
     */
    ptrdname?: string;
}

/**
 * Describes Redirect Route.
 */
export interface RedirectConfigurationResponse {
    /**
     * Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
     */
    customFragment?: string;
    /**
     * Host to redirect. Leave empty to use the incoming host as the destination host.
     */
    customHost?: string;
    /**
     * The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
     */
    customPath?: string;
    /**
     * The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. The first ? and & will be added automatically so do not include them in the front, but do separate multiple query strings with &.
     */
    customQueryString?: string;
    /**
     *
     * Expected value is '#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration'.
     */
    odataType: "#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration";
    /**
     * The protocol of the destination to where the traffic is redirected
     */
    redirectProtocol?: string;
    /**
     * The redirect type the rule will use when redirecting traffic.
     */
    redirectType?: string;
}

/**
 * A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
 */
export interface RoutingRuleResponse {
    /**
     * Protocol schemes to match for this rule
     */
    acceptedProtocols?: string[];
    /**
     * Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
     */
    enabledState?: string;
    /**
     * Frontend endpoints associated with this rule
     */
    frontendEndpoints?: outputs.network.v20200101.SubResourceResponse[];
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource name.
     */
    name?: string;
    /**
     * The route patterns of the rule.
     */
    patternsToMatch?: string[];
    /**
     * Resource status.
     */
    resourceState: string;
    /**
     * A reference to the routing configuration.
     */
    routeConfiguration?: outputs.network.v20200101.ForwardingConfigurationResponse | outputs.network.v20200101.RedirectConfigurationResponse;
    /**
     * A reference to a specific Rules Engine Configuration to apply to this route.
     */
    rulesEngine?: outputs.network.v20200101.SubResourceResponse;
    /**
     * Resource type.
     */
    type: string;
}

/**
 * One or more actions that will execute, modifying the request and/or response.
 */
export interface RulesEngineActionResponse {
    /**
     * A list of header actions to apply from the request from AFD to the origin.
     */
    requestHeaderActions?: outputs.network.v20200101.HeaderActionResponse[];
    /**
     * A list of header actions to apply from the response from AFD to the client.
     */
    responseHeaderActions?: outputs.network.v20200101.HeaderActionResponse[];
    /**
     * Override the route configuration.
     */
    routeConfigurationOverride?: outputs.network.v20200101.ForwardingConfigurationResponse | outputs.network.v20200101.RedirectConfigurationResponse;
}

/**
 * Define a match condition
 */
export interface RulesEngineMatchConditionResponse {
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    /**
     * Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
     */
    rulesEngineMatchValue: string[];
    /**
     * Match Variable
     */
    rulesEngineMatchVariable: string;
    /**
     * Describes operator to apply to the match condition.
     */
    rulesEngineOperator: string;
    /**
     * Name of selector in RequestHeader or RequestBody to be matched
     */
    selector?: string;
    /**
     * List of transforms
     */
    transforms?: string[];
}

/**
 * A rules engine configuration containing a list of rules that will run to modify the runtime behavior of the request and response.
 */
export interface RulesEngineResponse {
    /**
     * Resource ID.
     */
    id: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * Resource status.
     */
    resourceState: string;
    /**
     * A list of rules that define a particular Rules Engine Configuration.
     */
    rules?: outputs.network.v20200101.RulesEngineRuleResponse[];
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
 */
export interface RulesEngineRuleResponse {
    /**
     * Actions to perform on the request and response if all of the match conditions are met.
     */
    action: outputs.network.v20200101.RulesEngineActionResponse;
    /**
     * A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
     */
    matchConditions?: outputs.network.v20200101.RulesEngineMatchConditionResponse[];
    /**
     * If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
     */
    matchProcessingBehavior?: string;
    /**
     * A name to refer to this specific rule.
     */
    name: string;
    /**
     * A priority assigned to this rule. 
     */
    priority: number;
}

/**
 * An SOA record.
 */
export interface SoaRecordResponse {
    /**
     * The email contact for this SOA record.
     */
    email?: string;
    /**
     * The expire time for this SOA record.
     */
    expireTime?: number;
    /**
     * The domain name of the authoritative name server for this SOA record.
     */
    host?: string;
    /**
     * The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
     */
    minimumTtl?: number;
    /**
     * The refresh value for this SOA record.
     */
    refreshTime?: number;
    /**
     * The retry time for this SOA record.
     */
    retryTime?: number;
    /**
     * The serial number for this SOA record.
     */
    serialNumber?: number;
}

/**
 * An SRV record.
 */
export interface SrvRecordResponse {
    /**
     * The port value for this SRV record.
     */
    port?: number;
    /**
     * The priority value for this SRV record.
     */
    priority?: number;
    /**
     * The target domain name for this SRV record.
     */
    target?: string;
    /**
     * The weight value for this SRV record.
     */
    weight?: number;
}

/**
 * Reference to another subresource.
 */
export interface SubResourceResponse {
    /**
     * Resource ID.
     */
    id?: string;
}

/**
 * A TXT record.
 */
export interface TxtRecordResponse {
    /**
     * The text value of this TXT record.
     */
    value?: string[];
}

