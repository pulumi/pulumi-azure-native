// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * AddressSpace contains an array of IP address ranges that can be used by subnets
 */
export interface AddressSpaceResponse {
    /**
     * Gets or sets List of address blocks reserved for this virtual network in CIDR notation
     */
    addressPrefixes?: string[];
}

/**
 * Backend Address Pool of application gateway
 */
export interface ApplicationGatewayBackendAddressPoolResponse {
    /**
     * Gets or sets the backend addresses
     */
    backendAddresses?: outputs.network.v20150501preview.ApplicationGatewayBackendAddressResponse[];
    /**
     * Gets or sets backendIPConfiguration of application gateway 
     */
    backendIPConfigurations?: outputs.network.v20150501preview.SubResourceResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets Provisioning state of the backend address pool resource Updating/Deleting/Failed
     */
    provisioningState?: string;
}

/**
 * Backend Address of application gateway
 */
export interface ApplicationGatewayBackendAddressResponse {
    /**
     * Gets or sets the dns name
     */
    fqdn?: string;
    /**
     * Gets or sets the ip address
     */
    ipAddress?: string;
}

/**
 * Backend address pool settings of application gateway
 */
export interface ApplicationGatewayBackendHttpSettingsResponse {
    /**
     * Gets or sets the cookie affinity
     */
    cookieBasedAffinity?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the port
     */
    port?: number;
    /**
     * Gets or sets the protocol
     */
    protocol?: string;
    /**
     * Gets or sets Provisioning state of the backend http settings resource Updating/Deleting/Failed
     */
    provisioningState?: string;
}

/**
 * Frontend IP configuration of application gateway
 */
export interface ApplicationGatewayFrontendIPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the privateIPAddress of the Network Interface IP Configuration
     */
    privateIPAddress?: string;
    /**
     * Gets or sets PrivateIP allocation method (Static/Dynamic)
     */
    privateIPAllocationMethod?: string;
    /**
     * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
    /**
     * Gets or sets the reference of the PublicIP resource
     */
    publicIPAddress?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Gets or sets the reference of the subnet resource
     */
    subnet?: outputs.network.v20150501preview.SubResourceResponse;
}

/**
 * Frontend Port of application gateway
 */
export interface ApplicationGatewayFrontendPortResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the frontend port
     */
    port?: number;
    /**
     * Gets or sets Provisioning state of the frontend port resource Updating/Deleting/Failed
     */
    provisioningState?: string;
}

/**
 * Http listener of application gateway
 */
export interface ApplicationGatewayHttpListenerResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Gets or sets frontend IP configuration resource of application gateway 
     */
    frontendIPConfiguration?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Gets or sets frontend port resource of application gateway 
     */
    frontendPort?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the protocol
     */
    protocol?: string;
    /**
     * Gets or sets Provisioning state of the http listener resource Updating/Deleting/Failed
     */
    provisioningState?: string;
    /**
     * Gets or sets ssl certificate resource of application gateway 
     */
    sslCertificate?: outputs.network.v20150501preview.SubResourceResponse;
}

/**
 * IP configuration of application gateway
 */
export interface ApplicationGatewayIPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets Provisioning state of the application gateway subnet resource Updating/Deleting/Failed
     */
    provisioningState?: string;
    /**
     * Gets or sets the reference of the subnet resource.A subnet from where application gateway gets its private address 
     */
    subnet?: outputs.network.v20150501preview.SubResourceResponse;
}

/**
 * Request routing rule of application gateway
 */
export interface ApplicationGatewayRequestRoutingRuleResponse {
    /**
     * Gets or sets backend address pool resource of application gateway 
     */
    backendAddressPool?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Gets or sets frontend port resource of application gateway 
     */
    backendHttpSettings?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Gets or sets http listener resource of application gateway 
     */
    httpListener?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets Provisioning state of the request routing rule resource Updating/Deleting/Failed
     */
    provisioningState?: string;
    /**
     * Gets or sets the rule type
     */
    ruleType?: string;
}

/**
 * SKU of application gateway
 */
export interface ApplicationGatewaySkuResponse {
    /**
     * Gets or sets capacity (instance count) of application gateway
     */
    capacity?: number;
    /**
     * Gets or sets name of application gateway SKU
     */
    name?: string;
    /**
     * Gets or sets tier of application gateway
     */
    tier?: string;
}

/**
 * SSL certificates of application gateway
 */
export interface ApplicationGatewaySslCertificateResponse {
    /**
     * Gets or sets the certificate data 
     */
    data?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the certificate password 
     */
    password?: string;
    /**
     * Gets or sets Provisioning state of the ssl certificate resource Updating/Deleting/Failed
     */
    provisioningState?: string;
    /**
     * Gets or sets the certificate public data 
     */
    publicCertData?: string;
}

/**
 * Pool of backend IP addresses
 */
export interface BackendAddressPoolResponse {
    /**
     * Gets collection of references to IPs defined in NICs
     */
    backendIPConfigurations?: outputs.network.v20150501preview.SubResourceResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets Load Balancing rules that use this Backend Address Pool
     */
    loadBalancingRules?: outputs.network.v20150501preview.SubResourceResponse[];
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets outbound rules that use this Backend Address Pool
     */
    outboundNatRule?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
}

/**
 * DHCPOptions contains an array of DNS servers available to VMs deployed in the virtual networkStandard DHCP option for a subnet overrides VNET DHCP options.
 */
export interface DhcpOptionsResponse {
    /**
     * Gets or sets list of DNS servers IP addresses
     */
    dnsServers?: string[];
}

/**
 * Authorization in a ExpressRouteCircuit resource
 */
export interface ExpressRouteCircuitAuthorizationResponse {
    /**
     * Gets or sets the authorization key
     */
    authorizationKey?: string;
    /**
     * Gets or sets AuthorizationUseStatus
     */
    authorizationUseStatus?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
}

/**
 * Specifies the peering config
 */
export interface ExpressRouteCircuitPeeringConfigResponse {
    /**
     * Gets or sets the reference of AdvertisedPublicPrefixes
     */
    advertisedPublicPrefixes?: string[];
    /**
     * Gets or sets AdvertisedPublicPrefixState of the Peering resource 
     */
    advertisedPublicPrefixesState?: string;
    /**
     * Gets or Sets CustomerAsn of the peering.
     */
    customerASN?: number;
    /**
     * Gets or Sets RoutingRegistryName of the config.
     */
    routingRegistryName?: string;
}

/**
 * Peering in a ExpressRouteCircuit resource
 */
export interface ExpressRouteCircuitPeeringResponse {
    /**
     * Gets or sets the azure ASN
     */
    azureASN?: number;
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets or sets the Microsoft peering config
     */
    microsoftPeeringConfig?: outputs.network.v20150501preview.ExpressRouteCircuitPeeringConfigResponse;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the peer ASN
     */
    peerASN?: number;
    /**
     * Gets or sets PeeringType
     */
    peeringType?: string;
    /**
     * Gets or sets the primary port
     */
    primaryAzurePort?: string;
    /**
     * Gets or sets the primary address prefix
     */
    primaryPeerAddressPrefix?: string;
    /**
     * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
    /**
     * Gets or sets the secondary port
     */
    secondaryAzurePort?: string;
    /**
     * Gets or sets the secondary address prefix
     */
    secondaryPeerAddressPrefix?: string;
    /**
     * Gets or sets the shared key
     */
    sharedKey?: string;
    /**
     * Gets or sets state of Peering
     */
    state?: string;
    /**
     * Gets or peering stats
     */
    stats?: outputs.network.v20150501preview.ExpressRouteCircuitStatsResponse;
    /**
     * Gets or sets the vlan id
     */
    vlanId?: number;
}

/**
 * Contains ServiceProviderProperties in an ExpressRouteCircuit
 */
export interface ExpressRouteCircuitServiceProviderPropertiesResponse {
    /**
     * Gets or sets BandwidthInMbps.
     */
    bandwidthInMbps?: number;
    /**
     * Gets or sets peering location.
     */
    peeringLocation?: string;
    /**
     * Gets or sets serviceProviderName.
     */
    serviceProviderName?: string;
}

/**
 * Contains sku in an ExpressRouteCircuit
 */
export interface ExpressRouteCircuitSkuResponse {
    /**
     * Gets or sets family of the sku.
     */
    family?: string;
    /**
     * Gets or sets name of the sku.
     */
    name?: string;
    /**
     * Gets or sets tier of the sku.
     */
    tier?: string;
}

/**
 * Contains Stats associated with the peering
 */
export interface ExpressRouteCircuitStatsResponse {
    /**
     * Gets BytesIn of the peering.
     */
    bytesIn?: number;
    /**
     * Gets BytesOut of the peering.
     */
    bytesOut?: number;
}

/**
 * Frontend IP address of the load balancer
 */
export interface FrontendIpConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Read only.Inbound pools URIs that use this frontend IP
     */
    inboundNatPools?: outputs.network.v20150501preview.SubResourceResponse[];
    /**
     * Read only.Inbound rules URIs that use this frontend IP
     */
    inboundNatRules?: outputs.network.v20150501preview.SubResourceResponse[];
    /**
     * Gets Load Balancing rules URIs that use this frontend IP
     */
    loadBalancingRules?: outputs.network.v20150501preview.SubResourceResponse[];
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Read only.Outbound rules URIs that use this frontend IP
     */
    outboundNatRules?: outputs.network.v20150501preview.SubResourceResponse[];
    /**
     * Gets or sets the IP address of the Load Balancer.This is only specified if a specific private IP address shall be allocated from the subnet specified in subnetRef
     */
    privateIPAddress?: string;
    /**
     * Gets or sets PrivateIP allocation method (Static/Dynamic)
     */
    privateIPAllocationMethod?: string;
    /**
     * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
    /**
     * Gets or sets the reference of the PublicIP resource
     */
    publicIPAddress?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Gets or sets the reference of the subnet resource.A subnet from where the load balancer gets its private frontend address 
     */
    subnet?: outputs.network.v20150501preview.SubResourceResponse;
}

/**
 * Inbound NAT pool of the loadbalancer
 */
export interface InboundNatPoolResponse {
    /**
     * Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API
     */
    backendPort: number;
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Gets or sets a reference to frontend IP Addresses
     */
    frontendIPConfiguration?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Gets or sets the ending port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
     */
    frontendPortRangeEnd: number;
    /**
     * Gets or sets the starting port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
     */
    frontendPortRangeStart: number;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp
     */
    protocol: string;
    /**
     * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
}

/**
 * Inbound NAT rule of the loadbalancer
 */
export interface InboundNatRuleResponse {
    /**
     * Gets or sets a reference to a private ip address defined on a NetworkInterface of a VM. Traffic sent to frontendPort of each of the frontendIPConfigurations is forwarded to the backed IP
     */
    backendIPConfiguration?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API
     */
    backendPort?: number;
    /**
     * Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON availability Groups in SQL server. This setting can't be changed after you create the endpoint
     */
    enableFloatingIP: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Gets or sets a reference to frontend IP Addresses
     */
    frontendIPConfiguration?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Gets or sets the port for the external endpoint. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
     */
    frontendPort: number;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp
     */
    idleTimeoutInMinutes?: number;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp
     */
    protocol: string;
    /**
     * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
}

/**
 * Rules of the load balancer
 */
export interface LoadBalancingRuleResponse {
    /**
     * Gets or sets  a reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs
     */
    backendAddressPool: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API
     */
    backendPort?: number;
    /**
     * Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON availability Groups in SQL server. This setting can't be changed after you create the endpoint
     */
    enableFloatingIP: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Gets or sets a reference to frontend IP Addresses
     */
    frontendIPConfiguration?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Gets or sets the port for the external endpoint. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
     */
    frontendPort: number;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp
     */
    idleTimeoutInMinutes?: number;
    /**
     * Gets or sets the load distribution policy for this rule
     */
    loadDistribution?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the reference of the load balancer probe used by the Load Balancing rule.
     */
    probe?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp
     */
    protocol: string;
    /**
     * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
}

/**
 * Dns Settings of a network interface
 */
export interface NetworkInterfaceDnsSettingsResponse {
    /**
     * Gets or sets list of Applied DNS servers IP addresses
     */
    appliedDnsServers?: string[];
    /**
     * Gets or sets list of DNS servers IP addresses
     */
    dnsServers?: string[];
    /**
     * Gets or sets the Internal DNS name
     */
    internalDnsNameLabel?: string;
    /**
     * Gets or sets full IDNS name in the form, DnsName.VnetId.ZoneId.TopLevelSuffix. This is set when the NIC is associated to a VM
     */
    internalFqdn?: string;
}

/**
 * IPConfiguration in a NetworkInterface
 */
export interface NetworkInterfaceIpConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets or sets the reference of LoadBalancerBackendAddressPool resource
     */
    loadBalancerBackendAddressPools?: outputs.network.v20150501preview.SubResourceResponse[];
    /**
     * Gets or sets list of references of LoadBalancerInboundNatRules
     */
    loadBalancerInboundNatRules?: outputs.network.v20150501preview.SubResourceResponse[];
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the privateIPAddress of the Network Interface IP Configuration
     */
    privateIPAddress?: string;
    /**
     * Gets or sets PrivateIP allocation method (Static/Dynamic)
     */
    privateIPAllocationMethod?: string;
    /**
     * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
    /**
     * Gets or sets the reference of the PublicIP resource
     */
    publicIPAddress?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Gets or sets the reference of the subnet resource
     */
    subnet?: outputs.network.v20150501preview.SubResourceResponse;
}

/**
 * Outbound NAT pool of the loadbalancer
 */
export interface OutboundNatRuleResponse {
    /**
     * Gets or sets the number of outbound ports to be used for SNAT
     */
    allocatedOutboundPorts: number;
    /**
     * Gets or sets a reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs
     */
    backendAddressPool: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Gets or sets Frontend IP addresses of the load balancer
     */
    frontendIPConfigurations?: outputs.network.v20150501preview.SubResourceResponse[];
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
}

/**
 * Load balancer Probe
 */
export interface ProbeResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets or sets the interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5
     */
    intervalInSeconds?: number;
    /**
     * Gets Load balancer rules that use this probe
     */
    loadBalancingRules?: outputs.network.v20150501preview.SubResourceResponse[];
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure. 
     */
    numberOfProbes?: number;
    /**
     * Gets or sets Port for communicating the probe. Possible values range from 1 to 65535, inclusive.
     */
    port: number;
    /**
     * Gets or sets the protocol of the end point. Possible values are http pr Tcp. If Tcp is specified, a received ACK is required for the probe to be successful. If http is specified,a 200 OK response from the specifies URI is required for the probe to be successful
     */
    protocol: string;
    /**
     * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
    /**
     * Gets or sets the URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value
     */
    requestPath?: string;
}

/**
 * Contains FQDN of the DNS record associated with the public IP address
 */
export interface PublicIpAddressDnsSettingsResponse {
    /**
     * Gets or sets the Domain name label.The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.
     */
    domainNameLabel?: string;
    /**
     * Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
     */
    fqdn?: string;
    /**
     * Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN. 
     */
    reverseFqdn?: string;
}

/**
 * Route resource
 */
export interface RouteResponse {
    /**
     * Gets or sets the destination CIDR to which the route applies.
     */
    addressPrefix?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
     */
    nextHopIpAddress?: string;
    /**
     * Gets or sets the type of Azure hop the packet should be sent to.
     */
    nextHopType: string;
    /**
     * Gets or sets Provisioning state of the resource Updating/Deleting/Failed
     */
    provisioningState?: string;
}

/**
 * Network security rule
 */
export interface SecurityRuleResponse {
    /**
     * Gets or sets network traffic is allowed or denied. Possible values are 'Allow' and 'Deny'
     */
    access: string;
    /**
     * Gets or sets a description for this rule. Restricted to 140 chars.
     */
    description?: string;
    /**
     * Gets or sets destination address prefix. CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. 
     */
    destinationAddressPrefix: string;
    /**
     * Gets or sets Destination Port or Range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
     */
    destinationPortRange?: string;
    /**
     * Gets or sets the direction of the rule.InBound or Outbound. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
     */
    direction: string;
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
     */
    priority?: number;
    /**
     * Gets or sets Network protocol this rule applies to. Can be Tcp, Udp or All(*).
     */
    protocol: string;
    /**
     * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
    /**
     * Gets or sets source address prefix. CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. 
     */
    sourceAddressPrefix: string;
    /**
     * Gets or sets Source Port or Range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
     */
    sourcePortRange?: string;
}

export interface SubResourceResponse {
    /**
     * Resource Id
     */
    id?: string;
}

/**
 * Subnet in a VirtualNetwork resource
 */
export interface SubnetResponse {
    /**
     * Gets or sets Address prefix for the subnet.
     */
    addressPrefix: string;
    /**
     * A unique read-only string that changes whenever the resource is updated
     */
    etag?: string;
    /**
     * Resource Id
     */
    id?: string;
    /**
     * Gets array of references to the network interface IP configurations using subnet
     */
    ipConfigurations?: outputs.network.v20150501preview.SubResourceResponse[];
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource
     */
    name?: string;
    /**
     * Gets or sets the reference of the NetworkSecurityGroup resource
     */
    networkSecurityGroup?: outputs.network.v20150501preview.SubResourceResponse;
    /**
     * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    provisioningState?: string;
    /**
     * Gets or sets the reference of the RouteTable resource
     */
    routeTable?: outputs.network.v20150501preview.SubResourceResponse;
}

