// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual network.
 */
export interface AddressSpaceResponse {
    /**
     * A list of address blocks reserved for this virtual network in CIDR notation.
     */
    addressPrefixes?: string[];
}

/**
 * Authentication certificates of an application gateway.
 */
export interface ApplicationGatewayAuthenticationCertificateResponse {
    /**
     * Certificate public data.
     */
    data?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Provisioning state of the authentication certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
}

/**
 * Backend Address Pool of an application gateway.
 */
export interface ApplicationGatewayBackendAddressPoolResponse {
    /**
     * Backend addresses
     */
    backendAddresses?: outputs.network.v20170301.ApplicationGatewayBackendAddressResponse[];
    /**
     * Collection of references to IPs defined in network interfaces.
     */
    backendIPConfigurations?: outputs.network.v20170301.NetworkInterfaceIPConfigurationResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Provisioning state of the backend address pool resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
}

/**
 * Backend address of an application gateway.
 */
export interface ApplicationGatewayBackendAddressResponse {
    /**
     * Fully qualified domain name (FQDN).
     */
    fqdn?: string;
    /**
     * IP address
     */
    ipAddress?: string;
}

/**
 * Backend address pool settings of an application gateway.
 */
export interface ApplicationGatewayBackendHttpSettingsResponse {
    /**
     * Array of references to application gateway authentication certificates.
     */
    authenticationCertificates?: outputs.network.v20170301.SubResourceResponse[];
    /**
     * Connection draining of the backend http settings resource.
     */
    connectionDraining?: outputs.network.v20170301.ApplicationGatewayConnectionDrainingResponse;
    /**
     * Cookie based affinity.
     */
    cookieBasedAffinity?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Port
     */
    port?: number;
    /**
     * Probe resource of an application gateway.
     */
    probe?: outputs.network.v20170301.SubResourceResponse;
    /**
     * Protocol.
     */
    protocol?: string;
    /**
     * Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
     */
    requestTimeout?: number;
}

/**
 * Connection draining allows open connections to a backend server to be active for a specified time after the backend server got removed from the configuration.
 */
export interface ApplicationGatewayConnectionDrainingResponse {
    /**
     * The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
     */
    drainTimeoutInSec: number;
    /**
     * Whether connection draining is enabled or not.
     */
    enabled: boolean;
}

/**
 * Allows to disable rules within a rule group or an entire rule group.
 */
export interface ApplicationGatewayFirewallDisabledRuleGroupResponse {
    /**
     * The name of the rule group that will be disabled.
     */
    ruleGroupName: string;
    /**
     * The list of rules that will be disabled. If null, all rules of the rule group will be disabled.
     */
    rules?: number[];
}

/**
 * Frontend IP configuration of an application gateway.
 */
export interface ApplicationGatewayFrontendIPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * PrivateIPAddress of the network interface IP Configuration.
     */
    privateIPAddress?: string;
    /**
     * PrivateIP allocation method.
     */
    privateIPAllocationMethod?: string;
    /**
     * Provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * Reference of the PublicIP resource.
     */
    publicIPAddress?: outputs.network.v20170301.SubResourceResponse;
    /**
     * Reference of the subnet resource.
     */
    subnet?: outputs.network.v20170301.SubResourceResponse;
}

/**
 * Frontend port of an application gateway.
 */
export interface ApplicationGatewayFrontendPortResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Frontend port
     */
    port?: number;
    /**
     * Provisioning state of the frontend port resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
}

/**
 * Http listener of an application gateway.
 */
export interface ApplicationGatewayHttpListenerResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Frontend IP configuration resource of an application gateway.
     */
    frontendIPConfiguration?: outputs.network.v20170301.SubResourceResponse;
    /**
     * Frontend port resource of an application gateway.
     */
    frontendPort?: outputs.network.v20170301.SubResourceResponse;
    /**
     * Host name of HTTP listener.
     */
    hostName?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Protocol.
     */
    protocol?: string;
    /**
     * Provisioning state of the HTTP listener resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * Applicable only if protocol is https. Enables SNI for multi-hosting.
     */
    requireServerNameIndication?: boolean;
    /**
     * SSL certificate resource of an application gateway.
     */
    sslCertificate?: outputs.network.v20170301.SubResourceResponse;
}

/**
 * IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is allowed.
 */
export interface ApplicationGatewayIPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Provisioning state of the application gateway subnet resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * Reference of the subnet resource. A subnet from where application gateway gets its private address.
     */
    subnet?: outputs.network.v20170301.SubResourceResponse;
}

/**
 * Path rule of URL path map of an application gateway.
 */
export interface ApplicationGatewayPathRuleResponse {
    /**
     * Backend address pool resource of URL path map.
     */
    backendAddressPool?: outputs.network.v20170301.SubResourceResponse;
    /**
     * Backend http settings resource of URL path map.
     */
    backendHttpSettings?: outputs.network.v20170301.SubResourceResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Path rules of URL path map.
     */
    paths?: string[];
    /**
     * Path rule of URL path map resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
}

/**
 * Probe of the application gateway.
 */
export interface ApplicationGatewayProbeResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Host name to send the probe to.
     */
    host?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.
     */
    interval?: number;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>
     */
    path?: string;
    /**
     * Protocol.
     */
    protocol?: string;
    /**
     * Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * the probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
     */
    timeout?: number;
    /**
     * The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.
     */
    unhealthyThreshold?: number;
}

/**
 * Request routing rule of an application gateway.
 */
export interface ApplicationGatewayRequestRoutingRuleResponse {
    /**
     * Backend address pool resource of the application gateway. 
     */
    backendAddressPool?: outputs.network.v20170301.SubResourceResponse;
    /**
     * Frontend port resource of the application gateway.
     */
    backendHttpSettings?: outputs.network.v20170301.SubResourceResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Http listener resource of the application gateway. 
     */
    httpListener?: outputs.network.v20170301.SubResourceResponse;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Provisioning state of the request routing rule resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * Rule type.
     */
    ruleType?: string;
    /**
     * URL path map resource of the application gateway.
     */
    urlPathMap?: outputs.network.v20170301.SubResourceResponse;
}

/**
 * SKU of an application gateway
 */
export interface ApplicationGatewaySkuResponse {
    /**
     * Capacity (instance count) of an application gateway.
     */
    capacity?: number;
    /**
     * Name of an application gateway SKU.
     */
    name?: string;
    /**
     * Tier of an application gateway.
     */
    tier?: string;
}

/**
 * SSL certificates of an application gateway.
 */
export interface ApplicationGatewaySslCertificateResponse {
    /**
     * Base-64 encoded pfx certificate. Only applicable in PUT Request.
     */
    data?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Password for the pfx file specified in data. Only applicable in PUT request.
     */
    password?: string;
    /**
     * Provisioning state of the SSL certificate resource Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in GET request.
     */
    publicCertData?: string;
}

/**
 * Application gateway SSL policy.
 */
export interface ApplicationGatewaySslPolicyResponse {
    /**
     * SSL protocols to be disabled on application gateway.
     */
    disabledSslProtocols?: string[];
}

/**
 * UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.
 */
export interface ApplicationGatewayUrlPathMapResponse {
    /**
     * Default backend address pool resource of URL path map.
     */
    defaultBackendAddressPool?: outputs.network.v20170301.SubResourceResponse;
    /**
     * Default backend http settings resource of URL path map.
     */
    defaultBackendHttpSettings?: outputs.network.v20170301.SubResourceResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Path rule of URL path map resource.
     */
    pathRules?: outputs.network.v20170301.ApplicationGatewayPathRuleResponse[];
    /**
     * Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
}

/**
 * Application gateway web application firewall configuration.
 */
export interface ApplicationGatewayWebApplicationFirewallConfigurationResponse {
    /**
     * The disabled rule groups.
     */
    disabledRuleGroups?: outputs.network.v20170301.ApplicationGatewayFirewallDisabledRuleGroupResponse[];
    /**
     * Whether the web application firewall is enabled or not.
     */
    enabled: boolean;
    /**
     * Web application firewall mode.
     */
    firewallMode: string;
    /**
     * The type of the web application firewall rule set. Possible values are: 'OWASP'.
     */
    ruleSetType: string;
    /**
     * The version of the rule set type.
     */
    ruleSetVersion: string;
}

/**
 * Pool of backend IP addresses.
 */
export interface BackendAddressPoolResponse {
    /**
     * Gets collection of references to IP addresses defined in network interfaces.
     */
    backendIPConfigurations: outputs.network.v20170301.NetworkInterfaceIPConfigurationResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Gets load balancing rules that use this backend address pool.
     */
    loadBalancingRules: outputs.network.v20170301.SubResourceResponse[];
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Gets outbound rules that use this backend address pool.
     */
    outboundNatRule: outputs.network.v20170301.SubResourceResponse;
    /**
     * Get provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
}

/**
 * BGP peer status details
 */
export interface BgpPeerStatusResponse {
    /**
     * The autonomous system number of the remote BGP peer
     */
    asn: number;
    /**
     * For how long the peering has been up
     */
    connectedDuration: string;
    /**
     * The virtual network gateway's local address
     */
    localAddress: string;
    /**
     * The number of BGP messages received
     */
    messagesReceived: number;
    /**
     * The number of BGP messages sent
     */
    messagesSent: number;
    /**
     * The remote BGP peer
     */
    neighbor: string;
    /**
     * The number of routes learned from this peer
     */
    routesReceived: number;
    /**
     * The BGP peer state
     */
    state: string;
}

/**
 * BGP settings details
 */
export interface BgpSettingsResponse {
    /**
     * The BGP speaker's ASN.
     */
    asn?: number;
    /**
     * The BGP peering address and BGP identifier of this BGP speaker.
     */
    bgpPeeringAddress?: string;
    /**
     * The weight added to routes learned from this BGP speaker.
     */
    peerWeight?: number;
}

/**
 * DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
 */
export interface DhcpOptionsResponse {
    /**
     * The list of DNS servers IP addresses.
     */
    dnsServers?: string[];
}

/**
 * Class containing DNS settings in a Traffic Manager profile.
 */
export interface DnsConfigResponse {
    /**
     * Gets or sets the fully-qualified domain name (FQDN) of the Traffic Manager profile.  This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
     */
    fqdn?: string;
    /**
     * Gets or sets the relative DNS name provided by this Traffic Manager profile.  This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
     */
    relativeName?: string;
    /**
     * Gets or sets the DNS Time-To-Live (TTL), in seconds.  This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
     */
    ttl?: number;
}

/**
 * Class representing a Traffic Manager endpoint.
 */
export interface EndpointResponse {
    /**
     * Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
     */
    endpointLocation?: string;
    /**
     * Gets or sets the monitoring status of the endpoint.
     */
    endpointMonitorStatus?: string;
    /**
     * Gets or sets the status of the endpoint..  If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.  Possible values are 'Enabled' and 'Disabled'.
     */
    endpointStatus?: string;
    /**
     * Gets or sets the list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
     */
    geoMapping?: string[];
    /**
     * Gets or sets the ID of the Traffic Manager endpoint.
     */
    id?: string;
    /**
     * Gets or sets the minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
     */
    minChildEndpoints?: number;
    /**
     * Gets or sets the name of the Traffic Manager endpoint.
     */
    name?: string;
    /**
     * Gets or sets the priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
     */
    priority?: number;
    /**
     * Gets or sets the fully-qualified DNS name of the endpoint.  Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
     */
    target?: string;
    /**
     * Gets or sets the Azure Resource URI of the of the endpoint.  Not applicable to endpoints of type 'ExternalEndpoints'.
     */
    targetResourceId?: string;
    /**
     * Gets or sets the endpoint type of the Traffic Manager endpoint.
     */
    type?: string;
    /**
     * Gets or sets the weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
     */
    weight?: number;
}

/**
 * Authorization in an ExpressRouteCircuit resource.
 */
export interface ExpressRouteCircuitAuthorizationResponse {
    /**
     * The authorization key.
     */
    authorizationKey?: string;
    /**
     * AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'.
     */
    authorizationUseStatus?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
}

/**
 * Specifies the peering configuration.
 */
export interface ExpressRouteCircuitPeeringConfigResponse {
    /**
     * The reference of AdvertisedPublicPrefixes.
     */
    advertisedPublicPrefixes?: string[];
    /**
     * AdvertisedPublicPrefixState of the Peering resource. Possible values are 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
     */
    advertisedPublicPrefixesState?: string;
    /**
     * The CustomerASN of the peering.
     */
    customerASN?: number;
    /**
     * The RoutingRegistryName of the configuration.
     */
    routingRegistryName?: string;
}

/**
 * Peering in an ExpressRouteCircuit resource.
 */
export interface ExpressRouteCircuitPeeringResponse {
    /**
     * The Azure ASN.
     */
    azureASN?: number;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * The GatewayManager Etag.
     */
    gatewayManagerEtag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The IPv6 peering configuration.
     */
    ipv6PeeringConfig?: outputs.network.v20170301.Ipv6ExpressRouteCircuitPeeringConfigResponse;
    /**
     * Gets whether the provider or the customer last modified the peering.
     */
    lastModifiedBy?: string;
    /**
     * The Microsoft peering configuration.
     */
    microsoftPeeringConfig?: outputs.network.v20170301.ExpressRouteCircuitPeeringConfigResponse;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The peer ASN.
     */
    peerASN?: number;
    /**
     * The PeeringType. Possible values are: 'AzurePublicPeering', 'AzurePrivatePeering', and 'MicrosoftPeering'.
     */
    peeringType?: string;
    /**
     * The primary port.
     */
    primaryAzurePort?: string;
    /**
     * The primary address prefix.
     */
    primaryPeerAddressPrefix?: string;
    /**
     * Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * The reference of the RouteFilter resource.
     */
    routeFilter?: outputs.network.v20170301.RouteFilterResponse;
    /**
     * The secondary port.
     */
    secondaryAzurePort?: string;
    /**
     * The secondary address prefix.
     */
    secondaryPeerAddressPrefix?: string;
    /**
     * The shared key.
     */
    sharedKey?: string;
    /**
     * The state of peering. Possible values are: 'Disabled' and 'Enabled'
     */
    state?: string;
    /**
     * Gets peering stats.
     */
    stats?: outputs.network.v20170301.ExpressRouteCircuitStatsResponse;
    /**
     * The VLAN ID.
     */
    vlanId?: number;
}

/**
 * Contains ServiceProviderProperties in an ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitServiceProviderPropertiesResponse {
    /**
     * The BandwidthInMbps.
     */
    bandwidthInMbps?: number;
    /**
     * The peering location.
     */
    peeringLocation?: string;
    /**
     * The serviceProviderName.
     */
    serviceProviderName?: string;
}

/**
 * Contains SKU in an ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitSkuResponse {
    /**
     * The family of the SKU. Possible values are: 'UnlimitedData' and 'MeteredData'.
     */
    family?: string;
    /**
     * The name of the SKU.
     */
    name?: string;
    /**
     * The tier of the SKU. Possible values are 'Standard' and 'Premium'.
     */
    tier?: string;
}

/**
 * Contains stats associated with the peering.
 */
export interface ExpressRouteCircuitStatsResponse {
    /**
     * Gets BytesIn of the peering.
     */
    primarybytesIn?: number;
    /**
     * Gets BytesOut of the peering.
     */
    primarybytesOut?: number;
    /**
     * Gets BytesIn of the peering.
     */
    secondarybytesIn?: number;
    /**
     * Gets BytesOut of the peering.
     */
    secondarybytesOut?: number;
}

/**
 * Frontend IP address of the load balancer.
 */
export interface FrontendIPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Read only. Inbound pools URIs that use this frontend IP.
     */
    inboundNatPools: outputs.network.v20170301.SubResourceResponse[];
    /**
     * Read only. Inbound rules URIs that use this frontend IP.
     */
    inboundNatRules: outputs.network.v20170301.SubResourceResponse[];
    /**
     * Gets load balancing rules URIs that use this frontend IP.
     */
    loadBalancingRules: outputs.network.v20170301.SubResourceResponse[];
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Read only. Outbound rules URIs that use this frontend IP.
     */
    outboundNatRules: outputs.network.v20170301.SubResourceResponse[];
    /**
     * The private IP address of the IP configuration.
     */
    privateIPAddress?: string;
    /**
     * The Private IP allocation method. Possible values are: 'Static' and 'Dynamic'.
     */
    privateIPAllocationMethod?: string;
    /**
     * Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * The reference of the Public IP resource.
     */
    publicIPAddress?: outputs.network.v20170301.PublicIPAddressResponse;
    /**
     * The reference of the subnet resource.
     */
    subnet?: outputs.network.v20170301.SubnetResponse;
}

/**
 * Gateway routing details
 */
export interface GatewayRouteResponse {
    /**
     * The route's AS path sequence
     */
    asPath: string;
    /**
     * The gateway's local address
     */
    localAddress: string;
    /**
     * The route's network prefix
     */
    network: string;
    /**
     * The route's next hop
     */
    nextHop: string;
    /**
     * The source this route was learned from
     */
    origin: string;
    /**
     * The peer this route was learned from
     */
    sourcePeer: string;
    /**
     * The route's weight
     */
    weight: number;
}

/**
 * IPConfiguration
 */
export interface IPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The private IP address of the IP configuration.
     */
    privateIPAddress?: string;
    /**
     * The private IP allocation method. Possible values are 'Static' and 'Dynamic'.
     */
    privateIPAllocationMethod?: string;
    /**
     * Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * The reference of the public IP resource.
     */
    publicIPAddress?: outputs.network.v20170301.PublicIPAddressResponse;
    /**
     * The reference of the subnet resource.
     */
    subnet?: outputs.network.v20170301.SubnetResponse;
}

/**
 * Inbound NAT pool of the load balancer.
 */
export interface InboundNatPoolResponse {
    /**
     * The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
     */
    backendPort: number;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * A reference to frontend IP addresses.
     */
    frontendIPConfiguration?: outputs.network.v20170301.SubResourceResponse;
    /**
     * The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65535.
     */
    frontendPortRangeEnd: number;
    /**
     * The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65534.
     */
    frontendPortRangeStart: number;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'.
     */
    protocol: string;
    /**
     * Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
}

/**
 * Inbound NAT rule of the load balancer.
 */
export interface InboundNatRuleResponse {
    /**
     * A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations is forwarded to the backed IP.
     */
    backendIPConfiguration: outputs.network.v20170301.NetworkInterfaceIPConfigurationResponse;
    /**
     * The port used for the internal endpoint. Acceptable values range from 1 to 65535.
     */
    backendPort?: number;
    /**
     * Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
     */
    enableFloatingIP?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * A reference to frontend IP addresses.
     */
    frontendIPConfiguration?: outputs.network.v20170301.SubResourceResponse;
    /**
     * The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.
     */
    frontendPort?: number;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
     */
    idleTimeoutInMinutes?: number;
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'
     */
    protocol?: string;
    /**
     * Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
}

/**
 * An IPSec Policy configuration for a virtual network gateway connection
 */
export interface IpsecPolicyResponse {
    /**
     * The DH Groups used in IKE Phase 1 for initial SA.
     */
    dhGroup: string;
    /**
     * The IKE encryption algorithm (IKE phase 2).
     */
    ikeEncryption: string;
    /**
     * The IKE integrity algorithm (IKE phase 2).
     */
    ikeIntegrity: string;
    /**
     * The IPSec encryption algorithm (IKE phase 1).
     */
    ipsecEncryption: string;
    /**
     * The IPSec integrity algorithm (IKE phase 1).
     */
    ipsecIntegrity: string;
    /**
     * The DH Groups used in IKE Phase 2 for new child SA.
     */
    pfsGroup: string;
    /**
     * The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
     */
    saDataSizeKilobytes: number;
    /**
     * The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
     */
    saLifeTimeSeconds: number;
}

/**
 * Contains IPv6 peering config.
 */
export interface Ipv6ExpressRouteCircuitPeeringConfigResponse {
    /**
     * The Microsoft peering configuration.
     */
    microsoftPeeringConfig?: outputs.network.v20170301.ExpressRouteCircuitPeeringConfigResponse;
    /**
     * The primary address prefix.
     */
    primaryPeerAddressPrefix?: string;
    /**
     * The reference of the RouteFilter resource.
     */
    routeFilter?: outputs.network.v20170301.RouteFilterResponse;
    /**
     * The secondary address prefix.
     */
    secondaryPeerAddressPrefix?: string;
    /**
     * The state of peering. Possible values are: 'Disabled' and 'Enabled'
     */
    state?: string;
}

/**
 * A load balancing rule for a load balancer.
 */
export interface LoadBalancingRuleResponse {
    /**
     * A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs.
     */
    backendAddressPool?: outputs.network.v20170301.SubResourceResponse;
    /**
     * The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535. 
     */
    backendPort?: number;
    /**
     * Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
     */
    enableFloatingIP?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * A reference to frontend IP addresses.
     */
    frontendIPConfiguration?: outputs.network.v20170301.SubResourceResponse;
    /**
     * The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 1 and 65534.
     */
    frontendPort: number;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
     */
    idleTimeoutInMinutes?: number;
    /**
     * The load distribution policy for this rule. Possible values are 'Default', 'SourceIP', and 'SourceIPProtocol'.
     */
    loadDistribution?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The reference of the load balancer probe used by the load balancing rule.
     */
    probe?: outputs.network.v20170301.SubResourceResponse;
    /**
     * The transport protocol for the external endpoint. Possible values are 'Udp' or 'Tcp'
     */
    protocol: string;
    /**
     * Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
}

/**
 * A common class for general resource information
 */
export interface LocalNetworkGatewayResponse {
    /**
     * Local network gateway's BGP speaker settings.
     */
    bgpSettings?: outputs.network.v20170301.BgpSettingsResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * IP address of local network gateway.
     */
    gatewayIpAddress?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Local network site address space.
     */
    localNetworkAddressSpace?: outputs.network.v20170301.AddressSpaceResponse;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The provisioning state of the LocalNetworkGateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState: string;
    /**
     * The resource GUID property of the LocalNetworkGateway resource.
     */
    resourceGuid?: string;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Class containing endpoint monitoring settings in a Traffic Manager profile.
 */
export interface MonitorConfigResponse {
    /**
     * Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.
     */
    path?: string;
    /**
     * Gets or sets the TCP port used to probe for endpoint health.
     */
    port?: number;
    /**
     * Gets or sets the profile-level monitoring status of the Traffic Manager profile.
     */
    profileMonitorStatus?: string;
    /**
     * Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.
     */
    protocol?: string;
}

/**
 * DNS settings of a network interface.
 */
export interface NetworkInterfaceDnsSettingsResponse {
    /**
     * If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.
     */
    appliedDnsServers?: string[];
    /**
     * List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection.
     */
    dnsServers?: string[];
    /**
     * Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.
     */
    internalDnsNameLabel?: string;
    /**
     * Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the VM name with the value of internalDomainNameSuffix.
     */
    internalDomainNameSuffix?: string;
    /**
     * Fully qualified DNS name supporting internal communications between VMs in the same virtual network.
     */
    internalFqdn?: string;
}

/**
 * IPConfiguration in a network interface.
 */
export interface NetworkInterfaceIPConfigurationResponse {
    /**
     * The reference of ApplicationGatewayBackendAddressPool resource.
     */
    applicationGatewayBackendAddressPools?: outputs.network.v20170301.ApplicationGatewayBackendAddressPoolResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The reference of LoadBalancerBackendAddressPool resource.
     */
    loadBalancerBackendAddressPools?: outputs.network.v20170301.BackendAddressPoolResponse[];
    /**
     * A list of references of LoadBalancerInboundNatRules.
     */
    loadBalancerInboundNatRules?: outputs.network.v20170301.InboundNatRuleResponse[];
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Gets whether this is a primary customer address on the network interface.
     */
    primary?: boolean;
    privateIPAddress?: string;
    /**
     * Available from Api-Version 2016-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
     */
    privateIPAddressVersion?: string;
    /**
     * Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'.
     */
    privateIPAllocationMethod?: string;
    provisioningState?: string;
    /**
     * Public IP address resource.
     */
    publicIPAddress?: outputs.network.v20170301.PublicIPAddressResponse;
    /**
     * Subnet in a virtual network resource.
     */
    subnet?: outputs.network.v20170301.SubnetResponse;
}

/**
 * A network interface in a resource group.
 */
export interface NetworkInterfaceResponse {
    /**
     * The DNS settings in network interface.
     */
    dnsSettings?: outputs.network.v20170301.NetworkInterfaceDnsSettingsResponse;
    /**
     * If the network interface is accelerated networking enabled.
     */
    enableAcceleratedNetworking?: boolean;
    /**
     * Indicates whether IP forwarding is enabled on this network interface.
     */
    enableIPForwarding?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * A list of IPConfigurations of the network interface.
     */
    ipConfigurations?: outputs.network.v20170301.NetworkInterfaceIPConfigurationResponse[];
    /**
     * Resource location.
     */
    location?: string;
    /**
     * The MAC address of the network interface.
     */
    macAddress?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The reference of the NetworkSecurityGroup resource.
     */
    networkSecurityGroup?: outputs.network.v20170301.NetworkSecurityGroupResponse;
    /**
     * Gets whether this is a primary network interface on a virtual machine.
     */
    primary?: boolean;
    /**
     * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * The resource GUID property of the network interface resource.
     */
    resourceGuid?: string;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
    /**
     * The reference of a virtual machine.
     */
    virtualMachine?: outputs.network.v20170301.SubResourceResponse;
}

/**
 * NetworkSecurityGroup resource.
 */
export interface NetworkSecurityGroupResponse {
    /**
     * The default security rules of network security group.
     */
    defaultSecurityRules?: outputs.network.v20170301.SecurityRuleResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * A collection of references to network interfaces.
     */
    networkInterfaces: outputs.network.v20170301.NetworkInterfaceResponse[];
    /**
     * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * The resource GUID property of the network security group resource.
     */
    resourceGuid?: string;
    /**
     * A collection of security rules of the network security group.
     */
    securityRules?: outputs.network.v20170301.SecurityRuleResponse[];
    /**
     * A collection of references to subnets.
     */
    subnets: outputs.network.v20170301.SubnetResponse[];
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Outbound NAT pool of the load balancer.
 */
export interface OutboundNatRuleResponse {
    /**
     * The number of outbound ports to be used for NAT.
     */
    allocatedOutboundPorts?: number;
    /**
     * A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs.
     */
    backendAddressPool: outputs.network.v20170301.SubResourceResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * The Frontend IP addresses of the load balancer.
     */
    frontendIPConfigurations?: outputs.network.v20170301.SubResourceResponse[];
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
}

/**
 * Filter that is applied to packet capture request. Multiple filters can be applied.
 */
export interface PacketCaptureFilterResponse {
    /**
     * Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5"? for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
     */
    localIPAddress?: string;
    /**
     * Local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
     */
    localPort?: string;
    /**
     * Protocol to be filtered on.
     */
    protocol?: string;
    /**
     * Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
     */
    remoteIPAddress?: string;
    /**
     * Remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
     */
    remotePort?: string;
}
/**
 * packetCaptureFilterResponseProvideDefaults sets the appropriate defaults for PacketCaptureFilterResponse
 */
export function packetCaptureFilterResponseProvideDefaults(val: PacketCaptureFilterResponse): PacketCaptureFilterResponse {
    return {
        ...val,
        protocol: (val.protocol) ?? "Any",
    };
}

/**
 * Describes the storage location for a packet capture session.
 */
export interface PacketCaptureStorageLocationResponse {
    /**
     * A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with /var/captures. Required if no storage ID is provided, otherwise optional.
     */
    filePath?: string;
    /**
     * The ID of the storage account to save the packet capture session. Required if no local file path is provided.
     */
    storageId?: string;
    /**
     * The URI of the storage path to save the packet capture. Must be a well-formed URI describing the location to save the packet capture.
     */
    storagePath?: string;
}

/**
 * A load balancer probe.
 */
export interface ProbeResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
     */
    intervalInSeconds?: number;
    /**
     * The load balancer rules that use this probe.
     */
    loadBalancingRules: outputs.network.v20170301.SubResourceResponse[];
    /**
     * Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.
     */
    numberOfProbes?: number;
    /**
     * The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
     */
    port: number;
    /**
     * The protocol of the end point. Possible values are: 'Http' or 'Tcp'. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
     */
    protocol: string;
    /**
     * Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
     */
    requestPath?: string;
}

/**
 * Contains FQDN of the DNS record associated with the public IP address
 */
export interface PublicIPAddressDnsSettingsResponse {
    /**
     * Gets or sets the Domain name label.The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.
     */
    domainNameLabel?: string;
    /**
     * Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
     */
    fqdn?: string;
    /**
     * Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN. 
     */
    reverseFqdn?: string;
}

/**
 * Public IP address resource.
 */
export interface PublicIPAddressResponse {
    /**
     * The FQDN of the DNS record associated with the public IP address.
     */
    dnsSettings?: outputs.network.v20170301.PublicIPAddressDnsSettingsResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The idle timeout of the public IP address.
     */
    idleTimeoutInMinutes?: number;
    ipAddress?: string;
    /**
     * IPConfiguration
     */
    ipConfiguration: outputs.network.v20170301.IPConfigurationResponse;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * The public IP address version. Possible values are: 'IPv4' and 'IPv6'.
     */
    publicIPAddressVersion?: string;
    /**
     * The public IP allocation method. Possible values are: 'Static' and 'Dynamic'.
     */
    publicIPAllocationMethod?: string;
    /**
     * The resource GUID property of the public IP resource.
     */
    resourceGuid?: string;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * ResourceNavigationLink resource.
 */
export interface ResourceNavigationLinkResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Link to the external resource
     */
    link?: string;
    /**
     * Resource type of the linked resource.
     */
    linkedResourceType?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Provisioning state of the ResourceNavigationLink resource.
     */
    provisioningState: string;
}

/**
 * Route Filter Resource.
 */
export interface RouteFilterResponse {
    /**
     * Gets a unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * A collection of references to express route circuit peerings.
     */
    peerings: outputs.network.v20170301.ExpressRouteCircuitPeeringResponse[];
    /**
     * The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and 'Failed'.
     */
    provisioningState: string;
    /**
     * Collection of RouteFilterRules contained within a route filter.
     */
    rules?: outputs.network.v20170301.RouteFilterRuleResponse[];
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Route Filter Rule Resource
 */
export interface RouteFilterRuleResponse {
    /**
     * The access type of the rule. Valid values are: 'Allow', 'Deny'
     */
    access: string;
    /**
     * The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020']
     */
    communities: string[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name: string;
    /**
     * The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and 'Failed'.
     */
    provisioningState: string;
    /**
     * The rule type of the rule. Valid value is: 'Community'
     */
    routeFilterRuleType: string;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
}

/**
 * Route resource
 */
export interface RouteResponse {
    /**
     * The destination CIDR to which the route applies.
     */
    addressPrefix?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
     */
    nextHopIpAddress?: string;
    /**
     * The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'
     */
    nextHopType: string;
    /**
     * The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
}

/**
 * Route table resource.
 */
export interface RouteTableResponse {
    /**
     * Gets a unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * Collection of routes contained within a route table.
     */
    routes?: outputs.network.v20170301.RouteResponse[];
    /**
     * A collection of references to subnets.
     */
    subnets: outputs.network.v20170301.SubnetResponse[];
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Network security rule.
 */
export interface SecurityRuleResponse {
    /**
     * The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.
     */
    access: string;
    /**
     * A description for this rule. Restricted to 140 chars.
     */
    description?: string;
    /**
     * The destination address prefix. CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
     */
    destinationAddressPrefix: string;
    /**
     * The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
     */
    destinationPortRange?: string;
    /**
     * The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.
     */
    direction: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
     */
    priority?: number;
    /**
     * Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.
     */
    protocol: string;
    /**
     * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState?: string;
    /**
     * The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. 
     */
    sourceAddressPrefix: string;
    /**
     * The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
     */
    sourcePortRange?: string;
}

export interface SubResourceResponse {
    /**
     * Resource ID.
     */
    id?: string;
}

/**
 * Subnet in a virtual network resource.
 */
export interface SubnetResponse {
    /**
     * The address prefix for the subnet.
     */
    addressPrefix?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Gets an array of references to the network interface IP configurations using subnet.
     */
    ipConfigurations: outputs.network.v20170301.IPConfigurationResponse[];
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The reference of the NetworkSecurityGroup resource.
     */
    networkSecurityGroup?: outputs.network.v20170301.NetworkSecurityGroupResponse;
    /**
     * The provisioning state of the resource.
     */
    provisioningState?: string;
    /**
     * Gets an array of references to the external resources using subnet.
     */
    resourceNavigationLinks?: outputs.network.v20170301.ResourceNavigationLinkResponse[];
    /**
     * The reference of the RouteTable resource.
     */
    routeTable?: outputs.network.v20170301.RouteTableResponse;
}

/**
 * VirtualNetworkGatewayConnection properties
 */
export interface TunnelConnectionHealthResponse {
    /**
     * Virtual network Gateway connection status
     */
    connectionStatus: string;
    /**
     * The Egress Bytes Transferred in this connection
     */
    egressBytesTransferred: number;
    /**
     * The Ingress Bytes Transferred in this connection
     */
    ingressBytesTransferred: number;
    /**
     * The time at which connection was established in Utc format.
     */
    lastConnectionEstablishedUtcTime: string;
    /**
     * Tunnel name.
     */
    tunnel: string;
}

/**
 * IP configuration for virtual network gateway
 */
export interface VirtualNetworkGatewayIPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The private IP allocation method. Possible values are: 'Static' and 'Dynamic'.
     */
    privateIPAllocationMethod?: string;
    /**
     * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState: string;
    /**
     * The reference of the public IP resource.
     */
    publicIPAddress?: outputs.network.v20170301.SubResourceResponse;
    /**
     * The reference of the subnet resource.
     */
    subnet?: outputs.network.v20170301.SubResourceResponse;
}

/**
 * A common class for general resource information
 */
export interface VirtualNetworkGatewayResponse {
    /**
     * ActiveActive flag
     */
    activeActive?: boolean;
    /**
     * Virtual network gateway's BGP speaker settings.
     */
    bgpSettings?: outputs.network.v20170301.BgpSettingsResponse;
    /**
     * Whether BGP is enabled for this virtual network gateway or not.
     */
    enableBgp?: boolean;
    /**
     * Gets a unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * The reference of the LocalNetworkGateway resource which represents local network site having default routes. Assign Null value in case of removing existing default site setting.
     */
    gatewayDefaultSite?: outputs.network.v20170301.SubResourceResponse;
    /**
     * The type of this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.
     */
    gatewayType?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * IP configurations for virtual network gateway.
     */
    ipConfigurations?: outputs.network.v20170301.VirtualNetworkGatewayIPConfigurationResponse[];
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The provisioning state of the VirtualNetworkGateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState: string;
    /**
     * The resource GUID property of the VirtualNetworkGateway resource.
     */
    resourceGuid?: string;
    /**
     * The reference of the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network gateway.
     */
    sku?: outputs.network.v20170301.VirtualNetworkGatewaySkuResponse;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
    /**
     * The reference of the VpnClientConfiguration resource which represents the P2S VpnClient configurations.
     */
    vpnClientConfiguration?: outputs.network.v20170301.VpnClientConfigurationResponse;
    /**
     * The type of this virtual network gateway. Possible values are: 'PolicyBased' and 'RouteBased'.
     */
    vpnType?: string;
}

/**
 * VirtualNetworkGatewaySku details
 */
export interface VirtualNetworkGatewaySkuResponse {
    /**
     * The capacity.
     */
    capacity?: number;
    /**
     * Gateway SKU name.
     */
    name?: string;
    /**
     * Gateway SKU tier.
     */
    tier?: string;
}

/**
 * Peerings in a virtual network resource.
 */
export interface VirtualNetworkPeeringResponse {
    /**
     * Whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed.
     */
    allowForwardedTraffic?: boolean;
    /**
     * If gateway links can be used in remote virtual networking to link to this virtual network.
     */
    allowGatewayTransit?: boolean;
    /**
     * Whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space.
     */
    allowVirtualNetworkAccess?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The status of the virtual network peering. Possible values are 'Initiated', 'Connected', and 'Disconnected'.
     */
    peeringState?: string;
    /**
     * The provisioning state of the resource.
     */
    provisioningState?: string;
    /**
     * The reference of the remote virtual network.
     */
    remoteVirtualNetwork?: outputs.network.v20170301.SubResourceResponse;
    /**
     * If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
     */
    useRemoteGateways?: boolean;
}

/**
 * VpnClientConfiguration for P2S client.
 */
export interface VpnClientConfigurationResponse {
    /**
     * The reference of the address space resource which represents Address space for P2S VpnClient.
     */
    vpnClientAddressPool?: outputs.network.v20170301.AddressSpaceResponse;
    /**
     * VpnClientRevokedCertificate for Virtual network gateway.
     */
    vpnClientRevokedCertificates?: outputs.network.v20170301.VpnClientRevokedCertificateResponse[];
    /**
     * VpnClientRootCertificate for virtual network gateway.
     */
    vpnClientRootCertificates?: outputs.network.v20170301.VpnClientRootCertificateResponse[];
}

/**
 * VPN client revoked certificate of virtual network gateway.
 */
export interface VpnClientRevokedCertificateResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the VPN client revoked certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState: string;
    /**
     * The revoked VPN client certificate thumbprint.
     */
    thumbprint?: string;
}

/**
 * VPN client root certificate of virtual network gateway
 */
export interface VpnClientRootCertificateResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the VPN client root certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    provisioningState: string;
    /**
     * The certificate public data.
     */
    publicCertData: string;
}

