// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * An A record.
 */
export interface ARecordResponse {
    /**
     * The IPv4 address of this A record.
     */
    ipv4Address?: string;
}

/**
 * An AAAA record.
 */
export interface AaaaRecordResponse {
    /**
     * The IPv6 address of this AAAA record.
     */
    ipv6Address?: string;
}

/**
 * AAD Vpn authentication type related parameters.
 */
export interface AadAuthenticationParametersResponse {
    /**
     * AAD Vpn authentication parameter AAD audience.
     */
    aadAudience?: string;
    /**
     * AAD Vpn authentication parameter AAD issuer.
     */
    aadIssuer?: string;
    /**
     * AAD Vpn authentication parameter AAD tenant.
     */
    aadTenant?: string;
}

/**
 * AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual network.
 */
export interface AddressSpaceResponse {
    /**
     * A list of address blocks reserved for this virtual network in CIDR notation.
     */
    addressPrefixes?: string[];
}

/**
 * Authentication certificates of an application gateway.
 */
export interface ApplicationGatewayAuthenticationCertificateResponse {
    /**
     * Certificate public data.
     */
    data?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the authentication certificate that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * The provisioning state of the authentication certificate resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Application Gateway autoscale configuration.
 */
export interface ApplicationGatewayAutoscaleConfigurationResponse {
    /**
     * Upper bound on number of Application Gateway capacity.
     */
    maxCapacity?: number;
    /**
     * Lower bound on number of Application Gateway capacity.
     */
    minCapacity: number;
}

/**
 * Backend Address Pool of an application gateway.
 */
export interface ApplicationGatewayBackendAddressPoolResponse {
    /**
     * Backend addresses.
     */
    backendAddresses?: outputs.network.v20200601.ApplicationGatewayBackendAddressResponse[];
    /**
     * Collection of references to IPs defined in network interfaces.
     */
    backendIPConfigurations: outputs.network.v20200601.NetworkInterfaceIPConfigurationResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the backend address pool that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * The provisioning state of the backend address pool resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Backend address of an application gateway.
 */
export interface ApplicationGatewayBackendAddressResponse {
    /**
     * Fully qualified domain name (FQDN).
     */
    fqdn?: string;
    /**
     * IP address.
     */
    ipAddress?: string;
}

/**
 * Application gateway BackendHealthHttp settings.
 */
export interface ApplicationGatewayBackendHealthHttpSettingsResponse {
    /**
     * Reference to an ApplicationGatewayBackendHttpSettings resource.
     */
    backendHttpSettings?: outputs.network.v20200601.ApplicationGatewayBackendHttpSettingsResponse;
    /**
     * List of ApplicationGatewayBackendHealthServer resources.
     */
    servers?: outputs.network.v20200601.ApplicationGatewayBackendHealthServerResponse[];
}

/**
 * Application gateway backendhealth http settings.
 */
export interface ApplicationGatewayBackendHealthServerResponse {
    /**
     * IP address or FQDN of backend server.
     */
    address?: string;
    /**
     * Health of backend server.
     */
    health?: string;
    /**
     * Health Probe Log.
     */
    healthProbeLog?: string;
    /**
     * Reference to IP configuration of backend server.
     */
    ipConfiguration?: outputs.network.v20200601.NetworkInterfaceIPConfigurationResponse;
}

/**
 * Backend address pool settings of an application gateway.
 */
export interface ApplicationGatewayBackendHttpSettingsResponse {
    /**
     * Cookie name to use for the affinity cookie.
     */
    affinityCookieName?: string;
    /**
     * Array of references to application gateway authentication certificates.
     */
    authenticationCertificates?: outputs.network.v20200601.SubResourceResponse[];
    /**
     * Connection draining of the backend http settings resource.
     */
    connectionDraining?: outputs.network.v20200601.ApplicationGatewayConnectionDrainingResponse;
    /**
     * Cookie based affinity.
     */
    cookieBasedAffinity?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Host header to be sent to the backend servers.
     */
    hostName?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the backend http settings that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
     */
    path?: string;
    /**
     * Whether to pick host header should be picked from the host name of the backend server. Default value is false.
     */
    pickHostNameFromBackendAddress?: boolean;
    /**
     * The destination port on the backend.
     */
    port?: number;
    /**
     * Probe resource of an application gateway.
     */
    probe?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Whether the probe is enabled. Default value is false.
     */
    probeEnabled?: boolean;
    /**
     * The protocol used to communicate with the backend.
     */
    protocol?: string;
    /**
     * The provisioning state of the backend HTTP settings resource.
     */
    provisioningState: string;
    /**
     * Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
     */
    requestTimeout?: number;
    /**
     * Array of references to application gateway trusted root certificates.
     */
    trustedRootCertificates?: outputs.network.v20200601.SubResourceResponse[];
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Application gateway client authentication configuration.
 */
export interface ApplicationGatewayClientAuthConfigurationResponse {
    /**
     * Verify client certificate issuer name on the application gateway.
     */
    verifyClientCertIssuerDN?: boolean;
}

/**
 * Connection draining allows open connections to a backend server to be active for a specified time after the backend server got removed from the configuration.
 */
export interface ApplicationGatewayConnectionDrainingResponse {
    /**
     * The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
     */
    drainTimeoutInSec: number;
    /**
     * Whether connection draining is enabled or not.
     */
    enabled: boolean;
}

/**
 * Customer error of an application gateway.
 */
export interface ApplicationGatewayCustomErrorResponse {
    /**
     * Error page URL of the application gateway customer error.
     */
    customErrorPageUrl?: string;
    /**
     * Status code of the application gateway customer error.
     */
    statusCode?: string;
}

/**
 * Allows to disable rules within a rule group or an entire rule group.
 */
export interface ApplicationGatewayFirewallDisabledRuleGroupResponse {
    /**
     * The name of the rule group that will be disabled.
     */
    ruleGroupName: string;
    /**
     * The list of rules that will be disabled. If null, all rules of the rule group will be disabled.
     */
    rules?: number[];
}

/**
 * Allow to exclude some variable satisfy the condition for the WAF check.
 */
export interface ApplicationGatewayFirewallExclusionResponse {
    /**
     * The variable to be excluded.
     */
    matchVariable: string;
    /**
     * When matchVariable is a collection, operator used to specify which elements in the collection this exclusion applies to.
     */
    selector: string;
    /**
     * When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
     */
    selectorMatchOperator: string;
}

/**
 * Frontend IP configuration of an application gateway.
 */
export interface ApplicationGatewayFrontendIPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the frontend IP configuration that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * PrivateIPAddress of the network interface IP Configuration.
     */
    privateIPAddress?: string;
    /**
     * The private IP address allocation method.
     */
    privateIPAllocationMethod?: string;
    /**
     * Reference to the application gateway private link configuration.
     */
    privateLinkConfiguration?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The provisioning state of the frontend IP configuration resource.
     */
    provisioningState: string;
    /**
     * Reference to the PublicIP resource.
     */
    publicIPAddress?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Reference to the subnet resource.
     */
    subnet?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Frontend port of an application gateway.
 */
export interface ApplicationGatewayFrontendPortResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the frontend port that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * Frontend port.
     */
    port?: number;
    /**
     * The provisioning state of the frontend port resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Header configuration of the Actions set in Application Gateway.
 */
export interface ApplicationGatewayHeaderConfigurationResponse {
    /**
     * Header name of the header configuration.
     */
    headerName?: string;
    /**
     * Header value of the header configuration.
     */
    headerValue?: string;
}

/**
 * Http listener of an application gateway.
 */
export interface ApplicationGatewayHttpListenerResponse {
    /**
     * Custom error configurations of the HTTP listener.
     */
    customErrorConfigurations?: outputs.network.v20200601.ApplicationGatewayCustomErrorResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Reference to the FirewallPolicy resource.
     */
    firewallPolicy?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Frontend IP configuration resource of an application gateway.
     */
    frontendIPConfiguration?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Frontend port resource of an application gateway.
     */
    frontendPort?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Host name of HTTP listener.
     */
    hostName?: string;
    /**
     * List of Host names for HTTP Listener that allows special wildcard characters as well.
     */
    hostNames?: string[];
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the HTTP listener that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * Protocol of the HTTP listener.
     */
    protocol?: string;
    /**
     * The provisioning state of the HTTP listener resource.
     */
    provisioningState: string;
    /**
     * Applicable only if protocol is https. Enables SNI for multi-hosting.
     */
    requireServerNameIndication?: boolean;
    /**
     * SSL certificate resource of an application gateway.
     */
    sslCertificate?: outputs.network.v20200601.SubResourceResponse;
    /**
     * SSL profile resource of the application gateway.
     */
    sslProfile?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is allowed.
 */
export interface ApplicationGatewayIPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the IP configuration that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * The provisioning state of the application gateway IP configuration resource.
     */
    provisioningState: string;
    /**
     * Reference to the subnet resource. A subnet from where application gateway gets its private address.
     */
    subnet?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Path rule of URL path map of an application gateway.
 */
export interface ApplicationGatewayPathRuleResponse {
    /**
     * Backend address pool resource of URL path map path rule.
     */
    backendAddressPool?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Backend http settings resource of URL path map path rule.
     */
    backendHttpSettings?: outputs.network.v20200601.SubResourceResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Reference to the FirewallPolicy resource.
     */
    firewallPolicy?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the path rule that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * Path rules of URL path map.
     */
    paths?: string[];
    /**
     * The provisioning state of the path rule resource.
     */
    provisioningState: string;
    /**
     * Redirect configuration resource of URL path map path rule.
     */
    redirectConfiguration?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Rewrite rule set resource of URL path map path rule.
     */
    rewriteRuleSet?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Private Endpoint connection on an application gateway.
 */
export interface ApplicationGatewayPrivateEndpointConnectionResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The consumer link id.
     */
    linkIdentifier: string;
    /**
     * Name of the private endpoint connection on an application gateway.
     */
    name?: string;
    /**
     * The resource of private end point.
     */
    privateEndpoint: outputs.network.v20200601.PrivateEndpointResponse;
    /**
     * A collection of information about the state of the connection between service consumer and provider.
     */
    privateLinkServiceConnectionState?: outputs.network.v20200601.PrivateLinkServiceConnectionStateResponse;
    /**
     * The provisioning state of the application gateway private endpoint connection resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Private Link Configuration on an application gateway.
 */
export interface ApplicationGatewayPrivateLinkConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * An array of application gateway private link ip configurations.
     */
    ipConfigurations?: outputs.network.v20200601.ApplicationGatewayPrivateLinkIpConfigurationResponse[];
    /**
     * Name of the private link configuration that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * The provisioning state of the application gateway private link configuration.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * The application gateway private link ip configuration.
 */
export interface ApplicationGatewayPrivateLinkIpConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of application gateway private link ip configuration.
     */
    name?: string;
    /**
     * Whether the ip configuration is primary or not.
     */
    primary?: boolean;
    /**
     * The private IP address of the IP configuration.
     */
    privateIPAddress?: string;
    /**
     * The private IP address allocation method.
     */
    privateIPAllocationMethod?: string;
    /**
     * The provisioning state of the application gateway private link IP configuration.
     */
    provisioningState: string;
    /**
     * Reference to the subnet resource.
     */
    subnet?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The resource type.
     */
    type: string;
}

/**
 * Application gateway probe health response match.
 */
export interface ApplicationGatewayProbeHealthResponseMatchResponse {
    /**
     * Body that must be contained in the health response. Default value is empty.
     */
    body?: string;
    /**
     * Allowed ranges of healthy status codes. Default range of healthy status codes is 200-399.
     */
    statusCodes?: string[];
}

/**
 * Probe of the application gateway.
 */
export interface ApplicationGatewayProbeResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Host name to send the probe to.
     */
    host?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.
     */
    interval?: number;
    /**
     * Criterion for classifying a healthy probe response.
     */
    match?: outputs.network.v20200601.ApplicationGatewayProbeHealthResponseMatchResponse;
    /**
     * Minimum number of servers that are always marked healthy. Default value is 0.
     */
    minServers?: number;
    /**
     * Name of the probe that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>.
     */
    path?: string;
    /**
     * Whether the host header should be picked from the backend http settings. Default value is false.
     */
    pickHostNameFromBackendHttpSettings?: boolean;
    /**
     * Custom port which will be used for probing the backend servers. The valid value ranges from 1 to 65535. In case not set, port from http settings will be used. This property is valid for Standard_v2 and WAF_v2 only.
     */
    port?: number;
    /**
     * The protocol used for the probe.
     */
    protocol?: string;
    /**
     * The provisioning state of the probe resource.
     */
    provisioningState: string;
    /**
     * The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
     */
    timeout?: number;
    /**
     * Type of the resource.
     */
    type: string;
    /**
     * The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.
     */
    unhealthyThreshold?: number;
}

/**
 * Redirect configuration of an application gateway.
 */
export interface ApplicationGatewayRedirectConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Include path in the redirected url.
     */
    includePath?: boolean;
    /**
     * Include query string in the redirected url.
     */
    includeQueryString?: boolean;
    /**
     * Name of the redirect configuration that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * Path rules specifying redirect configuration.
     */
    pathRules?: outputs.network.v20200601.SubResourceResponse[];
    /**
     * HTTP redirection type.
     */
    redirectType?: string;
    /**
     * Request routing specifying redirect configuration.
     */
    requestRoutingRules?: outputs.network.v20200601.SubResourceResponse[];
    /**
     * Reference to a listener to redirect the request to.
     */
    targetListener?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Url to redirect the request to.
     */
    targetUrl?: string;
    /**
     * Type of the resource.
     */
    type: string;
    /**
     * Url path maps specifying default redirect configuration.
     */
    urlPathMaps?: outputs.network.v20200601.SubResourceResponse[];
}

/**
 * Request routing rule of an application gateway.
 */
export interface ApplicationGatewayRequestRoutingRuleResponse {
    /**
     * Backend address pool resource of the application gateway.
     */
    backendAddressPool?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Backend http settings resource of the application gateway.
     */
    backendHttpSettings?: outputs.network.v20200601.SubResourceResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Http listener resource of the application gateway.
     */
    httpListener?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the request routing rule that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * Priority of the request routing rule.
     */
    priority?: number;
    /**
     * The provisioning state of the request routing rule resource.
     */
    provisioningState: string;
    /**
     * Redirect configuration resource of the application gateway.
     */
    redirectConfiguration?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Rewrite Rule Set resource in Basic rule of the application gateway.
     */
    rewriteRuleSet?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Rule type.
     */
    ruleType?: string;
    /**
     * Type of the resource.
     */
    type: string;
    /**
     * URL path map resource of the application gateway.
     */
    urlPathMap?: outputs.network.v20200601.SubResourceResponse;
}

/**
 * Application gateway resource.
 */
export interface ApplicationGatewayResponse {
    /**
     * Authentication certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    authenticationCertificates?: outputs.network.v20200601.ApplicationGatewayAuthenticationCertificateResponse[];
    /**
     * Autoscale Configuration.
     */
    autoscaleConfiguration?: outputs.network.v20200601.ApplicationGatewayAutoscaleConfigurationResponse;
    /**
     * Backend address pool of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    backendAddressPools?: outputs.network.v20200601.ApplicationGatewayBackendAddressPoolResponse[];
    /**
     * Backend http settings of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    backendHttpSettingsCollection?: outputs.network.v20200601.ApplicationGatewayBackendHttpSettingsResponse[];
    /**
     * Custom error configurations of the application gateway resource.
     */
    customErrorConfigurations?: outputs.network.v20200601.ApplicationGatewayCustomErrorResponse[];
    /**
     * Whether FIPS is enabled on the application gateway resource.
     */
    enableFips?: boolean;
    /**
     * Whether HTTP2 is enabled on the application gateway resource.
     */
    enableHttp2?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Reference to the FirewallPolicy resource.
     */
    firewallPolicy?: outputs.network.v20200601.SubResourceResponse;
    /**
     * If true, associates a firewall policy with an application gateway regardless whether the policy differs from the WAF Config.
     */
    forceFirewallPolicyAssociation?: boolean;
    /**
     * Frontend IP addresses of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    frontendIPConfigurations?: outputs.network.v20200601.ApplicationGatewayFrontendIPConfigurationResponse[];
    /**
     * Frontend ports of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    frontendPorts?: outputs.network.v20200601.ApplicationGatewayFrontendPortResponse[];
    /**
     * Subnets of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    gatewayIPConfigurations?: outputs.network.v20200601.ApplicationGatewayIPConfigurationResponse[];
    /**
     * Http listeners of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    httpListeners?: outputs.network.v20200601.ApplicationGatewayHttpListenerResponse[];
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The identity of the application gateway, if configured.
     */
    identity?: outputs.network.v20200601.ManagedServiceIdentityResponse;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * Operational state of the application gateway resource.
     */
    operationalState: string;
    /**
     * Private Endpoint connections on application gateway.
     */
    privateEndpointConnections: outputs.network.v20200601.ApplicationGatewayPrivateEndpointConnectionResponse[];
    /**
     * PrivateLink configurations on application gateway.
     */
    privateLinkConfigurations?: outputs.network.v20200601.ApplicationGatewayPrivateLinkConfigurationResponse[];
    /**
     * Probes of the application gateway resource.
     */
    probes?: outputs.network.v20200601.ApplicationGatewayProbeResponse[];
    /**
     * The provisioning state of the application gateway resource.
     */
    provisioningState: string;
    /**
     * Redirect configurations of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    redirectConfigurations?: outputs.network.v20200601.ApplicationGatewayRedirectConfigurationResponse[];
    /**
     * Request routing rules of the application gateway resource.
     */
    requestRoutingRules?: outputs.network.v20200601.ApplicationGatewayRequestRoutingRuleResponse[];
    /**
     * The resource GUID property of the application gateway resource.
     */
    resourceGuid: string;
    /**
     * Rewrite rules for the application gateway resource.
     */
    rewriteRuleSets?: outputs.network.v20200601.ApplicationGatewayRewriteRuleSetResponse[];
    /**
     * SKU of the application gateway resource.
     */
    sku?: outputs.network.v20200601.ApplicationGatewaySkuResponse;
    /**
     * SSL certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    sslCertificates?: outputs.network.v20200601.ApplicationGatewaySslCertificateResponse[];
    /**
     * SSL policy of the application gateway resource.
     */
    sslPolicy?: outputs.network.v20200601.ApplicationGatewaySslPolicyResponse;
    /**
     * SSL profiles of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    sslProfiles?: outputs.network.v20200601.ApplicationGatewaySslProfileResponse[];
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Trusted client certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    trustedClientCertificates?: outputs.network.v20200601.ApplicationGatewayTrustedClientCertificateResponse[];
    /**
     * Trusted Root certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    trustedRootCertificates?: outputs.network.v20200601.ApplicationGatewayTrustedRootCertificateResponse[];
    /**
     * Resource type.
     */
    type: string;
    /**
     * URL path map of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     */
    urlPathMaps?: outputs.network.v20200601.ApplicationGatewayUrlPathMapResponse[];
    /**
     * Web application firewall configuration.
     */
    webApplicationFirewallConfiguration?: outputs.network.v20200601.ApplicationGatewayWebApplicationFirewallConfigurationResponse;
    /**
     * A list of availability zones denoting where the resource needs to come from.
     */
    zones?: string[];
}

/**
 * Set of actions in the Rewrite Rule in Application Gateway.
 */
export interface ApplicationGatewayRewriteRuleActionSetResponse {
    /**
     * Request Header Actions in the Action Set.
     */
    requestHeaderConfigurations?: outputs.network.v20200601.ApplicationGatewayHeaderConfigurationResponse[];
    /**
     * Response Header Actions in the Action Set.
     */
    responseHeaderConfigurations?: outputs.network.v20200601.ApplicationGatewayHeaderConfigurationResponse[];
    /**
     * Url Configuration Action in the Action Set.
     */
    urlConfiguration?: outputs.network.v20200601.ApplicationGatewayUrlConfigurationResponse;
}

/**
 * Set of conditions in the Rewrite Rule in Application Gateway.
 */
export interface ApplicationGatewayRewriteRuleConditionResponse {
    /**
     * Setting this parameter to truth value with force the pattern to do a case in-sensitive comparison.
     */
    ignoreCase?: boolean;
    /**
     * Setting this value as truth will force to check the negation of the condition given by the user.
     */
    negate?: boolean;
    /**
     * The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
     */
    pattern?: string;
    /**
     * The condition parameter of the RewriteRuleCondition.
     */
    variable?: string;
}

/**
 * Rewrite rule of an application gateway.
 */
export interface ApplicationGatewayRewriteRuleResponse {
    /**
     * Set of actions to be done as part of the rewrite Rule.
     */
    actionSet?: outputs.network.v20200601.ApplicationGatewayRewriteRuleActionSetResponse;
    /**
     * Conditions based on which the action set execution will be evaluated.
     */
    conditions?: outputs.network.v20200601.ApplicationGatewayRewriteRuleConditionResponse[];
    /**
     * Name of the rewrite rule that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * Rule Sequence of the rewrite rule that determines the order of execution of a particular rule in a RewriteRuleSet.
     */
    ruleSequence?: number;
}

/**
 * Rewrite rule set of an application gateway.
 */
export interface ApplicationGatewayRewriteRuleSetResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the rewrite rule set that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * The provisioning state of the rewrite rule set resource.
     */
    provisioningState: string;
    /**
     * Rewrite rules in the rewrite rule set.
     */
    rewriteRules?: outputs.network.v20200601.ApplicationGatewayRewriteRuleResponse[];
}

/**
 * SKU of an application gateway.
 */
export interface ApplicationGatewaySkuResponse {
    /**
     * Capacity (instance count) of an application gateway.
     */
    capacity?: number;
    /**
     * Name of an application gateway SKU.
     */
    name?: string;
    /**
     * Tier of an application gateway.
     */
    tier?: string;
}

/**
 * SSL certificates of an application gateway.
 */
export interface ApplicationGatewaySslCertificateResponse {
    /**
     * Base-64 encoded pfx certificate. Only applicable in PUT Request.
     */
    data?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
     */
    keyVaultSecretId?: string;
    /**
     * Name of the SSL certificate that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * Password for the pfx file specified in data. Only applicable in PUT request.
     */
    password?: string;
    /**
     * The provisioning state of the SSL certificate resource.
     */
    provisioningState: string;
    /**
     * Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in GET request.
     */
    publicCertData: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Application Gateway Ssl policy.
 */
export interface ApplicationGatewaySslPolicyResponse {
    /**
     * Ssl cipher suites to be enabled in the specified order to application gateway.
     */
    cipherSuites?: string[];
    /**
     * Ssl protocols to be disabled on application gateway.
     */
    disabledSslProtocols?: string[];
    /**
     * Minimum version of Ssl protocol to be supported on application gateway.
     */
    minProtocolVersion?: string;
    /**
     * Name of Ssl predefined policy.
     */
    policyName?: string;
    /**
     * Type of Ssl Policy.
     */
    policyType?: string;
}

/**
 * SSL profile of an application gateway.
 */
export interface ApplicationGatewaySslProfileResponse {
    /**
     * Client authentication configuration of the application gateway resource.
     */
    clientAuthConfiguration?: outputs.network.v20200601.ApplicationGatewayClientAuthConfigurationResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the SSL profile that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * The provisioning state of the HTTP listener resource.
     */
    provisioningState: string;
    /**
     * SSL policy of the application gateway resource.
     */
    sslPolicy?: outputs.network.v20200601.ApplicationGatewaySslPolicyResponse;
    /**
     * Array of references to application gateway trusted client certificates.
     */
    trustedClientCertificates?: outputs.network.v20200601.SubResourceResponse[];
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Trusted client certificates of an application gateway.
 */
export interface ApplicationGatewayTrustedClientCertificateResponse {
    /**
     * Certificate public data.
     */
    data?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the trusted client certificate that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * The provisioning state of the trusted client certificate resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Trusted Root certificates of an application gateway.
 */
export interface ApplicationGatewayTrustedRootCertificateResponse {
    /**
     * Certificate public data.
     */
    data?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
     */
    keyVaultSecretId?: string;
    /**
     * Name of the trusted root certificate that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * The provisioning state of the trusted root certificate resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Url configuration of the Actions set in Application Gateway.
 */
export interface ApplicationGatewayUrlConfigurationResponse {
    /**
     * Url path which user has provided for url rewrite. Null means no path will be updated. Default value is null.
     */
    modifiedPath?: string;
    /**
     * Query string which user has provided for url rewrite. Null means no query string will be updated. Default value is null.
     */
    modifiedQueryString?: string;
    /**
     * If set as true, it will re-evaluate the url path map provided in path based request routing rules using modified path. Default value is false.
     */
    reroute?: boolean;
}

/**
 * UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.
 */
export interface ApplicationGatewayUrlPathMapResponse {
    /**
     * Default backend address pool resource of URL path map.
     */
    defaultBackendAddressPool?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Default backend http settings resource of URL path map.
     */
    defaultBackendHttpSettings?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Default redirect configuration resource of URL path map.
     */
    defaultRedirectConfiguration?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Default Rewrite rule set resource of URL path map.
     */
    defaultRewriteRuleSet?: outputs.network.v20200601.SubResourceResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the URL path map that is unique within an Application Gateway.
     */
    name?: string;
    /**
     * Path rule of URL path map resource.
     */
    pathRules?: outputs.network.v20200601.ApplicationGatewayPathRuleResponse[];
    /**
     * The provisioning state of the URL path map resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Application gateway web application firewall configuration.
 */
export interface ApplicationGatewayWebApplicationFirewallConfigurationResponse {
    /**
     * The disabled rule groups.
     */
    disabledRuleGroups?: outputs.network.v20200601.ApplicationGatewayFirewallDisabledRuleGroupResponse[];
    /**
     * Whether the web application firewall is enabled or not.
     */
    enabled: boolean;
    /**
     * The exclusion list.
     */
    exclusions?: outputs.network.v20200601.ApplicationGatewayFirewallExclusionResponse[];
    /**
     * Maximum file upload size in Mb for WAF.
     */
    fileUploadLimitInMb?: number;
    /**
     * Web application firewall mode.
     */
    firewallMode: string;
    /**
     * Maximum request body size for WAF.
     */
    maxRequestBodySize?: number;
    /**
     * Maximum request body size in Kb for WAF.
     */
    maxRequestBodySizeInKb?: number;
    /**
     * Whether allow WAF to check request Body.
     */
    requestBodyCheck?: boolean;
    /**
     * The type of the web application firewall rule set. Possible values are: 'OWASP'.
     */
    ruleSetType: string;
    /**
     * The version of the rule set type.
     */
    ruleSetVersion: string;
}

/**
 * Rule of type application.
 */
export interface ApplicationRuleResponse {
    /**
     * Description of the rule.
     */
    description?: string;
    /**
     * List of destination IP addresses or Service Tags.
     */
    destinationAddresses?: string[];
    /**
     * List of FQDN Tags for this rule.
     */
    fqdnTags?: string[];
    /**
     * Name of the rule.
     */
    name?: string;
    /**
     * Array of Application Protocols.
     */
    protocols?: outputs.network.v20200601.FirewallPolicyRuleApplicationProtocolResponse[];
    /**
     * Rule Type.
     * Expected value is 'ApplicationRule'.
     */
    ruleType: "ApplicationRule";
    /**
     * List of source IP addresses for this rule.
     */
    sourceAddresses?: string[];
    /**
     * List of source IpGroups for this rule.
     */
    sourceIpGroups?: string[];
    /**
     * List of FQDNs for this rule.
     */
    targetFqdns?: string[];
}

/**
 * An application security group in a resource group.
 */
export interface ApplicationSecurityGroupResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The provisioning state of the application security group resource.
     */
    provisioningState: string;
    /**
     * The resource GUID property of the application security group resource. It uniquely identifies a resource, even if the user changes its name or migrate the resource across subscriptions or resource groups.
     */
    resourceGuid: string;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Application rule collection resource.
 */
export interface AzureFirewallApplicationRuleCollectionResponse {
    /**
     * The action type of a rule collection.
     */
    action?: outputs.network.v20200601.AzureFirewallRCActionResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Priority of the application rule collection resource.
     */
    priority?: number;
    /**
     * The provisioning state of the application rule collection resource.
     */
    provisioningState: string;
    /**
     * Collection of rules used by a application rule collection.
     */
    rules?: outputs.network.v20200601.AzureFirewallApplicationRuleResponse[];
}

/**
 * Properties of the application rule protocol.
 */
export interface AzureFirewallApplicationRuleProtocolResponse {
    /**
     * Port number for the protocol, cannot be greater than 64000. This field is optional.
     */
    port?: number;
    /**
     * Protocol type.
     */
    protocolType?: string;
}

/**
 * Properties of an application rule.
 */
export interface AzureFirewallApplicationRuleResponse {
    /**
     * Description of the rule.
     */
    description?: string;
    /**
     * List of FQDN Tags for this rule.
     */
    fqdnTags?: string[];
    /**
     * Name of the application rule.
     */
    name?: string;
    /**
     * Array of ApplicationRuleProtocols.
     */
    protocols?: outputs.network.v20200601.AzureFirewallApplicationRuleProtocolResponse[];
    /**
     * List of source IP addresses for this rule.
     */
    sourceAddresses?: string[];
    /**
     * List of source IpGroups for this rule.
     */
    sourceIpGroups?: string[];
    /**
     * List of FQDNs for this rule.
     */
    targetFqdns?: string[];
}

/**
 * IP configuration of an Azure Firewall.
 */
export interface AzureFirewallIPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The Firewall Internal Load Balancer IP to be used as the next hop in User Defined Routes.
     */
    privateIPAddress: string;
    /**
     * The provisioning state of the Azure firewall IP configuration resource.
     */
    provisioningState: string;
    /**
     * Reference to the PublicIP resource. This field is a mandatory input if subnet is not null.
     */
    publicIPAddress?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Reference to the subnet resource. This resource must be named 'AzureFirewallSubnet' or 'AzureFirewallManagementSubnet'.
     */
    subnet?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * IpGroups associated with azure firewall.
 */
export interface AzureFirewallIpGroupsResponse {
    /**
     * The iteration number.
     */
    changeNumber: string;
    /**
     * Resource ID.
     */
    id: string;
}

/**
 * AzureFirewall NAT Rule Collection Action.
 */
export interface AzureFirewallNatRCActionResponse {
    /**
     * The type of action.
     */
    type?: string;
}

/**
 * NAT rule collection resource.
 */
export interface AzureFirewallNatRuleCollectionResponse {
    /**
     * The action type of a NAT rule collection.
     */
    action?: outputs.network.v20200601.AzureFirewallNatRCActionResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Priority of the NAT rule collection resource.
     */
    priority?: number;
    /**
     * The provisioning state of the NAT rule collection resource.
     */
    provisioningState: string;
    /**
     * Collection of rules used by a NAT rule collection.
     */
    rules?: outputs.network.v20200601.AzureFirewallNatRuleResponse[];
}

/**
 * Properties of a NAT rule.
 */
export interface AzureFirewallNatRuleResponse {
    /**
     * Description of the rule.
     */
    description?: string;
    /**
     * List of destination IP addresses for this rule. Supports IP ranges, prefixes, and service tags.
     */
    destinationAddresses?: string[];
    /**
     * List of destination ports.
     */
    destinationPorts?: string[];
    /**
     * Name of the NAT rule.
     */
    name?: string;
    /**
     * Array of AzureFirewallNetworkRuleProtocols applicable to this NAT rule.
     */
    protocols?: string[];
    /**
     * List of source IP addresses for this rule.
     */
    sourceAddresses?: string[];
    /**
     * List of source IpGroups for this rule.
     */
    sourceIpGroups?: string[];
    /**
     * The translated address for this NAT rule.
     */
    translatedAddress?: string;
    /**
     * The translated FQDN for this NAT rule.
     */
    translatedFqdn?: string;
    /**
     * The translated port for this NAT rule.
     */
    translatedPort?: string;
}

/**
 * Network rule collection resource.
 */
export interface AzureFirewallNetworkRuleCollectionResponse {
    /**
     * The action type of a rule collection.
     */
    action?: outputs.network.v20200601.AzureFirewallRCActionResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Priority of the network rule collection resource.
     */
    priority?: number;
    /**
     * The provisioning state of the network rule collection resource.
     */
    provisioningState: string;
    /**
     * Collection of rules used by a network rule collection.
     */
    rules?: outputs.network.v20200601.AzureFirewallNetworkRuleResponse[];
}

/**
 * Properties of the network rule.
 */
export interface AzureFirewallNetworkRuleResponse {
    /**
     * Description of the rule.
     */
    description?: string;
    /**
     * List of destination IP addresses.
     */
    destinationAddresses?: string[];
    /**
     * List of destination FQDNs.
     */
    destinationFqdns?: string[];
    /**
     * List of destination IpGroups for this rule.
     */
    destinationIpGroups?: string[];
    /**
     * List of destination ports.
     */
    destinationPorts?: string[];
    /**
     * Name of the network rule.
     */
    name?: string;
    /**
     * Array of AzureFirewallNetworkRuleProtocols.
     */
    protocols?: string[];
    /**
     * List of source IP addresses for this rule.
     */
    sourceAddresses?: string[];
    /**
     * List of source IpGroups for this rule.
     */
    sourceIpGroups?: string[];
}

/**
 * Public IP Address associated with azure firewall.
 */
export interface AzureFirewallPublicIPAddressResponse {
    /**
     * Public IP Address value.
     */
    address?: string;
}

/**
 * Properties of the AzureFirewallRCAction.
 */
export interface AzureFirewallRCActionResponse {
    /**
     * The type of action.
     */
    type?: string;
}

/**
 * SKU of an Azure Firewall.
 */
export interface AzureFirewallSkuResponse {
    /**
     * Name of an Azure Firewall SKU.
     */
    name?: string;
    /**
     * Tier of an Azure Firewall.
     */
    tier?: string;
}

/**
 * Pool of backend IP addresses.
 */
export interface BackendAddressPoolResponse {
    /**
     * An array of references to IP addresses defined in network interfaces.
     */
    backendIPConfigurations: outputs.network.v20200601.NetworkInterfaceIPConfigurationResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * An array of backend addresses.
     */
    loadBalancerBackendAddresses?: outputs.network.v20200601.LoadBalancerBackendAddressResponse[];
    /**
     * An array of references to load balancing rules that use this backend address pool.
     */
    loadBalancingRules: outputs.network.v20200601.SubResourceResponse[];
    /**
     * The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.
     */
    name?: string;
    /**
     * A reference to an outbound rule that uses this backend address pool.
     */
    outboundRule: outputs.network.v20200601.SubResourceResponse;
    /**
     * An array of references to outbound rules that use this backend address pool.
     */
    outboundRules: outputs.network.v20200601.SubResourceResponse[];
    /**
     * The provisioning state of the backend address pool resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * The session detail for a target.
 */
export interface BastionActiveSessionResponse {
    /**
     * The protocol used to connect to the target.
     */
    protocol: string;
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * Duration in mins the session has been active.
     */
    sessionDurationInMins: number;
    /**
     * A unique id for the session.
     */
    sessionId: string;
    /**
     * The time when the session started.
     */
    startTime: any;
    /**
     * The host name of the target.
     */
    targetHostName: string;
    /**
     * The IP Address of the target.
     */
    targetIpAddress: string;
    /**
     * The resource group of the target.
     */
    targetResourceGroup: string;
    /**
     * The resource id of the target.
     */
    targetResourceId: string;
    /**
     * The subscription id for the target virtual machine.
     */
    targetSubscriptionId: string;
    /**
     * The user name who is active on this session.
     */
    userName: string;
}

/**
 * IP configuration of an Bastion Host.
 */
export interface BastionHostIPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Private IP allocation method.
     */
    privateIPAllocationMethod?: string;
    /**
     * The provisioning state of the bastion host IP configuration resource.
     */
    provisioningState: string;
    /**
     * Reference of the PublicIP resource.
     */
    publicIPAddress: outputs.network.v20200601.SubResourceResponse;
    /**
     * Reference of the subnet resource.
     */
    subnet: outputs.network.v20200601.SubResourceResponse;
    /**
     * Ip configuration type.
     */
    type: string;
}

/**
 * Bastion Shareable Link.
 */
export interface BastionShareableLinkResponse {
    /**
     * The unique Bastion Shareable Link to the virtual machine.
     */
    bsl: string;
    /**
     * The time when the link was created.
     */
    createdAt: string;
    /**
     * Optional field indicating the warning or error message related to the vm in case of partial failure.
     */
    message: string;
    /**
     * Reference of the virtual machine resource.
     */
    vm: outputs.network.v20200601.VMResponse;
}

/**
 * BGP peer status details.
 */
export interface BgpPeerStatusResponse {
    /**
     * The autonomous system number of the remote BGP peer.
     */
    asn: number;
    /**
     * For how long the peering has been up.
     */
    connectedDuration: string;
    /**
     * The virtual network gateway's local address.
     */
    localAddress: string;
    /**
     * The number of BGP messages received.
     */
    messagesReceived: number;
    /**
     * The number of BGP messages sent.
     */
    messagesSent: number;
    /**
     * The remote BGP peer.
     */
    neighbor: string;
    /**
     * The number of routes learned from this peer.
     */
    routesReceived: number;
    /**
     * The BGP peer state.
     */
    state: string;
}

/**
 * BGP settings details.
 */
export interface BgpSettingsResponse {
    /**
     * The BGP speaker's ASN.
     */
    asn?: number;
    /**
     * The BGP peering address and BGP identifier of this BGP speaker.
     */
    bgpPeeringAddress?: string;
    /**
     * BGP peering address with IP configuration ID for virtual network gateway.
     */
    bgpPeeringAddresses?: outputs.network.v20200601.IPConfigurationBgpPeeringAddressResponse[];
    /**
     * The weight added to routes learned from this BGP speaker.
     */
    peerWeight?: number;
}

/**
 * Network Virtual Appliance Sku Properties.
 */
export interface BreakOutCategoryPoliciesResponse {
    /**
     * Flag to control breakout of o365 allow category.
     */
    allow?: boolean;
    /**
     * Flag to control breakout of o365 default category.
     */
    default?: boolean;
    /**
     * Flag to control breakout of o365 optimize category.
     */
    optimize?: boolean;
}

/**
 * A CNAME record.
 */
export interface CnameRecordResponse {
    /**
     * The canonical name for this CNAME record.
     */
    cname?: string;
}

/**
 * Describes the destination of connection monitor.
 */
export interface ConnectionMonitorDestinationResponse {
    /**
     * Address of the connection monitor destination (IP or domain name).
     */
    address?: string;
    /**
     * The destination port used by connection monitor.
     */
    port?: number;
    /**
     * The ID of the resource used as the destination by connection monitor.
     */
    resourceId?: string;
}

/**
 * Describes the connection monitor endpoint filter item.
 */
export interface ConnectionMonitorEndpointFilterItemResponse {
    /**
     * The address of the filter item.
     */
    address?: string;
    /**
     * The type of item included in the filter. Currently only 'AgentAddress' is supported.
     */
    type?: string;
}

/**
 * Describes the connection monitor endpoint filter.
 */
export interface ConnectionMonitorEndpointFilterResponse {
    /**
     * List of items in the filter.
     */
    items?: outputs.network.v20200601.ConnectionMonitorEndpointFilterItemResponse[];
    /**
     * The behavior of the endpoint filter. Currently only 'Include' is supported.
     */
    type?: string;
}

/**
 * Describes the connection monitor endpoint.
 */
export interface ConnectionMonitorEndpointResponse {
    /**
     * Address of the connection monitor endpoint (IP or domain name).
     */
    address?: string;
    /**
     * Test coverage for the endpoint.
     */
    coverageLevel?: string;
    /**
     * Filter for sub-items within the endpoint.
     */
    filter?: outputs.network.v20200601.ConnectionMonitorEndpointFilterResponse;
    /**
     * The name of the connection monitor endpoint.
     */
    name: string;
    /**
     * Resource ID of the connection monitor endpoint.
     */
    resourceId?: string;
    /**
     * Endpoint scope.
     */
    scope?: outputs.network.v20200601.ConnectionMonitorEndpointScopeResponse;
    /**
     * The endpoint type.
     */
    type?: string;
}

/**
 * Describes the connection monitor endpoint scope item.
 */
export interface ConnectionMonitorEndpointScopeItemResponse {
    /**
     * The address of the endpoint item. Supported types are IPv4/IPv6 subnet mask or IPv4/IPv6 IP address.
     */
    address?: string;
}

/**
 * Describes the connection monitor endpoint scope.
 */
export interface ConnectionMonitorEndpointScopeResponse {
    /**
     * List of items which needs to be excluded from the endpoint scope.
     */
    exclude?: outputs.network.v20200601.ConnectionMonitorEndpointScopeItemResponse[];
    /**
     * List of items which needs to be included to the endpoint scope.
     */
    include?: outputs.network.v20200601.ConnectionMonitorEndpointScopeItemResponse[];
}

/**
 * Describes the HTTP configuration.
 */
export interface ConnectionMonitorHttpConfigurationResponse {
    /**
     * The HTTP method to use.
     */
    method?: string;
    /**
     * The path component of the URI. For instance, "/dir1/dir2".
     */
    path?: string;
    /**
     * The port to connect to.
     */
    port?: number;
    /**
     * Value indicating whether HTTPS is preferred over HTTP in cases where the choice is not explicit.
     */
    preferHTTPS?: boolean;
    /**
     * The HTTP headers to transmit with the request.
     */
    requestHeaders?: outputs.network.v20200601.HTTPHeaderResponse[];
    /**
     * HTTP status codes to consider successful. For instance, "2xx,301-304,418".
     */
    validStatusCodeRanges?: string[];
}

/**
 * Describes the ICMP configuration.
 */
export interface ConnectionMonitorIcmpConfigurationResponse {
    /**
     * Value indicating whether path evaluation with trace route should be disabled.
     */
    disableTraceRoute?: boolean;
}

/**
 * Describes a connection monitor output destination.
 */
export interface ConnectionMonitorOutputResponse {
    /**
     * Connection monitor output destination type. Currently, only "Workspace" is supported.
     */
    type?: string;
    /**
     * Describes the settings for producing output into a log analytics workspace.
     */
    workspaceSettings?: outputs.network.v20200601.ConnectionMonitorWorkspaceSettingsResponse;
}

/**
 * Describes the source of connection monitor.
 */
export interface ConnectionMonitorSourceResponse {
    /**
     * The source port used by connection monitor.
     */
    port?: number;
    /**
     * The ID of the resource used as the source by connection monitor.
     */
    resourceId: string;
}

/**
 * Describes the threshold for declaring a test successful.
 */
export interface ConnectionMonitorSuccessThresholdResponse {
    /**
     * The maximum percentage of failed checks permitted for a test to evaluate as successful.
     */
    checksFailedPercent?: number;
    /**
     * The maximum round-trip time in milliseconds permitted for a test to evaluate as successful.
     */
    roundTripTimeMs?: number;
}

/**
 * Describes the TCP configuration.
 */
export interface ConnectionMonitorTcpConfigurationResponse {
    /**
     * Destination port behavior.
     */
    destinationPortBehavior?: string;
    /**
     * Value indicating whether path evaluation with trace route should be disabled.
     */
    disableTraceRoute?: boolean;
    /**
     * The port to connect to.
     */
    port?: number;
}

/**
 * Describes a connection monitor test configuration.
 */
export interface ConnectionMonitorTestConfigurationResponse {
    /**
     * The parameters used to perform test evaluation over HTTP.
     */
    httpConfiguration?: outputs.network.v20200601.ConnectionMonitorHttpConfigurationResponse;
    /**
     * The parameters used to perform test evaluation over ICMP.
     */
    icmpConfiguration?: outputs.network.v20200601.ConnectionMonitorIcmpConfigurationResponse;
    /**
     * The name of the connection monitor test configuration.
     */
    name: string;
    /**
     * The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
     */
    preferredIPVersion?: string;
    /**
     * The protocol to use in test evaluation.
     */
    protocol: string;
    /**
     * The threshold for declaring a test successful.
     */
    successThreshold?: outputs.network.v20200601.ConnectionMonitorSuccessThresholdResponse;
    /**
     * The parameters used to perform test evaluation over TCP.
     */
    tcpConfiguration?: outputs.network.v20200601.ConnectionMonitorTcpConfigurationResponse;
    /**
     * The frequency of test evaluation, in seconds.
     */
    testFrequencySec?: number;
}

/**
 * Describes the connection monitor test group.
 */
export interface ConnectionMonitorTestGroupResponse {
    /**
     * List of destination endpoint names.
     */
    destinations: string[];
    /**
     * Value indicating whether test group is disabled.
     */
    disable?: boolean;
    /**
     * The name of the connection monitor test group.
     */
    name: string;
    /**
     * List of source endpoint names.
     */
    sources: string[];
    /**
     * List of test configuration names.
     */
    testConfigurations: string[];
}

/**
 * Describes the settings for producing output into a log analytics workspace.
 */
export interface ConnectionMonitorWorkspaceSettingsResponse {
    /**
     * Log analytics workspace resource ID.
     */
    workspaceResourceId?: string;
}

/**
 * Container network interface configuration child resource.
 */
export interface ContainerNetworkInterfaceConfigurationResponse {
    /**
     * A list of container network interfaces created from this container network interface configuration.
     */
    containerNetworkInterfaces?: outputs.network.v20200601.SubResourceResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * A list of ip configurations of the container network interface configuration.
     */
    ipConfigurations?: outputs.network.v20200601.IPConfigurationProfileResponse[];
    /**
     * The name of the resource. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the container network interface configuration resource.
     */
    provisioningState: string;
    /**
     * Sub Resource type.
     */
    type: string;
}

/**
 * The ip configuration for a container network interface.
 */
export interface ContainerNetworkInterfaceIpConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * The name of the resource. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the container network interface IP configuration resource.
     */
    provisioningState: string;
    /**
     * Sub Resource type.
     */
    type: string;
}

/**
 * Container network interface child resource.
 */
export interface ContainerNetworkInterfaceResponse {
    /**
     * Reference to the container to which this container network interface is attached.
     */
    container?: outputs.network.v20200601.ContainerResponse;
    /**
     * Container network interface configuration from which this container network interface is created.
     */
    containerNetworkInterfaceConfiguration: outputs.network.v20200601.ContainerNetworkInterfaceConfigurationResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Reference to the ip configuration on this container nic.
     */
    ipConfigurations: outputs.network.v20200601.ContainerNetworkInterfaceIpConfigurationResponse[];
    /**
     * The name of the resource. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the container network interface resource.
     */
    provisioningState: string;
    /**
     * Sub Resource type.
     */
    type: string;
}

/**
 * Reference to container resource in remote resource provider.
 */
export interface ContainerResponse {
    /**
     * Resource ID.
     */
    id?: string;
}

/**
 * Contains custom Dns resolution configuration from customer.
 */
export interface CustomDnsConfigPropertiesFormatResponse {
    /**
     * Fqdn that resolves to private endpoint ip address.
     */
    fqdn?: string;
    /**
     * A list of private ip addresses of the private endpoint.
     */
    ipAddresses?: string[];
}

/**
 * Contains the DDoS protection settings of the public IP.
 */
export interface DdosSettingsResponse {
    /**
     * The DDoS custom policy associated with the public IP.
     */
    ddosCustomPolicy?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Enables DDoS protection on the public IP.
     */
    protectedIP?: boolean;
    /**
     * The DDoS protection policy customizability of the public IP. Only standard coverage will have the ability to be customized.
     */
    protectionCoverage?: string;
}

/**
 * Details the service to which the subnet is delegated.
 */
export interface DelegationResponse {
    /**
     * The actions permitted to the service upon delegation.
     */
    actions: string[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a subnet. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the service delegation resource.
     */
    provisioningState: string;
    /**
     * The name of the service to whom the subnet should be delegated (e.g. Microsoft.Sql/servers).
     */
    serviceName?: string;
}

/**
 * List of properties of the device.
 */
export interface DevicePropertiesResponse {
    /**
     * Model of the device.
     */
    deviceModel?: string;
    /**
     * Name of the device Vendor.
     */
    deviceVendor?: string;
    /**
     * Link speed.
     */
    linkSpeedInMbps?: number;
}

/**
 * DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
 */
export interface DhcpOptionsResponse {
    /**
     * The list of DNS servers IP addresses.
     */
    dnsServers?: string[];
}

/**
 * DNS Proxy Settings in Firewall Policy.
 */
export interface DnsSettingsResponse {
    /**
     * Enable DNS Proxy on Firewalls attached to the Firewall Policy.
     */
    enableProxy?: boolean;
    /**
     * FQDNs in Network Rules are supported when set to true.
     */
    requireProxyForNetworkRules?: boolean;
    /**
     * List of Custom DNS Servers.
     */
    servers?: string[];
}

/**
 * Authorization in an ExpressRouteCircuit resource.
 */
export interface ExpressRouteCircuitAuthorizationResponse {
    /**
     * The authorization key.
     */
    authorizationKey?: string;
    /**
     * The authorization use status.
     */
    authorizationUseStatus?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the authorization resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
 */
export interface ExpressRouteCircuitConnectionResponse {
    /**
     * /29 IP address space to carve out Customer addresses for tunnels.
     */
    addressPrefix?: string;
    /**
     * The authorization key.
     */
    authorizationKey?: string;
    /**
     * Express Route Circuit connection state.
     */
    circuitConnectionStatus: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Reference to Express Route Circuit Private Peering Resource of the circuit initiating connection.
     */
    expressRouteCircuitPeering?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * IPv6 Address PrefixProperties of the express route circuit connection.
     */
    ipv6CircuitConnectionConfig?: outputs.network.v20200601.Ipv6CircuitConnectionConfigResponse;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Reference to Express Route Circuit Private Peering Resource of the peered circuit.
     */
    peerExpressRouteCircuitPeering?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The provisioning state of the express route circuit connection resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Specifies the peering configuration.
 */
export interface ExpressRouteCircuitPeeringConfigResponse {
    /**
     * The communities of bgp peering. Specified for microsoft peering.
     */
    advertisedCommunities?: string[];
    /**
     * The reference to AdvertisedPublicPrefixes.
     */
    advertisedPublicPrefixes?: string[];
    /**
     * The advertised public prefix state of the Peering resource.
     */
    advertisedPublicPrefixesState: string;
    /**
     * The CustomerASN of the peering.
     */
    customerASN?: number;
    /**
     * The legacy mode of the peering.
     */
    legacyMode?: number;
    /**
     * The RoutingRegistryName of the configuration.
     */
    routingRegistryName?: string;
}

/**
 * ExpressRoute circuit peering identifier.
 */
export interface ExpressRouteCircuitPeeringIdResponse {
    /**
     * The ID of the ExpressRoute circuit peering.
     */
    id?: string;
}

/**
 * Peering in an ExpressRouteCircuit resource.
 */
export interface ExpressRouteCircuitPeeringResponse {
    /**
     * The Azure ASN.
     */
    azureASN?: number;
    /**
     * The list of circuit connections associated with Azure Private Peering for this circuit.
     */
    connections?: outputs.network.v20200601.ExpressRouteCircuitConnectionResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * The ExpressRoute connection.
     */
    expressRouteConnection?: outputs.network.v20200601.ExpressRouteConnectionIdResponse;
    /**
     * The GatewayManager Etag.
     */
    gatewayManagerEtag?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The IPv6 peering configuration.
     */
    ipv6PeeringConfig?: outputs.network.v20200601.Ipv6ExpressRouteCircuitPeeringConfigResponse;
    /**
     * Who was the last to modify the peering.
     */
    lastModifiedBy: string;
    /**
     * The Microsoft peering configuration.
     */
    microsoftPeeringConfig?: outputs.network.v20200601.ExpressRouteCircuitPeeringConfigResponse;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The peer ASN.
     */
    peerASN?: number;
    /**
     * The list of peered circuit connections associated with Azure Private Peering for this circuit.
     */
    peeredConnections: outputs.network.v20200601.PeerExpressRouteCircuitConnectionResponse[];
    /**
     * The peering type.
     */
    peeringType?: string;
    /**
     * The primary port.
     */
    primaryAzurePort?: string;
    /**
     * The primary address prefix.
     */
    primaryPeerAddressPrefix?: string;
    /**
     * The provisioning state of the express route circuit peering resource.
     */
    provisioningState: string;
    /**
     * The reference to the RouteFilter resource.
     */
    routeFilter?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The secondary port.
     */
    secondaryAzurePort?: string;
    /**
     * The secondary address prefix.
     */
    secondaryPeerAddressPrefix?: string;
    /**
     * The shared key.
     */
    sharedKey?: string;
    /**
     * The peering state.
     */
    state?: string;
    /**
     * The peering stats of express route circuit.
     */
    stats?: outputs.network.v20200601.ExpressRouteCircuitStatsResponse;
    /**
     * Type of the resource.
     */
    type: string;
    /**
     * The VLAN ID.
     */
    vlanId?: number;
}

/**
 * Contains ServiceProviderProperties in an ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitServiceProviderPropertiesResponse {
    /**
     * The BandwidthInMbps.
     */
    bandwidthInMbps?: number;
    /**
     * The peering location.
     */
    peeringLocation?: string;
    /**
     * The serviceProviderName.
     */
    serviceProviderName?: string;
}

/**
 * Contains SKU in an ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitSkuResponse {
    /**
     * The family of the SKU.
     */
    family?: string;
    /**
     * The name of the SKU.
     */
    name?: string;
    /**
     * The tier of the SKU.
     */
    tier?: string;
}

/**
 * Contains stats associated with the peering.
 */
export interface ExpressRouteCircuitStatsResponse {
    /**
     * The Primary BytesIn of the peering.
     */
    primarybytesIn?: number;
    /**
     * The primary BytesOut of the peering.
     */
    primarybytesOut?: number;
    /**
     * The secondary BytesIn of the peering.
     */
    secondarybytesIn?: number;
    /**
     * The secondary BytesOut of the peering.
     */
    secondarybytesOut?: number;
}

/**
 * The ID of the ExpressRouteConnection.
 */
export interface ExpressRouteConnectionIdResponse {
    /**
     * The ID of the ExpressRouteConnection.
     */
    id: string;
}

/**
 * ExpressRouteConnection resource.
 */
export interface ExpressRouteConnectionResponse {
    /**
     * Authorization key to establish the connection.
     */
    authorizationKey?: string;
    /**
     * Enable internet security.
     */
    enableInternetSecurity?: boolean;
    /**
     * The ExpressRoute circuit peering.
     */
    expressRouteCircuitPeering: outputs.network.v20200601.ExpressRouteCircuitPeeringIdResponse;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource.
     */
    name: string;
    /**
     * The provisioning state of the express route connection resource.
     */
    provisioningState: string;
    /**
     * The Routing Configuration indicating the associated and propagated route tables on this connection.
     */
    routingConfiguration?: outputs.network.v20200601.RoutingConfigurationResponse;
    /**
     * The routing weight associated to the connection.
     */
    routingWeight?: number;
}

/**
 * Configuration for auto scaling.
 */
export interface ExpressRouteGatewayPropertiesResponseAutoScaleConfiguration {
    /**
     * Minimum and maximum number of scale units to deploy.
     */
    bounds?: outputs.network.v20200601.ExpressRouteGatewayPropertiesResponseBounds;
}

/**
 * Minimum and maximum number of scale units to deploy.
 */
export interface ExpressRouteGatewayPropertiesResponseBounds {
    /**
     * Maximum number of scale units deployed for ExpressRoute gateway.
     */
    max?: number;
    /**
     * Minimum number of scale units deployed for ExpressRoute gateway.
     */
    min?: number;
}

/**
 * ExpressRouteLink Mac Security Configuration.
 */
export interface ExpressRouteLinkMacSecConfigResponse {
    /**
     * Keyvault Secret Identifier URL containing Mac security CAK key.
     */
    cakSecretIdentifier?: string;
    /**
     * Mac security cipher.
     */
    cipher?: string;
    /**
     * Keyvault Secret Identifier URL containing Mac security CKN key.
     */
    cknSecretIdentifier?: string;
    /**
     * Sci mode enabled/disabled.
     */
    sciState?: string;
}

/**
 * ExpressRouteLink child resource definition.
 */
export interface ExpressRouteLinkResponse {
    /**
     * Administrative state of the physical port.
     */
    adminState?: string;
    /**
     * Physical fiber port type.
     */
    connectorType: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Name of Azure router interface.
     */
    interfaceName: string;
    /**
     * MacSec configuration.
     */
    macSecConfig?: outputs.network.v20200601.ExpressRouteLinkMacSecConfigResponse;
    /**
     * Name of child port resource that is unique among child port resources of the parent.
     */
    name?: string;
    /**
     * Mapping between physical port to patch panel port.
     */
    patchPanelId: string;
    /**
     * The provisioning state of the express route link resource.
     */
    provisioningState: string;
    /**
     * Mapping of physical patch panel to rack.
     */
    rackId: string;
    /**
     * Name of Azure router associated with physical port.
     */
    routerName: string;
}

/**
 * Properties of the FirewallPolicyFilterRuleCollectionAction.
 */
export interface FirewallPolicyFilterRuleCollectionActionResponse {
    /**
     * The type of action.
     */
    type?: string;
}

/**
 * Firewall Policy Filter Rule Collection.
 */
export interface FirewallPolicyFilterRuleCollectionResponse {
    /**
     * The action type of a Filter rule collection.
     */
    action?: outputs.network.v20200601.FirewallPolicyFilterRuleCollectionActionResponse;
    /**
     * The name of the rule collection.
     */
    name?: string;
    /**
     * Priority of the Firewall Policy Rule Collection resource.
     */
    priority?: number;
    /**
     * The type of the rule collection.
     * Expected value is 'FirewallPolicyFilterRuleCollection'.
     */
    ruleCollectionType: "FirewallPolicyFilterRuleCollection";
    /**
     * List of rules included in a rule collection.
     */
    rules?: (outputs.network.v20200601.ApplicationRuleResponse | outputs.network.v20200601.NatRuleResponse | outputs.network.v20200601.NetworkRuleResponse)[];
}

/**
 * Properties of the FirewallPolicyNatRuleCollectionAction.
 */
export interface FirewallPolicyNatRuleCollectionActionResponse {
    /**
     * The type of action.
     */
    type?: string;
}

/**
 * Firewall Policy NAT Rule Collection.
 */
export interface FirewallPolicyNatRuleCollectionResponse {
    /**
     * The action type of a Nat rule collection.
     */
    action?: outputs.network.v20200601.FirewallPolicyNatRuleCollectionActionResponse;
    /**
     * The name of the rule collection.
     */
    name?: string;
    /**
     * Priority of the Firewall Policy Rule Collection resource.
     */
    priority?: number;
    /**
     * The type of the rule collection.
     * Expected value is 'FirewallPolicyNatRuleCollection'.
     */
    ruleCollectionType: "FirewallPolicyNatRuleCollection";
    /**
     * List of rules included in a rule collection.
     */
    rules?: (outputs.network.v20200601.ApplicationRuleResponse | outputs.network.v20200601.NatRuleResponse | outputs.network.v20200601.NetworkRuleResponse)[];
}

/**
 * Properties of the application rule protocol.
 */
export interface FirewallPolicyRuleApplicationProtocolResponse {
    /**
     * Port number for the protocol, cannot be greater than 64000.
     */
    port?: number;
    /**
     * Protocol type.
     */
    protocolType?: string;
}

/**
 * ThreatIntel Whitelist for Firewall Policy.
 */
export interface FirewallPolicyThreatIntelWhitelistResponse {
    /**
     * List of FQDNs for the ThreatIntel Whitelist.
     */
    fqdns?: string[];
    /**
     * List of IP addresses for the ThreatIntel Whitelist.
     */
    ipAddresses?: string[];
}

/**
 * Parameters that define the flow log format.
 */
export interface FlowLogFormatParametersResponse {
    /**
     * The file type of flow log.
     */
    type?: string;
    /**
     * The version (revision) of the flow log.
     */
    version?: number;
}
/**
 * flowLogFormatParametersResponseProvideDefaults sets the appropriate defaults for FlowLogFormatParametersResponse
 */
export function flowLogFormatParametersResponseProvideDefaults(val: FlowLogFormatParametersResponse): FlowLogFormatParametersResponse {
    return {
        ...val,
        version: (val.version) ?? 0,
    };
}

/**
 * A flow log resource.
 */
export interface FlowLogResponse {
    /**
     * Flag to enable/disable flow logging.
     */
    enabled?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Parameters that define the configuration of traffic analytics.
     */
    flowAnalyticsConfiguration?: outputs.network.v20200601.TrafficAnalyticsPropertiesResponse;
    /**
     * Parameters that define the flow log format.
     */
    format?: outputs.network.v20200601.FlowLogFormatParametersResponse;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The provisioning state of the flow log.
     */
    provisioningState: string;
    /**
     * Parameters that define the retention policy for flow log.
     */
    retentionPolicy?: outputs.network.v20200601.RetentionPolicyParametersResponse;
    /**
     * ID of the storage account which is used to store the flow log.
     */
    storageId: string;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Guid of network security group to which flow log will be applied.
     */
    targetResourceGuid: string;
    /**
     * ID of network security group to which flow log will be applied.
     */
    targetResourceId: string;
    /**
     * Resource type.
     */
    type: string;
}
/**
 * flowLogResponseProvideDefaults sets the appropriate defaults for FlowLogResponse
 */
export function flowLogResponseProvideDefaults(val: FlowLogResponse): FlowLogResponse {
    return {
        ...val,
        format: (val.format ? outputs.network.v20200601.flowLogFormatParametersResponseProvideDefaults(val.format) : undefined),
        retentionPolicy: (val.retentionPolicy ? outputs.network.v20200601.retentionPolicyParametersResponseProvideDefaults(val.retentionPolicy) : undefined),
    };
}

/**
 * Frontend IP address of the load balancer.
 */
export interface FrontendIPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * An array of references to inbound pools that use this frontend IP.
     */
    inboundNatPools: outputs.network.v20200601.SubResourceResponse[];
    /**
     * An array of references to inbound rules that use this frontend IP.
     */
    inboundNatRules: outputs.network.v20200601.SubResourceResponse[];
    /**
     * An array of references to load balancing rules that use this frontend IP.
     */
    loadBalancingRules: outputs.network.v20200601.SubResourceResponse[];
    /**
     * The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource.
     */
    name?: string;
    /**
     * An array of references to outbound rules that use this frontend IP.
     */
    outboundRules: outputs.network.v20200601.SubResourceResponse[];
    /**
     * The private IP address of the IP configuration.
     */
    privateIPAddress?: string;
    /**
     * Whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.
     */
    privateIPAddressVersion?: string;
    /**
     * The Private IP allocation method.
     */
    privateIPAllocationMethod?: string;
    /**
     * The provisioning state of the frontend IP configuration resource.
     */
    provisioningState: string;
    /**
     * The reference to the Public IP resource.
     */
    publicIPAddress?: outputs.network.v20200601.PublicIPAddressResponse;
    /**
     * The reference to the Public IP Prefix resource.
     */
    publicIPPrefix?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The reference to the subnet resource.
     */
    subnet?: outputs.network.v20200601.SubnetResponse;
    /**
     * Type of the resource.
     */
    type: string;
    /**
     * A list of availability zones denoting the IP allocated for the resource needs to come from.
     */
    zones?: string[];
}

/**
 * Gateway routing details.
 */
export interface GatewayRouteResponse {
    /**
     * The route's AS path sequence.
     */
    asPath: string;
    /**
     * The gateway's local address.
     */
    localAddress: string;
    /**
     * The route's network prefix.
     */
    network: string;
    /**
     * The route's next hop.
     */
    nextHop: string;
    /**
     * The source this route was learned from.
     */
    origin: string;
    /**
     * The peer this route was learned from.
     */
    sourcePeer: string;
    /**
     * The route's weight.
     */
    weight: number;
}

/**
 * The HTTP header.
 */
export interface HTTPHeaderResponse {
    /**
     * The name in HTTP header.
     */
    name?: string;
    /**
     * The value in HTTP header.
     */
    value?: string;
}

/**
 * IP addresses associated with azure firewall.
 */
export interface HubIPAddressesResponse {
    /**
     * Private IP Address associated with azure firewall.
     */
    privateIPAddress?: string;
    /**
     * Public IP addresses associated with azure firewall.
     */
    publicIPs?: outputs.network.v20200601.HubPublicIPAddressesResponse;
}

/**
 * Public IP addresses associated with azure firewall.
 */
export interface HubPublicIPAddressesResponse {
    /**
     * The list of Public IP addresses associated with azure firewall or IP addresses to be retained.
     */
    addresses?: outputs.network.v20200601.AzureFirewallPublicIPAddressResponse[];
    /**
     * The number of Public IP addresses associated with azure firewall.
     */
    count?: number;
}

/**
 * RouteTable route.
 */
export interface HubRouteResponse {
    /**
     * The type of destinations (eg: CIDR, ResourceId, Service).
     */
    destinationType: string;
    /**
     * List of all destinations.
     */
    destinations: string[];
    /**
     * The name of the Route that is unique within a RouteTable. This name can be used to access this route.
     */
    name: string;
    /**
     * NextHop resource ID.
     */
    nextHop: string;
    /**
     * The type of next hop (eg: ResourceId).
     */
    nextHopType: string;
}

/**
 * Properties of IPConfigurationBgpPeeringAddress.
 */
export interface IPConfigurationBgpPeeringAddressResponse {
    /**
     * The list of custom BGP peering addresses which belong to IP configuration.
     */
    customBgpIpAddresses?: string[];
    /**
     * The list of default BGP peering addresses which belong to IP configuration.
     */
    defaultBgpIpAddresses: string[];
    /**
     * The ID of IP configuration which belongs to gateway.
     */
    ipconfigurationId?: string;
    /**
     * The list of tunnel public IP addresses which belong to IP configuration.
     */
    tunnelIpAddresses: string[];
}

/**
 * IP configuration profile child resource.
 */
export interface IPConfigurationProfileResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the IP configuration profile resource.
     */
    provisioningState: string;
    /**
     * The reference to the subnet resource to create a container network interface ip configuration.
     */
    subnet?: outputs.network.v20200601.SubnetResponse;
    /**
     * Sub Resource type.
     */
    type: string;
}

/**
 * IP configuration.
 */
export interface IPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The private IP address of the IP configuration.
     */
    privateIPAddress?: string;
    /**
     * The private IP address allocation method.
     */
    privateIPAllocationMethod?: string;
    /**
     * The provisioning state of the IP configuration resource.
     */
    provisioningState: string;
    /**
     * The reference to the public IP resource.
     */
    publicIPAddress?: outputs.network.v20200601.PublicIPAddressResponse;
    /**
     * The reference to the subnet resource.
     */
    subnet?: outputs.network.v20200601.SubnetResponse;
}

/**
 * Inbound NAT pool of the load balancer.
 */
export interface InboundNatPoolResponse {
    /**
     * The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
     */
    backendPort: number;
    /**
     * Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
     */
    enableFloatingIP?: boolean;
    /**
     * Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
     */
    enableTcpReset?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * A reference to frontend IP addresses.
     */
    frontendIPConfiguration?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65535.
     */
    frontendPortRangeEnd: number;
    /**
     * The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65534.
     */
    frontendPortRangeStart: number;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
     */
    idleTimeoutInMinutes?: number;
    /**
     * The name of the resource that is unique within the set of inbound NAT pools used by the load balancer. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The reference to the transport protocol used by the inbound NAT pool.
     */
    protocol: string;
    /**
     * The provisioning state of the inbound NAT pool resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Inbound NAT rule of the load balancer.
 */
export interface InboundNatRuleResponse {
    /**
     * A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations is forwarded to the backend IP.
     */
    backendIPConfiguration: outputs.network.v20200601.NetworkInterfaceIPConfigurationResponse;
    /**
     * The port used for the internal endpoint. Acceptable values range from 1 to 65535.
     */
    backendPort?: number;
    /**
     * Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
     */
    enableFloatingIP?: boolean;
    /**
     * Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
     */
    enableTcpReset?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * A reference to frontend IP addresses.
     */
    frontendIPConfiguration?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.
     */
    frontendPort?: number;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
     */
    idleTimeoutInMinutes?: number;
    /**
     * The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The reference to the transport protocol used by the load balancing rule.
     */
    protocol?: string;
    /**
     * The provisioning state of the inbound NAT rule resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Contains the IpTag associated with the object.
 */
export interface IpTagResponse {
    /**
     * The IP tag type. Example: FirstPartyUsage.
     */
    ipTagType?: string;
    /**
     * The value of the IP tag associated with the public IP. Example: SQL.
     */
    tag?: string;
}

/**
 * An IPSec Policy configuration for a virtual network gateway connection.
 */
export interface IpsecPolicyResponse {
    /**
     * The DH Group used in IKE Phase 1 for initial SA.
     */
    dhGroup: string;
    /**
     * The IKE encryption algorithm (IKE phase 2).
     */
    ikeEncryption: string;
    /**
     * The IKE integrity algorithm (IKE phase 2).
     */
    ikeIntegrity: string;
    /**
     * The IPSec encryption algorithm (IKE phase 1).
     */
    ipsecEncryption: string;
    /**
     * The IPSec integrity algorithm (IKE phase 1).
     */
    ipsecIntegrity: string;
    /**
     * The Pfs Group used in IKE Phase 2 for new child SA.
     */
    pfsGroup: string;
    /**
     * The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
     */
    saDataSizeKilobytes: number;
    /**
     * The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
     */
    saLifeTimeSeconds: number;
}

/**
 * IPv6 Circuit Connection properties for global reach.
 */
export interface Ipv6CircuitConnectionConfigResponse {
    /**
     * /125 IP address space to carve out customer addresses for global reach.
     */
    addressPrefix?: string;
    /**
     * Express Route Circuit connection state.
     */
    circuitConnectionStatus: string;
}

/**
 * Contains IPv6 peering config.
 */
export interface Ipv6ExpressRouteCircuitPeeringConfigResponse {
    /**
     * The Microsoft peering configuration.
     */
    microsoftPeeringConfig?: outputs.network.v20200601.ExpressRouteCircuitPeeringConfigResponse;
    /**
     * The primary address prefix.
     */
    primaryPeerAddressPrefix?: string;
    /**
     * The reference to the RouteFilter resource.
     */
    routeFilter?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The secondary address prefix.
     */
    secondaryPeerAddressPrefix?: string;
    /**
     * The state of peering.
     */
    state?: string;
}

/**
 * Load balancer backend addresses.
 */
export interface LoadBalancerBackendAddressResponse {
    /**
     * IP Address belonging to the referenced virtual network.
     */
    ipAddress?: string;
    /**
     * Name of the backend address.
     */
    name?: string;
    /**
     * Reference to IP address defined in network interfaces.
     */
    networkInterfaceIPConfiguration: outputs.network.v20200601.SubResourceResponse;
    /**
     * Reference to an existing virtual network.
     */
    virtualNetwork?: outputs.network.v20200601.SubResourceResponse;
}

/**
 * SKU of a load balancer.
 */
export interface LoadBalancerSkuResponse {
    /**
     * Name of a load balancer SKU.
     */
    name?: string;
}

/**
 * A load balancing rule for a load balancer.
 */
export interface LoadBalancingRuleResponse {
    /**
     * A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs.
     */
    backendAddressPool?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The port used for internal connections on the endpoint. Acceptable values are between 0 and 65535. Note that value 0 enables "Any Port".
     */
    backendPort?: number;
    /**
     * Configures SNAT for the VMs in the backend pool to use the publicIP address specified in the frontend of the load balancing rule.
     */
    disableOutboundSnat?: boolean;
    /**
     * Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
     */
    enableFloatingIP?: boolean;
    /**
     * Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
     */
    enableTcpReset?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * A reference to frontend IP addresses.
     */
    frontendIPConfiguration?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 0 and 65534. Note that value 0 enables "Any Port".
     */
    frontendPort: number;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
     */
    idleTimeoutInMinutes?: number;
    /**
     * The load distribution policy for this rule.
     */
    loadDistribution?: string;
    /**
     * The name of the resource that is unique within the set of load balancing rules used by the load balancer. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The reference to the load balancer probe used by the load balancing rule.
     */
    probe?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The reference to the transport protocol used by the load balancing rule.
     */
    protocol: string;
    /**
     * The provisioning state of the load balancing rule resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * A common class for general resource information.
 */
export interface LocalNetworkGatewayResponse {
    /**
     * Local network gateway's BGP speaker settings.
     */
    bgpSettings?: outputs.network.v20200601.BgpSettingsResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * FQDN of local network gateway.
     */
    fqdn?: string;
    /**
     * IP address of local network gateway.
     */
    gatewayIpAddress?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Local network site address space.
     */
    localNetworkAddressSpace?: outputs.network.v20200601.AddressSpaceResponse;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The provisioning state of the local network gateway resource.
     */
    provisioningState: string;
    /**
     * The resource GUID property of the local network gateway resource.
     */
    resourceGuid: string;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Defines a managed rule group override setting.
 */
export interface ManagedRuleGroupOverrideResponse {
    /**
     * The managed rule group to override.
     */
    ruleGroupName: string;
    /**
     * List of rules that will be disabled. If none specified, all rules in the group will be disabled.
     */
    rules?: outputs.network.v20200601.ManagedRuleOverrideResponse[];
}

/**
 * Defines a managed rule group override setting.
 */
export interface ManagedRuleOverrideResponse {
    /**
     * Identifier for the managed rule.
     */
    ruleId: string;
    /**
     * The state of the managed rule. Defaults to Disabled if not specified.
     */
    state?: string;
}

/**
 * Defines a managed rule set.
 */
export interface ManagedRuleSetResponse {
    /**
     * Defines the rule group overrides to apply to the rule set.
     */
    ruleGroupOverrides?: outputs.network.v20200601.ManagedRuleGroupOverrideResponse[];
    /**
     * Defines the rule set type to use.
     */
    ruleSetType: string;
    /**
     * Defines the version of the rule set to use.
     */
    ruleSetVersion: string;
}

/**
 * Allow to exclude some variable satisfy the condition for the WAF check.
 */
export interface ManagedRulesDefinitionResponse {
    /**
     * The Exclusions that are applied on the policy.
     */
    exclusions?: outputs.network.v20200601.OwaspCrsExclusionEntryResponse[];
    /**
     * The managed rule sets that are associated with the policy.
     */
    managedRuleSets: outputs.network.v20200601.ManagedRuleSetResponse[];
}

/**
 * Identity for the resource.
 */
export interface ManagedServiceIdentityResponse {
    /**
     * The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
     */
    principalId: string;
    /**
     * The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
     */
    tenantId: string;
    /**
     * The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
     */
    type?: string;
    /**
     * The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     */
    userAssignedIdentities?: {[key: string]: outputs.network.v20200601.ManagedServiceIdentityResponseUserAssignedIdentities};
}

export interface ManagedServiceIdentityResponseUserAssignedIdentities {
    /**
     * The client id of user assigned identity.
     */
    clientId: string;
    /**
     * The principal id of user assigned identity.
     */
    principalId: string;
}

/**
 * Define match conditions.
 */
export interface MatchConditionResponse {
    /**
     * Match value.
     */
    matchValues: string[];
    /**
     * List of match variables.
     */
    matchVariables: outputs.network.v20200601.MatchVariableResponse[];
    /**
     * Whether this is negate condition or not.
     */
    negationConditon?: boolean;
    /**
     * The operator to be matched.
     */
    operator: string;
    /**
     * List of transforms.
     */
    transforms?: string[];
}

/**
 * Define match variables.
 */
export interface MatchVariableResponse {
    /**
     * The selector of match variable.
     */
    selector?: string;
    /**
     * Match Variable.
     */
    variableName: string;
}

/**
 * An MX record.
 */
export interface MxRecordResponse {
    /**
     * The domain name of the mail host for this MX record.
     */
    exchange?: string;
    /**
     * The preference value for this MX record.
     */
    preference?: number;
}

/**
 * SKU of nat gateway.
 */
export interface NatGatewaySkuResponse {
    /**
     * Name of Nat Gateway SKU.
     */
    name?: string;
}

/**
 * Rule of type nat.
 */
export interface NatRuleResponse {
    /**
     * Description of the rule.
     */
    description?: string;
    /**
     * List of destination IP addresses or Service Tags.
     */
    destinationAddresses?: string[];
    /**
     * List of destination ports.
     */
    destinationPorts?: string[];
    /**
     * Array of FirewallPolicyRuleNetworkProtocols.
     */
    ipProtocols?: string[];
    /**
     * Name of the rule.
     */
    name?: string;
    /**
     * Rule Type.
     * Expected value is 'NatRule'.
     */
    ruleType: "NatRule";
    /**
     * List of source IP addresses for this rule.
     */
    sourceAddresses?: string[];
    /**
     * List of source IpGroups for this rule.
     */
    sourceIpGroups?: string[];
    /**
     * The translated address for this NAT rule.
     */
    translatedAddress?: string;
    /**
     * The translated port for this NAT rule.
     */
    translatedPort?: string;
}

/**
 * DNS settings of a network interface.
 */
export interface NetworkInterfaceDnsSettingsResponse {
    /**
     * If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.
     */
    appliedDnsServers: string[];
    /**
     * List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection.
     */
    dnsServers?: string[];
    /**
     * Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.
     */
    internalDnsNameLabel?: string;
    /**
     * Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the VM name with the value of internalDomainNameSuffix.
     */
    internalDomainNameSuffix: string;
    /**
     * Fully qualified DNS name supporting internal communications between VMs in the same virtual network.
     */
    internalFqdn: string;
}

/**
 * PrivateLinkConnection properties for the network interface.
 */
export interface NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesResponse {
    /**
     * List of FQDNs for current private link connection.
     */
    fqdns: string[];
    /**
     * The group ID for current private link connection.
     */
    groupId: string;
    /**
     * The required member name for current private link connection.
     */
    requiredMemberName: string;
}

/**
 * IPConfiguration in a network interface.
 */
export interface NetworkInterfaceIPConfigurationResponse {
    /**
     * The reference to ApplicationGatewayBackendAddressPool resource.
     */
    applicationGatewayBackendAddressPools?: outputs.network.v20200601.ApplicationGatewayBackendAddressPoolResponse[];
    /**
     * Application security groups in which the IP configuration is included.
     */
    applicationSecurityGroups?: outputs.network.v20200601.ApplicationSecurityGroupResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The reference to LoadBalancerBackendAddressPool resource.
     */
    loadBalancerBackendAddressPools?: outputs.network.v20200601.BackendAddressPoolResponse[];
    /**
     * A list of references of LoadBalancerInboundNatRules.
     */
    loadBalancerInboundNatRules?: outputs.network.v20200601.InboundNatRuleResponse[];
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Whether this is a primary customer address on the network interface.
     */
    primary?: boolean;
    /**
     * Private IP address of the IP configuration.
     */
    privateIPAddress?: string;
    /**
     * Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
     */
    privateIPAddressVersion?: string;
    /**
     * The private IP address allocation method.
     */
    privateIPAllocationMethod?: string;
    /**
     * PrivateLinkConnection properties for the network interface.
     */
    privateLinkConnectionProperties: outputs.network.v20200601.NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesResponse;
    /**
     * The provisioning state of the network interface IP configuration.
     */
    provisioningState: string;
    /**
     * Public IP address bound to the IP configuration.
     */
    publicIPAddress?: outputs.network.v20200601.PublicIPAddressResponse;
    /**
     * Subnet bound to the IP configuration.
     */
    subnet?: outputs.network.v20200601.SubnetResponse;
    /**
     * The reference to Virtual Network Taps.
     */
    virtualNetworkTaps?: outputs.network.v20200601.VirtualNetworkTapResponse[];
}

/**
 * A network interface in a resource group.
 */
export interface NetworkInterfaceResponse {
    /**
     * The DNS settings in network interface.
     */
    dnsSettings?: outputs.network.v20200601.NetworkInterfaceDnsSettingsResponse;
    /**
     * A reference to the dscp configuration to which the network interface is linked.
     */
    dscpConfiguration: outputs.network.v20200601.SubResourceResponse;
    /**
     * If the network interface is accelerated networking enabled.
     */
    enableAcceleratedNetworking?: boolean;
    /**
     * Indicates whether IP forwarding is enabled on this network interface.
     */
    enableIPForwarding?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * A list of references to linked BareMetal resources.
     */
    hostedWorkloads: string[];
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * A list of IPConfigurations of the network interface.
     */
    ipConfigurations?: outputs.network.v20200601.NetworkInterfaceIPConfigurationResponse[];
    /**
     * Resource location.
     */
    location?: string;
    /**
     * The MAC address of the network interface.
     */
    macAddress: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The reference to the NetworkSecurityGroup resource.
     */
    networkSecurityGroup?: outputs.network.v20200601.NetworkSecurityGroupResponse;
    /**
     * Whether this is a primary network interface on a virtual machine.
     */
    primary: boolean;
    /**
     * A reference to the private endpoint to which the network interface is linked.
     */
    privateEndpoint: outputs.network.v20200601.PrivateEndpointResponse;
    /**
     * The provisioning state of the network interface resource.
     */
    provisioningState: string;
    /**
     * The resource GUID property of the network interface resource.
     */
    resourceGuid: string;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * A list of TapConfigurations of the network interface.
     */
    tapConfigurations: outputs.network.v20200601.NetworkInterfaceTapConfigurationResponse[];
    /**
     * Resource type.
     */
    type: string;
    /**
     * The reference to a virtual machine.
     */
    virtualMachine: outputs.network.v20200601.SubResourceResponse;
}

/**
 * Tap configuration in a Network Interface.
 */
export interface NetworkInterfaceTapConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the network interface tap configuration resource.
     */
    provisioningState: string;
    /**
     * Sub Resource type.
     */
    type: string;
    /**
     * The reference to the Virtual Network Tap resource.
     */
    virtualNetworkTap?: outputs.network.v20200601.VirtualNetworkTapResponse;
}

/**
 * Rule of type network.
 */
export interface NetworkRuleResponse {
    /**
     * Description of the rule.
     */
    description?: string;
    /**
     * List of destination IP addresses or Service Tags.
     */
    destinationAddresses?: string[];
    /**
     * List of destination FQDNs.
     */
    destinationFqdns?: string[];
    /**
     * List of destination IpGroups for this rule.
     */
    destinationIpGroups?: string[];
    /**
     * List of destination ports.
     */
    destinationPorts?: string[];
    /**
     * Array of FirewallPolicyRuleNetworkProtocols.
     */
    ipProtocols?: string[];
    /**
     * Name of the rule.
     */
    name?: string;
    /**
     * Rule Type.
     * Expected value is 'NetworkRule'.
     */
    ruleType: "NetworkRule";
    /**
     * List of source IP addresses for this rule.
     */
    sourceAddresses?: string[];
    /**
     * List of source IpGroups for this rule.
     */
    sourceIpGroups?: string[];
}

/**
 * NetworkSecurityGroup resource.
 */
export interface NetworkSecurityGroupResponse {
    /**
     * The default security rules of network security group.
     */
    defaultSecurityRules: outputs.network.v20200601.SecurityRuleResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * A collection of references to flow log resources.
     */
    flowLogs: outputs.network.v20200601.FlowLogResponse[];
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * A collection of references to network interfaces.
     */
    networkInterfaces: outputs.network.v20200601.NetworkInterfaceResponse[];
    /**
     * The provisioning state of the network security group resource.
     */
    provisioningState: string;
    /**
     * The resource GUID property of the network security group resource.
     */
    resourceGuid: string;
    /**
     * A collection of security rules of the network security group.
     */
    securityRules?: outputs.network.v20200601.SecurityRuleResponse[];
    /**
     * A collection of references to subnets.
     */
    subnets: outputs.network.v20200601.SubnetResponse[];
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Office365 breakout categories.
 */
export interface O365BreakOutCategoryPoliciesResponse {
    /**
     * Flag to control allow category.
     */
    allow?: boolean;
    /**
     * Flag to control default category.
     */
    default?: boolean;
    /**
     * Flag to control optimize category.
     */
    optimize?: boolean;
}

/**
 * The Office365 breakout policy.
 */
export interface O365PolicyPropertiesResponse {
    /**
     * Office365 breakout categories.
     */
    breakOutCategories?: outputs.network.v20200601.O365BreakOutCategoryPoliciesResponse;
}

/**
 * Network Virtual Appliance Sku Properties.
 */
export interface Office365PolicyPropertiesResponse {
    /**
     * Office 365 breakout categories.
     */
    breakOutCategories?: outputs.network.v20200601.BreakOutCategoryPoliciesResponse;
}

/**
 * Outbound rule of the load balancer.
 */
export interface OutboundRuleResponse {
    /**
     * The number of outbound ports to be used for NAT.
     */
    allocatedOutboundPorts?: number;
    /**
     * A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs.
     */
    backendAddressPool: outputs.network.v20200601.SubResourceResponse;
    /**
     * Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
     */
    enableTcpReset?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * The Frontend IP addresses of the load balancer.
     */
    frontendIPConfigurations: outputs.network.v20200601.SubResourceResponse[];
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The timeout for the TCP idle connection.
     */
    idleTimeoutInMinutes?: number;
    /**
     * The name of the resource that is unique within the set of outbound rules used by the load balancer. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The protocol for the outbound rule in load balancer.
     */
    protocol: string;
    /**
     * The provisioning state of the outbound rule resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Allow to exclude some variable satisfy the condition for the WAF check.
 */
export interface OwaspCrsExclusionEntryResponse {
    /**
     * The variable to be excluded.
     */
    matchVariable: string;
    /**
     * When matchVariable is a collection, operator used to specify which elements in the collection this exclusion applies to.
     */
    selector: string;
    /**
     * When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
     */
    selectorMatchOperator: string;
}

/**
 * P2SConnectionConfiguration Resource.
 */
export interface P2SConnectionConfigurationResponse {
    /**
     * Flag indicating whether the enable internet security flag is turned on for the P2S Connections or not.
     */
    enableInternetSecurity?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the P2SConnectionConfiguration resource.
     */
    provisioningState: string;
    /**
     * The Routing Configuration indicating the associated and propagated route tables on this connection.
     */
    routingConfiguration?: outputs.network.v20200601.RoutingConfigurationResponse;
    /**
     * The reference to the address space resource which represents Address space for P2S VpnClient.
     */
    vpnClientAddressPool?: outputs.network.v20200601.AddressSpaceResponse;
}

/**
 * P2SVpnGateway Resource.
 */
export interface P2SVpnGatewayResponse {
    /**
     * List of all customer specified DNS servers IP addresses.
     */
    customDnsServers?: string[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * List of all p2s connection configurations of the gateway.
     */
    p2SConnectionConfigurations?: outputs.network.v20200601.P2SConnectionConfigurationResponse[];
    /**
     * The provisioning state of the P2S VPN gateway resource.
     */
    provisioningState: string;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
    /**
     * The VirtualHub to which the gateway belongs.
     */
    virtualHub?: outputs.network.v20200601.SubResourceResponse;
    /**
     * All P2S VPN clients' connection health status.
     */
    vpnClientConnectionHealth: outputs.network.v20200601.VpnClientConnectionHealthResponse;
    /**
     * The scale unit for this p2s vpn gateway.
     */
    vpnGatewayScaleUnit?: number;
    /**
     * The VpnServerConfiguration to which the p2sVpnGateway is attached to.
     */
    vpnServerConfiguration?: outputs.network.v20200601.SubResourceResponse;
}

/**
 * Filter that is applied to packet capture request. Multiple filters can be applied.
 */
export interface PacketCaptureFilterResponse {
    /**
     * Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5"? for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
     */
    localIPAddress?: string;
    /**
     * Local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
     */
    localPort?: string;
    /**
     * Protocol to be filtered on.
     */
    protocol?: string;
    /**
     * Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
     */
    remoteIPAddress?: string;
    /**
     * Remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
     */
    remotePort?: string;
}
/**
 * packetCaptureFilterResponseProvideDefaults sets the appropriate defaults for PacketCaptureFilterResponse
 */
export function packetCaptureFilterResponseProvideDefaults(val: PacketCaptureFilterResponse): PacketCaptureFilterResponse {
    return {
        ...val,
        protocol: (val.protocol) ?? "Any",
    };
}

/**
 * The storage location for a packet capture session.
 */
export interface PacketCaptureStorageLocationResponse {
    /**
     * A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with /var/captures. Required if no storage ID is provided, otherwise optional.
     */
    filePath?: string;
    /**
     * The ID of the storage account to save the packet capture session. Required if no local file path is provided.
     */
    storageId?: string;
    /**
     * The URI of the storage path to save the packet capture. Must be a well-formed URI describing the location to save the packet capture.
     */
    storagePath?: string;
}

/**
 * Peer Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
 */
export interface PeerExpressRouteCircuitConnectionResponse {
    /**
     * /29 IP address space to carve out Customer addresses for tunnels.
     */
    addressPrefix?: string;
    /**
     * The resource guid of the authorization used for the express route circuit connection.
     */
    authResourceGuid?: string;
    /**
     * Express Route Circuit connection state.
     */
    circuitConnectionStatus: string;
    /**
     * The name of the express route circuit connection resource.
     */
    connectionName?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Reference to Express Route Circuit Private Peering Resource of the circuit.
     */
    expressRouteCircuitPeering?: outputs.network.v20200601.SubResourceResponse;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Reference to Express Route Circuit Private Peering Resource of the peered circuit.
     */
    peerExpressRouteCircuitPeering?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The provisioning state of the peer express route circuit connection resource.
     */
    provisioningState: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * Defines contents of a web application firewall global configuration.
 */
export interface PolicySettingsResponse {
    /**
     * Maximum file upload size in Mb for WAF.
     */
    fileUploadLimitInMb?: number;
    /**
     * Maximum request body size in Kb for WAF.
     */
    maxRequestBodySizeInKb?: number;
    /**
     * The mode of the policy.
     */
    mode?: string;
    /**
     * Whether to allow WAF to check request Body.
     */
    requestBodyCheck?: boolean;
    /**
     * The state of the policy.
     */
    state?: string;
}

/**
 * PrivateDnsZoneConfig resource.
 */
export interface PrivateDnsZoneConfigResponse {
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The resource id of the private dns zone.
     */
    privateDnsZoneId?: string;
    /**
     * A collection of information regarding a recordSet, holding information to identify private resources.
     */
    recordSets: outputs.network.v20200601.RecordSetResponse[];
}

/**
 * PrivateEndpointConnection resource.
 */
export interface PrivateEndpointConnectionResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The consumer link id.
     */
    linkIdentifier: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The resource of private end point.
     */
    privateEndpoint: outputs.network.v20200601.PrivateEndpointResponse;
    /**
     * A collection of information about the state of the connection between service consumer and provider.
     */
    privateLinkServiceConnectionState?: outputs.network.v20200601.PrivateLinkServiceConnectionStateResponse;
    /**
     * The provisioning state of the private endpoint connection resource.
     */
    provisioningState: string;
    /**
     * The resource type.
     */
    type: string;
}

/**
 * Private endpoint resource.
 */
export interface PrivateEndpointResponse {
    /**
     * An array of custom dns configurations.
     */
    customDnsConfigs?: outputs.network.v20200601.CustomDnsConfigPropertiesFormatResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource.
     */
    manualPrivateLinkServiceConnections?: outputs.network.v20200601.PrivateLinkServiceConnectionResponse[];
    /**
     * Resource name.
     */
    name: string;
    /**
     * An array of references to the network interfaces created for this private endpoint.
     */
    networkInterfaces: outputs.network.v20200601.NetworkInterfaceResponse[];
    /**
     * A grouping of information about the connection to the remote resource.
     */
    privateLinkServiceConnections?: outputs.network.v20200601.PrivateLinkServiceConnectionResponse[];
    /**
     * The provisioning state of the private endpoint resource.
     */
    provisioningState: string;
    /**
     * The ID of the subnet from which the private IP will be allocated.
     */
    subnet?: outputs.network.v20200601.SubnetResponse;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * PrivateLinkServiceConnection resource.
 */
export interface PrivateLinkServiceConnectionResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to.
     */
    groupIds?: string[];
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * A collection of read-only information about the state of the connection to the remote resource.
     */
    privateLinkServiceConnectionState?: outputs.network.v20200601.PrivateLinkServiceConnectionStateResponse;
    /**
     * The resource id of private link service.
     */
    privateLinkServiceId?: string;
    /**
     * The provisioning state of the private link service connection resource.
     */
    provisioningState: string;
    /**
     * A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars.
     */
    requestMessage?: string;
    /**
     * The resource type.
     */
    type: string;
}

/**
 * A collection of information about the state of the connection between service consumer and provider.
 */
export interface PrivateLinkServiceConnectionStateResponse {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: string;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: string;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: string;
}

/**
 * The private link service ip configuration.
 */
export interface PrivateLinkServiceIpConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of private link service ip configuration.
     */
    name?: string;
    /**
     * Whether the ip configuration is primary or not.
     */
    primary?: boolean;
    /**
     * The private IP address of the IP configuration.
     */
    privateIPAddress?: string;
    /**
     * Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
     */
    privateIPAddressVersion?: string;
    /**
     * The private IP address allocation method.
     */
    privateIPAllocationMethod?: string;
    /**
     * The provisioning state of the private link service IP configuration resource.
     */
    provisioningState: string;
    /**
     * The reference to the subnet resource.
     */
    subnet?: outputs.network.v20200601.SubnetResponse;
    /**
     * The resource type.
     */
    type: string;
}

/**
 * The auto-approval list of the private link service.
 */
export interface PrivateLinkServicePropertiesResponseAutoApproval {
    /**
     * The list of subscriptions.
     */
    subscriptions?: string[];
}

/**
 * The visibility list of the private link service.
 */
export interface PrivateLinkServicePropertiesResponseVisibility {
    /**
     * The list of subscriptions.
     */
    subscriptions?: string[];
}

/**
 * A load balancer probe.
 */
export interface ProbeResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
     */
    intervalInSeconds?: number;
    /**
     * The load balancer rules that use this probe.
     */
    loadBalancingRules: outputs.network.v20200601.SubResourceResponse[];
    /**
     * The name of the resource that is unique within the set of probes used by the load balancer. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.
     */
    numberOfProbes?: number;
    /**
     * The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
     */
    port: number;
    /**
     * The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
     */
    protocol: string;
    /**
     * The provisioning state of the probe resource.
     */
    provisioningState: string;
    /**
     * The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
     */
    requestPath?: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * The list of RouteTables to advertise the routes to.
 */
export interface PropagatedRouteTableResponse {
    /**
     * The list of resource ids of all the RouteTables.
     */
    ids?: outputs.network.v20200601.SubResourceResponse[];
    /**
     * The list of labels.
     */
    labels?: string[];
}

/**
 * DDoS custom policy properties.
 */
export interface ProtocolCustomSettingsFormatResponse {
    /**
     * The protocol for which the DDoS protection policy is being customized.
     */
    protocol?: string;
    /**
     * The customized DDoS protection source rate.
     */
    sourceRateOverride?: string;
    /**
     * The customized DDoS protection trigger rate.
     */
    triggerRateOverride?: string;
    /**
     * The customized DDoS protection trigger rate sensitivity degrees. High: Trigger rate set with most sensitivity w.r.t. normal traffic. Default: Trigger rate set with moderate sensitivity w.r.t. normal traffic. Low: Trigger rate set with less sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity w.r.t. normal traffic.
     */
    triggerSensitivityOverride?: string;
}

/**
 * A PTR record.
 */
export interface PtrRecordResponse {
    /**
     * The PTR target domain name for this PTR record.
     */
    ptrdname?: string;
}

/**
 * Contains FQDN of the DNS record associated with the public IP address.
 */
export interface PublicIPAddressDnsSettingsResponse {
    /**
     * The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.
     */
    domainNameLabel?: string;
    /**
     * The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
     */
    fqdn?: string;
    /**
     * The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
     */
    reverseFqdn?: string;
}

/**
 * Public IP address resource.
 */
export interface PublicIPAddressResponse {
    /**
     * The DDoS protection custom policy associated with the public IP address.
     */
    ddosSettings?: outputs.network.v20200601.DdosSettingsResponse;
    /**
     * The FQDN of the DNS record associated with the public IP address.
     */
    dnsSettings?: outputs.network.v20200601.PublicIPAddressDnsSettingsResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The idle timeout of the public IP address.
     */
    idleTimeoutInMinutes?: number;
    /**
     * The IP address associated with the public IP address resource.
     */
    ipAddress?: string;
    /**
     * The IP configuration associated with the public IP address.
     */
    ipConfiguration: outputs.network.v20200601.IPConfigurationResponse;
    /**
     * The list of tags associated with the public IP address.
     */
    ipTags?: outputs.network.v20200601.IpTagResponse[];
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The provisioning state of the public IP address resource.
     */
    provisioningState: string;
    /**
     * The public IP address version.
     */
    publicIPAddressVersion?: string;
    /**
     * The public IP address allocation method.
     */
    publicIPAllocationMethod?: string;
    /**
     * The Public IP Prefix this Public IP Address should be allocated from.
     */
    publicIPPrefix?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The resource GUID property of the public IP address resource.
     */
    resourceGuid: string;
    /**
     * The public IP address SKU.
     */
    sku?: outputs.network.v20200601.PublicIPAddressSkuResponse;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
    /**
     * A list of availability zones denoting the IP allocated for the resource needs to come from.
     */
    zones?: string[];
}

/**
 * SKU of a public IP address.
 */
export interface PublicIPAddressSkuResponse {
    /**
     * Name of a public IP address SKU.
     */
    name?: string;
}

/**
 * SKU of a public IP prefix.
 */
export interface PublicIPPrefixSkuResponse {
    /**
     * Name of a public IP prefix SKU.
     */
    name?: string;
}

/**
 * Qos Traffic Profiler IP Range properties.
 */
export interface QosIpRangeResponse {
    /**
     * End IP Address.
     */
    endIP?: string;
    /**
     * Start IP Address.
     */
    startIP?: string;
}

/**
 * Qos Traffic Profiler Port range properties.
 */
export interface QosPortRangeResponse {
    /**
     * Qos Port Range end.
     */
    end?: number;
    /**
     * Qos Port Range start.
     */
    start?: number;
}

/**
 * Radius Server Settings.
 */
export interface RadiusServerResponse {
    /**
     * The address of this radius server.
     */
    radiusServerAddress: string;
    /**
     * The initial score assigned to this radius server.
     */
    radiusServerScore?: number;
    /**
     * The secret used for this radius server.
     */
    radiusServerSecret?: string;
}

/**
 * A collective group of information about the record set information.
 */
export interface RecordSetResponse {
    /**
     * Fqdn that resolves to private endpoint ip address.
     */
    fqdn?: string;
    /**
     * The private ip address of the private endpoint.
     */
    ipAddresses?: string[];
    /**
     * The provisioning state of the recordset.
     */
    provisioningState: string;
    /**
     * Recordset name.
     */
    recordSetName?: string;
    /**
     * Resource record type.
     */
    recordType?: string;
    /**
     * Recordset time to live.
     */
    ttl?: number;
}

/**
 * Reference to a public IP address.
 */
export interface ReferencedPublicIpAddressResponse {
    /**
     * The PublicIPAddress Reference.
     */
    id?: string;
}

/**
 * ResourceNavigationLink resource.
 */
export interface ResourceNavigationLinkResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id: string;
    /**
     * Link to the external resource.
     */
    link?: string;
    /**
     * Resource type of the linked resource.
     */
    linkedResourceType?: string;
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the resource navigation link resource.
     */
    provisioningState: string;
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Parameters that define the retention policy for flow log.
 */
export interface RetentionPolicyParametersResponse {
    /**
     * Number of days to retain flow log records.
     */
    days?: number;
    /**
     * Flag to enable/disable retention.
     */
    enabled?: boolean;
}
/**
 * retentionPolicyParametersResponseProvideDefaults sets the appropriate defaults for RetentionPolicyParametersResponse
 */
export function retentionPolicyParametersResponseProvideDefaults(val: RetentionPolicyParametersResponse): RetentionPolicyParametersResponse {
    return {
        ...val,
        days: (val.days) ?? 0,
        enabled: (val.enabled) ?? false,
    };
}

/**
 * Route Filter Rule Resource.
 */
export interface RouteFilterRuleResponse {
    /**
     * The access type of the rule.
     */
    access: string;
    /**
     * The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].
     */
    communities: string[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the route filter rule resource.
     */
    provisioningState: string;
    /**
     * The rule type of the rule.
     */
    routeFilterRuleType: string;
}

/**
 * Route resource.
 */
export interface RouteResponse {
    /**
     * The destination CIDR to which the route applies.
     */
    addressPrefix?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
     */
    nextHopIpAddress?: string;
    /**
     * The type of Azure hop the packet should be sent to.
     */
    nextHopType: string;
    /**
     * The provisioning state of the route resource.
     */
    provisioningState: string;
}

/**
 * Route table resource.
 */
export interface RouteTableResponse {
    /**
     * Whether to disable the routes learned by BGP on that route table. True means disable.
     */
    disableBgpRoutePropagation?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The provisioning state of the route table resource.
     */
    provisioningState: string;
    /**
     * Collection of routes contained within a route table.
     */
    routes?: outputs.network.v20200601.RouteResponse[];
    /**
     * A collection of references to subnets.
     */
    subnets: outputs.network.v20200601.SubnetResponse[];
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Routing Configuration indicating the associated and propagated route tables for this connection.
 */
export interface RoutingConfigurationResponse {
    /**
     * The resource id RouteTable associated with this RoutingConfiguration.
     */
    associatedRouteTable?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The list of RouteTables to advertise the routes to.
     */
    propagatedRouteTables?: outputs.network.v20200601.PropagatedRouteTableResponse;
    /**
     * List of routes that control routing from VirtualHub into a virtual network connection.
     */
    vnetRoutes?: outputs.network.v20200601.VnetRouteResponse;
}

/**
 * Network security rule.
 */
export interface SecurityRuleResponse {
    /**
     * The network traffic is allowed or denied.
     */
    access: string;
    /**
     * A description for this rule. Restricted to 140 chars.
     */
    description?: string;
    /**
     * The destination address prefix. CIDR or destination IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
     */
    destinationAddressPrefix?: string;
    /**
     * The destination address prefixes. CIDR or destination IP ranges.
     */
    destinationAddressPrefixes?: string[];
    /**
     * The application security group specified as destination.
     */
    destinationApplicationSecurityGroups?: outputs.network.v20200601.ApplicationSecurityGroupResponse[];
    /**
     * The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
     */
    destinationPortRange?: string;
    /**
     * The destination port ranges.
     */
    destinationPortRanges?: string[];
    /**
     * The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
     */
    direction: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
     */
    priority?: number;
    /**
     * Network protocol this rule applies to.
     */
    protocol: string;
    /**
     * The provisioning state of the security rule resource.
     */
    provisioningState: string;
    /**
     * The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from.
     */
    sourceAddressPrefix?: string;
    /**
     * The CIDR or source IP ranges.
     */
    sourceAddressPrefixes?: string[];
    /**
     * The application security group specified as source.
     */
    sourceApplicationSecurityGroups?: outputs.network.v20200601.ApplicationSecurityGroupResponse[];
    /**
     * The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
     */
    sourcePortRange?: string;
    /**
     * The source port ranges.
     */
    sourcePortRanges?: string[];
}

/**
 * ServiceAssociationLink resource.
 */
export interface ServiceAssociationLinkResponse {
    /**
     * If true, the resource can be deleted.
     */
    allowDelete?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Link to the external resource.
     */
    link?: string;
    /**
     * Resource type of the linked resource.
     */
    linkedResourceType?: string;
    /**
     * A list of locations.
     */
    locations?: string[];
    /**
     * Name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the service association link resource.
     */
    provisioningState: string;
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Service Endpoint policy definitions.
 */
export interface ServiceEndpointPolicyDefinitionResponse {
    /**
     * A description for this rule. Restricted to 140 chars.
     */
    description?: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the service endpoint policy definition resource.
     */
    provisioningState: string;
    /**
     * Service endpoint name.
     */
    service?: string;
    /**
     * A list of service resources.
     */
    serviceResources?: string[];
}

/**
 * Service End point policy resource.
 */
export interface ServiceEndpointPolicyResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The provisioning state of the service endpoint policy resource.
     */
    provisioningState: string;
    /**
     * The resource GUID property of the service endpoint policy resource.
     */
    resourceGuid: string;
    /**
     * A collection of service endpoint policy definitions of the service endpoint policy.
     */
    serviceEndpointPolicyDefinitions?: outputs.network.v20200601.ServiceEndpointPolicyDefinitionResponse[];
    /**
     * A collection of references to subnets.
     */
    subnets: outputs.network.v20200601.SubnetResponse[];
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * The service endpoint properties.
 */
export interface ServiceEndpointPropertiesFormatResponse {
    /**
     * A list of locations.
     */
    locations?: string[];
    /**
     * The provisioning state of the service endpoint resource.
     */
    provisioningState: string;
    /**
     * The type of the endpoint service.
     */
    service?: string;
}

/**
 * An SOA record.
 */
export interface SoaRecordResponse {
    /**
     * The email contact for this SOA record.
     */
    email?: string;
    /**
     * The expire time for this SOA record.
     */
    expireTime?: number;
    /**
     * The domain name of the authoritative name server for this SOA record.
     */
    host?: string;
    /**
     * The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
     */
    minimumTtl?: number;
    /**
     * The refresh value for this SOA record.
     */
    refreshTime?: number;
    /**
     * The retry time for this SOA record.
     */
    retryTime?: number;
    /**
     * The serial number for this SOA record.
     */
    serialNumber?: number;
}

/**
 * An SRV record.
 */
export interface SrvRecordResponse {
    /**
     * The port value for this SRV record.
     */
    port?: number;
    /**
     * The priority value for this SRV record.
     */
    priority?: number;
    /**
     * The target domain name for this SRV record.
     */
    target?: string;
    /**
     * The weight value for this SRV record.
     */
    weight?: number;
}

/**
 * List of all Static Routes.
 */
export interface StaticRouteResponse {
    /**
     * List of all address prefixes.
     */
    addressPrefixes?: string[];
    /**
     * The name of the StaticRoute that is unique within a VnetRoute.
     */
    name?: string;
    /**
     * The ip address of the next hop.
     */
    nextHopIpAddress?: string;
}

/**
 * Reference to another subresource.
 */
export interface SubResourceResponse {
    /**
     * Resource ID.
     */
    id?: string;
}

/**
 * Subnet in a virtual network resource.
 */
export interface SubnetResponse {
    /**
     * The address prefix for the subnet.
     */
    addressPrefix?: string;
    /**
     * List of address prefixes for the subnet.
     */
    addressPrefixes?: string[];
    /**
     * An array of references to the delegations on the subnet.
     */
    delegations?: outputs.network.v20200601.DelegationResponse[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Array of IpAllocation which reference this subnet.
     */
    ipAllocations?: outputs.network.v20200601.SubResourceResponse[];
    /**
     * Array of IP configuration profiles which reference this subnet.
     */
    ipConfigurationProfiles: outputs.network.v20200601.IPConfigurationProfileResponse[];
    /**
     * An array of references to the network interface IP configurations using subnet.
     */
    ipConfigurations: outputs.network.v20200601.IPConfigurationResponse[];
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Nat gateway associated with this subnet.
     */
    natGateway?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The reference to the NetworkSecurityGroup resource.
     */
    networkSecurityGroup?: outputs.network.v20200601.NetworkSecurityGroupResponse;
    /**
     * Enable or Disable apply network policies on private end point in the subnet.
     */
    privateEndpointNetworkPolicies?: string;
    /**
     * An array of references to private endpoints.
     */
    privateEndpoints: outputs.network.v20200601.PrivateEndpointResponse[];
    /**
     * Enable or Disable apply network policies on private link service in the subnet.
     */
    privateLinkServiceNetworkPolicies?: string;
    /**
     * The provisioning state of the subnet resource.
     */
    provisioningState: string;
    /**
     * A read-only string identifying the intention of use for this subnet based on delegations and other user-defined properties.
     */
    purpose: string;
    /**
     * An array of references to the external resources using subnet.
     */
    resourceNavigationLinks: outputs.network.v20200601.ResourceNavigationLinkResponse[];
    /**
     * The reference to the RouteTable resource.
     */
    routeTable?: outputs.network.v20200601.RouteTableResponse;
    /**
     * An array of references to services injecting into this subnet.
     */
    serviceAssociationLinks: outputs.network.v20200601.ServiceAssociationLinkResponse[];
    /**
     * An array of service endpoint policies.
     */
    serviceEndpointPolicies?: outputs.network.v20200601.ServiceEndpointPolicyResponse[];
    /**
     * An array of service endpoints.
     */
    serviceEndpoints?: outputs.network.v20200601.ServiceEndpointPropertiesFormatResponse[];
}

/**
 * Parameters that define the configuration of traffic analytics.
 */
export interface TrafficAnalyticsConfigurationPropertiesResponse {
    /**
     * Flag to enable/disable traffic analytics.
     */
    enabled?: boolean;
    /**
     * The interval in minutes which would decide how frequently TA service should do flow analytics.
     */
    trafficAnalyticsInterval?: number;
    /**
     * The resource guid of the attached workspace.
     */
    workspaceId?: string;
    /**
     * The location of the attached workspace.
     */
    workspaceRegion?: string;
    /**
     * Resource Id of the attached workspace.
     */
    workspaceResourceId?: string;
}

/**
 * Parameters that define the configuration of traffic analytics.
 */
export interface TrafficAnalyticsPropertiesResponse {
    /**
     * Parameters that define the configuration of traffic analytics.
     */
    networkWatcherFlowAnalyticsConfiguration?: outputs.network.v20200601.TrafficAnalyticsConfigurationPropertiesResponse;
}

/**
 * An traffic selector policy for a virtual network gateway connection.
 */
export interface TrafficSelectorPolicyResponse {
    /**
     * A collection of local address spaces in CIDR format.
     */
    localAddressRanges: string[];
    /**
     * A collection of remote address spaces in CIDR format.
     */
    remoteAddressRanges: string[];
}

/**
 * VirtualNetworkGatewayConnection properties.
 */
export interface TunnelConnectionHealthResponse {
    /**
     * Virtual Network Gateway connection status.
     */
    connectionStatus: string;
    /**
     * The Egress Bytes Transferred in this connection.
     */
    egressBytesTransferred: number;
    /**
     * The Ingress Bytes Transferred in this connection.
     */
    ingressBytesTransferred: number;
    /**
     * The time at which connection was established in Utc format.
     */
    lastConnectionEstablishedUtcTime: string;
    /**
     * Tunnel name.
     */
    tunnel: string;
}

/**
 * A TXT record.
 */
export interface TxtRecordResponse {
    /**
     * The text value of this TXT record.
     */
    value?: string[];
}

/**
 * Describes a Virtual Machine.
 */
export interface VMResponse {
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Network Virtual Appliance NIC properties.
 */
export interface VirtualApplianceNicPropertiesResponse {
    /**
     * NIC name.
     */
    name: string;
    /**
     * Private IP address.
     */
    privateIpAddress: string;
    /**
     * Public IP address.
     */
    publicIpAddress: string;
}

/**
 * Network Virtual Appliance Sku Properties.
 */
export interface VirtualApplianceSkuPropertiesResponse {
    /**
     * Virtual Appliance Scale Unit.
     */
    bundledScaleUnit?: string;
    /**
     * Virtual Appliance Version.
     */
    marketPlaceVersion?: string;
    /**
     * Virtual Appliance Vendor.
     */
    vendor?: string;
}

/**
 * Virtual Hub identifier.
 */
export interface VirtualHubIdResponse {
    /**
     * The resource URI for the Virtual Hub where the ExpressRoute gateway is or will be deployed. The Virtual Hub resource and the ExpressRoute gateway resource reside in the same subscription.
     */
    id?: string;
}

/**
 * VirtualHub route.
 */
export interface VirtualHubRouteResponse {
    /**
     * List of all addressPrefixes.
     */
    addressPrefixes?: string[];
    /**
     * NextHop ip address.
     */
    nextHopIpAddress?: string;
}

/**
 * VirtualHub route table.
 */
export interface VirtualHubRouteTableResponse {
    /**
     * List of all routes.
     */
    routes?: outputs.network.v20200601.VirtualHubRouteResponse[];
}

/**
 * VirtualHubRouteTableV2 Resource.
 */
export interface VirtualHubRouteTableV2Response {
    /**
     * List of all connections attached to this route table v2.
     */
    attachedConnections?: string[];
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the virtual hub route table v2 resource.
     */
    provisioningState: string;
    /**
     * List of all routes.
     */
    routes?: outputs.network.v20200601.VirtualHubRouteV2Response[];
}

/**
 * VirtualHubRouteTableV2 route.
 */
export interface VirtualHubRouteV2Response {
    /**
     * The type of destinations.
     */
    destinationType?: string;
    /**
     * List of all destinations.
     */
    destinations?: string[];
    /**
     * The type of next hops.
     */
    nextHopType?: string;
    /**
     * NextHops ip address.
     */
    nextHops?: string[];
}

/**
 * Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
 */
export interface VirtualNetworkBgpCommunitiesResponse {
    /**
     * The BGP community associated with the region of the virtual network.
     */
    regionalCommunity: string;
    /**
     * The BGP community associated with the virtual network.
     */
    virtualNetworkCommunity: string;
}

/**
 * IP configuration for virtual network gateway.
 */
export interface VirtualNetworkGatewayIPConfigurationResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Private IP Address for this gateway.
     */
    privateIPAddress: string;
    /**
     * The private IP address allocation method.
     */
    privateIPAllocationMethod?: string;
    /**
     * The provisioning state of the virtual network gateway IP configuration resource.
     */
    provisioningState: string;
    /**
     * The reference to the public IP resource.
     */
    publicIPAddress?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The reference to the subnet resource.
     */
    subnet?: outputs.network.v20200601.SubResourceResponse;
}

/**
 * A common class for general resource information.
 */
export interface VirtualNetworkGatewayResponse {
    /**
     * ActiveActive flag.
     */
    activeActive?: boolean;
    /**
     * Virtual network gateway's BGP speaker settings.
     */
    bgpSettings?: outputs.network.v20200601.BgpSettingsResponse;
    /**
     * The reference to the address space resource which represents the custom routes address space specified by the customer for virtual network gateway and VpnClient.
     */
    customRoutes?: outputs.network.v20200601.AddressSpaceResponse;
    /**
     * Whether BGP is enabled for this virtual network gateway or not.
     */
    enableBgp?: boolean;
    /**
     * Whether dns forwarding is enabled or not.
     */
    enableDnsForwarding?: boolean;
    /**
     * Whether private IP needs to be enabled on this gateway for connections or not.
     */
    enablePrivateIpAddress?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * The reference to the LocalNetworkGateway resource which represents local network site having default routes. Assign Null value in case of removing existing default site setting.
     */
    gatewayDefaultSite?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The type of this virtual network gateway.
     */
    gatewayType?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The IP address allocated by the gateway to which dns requests can be sent.
     */
    inboundDnsForwardingEndpoint: string;
    /**
     * IP configurations for virtual network gateway.
     */
    ipConfigurations?: outputs.network.v20200601.VirtualNetworkGatewayIPConfigurationResponse[];
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * The provisioning state of the virtual network gateway resource.
     */
    provisioningState: string;
    /**
     * The resource GUID property of the virtual network gateway resource.
     */
    resourceGuid: string;
    /**
     * The reference to the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network gateway.
     */
    sku?: outputs.network.v20200601.VirtualNetworkGatewaySkuResponse;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
    /**
     * The reference to the VpnClientConfiguration resource which represents the P2S VpnClient configurations.
     */
    vpnClientConfiguration?: outputs.network.v20200601.VpnClientConfigurationResponse;
    /**
     * The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
     */
    vpnGatewayGeneration?: string;
    /**
     * The type of this virtual network gateway.
     */
    vpnType?: string;
}

/**
 * VirtualNetworkGatewaySku details.
 */
export interface VirtualNetworkGatewaySkuResponse {
    /**
     * The capacity.
     */
    capacity: number;
    /**
     * Gateway SKU name.
     */
    name?: string;
    /**
     * Gateway SKU tier.
     */
    tier?: string;
}

/**
 * Peerings in a virtual network resource.
 */
export interface VirtualNetworkPeeringResponse {
    /**
     * Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
     */
    allowForwardedTraffic?: boolean;
    /**
     * If gateway links can be used in remote virtual networking to link to this virtual network.
     */
    allowGatewayTransit?: boolean;
    /**
     * Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
     */
    allowVirtualNetworkAccess?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The status of the virtual network peering.
     */
    peeringState?: string;
    /**
     * The provisioning state of the virtual network peering resource.
     */
    provisioningState: string;
    /**
     * The reference to the remote virtual network address space.
     */
    remoteAddressSpace?: outputs.network.v20200601.AddressSpaceResponse;
    /**
     * The reference to the remote virtual network's Bgp Communities.
     */
    remoteBgpCommunities?: outputs.network.v20200601.VirtualNetworkBgpCommunitiesResponse;
    /**
     * The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the preview and learn more (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
     */
    remoteVirtualNetwork?: outputs.network.v20200601.SubResourceResponse;
    /**
     * If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
     */
    useRemoteGateways?: boolean;
}

/**
 * Virtual Network Tap resource.
 */
export interface VirtualNetworkTapResponse {
    /**
     * The reference to the private IP address on the internal Load Balancer that will receive the tap.
     */
    destinationLoadBalancerFrontEndIPConfiguration?: outputs.network.v20200601.FrontendIPConfigurationResponse;
    /**
     * The reference to the private IP Address of the collector nic that will receive the tap.
     */
    destinationNetworkInterfaceIPConfiguration?: outputs.network.v20200601.NetworkInterfaceIPConfigurationResponse;
    /**
     * The VXLAN destination port that will receive the tapped traffic.
     */
    destinationPort?: number;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource location.
     */
    location?: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * Specifies the list of resource IDs for the network interface IP configuration that needs to be tapped.
     */
    networkInterfaceTapConfigurations: outputs.network.v20200601.NetworkInterfaceTapConfigurationResponse[];
    /**
     * The provisioning state of the virtual network tap resource.
     */
    provisioningState: string;
    /**
     * The resource GUID property of the virtual network tap resource.
     */
    resourceGuid: string;
    /**
     * Resource tags.
     */
    tags?: {[key: string]: string};
    /**
     * Resource type.
     */
    type: string;
}

/**
 * List of routes that control routing from VirtualHub into a virtual network connection.
 */
export interface VnetRouteResponse {
    /**
     * List of all Static Routes.
     */
    staticRoutes?: outputs.network.v20200601.StaticRouteResponse[];
}

/**
 * VpnClientConfiguration for P2S client.
 */
export interface VpnClientConfigurationResponse {
    /**
     * The AADAudience property of the VirtualNetworkGateway resource for vpn client connection used for AAD authentication.
     */
    aadAudience?: string;
    /**
     * The AADIssuer property of the VirtualNetworkGateway resource for vpn client connection used for AAD authentication.
     */
    aadIssuer?: string;
    /**
     * The AADTenant property of the VirtualNetworkGateway resource for vpn client connection used for AAD authentication.
     */
    aadTenant?: string;
    /**
     * The radius server address property of the VirtualNetworkGateway resource for vpn client connection.
     */
    radiusServerAddress?: string;
    /**
     * The radius secret property of the VirtualNetworkGateway resource for vpn client connection.
     */
    radiusServerSecret?: string;
    /**
     * The radiusServers property for multiple radius server configuration.
     */
    radiusServers?: outputs.network.v20200601.RadiusServerResponse[];
    /**
     * The reference to the address space resource which represents Address space for P2S VpnClient.
     */
    vpnClientAddressPool?: outputs.network.v20200601.AddressSpaceResponse;
    /**
     * VpnClientIpsecPolicies for virtual network gateway P2S client.
     */
    vpnClientIpsecPolicies?: outputs.network.v20200601.IpsecPolicyResponse[];
    /**
     * VpnClientProtocols for Virtual network gateway.
     */
    vpnClientProtocols?: string[];
    /**
     * VpnClientRevokedCertificate for Virtual network gateway.
     */
    vpnClientRevokedCertificates?: outputs.network.v20200601.VpnClientRevokedCertificateResponse[];
    /**
     * VpnClientRootCertificate for virtual network gateway.
     */
    vpnClientRootCertificates?: outputs.network.v20200601.VpnClientRootCertificateResponse[];
}

/**
 * VPN client connection health detail.
 */
export interface VpnClientConnectionHealthDetailResponse {
    /**
     * The egress bytes per second.
     */
    egressBytesTransferred: number;
    /**
     * The egress packets per second.
     */
    egressPacketsTransferred: number;
    /**
     * The ingress bytes per second.
     */
    ingressBytesTransferred: number;
    /**
     * The ingress packets per second.
     */
    ingressPacketsTransferred: number;
    /**
     * The max band width.
     */
    maxBandwidth: number;
    /**
     * The max packets transferred per second.
     */
    maxPacketsPerSecond: number;
    /**
     * The assigned private Ip of a connected vpn client.
     */
    privateIpAddress: string;
    /**
     * The public Ip of a connected vpn client.
     */
    publicIpAddress: string;
    /**
     * The duration time of a connected vpn client.
     */
    vpnConnectionDuration: number;
    /**
     * The vpn client Id.
     */
    vpnConnectionId: string;
    /**
     * The start time of a connected vpn client.
     */
    vpnConnectionTime: string;
    /**
     * The user name of a connected vpn client.
     */
    vpnUserName: string;
}

/**
 * VpnClientConnectionHealth properties.
 */
export interface VpnClientConnectionHealthResponse {
    /**
     * List of allocated ip addresses to the connected p2s vpn clients.
     */
    allocatedIpAddresses?: string[];
    /**
     * Total of the Egress Bytes Transferred in this connection.
     */
    totalEgressBytesTransferred: number;
    /**
     * Total of the Ingress Bytes Transferred in this P2S Vpn connection.
     */
    totalIngressBytesTransferred: number;
    /**
     * The total of p2s vpn clients connected at this time to this P2SVpnGateway.
     */
    vpnClientConnectionsCount?: number;
}

/**
 * VPN client revoked certificate of virtual network gateway.
 */
export interface VpnClientRevokedCertificateResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the VPN client revoked certificate resource.
     */
    provisioningState: string;
    /**
     * The revoked VPN client certificate thumbprint.
     */
    thumbprint?: string;
}

/**
 * VPN client root certificate of virtual network gateway.
 */
export interface VpnClientRootCertificateResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the VPN client root certificate resource.
     */
    provisioningState: string;
    /**
     * The certificate public data.
     */
    publicCertData: string;
}

/**
 * VpnConnection Resource.
 */
export interface VpnConnectionResponse {
    /**
     * Expected bandwidth in MBPS.
     */
    connectionBandwidth?: number;
    /**
     * The connection status.
     */
    connectionStatus: string;
    /**
     * DPD timeout in seconds for vpn connection.
     */
    dpdTimeoutSeconds?: number;
    /**
     * Egress bytes transferred.
     */
    egressBytesTransferred: number;
    /**
     * EnableBgp flag.
     */
    enableBgp?: boolean;
    /**
     * Enable internet security.
     */
    enableInternetSecurity?: boolean;
    /**
     * EnableBgp flag.
     */
    enableRateLimiting?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Ingress bytes transferred.
     */
    ingressBytesTransferred: number;
    /**
     * The IPSec Policies to be considered by this connection.
     */
    ipsecPolicies?: outputs.network.v20200601.IpsecPolicyResponse[];
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the VPN connection resource.
     */
    provisioningState: string;
    /**
     * Id of the connected vpn site.
     */
    remoteVpnSite?: outputs.network.v20200601.SubResourceResponse;
    /**
     * The Routing Configuration indicating the associated and propagated route tables on this connection.
     */
    routingConfiguration?: outputs.network.v20200601.RoutingConfigurationResponse;
    /**
     * Routing weight for vpn connection.
     */
    routingWeight?: number;
    /**
     * SharedKey for the vpn connection.
     */
    sharedKey?: string;
    /**
     * Use local azure ip to initiate connection.
     */
    useLocalAzureIpAddress?: boolean;
    /**
     * Enable policy-based traffic selectors.
     */
    usePolicyBasedTrafficSelectors?: boolean;
    /**
     * Connection protocol used for this connection.
     */
    vpnConnectionProtocolType?: string;
    /**
     * List of all vpn site link connections to the gateway.
     */
    vpnLinkConnections?: outputs.network.v20200601.VpnSiteLinkConnectionResponse[];
}

/**
 * IP Configuration of a VPN Gateway Resource.
 */
export interface VpnGatewayIpConfigurationResponse {
    /**
     * The identifier of the IP configuration for a VPN Gateway.
     */
    id?: string;
    /**
     * The private IP address of this IP configuration.
     */
    privateIpAddress?: string;
    /**
     * The public IP address of this IP configuration.
     */
    publicIpAddress?: string;
}

/**
 * BGP settings details for a link.
 */
export interface VpnLinkBgpSettingsResponse {
    /**
     * The BGP speaker's ASN.
     */
    asn?: number;
    /**
     * The BGP peering address and BGP identifier of this BGP speaker.
     */
    bgpPeeringAddress?: string;
}

/**
 * List of properties of a link provider.
 */
export interface VpnLinkProviderPropertiesResponse {
    /**
     * Name of the link provider.
     */
    linkProviderName?: string;
    /**
     * Link speed.
     */
    linkSpeedInMbps?: number;
}

/**
 * Properties of the Radius client root certificate of VpnServerConfiguration.
 */
export interface VpnServerConfigRadiusClientRootCertificateResponse {
    /**
     * The certificate name.
     */
    name?: string;
    /**
     * The Radius client root certificate thumbprint.
     */
    thumbprint?: string;
}

/**
 * Properties of Radius Server root certificate of VpnServerConfiguration.
 */
export interface VpnServerConfigRadiusServerRootCertificateResponse {
    /**
     * The certificate name.
     */
    name?: string;
    /**
     * The certificate public data.
     */
    publicCertData?: string;
}

/**
 * Properties of the revoked VPN client certificate of VpnServerConfiguration.
 */
export interface VpnServerConfigVpnClientRevokedCertificateResponse {
    /**
     * The certificate name.
     */
    name?: string;
    /**
     * The revoked VPN client certificate thumbprint.
     */
    thumbprint?: string;
}

/**
 * Properties of VPN client root certificate of VpnServerConfiguration.
 */
export interface VpnServerConfigVpnClientRootCertificateResponse {
    /**
     * The certificate name.
     */
    name?: string;
    /**
     * The certificate public data.
     */
    publicCertData?: string;
}

/**
 * VpnSiteLinkConnection Resource.
 */
export interface VpnSiteLinkConnectionResponse {
    /**
     * Expected bandwidth in MBPS.
     */
    connectionBandwidth?: number;
    /**
     * The connection status.
     */
    connectionStatus: string;
    /**
     * Egress bytes transferred.
     */
    egressBytesTransferred: number;
    /**
     * EnableBgp flag.
     */
    enableBgp?: boolean;
    /**
     * EnableBgp flag.
     */
    enableRateLimiting?: boolean;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Ingress bytes transferred.
     */
    ingressBytesTransferred: number;
    /**
     * The IPSec Policies to be considered by this connection.
     */
    ipsecPolicies?: outputs.network.v20200601.IpsecPolicyResponse[];
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the VPN site link connection resource.
     */
    provisioningState: string;
    /**
     * Routing weight for vpn connection.
     */
    routingWeight?: number;
    /**
     * SharedKey for the vpn connection.
     */
    sharedKey?: string;
    /**
     * Resource type.
     */
    type: string;
    /**
     * Use local azure ip to initiate connection.
     */
    useLocalAzureIpAddress?: boolean;
    /**
     * Enable policy-based traffic selectors.
     */
    usePolicyBasedTrafficSelectors?: boolean;
    /**
     * Connection protocol used for this connection.
     */
    vpnConnectionProtocolType?: string;
    /**
     * Id of the connected vpn site link.
     */
    vpnSiteLink?: outputs.network.v20200601.SubResourceResponse;
}

/**
 * VpnSiteLink Resource.
 */
export interface VpnSiteLinkResponse {
    /**
     * The set of bgp properties.
     */
    bgpProperties?: outputs.network.v20200601.VpnLinkBgpSettingsResponse;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * FQDN of vpn-site-link.
     */
    fqdn?: string;
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * The ip-address for the vpn-site-link.
     */
    ipAddress?: string;
    /**
     * The link provider properties.
     */
    linkProperties?: outputs.network.v20200601.VpnLinkProviderPropertiesResponse;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * The provisioning state of the VPN site link resource.
     */
    provisioningState: string;
    /**
     * Resource type.
     */
    type: string;
}

/**
 * Defines contents of a web application rule.
 */
export interface WebApplicationFirewallCustomRuleResponse {
    /**
     * Type of Actions.
     */
    action: string;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * List of match conditions.
     */
    matchConditions: outputs.network.v20200601.MatchConditionResponse[];
    /**
     * The name of the resource that is unique within a policy. This name can be used to access the resource.
     */
    name?: string;
    /**
     * Priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
     */
    priority: number;
    /**
     * The rule type.
     */
    ruleType: string;
}

