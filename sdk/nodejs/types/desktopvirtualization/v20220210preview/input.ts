// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The preferred settings for updating the agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts.
 */
export interface AgentUpdatePropertiesArgs {
    /**
     * The time zone for updating the agent components. Valid time zones can be found here: https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. A time zone must be specified if useSessionHostLocalTime is false.
     */
    maintenanceWindowTimeZone?: pulumi.Input<string>;
    /**
     * The maintenance windows (day and time) for updating the agent components. At least 1 window must be specified. Optionally, a 2nd window can be specified.
     */
    maintenanceWindows?: pulumi.Input<pulumi.Input<inputs.desktopvirtualization.v20220210preview.MaintenanceWindowPropertiesArgs>[]>;
    /**
     * The preferred mechanism for updating the agent components. This is either Scheduled or Default.
     */
    type?: pulumi.Input<string | enums.desktopvirtualization.v20220210preview.SessionHostComponentUpdateType>;
    /**
     * Boolean indicating whether to update the agent components in the local time zone of each session host in the host pool. By default, this is false.
     */
    useSessionHostLocalTime?: pulumi.Input<boolean>;
}

/**
 * Maintenance window starting hour and day of week.
 */
export interface MaintenanceWindowPropertiesArgs {
    /**
     * The day of the week (Monday-Sunday).
     */
    dayOfWeek?: pulumi.Input<enums.desktopvirtualization.v20220210preview.DayOfWeek>;
    /**
     * The starting hour of the maintenance window (0-23). Note that maintenance windows are 2 hours long. This means that updates can be applied anytime from the specified start hour to 2 hours after.
     */
    hour?: pulumi.Input<number>;
}

/**
 * Properties for arm migration.
 */
export interface MigrationRequestPropertiesArgs {
    /**
     * The path to the legacy object to migrate.
     */
    migrationPath?: pulumi.Input<string>;
    /**
     * The type of operation for migration.
     */
    operation?: pulumi.Input<string | enums.desktopvirtualization.v20220210preview.Operation>;
}

/**
 * Schema for MSIX Package Application properties.
 */
export interface MsixPackageApplicationsArgs {
    /**
     * Package Application Id, found in appxmanifest.xml.
     */
    appId?: pulumi.Input<string>;
    /**
     * Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
     */
    appUserModelID?: pulumi.Input<string>;
    /**
     * Description of Package Application.
     */
    description?: pulumi.Input<string>;
    /**
     * User friendly name.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * User friendly name.
     */
    iconImageName?: pulumi.Input<string>;
    /**
     * the icon a 64 bit string as a byte array.
     */
    rawIcon?: pulumi.Input<string>;
    /**
     * the icon a 64 bit string as a byte array.
     */
    rawPng?: pulumi.Input<string>;
}

/**
 * Schema for MSIX Package Dependencies properties.
 */
export interface MsixPackageDependenciesArgs {
    /**
     * Name of package dependency.
     */
    dependencyName?: pulumi.Input<string>;
    /**
     * Dependency version required.
     */
    minVersion?: pulumi.Input<string>;
    /**
     * Name of dependency publisher.
     */
    publisher?: pulumi.Input<string>;
}

/**
 * A collection of information about the state of the connection between service consumer and provider.
 */
export interface PrivateLinkServiceConnectionStateArgs {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: pulumi.Input<string>;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: pulumi.Input<string | enums.desktopvirtualization.v20220210preview.PrivateEndpointServiceConnectionStatus>;
}

/**
 * Represents a RegistrationInfo definition.
 */
export interface RegistrationInfoArgs {
    /**
     * Expiration time of registration token.
     */
    expirationTime?: pulumi.Input<string>;
    /**
     * The type of resetting the token.
     */
    registrationTokenOperation?: pulumi.Input<string | enums.desktopvirtualization.v20220210preview.RegistrationTokenOperation>;
    /**
     * The registration token base64 encoded string.
     */
    token?: pulumi.Input<string>;
}

export interface ResourceModelWithAllowedPropertySetIdentityArgs {
    /**
     * The identity type.
     */
    type?: pulumi.Input<enums.desktopvirtualization.v20220210preview.ResourceIdentityType>;
}

export interface ResourceModelWithAllowedPropertySetPlanArgs {
    /**
     * A user defined name of the 3rd Party Artifact that is being procured.
     */
    name: pulumi.Input<string>;
    /**
     * The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. 
     */
    product: pulumi.Input<string>;
    /**
     * A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
     */
    promotionCode?: pulumi.Input<string>;
    /**
     * The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
     */
    publisher: pulumi.Input<string>;
    /**
     * The version of the desired product/artifact.
     */
    version?: pulumi.Input<string>;
}

export interface ResourceModelWithAllowedPropertySetSkuArgs {
    /**
     * If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
     */
    capacity?: pulumi.Input<number>;
    /**
     * If the service has different generations of hardware, for the same SKU, then that can be captured here.
     */
    family?: pulumi.Input<string>;
    /**
     * The name of the SKU. Ex - P3. It is typically a letter+number code
     */
    name: pulumi.Input<string>;
    /**
     * The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
     */
    size?: pulumi.Input<string>;
    /**
     * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
     */
    tier?: pulumi.Input<enums.desktopvirtualization.v20220210preview.SkuTier>;
}

/**
 * Scaling plan reference to hostpool.
 */
export interface ScalingHostPoolReferenceArgs {
    /**
     * Arm path of referenced hostpool.
     */
    hostPoolArmPath?: pulumi.Input<string>;
    /**
     * Is the scaling plan enabled for this hostpool.
     */
    scalingPlanEnabled?: pulumi.Input<boolean>;
}

/**
 * Scaling plan schedule.
 */
export interface ScalingScheduleArgs {
    /**
     * Set of days of the week on which this schedule is active.
     */
    daysOfWeek?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the scaling schedule.
     */
    name?: pulumi.Input<string>;
    /**
     * Load balancing algorithm for off-peak period.
     */
    offPeakLoadBalancingAlgorithm?: pulumi.Input<string | enums.desktopvirtualization.v20220210preview.SessionHostLoadBalancingAlgorithm>;
    /**
     * Starting time for off-peak period.
     */
    offPeakStartTime?: pulumi.Input<inputs.desktopvirtualization.v20220210preview.TimeArgs>;
    /**
     * Load balancing algorithm for peak period.
     */
    peakLoadBalancingAlgorithm?: pulumi.Input<string | enums.desktopvirtualization.v20220210preview.SessionHostLoadBalancingAlgorithm>;
    /**
     * Starting time for peak period.
     */
    peakStartTime?: pulumi.Input<inputs.desktopvirtualization.v20220210preview.TimeArgs>;
    /**
     * Capacity threshold for ramp down period.
     */
    rampDownCapacityThresholdPct?: pulumi.Input<number>;
    /**
     * Should users be logged off forcefully from hosts.
     */
    rampDownForceLogoffUsers?: pulumi.Input<boolean>;
    /**
     * Load balancing algorithm for ramp down period.
     */
    rampDownLoadBalancingAlgorithm?: pulumi.Input<string | enums.desktopvirtualization.v20220210preview.SessionHostLoadBalancingAlgorithm>;
    /**
     * Minimum host percentage for ramp down period.
     */
    rampDownMinimumHostsPct?: pulumi.Input<number>;
    /**
     * Notification message for users during ramp down period.
     */
    rampDownNotificationMessage?: pulumi.Input<string>;
    /**
     * Starting time for ramp down period.
     */
    rampDownStartTime?: pulumi.Input<inputs.desktopvirtualization.v20220210preview.TimeArgs>;
    /**
     * Specifies when to stop hosts during ramp down period.
     */
    rampDownStopHostsWhen?: pulumi.Input<string | enums.desktopvirtualization.v20220210preview.StopHostsWhen>;
    /**
     * Number of minutes to wait to stop hosts during ramp down period.
     */
    rampDownWaitTimeMinutes?: pulumi.Input<number>;
    /**
     * Capacity threshold for ramp up period.
     */
    rampUpCapacityThresholdPct?: pulumi.Input<number>;
    /**
     * Load balancing algorithm for ramp up period.
     */
    rampUpLoadBalancingAlgorithm?: pulumi.Input<string | enums.desktopvirtualization.v20220210preview.SessionHostLoadBalancingAlgorithm>;
    /**
     * Minimum host percentage for ramp up period.
     */
    rampUpMinimumHostsPct?: pulumi.Input<number>;
    /**
     * Starting time for ramp up period.
     */
    rampUpStartTime?: pulumi.Input<inputs.desktopvirtualization.v20220210preview.TimeArgs>;
}

/**
 * The time for a scaling action to occur.
 */
export interface TimeArgs {
    /**
     * The hour.
     */
    hour: pulumi.Input<number>;
    /**
     * The minute.
     */
    minute: pulumi.Input<number>;
}

