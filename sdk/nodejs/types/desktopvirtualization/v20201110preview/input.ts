// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Schema for MSIX Package Application properties.
 */
export interface MsixPackageApplicationsArgs {
    /**
     * Package Application Id, found in appxmanifest.xml.
     */
    appId?: pulumi.Input<string>;
    /**
     * Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
     */
    appUserModelID?: pulumi.Input<string>;
    /**
     * Description of Package Application.
     */
    description?: pulumi.Input<string>;
    /**
     * User friendly name.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * User friendly name.
     */
    iconImageName?: pulumi.Input<string>;
    /**
     * the icon a 64 bit string as a byte array.
     */
    rawIcon?: pulumi.Input<string>;
    /**
     * the icon a 64 bit string as a byte array.
     */
    rawPng?: pulumi.Input<string>;
}

/**
 * Schema for MSIX Package Dependencies properties.
 */
export interface MsixPackageDependenciesArgs {
    /**
     * Name of package dependency.
     */
    dependencyName?: pulumi.Input<string>;
    /**
     * Dependency version required.
     */
    minVersion?: pulumi.Input<string>;
    /**
     * Name of dependency publisher.
     */
    publisher?: pulumi.Input<string>;
}

/**
 * Represents a RegistrationInfo definition.
 */
export interface RegistrationInfoArgs {
    /**
     * Expiration time of registration token.
     */
    expirationTime?: pulumi.Input<string>;
    /**
     * The type of resetting the token.
     */
    registrationTokenOperation?: pulumi.Input<string | enums.desktopvirtualization.v20201110preview.RegistrationTokenOperation>;
    /**
     * The registration token base64 encoded string.
     */
    token?: pulumi.Input<string>;
}

/**
 * Scaling plan reference to hostpool.
 */
export interface ScalingHostPoolReferenceArgs {
    /**
     * Arm path of referenced hostpool.
     */
    hostPoolArmPath?: pulumi.Input<string>;
    /**
     * Is the scaling plan enabled for this hostpool.
     */
    scalingPlanEnabled?: pulumi.Input<boolean>;
}

/**
 * Scaling plan schedule.
 */
export interface ScalingScheduleArgs {
    /**
     * Set of days of the week on which this schedule is active.
     */
    daysOfWeek?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the scaling schedule.
     */
    name?: pulumi.Input<string>;
    /**
     * Load balancing algorithm for off-peak period.
     */
    offPeakLoadBalancingAlgorithm?: pulumi.Input<string | enums.desktopvirtualization.v20201110preview.SessionHostLoadBalancingAlgorithm>;
    /**
     * Starting time for off-peak period.
     */
    offPeakStartTime?: pulumi.Input<string>;
    /**
     * Load balancing algorithm for peak period.
     */
    peakLoadBalancingAlgorithm?: pulumi.Input<string | enums.desktopvirtualization.v20201110preview.SessionHostLoadBalancingAlgorithm>;
    /**
     * Starting time for peak period.
     */
    peakStartTime?: pulumi.Input<string>;
    /**
     * Capacity threshold for ramp down period.
     */
    rampDownCapacityThresholdPct?: pulumi.Input<number>;
    /**
     * Should users be logged off forcefully from hosts.
     */
    rampDownForceLogoffUsers?: pulumi.Input<boolean>;
    /**
     * Load balancing algorithm for ramp down period.
     */
    rampDownLoadBalancingAlgorithm?: pulumi.Input<string | enums.desktopvirtualization.v20201110preview.SessionHostLoadBalancingAlgorithm>;
    /**
     * Minimum host percentage for ramp down period.
     */
    rampDownMinimumHostsPct?: pulumi.Input<number>;
    /**
     * Notification message for users during ramp down period.
     */
    rampDownNotificationMessage?: pulumi.Input<string>;
    /**
     * Starting time for ramp down period.
     */
    rampDownStartTime?: pulumi.Input<string>;
    /**
     * Specifies when to stop hosts during ramp down period.
     */
    rampDownStopHostsWhen?: pulumi.Input<string | enums.desktopvirtualization.v20201110preview.StopHostsWhen>;
    /**
     * Number of minutes to wait to stop hosts during ramp down period.
     */
    rampDownWaitTimeMinutes?: pulumi.Input<number>;
    /**
     * Capacity threshold for ramp up period.
     */
    rampUpCapacityThresholdPct?: pulumi.Input<number>;
    /**
     * Load balancing algorithm for ramp up period.
     */
    rampUpLoadBalancingAlgorithm?: pulumi.Input<string | enums.desktopvirtualization.v20201110preview.SessionHostLoadBalancingAlgorithm>;
    /**
     * Minimum host percentage for ramp up period.
     */
    rampUpMinimumHostsPct?: pulumi.Input<number>;
    /**
     * Starting time for ramp up period.
     */
    rampUpStartTime?: pulumi.Input<string>;
}

