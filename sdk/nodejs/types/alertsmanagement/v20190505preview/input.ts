// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Action rule with action group configuration
 */
export interface ActionGroupArgs {
    /**
     * Action group to trigger if action rule matches
     */
    actionGroupId: pulumi.Input<string>;
    /**
     * conditions on which alerts will be filtered
     */
    conditions?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ConditionsArgs>;
    /**
     * Description of action rule
     */
    description?: pulumi.Input<string>;
    /**
     * scope on which action rule will apply
     */
    scope?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ScopeArgs>;
    /**
     * Indicates if the given action rule is enabled or disabled
     */
    status?: pulumi.Input<string | enums.alertsmanagement.v20190505preview.ActionRuleStatus>;
    /**
     * Indicates type of action rule
     * Expected value is 'ActionGroup'.
     */
    type: pulumi.Input<"ActionGroup">;
}

/**
 * condition to trigger an action rule
 */
export interface ConditionArgs {
    /**
     * operator for a given condition
     */
    operator?: pulumi.Input<string | enums.alertsmanagement.v20190505preview.Operator>;
    /**
     * list of values to match for a given condition.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
 */
export interface ConditionsArgs {
    /**
     * filter alerts by alert context (payload)
     */
    alertContext?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ConditionArgs>;
    /**
     * filter alerts by alert rule id
     */
    alertRuleId?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ConditionArgs>;
    /**
     * filter alerts by alert rule name
     */
    alertRuleName?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ConditionArgs>;
    /**
     * filter alerts by alert rule description
     */
    description?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ConditionArgs>;
    /**
     * filter alerts by monitor condition
     */
    monitorCondition?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ConditionArgs>;
    /**
     * filter alerts by monitor service
     */
    monitorService?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ConditionArgs>;
    /**
     * filter alerts by severity
     */
    severity?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ConditionArgs>;
    /**
     * filter alerts by target resource type
     */
    targetResourceType?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ConditionArgs>;
}

/**
 * Action rule with diagnostics configuration
 */
export interface DiagnosticsArgs {
    /**
     * conditions on which alerts will be filtered
     */
    conditions?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ConditionsArgs>;
    /**
     * Description of action rule
     */
    description?: pulumi.Input<string>;
    /**
     * scope on which action rule will apply
     */
    scope?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ScopeArgs>;
    /**
     * Indicates if the given action rule is enabled or disabled
     */
    status?: pulumi.Input<string | enums.alertsmanagement.v20190505preview.ActionRuleStatus>;
    /**
     * Indicates type of action rule
     * Expected value is 'Diagnostics'.
     */
    type: pulumi.Input<"Diagnostics">;
}

/**
 * Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
 */
export interface ScopeArgs {
    /**
     * type of target scope
     */
    scopeType?: pulumi.Input<string | enums.alertsmanagement.v20190505preview.ScopeType>;
    /**
     * list of ARM IDs of the given scope type which will be the target of the given action rule.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Action rule with suppression configuration
 */
export interface SuppressionArgs {
    /**
     * conditions on which alerts will be filtered
     */
    conditions?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ConditionsArgs>;
    /**
     * Description of action rule
     */
    description?: pulumi.Input<string>;
    /**
     * scope on which action rule will apply
     */
    scope?: pulumi.Input<inputs.alertsmanagement.v20190505preview.ScopeArgs>;
    /**
     * Indicates if the given action rule is enabled or disabled
     */
    status?: pulumi.Input<string | enums.alertsmanagement.v20190505preview.ActionRuleStatus>;
    /**
     * suppression configuration for the action rule
     */
    suppressionConfig: pulumi.Input<inputs.alertsmanagement.v20190505preview.SuppressionConfigArgs>;
    /**
     * Indicates type of action rule
     * Expected value is 'Suppression'.
     */
    type: pulumi.Input<"Suppression">;
}

/**
 * Suppression logic for a given action rule
 */
export interface SuppressionConfigArgs {
    /**
     * Specifies when the suppression should be applied
     */
    recurrenceType: pulumi.Input<string | enums.alertsmanagement.v20190505preview.SuppressionType>;
    /**
     * suppression schedule configuration
     */
    schedule?: pulumi.Input<inputs.alertsmanagement.v20190505preview.SuppressionScheduleArgs>;
}

/**
 * Schedule for a given suppression configuration.
 */
export interface SuppressionScheduleArgs {
    /**
     * End date for suppression
     */
    endDate?: pulumi.Input<string>;
    /**
     * End date for suppression
     */
    endTime?: pulumi.Input<string>;
    /**
     * Specifies the values for recurrence pattern
     */
    recurrenceValues?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Start date for suppression
     */
    startDate?: pulumi.Input<string>;
    /**
     * Start time for suppression
     */
    startTime?: pulumi.Input<string>;
}

