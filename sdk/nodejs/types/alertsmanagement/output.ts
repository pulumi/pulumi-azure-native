// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20181102privatepreview from "./v20181102privatepreview/output";
export * as v20190301 from "./v20190301/output";
export * as v20190505preview from "./v20190505preview/output";
export * as v20190601 from "./v20190601/output";
export * as v20210401 from "./v20210401/output";
export * as v20210722preview from "./v20210722preview/output";
export * as v20210808 from "./v20210808/output";
export * as v20210808preview from "./v20210808preview/output";
/**
 * Action rule with action group configuration
 */
export interface ActionGroupResponse {
    /**
     * Action group to trigger if action rule matches
     */
    actionGroupId: string;
    /**
     * conditions on which alerts will be filtered
     */
    conditions?: outputs.alertsmanagement.ConditionsResponse;
    /**
     * Creation time of action rule. Date-Time in ISO-8601 format.
     */
    createdAt: string;
    /**
     * Created by user name.
     */
    createdBy: string;
    /**
     * Description of action rule
     */
    description?: string;
    /**
     * Last updated time of action rule. Date-Time in ISO-8601 format.
     */
    lastModifiedAt: string;
    /**
     * Last modified by user name.
     */
    lastModifiedBy: string;
    /**
     * scope on which action rule will apply
     */
    scope?: outputs.alertsmanagement.ScopeResponse;
    /**
     * Indicates if the given action rule is enabled or disabled
     */
    status?: string;
    /**
     * Indicates type of action rule
     * Expected value is 'ActionGroup'.
     */
    type: "ActionGroup";
}

/**
 * The Action Groups information, used by the alert rule.
 */
export interface ActionGroupsInformationResponse {
    /**
     * An optional custom email subject to use in email notifications.
     */
    customEmailSubject?: string;
    /**
     * An optional custom web-hook payload to use in web-hook notifications.
     */
    customWebhookPayload?: string;
    /**
     * The Action Group resource IDs.
     */
    groupIds: string[];
}

/**
 * condition to trigger an action rule
 */
export interface ConditionResponse {
    /**
     * operator for a given condition
     */
    operator?: string;
    /**
     * list of values to match for a given condition.
     */
    values?: string[];
}

/**
 * Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
 */
export interface ConditionsResponse {
    /**
     * filter alerts by alert context (payload)
     */
    alertContext?: outputs.alertsmanagement.ConditionResponse;
    /**
     * filter alerts by alert rule id
     */
    alertRuleId?: outputs.alertsmanagement.ConditionResponse;
    /**
     * filter alerts by alert rule name
     */
    alertRuleName?: outputs.alertsmanagement.ConditionResponse;
    /**
     * filter alerts by alert rule description
     */
    description?: outputs.alertsmanagement.ConditionResponse;
    /**
     * filter alerts by monitor condition
     */
    monitorCondition?: outputs.alertsmanagement.ConditionResponse;
    /**
     * filter alerts by monitor service
     */
    monitorService?: outputs.alertsmanagement.ConditionResponse;
    /**
     * filter alerts by severity
     */
    severity?: outputs.alertsmanagement.ConditionResponse;
    /**
     * filter alerts by target resource type
     */
    targetResourceType?: outputs.alertsmanagement.ConditionResponse;
}

/**
 * The detector information. By default this is not populated, unless it's specified in expandDetector
 */
export interface DetectorResponse {
    /**
     * The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
     */
    description?: string;
    /**
     * The detector id.
     */
    id: string;
    /**
     * The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
     */
    imagePaths?: string[];
    /**
     * The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
     */
    name?: string;
    /**
     * The detector's parameters.'
     */
    parameters?: {[key: string]: any};
    /**
     * The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
     */
    supportedResourceTypes?: string[];
}

/**
 * Action rule with diagnostics configuration
 */
export interface DiagnosticsResponse {
    /**
     * conditions on which alerts will be filtered
     */
    conditions?: outputs.alertsmanagement.ConditionsResponse;
    /**
     * Creation time of action rule. Date-Time in ISO-8601 format.
     */
    createdAt: string;
    /**
     * Created by user name.
     */
    createdBy: string;
    /**
     * Description of action rule
     */
    description?: string;
    /**
     * Last updated time of action rule. Date-Time in ISO-8601 format.
     */
    lastModifiedAt: string;
    /**
     * Last modified by user name.
     */
    lastModifiedBy: string;
    /**
     * scope on which action rule will apply
     */
    scope?: outputs.alertsmanagement.ScopeResponse;
    /**
     * Indicates if the given action rule is enabled or disabled
     */
    status?: string;
    /**
     * Indicates type of action rule
     * Expected value is 'Diagnostics'.
     */
    type: "Diagnostics";
}

/**
 * Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
 */
export interface ScopeResponse {
    /**
     * type of target scope
     */
    scopeType?: string;
    /**
     * list of ARM IDs of the given scope type which will be the target of the given action rule.
     */
    values?: string[];
}

/**
 * Suppression logic for a given action rule
 */
export interface SuppressionConfigResponse {
    /**
     * Specifies when the suppression should be applied
     */
    recurrenceType: string;
    /**
     * suppression schedule configuration
     */
    schedule?: outputs.alertsmanagement.SuppressionScheduleResponse;
}

/**
 * Action rule with suppression configuration
 */
export interface SuppressionResponse {
    /**
     * conditions on which alerts will be filtered
     */
    conditions?: outputs.alertsmanagement.ConditionsResponse;
    /**
     * Creation time of action rule. Date-Time in ISO-8601 format.
     */
    createdAt: string;
    /**
     * Created by user name.
     */
    createdBy: string;
    /**
     * Description of action rule
     */
    description?: string;
    /**
     * Last updated time of action rule. Date-Time in ISO-8601 format.
     */
    lastModifiedAt: string;
    /**
     * Last modified by user name.
     */
    lastModifiedBy: string;
    /**
     * scope on which action rule will apply
     */
    scope?: outputs.alertsmanagement.ScopeResponse;
    /**
     * Indicates if the given action rule is enabled or disabled
     */
    status?: string;
    /**
     * suppression configuration for the action rule
     */
    suppressionConfig: outputs.alertsmanagement.SuppressionConfigResponse;
    /**
     * Indicates type of action rule
     * Expected value is 'Suppression'.
     */
    type: "Suppression";
}

/**
 * Schedule for a given suppression configuration.
 */
export interface SuppressionScheduleResponse {
    /**
     * End date for suppression
     */
    endDate?: string;
    /**
     * End date for suppression
     */
    endTime?: string;
    /**
     * Specifies the values for recurrence pattern
     */
    recurrenceValues?: number[];
    /**
     * Start date for suppression
     */
    startDate?: string;
    /**
     * Start time for suppression
     */
    startTime?: string;
}

/**
 * Optional throttling information for the alert rule.
 */
export interface ThrottlingInformationResponse {
    /**
     * The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
     */
    duration?: string;
}

