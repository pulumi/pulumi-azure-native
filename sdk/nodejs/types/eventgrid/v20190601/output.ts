// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * BoolEquals Advanced Filter.
 */
export interface BoolEqualsAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'BoolEquals'.
     */
    operatorType: "BoolEquals";
    /**
     * The boolean filter value.
     */
    value?: boolean;
}

/**
 * Information about the event hub destination for an event subscription
 */
export interface EventHubEventSubscriptionDestinationResponse {
    /**
     * Type of the endpoint for the event subscription destination
     * Expected value is 'EventHub'.
     */
    endpointType: "EventHub";
    /**
     * The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
     */
    resourceId?: string;
}

/**
 * Filter for the Event Subscription.
 */
export interface EventSubscriptionFilterResponse {
    /**
     * An array of advanced filters that are used for filtering event subscriptions.
     */
    advancedFilters?: (outputs.eventgrid.v20190601.BoolEqualsAdvancedFilterResponse | outputs.eventgrid.v20190601.NumberGreaterThanAdvancedFilterResponse | outputs.eventgrid.v20190601.NumberGreaterThanOrEqualsAdvancedFilterResponse | outputs.eventgrid.v20190601.NumberInAdvancedFilterResponse | outputs.eventgrid.v20190601.NumberLessThanAdvancedFilterResponse | outputs.eventgrid.v20190601.NumberLessThanOrEqualsAdvancedFilterResponse | outputs.eventgrid.v20190601.NumberNotInAdvancedFilterResponse | outputs.eventgrid.v20190601.StringBeginsWithAdvancedFilterResponse | outputs.eventgrid.v20190601.StringContainsAdvancedFilterResponse | outputs.eventgrid.v20190601.StringEndsWithAdvancedFilterResponse | outputs.eventgrid.v20190601.StringInAdvancedFilterResponse | outputs.eventgrid.v20190601.StringNotInAdvancedFilterResponse)[];
    /**
     * A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
     */
    includedEventTypes?: string[];
    /**
     * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter 
     * should be compared in a case sensitive manner.
     */
    isSubjectCaseSensitive?: boolean;
    /**
     * An optional string to filter events for an event subscription based on a resource path prefix.
     * The format of this depends on the publisher of the events. 
     * Wildcard characters are not supported in this path.
     */
    subjectBeginsWith?: string;
    /**
     * An optional string to filter events for an event subscription based on a resource path suffix.
     * Wildcard characters are not supported in this path.
     */
    subjectEndsWith?: string;
}
/**
 * eventSubscriptionFilterResponseProvideDefaults sets the appropriate defaults for EventSubscriptionFilterResponse
 */
export function eventSubscriptionFilterResponseProvideDefaults(val: EventSubscriptionFilterResponse): EventSubscriptionFilterResponse {
    return {
        ...val,
        isSubjectCaseSensitive: (val.isSubjectCaseSensitive) ?? false,
    };
}

/**
 * Information about the HybridConnection destination for an event subscription.
 */
export interface HybridConnectionEventSubscriptionDestinationResponse {
    /**
     * Type of the endpoint for the event subscription destination
     * Expected value is 'HybridConnection'.
     */
    endpointType: "HybridConnection";
    /**
     * The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
     */
    resourceId?: string;
}

/**
 * NumberGreaterThan Advanced Filter.
 */
export interface NumberGreaterThanAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberGreaterThan'.
     */
    operatorType: "NumberGreaterThan";
    /**
     * The filter value.
     */
    value?: number;
}

/**
 * NumberGreaterThanOrEquals Advanced Filter.
 */
export interface NumberGreaterThanOrEqualsAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberGreaterThanOrEquals'.
     */
    operatorType: "NumberGreaterThanOrEquals";
    /**
     * The filter value.
     */
    value?: number;
}

/**
 * NumberIn Advanced Filter.
 */
export interface NumberInAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberIn'.
     */
    operatorType: "NumberIn";
    /**
     * The set of filter values.
     */
    values?: number[];
}

/**
 * NumberLessThan Advanced Filter.
 */
export interface NumberLessThanAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberLessThan'.
     */
    operatorType: "NumberLessThan";
    /**
     * The filter value.
     */
    value?: number;
}

/**
 * NumberLessThanOrEquals Advanced Filter.
 */
export interface NumberLessThanOrEqualsAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberLessThanOrEquals'.
     */
    operatorType: "NumberLessThanOrEquals";
    /**
     * The filter value.
     */
    value?: number;
}

/**
 * NumberNotIn Advanced Filter.
 */
export interface NumberNotInAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberNotIn'.
     */
    operatorType: "NumberNotIn";
    /**
     * The set of filter values.
     */
    values?: number[];
}

/**
 * Information about the retry policy for an event subscription.
 */
export interface RetryPolicyResponse {
    /**
     * Time To Live (in minutes) for events.
     */
    eventTimeToLiveInMinutes?: number;
    /**
     * Maximum number of delivery retry attempts for events.
     */
    maxDeliveryAttempts?: number;
}

/**
 * Information about the service bus destination for an event subscription
 */
export interface ServiceBusQueueEventSubscriptionDestinationResponse {
    /**
     * Type of the endpoint for the event subscription destination
     * Expected value is 'ServiceBusQueue'.
     */
    endpointType: "ServiceBusQueue";
    /**
     * The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
     */
    resourceId?: string;
}

/**
 * Information about the storage blob based dead letter destination.
 */
export interface StorageBlobDeadLetterDestinationResponse {
    /**
     * The name of the Storage blob container that is the destination of the deadletter events
     */
    blobContainerName?: string;
    /**
     * Type of the endpoint for the dead letter destination
     * Expected value is 'StorageBlob'.
     */
    endpointType: "StorageBlob";
    /**
     * The Azure Resource ID of the storage account that is the destination of the deadletter events
     */
    resourceId?: string;
}

/**
 * Information about the storage queue destination for an event subscription.
 */
export interface StorageQueueEventSubscriptionDestinationResponse {
    /**
     * Type of the endpoint for the event subscription destination
     * Expected value is 'StorageQueue'.
     */
    endpointType: "StorageQueue";
    /**
     * The name of the Storage queue under a storage account that is the destination of an event subscription.
     */
    queueName?: string;
    /**
     * The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
     */
    resourceId?: string;
}

/**
 * StringBeginsWith Advanced Filter.
 */
export interface StringBeginsWithAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringBeginsWith'.
     */
    operatorType: "StringBeginsWith";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * StringContains Advanced Filter.
 */
export interface StringContainsAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringContains'.
     */
    operatorType: "StringContains";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * StringEndsWith Advanced Filter.
 */
export interface StringEndsWithAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringEndsWith'.
     */
    operatorType: "StringEndsWith";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * StringIn Advanced Filter.
 */
export interface StringInAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringIn'.
     */
    operatorType: "StringIn";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * StringNotIn Advanced Filter.
 */
export interface StringNotInAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringNotIn'.
     */
    operatorType: "StringNotIn";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * Information about the webhook destination for an event subscription
 */
export interface WebHookEventSubscriptionDestinationResponse {
    /**
     * The base URL that represents the endpoint of the destination of an event subscription.
     */
    endpointBaseUrl: string;
    /**
     * Type of the endpoint for the event subscription destination
     * Expected value is 'WebHook'.
     */
    endpointType: "WebHook";
    /**
     * The URL that represents the endpoint of the destination of an event subscription.
     */
    endpointUrl?: string;
}

