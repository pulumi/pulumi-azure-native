// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Information about the azure function destination for an event subscription.
 */
export interface AzureFunctionEventSubscriptionDestinationResponse {
    /**
     * Delivery attribute details.
     */
    deliveryAttributeMappings?: (outputs.eventgrid.v20211201.DynamicDeliveryAttributeMappingResponse | outputs.eventgrid.v20211201.StaticDeliveryAttributeMappingResponse)[];
    /**
     * Type of the endpoint for the event subscription destination.
     * Expected value is 'AzureFunction'.
     */
    endpointType: "AzureFunction";
    /**
     * Maximum number of events per batch.
     */
    maxEventsPerBatch?: number;
    /**
     * Preferred batch size in Kilobytes.
     */
    preferredBatchSizeInKilobytes?: number;
    /**
     * The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
     */
    resourceId?: string;
}
/**
 * azureFunctionEventSubscriptionDestinationResponseProvideDefaults sets the appropriate defaults for AzureFunctionEventSubscriptionDestinationResponse
 */
export function azureFunctionEventSubscriptionDestinationResponseProvideDefaults(val: AzureFunctionEventSubscriptionDestinationResponse): AzureFunctionEventSubscriptionDestinationResponse {
    return {
        ...val,
        maxEventsPerBatch: (val.maxEventsPerBatch) ?? 1,
        preferredBatchSizeInKilobytes: (val.preferredBatchSizeInKilobytes) ?? 64,
    };
}

/**
 * BoolEquals Advanced Filter.
 */
export interface BoolEqualsAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'BoolEquals'.
     */
    operatorType: "BoolEquals";
    /**
     * The boolean filter value.
     */
    value?: boolean;
}

/**
 * ConnectionState information.
 */
export interface ConnectionStateResponse {
    /**
     * Actions required (if any).
     */
    actionsRequired?: string;
    /**
     * Description of the connection state.
     */
    description?: string;
    /**
     * Status of the connection.
     */
    status?: string;
}

/**
 * Information about the deadletter destination with resource identity.
 */
export interface DeadLetterWithResourceIdentityResponse {
    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    deadLetterDestination?: outputs.eventgrid.v20211201.StorageBlobDeadLetterDestinationResponse;
    /**
     * The identity to use when dead-lettering events.
     */
    identity?: outputs.eventgrid.v20211201.EventSubscriptionIdentityResponse;
}

/**
 * Information about the delivery for an event subscription with resource identity.
 */
export interface DeliveryWithResourceIdentityResponse {
    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    destination?: outputs.eventgrid.v20211201.AzureFunctionEventSubscriptionDestinationResponse | outputs.eventgrid.v20211201.EventHubEventSubscriptionDestinationResponse | outputs.eventgrid.v20211201.HybridConnectionEventSubscriptionDestinationResponse | outputs.eventgrid.v20211201.ServiceBusQueueEventSubscriptionDestinationResponse | outputs.eventgrid.v20211201.ServiceBusTopicEventSubscriptionDestinationResponse | outputs.eventgrid.v20211201.StorageQueueEventSubscriptionDestinationResponse | outputs.eventgrid.v20211201.WebHookEventSubscriptionDestinationResponse;
    /**
     * The identity to use when delivering events.
     */
    identity?: outputs.eventgrid.v20211201.EventSubscriptionIdentityResponse;
}

/**
 * Dynamic delivery attribute mapping details.
 */
export interface DynamicDeliveryAttributeMappingResponse {
    /**
     * Name of the delivery attribute or header.
     */
    name?: string;
    /**
     * JSON path in the event which contains attribute value.
     */
    sourceField?: string;
    /**
     * Type of the delivery attribute or header name.
     * Expected value is 'Dynamic'.
     */
    type: "Dynamic";
}

/**
 * Information about the event hub destination for an event subscription.
 */
export interface EventHubEventSubscriptionDestinationResponse {
    /**
     * Delivery attribute details.
     */
    deliveryAttributeMappings?: (outputs.eventgrid.v20211201.DynamicDeliveryAttributeMappingResponse | outputs.eventgrid.v20211201.StaticDeliveryAttributeMappingResponse)[];
    /**
     * Type of the endpoint for the event subscription destination.
     * Expected value is 'EventHub'.
     */
    endpointType: "EventHub";
    /**
     * The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
     */
    resourceId?: string;
}

/**
 * Filter for the Event Subscription.
 */
export interface EventSubscriptionFilterResponse {
    /**
     * An array of advanced filters that are used for filtering event subscriptions.
     */
    advancedFilters?: (outputs.eventgrid.v20211201.BoolEqualsAdvancedFilterResponse | outputs.eventgrid.v20211201.IsNotNullAdvancedFilterResponse | outputs.eventgrid.v20211201.IsNullOrUndefinedAdvancedFilterResponse | outputs.eventgrid.v20211201.NumberGreaterThanAdvancedFilterResponse | outputs.eventgrid.v20211201.NumberGreaterThanOrEqualsAdvancedFilterResponse | outputs.eventgrid.v20211201.NumberInAdvancedFilterResponse | outputs.eventgrid.v20211201.NumberInRangeAdvancedFilterResponse | outputs.eventgrid.v20211201.NumberLessThanAdvancedFilterResponse | outputs.eventgrid.v20211201.NumberLessThanOrEqualsAdvancedFilterResponse | outputs.eventgrid.v20211201.NumberNotInAdvancedFilterResponse | outputs.eventgrid.v20211201.NumberNotInRangeAdvancedFilterResponse | outputs.eventgrid.v20211201.StringBeginsWithAdvancedFilterResponse | outputs.eventgrid.v20211201.StringContainsAdvancedFilterResponse | outputs.eventgrid.v20211201.StringEndsWithAdvancedFilterResponse | outputs.eventgrid.v20211201.StringInAdvancedFilterResponse | outputs.eventgrid.v20211201.StringNotBeginsWithAdvancedFilterResponse | outputs.eventgrid.v20211201.StringNotContainsAdvancedFilterResponse | outputs.eventgrid.v20211201.StringNotEndsWithAdvancedFilterResponse | outputs.eventgrid.v20211201.StringNotInAdvancedFilterResponse)[];
    /**
     * Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
     */
    enableAdvancedFilteringOnArrays?: boolean;
    /**
     * A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
     */
    includedEventTypes?: string[];
    /**
     * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
     * should be compared in a case sensitive manner.
     */
    isSubjectCaseSensitive?: boolean;
    /**
     * An optional string to filter events for an event subscription based on a resource path prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     */
    subjectBeginsWith?: string;
    /**
     * An optional string to filter events for an event subscription based on a resource path suffix.
     * Wildcard characters are not supported in this path.
     */
    subjectEndsWith?: string;
}
/**
 * eventSubscriptionFilterResponseProvideDefaults sets the appropriate defaults for EventSubscriptionFilterResponse
 */
export function eventSubscriptionFilterResponseProvideDefaults(val: EventSubscriptionFilterResponse): EventSubscriptionFilterResponse {
    return {
        ...val,
        isSubjectCaseSensitive: (val.isSubjectCaseSensitive) ?? false,
    };
}

/**
 * The identity information with the event subscription.
 */
export interface EventSubscriptionIdentityResponse {
    /**
     * The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
     */
    type?: string;
    /**
     * The user identity associated with the resource.
     */
    userAssignedIdentity?: string;
}

/**
 * Information about the HybridConnection destination for an event subscription.
 */
export interface HybridConnectionEventSubscriptionDestinationResponse {
    /**
     * Delivery attribute details.
     */
    deliveryAttributeMappings?: (outputs.eventgrid.v20211201.DynamicDeliveryAttributeMappingResponse | outputs.eventgrid.v20211201.StaticDeliveryAttributeMappingResponse)[];
    /**
     * Type of the endpoint for the event subscription destination.
     * Expected value is 'HybridConnection'.
     */
    endpointType: "HybridConnection";
    /**
     * The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
     */
    resourceId?: string;
}

/**
 * The identity information for the resource.
 */
export interface IdentityInfoResponse {
    /**
     * The principal ID of resource identity.
     */
    principalId?: string;
    /**
     * The tenant ID of resource.
     */
    tenantId?: string;
    /**
     * The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
     */
    type?: string;
    /**
     * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     * This property is currently not used and reserved for future usage.
     */
    userAssignedIdentities?: {[key: string]: outputs.eventgrid.v20211201.UserIdentityPropertiesResponse};
}

export interface InboundIpRuleResponse {
    /**
     * Action to perform based on the match or no match of the IpMask.
     */
    action?: string;
    /**
     * IP Address in CIDR notation e.g., 10.0.0.0/8.
     */
    ipMask?: string;
}

/**
 * IsNotNull Advanced Filter.
 */
export interface IsNotNullAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'IsNotNull'.
     */
    operatorType: "IsNotNull";
}

/**
 * IsNullOrUndefined Advanced Filter.
 */
export interface IsNullOrUndefinedAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'IsNullOrUndefined'.
     */
    operatorType: "IsNullOrUndefined";
}

/**
 * This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
 */
export interface JsonFieldResponse {
    /**
     * Name of a field in the input event schema that's to be used as the source of a mapping.
     */
    sourceField?: string;
}

/**
 * This is used to express the source of an input schema mapping for a single target field
 * in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
 * 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
 * along with a default value to be used, and at least one of these two properties should be provided.
 */
export interface JsonFieldWithDefaultResponse {
    /**
     * The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
     */
    defaultValue?: string;
    /**
     * Name of a field in the input event schema that's to be used as the source of a mapping.
     */
    sourceField?: string;
}

/**
 * This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
 */
export interface JsonInputSchemaMappingResponse {
    /**
     * The mapping information for the DataVersion property of the Event Grid Event.
     */
    dataVersion?: outputs.eventgrid.v20211201.JsonFieldWithDefaultResponse;
    /**
     * The mapping information for the EventTime property of the Event Grid Event.
     */
    eventTime?: outputs.eventgrid.v20211201.JsonFieldResponse;
    /**
     * The mapping information for the EventType property of the Event Grid Event.
     */
    eventType?: outputs.eventgrid.v20211201.JsonFieldWithDefaultResponse;
    /**
     * The mapping information for the Id property of the Event Grid Event.
     */
    id?: outputs.eventgrid.v20211201.JsonFieldResponse;
    /**
     * Type of the custom mapping
     * Expected value is 'Json'.
     */
    inputSchemaMappingType: "Json";
    /**
     * The mapping information for the Subject property of the Event Grid Event.
     */
    subject?: outputs.eventgrid.v20211201.JsonFieldWithDefaultResponse;
    /**
     * The mapping information for the Topic property of the Event Grid Event.
     */
    topic?: outputs.eventgrid.v20211201.JsonFieldResponse;
}

/**
 * NumberGreaterThan Advanced Filter.
 */
export interface NumberGreaterThanAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberGreaterThan'.
     */
    operatorType: "NumberGreaterThan";
    /**
     * The filter value.
     */
    value?: number;
}

/**
 * NumberGreaterThanOrEquals Advanced Filter.
 */
export interface NumberGreaterThanOrEqualsAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberGreaterThanOrEquals'.
     */
    operatorType: "NumberGreaterThanOrEquals";
    /**
     * The filter value.
     */
    value?: number;
}

/**
 * NumberIn Advanced Filter.
 */
export interface NumberInAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberIn'.
     */
    operatorType: "NumberIn";
    /**
     * The set of filter values.
     */
    values?: number[];
}

/**
 * NumberInRange Advanced Filter.
 */
export interface NumberInRangeAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberInRange'.
     */
    operatorType: "NumberInRange";
    /**
     * The set of filter values.
     */
    values?: number[][];
}

/**
 * NumberLessThan Advanced Filter.
 */
export interface NumberLessThanAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberLessThan'.
     */
    operatorType: "NumberLessThan";
    /**
     * The filter value.
     */
    value?: number;
}

/**
 * NumberLessThanOrEquals Advanced Filter.
 */
export interface NumberLessThanOrEqualsAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberLessThanOrEquals'.
     */
    operatorType: "NumberLessThanOrEquals";
    /**
     * The filter value.
     */
    value?: number;
}

/**
 * NumberNotIn Advanced Filter.
 */
export interface NumberNotInAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberNotIn'.
     */
    operatorType: "NumberNotIn";
    /**
     * The set of filter values.
     */
    values?: number[];
}

/**
 * NumberNotInRange Advanced Filter.
 */
export interface NumberNotInRangeAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'NumberNotInRange'.
     */
    operatorType: "NumberNotInRange";
    /**
     * The set of filter values.
     */
    values?: number[][];
}

export interface PrivateEndpointConnectionResponse {
    /**
     * GroupIds from the private link service resource.
     */
    groupIds?: string[];
    /**
     * Fully qualified identifier of the resource.
     */
    id: string;
    /**
     * Name of the resource.
     */
    name: string;
    /**
     * The Private Endpoint resource for this Connection.
     */
    privateEndpoint?: outputs.eventgrid.v20211201.PrivateEndpointResponse;
    /**
     * Details about the state of the connection.
     */
    privateLinkServiceConnectionState?: outputs.eventgrid.v20211201.ConnectionStateResponse;
    /**
     * Provisioning state of the Private Endpoint Connection.
     */
    provisioningState?: string;
    /**
     * Type of the resource.
     */
    type: string;
}

/**
 * PrivateEndpoint information.
 */
export interface PrivateEndpointResponse {
    /**
     * The ARM identifier for Private Endpoint.
     */
    id?: string;
}

/**
 * Information about the retry policy for an event subscription.
 */
export interface RetryPolicyResponse {
    /**
     * Time To Live (in minutes) for events.
     */
    eventTimeToLiveInMinutes?: number;
    /**
     * Maximum number of delivery retry attempts for events.
     */
    maxDeliveryAttempts?: number;
}
/**
 * retryPolicyResponseProvideDefaults sets the appropriate defaults for RetryPolicyResponse
 */
export function retryPolicyResponseProvideDefaults(val: RetryPolicyResponse): RetryPolicyResponse {
    return {
        ...val,
        eventTimeToLiveInMinutes: (val.eventTimeToLiveInMinutes) ?? 1440,
        maxDeliveryAttempts: (val.maxDeliveryAttempts) ?? 30,
    };
}

/**
 * Information about the service bus destination for an event subscription.
 */
export interface ServiceBusQueueEventSubscriptionDestinationResponse {
    /**
     * Delivery attribute details.
     */
    deliveryAttributeMappings?: (outputs.eventgrid.v20211201.DynamicDeliveryAttributeMappingResponse | outputs.eventgrid.v20211201.StaticDeliveryAttributeMappingResponse)[];
    /**
     * Type of the endpoint for the event subscription destination.
     * Expected value is 'ServiceBusQueue'.
     */
    endpointType: "ServiceBusQueue";
    /**
     * The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
     */
    resourceId?: string;
}

/**
 * Information about the service bus topic destination for an event subscription.
 */
export interface ServiceBusTopicEventSubscriptionDestinationResponse {
    /**
     * Delivery attribute details.
     */
    deliveryAttributeMappings?: (outputs.eventgrid.v20211201.DynamicDeliveryAttributeMappingResponse | outputs.eventgrid.v20211201.StaticDeliveryAttributeMappingResponse)[];
    /**
     * Type of the endpoint for the event subscription destination.
     * Expected value is 'ServiceBusTopic'.
     */
    endpointType: "ServiceBusTopic";
    /**
     * The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
     */
    resourceId?: string;
}

/**
 * Static delivery attribute mapping details.
 */
export interface StaticDeliveryAttributeMappingResponse {
    /**
     * Boolean flag to tell if the attribute contains sensitive information .
     */
    isSecret?: boolean;
    /**
     * Name of the delivery attribute or header.
     */
    name?: string;
    /**
     * Type of the delivery attribute or header name.
     * Expected value is 'Static'.
     */
    type: "Static";
    /**
     * Value of the delivery attribute.
     */
    value?: string;
}
/**
 * staticDeliveryAttributeMappingResponseProvideDefaults sets the appropriate defaults for StaticDeliveryAttributeMappingResponse
 */
export function staticDeliveryAttributeMappingResponseProvideDefaults(val: StaticDeliveryAttributeMappingResponse): StaticDeliveryAttributeMappingResponse {
    return {
        ...val,
        isSecret: (val.isSecret) ?? false,
    };
}

/**
 * Information about the storage blob based dead letter destination.
 */
export interface StorageBlobDeadLetterDestinationResponse {
    /**
     * The name of the Storage blob container that is the destination of the deadletter events
     */
    blobContainerName?: string;
    /**
     * Type of the endpoint for the dead letter destination
     * Expected value is 'StorageBlob'.
     */
    endpointType: "StorageBlob";
    /**
     * The Azure Resource ID of the storage account that is the destination of the deadletter events
     */
    resourceId?: string;
}

/**
 * Information about the storage queue destination for an event subscription.
 */
export interface StorageQueueEventSubscriptionDestinationResponse {
    /**
     * Type of the endpoint for the event subscription destination.
     * Expected value is 'StorageQueue'.
     */
    endpointType: "StorageQueue";
    /**
     * Storage queue message time to live in seconds.
     */
    queueMessageTimeToLiveInSeconds?: number;
    /**
     * The name of the Storage queue under a storage account that is the destination of an event subscription.
     */
    queueName?: string;
    /**
     * The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
     */
    resourceId?: string;
}

/**
 * StringBeginsWith Advanced Filter.
 */
export interface StringBeginsWithAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringBeginsWith'.
     */
    operatorType: "StringBeginsWith";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * StringContains Advanced Filter.
 */
export interface StringContainsAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringContains'.
     */
    operatorType: "StringContains";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * StringEndsWith Advanced Filter.
 */
export interface StringEndsWithAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringEndsWith'.
     */
    operatorType: "StringEndsWith";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * StringIn Advanced Filter.
 */
export interface StringInAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringIn'.
     */
    operatorType: "StringIn";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * StringNotBeginsWith Advanced Filter.
 */
export interface StringNotBeginsWithAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringNotBeginsWith'.
     */
    operatorType: "StringNotBeginsWith";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * StringNotContains Advanced Filter.
 */
export interface StringNotContainsAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringNotContains'.
     */
    operatorType: "StringNotContains";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * StringNotEndsWith Advanced Filter.
 */
export interface StringNotEndsWithAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringNotEndsWith'.
     */
    operatorType: "StringNotEndsWith";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * StringNotIn Advanced Filter.
 */
export interface StringNotInAdvancedFilterResponse {
    /**
     * The field/property in the event based on which you want to filter.
     */
    key?: string;
    /**
     * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     * Expected value is 'StringNotIn'.
     */
    operatorType: "StringNotIn";
    /**
     * The set of filter values.
     */
    values?: string[];
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * The information about the user identity.
 */
export interface UserIdentityPropertiesResponse {
    /**
     * The client id of user assigned identity.
     */
    clientId?: string;
    /**
     * The principal id of user assigned identity.
     */
    principalId?: string;
}

/**
 * Information about the webhook destination for an event subscription.
 */
export interface WebHookEventSubscriptionDestinationResponse {
    /**
     * The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
     */
    azureActiveDirectoryApplicationIdOrUri?: string;
    /**
     * The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
     */
    azureActiveDirectoryTenantId?: string;
    /**
     * Delivery attribute details.
     */
    deliveryAttributeMappings?: (outputs.eventgrid.v20211201.DynamicDeliveryAttributeMappingResponse | outputs.eventgrid.v20211201.StaticDeliveryAttributeMappingResponse)[];
    /**
     * The base URL that represents the endpoint of the destination of an event subscription.
     */
    endpointBaseUrl: string;
    /**
     * Type of the endpoint for the event subscription destination.
     * Expected value is 'WebHook'.
     */
    endpointType: "WebHook";
    /**
     * The URL that represents the endpoint of the destination of an event subscription.
     */
    endpointUrl?: string;
    /**
     * Maximum number of events per batch.
     */
    maxEventsPerBatch?: number;
    /**
     * Preferred batch size in Kilobytes.
     */
    preferredBatchSizeInKilobytes?: number;
}
/**
 * webHookEventSubscriptionDestinationResponseProvideDefaults sets the appropriate defaults for WebHookEventSubscriptionDestinationResponse
 */
export function webHookEventSubscriptionDestinationResponseProvideDefaults(val: WebHookEventSubscriptionDestinationResponse): WebHookEventSubscriptionDestinationResponse {
    return {
        ...val,
        maxEventsPerBatch: (val.maxEventsPerBatch) ?? 1,
        preferredBatchSizeInKilobytes: (val.preferredBatchSizeInKilobytes) ?? 64,
    };
}

