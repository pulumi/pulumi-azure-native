// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Information about the event hub destination for an event subscription
 */
export interface EventHubEventSubscriptionDestinationArgs {
    /**
     * Type of the endpoint for the event subscription destination
     * Expected value is 'EventHub'.
     */
    endpointType: pulumi.Input<"EventHub">;
    /**
     * The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * Filter for the Event Subscription
 */
export interface EventSubscriptionFilterArgs {
    /**
     * A list of applicable event types that need to be part of the event subscription. 
     * If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
     */
    includedEventTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter 
     * should be compared in a case sensitive manner.
     */
    isSubjectCaseSensitive?: pulumi.Input<boolean>;
    /**
     * An optional string to filter events for an event subscription based on a resource path prefix.
     * The format of this depends on the publisher of the events. 
     * Wildcard characters are not supported in this path.
     */
    subjectBeginsWith?: pulumi.Input<string>;
    /**
     * An optional string to filter events for an event subscription based on a resource path suffix.
     * Wildcard characters are not supported in this path.
     */
    subjectEndsWith?: pulumi.Input<string>;
}
/**
 * eventSubscriptionFilterArgsProvideDefaults sets the appropriate defaults for EventSubscriptionFilterArgs
 */
export function eventSubscriptionFilterArgsProvideDefaults(val: EventSubscriptionFilterArgs): EventSubscriptionFilterArgs {
    return {
        ...val,
        isSubjectCaseSensitive: (val.isSubjectCaseSensitive) ?? false,
    };
}

/**
 * Information about the HybridConnection destination for an event subscription.
 */
export interface HybridConnectionEventSubscriptionDestinationArgs {
    /**
     * Type of the endpoint for the event subscription destination
     * Expected value is 'HybridConnection'.
     */
    endpointType: pulumi.Input<"HybridConnection">;
    /**
     * The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * Information about the retry policy for an event subscription
 */
export interface RetryPolicyArgs {
    /**
     * Time To Live (in minutes) for events.
     */
    eventTimeToLiveInMinutes?: pulumi.Input<number>;
    /**
     * Maximum number of delivery retry attempts for events.
     */
    maxDeliveryAttempts?: pulumi.Input<number>;
}

/**
 * Information about the storage blob based dead letter destination.
 */
export interface StorageBlobDeadLetterDestinationArgs {
    /**
     * The name of the Storage blob container that is the destination of the deadletter events
     */
    blobContainerName?: pulumi.Input<string>;
    /**
     * Type of the endpoint for the dead letter destination
     * Expected value is 'StorageBlob'.
     */
    endpointType: pulumi.Input<"StorageBlob">;
    /**
     * The Azure Resource ID of the storage account that is the destination of the deadletter events. For example: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/microsoft.Storage/storageAccounts/{StorageAccountName}
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * Information about the storage queue destination for an event subscription.
 */
export interface StorageQueueEventSubscriptionDestinationArgs {
    /**
     * Type of the endpoint for the event subscription destination
     * Expected value is 'StorageQueue'.
     */
    endpointType: pulumi.Input<"StorageQueue">;
    /**
     * The name of the Storage queue under a storage account that is the destination of an event subscription.
     */
    queueName?: pulumi.Input<string>;
    /**
     * The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * Information about the webhook destination for an event subscription
 */
export interface WebHookEventSubscriptionDestinationArgs {
    /**
     * Type of the endpoint for the event subscription destination
     * Expected value is 'WebHook'.
     */
    endpointType: pulumi.Input<"WebHook">;
    /**
     * The URL that represents the endpoint of the destination of an event subscription.
     */
    endpointUrl?: pulumi.Input<string>;
}

