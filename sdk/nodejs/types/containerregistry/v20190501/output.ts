// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The agent that initiated the event. For most situations, this could be from the authorization context of the request.
 */
export interface ActorResponse {
    /**
     * The subject or username associated with the request context that generated the event.
     */
    name?: string;
}

/**
 * The content of the event request message.
 */
export interface EventContentResponse {
    /**
     * The action that encompasses the provided event.
     */
    action?: string;
    /**
     * The agent that initiated the event. For most situations, this could be from the authorization context of the request.
     */
    actor?: outputs.containerregistry.v20190501.ActorResponse;
    /**
     * The event ID.
     */
    id?: string;
    /**
     * The request that generated the event.
     */
    request?: outputs.containerregistry.v20190501.RequestResponse;
    /**
     * The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
     */
    source?: outputs.containerregistry.v20190501.SourceResponse;
    /**
     * The target of the event.
     */
    target?: outputs.containerregistry.v20190501.TargetResponse;
    /**
     * The time at which the event occurred.
     */
    timestamp?: string;
}

/**
 * The event request message sent to the service URI.
 */
export interface EventRequestMessageResponse {
    /**
     * The content of the event request message.
     */
    content?: outputs.containerregistry.v20190501.EventContentResponse;
    /**
     * The headers of the event request message.
     */
    headers?: {[key: string]: string};
    /**
     * The HTTP method used to send the event request message.
     */
    method?: string;
    /**
     * The URI used to send the event request message.
     */
    requestUri?: string;
    /**
     * The HTTP message version.
     */
    version?: string;
}

/**
 * The event for a webhook.
 */
export interface EventResponse {
    /**
     * The event request message sent to the service URI.
     */
    eventRequestMessage?: outputs.containerregistry.v20190501.EventRequestMessageResponse;
    /**
     * The event response message received from the service URI.
     */
    eventResponseMessage?: outputs.containerregistry.v20190501.EventResponseMessageResponse;
    /**
     * The event ID.
     */
    id?: string;
}

/**
 * The event response message received from the service URI.
 */
export interface EventResponseMessageResponse {
    /**
     * The content of the event response message.
     */
    content?: string;
    /**
     * The headers of the event response message.
     */
    headers?: {[key: string]: string};
    /**
     * The reason phrase of the event response message.
     */
    reasonPhrase?: string;
    /**
     * The status code of the event response message.
     */
    statusCode?: string;
    /**
     * The HTTP message version.
     */
    version?: string;
}

/**
 * IP rule with specific IP or IP range in CIDR format.
 */
export interface IPRuleResponse {
    /**
     * The action of IP ACL rule.
     */
    action?: string;
    /**
     * Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
     */
    iPAddressOrRange: string;
}
/**
 * ipruleResponseProvideDefaults sets the appropriate defaults for IPRuleResponse
 */
export function ipruleResponseProvideDefaults(val: IPRuleResponse): IPRuleResponse {
    return {
        ...val,
        action: (val.action) ?? "Allow",
    };
}

/**
 * The network rule set for a container registry.
 */
export interface NetworkRuleSetResponse {
    /**
     * The default action of allow or deny when no other rules match.
     */
    defaultAction: string;
    /**
     * The IP ACL rules.
     */
    ipRules?: outputs.containerregistry.v20190501.IPRuleResponse[];
    /**
     * The virtual network rules.
     */
    virtualNetworkRules?: outputs.containerregistry.v20190501.VirtualNetworkRuleResponse[];
}
/**
 * networkRuleSetResponseProvideDefaults sets the appropriate defaults for NetworkRuleSetResponse
 */
export function networkRuleSetResponseProvideDefaults(val: NetworkRuleSetResponse): NetworkRuleSetResponse {
    return {
        ...val,
        defaultAction: (val.defaultAction) ?? "Allow",
    };
}

/**
 * The policies for a container registry.
 */
export interface PoliciesResponse {
    /**
     * The quarantine policy for a container registry.
     */
    quarantinePolicy?: outputs.containerregistry.v20190501.QuarantinePolicyResponse;
    /**
     * The retention policy for a container registry.
     */
    retentionPolicy?: outputs.containerregistry.v20190501.RetentionPolicyResponse;
    /**
     * The content trust policy for a container registry.
     */
    trustPolicy?: outputs.containerregistry.v20190501.TrustPolicyResponse;
}
/**
 * policiesResponseProvideDefaults sets the appropriate defaults for PoliciesResponse
 */
export function policiesResponseProvideDefaults(val: PoliciesResponse): PoliciesResponse {
    return {
        ...val,
        quarantinePolicy: (val.quarantinePolicy ? outputs.containerregistry.v20190501.quarantinePolicyResponseProvideDefaults(val.quarantinePolicy) : undefined),
        retentionPolicy: (val.retentionPolicy ? outputs.containerregistry.v20190501.retentionPolicyResponseProvideDefaults(val.retentionPolicy) : undefined),
        trustPolicy: (val.trustPolicy ? outputs.containerregistry.v20190501.trustPolicyResponseProvideDefaults(val.trustPolicy) : undefined),
    };
}

/**
 * The quarantine policy for a container registry.
 */
export interface QuarantinePolicyResponse {
    /**
     * The value that indicates whether the policy is enabled or not.
     */
    status?: string;
}
/**
 * quarantinePolicyResponseProvideDefaults sets the appropriate defaults for QuarantinePolicyResponse
 */
export function quarantinePolicyResponseProvideDefaults(val: QuarantinePolicyResponse): QuarantinePolicyResponse {
    return {
        ...val,
        status: (val.status) ?? "disabled",
    };
}

/**
 * The login password for the container registry.
 */
export interface RegistryPasswordResponse {
    /**
     * The password name.
     */
    name?: string;
    /**
     * The password value.
     */
    value?: string;
}

/**
 * The request that generated the event.
 */
export interface RequestResponse {
    /**
     * The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.
     */
    addr?: string;
    /**
     * The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.
     */
    host?: string;
    /**
     * The ID of the request that initiated the event.
     */
    id?: string;
    /**
     * The request method that generated the event.
     */
    method?: string;
    /**
     * The user agent header of the request.
     */
    useragent?: string;
}

/**
 * The retention policy for a container registry.
 */
export interface RetentionPolicyResponse {
    /**
     * The number of days to retain an untagged manifest after which it gets purged.
     */
    days?: number;
    /**
     * The timestamp when the policy was last updated.
     */
    lastUpdatedTime: string;
    /**
     * The value that indicates whether the policy is enabled or not.
     */
    status?: string;
}
/**
 * retentionPolicyResponseProvideDefaults sets the appropriate defaults for RetentionPolicyResponse
 */
export function retentionPolicyResponseProvideDefaults(val: RetentionPolicyResponse): RetentionPolicyResponse {
    return {
        ...val,
        days: (val.days) ?? 7,
        status: (val.status) ?? "disabled",
    };
}

/**
 * The SKU of a container registry.
 */
export interface SkuResponse {
    /**
     * The SKU name of the container registry. Required for registry creation.
     */
    name: string;
    /**
     * The SKU tier based on the SKU name.
     */
    tier: string;
}

/**
 * The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
 */
export interface SourceResponse {
    /**
     * The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port.
     */
    addr?: string;
    /**
     * The running instance of an application. Changes after each restart.
     */
    instanceID?: string;
}

/**
 * The status of an Azure resource at the time the operation was called.
 */
export interface StatusResponse {
    /**
     * The short label for the status.
     */
    displayStatus: string;
    /**
     * The detailed message for the status, including alerts and error messages.
     */
    message: string;
    /**
     * The timestamp when the status was changed to the current value.
     */
    timestamp: string;
}

/**
 * The properties of a storage account for a container registry. Only applicable to Classic SKU.
 */
export interface StorageAccountPropertiesResponse {
    /**
     * The resource ID of the storage account.
     */
    id: string;
}

/**
 * The target of the event.
 */
export interface TargetResponse {
    /**
     * The digest of the content, as defined by the Registry V2 HTTP API Specification.
     */
    digest?: string;
    /**
     * The number of bytes of the content. Same as Size field.
     */
    length?: number;
    /**
     * The MIME type of the referenced object.
     */
    mediaType?: string;
    /**
     * The name of the artifact.
     */
    name?: string;
    /**
     * The repository name.
     */
    repository?: string;
    /**
     * The number of bytes of the content. Same as Length field.
     */
    size?: number;
    /**
     * The tag name.
     */
    tag?: string;
    /**
     * The direct URL to the content.
     */
    url?: string;
    /**
     * The version of the artifact.
     */
    version?: string;
}

/**
 * The content trust policy for a container registry.
 */
export interface TrustPolicyResponse {
    /**
     * The value that indicates whether the policy is enabled or not.
     */
    status?: string;
    /**
     * The type of trust policy.
     */
    type?: string;
}
/**
 * trustPolicyResponseProvideDefaults sets the appropriate defaults for TrustPolicyResponse
 */
export function trustPolicyResponseProvideDefaults(val: TrustPolicyResponse): TrustPolicyResponse {
    return {
        ...val,
        status: (val.status) ?? "disabled",
        type: (val.type) ?? "Notary",
    };
}

/**
 * Virtual network rule.
 */
export interface VirtualNetworkRuleResponse {
    /**
     * The action of virtual network rule.
     */
    action?: string;
    /**
     * Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
     */
    virtualNetworkResourceId: string;
}
/**
 * virtualNetworkRuleResponseProvideDefaults sets the appropriate defaults for VirtualNetworkRuleResponse
 */
export function virtualNetworkRuleResponseProvideDefaults(val: VirtualNetworkRuleResponse): VirtualNetworkRuleResponse {
    return {
        ...val,
        action: (val.action) ?? "Allow",
    };
}

