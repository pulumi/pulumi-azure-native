// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The resource properties when type is Azure Key Vault
 */
export interface AzureKeyVaultPropertiesResponse {
    /**
     * True if connect via Kubernetes CSI Driver.
     */
    connectAsKubernetesCsiDriver?: boolean;
    /**
     * The azure resource type.
     * Expected value is 'KeyVault'.
     */
    type: "KeyVault";
}

/**
 * The azure resource info when target service type is AzureResource
 */
export interface AzureResourceResponse {
    /**
     * The Id of azure resource.
     */
    id?: string;
    /**
     * The azure resource connection related properties.
     */
    resourceProperties?: outputs.servicelinker.v20220501.AzureKeyVaultPropertiesResponse;
    /**
     * The target service type.
     * Expected value is 'AzureResource'.
     */
    type: "AzureResource";
}

/**
 * The service properties when target service type is ConfluentBootstrapServer
 */
export interface ConfluentBootstrapServerResponse {
    /**
     * The endpoint of service.
     */
    endpoint?: string;
    /**
     * The target service type.
     * Expected value is 'ConfluentBootstrapServer'.
     */
    type: "ConfluentBootstrapServer";
}

/**
 * The service properties when target service type is ConfluentSchemaRegistry
 */
export interface ConfluentSchemaRegistryResponse {
    /**
     * The endpoint of service.
     */
    endpoint?: string;
    /**
     * The target service type.
     * Expected value is 'ConfluentSchemaRegistry'.
     */
    type: "ConfluentSchemaRegistry";
}

/**
 * The secret info when type is keyVaultSecretReference. It's for scenario that user provides a secret stored in user's keyvault and source is Azure Kubernetes. The key Vault's resource id is linked to secretStore.keyVaultId.
 */
export interface KeyVaultSecretReferenceSecretInfoResponse {
    /**
     * Name of the Key Vault secret.
     */
    name?: string;
    /**
     * The secret type.
     * Expected value is 'keyVaultSecretReference'.
     */
    secretType: "keyVaultSecretReference";
    /**
     * Version of the Key Vault secret.
     */
    version?: string;
}

/**
 * The secret info when type is keyVaultSecretUri. It's for scenario that user provides a secret stored in user's keyvault and source is Web App, Spring Cloud or Container App.
 */
export interface KeyVaultSecretUriSecretInfoResponse {
    /**
     * The secret type.
     * Expected value is 'keyVaultSecretUri'.
     */
    secretType: "keyVaultSecretUri";
    /**
     * URI to the keyvault secret
     */
    value?: string;
}

/**
 * The authentication info when authType is secret
 */
export interface SecretAuthInfoResponse {
    /**
     * The authentication type.
     * Expected value is 'secret'.
     */
    authType: "secret";
    /**
     * Username or account name for secret auth.
     */
    name?: string;
    /**
     * Password or key vault secret for secret auth.
     */
    secretInfo?: outputs.servicelinker.v20220501.KeyVaultSecretReferenceSecretInfoResponse | outputs.servicelinker.v20220501.KeyVaultSecretUriSecretInfoResponse | outputs.servicelinker.v20220501.ValueSecretInfoResponse;
}

/**
 * An option to store secret value in secure place
 */
export interface SecretStoreResponse {
    /**
     * The key vault id to store secret
     */
    keyVaultId?: string;
}

/**
 * The authentication info when authType is servicePrincipal certificate
 */
export interface ServicePrincipalCertificateAuthInfoResponse {
    /**
     * The authentication type.
     * Expected value is 'servicePrincipalCertificate'.
     */
    authType: "servicePrincipalCertificate";
    /**
     * ServicePrincipal certificate for servicePrincipal auth.
     */
    certificate: string;
    /**
     * Application clientId for servicePrincipal auth.
     */
    clientId: string;
    /**
     * Principal Id for servicePrincipal auth.
     */
    principalId: string;
}

/**
 * The authentication info when authType is servicePrincipal secret
 */
export interface ServicePrincipalSecretAuthInfoResponse {
    /**
     * The authentication type.
     * Expected value is 'servicePrincipalSecret'.
     */
    authType: "servicePrincipalSecret";
    /**
     * ServicePrincipal application clientId for servicePrincipal auth.
     */
    clientId: string;
    /**
     * Principal Id for servicePrincipal auth.
     */
    principalId: string;
    /**
     * Secret for servicePrincipal auth.
     */
    secret: string;
}

/**
 * A configuration item for source resource
 */
export interface SourceConfigurationResponse {
    /**
     * The name of setting.
     */
    name?: string;
    /**
     * The value of setting
     */
    value?: string;
}

/**
 * The authentication info when authType is systemAssignedIdentity
 */
export interface SystemAssignedIdentityAuthInfoResponse {
    /**
     * The authentication type.
     * Expected value is 'systemAssignedIdentity'.
     */
    authType: "systemAssignedIdentity";
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * The authentication info when authType is userAssignedIdentity
 */
export interface UserAssignedIdentityAuthInfoResponse {
    /**
     * The authentication type.
     * Expected value is 'userAssignedIdentity'.
     */
    authType: "userAssignedIdentity";
    /**
     * Client Id for userAssignedIdentity.
     */
    clientId?: string;
    /**
     * Subscription id for userAssignedIdentity.
     */
    subscriptionId?: string;
}

/**
 * The VNet solution for linker
 */
export interface VNetSolutionResponse {
    /**
     * Type of VNet solution.
     */
    type?: string;
}

/**
 * The secret info when type is rawValue. It's for scenarios that user input the secret.
 */
export interface ValueSecretInfoResponse {
    /**
     * The secret type.
     * Expected value is 'rawValue'.
     */
    secretType: "rawValue";
    /**
     * The actual value of the secret.
     */
    value?: string;
}

