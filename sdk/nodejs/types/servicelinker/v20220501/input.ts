// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The resource properties when type is Azure Key Vault
 */
export interface AzureKeyVaultPropertiesArgs {
    /**
     * True if connect via Kubernetes CSI Driver.
     */
    connectAsKubernetesCsiDriver?: pulumi.Input<boolean>;
    /**
     * The azure resource type.
     * Expected value is 'KeyVault'.
     */
    type: pulumi.Input<"KeyVault">;
}

/**
 * The azure resource info when target service type is AzureResource
 */
export interface AzureResourceArgs {
    /**
     * The Id of azure resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The azure resource connection related properties.
     */
    resourceProperties?: pulumi.Input<inputs.servicelinker.v20220501.AzureKeyVaultPropertiesArgs>;
    /**
     * The target service type.
     * Expected value is 'AzureResource'.
     */
    type: pulumi.Input<"AzureResource">;
}

/**
 * The service properties when target service type is ConfluentBootstrapServer
 */
export interface ConfluentBootstrapServerArgs {
    /**
     * The endpoint of service.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The target service type.
     * Expected value is 'ConfluentBootstrapServer'.
     */
    type: pulumi.Input<"ConfluentBootstrapServer">;
}

/**
 * The service properties when target service type is ConfluentSchemaRegistry
 */
export interface ConfluentSchemaRegistryArgs {
    /**
     * The endpoint of service.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The target service type.
     * Expected value is 'ConfluentSchemaRegistry'.
     */
    type: pulumi.Input<"ConfluentSchemaRegistry">;
}

/**
 * The secret info when type is keyVaultSecretReference. It's for scenario that user provides a secret stored in user's keyvault and source is Azure Kubernetes. The key Vault's resource id is linked to secretStore.keyVaultId.
 */
export interface KeyVaultSecretReferenceSecretInfoArgs {
    /**
     * Name of the Key Vault secret.
     */
    name?: pulumi.Input<string>;
    /**
     * The secret type.
     * Expected value is 'keyVaultSecretReference'.
     */
    secretType: pulumi.Input<"keyVaultSecretReference">;
    /**
     * Version of the Key Vault secret.
     */
    version?: pulumi.Input<string>;
}

/**
 * The secret info when type is keyVaultSecretUri. It's for scenario that user provides a secret stored in user's keyvault and source is Web App, Spring Cloud or Container App.
 */
export interface KeyVaultSecretUriSecretInfoArgs {
    /**
     * The secret type.
     * Expected value is 'keyVaultSecretUri'.
     */
    secretType: pulumi.Input<"keyVaultSecretUri">;
    /**
     * URI to the keyvault secret
     */
    value?: pulumi.Input<string>;
}

/**
 * The authentication info when authType is secret
 */
export interface SecretAuthInfoArgs {
    /**
     * The authentication type.
     * Expected value is 'secret'.
     */
    authType: pulumi.Input<"secret">;
    /**
     * Username or account name for secret auth.
     */
    name?: pulumi.Input<string>;
    /**
     * Password or key vault secret for secret auth.
     */
    secretInfo?: pulumi.Input<inputs.servicelinker.v20220501.KeyVaultSecretReferenceSecretInfoArgs | inputs.servicelinker.v20220501.KeyVaultSecretUriSecretInfoArgs | inputs.servicelinker.v20220501.ValueSecretInfoArgs>;
}

/**
 * An option to store secret value in secure place
 */
export interface SecretStoreArgs {
    /**
     * The key vault id to store secret
     */
    keyVaultId?: pulumi.Input<string>;
}

/**
 * The authentication info when authType is servicePrincipal certificate
 */
export interface ServicePrincipalCertificateAuthInfoArgs {
    /**
     * The authentication type.
     * Expected value is 'servicePrincipalCertificate'.
     */
    authType: pulumi.Input<"servicePrincipalCertificate">;
    /**
     * ServicePrincipal certificate for servicePrincipal auth.
     */
    certificate: pulumi.Input<string>;
    /**
     * Application clientId for servicePrincipal auth.
     */
    clientId: pulumi.Input<string>;
    /**
     * Principal Id for servicePrincipal auth.
     */
    principalId: pulumi.Input<string>;
}

/**
 * The authentication info when authType is servicePrincipal secret
 */
export interface ServicePrincipalSecretAuthInfoArgs {
    /**
     * The authentication type.
     * Expected value is 'servicePrincipalSecret'.
     */
    authType: pulumi.Input<"servicePrincipalSecret">;
    /**
     * ServicePrincipal application clientId for servicePrincipal auth.
     */
    clientId: pulumi.Input<string>;
    /**
     * Principal Id for servicePrincipal auth.
     */
    principalId: pulumi.Input<string>;
    /**
     * Secret for servicePrincipal auth.
     */
    secret: pulumi.Input<string>;
}

/**
 * The authentication info when authType is systemAssignedIdentity
 */
export interface SystemAssignedIdentityAuthInfoArgs {
    /**
     * The authentication type.
     * Expected value is 'systemAssignedIdentity'.
     */
    authType: pulumi.Input<"systemAssignedIdentity">;
}

/**
 * The authentication info when authType is userAssignedIdentity
 */
export interface UserAssignedIdentityAuthInfoArgs {
    /**
     * The authentication type.
     * Expected value is 'userAssignedIdentity'.
     */
    authType: pulumi.Input<"userAssignedIdentity">;
    /**
     * Client Id for userAssignedIdentity.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Subscription id for userAssignedIdentity.
     */
    subscriptionId?: pulumi.Input<string>;
}

/**
 * The VNet solution for linker
 */
export interface VNetSolutionArgs {
    /**
     * Type of VNet solution.
     */
    type?: pulumi.Input<string | enums.servicelinker.v20220501.VNetSolutionType>;
}

/**
 * The secret info when type is rawValue. It's for scenarios that user input the secret.
 */
export interface ValueSecretInfoArgs {
    /**
     * The secret type.
     * Expected value is 'rawValue'.
     */
    secretType: pulumi.Input<"rawValue">;
    /**
     * The actual value of the secret.
     */
    value?: pulumi.Input<string>;
}

