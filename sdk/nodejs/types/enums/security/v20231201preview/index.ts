// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ActionType = {
    LogicApp: "LogicApp",
    EventHub: "EventHub",
    Workspace: "Workspace",
} as const;

/**
 * The type of the action that will be triggered by the Automation
 */
export type ActionType = (typeof ActionType)[keyof typeof ActionType];

export const EventSource = {
    Assessments: "Assessments",
    AssessmentsSnapshot: "AssessmentsSnapshot",
    SubAssessments: "SubAssessments",
    SubAssessmentsSnapshot: "SubAssessmentsSnapshot",
    Alerts: "Alerts",
    SecureScores: "SecureScores",
    SecureScoresSnapshot: "SecureScoresSnapshot",
    SecureScoreControls: "SecureScoreControls",
    SecureScoreControlsSnapshot: "SecureScoreControlsSnapshot",
    RegulatoryComplianceAssessment: "RegulatoryComplianceAssessment",
    RegulatoryComplianceAssessmentSnapshot: "RegulatoryComplianceAssessmentSnapshot",
    AttackPaths: "AttackPaths",
    AttackPathsSnapshot: "AttackPathsSnapshot",
} as const;

/**
 * A valid event source type.
 */
export type EventSource = (typeof EventSource)[keyof typeof EventSource];

export const MinimalRiskLevel = {
    /**
     * Get notifications on new attack paths with Critical risk level
     */
    Critical: "Critical",
    /**
     * Get notifications on new attack paths with High or Critical risk level
     */
    High: "High",
    /**
     * Get notifications on new attach paths with Medium, High or Critical risk level
     */
    Medium: "Medium",
    /**
     * Get notifications on new attach paths with Low, Medium, High or Critical risk level
     */
    Low: "Low",
} as const;

/**
 * Defines the minimal attach path risk level which will be sent as email notifications
 */
export type MinimalRiskLevel = (typeof MinimalRiskLevel)[keyof typeof MinimalRiskLevel];

export const MinimalSeverity = {
    /**
     * Get notifications on new alerts with High severity
     */
    High: "High",
    /**
     * Get notifications on new alerts with Medium or High severity
     */
    Medium: "Medium",
    /**
     * Get notifications on new alerts with Low, Medium or High severity
     */
    Low: "Low",
} as const;

/**
 * Defines the minimal alert severity which will be sent as email notifications
 */
export type MinimalSeverity = (typeof MinimalSeverity)[keyof typeof MinimalSeverity];

export const Operator = {
    /**
     * Applies for decimal and non-decimal operands
     */
    Equals: "Equals",
    /**
     * Applies only for decimal operands
     */
    GreaterThan: "GreaterThan",
    /**
     * Applies only for decimal operands
     */
    GreaterThanOrEqualTo: "GreaterThanOrEqualTo",
    /**
     * Applies only for decimal operands
     */
    LesserThan: "LesserThan",
    /**
     * Applies only for decimal operands
     */
    LesserThanOrEqualTo: "LesserThanOrEqualTo",
    /**
     * Applies  for decimal and non-decimal operands
     */
    NotEquals: "NotEquals",
    /**
     * Applies only for non-decimal operands
     */
    Contains: "Contains",
    /**
     * Applies only for non-decimal operands
     */
    StartsWith: "StartsWith",
    /**
     * Applies only for non-decimal operands
     */
    EndsWith: "EndsWith",
} as const;

/**
 * A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
 */
export type Operator = (typeof Operator)[keyof typeof Operator];

export const PropertyType = {
    String: "String",
    Integer: "Integer",
    Number: "Number",
    Boolean: "Boolean",
} as const;

/**
 * The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
 */
export type PropertyType = (typeof PropertyType)[keyof typeof PropertyType];

export const SecurityContactRole = {
    /**
     * If enabled, send notification on new alerts to the account admins
     */
    AccountAdmin: "AccountAdmin",
    /**
     * If enabled, send notification on new alerts to the service admins
     */
    ServiceAdmin: "ServiceAdmin",
    /**
     * If enabled, send notification on new alerts to the subscription owners
     */
    Owner: "Owner",
    /**
     * If enabled, send notification on new alerts to the subscription contributors
     */
    Contributor: "Contributor",
} as const;

/**
 * A possible role to configure sending security notification alerts to
 */
export type SecurityContactRole = (typeof SecurityContactRole)[keyof typeof SecurityContactRole];

export const SourceType = {
    Alert: "Alert",
    AttackPath: "AttackPath",
} as const;

/**
 * The source type that will trigger the notification
 */
export type SourceType = (typeof SourceType)[keyof typeof SourceType];

export const State = {
    /**
     * Send notification on new alerts to the subscription's admins
     */
    On: "On",
    /**
     * Don't send notification on new alerts to the subscription's admins
     */
    Off: "Off",
} as const;

/**
 * Defines whether to send email notifications from AMicrosoft Defender for Cloud to persons with specific RBAC roles on the subscription.
 */
export type State = (typeof State)[keyof typeof State];
