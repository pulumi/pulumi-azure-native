// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ActionPerformed = {
    /**
     * Action was Approved
     */
    Approved: "Approved",
    /**
     * Action was Rejected
     */
    Rejected: "Rejected",
} as const;

/**
 * Action Performed by approver
 */
export type ActionPerformed = (typeof ActionPerformed)[keyof typeof ActionPerformed];

export const ApprovalPolicy = {
    /**
     * Approval will be required for the specified action.
     */
    Required: "Required",
    /**
     * Approval will not be required for the specified action.
     */
    NotRequired: "NotRequired",
} as const;

/**
 * Approval required for deploying service catalog templates (Required or NotRequired).
 */
export type ApprovalPolicy = (typeof ApprovalPolicy)[keyof typeof ApprovalPolicy];

export const ApprovalStatus = {
    /**
     * ApprovalStatus Type Approved
     */
    Approved: "Approved",
    /**
     * ApprovalStatus Type Rejected
     */
    Rejected: "Rejected",
    /**
     * ApprovalStatus Type Pending
     */
    Pending: "Pending",
    /**
     * ApprovalStatus Type Deleted
     */
    Deleted: "Deleted",
    /**
     * ApprovalStatus Type Expired
     */
    Expired: "Expired",
} as const;

/**
 * Status of the approval. Uses ApprovalStatus enum.
 */
export type ApprovalStatus = (typeof ApprovalStatus)[keyof typeof ApprovalStatus];

export const CommunityEndpointProtocol = {
    /**
     * CommunityEndpointProtocol Type ANY
     */
    ANY: "ANY",
    /**
     * CommunityEndpointProtocol Type TCP
     */
    TCP: "TCP",
    /**
     * CommunityEndpointProtocol Type UDP
     */
    UDP: "UDP",
    /**
     * CommunityEndpointProtocol Type ICMP
     */
    ICMP: "ICMP",
    /**
     * CommunityEndpointProtocol Type ESP
     */
    ESP: "ESP",
    /**
     * CommunityEndpointProtocol Type AH
     */
    AH: "AH",
    /**
     * CommunityEndpointProtocol Type HTTPS
     */
    HTTPS: "HTTPS",
    /**
     * CommunityEndpointProtocol Type HTTP
     */
    HTTP: "HTTP",
} as const;

/**
 * Community Endpoint Protocol Enum
 */
export type CommunityEndpointProtocol = (typeof CommunityEndpointProtocol)[keyof typeof CommunityEndpointProtocol];

export const DestinationType = {
    /**
     * DestinationType Type FQDN
     */
    FQDN: "FQDN",
    /**
     * DestinationType Type FQDNTag
     */
    FQDNTag: "FQDNTag",
    /**
     * DestinationType Type IPAddress
     */
    IPAddress: "IPAddress",
    /**
     * DestinationType Type PrivateNetwork
     */
    PrivateNetwork: "PrivateNetwork",
} as const;

/**
 * Destination Type.
 */
export type DestinationType = (typeof DestinationType)[keyof typeof DestinationType];

export const DiagnosticDestination = {
    /**
     * DiagnosticDestination Type CommunityOnly
     */
    CommunityOnly: "CommunityOnly",
    /**
     * DiagnosticDestination Type EnclaveOnly
     */
    EnclaveOnly: "EnclaveOnly",
    /**
     * DiagnosticDestination Type Both
     */
    Both: "Both",
} as const;

/**
 * Diagnostic Destination.
 */
export type DiagnosticDestination = (typeof DiagnosticDestination)[keyof typeof DiagnosticDestination];

export const EnclaveEndpointProtocol = {
    /**
     * EndpointProtocol Type ANY
     */
    ANY: "ANY",
    /**
     * EndpointProtocol Type TCP
     */
    TCP: "TCP",
    /**
     * EndpointProtocol Type UDP
     */
    UDP: "UDP",
    /**
     * EndpointProtocol Type ICMP
     */
    ICMP: "ICMP",
    /**
     * EndpointProtocol Type ESP
     */
    ESP: "ESP",
    /**
     * EndpointProtocol Type AH
     */
    AH: "AH",
} as const;

/**
 * Enclave Endpoint Protocol Enum
 */
export type EnclaveEndpointProtocol = (typeof EnclaveEndpointProtocol)[keyof typeof EnclaveEndpointProtocol];

export const Enforcement = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * Initiative enforcement (Enabled or Disabled).
 */
export type Enforcement = (typeof Enforcement)[keyof typeof Enforcement];

export const FirewallSKU = {
    /**
     * FirewallSKU Basic
     */
    Basic: "Basic",
    /**
     * FirwallSKU Standard
     */
    Standard: "Standard",
    /**
     * FirewallSKU Premium
     */
    Premium: "Premium",
} as const;

/**
 * SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
 */
export type FirewallSKU = (typeof FirewallSKU)[keyof typeof FirewallSKU];

export const Justification = {
    Networking: "Networking",
    Governance: "Governance",
    Off: "Off",
} as const;

/**
 * Justification for entering or exiting Maintenance Mode
 */
export type Justification = (typeof Justification)[keyof typeof Justification];

export const ManagedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned",
} as const;

/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];

export const Mode = {
    On: "On",
    CanNotDelete: "CanNotDelete",
    Off: "Off",
    General: "General",
    Advanced: "Advanced",
} as const;

/**
 * Current mode of Maintenance Mode Configuration
 */
export type Mode = (typeof Mode)[keyof typeof Mode];

export const Option = {
    Allow: "Allow",
    Deny: "Deny",
    ExceptionOnly: "ExceptionOnly",
    NotApplicable: "NotApplicable",
} as const;

/**
 * Governance option for this service (Allow, Deny, ExceptionOnly, or NotApplicable).
 */
export type Option = (typeof Option)[keyof typeof Option];

export const PolicyAction = {
    AuditOnly: "AuditOnly",
    Enforce: "Enforce",
    None: "None",
} as const;

/**
 * Enforcement mode for policy. AuditOnly, Enforce, or None.
 */
export type PolicyAction = (typeof PolicyAction)[keyof typeof PolicyAction];

export const PolicyOverride = {
    Enclave: "Enclave",
    None: "None",
} as const;

/**
 * Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
 */
export type PolicyOverride = (typeof PolicyOverride)[keyof typeof PolicyOverride];

export const ServiceIdentifier = {
    /**
     * Service identifier for AKS
     */
    AKS: "AKS",
    /**
     * Service identifier for App Service
     */
    AppService: "AppService",
    /**
     * Service identifier for Azure Firewalls
     */
    AzureFirewalls: "AzureFirewalls",
    /**
     * Service identifier for Container Registry
     */
    ContainerRegistry: "ContainerRegistry",
    /**
     * Service identifier for CosmosDB
     */
    CosmosDB: "CosmosDB",
    /**
     * Service identifier for Data Connectors
     */
    DataConnectors: "DataConnectors",
    /**
     * Service identifier for Insights
     */
    Insights: "Insights",
    /**
     * Service identifier for Key Vault
     */
    KeyVault: "KeyVault",
    /**
     * Service identifier for Logic
     */
    Logic: "Logic",
    /**
     * Service identifier for Microsoft SQL
     */
    MicrosoftSql: "MicrosoftSQL",
    /**
     * Service identifier for Monitoring
     */
    Monitoring: "Monitoring",
    /**
     * Service identifier for PostgreSQL
     */
    PostgreSql: "PostgreSQL",
    /**
     * Service identifier for Private DNS Zones
     */
    PrivateDNSZones: "PrivateDNSZones",
    /**
     * Service identifier for Service Bus
     */
    ServiceBus: "ServiceBus",
    /**
     * Service identifier for Storage
     */
    Storage: "Storage",
} as const;

/**
 * Service ID
 */
export type ServiceIdentifier = (typeof ServiceIdentifier)[keyof typeof ServiceIdentifier];

export const TransitHubState = {
    /**
     * TransitHubState Type PendingApproval
     */
    PendingApproval: "PendingApproval",
    /**
     * TransitHubState Type Approved
     */
    Approved: "Approved",
    /**
     * TransitHubState Type PendingUpdate
     */
    PendingUpdate: "PendingUpdate",
    /**
     * TransitHubState Type Active
     */
    Active: "Active",
    /**
     * TransitHubState Type Failed
     */
    Failed: "Failed",
} as const;

/**
 * The state of the transitHub.
 */
export type TransitHubState = (typeof TransitHubState)[keyof typeof TransitHubState];

export const TransitOptionType = {
    /**
     * TransitOptionType ExpressRoute
     */
    ExpressRoute: "ExpressRoute",
    /**
     * TransitOptionType Gateway
     */
    Gateway: "Gateway",
    /**
     * TransitOptionType Peering
     */
    Peering: "Peering",
} as const;

/**
 * Transit Option Type.
 */
export type TransitOptionType = (typeof TransitOptionType)[keyof typeof TransitOptionType];

export const Type = {
    User: "User",
    Group: "Group",
    ServicePrincipal: "ServicePrincipal",
} as const;

/**
 * The type of the object id. We currently allow users, groups, and service principals
 */
export type Type = (typeof Type)[keyof typeof Type];
