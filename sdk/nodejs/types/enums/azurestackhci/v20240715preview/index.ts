// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const CloudInitDataSource = {
    /**
     * NoCloud is used as the datasource
     */
    NoCloud: "NoCloud",
    /**
     * Azure is used as the datasource
     */
    Azure: "Azure",
} as const;

/**
 * Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]
 */
export type CloudInitDataSource = (typeof CloudInitDataSource)[keyof typeof CloudInitDataSource];

export const DiskFileFormat = {
    /**
     * VHDX file format
     */
    Vhdx: "vhdx",
    /**
     * VHD file format
     */
    Vhd: "vhd",
} as const;

/**
 * The format of the actual VHD file [vhd, vhdx]
 */
export type DiskFileFormat = (typeof DiskFileFormat)[keyof typeof DiskFileFormat];

export const ExtendedLocationTypes = {
    /**
     * Custom extended location type
     */
    CustomLocation: "CustomLocation",
} as const;

/**
 * The type of the extended location.
 */
export type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];

export const GpuAssignmentTypeEnum = {
    /**
     * Attach Graphics Processing Unit (GPU) using Discrete Device Assignment (DDA)
     */
    GpuDDA: "GpuDDA",
    /**
     * Attach Graphics Processing Unit (GPU) using GPU Partitioning
     */
    GpuP: "GpuP",
} as const;

/**
 * GPU assignment type
 */
export type GpuAssignmentTypeEnum = (typeof GpuAssignmentTypeEnum)[keyof typeof GpuAssignmentTypeEnum];

export const HyperVGeneration = {
    /**
     * Generation 1 (V1) hypervisor
     */
    V1: "V1",
    /**
     * Generation 2 (V2) hypervisor
     */
    V2: "V2",
} as const;

/**
 * The hypervisor generation of the Virtual Machine [V1, V2]
 */
export type HyperVGeneration = (typeof HyperVGeneration)[keyof typeof HyperVGeneration];

export const IPPoolTypeEnum = {
    /**
     * Virtual Machine IP Pool
     */
    Vm: "vm",
    /**
     * VIP Pool
     */
    Vippool: "vippool",
} as const;

/**
 * Type of the IP Pool [vm, vippool]
 */
export type IPPoolTypeEnum = (typeof IPPoolTypeEnum)[keyof typeof IPPoolTypeEnum];

export const IpAllocationMethodEnum = {
    /**
     * Dynamic IP allocation method
     */
    Dynamic: "Dynamic",
    /**
     * Static IP allocation method
     */
    Static: "Static",
} as const;

/**
 * IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
 */
export type IpAllocationMethodEnum = (typeof IpAllocationMethodEnum)[keyof typeof IpAllocationMethodEnum];

export const ManagedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned",
} as const;

/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];

export const OperatingSystemTypes = {
    /**
     * Windows operating system
     */
    Windows: "Windows",
    /**
     * Linux operating system
     */
    Linux: "Linux",
} as const;

/**
 * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: Windows, Linux.
 */
export type OperatingSystemTypes = (typeof OperatingSystemTypes)[keyof typeof OperatingSystemTypes];

export const ProvisioningAction = {
    /**
     * Install guest agent
     */
    Install: "install",
    /**
     * Uninstall guest agent
     */
    Uninstall: "uninstall",
    /**
     * Repair guest agent
     */
    Repair: "repair",
} as const;

/**
 * The guest agent provisioning action.
 */
export type ProvisioningAction = (typeof ProvisioningAction)[keyof typeof ProvisioningAction];

export const SecurityRuleAccess = {
    /**
     * Network traffic is allowed
     */
    Allow: "Allow",
    /**
     * Network traffic is denied
     */
    Deny: "Deny",
} as const;

/**
 * The network traffic is allowed or denied.
 */
export type SecurityRuleAccess = (typeof SecurityRuleAccess)[keyof typeof SecurityRuleAccess];

export const SecurityRuleDirection = {
    /**
     * Rule is evaluated on incoming traffic
     */
    Inbound: "Inbound",
    /**
     * Rule is evaluated on outgoing traffic
     */
    Outbound: "Outbound",
} as const;

/**
 * The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
 */
export type SecurityRuleDirection = (typeof SecurityRuleDirection)[keyof typeof SecurityRuleDirection];

export const SecurityRuleProtocol = {
    /**
     * Transmission Control Protocol
     */
    Tcp: "Tcp",
    /**
     * User Datagram Protocol
     */
    Udp: "Udp",
    /**
     * Internet Control Message Protocol
     */
    Icmp: "Icmp",
    /**
     * Wildcard rule for all protocols
     */
    Asterisk: "*",
} as const;

/**
 * Network protocol this rule applies to.
 */
export type SecurityRuleProtocol = (typeof SecurityRuleProtocol)[keyof typeof SecurityRuleProtocol];

export const SecurityTypes = {
    /**
     * Trusted Launch security type
     */
    TrustedLaunch: "TrustedLaunch",
    /**
     * Confidential VM security type
     */
    ConfidentialVM: "ConfidentialVM",
} as const;

/**
 * Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.
 */
export type SecurityTypes = (typeof SecurityTypes)[keyof typeof SecurityTypes];

export const VmSizeEnum = {
    /**
     * Default virtual machine size
     */
    Default: "Default",
    /**
     * Standard A2 v2 virtual machine size
     */
    Standard_A2_v2: "Standard_A2_v2",
    /**
     * Standard A4 v2 virtual machine size
     */
    Standard_A4_v2: "Standard_A4_v2",
    /**
     * Standard D2s v3 virtual machine size
     */
    Standard_D2s_v3: "Standard_D2s_v3",
    /**
     * Standard D4s v3 virtual machine size
     */
    Standard_D4s_v3: "Standard_D4s_v3",
    /**
     * Standard D8s v3 virtual machine size
     */
    Standard_D8s_v3: "Standard_D8s_v3",
    /**
     * Standard D16s v3 virtual machine size
     */
    Standard_D16s_v3: "Standard_D16s_v3",
    /**
     * Standard D32s v3 virtual machine size
     */
    Standard_D32s_v3: "Standard_D32s_v3",
    /**
     * Standard DS2 v2 virtual machine size
     */
    Standard_DS2_v2: "Standard_DS2_v2",
    /**
     * Standard DS3 v2 virtual machine size
     */
    Standard_DS3_v2: "Standard_DS3_v2",
    /**
     * Standard DS4 v2 virtual machine size
     */
    Standard_DS4_v2: "Standard_DS4_v2",
    /**
     * Standard DS5 v2 virtual machine size
     */
    Standard_DS5_v2: "Standard_DS5_v2",
    /**
     * Standard DS13 v2 virtual machine size
     */
    Standard_DS13_v2: "Standard_DS13_v2",
    /**
     * Standard K8S v1 virtual machine size
     */
    Standard_K8S_v1: "Standard_K8S_v1",
    /**
     * Standard K8S2 v1 virtual machine size
     */
    Standard_K8S2_v1: "Standard_K8S2_v1",
    /**
     * Standard K8S3 v1 virtual machine size
     */
    Standard_K8S3_v1: "Standard_K8S3_v1",
    /**
     * Standard K8S4 v1 virtual machine size
     */
    Standard_K8S4_v1: "Standard_K8S4_v1",
    /**
     * Standard NK6 virtual machine size
     */
    Standard_NK6: "Standard_NK6",
    /**
     * Standard NK12 virtual machine size
     */
    Standard_NK12: "Standard_NK12",
    /**
     * Standard NV6 virtual machine size
     */
    Standard_NV6: "Standard_NV6",
    /**
     * Standard NV12 virtual machine size
     */
    Standard_NV12: "Standard_NV12",
    /**
     * Standard K8S5 v1 virtual machine size
     */
    Standard_K8S5_v1: "Standard_K8S5_v1",
    /**
     * Custom virtual machine size
     */
    Custom: "Custom",
} as const;

/**
 * Enum of VM Sizes
 */
export type VmSizeEnum = (typeof VmSizeEnum)[keyof typeof VmSizeEnum];
