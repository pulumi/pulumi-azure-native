// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AzureHybridBenefit = {
    True: "True",
    False: "False",
    NotApplicable: "NotApplicable",
} as const;

/**
 * Indicates whether Azure Hybrid Benefit is opted in. Default value is false
 */
export type AzureHybridBenefit = (typeof AzureHybridBenefit)[keyof typeof AzureHybridBenefit];

export const Expander = {
    /**
     * Selects the node group that will have the least idle CPU (if tied, unused memory) after scale-up. This is useful when you have different classes of nodes, for example, high CPU or high memory nodes, and only want to expand those when there are pending pods that need a lot of those resources.
     */
    Least_waste: "least-waste",
    /**
     * Selects the node group that would be able to schedule the most pods when scaling up. This is useful when you are using nodeSelector to make sure certain pods land on certain nodes. Note that this won't cause the autoscaler to select bigger nodes vs. smaller, as it can add multiple smaller nodes at once.
     */
    Most_pods: "most-pods",
    /**
     * Selects the node group that has the highest priority assigned by the user. It's configuration is described in more details [here](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/expander/priority/readme.md).
     */
    Priority: "priority",
    /**
     * Used when you don't have a particular need for the node groups to scale differently.
     */
    Random: "random",
} as const;

/**
 * If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
 */
export type Expander = (typeof Expander)[keyof typeof Expander];

export const ExtendedLocationTypes = {
    CustomLocation: "CustomLocation",
} as const;

/**
 * The extended location type. Allowed value: 'CustomLocation'
 */
export type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];

export const NetworkPolicy = {
    Calico: "calico",
} as const;

/**
 * Network policy used for building Kubernetes network. Possible values include: 'calico'.
 */
export type NetworkPolicy = (typeof NetworkPolicy)[keyof typeof NetworkPolicy];

export const OSSKU = {
    /**
     * Use Mariner as the OS for node images.
     */
    CBLMariner: "CBLMariner",
    /**
     * Use Windows2019 as the OS for node images.
     */
    Windows2019: "Windows2019",
    /**
     * Use Windows2022 as the OS for node images.
     */
    Windows2022: "Windows2022",
} as const;

/**
 * Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
 */
export type OSSKU = (typeof OSSKU)[keyof typeof OSSKU];

export const OsType = {
    Linux: "Linux",
    Windows: "Windows",
} as const;

/**
 * OSType to be used to specify OS type for the VMs. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
 */
export type OsType = (typeof OsType)[keyof typeof OsType];
