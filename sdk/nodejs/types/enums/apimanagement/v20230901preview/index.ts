// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AlwaysLog = {
    /**
     * Always log all erroneous request regardless of sampling settings.
     */
    AllErrors: "allErrors",
} as const;

/**
 * Specifies for what type of messages sampling settings should not apply.
 */
export type AlwaysLog = (typeof AlwaysLog)[keyof typeof AlwaysLog];

export const BackendProtocol = {
    /**
     * The Backend is a RESTful service.
     */
    Http: "http",
    /**
     * The Backend is a SOAP service.
     */
    Soap: "soap",
} as const;

/**
 * Backend communication protocol.
 */
export type BackendProtocol = (typeof BackendProtocol)[keyof typeof BackendProtocol];

export const BackendType = {
    /**
     * supports single backend
     */
    Single: "Single",
    /**
     * supports pool backend
     */
    Pool: "Pool",
} as const;

/**
 * Type of the backend. A backend can be either Single or Pool.
 */
export type BackendType = (typeof BackendType)[keyof typeof BackendType];

export const DataMaskingMode = {
    /**
     * Mask the value of an entity.
     */
    Mask: "Mask",
    /**
     * Hide the presence of an entity.
     */
    Hide: "Hide",
} as const;

/**
 * Data masking mode.
 */
export type DataMaskingMode = (typeof DataMaskingMode)[keyof typeof DataMaskingMode];

export const HttpCorrelationProtocol = {
    /**
     * Do not read and inject correlation headers.
     */
    None: "None",
    /**
     * Inject Request-Id and Request-Context headers with request correlation data. See https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/HttpCorrelationProtocol.md.
     */
    Legacy: "Legacy",
    /**
     * Inject Trace Context headers. See https://w3c.github.io/trace-context.
     */
    W3C: "W3C",
} as const;

/**
 * Sets correlation protocol to use for Application Insights diagnostics.
 */
export type HttpCorrelationProtocol = (typeof HttpCorrelationProtocol)[keyof typeof HttpCorrelationProtocol];

export const LoggerType = {
    /**
     * Azure Event Hub as log destination.
     */
    AzureEventHub: "azureEventHub",
    /**
     * Azure Application Insights as log destination.
     */
    ApplicationInsights: "applicationInsights",
    /**
     * Azure Monitor
     */
    AzureMonitor: "azureMonitor",
} as const;

/**
 * Logger type.
 */
export type LoggerType = (typeof LoggerType)[keyof typeof LoggerType];

export const OperationNameFormat = {
    /**
     * API_NAME;rev=API_REVISION - OPERATION_NAME
     */
    Name: "Name",
    /**
     * HTTP_VERB URL
     */
    Url: "Url",
} as const;

/**
 * The format of the Operation Name for Application Insights telemetries. Default is Name.
 */
export type OperationNameFormat = (typeof OperationNameFormat)[keyof typeof OperationNameFormat];

export const SamplingType = {
    /**
     * Fixed-rate sampling.
     */
    Fixed: "fixed",
} as const;

/**
 * Sampling type.
 */
export type SamplingType = (typeof SamplingType)[keyof typeof SamplingType];

export const SkuType = {
    /**
     * Standard SKU of the API gateway.
     */
    Standard: "Standard",
    /**
     * Standard SKU of the API gateway to be used in Workspaces.
     */
    WorkspaceGatewayStandard: "WorkspaceGatewayStandard",
    /**
     * Premium SKU of the API gateway to be used in Workspaces.
     */
    WorkspaceGatewayPremium: "WorkspaceGatewayPremium",
} as const;

/**
 * Name of the Sku.
 */
export type SkuType = (typeof SkuType)[keyof typeof SkuType];

export const Verbosity = {
    /**
     * All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance.
     */
    Verbose: "verbose",
    /**
     * Traces with 'severity' set to 'information' and 'error' will be sent to the logger attached to this diagnostic instance.
     */
    Information: "information",
    /**
     * Only traces with 'severity' set to 'error' will be sent to the logger attached to this diagnostic instance.
     */
    Error: "error",
} as const;

/**
 * The verbosity level applied to traces emitted by trace policies.
 */
export type Verbosity = (typeof Verbosity)[keyof typeof Verbosity];

export const VirtualNetworkType = {
    /**
     * The API Management gateway is not part of any Virtual Network.
     */
    None: "None",
    /**
     * The API Management gateway is part of Virtual Network and it is accessible from Internet.
     */
    External: "External",
    /**
     * The API Management gateway is part of Virtual Network and it is only accessible from within the virtual network.
     */
    Internal: "Internal",
} as const;

/**
 * The type of VPN in which API Management gateway needs to be configured in. 
 */
export type VirtualNetworkType = (typeof VirtualNetworkType)[keyof typeof VirtualNetworkType];
