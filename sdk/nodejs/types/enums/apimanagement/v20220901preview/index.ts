// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ApiType = {
    Http: "http",
    Soap: "soap",
    Websocket: "websocket",
    Graphql: "graphql",
} as const;

/**
 * Type of API.
 */
export type ApiType = (typeof ApiType)[keyof typeof ApiType];

export const BearerTokenSendingMethods = {
    /**
     * Access token will be transmitted in the Authorization header using Bearer schema
     */
    AuthorizationHeader: "authorizationHeader",
    /**
     * Access token will be transmitted as query parameters.
     */
    Query: "query",
} as const;

/**
 * Form of an authorization grant, which the client uses to request the access token.
 */
export type BearerTokenSendingMethods = (typeof BearerTokenSendingMethods)[keyof typeof BearerTokenSendingMethods];

export const ContentFormat = {
    /**
     * The contents are inline and Content type is a WADL document.
     */
    Wadl_xml: "wadl-xml",
    /**
     * The WADL document is hosted on a publicly accessible internet address.
     */
    Wadl_link_json: "wadl-link-json",
    /**
     * The contents are inline and Content Type is a OpenAPI 2.0 JSON Document.
     */
    Swagger_json: "swagger-json",
    /**
     * The OpenAPI 2.0 JSON document is hosted on a publicly accessible internet address.
     */
    Swagger_link_json: "swagger-link-json",
    /**
     * The contents are inline and the document is a WSDL/Soap document.
     */
    Wsdl: "wsdl",
    /**
     * The WSDL document is hosted on a publicly accessible internet address.
     */
    Wsdl_link: "wsdl-link",
    /**
     * The contents are inline and Content Type is a OpenAPI 3.0 YAML Document.
     */
    Openapi: "openapi",
    /**
     * The contents are inline and Content Type is a OpenAPI 3.0 JSON Document.
     */
    Openapi_json: "openapi+json",
    /**
     * The OpenAPI 3.0 YAML document is hosted on a publicly accessible internet address.
     */
    Openapi_link: "openapi-link",
    /**
     * The OpenAPI 3.0 JSON document is hosted on a publicly accessible internet address.
     */
    Openapi_json_link: "openapi+json-link",
    /**
     * The GraphQL API endpoint hosted on a publicly accessible internet address.
     */
    Graphql_link: "graphql-link",
} as const;

/**
 * Format of the Content in which the API is getting imported.
 */
export type ContentFormat = (typeof ContentFormat)[keyof typeof ContentFormat];

export const GroupType = {
    Custom: "custom",
    System: "system",
    External: "external",
} as const;

/**
 * Group type.
 */
export type GroupType = (typeof GroupType)[keyof typeof GroupType];

export const PolicyContentFormat = {
    /**
     * The contents are inline and Content type is an XML document.
     */
    Xml: "xml",
    /**
     * The policy XML document is hosted on a HTTP endpoint accessible from the API Management service.
     */
    Xml_link: "xml-link",
    /**
     * The contents are inline and Content type is a non XML encoded policy document.
     */
    Rawxml: "rawxml",
    /**
     * The policy document is not XML encoded and is hosted on a HTTP endpoint accessible from the API Management service.
     */
    Rawxml_link: "rawxml-link",
} as const;

/**
 * Format of the policyContent.
 */
export type PolicyContentFormat = (typeof PolicyContentFormat)[keyof typeof PolicyContentFormat];

export const PolicyFragmentContentFormat = {
    /**
     * The contents are inline and Content type is an XML document.
     */
    Xml: "xml",
    /**
     * The contents are inline and Content type is a non XML encoded policy document.
     */
    Rawxml: "rawxml",
} as const;

/**
 * Format of the policy fragment content.
 */
export type PolicyFragmentContentFormat = (typeof PolicyFragmentContentFormat)[keyof typeof PolicyFragmentContentFormat];

export const ProductState = {
    NotPublished: "notPublished",
    Published: "published",
} as const;

/**
 * whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
 */
export type ProductState = (typeof ProductState)[keyof typeof ProductState];

export const Protocol = {
    Http: "http",
    Https: "https",
    Ws: "ws",
    Wss: "wss",
} as const;

export type Protocol = (typeof Protocol)[keyof typeof Protocol];

export const SchemaType = {
    /**
     * XML schema type.
     */
    Xml: "xml",
    /**
     * Json schema type.
     */
    Json: "json",
} as const;

/**
 * Schema Type. Immutable.
 */
export type SchemaType = (typeof SchemaType)[keyof typeof SchemaType];

export const SoapApiType = {
    /**
     * Imports a SOAP API having a RESTful front end.
     */
    SoapToRest: "http",
    /**
     * Imports the SOAP API having a SOAP front end.
     */
    SoapPassThrough: "soap",
    /**
     * Imports the API having a Websocket front end.
     */
    WebSocket: "websocket",
    /**
     * Imports the API having a GraphQL front end.
     */
    GraphQL: "graphql",
} as const;

/**
 * Type of API to create. 
 *  * `http` creates a REST API 
 *  * `soap` creates a SOAP pass-through API  
 *  * `websocket` creates websocket API 
 *  * `graphql` creates GraphQL API.
 */
export type SoapApiType = (typeof SoapApiType)[keyof typeof SoapApiType];

export const SubscriptionState = {
    Suspended: "suspended",
    Active: "active",
    Expired: "expired",
    Submitted: "submitted",
    Rejected: "rejected",
    Cancelled: "cancelled",
} as const;

/**
 * Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
 */
export type SubscriptionState = (typeof SubscriptionState)[keyof typeof SubscriptionState];

export const TranslateRequiredQueryParametersConduct = {
    /**
     * Translates required query parameters to template ones. Is a default value
     */
    Template: "template",
    /**
     * Leaves required query parameters as they are (no translation done).
     */
    Query: "query",
} as const;

/**
 * Strategy of translating required query parameters to template ones. By default has value 'template'. Possible values: 'template', 'query'
 */
export type TranslateRequiredQueryParametersConduct = (typeof TranslateRequiredQueryParametersConduct)[keyof typeof TranslateRequiredQueryParametersConduct];

export const VersioningScheme = {
    /**
     * The API Version is passed in a path segment.
     */
    Segment: "Segment",
    /**
     * The API Version is passed in a query parameter.
     */
    Query: "Query",
    /**
     * The API Version is passed in a HTTP header.
     */
    Header: "Header",
} as const;

/**
 * An value that determines where the API Version identifier will be located in a HTTP request.
 */
export type VersioningScheme = (typeof VersioningScheme)[keyof typeof VersioningScheme];
