// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AcceptGrowCapacityPoolForShortTermCloneSplit = {
    /**
     * Auto grow capacity pool for short term clone split is accepted.
     */
    Accepted: "Accepted",
    /**
     * Auto grow capacity pool for short term clone split is declined. Short term clone volume creation will not be allowed, to create short term clone volume accept auto grow capacity pool.
     */
    Declined: "Declined",
} as const;

/**
 * While auto splitting the short term clone volume, if the parent pool does not have enough space to accommodate the volume after split, it will be automatically resized, which will lead to increased billing. To accept capacity pool size auto grow and create a short term clone volume, set the property as accepted.
 */
export type AcceptGrowCapacityPoolForShortTermCloneSplit = (typeof AcceptGrowCapacityPoolForShortTermCloneSplit)[keyof typeof AcceptGrowCapacityPoolForShortTermCloneSplit];

export const ApplicationType = {
    SAP_HANA: "SAP-HANA",
    ORACLE: "ORACLE",
} as const;

/**
 * Application Type
 */
export type ApplicationType = (typeof ApplicationType)[keyof typeof ApplicationType];

export const AvsDataStore = {
    /**
     * avsDataStore is enabled
     */
    Enabled: "Enabled",
    /**
     * avsDataStore is disabled
     */
    Disabled: "Disabled",
} as const;

/**
 * Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
 */
export type AvsDataStore = (typeof AvsDataStore)[keyof typeof AvsDataStore];

export const ChownMode = {
    Restricted: "Restricted",
    Unrestricted: "Unrestricted",
} as const;

/**
 * This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.
 */
export type ChownMode = (typeof ChownMode)[keyof typeof ChownMode];

export const CoolAccessRetrievalPolicy = {
    Default: "Default",
    OnRead: "OnRead",
    Never: "Never",
} as const;

/**
 * coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are: 
 *  Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
 *  OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
 *  Never - No client-driven data is pulled from cool tier to standard storage.
 */
export type CoolAccessRetrievalPolicy = (typeof CoolAccessRetrievalPolicy)[keyof typeof CoolAccessRetrievalPolicy];

export const EnableSubvolumes = {
    /**
     * subvolumes are enabled
     */
    Enabled: "Enabled",
    /**
     * subvolumes are not enabled
     */
    Disabled: "Disabled",
} as const;

/**
 * Flag indicating whether subvolume operations are enabled on the volume
 */
export type EnableSubvolumes = (typeof EnableSubvolumes)[keyof typeof EnableSubvolumes];

export const EncryptionKeySource = {
    /**
     * Microsoft-managed key encryption
     */
    Microsoft_NetApp: "Microsoft.NetApp",
    /**
     * Customer-managed key encryption
     */
    Microsoft_KeyVault: "Microsoft.KeyVault",
} as const;

/**
 * Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'
 */
export type EncryptionKeySource = (typeof EncryptionKeySource)[keyof typeof EncryptionKeySource];

export const EncryptionType = {
    /**
     * EncryptionType Single, volumes will use single encryption at rest
     */
    Single: "Single",
    /**
     * EncryptionType Double, volumes will use double encryption at rest
     */
    Double: "Double",
} as const;

/**
 * Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
 */
export type EncryptionType = (typeof EncryptionType)[keyof typeof EncryptionType];

export const EndpointType = {
    Src: "src",
    Dst: "dst",
} as const;

/**
 * Indicates whether the local volume is the source or destination for the Volume Replication
 */
export type EndpointType = (typeof EndpointType)[keyof typeof EndpointType];

export const KeySource = {
    /**
     * Microsoft-managed key encryption
     */
    Microsoft_NetApp: "Microsoft.NetApp",
    /**
     * Customer-managed key encryption
     */
    Microsoft_KeyVault: "Microsoft.KeyVault",
} as const;

/**
 * The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault
 */
export type KeySource = (typeof KeySource)[keyof typeof KeySource];

export const ManagedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned",
} as const;

/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];

export const NetworkFeatures = {
    /**
     * Basic network features.
     */
    Basic: "Basic",
    /**
     * Standard network features.
     */
    Standard: "Standard",
    /**
     * Updating from Basic to Standard network features.
     */
    Basic_Standard: "Basic_Standard",
    /**
     * Updating from Standard to Basic network features.
     */
    Standard_Basic: "Standard_Basic",
} as const;

/**
 * The original value of the network features type available to the volume at the time it was created.
 */
export type NetworkFeatures = (typeof NetworkFeatures)[keyof typeof NetworkFeatures];

export const QosType = {
    /**
     * qos type Auto
     */
    Auto: "Auto",
    /**
     * qos type Manual
     */
    Manual: "Manual",
} as const;

/**
 * The qos type of the pool
 */
export type QosType = (typeof QosType)[keyof typeof QosType];

export const ReplicationSchedule = {
    ReplicationSchedule_10minutely: "_10minutely",
    Hourly: "hourly",
    Daily: "daily",
} as const;

/**
 * Schedule
 */
export type ReplicationSchedule = (typeof ReplicationSchedule)[keyof typeof ReplicationSchedule];

export const SecurityStyle = {
    Ntfs: "ntfs",
    Unix: "unix",
} as const;

/**
 * The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
 */
export type SecurityStyle = (typeof SecurityStyle)[keyof typeof SecurityStyle];

export const ServiceLevel = {
    /**
     * Standard service level
     */
    Standard: "Standard",
    /**
     * Premium service level
     */
    Premium: "Premium",
    /**
     * Ultra service level
     */
    Ultra: "Ultra",
    /**
     * Zone redundant storage service level
     */
    StandardZRS: "StandardZRS",
    /**
     * Flexible service level
     */
    Flexible: "Flexible",
} as const;

/**
 * The service level of the file system
 */
export type ServiceLevel = (typeof ServiceLevel)[keyof typeof ServiceLevel];

export const SmbAccessBasedEnumeration = {
    /**
     * smbAccessBasedEnumeration share setting is disabled
     */
    Disabled: "Disabled",
    /**
     * smbAccessBasedEnumeration share setting is enabled
     */
    Enabled: "Enabled",
} as const;

/**
 * Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume
 */
export type SmbAccessBasedEnumeration = (typeof SmbAccessBasedEnumeration)[keyof typeof SmbAccessBasedEnumeration];

export const SmbNonBrowsable = {
    /**
     * smbNonBrowsable share setting is disabled
     */
    Disabled: "Disabled",
    /**
     * smbNonBrowsable share setting is enabled
     */
    Enabled: "Enabled",
} as const;

/**
 * Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume
 */
export type SmbNonBrowsable = (typeof SmbNonBrowsable)[keyof typeof SmbNonBrowsable];

export const Type = {
    /**
     * Default user quota
     */
    DefaultUserQuota: "DefaultUserQuota",
    /**
     * Default group quota
     */
    DefaultGroupQuota: "DefaultGroupQuota",
    /**
     * Individual user quota
     */
    IndividualUserQuota: "IndividualUserQuota",
    /**
     * Individual group quota
     */
    IndividualGroupQuota: "IndividualGroupQuota",
} as const;

/**
 * Type of quota
 */
export type Type = (typeof Type)[keyof typeof Type];

export const VolumeLanguage = {
    /**
     * Posix with UTF-8
     */
    C_utf_8: "c.utf-8",
    /**
     * UTF-8 with 4 byte character support
     */
    Utf8mb4: "utf8mb4",
    /**
     * Arabic - Deprecated
     */
    Ar: "ar",
    /**
     * Arabic with UTF-8
     */
    Ar_utf_8: "ar.utf-8",
    /**
     * Croatian - Deprecated
     */
    Hr: "hr",
    /**
     * Croatian with UTF-8
     */
    Hr_utf_8: "hr.utf-8",
    /**
     * Czech - Deprecated
     */
    Cs: "cs",
    /**
     * Czech with UTF-8
     */
    Cs_utf_8: "cs.utf-8",
    /**
     * Danish - Deprecated
     */
    Da: "da",
    /**
     * Danish with UTF-8
     */
    Da_utf_8: "da.utf-8",
    /**
     * Dutch - Deprecated
     */
    Nl: "nl",
    /**
     * Dutch with UTF-8
     */
    Nl_utf_8: "nl.utf-8",
    /**
     * English - Deprecated
     */
    En: "en",
    /**
     * English with UTF-8
     */
    En_utf_8: "en.utf-8",
    /**
     * Finnish - Deprecated
     */
    Fi: "fi",
    /**
     * Finnish with UTF-8
     */
    Fi_utf_8: "fi.utf-8",
    /**
     * French - Deprecated
     */
    Fr: "fr",
    /**
     * French with UTF-8
     */
    Fr_utf_8: "fr.utf-8",
    /**
     * German - Deprecated
     */
    De: "de",
    /**
     * German with UTF-8
     */
    De_utf_8: "de.utf-8",
    /**
     * Hebrew - Deprecated
     */
    He: "he",
    /**
     * Hebrew with UTF-8
     */
    He_utf_8: "he.utf-8",
    /**
     * Hungarian - Deprecated
     */
    Hu: "hu",
    /**
     * Hungarian with UTF-8
     */
    Hu_utf_8: "hu.utf-8",
    /**
     * Italian - Deprecated
     */
    It: "it",
    /**
     * Italian with UTF-8
     */
    It_utf_8: "it.utf-8",
    /**
     * Japanese euc-j - Deprecated
     */
    Ja: "ja",
    /**
     * Japanese euc-j with UTF-8
     */
    Ja_utf_8: "ja.utf-8",
    /**
     * Japanese euc-j - Deprecated
     */
    Ja_v1: "ja-v1",
    /**
     * Japanese euc-j with UTF-8
     */
    Ja_v1_utf_8: "ja-v1.utf-8",
    /**
     * Japanese pck
     */
    Ja_jp_pck: "ja-jp.pck",
    /**
     * Japanese pck with UTF-8 - Deprecated
     */
    Ja_jp_pck_utf_8: "ja-jp.pck.utf-8",
    /**
     * Japanese cp932
     */
    Ja_jp_932: "ja-jp.932",
    /**
     * Japanese cp932 with UTF-8 - Deprecated
     */
    Ja_jp_932_utf_8: "ja-jp.932.utf-8",
    /**
     * Japanese pck - sjis
     */
    Ja_jp_pck_v2: "ja-jp.pck-v2",
    /**
     * Japanese pck - sjis with UTF-8 - Deprecated
     */
    Ja_jp_pck_v2_utf_8: "ja-jp.pck-v2.utf-8",
    /**
     * Korean - Deprecated
     */
    Ko: "ko",
    /**
     * Korean with UTF-8
     */
    Ko_utf_8: "ko.utf-8",
    /**
     * Norwegian - Deprecated
     */
    No: "no",
    /**
     * Norwegian with UTF-8
     */
    No_utf_8: "no.utf-8",
    /**
     * Polish - Deprecated
     */
    Pl: "pl",
    /**
     * Polish with UTF-8
     */
    Pl_utf_8: "pl.utf-8",
    /**
     * Portuguese - Deprecated
     */
    Pt: "pt",
    /**
     * Portuguese with UTF-8
     */
    Pt_utf_8: "pt.utf-8",
    /**
     * Posix - Deprecated
     */
    C: "c",
    /**
     * Romanian - Deprecated
     */
    Ro: "ro",
    /**
     * Romanian with UTF-8
     */
    Ro_utf_8: "ro.utf-8",
    /**
     * Russian - Deprecated
     */
    Ru: "ru",
    /**
     * Russian with UTF-8
     */
    Ru_utf_8: "ru.utf-8",
    /**
     * Simplified Chinese - Deprecated
     */
    Zh: "zh",
    /**
     * Simplified Chinese with UTF-8
     */
    Zh_utf_8: "zh.utf-8",
    /**
     * Simplified gbk Chinese
     */
    Zh_gbk: "zh.gbk",
    /**
     * Simplified gbk Chinese with UTF-8 - Deprecated
     */
    Zh_gbk_utf_8: "zh.gbk.utf-8",
    /**
     * Traditional Chinese BIG 5
     */
    Zh_tw_big5: "zh-tw.big5",
    /**
     * Traditional Chinese BIG 5 with UTF-8 - Deprecated
     */
    Zh_tw_big5_utf_8: "zh-tw.big5.utf-8",
    /**
     * Traditional Chinese EUC-TW
     */
    Zh_tw: "zh-tw",
    /**
     * Traditional Chinese EUC-TW with UTF-8 - Deprecated
     */
    Zh_tw_utf_8: "zh-tw.utf-8",
    /**
     * Slovak - Deprecated
     */
    Sk: "sk",
    /**
     * Slovak with UTF-8
     */
    Sk_utf_8: "sk.utf-8",
    /**
     * Slovenian - Deprecated
     */
    Sl: "sl",
    /**
     * Slovenian with UTF-8
     */
    Sl_utf_8: "sl.utf-8",
    /**
     * Spanish - Deprecated
     */
    Es: "es",
    /**
     * Spanish with UTF-8
     */
    Es_utf_8: "es.utf-8",
    /**
     * Swedish - Deprecated
     */
    Sv: "sv",
    /**
     * Swedish with UTF-8
     */
    Sv_utf_8: "sv.utf-8",
    /**
     * Turkish - Deprecated
     */
    Tr: "tr",
    /**
     * Turkish with UTF-8
     */
    Tr_utf_8: "tr.utf-8",
    /**
     * US English - Deprecated
     */
    En_us: "en-us",
    /**
     * US English with UTF-8
     */
    En_us_utf_8: "en-us.utf-8",
} as const;

/**
 * Language supported for volume.
 */
export type VolumeLanguage = (typeof VolumeLanguage)[keyof typeof VolumeLanguage];
