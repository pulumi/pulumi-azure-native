// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AzureFileShareAccessTier = {
    Cool: "Cool",
    Hot: "Hot",
    Premium: "Premium",
    TransactionOptimized: "TransactionOptimized",
} as const;

/**
 * Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. Learn more at: https://learn.microsoft.com/en-us/rest/api/storagerp/file-shares/create?tabs=HTTP#shareaccesstier
 */
export type AzureFileShareAccessTier = (typeof AzureFileShareAccessTier)[keyof typeof AzureFileShareAccessTier];

export const AzureFileShareAccessType = {
    Shared: "Shared",
    Exclusive: "Exclusive",
} as const;

/**
 *  Specifies how Container Groups can access the Azure file share i.e. all CG will share same Azure file share or going to have exclusive file share.
 */
export type AzureFileShareAccessType = (typeof AzureFileShareAccessType)[keyof typeof AzureFileShareAccessType];

export const ContainerGroupIpAddressType = {
    Public: "Public",
    Private: "Private",
} as const;

/**
 * Specifies if the IP is exposed to the public internet or private VNET.
 */
export type ContainerGroupIpAddressType = (typeof ContainerGroupIpAddressType)[keyof typeof ContainerGroupIpAddressType];

export const ContainerGroupNetworkProtocol = {
    TCP: "TCP",
    UDP: "UDP",
} as const;

/**
 * The protocol associated with the port.
 */
export type ContainerGroupNetworkProtocol = (typeof ContainerGroupNetworkProtocol)[keyof typeof ContainerGroupNetworkProtocol];

export const ContainerGroupPriority = {
    Regular: "Regular",
    Spot: "Spot",
} as const;

/**
 * The priority of the container group.
 */
export type ContainerGroupPriority = (typeof ContainerGroupPriority)[keyof typeof ContainerGroupPriority];

export const ContainerGroupRestartPolicy = {
    Always: "Always",
    OnFailure: "OnFailure",
    Never: "Never",
} as const;

/**
 * Restart policy for all containers within the container group. 
 * - `Always` Always restart
 * - `OnFailure` Restart on failure
 * - `Never` Never restart
 */
export type ContainerGroupRestartPolicy = (typeof ContainerGroupRestartPolicy)[keyof typeof ContainerGroupRestartPolicy];

export const ContainerGroupSku = {
    NotSpecified: "NotSpecified",
    Standard: "Standard",
    Dedicated: "Dedicated",
    Confidential: "Confidential",
} as const;

/**
 * The SKU for a container group.
 */
export type ContainerGroupSku = (typeof ContainerGroupSku)[keyof typeof ContainerGroupSku];

export const ContainerNetworkProtocol = {
    TCP: "TCP",
    UDP: "UDP",
} as const;

/**
 * The protocol associated with the port.
 */
export type ContainerNetworkProtocol = (typeof ContainerNetworkProtocol)[keyof typeof ContainerNetworkProtocol];

export const DnsNameLabelReusePolicy = {
    Unsecure: "Unsecure",
    TenantReuse: "TenantReuse",
    SubscriptionReuse: "SubscriptionReuse",
    ResourceGroupReuse: "ResourceGroupReuse",
    Noreuse: "Noreuse",
} as const;

/**
 * The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label cannot be reused within the same resource group, subscription, or tenant.
 */
export type DnsNameLabelReusePolicy = (typeof DnsNameLabelReusePolicy)[keyof typeof DnsNameLabelReusePolicy];

export const GpuSku = {
    K80: "K80",
    P100: "P100",
    V100: "V100",
} as const;

/**
 * The SKU of the GPU resource.
 */
export type GpuSku = (typeof GpuSku)[keyof typeof GpuSku];

export const IdentityAccessLevel = {
    All: "All",
    System: "System",
    User: "User",
} as const;

/**
 * The default access level.
 */
export type IdentityAccessLevel = (typeof IdentityAccessLevel)[keyof typeof IdentityAccessLevel];

export const LogAnalyticsLogType = {
    ContainerInsights: "ContainerInsights",
    ContainerInstanceLogs: "ContainerInstanceLogs",
} as const;

/**
 * The log type to be used.
 */
export type LogAnalyticsLogType = (typeof LogAnalyticsLogType)[keyof typeof LogAnalyticsLogType];

export const NGroupUpdateMode = {
    Manual: "Manual",
    Rolling: "Rolling",
} as const;

export type NGroupUpdateMode = (typeof NGroupUpdateMode)[keyof typeof NGroupUpdateMode];

export const OperatingSystemTypes = {
    Windows: "Windows",
    Linux: "Linux",
} as const;

/**
 * The operating system type required by the containers in the container group.
 */
export type OperatingSystemTypes = (typeof OperatingSystemTypes)[keyof typeof OperatingSystemTypes];

export const Priority = {
    Regular: "Regular",
    Spot: "Spot",
} as const;

/**
 * The priority of the container group.
 */
export type Priority = (typeof Priority)[keyof typeof Priority];

export const ResourceIdentityType = {
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned",
    None: "None",
} as const;

/**
 * The type of identity used for the NGroup. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the NGroup.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];

export const Scheme = {
    Http: "http",
    Https: "https",
} as const;

/**
 * The scheme.
 */
export type Scheme = (typeof Scheme)[keyof typeof Scheme];
