// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AgentPoolMode = {
    /**
     * System agent pools are primarily for hosting critical system pods such as CoreDNS and metrics-server. System agent pools osType must be Linux. System agent pools VM SKU must have at least 2vCPUs and 4GB of memory.
     */
    System: "System",
    /**
     * User agent pools are primarily for hosting your application pods.
     */
    User: "User",
} as const;

/**
 * A cluster must have at least one 'System' Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools
 */
export type AgentPoolMode = (typeof AgentPoolMode)[keyof typeof AgentPoolMode];

export const AgentPoolType = {
    /**
     * Create an Agent Pool backed by a Virtual Machine Scale Set.
     */
    VirtualMachineScaleSets: "VirtualMachineScaleSets",
    /**
     * Use of this is strongly discouraged.
     */
    AvailabilitySet: "AvailabilitySet",
} as const;

/**
 * The type of Agent Pool.
 */
export type AgentPoolType = (typeof AgentPoolType)[keyof typeof AgentPoolType];

export const BackendPoolType = {
    /**
     * The type of the managed inbound Load Balancer BackendPool. https://cloud-provider-azure.sigs.k8s.io/topics/loadbalancer/#configure-load-balancer-backend.
     */
    NodeIPConfiguration: "NodeIPConfiguration",
    /**
     * The type of the managed inbound Load Balancer BackendPool. https://cloud-provider-azure.sigs.k8s.io/topics/loadbalancer/#configure-load-balancer-backend.
     */
    NodeIP: "NodeIP",
} as const;

/**
 * The type of the managed inbound Load Balancer BackendPool.
 */
export type BackendPoolType = (typeof BackendPoolType)[keyof typeof BackendPoolType];

export const Code = {
    /**
     * The cluster is running.
     */
    Running: "Running",
    /**
     * The cluster is stopped.
     */
    Stopped: "Stopped",
} as const;

/**
 * Tells whether the cluster is Running or Stopped
 */
export type Code = (typeof Code)[keyof typeof Code];

export const ConnectionStatus = {
    Pending: "Pending",
    Approved: "Approved",
    Rejected: "Rejected",
    Disconnected: "Disconnected",
} as const;

/**
 * The private link service connection status.
 */
export type ConnectionStatus = (typeof ConnectionStatus)[keyof typeof ConnectionStatus];

export const ControlledValues = {
    /**
     * Autoscaler will control resource requests and limits.
     */
    RequestsAndLimits: "RequestsAndLimits",
    /**
     * Autoscaler will control resource requests only.
     */
    RequestsOnly: "RequestsOnly",
} as const;

/**
 * Controls which resource value autoscaler will change. Default value is RequestsAndLimits.
 */
export type ControlledValues = (typeof ControlledValues)[keyof typeof ControlledValues];

export const EbpfDataplane = {
    /**
     * Use Cilium for networking in the Kubernetes cluster.
     */
    Cilium: "cilium",
} as const;

/**
 * The eBPF dataplane used for building the Kubernetes network.
 */
export type EbpfDataplane = (typeof EbpfDataplane)[keyof typeof EbpfDataplane];

export const Expander = {
    /**
     * Selects the node group that will have the least idle CPU (if tied, unused memory) after scale-up. This is useful when you have different classes of nodes, for example, high CPU or high memory nodes, and only want to expand those when there are pending pods that need a lot of those resources.
     */
    Least_waste: "least-waste",
    /**
     * Selects the node group that would be able to schedule the most pods when scaling up. This is useful when you are using nodeSelector to make sure certain pods land on certain nodes. Note that this won't cause the autoscaler to select bigger nodes vs. smaller, as it can add multiple smaller nodes at once.
     */
    Most_pods: "most-pods",
    /**
     * Selects the node group that has the highest priority assigned by the user. It's configuration is described in more details [here](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/expander/priority/readme.md).
     */
    Priority: "priority",
    /**
     * Used when you don't have a particular need for the node groups to scale differently.
     */
    Random: "random",
} as const;

/**
 * If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
 */
export type Expander = (typeof Expander)[keyof typeof Expander];

export const ExtendedLocationTypes = {
    EdgeZone: "EdgeZone",
} as const;

/**
 * The type of the extended location.
 */
export type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];

export const GPUInstanceProfile = {
    MIG1g: "MIG1g",
    MIG2g: "MIG2g",
    MIG3g: "MIG3g",
    MIG4g: "MIG4g",
    MIG7g: "MIG7g",
} as const;

/**
 * GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
 */
export type GPUInstanceProfile = (typeof GPUInstanceProfile)[keyof typeof GPUInstanceProfile];

export const IpFamily = {
    IPv4: "IPv4",
    IPv6: "IPv6",
} as const;

/**
 * The IP version to use for cluster networking and IP assignment.
 */
export type IpFamily = (typeof IpFamily)[keyof typeof IpFamily];

export const IpvsScheduler = {
    /**
     * Round Robin
     */
    RoundRobin: "RoundRobin",
    /**
     * Least Connection
     */
    LeastConnection: "LeastConnection",
} as const;

/**
 * IPVS scheduler, for more information please see http://www.linuxvirtualserver.org/docs/scheduling.html.
 */
export type IpvsScheduler = (typeof IpvsScheduler)[keyof typeof IpvsScheduler];

export const KeyVaultNetworkAccessTypes = {
    Public: "Public",
    Private: "Private",
} as const;

/**
 * Network access of key vault. The possible values are `Public` and `Private`. `Public` means the key vault allows public access from all networks. `Private` means the key vault disables public access and enables private link. The default value is `Public`.
 */
export type KeyVaultNetworkAccessTypes = (typeof KeyVaultNetworkAccessTypes)[keyof typeof KeyVaultNetworkAccessTypes];

export const KubeletDiskType = {
    /**
     * Kubelet will use the OS disk for its data.
     */
    OS: "OS",
    /**
     * Kubelet will use the temporary disk for its data.
     */
    Temporary: "Temporary",
} as const;

/**
 * Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage.
 */
export type KubeletDiskType = (typeof KubeletDiskType)[keyof typeof KubeletDiskType];

export const Level = {
    Off: "Off",
    Warning: "Warning",
    Enforcement: "Enforcement",
} as const;

/**
 * The guardrails level to be used. By default, Guardrails is enabled for all namespaces except those that AKS excludes via systemExcludedNamespaces
 */
export type Level = (typeof Level)[keyof typeof Level];

export const LicenseType = {
    /**
     * No additional licensing is applied.
     */
    None: "None",
    /**
     * Enables Azure Hybrid User Benefits for Windows VMs.
     */
    Windows_Server: "Windows_Server",
} as const;

/**
 * The license type to use for Windows VMs. See [Azure Hybrid User Benefits](https://azure.microsoft.com/pricing/hybrid-benefit/faq/) for more details.
 */
export type LicenseType = (typeof LicenseType)[keyof typeof LicenseType];

export const LoadBalancerSku = {
    /**
     * Use a a standard Load Balancer. This is the recommended Load Balancer SKU. For more information about on working with the load balancer in the managed cluster, see the [standard Load Balancer](https://docs.microsoft.com/azure/aks/load-balancer-standard) article.
     */
    Standard: "standard",
    /**
     * Use a basic Load Balancer with limited functionality.
     */
    Basic: "basic",
} as const;

/**
 * The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs.
 */
export type LoadBalancerSku = (typeof LoadBalancerSku)[keyof typeof LoadBalancerSku];

export const ManagedClusterSKUName = {
    Basic: "Basic",
} as const;

/**
 * The name of a managed cluster SKU.
 */
export type ManagedClusterSKUName = (typeof ManagedClusterSKUName)[keyof typeof ManagedClusterSKUName];

export const ManagedClusterSKUTier = {
    /**
     * Guarantees 99.95% availability of the Kubernetes API server endpoint for clusters that use Availability Zones and 99.9% of availability for clusters that don't use Availability Zones.
     */
    Paid: "Paid",
    /**
     * No guaranteed SLA, no additional charges. Free tier clusters have an SLO of 99.5%.
     */
    Free: "Free",
} as const;

/**
 * If not specified, the default is 'Free'. See [uptime SLA](https://docs.microsoft.com/azure/aks/uptime-sla) for more details.
 */
export type ManagedClusterSKUTier = (typeof ManagedClusterSKUTier)[keyof typeof ManagedClusterSKUTier];

export const Mode = {
    /**
     * IPTables proxy mode
     */
    IPTABLES: "IPTABLES",
    /**
     * IPVS proxy mode. Must be using Kubernetes version >= 1.22.
     */
    IPVS: "IPVS",
} as const;

/**
 * Specify which proxy mode to use ('IPTABLES' or 'IPVS')
 */
export type Mode = (typeof Mode)[keyof typeof Mode];

export const NetworkMode = {
    /**
     * No bridge is created. Intra-VM Pod to Pod communication is through IP routes created by Azure CNI. See [Transparent Mode](https://docs.microsoft.com/azure/aks/faq#transparent-mode) for more information.
     */
    Transparent: "transparent",
    /**
     * This is no longer supported
     */
    Bridge: "bridge",
} as const;

/**
 * This cannot be specified if networkPlugin is anything other than 'azure'.
 */
export type NetworkMode = (typeof NetworkMode)[keyof typeof NetworkMode];

export const NetworkPlugin = {
    /**
     * Use the Azure CNI network plugin. See [Azure CNI (advanced) networking](https://docs.microsoft.com/azure/aks/concepts-network#azure-cni-advanced-networking) for more information.
     */
    Azure: "azure",
    /**
     * Use the Kubenet network plugin. See [Kubenet (basic) networking](https://docs.microsoft.com/azure/aks/concepts-network#kubenet-basic-networking) for more information.
     */
    Kubenet: "kubenet",
    /**
     * Do not use a network plugin. A custom CNI will need to be installed after cluster creation for networking functionality.
     */
    None: "none",
} as const;

/**
 * Network plugin used for building the Kubernetes network.
 */
export type NetworkPlugin = (typeof NetworkPlugin)[keyof typeof NetworkPlugin];

export const NetworkPluginMode = {
    /**
     * Pods are given IPs from the PodCIDR address space but use Azure Routing Domains rather than Kubenet reference plugins host-local and bridge.
     */
    Overlay: "Overlay",
} as const;

/**
 * Network plugin mode used for building the Kubernetes network.
 */
export type NetworkPluginMode = (typeof NetworkPluginMode)[keyof typeof NetworkPluginMode];

export const NetworkPolicy = {
    /**
     * Use Calico network policies. See [differences between Azure and Calico policies](https://docs.microsoft.com/azure/aks/use-network-policies#differences-between-azure-and-calico-policies-and-their-capabilities) for more information.
     */
    Calico: "calico",
    /**
     * Use Azure network policies. See [differences between Azure and Calico policies](https://docs.microsoft.com/azure/aks/use-network-policies#differences-between-azure-and-calico-policies-and-their-capabilities) for more information.
     */
    Azure: "azure",
} as const;

/**
 * Network policy used for building the Kubernetes network.
 */
export type NetworkPolicy = (typeof NetworkPolicy)[keyof typeof NetworkPolicy];

export const OSDiskType = {
    /**
     * Azure replicates the operating system disk for a virtual machine to Azure storage to avoid data loss should the VM need to be relocated to another host. Since containers aren't designed to have local state persisted, this behavior offers limited value while providing some drawbacks, including slower node provisioning and higher read/write latency.
     */
    Managed: "Managed",
    /**
     * Ephemeral OS disks are stored only on the host machine, just like a temporary disk. This provides lower read/write latency, along with faster node scaling and cluster upgrades.
     */
    Ephemeral: "Ephemeral",
} as const;

/**
 * The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
 */
export type OSDiskType = (typeof OSDiskType)[keyof typeof OSDiskType];

export const OSSKU = {
    Ubuntu: "Ubuntu",
    CBLMariner: "CBLMariner",
    Mariner: "Mariner",
    Windows2019: "Windows2019",
    Windows2022: "Windows2022",
} as const;

/**
 * Specifies the OS SKU used by the agent pool. If not specified, the default is Ubuntu if OSType=Linux or Windows2019 if OSType=Windows. And the default Windows OSSKU will be changed to Windows2022 after Windows2019 is deprecated.
 */
export type OSSKU = (typeof OSSKU)[keyof typeof OSSKU];

export const OSType = {
    /**
     * Use Linux.
     */
    Linux: "Linux",
    /**
     * Use Windows.
     */
    Windows: "Windows",
} as const;

/**
 * The operating system type. The default is Linux.
 */
export type OSType = (typeof OSType)[keyof typeof OSType];

export const OutboundType = {
    /**
     * The load balancer is used for egress through an AKS assigned public IP. This supports Kubernetes services of type 'loadBalancer'. For more information see [outbound type loadbalancer](https://docs.microsoft.com/azure/aks/egress-outboundtype#outbound-type-of-loadbalancer).
     */
    LoadBalancer: "loadBalancer",
    /**
     * Egress paths must be defined by the user. This is an advanced scenario and requires proper network configuration. For more information see [outbound type userDefinedRouting](https://docs.microsoft.com/azure/aks/egress-outboundtype#outbound-type-of-userdefinedrouting).
     */
    UserDefinedRouting: "userDefinedRouting",
    /**
     * The AKS-managed NAT gateway is used for egress.
     */
    ManagedNATGateway: "managedNATGateway",
    /**
     * The user-assigned NAT gateway associated to the cluster subnet is used for egress. This is an advanced scenario and requires proper network configuration.
     */
    UserAssignedNATGateway: "userAssignedNATGateway",
} as const;

/**
 * This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
 */
export type OutboundType = (typeof OutboundType)[keyof typeof OutboundType];

export const Protocol = {
    /**
     * TCP protocol.
     */
    TCP: "TCP",
    /**
     * UDP protocol.
     */
    UDP: "UDP",
} as const;

/**
 * The network protocol of the port.
 */
export type Protocol = (typeof Protocol)[keyof typeof Protocol];

export const PublicNetworkAccess = {
    /**
     * Inbound/Outbound to the managedCluster is allowed.
     */
    Enabled: "Enabled",
    /**
     * Inbound traffic to managedCluster is disabled, traffic from managedCluster is allowed.
     */
    Disabled: "Disabled",
    /**
     * Inbound/Outbound traffic is managed by Microsoft.Network/NetworkSecurityPerimeters.
     */
    SecuredByPerimeter: "SecuredByPerimeter",
} as const;

/**
 * Allow or deny public network access for AKS
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];

export const ResourceIdentityType = {
    /**
     * Use an implicitly created system assigned managed identity to manage cluster resources. Master components in the control plane such as kube-controller-manager will use the system assigned managed identity to manipulate Azure resources.
     */
    SystemAssigned: "SystemAssigned",
    /**
     * Use a user-specified identity to manage cluster resources. Master components in the control plane such as kube-controller-manager will use the specified user assigned managed identity to manipulate Azure resources.
     */
    UserAssigned: "UserAssigned",
    /**
     * Do not use a managed identity for the Managed Cluster, service principal will be used instead.
     */
    None: "None",
} as const;

/**
 * For more information see [use managed identities in AKS](https://docs.microsoft.com/azure/aks/use-managed-identity).
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];

export const ScaleDownMode = {
    /**
     * Create new instances during scale up and remove instances during scale down.
     */
    Delete: "Delete",
    /**
     * Attempt to start deallocated instances (if they exist) during scale up and deallocate instances during scale down.
     */
    Deallocate: "Deallocate",
} as const;

/**
 * This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete.
 */
export type ScaleDownMode = (typeof ScaleDownMode)[keyof typeof ScaleDownMode];

export const ScaleSetEvictionPolicy = {
    /**
     * Nodes in the underlying Scale Set of the node pool are deleted when they're evicted.
     */
    Delete: "Delete",
    /**
     * Nodes in the underlying Scale Set of the node pool are set to the stopped-deallocated state upon eviction. Nodes in the stopped-deallocated state count against your compute quota and can cause issues with cluster scaling or upgrading.
     */
    Deallocate: "Deallocate",
} as const;

/**
 * This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is 'Delete'.
 */
export type ScaleSetEvictionPolicy = (typeof ScaleSetEvictionPolicy)[keyof typeof ScaleSetEvictionPolicy];

export const ScaleSetPriority = {
    /**
     * Spot priority VMs will be used. There is no SLA for spot nodes. See [spot on AKS](https://docs.microsoft.com/azure/aks/spot-node-pool) for more information.
     */
    Spot: "Spot",
    /**
     * Regular VMs will be used.
     */
    Regular: "Regular",
} as const;

/**
 * The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
 */
export type ScaleSetPriority = (typeof ScaleSetPriority)[keyof typeof ScaleSetPriority];

export const SnapshotType = {
    /**
     * The snapshot is a snapshot of a node pool.
     */
    NodePool: "NodePool",
    /**
     * The snapshot is a snapshot of a managed cluster.
     */
    ManagedCluster: "ManagedCluster",
} as const;

/**
 * The type of a snapshot. The default is NodePool.
 */
export type SnapshotType = (typeof SnapshotType)[keyof typeof SnapshotType];

export const UpdateMode = {
    /**
     * Autoscaler never changes pod resources but provides recommendations.
     */
    Off: "Off",
    /**
     * Autoscaler only assigns resources on pod creation and doesn't change them during the lifetime of the pod.
     */
    Initial: "Initial",
    /**
     * Autoscaler assigns resources on pod creation and updates pods that need further scaling during their lifetime by deleting and recreating.
     */
    Recreate: "Recreate",
    /**
     * Autoscaler chooses the update mode. Autoscaler currently does the same as Recreate. In the future, it may take advantage of restart-free mechanisms once they are available.
     */
    Auto: "Auto",
} as const;

/**
 * Each update mode level is a superset of the lower levels. Off<Initial<Recreate<=Auto. For example: if UpdateMode is Initial, it means VPA sets the recommended resources in the VerticalPodAutoscaler Custom Resource (from UpdateMode Off) and also assigns resources on pod creation (from Initial). The default value is Off.
 */
export type UpdateMode = (typeof UpdateMode)[keyof typeof UpdateMode];

export const UpgradeChannel = {
    /**
     * Automatically upgrade the cluster to the latest supported patch release on the latest supported minor version. In cases where the cluster is at a version of Kubernetes that is at an N-2 minor version where N is the latest supported minor version, the cluster first upgrades to the latest supported patch version on N-1 minor version. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster first is upgraded to 1.18.6, then is upgraded to 1.19.1.
     */
    Rapid: "rapid",
    /**
     * Automatically upgrade the cluster to the latest supported patch release on minor version N-1, where N is the latest supported minor version. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster is upgraded to 1.18.6.
     */
    Stable: "stable",
    /**
     * Automatically upgrade the cluster to the latest supported patch version when it becomes available while keeping the minor version the same. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster is upgraded to 1.17.9.
     */
    Patch: "patch",
    /**
     * Automatically upgrade the node image to the latest version available. Microsoft provides patches and new images for image nodes frequently (usually weekly), but your running nodes won't get the new images unless you do a node image upgrade. Turning on the node-image channel will automatically update your node images whenever a new version is available.
     */
    Node_image: "node-image",
    /**
     * Disables auto-upgrades and keeps the cluster at its current version of Kubernetes.
     */
    None: "none",
} as const;

/**
 * For more information see [setting the AKS cluster auto-upgrade channel](https://docs.microsoft.com/azure/aks/upgrade-cluster#set-auto-upgrade-channel).
 */
export type UpgradeChannel = (typeof UpgradeChannel)[keyof typeof UpgradeChannel];

export const WeekDay = {
    Sunday: "Sunday",
    Monday: "Monday",
    Tuesday: "Tuesday",
    Wednesday: "Wednesday",
    Thursday: "Thursday",
    Friday: "Friday",
    Saturday: "Saturday",
} as const;

/**
 * The day of the week.
 */
export type WeekDay = (typeof WeekDay)[keyof typeof WeekDay];

export const WorkloadRuntime = {
    /**
     * Nodes will use Kubelet to run standard OCI container workloads.
     */
    OCIContainer: "OCIContainer",
    /**
     * Nodes will use Krustlet to run WASM workloads using the WASI provider (Preview).
     */
    WasmWasi: "WasmWasi",
} as const;

/**
 * Determines the type of workload a node can run.
 */
export type WorkloadRuntime = (typeof WorkloadRuntime)[keyof typeof WorkloadRuntime];
