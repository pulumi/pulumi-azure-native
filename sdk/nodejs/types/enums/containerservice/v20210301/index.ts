// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AgentPoolMode = {
    System: "System",
    User: "User",
} as const;

/**
 * AgentPoolMode represents mode of an agent pool
 */
export type AgentPoolMode = (typeof AgentPoolMode)[keyof typeof AgentPoolMode];

export const AgentPoolType = {
    VirtualMachineScaleSets: "VirtualMachineScaleSets",
    AvailabilitySet: "AvailabilitySet",
} as const;

/**
 * AgentPoolType represents types of an agent pool
 */
export type AgentPoolType = (typeof AgentPoolType)[keyof typeof AgentPoolType];

export const ConnectionStatus = {
    Pending: "Pending",
    Approved: "Approved",
    Rejected: "Rejected",
    Disconnected: "Disconnected",
} as const;

/**
 * The private link service connection status.
 */
export type ConnectionStatus = (typeof ConnectionStatus)[keyof typeof ConnectionStatus];

export const Expander = {
    Least_waste: "least-waste",
    Most_pods: "most-pods",
    Priority: "priority",
    Random: "random",
} as const;

export type Expander = (typeof Expander)[keyof typeof Expander];

export const ExtendedLocationTypes = {
    EdgeZone: "EdgeZone",
} as const;

/**
 * The type of the extended location.
 */
export type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];

export const GPUInstanceProfile = {
    MIG1g: "MIG1g",
    MIG2g: "MIG2g",
    MIG3g: "MIG3g",
    MIG4g: "MIG4g",
    MIG7g: "MIG7g",
} as const;

/**
 * GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU. Supported values are MIG1g, MIG2g, MIG3g, MIG4g and MIG7g.
 */
export type GPUInstanceProfile = (typeof GPUInstanceProfile)[keyof typeof GPUInstanceProfile];

export const KubeletDiskType = {
    OS: "OS",
    Temporary: "Temporary",
} as const;

/**
 * KubeletDiskType determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using the OS disk for data.
 */
export type KubeletDiskType = (typeof KubeletDiskType)[keyof typeof KubeletDiskType];

export const LicenseType = {
    None: "None",
    Windows_Server: "Windows_Server",
} as const;

/**
 * The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs.
 */
export type LicenseType = (typeof LicenseType)[keyof typeof LicenseType];

export const LoadBalancerSku = {
    Standard: "standard",
    Basic: "basic",
} as const;

/**
 * The load balancer sku for the managed cluster.
 */
export type LoadBalancerSku = (typeof LoadBalancerSku)[keyof typeof LoadBalancerSku];

export const ManagedClusterSKUName = {
    Basic: "Basic",
} as const;

/**
 * Name of a managed cluster SKU.
 */
export type ManagedClusterSKUName = (typeof ManagedClusterSKUName)[keyof typeof ManagedClusterSKUName];

export const ManagedClusterSKUTier = {
    Paid: "Paid",
    Free: "Free",
} as const;

/**
 * Tier of a managed cluster SKU.
 */
export type ManagedClusterSKUTier = (typeof ManagedClusterSKUTier)[keyof typeof ManagedClusterSKUTier];

export const NetworkMode = {
    Transparent: "transparent",
    Bridge: "bridge",
} as const;

/**
 * Network mode used for building Kubernetes network.
 */
export type NetworkMode = (typeof NetworkMode)[keyof typeof NetworkMode];

export const NetworkPlugin = {
    Azure: "azure",
    Kubenet: "kubenet",
} as const;

/**
 * Network plugin used for building Kubernetes network.
 */
export type NetworkPlugin = (typeof NetworkPlugin)[keyof typeof NetworkPlugin];

export const NetworkPolicy = {
    Calico: "calico",
    Azure: "azure",
} as const;

/**
 * Network policy used for building Kubernetes network.
 */
export type NetworkPolicy = (typeof NetworkPolicy)[keyof typeof NetworkPolicy];

export const OSDiskType = {
    Managed: "Managed",
    Ephemeral: "Ephemeral",
} as const;

/**
 * OS disk type to be used for machines in a given agent pool. Allowed values are 'Ephemeral' and 'Managed'. If unspecified, defaults to 'Ephemeral' when the VM supports ephemeral OS and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation.
 */
export type OSDiskType = (typeof OSDiskType)[keyof typeof OSDiskType];

export const OSSKU = {
    Ubuntu: "Ubuntu",
    CBLMariner: "CBLMariner",
} as const;

/**
 * OsSKU to be used to specify os sku. Choose from Ubuntu(default) and CBLMariner for Linux OSType. Not applicable to Windows OSType.
 */
export type OSSKU = (typeof OSSKU)[keyof typeof OSSKU];

export const OSType = {
    Linux: "Linux",
    Windows: "Windows",
} as const;

/**
 * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
 */
export type OSType = (typeof OSType)[keyof typeof OSType];

export const OutboundType = {
    LoadBalancer: "loadBalancer",
    UserDefinedRouting: "userDefinedRouting",
} as const;

/**
 * The outbound (egress) routing method.
 */
export type OutboundType = (typeof OutboundType)[keyof typeof OutboundType];

export const ResourceIdentityType = {
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    None: "None",
} as const;

/**
 * The type of identity used for the managed cluster. Type 'SystemAssigned' will use an implicitly created identity in master components and an auto-created user assigned identity in MC_ resource group in agent nodes. Type 'None' will not use MSI for the managed cluster, service principal will be used instead.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];

export const ScaleSetEvictionPolicy = {
    Delete: "Delete",
    Deallocate: "Deallocate",
} as const;

/**
 * ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale set. Default to Delete.
 */
export type ScaleSetEvictionPolicy = (typeof ScaleSetEvictionPolicy)[keyof typeof ScaleSetEvictionPolicy];

export const ScaleSetPriority = {
    Spot: "Spot",
    Regular: "Regular",
} as const;

/**
 * ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular.
 */
export type ScaleSetPriority = (typeof ScaleSetPriority)[keyof typeof ScaleSetPriority];

export const UpgradeChannel = {
    Rapid: "rapid",
    Stable: "stable",
    Patch: "patch",
    Node_image: "node-image",
    None: "none",
} as const;

/**
 * upgrade channel for auto upgrade.
 */
export type UpgradeChannel = (typeof UpgradeChannel)[keyof typeof UpgradeChannel];

export const WeekDay = {
    Sunday: "Sunday",
    Monday: "Monday",
    Tuesday: "Tuesday",
    Wednesday: "Wednesday",
    Thursday: "Thursday",
    Friday: "Friday",
    Saturday: "Saturday",
} as const;

/**
 * A day in a week.
 */
export type WeekDay = (typeof WeekDay)[keyof typeof WeekDay];
