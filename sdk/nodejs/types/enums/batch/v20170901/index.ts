// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AutoUserScope = {
    Task: "Task",
    Pool: "Pool",
} as const;

/**
 * pool - specifies that the task runs as the common auto user account which is created on every node in a pool. task - specifies that the service should create a new user for the task. The default value is task.
 */
export type AutoUserScope = (typeof AutoUserScope)[keyof typeof AutoUserScope];

export const CachingType = {
    None: "None",
    ReadOnly: "ReadOnly",
    ReadWrite: "ReadWrite",
} as const;

/**
 * Default value is none.
 */
export type CachingType = (typeof CachingType)[keyof typeof CachingType];

export const CertificateFormat = {
    Pfx: "Pfx",
    Cer: "Cer",
} as const;

/**
 * The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
 */
export type CertificateFormat = (typeof CertificateFormat)[keyof typeof CertificateFormat];

export const CertificateStoreLocation = {
    CurrentUser: "CurrentUser",
    LocalMachine: "LocalMachine",
} as const;

/**
 * The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
 */
export type CertificateStoreLocation = (typeof CertificateStoreLocation)[keyof typeof CertificateStoreLocation];

export const CertificateVisibility = {
    StartTask: "StartTask",
    Task: "Task",
    RemoteUser: "RemoteUser",
} as const;

export type CertificateVisibility = (typeof CertificateVisibility)[keyof typeof CertificateVisibility];

export const ComputeNodeDeallocationOption = {
    Requeue: "Requeue",
    Terminate: "Terminate",
    TaskCompletion: "TaskCompletion",
    RetainedData: "RetainedData",
} as const;

/**
 * If omitted, the default value is Requeue.
 */
export type ComputeNodeDeallocationOption = (typeof ComputeNodeDeallocationOption)[keyof typeof ComputeNodeDeallocationOption];

export const ComputeNodeFillType = {
    Spread: "Spread",
    Pack: "Pack",
} as const;

export type ComputeNodeFillType = (typeof ComputeNodeFillType)[keyof typeof ComputeNodeFillType];

export const ElevationLevel = {
    NonAdmin: "NonAdmin",
    Admin: "Admin",
} as const;

/**
 * nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
 */
export type ElevationLevel = (typeof ElevationLevel)[keyof typeof ElevationLevel];

export const InboundEndpointProtocol = {
    TCP: "TCP",
    UDP: "UDP",
} as const;

export type InboundEndpointProtocol = (typeof InboundEndpointProtocol)[keyof typeof InboundEndpointProtocol];

export const InterNodeCommunicationState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
 */
export type InterNodeCommunicationState = (typeof InterNodeCommunicationState)[keyof typeof InterNodeCommunicationState];

export const NetworkSecurityGroupRuleAccess = {
    Allow: "Allow",
    Deny: "Deny",
} as const;

export type NetworkSecurityGroupRuleAccess = (typeof NetworkSecurityGroupRuleAccess)[keyof typeof NetworkSecurityGroupRuleAccess];

export const PoolAllocationMode = {
    BatchService: "BatchService",
    UserSubscription: "UserSubscription",
} as const;

/**
 * The pool allocation mode also affects how clients may authenticate to the Batch Service API. If the mode is BatchService, clients may authenticate using access keys or Azure Active Directory. If the mode is UserSubscription, clients must use Azure Active Directory. The default is BatchService.
 */
export type PoolAllocationMode = (typeof PoolAllocationMode)[keyof typeof PoolAllocationMode];

export const StorageAccountType = {
    Standard_LRS: "Standard_LRS",
    Premium_LRS: "Premium_LRS",
} as const;

/**
 * If omitted, the default is "Standard_LRS". Values are:
 *
 *  Standard_LRS - The data disk should use standard locally redundant storage.
 *  Premium_LRS - The data disk should use premium locally redundant storage.
 */
export type StorageAccountType = (typeof StorageAccountType)[keyof typeof StorageAccountType];
