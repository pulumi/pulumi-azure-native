// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// Export sub-modules:
import * as v20220101preview from "./v20220101preview";

export {
    v20220101preview,
};

export const AccessMode = {
    ReadOnly: "ReadOnly",
    ReadWrite: "ReadWrite",
} as const;

/**
 * Access mode for storage
 */
export type AccessMode = (typeof AccessMode)[keyof typeof AccessMode];

export const ActiveRevisionsMode = {
    Multiple: "multiple",
    Single: "single",
} as const;

/**
 * ActiveRevisionsMode controls how active revisions are handled for the Container app:
 * <list><item>Multiple: multiple revisions can be active. If no value if provided, this is the default</item><item>Single: Only one revision can be active at a time. Revision weights can not be used in this mode</item></list>
 */
export type ActiveRevisionsMode = (typeof ActiveRevisionsMode)[keyof typeof ActiveRevisionsMode];

export const AppProtocol = {
    Http: "http",
    Grpc: "grpc",
} as const;

/**
 * Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
 */
export type AppProtocol = (typeof AppProtocol)[keyof typeof AppProtocol];

export const AuthConfigState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * <code>Enabled</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>Disabled</code>.
 */
export type AuthConfigState = (typeof AuthConfigState)[keyof typeof AuthConfigState];

export const BindingType = {
    Disabled: "Disabled",
    SniEnabled: "SniEnabled",
} as const;

/**
 * Custom Domain binding type.
 */
export type BindingType = (typeof BindingType)[keyof typeof BindingType];

export const DisableWwwAuthenticateMode = {
    True: "True",
    False: "False",
} as const;

/**
 * <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
 */
export type DisableWwwAuthenticateMode = (typeof DisableWwwAuthenticateMode)[keyof typeof DisableWwwAuthenticateMode];

export const IdentityProviderState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * <code>Disabled</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>Enabled</code>.
 */
export type IdentityProviderState = (typeof IdentityProviderState)[keyof typeof IdentityProviderState];

export const IngressTransportMethod = {
    Auto: "auto",
    Http: "http",
    Http2: "http2",
} as const;

/**
 * Ingress transport protocol
 */
export type IngressTransportMethod = (typeof IngressTransportMethod)[keyof typeof IngressTransportMethod];

export const ManagedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned",
} as const;

/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];

export const PreserveUrlFragmentsForLoginsMode = {
    True: "True",
    False: "False",
} as const;

/**
 * <code>True</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>False</code>.
 */
export type PreserveUrlFragmentsForLoginsMode = (typeof PreserveUrlFragmentsForLoginsMode)[keyof typeof PreserveUrlFragmentsForLoginsMode];

export const RequireHttpsMode = {
    True: "True",
    False: "False",
} as const;

/**
 * <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
 */
export type RequireHttpsMode = (typeof RequireHttpsMode)[keyof typeof RequireHttpsMode];

export const StorageType = {
    AzureFile: "AzureFile",
    EmptyDir: "EmptyDir",
} as const;

/**
 * Storage type for the volume. If not provided, use EmptyDir.
 */
export type StorageType = (typeof StorageType)[keyof typeof StorageType];

export const Type = {
    Liveness: "liveness",
    Readiness: "readiness",
    Startup: "startup",
} as const;

/**
 * The type of probe.
 */
export type Type = (typeof Type)[keyof typeof Type];

export const UnauthenticatedClientAction = {
    RedirectToLoginPage: "RedirectToLoginPage",
    AllowAnonymous: "AllowAnonymous",
    Return401: "Return401",
    Return403: "Return403",
} as const;

/**
 * The action to take when an unauthenticated client attempts to access the app.
 */
export type UnauthenticatedClientAction = (typeof UnauthenticatedClientAction)[keyof typeof UnauthenticatedClientAction];
