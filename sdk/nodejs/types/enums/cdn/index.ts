// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// Export sub-modules:
import * as v20200901 from "./v20200901";
import * as v20230501 from "./v20230501";

export {
    v20200901,
    v20230501,
};

export const AFDEndpointProtocols = {
    Http: "Http",
    Https: "Https",
} as const;

export type AFDEndpointProtocols = (typeof AFDEndpointProtocols)[keyof typeof AFDEndpointProtocols];

export const ActionType = {
    Allow: "Allow",
    Block: "Block",
    Log: "Log",
    Redirect: "Redirect",
} as const;

export type ActionType = (typeof ActionType)[keyof typeof ActionType];

export const AfdCertificateType = {
    CustomerCertificate: "CustomerCertificate",
    ManagedCertificate: "ManagedCertificate",
    AzureFirstPartyManagedCertificate: "AzureFirstPartyManagedCertificate",
} as const;

export type AfdCertificateType = (typeof AfdCertificateType)[keyof typeof AfdCertificateType];

export const AfdMinimumTlsVersion = {
    TLS10: "TLS10",
    TLS12: "TLS12",
} as const;

export type AfdMinimumTlsVersion = (typeof AfdMinimumTlsVersion)[keyof typeof AfdMinimumTlsVersion];

export const AfdQueryStringCachingBehavior = {
    IgnoreQueryString: "IgnoreQueryString",
    UseQueryString: "UseQueryString",
    IgnoreSpecifiedQueryStrings: "IgnoreSpecifiedQueryStrings",
    IncludeSpecifiedQueryStrings: "IncludeSpecifiedQueryStrings",
} as const;

export type AfdQueryStringCachingBehavior = (typeof AfdQueryStringCachingBehavior)[keyof typeof AfdQueryStringCachingBehavior];

export const Algorithm = {
    SHA256: "SHA256",
} as const;

export type Algorithm = (typeof Algorithm)[keyof typeof Algorithm];

export const AutoGeneratedDomainNameLabelScope = {
    TenantReuse: "TenantReuse",
    SubscriptionReuse: "SubscriptionReuse",
    ResourceGroupReuse: "ResourceGroupReuse",
    NoReuse: "NoReuse",
} as const;

export type AutoGeneratedDomainNameLabelScope = (typeof AutoGeneratedDomainNameLabelScope)[keyof typeof AutoGeneratedDomainNameLabelScope];

export const CacheBehavior = {
    BypassCache: "BypassCache",
    Override: "Override",
    SetIfMissing: "SetIfMissing",
} as const;

export type CacheBehavior = (typeof CacheBehavior)[keyof typeof CacheBehavior];

export const CacheType = {
    All: "All",
} as const;

export type CacheType = (typeof CacheType)[keyof typeof CacheType];

export const ClientPortOperator = {
    Any: "Any",
    Equal: "Equal",
    Contains: "Contains",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    RegEx: "RegEx",
} as const;

export type ClientPortOperator = (typeof ClientPortOperator)[keyof typeof ClientPortOperator];

export const CookiesOperator = {
    Any: "Any",
    Equal: "Equal",
    Contains: "Contains",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    RegEx: "RegEx",
} as const;

export type CookiesOperator = (typeof CookiesOperator)[keyof typeof CookiesOperator];

export const CustomRuleEnabledState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
} as const;

export type CustomRuleEnabledState = (typeof CustomRuleEnabledState)[keyof typeof CustomRuleEnabledState];

export const DeliveryRuleAction = {
    CacheExpiration: "CacheExpiration",
    CacheKeyQueryString: "CacheKeyQueryString",
    ModifyRequestHeader: "ModifyRequestHeader",
    ModifyResponseHeader: "ModifyResponseHeader",
    UrlRedirect: "UrlRedirect",
    UrlRewrite: "UrlRewrite",
    UrlSigning: "UrlSigning",
    OriginGroupOverride: "OriginGroupOverride",
    RouteConfigurationOverride: "RouteConfigurationOverride",
} as const;

export type DeliveryRuleAction = (typeof DeliveryRuleAction)[keyof typeof DeliveryRuleAction];

export const DestinationProtocol = {
    MatchRequest: "MatchRequest",
    Http: "Http",
    Https: "Https",
} as const;

export type DestinationProtocol = (typeof DestinationProtocol)[keyof typeof DestinationProtocol];

export const EnabledState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

export type EnabledState = (typeof EnabledState)[keyof typeof EnabledState];

export const ForwardingProtocol = {
    HttpOnly: "HttpOnly",
    HttpsOnly: "HttpsOnly",
    MatchRequest: "MatchRequest",
} as const;

export type ForwardingProtocol = (typeof ForwardingProtocol)[keyof typeof ForwardingProtocol];

export const GeoFilterActions = {
    Block: "Block",
    Allow: "Allow",
} as const;

export type GeoFilterActions = (typeof GeoFilterActions)[keyof typeof GeoFilterActions];

export const HeaderAction = {
    Append: "Append",
    Overwrite: "Overwrite",
    Delete: "Delete",
} as const;

export type HeaderAction = (typeof HeaderAction)[keyof typeof HeaderAction];

export const HealthProbeRequestType = {
    NotSet: "NotSet",
    GET: "GET",
    HEAD: "HEAD",
} as const;

export type HealthProbeRequestType = (typeof HealthProbeRequestType)[keyof typeof HealthProbeRequestType];

export const HostNameOperator = {
    Any: "Any",
    Equal: "Equal",
    Contains: "Contains",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    RegEx: "RegEx",
} as const;

export type HostNameOperator = (typeof HostNameOperator)[keyof typeof HostNameOperator];

export const HttpVersionOperator = {
    Equal: "Equal",
} as const;

export type HttpVersionOperator = (typeof HttpVersionOperator)[keyof typeof HttpVersionOperator];

export const HttpsRedirect = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

export type HttpsRedirect = (typeof HttpsRedirect)[keyof typeof HttpsRedirect];

export const IsDeviceOperator = {
    Equal: "Equal",
} as const;

export type IsDeviceOperator = (typeof IsDeviceOperator)[keyof typeof IsDeviceOperator];

export const LinkToDefaultDomain = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

export type LinkToDefaultDomain = (typeof LinkToDefaultDomain)[keyof typeof LinkToDefaultDomain];

export const ManagedRuleEnabledState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
} as const;

export type ManagedRuleEnabledState = (typeof ManagedRuleEnabledState)[keyof typeof ManagedRuleEnabledState];

export const ManagedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned",
} as const;

export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];

export const MatchProcessingBehavior = {
    Continue: "Continue",
    Stop: "Stop",
} as const;

export type MatchProcessingBehavior = (typeof MatchProcessingBehavior)[keyof typeof MatchProcessingBehavior];

export const MatchVariable = {
    RemoteAddress: "RemoteAddress",
    RequestMethod: "RequestMethod",
    QueryString: "QueryString",
    PostArgs: "PostArgs",
    RequestUri: "RequestUri",
    RequestHeader: "RequestHeader",
    RequestBody: "RequestBody",
    RequestScheme: "RequestScheme",
    UrlPath: "UrlPath",
    UrlFileExtension: "UrlFileExtension",
    UrlFileName: "UrlFileName",
    HttpVersion: "HttpVersion",
    Cookies: "Cookies",
    IsDevice: "IsDevice",
    SocketAddr: "SocketAddr",
    ClientPort: "ClientPort",
    ServerPort: "ServerPort",
    HostName: "HostName",
    SslProtocol: "SslProtocol",
} as const;

export type MatchVariable = (typeof MatchVariable)[keyof typeof MatchVariable];

export const Operator = {
    Any: "Any",
    IPMatch: "IPMatch",
    GeoMatch: "GeoMatch",
    Equal: "Equal",
    Contains: "Contains",
    LessThan: "LessThan",
    GreaterThan: "GreaterThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    RegEx: "RegEx",
} as const;

export type Operator = (typeof Operator)[keyof typeof Operator];

export const OptimizationType = {
    GeneralWebDelivery: "GeneralWebDelivery",
    GeneralMediaStreaming: "GeneralMediaStreaming",
    VideoOnDemandMediaStreaming: "VideoOnDemandMediaStreaming",
    LargeFileDownload: "LargeFileDownload",
    DynamicSiteAcceleration: "DynamicSiteAcceleration",
} as const;

export type OptimizationType = (typeof OptimizationType)[keyof typeof OptimizationType];

export const ParamIndicator = {
    Expires: "Expires",
    KeyId: "KeyId",
    Signature: "Signature",
} as const;

export type ParamIndicator = (typeof ParamIndicator)[keyof typeof ParamIndicator];

export const PolicyEnabledState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
} as const;

export type PolicyEnabledState = (typeof PolicyEnabledState)[keyof typeof PolicyEnabledState];

export const PolicyMode = {
    Prevention: "Prevention",
    Detection: "Detection",
} as const;

export type PolicyMode = (typeof PolicyMode)[keyof typeof PolicyMode];

export const PostArgsOperator = {
    Any: "Any",
    Equal: "Equal",
    Contains: "Contains",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    RegEx: "RegEx",
} as const;

export type PostArgsOperator = (typeof PostArgsOperator)[keyof typeof PostArgsOperator];

export const ProbeProtocol = {
    NotSet: "NotSet",
    Http: "Http",
    Https: "Https",
} as const;

export type ProbeProtocol = (typeof ProbeProtocol)[keyof typeof ProbeProtocol];

export const QueryStringBehavior = {
    Include: "Include",
    IncludeAll: "IncludeAll",
    Exclude: "Exclude",
    ExcludeAll: "ExcludeAll",
} as const;

export type QueryStringBehavior = (typeof QueryStringBehavior)[keyof typeof QueryStringBehavior];

export const QueryStringCachingBehavior = {
    IgnoreQueryString: "IgnoreQueryString",
    BypassCaching: "BypassCaching",
    UseQueryString: "UseQueryString",
    NotSet: "NotSet",
} as const;

export type QueryStringCachingBehavior = (typeof QueryStringCachingBehavior)[keyof typeof QueryStringCachingBehavior];

export const QueryStringOperator = {
    Any: "Any",
    Equal: "Equal",
    Contains: "Contains",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    RegEx: "RegEx",
} as const;

export type QueryStringOperator = (typeof QueryStringOperator)[keyof typeof QueryStringOperator];

export const RedirectType = {
    Moved: "Moved",
    Found: "Found",
    TemporaryRedirect: "TemporaryRedirect",
    PermanentRedirect: "PermanentRedirect",
} as const;

export type RedirectType = (typeof RedirectType)[keyof typeof RedirectType];

export const RemoteAddressOperator = {
    Any: "Any",
    IPMatch: "IPMatch",
    GeoMatch: "GeoMatch",
} as const;

export type RemoteAddressOperator = (typeof RemoteAddressOperator)[keyof typeof RemoteAddressOperator];

export const RequestBodyOperator = {
    Any: "Any",
    Equal: "Equal",
    Contains: "Contains",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    RegEx: "RegEx",
} as const;

export type RequestBodyOperator = (typeof RequestBodyOperator)[keyof typeof RequestBodyOperator];

export const RequestHeaderOperator = {
    Any: "Any",
    Equal: "Equal",
    Contains: "Contains",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    RegEx: "RegEx",
} as const;

export type RequestHeaderOperator = (typeof RequestHeaderOperator)[keyof typeof RequestHeaderOperator];

export const RequestMethodOperator = {
    Equal: "Equal",
} as const;

export type RequestMethodOperator = (typeof RequestMethodOperator)[keyof typeof RequestMethodOperator];

export const RequestUriOperator = {
    Any: "Any",
    Equal: "Equal",
    Contains: "Contains",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    RegEx: "RegEx",
} as const;

export type RequestUriOperator = (typeof RequestUriOperator)[keyof typeof RequestUriOperator];

export const ResponseBasedDetectedErrorTypes = {
    None: "None",
    TcpErrorsOnly: "TcpErrorsOnly",
    TcpAndHttpErrors: "TcpAndHttpErrors",
} as const;

export type ResponseBasedDetectedErrorTypes = (typeof ResponseBasedDetectedErrorTypes)[keyof typeof ResponseBasedDetectedErrorTypes];

export const RuleCacheBehavior = {
    HonorOrigin: "HonorOrigin",
    OverrideAlways: "OverrideAlways",
    OverrideIfOriginMissing: "OverrideIfOriginMissing",
} as const;

export type RuleCacheBehavior = (typeof RuleCacheBehavior)[keyof typeof RuleCacheBehavior];

export const RuleIsCompressionEnabled = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

export type RuleIsCompressionEnabled = (typeof RuleIsCompressionEnabled)[keyof typeof RuleIsCompressionEnabled];

export const RuleQueryStringCachingBehavior = {
    IgnoreQueryString: "IgnoreQueryString",
    UseQueryString: "UseQueryString",
    IgnoreSpecifiedQueryStrings: "IgnoreSpecifiedQueryStrings",
    IncludeSpecifiedQueryStrings: "IncludeSpecifiedQueryStrings",
} as const;

export type RuleQueryStringCachingBehavior = (typeof RuleQueryStringCachingBehavior)[keyof typeof RuleQueryStringCachingBehavior];

export const SecretType = {
    UrlSigningKey: "UrlSigningKey",
    CustomerCertificate: "CustomerCertificate",
    ManagedCertificate: "ManagedCertificate",
    AzureFirstPartyManagedCertificate: "AzureFirstPartyManagedCertificate",
} as const;

export type SecretType = (typeof SecretType)[keyof typeof SecretType];

export const SecurityPolicyType = {
    WebApplicationFirewall: "WebApplicationFirewall",
} as const;

export type SecurityPolicyType = (typeof SecurityPolicyType)[keyof typeof SecurityPolicyType];

export const ServerPortOperator = {
    Any: "Any",
    Equal: "Equal",
    Contains: "Contains",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    RegEx: "RegEx",
} as const;

export type ServerPortOperator = (typeof ServerPortOperator)[keyof typeof ServerPortOperator];

export const SharedPrivateLinkResourceStatus = {
    Pending: "Pending",
    Approved: "Approved",
    Rejected: "Rejected",
    Disconnected: "Disconnected",
    Timeout: "Timeout",
} as const;

export type SharedPrivateLinkResourceStatus = (typeof SharedPrivateLinkResourceStatus)[keyof typeof SharedPrivateLinkResourceStatus];

export const SkuName = {
    Standard_Verizon: "Standard_Verizon",
    Premium_Verizon: "Premium_Verizon",
    Custom_Verizon: "Custom_Verizon",
    Standard_Akamai: "Standard_Akamai",
    Standard_ChinaCdn: "Standard_ChinaCdn",
    Standard_Microsoft: "Standard_Microsoft",
    Standard_AzureFrontDoor: "Standard_AzureFrontDoor",
    Premium_AzureFrontDoor: "Premium_AzureFrontDoor",
    Standard_955BandWidth_ChinaCdn: "Standard_955BandWidth_ChinaCdn",
    Standard_AvgBandWidth_ChinaCdn: "Standard_AvgBandWidth_ChinaCdn",
    StandardPlus_ChinaCdn: "StandardPlus_ChinaCdn",
    StandardPlus_955BandWidth_ChinaCdn: "StandardPlus_955BandWidth_ChinaCdn",
    StandardPlus_AvgBandWidth_ChinaCdn: "StandardPlus_AvgBandWidth_ChinaCdn",
} as const;

export type SkuName = (typeof SkuName)[keyof typeof SkuName];

export const SocketAddrOperator = {
    Any: "Any",
    IPMatch: "IPMatch",
} as const;

export type SocketAddrOperator = (typeof SocketAddrOperator)[keyof typeof SocketAddrOperator];

export const SslProtocol = {
    TLSv1: "TLSv1",
    TLSv1_1: "TLSv1.1",
    TLSv1_2: "TLSv1.2",
} as const;

export type SslProtocol = (typeof SslProtocol)[keyof typeof SslProtocol];

export const SslProtocolOperator = {
    Equal: "Equal",
} as const;

export type SslProtocolOperator = (typeof SslProtocolOperator)[keyof typeof SslProtocolOperator];

export const Transform = {
    Lowercase: "Lowercase",
    Uppercase: "Uppercase",
    Trim: "Trim",
    UrlDecode: "UrlDecode",
    UrlEncode: "UrlEncode",
    RemoveNulls: "RemoveNulls",
} as const;

export type Transform = (typeof Transform)[keyof typeof Transform];

export const TransformType = {
    Lowercase: "Lowercase",
    Uppercase: "Uppercase",
    Trim: "Trim",
    UrlDecode: "UrlDecode",
    UrlEncode: "UrlEncode",
    RemoveNulls: "RemoveNulls",
} as const;

export type TransformType = (typeof TransformType)[keyof typeof TransformType];

export const UrlFileExtensionOperator = {
    Any: "Any",
    Equal: "Equal",
    Contains: "Contains",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    RegEx: "RegEx",
} as const;

export type UrlFileExtensionOperator = (typeof UrlFileExtensionOperator)[keyof typeof UrlFileExtensionOperator];

export const UrlFileNameOperator = {
    Any: "Any",
    Equal: "Equal",
    Contains: "Contains",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    RegEx: "RegEx",
} as const;

export type UrlFileNameOperator = (typeof UrlFileNameOperator)[keyof typeof UrlFileNameOperator];

export const UrlPathOperator = {
    Any: "Any",
    Equal: "Equal",
    Contains: "Contains",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    Wildcard: "Wildcard",
    RegEx: "RegEx",
} as const;

export type UrlPathOperator = (typeof UrlPathOperator)[keyof typeof UrlPathOperator];

export const WafMatchVariable = {
    RemoteAddr: "RemoteAddr",
    SocketAddr: "SocketAddr",
    RequestMethod: "RequestMethod",
    RequestHeader: "RequestHeader",
    RequestUri: "RequestUri",
    QueryString: "QueryString",
    RequestBody: "RequestBody",
    Cookies: "Cookies",
    PostArgs: "PostArgs",
} as const;

export type WafMatchVariable = (typeof WafMatchVariable)[keyof typeof WafMatchVariable];
