// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AFDEndpointProtocols = {
    Http: "Http",
    Https: "Https",
} as const;

/**
 * Supported protocols for the customer's endpoint.
 */
export type AFDEndpointProtocols = (typeof AFDEndpointProtocols)[keyof typeof AFDEndpointProtocols];

export const AFDRouteGrpcState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * Whether or not gRPC is enabled on this route. Permitted values are 'Enabled' or 'Disabled'
 */
export type AFDRouteGrpcState = (typeof AFDRouteGrpcState)[keyof typeof AFDRouteGrpcState];

export const AfdCertificateType = {
    CustomerCertificate: "CustomerCertificate",
    ManagedCertificate: "ManagedCertificate",
    AzureFirstPartyManagedCertificate: "AzureFirstPartyManagedCertificate",
} as const;

/**
 * Defines the source of the SSL certificate.
 */
export type AfdCertificateType = (typeof AfdCertificateType)[keyof typeof AfdCertificateType];

export const AfdCipherSuiteSetType = {
    Customized: "Customized",
    TLS10_2019: "TLS10_2019",
    TLS12_2022: "TLS12_2022",
    TLS12_2023: "TLS12_2023",
} as const;

/**
 * cipher suite set type that will be used for Https
 */
export type AfdCipherSuiteSetType = (typeof AfdCipherSuiteSetType)[keyof typeof AfdCipherSuiteSetType];

export const AfdCustomizedCipherSuiteForTls10 = {
    ECDHE_RSA_AES128_SHA: "ECDHE_RSA_AES128_SHA",
    ECDHE_RSA_AES256_SHA: "ECDHE_RSA_AES256_SHA",
    AES256_SHA: "AES256_SHA",
    AES128_SHA: "AES128_SHA",
} as const;

export type AfdCustomizedCipherSuiteForTls10 = (typeof AfdCustomizedCipherSuiteForTls10)[keyof typeof AfdCustomizedCipherSuiteForTls10];

export const AfdCustomizedCipherSuiteForTls12 = {
    ECDHE_RSA_AES128_GCM_SHA256: "ECDHE_RSA_AES128_GCM_SHA256",
    ECDHE_RSA_AES256_GCM_SHA384: "ECDHE_RSA_AES256_GCM_SHA384",
    DHE_RSA_AES256_GCM_SHA384: "DHE_RSA_AES256_GCM_SHA384",
    DHE_RSA_AES128_GCM_SHA256: "DHE_RSA_AES128_GCM_SHA256",
    ECDHE_RSA_AES128_SHA256: "ECDHE_RSA_AES128_SHA256",
    ECDHE_RSA_AES256_SHA384: "ECDHE_RSA_AES256_SHA384",
    AES256_GCM_SHA384: "AES256_GCM_SHA384",
    AES128_GCM_SHA256: "AES128_GCM_SHA256",
    AES256_SHA256: "AES256_SHA256",
    AES128_SHA256: "AES128_SHA256",
} as const;

export type AfdCustomizedCipherSuiteForTls12 = (typeof AfdCustomizedCipherSuiteForTls12)[keyof typeof AfdCustomizedCipherSuiteForTls12];

export const AfdCustomizedCipherSuiteForTls13 = {
    TLS_AES_128_GCM_SHA256: "TLS_AES_128_GCM_SHA256",
    TLS_AES_256_GCM_SHA384: "TLS_AES_256_GCM_SHA384",
} as const;

export type AfdCustomizedCipherSuiteForTls13 = (typeof AfdCustomizedCipherSuiteForTls13)[keyof typeof AfdCustomizedCipherSuiteForTls13];

export const AfdMinimumTlsVersion = {
    TLS10: "TLS10",
    TLS12: "TLS12",
    TLS13: "TLS13",
} as const;

/**
 * TLS protocol version that will be used for Https when cipherSuiteSetType is Customized.
 */
export type AfdMinimumTlsVersion = (typeof AfdMinimumTlsVersion)[keyof typeof AfdMinimumTlsVersion];

export const AfdQueryStringCachingBehavior = {
    IgnoreQueryString: "IgnoreQueryString",
    UseQueryString: "UseQueryString",
    IgnoreSpecifiedQueryStrings: "IgnoreSpecifiedQueryStrings",
    IncludeSpecifiedQueryStrings: "IncludeSpecifiedQueryStrings",
} as const;

/**
 * Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore specific query strings, cache every request with a unique URL, or cache specific query strings.
 */
export type AfdQueryStringCachingBehavior = (typeof AfdQueryStringCachingBehavior)[keyof typeof AfdQueryStringCachingBehavior];

export const EnabledState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
 */
export type EnabledState = (typeof EnabledState)[keyof typeof EnabledState];

export const ForwardingProtocol = {
    HttpOnly: "HttpOnly",
    HttpsOnly: "HttpsOnly",
    MatchRequest: "MatchRequest",
} as const;

/**
 * Protocol this rule will use when forwarding traffic to backends.
 */
export type ForwardingProtocol = (typeof ForwardingProtocol)[keyof typeof ForwardingProtocol];

export const HttpsRedirect = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
 */
export type HttpsRedirect = (typeof HttpsRedirect)[keyof typeof HttpsRedirect];

export const LinkToDefaultDomain = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * whether this route will be linked to the default endpoint domain.
 */
export type LinkToDefaultDomain = (typeof LinkToDefaultDomain)[keyof typeof LinkToDefaultDomain];

export const TunnelType = {
    HttpConnect: "HttpConnect",
} as const;

/**
 * Protocol this tunnel will use for allowing traffic to backends.
 */
export type TunnelType = (typeof TunnelType)[keyof typeof TunnelType];
