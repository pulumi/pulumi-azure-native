// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// Export sub-modules:
import * as v20231101preview from "./v20231101preview";
import * as v20240901preview from "./v20240901preview";

export {
    v20231101preview,
    v20240901preview,
};

export const AuthenticationMethod = {
    /**
     * The user authentication method is anonymous.
     */
    Anonymous: "Anonymous",
    /**
     * The user authentication method is an x509 certificate.
     */
    Certificate: "Certificate",
    /**
     * The user authentication method is a username and password.
     */
    UsernamePassword: "UsernamePassword",
} as const;

/**
 * The method to authenticate the user of the client at the server.
 */
export type AuthenticationMethod = (typeof AuthenticationMethod)[keyof typeof AuthenticationMethod];

export const DataPointsObservabilityMode = {
    /**
     * No mapping to OpenTelemetry.
     */
    None: "none",
    /**
     * Map as counter to OpenTelemetry.
     */
    Counter: "counter",
    /**
     * Map as gauge to OpenTelemetry.
     */
    Gauge: "gauge",
    /**
     * Map as histogram to OpenTelemetry.
     */
    Histogram: "histogram",
    /**
     * Map as log to OpenTelemetry.
     */
    Log: "log",
} as const;

/**
 * An indication of how the data point should be mapped to OpenTelemetry.
 */
export type DataPointsObservabilityMode = (typeof DataPointsObservabilityMode)[keyof typeof DataPointsObservabilityMode];

export const EventsObservabilityMode = {
    /**
     * No mapping to OpenTelemetry.
     */
    None: "none",
    /**
     * Map as log to OpenTelemetry.
     */
    Log: "log",
} as const;

/**
 * An indication of how the event should be mapped to OpenTelemetry.
 */
export type EventsObservabilityMode = (typeof EventsObservabilityMode)[keyof typeof EventsObservabilityMode];

export const Format = {
    /**
     * JSON Schema version draft 7 format
     */
    JsonSchema_draft7: "JsonSchema/draft-07",
    /**
     * Delta format
     */
    Delta_1_0: "Delta/1.0",
} as const;

/**
 * Format of the schema.
 */
export type Format = (typeof Format)[keyof typeof Format];

export const SchemaType = {
    /**
     * Message Schema schema type
     */
    MessageSchema: "MessageSchema",
} as const;

/**
 * Type of the schema.
 */
export type SchemaType = (typeof SchemaType)[keyof typeof SchemaType];

export const SystemAssignedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
} as const;

/**
 * Type of managed service identity (either system assigned, or none).
 */
export type SystemAssignedServiceIdentityType = (typeof SystemAssignedServiceIdentityType)[keyof typeof SystemAssignedServiceIdentityType];

export const TopicRetainType = {
    /**
     * Retain the messages.
     */
    Keep: "Keep",
    /**
     * Never retain messages.
     */
    Never: "Never",
} as const;

/**
 * When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
 */
export type TopicRetainType = (typeof TopicRetainType)[keyof typeof TopicRetainType];

export const UserAuthenticationMode = {
    /**
     * The user authentication method is anonymous.
     */
    Anonymous: "Anonymous",
    /**
     * The user authentication method is an x509 certificate.
     */
    Certificate: "Certificate",
    /**
     * The user authentication method is a username and password.
     */
    UsernamePassword: "UsernamePassword",
} as const;

/**
 * Defines the method to authenticate the user of the client at the server.
 */
export type UserAuthenticationMode = (typeof UserAuthenticationMode)[keyof typeof UserAuthenticationMode];
