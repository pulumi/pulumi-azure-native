// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const CatalogCollationType = {
    DATABASE_DEFAULT: "DATABASE_DEFAULT",
    SQL_Latin1_General_CP1_CI_AS: "SQL_Latin1_General_CP1_CI_AS",
} as const;

/**
 * Collation of the metadata catalog.
 */
export type CatalogCollationType = (typeof CatalogCollationType)[keyof typeof CatalogCollationType];

export const CreateMode = {
    Default: "Default",
    Copy: "Copy",
    Secondary: "Secondary",
    OnlineSecondary: "OnlineSecondary",
    PointInTimeRestore: "PointInTimeRestore",
    Restore: "Restore",
    Recovery: "Recovery",
    RestoreExternalBackup: "RestoreExternalBackup",
    RestoreExternalBackupSecondary: "RestoreExternalBackupSecondary",
    RestoreLongTermRetentionBackup: "RestoreLongTermRetentionBackup",
} as const;

/**
 * Specifies the mode of database creation.
 * 
 * Default: regular database creation.
 * 
 * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
 * 
 * Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
 * 
 * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
 * 
 * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
 * 
 * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
 * 
 * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
 * 
 * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
 */
export type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];

export const JobScheduleType = {
    Once: "Once",
    Recurring: "Recurring",
} as const;

/**
 * Schedule interval type
 */
export type JobScheduleType = (typeof JobScheduleType)[keyof typeof JobScheduleType];

export const JobStepActionSource = {
    Inline: "Inline",
} as const;

/**
 * The source of the action to execute.
 */
export type JobStepActionSource = (typeof JobStepActionSource)[keyof typeof JobStepActionSource];

export const JobStepActionType = {
    TSql: "TSql",
} as const;

/**
 * Type of action being executed by the job step.
 */
export type JobStepActionType = (typeof JobStepActionType)[keyof typeof JobStepActionType];

export const JobStepOutputType = {
    SqlDatabase: "SqlDatabase",
} as const;

/**
 * The output destination type.
 */
export type JobStepOutputType = (typeof JobStepOutputType)[keyof typeof JobStepOutputType];

export const JobTargetGroupMembershipType = {
    Include: "Include",
    Exclude: "Exclude",
} as const;

/**
 * Whether the target is included or excluded from the group.
 */
export type JobTargetGroupMembershipType = (typeof JobTargetGroupMembershipType)[keyof typeof JobTargetGroupMembershipType];

export const JobTargetType = {
    TargetGroup: "TargetGroup",
    SqlDatabase: "SqlDatabase",
    SqlElasticPool: "SqlElasticPool",
    SqlShardMap: "SqlShardMap",
    SqlServer: "SqlServer",
} as const;

/**
 * The target type.
 */
export type JobTargetType = (typeof JobTargetType)[keyof typeof JobTargetType];

export const ManagedDatabaseCreateMode = {
    Default: "Default",
    RestoreExternalBackup: "RestoreExternalBackup",
    PointInTimeRestore: "PointInTimeRestore",
    Recovery: "Recovery",
    RestoreLongTermRetentionBackup: "RestoreLongTermRetentionBackup",
} as const;

/**
 * Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup. RecoverableDatabaseId must be specified as the recoverable database resource ID to restore.
 */
export type ManagedDatabaseCreateMode = (typeof ManagedDatabaseCreateMode)[keyof typeof ManagedDatabaseCreateMode];

export const ManagedInstanceAdministratorType = {
    ActiveDirectory: "ActiveDirectory",
} as const;

/**
 * Type of the managed instance administrator.
 */
export type ManagedInstanceAdministratorType = (typeof ManagedInstanceAdministratorType)[keyof typeof ManagedInstanceAdministratorType];

export const SampleName = {
    AdventureWorksLT: "AdventureWorksLT",
    WideWorldImportersStd: "WideWorldImportersStd",
    WideWorldImportersFull: "WideWorldImportersFull",
} as const;

/**
 * The name of the sample schema to apply when creating this database.
 */
export type SampleName = (typeof SampleName)[keyof typeof SampleName];

export const SensitivityLabelRank = {
    None: "None",
    Low: "Low",
    Medium: "Medium",
    High: "High",
    Critical: "Critical",
} as const;

export type SensitivityLabelRank = (typeof SensitivityLabelRank)[keyof typeof SensitivityLabelRank];
