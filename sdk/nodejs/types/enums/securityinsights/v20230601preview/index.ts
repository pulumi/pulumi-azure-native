// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AttackTactic = {
    Reconnaissance: "Reconnaissance",
    ResourceDevelopment: "ResourceDevelopment",
    InitialAccess: "InitialAccess",
    Execution: "Execution",
    Persistence: "Persistence",
    PrivilegeEscalation: "PrivilegeEscalation",
    DefenseEvasion: "DefenseEvasion",
    CredentialAccess: "CredentialAccess",
    Discovery: "Discovery",
    LateralMovement: "LateralMovement",
    Collection: "Collection",
    Exfiltration: "Exfiltration",
    CommandAndControl: "CommandAndControl",
    Impact: "Impact",
    PreAttack: "PreAttack",
    ImpairProcessControl: "ImpairProcessControl",
    InhibitResponseFunction: "InhibitResponseFunction",
} as const;

/**
 * The severity for alerts created by this alert rule.
 */
export type AttackTactic = (typeof AttackTactic)[keyof typeof AttackTactic];

export const EntityTimelineKind = {
    /**
     * activity
     */
    Activity: "Activity",
    /**
     * bookmarks
     */
    Bookmark: "Bookmark",
    /**
     * security alerts
     */
    SecurityAlert: "SecurityAlert",
    /**
     * anomaly
     */
    Anomaly: "Anomaly",
} as const;

/**
 * The entity query kind
 */
export type EntityTimelineKind = (typeof EntityTimelineKind)[keyof typeof EntityTimelineKind];

export const FileFormat = {
    /**
     * A CSV file.
     */
    CSV: "CSV",
    /**
     * A JSON file.
     */
    JSON: "JSON",
    /**
     * A file of other format.
     */
    Unspecified: "Unspecified",
} as const;

/**
 * The format of the file
 */
export type FileFormat = (typeof FileFormat)[keyof typeof FileFormat];

export const FileImportContentType = {
    /**
     * File containing records with the core fields of an indicator, plus the observables to construct the STIX pattern.
     */
    BasicIndicator: "BasicIndicator",
    /**
     * File containing STIX indicators.
     */
    StixIndicator: "StixIndicator",
    /**
     * File containing other records.
     */
    Unspecified: "Unspecified",
} as const;

/**
 * The content type of this file.
 */
export type FileImportContentType = (typeof FileImportContentType)[keyof typeof FileImportContentType];

export const Flag = {
    True: "true",
    False: "false",
} as const;

/**
 * Flag indicates if this package is in preview.
 */
export type Flag = (typeof Flag)[keyof typeof Flag];

export const HypothesisStatus = {
    Unknown: "Unknown",
    Invalidated: "Invalidated",
    Validated: "Validated",
} as const;

/**
 * The hypothesis status of the hunt.
 */
export type HypothesisStatus = (typeof HypothesisStatus)[keyof typeof HypothesisStatus];

export const IncidentTaskStatus = {
    /**
     * A new task
     */
    New: "New",
    /**
     * A completed task
     */
    Completed: "Completed",
} as const;

export type IncidentTaskStatus = (typeof IncidentTaskStatus)[keyof typeof IncidentTaskStatus];

export const IngestionMode = {
    /**
     * No records should be ingested when invalid records are detected.
     */
    IngestOnlyIfAllAreValid: "IngestOnlyIfAllAreValid",
    /**
     * Valid records should still be ingested when invalid records are detected.
     */
    IngestAnyValidRecords: "IngestAnyValidRecords",
    /**
     * Unspecified
     */
    Unspecified: "Unspecified",
} as const;

/**
 * Describes how to ingest the records in the file.
 */
export type IngestionMode = (typeof IngestionMode)[keyof typeof IngestionMode];

export const Kind = {
    DataConnector: "DataConnector",
    DataType: "DataType",
    Workbook: "Workbook",
    WorkbookTemplate: "WorkbookTemplate",
    Playbook: "Playbook",
    PlaybookTemplate: "PlaybookTemplate",
    AnalyticsRuleTemplate: "AnalyticsRuleTemplate",
    AnalyticsRule: "AnalyticsRule",
    HuntingQuery: "HuntingQuery",
    InvestigationQuery: "InvestigationQuery",
    Parser: "Parser",
    Watchlist: "Watchlist",
    WatchlistTemplate: "WatchlistTemplate",
    Solution: "Solution",
    AzureFunction: "AzureFunction",
    LogicAppsCustomConnector: "LogicAppsCustomConnector",
    AutomationRule: "AutomationRule",
} as const;

/**
 * Type of the content item we depend on
 */
export type Kind = (typeof Kind)[keyof typeof Kind];

export const Mode = {
    /**
     * The workspace manager configuration is enabled
     */
    Enabled: "Enabled",
    /**
     * The workspace manager configuration is disabled
     */
    Disabled: "Disabled",
} as const;

/**
 * The current mode of the workspace manager configuration
 */
export type Mode = (typeof Mode)[keyof typeof Mode];

export const Operator = {
    AND: "AND",
    OR: "OR",
} as const;

/**
 * Operator used for list of dependencies in criteria array.
 */
export type Operator = (typeof Operator)[keyof typeof Operator];

export const OwnerType = {
    /**
     * The hunt owner type is unknown
     */
    Unknown: "Unknown",
    /**
     * The hunt owner type is an AAD user
     */
    User: "User",
    /**
     * The hunt owner type is an AAD group
     */
    Group: "Group",
} as const;

/**
 * The type of the owner the hunt is assigned to.
 */
export type OwnerType = (typeof OwnerType)[keyof typeof OwnerType];

export const PackageKind = {
    Solution: "Solution",
    Standalone: "Standalone",
} as const;

/**
 * the packageKind of the package contains this template
 */
export type PackageKind = (typeof PackageKind)[keyof typeof PackageKind];

export const SourceKind = {
    LocalWorkspace: "LocalWorkspace",
    Community: "Community",
    Solution: "Solution",
    SourceRepository: "SourceRepository",
} as const;

/**
 * Source type of the content
 */
export type SourceKind = (typeof SourceKind)[keyof typeof SourceKind];

export const Status = {
    New: "New",
    Active: "Active",
    Closed: "Closed",
} as const;

/**
 * The status of the hunt.
 */
export type Status = (typeof Status)[keyof typeof Status];

export const SupportTier = {
    Microsoft: "Microsoft",
    Partner: "Partner",
    Community: "Community",
} as const;

/**
 * Type of support for content item
 */
export type SupportTier = (typeof SupportTier)[keyof typeof SupportTier];
