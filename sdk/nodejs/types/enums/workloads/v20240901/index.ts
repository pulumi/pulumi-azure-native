// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const DiskSkuName = {
    /**
     * Standard LRS Disk SKU.
     */
    Standard_LRS: "Standard_LRS",
    /**
     * Premium_LRS Disk SKU.
     */
    Premium_LRS: "Premium_LRS",
    /**
     * StandardSSD_LRS Disk SKU.
     */
    StandardSSD_LRS: "StandardSSD_LRS",
    /**
     * UltraSSD_LRS Disk SKU.
     */
    UltraSSD_LRS: "UltraSSD_LRS",
    /**
     * Premium_ZRS Disk SKU.
     */
    Premium_ZRS: "Premium_ZRS",
    /**
     * StandardSSD_ZRS Disk SKU.
     */
    StandardSSD_ZRS: "StandardSSD_ZRS",
    /**
     * PremiumV2_LRS Disk SKU.
     */
    PremiumV2_LRS: "PremiumV2_LRS",
} as const;

/**
 * Defines the disk sku name.
 */
export type DiskSkuName = (typeof DiskSkuName)[keyof typeof DiskSkuName];

export const FileShareConfigurationType = {
    /**
     * Skip creating the file share.
     */
    Skip: "Skip",
    /**
     * Fileshare will be created and mounted by service.
     */
    CreateAndMount: "CreateAndMount",
    /**
     * Existing fileshare provided will be mounted by service.
     */
    Mount: "Mount",
} as const;

/**
 * The type of file share config, eg: Mount/CreateAndMount/Skip.
 */
export type FileShareConfigurationType = (typeof FileShareConfigurationType)[keyof typeof FileShareConfigurationType];

export const ManagedResourcesNetworkAccessType = {
    /**
     * Managed resources will be deployed with public network access enabled.
     */
    Public: "Public",
    /**
     * Managed resources will be deployed with public network access disabled.
     */
    Private: "Private",
} as const;

/**
 * Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
 */
export type ManagedResourcesNetworkAccessType = (typeof ManagedResourcesNetworkAccessType)[keyof typeof ManagedResourcesNetworkAccessType];

export const NamingPatternType = {
    /**
     * Full resource names that will be created by service.
     */
    FullResourceName: "FullResourceName",
} as const;

/**
 * The pattern type to be used for resource naming.
 */
export type NamingPatternType = (typeof NamingPatternType)[keyof typeof NamingPatternType];

export const OSType = {
    /**
     * Linux OS Type.
     */
    Linux: "Linux",
    /**
     * Windows OS Type.
     */
    Windows: "Windows",
} as const;

/**
 * The OS Type
 */
export type OSType = (typeof OSType)[keyof typeof OSType];

export const SAPConfigurationType = {
    /**
     * SAP system will be deployed by service. No OS configurations will be done.
     */
    Deployment: "Deployment",
    /**
     * Existing SAP system will be registered.
     */
    Discovery: "Discovery",
    /**
     * SAP system will be deployed by service. OS configurations will be done.
     */
    DeploymentWithOSConfig: "DeploymentWithOSConfig",
} as const;

/**
 * The configuration type. Eg: Deployment/Discovery
 */
export type SAPConfigurationType = (typeof SAPConfigurationType)[keyof typeof SAPConfigurationType];

export const SAPDatabaseScaleMethod = {
    /**
     * ScaleUp Hana Database deployment type
     */
    ScaleUp: "ScaleUp",
} as const;

/**
 * The DB scale method.
 */
export type SAPDatabaseScaleMethod = (typeof SAPDatabaseScaleMethod)[keyof typeof SAPDatabaseScaleMethod];

export const SAPDatabaseType = {
    /**
     * HANA Database type of SAP system.
     */
    HANA: "HANA",
    /**
     * DB2 database type of the SAP system.
     */
    DB2: "DB2",
} as const;

/**
 * The database type.
 */
export type SAPDatabaseType = (typeof SAPDatabaseType)[keyof typeof SAPDatabaseType];

export const SAPDeploymentType = {
    /**
     * SAP Single server deployment type.
     */
    SingleServer: "SingleServer",
    /**
     * SAP Distributed deployment type.
     */
    ThreeTier: "ThreeTier",
} as const;

/**
 * The deployment type. Eg: SingleServer/ThreeTier
 */
export type SAPDeploymentType = (typeof SAPDeploymentType)[keyof typeof SAPDeploymentType];

export const SAPEnvironmentType = {
    /**
     * Non Production SAP system.
     */
    NonProd: "NonProd",
    /**
     * Production SAP system.
     */
    Prod: "Prod",
} as const;

/**
 * Defines the environment type - Production/Non Production.
 */
export type SAPEnvironmentType = (typeof SAPEnvironmentType)[keyof typeof SAPEnvironmentType];

export const SAPHighAvailabilityType = {
    /**
     * HA deployment with availability sets.
     */
    AvailabilitySet: "AvailabilitySet",
    /**
     * HA deployment with availability zones.
     */
    AvailabilityZone: "AvailabilityZone",
} as const;

/**
 * The high availability type.
 */
export type SAPHighAvailabilityType = (typeof SAPHighAvailabilityType)[keyof typeof SAPHighAvailabilityType];

export const SAPProductType = {
    /**
     * SAP Product ECC.
     */
    ECC: "ECC",
    /**
     * SAP Product S4HANA.
     */
    S4HANA: "S4HANA",
    /**
     * SAP Products other than the ones listed.
     */
    Other: "Other",
} as const;

/**
 * Defines the SAP Product type.
 */
export type SAPProductType = (typeof SAPProductType)[keyof typeof SAPProductType];

export const SAPSoftwareInstallationType = {
    /**
     * SAP Install managed by service.
     */
    ServiceInitiated: "ServiceInitiated",
    /**
     * SAP Install without OS Config.
     */
    SAPInstallWithoutOSConfig: "SAPInstallWithoutOSConfig",
    /**
     * External software installation type.
     */
    External: "External",
} as const;

/**
 * The SAP software installation type.
 */
export type SAPSoftwareInstallationType = (typeof SAPSoftwareInstallationType)[keyof typeof SAPSoftwareInstallationType];

export const SAPVirtualInstanceIdentityType = {
    /**
     * No managed identity.
     */
    None: "None",
    /**
     * User assigned managed identity.
     */
    UserAssigned: "UserAssigned",
} as const;

/**
 * The type of managed identity assigned to this resource.
 */
export type SAPVirtualInstanceIdentityType = (typeof SAPVirtualInstanceIdentityType)[keyof typeof SAPVirtualInstanceIdentityType];
