// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// Export sub-modules:
import * as v20180301preview from "./v20180301preview";
import * as v20181119 from "./v20181119";
import * as v20190501 from "./v20190501";
import * as v20190601 from "./v20190601";
import * as v20191101 from "./v20191101";
import * as v20200101 from "./v20200101";
import * as v20200218preview from "./v20200218preview";
import * as v20200301 from "./v20200301";
import * as v20200401 from "./v20200401";
import * as v20200501preview from "./v20200501preview";
import * as v20200515preview from "./v20200515preview";
import * as v20200601 from "./v20200601";
import * as v20200801 from "./v20200801";
import * as v20200901preview from "./v20200901preview";
import * as v20210101 from "./v20210101";
import * as v20210301preview from "./v20210301preview";
import * as v20210401 from "./v20210401";
import * as v20210701 from "./v20210701";
import * as v20220101preview from "./v20220101preview";
import * as v20220201preview from "./v20220201preview";
import * as v20220501 from "./v20220501";
import * as v20220601preview from "./v20220601preview";

export {
    v20180301preview,
    v20181119,
    v20190501,
    v20190601,
    v20191101,
    v20200101,
    v20200218preview,
    v20200301,
    v20200401,
    v20200501preview,
    v20200515preview,
    v20200601,
    v20200801,
    v20200901preview,
    v20210101,
    v20210301preview,
    v20210401,
    v20210701,
    v20220101preview,
    v20220201preview,
    v20220501,
    v20220601preview,
};

export const ApplicationSharingPolicy = {
    Personal: "Personal",
    Shared: "Shared",
} as const;

/**
 * Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
 */
export type ApplicationSharingPolicy = (typeof ApplicationSharingPolicy)[keyof typeof ApplicationSharingPolicy];

export const BatchLoggingLevel = {
    Info: "Info",
    Warning: "Warning",
    Debug: "Debug",
} as const;

/**
 * Logging level for batch inference operation.
 */
export type BatchLoggingLevel = (typeof BatchLoggingLevel)[keyof typeof BatchLoggingLevel];

export const BatchOutputAction = {
    SummaryOnly: "SummaryOnly",
    AppendRow: "AppendRow",
} as const;

/**
 * Indicates how the output will be organized.
 */
export type BatchOutputAction = (typeof BatchOutputAction)[keyof typeof BatchOutputAction];

export const ClusterPurpose = {
    FastProd: "FastProd",
    DenseProd: "DenseProd",
    DevTest: "DevTest",
} as const;

/**
 * Intended usage of the cluster
 */
export type ClusterPurpose = (typeof ClusterPurpose)[keyof typeof ClusterPurpose];

export const ComputeEnvironmentType = {
    ACI: "ACI",
    AKS: "AKS",
} as const;

/**
 * The compute environment type for the service.
 */
export type ComputeEnvironmentType = (typeof ComputeEnvironmentType)[keyof typeof ComputeEnvironmentType];

export const ComputeInstanceAuthorizationType = {
    Personal: "personal",
} as const;

/**
 * The Compute Instance Authorization type. Available values are personal (default).
 */
export type ComputeInstanceAuthorizationType = (typeof ComputeInstanceAuthorizationType)[keyof typeof ComputeInstanceAuthorizationType];

export const ComputeType = {
    AKS: "AKS",
    AmlCompute: "AmlCompute",
    ComputeInstance: "ComputeInstance",
    DataFactory: "DataFactory",
    VirtualMachine: "VirtualMachine",
    HDInsight: "HDInsight",
    Databricks: "Databricks",
    DataLakeAnalytics: "DataLakeAnalytics",
} as const;

/**
 * The type of compute
 */
export type ComputeType = (typeof ComputeType)[keyof typeof ComputeType];

export const ContainerType = {
    StorageInitializer: "StorageInitializer",
    InferenceServer: "InferenceServer",
} as const;

/**
 * The type of container to retrieve logs from.
 */
export type ContainerType = (typeof ContainerType)[keyof typeof ContainerType];

export const DataBindingMode = {
    Mount: "Mount",
    Download: "Download",
    Upload: "Upload",
    ReadOnlyMount: "ReadOnlyMount",
    ReadWriteMount: "ReadWriteMount",
    Direct: "Direct",
    EvalMount: "EvalMount",
    EvalDownload: "EvalDownload",
} as const;

/**
 * Mechanism for data movement to datastore.
 */
export type DataBindingMode = (typeof DataBindingMode)[keyof typeof DataBindingMode];

export const DatasetType = {
    Tabular: "tabular",
    File: "file",
} as const;

/**
 * Specifies dataset type.
 */
export type DatasetType = (typeof DatasetType)[keyof typeof DatasetType];

export const DatastoreTypeArm = {
    Blob: "blob",
    Adls: "adls",
    Adls_gen2: "adls-gen2",
    Dbfs: "dbfs",
    File: "file",
    Mysqldb: "mysqldb",
    Sqldb: "sqldb",
    Psqldb: "psqldb",
} as const;

/**
 * Specifies datastore type.
 */
export type DatastoreTypeArm = (typeof DatastoreTypeArm)[keyof typeof DatastoreTypeArm];

export const DistributionType = {
    PyTorch: "PyTorch",
    TensorFlow: "TensorFlow",
    Mpi: "Mpi",
} as const;

/**
 * [Required] Specifies the type of distribution framework.
 */
export type DistributionType = (typeof DistributionType)[keyof typeof DistributionType];

export const DockerSpecificationType = {
    Build: "Build",
    Image: "Image",
} as const;

/**
 * [Required] Docker specification must be either Build or Image
 */
export type DockerSpecificationType = (typeof DockerSpecificationType)[keyof typeof DockerSpecificationType];

export const EarlyTerminationPolicyType = {
    Bandit: "Bandit",
    MedianStopping: "MedianStopping",
    TruncationSelection: "TruncationSelection",
} as const;

/**
 * [Required] Name of policy configuration
 */
export type EarlyTerminationPolicyType = (typeof EarlyTerminationPolicyType)[keyof typeof EarlyTerminationPolicyType];

export const EncryptionStatus = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * Indicates whether or not the encryption is enabled for the workspace.
 */
export type EncryptionStatus = (typeof EncryptionStatus)[keyof typeof EncryptionStatus];

export const EndpointAuthMode = {
    AMLToken: "AMLToken",
    Key: "Key",
    AADToken: "AADToken",
} as const;

/**
 * [Required] Inference endpoint authentication mode type
 */
export type EndpointAuthMode = (typeof EndpointAuthMode)[keyof typeof EndpointAuthMode];

export const EndpointComputeType = {
    Managed: "Managed",
    K8S: "K8S",
    AzureMLCompute: "AzureMLCompute",
} as const;

/**
 * [Required] The compute type of the endpoint.
 */
export type EndpointComputeType = (typeof EndpointComputeType)[keyof typeof EndpointComputeType];

export const Goal = {
    Minimize: "Minimize",
    Maximize: "Maximize",
} as const;

/**
 * [Required] Defines supported metric goals for hyperparameter tuning
 */
export type Goal = (typeof Goal)[keyof typeof Goal];

export const Header = {
    All_files_have_same_headers: "all_files_have_same_headers",
    Only_first_file_has_headers: "only_first_file_has_headers",
    No_headers: "no_headers",
    Combine_all_files_headers: "combine_all_files_headers",
} as const;

/**
 * Header type.
 */
export type Header = (typeof Header)[keyof typeof Header];

export const IdentityConfigurationType = {
    Managed: "Managed",
    AMLToken: "AMLToken",
} as const;

/**
 * [Required] Specifies the type of identity framework.
 */
export type IdentityConfigurationType = (typeof IdentityConfigurationType)[keyof typeof IdentityConfigurationType];

export const ImageAnnotationType = {
    Classification: "Classification",
    BoundingBox: "BoundingBox",
    InstanceSegmentation: "InstanceSegmentation",
} as const;

/**
 * Annotation type of image labeling tasks.
 */
export type ImageAnnotationType = (typeof ImageAnnotationType)[keyof typeof ImageAnnotationType];

export const JobType = {
    Command: "Command",
    Sweep: "Sweep",
    Labeling: "Labeling",
} as const;

/**
 * [Required] Specifies the type of job.
 */
export type JobType = (typeof JobType)[keyof typeof JobType];

export const LinkedServiceLinkType = {
    Synapse: "Synapse",
} as const;

/**
 * Type of the link target.
 */
export type LinkedServiceLinkType = (typeof LinkedServiceLinkType)[keyof typeof LinkedServiceLinkType];

export const MediaType = {
    Image: "Image",
    Text: "Text",
} as const;

/**
 * Media type of data asset.
 */
export type MediaType = (typeof MediaType)[keyof typeof MediaType];

export const OperatingSystemType = {
    Linux: "Linux",
    Windows: "Windows",
} as const;

/**
 * The OS type the Environment.
 */
export type OperatingSystemType = (typeof OperatingSystemType)[keyof typeof OperatingSystemType];

export const OsType = {
    Linux: "Linux",
    Windows: "Windows",
} as const;

/**
 * Compute OS Type
 */
export type OsType = (typeof OsType)[keyof typeof OsType];

export const PrivateEndpointServiceConnectionStatus = {
    Pending: "Pending",
    Approved: "Approved",
    Rejected: "Rejected",
    Disconnected: "Disconnected",
    Timeout: "Timeout",
} as const;

/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];

export const ReferenceType = {
    Id: "Id",
    DataPath: "DataPath",
    OutputPath: "OutputPath",
} as const;

/**
 * [Required] Specifies the type of asset reference.
 */
export type ReferenceType = (typeof ReferenceType)[keyof typeof ReferenceType];

export const RemoteLoginPortPublicAccess = {
    Enabled: "Enabled",
    Disabled: "Disabled",
    NotSpecified: "NotSpecified",
} as const;

/**
 * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
 */
export type RemoteLoginPortPublicAccess = (typeof RemoteLoginPortPublicAccess)[keyof typeof RemoteLoginPortPublicAccess];

export const ResourceIdentityAssignment = {
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned",
    None: "None",
} as const;

/**
 * Defines values for a ResourceIdentity's type.
 */
export type ResourceIdentityAssignment = (typeof ResourceIdentityAssignment)[keyof typeof ResourceIdentityAssignment];

export const ResourceIdentityType = {
    SystemAssigned: "SystemAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned",
    UserAssigned: "UserAssigned",
    None: "None",
} as const;

/**
 * The identity type.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];

export const SamplingAlgorithm = {
    Grid: "Grid",
    Random: "Random",
    Bayesian: "Bayesian",
} as const;

/**
 * [Required] Type of the hyperparameter sampling algorithms
 */
export type SamplingAlgorithm = (typeof SamplingAlgorithm)[keyof typeof SamplingAlgorithm];

export const ScaleType = {
    Auto: "Auto",
    Manual: "Manual",
} as const;

/**
 * [Required] Type of deployment scaling algorithm
 */
export type ScaleType = (typeof ScaleType)[keyof typeof ScaleType];

export const SourceType = {
    Delimited_files: "delimited_files",
    Json_lines_files: "json_lines_files",
    Parquet_files: "parquet_files",
} as const;

/**
 * Data source type.
 */
export type SourceType = (typeof SourceType)[keyof typeof SourceType];

export const SshPublicAccess = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
 */
export type SshPublicAccess = (typeof SshPublicAccess)[keyof typeof SshPublicAccess];

export const ValueFormat = {
    JSON: "JSON",
} as const;

/**
 * format for the workspace connection value
 */
export type ValueFormat = (typeof ValueFormat)[keyof typeof ValueFormat];

export const VariantType = {
    Control: "Control",
    Treatment: "Treatment",
} as const;

/**
 * The type of the variant.
 */
export type VariantType = (typeof VariantType)[keyof typeof VariantType];

export const VmPriority = {
    Dedicated: "Dedicated",
    LowPriority: "LowPriority",
} as const;

/**
 * Virtual Machine priority
 */
export type VmPriority = (typeof VmPriority)[keyof typeof VmPriority];
